
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПодборУдержаний") Тогда 
		ПодборУдержаний = Истина;
	КонецЕсли;	
	
	Если Параметры.Свойство("ПроверятьСвязи") Тогда 
		ПроверятьСвязи = Параметры.ПроверятьСвязи;
	КонецЕсли;	
	
	Если Параметры.Свойство("ИмяТаблицы") Тогда 
		ИмяТаблицы = Параметры.ИмяТаблицы;
	КонецЕсли;	
	
	Отбор = Неопределено;
	Если Не Параметры.Свойство("УсловияОтбора", Отбор) Тогда 
		Отбор = Новый Массив;
	КонецЕсли;	
	
	Заголовок = ?(ПодборУдержаний, НСтр("ru = 'Подбор удержаний'"), НСтр("ru = 'Подбор начислений'"));
	
	Элементы.СтраницыВидыРасчета.ТекущаяСтраница = ?(ПодборУдержаний, Элементы.СтраницаУдержания, Элементы.СтраницаНачисления);
	
	Если ПодборУдержаний Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьВидыРасчетаВАрхиве", 
			"Заголовок", НСтр("ru = 'Отображать в списке удержания, которые больше не используются'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВыбранныеВидыРасчета", 
			"Заголовок", НСтр("ru = 'Выбранные удержания'"));
		ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтотОбъект, "ПоказыватьВидыРасчетаВАрхиве",
			НСтр("ru = 'Установите флажок для того чтобы отобразить в списке все удержания, в т. ч. те, которые использовались ранее.'"));
	КонецЕсли;
	
	ЗаполнитьВидыРасчета(Параметры.МассивВидовРасчета, Отбор);
	
	УстановитьПараметрыСписков();
	УстановитьОтборСписков(Отбор);
	УстановитьОтборИспользуемых(ЭтотОбъект, ПоказыватьВидыРасчетаВАрхиве);
	
	ДобавляемыеНачисления = Новый ФиксированныйМассив(Новый Массив);
	УдаляемыеНачисления = Новый ФиксированныйМассив(Новый Массив);
	
	ПроверитьЗаполнениеСписка();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьВидыРасчетаВАрхивеПриИзменении(Элемент)
	
	УстановитьОтборИспользуемых(ЭтотОбъект, ПоказыватьВидыРасчетаВАрхиве);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверкаСвязейНачисленийНажатие(Элемент)
	
	ОткрытьФормуИсправленияСвязейНачислений(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокНачислений

&НаКлиенте
Процедура СписокНачисленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		СписокВидовРасчетаВыборНаСервере(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокУдержаний

&НаКлиенте
Процедура СписокУдержанийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		СписокВидовРасчетаВыборНаСервере(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОповеститьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВидыРасчета(МассивВидовРасчета, Отбор)
	
	ИсходныеВидыРасчета.ЗагрузитьЗначения(МассивВидовРасчета);
	ВыбранныеВидыРасчета.ЗагрузитьЗначения(МассивВидовРасчета);
	
	ВыбранныеВидыРасчета.СортироватьПоЗначению();
	
КонецПроцедуры

&НаСервере
Процедура СписокВидовРасчетаВыборНаСервере(ВидРасчета)
	
	ЭлементСписка = ВыбранныеВидыРасчета.НайтиПоЗначению(ВидРасчета);
	Если ЭлементСписка <> Неопределено Тогда
		ВыбранныеВидыРасчета.Удалить(ЭлементСписка);
	Иначе 
		ВыбранныеВидыРасчета.Добавить(ВидРасчета);
		ВыбранныеВидыРасчета.СортироватьПоЗначению();
	КонецЕсли;
	
	УстановитьПараметрыСписков();
	ПроверитьЗаполнениеСписка();
	
КонецПроцедуры

&НаСервере
Функция ИзмененныеВидыРасчетаСтруктура()
	
	ТекущиеВидыРасчета = ВыбранныеВидыРасчета.ВыгрузитьЗначения();
	МассивИсходныхВидовРасчета = ИсходныеВидыРасчета.ВыгрузитьЗначения();
	
	УдаленныеВидыРасчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивИсходныхВидовРасчета, ТекущиеВидыРасчета);
	ДобавленныеВидыРасчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(ТекущиеВидыРасчета, МассивИсходныхВидовРасчета);
	
	ИзмененныеВидыРасчета = Новый Структура;
	ИзмененныеВидыРасчета.Вставить("УдаленныеВидыРасчета", УдаленныеВидыРасчета);
	ИзмененныеВидыРасчета.Вставить("ДобавленныеВидыРасчета", ДобавленныеВидыРасчета);
	
	Возврат ИзмененныеВидыРасчета;
	
КонецФункции	

&НаСервере
Процедура УстановитьПараметрыСписков()

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНачислений, "СписокВидовРасчета", ВыбранныеВидыРасчета.ВыгрузитьЗначения());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокУдержаний, "СписокВидовРасчета", ВыбранныеВидыРасчета.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписков(Отбор)
	
	Список = ?(ПодборУдержаний, СписокУдержаний, СписокНачислений);
	Для Каждого СтрокаОтбора Из Отбор Цикл 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
			СтрокаОтбора.ЛевоеЗначение, СтрокаОтбора.ПравоеЗначение, СтрокаОтбора.ВидСравнения);
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборИспользуемых(Форма, ПоказыватьВАрхиве)
	
	Список = ?(Форма.ПодборУдержаний, Форма.СписокУдержаний, Форма.СписокНачислений);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Не ПоказыватьВАрхиве);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСписка()
	
	Если Не ПроверятьСвязи Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПланыВидовРасчета.Начисления.РезультатПроверкиНастройкиПриоритетаНачислений(ВыбранныеВидыРасчета, ИмяТаблицы);
	
	ДобавляемыеНачисления = Новый ФиксированныйМассив(РезультатПроверки.ТребуетсяДобавить);
	УдаляемыеНачисления = Новый ФиксированныйМассив(РезультатПроверки.ТребуетсяУдалить);
	
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсправлениеСвязейНаСервере(Действие)
	
	МассивВидовРасчета = ВыбранныеВидыРасчета.ВыгрузитьЗначения();
	Если Действие = "Добавить" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВидовРасчета, ДобавляемыеНачисления);
	Иначе 
		МассивВидовРасчета = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивВидовРасчета, УдаляемыеНачисления);
	КонецЕсли;
	ВыбранныеВидыРасчета.ЗагрузитьЗначения(МассивВидовРасчета);
	
	УстановитьПараметрыСписков();
	ПроверитьЗаполнениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьИЗакрыть()
	
	Если ПроверятьСвязи И ДобавляемыеНачисления.Количество() > 0 Тогда
		ОткрытьФормуИсправленияСвязейНачислений();
		Возврат;
	КонецЕсли;
	
	ОповеститьОВыборе(ИзмененныеВидыРасчетаСтруктура());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсправленияСвязейНачислений(ЗакрытьПослеИсправления = Истина)
	
	ПараметрыФормы = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыОткрытияФормыИсправленияСвязейНачислений();
	
	Если ИмяТаблицы = "ВытесняющиеВидыРасчета" Тогда 
		ПараметрыФормы.Вставить("ДобавляемыеНачисленияПриоритетВыше", Новый Массив(ДобавляемыеНачисления));
		ПараметрыФормы.Вставить("УдаляемыеНачисленияПриоритетВыше", Новый Массив(УдаляемыеНачисления));
	Иначе 
		ПараметрыФормы.Вставить("ДобавляемыеНачисленияПриоритетНиже", Новый Массив(ДобавляемыеНачисления));
		ПараметрыФормы.Вставить("УдаляемыеНачисленияПриоритетНиже", Новый Массив(УдаляемыеНачисления));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьПослеИсправления", ЗакрытьПослеИсправления);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуИсправленияСвязейНачисленийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ПланВидовРасчета.Начисления.Форма.ФормаИсправленияСвязейНачислений", ПараметрыФормы, ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсправленияСвязейНачисленийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Действие = ?(ИмяТаблицы = "ВытесняющиеВидыРасчета", Результат.ДействиеПриоритетВыше, Результат.ДействиеПриоритетНиже);
	ОбработатьИсправлениеСвязейНаСервере(Действие);
	
	Если ДополнительныеПараметры.ЗакрытьПослеИсправления Тогда 
		ОповеститьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ГруппаПроверкаСвязейНачислений", "Видимость", ПроверятьСвязи И ДобавляемыеНачисления.Количество() > 0);
	
КонецПроцедуры

#КонецОбласти
