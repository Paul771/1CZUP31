#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Организация", Организация);
	
	ЗаполнитьФизическоеЛицоПоСотруднику();
	УстановитьДоступностьОбластейПерерасчетов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Месяц", "МесяцСтрокой", Модифицированность);
	ЗаполнитьСписокДокументовНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Месяц", "МесяцСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Месяц", "МесяцСтрокой", Направление, Модифицированность);
	ЗаполнитьСписокДокументовНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Результат = Неопределено;
	Если Модифицированность И ЗаписатьПерерасчет() Тогда
		
		Модифицированность = Ложь;
		
		Результат = Новый Структура;
		Результат.Вставить("Сотрудник", Сотрудник);
		Результат.Вставить("Период", Месяц);
		
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЗаписатьПерерасчет()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЛьготыСотрудников.ДобавитьПерерасчетЛьготСотрудника(Месяц, Сотрудник, ФизическоеЛицо, Организация, ДокументНачисления, ЛьготыСотрудника);
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьСписокДокументовНачисления();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ЗаполнитьФизическоеЛицоПоСотруднику();
	ЗаполнитьСписокДокументовНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизическоеЛицоПоСотруднику()
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо")
	Иначе
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументовНачисления()
	
	Элементы.ДокументНачисления.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Месяц)
		Или Не ЗначениеЗаполнено(Сотрудник) Тогда
		
		ПрочитатьЛьготыСотрудника();
		УстановитьДоступностьОбластейПерерасчетов(ЭтаФорма);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Месяц);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(НачисленияУдержанияПоСотрудникам.Регистратор) КАК РегистраторПредставление,
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) = &Период
		|	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.ДокументНачисления.СписокВыбора.Добавить(Выборка.Регистратор, Выборка.РегистраторПредставление);
	КонецЦикла;
	
	Если Элементы.ДокументНачисления.СписокВыбора.Количество() = 1 Тогда
		ДокументНачисления = Элементы.ДокументНачисления.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ПрочитатьЛьготыСотрудника();
	УстановитьДоступностьОбластейПерерасчетов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластейПерерасчетов(Форма)
	
	ДоступностьОбластей = ЗначениеЗаполнено(Форма.Месяц) И ЗначениеЗаполнено(Форма.Сотрудник);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОбластиПерерасчетовГруппа",
		"Доступность",
		ДоступностьОбластей);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЛьготыСотрудника()
	
	ЛьготыСотрудника.Очистить();
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДокументНачисления", ДокументНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаНачала,
		|	&ДатаОкончания,
		|	&Сотрудник
		|ПОМЕСТИТЬ ВТИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.ЯвляетсяЛьготой", "=", Истина);
		
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Используется", "=", Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты", "Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ПерерасчетЛьгот.Льгота ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка,
		|	ЕСТЬNULL(ПлановыеНачисления.Начисление, ПерерасчетЛьгот.Льгота) КАК Начисление,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ПлановыеНачисления.Начисление, ПерерасчетЛьгот.Льгота) КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания КАК Порядок
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетЛьгот КАК ПерерасчетЛьгот
		|		ПО ПлановыеНачисления.Начисление = ПерерасчетЛьгот.Льгота
		|			И (ПерерасчетЛьгот.Организация = &Организация)
		|			И (ПерерасчетЛьгот.Сотрудник = &Сотрудник)
		|			И (ПерерасчетЛьгот.ПериодДействия = &Месяц)
		|			И (ПерерасчетЛьгот.Основание = НЕОПРЕДЕЛЕНО)
		|			И (ПерерасчетЛьгот.ДокументНачисления = &ДокументНачисления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛьготыСотрудника.Добавить(Выборка.Начисление, , Выборка.Пометка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


