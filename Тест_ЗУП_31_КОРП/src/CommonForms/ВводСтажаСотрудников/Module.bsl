
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ФизическоеЛицо", ФизическоеЛицо);
	Параметры.Свойство("ВидыСтажа", ВидыСтажа);
	Параметры.Свойство("ДатаСведений", ДатаСведений);
	Параметры.Свойство("Записывать", Записывать);
	Параметры.Свойство("НеобязательныеВидыСтажа", НеобязательныеВидыСтажа);
	
	Если НеобязательныеВидыСтажа = Неопределено Тогда 
		НеобязательныеВидыСтажа = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Параметры.Свойство("Сотрудник", Сотрудник);
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ДатаОтсчетаПериодическихСведений = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда 
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОНакопленныхСтажах = Новый ФиксированноеСоответствие(КадровыйУчетРасширенныйВызовСервера.СведенияОСтажахФизическогоЛица(ФизическоеЛицо, ДатаСведений));
	
	Если Параметры.Свойство("ЗаголовокФормы") И ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Строка(Параметры.ЗаголовокФормы);
	Иначе
		Заголовок = Строка(ФизическоеЛицо);
	КонецЕсли;
	
	СтажиСУправляемымРостом.ЗагрузитьЗначения(КадровыйУчетРасширенный.СтажиСУправляемымРостом());
	
	ДополнитьФорму();
	ЗаполнитьДанныеОСтаже(Параметры.ДанныеСтажей);
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтажиФизическихЛиц) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОК",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаИзменитьСведенияОСтажеСохранивТекущие",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтмена",
			"КнопкаПоУмолчанию",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаОтмена",
			"Заголовок",
			НСтр("ru='Закрыть'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ИзменитьСтажПриИзменении(Элемент)
	
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособИсчисленияСтажаПриИзменении(Элемент)
	
	ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "СпособИсчисленияСтажа", ""));
	Если Не ЗначениеЗаполнено(ИндексЭлемента) Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "СпособИсчисленияСтажаВторой", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндексЭлемента)
		И ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтаФорма, "СпособИсчисленияСтажа" + ИндексЭлемента) = 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, "ДатаПриема" + ИндексЭлемента, ДатаПриема);
		
	КонецЕсли;
	
	ОбновитьДанныеНабораФормы(Элемент);
	
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеСтажаПриИзменении(Элемент)
	
	ИндексЭлемента = 0;
	Если СтрНайти(Элемент.Имя, "Лет") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Лет", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Месяцев") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Месяцев", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Дней") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Дней", ""));
	КонецЕсли;
	
	Если ИндексЭлемента > 0 И Не ИсчисляетсяСДатыПриема(ЭтаФорма, ИндексЭлемента)
		И Не ЗначениеЗаполнено(ЭтаФорма["ДатаОтсчета" + ИндексЭлемента]) Тогда
		
		ЭтаФорма["ДатаОтсчета" + ИндексЭлемента] = ДатаСведений;
		
	КонецЕсли;
	
	ОбновитьДанныеНабораФормы(Элемент);
	
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеСтажаПрерванПриИзменении(Элемент)
	
	ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Прерван", ""));
	Если ИндексЭлемента > 0 Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "СпособИсчисленияСтажа" + ИндексЭлемента) = 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				ЭтотОбъект,
				"ДатаОтсчета" + ИндексЭлемента,
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "ДатаПриема" + ИндексЭлемента));
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				ЭтотОбъект,
				"ИсчисляетсяСДатыПриема" + ИндексЭлемента,
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				ЭтотОбъект,
				"СпособИсчисленияСтажа" + ИндексЭлемента,
				0);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, "ДатаОтсчета" + ИндексЭлемента)) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				ЭтотОбъект,
				"ДатаОтсчета" + ИндексЭлемента,
				ОбщегоНазначенияКлиент.ДатаСеанса());
			
		КонецЕсли;
		
		УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);
		ОбновитьДанныеНабораФормы(Элемент);
		УстановитьПредставлениеСтажа(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейПриИзменении(Элемент)
	
	УстановитьПодсказкуСтажа(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	НаборЗаписей = ЭтаФорма[Элемент.Имя];
	
	Запись = НаборЗаписей.Добавить();
	Запись.ДатаОтсчета = ДатаСведений;
	Запись.ФизическоеЛицо = ФизическоеЛицо;
	Запись.ВидСтажа = ВидыСтажа.Получить(Сред(Элемент.Имя, 6) - 1);
	
	Если НаборЗаписей.Количество() = 1 Тогда
		Запись.Период = ДатаОтсчетаПериодическихСведений;
	Иначе
		
		Запись.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если НаборЗаписей.Количество() > 2 Тогда
			
			ПоследняяЗапись = НаборЗаписей[НаборЗаписей.Количество() - 2];
			Если Запись.Период <= ПоследняяЗапись.Период Тогда
				Запись.Период = КонецДня(ПоследняяЗапись.Период) + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Копирование 
			Или Элемент.ТекущиеДанные.Прерван Тогда
			
			ЗаполнитьЗначенияСвойств(Запись, Элемент.ТекущиеДанные, "Лет, РазмерМесяцев, РазмерДней, Прерван");
		
		Иначе
			
			СведенияОСтажах = КадровыйУчетРасширенныйВызовСервера.СведенияОСтажахФизическогоЛица(ФизическоеЛицо, ОбщегоНазначенияКлиент.ДатаСеанса());
			СведенияОСтаже = СведенияОСтажах.Получить(Запись.ВидСтажа);
			
			Если СведенияОСтаже <> Неопределено Тогда
				Запись.Лет = СведенияОСтаже.Лет;
				Запись.РазмерМесяцев = СведенияОСтаже.Месяцев;
				Запись.РазмерДней = СведенияОСтаже.Дней;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.ТекущаяСтрока = Запись.ПолучитьИдентификатор();
	УстановитьПодсказкуСтажа(ЭтаФорма, Элемент);
	Модифицированность = Истина;
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Период <= ДатаОтсчетаПериодическихСведений Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено
			И Элемент.ТекущиеДанные.Период < ДатаОтсчетаПериодическихСведений Тогда
			
			Элемент.ТекущиеДанные.Период = ДатаОтсчетаПериодическихСведений;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейИсчисляетсяСДатыПриемаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы[СтрЗаменить(Элемент.Имя, "ИсчисляетсяСДатыПриема", "")].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДатаОтсчета = ДатаПриема;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейДатаОтсчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы[СтрЗаменить(Элемент.Имя, "ДатаОтсчета", "")].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущийНаборЗаписей = ЭтотОбъект[СтрЗаменить(Элемент.Имя, "ДатаОтсчета", "")];
		Если ТекущийНаборЗаписей.Количество() > 1 Тогда
			
			ПредыдущиеСведения = ТекущийНаборЗаписей[ТекущийНаборЗаписей.Количество() - 2];
			Если Не ПредыдущиеСведения.Прерван
				И ТекущиеДанные.ПолучитьИдентификатор() = ТекущийНаборЗаписей[ТекущийНаборЗаписей.Количество() - 1].ПолучитьИдентификатор() Тогда
				
				СведенияОСтажах = КадровыйУчетРасширенныйВызовСервера.СведенияОСтажахФизическогоЛица(ФизическоеЛицо, ТекущиеДанные.ДатаОтсчета);
				СведенияОСтаже = СведенияОСтажах.Получить(ТекущиеДанные.ВидСтажа);
				
				Если СведенияОСтаже <> Неопределено Тогда
					ТекущиеДанные.Лет = СведенияОСтаже.Лет;
					ТекущиеДанные.РазмерМесяцев = СведенияОСтаже.Месяцев;
					ТекущиеДанные.РазмерДней = СведенияОСтаже.Дней;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаборЗаписейПрерванПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы[СтрЗаменить(Элемент.Имя, "Прерван", "")].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ИсчисляетсяСДатыПриема Тогда
			
			ТекущиеДанные.ИсчисляетсяСДатыПриема = Ложь;
			
			Если ЗначениеЗаполнено(ДатаПриема) Тогда
				ТекущиеДанные.ДатаОтсчета = ДатаПриема;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОтсчета) Тогда
			ТекущиеДанные.ДатаОтсчета = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеФормы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтажей = Новый Соответствие;
	
	ДанныеСтажейВНаборы(ЭтаФорма, РасширенныйВводСтажа);
	
	Если Модифицированность Тогда 
		
		СохранитьДанныеНаСервере(Записывать);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Сотрудник", Сотрудник);
		ПараметрыОповещения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
		ПараметрыОповещения.Вставить("ДанныеСтажей", СтажиФизическихЛиц);
		
		Оповестить("ИзмененСтажФизическогоЛица", ПараметрыОповещения, ЭтотОбъект);
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСведенияОСтажеСохранивТекущие(Команда)
	
	РасширенныйВводСтажа = Не РасширенныйВводСтажа;
	Элементы.ФормаИзменитьСведенияОСтажеСохранивТекущие.Пометка = РасширенныйВводСтажа;
	
	Если РасширенныйВводСтажа Тогда
		ДанныеСтажейВНаборы(ЭтаФорма, Ложь);
	КонецЕсли;
	
	УстановитьОтображениеПолейВводаСтажа(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму()
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ТипДата = Новый ОписаниеТипов("Дата", , , КвалификаторыДаты);
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Набор" + Сч, Новый ОписаниеТипов("ТаблицаЗначений"), , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Период", ТипДата, "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидСтажа", Новый ОписаниеТипов("СправочникСсылка.ВидыСтажа, Строка"), "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОтсчета", ТипДата, "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РазмерМесяцев", ТипЧисло, "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РазмерДней", ТипЧисло, "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсчисляетсяСДатыПриема", Новый ОписаниеТипов("Булево"), "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Прерван", Новый ОписаниеТипов("Булево"), "Набор" + Сч, , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетЗаписи", Новый ОписаниеТипов("Булево"), "Набор" + Сч, , Истина));
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Лет", ТипЧисло, "Набор" + Сч, , Истина));
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаПриема" + Сч, ТипДата, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОтсчета" + Сч, ТипДата, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Лет" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Месяцев" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Дней" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсчисляетсяСДатыПриема" + Сч, Новый ОписаниеТипов("Булево"), , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Прерван" + Сч, Новый ОписаниеТипов("Булево"), , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпособИсчисленияСтажа" + Сч, ТипЧисло, , НСтр("ru = 'Исчисляется'"), Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетЗаписи" + Сч, Новый ОписаниеТипов("Булево"), , , Истина));
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено Тогда 
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИзменитьСтаж" + Сч, Новый ОписаниеТипов("Булево"), , , Истина));
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл 
		
		Если Сч > 1 Тогда
			Декорация = Элементы.Добавить("Декорация" + Сч, Тип("ДекорацияФормы"));
			Декорация.Вид = ВидДекорацииФормы.Надпись;
		КонецЕсли;
		
		ЗаголовокПоляИспользоватьСтаж = НеобязательныеВидыСтажа.Получить(ВидСтажа);
		Если ЗаголовокПоляИспользоватьСтаж <> Неопределено Тогда 
			ПолеИзменитьСтаж = Элементы.Добавить("ИзменитьСтаж" + Сч, Тип("ПолеФормы"));
			ПолеИзменитьСтаж.Заголовок = ЗаголовокПоляИспользоватьСтаж;
			ПолеИзменитьСтаж.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеИзменитьСтаж.Вид = ВидПоляФормы.ПолеФлажка;
			ПолеИзменитьСтаж.ПутьКДанным = "ИзменитьСтаж" + Сч;
			ПолеИзменитьСтаж.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменитьСтажПриИзменении");
		КонецЕсли;
		
		ГруппаВидСтажа = Элементы.Добавить("ГруппаВидСтажа" + Сч, Тип("ГруппаФормы"));
		ГруппаВидСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВидСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаВидСтажа.Заголовок = Строка(ВидСтажа);
		ГруппаВидСтажа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		РасширеннаяПодсказка = Элементы["ГруппаВидСтажа" + Сч + "РасширеннаяПодсказка"];
		РасширеннаяПодсказка.АвтомаксимальнаяШирина = Ложь;
		
		ГруппаСтраницыСтажа = Элементы.Добавить("ГруппаСтраницыСтажа" + Сч, Тип("ГруппаФормы"), ГруппаВидСтажа);
		ГруппаСтраницыСтажа.Вид = ВидГруппыФормы.Страницы;
		ГруппаСтраницыСтажа.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		ГруппаСтраница = Элементы.Добавить("ГруппаСтраницаСтажа" + Сч, Тип("ГруппаФормы"), ГруппаСтраницыСтажа);
		ГруппаСтраница.Вид = ВидГруппыФормы.Страница;
		
		ГруппаИспользованиеСтажа = Элементы.Добавить("ГруппаИспользованиеСтажа" + Сч, Тип("ГруппаФормы"), ГруппаСтраница);
		ГруппаИспользованиеСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаИспользованиеСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаИспользованиеСтажа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаИспользованиеСтажа.ОтображатьЗаголовок = Ложь;
		ГруппаИспользованиеСтажа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		ГруппаИспользованиеСтажа.Объединенная = Ложь;
		
		ГруппаДанныеСтажа = Элементы.Добавить("ГруппаДанныеСтажа" + Сч, Тип("ГруппаФормы"), ГруппаИспользованиеСтажа);
		ГруппаДанныеСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДанныеСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаДанныеСтажа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаДанныеСтажа.ОтображатьЗаголовок = Ложь;
		ГруппаДанныеСтажа.Объединенная = Ложь;
		
		ГруппаЛеваяКолонка = Элементы.Добавить("ГруппаЛеваяКолонка" + Сч, Тип("ГруппаФормы"), ГруппаДанныеСтажа);
		ГруппаЛеваяКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЛеваяКолонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЛеваяКолонка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЛеваяКолонка.ОтображатьЗаголовок = Ложь;
		ГруппаЛеваяКолонка.Объединенная = Ложь;
		
		ПолеСпособИсчисленияСтажа = Элементы.Добавить("СпособИсчисленияСтажа" + Сч, Тип("ПолеФормы"), ГруппаЛеваяКолонка);
		ПолеСпособИсчисленияСтажа.Вид = ВидПоляФормы.ПолеПереключателя;
		ПолеСпособИсчисленияСтажа.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ПолеСпособИсчисленияСтажа.КоличествоКолонок = 1;
		ПолеСпособИсчисленияСтажа.СписокВыбора.Добавить(0, НСтр("ru = 'по трудовой книжке на'"));
		ПолеСпособИсчисленияСтажа.ПутьКДанным = "СпособИсчисленияСтажа" + Сч;
		ПолеСпособИсчисленияСтажа.УстановитьДействие("ПриИзменении", "Подключаемый_СпособИсчисленияСтажаПриИзменении");
		
		ПолеСпособИсчисленияСтажа = Элементы.Добавить("СпособИсчисленияСтажаВторой" + Сч, Тип("ПолеФормы"), ГруппаЛеваяКолонка);
		ПолеСпособИсчисленияСтажа.Вид = ВидПоляФормы.ПолеПереключателя;
		ПолеСпособИсчисленияСтажа.Заголовок = НСтр("ru = 'с момента приема на работу'");
		ПолеСпособИсчисленияСтажа.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеСпособИсчисленияСтажа.КоличествоКолонок = 1;
		ПолеСпособИсчисленияСтажа.СписокВыбора.Добавить(1, НСтр("ru = 'с момента приема на работу'"));
		ПолеСпособИсчисленияСтажа.ПутьКДанным = "СпособИсчисленияСтажа" + Сч;
		ПолеСпособИсчисленияСтажа.УстановитьДействие("ПриИзменении", "Подключаемый_СпособИсчисленияСтажаПриИзменении");
		
		ГруппаПраваяКолонка = Элементы.Добавить("ГруппаПраваяКолонка" + Сч, Тип("ГруппаФормы"), ГруппаДанныеСтажа);
		ГруппаПраваяКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПраваяКолонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаПраваяКолонка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПраваяКолонка.ОтображатьЗаголовок = Ложь;
		ГруппаПраваяКолонка.Объединенная = Ложь;
		
		ГруппаСтажПоТрудовойКнижке = Элементы.Добавить("ГруппаСтажПоТрудовойКнижке" + Сч, Тип("ГруппаФормы"), ГруппаПраваяКолонка);
		ГруппаСтажПоТрудовойКнижке.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтажПоТрудовойКнижке.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтажПоТрудовойКнижке.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтажПоТрудовойКнижке.ОтображатьЗаголовок = Истина;
		
		ПолеДатаОтсчета = Элементы.Добавить("ДатаОтсчета" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеДатаОтсчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДатаОтсчета.Вид = ВидПоляФормы.ПолеВвода;
		ПолеДатаОтсчета.АвтоОтметкаНезаполненного = Истина;
		ПолеДатаОтсчета.Ширина = 10;
		ПолеДатаОтсчета.РастягиватьПоГоризонтали = Ложь;
		ПолеДатаОтсчета.ПутьКДанным = "ДатаОтсчета" + Сч;
		ПолеДатаОтсчета.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеРазмерСтажаНадпись = Элементы.Добавить("РазмерСтажа" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеРазмерСтажаНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеРазмерСтажаНадпись.Заголовок = НСтр("ru = 'составил'");
		ПолеРазмерСтажаНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоЛет = Элементы.Добавить("Лет" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоЛет.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоЛет.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоЛет.Ширина = 2;
		ПолеКоличествоЛет.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоЛет.ПутьКДанным = "Лет" + Сч;
		ПолеКоличествоЛет.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоЛетНадпись = Элементы.Добавить("ЛетНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоЛетНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоЛетНадпись.Заголовок = НСтр("ru = 'лет'");
		ПолеКоличествоЛетНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоМесяцев = Элементы.Добавить("Месяцев" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоМесяцев.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоМесяцев.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоМесяцев.Ширина = 2;
		ПолеКоличествоМесяцев.МаксимальноеЗначение = 11;
		ПолеКоличествоМесяцев.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоМесяцев.ПутьКДанным = "Месяцев" + Сч;
		ПолеКоличествоМесяцев.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоМесяцевНадпись = Элементы.Добавить("МесяцевНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоМесяцевНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоМесяцевНадпись.Заголовок = НСтр("ru = 'месяцев'");
		ПолеКоличествоМесяцевНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоДней = Элементы.Добавить("Дней" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоДней.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоДней.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоДней.Ширина = 2;
		ПолеКоличествоДней.МаксимальноеЗначение = 30;
		ПолеКоличествоДней.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоДней.ПутьКДанным = "Дней" + Сч;
		ПолеКоличествоДней.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоДнейНадпись = Элементы.Добавить("ДнейНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоДнейНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоДнейНадпись.Заголовок = НСтр("ru = 'дней'");
		ПолеКоличествоДнейНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеДатаПриема = Элементы.Добавить("ДатаПриема" + Сч, Тип("ПолеФормы"), ГруппаПраваяКолонка);
		ПолеДатаПриема.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДатаПриема.Вид = ВидПоляФормы.ПолеВвода;
		ПолеДатаПриема.АвтоОтметкаНезаполненного = Истина;
		ПолеДатаПриема.Ширина = 10;
		ПолеДатаПриема.РастягиватьПоГоризонтали = Ложь;
		ПолеДатаПриема.ПутьКДанным = "ДатаПриема" + Сч;
		ПолеДатаПриема.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеПрерван = Элементы.Добавить("Прерван" + Сч, Тип("ПолеФормы"), ГруппаИспользованиеСтажа);
		ПолеПрерван.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ПолеПрерван.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеПрерван.Заголовок = НСтр("ru='Исчисление стажа прервано'");
		ПолеПрерван.ПутьКДанным = "Прерван" + Сч;
		ПолеПрерван.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПрерванПриИзменении");
		
		// Таблица стажа
		
		ГруппаСтраница = Элементы.Добавить("ГруппаСтраницаНабораЗаписейСтажа" + Сч, Тип("ГруппаФормы"), ГруппаСтраницыСтажа);
		ГруппаСтраница.Вид = ВидГруппыФормы.Страница;
		
		Таблица = Элементы.Добавить("Набор" + Сч, Тип("ТаблицаФормы"), ГруппаСтраница);
		Таблица.ПутьКДанным = "Набор" + Сч;
		Таблица.ВысотаВСтрокахТаблицы = 2;
		Таблица.АвтоМаксимальнаяШирина = Ложь;
		Таблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Таблица.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Таблица.УстановитьДействие("ПриИзменении", "Подключаемый_НаборЗаписейПриИзменении");
		Таблица.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_НаборЗаписейПередНачаломДобавления");
		Таблица.УстановитьДействие("ПередУдалением", "Подключаемый_НаборЗаписейПередУдалением");
		Таблица.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_НаборЗаписейПриОкончанииРедактирования");
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "Период", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеТаблицы.Заголовок = НСтр("ru='Периоды изменения сведений'");
		ПолеТаблицы.Ширина = 19;
		ПолеТаблицы.АвтоМаксимальнаяШирина = Ложь;
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".Период";
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "ИсчисляетсяСДатыПриема", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеТаблицы.Заголовок = НСтр("ru='С даты приема'");
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".ИсчисляетсяСДатыПриема";
		ПолеТаблицы.ТолькоПросмотр = Истина;
		ПолеТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_НаборЗаписейИсчисляетсяСДатыПриемаПриИзменении");
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "ДатаОтсчета", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеТаблицы.Заголовок = НСтр("ru='Дата сведений'");
		ПолеТаблицы.Ширина = 12;
		ПолеТаблицы.АвтоМаксимальнаяШирина = Ложь;
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".ДатаОтсчета";
		ПолеТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_НаборЗаписейДатаОтсчетаПриИзменении");
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "Лет", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеТаблицы.Заголовок = НСтр("ru='Лет'");
		ПолеТаблицы.Ширина = 8;
		ПолеТаблицы.АвтоМаксимальнаяШирина = Ложь;
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".Лет";
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "РазмерМесяцев", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеТаблицы.Заголовок = НСтр("ru='Месяцев'");
		ПолеТаблицы.Ширина = 8;
		ПолеТаблицы.МаксимальноеЗначение = 11;
		ПолеТаблицы.АвтоМаксимальнаяШирина = Ложь;
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".РазмерМесяцев";
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "РазмерДней", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеТаблицы.Заголовок = НСтр("ru='Дней'");
		ПолеТаблицы.Ширина = 8;
		ПолеТаблицы.МаксимальноеЗначение = 30;
		ПолеТаблицы.АвтоМаксимальнаяШирина = Ложь;
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".РазмерДней";
		
		ПолеТаблицы = Элементы.Добавить("Набор" + Сч + "Прерван", Тип("ПолеФормы"), Таблица);
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеФлажка;
		ПолеТаблицы.Заголовок = НСтр("ru='Прерывается'");
		ПолеТаблицы.ПутьКДанным = "Набор" + Сч + ".Прерван";
		ПолеТаблицы.УстановитьДействие("ПриИзменении", "Подключаемый_НаборЗаписейПрерванПриИзменении");
		
		// Условное оформление таблицы
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораУсловногоОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор" + Сч + ".Период");
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = ДатаОтсчетаПериодическихСведений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "Период");
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораУсловногоОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор" + Сч + ".Период");
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = ДатаОтсчетаПериодическихСведений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='''При расчетах с '' дд.ММ.гг'; ДЛФ=D");
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "Период");
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораУсловногоОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор" + Сч + ".ИсчисляетсяСДатыПриема");
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "Лет");
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "РазмерМесяцев");
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "РазмерДней");
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораУсловногоОформления = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Набор" + Сч + ".Прерван");
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Набор" + Сч + "ИсчисляетсяСДатыПриема");
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСтаже(ДанныеСтажей)
	
	Если ДанныеСтажей <> Неопределено Тогда
		СтажиФизическихЛиц.Загрузить(ДанныеСтажей.Выгрузить());
	Иначе
		
		СтажиФизическихЛицОбъект = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
		СтажиФизическихЛицОбъект.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		
		СтажиФизическихЛицОбъект.Прочитать();
		
		СтажиФизическихЛиц.Загрузить(СтажиФизическихЛицОбъект.Выгрузить());
		
	КонецЕсли;
	
	ТаблицаСтажей = СтажиФизическихЛиц.Выгрузить();
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		СтрокиСтажа = ТаблицаСтажей.НайтиСтроки(Новый Структура("ВидСтажа", ВидСтажа));
		Если СтрокиСтажа.Количество() = 0 Тогда
			Запись = ЭтаФорма["Набор" + Сч].Добавить();
			Запись.Период = ДатаОтсчетаПериодическихСведений;
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.ВидСтажа = ВидСтажа;
		Иначе
			Для каждого СтрокаСтажа Из СтрокиСтажа Цикл
				ЗаполнитьЗначенияСвойств(ЭтаФорма["Набор" + Сч].Добавить(), СтрокаСтажа);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Запись Из ЭтаФорма["Набор" + Сч] Цикл
			
			Если Запись.ТребуетЗаписи Тогда
				ЭтаФорма["ТребуетЗаписи" + Сч] = Истина;
			КонецЕсли;
			
			Запись.Лет = Цел(Запись.РазмерМесяцев / 12);
			Запись.РазмерМесяцев = Запись.РазмерМесяцев - Запись.Лет * 12;
			
		КонецЦикла;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Определение минимальной даты приема
	ДатаПриема = КадровыйУчетРасширенный.ДатаПриемаФизическогоЛица(ФизическоеЛицо, ДатаСведений);
	
	// Если дату приема не удалось определеить, то датой отсчета по умолчанию является дата сведений.
	Если Не ЗначениеЗаполнено(ДатаПриема) Тогда 
		ДатаПриема = ДатаСведений;
	КонецЕсли;
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		Если ЭтаФорма["Набор" + Сч] = 1 Тогда
			ЗаписьОСтаже = ЭтаФорма["Набор" + Сч][0];
		Иначе
			
			ЗаписьОСтаже = Неопределено;
			Для каждого Запись Из ЭтаФорма["Набор" + Сч] Цикл
				
				Если ЗаписьОСтаже = Неопределено
					Или ЗаписьОСтаже.Период > Запись.Период Тогда
					
					ЗаписьОСтаже = Запись;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЭтотОбъект["ИсчисляетсяСДатыПриема" + Сч] = ЗаписьОСтаже.ИсчисляетсяСДатыПриема;
		
		Если Не ЭтотОбъект["ИсчисляетсяСДатыПриема" + Сч] Тогда
			
			ЭтотОбъект["ДатаОтсчета" + Сч] = ЗаписьОСтаже.ДатаОтсчета;
			
			ЭтотОбъект["Лет" + Сч] = ЗаписьОСтаже.Лет;
			ЭтотОбъект["Месяцев" + Сч] = ЗаписьОСтаже.РазмерМесяцев;
			ЭтотОбъект["Дней" + Сч] = ЗаписьОСтаже.РазмерДней;
			
			ЭтотОбъект["ДатаПриема" + Сч] = ДатаПриема;
			ЭтотОбъект["СпособИсчисленияСтажа" + Сч] = 0;
			
		Иначе
			
			ЭтотОбъект["ДатаПриема" + Сч] = ЗаписьОСтаже.ДатаОтсчета;
			ЭтотОбъект["СпособИсчисленияСтажа" + Сч] = 1;
			
		КонецЕсли;
		
		ЭтотОбъект["Прерван" + Сч] = ЗаписьОСтаже.Прерван;
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И ЗначениеЗаполнено(ЗаписьОСтаже.ДатаОтсчета) Тогда 
			ЭтотОбъект["ИзменитьСтаж" + Сч] = Истина;
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	УстановитьОтображениеПолейВводаСтажа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВводаДанныхСтажа(Форма)
	
	Сч = 1;
	Для Каждого ВидСтажа Из Форма.ВидыСтажа Цикл
		
		Если Форма.НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, "ГруппаСтраницыСтажа" + Сч, "Доступность", Форма["ИзменитьСтаж" + Сч]);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"ГруппаСтажПоТрудовойКнижке" + Сч, "Доступность", Не ИсчисляетсяСДатыПриема(Форма, Сч));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"ДатаПриема" + Сч, "Доступность", ИсчисляетсяСДатыПриема(Форма, Сч));
		
		ДоступностьУказанияСДатыПриема = Истина;
		Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Прерван" + Сч) Тогда
			ДоступностьУказанияСДатыПриема = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"СпособИсчисленияСтажаВторой" + Сч, "Доступность", ДоступностьУказанияСДатыПриема);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНабораФормы(Элемент)
	
	ИндексЭлемента = 0;
	Если СтрНайти(Элемент.Имя, "СпособИсчисленияСтажаВторой") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "СпособИсчисленияСтажаВторой", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "СпособИсчисленияСтажа") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "СпособИсчисленияСтажа", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "ДатаОтсчета") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "ДатаОтсчета", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "ДатаПриема") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "ДатаПриема", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Лет") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Лет", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Месяцев") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Месяцев", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Дней") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Дней", ""));
	ИначеЕсли СтрНайти(Элемент.Имя, "Прерван") = 1 Тогда
		ИндексЭлемента = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Элемент.Имя, "Прерван", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндексЭлемента) Тогда
		
		Если СтажиСУправляемымРостом.НайтиПоЗначению(ВидыСтажа[ИндексЭлемента - 1]) <> Неопределено Тогда
			ЭтотОбъект["ТребуетЗаписи" + ИндексЭлемента] = Истина;
		КонецЕсли;
		
		Для Каждого Запись Из ЭтаФорма["Набор" + ИндексЭлемента] Цикл
			
			Если ЭтаФорма["СпособИсчисленияСтажа" + ИндексЭлемента] Тогда
				Запись.ДатаОтсчета = ЭтаФорма["ДатаПриема" + ИндексЭлемента];
				Запись.ИсчисляетсяСДатыПриема = Истина;
			Иначе
				Запись.ДатаОтсчета = ЭтаФорма["ДатаОтсчета" + ИндексЭлемента];
				Запись.ИсчисляетсяСДатыПриема = Ложь;
			КонецЕсли;
			
			Запись.Лет = ЭтаФорма["Лет" + ИндексЭлемента];
			Запись.РазмерМесяцев = ЭтаФорма["Месяцев" + ИндексЭлемента];
			Запись.РазмерДней = ЭтаФорма["Дней" + ИндексЭлемента];
			Запись.Прерван = ЭтаФорма["Прерван" + ИндексЭлемента];
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуСтажа(Форма, Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если СтрНайти(ИмяЭлемента, "Набор") = 1 Тогда
		
		НомерСтажа = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(ИмяЭлемента, "Набор", ""));
		
		Если Форма.СтажиСУправляемымРостом.НайтиПоЗначению(Форма.ВидыСтажа[НомерСтажа - 1]) <> Неопределено Тогда
			Форма["ТребуетЗаписи" + НомерСтажа] = Истина;
		КонецЕсли;
		
		УстановитьПодсказкуСтажаПоНомеруСтажа(Форма, НомерСтажа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуСтажаПоНомеруСтажа(Форма, НомерСтажа)
	
	ТекущаяЗапись = Неопределено;
	Для каждого Запись Из Форма["Набор" + НомерСтажа] Цикл
		
		Если Запись.Период <= Форма.ДатаСведений Тогда
			
			Если ТекущаяЗапись = Неопределено
				Или ТекущаяЗапись.Период < Запись.Период Тогда
				
				ТекущаяЗапись = Запись;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяЗапись = Неопределено
		Или Не ЗначениеЗаполнено(ТекущаяЗапись.ДатаОтсчета) Тогда
		
		Подсказка = НСтр("ru = 'Не задан'");
		
	Иначе
		
		СведенияОНакопленномСтаже = Форма.СведенияОНакопленныхСтажах.Получить(ТекущаяЗапись.ВидСтажа);
		Если Форма.СтажиСУправляемымРостом.НайтиПоЗначению(ТекущаяЗапись.ВидСтажа) <> Неопределено
			И СведенияОНакопленномСтаже <> Неопределено Тогда
			
			Если Форма["ТребуетЗаписи" + НомерСтажа] Тогда
				
				Подсказка = Новый ФорматированнаяСтрока(
					БиблиотекаКартинок.Предупреждение,
					" ",
					НСтр("ru='В сведениях о стаже не учтены кадровые переводы. Информация обновится после записи карточки сотрудника.'"));
				
			Иначе
				Подсказка = ПредставлениеПодсказкиСтажа(СведенияОНакопленномСтаже, Форма.ДатаСведений, СведенияОНакопленномСтаже, Ложь);
			КонецЕсли;
			
		Иначе
			
			ДанныеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
			
			ДанныеСтажа.ДатаОтсчета = ТекущаяЗапись.ДатаОтсчета;
			ДанныеСтажа.ИсчисляетсяСДатыПриема = ТекущаяЗапись.ИсчисляетсяСДатыПриема;
			ДанныеСтажа.Лет = ТекущаяЗапись.Лет;
			ДанныеСтажа.Месяцев = ТекущаяЗапись.РазмерМесяцев;
			ДанныеСтажа.Дней = ТекущаяЗапись.РазмерДней;
			ДанныеСтажа.Прерван = ТекущаяЗапись.Прерван;
			
			ПродолжительностьСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(ДанныеСтажа, Форма.ДатаСведений);
			Подсказка = ПредставлениеПодсказкиСтажа(ДанныеСтажа, Форма.ДатаСведений, ПродолжительностьСтажа, ИсчисляетсяСДатыПриема(Форма, НомерСтажа));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"ГруппаВидСтажа" + НомерСтажа,
		Подсказка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСтажа(Форма)
	
	Сч = 1;
	Для Каждого ВидСтажа Из Форма.ВидыСтажа Цикл 
		
		УстановитьПодсказкуСтажаПоНомеруСтажа(Форма, Сч);
		Сч = Сч + 1;
		
	КонецЦикла;
	
	#Если ТонкийКлиент Или ВебКлиент Тогда
		Форма.ОбновитьОтображениеДанных();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПодсказкиСтажа(ДанныеСтажа, ДатаСведений, ПродолжительностьСтажа, ИсчисляетсяСДатыПриема)
	
	ПредставлениеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеСтажа(
		ПродолжительностьСтажа.Лет, ПродолжительностьСтажа.Месяцев, ПродолжительностьСтажа.Дней);
	
	Если ДанныеСтажа.Прерван Тогда
		ТекстПодсказки = СтрШаблон(НСтр("ru = 'Не исчисляется с %1'"), Формат(ДанныеСтажа.ДатаОтсчета, "ДЛФ=Д"));
	Иначе
		
		Если ИсчисляетсяСДатыПриема Тогда
			ТекстПодсказки = НСтр("ru = 'На %1 составил %2'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'На %1 составил %2 (%1 включительно'") + ")";
		КонецЕсли;
		
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПодсказки , Формат(ДатаСведений, "ДЛФ=Д"), ПредставлениеСтажа);
		
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИсчисляетсяСДатыПриема(Форма, НомерВидаСтажа)
	
	Возврат Форма["СпособИсчисленияСтажа" + НомерВидаСтажа] = 1;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеФормы(Отказ)
	
	ОчиститьСообщения();
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И Не ЭтотОбъект["ИзменитьСтаж" + Сч] Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РасширенныйВводСтажа И ЭтаФорма["Набор" + Сч].Количество() < 2 Тогда
			
			Если ИсчисляетсяСДатыПриема(ЭтотОбъект, Сч) И Не ЗначениеЗаполнено(ЭтотОбъект["ДатаПриема" + Сч]) Тогда 
				ТекстСообщения = НСтр("ru = 'Не указана дата сведений о стаже.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаПриема" + Сч, , Отказ);
			КонецЕсли;
			
			Если Не ИсчисляетсяСДатыПриема(ЭтотОбъект, Сч) И Не ЗначениеЗаполнено(ЭтотОбъект["ДатаОтсчета" + Сч]) Тогда 
				ТекстСообщения = НСтр("ru = 'Не указана дата сведений о стаже.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаОтсчета" + Сч, , Отказ);
			КонецЕсли;
			
		Иначе
			
			НомерЗаписи = 0;
			Для каждого Запись Из ЭтаФорма["Набор" + Сч] Цикл
				
				Если Не ЗначениеЗаполнено(Запись.ДатаОтсчета) Тогда
					
					ТекстСообщения = НСтр("ru = 'Не указана дата сведений о стаже.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Набор" + Сч +"[" + НомерЗаписи + "].ДатаОтсчета", , Отказ);
					
				ИначеЕсли Запись.Период <> ДатаОтсчетаПериодическихСведений
					И Запись.Период < Запись.ДатаОтсчета Тогда
				
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Период изменения сведений не может быть меньше даты отсчета стажа'"),
						, "Набор" + Сч +"[" + НомерЗаписи + "].Период", , Отказ);
					
				КонецЕсли;
				
				НомерЗаписи = НомерЗаписи + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДанныеСтажейВНаборы(Форма, ТекущийРежимВводаРасширенный)
	
	Сч = 1;
	Для каждого ВидСтажа Из Форма.ВидыСтажа Цикл
		
		СтрокиСтажей = Форма.СтажиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа", ВидСтажа));
		Для каждого СтрокаСтажа Из СтрокиСтажей Цикл
			Форма.СтажиФизическихЛиц.Удалить(СтрокаСтажа);
		КонецЦикла;
		
		Если Форма["Набор" + Сч].Количество() = 1 И Не ТекущийРежимВводаРасширенный Тогда
			
			Запись = Форма["Набор" + Сч][0];
			
			Запись.ФизическоеЛицо = Форма.ФизическоеЛицо;
			
			Запись.ВидСтажа					= ВидСтажа;
			Запись.ИсчисляетсяСДатыПриема	= Форма["СпособИсчисленияСтажа" + Сч] = 1;
			Запись.ДатаОтсчета				= ?(Запись.ИсчисляетсяСДатыПриема, Форма["ДатаПриема" + Сч], Форма["ДатаОтсчета" + Сч]);
			
			Запись.Прерван = Форма["Прерван" + Сч];
			
			Если Запись.ИсчисляетсяСДатыПриема Тогда
				
				Запись.Лет				= 0;
				Запись.РазмерМесяцев	= 0;
				Запись.РазмерДней		= 1;
				
			Иначе
				
				Запись.Лет				= Форма["Лет" + Сч];
				Запись.РазмерМесяцев	= Форма["Месяцев" + Сч];
				Запись.РазмерДней		= Форма["Дней" + Сч];
				
			КонецЕсли;
			
			ЗаписьСтажиФизическихЛиц = Форма.СтажиФизическихЛиц.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьСтажиФизическихЛиц, Запись);
			ЗаписьСтажиФизическихЛиц.РазмерМесяцев = Запись.Лет * 12 + Запись.РазмерМесяцев;
			
		Иначе
			
			Для каждого Запись Из Форма["Набор" + Сч] Цикл
				
				ЗаписьСтажиФизическихЛиц = Форма.СтажиФизическихЛиц.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьСтажиФизическихЛиц, Запись);
				ЗаписьСтажиФизическихЛиц.РазмерМесяцев = Запись.Лет * 12 + Запись.РазмерМесяцев;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере(Записывать)
	
	Если Записывать Тогда
		
		Сч = 1;
		Для каждого ВидСтажа Из ВидыСтажа Цикл
			
			Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И Не ЭтотОбъект["ИзменитьСтаж" + Сч] Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиСтажа = СтажиФизическихЛиц.НайтиСтроки(Новый Структура("ВидСтажа", ВидСтажа));
			
			НаборЗаписей = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
			НаборЗаписей.Отбор.ВидСтажа.Установить(ВидСтажа);
			
			Для каждого СтрокаСтажа Из СтрокиСтажа Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаСтажа);
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПолейВводаСтажа(Форма)
	
	Сч = 1;
	Для каждого ВидСтажа Из Форма.ВидыСтажа Цикл
		
		Если Форма.РасширенныйВводСтажа Или Форма["Набор" + Сч].Количество() > 1 Тогда
			КомпактныйВид = Ложь;
		Иначе
			КомпактныйВид = Истина;
		КонецЕсли;
		
		Если КомпактныйВид Тогда
			ТекущаяСтраница = Форма.Элементы.Найти("ГруппаСтраницаСтажа" + Сч);
		Иначе
			ТекущаяСтраница = Форма.Элементы.Найти("ГруппаСтраницаНабораЗаписейСтажа" + Сч);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаСтраницыСтажа" + Сч,
			"ТекущаяСтраница",
			ТекущаяСтраница);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
