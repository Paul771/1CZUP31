#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте Экспорт;
&НаКлиенте
Перем ПараметрыОбработчика;
&НаКлиенте
Перем ВыполнятьЗамеры;
&НаКлиенте
Перем ИдентификаторЗамера;
&НаКлиенте
Перем Непосредственно;
&НаКлиенте
Перем ФормированиеПриОткрытии;
&НаКлиенте
Перем ИнтервалОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение ключевых параметров отчета.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
		КлючТекущегоВарианта = Параметры.КлючВарианта;
	Иначе
		КлючТекущегоВарианта = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ОтчетПолноеИмя + "/КлючТекущегоВарианта", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта) И ПредопределенныеВарианты.Количество() > 0 Тогда
		КлючТекущегоВарианта = ПредопределенныеВарианты[0].Значение;
	КонецЕсли;
	
	// Предварительная инициализация компоновщика (если требуется).
	АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресСхемы");
	Если РежимРасшифровки И ТипЗнч(Параметры.Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		НовыеНастройкиКД = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные).Настройки;
		АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "АдресСхемы");
	КонецЕсли;
	Если ТипЗнч(АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
		Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
			АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
			Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Иначе
			АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	// Сохранение параметров открытия формы.
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	// Определение настроек отчета.
	ТипОтчетаСтрокой = ВариантыОтчетовКлиентСервер.ТипОтчета(Параметры.Отчет, Истина);
	Если ТипОтчетаСтрокой = Неопределено Тогда
		Информация      = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя);
		Параметры.Отчет = Информация.Отчет;
	КонецЕсли;
	НастройкиОтчета = ВариантыОтчетов.НастройкиФормыОтчета(Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
	НастройкиОтчета.Вставить("РазрешеноВыбиратьВарианты", Истина);
	НастройкиОтчета.Вставить("СхемаМодифицирована", Ложь);
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", ПредопределенныеВарианты);
	НастройкиОтчета.Вставить("АдресСхемы",   АдресСхемы);
	НастройкиОтчета.Вставить("КлючСхемы",    "");
	НастройкиОтчета.Вставить("Контекстный",  ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0);
	НастройкиОтчета.Вставить("ПолноеИмя",    ОтчетПолноеИмя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	НастройкиОтчета.Вставить("ОтчетСсылка",  Параметры.Отчет);
	НастройкиОтчета.Вставить("Внешний",      ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",   БезопасныйРежим() <> Ложь);
	ОбновитьИнформациюОВариантеОтчета();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетов.ПараметрыКлиента());
	
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		Элементы.ФормироватьСразу.Пометка = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	// Параметры по умолчанию.
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "ВыводитьСуммуВыделенныхЯчеек", Истина) Тогда
		Элементы.АвтоСуммаКнопка.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов.
	ВидимостьКомандВариантовОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов");	
	
	Если ВидимостьКомандВариантовОтчетов = Ложь Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиОтчета.РазрешеноИзменятьВарианты И Не ВариантыОтчетовПовтИсп.ПравоДобавления() Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;
	
	РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения");
	
	Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Истина;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Истина;
		ВариантМодифицирован                      = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	УстановитьВидимостьДоступность();
	
	// Тесная интеграция с почтой и рассылкой.
	ДоступнаОтправкаПисем = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ДоступнаОтправкаПисем = МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
	КонецЕсли;
	Если ДоступнаОтправкаПисем Тогда
		Если НастройкиОтчета.РазрешеноИзменятьВарианты
			И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов")
			И Не НастройкиОтчета.СкрытьКомандыРассылки Тогда
			МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
			МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Иначе // Если в подменю одна команда, то выпадающий список не отображается.
			Элементы.ОтправитьПоПочте.Заголовок = Элементы.ГруппаОтправить.Заголовок + "...";
			Элементы.Переместить(Элементы.ОтправитьПоПочте, Элементы.ГруппаОтправить.Родитель, Элементы.ГруппаОтправить);
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправить.Видимость = Ложь;
	КонецЕсли;
	
	// Определение что отчет может содержать некорректные данные.
	Если Не Элементы.ФормироватьСразу.Пометка Тогда
		Попытка
			ИспользуемыеТаблицы = ВариантыОтчетов.ИспользуемыеТаблицы(ОтчетОбъект.СхемаКомпоновкиДанных);
			ИспользуемыеТаблицы.Добавить(НастройкиОтчета.ПолноеИмя);
			Если НастройкиОтчета.События.ПриОпределенииИспользуемыхТаблиц Тогда
				ОтчетОбъект.ПриОпределенииИспользуемыхТаблиц(КлючТекущегоВарианта, ИспользуемыеТаблицы);
			КонецЕсли;
			ВариантыОтчетов.ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось определить используемые таблицы:'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, НастройкиОтчета.ВариантСсылка);
		КонецПопытки;
	КонецЕсли;
	
	Если ФормаПараметры.Подсистема = Неопределено Или Не НастройкиОтчета.РазрешеноВыбиратьВарианты Тогда
		Элементы.ДругиеОтчеты.Видимость = Ложь;
	КонецЕсли;
	
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнятьЗамеры = Ложь;
	// В безопасном режиме доп. отчеты формируются непосредственно,
	// т.к. они не могут подключать себя и использовать собственные методы в фоновых заданиях.
	Непосредственно = НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный;
	ФормированиеПриОткрытии = Ложь;
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	Если Элементы.ФормироватьСразу.Пометка Тогда
		ФормированиеПриОткрытии = Истина;
		ПодключитьОбработчикОжидания("СФормировать", 0.1, Истина);
	КонецЕсли;
	ПоказатьРезультатЗаполненияНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				БыстрыеНастройкиЗаполнитьКлиент(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта()
		Или ИмяСобытия = "Запись_НаборКонстант" Тогда
		ОповещениеОбработано = Истина;
		ВариантыПанелиКлючТекущегоВарианта = " - ";
		ПодключитьОбработчикОжидания("ВидимостьДоступностьЕслиТребуется", 0.1, Истина);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не РежимВариантаОтчета() И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не РежимВариантаОтчета() И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
		Если КлючТекущегоВарианта = Неопределено Тогда
			КлючТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "КлючВарианта");
		КонецЕсли;
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		// Подготовка к переинициализации.
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Вставить("СтандартнаяОбработкаСобытия", СтандартнаяОбработка);
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.СтандартнаяОбработкаСобытия <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.СтандартнаяОбработкаСобытия;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		
		Если Тип = "ЗначениеПараметраНастроек"
			И ТипЗнч(ПользовательскаяНастройкаКД.Значение) = Тип("СтандартныйПериод")
			И ПользовательскаяНастройкаКД.Использование Тогда
			
			ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки);
			
			ПериодНачало    = Элементы.Найти(Тип + "_Начало_"    + ИдентификаторЭлемента);
			ПериодОкончание = Элементы.Найти(Тип + "_Окончание_" + ИдентификаторЭлемента);
			Если ПериодНачало = Неопределено Или ПериодОкончание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ПользовательскаяНастройкаКД.Значение;
			Если ПериодНачало.АвтоОтметкаНезаполненного
				И Не ЗначениеЗаполнено(Значение.ДатаНачала)
				И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан период'");
				ПутьКДанным = ПериодНачало.ПутьКДанным;
			ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
				ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
				ПутьКДанным = ПериодОкончание.ПутьКДанным;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ЗаполнитьКомандыВыбораВариантов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ИнтеграцияПодсистемБСПКлиент.ОбработкаВыбораТабличногоДокумента(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка И ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ПерейтиПоСсылке(Область.Текст) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Попытка
			ЗначениеРасшифровки = Область.Расшифровка;
		Исключение
			ЗначениеРасшифровки = Неопределено;
			// Для некоторых типов областей табличного документа (свойство ТипОбласти)
			// чтение расшифровки недоступно, поэтому делается попытка-исключение.
		КонецПопытки;
		
		Если ЗначениеРасшифровки <> Неопределено И ПерейтиПоСсылке(ЗначениеРасшифровки) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если ПерейтиПоСсылке(Область.Маска) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	
	ОтчетыКлиент.ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	ОтчетыКлиент.ОтразитьИзмененияВПодчиненных(ЭтотОбъект, ИдентификаторЭлемента, ПользовательскаяНастройкаКД);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеКомпоновщика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.ЗначениеКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСравнения_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Подключаемый_ИзменитьВидСравнения(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя     = СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ЗначениеИмя        = СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант",                   Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета",     НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(
			Ложь,
			НастройкиОтчета.КлючЗамеров + ".Настройки");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнитьКлиент(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("НастройкиОтчета",                       НастройкиОтчета);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	Если ВариантМодифицирован Тогда
		ПараметрыЗаполнения.Вставить("СброситьНастройкиВарианта", Истина);
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("СформироватьПередОтправкойПоПочте", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьРасчетЯчеек(ЭтотОбъект, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка",     НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка",       НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка",  ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование", НастройкиОтчета.Наименование);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.'"));
		Возврат;
	КонецЕсли;
	ВариантФормы = Найденные[0];
	НастройкиОтчета.Удалить("ФормаНастроекРасширенныйРежим");
	ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	КлючУникальности = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, ВариантФормы.КлючВарианта);
	ПоказатьРезультатЗаполненияНастроек();
	Если Элементы.ФормироватьСразу.Пометка Тогда
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидСравнения(Команда)
	ИдентификаторЭлемента = Прав(Команда.Имя, 32);
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораВидаСравнения", ЭтотОбъект, Контекст);
	ОтчетыКлиент.ИзменитьВидСравнения(ЭтотОбъект, ИдентификаторЭлемента, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаСравнения(ВидСравнения, Контекст) Экспорт
	Если ВидСравнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьВидСравнения");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ТолькоБыстрые", Истина);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина, , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(ВыборПользователя, Контекст) Экспорт
	Если ВыборПользователя = Неопределено
		Или ВыборПользователя = КодВозвратаДиалога.Отмена
		Или ВыборПользователя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов", ВыборПользователя);
	БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Задание = ФоновоеЗаданиеПроверитьНаСервере();
	Если Задание.Выполняется Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформирован Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован'"), , Заголовок);
		КонецЕсли;
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
		ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
	Если ТабличныйДокументСформирован Тогда
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	Отказ = Ложь;
	ОтчетыКлиентПереопределяемый.ПередФормированием(ЭтотОбъект, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПередФормированиемНаКлиенте();
	ТребуетсяОбработчик = ФоновоеЗаданиеЗапустить(ФормированиеПриОткрытии, НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный);
	Если ТребуетсяОбработчик Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
	Иначе
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередФормированиемНаКлиенте()
	ОтчетСформирован = Ложь;
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		Комментарий = НастройкиОтчета.ПрефиксЗамеров + "; " + НСтр("ru = 'Непосредственно:'") + " " + Строка(Непосредственно);
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(
			Ложь,
			НастройкиОтчета.КлючЗамеров + ".Формирование");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ФормированиеПриОткрытии = Ложь;
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
	ПоказатьРезультатЗаполненияНастроек();
	ОбновитьОтображениеДанных(); 
	Обработчик = ОбработчикПослеФормированияНаКлиенте;
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ОтчетСформирован);
		ОбработчикПослеФормированияНаКлиенте = Неопределено;
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ПослеФормирования(ЭтотОбъект, ОтчетСформирован);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЕслиТребуется()
	Если ВариантыПанелиКлючТекущегоВарианта <> " - " Тогда // Изменения уже применены
		Возврат;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Если ИдентификаторКД = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента) Экспорт
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	ВсеДополнительныеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ЭлементыФормы");
	Если ВсеДополнительныеНастройки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВсеДополнительныеНастройки[ИдентификаторЭлемента];
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура БыстрыеНастройкиЗаполнитьКлиент(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	ПоказатьРезультатЗаполненияНастроек();
	Если ПараметрыЗаполнения.Свойство("Переформировать") И ПараметрыЗаполнения.Переформировать Тогда
		ОчиститьСообщения();
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатЗаполненияНастроек()
	Если ТипЗнч(РезультатЗаполненияНастроек) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СвоиСпискиВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗаполненияНастроек, "СвоиСпискиВыбора");
	Если ТипЗнч(СвоиСпискиВыбора) = Тип("Массив") Тогда
		Для Каждого ИдентификаторЭлемента Из СвоиСпискиВыбора Цикл
			НастройкаВарианта = НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента);
			Если НастройкаВарианта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДополнительныеНастройки = НайтиДополнительныеНастройкиЭлемента(ИдентификаторЭлемента);
			Если ДополнительныеНастройки = Неопределено
				Или ТипЗнч(ДополнительныеНастройки.ЗначенияДляВыбора) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(НастройкаВарианта.ЭлементКД);
			Если Тип = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ДоступныеПараметры = НастройкаВарианта.УзелКД.ДоступныеПараметры;
				Если ДоступныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(НастройкаВарианта.ЭлементКД.Параметр);
			ИначеЕсли Тип = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДоступныеПоляОтбора = НастройкаВарианта.УзелКД.ДоступныеПоляОтбора;
				Если ДоступныеПоляОтбора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(НастройкаВарианта.ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			Если ДоступнаяНастройкаКД = Неопределено
				Или ТипЗнч(ДоступнаяНастройкаКД.ДоступныеЗначения) <> Тип("СписокЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ДоступнаяНастройкаКД.ДоступныеЗначения.Очистить();
				Для Каждого Элемент Из ДополнительныеНастройки.ЗначенияДляВыбора Цикл
					ЗаполнитьЗначенияСвойств(ДоступнаяНастройкаКД.ДоступныеЗначения.Добавить(), Элемент);
				КонецЦикла;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗаполненияНастроек.Очистить();
КонецПроцедуры

&НаКлиенте
Функция ПерейтиПоСсылке(АдресСсылки)
	Если ПустаяСтрока(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	АдресСсылкиВРег = ВРег(АдресСсылки);
	Если СтрНачинаетсяС(АдресСсылкиВРег, ВРег("http://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("https://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1cib/"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1c://")) Тогда
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСсылки);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция НайтиНастройкуВарианта(ЭтотОбъект, ИдентификаторЭлемента)
	ПоискНастройкиВарианта = ЭтотОбъект.БыстрыйПоискНастроекВарианта.Получить(ИдентификаторЭлемента);
	Если ПоискНастройкиВарианта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	КорневойУзелКД = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторУзлаКД);
	Результат = Новый Структура("УзелКД, ЭлементКД");
	Результат.УзелКД = КорневойУзелКД[ПоискНастройкиВарианта.ИмяКоллекции];
	Результат.ЭлементКД = Результат.УзелКД.ПолучитьОбъектПоИдентификатору(ПоискНастройкиВарианта.ИдентификаторЭлементаКД);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура УстановитьВидимостьДоступность(ОбновитьКоманды = Истина)
		
	ПоказыватьКомандыВыбораВариантов = РежимВариантаОтчета() И НастройкиОтчета.РазрешеноВыбиратьВарианты;
	
	Если ОбновитьКоманды Тогда
		ПоказыватьКомандыИзмененияВарианта = ПоказыватьКомандыВыбораВариантов И НастройкиОтчета.РазрешеноИзменятьВарианты;
		ЕстьНастройки = ЕстьБыстрыеНастройки Или ЕстьОбычныеНастройки;
		
		Элементы.ВсеНастройки.Видимость     = ПоказыватьКомандыИзмененияВарианта Или ЕстьОбычныеНастройки;
		Элементы.ВариантыОтчета.Видимость   = ПоказыватьКомандыВыбораВариантов;
		Элементы.ИзменитьВариант.Видимость  = ПоказыватьКомандыИзмененияВарианта;
		Элементы.ВыбратьВариант.Видимость   = ПоказыватьКомандыВыбораВариантов;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СохранитьВариант",
			"Видимость",
			ПоказыватьКомандыИзмененияВарианта); // Кнопка исчезает, если команда недоступна по правам.
		Элементы.ИзменитьУсловияОтборов.Видимость = ЕстьНастройки И РежимВариантаОтчета();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыбратьНастройки",
			"Видимость",
			ПоказыватьКомандыВыбораВариантов И ЕстьНастройки); // Кнопка исчезает, если команда недоступна по правам.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СохранитьНастройки",
			"Видимость",
			ПоказыватьКомандыВыбораВариантов И ЕстьНастройки); // Кнопка исчезает, если команда недоступна по правам.
	
		РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения");
	
		Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СохранитьВариант", "Видимость", Ложь);
			ВариантМодифицирован = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		
		Если ПоказыватьКомандыВыбораВариантов Тогда
			ЗаполнитьКомандыВыбораВариантов();
		КонецЕсли;
		
		Если ПравоВывода Тогда
			КлючСохраненияПоложенияОкна = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
			НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", КлючСохраненияПоложенияОкна);
			ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
		КонецЕсли;
		
		НавигационнаяСсылка = "";
		Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка)
			И Не НастройкиОтчета.Внешний
			И Не НастройкиОтчета.Контекстный Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = НастройкиОтчета.Наименование;
	КонецЕсли;
	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка'") + ")";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция БыстрыеНастройкиЗаполнить(Знач ПараметрыКлиента)
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	ПараметрыЗаполнения = БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента);
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(
		Отчет.КомпоновщикНастроек,
		НастройкиОтчета,
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя,
		УсловияВывода);
	ЕстьБыстрыеНастройки = Информация.ЕстьБыстрыеНастройки;
	ЕстьОбычныеНастройки = Информация.ЕстьОбычныеНастройки;
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Стандартные периоды.
	НастройкиОтчета.Вставить("СтандартныеПериоды", Новый Массив);
	СтандартныеПериоды = Информация.ПользовательскиеНастройки.НайтиСтроки(Новый Структура("ТипЭлементов", "СтандартныйПериод"));
	Для Каждого СвойстваНастройки Из СтандартныеПериоды Цикл
		НастройкиОтчета.СтандартныеПериоды.Добавить(СвойстваНастройки.ИдентификаторКД);
	КонецЦикла;
	
	// Обработка дополнительных настроек.
	ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения);
	
	УстановитьВидимостьДоступность();
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		НастройкиОтчета.Удалить("ОтчетОбъект");
	КонецЕсли;
	
	РезультатЗаполненияНастроек = ПараметрыЗаполнения.Результат;
	
	// Очистка цикличных ссылок.
	Информация.ДеревоВарианта.Колонки.Очистить();
	Информация.НастройкиВарианта.Колонки.Очистить();
	Информация.ПользовательскиеНастройки.Колонки.Очистить();
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить(Знач ФормированиеПриОткрытии, Непосредственно)
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Если ФормированиеПриОткрытии Тогда
			ТекстОшибки = "";
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
			КонецЦикла;
			ПоказатьОшибкиФормирования(ТекстОшибки);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Запуск фонового задания
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета",   НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта", НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта",   КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормированияОтчета.Вставить("СхемаМодифицирована", НастройкиОтчета.СхемаМодифицирована);
	ПараметрыФормированияОтчета.Вставить("КлючСхемы",           НастройкиОтчета.КлючСхемы);
	
	ИмяОтчета = СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
	
	Если НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров) Тогда
		Разрезы = Новый Соответствие;
		Разрезы.Вставить("ИмяОтчета",            ИмяОтчета);
		Разрезы.Вставить("ИмяИсходногоВарианта", НастройкиОтчета.ИмяИсходногоВарианта);
		Разрезы.Вставить("Внешний",          Число(НастройкиОтчета.Внешний));
		Разрезы.Вставить("Пользовательский", Число(НастройкиОтчета.Пользовательский));
		Разрезы.Вставить("Расшифровка",      Число(РежимРасшифровки));
		Разрезы.Вставить("Модифицирован",    Число(ВариантМодифицирован));
		
		Если НастройкиОтчета.Свойство("СтандартныеПериоды") Тогда
			Для Каждого ИдентификаторКД Из НастройкиОтчета.СтандартныеПериоды Цикл
				ПользовательскаяНастройкаКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
				Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
				ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Значение = ПользовательскаяНастройкаКД.Значение;
				Иначе
					Продолжить;
				КонецЕсли;
				Если ПользовательскаяНастройкаКД.Использование И ТипЗнч(Значение) = Тип("СтандартныйПериод") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Разрезы, ОтчетыСервер.АнализПериода(Значение), Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыФормированияОтчета.Вставить("ИмяКлючевойОперации", НастройкиОтчета.КлючЗамеров + ".Формирование");
		ПараметрыФормированияОтчета.Вставить("КомментарийКлючевойОперации", Разрезы);
	КонецЕсли;
	
	Если Непосредственно Тогда
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
		ПараметрыФормированияОтчета.Вставить("Объект", РеквизитФормыВЗначение("Отчет"));
		ПараметрыФормированияОтчета.Вставить("ПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Иначе
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("СхемаКД", ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнение отчета: %1'"),
		ИмяОтчета);
	ПараметрыЗапуска.ОжидатьЗавершение = Ложь;
	ПараметрыЗапуска.ЗапуститьНеВФоне = Непосредственно;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"ВариантыОтчетов.СформироватьОтчетВФоне",
		ПараметрыФормированияОтчета,
		ПараметрыЗапуска);
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПроверитьНаСервере()
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		Иначе
			ПоказатьОшибкиФормирования(Задание.Ошибка);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

&НаСервере
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	// Считывает состояние фонового задания по переданному идентификатору.
	//
	// Параметры:
	//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
	//
	// Возвращаемое значение:
	//   Неопределено - Задание не найдено.
	//   Структура - Сведения о задании.
	//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
	//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
	//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
	//
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта)
	Если Не РежимРасшифровки Тогда
		// Сохранение текущих пользовательских настроек.
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
			НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта + "/ТекущиеПользовательскиеНастройки",
			"",
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	РежимРасшифровки = Ложь;
	ВариантМодифицирован = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Истина;
	// Загрузка нового варианта.
	УстановитьТекущийВариант(КлючВарианта);
	// Переключение состояния.
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка  = БиблиотекаКартинок.Информация32;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.'");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция БыстрыеНастройкиДозаполнитьПараметры(ПараметрыКлиента)
	ПараметрыЗаполнения = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗаполнения, ПараметрыКлиента, Истина);
	Если Не ПараметрыЗаполнения.Свойство("ИмяСобытия") Тогда
		ПараметрыЗаполнения.Вставить("ИмяСобытия", "");
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("Результат") Тогда
		ПараметрыЗаполнения.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	
	НовыеНастройкиКД = Неопределено;
	НовыеПользовательскиеНастройкиКД = Неопределено;
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		НовыеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки;
		НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
			НовыеНастройкиКД = ПараметрыЗаполнения.НастройкиКД;
		КонецЕсли;
		Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
			НовыеПользовательскиеНастройкиКД = ПараметрыЗаполнения.ПользовательскиеНастройкиКД;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		НовыеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеНастройкиXML");
		Если ТипЗнч(НовыеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеНастройкиXML);
			Исключение
				НовыеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеНастройкиXML = Неопределено;
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиXML = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "НовыеПользовательскиеНастройкиXML");
		Если ТипЗнч(НовыеПользовательскиеНастройкиXML) = Тип("Строка") Тогда
			Попытка
				НовыеПользовательскиеНастройкиКД = ОбщегоНазначения.ЗначениеИзСтрокиXML(НовыеПользовательскиеНастройкиXML);
			Исключение
				НовыеПользовательскиеНастройкиКД = Неопределено;
			КонецПопытки;
			НастройкиОтчета.НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СброситьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьНастройкиВарианта", Ложь);
	Если СброситьНастройкиВарианта Тогда
		ЗагрузитьВариант(КлючТекущегоВарианта);
	КонецЕсли;
	
	СброситьПользовательскиеНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "СброситьПользовательскиеНастройки", Ложь);
	Если СброситьПользовательскиеНастройки Тогда
		НовыеПользовательскиеНастройкиКД = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		ОтчетОбъект = ОтчетыСервер.ОтчетОбъект(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя);
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			НовыеНастройкиКД,
			НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	Если НастройкиЗагружены Тогда
		// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
		// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
		Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
			ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
		// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗаполнения.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗаполнения.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "УсловияОтборов");
	Если УсловияОтборов <> Неопределено Тогда
		УзелКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Для Каждого КлючИЗначение Из УсловияОтборов Цикл
			ПользовательскаяНастройкаКД = УзелКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
			ПользовательскаяНастройкаКД.ВидСравнения = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		Элементы.ФормироватьСразу.Пометка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеНастроекВарианта         = Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование        = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый Массив, 0));
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи",       Связи);
	Прочее.Вставить("ОтчетОбъект", Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения",       ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику",         "Отчет.КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы",       ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей",   ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода",          ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений",     Неопределено);
	Прочее.Вставить("ЕстьОтборыСУсловиями", Ложь);
	
	ГруппаВывода = ГруппыВывода.Быстрые;
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		СоответствиеПользовательскихНастроек.Вставить(СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		
		Если СвойстваНастройки.НастройкаВарианта <> Неопределено Тогда
			ПоискНастройкиВарианта = Новый Структура;
			ПоискНастройкиВарианта.Вставить("ИдентификаторУзлаКД",     СвойстваНастройки.СтрокаДерева.ИдентификаторКД);
			ПоискНастройкиВарианта.Вставить("ИмяКоллекции",            СвойстваНастройки.НастройкаВарианта.ИмяКоллекции);
			ПоискНастройкиВарианта.Вставить("ИдентификаторЭлементаКД", СвойстваНастройки.НастройкаВарианта.ИдентификаторКД);
			СоответствиеНастроекВарианта.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ПоискНастройкиВарианта);
		КонецЕсли;
		
		ОтчетыСервер.ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
	КонецЦикла;
	
	Элементы.ИзменитьУсловияОтборов.Видимость = Прочее.ЕстьОтборыСУсловиями;
	
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппаВывода, Элементы.БыстрыеНастройки, 2, Ложь);
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя] = СвойстваНастройки.Значение;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискНастроекВарианта         = Новый ФиксированноеСоответствие(СоответствиеНастроекВарианта);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
	Если Успех <> Истина Тогда
		ПоказатьОшибкиФормирования(РезультатФормирования.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеЕщеОбновляются = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "ДанныеЕщеОбновляются", Ложь);
	Если ДанныеЕщеОбновляются Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ВариантыОтчетов.СообщениеДанныеЕщеОбновляются());
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент); // Сохранение настроек печати.
	ОтчетТабличныйДокумент = РезультатФормирования.ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать); // Восстановление.
	
	ОтчетСформирован = Истина;
	
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;
	ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор);
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("ИмяСобытия", "ПослеФормирования");
		РезультатФормирования.Вставить("Непосредственно", Ложь);
		БыстрыеНастройкиЗаполнить(РезультатФормирования);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого НастройкаВарианта Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.Значение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если НастройкаВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(НастройкаВарианта.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если НастройкаВарианта.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(НастройкаВарианта.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = НастройкаВарианта.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение)
	Если ТипЗнч(Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат ЗначениеЗаполнено(Строка(Значение));
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОтчетыКлиентСервер.ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ПолучатьИтоговуюТаблицу", Истина);
	РезультатПоиска = ВариантыОтчетов.НайтиСсылки(ПараметрыПоиска);
	ТаблицаВариантов = РезультатПоиска.ТаблицаЗначений;
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование, Автор, ТолькоДляАвтора");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Группа = Элементы.ВариантыОтчета;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	ПоследнийИндекс = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Если СтрокаТаблицы.ТолькоДляАвтора = Истина
			И СтрокаТаблицы.Автор <> АвторизованныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Группа);
		Иначе
			ПоследнийИндекс = ПоследнийИндекс + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ПоследнийИндекс, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		Кнопка.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.ИмяСобытия <> "ПослеФормирования" Тогда
		Переформировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Переформировать");
		Если Переформировать = Истина Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		ИначеЕсли ПараметрыЗаполнения.ВариантМодифицирован
			Или ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Истина;
			ОтображениеСостояния.Текст     = НСтр("ru = 'Изменились настройки. Нажмите ""Сформировать"" для получения отчета.'");
			Если Переформировать = Неопределено Тогда
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Иначе
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// В безопасном режиме отчеты нельзя сохранить при помощи стандартного диалога,
	// возникающего перед закрытием, поскольку не включается привилегированный режим при доступе к планам обмена.
	Если НастройкиОтчета.Безопасный
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	// Также стандартный диалог не показывается если пользователю запрещено изменять варианты этого отчета.
	Если Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
		Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров",            Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров",            Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РежимВариантаОтчета()
	Возврат ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта);
КонецФункции

#КонецОбласти