
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("Заголовок",			Заголовок);
	Параметры.Свойство("ОрганизацияСсылка",	ОрганизацияСсылка);
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Строка(ОрганизацияСсылка);
	КонецЕсли; 
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		МодульОхранаТруда.ДополнитьФормуОтветственныхЛицОрганизации(ЭтотОбъект, "СведенияОбОтветственныхЛицах", "ГруппаОтветственныйЗаОхрануТруда");
	КонецЕсли;
	
	ПрочитатьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
			ЭтаФорма, ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СведенияОбОтветственныхЛицах", ОрганизацияСсылка, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СведенияОбОтветственныхЛицахПриИзменении(Элемент)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(
			ЭтаФорма, "СведенияОбОтветственныхЛицах", ОрганизацияСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СведенияОбОтветственныхЛицахИстория(Команда)
	
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(
			"СведенияОбОтветственныхЛицах", ОрганизацияСсылка, ЭтаФорма, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьДанные()
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
			ЭтаФорма, "СведенияОбОтветственныхЛицах", ОрганизацияСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСведенияОбОтветственныхЛицах(ТекущийОбъектСсылка)
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			ЭтаФорма, "СведенияОбОтветственныхЛицах", ТекущийОбъектСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияСведенийОбОтветственныхЛицах(ДатаИзменения, Отказ, ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияСведенийОбОтветственныхЛицахЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения об ответственных лицах'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения об ответственных лицах.
			|Если Вы исправили прежние сведения (они были ошибочны), нажмите ""Исправлена ошибка"".
			|Если сведения об ответственных лицах изменились с %1, нажмите ""%2""'"), 
		Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"),
		ТекстКнопкиДа);
	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(
			ЭтаФорма, "СведенияОбОтветственныхЛицах", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияСведенийОбОтветственныхЛицахЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	СохранитьДанныеЗавершение(Отказ, ДополнительныеПараметры.ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Отказ, ОповещениеЗавершения = Неопределено)

	ЗапроситьРежимИзмененияСведенийОбОтветственныхЛицах(СведенияОбОтветственныхЛицах.Период, Отказ, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеЗавершение(Отказ, ОповещениеЗавершения) 

	Если Не Отказ Тогда
		СохранитьДанныеНаСервере(Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(СведенияОбОтветственныхЛицах.Руководитель, ЭтаФорма);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(СведенияОбОтветственныхЛицах.ГлавныйБухгалтер, ЭтаФорма);
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере(Отказ)
	
	Если ПроверитьЗаполнение() Тогда
		ЗаписатьСведенияОбОтветственныхЛицах(ОрганизацияСсылка);
		Модифицированность = Ложь;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Модифицированность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиенте()  

	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрытьНаКлиентеЗавершение", ЭтотОбъект);
	СохранитьДанные(Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиентеЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	Если Не Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
