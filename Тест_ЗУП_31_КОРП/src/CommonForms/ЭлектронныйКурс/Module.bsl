

#Область ОписаниеПеременных

// Изучение

&НаКлиенте
Перем ВыполняетсяЗакрытиеФормы;

// Редактирование

&НаКлиенте
Перем ОписаниеДопустимыхТиповПеретаскивания; // Типы, которые можно перетаскивать в курс

&НаКлиенте
Перем ПропуститьАктивациюЭлементаСодержания; // Признак того, что не будет срабатывать обработчик "НавигационноеДеревоПриАктивизацииСтроки".

&НаКлиенте
Перем ПриложениеWord; // Объект COM приложения и другие его свойства

&НаКлиенте
Перем ПриложениеPowerPoint; // Объект COM приложения и другие его свойства

&НаКлиенте
Перем НачальнаяШиринаВидео;

&НаКлиенте
Перем НачальнаяВысотаВидео;

&НаКлиенте
Перем ПубликоватьПриЗакрытии;

&НаКлиенте
Перем ФайлыДляЗагрузки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;	
	
	// Копируем курс
	//
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда		
		Параметры.ЭлектронныйКурс = Справочники.ЭлектронныеКурсы.СкопироватьЭлектронныйКурс(Параметры.ЗначениеКопирования);		
		Скопирован = Истина; // Запоминаем в реквизите формы факт копирования
	КонецЕсли;
	
	// Получаем основные переменные и вызываем событие ПередОткрытиемЭлектронногоКурса
	//
	
	ЭлектронныйКурс = Параметры.ЭлектронныйКурс;
	Учащийся = Параметры.Учащийся;
	Контекст = Параметры.Контекст;	
	РежимПроверки = Параметры.РежимПроверки;	
	
	ИмяОповещенияПриЗакрытии = "";
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.ЭлектронныеКурсы);
	
	Если ЕстьПравоИзменения И Параметры.РежимРедактирования	Тогда
		
		РежимИзучения = Ложь;
		РежимРедактирования = Истина; // Можно редактировать курс
		
	Иначе
		
		РежимИзучения = Истина;
		РежимРедактирования = Ложь;
		
	КонецЕсли;	
	
	Если РежимИзучения 
		И (НЕ ЗначениеЗаполнено(ЭлектронныйКурс)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйКурс, "ЭтоГруппа")) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Электронный курс не задан'"),,,,Отказ);
		Возврат;
		
	КонецЕсли;		
	
	ИдентификаторРедактируемойСтрокиНавигационногоДерева = -1;
	
	ИзучениеЭлектронныхКурсовПереопределяемый.ПриСозданииФормыЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, РежимПроверки, РежимРедактирования, РежимИзучения, ИмяОповещенияПриЗакрытии, Отказ);	
	
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Контекст) И НЕ ЗначениеЗаполнено(Учащийся) Тогда
		ВызватьИсключение НСтр("ru = 'Учащийся не задан.'");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Учащийся) И НЕ ЗначениеЗаполнено(Контекст) Тогда
		ВызватьИсключение НСтр("ru = 'Контекст не задан.'");
	КонецЕсли;	
	
	// Заполняем переменные формы.
	//	
	
	ЕстьПравоАдминистратораСистемы = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения);
	ВыгружатьФайлыЛокально = Ложь;
	ИспользоватьОбщийКаталогВТонкомКлиенте = РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения.Значение("ИспользоватьОбщийКаталогВТонкомКлиенте");
	АдресОбщегоКаталога = РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения.Значение("АдресОбщегоКаталогаНаВебСервере");
	ПутьКОбщемуКаталогу = РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения.Значение("ПутьКОбщемуКаталогуНаВебСервере");	
	
	ЗаполнитьРеквизитыЭлектронногоКурса();

	ЭтоВебКлиент = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("ЭтоВебКлиент");
	
	Если ЭтоВебКлиент = Истина Тогда		
		ВыгружатьФайлыЛокально = Ложь;				
	Иначе		
		ВыгружатьФайлыЛокально = НЕ ИспользоватьОбщийКаталогВТонкомКлиенте;		
	КонецЕсли;
	
	Если НЕ ВыгружатьФайлыЛокально Тогда
		Если НЕ ЗначениеЗаполнено(АдресОбщегоКаталога)
			ИЛИ НЕ ЗначениеЗаполнено(ПутьКОбщемуКаталогу) Тогда
			ОткрытьМастерНастройкиОбщегоКаталога = Истина;
			Возврат;
		КонецЕсли;		
		АдресКаталогаЭлектронныхКурсов    = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуЭлектронныхКурсов(АдресОбщегоКаталога);
		ПутьККаталогуЭлектронныхКурсов    = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуЭлектронныхКурсов(ПутьКОбщемуКаталогу);
	КонецЕсли;	
	
	Если РежимИзучения И ЗначениеЗаполнено(Учащийся) И ЗначениеЗаполнено(Контекст) И ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		
		ИзучениеЭлектронногоКурса = Документы.ИзучениеЭлектронногоКурса.НайтиПоКонтексту(ЭлектронныйКурс, Контекст, Учащийся); 
		
		УстановитьПривилегированныйРежим(Истина); // Для доступа учащимся
		
		Если ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда
			
			ДанныеИзучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзучениеЭлектронногоКурса, "ДанныеИзучения").Получить();			
			
		Иначе
			
			ИзучениеЭлектронногоКурсаОбъект = Документы.ИзучениеЭлектронногоКурса.СоздатьДокумент();
			ИзучениеЭлектронногоКурсаОбъект.Дата = ТекущаяДатаСеанса();
			ИзучениеЭлектронногоКурсаОбъект.Контекст = Контекст;
			ИзучениеЭлектронногоКурсаОбъект.Учащийся = Учащийся;
			ИзучениеЭлектронногоКурсаОбъект.ЭлектронныйКурс = ЭлектронныйКурс;			
			ИзучениеЭлектронногоКурсаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ИзучениеЭлектронногоКурса = ИзучениеЭлектронногоКурсаОбъект.Ссылка;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если РежимРедактирования И ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		Отредактирован = РегистрыСведений.ИзмененныеЭлектронныеКурсы.ЭлектронныйКурсОтредактированТекущимПользователем(ЭлектронныйКурс);
	КонецЕсли;	
	
	ХранитьВидеоНаYouTube = РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения.Значение("РазмещатьВидеоНаYouTube");
	
	Если НЕ РежимРедактирования
		И ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда
		
		ДатаНачалаПопыткиИзучения = ТекущаяДатаСеанса();
		
	КонецЕсли;	
	
	// Выгружаем данные на сервер
	//
	
	Если ЗначениеЗаполнено(ЭлектронныйКурс) И НЕ ВыгружатьФайлыЛокально Тогда
		
		ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыполнитьНачальноеЗаполнениеКаталогаЭлектронныхКурсов(ПутьККаталогуЭлектронныхКурсов);
		
		Если ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда
			ЗаписатьВКаталогДанныеИзучения(ПутьККаталогуЭлектронныхКурсов, ИзучениеЭлектронногоКурса, ДанныеИзучения);			
		КонецЕсли;
		
		Если НЕ РежимРедактирования Тогда
			ВыгрузитьДанныеПередПросмотром(ЭлектронныйКурс, ЭлектронныйКурс, ПутьККаталогуЭлектронныхКурсов, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем навигационное дерево
	//	
	
	Если РежимРедактирования Тогда
		ЗаполнитьНавигационноеДерево();			
	КонецЕсли;
	
	// Устанавливаем начальное состояние элементов формы
	//	
	
	Если РежимРедактирования Тогда
		
		УстановитьВидимостьЭлементовРедактораКурса(Ложь, ЭтотОбъект);
		
		Если ТипЭлектронногоКурса = Перечисления.ТипыЭлектронныхКурсов.Слайдовый Тогда
			Элементы.РежимРедактированияСоздатьГруппу.Видимость = Ложь;
		КонецЕсли;		
		
	Иначе
		
		Элементы.ГруппаНавигация.Видимость = Ложь; 
		Элементы.КоманднаяПанельРедактора.Видимость = Ложь;	
		Элементы.СтраницыРедактора.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЭтоВебКлиент Тогда
		Элементы.РежимРедактированияЗагрузитьФайлы.Видимость = Ложь;
		Элементы.ГруппаМастерСозданияКомандаЗагрузки.Видимость = Ложь;
	КонецЕсли;
	
	// Вызываем событие определяемого модуля
	//
	
	Если РежимИзучения Тогда
		ИзучениеЭлектронныхКурсовПереопределяемый.ПриИзученииЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если ОткрытьМастерНастройкиОбщегоКаталога Тогда
		Отказ = Истина;
		ОткрытьФорму("РегистрСведений.ОбщиеНастройкиЭлектронногоОбучения.Форма.ФормаМастерНастройкиОбщегоКаталога");
		Возврат;
	КонецЕсли;	
	
	Если ВыгружатьФайлыЛокально Тогда
		
		ПутьКОбщемуКаталогу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
		АдресОбщегоКаталога = ПутьКОбщемуКаталогу;
			
		АдресКаталогаЭлектронныхКурсов    = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуЭлектронныхКурсов(АдресОбщегоКаталога);
		ПутьККаталогуЭлектронныхКурсов    = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуЭлектронныхКурсов(ПутьКОбщемуКаталогу);			
		
		ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыполнитьНачальноеЗаполнениеКаталогаЭлектронныхКурсов(ПутьККаталогуЭлектронныхКурсов);
		
		Если ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда		
			ЗаписатьВКаталогДанныеИзучения(ПутьККаталогуЭлектронныхКурсов, ИзучениеЭлектронногоКурса, ДанныеИзучения);		
		КонецЕсли;
		
	КонецЕсли;			
	
	Если РежимРедактирования Тогда
		
		Если ЗначениеЗаполнено(Параметры.ПутьККаталогуСФайламиКурса) Тогда
			
			#Если ВебКлиент Тогда
				
			ВызватьИсключение НСтр("ru = 'Функциональность загрузки файлов в веб-клиенте не поддерживается'");
			
			#Иначе
				
			ПодключитьОбработчикОжидания("ЗагрузитьФайлыСДискаВБазуПриОткрытии", 0.5, Истина);
					
			#КонецЕсли
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда			
				НаименованиеКурса = НаименованиеНовогоЭлектронногоКурса();
				ДобавитьЭлементКурса();			
			КонецЕсли;		
			
		КонецЕсли;		
		
	Иначе		
		
		Если ЗначениеЗаполнено(ЭлектронныйКурс) И ВыгружатьФайлыЛокально Тогда
			ВыгрузитьДанныеПередПросмотром(ЭлектронныйКурс, ЭлектронныйКурс, ПутьККаталогуЭлектронныхКурсов, УникальныйИдентификатор);
		КонецЕсли;
		
		УстановитьЭлементДляПросмотра(ЭлектронныйКурс);		
		
	КонецЕсли;	
	
	Если Скопирован Тогда
		
		Оповестить("ЭлектронныйКурсЗаписан",,ЭлектронныйКурс);
		
		Если ТипЭлектронногоКурса = ПредопределенноеЗначение("Перечисление.ТипыЭлектронныхКурсов.SCORM") Тогда
			// При копировании курса SCORM надо его опубликовать при открытии, так как он не редактируется
			Отказ = Истина;			
			ИдентификаторЗаданияПубликации = ЗафиксироватьРедактирование(ЭлектронныйКурс, Истина, УникальныйИдентификатор);
			Если ЗначениеЗаполнено(ИдентификаторЗаданияПубликации) Тогда
				Оповестить("ВыполняетсяПубликацияЭлектронногоКурса", ИдентификаторЗаданияПубликации, Строка(ЭлектронныйКурс.УникальныйИдентификатор()));
			КонецЕсли;			
		КонецЕсли;		
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если РежимРедактирования Тогда
		
		Если НЕ Модифицированность
			И РазработкаЭлектронныхКурсовСлужебныйКлиент.ДокументМодифицирован(ПриложениеWord) Тогда
			
			Модифицированность = Истина;
			
		КонецЕсли;			
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			Если ЗавершениеРаботы Тогда				
				ТекстПредупреждения = НСтр("ru = 'Несохраненные изменения электронного курса будут потеряны.'");
				Возврат;								
			Иначе				
				ВыйтиИзРежимаРедактирования();				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отредактирован Тогда			
						
			Если ЗавершениеРаботы Тогда				
				
				Отказ = Истина;
				ТекстПредупреждения = НСтр("ru = 'Электронный курс отредактирован, но не опубликован.
				|Если программа будет закрыта, то внесенные изменения не будут доступны для изучения.'");
				Возврат;
				
			Иначе
				
				ИдентификаторЗаданияПубликации = ЗафиксироватьРедактирование(ЭлектронныйКурс, ПубликоватьПриЗакрытии, УникальныйИдентификатор);

				Если ЗначениеЗаполнено(ИдентификаторЗаданияПубликации) Тогда
					Оповестить("ВыполняетсяПубликацияЭлектронногоКурса", ИдентификаторЗаданияПубликации, Строка(ЭлектронныйКурс.УникальныйИдентификатор()));
				КонецЕсли;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	Иначе	
					
		Если ЗавершениеРаботы Тогда			
			Отказ = Истина;			
			ТекстПредупреждения = НСтр("ru = 'Изучение электронного курса будет прервано без сохранения последних результатов.
			|Перед выходом из программы закройте все открытые электронные курсы для сохранения данных об изучении.'");			
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВыполняетсяЗакрытиеФормы И Элементы.ОбластьПросмотра.Видимость Тогда
		ВыполняетсяЗакрытиеФормы = Истина;
		ОбластьПросмотра = "about:blank";
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 3, Истина); // На случай сбоя в поле HTML
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если РежимРедактирования Тогда
		РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриЗакрытииФормыДокумента(ПриложениеWord, Истина, ЭтотОбъект);
		ЗакрытьПрезентациюPowerPoint(Истина);
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ИмяОповещенияПриЗакрытии) Тогда		
		Оповестить(ИмяОповещенияПриЗакрытии, ВладелецФормы, ЭтотОбъект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "ПодборкаОбновлена"
		И ВыполняетсяРедактированиеЭлемента() Тогда
				
		ПросмотретьСтраницуЭлементаКурса();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбластьПросмотраПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) 
		ИЛИ ДанныеСобытия = Неопределено 
		ИЛИ ДанныеСобытия.Element.id <> "v8ExchangeData" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	ДанныеИзучения = ДанныеСобытия.Element.innerText;		
	
	Если ЗначениеЗаполнено(ДанныеИзучения) Тогда			
		Если ВыполняетсяЗакрытиеФормы Тогда
			СохранитьДанныеИзучения(Истина);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_СохранитьДанныеИзучения", 0.01, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПросмотраДокументСформирован(Элемент)
	Если ВыполняетсяЗакрытиеФормы И ОбластьПросмотра = "about:blank" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.01, Истина);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()	
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьДанныеИзучения()
	
	СохранитьДанныеИзучения(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеИзучения(ВыполняетсяЗакрытиеФормы)
	
	СохранитьВБазуДанныеИзучения(ИзучениеЭлектронногоКурса, ДанныеИзучения, ДатаНачалаПопыткиИзучения, ВыполняетсяЗакрытиеФормы);
	ДанныеИзучения = "";
	
КонецПроцедуры

// Режим редактирования
//

&НаКлиенте
Процедура НаименованиеКурсаПриИзменении(Элемент)
	ИзменитьНаименованиеКурса();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаименованиеКурса()
	НавигационноеДерево.ПолучитьЭлементы().Получить(0).Наименование = НаименованиеКурса;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаКоличествоВопросовУстановленоПриИзменении(Элемент)
	НастройкиТестаКоличествоВопросов = ?(НастройкиТестаКоличествоВопросовУстановлено = 1, 1, 0);
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаКоличествоВопросовПриИзменении(Элемент)
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаВремяТестаУстановленоПриИзменении(Элемент)
	НастройкиТестаВремяТеста = ?(НастройкиТестаВремяТестаУстановлено, 1, 0);
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаВремяТестаПриИзменении(Элемент)
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаКоличествоПопытокУстановленоПриИзменении(Элемент)
	НастройкиТестаКоличествоПопыток = ?(НастройкиТестаКоличествоПопытокУстановлено, 1, 0);
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТестаКоличествоПопытокПриИзменении(Элемент)
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНастроекТестирования(Форма)
	
	// Количество вопросов
	
	Форма.НастройкиТестаКоличествоВопросовУстановлено = ?(Форма.НастройкиТестаКоличествоВопросов > 0, 1, 0);
	
	Форма.Элементы.НастройкиТестаКоличествоВопросов.Доступность = (Форма.НастройкиТестаКоличествоВопросовУстановлено = 1);
	Форма.Элементы.НастройкиТестаКоличествоВопросовУстановлено.Доступность = (Форма.Элементы.НастройкиТестаКоличествоВопросов.МаксимальноеЗначение > 1);
	
	// Время тестирования
	
	Форма.НастройкиТестаВремяТестаУстановлено = (Форма.НастройкиТестаВремяТеста > 0);
	
	Форма.Элементы.НастройкиТестаВремяТеста.Доступность = (Форма.НастройкиТестаВремяТестаУстановлено);	
	
	// Количество попыток
	
	Форма.НастройкиТестаКоличествоПопытокУстановлено = (Форма.НастройкиТестаКоличествоПопыток > 0);
	
	Форма.Элементы.НастройкиТестаКоличествоПопыток.Доступность = (Форма.НастройкиТестаКоличествоПопытокУстановлено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоШиринаПриИзменении(Элемент)	
	НастройкиВидеоПриИзменении();		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоВысотаПриИзменении(Элемент)
	НастройкиВидеоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоПриИзменении()
	
	УстановитьДоступностьНастроекВидео();
	
	Если НастройкиВидеоСохранятьПропорции Тогда
		
		РазработкаЭлектронныхКурсовСлужебныйКлиент.ИзменитьРазмерыПропорционально(
			Неопределено, НастройкиВидеоШирина, НастройкиВидеоВысота, НачальнаяШиринаВидео, НачальнаяВысотаВидео);
			
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоШиринаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ИзменитьРазмерыПропорционально(
		?(Направление = 1, Истина, Ложь), НастройкиВидеоШирина, НастройкиВидеоВысота);
		
	Модифицированность = Истина;	
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоВысотаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ИзменитьРазмерыПропорционально(
		?(Направление = 1, Истина, Ложь), НастройкиВидеоШирина, НастройкиВидеоВысота);
		
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидеоСохранятьПропорцииПриИзменении(Элемент)
	УстановитьДоступностьНастроекВидео();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьНастроекВидео()
	
	МожноИзменятьРазмерыПропорционально = 
		РазработкаЭлектронныхКурсовСлужебныйКлиент.МожноИзменятьРазмерыПропорционально(
			НастройкиВидеоШирина, НастройкиВидеоВысота
		);
		
	Если НЕ МожноИзменятьРазмерыПропорционально Тогда
		НастройкиВидеоСохранятьПропорции = Ложь;
		Элементы.НастройкиВидеоСохранятьПропорции.Доступность = Ложь;
	Иначе
		Элементы.НастройкиВидеоСохранятьПропорции.Доступность = Истина;
	КонецЕсли;
		
	Элементы.НастройкиВидеоШирина.КнопкаРегулирования = НастройкиВидеоСохранятьПропорции;
	Элементы.НастройкиВидеоВысота.КнопкаРегулирования = НастройкиВидеоСохранятьПропорции;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНавигационноеДерево

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НавигационноеДерево

&НаКлиенте
Процедура НавигационноеДеревоПриАктивизацииСтроки(Элемент)
	
	Если ПропуститьАктивациюЭлементаСодержания Тогда
		ПропуститьАктивациюЭлементаСодержания = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда		
		ПодключитьОбработчикОжидания("АктивироватьЭлементСодержанияЧерезОбработчик", 0.01, Истина); //Web-client 404 bug
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьЭлементСодержанияЧерезОбработчик()
	АктивироватьЭлементСодержания(Элементы.НавигационноеДерево.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьЭлементСодержания(Знач АктивированныйЭлементСодержания = Неопределено)
	
	Если ВыполняетсяРедактированиеЭлемента() Тогда
		
		РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
		
		Если РедактируемаяСтрока = Неопределено ИЛИ РедактируемаяСтрока.Ссылка <> Элементы.НавигационноеДерево.ТекущиеДанные.Ссылка Тогда
			ВыйтиИзРежимаРедактирования();			
		КонецЕсли;
		
	Иначе
		
		Если АктивированныйЭлементСодержания = ЭлектронныйКурс Тогда
			УстановитьЭлементДляПросмотра(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Начало"));
		ИначеЕсли ТипЗнч(АктивированныйЭлементСодержания) = Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда			
			УстановитьЭлементДляПросмотра(АктивированныйЭлементСодержания);
		Иначе			
			ОтобразитьПустойЭлементКурса(Элементы.НавигационноеДерево.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьЭлементКурса();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Истина;
	
	ДобавитьЭлементКурса();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоПередУдалением(Элемент, Отказ)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Истина;
	
	УдалитьЭлементКурса();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные = Неопределено ИЛИ НЕ РежимРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные.ЭтоГруппа
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		// Создаем новую группу в базе, которая еще не записана в базу		
		
		ТекущийЭлементДерева = НавигационноеДерево.НайтиПоИдентификатору(Элементы.НавигационноеДерево.ТекущаяСтрока);
		РодительскийЭлемент = ТекущийЭлементДерева.ПолучитьРодителя();
		
		СозданнаяГруппа = СоздатьНовуюГруппуЭлементовНаСервере(ЭлектронныйКурс, РодительскийЭлемент.Ссылка, ТекущийЭлементДерева.Наименование);
		
		ТекущийЭлементДерева.Ссылка = СозданнаяГруппа;
		
		УстановитьЭлементДляПросмотра(); // Пустой элемент
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		// Записываем новое наименование уже записанного элемента
		
		ЗаписатьНовоеНаименованиеЭлемента(ТекущиеДанные.Ссылка, ТекущиеДанные.СсылкаНаЭлемент,  ТекущиеДанные.Наименование, ТекущиеДанные.ЭтоГруппа);
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ЭлектронныеКурсы") Тогда
			НаименованиеКурса = ТекущиеДанные.Наименование;
			Оповестить("ЭлектронныйКурсЗаписан",,ЭтотОбъект);
			ЗаполнитьРеквизитыЭлектронногоКурса();
		КонецЕсли;
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение    = ПараметрыПеретаскивания.Значение;
	ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение);
	
	// 1. Проверяем возможность перетаскивания, когда нет описания типов.
	
	Если ОписаниеДопустимыхТиповПеретаскивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Проверяем возможность перетаскивания с описанием допустимых типов.
	
	Если ТипЗначения = Тип("Массив") Тогда
		ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение[0]);
	КонецЕсли;
	
	Если ОписаниеДопустимыхТиповПеретаскивания.СодержитТип(ТипЗначения) Тогда		
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационноеДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		
		ПеремещенныйЭлементСсылка = НавигационноеДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).Ссылка; 
		ПеремещенныйЭлементСтарыйРодительСтрока = НавигационноеДерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]).ПолучитьРодителя();
		
		Если ПеремещенныйЭлементСтарыйРодительСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПеремещенныйЭлементСтарыйРодитель = ПеремещенныйЭлементСтарыйРодительСтрока.Ссылка;
		
		Если Строка = Неопределено Тогда
			Строка = НавигационноеДерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		ПереместитьЭлементСодержания(ПараметрыПеретаскивания.Значение[0], Строка);
		
		НовыйИдентификаторПеремещенногоЭлемента = ИдентификаторСтрокиНавигационногоДереваПоСсылкеНаЭлемент(ПеремещенныйЭлементСсылка);
		
		НовыйРодительЭлементаСтрока = НавигационноеДерево.НайтиПоИдентификатору(НовыйИдентификаторПеремещенногоЭлемента).ПолучитьРодителя();
		СтарыйРодительЭлементаСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиНавигационногоДереваПоСсылкеНаЭлемент(ПеремещенныйЭлементСтарыйРодитель));
		
		Элементы.НавигационноеДерево.Развернуть(НовыйРодительЭлементаСтрока.ПолучитьИдентификатор());
		Элементы.НавигационноеДерево.Развернуть(СтарыйРодительЭлементаСтрока.ПолучитьИдентификатор());

		Элементы.НавигационноеДерево.ТекущаяСтрока = НовыйИдентификаторПеремещенногоЭлемента;
				
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	
	Если (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл"))
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда		
			МассивФайлов = ПараметрыПеретаскивания.Значение;
		Иначе
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
		ФайлыДляЗагрузки = МассивФайлов; // Переменная модуля
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьФайлыСДискаВБазу", 0.3, Истина);
		
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьФайлыСДискаВБазу()
	ЗагрузитьФайлыСДискаВБазу();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыСДискаВБазуПриОткрытии()
	
	СтруктураИмениКаталога = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Параметры.ПутьККаталогуСФайламиКурса);
	НаименованиеКурса = СтруктураИмениКаталога.Имя;
	ИзменитьНаименованиеКурса();
	ФайлыДляЗагрузки = НайтиФайлы(Параметры.ПутьККаталогуСФайламиКурса, "*", Ложь);			
	ЗагрузитьФайлыСДискаВБазу();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыСДискаВБазу()
	
	#Если НЕ ВебКлиент Тогда
		
	КоличествоФайлов = ФайлыДляЗагрузки.Количество();
	
	Если КоличествоФайлов = 0  Тогда
		Возврат;
	КонецЕсли;	
	
	ОтменитьСозданиеСлайда();
	
	ПерваяЗаписьКурса = НЕ ЗначениеЗаполнено(ЭлектронныйКурс);
	
	ВыйтиИзРежимаРедактирования(,ПерваяЗаписьКурса);
	
	Если Модифицированность Тогда
		Возврат; // Еще не сохранили текущие изменения
	КонецЕсли;
	
	Если ХранитьВидеоНаYouTube Тогда
		
		// Загружаем на YouTube	
		
		ВидеоФайлыДляЗагрузкиНаYouTube = Новый Массив;
		
		Для каждого Файл Из ФайлыДляЗагрузки Цикл

			ЭтоФайлВидео = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлВидео(Файл.Расширение);
			
			Если ЭтоФайлВидео Тогда
				ВидеоФайлыДляЗагрузкиНаYouTube.Добавить(Файл.ПолноеИмя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВидеоФайлыДляЗагрузкиНаYouTube.Количество() > 0 Тогда			
			ДополнительныеПараметры = Новый Структура("ВидеоФайлыДляЗагрузкиНаYouTube", ВидеоФайлыДляЗагрузкиНаYouTube);
			ОбработкаОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуФайловВидеоНаYouTube", ЭтотОбъект, ДополнительныеПараметры);
			РазработкаЭлектронныхКурсовСлужебныйКлиент.ПередИспользованиемYouTube(ОбработкаОповещения);						
		Иначе			
			ЗагрузитьФайлыСДискаВБазуПродолжение();			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьФайлыСДискаВБазуПродолжение();
		
	КонецЕсли;	
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуФайловВидеоНаYouTube(ПерсональныеНастройкиYouTube, ДополнительныеПараметры) Экспорт

	ОбработкаОповещенияПослеЗагрузки = Новый ОписаниеОповещения("ПослеЗагрузкиФайловВидеоНаYouTube", ЭтотОбъект);	
	ПараметрыФормы = Новый Структура("ФайлыДляЗагрузки, ПерсональныеНастройкиYouTube", ДополнительныеПараметры.ВидеоФайлыДляЗагрузкиНаYouTube, ПерсональныеНастройкиYouTube);
		
	ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаЗагрузкиВидеоНаYouTube", ПараметрыФормы, ЭтотОбъект,,,,ОбработкаОповещенияПослеЗагрузки);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗагрузкиФайловВидеоНаYouTube(ЗагруженныеФайлыСоответствие, ДополнительныеПараметры = Неопределено) Экспорт
	Если ЗагруженныеФайлыСоответствие <> Неопределено Тогда
		ЗагрузитьФайлыСДискаВБазуПродолжение(ЗагруженныеФайлыСоответствие); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыСДискаВБазуПродолжение(ЗагруженныеФайлыНаYouTube = Неопределено)

	#Если НЕ ВебКлиент Тогда
		
	КоличествоФайлов = ФайлыДляЗагрузки.Количество();
	ПерваяЗаписьКурса = НЕ ЗначениеЗаполнено(ЭлектронныйКурс);
	ЗагруженоФайлов = 0;	
	ВидеоФайлыДляКонвертирования = Новый Массив;
	
	Для каждого Файл Из ФайлыДляЗагрузки Цикл
		
		Состояние(НСтр("ru = 'Загружаются файлы...'"), Окр(ЗагруженоФайлов/КоличествоФайлов*100), Файл.Имя);
		
		ЭтоФайлДокумента = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлДокумента(Файл.Расширение);
		ЭтоФайлВидео = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлВидео(Файл.Расширение);
		ЭтоФайлАудио = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлАудио(Файл.Расширение);
		ЭтоФайлТаблиц = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлТаблиц(Файл.Расширение);
		ЭтоФайлПрезентации = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлПрезентации(Файл.Расширение);
		
		Если ЭтоФайлДокумента Тогда			
			НоваяСтрока = НовыйЭлементСодержания(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord"));
			РазработкаЭлектронныхКурсовСлужебныйКлиент.ИнициализироватьПриложениеРаботыСДокументами(ПриложениеWord);
			СохранитьДокументWordВБазу(Файл.ПолноеИмя, НоваяСтрока.ПолучитьИдентификатор(), Файл.ИмяБезРасширения);			
		КонецЕсли;					
		
		Если ЭтоФайлВидео ИЛИ ЭтоФайлАудио Тогда
			
			Если ЭтоФайлВидео Тогда
				Если ХранитьВидеоНаYouTube Тогда
					ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube");
				Иначе
					ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео");
				КонецЕсли;				
			КонецЕсли;
			
			Если ЭтоФайлАудио Тогда
				ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Звук");
			КонецЕсли;			
			
			НоваяСтрока = НовыйЭлементСодержания(ТипЭлемента);
			
			Если ХранитьВидеоНаYouTube И ЭтоФайлВидео Тогда
				ИдентификаторВидеоYouTube = ЗагруженныеФайлыНаYouTube.Получить(Файл.ПолноеИмя);
				Если НЕ ЗначениеЗаполнено(ИдентификаторВидеоYouTube) Тогда
					ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Идентификатор файла %1 не найден'"), Файл.ПолноеИмя);
				КонецЕсли;
				СвойстваФайла = Новый Структура("ИдентификаторВидео", ИдентификаторВидеоYouTube);
			Иначе				
				СвойстваФайла = ПодготовитьВидеоИлиАудиоДляЗагрузкиВБазу(Файл);
			КонецЕсли;

			СохранитьЭлементКурсаНаСервере(СвойстваФайла, НоваяСтрока.ПолучитьИдентификатор(), Файл.ИмяБезРасширения);

			Если ЭтоФайлВидео И НЕ ХранитьВидеоНаYouTube Тогда
			
				Если СвойстваФайла.Свойство("ДанныеЗаписанногоЭлементаРесурса")	
					И ЗначениеЗаполнено(СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка)	Тогда	
					ЗаписанныйВБазуФайлВидео = СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка;
				Иначе		
					ВызватьИсключение НСтр("ru = 'Файл видео не записан в базу'");		
				КонецЕсли;				
				
				Если НЕ РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлВидеоПоддерживаемогоФормата(Файл.Расширение) Тогда
					ВидеоФайлыДляКонвертирования.Добавить(ЗаписанныйВБазуФайлВидео);						
				КонецЕсли;			
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЭтоФайлПрезентации Тогда			
			ДобавитьНовуюПрезентациюВБазу(Файл);						
		КонецЕсли;
		
		Если ЭтоФайлТаблиц Тогда			
			ДобавитьНовыйТестИзФайлаExcel(Файл);
		КонецЕсли;
		
		ЗагруженоФайлов = ЗагруженоФайлов + 1;
		
	КонецЦикла;
	
	ФайлыДляЗагрузки = Новый Массив;
	
	ПараметрыПослеЗагрузки = Новый Структура("ПоследняяСтрока, ПерваяЗаписьКурса", НоваяСтрока, ПерваяЗаписьКурса);
	
	Если ВидеоФайлыДляКонвертирования.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиФайловСДискаВБазу", ЭтотОбъект, ПараметрыПослеЗагрузки);
		
		ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаКонвертерВидео",
			Новый Структура("ЭлементРесурса, Автозапуск", Новый ФиксированныйМассив(ВидеоФайлыДляКонвертирования), Истина),
			ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
			
	Иначе
		
		ПослеЗагрузкиФайловСДискаВБазу(Неопределено, ПараметрыПослеЗагрузки)
			
	КонецЕсли;	
	
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗагрузкиФайловСДискаВБазу(РезультатЗакрытия, ПараметрыПослеЗагрузки) Экспорт	
	
	Если ПараметрыПослеЗагрузки.ПоследняяСтрока <> Неопределено Тогда
		Элементы.НавигационноеДерево.ТекущаяСтрока = ПараметрыПослеЗагрузки.ПоследняяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ПараметрыПослеЗагрузки.ПерваяЗаписьКурса Тогда		
		Оповестить("ЭлектронныйКурсЗаписан",,ЭтотОбъект);		
	КонецЕсли;		
	
	ПриРедактировании();
	
	ПоказатьПредупреждение(, НСтр("ru = 'Загрузка завершена'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраницыЭлементовИСтраницыТеста

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СтраницыТеста

&НаКлиенте
Процедура СтраницыЭлементовПриАктивизацииСтроки(Элемент)
	ПросмотретьСтраницуЭлементаКурса(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЭлементовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Получаем переменные
	
	СтандартнаяОбработка = Ложь;

	ТаблицаЭлементов = ТаблицаРедактируемогоНабораЭлементов();
	
	Если ТаблицаЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = ТаблицаЭлементов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	// Открываем элементы
	
	Если ТипЗнч(ТекущиеДанные.ЭлементСтраницы) = Тип("СправочникСсылка.ТестовыеВопросы") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ЭлементСтраницы);
		ПараметрыФормы.Вставить("ЭлектронныйКурс", ЭлектронныйКурс);
		ПараметрыФормы.Вставить("Тест", РедактируемаяСтрока.СсылкаНаЭлемент);
		ПараметрыФормы.Вставить("Страница", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Справочник.ТестовыеВопросы.Форма.ФормаЭлемента", ПараметрыФормы, Элемент);			
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Текущий элемент слайда не может быть открыт'"));
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЭлементовОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(НовыйОбъект) И ТипЗнч(НовыйОбъект) <> Тип("СправочникСсылка.СтраницыЭлементовЭлектронныхКурсов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
		
		Если ТипЗнч(РедактируемаяСтрока.СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлектронныеТесты") Тогда
			ТаблицаЭлементов = Элементы.СтраницыТеста;
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный тип таблицы элементов'");
		КонецЕсли;	
		
		ВыделеннаяГруппа = ЭлектронноеОбучениеСлужебныйКлиент.ВыделеннаяГруппаТаблицы(ТаблицаЭлементов);
		
		ТаблицаЭлементов.ТекущаяСтрока = СоздатьСтраницуТеории(РедактируемаяСтрока.СсылкаНаЭлемент, НовыйОбъект, ВыделеннаяГруппа);		
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыТестаПриИзменении(Элемент)
	ОбновитьНастройкиТеста();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиТеста()
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьМаксимальноеКоличествоВопросовВНастройкеТеста(РедактируемаяСтрока.СсылкаНаЭлемент);
	УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Режим редактирования
//

&НаКлиенте
Процедура РежимРедактированияСоздатьЭлемент(Команда)
	
	ДобавитьЭлементКурса();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗагрузитьФайлы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РежимРедактированияЗагрузитьФайлыПродолжение", ЭтотОбъект);
	
	МассивТиповВыбора = Новый Массив;
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Video"));
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Audio"));	
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Document"));	
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Presentation"));	
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Table"));	
	
	ДиалогВыбораФайлов = РазработкаЭлектронныхКурсовСлужебныйКлиент.ДиалогВыбораФайлаПоТипу(
		МассивТиповВыбора,
		НСтр("ru = 'Выберите файлы для загрузки'"),
		НСтр("ru = 'Файлы для загрузки'")		
	);
	
	ДиалогВыбораФайлов.МножественныйВыбор = Истина;
	ДиалогВыбораФайлов.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗагрузитьФайлыПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыДляЗагрузки = Новый Массив;
	
	Для каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл	
		ФайлыДляЗагрузки.Добавить(Новый Файл(ВыбранныйФайл));	
	КонецЦикла;	
	
	#КонецЕсли
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьФайлыСДискаВБазу", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияРедактироватьЭлемент(Команда)
	
	РедактироватьЭлементКурса();	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияУдалитьЭлемент(Команда)
	УдалитьЭлементКурса();
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗаписатьЭлемент(Команда)	
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		ПропуститьАктивациюЭлементаСодержания = Истина; // Так как поменяется дерево
	КонецЕсли;
	
	СохранитьЭлементКурса();	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗаписатьИЗакрытьЭлемент(Команда)		
	
	Если РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияДоступна(ПриложениеPowerPoint) Тогда
		ЗавершитьРедактированиеПрезентации();
	Иначе		
		СохранитьЭлементКурса(, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗакрытьРедакторБезСохранения(Команда)
	
	ВыйтиИзРежимаРедактирования(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьДокумент(Команда)
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Документ");
	
	НачатьРедактироватьЭлементКурса();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьДокументWord(Команда)
	
	Если НЕ РазработкаЭлектронныхКурсовСлужебныйКлиент.ЕстьПоддержкаДокументов() Тогда
		
		#Если ВебКлиент Тогда
			
		ПоказатьПредупреждение(,НСтр("ru = 'Создание слайда в Microsoft Word недоступно в браузере.
		|Воспользуйтесь настольной версией программы.'"));
		
		#Иначе
			
		ПоказатьПредупреждение(,НСтр("ru = 'Создание слайда в Microsoft Word доступно только в системе Windows.'"));
		
		#КонецЕсли
			
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
	НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord");
	
	НачатьРедактироватьЭлементКурса();
	
	ОткрытьДокументWord();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьТест(Команда)
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	НоваяСтрока.Наименование = НСтр("ru = 'Тестирование'");
	НоваяСтрока.ТипЭлемента  = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Тест");
	
	НачатьРедактироватьЭлементКурса();	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьYouTube(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоYouTubeПоСсылке", ЭтотОбъект);
	
	ПоказатьВводЗначения(ОписаниеОповещения, "", НСтр("ru = 'Укажите адрес видео на youtube.com'"), Тип("Строка"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидеоYouTubeПоСсылке(ГиперссылкаНаВидео, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГиперссылкаНаВидео) Тогда
		Возврат;
	КонецЕсли;
	
	// Находим идентификатор
	
	ИдентификаторВидео = "";
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ГиперссылкаНаВидео);	
	
	Если СтруктураURI.Хост = "youtu.be" Тогда
		
		НачалоПараметров = СтрНайти(СтруктураURI.ПутьНаСервере, "?");
		НачалоХэша = СтрНайти(СтруктураURI.ПутьНаСервере, "#");
		
		Если НачалоПараметров > 0 Тогда
			ИдентификаторВидео = Лев(СтруктураURI.ПутьНаСервере, НачалоПараметров-1);
		ИначеЕсли НачалоХэша > 0 Тогда
			ИдентификаторВидео = Лев(СтруктураURI.ПутьНаСервере, НачалоХэша-1);
		Иначе
			ИдентификаторВидео = СтруктураURI.ПутьНаСервере;
		КонецЕсли;		
		
	Иначе
		
		НачалоПараметров = СтрНайти(СтруктураURI.ПутьНаСервере, "?");
		
		Если НачалоПараметров > 0 Тогда
			
			СтруктураПараметров = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.СтруктураСтрокиПараметров(ГиперссылкаНаВидео);
			
			Если СтруктураПараметров.Свойство("v") Тогда
				ИдентификаторВидео = СтруктураПараметров["v"];
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторВидео) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Адрес не содержит идентификатор видео.
		|Укажите адрес страницы видео с сайта youtube.com.'"));
		Возврат;
	КонецЕсли;
	
	// Устанавливаем свойства строки
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	НоваяСтрока.Наименование = НСтр("ru = 'Видео с YouTube'");
	НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube");

	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ИдентификаторВидео", ИдентификаторВидео);
	
	СохранитьЭлементКурса(СвойстваФайла, Истина); // Вызов сервера и выход из режима редактирования
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьВидео(Команда)
	
	Если ХранитьВидеоНаYouTube Тогда
		ЗагрузитьИнтерактивноФайлВидеоНаYouTube();
	Иначе
		ЗагрузитьИнтерактивноФайлВидеоВБазу();
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьЗвук(Команда)
	ЗагрузитьИнтерактивноФайлАудиоВБазу();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнтерактивноФайлВидеоНаYouTube()

	#Если ВебКлиент Тогда
		
	ВызватьИсключение НСтр("ru = 'Функциональность в веб-клиенте не поддерживается'");
		
	#Иначе
		
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыбратьФайлВидеоДляЗагрузкиНаYouTube", ЭтотОбъект);
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ПередИспользованиемYouTube(ОбработкаОповещения);
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлВидеоДляЗагрузкиНаYouTube(ПерсональныеНастройкиYouTube, ДополнительныеПараметра) Экспорт
	
	Если ПерсональныеНастройкиYouTube = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуФайлаВидеоНаYouTube", ЭтотОбъект, ПерсональныеНастройкиYouTube);
		
	МассивТиповВыбора = Новый Массив;
	МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Video"));

	ДиалогВыбораВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ДиалогВыбораФайлаПоТипу(
		МассивТиповВыбора,
		НСтр("ru = 'Выберите файл с видео'"),
		НСтр("ru = 'Видео'")
	);
	
	ДиалогВыбораВидео.Показать(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуФайлаВидеоНаYouTube(ВыбранныеФайлы, ПерсональныеНастройкиYouTube) Экспорт
	
	// Делаем проверки
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Загружаем на YouTube	
	
	ОбработкаОповещенияПослеЗагрузки = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаВидеоНаYouTube", ЭтотОбъект, ВыбранныеФайлы[0]);	
	ПараметрыФормы = Новый Структура("ФайлыДляЗагрузки, ПерсональныеНастройкиYouTube", ВыбранныеФайлы, ПерсональныеНастройкиYouTube);
	
	ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаЗагрузкиВидеоНаYouTube", ПараметрыФормы, ЭтотОбъект,,,,ОбработкаОповещенияПослеЗагрузки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФайлаВидеоНаYouTube(ЗагруженныеФайлыСоответствие, ПутьКЗагружаемомуФайлу) Экспорт
	
	Если ЗагруженныеФайлыСоответствие = Неопределено ИЛИ ЗагруженныеФайлыСоответствие.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;		
	
	ИдентификаторВидеоYouTube = ЗагруженныеФайлыСоответствие.Получить(ПутьКЗагружаемомуФайлу);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторВидеоYouTube) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл %1 не загружен'"), ПутьКЗагружаемомуФайлу);
	КонецЕсли;
	
	СтруктураЗагружаемогоФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКЗагружаемомуФайлу);
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);			
	НоваяСтрока.Наименование = СтруктураЗагружаемогоФайла.ИмяБезРасширения;
	НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube");

	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ИдентификаторВидео", ИдентификаторВидеоYouTube);
	
	ПропуститьАктивациюЭлементаСодержания = Истина; // Так как поменяется дерево
	СохранитьЭлементКурса(СвойстваФайла, Истина,, НоваяСтрока.Наименование); // Вызов сервера
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнтерактивноФайлВидеоВБазу()
	
	ЕстьПоддержкаРаботыСВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ЕстьПоддержкаРаботыСВидео();
	
	Если ЕстьПоддержкаРаботыСВидео Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоИлиАудиоПродолжение", ЭтотОбъект);
		
		МассивТиповВыбора = Новый Массив;
		МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Video"));
		
		ДиалогВыбораВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ДиалогВыбораФайлаПоТипу(
			МассивТиповВыбора,
			НСтр("ru = 'Выберите файл с видео'"),
			НСтр("ru = 'Видео'")
		);
		
		ДиалогВыбораВидео.Показать(ОписаниеОповещения);
	
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоИлиАудиоТолькоЗагрузкойПродолжение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения,,, Истина, УникальныйИдентификатор);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнтерактивноФайлАудиоВБазу()
	
	ЕстьПоддержкаРаботыСВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ЕстьПоддержкаРаботыСВидео();
	
	Если ЕстьПоддержкаРаботыСВидео Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоИлиАудиоПродолжение", ЭтотОбъект);
		
		МассивТиповВыбора = Новый Массив;
		МассивТиповВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Audio"));	
		
		ДиалогВыбораВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ДиалогВыбораФайлаПоТипу(
			МассивТиповВыбора,
			НСтр("ru = 'Выберите файл с аудио'"),
			НСтр("ru = 'Звук'")
		);
		
		ДиалогВыбораВидео.Показать(ОписаниеОповещения);
	
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоИлиАудиоТолькоЗагрузкойПродолжение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения,,, Истина, УникальныйИдентификатор);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидеоИлиАудиоТолькоЗагрузкойПродолжение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат ИЛИ НЕ ЗначениеЗаполнено(ВыбранноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранноеИмяФайла);
	
	УстановитьСвойстваНовогоЭлементаСодержанияСВидео(СтруктураФайла.Расширение);	
	
	СписокРазмещенныхФайлов = Новый Массив; // Список файлов с описанием места их хранения во временном хранилище.				
	КонтекстФайла = Неопределено; // Метка, позволяющая при записи файла в базу установить доп. свойства	
	
	СтруктураФайлов = Новый Массив;
	СтруктураФайлов.Добавить(ЭлектронноеОбучениеСлужебныйКлиентСервер.НовоеОписаниеФайла(СтруктураФайла, КонтекстФайла));
	
	СписокРазмещенныхФайлов = Новый Массив;
	СписокРазмещенныхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ВыбранноеИмяФайла, Адрес));
	
	СвойстваФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла();
	СвойстваФайла.Имя = СтруктураФайла.ИмяБезРасширения;
	СвойстваФайла.Расширение = СтруктураФайла.Расширение;
	СвойстваФайла.ЭтоКаталог = Ложь;
	СвойстваФайла.Преобразовать = Ложь;
	СвойстваФайла.СтруктураФайлов = СтруктураФайлов;
	СвойстваФайла.СписокФайлов = СписокРазмещенныхФайлов;
	СвойстваФайла.НастройкиКартинок = Неопределено;
	СвойстваФайла.ДанныеВидео = Неопределено;
	СвойстваФайла.КонтекстФайла = КонтекстФайла;
	СвойстваФайла.ТекстовыеДанныеДляИндексирования = Неопределено;
		
	СохранитьЭлементКурса(СвойстваФайла,,,СвойстваФайла.Имя); // Вызов сервера
	
	Если СвойстваФайла.Свойство("ДанныеЗаписанногоЭлементаРесурса")	
		И ЗначениеЗаполнено(СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка)	Тогда	
		ЗаписанныйВБазуФайлВидео = СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка;
	Иначе		
		ВызватьИсключение НСтр("ru = 'Файл видео не записан в базу'");		
	КонецЕсли;		
	
	СоздатьВидеоИлиАудиоОкончание(Неопределено, СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидеоИлиАудиоПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	// Делаем проверки
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем новую строку дерева
	
	ФайлДляЗагрузки = Новый Файл(ВыбранныеФайлы[0]);
	
	УстановитьСвойстваНовогоЭлементаСодержанияСВидео(ФайлДляЗагрузки.Расширение);	
		
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);		
	
	Состояние(НСтр("ru = 'Пожалуйста, подождите, выполняется передача файла видео на сервер...'"));
	
	СвойстваФайла = ПодготовитьВидеоИлиАудиоДляЗагрузкиВБазу(ФайлДляЗагрузки);
	
	ПропуститьАктивациюЭлементаСодержания = Истина; // Так как поменяется дерево
	
	СохранитьЭлементКурса(СвойстваФайла,,,СвойстваФайла.Имя); // Вызов сервера
	
	Если СвойстваФайла.Свойство("ДанныеЗаписанногоЭлементаРесурса")	
		И ЗначениеЗаполнено(СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка)	Тогда	
		ЗаписанныйВБазуФайлВидео = СвойстваФайла.ДанныеЗаписанногоЭлементаРесурса.Ссылка;
	Иначе		
		ВызватьИсключение НСтр("ru = 'Файл видео не записан в базу'");		
	КонецЕсли;	
	
	Если НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео") 
		И НЕ РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлВидеоПоддерживаемогоФормата(ФайлДляЗагрузки.Расширение) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВидеоИлиАудиоОкончание", ЭтотОбъект, НоваяСтрока.Ссылка);
		
		ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаКонвертерВидео",
			Новый Структура("ЭлементРесурса, Автозапуск", ЗаписанныйВБазуФайлВидео, Истина),
			ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьВидеоИлиАудиоОкончание(,НоваяСтрока.Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьВидеоИлиАудиоДляЗагрузкиВБазу(ФайлДляЗагрузки)	
	
	// Помещаем файл во временное хранилище и формируем переменные для передачи на сервер.
	
	СписокФайлов = Новый Массив; // Линейный список файлов для последующего помещения во временное хранилище.
	СтруктураФайлов = Новый Массив; // Массив файлов с учетом иерархии каталогов.		
	СписокРазмещенныхФайлов = Новый Массив; // Список файлов с описанием места их хранения во временном хранилище.				
	КонтекстФайла = Неопределено; // Метка, позволяющая при записи файла в базу установить доп. свойства.
	
	ОтсортированныеФайлы = Новый Массив;
	ОтсортированныеФайлы.Добавить(ФайлДляЗагрузки);
	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.СформироватьОписаниеФайлов(ОтсортированныеФайлы, СтруктураФайлов, СписокФайлов, Ложь, КонтекстФайла);
			
	ПоместитьФайлы(СписокФайлов, СписокРазмещенныхФайлов,, Ложь, УникальныйИдентификатор);

	// Формируем данные видео (миниатюра и размер)

	Если РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлВидео(ФайлДляЗагрузки.Расширение) Тогда
		
		Если НЕ ЗначениеЗаполнено(РабочийКаталогРаботыСВидео) Тогда
			РабочийКаталогРаботыСВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.ИнициализироватьРабочийКаталогРаботыСВидео();
		КонецЕсли;

		ДвоичныеДанныеМиниатюры = РазработкаЭлектронныхКурсовСлужебныйКлиент.ДвоичныеДанныеМиниатюрыВидео(ФайлДляЗагрузки.ПолноеИмя, РабочийКаталогРаботыСВидео); 

		Если ДвоичныеДанныеМиниатюры <> Неопределено Тогда
			АдресХранилищаМиниатюры = ПоместитьВоВременноеХранилище(ДвоичныеДанныеМиниатюры, УникальныйИдентификатор);
		КонецЕсли;

		РазмерВидео = РазработкаЭлектронныхКурсовСлужебныйКлиент.РазмерВидео(ФайлДляЗагрузки.ПолноеИмя, РабочийКаталогРаботыСВидео);
		
		ДанныеВидео = Новый Структура("Миниатюра, Размер", АдресХранилищаМиниатюры, РазмерВидео);
		
	Иначе
		
		ДанныеВидео = Неопределено; // Это аудио
		
	КонецЕсли;	
		
	// Загружаем файл с видео в базу и создаем все элементы для его хранения
	
	СвойстваФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла();
	СвойстваФайла.Имя = ФайлДляЗагрузки.ИмяБезРасширения;
	СвойстваФайла.Расширение = ФайлДляЗагрузки.Расширение;
	СвойстваФайла.ЭтоКаталог = Ложь;
	СвойстваФайла.Преобразовать = Ложь;
	СвойстваФайла.СтруктураФайлов = СтруктураФайлов;
	СвойстваФайла.СписокФайлов = СписокРазмещенныхФайлов;
	СвойстваФайла.НастройкиКартинок = Неопределено;
	СвойстваФайла.ДанныеВидео = ДанныеВидео;
	СвойстваФайла.КонтекстФайла = КонтекстФайла;
	СвойстваФайла.ТекстовыеДанныеДляИндексирования = Неопределено;	
	
	Возврат СвойстваФайла;	
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвойстваНовогоЭлементаСодержанияСВидео(РасширениеНовогоФайла)
	
	ТипФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ТипЭлементаРесурсаПоРасширению(РасширениеНовогоФайла);
	
	Если ТипФайла <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Video")
		И ТипФайла <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Audio") Тогда
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип файла'");
		
	КонецЕсли;	
	
	НоваяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
	
	Если ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыЭлементовЭлектронныхРесурсов.Video") Тогда
		НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео");
	Иначе
		НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Звук");
	КонецЕсли;	
	
	Если НоваяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео") Тогда	
		НоваяСтрока.Наименование = НСтр("ru = 'Видео'");
	Иначе
		НоваяСтрока.Наименование = НСтр("ru = 'Звук'");
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидеоИлиАудиоОкончание(РезультатЗакрытия, СозданныйЭлемент) Экспорт	
	
	ВыйтиИзРежимаРедактирования(Ложь);	
		
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьВопросТеста(Команда)
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);

	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент) Тогда
		ПропуститьАктивациюЭлементаСодержания = Истина;
		СохранитьЭлементКурса();		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйКурс", ЭлектронныйКурс);
	ПараметрыФормы.Вставить("Тест", РедактируемаяСтрока.СсылкаНаЭлемент);
	
	ОткрытьФорму("Справочник.ТестовыеВопросы.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.СтраницыТеста);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПереместитьЭлементВверх(Команда)	
	СдвинутьЭлементКурса("Вверх");		
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПереместитьЭлементВниз(Команда)	
	СдвинутьЭлементКурса("Вниз");	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЭлементКурса(Направление)
		
	ТекущийЭлементДерева = НавигационноеДерево.НайтиПоИдентификатору(Элементы.НавигационноеДерево.ТекущаяСтрока);
	
	Если ТекущийЭлементДерева.ЭтоКорень
		ИЛИ НЕ ЗначениеЗаполнено(ТекущийЭлементДерева.Ссылка) Тогда
		
		Возврат; // Корень не сдвигаем
		
	КонецЕсли;
	
	ТекущиеЭлементыДерева = ТекущийЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы();
	ИндексЭлементаДерева  = ТекущиеЭлементыДерева.Индекс(ТекущийЭлементДерева);
	
	Если Направление = "Вниз"
		И ТекущиеЭлементыДерева.Количество() - 1 = ИндексЭлементаДерева Тогда
		
		Возврат; // Ниже нельзя сдвигать
		
	КонецЕсли;
	
	Если Направление = "Вверх"
		И ИндексЭлементаДерева = 0 Тогда
		
		Возврат; // Выше нельзя сдвигать
		
	КонецЕсли;
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ПереместитьЭлемент(Направление, Элементы.НавигационноеДерево);
	ТекущиеЭлементыДерева.Сдвинуть(ИндексЭлементаДерева, ?(Направление = "Вниз", 1, -1));	
	
	ПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСоздатьЭлементГруппу(Команда)
	
	НоваяСтрока = НовыйЭлементСодержания(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Группа")); 
	Элементы.НавигационноеДерево.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Элементы.НавигационноеДерево.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыВКурсПродолжение(Результат, ДопПараметры) Экспорт
	
	ЗаполнитьНавигационноеДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияЗакрытьБезПубликации(Команда)
	ПубликоватьПриЗакрытии = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияОтменитьСозданиеСлайда(Команда)
	
	ОтменитьСозданиеСлайда();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияКонвертерВидео(Команда)
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);

	Если РедактируемаяСтрока <> Неопределено
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео") Тогда
		
		ПараметрыКонвертера = Новый Структура;
		ПараметрыКонвертера.Вставить("ЭлементРесурса", ЭлементРесурсаСВидео(РедактируемаяСтрока.СсылкаНаЭлемент)); 
		ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаКонвертерВидео", ПараметрыКонвертера, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементРесурсаСВидео(Знач ТеорияСВидео) 
	РесурсСВидео = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(ТеорияСВидео);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РесурсСВидео, "ЕдинственныйЭлемент");
КонецФункции

// Тесты и теория
//

&НаКлиенте
Процедура РежимРедактированияПереместитьСтраницуВверх(Команда)
	СдвинутьСтраницуНабора("Вверх");
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПереместитьСтраницуВниз(Команда)
	СдвинутьСтраницуНабора("Вниз");
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьСтраницуНабора(Направление)
		
	ТаблицаЭлементов = ТаблицаРедактируемогоНабораЭлементов();
	
	Если ТаблицаЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ПереместитьЭлемент(Направление, ТаблицаЭлементов);
	
	ПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияСкачатьШаблонТестаВExcel(Команда)
	ПолучитьФайл(АдресХраненияШаблонаТестаВФорматеExcel(), НСтр("ru = 'Тест'") + ".xls", Истина);
КонецПроцедуры

&НаСервере
Функция АдресХраненияШаблонаТестаВФорматеExcel()	
	ДвоичныеДанные = Справочники.ЭлектронныеТесты.ПолучитьМакет("ШаблонТестаВExcel");	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Просмотр

// Просмотр (на клиенте)

&НаКлиенте
Процедура УстановитьЭлементДляПросмотра(ЭлементДляПерехода = Неопределено)	
	
	// Примечание: процедура может вызываться в режиме редактора, например,
	// в тесте, потому здесь нельзя вызывать процедуры вроде УстановитьВидимостьЭлементовРедактораКурса
	// и предполагать, что мы находимся в режиме просмотра.
	
	Если НЕ ЗначениеЗаполнено(ЭлементДляПерехода) ИЛИ НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		ОбластьПросмотра = ""; // Пустая страница
		Возврат;		
	КонецЕсли;
	
	Если ЭлементДляПерехода <> ЭлектронныйКурс Тогда // Значит показываем фрагмент курса
		
		// Данные фрагмента выгружаются непосредственно перед просмотром,
		// а курс целиком выгружается либо при публикации на сервере,
		// или при открытии этой формы (при копировании на клиентский компьютер).
		
		Если ВыгружатьФайлыЛокально Тогда
			ВыгрузитьДанныеПередПросмотром(ЭлектронныйКурс, ЭлементДляПерехода, ПутьККаталогуЭлектронныхКурсов, УникальныйИдентификатор);
		Иначе
			ВыгрузитьДанныеПередПросмотромНаСервере(ЭлектронныйКурс, ЭлементДляПерехода, ПутьККаталогуЭлектронныхКурсов, УникальныйИдентификатор);
		КонецЕсли;		
		
	КонецЕсли;
	
	// Запускаем
	
	СтрокаПараметровСсылки = "?data=" + ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ИдентификаторДанныхПубликации(ЭлектронныйКурс, ЭлементДляПерехода);

	Если ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда
		СтрокаПараметровСсылки = СтрокаПараметровСсылки + "&learning=" + Строка(ИзучениеЭлектронногоКурса.УникальныйИдентификатор());
	КонецЕсли;
	
	СтрокаПараметровСсылки = СтрокаПараметровСсылки + "&api=v8";
	СтрокаПараметровСсылки = СтрокаПараметровСсылки + "&date=" + Формат(ОбщегоНазначенияКлиент.ДатаУниверсальная(), "ДФ=ddMMyyyyhhmmss");
			
	ОбластьПросмотра = АдресКаталогаЭлектронныхКурсов + "index.html" + СтрокаПараметровСсылки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьДанныеПередПросмотромНаСервере(Знач ЭлектронныйКурс, Знач ЭлементДляПерехода, Знач ПутьККаталогуЭлектронныхКурсов, Знач ИдентификаторФормы)
	ВыгрузитьДанныеПередПросмотром(ЭлектронныйКурс, ЭлементДляПерехода, ПутьККаталогуЭлектронныхКурсов, ИдентификаторФормы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыгрузитьДанныеПередПросмотром(Знач ЭлектронныйКурс, Знач ЭлементДляПерехода, Знач ПутьККаталогуЭлектронныхКурсов, Знач ИдентификаторФормы)
	ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыгрузитьДанныеПубликацииВКаталогРесурсов(ПутьККаталогуЭлектронныхКурсов, ЭлектронныйКурс, ЭлементДляПерехода, ИдентификаторФормы);
КонецПроцедуры

// Просмотр (на сервере)

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьВКаталогДанныеИзучения(Знач ПутьККаталогуЭлектронныхКурсов, Знач ИзучениеЭлектронногоКурса, Знач ДанныеИзучения)
	
	#Если ВебКлиент Тогда		
		
	ВызватьИсключение НСтр("ru = 'Выгрузка данных изучения на веб-клиенте не поддерживается'");
	
	#Иначе
		
	КаталогСДанными = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуРесурсов(ПутьККаталогуЭлектронныхКурсов);
	ПутьКФайлуСДаннымиИзучения = КаталогСДанными + Строка(ИзучениеЭлектронногоКурса.УникальныйИдентификатор()) + ".js";
	
	Если НЕ ЗначениеЗаполнено(ДанныеИзучения) Тогда
		ДанныеИзучения = "null";
	КонецЕсли;
	
	ТекстДанных = Новый ЗаписьТекста(ПутьКФайлуСДаннымиИзучения);
	ТекстДанных.Записать("var learningData = " + ДанныеИзучения + ";");
	ТекстДанных.Закрыть();
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВБазуДанныеИзучения(Знач ИзучениеЭлектронногоКурса, Знач ДанныеИзучения, Знач ДатаНачалаПопыткиИзучения, Знач ВыполняетсяЗакрытиеФормы)	
	ИзучениеЭлектронныхКурсовСлужебный.СохранитьВБазуДанныеИзучения(ИзучениеЭлектронногоКурса, ДанныеИзучения, ДатаНачалаПопыткиИзучения, ВыполняетсяЗакрытиеФормы);	
КонецПроцедуры

#КонецОбласти

#Область Редактирование

// Редактирование
//

#Область Удаление

// Удаление

&НаКлиенте
Процедура УдалитьЭлементКурса()
	
	Если НЕ РежимРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НавигационноеДерево.ТекущиеДанные;
	КоличествоЭлементовДляУдаления = Элементы.НавигационноеДерево.ВыделенныеСтроки.Количество();	
	
	Для каждого ИдентификаторСтрокиДляУдаления Из Элементы.НавигационноеДерево.ВыделенныеСтроки Цикл	
		ТекущийЭлементДерева = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДляУдаления);
		Если ТекущийЭлементДерева = Неопределено ИЛИ ТекущийЭлементДерева.ЭтоКорень Тогда
			КоличествоЭлементовДляУдаления = КоличествоЭлементовДляУдаления - 1; // Корень не считаем
		КонецЕсли;
	КонецЦикла;	
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.ЭтоКорень
		ИЛИ КоличествоЭлементовДляУдаления = 0 Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Если КоличествоЭлементовДляУдаления = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить элемент курса?'");
	Иначе		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru=';Удалить %1 элемент курса?;;Удалить %1 элемента курса?;Удалить %1 элементов курса?;Удалить %1 элемента курса?'"), КоличествоЭлементовДляУдаления,, "ЧГ=");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьЭлементКурсаПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементКурсаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли; 
	
	Состояние(НСтр("ru = 'Выполняется удаление элементов курса...'"));
	
	ВыделенныеСтрокиМассив = Новый Массив;
	ЭлементыСодержанияСоСлайдамиПрезентации = Новый Массив;
	
	Для каждого ИдентификаторСтрокиДляУдаления Из Элементы.НавигационноеДерево.ВыделенныеСтроки Цикл	
		ТекущийЭлементДерева = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДляУдаления);
		Если ТекущийЭлементДерева <> Неопределено
			И НЕ ТекущийЭлементДерева.ЭтоКорень
			И ТекущийЭлементДерева.ТипЭлемента <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации") Тогда
			ВыделенныеСтрокиМассив.Добавить(ИдентификаторСтрокиДляУдаления); // Корень не удаляем
		КонецЕсли;
		Если ТипЭлектронногоКурса = ПредопределенноеЗначение("Перечисление.ТипыЭлектронныхКурсов.Слайдовый") 
			И ТекущийЭлементДерева.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации") Тогда
			ЭлементыСодержанияСоСлайдамиПрезентации.Добавить(ТекущийЭлементДерева.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдентификаторСтрокиДляУдаления Из ВыделенныеСтрокиМассив Цикл	
		ТекущийЭлементДерева = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДляУдаления);
		Если ТекущийЭлементДерева = Неопределено Тогда
			Продолжить; // Уже удалили
		КонецЕсли;
		Если ЭлементыСодержанияСоСлайдамиПрезентации.Найти(ТекущийЭлементДерева.Ссылка) <> Неопределено Тогда
			Продолжить; // Уже удалили при удалении слайдов презентации
		КонецЕсли;		
		УдалитьЭлементКурсаНаСервере(ТекущийЭлементДерева.Ссылка);
		ТекущийЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущийЭлементДерева);		
	КонецЦикла;	
	
	Если ЭлементыСодержанияСоСлайдамиПрезентации.Количество() > 0 Тогда
		УдалитьСлайдыИзПрезентацииСлайдовогоКурса(ЭлементыСодержанияСоСлайдамиПрезентации);
	КонецЕсли;	
	
	ПриРедактировании();	
	
	// Раскрываем корень, так как он сворачивается после удаления	
	
	ТекущиеСтрокиДляОбхода = НавигационноеДерево.ПолучитьЭлементы();	
	ИдентификаторКорня = Неопределено;
	
	Для каждого Строка Из ТекущиеСтрокиДляОбхода Цикл	
		Если Строка.ЭтоКорень Тогда
			ИдентификаторКорня = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;				
	КонецЦикла;	
	
	Если ИдентификаторКорня <> Неопределено Тогда
		Элементы.НавигационноеДерево.Развернуть(ИдентификаторКорня);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЭлементКурсаНаСервере(ЭлементСодержания)
	
	Если ТипЗнч(ЭлементСодержания) <> Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда		
		Возврат;		
	КонецЕсли;
	
	ЭлементСодержанияОбъект = ЭлементСодержания.ПолучитьОбъект();
	ЭлементСодержанияОбъект.УстановитьПометкуУдаления(Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Добавление

// Добавление

&НаКлиенте
Процедура ДобавитьЭлементКурса()	
	
	Если НЕ РежимРедактирования Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВыполняетсяРедактированиеЭлемента() Тогда
		
		ВыйтиИзРежимаРедактирования();
		
	Иначе		
		
		УстановитьЭлементДляПросмотра(); // Пустой элемент
		
		ПодключитьОбработчикОжидания("ДобавитьЭлементКурсаПродолжение", 0.1, Истина); // 8.3.10 IE11 video bug		
						
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементКурсаПродолжение()
	
	ИдентификаторПустойСтроки = ИдентификаторСтрокиНавигационногоДереваПоСсылкеНаЭлемент(Неопределено);
	
	Если ИдентификаторПустойСтроки = Неопределено Тогда
		НоваяСтрока = НовыйЭлементСодержания(); 
		ИдентификаторПустойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.НавигационноеДерево.ТекущаяСтрока = ИдентификаторПустойСтроки;
	ОтобразитьПустойЭлементКурса(ИдентификаторПустойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПустойЭлементКурса(ИдентификаторПустойСтроки)
	
	ИдентификаторРедактируемойСтрокиНавигационногоДерева = ИдентификаторПустойСтроки;
	УстановитьВидимостьЭлементовРедактораКурса(Истина, ЭтотОбъект);		
	Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаМастераСозданияЭлемента;		
	Элементы.КомандыМастераСозданияЭлемента.Видимость = Истина;			
	Элементы.ОбластьПросмотра.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область Сохранение

// Редактирование и сохранение

&НаКлиенте
Процедура РедактироватьЭлементКурса()
	
	Если НЕ РежимРедактирования Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьЭлементДляПросмотра(); // Пустой элемент
	
	ПодключитьОбработчикОжидания("РедактироватьЭлементКурсаПродолжение", 0.1, Истина); // 8.3.10 IE11 video bug
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЭлементКурсаПродолжение()
	
	ПропуститьАктивациюЭлементаСодержания = Истина; // Событие НавигационноеДеревоПриАктивизацииСтроки срабатывает при вызове серверных функций.
	
	НачатьРедактироватьЭлементКурса();	
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);

	Если РедактируемаяСтрока <> Неопределено
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord") Тогда
		
		ОткрытьДокументWord();
		
	КонецЕсли;
	
	Если РедактируемаяСтрока <> Неопределено
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации") Тогда		
		
		ОткрытьПрезентациюPowerPoint();
		
	КонецЕсли;	
	
	Если РедактируемаяСтрока <> Неопределено
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео") Тогда
		
		НастройкиВидеоСохранятьПропорции = Истина;
		
		НачальнаяВысотаВидео = НастройкиВидеоВысота;
		НачальнаяШиринаВидео = НастройкиВидеоШирина;
		
		УстановитьДоступностьНастроекВидео();
		
	КонецЕсли;	
	
	ПриРедактировании();
	
КонецПроцедуры

&НаСервере
Процедура НачатьРедактироватьЭлементКурса()
	
	// Получаем переменные
	//

	ИдентификаторРедактируемойСтрокиНавигационногоДерева = Элементы.НавигационноеДерево.ТекущаяСтрока;
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
	
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовыйЭлемент = НЕ ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент);
	
	// Устанавливаем видимость элементов формы
	//
	
	УстановитьВидимостьЭлементовРедактораКурса(Истина, ЭтотОбъект);	
	
	// Документ
	//	
	
	Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Документ Тогда
		
		// Получаем текст документа и загружаем в редактор
		
		Если ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент) Тогда
			
			Ресурс = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент);		
			ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "ЕдинственныйЭлемент");
			ДанныеДокумента = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляРедактирования(ЭлементРесурса,,УникальныйИдентификатор);
			
		КонецЕсли;
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаДокумента;		
		Элементы.КомандыДокумента.Видимость = Истина;		
		Элементы.ОбластьПросмотра.Видимость = Ложь;
		
		ТекущийЭлемент = Элементы.РедакторДокумента;
		
	// Word
	//		
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord Тогда	
		
		// Получаем данные о документе
		
		Если ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент) Тогда
			ДанныеДокументаWord = ДанныеХраненияДокументаWord(РедактируемаяСтрока.СсылкаНаЭлемент, УникальныйИдентификатор); // Сохраняем в реквизит
		КонецЕсли;
		
		// Показываем реквизиты формы
		
		Элементы.ОбластьПросмотра.Видимость = Истина;
		Элементы.СтраницыРедактора.Видимость = Ложь;
		Элементы.КомандыДокументаWord.Видимость = Истина;
		
	// PowerPoint
	//		
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации Тогда	
		
		Элементы.НавигационноеДерево.Доступность = Ложь;
		
		// Показываем реквизиты формы
		
		Элементы.ОбластьПросмотра.Видимость = Истина;
		Элементы.СтраницыРедактора.Видимость = Ложь;
		Элементы.КомандыПрезентации.Видимость = Истина;		
		
	// Тест
	//
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Тест Тогда		
		
		// Отображаем вопросы теста
		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьОтборЭлементовДинамическогоСписка(СтраницыЭлементов, РедактируемаяСтрока.СсылкаНаЭлемент);
		
		// Заполняем настройки теста
		
		Если НЕ ЭтоНовыйЭлемент Тогда
			
			ДанныеТеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РедактируемаяСтрока.СсылкаНаЭлемент, "ВремяТеста, КоличествоПопыток, КоличествоГруппЭлементов");
			
			НастройкиТестаВремяТеста = ИзучениеЭлектронныхКурсовСлужебныйSCORM.КоличествоМинутИзДаты(ДанныеТеста.ВремяТеста);
			НастройкиТестаКоличествоВопросов = ДанныеТеста.КоличествоГруппЭлементов;
			НастройкиТестаКоличествоПопыток = ДанныеТеста.КоличествоПопыток;		
			
		КонецЕсли;
		
		УстановитьМаксимальноеКоличествоВопросовВНастройкеТеста(РедактируемаяСтрока.СсылкаНаЭлемент);
		
		УстановитьДоступностьНастроекТестирования(ЭтотОбъект);
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаТеста;		
		Элементы.КомандыТеста.Видимость = Истина;		
		Элементы.ОбластьПросмотра.Видимость = Истина;		
		
	// Видео
	//
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Видео Тогда
		
		// Заполняем настройки видео
		
		ЭлементКурсаСВидео = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(
			Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент)
		);		
			
		Если НЕ ЗначениеЗаполнено(ЭлементКурсаСВидео) Тогда
			ВызватьИсключение НСтр("ru = 'Элемент курса с видео не найден'");
		КонецЕсли;			
			
		ДанныеВидео = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементКурсаСВидео, "Высота, Ширина, ПроигрыватьАвтоматически, Описание");			
		
		НастройкиВидеоВысота = ДанныеВидео.Высота;
		НастройкиВидеоШирина = ДанныеВидео.Ширина;
		НастройкиВидеоПроигрыватьАвтоматически = ДанныеВидео.ПроигрыватьАвтоматически;
		НастройкиВидеоОписание = ДанныеВидео.Описание.Получить();
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаВидео;
		Элементы.КомандыВидео.Видимость = Истина;
		Элементы.ОбластьПросмотра.Видимость = Ложь;
		
	// YouTube
	//
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube Тогда
		
		// Заполняем настройки видео
		
		ЭлементКурсаСВидео = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(
			Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент)
		);		
			
		Если НЕ ЗначениеЗаполнено(ЭлементКурсаСВидео) Тогда
			ВызватьИсключение НСтр("ru = 'Элемент курса с видео не найден'");
		КонецЕсли;			
			
		ДанныеВидео = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементКурсаСВидео, "ПроигрыватьАвтоматически, Описание");
		
		НастройкиВидеоПроигрыватьАвтоматически = ДанныеВидео.ПроигрыватьАвтоматически;
		НастройкиВидеоОписание = ДанныеВидео.Описание.Получить();
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаYouTube;
		Элементы.КомандыYouTube.Видимость = Истина;
		Элементы.ОбластьПросмотра.Видимость = Ложь;		
		
	// Звук
	//
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Звук Тогда
		
		// Заполняем настройки видео
		
		ЭлементКурсаСоЗвуком = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(
			Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент)
		);		
			
		Если НЕ ЗначениеЗаполнено(ЭлементКурсаСоЗвуком) Тогда
			ВызватьИсключение НСтр("ru = 'Элемент курса со звуком не найден'");
		КонецЕсли;			
			
		ДанныеЗвука = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементКурсаСоЗвуком, "ПроигрыватьАвтоматически, Описание");
		
		НастройкиВидеоОписание = ДанныеЗвука.Описание.Получить();		
		НастройкиВидеоПроигрыватьАвтоматически = ДанныеЗвука.ПроигрыватьАвтоматически;
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаЗвук;
		Элементы.КомандыЗвук.Видимость = Истина;
		Элементы.ОбластьПросмотра.Видимость = Ложь;		
		
	// Начало (Электронный курс)
	//
		
	ИначеЕсли РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Начало Тогда
		
		ДанныеЭлектронногоКурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйКурс, "СтартоваяСтраница, ФинальнаяСтраница, Наименование");
		
		// Загружаем стартовую страницу
		
		Если ЗначениеЗаполнено(ДанныеЭлектронногоКурса.СтартоваяСтраница)
			И ТипЗнч(ДанныеЭлектронногоКурса.СтартоваяСтраница) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда
			
			ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭлектронногоКурса.СтартоваяСтраница, "ЕдинственныйЭлемент");
			ДанныеСтартовойСтраницы = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляРедактирования(ЭлементРесурса,,УникальныйИдентификатор);		
			
		КонецЕсли;
		
		// Загружаем финальную страницу
		
		Если ЗначениеЗаполнено(ДанныеЭлектронногоКурса.ФинальнаяСтраница)
			И ТипЗнч(ДанныеЭлектронногоКурса.ФинальнаяСтраница) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда

			ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭлектронногоКурса.ФинальнаяСтраница, "ЕдинственныйЭлемент");
			ДанныеФинальнойСтраницы = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляРедактирования(ЭлементРесурса,,УникальныйИдентификатор);		
		
		КонецЕсли;		
	
		// Устанавливаем наименование
		
		НаименованиеКурса = ДанныеЭлектронногоКурса.Наименование;
		
		// Показываем элементы формы
		
		Элементы.СтраницыРедактора.ТекущаяСтраница = Элементы.СтраницаНачало;
		Элементы.КомандыНачало.Видимость = Истина;
		Элементы.ОбластьПросмотра.Видимость = Ложь;
		
		ТекущийЭлемент = Элементы.РедакторСтартовойСтраницы;
		
	// Ошибка	
	//
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип элемента содержания'")		
		
	КонецЕсли;
	
	// Сбрасываем модифицированность
	
	Модифицированность = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭлементКурса(СвойстваФайла = Неопределено, ВыйтиИзРежимаРедактирования = Ложь, Синхронно = Истина, НаименованиеНовогоЭлемента = Неопределено)
	
	ПерваяЗаписьКурса = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		ПерваяЗаписьКурса = Истина;
	КонецЕсли;	
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	Если РедактируемаяСтрока <> Неопределено Тогда
	
		Если РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord") Тогда
				
			ДокументДоступен = ДокументWordДоступен();
			
			Если ДокументДоступен Тогда
				
				СохранитьДокументWord(
					Синхронно,
					НЕ ВыйтиИзРежимаРедактирования
				); 
				
			КонецЕсли;		
				
		Иначе
			
			СохранитьЭлементКурсаНаСервере(СвойстваФайла, ИдентификаторРедактируемойСтрокиНавигационногоДерева, НаименованиеНовогоЭлемента);
			
		КонецЕсли;
		
	КонецЕсли;
		
	// Оповещаем о сохранении
		
	Если ПерваяЗаписьКурса
		ИЛИ (РедактируемаяСтрока <> Неопределено 
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Начало")) Тогда
		
		Оповестить("ЭлектронныйКурсЗаписан",,ЭтотОбъект);
		
	КонецЕсли;
	
	Если ВыйтиИзРежимаРедактирования Тогда
		ВыйтиИзРежимаРедактирования(Ложь, ПерваяЗаписьКурса);
	КонецЕсли;	
	
	ПриРедактировании();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЭлементКурсаНаСервере(СвойстваФайла = Неопределено, НомерРедактируемойСтроки = Неопределено, НаименованиеНовогоЭлемента = Неопределено)			
		
	НачатьТранзакцию();
	
	Попытка

		// Создаем электронный курс
		//
		
		ЭтоПерваяЗаписьЭлектронногоКурса = Ложь;

		Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
			
			ЭтоПерваяЗаписьЭлектронногоКурса = Истина;
			
			ЭлектронныйКурсОбъект = Справочники.ЭлектронныеКурсы.СоздатьЭлемент();
		
			ЭлектронныйКурсОбъект.Наименование  = НавигационноеДерево.ПолучитьЭлементы().Получить(0).Наименование; // Берем из дерева, так как его уже могли переименовать
			ЭлектронныйКурсОбъект.НомерРедакции = 0;
			ЭлектронныйКурсОбъект.Тип           = Перечисления.ТипыЭлектронныхКурсов.Слайдовый;
			
			РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлектронныйКурсОбъект);
			
			ЭлектронныйКурсОбъект.Записать();
			
			ЭлектронныйКурс = ЭлектронныйКурсОбъект.Ссылка; // Запоминаем созданный электронный ресурс
			
			// Обновляем реквизиты формы
			
			ЗаполнитьРеквизитыЭлектронногоКурса(); // Заполняем переменные формы по новому курсу
			
			КореньДерева = НавигационноеДерево.НайтиПоИдентификатору(0);
			КореньДерева.Ссылка = ЭлектронныйКурс;
			КореньДерева.СсылкаНаЭлемент = ЭлектронныйКурс;						
				
		КонецЕсли;
				
		РедактируемаяСтрока = Неопределено;
		
		Если НомерРедактируемойСтроки <> Неопределено Тогда				
			РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(НомерРедактируемойСтроки);
		КонецЕсли;
		
		Если РедактируемаяСтрока = Неопределено Тогда
			
			// Загружаем презентацию курса
			//
			
			Если СвойстваФайла <> Неопределено
				И СвойстваФайла.КонтекстФайла = "Presentation" Тогда
				
				РесурсПрезентации = Неопределено;
				
				Если ЭлектронныйКурсОбъект = Неопределено Тогда
					РесурсПрезентации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйКурс, "Презентация");
				Иначе
					РесурсПрезентации = ЭлектронныйКурсОбъект.Презентация; 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(РесурсПрезентации) Тогда
					
					// Создаем ресурс для хранения презентации
					
					РесурсПрезентацииОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					РесурсПрезентацииОбъект.Наименование = НСтр("ru = 'Презентация'");
					РесурсПрезентацииОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеРесурсы"));
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(РесурсПрезентацииОбъект);
					
					РесурсПрезентацииОбъект.Записать();
					
					РесурсПрезентации = РесурсПрезентацииОбъект.Ссылка;							
					
					// Записываем ссылку на презентацию
					
					Если ЭлектронныйКурсОбъект = Неопределено Тогда
						ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
					КонецЕсли;
					
					ЭлектронныйКурсОбъект.Презентация = РесурсПрезентации;
					ЭлектронныйКурсОбъект.Записать();
					
				КонецЕсли;
				
				// Сохраняем файлы презентации
				
				СвойстваВладельца = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствВладельцаЗагружаемыхФайлов();
				СвойстваВладельца.ИмяВладельцаФайлов = "ЭлектронныйКурс";
				СвойстваВладельца.ЭлектронныйКурс = ЭлектронныйКурс;
				СвойстваВладельца.Теория = Неопределено;
				СвойстваВладельца.НаборФайлов = РесурсПрезентации;
				СвойстваВладельца.ЭлементСодержания = Неопределено;
				СвойстваВладельца.СтраницаТеории = Неопределено;
				СвойстваВладельца.Родитель = Неопределено;
				СвойстваВладельца.ЗависимыеРесурсы = Неопределено;
				СвойстваВладельца.ЗависимыеРесурсыДополняющиеAPI = Неопределено;				
							
				РазработкаЭлектронныхКурсовСлужебный.ПоместитьФайлВБазу(СвойстваФайла, СвойстваВладельца);			
				
				// Формируем элементы содержания для слайдов (групп в слайдовых курсах быть не может)
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Содержание.Код КАК Код,
					|	Содержание.ТипЭлемента КАК ТипЭлемента,
					|	Содержание.ПараметрыЗапуска КАК ПараметрыЗапуска,
					|	Содержание.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.СодержаниеЭлектронныхКурсов КАК Содержание
					|ГДЕ
					|	Содержание.Владелец = &ЭлектронныйКурс
					|	И Содержание.ПометкаУдаления = ЛОЖЬ
					|	И Содержание.ЭтоГруппа = ЛОЖЬ
					|
					|УПОРЯДОЧИТЬ ПО
					|	Содержание.Код";
				
				Запрос.УстановитьПараметр("ЭлектронныйКурс", ЭлектронныйКурс);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ТаблицаСуществующихЭлементовСодержания = РезультатЗапроса.Выгрузить();
				ТаблицаСуществующихЭлементовСодержания.Колонки.Добавить("Идентификатор");
				Для каждого Строка Из ТаблицаСуществующихЭлементовСодержания Цикл
					Строка.Идентификатор = Лев(Строка.ПараметрыЗапуска, СтрДлина(Строка.ПараметрыЗапуска) - СтрДлина(".png"));
					Строка.Идентификатор = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.Идентификатор);
				КонецЦикла;
				
				ТаблицаНеСлайдовыхЭлементов = Новый ТаблицаЗначений; // Для правильной сортировки далее
				ТаблицаНеСлайдовыхЭлементов.Колонки.Добавить("НомерСлайда");
				ТаблицаНеСлайдовыхЭлементов.Колонки.Добавить("ЭлементыПослеСлайда");				
				
				КоличествоСуществующихСлайдов = 0;
				
				СтрокаТНСЭ = ТаблицаНеСлайдовыхЭлементов.Добавить(); 
				СтрокаТНСЭ.НомерСлайда = 0; // Элементы перед слайдами
				СтрокаТНСЭ.ЭлементыПослеСлайда = Новый Массив;

				НомерСлайда = 0;
				Для каждого Строка Из ТаблицаСуществующихЭлементовСодержания Цикл
					
					Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации Тогда // Нашли новый слайд
						
						НомерСлайда = НомерСлайда + 1;
						СтрокаТНСЭ = ТаблицаНеСлайдовыхЭлементов.Добавить(); 
						СтрокаТНСЭ.НомерСлайда = НомерСлайда;
						СтрокаТНСЭ.ЭлементыПослеСлайда = Новый Массив;
						
						КоличествоСуществующихСлайдов = КоличествоСуществующихСлайдов + 1;
						
					КонецЕсли;
					
					СтрокаТНСЭ.ЭлементыПослеСлайда.Добавить(Строка.Ссылка);
					
				КонецЦикла;
				
				МассивЗаписанныхЭлементовСлайдов = Новый Массив;
				НомерСлайда = 0;
				КодЭлемента = 0;
				
				СтрокаТНСЭ = ТаблицаНеСлайдовыхЭлементов.Найти(НомерСлайда, "НомерСлайда"); // НомерСлайда = 0 - это элементы перед первым слайдом
				
				Если СтрокаТНСЭ <> Неопределено И СтрокаТНСЭ.ЭлементыПослеСлайда.Количество() > 0 Тогда
					ЭлементСодержанияПередпервымСлайдом = СтрокаТНСЭ.ЭлементыПослеСлайда[СтрокаТНСЭ.ЭлементыПослеСлайда.Количество()-1];
					КодЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСодержанияПередпервымСлайдом, "Код");
				КонецЕсли;
				
				// Формируем элементы содержания слайдов
				Для каждого СвойстваСлайда Из СвойстваФайла.НастройкиКартинок.Слайды Цикл 
					
					НомерСлайда = НомерСлайда + 1;
					КодЭлемента = КодЭлемента + 10;
					
					СуществующаяСтрока = ТаблицаСуществующихЭлементовСодержания.Найти(СвойстваСлайда.Идентификатор, "Идентификатор");
					
					Если СуществующаяСтрока = Неопределено Тогда						
						ЭлементСодержанияОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьЭлемент();
						ЭлементСодержанияОбъект.Владелец = ЭлектронныйКурс;						
					Иначе						
						ЭлементСодержанияОбъект = СуществующаяСтрока.Ссылка.ПолучитьОбъект();
					КонецЕсли;
					
					ЭлементСодержанияОбъект.ДополнительныеСвойства.Вставить("ОтменитьУстановкуКода", Истина);					
					
					ЭлементСодержанияОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Слайд %1'"), НомерСлайда);
					ЭлементСодержанияОбъект.Код = КодЭлемента;
					ЭлементСодержанияОбъект.ПараметрыЗапуска = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(СвойстваСлайда.Идентификатор) + ".png";
					ЭлементСодержанияОбъект.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации;
					ЭлементСодержанияОбъект.РазрешитьРедактироватьНаименование = Истина;
					ЭлементСодержанияОбъект.Записать();
					
					МассивЗаписанныхЭлементовСлайдов.Добавить(ЭлементСодержанияОбъект.Ссылка);
					
					СтрокаТНСЭ = ТаблицаНеСлайдовыхЭлементов.Найти(НомерСлайда, "НомерСлайда");
					
					Если СтрокаТНСЭ <> Неопределено Тогда
						
						Для каждого ЭлементСодержания Из СтрокаТНСЭ.ЭлементыПослеСлайда Цикл
							
							КодЭлемента = КодЭлемента + 10;
							
							ЭлементСодержанияОбъект = ЭлементСодержания.ПолучитьОбъект();
							Если ЭлементСодержанияОбъект.Код <> КодЭлемента Тогда
								ЭлементСодержанияОбъект.ДополнительныеСвойства.Вставить("ОтменитьУстановкуКода", Истина);
								ЭлементСодержанияОбъект.Код = КодЭлемента;
								ЭлементСодержанияОбъект.Записать();
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
						
				КонецЦикла;
				
				// Меняем код оставшихся неслайдовых элементов
				Пока НомерСлайда < КоличествоСуществующихСлайдов Цикл 
					
					НомерСлайда = НомерСлайда + 1;
					
					СтрокаТНСЭ = ТаблицаНеСлайдовыхЭлементов.Найти(НомерСлайда, "НомерСлайда");
					
					Если СтрокаТНСЭ <> Неопределено Тогда
						
						Для каждого ЭлементСодержания Из СтрокаТНСЭ.ЭлементыПослеСлайда Цикл
							
							КодЭлемента = КодЭлемента + 10;
							
							ЭлементСодержанияОбъект = ЭлементСодержания.ПолучитьОбъект();
							Если ЭлементСодержанияОбъект.Код <> КодЭлемента Тогда
								ЭлементСодержанияОбъект.ДополнительныеСвойства.Вставить("ОтменитьУстановкуКода", Истина);
								ЭлементСодержанияОбъект.Код = КодЭлемента;
								ЭлементСодержанияОбъект.Записать();
							КонецЕсли;
							 
						КонецЦикла;						
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Удаляем элементы содержания слайдов				
				Для каждого Строка Из ТаблицаСуществующихЭлементовСодержания Цикл
					
					Если Строка.ТипЭлемента <> Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивЗаписанныхЭлементовСлайдов.Найти(Строка.Ссылка) = Неопределено Тогда
						 ЭлементСодержанияОбъект = Строка.Ссылка.ПолучитьОбъект();
						 ЭлементСодержанияОбъект.ДополнительныеСвойства.Вставить("ПомечатьПодчиненные", Ложь);
						 ЭлементСодержанияОбъект.УстановитьПометкуУдаления(Истина, Истина);
					КонецЕсли;
					
				КонецЦикла;
				
				// Обновляем дерево
				ЗаполнитьНавигационноеДерево();
				
			КонецЕсли;
				
		Иначе			
			
			// Сохраняем данные строки дерева
			
			ЭтоНовыйЭлемент = НЕ ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент);
			
			Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.ТипЭлемента)
				ИЛИ РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Группа Тогда
				
				ВызватьИсключение НСтр("ru = 'Неизвестный тип элемента'");
				
			КонецЕсли;			
			
			// Обновляем дату элемента содержания (дата курса обновляется ниже)
			//
			
			Если ЗначениеЗаполнено(РедактируемаяСтрока.Ссылка) Тогда			
				ЭлементСодержанияОбъект = РедактируемаяСтрока.Ссылка.ПолучитьОбъект();
				ЭлементСодержанияОбъект.Записать();			
			КонецЕсли;
			
			// Форматированный документ
			//
			
			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Документ Тогда
				
				Если ЭтоНовыйЭлемент Тогда
					
					// Формируем новое наименование элемента			

					Если НаименованиеНовогоЭлемента = Неопределено Тогда
						НаименованиеНовогоЭлемента = ЭлектронноеОбучениеСлужебный.НаименованиеЭлементаИзТекста(ДанныеДокумента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда
						РедактируемаяСтрока.Наименование = НаименованиеНовогоЭлемента;
					КонецЕсли;
					
					// Создаем теорию
					
					ТеорияЭлемента = СоздатьТеориюДляРазмещенияЭлементаКурса(РедактируемаяСтрока.Наименование, РедактируемаяСтрока.ТипЭлемента);
					РедактируемаяСтрока.СсылкаНаЭлемент = ТеорияЭлемента; // Запоминаем
					
					// Создаем ресурс
					
					РесурсДокументаОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					РесурсДокументаОбъект.Наименование = РедактируемаяСтрока.Наименование;
					РесурсДокументаОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, "СправочникСсылка.ЭлектронныеРесурсы");
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(РесурсДокументаОбъект);
					
					РесурсДокументаОбъект.Записать();

					СтартовыйРесурс = РесурсДокументаОбъект.Ссылка;
					
					// Помещаем ресурс в теорию
					
					СоздатьСтраницуТеории(ТеорияЭлемента, СтартовыйРесурс, Неопределено);			
					
					// Помещаем теорию в курс
					
					ПоместитьНовыйЭлементВКурс(ТеорияЭлемента, РедактируемаяСтрока);			
					
					// Создаем элемент ресурса
					
					ЭлементРесурсаОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент(); // Запись элемента ресурса будет ниже
					ЭлементРесурсаОбъект.Владелец = СтартовыйРесурс;
					ЭлементРесурсаОбъект.Наименование = РедактируемаяСтрока.Наименование;
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементРесурсаОбъект);
					
					ЭлементРесурсаОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text;
					ЭлементРесурсаОбъект.ИмяФайла = "index.html";											
					
				Иначе
					
					// Получаем теорию
					
					ТеорияЭлемента = РедактируемаяСтрока.СсылкаНаЭлемент;
					
					Если ТипЗнч(ТеорияЭлемента) <> Тип("СправочникСсылка.ТеорияЭлектронныхКурсов") Тогда
						ВызватьИсключение НСтр("ru = 'Неверный тип контейнера документа'");
					КонецЕсли;	

					// Получаем ресурс теории
					
					СтартовыйРесурс = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(ТеорияЭлемента);
					
					Если НЕ ЗначениеЗаполнено(СтартовыйРесурс)
						ИЛИ ТипЗнч(СтартовыйРесурс) <> Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда
						
						ВызватьИсключение НСтр("ru = 'Неверный тип текстового документа'");
						
					КонецЕсли;			
					
					// Получаем элемент ресурса
					
					ЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(СтартовыйРесурс);
					
					Если НЕ ЗначениеЗаполнено(ЭлементРесурса)
						ИЛИ ТипЗнч(ЭлементРесурса) <> Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсов") Тогда
						
						ВызватьИсключение НСтр("ru = 'Элемент ресурса не найден'");
						
					КонецЕсли;			
					
					ЭлементРесурсаОбъект = ЭлементРесурса.ПолучитьОбъект();
					
				КонецЕсли;		
				
				// Сохраняем документ в данные элемента ресурса
				
				ЭлементРесурсаОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДанныеДокумента, "ТекстСтраницы", "html");				
				ЭлементРесурсаОбъект.Записать();		
				
			КонецЕсли;
			
			// Документ Word
			//	
			
			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord Тогда		

				Если ЭтоНовыйЭлемент Тогда
					
					// Формируем новое наименование элемента			

					Если НаименованиеНовогоЭлемента = Неопределено Тогда
						НаименованиеНовогоЭлемента = ЭлектронноеОбучениеСлужебный.НаименованиеЭлементаИзТекста(СвойстваФайла.ТекстовыеДанныеДляИндексирования);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда							
						СвойстваФайла.Имя = НаименованиеНовогоЭлемента;												
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда
						РедактируемаяСтрока.Наименование = СвойстваФайла.Имя;
					КонецЕсли;
						
					// Создаем теорию
					
					ТеорияЭлемента = СоздатьТеориюДляРазмещенияЭлементаКурса(РедактируемаяСтрока.Наименование, РедактируемаяСтрока.ТипЭлемента);
					РедактируемаяСтрока.СсылкаНаЭлемент = ТеорияЭлемента; // Запоминаем
					
					// Создаем ресурс
					
					ЭлектронныйРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					ЭлектронныйРесурсОбъект.Наименование = РедактируемаяСтрока.Наименование;
					ЭлектронныйРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеРесурсы"));
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлектронныйРесурсОбъект);
					
					ЭлектронныйРесурсОбъект.Записать();
					
					ЭлектронныйРесурс = ЭлектронныйРесурсОбъект.Ссылка;				
					
					// Помещаем набор в теорию
					
					СоздатьСтраницуТеории(ТеорияЭлемента, ЭлектронныйРесурс, Неопределено);	
					
					// Помещаем теорию в курс
					
					ПоместитьНовыйЭлементВКурс(ТеорияЭлемента, РедактируемаяСтрока);			
					
					// Примечание: переменная ДанныеДокументаWord будет заполнена в процедуре
					// НачатьРедактироватьЭлементКурса, которая будет вызвана в конце.
					
				Иначе
					
					// Не требуется
					
				КонецЕсли;
				
				СвойстваВладельца = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствВладельцаЗагружаемыхФайлов();
				СвойстваВладельца.ИмяВладельцаФайлов = "ЭлектронныйКурс";
				СвойстваВладельца.ЭлектронныйКурс = ЭлектронныйКурс;
				СвойстваВладельца.Теория = РедактируемаяСтрока.СсылкаНаЭлемент;
				СвойстваВладельца.НаборФайлов = ?(ЭтоНовыйЭлемент, ЭлектронныйРесурс, ДанныеДокументаWord.Ресурс);
				СвойстваВладельца.ЭлементСодержания = РедактируемаяСтрока.Ссылка;
				СвойстваВладельца.СтраницаТеории = Неопределено;
				СвойстваВладельца.Родитель = Неопределено;
				СвойстваВладельца.ЗависимыеРесурсы = Неопределено;
				СвойстваВладельца.ЗависимыеРесурсыДополняющиеAPI = Неопределено;				
							
				РазработкаЭлектронныхКурсовСлужебный.ПоместитьФайлВБазу(СвойстваФайла, СвойстваВладельца);
					
			КонецЕсли;	
			
			// Тесты
			//	

			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Тест Тогда
				
				Если ЭтоНовыйЭлемент Тогда
					
					// Формируем новое наименование элемента			

					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда
						РедактируемаяСтрока.Наименование = НаименованиеНовогоЭлемента;
					КонецЕсли;					
					
					// Создаем тест
					
					ТестОбъект = Справочники.ЭлектронныеТесты.СоздатьЭлемент();				
								
					ТестОбъект.Наименование                  = РедактируемаяСтрока.Наименование;
					ТестОбъект.Родитель                      = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеТесты"));
					ТестОбъект.ПеремешиватьГруппыЭлементов   = Истина;
					ТестОбъект.ПоказыватьНавигацию           = Ложь;
					ТестОбъект.ПереходитьВпередАвтоматически = Истина;
					ТестОбъект.ИнформацияНаФинальнойСтранице = Перечисления.ИнформацияНаФинальнойСтраницеЭлектронногоТеста.ВопросыСОшибками;
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ТестОбъект);
					
					ТестОбъект.НазначениеТестирования = Перечисления.НазначенияЭлектронныхТестов.Аттестация;
					
					ТестОбъект.Записать();
					
					РедактируемаяСтрока.СсылкаНаЭлемент = ТестОбъект.Ссылка; // Запоминаем			
					
					// Помещаем тест в курс
					
					ПоместитьНовыйЭлементВКурс(ТестОбъект.Ссылка, РедактируемаяСтрока);			
					
				Иначе
					
					ТестОбъект = РедактируемаяСтрока.СсылкаНаЭлемент.ПолучитьОбъект();
					
				КонецЕсли;
				
				// Обновляем реквизиты теста
				
				ТестОбъект.ВремяТеста = ИзучениеЭлектронныхКурсовСлужебныйSCORM.ДатаИзКоличестваМинут(НастройкиТестаВремяТеста);
				ТестОбъект.КоличествоГруппЭлементов = НастройкиТестаКоличествоВопросов;
				ТестОбъект.КоличествоПопыток = НастройкиТестаКоличествоПопыток; 
				
				ТестОбъект.Записать();		
				
			КонецЕсли;
			
			// Видео или звук
			//	

			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Видео
				ИЛИ РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Звук Тогда

				ВидеоРесурс = Неопределено;
				
				Если ЭтоНовыйЭлемент Тогда
					
					// Формируем новое наименование элемента			

					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда
						РедактируемаяСтрока.Наименование = НаименованиеНовогоЭлемента;
					КонецЕсли;					
					
					// Создаем теорию
					
					ТеорияЭлемента = СоздатьТеориюДляРазмещенияЭлементаКурса(РедактируемаяСтрока.Наименование, РедактируемаяСтрока.ТипЭлемента);
					РедактируемаяСтрока.СсылкаНаЭлемент = ТеорияЭлемента; // Запоминаем
					
					// Создаем набор файлов
					
					ВидеоРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					ВидеоРесурсОбъект.Наименование = РедактируемаяСтрока.Наименование;			
					ВидеоРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеРесурсы"));
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВидеоРесурсОбъект);
					
					ВидеоРесурсОбъект.Записать();
					
					ВидеоРесурс = ВидеоРесурсОбъект.Ссылка;			
					
					// Помещаем ресурс в теорию
					
					СоздатьСтраницуТеории(ТеорияЭлемента, ВидеоРесурс, Неопределено);	
					
					// Помещаем теорию в курс
					
					ПоместитьНовыйЭлементВКурс(ТеорияЭлемента, РедактируемаяСтрока);
					
					// Помещаем файл с видео в базу
					
					СвойстваВладельца = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствВладельцаЗагружаемыхФайлов();
					СвойстваВладельца.ИмяВладельцаФайлов = "ЭлектронныйКурс";
					СвойстваВладельца.ЭлектронныйКурс = ЭлектронныйКурс;
					СвойстваВладельца.Теория = РедактируемаяСтрока.СсылкаНаЭлемент;
					СвойстваВладельца.НаборФайлов = ВидеоРесурс;
					СвойстваВладельца.ЭлементСодержания = РедактируемаяСтрока.Ссылка;
					СвойстваВладельца.СтраницаТеории = Неопределено;
					СвойстваВладельца.Родитель = Неопределено;
					СвойстваВладельца.ЗависимыеРесурсы = Неопределено;
					СвойстваВладельца.ЗависимыеРесурсыДополняющиеAPI = Неопределено;
									
					РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ПоместитьФайлВБазу(СвойстваФайла, СвойстваВладельца);

					// Запоминаем записанный файл для передачи на клиент
					
					ДанныеЗаписанногоЭлементаРесурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваВладельца.НаборФайлов, Новый Структура("Ссылка", "ЕдинственныйЭлемент"));				
					СвойстваФайла.Вставить("ДанныеЗаписанногоЭлементаРесурса", ДанныеЗаписанногоЭлементаРесурса);
					
				Иначе
					
					// Находим единственный набор элементов теории
					
					ВидеоЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(
						Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент)
					);
					
					Если НЕ ЗначениеЗаполнено(ВидеоЭлементРесурса) Тогда
						ВызватьИсключение НСтр("ru = 'Элемент ресурса с видео не найден'");
					КонецЕсли;
					
					ВидеоЭлементРесурсаОбъект = ВидеоЭлементРесурса.ПолучитьОбъект();
					
					Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Видео Тогда						
						ВидеоЭлементРесурсаОбъект.Ширина = НастройкиВидеоШирина;
						ВидеоЭлементРесурсаОбъект.Высота = НастройкиВидеоВысота;						
					КонецЕсли;
						
					ВидеоЭлементРесурсаОбъект.ПроигрыватьАвтоматически = НастройкиВидеоПроигрыватьАвтоматически;
					ВидеоЭлементРесурсаОбъект.Описание = Новый ХранилищеЗначения(НастройкиВидеоОписание);					
					
					// Не обновляем владельца, так как повторно выгружать видео не надо.
					ВидеоЭлементРесурсаОбъект.ДополнительныеСвойства.Вставить("ОбновлятьВладельца", Ложь);
					ВидеоЭлементРесурсаОбъект.Записать();			
					
				КонецЕсли;				
				
			КонецЕсли;
			
			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube Тогда
				
				Если ЭтоНовыйЭлемент Тогда
					
					// Формируем новое наименование элемента			

					Если ЗначениеЗаполнено(НаименованиеНовогоЭлемента) Тогда
						РедактируемаяСтрока.Наименование = НаименованиеНовогоЭлемента;
					КонецЕсли;					
					
					// Создаем теорию
					
					ТеорияЭлемента = СоздатьТеориюДляРазмещенияЭлементаКурса(РедактируемаяСтрока.Наименование, РедактируемаяСтрока.ТипЭлемента);
					РедактируемаяСтрока.СсылкаНаЭлемент = ТеорияЭлемента; // Запоминаем
					
					// Создаем ресурс
					
					ВидеоРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					ВидеоРесурсОбъект.Наименование = РедактируемаяСтрока.Наименование;			
					ВидеоРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеРесурсы"));
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВидеоРесурсОбъект);
					
					ВидеоРесурсОбъект.Записать();
					
					ВидеоРесурс = ВидеоРесурсОбъект.Ссылка;			
					
					// Помещаем ресурс в теорию
					
					СоздатьСтраницуТеории(ТеорияЭлемента, ВидеоРесурс, Неопределено);	
					
					// Помещаем теорию в курс
					
					ПоместитьНовыйЭлементВКурс(ТеорияЭлемента, РедактируемаяСтрока);
					
					// Создаем элемент ресурса
					
					ВидеоЭлементРесурсаОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент();
					
					ВидеоЭлементРесурсаОбъект.Владелец = ВидеоРесурс;
					ВидеоЭлементРесурсаОбъект.Наименование = РедактируемаяСтрока.Наименование;
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВидеоЭлементРесурсаОбъект);
					
					ВидеоЭлементРесурсаОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.YouTube;
					ВидеоЭлементРесурсаОбъект.ЭтоВнешнийЭлемент = Истина;
					ВидеоЭлементРесурсаОбъект.ИмяФайла = СвойстваФайла.ИдентификаторВидео;
					
					ВидеоЭлементРесурсаОбъект.Описание = Новый ХранилищеЗначения(НастройкиВидеоОписание);
					ВидеоЭлементРесурсаОбъект.ПроигрыватьАвтоматически = НастройкиВидеоПроигрыватьАвтоматически;
					
				Иначе
					
					// Находим единственный набор элементов теории
					
					ВидеоЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(
						Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(РедактируемаяСтрока.СсылкаНаЭлемент)
					);
					
					Если НЕ ЗначениеЗаполнено(ВидеоЭлементРесурса) Тогда
						ВызватьИсключение НСтр("ru = 'Элемент ресурса с видео не найден'");
					КонецЕсли;
					
					ВидеоЭлементРесурсаОбъект = ВидеоЭлементРесурса.ПолучитьОбъект();					
					
					ВидеоЭлементРесурсаОбъект.Описание = Новый ХранилищеЗначения(НастройкиВидеоОписание);
					ВидеоЭлементРесурсаОбъект.ПроигрыватьАвтоматически = НастройкиВидеоПроигрыватьАвтоматически;
					
					ВидеоЭлементРесурсаОбъект.ДополнительныеСвойства.Вставить("ОбновлятьВладельца", Ложь);
					
				КонецЕсли;					
				
				ВидеоЭлементРесурсаОбъект.Записать();				
				
			КонецЕсли;
			
			// Начало (электронный курс)
			//
			
			Если РедактируемаяСтрока.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Начало Тогда
				
				// Сохраняем стартовую страницу
				
				ТребуемыеДанныеЭК = Новый Структура();
				ТребуемыеДанныеЭК.Вставить("СтартоваяСтраница", "СтартоваяСтраница");
				ТребуемыеДанныеЭК.Вставить("ФинальнаяСтраница", "ФинальнаяСтраница");
				ТребуемыеДанныеЭК.Вставить("Наименование", "Наименование");
				ТребуемыеДанныеЭК.Вставить("СтартоваяСтраницаЭлемент", "СтартоваяСтраница.ЕдинственныйЭлемент");
				ТребуемыеДанныеЭК.Вставить("ФинальнаяСтраницаЭлемент", "ФинальнаяСтраница.ЕдинственныйЭлемент");
				
				ДанныеЭлектронногоКурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйКурс, ТребуемыеДанныеЭК);
				
				Если НЕ ЗначениеЗаполнено(ДанныеЭлектронногоКурса.СтартоваяСтраница) Тогда
					
					// Создаем ресурс
					
					СтартовыйРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					СтартовыйРесурсОбъект.Наименование = ДанныеЭлектронногоКурса.Наименование;
					СтартовыйРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, "СправочникСсылка.ЭлектронныеРесурсы");
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(СтартовыйРесурсОбъект);
					
					СтартовыйРесурсОбъект.Записать();

					СтартовыйРесурс = СтартовыйРесурсОбъект.Ссылка;
					
					// Создаем элемент ресурса
					
					ЭлементСтартовогоРесурсаОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент(); // Запись элемента ресурса будет ниже
					ЭлементСтартовогоРесурсаОбъект.Владелец = СтартовыйРесурс;
					ЭлементСтартовогоРесурсаОбъект.Наименование = ДанныеЭлектронногоКурса.Наименование;
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементСтартовогоРесурсаОбъект);
					
					ЭлементСтартовогоРесурсаОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text;
					ЭлементСтартовогоРесурсаОбъект.ИмяФайла = "index.html";		
					
					// Помещаем стартовую страницу в курс
				
					ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
					ЭлектронныйКурсОбъект.СтартоваяСтраница = СтартовыйРесурс;
					ЭлектронныйКурсОбъект.Записать();
					
				Иначе			
					
					ЭлементСтартовогоРесурсаОбъект =  ДанныеЭлектронногоКурса.СтартоваяСтраницаЭлемент.ПолучитьОбъект();			
					
				КонецЕсли;
				
				ЭлементСтартовогоРесурсаОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДанныеСтартовойСтраницы, "ТекстСтраницы", "html");	
				ЭлементСтартовогоРесурсаОбъект.Записать();				
				
				// Финальная страница
				
				Если НЕ ЗначениеЗаполнено(ДанныеЭлектронногоКурса.ФинальнаяСтраница) Тогда
					
					// Создаем ресурс
					
					ФинальныйРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
					ФинальныйРесурсОбъект.Наименование = ДанныеЭлектронногоКурса.Наименование;
					ФинальныйРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, "СправочникСсылка.ЭлектронныеРесурсы");
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ФинальныйРесурсОбъект);
					
					ФинальныйРесурсОбъект.Записать();

					ФинальныйРесурс = ФинальныйРесурсОбъект.Ссылка;
					
					// Создаем элемент ресурса
					
					ЭлементФинальногоРесурсаОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент(); // Запись элемента ресурса будет ниже
					ЭлементФинальногоРесурсаОбъект.Владелец = ФинальныйРесурс;
					ЭлементФинальногоРесурсаОбъект.Наименование = ДанныеЭлектронногоКурса.Наименование;
					
					РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементФинальногоРесурсаОбъект);
					
					ЭлементФинальногоРесурсаОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text;
					ЭлементФинальногоРесурсаОбъект.ИмяФайла = "index.html";		
					
					// Помещаем стартовую страницу в курс
				
					ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
					ЭлектронныйКурсОбъект.ФинальнаяСтраница = ФинальныйРесурс;
					ЭлектронныйКурсОбъект.Записать();
					
				Иначе
					
					ЭлементФинальногоРесурсаОбъект =  ДанныеЭлектронногоКурса.ФинальнаяСтраницаЭлемент.ПолучитьОбъект();			
					
				КонецЕсли;
				
				ЭлементФинальногоРесурсаОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДанныеФинальнойСтраницы, "ТекстСтраницы", "html");	
				ЭлементФинальногоРесурсаОбъект.Записать();
				
				// Обновляем наименование курса
						
				Если ДанныеЭлектронногоКурса.Наименование <> НавигационноеДерево.ПолучитьЭлементы().Получить(0).Наименование Тогда
					
					ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
					ЭлектронныйКурсОбъект.Наименование = НавигационноеДерево.ПолучитьЭлементы().Получить(0).Наименование;
					ЭлектронныйКурсОбъект.Записать();
					
				КонецЕсли;
				
				// Обновляем переменные формы
						
				ЗаполнитьРеквизитыЭлектронногоКурса();
				
			КонецЕсли;
			
			Если ЭтоНовыйЭлемент И ИдентификаторРедактируемойСтрокиНавигационногоДерева > -1 Тогда
				НачатьРедактироватьЭлементКурса(); // Чтобы установить отборы вопросов в режиме редактирования теста
			КонецЕсли;			
			
		КонецЕсли;
			
		// Обновляем дату курса (если курс не записывался ранее)
		//
		
		Если ЭлектронныйКурсОбъект = Неопределено Тогда
			ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
			ЭлектронныйКурсОбъект.Записать();
		КонецЕсли;
		
		// Завершаем
		//
		
		ЗафиксироватьТранзакцию();
		
	Исключение
 
 		ОтменитьТранзакцию();
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ЭтоПерваяЗаписьЭлектронногоКурса = Истина Тогда
			ЭлектронныйКурс = Неопределено; // Убираем заполненность реквизита в реквизите формы
		КонецЕсли;
		
		Если ЭтоНовыйЭлемент = Истина И РедактируемаяСтрока <> Неопределено Тогда
			РедактируемаяСтрока.Ссылка = Неопределено;
			РедактируемаяСтрока.СсылкаНаЭлемент = Неопределено;
		КонецЕсли;
		
		ЗаполнитьРеквизитыЭлектронногоКурса();
		
		ВызватьИсключение;
		
	КонецПопытки;		
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьНовыйЭлементВКурс(СсылкаНаЭлемент, РедактируемаяСтрока)
	
	// Записываем элемент содержания
			
	РодительРедактируемойСтроки = РедактируемаяСтрока.ПолучитьРодителя().Ссылка;

	Если ТипЗнч(РодительРедактируемойСтроки) <> Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда
		РодительРедактируемойСтроки = Справочники.СодержаниеЭлектронныхКурсов.ПустаяСсылка();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.Ссылка) Тогда		
		НовыйЭлементСодержания = Справочники.ЭлектронныеКурсы.ДобавитьЭлементСодержания(ЭлектронныйКурс, СсылкаНаЭлемент, РодительРедактируемойСтроки, Ложь, РедактируемаяСтрока.Наименование, РедактируемаяСтрока.ТипЭлемента);
		РедактируемаяСтрока.Ссылка = НовыйЭлементСодержания; // Запоминаем		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьТеориюДляРазмещенияЭлементаКурса(Наименование, ТипЭлемента)	    
			
	ТеорияКурсаОбъект = Справочники.ТеорияЭлектронныхКурсов.СоздатьЭлемент();
	ТеорияКурсаОбъект.Наименование = Наименование;
	ТеорияКурсаОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, "СправочникСсылка.ТеорияЭлектронныхКурсов");
	
	РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ТеорияКурсаОбъект);
	
	// Навигация
	
	Если ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Тест Тогда
		ТеорияКурсаОбъект.ТипНавигации = Перечисления.ТипыНавигацииСтраницЭлектронногоКурса.Последовательно;			
	Иначе		
		ТеорияКурсаОбъект.ТипНавигации = Перечисления.ТипыНавигацииСтраницЭлектронногоКурса.БезНавигации;		
	КонецЕсли;	
	
	ТеорияКурсаОбъект.Записать();	
	
	Возврат ТеорияКурсаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьСтраницуТеории(Знач ТеорияИлиТест, Знач ЭлементСтраницы, Знач ГруппаСтраниц)
	
	СозданнаяСтраница = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементСтраницы) И ТипЗнч(ЭлементСтраницы) = Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсов") Тогда
		ЭлементСтраницы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСтраницы, "Владелец"); // Прикрепляем ресурс, а не файл
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСтраницы) Тогда
		СозданнаяСтраница = Справочники.СтраницыЭлементовЭлектронныхКурсов.ДобавитьЭлементВПодборку(ТеорияИлиТест, ЭлементСтраницы, ГруппаСтраниц);
	КонецЕсли;
	
	Если ТипЗнч(ТеорияИлиТест) = Тип("СправочникСсылка.ЭлектронныеТесты") Тогда
		Элементы.СтраницыТеста.Обновить();
		УстановитьМаксимальноеКоличествоВопросовВНастройкеТеста(ТеорияИлиТест);
		УстановитьДоступностьНастроекТестирования(ЭтотОбъект);		
	КонецЕсли;	
	
	Возврат СозданнаяСтраница;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовРедактораКурса(ВидимостьРедактора, Форма)
	
	// Убираем видимость команд редактора.
	// Она будет установлена для каждого типа элемента 
	// отдельно в процедуре НачатьРедактироватьЭлементКурса.
	
	Форма.Элементы.КомандыМастераСозданияЭлемента.Видимость = Ложь;
	Форма.Элементы.КомандыТеста.Видимость = Ложь;
	Форма.Элементы.КомандыДокумента.Видимость = Ложь;
	Форма.Элементы.КомандыДокументаWord.Видимость = Ложь;
	Форма.Элементы.КомандыПрезентации.Видимость = Ложь;
	Форма.Элементы.КомандыВидео.Видимость = Ложь;
	Форма.Элементы.КомандыYouTube.Видимость = Ложь;
	Форма.Элементы.КомандыЗвук.Видимость = Ложь;
	Форма.Элементы.КомандыНачало.Видимость = Ложь;
	
	Если ВидимостьРедактора Тогда		
		
		Форма.Элементы.СтраницыРедактора.Видимость = Истина;				
		Форма.Элементы.КомандыПросмотра.Видимость = Ложь;
		
		Форма.Элементы.КомандыРедактированияНавигационногоДерева.Доступность = Ложь;
		Форма.Элементы.НавигационноеДерево.ИзменятьСоставСтрок = Ложь;
		
	Иначе		
		
		Форма.Элементы.СтраницыРедактора.Видимость = Ложь;
		Форма.Элементы.КомандыПросмотра.Видимость = Истина;
		
		Форма.Элементы.КомандыРедактированияНавигационногоДерева.Доступность = Истина;
		Форма.Элементы.НавигационноеДерево.ИзменятьСоставСтрок = Истина;
		Форма.Элементы.НавигационноеДерево.Доступность = Истина;
		
		// Показываем область просмотра
		
		Форма.Элементы.ОбластьПросмотра.Видимость = Истина;		
		
		// Очищаем данные при выходе из редактора
		
		Форма.ДанныеДокументаWord = Неопределено; // Именно Неопределено
		Форма.ДанныеДокумента = "";
		Форма.ДанныеСтартовойСтраницы = "";
		Форма.ДанныеФинальнойСтраницы = "";

		Форма.НастройкиВидеоВысота = "";
		Форма.НастройкиВидеоОписание = Неопределено;
		Форма.НастройкиВидеоПроигрыватьАвтоматически = Ложь;
		Форма.НастройкиВидеоШирина = "";
		
		Форма.ИдентификаторРедактируемойСтрокиНавигационногоДерева = -1;
		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьОтборЭлементовДинамическогоСписка(Форма.СтраницыЭлементов, Неопределено);		

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ВыполняетсяРедактированиеЭлемента()

	Если НЕ РежимРедактирования Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИдентификаторРедактируемойСтрокиНавигационногоДерева > -1 Тогда
		Возврат Истина;
	Иначе		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыйтиИзРежимаРедактирования(СпроситьОСохранении = Истина, ПерваяЗаписьКурса = Ложь)

	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
	
	Если РедактируемаяСтрока = Неопределено Тогда
		ЗакрытьРедакторЭлемента();
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность
		И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord")
		И РазработкаЭлектронныхКурсовСлужебныйКлиент.ДокументМодифицирован(ПриложениеWord) Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если РедактируемаяСтрока.СсылкаНаЭлемент = Неопределено И НЕ РедактируемаяСтрока.ЭтоГруппа Тогда

		ЗакрытьРедакторЭлемента();		
			
	Иначе
		
		Если СпроситьОСохранении И Модифицированность Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьОЗавершенииРедактированияЭлементаПродолжение", ЭтотОбъект);			
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Записать изменения?'"), РежимДиалогаВопрос.ДаНет, 0);
			
		Иначе
			
			ЗакрытьРедакторЭлемента();
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСозданиеСлайда()
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
	
	Если РедактируемаяСтрока = Неопределено Тогда
		ЗакрытьРедакторЭлемента();
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(РедактируемаяСтрока);
	ЗакрытьРедакторЭлемента();
	
КонецПроцедуры

&НаКлиенте
Функция СпроситьОЗавершенииРедактированияЭлементаПродолжение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохранитьЭлементКурса();
		
		ПриРедактировании();
		
	Иначе
		
		РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
			
		Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.СсылкаНаЭлемент) Тогда
			РедактируемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(РедактируемаяСтрока);	
		КонецЕсли;
		
	КонецЕсли;

	ЗакрытьРедакторЭлемента();
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьРедакторЭлемента()
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	Если РедактируемаяСтрока <> Неопределено Тогда
	
		РедактируемаяСтрока.Картинка = КартинкаЭлементаСодержания(РедактируемаяСтрока);
		
		Если РедактируемаяСтрока <> Неопределено 
			И РедактируемаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord") Тогда		
			
			ЗакрытьДокументWord();
			
		КонецЕсли;	
		
	КонецЕсли;
		
	УстановитьВидимостьЭлементовРедактораКурса(Ложь, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьСтраницуЭлементаКурса(ТаблицаЭлементов = Неопределено)
	
	Если ТаблицаЭлементов = Неопределено Тогда
		ТаблицаЭлементов = ТаблицаРедактируемогоНабораЭлементов();
	КонецЕсли;
	
	Если ТаблицаЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЭлементов.Обновить();
	
	ТекущиеДанные = ТаблицаЭлементов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЭлементДляПросмотра(ТекущиеДанные.Ссылка); // Элемент подборки
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаРедактируемогоНабораЭлементов()
	
	Если НЕ ВыполняетсяРедактированиеЭлемента() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтрокиНавигационногоДерева);	
		
	Если ТипЗнч(РедактируемаяСтрока.СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлектронныеТесты") Тогда
		Возврат Элементы.СтраницыТеста;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип элемента набора'");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьНовоеНаименованиеЭлемента(ЭлементСодержания, СсылкаНаЭлемент,  НовоеНаименование, ЭтоГруппа)
		
	Если НЕ ЭтоГруппа Тогда
	
		СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
		СсылкаНаЭлементОбъект.Наименование = НовоеНаименование;
		СсылкаНаЭлементОбъект.Записать();

	КонецЕсли;
		
	Если ЭлементСодержания <> СсылкаНаЭлемент Тогда // Равенство возможно для корня
		
		ЭлементСодержанияОбъект = ЭлементСодержания.ПолучитьОбъект();
		ЭлементСодержанияОбъект.Наименование = НовоеНаименование;
		ЭлементСодержанияОбъект.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЭлемент)
		И ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ТеорияЭлектронныхКурсов") Тогда
		
		ЕдинственныйЭлемент = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(СсылкаНаЭлемент, Ложь);
		
		Если ЗначениеЗаполнено(ЕдинственныйЭлемент) Тогда
			
			// Обновляем наименование элемента
			
			ЕдинственныйЭлементОбъект = ЕдинственныйЭлемент.ПолучитьОбъект();
			ЕдинственныйЭлементОбъект.Наименование = НовоеНаименование;
			ЕдинственныйЭлементОбъект.Записать();
			
			Если ТипЗнч(ЕдинственныйЭлемент) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда
				
				ЕдинственныйЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(ЕдинственныйЭлемент);
				
				Если ЗначениеЗаполнено(ЕдинственныйЭлементРесурса) Тогда
					
					ЕдинственныйЭлементРесурсаОбъект = ЕдинственныйЭлементРесурса.ПолучитьОбъект();
					ЕдинственныйЭлементРесурсаОбъект.Наименование = НовоеНаименование;
					ЕдинственныйЭлементРесурсаОбъект.Записать();					
					
				КонецЕсли;
				
			КонецЕсли;
				
			// Обновляем наименование страниц
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтраницыЭлементовЭлектронныхКурсов.Ссылка
				|ИЗ
				|	Справочник.СтраницыЭлементовЭлектронныхКурсов КАК СтраницыЭлементовЭлектронныхКурсов
				|ГДЕ
				|	СтраницыЭлементовЭлектронныхКурсов.Владелец = &Теория
				|	И СтраницыЭлементовЭлектронныхКурсов.СсылкаНаЭлементКурса = &СсылкаНаЭлемент";
			
			Запрос.УстановитьПараметр("СсылкаНаЭлемент", ЕдинственныйЭлемент);
			Запрос.УстановитьПараметр("Теория", СсылкаНаЭлемент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СтраницаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СтраницаОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовуюГруппуЭлементовНаСервере(ЭлектронныйКурс, Родитель, НаименованиеГруппы)
	
	НоваяГруппаОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьГруппу();
	НоваяГруппаОбъект.Владелец = ЭлектронныйКурс;
	НоваяГруппаОбъект.Наименование = НаименованиеГруппы;
	
	Если ЗначениеЗаполнено(Родитель)
		И ТипЗнч(Родитель) = Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда
		
		НоваяГруппаОбъект.Родитель = Родитель;
		
	КонецЕсли;
		
	НоваяГруппаОбъект.Записать();
	
	Возврат НоваяГруппаОбъект.Ссылка;
	
КонецФункции


&НаКлиенте
Процедура ПриРедактировании()
	
	Если НЕ Отредактирован Тогда
		ЗафиксироватьРедактирование(ЭлектронныйКурс, Ложь, УникальныйИдентификатор);
	КонецЕсли;
	
	Отредактирован = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗафиксироватьРедактирование(Знач ЭлектронныйКурс, Знач Публиковать, Знач ИдентификаторФормы)

	Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.ИзмененныеЭлектронныеКурсы.ЗафиксироватьИзменениеКурса(ЭлектронныйКурс, Публиковать);
	
	Если НЕ Публиковать Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПроцедуры = "РазработкаЭлектронныхКурсовСлужебный.ОпубликоватьВФоне";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЭлектронныйКурс", ЭлектронныйКурс);
	
	ПараметрыВыполнения	= ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.КлючФоновогоЗадания = Строка(ЭлектронныйКурс.УникальныйИдентификатор());	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Электронные курсы: Публикация'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ПараметрыЗадания.ИдентификаторЗадания;
	
КонецФункции

// Тесты

&НаСервере
Процедура УстановитьМаксимальноеКоличествоВопросовВНастройкеТеста(ЭлектронныйТест)
	
	Если ЗначениеЗаполнено(ЭлектронныйТест) Тогда
		Элементы.НастройкиТестаКоличествоВопросов.МаксимальноеЗначение = Справочники.СтраницыЭлементовЭлектронныхКурсов.СтраницыВладельца(ЭлектронныйТест).Количество();
	Иначе
		Элементы.НастройкиТестаКоличествоВопросов.МаксимальноеЗначение = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Word

// Word

&НаКлиенте
Процедура ОткрытьДокументWord()
		
	Если ДанныеДокументаWord = Неопределено Тогда	
		// Новый документ
		РазработкаЭлектронныхКурсовСлужебныйКлиент.ОткрытьДокумент(ПриложениеWord, ВладелецФормы, ЭтотОбъект, Ложь, Неопределено, Неопределено);
	Иначе
		// Существующий документ
		РазработкаЭлектронныхКурсовСлужебныйКлиент.ОткрытьДокумент(ПриложениеWord, ВладелецФормы, ЭтотОбъект, Ложь, ДанныеДокументаWord.МестоХраненияДокументаВБазе, ДанныеДокументаWord);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ДокументWordДоступен()
	
	Возврат РазработкаЭлектронныхКурсовСлужебныйКлиент.ДокументДоступен(ПриложениеWord);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеХраненияДокументаWord(СсылкаНаЭлемент, ИдентификаторФормы)	
	
	Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ТеорияЭлектронныхКурсов") Тогда
		
		НаименованиеЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлемент, "Наименование");
		Ресурс = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(СсылкаНаЭлемент, Ложь);
		
		Если ЗначениеЗаполнено(Ресурс) И ТипЗнч(Ресурс) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда			
			ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "ЕдинственныйЭлемент");
		Иначе			
			ВызватьИсключение НСтр("ru = 'Неверный тип теории'");			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлементРесурса) Тогда
			ВызватьИсключение НСтр("ru = 'Элемент ресурса с документом не найден'");
		КонецЕсли;
		
	Иначе		
		
		ВызватьИсключение НСтр("ru = 'Элемент для хранения документа не определен'");		
		
	КонецЕсли;		
	
	МестоХраненияДокументаВБазе = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляРедактирования(ЭлементРесурса, Перечисления.ТипыЭлементовЭлектронныхРесурсов.Document, ИдентификаторФормы);
	
	Если НЕ ЗначениеЗаполнено(МестоХраненияДокументаВБазе) Тогда
		ВызватьИсключение НСтр("ru = 'Место хранения документа не определено'");
	КонецЕсли;	
	
	ДанныеЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементРесурса, "Наименование, ИмяФайла");
	
	ДанныеЭлемента.Вставить("СсылкаНаЭлементСДокументом", ЭлементРесурса);
	ДанныеЭлемента.Вставить("МестоХраненияДокументаВБазе", МестоХраненияДокументаВБазе);
	ДанныеЭлемента.Вставить("Ресурс", Ресурс);

	// Новое наименование будет установлено после выхода из режима редактирования.
	// Это важно, так как файл документа, который редактируется должен иметь то же имя,
	// что и элемент курса, чтобы выполнялся поиск по имени файла. Но при выходе его
	// можно переименовать.
	
	Если НаименованиеЭлемента <> ДанныеЭлемента.Наименование Тогда	
		ДанныеЭлемента.Вставить("НовоеНаименование", НаименованиеЭлемента);		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеЭлемента);
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииВнешнегоПриложения() Экспорт   
	// Не требуется
КонецПроцедуры

&НаКлиенте
Процедура ПриЗаписиДокумента(Document, SaveAsUI, Cancel) Экспорт   
	
	Если ПриложениеWord.Документ <> Document Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриложениеWord.ПропуститьЗапись Тогда
		ПриложениеWord.ПропуститьЗапись = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Document = ПриложениеWord.Документ И НЕ SaveAsUI Тогда
		
		Cancel = Истина;				
		
		Если ПриложениеWord.Свойство("ВыйтиИзРежимаРедактированияПослеЗаписиДокументаWord")
			И ПриложениеWord.ВыйтиИзРежимаРедактированияПослеЗаписиДокументаWord Тогда
			СохранитьЭлементКурса(, Истина, Истина);
		Иначе
			СохранитьЭлементКурса(, Ложь, Истина);
		КонецЕсли;
		
		ПриРедактировании();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииДокумента(Document, Cancel) Экспорт   
	
	Если ПриложениеWord.Документ <> Document Тогда
		Возврат;
	КонецЕсли;	
	
	Если РазработкаЭлектронныхКурсовСлужебныйКлиент.ДокументМодифицирован(ПриложениеWord) Тогда
		ПриложениеWord.Вставить("ВыйтиИзРежимаРедактированияПослеЗаписиДокументаWord", Истина);
	Иначе
		ВыйтиИзРежимаРедактирования(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументWord(Знач Синхронно, Знач ОбновитьПредставлениеДокументаWord)

	// Сохраняем документ
	
	ПриложениеWord.ПропуститьЗапись = Истина;	
	ПриложениеWord.Документ.Save();	
	ПриложениеWord.ПропуститьЗапись = Ложь;
	
	// Делаем копию документа	
	
	ПриложениеWord.Вставить("ИмяСохраняемогоДокументаWord", ПриложениеWord.Документ.Name);
	ПриложениеWord.РабочийКаталог.ФайлДляСохранения = ПриложениеWord.РабочийКаталог.Копия + ПриложениеWord.РабочийКаталог.ИмяФайла;	
	КопироватьФайл(ПриложениеWord.Документ.FullName, ПриложениеWord.РабочийКаталог.ФайлДляСохранения);
	
	// Сохраняем копию в HTML
	
	Если Синхронно Тогда
		СохранитьДокументWordПродолжение(ОбновитьПредставлениеДокументаWord);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СохранитьДокументWord", 0.01, Истина);
	КонецЕсли;
	
	ПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьДокументWord()	
	СохранитьДокументWordПродолжение(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументWordПродолжение(ОбновитьПредставлениеДокументаWord = Истина)
	
	Если ПриложениеWord = Неопределено
		ИЛИ ПриложениеWord.РабочийКаталог = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ПриложениеWord.РабочийКаталог.ФайлДляСохранения) Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет файла для сохранения'")
		
	КонецЕсли;		
	
	ПропуститьСохранениеДокумента = Истина;
	
	СохранитьДокументWordВБазу(ПриложениеWord.РабочийКаталог.ФайлДляСохранения, ИдентификаторРедактируемойСтрокиНавигационногоДерева);
	
	// Очищаем переменные
	
	ПриложениеWord.РабочийКаталог.ФайлДляСохранения = Неопределено;
	
	// Обновляем представление
	
	Если ОбновитьПредставлениеДокументаWord Тогда	
		УстановитьЭлементДляПросмотра(ТекущийЭлементСодержания());	
	КонецЕсли;
	
	ПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументWordВБазу(ФайлДляСохранения, НомерРедактируемойСтроки = Неопределено, НаименованиеНовогоЭлемента = Неопределено)
	
	// Формируем файлы документа, которые будем сохранять
	
	ПараметрыЗагрузки = Новый Структура();	
	
	ПараметрыЗагрузки.Вставить("ПутьКДокументу", ФайлДляСохранения);
	ПараметрыЗагрузки.Вставить("Приложение", ПриложениеWord.Скрытое);
	ПараметрыЗагрузки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыЗагрузки.Вставить("КонтекстФайла", "Document");
	
	ПараметрыЗагрузки.Вставить("ЗависимыеРесурсы", Новый Массив);	
	ПараметрыЗагрузки.Вставить("ЗависимыеРесурсыДополняющиеAPI", Новый Массив);		
	ПараметрыЗагрузки.Вставить("ПереданныеФайлы", Новый Массив);	
	ПараметрыЗагрузки.Вставить("НастройкиКартинок", РазработкаЭлектронныхКурсовСлужебныйКлиент.НовоеОписаниеКартинокДокумента());	
	ПараметрыЗагрузки.Вставить("ПередаваемыеФайлы", Новый Массив);
	ПараметрыЗагрузки.Вставить("СтруктураФайлов", Новый Массив);
	ПараметрыЗагрузки.Вставить("ТекстовыеДанныеДляИндексирования", "");
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.СформироватьДокументДляСохраненияВБазе(ПараметрыЗагрузки);
	
	// Записываем файлы документа в базу	
	
	Если ПриложениеWord.Свойство("ИмяСохраняемогоДокументаWord") 
		И ЗначениеЗаполнено(ПриложениеWord.ИмяСохраняемогоДокументаWord) Тогда		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеWord.ИмяСохраняемогоДокументаWord, Ложь);		
		ПриложениеWord.ИмяСохраняемогоДокументаWord = ""; // Сбрасываем свойство
	Иначе		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ФайлДляСохранения, Ложь);		
	КонецЕсли;
	
	СвойстваФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла();
	
	СвойстваФайла.Имя = СтруктураИмениФайла.ИмяБезРасширения;
	СвойстваФайла.Расширение = СтруктураИмениФайла.Расширение;
	СвойстваФайла.ЭтоКаталог = Ложь;
	СвойстваФайла.Преобразовать = Истина;
	СвойстваФайла.СтруктураФайлов = ПараметрыЗагрузки.СтруктураФайлов;
	СвойстваФайла.СписокФайлов = ПараметрыЗагрузки.ПереданныеФайлы;
	СвойстваФайла.НастройкиКартинок = ПараметрыЗагрузки.НастройкиКартинок;
	СвойстваФайла.ДанныеВидео = Неопределено;
	СвойстваФайла.КонтекстФайла = "Document";
	СвойстваФайла.ТекстовыеДанныеДляИндексирования = ПараметрыЗагрузки.ТекстовыеДанныеДляИндексирования;	
			
	СохранитьЭлементКурсаНаСервере(СвойстваФайла, НомерРедактируемойСтроки, НаименованиеНовогоЭлемента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьДокументWord()
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриЗакрытииФормыДокумента(ПриложениеWord, Ложь, ЭтотОбъект);	
	
	Если НЕ РазработкаЭлектронныхКурсовСлужебныйКлиент.ЕстьОткрытыеДокументы(ПриложениеWord)
		И ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(ПриложениеWord.Пользовательское) Тогда
		
		ПриложениеWord.Пользовательское.Visible = Ложь;
		
	КонецЕсли;
	
	Если ДанныеДокументаWord <> Неопределено
		И ДанныеДокументаWord.Свойство("НовоеНаименование")
		И ЗначениеЗаполнено(ДанныеДокументаWord.НовоеНаименование) Тогда
		
		УстановитьНовоеНаименованиеДокументаWord(ДанныеДокументаWord);
		
	КонецЕсли;	
	
	ДанныеДокументаWord = Неопределено;	
	ПриложениеWord.Вставить("ВыйтиИзРежимаРедактированияПослеЗаписиДокументаWord", Ложь)
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНовоеНаименованиеДокументаWord(ДанныеДокументаWord)
	
	ЭлементКурсаОбъект = ДанныеДокументаWord.СсылкаНаЭлементСДокументом.ПолучитьОбъект();
	ЭлементКурсаОбъект.Наименование = ДанныеДокументаWord.НовоеНаименование;
	
	СтароеИмяСтруктура = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеДокументаWord.ИмяФайла, Ложь);
	
	ЭлементКурсаОбъект.ИмяФайла = 
		Лев(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ДанныеДокументаWord.НовоеНаименование, ""), 10)
		+ СтароеИмяСтруктура.Расширение;
	
	ЭлементКурсаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область PowerPoint

// PowerPoint

&НаКлиенте
Процедура ОткрытьПрезентациюPowerPoint()
	
	#Если НЕ ВебКлиент Тогда
		
	// Инициируем работу с PowerPoint
	
	Если РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияДоступна(ПриложениеPowerPoint) Тогда

		ПриложениеPowerPoint.Пользовательское.Visible = Истина;		
		ПриложениеPowerPoint.Пользовательское.WindowState = 2;
		ПриложениеPowerPoint.Пользовательское.WindowState = 1;			
		
	Иначе		
		
		РазработкаЭлектронныхКурсовСлужебныйКлиент.ИнициализироватьПриложениеРаботыСПрезентациями(ПриложениеPowerPoint);
		
		Если ЗначениеЗаполнено(НаименованиеКурса) Тогда
			ПриложениеPowerPoint.ХранениеНаДиске = НовыйПутьХраненияПрезентации(НаименованиеКурса);
		Иначе
			ПриложениеPowerPoint.ХранениеНаДиске = НовыйПутьХраненияПрезентации(НаименованиеНовогоЭлектронногоКурса());
		КонецЕсли;
		
		ПриложениеPowerPoint.ХранениеВБазе = ДанныеХраненияПрезентацииЭлектронногоКурса(ЭлектронныйКурс, УникальныйИдентификатор);
		
		ПолучитьФайл(ПриложениеPowerPoint.ХранениеВБазе.МестоХраненияВБазе, ПриложениеPowerPoint.ХранениеНаДиске, Ложь);		
		
		ПриложениеPowerPoint.Презентация = ПриложениеPowerPoint.Пользовательское.Presentations.Open(ПриложениеPowerPoint.ХранениеНаДиске,,,Истина);
		
		ДобавитьОбработчик ПриложениеPowerPoint.Пользовательское.PresentationBeforeSave, ПередЗаписьюПрезентации;	
		ДобавитьОбработчик ПриложениеPowerPoint.Пользовательское.PresentationBeforeClose, ПередЗакрытиемПрезентации;	
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция НовыйПутьХраненияПрезентации(НаименованиеПрезентации)
	
	#Если НЕ ВебКлиент Тогда
		
	ПутьКПрезентацииНаДиске = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ПутьКПрезентацииНаДиске);
	
	ПутьКПрезентацииНаДиске = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКПрезентацииНаДиске);		
	ПутьКПрезентацииНаДиске = ПутьКПрезентацииНаДиске + ЭлектронноеОбучениеСлужебныйКлиентСервер.ЗаменитьЗапрещенныеСимволыВИмениФайла(НаименованиеПрезентации);
	ПутьКПрезентацииНаДиске = ПутьКПрезентацииНаДиске + ".pptx";
	
	Возврат ПутьКПрезентацииНаДиске;
	
	#КонецЕсли	
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СохранитьПрезентациюPowerPoint() Экспорт	

	#Если НЕ ВебКлиент Тогда
		
	ПрезентацияДоступна = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияДоступна(ПриложениеPowerPoint);
	ПрезентацияМодифицирована = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияМодифицирована(ПриложениеPowerPoint);
		
	Если ПрезентацияДоступна И ПрезентацияМодифицирована Тогда
		
		// Ждем, пока презентация сохранится
		ПодключитьОбработчикОжидания("Подключаемый_СохранитьПрезентациюPowerPoint", 0.2, Истина); // Рекурсия
		Возврат;
		
	КонецЕсли;		
	
	Если НЕ ПрезентацияМодифицирована Тогда
		
		ПриложениеPowerPoint.ХранениеНаДискеКопия = НовыйПутьХраненияПрезентации("Presentation");
		КопироватьФайл(ПриложениеPowerPoint.ХранениеНаДиске, ПриложениеPowerPoint.ХранениеНаДискеКопия);	

		ПропуститьАктивациюЭлементаСодержания = Истина;
		СохранитьПрезентациюВБазу(ПриложениеPowerPoint.ХранениеНаДискеКопия);
		
	КонецЕсли;
	
	Если НЕ ПрезентацияДоступна
		ИЛИ ПриложениеPowerPoint.ВыйтиИзРежимаРедактированияПослеЗаписи Тогда
		
		ЗакрытьПрезентациюPowerPoint(Ложь);
		ВыйтиИзРежимаРедактирования(Ложь);
		
	КонецЕсли;
	
	ПриРедактировании();
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПрезентации(Pres, Cancel) Экспорт   
	
	#Если НЕ ВебКлиент Тогда
	
	Если ПриложениеPowerPoint.Презентация <> Pres Тогда
		Возврат;
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("Подключаемый_СохранитьПрезентациюPowerPoint", 0.2, Истина);	
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеПрезентации()
	
	Если РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияМодифицирована(ПриложениеPowerPoint) Тогда
		ПриложениеPowerPoint.ВыйтиИзРежимаРедактированияПослеЗаписи = Истина;
		ПриложениеPowerPoint.Презентация.Save();
	Иначе
		ЗакрытьПрезентациюPowerPoint(Ложь);
		ВыйтиИзРежимаРедактирования(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПрезентациюPowerPoint(УдалятьCOMПриложенияПриЗакрытии)

	Если ПриложениеPowerPoint <> Неопределено Тогда
		
		Если ПриложениеPowerPoint.Пользовательское <> Неопределено Тогда
			
			Попытка
				УдалитьОбработчик ПриложениеPowerPoint.Пользовательское.PresentationBeforeSave, ПередЗаписьюПрезентации;	
				УдалитьОбработчик ПриложениеPowerPoint.Пользовательское.PresentationBeforeClose, ПередЗакрытиемПрезентации;	
			Исключение
				// Обработка исключения не требуется
			КонецПопытки;		
			
		КонецЕсли;
		
		Если ПриложениеPowerPoint.Презентация <> Неопределено Тогда
		
			Попытка
				ПриложениеPowerPoint.Презентация.Close();
			Исключение	
				// Обработка исключения не требуется
			КонецПопытки;
			
		КонецЕсли;				
	
		Если ПриложениеPowerPoint.Пользовательское <> Неопределено
			И НЕ РазработкаЭлектронныхКурсовСлужебныйКлиент.ЕстьОткрытыеПрезентации(ПриложениеPowerPoint) Тогда			
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(ПриложениеPowerPoint.Пользовательское);
		КонецЕсли;					
		
		Если ПриложениеPowerPoint.Скрытое <> Неопределено
			И УдалятьCOMПриложенияПриЗакрытии Тогда			
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(ПриложениеPowerPoint.Скрытое);
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ПриложениеPowerPoint.ХранениеНаДиске) Тогда
 			ХранениеПрезентацииНаДискеСтруктура = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеPowerPoint.ХранениеНаДиске, Ложь);
			Попытка
				УдалитьФайлы(ХранениеПрезентацииНаДискеСтруктура.Путь);  // Удаляем временный каталог с файлом
			Исключение
				ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
					|%1 по причине: %2'"), ХранениеПрезентацииНаДискеСтруктура.Путь, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
				);
			КонецПопытки;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ПриложениеPowerPoint.ХранениеНаДискеКопия) Тогда
			ХранениеПрезентацииНаДискеСтруктура = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПриложениеPowerPoint.ХранениеНаДискеКопия, Ложь);
			Попытка
				УдалитьФайлы(ХранениеПрезентацииНаДискеСтруктура.Путь);  // Удаляем временный файл
			Исключение
				ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
					|%1 по причине: %2'"), ХранениеПрезентацииНаДискеСтруктура.Путь, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
				);
			КонецПопытки;				
		КонецЕсли;		
			
		Если УдалятьCOMПриложенияПриЗакрытии Тогда
			ПриложениеPowerPoint = Неопределено;
		КонецЕсли;			
		
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПрезентации(Pres, Cancel) Экспорт   
	
	Если ПриложениеPowerPoint.Презентация <> Pres Тогда
		Возврат;
	КонецЕсли;	
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриЗакрытииПрезентацииPowerPoint", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗакрытииПрезентацииPowerPoint() Экспорт	

	ПрезентацияДоступна = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияДоступна(ПриложениеPowerPoint);
	
	Если ПрезентацияДоступна Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПриЗакрытииПрезентацииPowerPoint", 0.2, Истина); // Рекурсия
		Возврат; // Еще не закрыли
	Иначе
		ВыйтиИзРежимаРедактирования(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюПрезентациюВБазу(ПользовательскийФайлПрезентации)
	
	#Если НЕ ВебКлиент Тогда
		
	// Инициируем работу с PowerPoint
			
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ИнициализироватьПриложениеРаботыСПрезентациями(ПриложениеPowerPoint);		
	
	// Получаем данные о хранении презентации в базе
	
	Если ПриложениеPowerPoint.ХранениеВБазе = Неопределено Тогда		
		ПриложениеPowerPoint.ХранениеВБазе = ДанныеХраненияПрезентацииЭлектронногоКурса(ЭлектронныйКурс, УникальныйИдентификатор);		
	КонецЕсли;
	
	// Формируем файл презентации курса
	
	ПутьКФайлуПрезентацииКурса = НовыйПутьХраненияПрезентации("Presentation");	 
	
	Если ПриложениеPowerPoint.ХранениеВБазе = Неопределено Тогда
		
		// Первая загрузка презентации (копируем пользовательский файл или сохраняем в формате pptx)
		
		Если НРег(ПользовательскийФайлПрезентации.Расширение) = ".pptx" Тогда
			КопироватьФайл(ПользовательскийФайлПрезентации.ПолноеИмя, ПутьКФайлуПрезентацииКурса);
		Иначе
			Презентация = ПриложениеPowerPoint.Скрытое.Presentations.Open(ПользовательскийФайлПрезентации.ПолноеИмя,,,Ложь);	
			Презентация.SaveAs(ПутьКФайлуПрезентацииКурса, 11); //ppSaveAsDefault
			Презентация.Close();
		КонецЕсли;		
		
	Иначе
		
		// Добавляем слайды к существующей презентации
		
		ПолучитьФайл(ПриложениеPowerPoint.ХранениеВБазе.МестоХраненияВБазе, ПутьКФайлуПрезентацииКурса, Ложь);
		
		Презентация = ПриложениеPowerPoint.Скрытое.Presentations.Open(ПутьКФайлуПрезентацииКурса,,,Ложь);
		Презентация.Slides.InsertFromFile(ПользовательскийФайлПрезентации.ПолноеИмя, Презентация.Slides.Count);
		Презентация.Save();
		Презентация.Close();
		
	КонецЕсли;
	
	СохранитьПрезентациюВБазу(ПутьКФайлуПрезентацииКурса);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрезентациюВБазу(ПутьКФайлуПрезентацииКурса)
	
	#Если НЕ ВебКлиент Тогда
		
	ФайлПрезентацииКурса = Новый Файл(ПутьКФайлуПрезентацииКурса);
	Если НЕ ФайлПрезентацииКурса.Существует() Тогда
		ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл %1 презентации не найден'"), ФайлПрезентацииКурса.ПолноеИмя);
	КонецЕсли;				
	
	ФайлыДляУдаления = Новый Массив;
	ФайлыДляСохранения = Новый Массив;
	
	ФайлыДляУдаления.Добавить(ПутьКФайлуПрезентацииКурса);
	ФайлыДляСохранения.Добавить(ФайлПрезентацииКурса);
	
	// Сохраняем картинки слайдов и формируем переменную НастройкиКартинок
	//
	
	ПутьКаталогуСКартинками = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ПутьКаталогуСКартинками);		
	ФайлыДляУдаления.Добавить(ПутьКаталогуСКартинками);
	
	Презентация = ПриложениеPowerPoint.Скрытое.Presentations.Open(ПутьКФайлуПрезентацииКурса,,,Ложь);
	
	НастройкиКартинок = Новый Структура("Слайды");
	НастройкиКартинок.Слайды = Новый Массив;
	
	Для каждого СвойстваСлайда Из Презентация.Slides Цикл
	
		СтруктураСлайда = Новый Структура("Номер, Идентификатор, ИмяФайла");
		СтруктураСлайда.Номер = СвойстваСлайда.SlideIndex;
		СтруктураСлайда.Идентификатор = СвойстваСлайда.SlideID;
		СтруктураСлайда.ИмяФайла = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(СтруктураСлайда.Идентификатор) + ".png"; // Будет заполнено ниже
		
		НастройкиКартинок.Слайды.Добавить(СтруктураСлайда);
		
	КонецЦикла;
	
	НастройкиКартинок = Новый ФиксированнаяСтруктура(НастройкиКартинок);
	
	Презентация.SaveAs(ПутьКаталогуСКартинками, 18); //ppSaveAsPNG	
	Презентация.Close();
	
	ПутьКаталогуСКартинками = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталогуСКартинками);
	
	// Переименовываем файлы картинок по идентификатору слайда
	//					
	
	ФайлыКартинок = НайтиФайлы(ПутьКаталогуСКартинками, "*.png");
	
	Если ФайлыКартинок.Количество() <> НастройкиКартинок.Слайды.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Слайды презентации не найдены'");
	КонецЕсли;
	
	Для каждого ФайлКартинки Из ФайлыКартинок Цикл
		
		ИмяБезРасширения = ФайлКартинки.ИмяБезРасширения;
		ДлинаИмениКартинки = СтрДлина(ИмяБезРасширения);
		ДлинаНомераСправа = 1;
		
		Пока ДлинаНомераСправа < ДлинаИмениКартинки Цикл
			
			НомерКартинкиСправа = Прав(ИмяБезРасширения, ДлинаНомераСправа);
			Если НЕ ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(НомерКартинкиСправа) Тогда
				ДлинаНомераСправа = ДлинаНомераСправа - 1; // Возвращаемся на шаг назад
				Прервать;
			КонецЕсли;
			
			ДлинаНомераСправа = ДлинаНомераСправа + 1;
			
		КонецЦикла;
		
		НомерКартинкиСправа = Число(Прав(ИмяБезРасширения, ДлинаНомераСправа));
		
		ИмяФайлаСлайда = "";
		Для каждого СтруктураСлайда Из НастройкиКартинок.Слайды Цикл
			
			Если СтруктураСлайда.Номер = НомерКартинкиСправа Тогда
				ИмяФайлаСлайда = СтруктураСлайда.ИмяФайла;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;

		Если НЕ ЗначениеЗаполнено(ИмяФайлаСлайда) Тогда
			ВызватьИсключение НСтр("ru = 'Слайд в презентации не найден'");
		КонецЕсли;
		
		ПереместитьФайл(ФайлКартинки.ПолноеИмя, ПутьКаталогуСКартинками + ИмяФайлаСлайда);
		
	КонецЦикла;
	
	// Проверяем есть ли все файлы
	//
	
	Для каждого СтруктураСлайда Из НастройкиКартинок.Слайды Цикл
	
		ФайлКартинки = Новый Файл(ПутьКаталогуСКартинками + СтруктураСлайда.ИмяФайла);
		Если НЕ ФайлКартинки.Существует() Тогда
			ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл %1 слайда не найден'"), ФайлКартинки.ПолноеИмя);	
		КонецЕсли;
		
	КонецЦикла;
		
	// Упаковываем картинки слайдов в архив
	//	
	
	ПутьКаталогуСКартинками = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталогуСКартинками);
	ПутьКАрхивуZIPСКартинками = ПолучитьИмяВременногоФайла("zip");
	
	ЗаписьZip = Новый ЗаписьZipФайла(ПутьКАрхивуZIPСКартинками,,,МетодСжатияZIP.Копирование);							
	ЗаписьZip.Добавить(ПутьКаталогуСКартинками + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,  РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьZip.Записать();		
	
	ФайлыДляУдаления.Добавить(ПутьКАрхивуZIPСКартинками);	
	ФайлыДляСохранения.Добавить(Новый Файл(ПутьКАрхивуZIPСКартинками));
		
	// Помещаем файлы во временное хранилище
	//	
		
	ПараметрыЗагрузки = Новый Структура();	
	
	ПараметрыЗагрузки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыЗагрузки.Вставить("КонтекстФайла", "Presentation");
	ПараметрыЗагрузки.Вставить("ПереданныеФайлы", Новый Массив);	
	ПараметрыЗагрузки.Вставить("ПередаваемыеФайлы", Новый Массив);
	ПараметрыЗагрузки.Вставить("СтруктураФайлов", Новый Массив);
	ПараметрыЗагрузки.Вставить("ТекстовыеДанныеДляИндексирования", "");

	ПараметрыЗагрузки.СтруктураФайлов.Добавить(
		ЭлектронноеОбучениеСлужебныйКлиентСервер.НовоеОписаниеФайла(ФайлПрезентацииКурса, ПараметрыЗагрузки.КонтекстФайла)
	);
	
	Для каждого ФайлДляСохранения Из ФайлыДляСохранения Цикл		
		ПараметрыЗагрузки.ПередаваемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлДляСохранения.ПолноеИмя));
	КонецЦикла;	
	ПоместитьФайлы(ПараметрыЗагрузки.ПередаваемыеФайлы, ПараметрыЗагрузки.ПереданныеФайлы,, Ложь, ПараметрыЗагрузки.УникальныйИдентификатор);
	
	// Помещаем файлы в базу
	//
		
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлуПрезентацииКурса, Ложь);
	
	СвойстваФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла();
			
	СвойстваФайла.Имя = "Presentation"; // Всегда одинаковое для контроля целостности ресурса
	СвойстваФайла.Расширение = СтруктураИмениФайла.Расширение;
	СвойстваФайла.ЭтоКаталог = Ложь;
	СвойстваФайла.Преобразовать = Истина;
	СвойстваФайла.СтруктураФайлов = ПараметрыЗагрузки.СтруктураФайлов;
	СвойстваФайла.СписокФайлов = ПараметрыЗагрузки.ПереданныеФайлы;
	СвойстваФайла.НастройкиКартинок = НастройкиКартинок;
	СвойстваФайла.ДанныеВидео = Неопределено;
	СвойстваФайла.КонтекстФайла = "Presentation";
	СвойстваФайла.ТекстовыеДанныеДляИндексирования = ПараметрыЗагрузки.ТекстовыеДанныеДляИндексирования;			
			
	СохранитьЭлементКурсаНаСервере(СвойстваФайла);
	
	// Удаляем старые файлы
	//
	
	Для каждого ПутьКФайлу Из ФайлыДляУдаления Цикл
			
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
			ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
				|%1 по причине: %2'"), ПутьКФайлу, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
			);
		КонецПопытки;			
		
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеХраненияПрезентацииЭлектронногоКурса(ЭлектронныйКурс, ИдентификаторФормы)	
	
	Если ТипЗнч(ЭлектронныйКурс) = Тип("СправочникСсылка.ЭлектронныеКурсы")
		И ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		
		Ресурс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйКурс, "Презентация");
		
		Если НЕ ЗначениеЗаполнено(Ресурс) Тогда
			Возврат Неопределено; // Еще нет презентации
		КонецЕсли;
		
		Возврат ДанныеХраненияПрезентации(Ресурс, ИдентификаторФормы);
		
	Иначе		
		
		Возврат Неопределено; // Еще нет презентации		
		
	КонецЕсли;			
		
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеХраненияПрезентации(РесурсСПрезентацией, ИдентификаторФормы)	
		
	ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РесурсСПрезентацией, "ЕдинственныйЭлемент");
	
	Если НЕ ЗначениеЗаполнено(ЭлементРесурса) Тогда
		ВызватьИсключение НСтр("ru = 'Элемент ресурса с презентацией не найден'");
	КонецЕсли;
	
	МестоХраненияПрезентацииВБазе = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляРедактирования(ЭлементРесурса, Перечисления.ТипыЭлементовЭлектронныхРесурсов.Presentation, ИдентификаторФормы);
	
	Если НЕ ЗначениеЗаполнено(МестоХраненияПрезентацииВБазе) Тогда
		ВызватьИсключение НСтр("ru = 'Место хранения документа не определено'");
	КонецЕсли;	
	
	ДанныеЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементРесурса, "Наименование, ИмяФайла");
	
	ДанныеЭлемента.Вставить("СсылкаНаЭлементСПрезентацией", ЭлементРесурса);
	ДанныеЭлемента.Вставить("МестоХраненияВБазе", МестоХраненияПрезентацииВБазе);
	ДанныеЭлемента.Вставить("Ресурс", РесурсСПрезентацией);

	Возврат Новый ФиксированнаяСтруктура(ДанныеЭлемента);
	
КонецФункции

&НаКлиенте
Процедура УдалитьСлайдыИзПрезентацииСлайдовогоКурса(МассивЭлементовСодержания)
	
	Если РазработкаЭлектронныхКурсовСлужебныйКлиент.ПрезентацияДоступна(ПриложениеPowerPoint) Тогда
		ВызватьИсключение НСтр("ru = 'Слайды не могут быть удалены в открытой презентации'");
	КонецЕсли;
	
	Если ТипЭлектронногоКурса = ПредопределенноеЗначение("Перечисление.ТипыЭлектронныхКурсов.Учебник") Тогда
		ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается в электронном учебнике'");
	КонецЕсли;	
	
	РазработкаЭлектронныхКурсовСлужебныйКлиент.ИнициализироватьПриложениеРаботыСПрезентациями(ПриложениеPowerPoint);		
	ПриложениеPowerPoint.ХранениеНаДиске = НовыйПутьХраненияПрезентации("presentation");
	ПриложениеPowerPoint.ХранениеВБазе = ДанныеХраненияПрезентацииЭлектронногоКурса(ЭлектронныйКурс, УникальныйИдентификатор);
	ПолучитьФайл(ПриложениеPowerPoint.ХранениеВБазе.МестоХраненияВБазе, ПриложениеPowerPoint.ХранениеНаДиске, Ложь);		
		
	ПриложениеPowerPoint.Презентация = ПриложениеPowerPoint.Пользовательское.Presentations.Open(ПриложениеPowerPoint.ХранениеНаДиске,,,Ложь);
	
	ИдентификаторыСлайдов = ИдентификаторыСлайдовЭлементовСодержания(МассивЭлементовСодержания);
	
	Для каждого ИдентификаторСлайда Из ИдентификаторыСлайдов Цикл	
		СлайдПрезентации = ПриложениеPowerPoint.Презентация.Slides.FindBySlideID(ИдентификаторСлайда);
		СлайдПрезентации.Delete();	
	КонецЦикла;
	
	ПриложениеPowerPoint.Презентация.Save();
	ПриложениеPowerPoint.Презентация.Close();
	
	СохранитьПрезентациюВБазу(ПриложениеPowerPoint.ХранениеНаДиске);
	
	ЗакрытьПрезентациюPowerPoint(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторыСлайдовЭлементовСодержания(Знач МассивЭлементовСодержания)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СодержаниеЭлектронныхКурсов.ПараметрыЗапуска КАК ПараметрыЗапуска
		|ИЗ
		|	Справочник.СодержаниеЭлектронныхКурсов КАК СодержаниеЭлектронныхКурсов
		|ГДЕ
		|	СодержаниеЭлектронныхКурсов.Ссылка В(&МассивЭлементовСодержания)";
	
	Запрос.УстановитьПараметр("МассивЭлементовСодержания", МассивЭлементовСодержания);
	
	МассивИменФайлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрыЗапуска");
	
	МассивИдентификаторов = Новый Массив;
	Для каждого ИмяФайла Из МассивИменФайлов Цикл
		МассивИдентификаторов.Добавить(ИмяФайлаСлайдаВИдентификатор(ИмяФайла));
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФайлаСлайдаВИдентификатор(Знач ИмяФайлаСлайда)
	
	Идентификатор = Лев(ИмяФайлаСлайда, СтрДлина(ИмяФайлаСлайда) - СтрДлина(".png"));
	Идентификатор = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Идентификатор);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область Excel

// Excel

&НаКлиенте
Процедура ДобавитьНовыйТестИзФайлаExcel(ПользовательскийФайлСТестом)
	
	#Если НЕ ВебКлиент Тогда
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьНовыйТестИзФайлаExcelПродолжение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения,, ПользовательскийФайлСТестом.ПолноеИмя, Ложь, УникальныйИдентификатор);	
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйТестИзФайлаExcelПродолжение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НовыйЭлементСодержания(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Тест"));
	
	ДобавитьНовыйТестИзФайлаExcelПродолжениеНаСервере(Адрес, ВыбранноеИмяФайла, НоваяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыйТестИзФайлаExcelПродолжениеНаСервере(ХранениеФайлаВХранилище, ИмяФайла, ИдентификаторРедактируемойСтроки) Экспорт
	
	// Получаем табличный документ с данными теста
	
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	ПутьКВременномуФайлуТаблицы = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ХранениеФайлаВХранилище);	
	ДвоичныеДанныеФайла.Записать(ПутьКВременномуФайлуТаблицы);
	
	ТабличныйДокументСДанными = Новый ТабличныйДокумент;
	ТабличныйДокументСДанными.Прочитать(ПутьКВременномуФайлуТаблицы, СпособЧтенияЗначенийТабличногоДокумента.Текст);	
	
	УдалитьФайлы(ПутьКВременномуФайлуТаблицы);
	
	// Преобразуем табличный документ в таблицу значений
	
	Построитель = Новый ПостроительЗапроса;
    Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокументСДанными.Область());
	Попытка
		Построитель.Выполнить();
    	ТаблицаСДаннымиТеста = Построитель.Результат.Выгрузить();
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка чтения теста из файла Excel.
		|Возможно,  макет таблицы не соответствует поддерживаемому формату.'");
	КонецПопытки;
	
	
	// Делаем проверки макета (кроме колонки "ВариантОтвета", см. ниже)
	
    ОбязательныеКолонки = Новый Массив;
    ОбязательныеКолонки.Добавить("Код");
    ОбязательныеКолонки.Добавить("Задание");    
    ОбязательныеКолонки.Добавить("ВерныйВариант");
	
	Для каждого ИмяОбязательнойКолонки Из ОбязательныеКолонки Цикл

		КолонкаНайдена = Ложь;

		Для каждого КолонкаТаблицыСДанными Из ТаблицаСДаннымиТеста.Колонки Цикл
			Если КолонкаТаблицыСДанными.Имя = ИмяОбязательнойКолонки Тогда
				КолонкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если НЕ КолонкаНайдена Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обязательная колонка ""%1"" макета теста не найдена в файле ""%2""'"), ИмяОбязательнойКолонки, ИмяФайла);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЦикла;
	
	// Находим имена колонок с вариантами ответов
	
	КолонкиВариантовОтветов = Новый Массив;
	
	Для каждого КолонкаТаблицыСДанными Из ТаблицаСДаннымиТеста.Колонки Цикл
		Если Лев(КолонкаТаблицыСДанными.Имя, СтрДлина("ВариантОтвета")) = "ВариантОтвета" Тогда
			Если КолонкаТаблицыСДанными.Имя = "ВариантОтвета" Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В файле ""%1"" колонка ""ВариантОтвета"" не имеет номера'"), ИмяФайла);
				ВызватьИсключение ТекстИсключения;				
			КонецЕсли;
			КолонкиВариантовОтветов.Добавить(КолонкаТаблицыСДанными.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если КолонкиВариантовОтветов.Количество() = 0 Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В файле ""%1"" не найдено ни одной колонки ""ВариантОтвета<N>""'"), ИмяФайла);
		ВызватьИсключение ТекстИсключения;		
	КонецЕсли;
	
	// Записываем тест и вопросы
	
	НачатьТранзакцию();
    
    Попытка
		
		// Создаем тест
		
		СохранитьЭлементКурсаНаСервере(Неопределено, ИдентификаторРедактируемойСтроки, СтруктураФайла.ИмяБезРасширения);	
		РедактируемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторРедактируемойСтроки);
		ЭлектронныйТест = РедактируемаяСтрока.СсылкаНаЭлемент;
		
		// Записываем вопросы
		
		Для каждого СвойствоВопроса Из ТаблицаСДаннымиТеста Цикл
			
			Если НЕ ЗначениеЗаполнено(СвойствоВопроса.Задание)
				ИЛИ НЕ ЗначениеЗаполнено(СвойствоВопроса.Код) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
    		// Создаем вопрос
    		
    		ВопросОбъект = Справочники.ТестовыеВопросы.СоздатьЭлемент();
    		ВопросОбъект.Наименование = СвойствоВопроса.Задание;
    		ВопросОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ТестовыеВопросы"));
	   		РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВопросОбъект);
    		
    		ВопросОбъект.Код = СвойствоВопроса.Код;
    		
    		ЗаданиеФорматированныйДокумент = Новый ФорматированныйДокумент;
    		ЗаданиеФорматированныйДокумент.УстановитьHTML(СвойствоВопроса.Задание, Новый Структура);
    		ВопросОбъект.Задание = Новый ХранилищеЗначения(ЗаданиеФорматированныйДокумент);
    		ВопросОбъект.ИспользуетсяФорматированныйДокумент = Истина;
    		
    		ВопросОбъект.ПеремешиватьВарианты = Истина;
    		
    		МассивВерныхВариантов = СтрРазделить(СвойствоВопроса.ВерныйВариант, ",", Ложь);
    		
    		Если МассивВерныхВариантов.Количество() = 1 Тогда
    			ВопросОбъект.ТипВопроса = Перечисления.ТипыТестовыхВопросов.ОдинИзМногих;
    		ИначеЕсли МассивВерныхВариантов.Количество() > 1 Тогда
    			ВопросОбъект.ТипВопроса = Перечисления.ТипыТестовыхВопросов.МногиеИзМногих;
    		Иначе
    			ВопросОбъект.ТипВопроса = Перечисления.ТипыТестовыхВопросов.Последовательность;
    		КонецЕсли;
    		
    		ВопросОбъект.Записать();
    		
    		// Создаем варианты ответов
    		
    		НомерВарианта = 1;
			Для каждого ИмяКолонкиВарианта Из КолонкиВариантовОтветов Цикл
				
				ТекстВариантаОтвета = СвойствоВопроса[ИмяКолонкиВарианта];				
    			
    			Если ЗначениеЗаполнено(ТекстВариантаОтвета) Тогда
    			
    				ВариантОтветаОбъект = Справочники.ВариантыОтветовНаТестовыеВопросы.СоздатьЭлемент();
    				ВариантОтветаОбъект.Владелец = ВопросОбъект.Ссылка;
    				ВариантОтветаОбъект.Наименование = ТекстВариантаОтвета;
    				ВариантОтветаОбъект.ТекстВарианта = Новый ХранилищеЗначения(ТекстВариантаОтвета);				
    				
    				РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВариантОтветаОбъект);

    				НомерВариантаСтрока = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(НомерВарианта);
    				
    				Если МассивВерныхВариантов.Найти(НомерВариантаСтрока) <> Неопределено Тогда
    					ВариантОтветаОбъект.Верный = Истина;
    				КонецЕсли;
    				
    				ВариантОтветаОбъект.Записать();
    				
    			КонецЕсли;
    				
    			НомерВарианта = НомерВарианта + 1;
    			
    		КонецЦикла;
    		
    		// Помещаем вопрос в тест
    		
    		СоздатьСтраницуТеории(ЭлектронныйТест, ВопросОбъект.Ссылка, Неопределено);			
		
		КонецЦикла;
		
		// Завершаем
		
	  	ЗафиксироватьТранзакцию();
		
    Исключение
 
 		ОтменитьТранзакцию();
    	ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    	ВызватьИсключение;
    	
    КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Общее

// Общее

&НаСервере
Процедура ЗаполнитьРеквизитыЭлектронногоКурса()	
	
	Если НЕ РежимРедактирования И НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		ВызватьИсключение НСтр("ru = 'Электронный курс не задан'")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		
		ДанныеЭлектронногоКурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйКурс, "Наименование, Тип");
		
		ТипЭлектронногоКурса = ДанныеЭлектронногоКурса.Тип;
		 
		Если РежимРедактирования Тогда			
			ШаблонЗаголовка = НСтр("ru = 'Редактирование курса ""%1""'");
		ИначеЕсли РежимИзучения Тогда			
			Если ЗначениеЗаполнено(Учащийся) И ЗначениеЗаполнено(Контекст) Тогда 
				ШаблонЗаголовка = НСтр("ru = 'Изучение курса ""%1""'");
			Иначе
				ШаблонЗаголовка = НСтр("ru = 'Тестовое изучение курса ""%1""'");
			КонецЕсли;			
		Иначе
			ШаблонЗаголовка = НСтр("ru = '%1'");
		КонецЕсли;			
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ДанныеЭлектронногоКурса.Наименование);			
		
	Иначе
		
		Если Параметры.Свойство("ТипЭлектронногоКурса")
			И ЗначениеЗаполнено(Параметры.ТипЭлектронногоКурса) Тогда
			
			ТипЭлектронногоКурса = Параметры.ТипЭлектронногоКурса;
			
		КонецЕсли;			
		
		Если РежимРедактирования Тогда			
			Заголовок = НСтр("ru = 'Электронный курс (создание)'");			
		Иначе			
			Заголовок = НСтр("ru = 'Просмотр элемента'");			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

// Содержание курса

&НаСервере
Процедура ЗаполнитьНавигационноеДерево()
	
	// Очищаем данные
	
	НавигационноеДерево.ПолучитьЭлементы().Очистить();
	
	// Получаем выгрузку элементов содержания
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СодержаниеЭлектронныхКурсов.Ссылка КАК Ссылка,
		|	СодержаниеЭлектронныхКурсов.Элемент КАК СсылкаНаЭлемент,
		|	СодержаниеЭлектронныхКурсов.Наименование КАК Наименование,
		|	СодержаниеЭлектронныхКурсов.ЭтоГруппа КАК ЭтоГруппа,
		|	СодержаниеЭлектронныхКурсов.Родитель КАК Группа,
		|	СодержаниеЭлектронныхКурсов.ТипЭлемента КАК ТипЭлемента
		|ИЗ
		|	Справочник.СодержаниеЭлектронныхКурсов КАК СодержаниеЭлектронныхКурсов
		|ГДЕ
		|	СодержаниеЭлектронныхКурсов.Владелец = &ЭлектронныйРесурс
		|	И СодержаниеЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СодержаниеЭлектронныхКурсов.Код ИЕРАРХИЯ,
		|	Наименование ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("ЭлектронныйРесурс", ЭлектронныйКурс);

	Результат = Запрос.Выполнить();

	ДеревоСодержанияВыгрузка = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Формируем дерево содержания
	
	ДеревоСодержания = Новый ДеревоЗначений();
	
	ДеревоСодержания.Колонки.Добавить("Ссылка");
	ДеревоСодержания.Колонки.Добавить("СсылкаНаЭлемент");
	ДеревоСодержания.Колонки.Добавить("Наименование");
	ДеревоСодержания.Колонки.Добавить("ЭтоГруппа");
	ДеревоСодержания.Колонки.Добавить("Картинка");
	ДеревоСодержания.Колонки.Добавить("Пройдено");
	ДеревоСодержания.Колонки.Добавить("Отмечено");
	ДеревоСодержания.Колонки.Добавить("ТипЭлемента");	
	ДеревоСодержания.Колонки.Добавить("ЭтоКорень");	
	ДеревоСодержания.Колонки.Добавить("ЭтоФинальныйСлайд");	
	
	// Создаем корневой элемент дерева
	
	КореньДереваСодержания = ДеревоСодержания.Строки.Добавить();
	КореньДереваСодержания.Ссылка = ЭлектронныйКурс;
	КореньДереваСодержания.СсылкаНаЭлемент = ЭлектронныйКурс;
	
	Если ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		КореньДереваСодержания.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйКурс, "Наименование");
	Иначе
		КореньДереваСодержания.Наименование = НаименованиеНовогоЭлектронногоКурса();
	КонецЕсли;
	
	КореньДереваСодержания.ЭтоКорень = Истина;
	КореньДереваСодержания.Отмечено = Ложь;
	КореньДереваСодержания.Пройдено = Истина;
	КореньДереваСодержания.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Начало;
	КореньДереваСодержания.ЭтоФинальныйСлайд = Ложь;
	
	// Добавляем элементы курса в корень
	
	ДобавитьЭлементыСодержанияВДерево(КореньДереваСодержания.Строки, ДеревоСодержанияВыгрузка.Строки);	
		
	// Настраиваем корень дерева
	
	Для каждого Строка Из КореньДереваСодержания.Строки Цикл
	
		Если НЕ Строка.Пройдено Тогда
			КореньДереваСодержания.Пройдено = Ложь;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	КореньДереваСодержания.Картинка = КартинкаЭлементаСодержания(КореньДереваСодержания); // Книга
	
	// Помещаем дерево в форму
	
	ЗначениеВРеквизитФормы(ДеревоСодержания, "НавигационноеДерево");	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыСодержанияВДерево(СтрокиДерева, СтрокиВыгрузки);

	Для каждого Строка Из СтрокиВыгрузки Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();		
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ЭтоФинальныйСлайд = Ложь;
		НоваяСтрока.Отмечено  = Ложь;
		НоваяСтрока.Пройдено  = Ложь;
		НоваяСтрока.ЭтоКорень = Ложь;		
		
		Если ЗначениеЗаполнено(Строка.ТипЭлемента) Тогда
			НоваяСтрока.ТипЭлемента = Строка.ТипЭлемента;
		Иначе				
			НоваяСтрока.ТипЭлемента = Справочники.СодержаниеЭлектронныхКурсов.ТипЭлементаПоСсылке(Строка.СсылкаНаЭлемент, Строка.ЭтоГруппа);
		КонецЕсли;		
		
		Если Строка.ЭтоГруппа Тогда									
			ДобавитьЭлементыСодержанияВДерево(НоваяСтрока.Строки, Строка.Строки); // Рекурсия
		КонецЕсли;
		
		НоваяСтрока.Картинка = КартинкаЭлементаСодержания(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкаЭлементаСодержания(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ЭтоКорень Тогда		
		Возврат 15;
	ИначеЕсли ТекущаяСтрока.ЭтоГруппа Тогда
		Возврат 2;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Видео") Тогда
		Возврат 11;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Глоссарий") Тогда
		Возврат 10;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Документ") Тогда
		Возврат 7;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord") Тогда
		Возврат 8;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Звук") Тогда
		Возврат 4;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Тест") Тогда
		Возврат 5;
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации") Тогда
		Возврат 9;		
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube") Тогда
		Возврат 17;				
	Иначе		
		Возврат 13;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТекущийЭлементСодержания()
	
	Если Элементы.НавигационноеДерево.Видимость Тогда
		
		Если Элементы.НавигационноеДерево.ТекущиеДанные = Неопределено
			ИЛИ ТипЗнч(Элементы.НавигационноеДерево.ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда
			
			Возврат ПредопределенноеЗначение("Справочник.СодержаниеЭлектронныхКурсов.ПустаяСсылка");
			
		Иначе
			
			Возврат Элементы.НавигационноеДерево.ТекущиеДанные.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Справочник.СодержаниеЭлектронныхКурсов.ПустаяСсылка");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ИдентификаторСтрокиНавигационногоДереваПоСсылкеНаЭлемент(Знач ЭлементСодержания, ТекущиеСтрокиДляОбхода = Неопределено)
	
	Если ТекущиеСтрокиДляОбхода = Неопределено Тогда
		ТекущиеСтрокиДляОбхода = НавигационноеДерево.ПолучитьЭлементы();
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	
	Для каждого Строка Из ТекущиеСтрокиДляОбхода Цикл
	
		Если Строка.Ссылка = ЭлементСодержания И НЕ Строка.ЭтоКорень Тогда // Корень не ищем
			НайденнаяСтрока = Строка.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено
			И (Строка.ЭтоГруппа ИЛИ Строка.ЭтоКорень) Тогда
			
			НайденнаяСтрока = ИдентификаторСтрокиНавигационногоДереваПоСсылкеНаЭлемент(ЭлементСодержания, Строка.ПолучитьЭлементы()); // Рекурсия 
			
		КонецЕсли;
		
		Если НайденнаяСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат НайденнаяСтрока;
	
КонецФункции

&НаКлиенте
Функция НовыйЭлементСодержания(ТипЭлемента = Неопределено)
	
	ИдентификаторТекущейСтроки = Элементы.НавигационноеДерево.ТекущаяСтрока;
	ТекущиеДанные = Элементы.НавигационноеДерево.ТекущиеДанные;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторТекущейСтроки = Неопределено ИЛИ (ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоКорень) ИЛИ ТекущаяСтрока = Неопределено Тогда		
		ЭлементыДереваДляДобавления = НавигационноеДерево.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы(); // Элементы корня		
	ИначеЕсли ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоГруппа Тогда		
		ЭлементыДереваДляДобавления = ТекущаяСтрока.ПолучитьЭлементы();		
	Иначе
		ЭлементыДереваДляДобавления = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли;	
	
	НоваяСтрокаСодержания = ЭлементыДереваДляДобавления.Добавить();		
	НоваяСтрокаСодержания.Наименование = НСтр("ru = 'Новый слайд'");
	
	Если ТипЭлемента <> Неопределено Тогда
		НоваяСтрокаСодержания.ТипЭлемента = ТипЭлемента;
	КонецЕсли;
	
	Если НоваяСтрокаСодержания.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСодержанияЭлектронногоКурса.Группа") Тогда
		НоваяСтрокаСодержания.ЭтоГруппа = Истина;
	КонецЕсли;
	
	НоваяСтрокаСодержания.Картинка = КартинкаЭлементаСодержания(НоваяСтрокаСодержания);
	
	Возврат НоваяСтрокаСодержания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеНовогоЭлектронногоКурса()
	Возврат НСтр("ru = 'Новый электронный курс'");
КонецФункции

&НаСервере
Процедура ПереместитьЭлементСодержания(Знач НомерПеремещаемойСтроки, Знач НомерСтрокиНаКоторуюПеремещаем)
	
	ПеремещаемаяСтрока = НавигационноеДерево.НайтиПоИдентификатору(НомерПеремещаемойСтроки);	
	СтрокаНаКоторуюПеремещаем = НавигационноеДерево.НайтиПоИдентификатору(НомерСтрокиНаКоторуюПеремещаем);

	Если СтрокаНаКоторуюПеремещаем.ЭтоКорень Тогда
		
		НовыйРодитель = Справочники.СодержаниеЭлектронныхКурсов.ПустаяСсылка();
		
	ИначеЕсли СтрокаНаКоторуюПеремещаем.ЭтоГруппа Тогда
		
		НовыйРодитель = СтрокаНаКоторуюПеремещаем.Ссылка;		
		
	Иначе
		
		НовыйРодительСтрока = СтрокаНаКоторуюПеремещаем.ПолучитьРодителя();
		НовыйРодитель = НовыйРодительСтрока.Ссылка;		
		
	КонецЕсли;
	
	ПеремещаемыйЭлементОбъект = ПеремещаемаяСтрока.Ссылка.ПолучитьОбъект();
	ПеремещаемыйЭлементОбъект.Родитель = НовыйРодитель;
	ПеремещаемыйЭлементОбъект.Записать();	
	
	ЗаполнитьНавигационноеДерево();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытиеФормы = Ложь;
ПропуститьАктивациюЭлементаСодержания    = Ложь;
ПубликоватьПриЗакрытии = Истина;
ФайлыДляЗагрузки = Новый Массив;

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Число"));
МассивТипов.Добавить(Тип("Файл"));

ОписаниеДопустимыхТиповПеретаскивания = Новый ОписаниеТипов(МассивТипов);

#КонецОбласти
