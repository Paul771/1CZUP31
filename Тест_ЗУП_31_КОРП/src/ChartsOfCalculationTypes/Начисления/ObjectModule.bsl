#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		ПроверятьФормулуРасчета = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		    Модуль.ПриПроверкеЗаполненияФормулыРасчетаНачисления(ЭтотОбъект, ПроверятьФормулуРасчета);
		КонецЕсли;
		Если ПроверятьФормулуРасчета Тогда
			Если Не ЗначениеЗаполнено(ФормулаРасчета) И Рассчитывается Тогда 
				ТекстСообщения = НСтр("ru = 'Поле ""Формула расчета"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФормулаНеЗаполненаТекст", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете
		И МесяцыНачисления.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного месяца, в котором выполняется начисление.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	// Проверка показателей в формуле расчета.
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда
		ЕстьРазмерДоплатыЗаСовмещение = Ложь;
		РазмерДоплатыЗаСовмещение = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение");
		Если РазмерДоплатыЗаСовмещение <> Неопределено Тогда
			ЕстьРазмерДоплатыЗаСовмещение = Показатели.Найти(РазмерДоплатыЗаСовмещение, "Показатель") <> Неопределено;
		КонецЕсли;
		Если Не ЕстьРазмерДоплатыЗаСовмещение Тогда
			ТекстОшибки = НСтр("ru = 'Формула вида расчета с назначением «Доплата за совмещение» должна содержать показатель «РазмерДоплатыЗаСовмещение».'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	СвойстваНачисления = СвойстваНачислений[КатегорияНачисленияИлиНеоплаченногоВремени];
	
	// Если есть показатель расчета времени, то должен быть заполнен вид времени.
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		Если СвойстваНачисления.НедоступныеСвойства.Найти("ОбозначениеВТабелеУчетаРабочегоВремени") = Неопределено 
			И Не ЗначениеЗаполнено(ОбозначениеВТабелеУчетаРабочегоВремени) Тогда
			ПоказателиРасчетаВремени = Новый Массив;
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
			Для Каждого СтрокаПоказателя Из Показатели Цикл
				Если ПоказателиРасчетаВремени.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнен вид по классификатору рабочего времени.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ОбозначениеВТабелеУчетаРабочегоВремени", , Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваНачисления.НедоступныеСвойства.Найти("ВидОтпуска") <> Неопределено Тогда
		// Если ВидОтпуска недоступен для редактирования, то не значит, что он не заполняется.
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОтпуска");
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
		Или КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
		РасчетЗарплаты.ПроверитьУникальностьНачисленияПоКатегории(Ссылка, КатегорияНачисленияИлиНеоплаченногоВремени, Отказ);
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
		РасчетЗарплаты.ПроверитьУникальностьНачисленияПоКатегории(Ссылка, КатегорияНачисленияИлиНеоплаченногоВремени, Отказ);
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами Тогда
		РасчетЗарплаты.ПроверитьУникальностьНачисленияПоКатегории(Ссылка, КатегорияНачисленияИлиНеоплаченногоВремени, Отказ);
	КонецЕсли;
	
	КатегорииПоСвойствам = ПланыВидовРасчета.Начисления.КатегорииПоСвойствамНачислений();
	
	// Коды дохода не заполняются для отдельных категорий.
	Если КатегорииПоСвойствам.КодДоходаНДФЛНеЗаполняется.Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КодДоходаНДФЛ");
	КонецЕсли;
	Если КатегорииПоСвойствам.КодДоходаСтраховыеВзносыНеЗаполняется.Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КодДоходаСтраховыеВзносы");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КодДоходаСтраховыеВзносы2017");
	КонецЕсли;
	
	ПроверитьЗачетНормыВремениВытесняющих(Отказ);
	
	// Базовые начисления этих категорий недоступны для редактирования пользователю, 
	// поэтому не проверяем.
	БазовыеНачисленияНеПроверяются = Новый Массив;
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
	Если БазовыеНачисленияНеПроверяются.Найти(КатегорияНачисленияИлиНеоплаченногоВремени) = Неопределено Тогда
		РасчетЗарплатыРасширенный.ПроверитьНаличиеБазовыхВидовРасчета(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если Не РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(ЭтотОбъект)  
		И РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Показатели, "РасчетнаяБазаСтраховыеВзносы") Тогда 
		ТекстСообщения = НСтр("ru = 'Показатель РасчетнаяБазаСтраховыеВзносы допустимо использовать только в начислениях, выполняемых в целом за месяц.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ФормулаРасчета", , Отказ);
	КонецЕсли;
	
	Если СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете Тогда 
		СтрокаОпределяющийПоказатель = Показатели.Найти(Истина, "ОпределяющийПоказатель");
		Если СтрокаОпределяющийПоказатель = Неопределено Тогда 
			ТекстСообщения = НСтр("ru = 'Не отмечено ни одного показателя.'");
	        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СписокОпределяющихПоказателей", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВАрхиве И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"ВАрхиве") = Ложь Тогда
		ПроверитьАктуальностьВидаРасчета(Отказ);
	КонецЕсли;
	
	Если ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СдвигБазовогоПериода");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) И Не ДополнительныеСвойства.Свойство("ИзменениеПланаВидовРасчетаПоНастройкам") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическийРасчетФОТ = РасчетЗарплатыРасширенный.ФОТРассчитываетсяАвтоматически(ЭтотОбъект);
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(КатегорияСтатистическогоНаблюдения57Т) Тогда
		КатегорияСтатистическогоНаблюдения57Т = ПланыВидовРасчета.Начисления.КатегорияСтатистическогоНаблюдения57Т(КатегорияНачисленияИлиНеоплаченногоВремени);
	КонецЕсли;
	
	Если АвтоматическийРасчетФОТ <> Неопределено Тогда
		ФОТНеРедактируется = АвтоматическийРасчетФОТ;
	КонецЕсли;	
	
	Если СпособВыполненияНачисления <> Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета Тогда
		ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПустаяСсылка();
	КонецЕсли;

	ЗаполнитьВидыВремени();
	
	// Заполнение вторичных данных объекта выполняется всегда.
	ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ЭтотОбъект, Отказ);
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ЭтотОбъект);
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(ЭтотОбъект);
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(ЭтотОбъект);
	
	ЭтотОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(КодДоходаСтраховыеВзносы2017) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КодДоходаСтраховыеВзносы2017, "ВходитВБазуФСС")
		И СреднийЗаработокФСС.Найти(Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011, "ПорядокРасчета") = Неопределено Тогда
		СтрокаНастройки = СреднийЗаработокФСС.Добавить();
		СтрокаНастройки.ПорядокРасчета	= Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		СтрокаНастройки.Значение		= Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодДоходаСтраховыеВзносы2017) И Не ЗначениеЗаполнено(КодДоходаСтраховыеВзносы) Тогда
		КодДоходаСтраховыеВзносы = КодДоходаСтраховыеВзносы2017
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучетеРасширенный.УточнитьСтратегиюОтраженияВУчетеНачисления(ЭтотОбъект);
	ОтражениеЗарплатыВБухучетеРасширенный.УточнитьВидОперацииПоЗарплатеНачисления(ЭтотОбъект);
	ОтражениеЗарплатыВБухучетеРасширенный.УстановитьОчередностьОтраженияВУчете(ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПередЗаписьюНачисления(ЭтотОбъект);
	КонецЕсли;
	
	Если ПланыВидовРасчета.Начисления.КатегорииНачисленийВнутреннихСовместителейИПодработок().Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ДублироватьДляВнутреннихСовместителейИПодработок = Истина;
	Иначе
		ДублироватьДляВнутреннихСовместителейИПодработок = Ложь;
	КонецЕсли;
	
	Если Не ДублироватьДляВнутреннихСовместителейИПодработок
		И ПланыВидовРасчета.Начисления.КатегорииНачисленийПодработок().Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ДублироватьДляПодработок = Истина;
	Иначе
		ДублироватьДляПодработок = Ложь;
	КонецЕсли;
	
	Если Не РасчетЗарплатыРасширенный.РазрешенВводНесколькихПлановыхНачислений(КатегорияНачисленияИлиНеоплаченногоВремени, СпособВыполненияНачисления) Тогда 
		ПоддерживаетНесколькоПлановыхНачислений = Ложь;
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда 
		РазмерДоплатыЗаСовмещение = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение");
		НайденныеСтроки = ЭтотОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", РазмерДоплатыЗаСовмещение));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки Тогда 
		ПоказательСреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
		НайденныеСтроки = ЭтотОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСреднийЗаработокОбщий));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки Тогда 
		ПоказательСохраняемоеДенежноеСодержание = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
		НайденныеСтроки = ЭтотОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСохраняемоеДенежноеСодержание));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
	КонецЕсли;
		
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку
		И СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете Тогда
		ПоказательСреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
		НайденныеСтроки = ЭтотОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСреднийЗаработокОбщий));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
		ПоказательПроцентОплатыПоСреднему = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентОплатыПоСреднему");
		НайденныеСтроки = ЭтотОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательПроцентОплатыПоСреднему));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТребуетсяРасчетБазы 
		Или ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц
		Или ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал
		Или ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод Тогда 
		УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = Ложь;
	КонецЕсли;

	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты 
		И ЗначениеЗаполнено(ВидОтпуска)
		И ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС") Тогда
		
		ЗаполнитьПоказетелиНачисленияОтпускаПострадавшимВАварииЧАЭС();
	КонецЕсли;	
	
	ЕстьВытесняющиеНачисления = ВытесняющиеВидыРасчета.Количество() > 0;
	
	Если Не ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
		КатегорияДохода = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(КатегорияДохода) Тогда
		КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(КодДоходаНДФЛ);
	Иначе
		КодыИКатегорииНДФЛ = УчетФактическиПолученныхДоходов.СопоставлениеКодовИКатегорийДоходовНДФЛ(КодДоходаНДФЛ);
		СтруктураПоиска = Новый Структура("КодДохода", КодДоходаНДФЛ);
		Если КодДоходаНДФЛ = ПредопределенноеЗначение("Справочник.ВидыДоходовНДФЛ.Код4800") Тогда
			СтруктураПоиска.Вставить("КатегорияНачисления", КатегорияНачисленияИлиНеоплаченногоВремени);
		КонецЕсли;
		Если КодыИКатегорииНДФЛ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(КодДоходаНДФЛ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидРасчета", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачисленияБазовыеВидыРасчета.Ссылка КАК Начисление
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	               |ГДЕ
	               |	НачисленияБазовыеВидыРасчета.ВидРасчета = &ВидРасчета
	               |	И НачисленияБазовыеВидыРасчета.Ссылка <> &ВидРасчета
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	НачисленияВедущиеВидыРасчета.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК НачисленияВедущиеВидыРасчета
	               |ГДЕ
	               |	НачисленияВедущиеВидыРасчета.ВидРасчета = &ВидРасчета
	               |	И НачисленияВедущиеВидыРасчета.Ссылка <> &ВидРасчета
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	НачисленияВытесняющиеВидыРасчета.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	               |ГДЕ
	               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета
	               |	И НачисленияВытесняющиеВидыРасчета.Ссылка <> &ВидРасчета";
				   
	ПакетВидовРасчета = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
		
		НайденныеСтроки = НачислениеОбъект.БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Ссылка));
		Для Каждого СтрокаВидаРасчета Из НайденныеСтроки Цикл 
			НачислениеОбъект.БазовыеВидыРасчета.Удалить(СтрокаВидаРасчета);
		КонецЦикла;
		
		НайденныеСтроки = НачислениеОбъект.ВедущиеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Ссылка));
		Для Каждого СтрокаВидаРасчета Из НайденныеСтроки Цикл 
			НачислениеОбъект.ВедущиеВидыРасчета.Удалить(СтрокаВидаРасчета);
		КонецЦикла;
		
		НайденныеСтроки = НачислениеОбъект.ВытесняющиеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", Ссылка));
		Для Каждого СтрокаВидаРасчета Из НайденныеСтроки Цикл 
			НачислениеОбъект.ВытесняющиеВидыРасчета.Удалить(СтрокаВидаРасчета);
		КонецЦикла;
		
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗачетНормыВремениВытесняющих(Отказ)
	
	// Проверяем, что если у начисления взведен флажок «Зачет нормы времени», 
	// то и у всех вытесняющих должен быть такой флажок.
	Если Не ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетНормыВремениНачисления(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Вытесняющие = ОбщегоНазначения.ВыгрузитьКолонку(ВытесняющиеВидыРасчета, "ВидРасчета", Истина);
	
	// Выбираем такие вытесняющие, для которых не установлен зачет нормы времени, при этом игнорируем внутрисменные.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Вытесняющие)
	|	И НЕ Начисления.ЗачетНормыВремени
	|	И НЕ Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))");
	
	Запрос.УстановитьПараметр("Вытесняющие", Вытесняющие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныеВидыРасчета = "";
	Пока Выборка.Следующий() Цикл
		ПроблемныеВидыРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1«%2», '"), ПроблемныеВидыРасчета, Выборка.Ссылка);
	КонецЦикла;
	
	Если ПустаяСтрока(ПроблемныеВидыРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПроблемныеВидыРасчета, 2);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В списке начислений, приоритет которых выше, обнаружены начисления, не включаемые в зачет нормы времени (см. %1)'"), 
		ПроблемныеВидыРасчета);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВытесняющиеВидыРасчета", , Отказ);
	
КонецПроцедуры

// Проверяет наличие актуальных позиций штатного расписания, использующих данное начисление
//	и текущих плановых начислений сотрудников, в случае наличия таковых - устанавливает Отказ = Истина
//	и выводит предупреждения пользователю.
Процедура ПроверитьАктуальностьВидаРасчета(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ВЫБРАТЬ
			|	ШтатноеРасписание.Наименование КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписание.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ШтатноеРасписание.Начисления КАК ШтатноеРасписаниеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО ШтатноеРасписаниеНачисления.Ссылка = ШтатноеРасписание.Ссылка
			|ГДЕ
			|	ШтатноеРасписаниеНачисления.Начисление = &Ссылка
			|	И НЕ ШтатноеРасписание.ПометкаУдаления
			|	И ШтатноеРасписание.Утверждена
			|	И НЕ ШтатноеРасписание.Закрыта";
		
		РезультатыЗапросаПоШтатномуРасписанию = Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Используется,
		|	ПлановыеНачисленияСрезПоследних.ДействуетДо,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисленияСрезПоследних.Сотрудник) КАК СотрудникНаименование,
		|	ИСТИНА КАК АктуальнаяЗапись
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления.СрезПоследних(&Дата, Начисление = &Ссылка) КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Используется";
	
	РезультатыЗапросаПоПлановымНачислениям = Запрос.Выполнить();
	Выборка = РезультатыЗапросаПоПлановымНачислениям.Выбрать();
	Если Выборка.Следующий()
		И ЗначениеЗаполнено(Выборка.ДействуетДо)
		И Выборка.ДействуетДо < ТекущаяДатаСеанса() Тогда
		
		Запрос.УстановитьПараметр("ДействуетДо", Выборка.ДействуетДо);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисленияСрезПоследних.Используется,
			|	ПлановыеНачисленияСрезПоследних.ДействуетДо,
			|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ПлановыеНачисленияСрезПоследних.Сотрудник) КАК СотрудникНаименование,
			|	ИСТИНА КАК АктуальнаяЗапись
			|ИЗ
			|	РегистрСведений.ПлановыеНачисления.СрезПоследних(&ДействуетДо, Начисление = &Ссылка) КАК ПлановыеНачисленияСрезПоследних
			|ГДЕ
			|	ПлановыеНачисленияСрезПоследних.Используется";
		
		РезультатыЗапросаПоПлановымНачислениям = Запрос.Выполнить();
		
	КонецЕсли;
	
	ВыводитьСообщениеОбОшибке = Ложь;
	
	Если ФОИспользоватьШтатноеРасписание И НЕ РезультатыЗапросаПоШтатномуРасписанию.Пустой()
		Или НЕ РезультатыЗапросаПоПлановымНачислениям.Пустой() Тогда
		
		Отказ = Истина;
		ВыводитьСообщениеОбОшибке = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщениеОбОшибке Тогда
		
		ТекстСообщения = Нстр("ru = 'Нельзя сделать неиспользуемым начисление,
			| которое связано с актуальными плановыми начислениями сотрудников или используется в действующей позиции штатного расписания.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);
		
		Выборка = РезультатыЗапросаПоПлановымНачислениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = Нстр("ru = '- плановое начисление сотрудника ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.СотрудникНаименование);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ВАрхиве" , , Отказ);
			
		КонецЦикла;
		
		Если ФОИспользоватьШтатноеРасписание Тогда
			
			Выборка = РезультатыЗапросаПоШтатномуРасписанию.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = Нстр("ru = '- позиция штатного расписания ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.ПозицияШтатногоРасписания);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ВАрхиве" , , Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыВремени()
	
	Если ЗначениеЗаполнено(ОбозначениеВТабелеУчетаРабочегоВремени) 
		И ВидыВремени.Найти(ОбозначениеВТабелеУчетаРабочегоВремени, "ВидВремени") = Неопределено Тогда
		ВидыВремени.Добавить().ВидВремени = ОбозначениеВТабелеУчетаРабочегоВремени;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбозначениеВТабелеУчетаРабочегоВремени) И ВидыВремени.Количество() = 0 Тогда
		РабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
		Если РабочееВремя <> Неопределено Тогда
			ВидыВремени.Добавить().ВидВремени = РабочееВремя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказетелиНачисленияОтпускаПострадавшимВАварииЧАЭС()
	ПоказателиКалендарныеДни = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	
	СтруктураПоиска = Новый Структура("Показатель", ПоказателиКалендарныеДни);
	
	Если Показатели.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		СтрокаПоказателя = Показатели.Добавить();
		СтрокаПоказателя.Показатель = ПоказателиКалендарныеДни;
	КонецЕсли;	
КонецПроцедуры 	

#КонецОбласти

#КонецЕсли