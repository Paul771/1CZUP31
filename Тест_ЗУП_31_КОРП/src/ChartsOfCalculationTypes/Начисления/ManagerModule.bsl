#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Процедура заполняет план видов расчета т.н. псевдопредопределенными элементами, 
// идентифицируемыми из кода.
//
Процедура СоздатьНачисленияПоНастройкам(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь) Экспорт
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	
	// Соответствие, в которое будем накапливать объекты для последующей "пакетной" записи.
	КоллекторНачислений = Новый Соответствие;
	КоллекторУдержаний = Новый Соответствие;
	
	// Сначала обновляем показатели по настройкам...
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам(НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
	// ..а затем начисления
	// прежде обеспечиваем заполненность используемых классификаторов.
	УчетРабочегоВремени.СоздатьВидыИспользованияРабочегоВремениПоНастройкам(НастройкиРасчетаЗарплаты);
	
	// Обновление видов отпусков
	Справочники.ВидыОтпусков.ОписатьВидОтпускаОсновнойОтпуск();
	Справочники.ВидыОтпусков.ОписатьВидОтпускаДополнительныйОтпускНаСанаторноКурортноеЛечение();
	Справочники.ВидыОтпусков.СоздатьВидыОтпусковПоНастройкам(ПараметрыПланаВидовРасчета, НастройкиРасчетаЗарплаты);
	
	// и другие классификаторы
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Справочники.ВидыДоходовНДФЛ.НачальноеЗаполнение();
	КонецЕсли;
	
	СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	
	Если НачальноеЗаполнение Тогда
		// Оклад по дням
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ОКЛ'");
		Описание.Наименование			= НСтр("ru = 'Оплата по окладу'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Оклад'");
		Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
		Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
		Описание.УчетВремениВЧасах		= Ложь;
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
		Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
		Описание.КлючевыеСвойства = "СпособВыполненияНачисления,ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,УчетВремениВЧасах";
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оклад по дневному тарифу
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ТРФД'");
	Описание.Наименование			= НСтр("ru = 'Оплата по дневному тарифу'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Опл. по дням'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ФормулаРасчета			= "ТарифнаяСтавкаДневная * ВремяВДнях";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаДневная");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоДням;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьПодневнуюОплатуТруда Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоДням = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачисленияПремий(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	// Доплата за совмещение 
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СОВМ'");
	Описание.Наименование			= НСтр("ru = 'Доплата за совмещение должностей, исполнение обязанностей'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Совмещение'");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерДоплатыЗаСовмещение");
	Если НастройкиРасчетаЗарплаты.ИспользоватьСовмещениеПрофессийДолжностей Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата до среднего заработка (общего).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДПСРЗ'");
	Описание.Наименование			= НСтр("ru = 'Доплата до среднего заработка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Допл. до среднего'");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСреднегоЗаработка Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата до среднего заработка (ФСС).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДПФСС'");
	Описание.Наименование			= НСтр("ru = 'Доплата за дни болезни'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Допл. за дни болезни'");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Больничный
	Если НачальноеЗаполнение Тогда
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'БЛН'");
		Описание.Наименование			= НСтр("ru = 'Больничный'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Больничный'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Оплата больничных листов за счет работодателя.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'БЛРДТ'");
		Описание.Наименование			= НСтр("ru = 'Больничный за счет работодателя'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Больн. (работодат.)'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Отпуск по беременности и родам.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ОТБРР'");
		Описание.Наименование			= НСтр("ru = 'Отпуск по беременности и родам'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. по берем.'");
		Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
		Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Больничный при травме на производстве.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'БЛТП'");
		Описание.Наименование			= НСтр("ru = 'Больничный при травме на производстве'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Больн. при травме'");
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Больничный при профзаболевании.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'БЛПЗ'");
		Описание.Наименование			= НСтр("ru = 'Больничный при профзаболевании'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Больн. при профзаб.'");
		Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Отсутствие по болезни
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ОБ'");
		Описание.Наименование			= НСтр("ru = 'Отсутствие по болезни'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Неявка по болезни'");
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Отсутствие по болезни (по беременности и родам).
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ОББР'");
		Описание.Наименование			= НСтр("ru = 'Неоплачиваемые дни отпуска по беременности и родам'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. по берем. без опл.'");
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		// Выходное пособие
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Наименование			= НСтр("ru = 'Компенсация при увольнении (выходное пособие)'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Выходн. пособие'");
		Описание.Код 					= НСтр("ru = 'КПУ'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Командировка
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'КОМНД'");
	Описание.Наименование			= НСтр("ru = 'Командировка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Командировка'");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СреднийЗаработокОбщий");
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск без оплаты согласно ТК РФ.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОТПОЗ'");
	Описание.Наименование			= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск за свой счет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОТПДО'");
	Описание.Наименование			= НСтр("ru = 'Отпуск за свой счет'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. за свой счет'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный учебный отпуск (оплачиваемый).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'УЧЕБН'");
	Описание.Наименование			= НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Учебн. отп.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный учебный отпуск без оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОТПУД'");
	Описание.Наименование			= НСтр("ru = 'Дополнительный учебный отпуск без оплаты'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Учебн. отп. без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный отпуск пострадавшим в аварии на ЧАЭС.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДОЧАЭС'");
	Описание.Наименование			= НСтр("ru = 'Дополнительный отпуск пострадавшим в аварии на ЧАЭС'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Доп. отп. ЧАЭС'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Описание.ВидСтажаСЗВ 			= Перечисления.ВидыСтажаСЗВ.ЧАЭС;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";	
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отсутствие по невыясненной причине.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НЕВЫХ'");
	Описание.Наименование			= НСтр("ru = 'Отсутствие по невыясненной причине'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Неявка'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Прогул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРГУЛ'");
	Описание.Наименование			= НСтр("ru = 'Прогул'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Прогул'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отгул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОТГУЛ'");
	Описание.Наименование			= НСтр("ru = 'Отгул'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отгул'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые");
	Описание.КлючевыеСвойства		= "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачисленияПростоев(КоллекторНачислений, НастройкиРасчетаЗарплаты, СвойстваНачислений);
	
	// Материальная помощь
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МАТПМ'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Мат. пом.'");
	Описание.ФормулаРасчета = "";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства = "КодДоходаСтраховыеВзносы2017";
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь при рождении ребенка.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПМР'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь при рождении ребенка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Мат. пом. при рожд. реб.'");
	Описание.ФормулаРасчета = "";
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.МатпомощьПриРожденииРебенка;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.МатпомощьПриРожденииРебенка;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2762;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства = "КодДоходаСтраховыеВзносы2017";
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь, не облагаемая налогами.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПМН'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь, не облагаемая налогами'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Мат. пом. не обл. нал.'");
	Описание.ФормулаРасчета = "";
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка();
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КлючевыеСвойства = "КодДоходаСтраховыеВзносы2017";
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь к отпуску.
	КоличествоОкладовДляМатериальнойПомощи = СтрЗаменить(Строка(ПараметрыПланаВидовРасчета.КоличествоОкладовДляМатериальнойПомощи),",",".");
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'МТПОМ'");
	Описание.Наименование			= НСтр("ru = 'Материальная помощь к отпуску'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Мат. пом. к отп.'");
	Описание.ФормулаРасчета = "Оклад * " + КоличествоОкладовДляМатериальнойПомощи;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Единовременная выплата к отпуску.
	КоличествоОкладовДляВыплатыКОтпуску = СтрЗаменить(Строка(ПараметрыПланаВидовРасчета.КоличествоОкладовДляВыплатыКОтпуску),",",".");
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕВОТП'");
	Описание.ФормулаРасчета = "Оклад * " + КоличествоОкладовДляВыплатыКОтпуску;
	Описание.Наименование			= НСтр("ru = 'Единовременная выплата к отпуску'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Выпл. к отп.'");
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Если НастройкиРасчетаЗарплаты.ИспользоватьЕдиновременнуюВыплатуКОтпуску Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата «донорских» дней
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДОНОР'");
	Описание.Наименование			= НСтр("ru = 'Оплата за дни сдачи крови и ее компонентов'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Донорство'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.СДКРОВ;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКрови;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКрови Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКрови = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Единовременное начисление
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЕДВР'");
	Описание.Наименование			= НСтр("ru = 'Единовременное начисление'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Единовр. начисл.'");
	Описание.ФормулаРасчета 		= "";
	Описание.Рассчитывается 		= Ложь;
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("4800");
	Описание.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазовоеНачисление;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьРазовоеНачисление Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазовоеНачисление = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		// Безусловно создаем отпуск по уходу за ребенком до 1.5 лет.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'РЕБ15'");
		Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до полутора лет'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 1,5'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);

		// Безусловно создаем отпуск по уходу за ребенком до 3 лет.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'РЕБ3'");
		Описание.Наименование			= НСтр("ru = 'Пособие по уходу за ребенком до трех лет'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за реб. до 3'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		// Безусловно создаем уже учтенные дни.
		СоздатьНачислениеДниОплаченныеДоНачалаЭксплуатации(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	КонецЕсли;
		
	// Сдельный заработок (c минимальной оплатой по окладу).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СДЛОК'");
	Описание.Наименование			= НСтр("ru = 'Сдельный заработок (для работающих по окладу)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Сдельно'");
	Описание.ФормулаРасчета 		= "Макс(СдельныйЗаработок, Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней)";
	Описание.ЗапрашиваемыеПоказатели= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.УчетВремениВЧасах 		= Ложь;
	Описание.КлючевыеСвойства  		= "УчетВремениВЧасах";
	Если НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачислениеНадбавкаЗаКвалификационнуюКатегорию(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);
	
	// Безусловно создаем оплату дней ухода за детьми-инвалидами.
	СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидами(КоллекторНачислений, СвойстваНачислений);
	
	// Начисления, которые нужны только, если ведется учет времени в часах.
	СоздатьНачисленияДляУчетаВремениСотрудниковВЧасах(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
	СоздатьНачисленияЕжегодногоОтпуска(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	
	СоздатьНачисленияЕжегодногоОтпускаГосслужащих(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	
	СоздатьНачисленияДополнительныеОтпуска(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	СоздатьНачисленияОтпускаНаСанаторноКурортноеЛечениеЗаСчетФСС(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	
	СоздатьНачисленияНадбавки(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	СоздатьНачислениеНадбавкаЗаВредность(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);
	
	СоздатьНачисленияКомпенсационныеВыплаты(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	СоздатьНачисленияНатуральныеДоходы(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета, НастройкиРасчетаЗарплаты);
	
	СоздатьНачисленияРКиСН(КоллекторНачислений, СвойстваНачислений);
	
	СоздатьНачислениеДоплатаЗаПереработкиПоСуммированномуУчету(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);	
	
	СоздатьНачисленияНеявкаПоБолезни(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, НастройкиРасчетаЗарплаты);
	
	Если НачальноеЗаполнение Тогда
		СоздатьНачислениеКомпенсацияМоральногоВреда(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
		СоздатьНачислениеОплатаВынужденногоПростоя(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		СоздатьНачислениеКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
		СоздатьНачислениеКомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.СоздатьНачисленияДенежногоСодержания(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьНачисленияДенежногоДовольствия(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.СоздатьНачислениеДоплатаПоРезультатамОценкиЭффективности(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.СоздатьНачисленияОбразовательныхУчреждений(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.СоздатьНачисленияМедицинскихУчреждений(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриСозданииПланаВидовРасчетаПоНастройкам(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений);
	КонецЕсли;
	
	// Создаем удержания
	ПланыВидовРасчета.Удержания.СоздатьУдержанияПоНастройкам(НастройкиРасчетаЗарплаты, КоллекторУдержаний, ПараметрыПланаВидовРасчета);
	
	ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	
	// Создаем виды документов ввода данных для расчета зарплаты.
	Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.СоздатьВидыДокументовПоНастройкам(НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
КонецПроцедуры

// Создает или отключает в зависимости от настроек начисления простоев
// 
Процедура СоздатьНачисленияПростоев(КоллекторНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено, СвойстваНачислений = Неопределено)
	
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли; 
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли; 
	
	Если  СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли; 
	
	// Простой по вине работника
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРОВР'");
	Описание.Наименование			= НСтр("ru = 'Простой по вине работника'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по независящим от работодателя причинам.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРОКД'");
	Описание.Наименование			= НСтр("ru = 'Оплата простоя по независящим от работодателя причинам'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой незав. прич.'");
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работодателя.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРСРД'");
	Описание.Наименование			= НСтр("ru = 'Оплата простоя по среднему заработку'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой по средн.'");
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
КонецПроцедуры

// Создает или отключает в зависимости от настроек начисления.
// «Районный коэффициент» и «Северная надбавка».
// 
Процедура СоздатьНачисленияРКиСН(КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	ВостребованностьРКиСН = РасчетЗарплаты.ВостребованностьРКиСН();	
	
	// Сначала нужно убедиться, что созданы соответствующие показатели расчета.
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиРКиСН(ВостребованностьРКиСН);
	
	// Также обновим используемость Северного вида отпуска.
	Справочники.ВидыОтпусков.ОписатьВидОтпускаСеверныйОтпуск(ВостребованностьРКиСН.СевернаяНадбавка);
	
	// Районный коэффициент
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'РК'");
	Описание.Наименование			= НСтр("ru = 'Районный коэффициент'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Районн. коэфф.'");
	Если ВостребованностьРКиСН.РайонныйКоэффициент Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Северная надбавка 
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СН'");
	Описание.Наименование			= НСтр("ru = 'Северная надбавка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Северн. надб.'");
	Если ВостребованностьРКиСН.СевернаяНадбавка Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		Справочники.ВидыСтажа.СоздатьСтажРаботыНаСевере();
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Если не создан северный вид отпуска , то и начисления для этого отпуска не обрабатываем.
	ВидОтпускаСеверный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	Если ВидОтпускаСеверный <> Неопределено Тогда
		// ...и северный отпуск
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Наименование			= НСтр("ru = 'Отпуск лицам, работающим в районах Крайнего Севера'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. северн.'");
		Описание.ВидОтпуска 			= ВидОтпускаСеверный;
		Описание.КлючевыеСвойства		= "ВидОтпуска";
		КоллекторУдержаний = Новый Соответствие;
		Если ВостребованностьРКиСН.СевернаяНадбавка Тогда	
			СоздатьНачисленияОтпускаИКомпенсации(Описание.ВидОтпуска, Описание.Наименование, Истина, Истина, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
				Если НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
					СоздатьНачисленияОтпускаИКомпенсации(Описание.ВидОтпуска, Описание.Наименование, Истина, Истина, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// надо отключить отпуск
			ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
			
			// ...и компенсацию
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		
	КонецЕсли;

КонецПроцедуры

// Процедура создает в плане видов расчета элементы для отпуска и компенсации, 
// используемые в документе "Отпуск" и "Увольнение".
//
Процедура СоздатьНачисленияОтпускаИКомпенсации(ВидОтпуска, НаименованиеОтпуска, СоздаватьНачислениеОтпуска = Истина, СоздаватьНачислениеКомпенсацииОтпуска = Ложь, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, КраткоеНаименование = "") Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	
	Если СоздаватьНачислениеОтпуска Тогда
		СоздатьНачислениеОтпуска(ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ДенежноеСодержание, КраткоеНаименование, ДополнениеКода);		
	КонецЕсли;
	
	Если СоздаватьНачислениеКомпенсацииОтпуска Тогда
		СоздатьНачислениеКомпенсацииОтпуска(ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ДенежноеСодержание, ДополнениеКода);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеОтпуска(ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, КраткоеНаименование = "" , ДополнениеКода = Неопределено) Экспорт
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если ДополнениеКода = Неопределено Тогда
		ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	КонецЕсли;
	
	ЭтоОтпускБезОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ОтпускБезОплаты");
	
	// Отпуск
	Описание = ОписаниеНачисления();
	Если ЭтоОтпускБезОплаты Тогда
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Иначе
		Если ДенежноеСодержание Тогда
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
		Иначе
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
		КонецЕсли;
		ВидИспользованияВремени = ?(ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), "ОсновнойОтпуск", "ДополнительныйОтпуск");
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + ВидИспользованияВремени);
	КонецЕсли;
	Описание.СвойстваПоКатегории = СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование = НаименованиеОтпуска;
	Описание.КраткоеНаименование = КраткоеНаименование;
	Описание.Код = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ОТ%1'"), ДополнениеКода);
	Описание.ВидОтпуска = ВидОтпуска;
	Описание.КлючевыеСвойства = "ВидОтпуска,КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеКомпенсацииОтпуска(ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, ДополнениеКода = Неопределено) Экспорт
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если ДополнениеКода = Неопределено Тогда
		ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	КонецЕсли;
	
	ДополнениеКодаКомпенсацииУдержания = ДополнениеКодаНачисленияКомпенсацииОтпускаПоВидуОтпуска(ДополнениеКода, ВидОтпуска);
	
	// Компенсация отпуска
	Описание = ОписаниеНачисления();
	Если ДенежноеСодержание Тогда
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска;
	Иначе
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
	КонецЕсли;
	Описание.СвойстваПоКатегории = СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Компенсация отпуска (%1)'"), НаименованиеОтпуска); 
	Описание.Код = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'КОТ%1'"), ДополнениеКодаКомпенсацииУдержания);
	Описание.ВидОтпуска = ВидОтпуска;
	Описание.КлючевыеСвойства = "ВидОтпуска,КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	// И удержание за неотработанные дни отпуска.
	ПланыВидовРасчета.Удержания.СоздатьУдержаниеЗаНеотработанныеДниОтпуска(ВидОтпуска, НаименованиеОтпуска, ДополнениеКодаКомпенсацииУдержания, КоллекторУдержаний, ДенежноеСодержание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;

КонецПроцедуры

Функция ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска) Экспорт
	
	ДополнениеКода = "";
	
	Если ВидОтпуска <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
		Если ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный") Тогда
			ДополнениеКода = "СВР";
		Иначе
			ДополнениеКода = Формат(Справочники.ВидыОтпусков.КоличествоВидовОтпуска(), "ЧЦ=3; ЧВН=");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнениеКода;
	
КонецФункции 

Функция ДополнениеКодаНачисленияКомпенсацииОтпускаПоВидуОтпуска(ДополнениеКода, ВидОтпуска) Экспорт
	
	ДополнениеКодаКомпенсацииУдержания = "";
	
	Если ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный") Тогда
		ДополнениеКодаКомпенсацииУдержания = "СВР";
	Иначе
		ДополнениеКодаКомпенсацииУдержания = Прав(ДополнениеКода, 2);
	КонецЕсли;
	
	Возврат ДополнениеКодаКомпенсацииУдержания;
	
КонецФункции 

Процедура СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидами(КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ИНВ'");
	Описание.Наименование			= НСтр("ru = 'Оплата дней ухода за детьми-инвалидами'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Уход за детьми-инв.'");
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
КонецПроцедуры

// Создает и заполняет соответствие, ключом которого является категория начисления, 
// а значением — структура значений, определяющая заполнение свойств начисления данной категории.
//
// Параметры:
//	- КатегорияНачисления - ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени.
//
// Возвращаемое значение - соответствие.
//
Функция СвойстваНачисленийПоКатегориям() Экспорт
	
	СвойстваПоКатегориям = Новый Соответствие;
	
	// Значение по умолчанию
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка(), СвойстваНачисленияПоКатегорииПоУмолчанию());
	
	// Для некоторых категорий доступен выбор кода 4800 или 2760.
	ДоступныеКоды = Новый Массив;
	ДоступныеКоды.Добавить("2000");
	ДоступныеКоды.Добавить("2003");
	ДоступныеКоды.Добавить("4800");
	ПараметрыВыбораНДФЛ = Новый Структура("Отбор_Код", ДоступныеКоды);
	
	// Повременная оплата труда
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ИндексируетсяСреднийЗаработокОбщий");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.РазовоеНачисление);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Отпуск);
	Описание.ПараметрыВыбора.ВидДокументаНачисления = Новый Структура("Отбор_Ссылка", ВидыДокументов);
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда, Описание);
	
	// Сдельная оплата
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СдельныйЗаработок";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда, Описание);
	
	// Оплата труда в натуральной форме.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ЯвляетсяДоходомВНатуральнойФорме = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2530;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидДокументаНачисления");
	ПараметрыВыбораВидаДокумента = Новый Структура("КатегорияНачисления", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Описание.ВидДокументаНачисления = ПараметрыВыбораВидаДокумента;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2530");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2791");
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.ДоходВНатуральнойФорме);
	Описание.ПараметрыВыбора.ВидДокументаНачисления = Новый Структура("Отбор_Ссылка", ВидыДокументов);
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме, Описание);
	
	// Доход в натуральной форме
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ДоходВНатуральнойФорме;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ЯвляетсяДоходомВНатуральнойФорме = Истина;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2510;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.ВидНачисленияДляНУ	= Неопределено;
	Описание.Рассчитывается = Ложь;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2003");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2010");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2201");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2202");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2203");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2204");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2205");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2206");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2207");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2208");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2209");	
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2510");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2520");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("4800");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	ДоступныеВидыНачисленияДляНУ = Новый Массив;
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка());
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255);
	Описание.ПараметрыВыбора.ВидНачисленияДляНУ = Новый Структура("Отбор_Ссылка", ДоступныеВидыНачисленияДляНУ);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме, Описание);
	
	// Компенсационные выплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код4800;
	Описание.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.ВидНачисленияДляНУ	= Неопределено;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("1400");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2000");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2003");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2014");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("4800");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты, Описание);
	
	// Премия
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.СреднийЗаработокОбщий = Новый Структура("ТолькоПремия", Истина);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	
	Описание.ОтборБазовых = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаПремии());
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия, Описание);
	
	// Квартальная премия
	Описание = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Описание);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия, Описание);
	
	// Районный коэффициент
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "(Макс(РайонныйКоэффициент, 1) - 1) * РасчетнаяБаза";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	
	Описание.ОтборБазовых = ОтборБазаРКиСН();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент, Описание);
	
	// Северная надбавка
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СевернаяНадбавка / 100 * РасчетнаяБаза";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	
	Описание.ОтборБазовых = ОтборБазаРКиСН();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка, Описание);
	
	// Надбавка за вредность
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "ПроцентНадбавкиЗаВредность / 100 * РасчетнаяБаза";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	
	Описание.ОтборБазовых = ОтборБазаРКиСН();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность, Описание);
	
	// Оплата отпуска
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейОтпуска * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2012");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Справочники.ВидыОтпусков.ПараметрыВыбораВидаОтпуска();
	Описание.ПараметрыВыбора.ВидОтпуска.Удалить("Отбор_ОтпускЯвляетсяЕжегодным");
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
	ДоступныеВидНачисленияДляНУ = Новый Массив;
	ДоступныеВидНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255);
	ДоступныеВидНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп24ст255);
	Описание.ПараметрыВыбора.ВидНачисленияДляНУ = Новый Структура("Отбор_Ссылка", ДоступныеВидНачисленияДляНУ);
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДЛОТПУСК;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска, Описание);
	
	// Оплата отпуска, сохраняемое денежное содержание.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "ОКР(СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2) * КоличествоДнейОтпуска * КоэффициентИндексацииСохраняемогоДенежногоСодержания";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2012");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Справочники.ВидыОтпусков.ПараметрыВыбораВидаОтпуска();
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДЛОТПУСК;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска, Описание);
		
	// Компенсация отпуска
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейКомпенсации";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2013;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2013");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("4800");
	Описание.ПараметрыВыбора.ВидОтпуска = Справочники.ВидыОтпусков.ПараметрыВыбораВидаОтпуска();
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска, Описание);
	
	// Компенсация отпуска, сохраняемое денежное содержание.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "ОКР(СохраняемоеДенежноеСодержание / СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих, 2) * КоличествоДнейКомпенсации";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2013;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ПараметрыВыбора.ВидОтпуска = Справочники.ВидыОтпусков.ПараметрыВыбораВидаОтпуска();
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска, Описание);
	
	// Материальная помощь
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.МатериальнаяПомощь;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2760;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.ВидНачисленияДляНУ	= Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера;
	Описание.Рассчитывается = Ложь;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2710");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2760");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2761");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2762");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.МатпомощьПриРожденииРебенка);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	ДоступныеВидыНачисленияДляНУ = Новый Массив;
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка());
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255);
	Описание.ПараметрыВыбора.ВидНачисленияДляНУ = Новый Структура("Отбор_Ссылка", ДоступныеВидыНачисленияДляНУ);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь, Описание);
	
	// Материальная помощь к отпуску.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2760;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске, Описание);
	
	// Материальная помощь к отпуску, госслужащие.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2760;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего, Описание);
	
	// Единовременная выплата к отпуску.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС   = Ложь;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.ВидНачисленияДляНУ	= Неопределено;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("4800");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2000");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	ДоступныеВидыНачисленияДляНУ = Новый Массив;
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка());
	ДоступныеВидыНачисленияДляНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255);
	Описание.ПараметрыВыбора.ВидНачисленияДляНУ = Новый Структура("Отбор_Ссылка", ДоступныеВидыНачисленияДляНУ);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску, Описание);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего, Описание);
	
	// Отпуск без оплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ОтпускБезСохраненияЗарплаты;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ОтпускБезСохраненияЗарплаты;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Справочники.ВидыОтпусков.ПараметрыВыбораВидаОтпуска();
	Описание.ПараметрыВыбора.ВидОтпуска.Отбор_ОтпускБезОплаты = Истина;
	Описание.ПараметрыВыбора.ВидОтпуска.Отбор_ОтпускЯвляетсяЕжегодным = Ложь;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты, Описание);
	
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отгул;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Неопределено;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул, Описание);
	
	// Неявка
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	// Среди вытесняющих категорий неявки есть еще и прогул.
	КатегорииВытесняющих = КатегорииВременнойНетрудоспособности();
	КатегорииВытесняющих.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесняющих;
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам, Описание);
	
	// Неявка по болезни
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	// Среди вытесняющих категорий неявки по болезни есть еще и прогул.
	КатегорииВытесняющих = КатегорииВременнойНетрудоспособности();
	КатегорииВытесняющих.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесняющих;
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни, Описание);
	
	// Прогул
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул, Описание);
	
	// Простой по вине работника
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НеВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НеВключаетсяВСтраховойСтаж;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника, Описание);
		
	// Простой по вине работодателя.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета	= "СреднийЗаработокОбщий * (2/3) * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботодателя");
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ПРОСТОЙ;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя, Описание);
	
	// Простой по независящим от работодателя причинам.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаПростоя;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтраховойСтаж;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам, Описание);
	
	// Командировка
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Командировка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Истина;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.НедоступныеСвойства.Добавить("ПоддерживаетНесколькоПлановыхНачислений");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияКомандировки();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки, Описание);
	
	// Командировка, сохраняемое денежное содержание.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Командировка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеСодержание * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней * КоэффициентИндексацииСохраняемогоДенежногоСодержания";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтраховойСтаж;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияКомандировки();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки, Описание);
	
	// Оплата по среднему заработку.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * (ПроцентОплатыПоСреднему / 100) * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку, Описание);
	
	// Сохраняемое денежное содержание.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеСодержание * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней * (ПроцентОплатыСохраняемогоДенежногоСодержания / 100) * КоэффициентИндексацииСохраняемогоДенежногоСодержания";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание, Описание);
	
	// Доплата до среднего заработка.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка, Описание);
	
	// Доплата за совмещение 
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета	= "РазмерДоплатыЗаСовмещение * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Истина;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ПоддерживаетНесколькоПлановыхНачислений");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение, Описание);
		
	// Оплата больничного (за счет ФСС).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2300");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста, Описание);
		
	// Оплата больничного за счет работодателя.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Неопределено;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2300");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.ВидНачисленияДляНУ	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп48ст266;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя, Описание);
	
	// Отпуск по беременности и родам.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.БеременностьРоды;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.Декрет;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.Декрет;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам, Описание);
	
	// Отпуск по беременности и родам военнослужащего.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОтпускПоБеременностиИРодамВоеннослужащего;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеДовольствие * КалендарныеДни / КалендарныеДниМесяца";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Описание.ВидПособияСоциальногоСтрахования = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.Декрет;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.Декрет;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего, Описание);
	
	// Сверхурочные военнослужащим
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаСверхурочныхВоеннослужащим;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеДовольствие / СреднемесячноеКоличествоДнейВС * КоличествоДнейКомпенсацииВС";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные");
	Описание.ВидПособияСоциальногоСтрахования = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;	
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаСверхурочныхВоеннослужащим, Описание);	
	
	// Оплата больничного (профзаболевание).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2300");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание, Описание);
	
	// Оплата больничного (несчастный случай).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2300");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве, Описание);
	
	// Дополнительный отпуск (сверх ежегодного) на санаторно-курортное лечение.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускНаСанаторноКурортноеЛечение");
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейОтпуска * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныйОтпускПослеНесчастныхСлучаев;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2012");
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");	
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2012");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");	
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДЛОТПУСК;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	ИндексНедоступногоСвойства = Описание.НедоступныеСвойства.Найти("КатегорияСтатистическогоНаблюдения");
	Если ИндексНедоступногоСвойства <> Неопределено Тогда
		Описание.НедоступныеСвойства.Удалить(ИндексНедоступногоСвойства);
	КонецЕсли;
		
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпускаНаСанаторноКурортноеЛечение();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение, Описание);
	
	// Доплата за дни болезни (Доплата до среднего ФСС).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("4800");
	Описание.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2002");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни, Описание);
	
	// Болезнь без оплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВременнаяНетрудоспособность;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВременнаяНетрудоспособность;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты, Описание);
	
	// Отпуск по беременности и родам без оплаты.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.НЕОПЛ;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.НЕОПЛ;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты, Описание);
	
	// Пособие до полутора лет
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ПоУходуЗаРебенком;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.Дети;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.Дети;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет, Описание);	
	
	// Пособие до полутора лет военнослужащим
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛетНезастрахованным;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидПособияСоциальногоСтрахования = Неопределено;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.Дети;
	Описание.ВидСтажаПФР2014 = Неопределено;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим, Описание);
	
	// Пособие до трех лет
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "РазмерПособияПоУходуЗаРебенкомДоТрехЛет * РайонныйКоэффициентРФ";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ДЛДЕТИ;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДЛДЕТИ;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	ДоступныеВидыНачисленияНУ = Новый Массив;
	ДоступныеВидыНачисленияНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255);
	ДоступныеВидыНачисленияНУ.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255);
	Описание.ПараметрыВыбора.ВидНачисленияДляНУ = Новый Структура("Отбор_Ссылка", ДоступныеВидыНачисленияНУ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2760");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет, Описание);
	
	// Выходное пособие
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ДнейЧасовВыходногоПособия";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2014");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие, Описание);
	
	// Выходное пособие, месячное денежное содержание.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "МесячноеДенежноеСодержание * МесяцевВыплатыКомпенсации";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2014");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание, Описание);
	
	// Оплата дней ухода за детьми-инвалидами.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВключатьВСреднийЗаработокФСС2010 = Ложь;
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДОПВЫХ;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами, Описание);
	
	// Оплата дней ухода за детьми-инвалидами (Денежное содержание).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СохраняемоеДенежноеСодержание * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней * КоэффициентИндексацииСохраняемогоДенежногоСодержания";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВключатьВСреднийЗаработокФСС2010 = Ложь;
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ВидСтажаСЗВ = Перечисления.ВидыСтажаСЗВ.ВключаетсяВСтраховойСтаж;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ДОПВЫХ;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаСЗВ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидСтажаПФР2014");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.КомпенсацииОблагаемыеВзносами);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами, Описание);
	
	// Прочие начисления и выплаты.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВключатьВСреднийЗаработокФСС2010 = Истина;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.НедоступныеСвойства.Очистить();
	Описание.НедоступныеСвойства.Добавить("ВидОтпуска");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Очистить();
	СписокКодовДохода09 = Справочники.ВидыДоходовНДФЛ.ДоходыПоСтавке09(Год(ТекущаяДатаСеанса()));
	СписокКодовДохода30 = Справочники.ВидыДоходовНДФЛ.ДоходыПоСтавке30(Год(ТекущаяДатаСеанса()));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокКодовДохода09, СписокКодовДохода30, Истина);
	КодыДоходов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокКодовДохода09, "Код");
	Для Каждого КлючИЗначение Из КодыДоходов Цикл
		Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить(КлючИЗначение.Значение);
	КонецЦикла;	
	ДоступныеВидыДоходов = Новый Массив;
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликомНеОблагаемыеФСС_НС);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом);
	ДоступныеВидыДоходов.Добавить(Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом);
	Описание.ПараметрыВыбора.КодДоходаСтраховыеВзносы = Новый Структура("Отбор_Ссылка", ДоступныеВидыДоходов);
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.РазовоеНачисление);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Премия);
	Описание.ПараметрыВыбора.ВидДокументаНачисления = Новый Структура("Отбор_Ссылка", ВидыДокументов);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее, Описание);
	
	// Льгота
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	ПараметрыВыбораВидаДокумента = Новый Структура("КатегорияНачисления", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2530");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2791");
	Описание.ПараметрыВыбора.ВидДокументаНачисления = ПараметрыВыбораВидаДокумента;
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота, Описание);
	
	// Выбираемая сотрудником льгота
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.ВидСтажаПФР2014 = Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтажДляДосрочногоНазначенияПенсии;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаСтраховыеВзносы2017");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидНачисленияДляНУ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	ПараметрыВыбораВидаДокумента = Новый Структура("КатегорияНачисления", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыВыбораНДФЛ);
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2530");
	Описание.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Добавить("2791");
	Описание.ПараметрыВыбора.ВидДокументаНачисления = ПараметрыВыбораВидаДокумента;
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота, Описание);
	
	// Доплата до денежного содержания за дни болезни
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни, Описание);
	
	// Оплата предыдущими документами
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПустаяСсылка();
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Неопределено;
	Описание.КодДоходаСтраховыеВзносы2017 = Неопределено;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("Зависимости");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами, Описание);
	
	// Компенсация морального вреда.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.Рассчитывается = Ложь;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияМоральногоВреда, Описание);
	
	// Компенсация за не отработанные дни при увольнении.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ДнейЧасовКомпенсацииЗаНеотработанноеВремяПриУвольнении";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КатегорияСтатистическогоНаблюдения");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении, Описание);
	
	// Компенсация за не отработанные дни при увольнении государственного служащего.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "МесячноеДенежноеСодержание / 29.3 * ДнейКомпенсацииЗаНеотработанноеВремяПриУвольнении";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КатегорияДохода = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего, Описание);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриОписанииСвойствНачисленийПоКатегориям(СвойстваПоКатегориям);
	КонецЕсли;

	Возврат СвойстваПоКатегориям;
		
КонецФункции

// Для оптимизации обработки свойств категорий, некоторые категории групируются по свойствам.
//
Функция КатегорииПоСвойствамНачислений(СвойстваПоКатегориям = Неопределено) Экспорт
	
	Если СвойстваПоКатегориям = Неопределено Тогда
		СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	КатегорииПоСвойствам = Новый Структура(
		"ОтработанноеВремя,
		|НеоплачиваемоеВремя,
		|КодДоходаСтраховыеВзносыНеЗаполняется,
		|КодДоходаНДФЛНеЗаполняется,
		|ВидНачисленияДляНУНеЗаполняется");
	
	МассивОтработанноеВремя = Новый Массив;
	МассивНеоплачиваемоеВремя = Новый Массив;
	МассивКодДоходаНДФЛНеЗаполняется = Новый Массив;
	МассивКодДоходаСтраховыеВзносыНеЗаполняется = Новый Массив;
	МассивВидНачисленияДляНУНеЗаполняется = Новый Массив;
	
	ВидыОтработанногоВремени = Перечисления.ВидыРабочегоВремениСотрудников.ВидыОтработанногоВремени();	
	
	Для Каждого КлючИЗначение Из СвойстваПоКатегориям Цикл
		Категория = КлючИЗначение.Ключ;
		СвойстваНачислений = КлючИЗначение.Значение;
		Если ВидыОтработанногоВремени.Найти(СвойстваНачислений.ВидВремени) <> Неопределено Тогда
			МассивОтработанноеВремя.Добавить(Категория);
		КонецЕсли;
		Если СвойстваНачислений.ФормулаРасчета = "0" Тогда
			МассивНеоплачиваемоеВремя.Добавить(Категория);
		КонецЕсли;
		// НДФЛ можно не заполнять, если:
		// - он изначально определен как пустой.
		Если СвойстваНачислений.КодДоходаНДФЛ = Неопределено Тогда
			МассивКодДоходаНДФЛНеЗаполняется.Добавить(Категория);
		Иначе
			// - Или он определен как заполненный, но выбор доступен.
			Если СвойстваНачислений.НедоступныеСвойства.Найти("КодДоходаНДФЛ") = Неопределено Тогда
				МассивКодДоходаНДФЛНеЗаполняется.Добавить(Категория);
				// При этом, если определен список выбора, то в нем должен быть пустой код.
				Если СвойстваНачислений.ПараметрыВыбора <> Неопределено 
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ <> Неопределено
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ.Свойство("Отбор_Код")
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Найти("") = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивКодДоходаНДФЛНеЗаполняется, Категория);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Код дохода страховые взносы не заполняется только в случае, если в свойствах он явно пустой.
		Если СвойстваНачислений.КодДоходаСтраховыеВзносы2017 = Неопределено Тогда
			МассивКодДоходаСтраховыеВзносыНеЗаполняется.Добавить(Категория);
		КонецЕсли;
		// Аналогично и для ВидНачисленияДляНУ.
		Если СвойстваНачислений.ВидНачисленияДляНУ = Неопределено Тогда
			МассивВидНачисленияДляНУНеЗаполняется.Добавить(Категория);
		КонецЕсли;
	КонецЦикла;
	
	КатегорииПоСвойствам.ОтработанноеВремя = МассивОтработанноеВремя;
	КатегорииПоСвойствам.НеоплачиваемоеВремя = МассивНеоплачиваемоеВремя;
	КатегорииПоСвойствам.КодДоходаНДФЛНеЗаполняется = МассивКодДоходаНДФЛНеЗаполняется;
	КатегорииПоСвойствам.КодДоходаСтраховыеВзносыНеЗаполняется = МассивКодДоходаСтраховыеВзносыНеЗаполняется;
	КатегорииПоСвойствам.ВидНачисленияДляНУНеЗаполняется = МассивВидНачисленияДляНУНеЗаполняется;
	
	Возврат КатегорииПоСвойствам;
	
КонецФункции

// Заполняет табличные части базовых и вытесняющих видов расчета для начислений, 
// содержащихся в коллекторе в соответствии со свойствами начислений.
//
Процедура НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений, ОбновлятьЗависимостиПоБазе = Истина) Экспорт 
	
	// Обходим коллектор начислений,
	// в соответствии с категорией определяем, 
	// - чем начисление вытесняется (критерии), 
	// - из чего состоит база.
	
	// По указанным критериям делаем запрос к базе и поиск по коллектору же еще не записанных начислений, 
	// из найденных в базе начислений отбрасываем добавленные в коллектор, 
	// т.к. считаем их версию в коллекторе более актуальной.
	
	КатегорииКоллектора = Новый Соответствие;
	
	// Частное условие: начисление сверх нормы времени не должны вытесняться командировкой и всем тем, что сама
	// командировка вытесняет (например, отпусками).
	КатегорииНеВытесняющиеОплатуСверхНормы = Новый Массив;
	КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		// Если начисления этой категории вытесняются командировкой, 
		// добавим категорию в список невытесняющих для начислений сверх нормы.
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваНачисления = КлючИЗначение.Значение;
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			Если ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки) <> Неопределено
				Или ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки) <> Неопределено Тогда
				КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(КатегорияНачисления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		
		ЭтоНовоеНачисление = Не ЗначениеЗаполнено(НачислениеОбъект.Ссылка);
		КатегорияНачисления = НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
		
		СвойстваНачисления = СвойстваНачислений[НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени];
		
		КатегорииКоллектора.Вставить(НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени, Истина);
		
		// Вытесняющие начисления (заполняем, только если начисление выполняется не в целом за месяц).
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено И Не НачислениеОбъект.НачисляетсяВЦеломЗаМесяц Тогда
			ОтборВытесняющих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВытесняющих);
			Категория = ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборВытесняющих.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			
			// Из-за того, что оплачиваемые сверх нормы не выделены в отдельную категорию, уточняем настройку вытеснения.
			Если НачислениеОбъект.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
				// Отработанные сверхнормы не вытесняются командировкой.
				Категория = ОбщегоНазначенияКлиентСервер.СократитьМассив(Категория, КатегорииНеВытесняющиеОплатуСверхНормы);
			КонецЕсли;
			
			// Начисления по условию из коллектора.
			ВытесняющиеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборВытесняющих);
			// ..Дополняются по условию из базы данных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВытесняющиеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборВытесняющих), Истина);
			// Заполняем табличную часть полученными вытесняющими начислениями.
			Для Каждого ВытесняющееНачисление Из ВытесняющиеНачисления Цикл
				Если НачислениеОбъект.ВытесняющиеВидыРасчета.Найти(ВытесняющееНачисление, "ВидРасчета") = Неопределено 
					И НачислениеСсылка <> ВытесняющееНачисление Тогда
					НачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ВытесняющееНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Базовые начисления
		Если ОбновлятьЗависимостиПоБазе Тогда
			ОтборБазовых = Неопределено;
			Если НачислениеОбъект.ДополнительныеСвойства.Свойство("ОтборБазовых") Тогда
				ОтборБазовых = НачислениеОбъект.ДополнительныеСвойства.ОтборБазовых;
			КонецЕсли;
			Если ОтборБазовых <> Неопределено И РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза") Тогда
				ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
				Категория = ОтборБазовых.КатегорияНачисленияИлиНеоплаченногоВремени;
				ОтборБазовых.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
				// Начисления по условию из коллектора.
				БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
				Если ОтборБазовых.Свойство("ОтборПоДополнительнымСвойствамНачисления") Тогда
					ОтборБазовых.Удалить("ОтборПоДополнительнымСвойствамНачисления");
				КонецЕсли;
				// ..Дополняются по условию из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					БазовыеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборБазовых), Истина);
				// Заполняем табличную часть полученными базовыми начислениями.
				Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
					Если НачислениеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено 
						И НачислениеСсылка <> БазовоеНачисление Тогда
						// Проверяем нет ли в списке базовых начисления БазовоеНачисление ссылки на НачислениеОбъект,
						// если есть, то не добавляем.
						БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
						Если БазовоеНачислениеОбъект = Неопределено Тогда
							БазовоеНачислениеОбъект = БазовоеНачисление.ПолучитьОбъект();
							КоллекторНачислений.Вставить(БазовоеНачисление, БазовоеНачислениеОбъект);
						КонецЕсли;
						ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
						Если Не ЭтоНовоеНачисление И Не ЭтоНовоеБазовоеНачисление Тогда 
							Продолжить;
						КонецЕсли;
						// Меняем базу существующего начисления, только если это РК или СН
						Если Не ЭтоНовоеНачисление
							И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
							И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
							Продолжить;
						КонецЕсли;
						Если БазовоеНачислениеОбъект.БазовыеВидыРасчета.Найти(НачислениеСсылка, "ВидРасчета") = Неопределено Тогда
							НачислениеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Ведущие начисления
		ОтборВедущих = СвойстваНачисления.ОтборВедущих;
		Если ОтборВедущих <> Неопределено Тогда
			// Ведущие начисления заполняем принудительно только для почасовых начислений оплаты труда.
			Если РасчетЗарплатыРасширенный.НачислениеРассчитываетсяПоЧасам(НачислениеОбъект) 
				И ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(НачислениеОбъект.ВидВремени) Тогда
				// Начисления по условию из коллектора.
				ВедущиеНачисления = ВидыРасчетаКоллектораПоОтбору(КоллекторНачислений, ОтборВедущих);
				// ..Дополняются по условию из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ВедущиеНачисления, НачисленияПоОтбору(ОтборВедущих), Истина);
				// Заполняем табличную часть полученными вытесняющими начислениями.
				Для Каждого ВедущееНачисление Из ВедущиеНачисления Цикл
					Если НачислениеОбъект.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено 
						И НачислениеСсылка <> ВедущееНачисление Тогда
						НачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Анализируем свойства начислений по категориям, 
	// если в коллекторе есть начисления, удовлетворяющие условиям на вытесняющие или базовые для каких-то категорий, 
	// то нужно обновить начисления этих категорий.
	
	ОтборТолькоПочасоваяОплата = Новый Структура;
	ОтборТолькоПочасоваяОплата.Вставить("ВидВремени", ЗарплатаКадрыРасширенныйКлиентСервер.ВидыОтработанногоВремени());
	ОтборТолькоПочасоваяОплата.Вставить("УчетВремениВЧасах", Истина);
	
	ОтборТолькоСПериодомДействия = Новый Структура("НачисляетсяВЦеломЗаМесяц", Ложь);
	
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваНачисления = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(КатегорияНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вытесняющие начисления
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			ОтборВытесняющих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВытесняющих);
			Категория = ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборВытесняющих.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			// Начисления по условию из коллектора.
			ВытесняющиеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборВытесняющих);
			Если ВытесняющиеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, вытесняющие начисления с такой категорией.
				// Вытесняемые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ВытесняемыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления, ОтборТолькоСПериодомДействия);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВытесняемыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления, ОтборТолькоСПериодомДействия), Истина);
				Для Каждого ВытесняемоеНачисление Из ВытесняемыеНачисления Цикл
					ВытесняемоеНачислениеОбъект = КоллекторНачислений[ВытесняемоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ВытесняемоеНачислениеОбъект = Неопределено Тогда
						ВытесняемоеНачислениеОбъект = ВытесняемоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ВытесняемоеНачисление, ВытесняемоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					Обновлено = Ложь;
					Для Каждого ВытесняющееНачисление Из ВытесняющиеНачисления Цикл
						// Частное условие:
						// Если вытесняющее начисление — командировка (или вытесняется командировкой), 
						// а вытесняемое — оплата сверх нормы времени, не добавляем.
						ВытесняющееНачислениеОбъект = КоллекторНачислений[ВытесняющееНачисление];
						Если КатегорииНеВытесняющиеОплатуСверхНормы.Найти(ВытесняющееНачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							Если ВытесняемоеНачислениеОбъект.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
								// Не добавляем такую настройку вытеснения.
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						// Универсальное условие
						Если ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Найти(ВытесняющееНачисление, "ВидРасчета") = Неопределено 
							И ВытесняемоеНачисление <> ВытесняющееНачисление Тогда
							ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ВытесняющееНачисление;
							Обновлено = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ВытесняемоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Базовые начисления
		ОтборБазовых = СвойстваНачисления.ОтборБазовых;
		Если ОбновлятьЗависимостиПоБазе И ОтборБазовых <> Неопределено Тогда
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборБазовых.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			Если БазовыеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, являющиеся базовыми для данной категории.
				// Зависимые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ЗависимыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗависимыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления), Истина);
				Для Каждого ЗависимоеНачисление Из ЗависимыеНачисления Цикл
					ЗависимоеНачислениеОбъект = КоллекторНачислений[ЗависимоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ЗависимоеНачислениеОбъект = Неопределено Тогда
						ЗависимоеНачислениеОбъект = ЗависимоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ЗависимоеНачисление, ЗависимоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					ЭтоНовоеЗависимоеНачисление = Не ЗначениеЗаполнено(ЗависимоеНачислениеОбъект.Ссылка);
					// Определяем, если вообще зависимому начислению нужен список базовых видов расчета.
					Обновлено = Ложь;
					Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ЗависимоеНачислениеОбъект.Показатели, "РасчетнаяБаза") Тогда
						Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
							Если ЗависимоеНачислениеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено 
								И ЗависимоеНачисление <> БазовоеНачисление Тогда
								// Дополнительно проверяем нет ли в списке базовых начисления БазовоеНачисление ссылки на
								// ЗависимоеНачислениеОбъект, если есть, то не добавляем.
								БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
								Если БазовоеНачислениеОбъект = Неопределено Тогда
									БазовоеНачислениеОбъект = БазовоеНачисление.ПолучитьОбъект();
									КоллекторНачислений.Вставить(БазовоеНачисление, БазовоеНачислениеОбъект);
								КонецЕсли;
								ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
								Если Не ЭтоНовоеЗависимоеНачисление И Не ЭтоНовоеБазовоеНачисление Тогда 
									Продолжить;
								КонецЕсли;
								// Меняем базу существующего начисления, только если это РК или СН
								Если Не ЭтоНовоеЗависимоеНачисление 
									И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
									И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда 
									Продолжить;
								КонецЕсли;
								Если БазовоеНачислениеОбъект.БазовыеВидыРасчета.Найти(ЗависимоеНачисление, "ВидРасчета") = Неопределено Тогда
									ЗависимоеНачислениеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
									Обновлено = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ЗависимоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Ведущие начисления
		ОтборВедущих = СвойстваНачисления.ОтборВедущих;
		Если ОтборВедущих <> Неопределено Тогда
			ОтборВедущих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВедущих);
			// Начисления по условию из коллектора.
			ВедущиеНачисления = ВидыРасчетаКоллектораПоОтбору(КоллекторНачислений, ОтборВедущих);
			Если ВедущиеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, ведущие начисления с такой категорией.
				// Ведомые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору, отбираем только почасовую оплату труда...
				ВедомыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления, ОтборТолькоПочасоваяОплата);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВедомыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления, ОтборТолькоПочасоваяОплата), Истина);
				Для Каждого ВедомоеНачисление Из ВедомыеНачисления Цикл
					ВедомоеНачислениеОбъект = КоллекторНачислений[ВедомоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ВедомоеНачислениеОбъект = Неопределено Тогда
						ВедомоеНачислениеОбъект = ВедомоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ВедомоеНачисление, ВедомоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					Обновлено = Ложь;
					Для Каждого ВедущееНачисление Из ВедущиеНачисления Цикл
						Если ВедомоеНачислениеОбъект.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено 
							И ВедомоеНачисление <> ВедущееНачисление Тогда
							ВедомоеНачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
							Обновлено = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ВедомоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция составляет массив действующих начислений, 
// выполняемых документом определенного вида.
//
// Параметры:
//	ВидДокумента - ПеречислениеСсылка.ВидыДокументовНачисления 
// 		или просто ссылка на документ.
//	ДополнительныйОтбор - необязательный, 
//		структура для уточнения особенностей подходящих начислений.
//
// Возвращаемое значение - массив начислений.
//
Функция НачисленияПоВидуДокумента(ВидДокумента, ДополнительныйОтбор = Неопределено) Экспорт
	
	Если ТипЗнч(ВидДокумента) <> Тип("ПеречислениеСсылка.ВидыДокументовНачисления") Тогда
		ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(ВидДокумента);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Если ДополнительныйОтбор <> Неопределено Тогда
		Отбор = ДополнительныйОтбор;
	КонецЕсли;
	Отбор.Вставить("ВидДокументаНачисления", ВидДокумента);
	Отбор.Вставить("СпособВыполненияНачисления", Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета);
	Отбор.Вставить("ВАрхиве", Ложь);

	Возврат НачисленияПоОтбору(Отбор);
	
КонецФункции

// Возвращает массив начислений, соответствующие параметрам.
//
// Параметры:
//		КатегорияНачисления - Перечисление.КатегорииНачисленийИНеоплаченногоВремени
// 		Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Начисления. 
//
// Возвращаемое значение - массив начислений, соответствующих категории и отборам.
//
Функция НачисленияПоКатегории(КатегорияНачисления, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисления);
	
	Возврат НачисленияПоОтбору(Отбор);
	
КонецФункции

// Возвращает массив начислений, соответствующих отбору.
//
// Параметры:
// 	Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Начисления.
//		Кроме того, предусмотрена обработка предопределенных ключей:
//			- ОпределяющиеПоказатели - выполняется поиск начислений, по наличию показателей в списке определяющих.
//
// Возвращаемое значение - массив начислений, соответствующих категории и отборам.
//
Функция НачисленияПоОтбору(Отбор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	&УСЛОВИЕ");
	
	Условие = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		ИмяОтбора = КлючИЗначение.Ключ;
		ЗначениеОтбора = КлючИЗначение.Значение;
		// Фиксированный массив преобразуем в обычный.
		Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
			Массив = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ЗначениеОтбора);
			ЗначениеОтбора = Массив;
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяОтбора, ЗначениеОтбора);
		ФрагментУсловия = "";
		Если Не ПустаяСтрока(Условие) Тогда
			ФрагментУсловия	= " И ";
		КонецЕсли;
		Если ИмяОтбора = "ОпределяющиеПоказатели" Тогда
			// Предопределенный фильтр по определяющим показателям.
			ФрагментУсловия = ФрагментУсловия + "
				|	ИСТИНА В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ИСТИНА
				|			ИЗ
				|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
				|			ГДЕ
				|				ПоказателиНачислений.Ссылка = Начисления.Ссылка
				|				И ПоказателиНачислений.ОпределяющийПоказатель = ИСТИНА
				|				И ПоказателиНачислений.Показатель.ИмяПредопределенныхДанных В (&ОпределяющиеПоказатели))";
		Иначе
			ШаблонУсловия = "Начисления.%1 = &%1";
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				ШаблонУсловия = "Начисления.%1 В (&%1)";
			КонецЕсли;
			ФрагментУсловия = ФрагментУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ИмяОтбора);
		КонецЕсли;
		Условие = Условие + ФрагментУсловия;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УСЛОВИЕ", Условие);
	
	Начисления = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Начисления.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

// Проверяет соответствие указанного вида расчета предлагаемому отбору.
//
Функция ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, КатегорияОтбор, Отбор = Неопределено) Экспорт
	
	КатегорияВидаРасчета = КатегорияВидаРасчета(ВидРасчетаОбъект);
	Если ТипЗнч(КатегорияОтбор) = Тип("Массив") Тогда
		Если КатегорияОтбор.Найти(КатегорияВидаРасчета) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если КатегорияВидаРасчета <> КатегорияОтбор Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено И Отбор.Количество() > 0 Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			Если Не Модуль.ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, Отбор) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			ПолеОтбора = ЭлементОтбора.Ключ;
			Если ПолеОтбора = "ОтборПоДополнительнымСвойствамНачисления" Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеОтбора = ЭлементОтбора.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Если ЗначениеОтбора.Найти(ВидРасчетаОбъект[ПолеОтбора]) = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если ВидРасчетаОбъект[ПолеОтбора] <> ЗначениеОтбора Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет параметры выбора начислений, удовлетворяющих выбранному состоянию сотрудника.
//
// Параметры:
//	СостояниеСотрудника - состояние сотрудника.
//
// Возвращаемое значение - структура, полями которой являются имена реквизитов ПВР Начисления, а значениями допустимые
// значения.
//
Функция ОтборНачисленийПоСостоянию(СостояниеСотрудника) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Если СостояниеСотрудника = Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.Болезнь Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.Прогул Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	КонецЕсли;

	Возврат СтруктураОтбора;
	
КонецФункции

Процедура ОбновитьНачисленияПростоев() Экспорт
	
	СоздатьНачисленияПростоев();
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиДублированияНачисленийДляВнутреннихСовместителейИПодработок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииНачисленийВнутреннихСовместителейИПодработок", КатегорииНачисленийВнутреннихСовместителейИПодработок());
	Запрос.УстановитьПараметр("КатегорииНачисленийПодработок", КатегорииНачисленийПодработок());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА КАК ДублироватьДляВнутреннихСовместителейИПодработок,
		|	ЛОЖЬ КАК ДублироватьДляПодработок
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленийВнутреннихСовместителейИПодработок)
		|	И Начисления.ДублироватьДляВнутреннихСовместителейИПодработок = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НачисленияДляВнутреннихСовместителей
		|		ПО Начисления.Ссылка = НачисленияДляВнутреннихСовместителей.Ссылка
		|			И (НачисленияДляВнутреннихСовместителей.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийВнутреннихСовместителейИПодработок))
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленийПодработок)
		|	И Начисления.ДублироватьДляПодработок = ЛОЖЬ
		|	И НачисленияДляВнутреннихСовместителей.Ссылка ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ВидРасчетаОбъект.ДублироватьДляВнутреннихСовместителейИПодработок = Выборка.ДублироватьДляВнутреннихСовместителейИПодработок;
			ВидРасчетаОбъект.ДублироватьДляПодработок = Выборка.ДублироватьДляПодработок;
			
			ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
			ВидРасчетаОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

// Коллекция категорий надбавок, использующих при расчете базу других начислений.
// Для таких начислений период действия и базовый период отличаются даже в текущем месяце для того, 
// чтобы при их вытеснении, базовый период не искажался и по-прежнему охватывал весь период.
// 
Функция КатегорииНадбавокПоБазе() Экспорт
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	
	Возврат Категории;
	
КонецФункции

Функция КатегорияСтатистическогоНаблюдения57Т(КатегорияНачисленияИлиНеоплаченногоВремени) Экспорт
	
	Если КатегорииНачисленийСтатистическогоУчетаТ57ТарифногоЗаработка().Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		
		Возврат Перечисления.КатегорииСтатистическогоНаблюдения57Т.ТарифныйЗаработок;
		
	ИначеЕсли КатегорииНачисленийСтатистическогоУчетаТ57ВыплатПоРайонномуРегулированию().Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		
		Возврат Перечисления.КатегорииСтатистическогоНаблюдения57Т.ВыплатыПоРайонномуРегулированию;
		
	ИначеЕсли КатегорииНачисленийСтатистическогоУчетаТ57ДругихВыплат().Найти(КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		
		Возврат Перечисления.КатегорииСтатистическогоНаблюдения57Т.ДругиеВыплаты;
		
	КонецЕсли;
	
	Возврат Перечисления.КатегорииСтатистическогоНаблюдения57Т.ПустаяСсылка();
	
КонецФункции

// Возвращает массив начислений - годовых премий
//
// Возвращаемое значение:
//	Массив
//
Функция ГодовыеПремии() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение В (ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой), ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	РасчетЗарплатыРасширенныйВызовСервера.НачисленияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Создает или отключает начисление для выполнения надбавки за вредность.
//
Процедура СоздатьНачислениеНадбавкаЗаВредность(КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
		
	// Создаем показатель.
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательНадбавкаЗаВредность(НастройкиРасчетаЗарплаты);
	// Описываем создание надбавки.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НВР'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за вредные условия труда'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Вредность'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВредность / 100 * РасчетнаяБаза";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ 	= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Если НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияНадбавки(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)

	Надбавки = ПараметрыПланаВидовРасчета.Надбавки;
	
	// Для надбавок определяем в качестве ключа.
	// Повременная оплата труда + вид времени: дополнительно оплачиваемое в пределах нормы.
	ОтборБазовыхНачисленийНадбавок = ОтборБазовыхПоУмолчанию();
	
	// Надбавка за выслугу лет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НВЛ'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за выслугу лет'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Выслуга лет'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВыслугуЛет / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
	Описание.ОтборБазовых 			= ОтборБазовыхНачисленийНадбавок;
	Описание.КлючевыеСвойства 		= "Код";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛет;
	Описание.КлючевыеСвойства = "Ссылка";
	Если Надбавки.ИспользоватьНадбавкуЗаВыслугуЛет Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛет = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	ПрочиеНадбавкиПроцентом = Надбавки.НадбавкиПроцентом;
	Если ПрочиеНадбавкиПроцентом.Количество() > 0 Тогда
		
		ИдентификаторыНадбавокПроцентом = Надбавки.ИдентификаторыНадбавокПроцентом;
		
		Для Сч = 1 По ПрочиеНадбавкиПроцентом.Количество() Цикл
			
			Индекс = Сч-1;
			Надбавка = СокрЛП(ПрочиеНадбавкиПроцентом[Индекс]);
			Если ПустаяСтрока(Надбавка) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторНадбавки = ИдентификаторыНадбавокПроцентом[Индекс];
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru = 'ПРН'") + ?(Индекс = 0,"", Индекс);
			Описание.Наименование			= Надбавка;
			Описание.ФормулаРасчета 		= ИдентификаторНадбавки + " / 100 * РасчетнаяБаза";
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
			Описание.ОтборБазовых 			= ОтборБазовыхНачисленийНадбавок;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПрочиеНадбавкиСуммой = Надбавки.НадбавкиСуммой;
	Если ПрочиеНадбавкиСуммой.Количество() > 0 Тогда
		
		ИдентификаторыНадбавокСуммой = Надбавки.ИдентификаторыНадбавокСуммой;
		
		Для Сч = 1 По ПрочиеНадбавкиСуммой.Количество() Цикл
			
			Индекс = Сч-1;
			Надбавка = СокрЛП(ПрочиеНадбавкиСуммой[Индекс]);
			Если ПустаяСтрока(Надбавка) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторНадбавки = ИдентификаторыНадбавокСуммой[Индекс];
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru = 'НСУМ'") + ?(Индекс = 0,"", Индекс);
			Описание.Наименование			= Надбавка;
			Описание.ФормулаРасчета 		= ИдентификаторНадбавки + " * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеДоплатаЗаПереработкиПоСуммированномуУчету(КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	ИспользоватьОплатуПереработокСуммированногоУчета = НастройкиРасчетаЗарплаты.ИспользоватьОплатуПереработокСуммированногоУчета;
	ИспользоватьУчетВремениСотрудниковВЧасах 		 = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	// Создаем показатели.
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиСуммированногоУчета();
	
	ОпределяющиеПоказатели = Новый Массив;
	ОпределяющиеПоказатели.Добавить("ПереработаноПоСуммированномуУчету");
	ОпределяющиеПоказатели.Добавить("ПереработаноПоСуммированномуУчетуВПределах2Часов");
	
	// Описываем создание надбавки.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРБТС'");
	Описание.Наименование			= НСтр("ru = 'Доплата за переработки при суммированном учете рабочего времени'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Переработки при сумм. учете'");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ФормулаРасчета			= "(ПереработаноПоСуммированномуУчетуВПределах2Часов * 0.5 + (ПереработаноПоСуммированномуУчету - ПереработаноПоСуммированномуУчетуВПределах2Часов)) * СтоимостьЧаса";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.ОпределяющиеПоказатели = ОпределяющиеПоказатели;
	Описание.КлючевыеСвойства = "ОпределяющиеПоказатели";
	Если ИспользоватьОплатуПереработокСуммированногоУчета И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачисленияКомпенсационныеВыплаты(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)

	КомпенсационныеВыплаты = ПараметрыПланаВидовРасчета.КомпенсационныеВыплаты;
	
	Если КомпенсационныеВыплаты.Количество() > 0 Тогда
		
		Для каждого Выплата Из КомпенсационныеВыплаты Цикл
			
			Если ПустаяСтрока(Выплата.Название) Тогда
				Продолжить;
			КонецЕсли;
						
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru = 'КМПВ'");
			Описание.Наименование			= Выплата.Название;
			Если Выплата.ПорядокНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете Тогда
				Описание.ФормулаРасчета 		= СОКРЛП(Выплата.Показатель) + " * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
			Иначе	
				Описание.ФормулаРасчета 		= СОКРЛП(Выплата.Показатель);
			КонецЕсли;
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
			Описание.СпособВыполненияНачисления = Выплата.ПорядокНачисления;
			Описание.КодДоходаНДФЛ 			  = Выплата.КодДоходаНДФЛ;
			Описание.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы;
			Описание.КодДоходаСтраховыеВзносы = Выплата.КодДоходаСтраховыеВзносы;
			Описание.КодДоходаСтраховыеВзносы2017 = Выплата.КодДоходаСтраховыеВзносы2017;
			Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп25ст255;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияНатуральныеДоходы(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета, НастройкиРасчетаЗарплаты)

	НатуральныеДоходы = ПараметрыПланаВидовРасчета.НатуральныеДоходы;
	
	// Оплата в натуральной форме
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НТОПЛ'");
	Описание.Наименование			= НСтр("ru = 'Оплата в натуральной форме'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Оплата в натур. форме'");
	Описание.ФормулаРасчета			= "НатуральнаяОплата * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НатуральнаяОплата");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаТрудаВНатуральнойФорме;
	Описание.КлючевыеСвойства = "Ссылка";
	Если НатуральныеДоходы.ОплатаТрудаВНатуральнойФорме Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаТрудаВНатуральнойФорме = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доход в натуральной форме (отключение всех начислений категории ДоходВНатуральнойФорме).
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме Тогда
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
		Возврат;
	КонецЕсли;
	
	// Доход в натуральной форме
	СписокНатуральныхДоходов = НатуральныеДоходы.НатуральныеДоходы;
	Если СписокНатуральныхДоходов.Количество() > 0 Тогда
		
		Для Сч = 1 По СписокНатуральныхДоходов.Количество() Цикл
			
			Индекс = Сч-1;
			Доход = СокрЛП(СписокНатуральныхДоходов[Индекс]);
			Если ПустаяСтрока(Доход) Тогда
				Продолжить;
			КонецЕсли;
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'НТ%1'"), Формат(Сч, "ЧЦ=3; ЧВН="));
			Описание.Наименование			= Доход;
			Описание.ФормулаРасчета 		= "";
			Описание.Рассчитывается 		= Ложь;
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
			
		КонецЦикла;
		
	Иначе
		
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'НАТДХ'") + ?(Индекс = 0,"", Индекс);
		Описание.Наименование			= НСтр("ru = 'Натуральный доход'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Натур. доход'");
		Описание.ФормулаРасчета 		= "";
		Описание.Рассчитывается 		= Ложь;
		Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
		Описание.КлючевыеСвойства 		= "КатегорияНачисленияИлиНеоплаченногоВремени";
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияПремий(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.ЕжемесячнаяПремия;
	
	// Ежемесячная премия процентом.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРЕМП'");
	Описание.Наименование			= НСтр("ru = 'Премия ежемесячная процентом'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия мес.'");
	Описание.ФормулаРасчета 		= "ПроцентЕжемесячнойПремии / 100 * РасчетнаяБаза";
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.БазовыйПериодПрошлыйМесяц Тогда
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц;
		Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Иначе
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
		Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Ежемесячная премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРЕМС'");
	Описание.Наименование			= НСтр("ru = 'Премия ежемесячная суммой'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия мес.'");
	Описание.ФормулаРасчета 		= "РазмерЕжемесячнойПремии * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.ГодоваяПремия;
	// Годовая премия процентом
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРГП'");
	Описание.Наименование			= НСтр("ru = 'Премия за год (процентом)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия год.'");
	Описание.ФормулаРасчета 		= "ПроцентГодовойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 12;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом;
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентГодовойПремии");
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод;
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Если ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии = 12 Тогда
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод;
		Иначе
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
		КонецЕсли;
		Описание.МесяцыНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии);
	Иначе
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Годовая премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРГС'");
	Описание.Наименование			= НСтр("ru = 'Премия за год (суммой)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия год.'");
	Описание.ФормулаРасчета 		= "РазмерГодовойПремии";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 12;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерГодовойПремии");
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии);
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.КвартальнаяПремия;
	
	// Квартальная премия процентом.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРКП'");
	Описание.Наименование			= НСтр("ru = 'Премия за квартал (процентом)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия кварт.'");
	Описание.ФормулаРасчета 		= "ПроцентКвартальнойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 3;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	МесяцыНачисления = ПараметрыПремии.НомераМесяцевНачисленияКвартальнойПремии;
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентКвартальнойПремии");
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		ПервыйМесяц = 12;
		Для каждого МесяцНачисления Из МесяцыНачисления Цикл
			Если ПервыйМесяц > МесяцНачисления Тогда
				ПервыйМесяц = МесяцНачисления;
			КонецЕсли;
		КонецЦикла;
		Если ПервыйМесяц = 3 Тогда
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал;
		Иначе
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
		КонецЕсли;
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = МесяцыНачисления;
	Иначе
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда  
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	// Квартальная премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРКС'");
	Описание.Наименование			= НСтр("ru = 'Премия за квартал (суммой)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия кварт.'");
	Описание.ФормулаРасчета 		= "РазмерКвартальнойПремии";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 3;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	МесяцыНачисления = ПараметрыПремии.НомераМесяцевНачисленияКвартальнойПремии;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев;
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерКвартальнойПремии");
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = МесяцыНачисления;
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;	
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	// Разовая премия
	ПараметрыПремии = ПараметрыПланаВидовРасчета.РазоваяПремия;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРРП'");
	Описание.Наименование			= НСтр("ru = 'Премия разовая (процентом)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия разов.'");
	Описание.ФормулаРасчета 		= "ПроцентРазовойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СреднийЗаработокОбщий 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.КоличествоМесяцевБазовогоПериода = ПараметрыПремии.ЧислоМесяцевПериодаРазовойПремии;
	Описание.СдвигБазовогоПериода = 1;
	Если Описание.КоличествоМесяцевБазовогоПериода = 1 Тогда
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Иначе
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев;
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентРазовойПремии");
		Описание.ВидДокументаНачисления = Неопределено;
	Иначе
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРРС'");
	Описание.Наименование			= НСтр("ru = 'Премия разовая (суммой)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Премия разов.'");
	Описание.ФормулаРасчета 		= "РазмерРазовойПремии";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СреднийЗаработокОбщий 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	Описание.КоличествоМесяцевБазовогоПериода = ПараметрыПремии.ЧислоМесяцевПериодаРазовойПремии;
	Описание.СдвигБазовогоПериода = 1;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерРазовойПремии");
		Описание.ВидДокументаНачисления = Неопределено;
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ЗначениеЗаполнено(ПараметрыПремии.КодДохода) Тогда
		Описание.КодДоходаНДФЛ = ПараметрыПремии.КодДохода;
		Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	КонецЕсли;
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за выручку от реализации.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДПВРЧ'");
	Описание.Наименование			= НСтр("ru = 'Доплата за выручку от реализации'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Допл. от реализ.'");
	Описание.ФормулаРасчета 		= "Выручка * ПроцентДоплатыЗаВыручку / 100";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Выручка");
	Описание.СреднийЗаработокФСС 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыручкуОтРеализации;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьДоплатуЗаВыручкуОтРеализации Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыручкуОтРеализации = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за выполнение плана.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДППЛН'");
	Описание.Наименование			= НСтр("ru = 'Доплата за выполнение плана'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Допл. за выполн. плана'");
	Описание.ФормулаРасчета 		= "?(ВыполнениеПлана >= План, ВыполнениеПлана / План, 0) * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВыполнениеПлана");
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокФСС 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыполнениеПлана;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьДоплатуЗаВыполнениеПлана Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыполнениеПлана = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияЕжегодногоОтпуска(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений) 
	
	ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"); 
	НаименованиеОтпуска  		= НСтр("ru = 'Отпуск основной'");
	КраткоеНаименование 		= НСтр("ru = 'Отпуск'");
	СоздаватьКомпенсацию  		= Истина;
	
	СоздатьНачисленияОтпускаИКомпенсации(ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, , КраткоеНаименование);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
		Если НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания Тогда
			ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
			НаименованиеОтпуска  		= НСтр("ru = 'Отпуск основной (сохр. ден. содержание)'");
			КраткоеНаименование 		= НСтр("ru = 'Отпуск'");
			СоздаватьКомпенсацию  		= Истина;
			СоздатьНачисленияОтпускаИКомпенсации(ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, Истина, КраткоеНаименование);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьНачисленияОтпускаНаСанаторноКурортноеЛечениеЗаСчетФСС(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено 
		Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
		
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Описание.СвойстваПоКатегории 						= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование 								= НСтр("ru = 'Отпуск на период санаторно-курортного лечения (за счет ФСС)'");
	Описание.КраткоеНаименование 						= НСтр("ru = 'Отпуск на СКЛ (ФСС)'");
	Описание.Код 										= НСтр("ru = 'СКЛ'");
	Описание.КлючевыеСвойства 							= "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияЕжегодногоОтпускаГосслужащих(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений) 
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	Если Не НастройкиПрограммы.РаботаВБюджетномУчреждении Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьГосударственнуюСлужбу = НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу;
	ИспользоватьМуниципальнуюСлужбу   = НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу;
	Если ИспользоватьГосударственнуюСлужбу Или ИспользоватьМуниципальнуюСлужбу Тогда
		
		ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВыслугуЛетНаГосударственнойСлужбе"); 
		Если ИспользоватьГосударственнуюСлужбу Тогда
			НаименованиеОтпуска  		= НСтр("ru = 'Отпуск за выслугу лет на государственной службе'");
			КраткоеНаименование 		= НСтр("ru = 'Отп. (выслуга лет)'");
		Иначе
			НаименованиеОтпуска  		= НСтр("ru = 'Отпуск за выслугу лет на муниципальной службе'");
			КраткоеНаименование 		= НСтр("ru = 'Отп. (выслуга лет)'");
		КонецЕсли;
		СоздаватьКомпенсацию  		= Истина;
		
		СоздатьНачисленияОтпускаИКомпенсации(ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания, КраткоеНаименование);
		
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьНачисленияДополнительныеОтпуска(КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ПараметрыПланаВидовРасчета) 
	
	ДополнительныеОтпуска = ПараметрыПланаВидовРасчета.ДополнительныеОтпуска;
	
	// Массив, содержит ссылки на Справочник.ВидыОтпусков.
	ДополнительныеОтпуска = ДополнительныеОтпуска.ДополнительныеОтпуска;
	Если ДополнительныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
		ВидОтпуска = ДополнительныйОтпуск.ВидОтпуска; 
		НаименованиеОтпуска = ДополнительныйОтпуск.Наименование;
		
		Если ПустаяСтрока(НаименованиеОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		
		СоздаватьКомпенсацию = ДополнительныйОтпуск.ОтпускЯвляетсяЕжегодным;
		СоздатьНачисленияОтпускаИКомпенсации(ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНачисленияДляУчетаВремениСотрудниковВЧасах(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета)
	
	ИспользоватьУчетВремениСотрудниковВЧасах = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	ПовременнаяПочасоваяОплата = Новый Массив;
	
	// Оклад по часам
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОКЛЧС'");
	Описание.Наименование			= НСтр("ru = 'Оплата по окладу (по часам)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Оклад (по часам)'");
	Описание.ФормулаРасчета			= "Оклад * ВремяВЧасах / НормаЧасов";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.КлючевыеСвойства = "УчетВремениВЧасах,ОбозначениеВТабелеУчетаРабочегоВремени";
	ПовременнаяПочасоваяОплата.Добавить(Описание);
	
	// Оплата по часовому тарифу
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ТРФЧС'");
	Описание.Наименование			= НСтр("ru = 'Оплата по часовому тарифу'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Часовой тариф'");
	Описание.ФормулаРасчета			= "ТарифнаяСтавкаЧасовая * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаЧасовая");
	Описание.КлючевыеСвойства = "УчетВремениВЧасах,ОбозначениеВТабелеУчетаРабочегоВремени";
	ПовременнаяПочасоваяОплата.Добавить(Описание);
	Если ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписаниям(КоллекторНачислений, ПовременнаяПочасоваяОплата);
	Иначе 
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Сдельный заработок (с минимальным часовым тарифом).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СДЛЧС'");
	Описание.Наименование			= НСтр("ru = 'Сдельный заработок (для работающих по часовому тарифу)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Сдельно'");
	Описание.ФормулаРасчета 		= "Макс(СдельныйЗаработок, ТарифнаяСтавкаЧасовая * ВремяВЧасах)";
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаЧасовая");
	Описание.УчетВремениВЧасах 		= Истина;
	Описание.КлючевыеСвойства  		= "УчетВремениВЧасах";
	Если НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	НастройкиУчетаВремени = УчетРабочегоВремениРасширенный.НастройкиУчетаВремени();
	
	// Доплата за ночные
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НОЧН'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в ночное время'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Ночные часы'");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВНочноеВремя / 100";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиУчетаВремени.УчитыватьНочныеЧасы И ИспользоватьУчетВремениСотрудниковВЧасах Тогда	
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	// Доплата за работу в праздничные дни (ночное время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРНОЧ'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (ночное время)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Ночные часы (праздн.)'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных 
		И НастройкиУчетаВремени.УчитыватьНочныеЧасы 
		И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за вечерние
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ВЕЧЕР'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в вечернее время'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Вечерние часы'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВВечернееВремя / 100";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиУчетаВремени.УчитыватьВечерниеЧасы И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	// Доплата за работу в праздничные дни (вечернее время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРВЕЧ'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (вечернее время)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Вечерние часы (праздн.)'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных 
		И НастройкиУчетаВремени.УчитыватьВечерниеЧасы 
		И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата перерывов на кормление ребенка.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'КОРМЛ'");
	Описание.Наименование			= НСтр("ru = 'Оплата времени кормления ребенка'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Кормл. ребенка'");
	Описание.ФормулаРасчета			= "СреднийЗаработокОбщий * ВремяВЧасах";
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
	Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	// Сверхурочные
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СВХУР'");
	Описание.Наименование			= НСтр("ru = 'Оплата сверхурочных часов'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Сверхурочно'");
	Описание.ФормулаРасчета			= "(ОтработаноСверхурочноВПределах2Часов * 1.5 + (ОтработаноСверхурочно - ОтработаноСверхурочноВПределах2Часов) * 2) * СтоимостьЧаса";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// - Оплата работы в праздничные и выходные дни.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРОПЛ'");
	Описание.Наименование			= НСтр("ru = 'Оплата работы в праздничные и выходные дни'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Праздн. и выходн.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса * 2";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за работу в праздничные дни (дневное время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРДОП'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (дневное время)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Праздн. и выходн.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Виды расчетов, связанные с использованием отгулов.
	// - сверхурочные без повышенной оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'СВУРН'");
	Описание.Наименование			= НСтр("ru = 'Оплата сверхурочных часов без повышенной оплаты'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Сверхурочно норм.'");
	Описание.ФормулаРасчета			= "ВремяВЧасах * СтоимостьЧаса";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// - Оплата работы в праздничные и выходные дни без повышенной оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРОПН'");
	Описание.Наименование			= НСтр("ru = 'Оплата работы в праздничные и выходные дни без повышенной оплаты'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Праздн. и выходн. норм.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
	СоздатьВнутрисменныеОтклонения(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);	
	
	Если Не ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		// Если не используется учет времени в часах, 
		// нужно отключить все часовые начисления, даже не соответствующие описанию.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.УчетВремениВЧасах
		|	И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)");
		Выборка = Запрос.Выполнить().Выбрать();
		ПочасовыеНачисления = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ПочасовыеНачисления.Добавить(Выборка.Ссылка);
		КонецЦикла;
		УстановитьИспользованиеНачислений(КоллекторНачислений, ПочасовыеНачисления, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеНадбавкаЗаКвалификационнуюКатегорию(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты)
	
	ИспользоватьНадбавкуЗаКвалификационнуюКатегорию = НастройкиРасчетаЗарплаты.ИспользоватьКвалификационнуюНадбавку;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		ИспользоватьНадбавкуЗаКвалификационнуюКатегорию = ИспользоватьНадбавкуЗаКвалификационнуюКатегорию И НЕ Модуль.РаботаВМедицинскомУчреждении();
	КонецЕсли;

	КвалификационнаяНадбавка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КвалификационнаяНадбавка");
	
	НадбавкиЗаКвалификационнуюКатегорию = Новый Массив;
	
	Если КвалификационнаяНадбавка <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", КвалификационнаяНадбавка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	НачисленияПоказатели.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Показатель = &Показатель";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НадбавкиЗаКвалификационнуюКатегорию.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НадбавкиЗаКвалификационнуюКатегорию.Количество() > 0 Тогда 
		Если ИспользоватьНадбавкуЗаКвалификационнуюКатегорию Тогда 
			УстановитьИспользованиеНачислений(КоллекторНачислений, НадбавкиЗаКвалификационнуюКатегорию, Истина);
		Иначе
			УстановитьИспользованиеНачислений(КоллекторНачислений, НадбавкиЗаКвалификационнуюКатегорию, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Надбавка за квалификационную категорию
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'НКК'");
	Описание.Наименование			= НСтр("ru = 'Надбавка за квалификационную категорию'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Квалиф. категория'");
	Описание.ФормулаРасчета			= "КвалификационнаяНадбавка * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КвалификационнаяНадбавка");
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьНадбавкуЗаКвалификационнуюКатегорию Тогда 
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВнутрисменныеОтклонения(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета)
	
	// Внутрисменная командировка
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСКМД'");
	Описание.Наименование			= НСтр("ru = 'Командировка (внутрисменная)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Командировка'");
	Описание.ФормулаРасчета			= "СреднийЗаработокОбщий * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СреднийЗаработокОбщий");
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата «донорских» дней внутрисменная.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСДОНОР'");
	Описание.Наименование			= НСтр("ru = 'Оплата за дни сдачи крови и ее компонентов (внутрисменная)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Донорство'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКровиВнутрисменная;
	Описание.КлючевыеСвойства = "Ссылка";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах
		 И ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКрови
		 И ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКровиВнутрисменных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКровиВнутрисменная = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

	// Отпуск без оплаты согласно ТК РФ.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСОЗ'");
	Описание.Наименование			= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ (внутрисменный)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. без опл.'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск за свой счет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСДО'");
	Описание.Наименование			= НСтр("ru = 'Отпуск за свой счет (внутрисменный)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отп. за свой счет'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
	// Дополнительный учебный отпуск без оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСУД'");
	Описание.Наименование			= НСтр("ru = 'Дополнительный учебный отпуск без оплаты (внутрисменный)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Учебн. отп. без опл'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отсутствие по невыясненной причине.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСНВХ'");
	Описание.Наименование			= НСтр("ru = 'Отсутствие по невыясненной причине (внутрисменное)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Неявка'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Внутрисменный прогул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСПРГ'");
	Описание.Наименование			= НСтр("ru = 'Внутрисменный прогул'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Прогул'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работника
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРВРЧ'");
	Описание.Наименование			= НСтр("ru = 'Внутрисменный простой по вине работника'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой без опл.'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по независящим от работодателя причинам.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСПРО'");
	Описание.Наименование			= НСтр("ru = 'Оплата часового простоя от оклада по часам'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работодателя.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРСРЧ'");
	Описание.Наименование			= НСтр("ru = 'Оплата часового простоя по среднему заработку'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Простой'");
	Описание.ФормулаРасчета 		= "СреднийЗаработокОбщий * (2/3) * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отгул (внутрисменный)
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОТГВС'");
	Описание.Наименование			= НСтр("ru = 'Отгул (внутрисменный)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Отгул (внутрисменный)'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые");
	Описание.КлючевыеСвойства = "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеДниОплаченныеДоНачалаЭксплуатации(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено 
		Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'УЧТДН'");
	Описание.Наименование			= НСтр("ru = 'Дни, учтенные до начала эксплуатации'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Дни, уже учтенные ранее'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КлючевыеСвойства 							= "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеКомпенсацияМоральногоВреда(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписыватьНачисления = Ложь;
		Если КоллекторНачислений = Неопределено 
			Или КоллекторУдержаний = Неопределено Тогда
			// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
			// то запись начислений производится в нем, локально.
			КоллекторНачислений = Новый Соответствие;
			КоллекторУдержаний = Новый Соответствие;
			ЗаписыватьНачисления = Истина;
		КонецЕсли;
		
		Если СвойстваНачислений = Неопределено Тогда
			СвойстваНачислений = СвойстваНачисленийПоКатегориям();
		КонецЕсли;
		
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияМоральногоВреда;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'КМВ'");
		Описание.Наименование			= НСтр("ru = 'Компенсация морального вреда'");
		Описание.КраткоеНаименование 	= НСтр("ru = 'Морал. вред'");
		Описание.УчетВремениВЧасах		= Ложь;
		Описание.КлючевыеСвойства = "Ссылка";
		
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		Если ЗаписыватьНачисления Тогда
			ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка создания начисления «Компенсация морального вреда»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ПланыВидовРасчета.Начисления, ,
			НСтр("ru = 'Не удалось создать начисление «Компенсация морального вреда» из-за предположительно неверной (зацикленной) настройки плана видов расчета.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	КонецПопытки;
		
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачислениеОплатаВынужденногоПростоя(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписыватьНачисления = Ложь;
		Если КоллекторНачислений = Неопределено 
			Или КоллекторУдержаний = Неопределено Тогда
			// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
			// то запись начислений производится в нем, локально.
			КоллекторНачислений = Новый Соответствие;
			КоллекторУдержаний = Новый Соответствие;
			ЗаписыватьНачисления = Истина;
		КонецЕсли;
		
		Если СвойстваНачислений = Неопределено Тогда
			СвойстваНачислений = СвойстваНачисленийПоКатегориям();
		КонецЕсли;
		
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку;
		Описание.СвойстваПоКатегории						= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВынужденныйПрогул");
		Описание.Код										= НСтр("ru = 'ОВП'");
		Описание.Наименование								= НСтр("ru = 'Оплата вынужденного простоя'");
		Описание.КраткоеНаименование						= НСтр("ru = 'Вынужд. простой'");
		Описание.УчетВремениВЧасах							= Ложь;
		Описание.КлючевыеСвойства							= "Ссылка";
		
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		Если ЗаписыватьНачисления Тогда
			ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка создания начисления ""Оплата вынужденного простоя""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ПланыВидовРасчета.Начисления, ,
			НСтр("ru = 'Не удалось создать начисление ""Оплата вынужденного простоя"" из-за предположительно неверной (зацикленной) настройки плана видов расчета.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	КонецПопытки;
		
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачисленияНеявкаПоБолезни(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	// Отсутствие по болезни (больничный еще не закрыт).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ОБНЗ'");
	Описание.Наименование			= НСтр("ru = 'Отсутствие по болезни (больничный еще не закрыт)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Болезнь'");
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.КлючевыеСвойства		= "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отсутствие по болезни по часам (больничный еще не закрыт).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ЧСОБНЗ'");
	Описание.Наименование			= НСтр("ru = 'Отсутствие по болезни (внутрисменное)'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Болезнь'");
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.КлючевыеСвойства		= "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	Если ЗаписыватьНачисления Тогда
		
		Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
			КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
		КонецЦикла;
		
		ПланыВидовРасчета.Начисления.НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
		ПланыВидовРасчета.Начисления.ЗаполнитьПорядокНачислений(КоллекторНачислений);
		РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(КоллекторНачислений);
		РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачисленияКомпенсацийЗаНеотработанныеДниПриУвольнении(ПараметрыОбновления = Неопределено) Экспорт
	
	СоздатьНачислениеКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении();
	СоздатьНачислениеКомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура СоздатьНачислениеКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиВремениКомпенсацииПриУвольнении();
		
		ЗаписыватьНачисления = Ложь;
		Если КоллекторНачислений = Неопределено 
			Или КоллекторУдержаний = Неопределено Тогда
			// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
			// то запись начислений производится в нем, локально.
			КоллекторНачислений = Новый Соответствие;
			КоллекторУдержаний = Новый Соответствие;
			ЗаписыватьНачисления = Истина;
		КонецЕсли;
		
		Если СвойстваНачислений = Неопределено Тогда
			СвойстваНачислений = СвойстваНачисленийПоКатегориям();
		КонецЕсли;
		
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении;
		Описание.СвойстваПоКатегории						= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код										= НСтр("ru = 'КУВ'");
		Описание.Наименование								= НСтр("ru = 'Компенсация за неотработанные дни при увольнении'");
		Описание.КраткоеНаименование						= НСтр("ru = 'Комп. при увольнении'");
		Описание.УчетВремениВЧасах							= Ложь;
		Описание.КлючевыеСвойства							= "Ссылка";
		
		НачисленияКатегории = НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении);
		Если НачисленияКатегории.Количество() > 0 Тогда
			Описание.СсылкаНаОбъект = НачисленияКатегории[0];
		КонецЕсли;
		
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		
		Если ЗаписыватьНачисления Тогда
			ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка создания начисления «Компенсация за неотработанные дни при увольнении»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ПланыВидовРасчета.Начисления, ,
			НСтр("ru = 'Не удалось создать начисление «Компенсация за неотработанные дни при увольнении» из-за предположительно неверной (зацикленной) настройки плана видов расчета.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	КонецПопытки;
		
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачислениеКомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего(КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	Если Не НастройкиПрограммы.РаботаВБюджетномУчреждении Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьГосударственнуюСлужбу = НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу;
	Если ИспользоватьГосударственнуюСлужбу Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиВремениКомпенсацииПриУвольнении();
			
			ЗаписыватьНачисления = Ложь;
			Если КоллекторНачислений = Неопределено 
				Или КоллекторУдержаний = Неопределено Тогда
				// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
				// то запись начислений производится в нем, локально.
				КоллекторНачислений = Новый Соответствие;
				КоллекторУдержаний = Новый Соответствие;
				ЗаписыватьНачисления = Истина;
			КонецЕсли;
			
			Если СвойстваНачислений = Неопределено Тогда
				СвойстваНачислений = СвойстваНачисленийПоКатегориям();
			КонецЕсли;
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего;
			Описание.СвойстваПоКатегории						= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			
			Если ИспользоватьГосударственнуюСлужбу Тогда
				Описание.Код										= НСтр("ru = 'КУГ'");
				Описание.Наименование								= НСтр("ru = 'Компенсация за неотработанные дни при увольнении государственного служащего'");
				Описание.КраткоеНаименование						= НСтр("ru = 'Комп. при увольн. гос. сл.'");
			Иначе
				Описание.Код										= НСтр("ru = 'КУМ'");
				Описание.Наименование								= НСтр("ru = 'Компенсация за неотработанные дни при увольнении муниципального служащего'");
				Описание.КраткоеНаименование						= НСтр("ru = 'Комп. при увольн. мун. сл.'");
			КонецЕсли;
			Описание.УчетВремениВЧасах							= Ложь;
			Описание.КлючевыеСвойства							= "Ссылка";
			
			НачисленияКатегории = НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего);
			Если НачисленияКатегории.Количество() > 0 Тогда
				Описание.СсылкаНаОбъект = НачисленияКатегории[0];
			КонецЕсли;
			
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
			
			Если ЗаписыватьНачисления Тогда
				ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка создания начисления «Компенсация за неотработанные дни при увольнении»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ПланыВидовРасчета.Начисления, ,
				НСтр("ru = 'Не удалось создать начисление «Компенсация за неотработанные дни при увольнении» из-за предположительно неверной (зацикленной) настройки плана видов расчета.'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
			
		КонецПопытки;
			
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваНачисленияПоКатегорииПоУмолчанию() Экспорт
	
	Описание = Новый Структура(
	"СпособВыполненияНачисления, 
	|СпособРасчета, 
	|ФормулаРасчета, 
	|ВидДокументаНачисления, 
	|ВидПособияСоциальногоСтрахования, 
	|ВидВремени, 
	|ОбозначениеВТабелеУчетаРабочегоВремени,
	|ВидОтпуска, 
	|ВидОперацииПоЗарплате,
	|ПериодРасчетаБазовыхНачислений,
	|КоличествоМесяцевБазовогоПериода,
	|СдвигБазовогоПериода,
	|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
	|КодДоходаНДФЛ,
	|КатегорияДохода,
	|КодДоходаСтраховыеВзносы,
	|КодДоходаСтраховыеВзносы2017,
	|ВидСтажаСЗВ,
	|ВидСтажаПФР2014,
	|ВидНачисленияДляНУ,
	|ЗачетНормыВремени,
	|ЗачетОтработанногоВремени,
	|НачисляетсяПриРасчетеПервойПоловиныМесяца,
	|ОтборБазовых,
	|ОтборВытесняющих,
	|ОтборВедущих,
	|ИменаИнструкций, 
	|ПараметрыВыбора, 
	|НедоступныеСвойства, 
	|СтратегияОтраженияВСреднемЗаработке,           
	|ВключатьВСреднийЗаработокОбщий, 
	|СреднийЗаработокОбщий, 
	|ИндексируетсяСреднийЗаработокОбщий,
	|ВключатьВСреднийЗаработокФСС,
	|ВключатьВСреднийЗаработокФСС2010,
	|СпособОтраженияЗарплатыВБухучете, 
	|ОтношениеКЕНВД, 
	|СтатьяФинансирования, 
	|СтатьяРасходов, 
	|СтратегияОтраженияВУчете,           
	|ЯвляетсяДоходомВНатуральнойФорме,
	|КатегорияСтатистическогоНаблюдения,
	|ВключатьВФОТ,
	|Рассчитывается,
	|ПоддерживаетНесколькоПлановыхНачислений,
	|УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде");
	
	// Недоступные свойства: строка, в которой перечислены имена свойств начислений, 
	// выбор которых недоступен для указанной категории.
	
	// Свойства по умолчанию	
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПустаяСсылка();
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПустаяСсылка();
	Описание.ФормулаРасчета = "";
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПустаяСсылка();
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ПустаяСсылка();
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ПустаяСсылка();
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	Описание.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Описание.КодДоходаНДФЛ);
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход;
	Описание.СтратегияОтраженияВСреднемЗаработке = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета;
	Описание.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
	Описание.КатегорияСтатистическогоНаблюдения = Перечисления.КатегорииСтатистическогоНаблюдения.ЗаработнаяПлатаРаботников;
	Описание.Рассчитывается = Истина;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Ложь;
	Описание.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = Истина;
	
	// Самый распространенный набор недоступных полей.
	НедоступныеСвойстваПоУмолчанию = Новый Массив;
	НедоступныеСвойстваПоУмолчанию.Добавить("ВключатьВСреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("СреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("ИндексируетсяСреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВключатьВСреднийЗаработокФСС");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидНачисленияДляНУ");
	НедоступныеСвойстваПоУмолчанию.Добавить("КодДоходаНДФЛ");
	НедоступныеСвойстваПоУмолчанию.Добавить("КодДоходаСтраховыеВзносы");
	НедоступныеСвойстваПоУмолчанию.Добавить("КодДоходаСтраховыеВзносы2017");
	НедоступныеСвойстваПоУмолчанию.Добавить("СпособВыполненияНачисления");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидСтажаСЗВ");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидСтажаПФР2014");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидОтпуска");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидДокументаНачисления");
	НедоступныеСвойстваПоУмолчанию.Добавить("КатегорияСтатистическогоНаблюдения");
	Описание.НедоступныеСвойства = НедоступныеСвойстваПоУмолчанию;
	
	Описание.ИменаИнструкций = "НедоступныеСвойства,КлючевыеСвойства,ИменаИнструкций,ПараметрыВыбора,ОтборБазовых,ОтборВытесняющих,ОтборВедущих"; 
	
	Возврат Описание;
	
КонецФункции

Функция ПараметрыВыбораСвойствНачисления()
	
	СтруктураПараметровВыбора = Новый Структура(
		"КодДоходаНДФЛ, 
		|КодДоходаСтраховыеВзносы,
		|ВидНачисленияДляНУ,
		|ВидДокументаНачисления,
		|СреднийЗаработокОбщий,
		|ВидОтпуска");
		
	Возврат СтруктураПараметровВыбора;
	
КонецФункции

// Конструирует структуру для описания создаваемого или изменяемого начисления.
//
Функция ОписаниеНачисления() Экспорт 
	
	Описание = Новый Структура(
	"Код,
	|РеквизитДопУпорядочивания,
	|Наименование,
	|КраткоеНаименование,
	|КатегорияНачисленияИлиНеоплаченногоВремени,
	|ВидНачисленияДляНУ,
	|КодДоходаНДФЛ,
	|КатегорияДохода,
	|КодДоходаСтраховыеВзносы,
	|КодДоходаСтраховыеВзносы2017,
	|СпособВыполненияНачисления,
	|ВидДокументаНачисления,
	|СпособРасчета,
	|ФормулаРасчета,
	|НачисляетсяПриРасчетеПервойПоловиныМесяца,
	|ВидВремени,
	|ОбозначениеВТабелеУчетаРабочегоВремени,
	|ЗачетНормыВремени,
	|ЗачетОтработанногоВремени,
	|ОтношениеКЕНВД,
	|ВидПособияСоциальногоСтрахования,
	|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
	|ПериодРасчетаБазовыхНачислений,
	|КоличествоМесяцевБазовогоПериода,
	|СдвигБазовогоПериода,
	|ОтборБазовых,
	|СтратегияОтраженияВСреднемЗаработке,
	|СреднийЗаработокОбщий,
	|ВключатьВСреднийЗаработокОбщий,
	|СреднийЗаработокФСС,
	|ВключатьВСреднийЗаработокФСС,
	|ВключатьВСреднийЗаработокФСС2010,
	|КлючевыеСвойства,
	|ВидОперацииПоЗарплате,
	|ВидОтпуска,
	|ВидСтажаСЗВ,
	|ВидСтажаПФР2014,
	|УчетВремениВЧасах,
	|ОпределяющиеПоказатели,
	|ЗапрашиваемыеПоказатели,
	|СвойстваПоКатегории,
	|МесяцыНачисления,
	|ЯвляетсяДоходомВНатуральнойФорме,
	|Рассчитывается,
	|КатегорияСтатистическогоНаблюдения,
	|ПоддерживаетНесколькоПлановыхНачислений,
	|УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде,
	|ВключатьВФОТ,
	|СсылкаНаОбъект"); // Содержит ссылку на объект, который уже был создан Из помощника начальной настройки программы.
	
	Возврат Описание;
	
КонецФункции

// Процедура получает объекты видов расчета по указанному описанию.
// Подробнее см. комментарий к методу СоздатьИзменитьНачисленияПоОписанию.
//
Процедура СоздатьИзменитьНачисленияПоОписаниям(Коллектор, МассивОписаний)
	
	Если МассивОписаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверить наличие по ключевым свойствам первого описания 
	// (описание ключевых свойств у них должно быть одинаковым).
	ОписаниеКлючевыхСвойств = МассивОписаний[0];
	
	НачисленияПоОписанию = НачисленияПоОписанию(МассивОписаний[0]);
	
	Если НачисленияПоОписанию.Количество() > 0 Тогда
		// Если начисления по такому описанию уже существуют, 
		// надо проверить все ли они используются, если нет - нужно их «включить».
		УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию, Истина);
		Возврат;
	КонецЕсли;
	
	// Если нет - создать по массиву описаний, не проверяя при этом на наличие.
	Для Каждого Описание Из МассивОписаний Цикл
		ДополнитьОписаниеПоСвойствамКатегории(Описание);
		СоздатьИзменитьНачисленияПоОписанию(Коллектор, Описание, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает объекты видов расчета по указанному описанию, 
// устанавливает им использование и добавляет в коллектор, 
// если начислений с указанным описанием не обнаружено, 
// они создаются и так же добавляются в коллектор.
//
// Параметры:
// 	- Коллектор - соответствие, где ключ ссылка, а значение объект вида расчета.
//	- Описание - структура с описанием начисления.
//	- ПроверятьНаличиеНачислений - признак того, что создавать начисления нужно только в случае их отсутствия.
//	- ОбновлятьНачисленияПоСсылке, если Истина, начисления, для которых ключевым свойством является Ссылка, и которые уже существуют, будут обновлены данными из описания.
//
Процедура СоздатьИзменитьНачисленияПоОписанию(Коллектор, Описание, ПроверятьНаличиеНачислений = Истина, ОбновлятьНачисленияПоСсылке = Ложь) Экспорт 
	
	НачислениеОбъект = Неопределено;
	
	ДополнитьОписаниеПоСвойствамКатегории(Описание);
	
	Если ПроверятьНаличиеНачислений Тогда
		Если Описание.КлючевыеСвойства = "Ссылка" Тогда
			НачислениеОбъект = НачислениеОбъектПоСсылке(Описание.СсылкаНаОбъект);
			Если Не ОбновлятьНачисленияПоСсылке И НачислениеОбъект <> Неопределено Тогда
				УстановитьИспользованиеНачислений(Коллектор, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Описание.СсылкаНаОбъект), Истина);
				Возврат;
			КонецЕсли;
		Иначе
			НачисленияПоОписанию = НачисленияПоОписанию(Описание);
			Если НачисленияПоОписанию.Количество() > 0 Тогда
				// Если начисления по такому описанию уже существуют, 
				// надо проверить все ли они используются, если нет - нужно их «включить».
				УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию, Истина);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НачислениеОбъект = Неопределено Тогда
		// Если начислений по указанному описанию не существует, создаем их.
		НачислениеОбъект = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		
		// Устанавливаем ссылку новому объекту.
		НачислениеСсылка = ПланыВидовРасчета.Начисления.ПолучитьСсылку();
		Описание.СсылкаНаОбъект = НачислениеСсылка;
		НачислениеОбъект.УстановитьСсылкуНового(НачислениеСсылка);	
	Иначе
		НачислениеСсылка = НачислениеОбъект.Ссылка;
		НачислениеОбъект.ВАрхиве = Ложь;
		НачислениеОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	Коллектор.Вставить(НачислениеСсылка, НачислениеОбъект);
	
	СвойстваПоКатегории = Описание.СвойстваПоКатегории;
	
	ЗаполнитьЗначенияСвойств(НачислениеОбъект, Описание);
	
	НачислениеОбъект.МесяцыНачисления.Очистить();
	Если Описание.МесяцыНачисления <> Неопределено Тогда
		Для каждого МесяцНачисления Из Описание.МесяцыНачисления Цикл
			НовыйМесяц = НачислениеОбъект.МесяцыНачисления.Добавить();
			НовыйМесяц.Месяц = МесяцНачисления;
		КонецЦикла;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(НачислениеОбъект, Коллектор);
	
	// Средний заработок (общий)
	НачислениеОбъект.СреднийЗаработокОбщий.Очистить();
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокОбщий Тогда
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокОбщий.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
		НоваяСтрока.Значение = Описание.СреднийЗаработокОбщий;
		Если Не ЗначениеЗаполнено(Описание.СреднийЗаработокОбщий) Тогда
			НоваяСтрока.Значение = СвойстваПоКатегории.СреднийЗаработокОбщий;
		КонецЕсли;
		НоваяСтрока.Индексируется = Истина;
	КонецЕсли;
	
	// Средний заработок (ФСС)
	НачислениеОбъект.СреднийЗаработокФСС.Очистить();
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС Тогда
		// 2011
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокФСС.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		НоваяСтрока.Значение = Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
	КонецЕсли;
	// База для расчета в порядке 2010 года может отличаться.
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС2010 = Неопределено Тогда
		СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС2010 = СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС;
	КонецЕсли;
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС2010 Тогда
		// 2010
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокФСС.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010;
		НоваяСтрока.Значение = Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
	КонецЕсли;

	// Базовые начисления
	НачислениеОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.УстановитьДополнительныеСвойстваНачисления(НачислениеОбъект, Описание);
	КонецЕсли;
	
	// Определяющие показатели
	ЗарплатаКадрыРасширенный.ОтметитьОпределяющиеПоказатели(НачислениеОбъект, Описание.ОпределяющиеПоказатели);	
	
	// Запрашиваемые показатели
	ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(НачислениеОбъект, Описание.ЗапрашиваемыеПоказатели);	
	
	// Некоторые признаки используются при настройке связей, поэтому рассчитаем их здесь, до записи.
	НачислениеОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект);
	НачислениеОбъект.ТребуетсяРасчетБазы = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	НачислениеОбъект.УчетВремениВЧасах = РасчетЗарплатыРасширенный.НачислениеРассчитываетсяПоЧасам(НачислениеОбъект);
	НачислениеОбъект.ЗачетОтработанногоВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(НачислениеОбъект.ВидВремени);
	
КонецПроцедуры

Процедура УстановитьИспользованиеНачислений(Коллектор, Начисления, Использование)
	
	// Если какие-то начисления уже есть в коллекторе, 
	// то устанавливаем признак использования прямо в объектах коллектора.
	Индекс = 0;
	Пока Индекс < Начисления.Количество() Цикл
		Начисление = Начисления[Индекс];
		НачислениеОбъект = Коллектор[Начисление];
		Если НачислениеОбъект = Неопределено Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		// Устанавливаем признак и удаляем начисление из массива.
		НачислениеОбъект.ВАрхиве = Не Использование;
		Если Использование Тогда
			НачислениеОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		Начисления.Удалить(Индекс);
	КонецЦикла;
	
	Если Начисления.Количество() = 0 Тогда
		// Все начисления уже обработаны.
		Возврат;
	КонецЕсли;
	
	// Запрашиваем из базы начисления, использование которых отличается от указанного.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка В(&Начисления)
		|	И Начисления.ВАрхиве <> &ВАрхиве
		|	И Начисления.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("ВАрхиве", Не Использование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Коллектор[Выборка.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Коллектор.Вставить(Выборка.Ссылка, НачислениеОбъект);
		КонецЕсли;
		НачислениеОбъект.ВАрхиве = Не Использование;
		Если Использование Тогда
			НачислениеОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОписаниеПоСвойствамКатегории(Описание)
	
	// Обновляем описание по свойствам категории.
	СвойстваПоКатегории = Описание.СвойстваПоКатегории;
	Для Каждого КлючИЗначение Из СвойстваПоКатегории Цикл
		Если Не Описание.Свойство(КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		// Обновляем только в случае, если значение для категории определено, 
		// а в описании начисления не переопределяется.
		Если КлючИЗначение.Значение <> Неопределено 
			И Описание[КлючИЗначение.Ключ] = Неопределено Тогда
			Описание[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачисленияПоОписанию(Описание)
	
	ДополнитьОписаниеПоСвойствамКатегории(Описание);
	
	// Если указаны, ключевые свойства используются для уточнения критериев отбора искомого начисления.
	Если ЗначениеЗаполнено(Описание.КлючевыеСвойства) Тогда
		Отбор = Новый Структура(Описание.КлючевыеСвойства);
		ЗаполнитьЗначенияСвойств(Отбор, Описание);
		// Если какое-то из ключевых свойств не заполнено, поиск будет неверным.
		Для Каждого КлючИЗначение Из Отбор Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Возврат Новый Массив;
			КонецЕсли;
		КонецЦикла;
		Отбор.Вставить("ПометкаУдаления", Ложь);
	Иначе 
		Отбор = Новый Структура("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Возврат НачисленияПоКатегории(Описание.КатегорияНачисленияИлиНеоплаченногоВремени, Отбор);
	
КонецФункции

Функция ВидыРасчетаКоллектораПоКатегории(Коллектор, КатегорияОтбор, Отбор = Неопределено) Экспорт 
	
	ВидыРасчетаПоКатегории = Новый Массив;
	
	Для Каждого КлючИЗначение Из Коллектор Цикл
		ВидРасчетаСсылка = КлючИЗначение.Ключ;
		ВидРасчетаОбъект = КлючИЗначение.Значение;
		Если ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, КатегорияОтбор, Отбор) Тогда
			ВидыРасчетаПоКатегории.Добавить(ВидРасчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыРасчетаПоКатегории;
	
КонецФункции

Функция ВидыРасчетаКоллектораПоОтбору(Коллектор, Отбор)
	
	ВидыРасчета = Новый Массив;
	
	Для Каждого КлючИЗначение Из Коллектор Цикл
		ВидРасчетаСсылка = КлючИЗначение.Ключ;
		ВидРасчетаОбъект = КлючИЗначение.Значение;
		СоответствуетОтбору = Истина;
		Для Каждого ЭлементОтбора Из Отбор Цикл
			ПолеОтбора = ЭлементОтбора.Ключ;
			ЗначениеОтбора = ЭлементОтбора.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Если ЗначениеОтбора.Найти(ВидРасчетаОбъект[ПолеОтбора]) = Неопределено Тогда
					СоответствуетОтбору = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВидРасчетаОбъект[ПолеОтбора] <> ЗначениеОтбора Тогда
					СоответствуетОтбору = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			ВидыРасчета.Добавить(ВидРасчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыРасчета;
	
КонецФункции

Функция КатегорияВидаРасчета(ВидРасчетаОбъект)
	
	Если ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Начисления") Тогда
		Возврат ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
	КонецЕсли;
	
	Если ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Удержания") Тогда
		Возврат ВидРасчетаОбъект.КатегорияУдержания;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОтключитьИспользованиеНачисленийПоОписанию(Коллектор, Описание) Экспорт 
	
	УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию(Описание), Ложь);

КонецПроцедуры

// Заполняет табличные части базовых и вытесняющих видов расчета для начислений, 
// содержащихся в коллекторе в соответствии со свойствами начислений.
//
Процедура НастроитьБазовыеНачисленияУдержаний(КоллекторНачислений, КоллекторУдержаний)
	
	// Обходим коллектор начислений,
	// в соответствии с категорией определяем, 
	// - из чего состоит база.
	
	// По указанным критериям делаем запрос к базе и поиск по коллектору же еще не записанных начислений, 
	// из найденных в базе начислений отбрасываем добавленные в коллектор, 
	// т.к. считаем их версию в коллекторе более актуальной.
	
	Для Каждого КлючИЗначение Из КоллекторУдержаний Цикл
		УдержаниеСсылка = КлючИЗначение.Ключ;
		УдержаниеОбъект = КлючИЗначение.Значение;
		
		ЭтоНовоеУдержание = ЗначениеЗаполнено(УдержаниеОбъект.Ссылка);
		КатегорияУдержания = УдержаниеОбъект.КатегорияУдержания;
		
		// Базовые начисления
		ОтборБазовых = Неопределено;
		Если УдержаниеОбъект.ДополнительныеСвойства.Свойство("ОтборБазовых") Тогда
			ОтборБазовых = УдержаниеОбъект.ДополнительныеСвойства.ОтборБазовых;
		КонецЕсли;
		Если ОтборБазовых <> Неопределено  
			И (РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБаза")
			Или РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБазаИсполнительногоЛиста")) Тогда
			
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисления;
			ОтборБазовых.Удалить("КатегорияНачисления");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			// ..Дополняются по условию из базы данных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				БазовыеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборБазовых), Истина);
			// Заполняем табличную часть полученными базовыми начислениями.
			Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
				ЭтоНовоеБазовоеНачисление = Ложь;
				БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
				Если БазовоеНачислениеОбъект <> Неопределено Тогда 
					ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
				КонецЕсли;
				Если Не ЭтоНовоеУдержание И Не ЭтоНовоеБазовоеНачисление Тогда 
					Продолжить;
				КонецЕсли;
				// Меняем базу существующего удержания, только если это испольнительный лист или профвзносы.
				Если Не ЭтоНовоеУдержание 
					И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ИсполнительныйЛист
					И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы Тогда 
					Продолжить;
				КонецЕсли;
				Если УдержаниеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
					УдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Если есть зависимые от начислений в коллекторе удержания, нужно обновить их базу.
	СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	Для Каждого КлючИЗначение Из СвойстваУдержаний Цикл
		КатегорияУдержания = КлючИЗначение.Ключ;
		СвойстваУдержания = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(КатегорияУдержания) Тогда
			Продолжить;
		КонецЕсли;
		
		// Базовые начисления
		ОтборБазовых = СвойстваУдержания.ОтборБазовых;
		Если ОтборБазовых <> Неопределено Тогда
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисления;
			ОтборБазовых.Удалить("КатегорияНачисления");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			Если БазовыеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, являющиеся базовыми для данной категории удержания.
				// Зависимые удержания могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ЗависимыеУдержания = ВидыРасчетаКоллектораПоКатегории(КоллекторУдержаний, КатегорияУдержания);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗависимыеУдержания, 
					РасчетЗарплаты.УдержанияПоКатегории(КатегорияУдержания), Истина);
				Для Каждого ЗависимоеУдержание Из ЗависимыеУдержания Цикл
					ЗависимоеУдержаниеОбъект = КоллекторУдержаний[ЗависимоеУдержание];
					ДобавленоВКоллектор = Ложь;
					Если ЗависимоеУдержаниеОбъект = Неопределено Тогда
						ЗависимоеУдержаниеОбъект = ЗависимоеУдержание.ПолучитьОбъект();
						КоллекторУдержаний.Вставить(ЗависимоеУдержание, ЗависимоеУдержаниеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					ЭтоНовоеЗависимоеУдержание = Не ЗначениеЗаполнено(ЗависимоеУдержаниеОбъект.Ссылка);
					// Определяем, если вообще зависимому начислению нужен список базовых видов расчета.
					Обновлено = Ложь;
					Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ЗависимоеУдержаниеОбъект.Показатели, "РасчетнаяБаза")
						Или РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ЗависимоеУдержаниеОбъект.Показатели, "РасчетнаяБазаИсполнительногоЛиста") Тогда
						Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
							ЭтоНовоеБазовоеНачисление = Ложь;
							БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
							Если БазовоеНачислениеОбъект <> Неопределено Тогда 
								ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
							КонецЕсли;
							Если Не ЭтоНовоеЗависимоеУдержание И Не ЭтоНовоеБазовоеНачисление Тогда 
								Продолжить;
							КонецЕсли;
							// Меняем базу существующего удержания, только если это испольнительный лист или профвзносы.
							Если Не ЭтоНовоеЗависимоеУдержание 
								И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ИсполнительныйЛист
								И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы Тогда 
								Продолжить;
							КонецЕсли;
							Если ЗависимоеУдержаниеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
								ЗависимоеУдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
								Обновлено = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторУдержаний.Удалить(ЗависимоеУдержание);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет комплекс процедур по обработке накопленных в коллекторе начислений.
//
Процедура ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний = Неопределено) Экспорт
	
	// Выполняем настройку связей созданных видов расчета.
	НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	
	Если КоллекторУдержаний <> Неопределено Тогда
		// Заполняем список базовых начислений для удержаний.
		НастроитьБазовыеНачисленияУдержаний(КоллекторНачислений, КоллекторУдержаний);
	КонецЕсли;
	
	// Расставляем порядок для вновь созданных видов расчета.
	ЗаполнитьПорядокНачислений(КоллекторНачислений);
	
	// Выполняем дозаполнение и пакетную запись начислений.
	РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(КоллекторНачислений);
	
	// Добавляем к записываемым объектам все дозаполняемые.
	ПакетВидовРасчета = Новый Соответствие;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		ПакетВидовРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// .. и удержания
	Если КоллекторУдержаний <> Неопределено Тогда
		Для Каждого КлючИЗначение Из КоллекторУдержаний Цикл
			ПакетВидовРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Для всех видов расчета коллектора, несмотря на пакетную запись, 
	// устанавливаем признак для обновления вторичных данных.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
КонецПроцедуры

// Упорядочивает начисления в плане видов расчета в соответствии с порядком категорий.
//
Процедура ЗаполнитьПорядокНачислений(КоллекторНачислений) Экспорт 
	
	// Порядок начислений должен соответствовать последовательности категорий.
	// Для того, чтобы "вставить" созданные начисления между существующими, 
	// придется перезаписывать все начисления, порядок которых ниже (больше то есть).
	// 1. Определяем категорию вновь созданных начислений коллектора с минимальным порядком.
	// 2. Выбираем из ИБ все начисления (исключая начисления коллектора) с категорией, порядок которой меньше указанной.
	// 3. Добавляем выбранные начисления в коллектор, параллельно заполняя таблицу с колонками ПорядокКатегории,
	// Начисление, ВновьСоздано, РеквизитДопУпорядочивания.
	// 4. Сортируем полученную таблицу значений, обходим ее, последовательно расставляя начислениям коллектора реквизит
	// доп упорядочивания.
	
	// Составляем соответствие порядка категорий.
	ПорядокКатегорий = Новый Соответствие;
	Индекс = 0;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		ПорядокКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя], Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("ПорядокКатегории", Новый ОписаниеТипов("Число"));
	ТаблицаСортировки.Колонки.Добавить("КатегорияНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	ТаблицаСортировки.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаСортировки.Колонки.Добавить("ВновьСоздано", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	// Для каждого вновь созданного начисления определяем место в списке, куда мы его будем вставлять. 
	// Для этого определяем минимальный реквизит упорядочивания для категории с порядком больше вновь созданного.
	
	// Заполняем таблицу сортировки начислениями из коллектора.
	НачисленияКоллектора = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		НачисленияКоллектора.Добавить(НачислениеСсылка);
		ПорядокКатегории = ПорядокКатегорий[НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени];
		// Добавляем строку в таблицу сортировки.
		НоваяСтрока = ТаблицаСортировки.Добавить();
		НоваяСтрока.ПорядокКатегории = ПорядокКатегории;
		НоваяСтрока.КатегорияНачисления = НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
		НоваяСтрока.Начисление = НачислениеСсылка;
		НоваяСтрока.ВновьСоздано = НачислениеОбъект.Ссылка.Пустая();
		НоваяСтрока.РеквизитДопУпорядочивания = НачислениеОбъект.РеквизитДопУпорядочивания;
	КонецЦикла;
	
	Если ТаблицаСортировки.НайтиСтроки(Новый Структура("ВновьСоздано", Истина)).Количество() = 0 Тогда
		// Если нет новых начислений, то ничего не нужно делать.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Для каждого вновь созданного начисления определяем реквизит упорядочивания - это минимального реквизит
	// упорядочивания следующей категории.
	// Если следующей по порядку категории нет ни одного начисления, получаем максимальный реквизит упорядочивания, т.е.
	// вставлять будем в самый конец списка.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСортировки.Начисление,
	|	ТаблицаСортировки.КатегорияНачисления,
	|	ТаблицаСортировки.ВновьСоздано
	|ПОМЕСТИТЬ ВТТаблицаСортировки
	|ИЗ
	|	&ТаблицаСортировки КАК ТаблицаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСортировки.Начисление,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени.Порядок > Категории.Порядок
	|				ТОГДА Начисления.РеквизитДопУпорядочивания
	|		КОНЕЦ) КАК РеквизитУпорядочивания,
	|	МАКСИМУМ(Начисления.РеквизитДопУпорядочивания) КАК МаксимальныйРеквизитУпорядочивания
	|ИЗ
	|	ВТТаблицаСортировки КАК ТаблицаСортировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.КатегорииНачисленийИНеоплаченногоВремени КАК Категории
	|		ПО (Категории.Ссылка = ТаблицаСортировки.КатегорияНачисления)
	|			И (ТаблицаСортировки.ВновьСоздано)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСортировки.Начисление";
	
	Запрос.УстановитьПараметр("ТаблицаСортировки", ТаблицаСортировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МинимальныйРеквизитУпорядочивания = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = ТаблицаСортировки.Найти(Выборка.Начисление, "Начисление");
			Если Выборка.РеквизитУпорядочивания = Null Тогда
				СтрокаТаблицы.РеквизитДопУпорядочивания = Выборка.МаксимальныйРеквизитУпорядочивания;
			Иначе
				СтрокаТаблицы.РеквизитДопУпорядочивания = Выборка.РеквизитУпорядочивания;
				Если МинимальныйРеквизитУпорядочивания = Неопределено Тогда
					МинимальныйРеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
				Иначе	
					Если СтрокаТаблицы.РеквизитДопУпорядочивания < МинимальныйРеквизитУпорядочивания Тогда
						МинимальныйРеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если минимальный реквизит упорядочивания не заполнен, то или начислений в ИБ вообще нет, 
	// или нет ни одного начисления, следующего за вновь созданным.
	Если МинимальныйРеквизитУпорядочивания <> Неопределено Тогда
		// Выбираем из ИБ все начисления, следующие после вновь созданных,
		// (исключаем начисления коллектора, т.к. они уже выбраны).
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени.Порядок КАК ПорядокКатегории,
		|	Начисления.РеквизитДопУпорядочивания
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.РеквизитДопУпорядочивания >= &РеквизитУпорядочивания
		|	И НЕ Начисления.Ссылка В (&НачисленияКоллектора)";
		
		Запрос.УстановитьПараметр("НачисленияКоллектора", НачисленияКоллектора);
		Запрос.УстановитьПараметр("РеквизитУпорядочивания", МинимальныйРеквизитУпорядочивания);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Добавляем выбранные начисления в коллектор, параллельно заполняя таблицу сортировки.
		Пока Выборка.Следующий() Цикл
			КоллекторНачислений.Вставить(Выборка.Ссылка, Выборка.Ссылка.ПолучитьОбъект());
			НоваяСтрока = ТаблицаСортировки.Добавить();
			НоваяСтрока.ПорядокКатегории = Выборка.ПорядокКатегории;
			НоваяСтрока.КатегорияНачисления = Выборка.КатегорияНачисления;
			НоваяСтрока.Начисление = Выборка.Ссылка;
			НоваяСтрока.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания;
			НоваяСтрока.ВновьСоздано = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем полученную таблицу значений, обходим ее, последовательно расставляя начислениям коллектора реквизит доп
	// упорядочивания.
	ТаблицаСортировки.Сортировать("РеквизитДопУпорядочивания, ВновьСоздано УБЫВ, ПорядокКатегории");
	РеквизитУпорядочивания = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		Если РеквизитУпорядочивания = Неопределено Тогда
			РеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			Если РеквизитУпорядочивания = 0 Тогда
				// Ноль подсистема настройки порядка воспринимает как незаполненный реквизит, поэтому инициализируем единицей.
				РеквизитУпорядочивания = 1;
				СтрокаТаблицы.РеквизитДопУпорядочивания = РеквизитУпорядочивания;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.РеквизитДопУпорядочивания > РеквизитУпорядочивания Тогда
			РеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			Продолжить;
		КонецЕсли;
		РеквизитУпорядочивания = РеквизитУпорядочивания + 1;
		СтрокаТаблицы.РеквизитДопУпорядочивания = РеквизитУпорядочивания;
	КонецЦикла;
	
	// Устанавливаем реквизит упорядочивания самому начислению в коллекторе.
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		НачислениеОбъект = КоллекторНачислений[СтрокаТаблицы.Начисление];
		НачислениеОбъект.РеквизитДопУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВременнойНетрудоспособности()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений оплаты больничного.
//
Функция КатегорииОплатыБольничного() Экспорт

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВытесненияКомандировки()

	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВытесненияОтпускаНаСанаторноКурортноеЛечение()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВытесненияОтпуска()
	
	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияКомандировки());

	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, характеризующих отклонения по текущим настройкам базы.
//
Функция КатегорииВытесненияОплатыТруда()

	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияКомандировки());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияОтпуска());
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);

	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание);
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами);

	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, которые входят в базу надбавок.
//
Функция КатегорииБазаНадбавок()
	
	КатегорииБазовыхНачисленийНадбавок = Новый Массив;
	КатегорииБазовыхНачисленийНадбавок.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	КатегорииБазовыхНачисленийНадбавок.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	Возврат КатегорииБазовыхНачисленийНадбавок;
	
КонецФункции

// Функция возвращает структуру с описанием отбора начислений, которые входят в базу РК и СН.
//
Функция ОтборБазаРКиСН()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	
	ОтборБазовых = Новый Структура;
	ОтборБазовых.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Категории);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеОтбораНачисленийБазаРКиСН(ОтборБазовых);
	КонецЕсли;

	Возврат ОтборБазовых;
	
КонецФункции

// Функция возвращает массив категорий начислений, которые входят в базу премий.
//
Функция КатегорииБазаПремии()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, являющихся пособиями по уходу за ребенком.
//
Функция КатегорииПособийПоУходуЗаРебенком() Экспорт
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим);
	
	Возврат Категории;
	
КонецФункции

// Функция возвращает начисления, являющиеся пособиями по уходу за ребенком.
//
Функция НачисленияПособийПоУходуЗаРебенком() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий)");
	
	Запрос.УстановитьПараметр("КатегорииПособий", КатегорииПособийПоУходуЗаРебенком());
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачисленияПособий = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НачисленияПособий.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат НачисленияПособий;
	
КонецФункции

// Составляет массив категорий прогула и приравненных к ним.
//
Функция КатегорииПрогула() Экспорт
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);

	Возврат КатегорииНачислений;
	
КонецФункции

Функция КатегорииНеоплачиваемыхОтсутствий() Экспорт
	
	КатегорииПоСвойствам = КатегорииПоСвойствамНачислений();
	Возврат КатегорииПоСвойствам.НеоплачиваемоеВремя;
	
КонецФункции

Функция ОтборВытесняющихПоУмолчанию()
	
	// Вытесняющими могут быть только "целодневные" начисления.
	ОтборВытесняющих = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени, ВидВремени");
	ОтборВытесняющих.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневныеВидыРабочегоВремени();

	Возврат ОтборВытесняющих;
	
КонецФункции

Функция ОтборВедущихПоУмолчанию()
	
	// Ведущими по умолчанию назначаются внутрисменные отклонения.
	ОтборВедущих = Новый Структура("ВидВремени");
	ОтборВедущих.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;

	Возврат ОтборВедущих;
	
КонецФункции

Функция ОтборБазовыхПоУмолчанию() Экспорт 
	
	ОбозначенияВТабеле = Новый Массив;
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	
	ОтборБазовых = Новый Структура;
	ОтборБазовых.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаНадбавок());
	ОтборБазовых.Вставить("ТребуетсяРасчетБазы", Ложь);
	ОтборБазовых.Вставить("ОбозначениеВТабелеУчетаРабочегоВремени", ОбозначенияВТабеле);

	Возврат ОтборБазовых;
	
КонецФункции

Функция НачислениеОбъектПоСсылке(Ссылка)

	НачислениеОбъект = Неопределено;
	
	Если Ссылка <> Неопределено Тогда
		НачислениеОбъект = Ссылка.ПолучитьОбъект();
	КонецЕсли;

	Возврат НачислениеОбъект;
	
КонецФункции 

Процедура ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(НедоступныеСвойства)
	
	НедоступныеСвойства.Добавить("СпособОтраженияЗарплатыВБухучете");
	НедоступныеСвойства.Добавить("ОтношениеКЕНВД");
	НедоступныеСвойства.Добавить("СтатьяФинансирования");
	НедоступныеСвойства.Добавить("СтатьяРасходов");
	НедоступныеСвойства.Добавить("СтратегияОтраженияВУчете");
	
КонецПроцедуры	

Функция РезультатПроверкиНастройкиПриоритетаНачислений(СписокНачислений, ИмяТаблицы) Экспорт
	
	ТребуетсяДобавить = Новый Массив;
	ТребуетсяУдалить = Новый Массив;
	
	УникальныеНачисленияДляДобавления = Новый Соответствие;
	УникальныеНачисленияДляУдаления = Новый Соответствие;
	
	Если ИмяТаблицы = "ВытесняющиеВидыРасчета" Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка,
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
		               |ГДЕ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка В(&СписокНачислений)
		               |	И НЕ НачисленияВытесняющиеВидыРасчета.ВидРасчета В (&СписокНачислений)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеНачисленияДляДобавления[Выборка.ВидРасчета] = Неопределено Тогда 
				ТребуетсяДобавить.Добавить(Выборка.ВидРасчета);
				УникальныеНачисленияДляДобавления.Вставить(Выборка.ВидРасчета, Истина);
			КонецЕсли;
			Если УникальныеНачисленияДляУдаления[Выборка.Ссылка] = Неопределено Тогда 
				ТребуетсяУдалить.Добавить(Выборка.Ссылка);
				УникальныеНачисленияДляУдаления.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка,
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
		               |ГДЕ
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета В(&СписокНачислений)
		               |	И НЕ НачисленияВытесняющиеВидыРасчета.Ссылка В (&СписокНачислений)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеНачисленияДляДобавления[Выборка.Ссылка] = Неопределено Тогда 
				ТребуетсяДобавить.Добавить(Выборка.Ссылка);
				УникальныеНачисленияДляДобавления.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
			Если УникальныеНачисленияДляУдаления[Выборка.ВидРасчета] = Неопределено Тогда 
				ТребуетсяУдалить.Добавить(Выборка.ВидРасчета);
				УникальныеНачисленияДляУдаления.Вставить(Выборка.ВидРасчета, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПроверки = Новый Структура("ТребуетсяДобавить, ТребуетсяУдалить", ТребуетсяДобавить, ТребуетсяУдалить);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция КатегорииНачисленийВнутреннихСовместителейИПодработок() Экспорт
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего);
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция КатегорииНачисленийПодработок() Экспорт
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение);
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция КатегорииНачисленийСтатистическогоУчетаТ57ТарифногоЗаработка()
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция КатегорииНачисленийСтатистическогоУчетаТ57ВыплатПоРайонномуРегулированию()
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция КатегорииНачисленийСтатистическогоУчетаТ57ДругихВыплат()
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	
	Возврат СписокКатегорий;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.5";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьНастройкиРасчетаБазовыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.6";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьВторичныеДанныеНастройкиНачисленийДляУчетаСреднего";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.8";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВидДокументаНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьКатегорииНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.8";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьКатегориюБольничногоЗаСчетРаботодателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.19";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПризнакТребуетсяРасчетВремени";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачислениеПоказателиОплатаДнейУходаЗаДетьмиИнвалидами";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.26";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПоказателиПредопределенныхСпособовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.28";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьФормулуРасчетаНачисленийОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.31";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ИзменитьКодДоходаСтраховыеВзносыДляПособияПоУходуЗаРебенкомДоПолутораЛет";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.32";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВытесняемыеВидыРасчетовДляОтпусков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.35";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УдалитьПустыеСтрокиИзТаблицыВытесняющихВидовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.34";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьВидВремениВнутрисменныхОтклонений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.44";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьРеквизитНачисленийСтратегияОтраженияВУчете";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.60";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьНастройкиУчетаВремениНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.65";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьЗависимостиНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.7";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьИспользованиеПоказателяВремяВДняхЧасах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВидРабочегоВремениВПособияхПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.39";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьСоставПоказателейНачисленийПредопределенногоСпособаРасчетаОплатаПростоя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.12";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуВнутрисменногоПростояПоВинеРаботодателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.13";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуСдельногоЗаработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.14";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуОплатыЗаДонорство";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.20";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УдалитьНачисленияБезЗачетаНормыВремениИзСпискаВытесняющих";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.3";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВедущиеНачисленияВнутрисменнымиОтклонениями";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.13";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьКатегориюНеявкиПоНевыясненнымПричинам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьПризнакЗачетНормыВремени";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьФормулуНатуральногоДохода";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.28";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьПризнакУчетВремениВЧасах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуОплатыВыходногоПособия";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.28";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ПереименоватьВидРасчетаБолезниБезОплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.30";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьВидНачисленияДляНалоговогоУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.4";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьВедущиеНачисленияНачисленийЗаТекущийКварталГод";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.7";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПризнакТребуетсяРасчетОтработаноДнейВсего";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.11";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПризнакУчетВремениВДняхЧасах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.13";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуРасчетаОплатыПраздничныхВыходныхДней";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.24";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьВидДокументаНачисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.2";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуРасчетаУчебногоОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.6";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуРасчетаДоплатыЗаНочныеВечерниеЧасы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.4";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьПризнакНачисляетсяПриРасчетеПервойПоловиныМесяца";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.19";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ИсправитьЗапрашиватьПриВводеПоказателейСтажа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.25";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ИсправитьКодДоходаНДФЛНачисленийОплатыОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.29";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьВторичныеДанныеНачисленийИспользующихПоказательВремяВДняхЧасах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.14";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УстановитьПризнакНачисляетсяПриРасчетеПервойПоловиныМесяцаНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.70";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ПовыситьОчередностьРасчетаНачислениямТребующимРасчетаБазыЗаПрошлыйПериод";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.20";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ВосстановитьФормулуНачисленийОтпускаИКомпенсацииОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.5";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьЗначениеПериодРасчетаБазовыхНачисленийПремии";
	                              	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.8";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуРасчетаНачисленийПоСреднемуЗаработку";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.14";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьВторичныеДанныеНачисленийСОперативнымиПоказателями";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.2";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ИсправитьСчетчикиПоказателейНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.3";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьВидВремениОплатыПерерывовДляКормленияРебенка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.28";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачисленияДоплатыЗаПраздничныеДниПоГрафику";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.41";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьПометкуОсновногоПоказателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.5";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОчиститьВидДокументаНачисленийНеВыполняемыхПоОтдельномуДокументу";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.9";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьЗначениеВидаСтажаПФР2014Начислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.13";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьКраткиеНаименованияВидовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.21.4";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьПризнакЗапрашиватьПриВводеДляРазмераДоплатыЗаСовмещение";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.124";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьНачисленияПростоев";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.171";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьПериодРасчетаБазовыхНачисленийДоплатыДоСреднегоЗаработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.23";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьИспользуетСреднийЗаработокОбщий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.33";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаменитьПоказательСтоимостьЧасаНаСтоимостьДняЧасаВПростое";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.46";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СброситьПризнакПериодДействияБазовыйДляРКиСН";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.79";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьСдвигБазовогоПериодаНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.2";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьКатегориюСтатистическогоНаблюденияНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.36";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВидыВремениВидовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.51";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьВключатьВФОТДляНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.81";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УстановитьПризнакПоддерживаетНесколькоПлановыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.3";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УстановитьФОТНеРедактируется";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.9";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьФормулуНачисленийСПоказателямиЗависящимиОтДругихПоказателей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.24";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьСтратегияОтраженияВСреднемЗаработке";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.26";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачислениеПоказателиДниОплаченныеДоНачалаЭксплуатации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.45";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОчиститьСписокВытесняющихНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.6";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьКатегориюСтатистическогоНаблюденияНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.16";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УстановитьЗапрашиваемостьПоказателяРазмерДоплатыЗаСовмещение";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.28";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьПризнакТребуетсяРасчетНормыВремениДляНачисленийСодержащихСтоимостьЧаса";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.31";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УстановитьЗапрашиваемостьПоказателяСреднийЗаработокОбщий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.41";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОчиститьВытесняющиеНачисленийВЦеломЗаМесяц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.49";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьВидРабочегоВремениПочасовыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.11";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачислениеКомпенсацияМоральногоВреда";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.11";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачислениеОплатаВынужденногоПростоя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.19";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаменитьПоказателиПростояНаТарифПростоя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьСписокПоказателейРасчетаПростоя";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bc22855d-ad93-4375-b9b9-b503b4cf1bc6");
	Обработчик.Комментарий = НСтр("ru = 'Обновление списка показателей расчета простоя.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.68";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьСоставВидовВремени";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26ea12ec-57cf-4ca3-9c7e-5a36d1c1f66f");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение состава видов времени.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.86";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьСписокПоказателейДоплатыДоСреднегоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("038e7487-a576-4218-b049-ccddefc6d7ba");
	Обработчик.Комментарий = НСтр("ru = 'Обновление списка показателей доплаты до среднего заработка.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.57";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СкорректироватьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ab1e419d-c711-4f88-afe1-ed5a122ef577");
	Обработчик.Комментарий = НСтр("ru = 'Обновление списка показателей доплаты до среднего заработка.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.124";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьСпособРасчетаДляНачисленийОплатаДнейУходаЗаДетьмиИнвалидами";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4147dcba-b753-40e2-88f0-935f153ae595");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.6";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачисленияНеявкаПоБолезни";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.83";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьВторичныеДанныеНачисленийНеявкаПоБолезни";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ed369b02-26ab-4ed2-ae05-035ed4cee8ab");
	Обработчик.Комментарий = НСтр("ru = 'Обновление начислений категории ""Неявка по болезни"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.55";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПризнакЕстьВытесняющиеНачисления";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9094b972-19fa-4826-8f9e-da73b5f48bc6");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.4.15";
		Обработчик.Процедура = "ПланыВидовРасчета.Начисления.СоздатьНачисленияКомпенсацийЗаНеотработанныеДниПриУвольнении";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("96311d77-e9ca-4d62-a0e7-0d3e6926543d");
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.36";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьКатегорииСтатистическогоНаблюденияТ57";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3a67ba8e-33fe-4c44-9d6c-c76f5dce63ad");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.159";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.УточнитьКодДоходаНДФЛКомпенсацияОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d4a23a04-be94-4aef-b9cb-b118f21011c3");
	Обработчик = Обработчики.Добавить();
	
	Обработчик.Версия = "3.1.5.51";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ЗаполнитьПоказетелиНачисленияОтпускаПострадавшимВАварииЧАЭС";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9741b4f0-3d15-45cd-a7e9-22ce3b94a9b3");
	
	Обработчик.Версия = "3.1.5.123";
	Обработчик.Процедура = "ПланыВидовРасчета.Начисления.ОбновитьОсновнойПоказательНачисленийОтСтажа";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("76411396-e67f-4aa6-9718-700c46ddf1c2");
	
КонецПроцедуры

Процедура ОбновитьНастройкиРасчетаБазовыхНачислений() Экспорт

	// Процедура заполняет настройки периода базовых начислений 
	// в связи с расширением структуры данных.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц) КАК ПериодРасчетаБазовыхНачислений,
	|	1 КАК КоличествоМесяцевБазовогоПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
	|				И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодДействияБазовый
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
	|						И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ <> Начисления.ПериодДействияБазовый
	|			ИЛИ Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВторичныеДанныеНастройкиНачисленийДляУчетаСреднего() Экспорт

	// В связи с вводом реквизитов, определяющих использование начисления 
	// в расчете среднего заработка, необходимо заполнение этих вторичных данных
	// для уже существующих начислений.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК Общий
	|				ГДЕ
	|					Общий.Ссылка = Начисления.Ссылка
	|					И Общий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВходитВУчетОбщегоСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК ФСС
	|				ГДЕ
	|					ФСС.Ссылка = Начисления.Ссылка
	|					И ФСС.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.НеВключать))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВходитВУчетСреднегоЗаработкаФСС
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(Начисления.ВходитВУчетОбщегоСреднегоЗаработка <> ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК Общий
	|						ГДЕ
	|							Общий.Ссылка = Начисления.Ссылка
	|							И Общий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ Начисления.ВходитВУчетСреднегоЗаработкаФСС <> ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК ФСС
	|						ГДЕ
	|							ФСС.Ссылка = Начисления.Ссылка
	|							И ФСС.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.НеВключать))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидДокументаНачислений() Экспорт
	
	// Заполняет реквизит ВидДокументаНачисления в связи с его добавлением.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Больничный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.БольничныйЛист)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""БольничныйЗаСчетРаботодателя""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.БольничныйЛист)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Командировка""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускБезОплатыПоТКРФ""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускЗаСвойСчет""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускБезОплатыУчебный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускБезОплатыПоТКРФ""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускЗаСвойСчет""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускБезОплатыУчебный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Невыход""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Прогул""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойОтОкладаПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоТарифуПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоСреднемуЗаработкуПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойОтОкладаПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоТарифуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойЧасовойОтОкладаПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойЧасовойПоТарифуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоСреднемуЗаработкуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускОсновной""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""КомпенсацияОтпускаОсновного""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускСеверный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменнаяКомандировка""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйНевыход""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйПрогул""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.ВидОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|	КОНЕЦ КАК ВидДокументаНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|	И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПустаяСсылка)
	|	И (НЕ Начисления.УдалитьИдентификаторОбъекта ПОДОБНО """"
	|			ИЛИ Начисления.ВидОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидДокументаНачисления = Выборка.ВидДокументаНачисления;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция КатегорииИдентифицируемыхНачислений()
	
	КатегорииНачислений = Новый ТаблицаЗначений;
	КатегорииНачислений.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(256)));
	КатегорииНачислений.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));

	ДобавитьКатегориюНачисления(КатегорииНачислений, "Оклад", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "СдельныйЗаработок", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "НадбавкаЗаВредность", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "НадбавкаЗаВыслугуЛет", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "РайонныйКоэффициент", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "СевернаяНадбавка", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияЕжемесячнаяПроцентом", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияЕжемесячнаяСуммой", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияГодоваяПроцентом", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияГодоваяСуммой", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияКвартальнаяПроцентом", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияКвартальнаяСуммой", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПремияРазовая", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	
	// + вид времени
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаПраздничныхИВыходныхДней", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ДоплатаЗаВыручкуОтРеализации", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ДоплатаЗаВыполнениеПлана", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ДоплатаДоСреднегоЗаработка", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ДоплатаЗаДниБолезни", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "Больничный", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "БольничныйЗаСчетРаботодателя", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускПоБеременностиИРодам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускПоБеременностиИРодамВоеннослужащего", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамВоеннослужащего);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "БольничныйПриТравмеНаПроизводстве", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "БольничныйПриПрофзаболевании", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтсутствиеПоБолезни", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтсутствиеПоБолезниПоБеременностиИРодам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВыходноеПособиеПриУвольнении", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "Командировка", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускБезОплатыПоТКРФ", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "Отгул", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускЗаСвойСчет", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускБезОплатыУчебный", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "Невыход", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "НевыходПоБолезни", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "Прогул", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменнаяКомандировка", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйОтпускБезОплатыПоТКРФ", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйОтпускЗаСвойСчет", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйОтпускБезОплатыУчебный", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйНевыход", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйНевыходПоБолезни", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ВнутрисменныйПрогул", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойОтОкладаПоДням", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойПоТарифуПоДням", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойОтОкладаПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойПоТарифуПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойЧасовойОтОкладаПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойЧасовойПоТарифуПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойПоСреднемуЗаработкуПоДням", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПростойПоСреднемуЗаработкуПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "МатериальнаяПомощьПриОтпуске", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаДнейСдачиКрови", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОтпускОсновной", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "КомпенсацияОтпускаОсновного", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОкладПоЧасам", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ТарифЧасовой", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПособиеПоУходуЗаРебенкомДоПолутораЛет", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПособиеПоУходуЗаРебенкомДоТрехЛет", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим);
	
	// + вид времени
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаНочныхЧасов", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	// + вид времени
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаВечернихЧасов", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	// + вид времени
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаВремениКормленияРебенка", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	// + вид времени
	ДобавитьКатегориюНачисления(КатегорииНачислений, "ОплатаСверхурочныхЧасов", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Процедура ДобавитьКатегориюНачисления(КатегорииНачислений, ИдентификаторНачисления, Категория)
	
	НоваяСтрока = КатегорииНачислений.Добавить();
	НоваяСтрока.Идентификатор = ИдентификаторНачисления;
	НоваяСтрока.Категория = Категория;
	
КонецПроцедуры

Процедура ЗаполнитьКатегорииНачислений() Экспорт
	
	// Заполняет категории начислений, 
	// в том случае, если категория не заполнена.
	// Для идентифицируемых начислений определяется таблица соответствия, 
	// для всех остальных начислений предпринимается попытка подобрать категорию на основании их свойств.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КатегорииНачислений.Идентификатор,
	|	КатегорииНачислений.Категория
	|ПОМЕСТИТЬ ВТКатегорииНачислений
	|ИЗ
	|	&КатегорииНачислений КАК КатегорииНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкаСреднегоОбщий.Ссылка
	|ПОМЕСТИТЬ ВТПремии
	|ИЗ
	|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоОбщий
	|ГДЕ
	|	НастройкаСреднегоОбщий.Значение В (ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой), ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом), ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой), ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА КатегорииНачислений.Категория ЕСТЬ НЕ NULL 
	|			ТОГДА КатегорииНачислений.Категория
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|				КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|				КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни)
	|				КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Премии.Ссылка ЕСТЬ НЕ NULL 
	|								ИЛИ Начисления.НачисляетсяВЦеломЗаМесяц
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Премия)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КатегорияНачисления
	|ПОМЕСТИТЬ ВТЗаполняемыеКатегории
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииНачислений КАК КатегорииНачислений
	|		ПО (КатегорииНачислений.Идентификатор = Начисления.УдалитьИдентификаторОбъекта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПремии КАК Премии
	|		ПО (Премии.Ссылка = Начисления.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаполняемыеКатегории.Ссылка,
	|	ЗаполняемыеКатегории.КатегорияНачисления КАК КатегорияНачисленияИлиНеоплаченногоВремени
	|ИЗ
	|	ВТЗаполняемыеКатегории КАК ЗаполняемыеКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ЗаполняемыеКатегории.Ссылка = Начисления.Ссылка
	|			И (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КатегорииНачислений", КатегорииИдентифицируемыхНачислений());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Получаем соответствие свойств.
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	// Массив реквизитов плана видов расчета.
	ИменаРеквизитов = ОбщегоНазначения.ВыгрузитьКолонку(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты, "Имя");
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		// Заполняем свойства по категории, если они определены.
		СвойстваНачисления = СвойстваНачислений[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени];
		Для Каждого КлючИЗначение Из СвойстваНачисления Цикл
			Если ИменаРеквизитов.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				НачислениеОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьКатегориюБольничногоЗаСчетРаботодателя() Экспорт
	
	// Устанавливает вновь добавленную категорию начисления больничному листу за счет работодателя.
	// Срабатывает по условию в том числе на то, что пока ни одного такого начисления нет в системе.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя) КАК КатегорияНачисленияИлиНеоплаченногоВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|	И Начисления.ВидОперацииПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ПланВидовРасчета.Начисления
	|				ГДЕ
	|					Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакТребуетсяРасчетВремени() Экспорт
	
	// Устанавливает признак ТребуетсяРасчетВремени начислениям, 
	// для которых он ранее, при создании ошибочно не был установлен.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ТребуетсяРасчетВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|	И НЕ Начисления.ТребуетсяРасчетВремени");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНачислениеПоказателиОплатаДнейУходаЗаДетьмиИнвалидами() Экспорт 
	
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам();
	
	КоллекторНачислений = Новый Соответствие;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ИНВ'");
	Описание.Наименование			= НСтр("ru = 'Оплата дней ухода за детьми-инвалидами'");
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	ПланыВидовРасчета.Начисления.НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	ПланыВидовРасчета.Начисления.ЗаполнитьПорядокНачислений(КоллекторНачислений);
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиПредопределенныхСпособовРасчета() Экспорт

	// Нужно обновить начисления с предопределенным способом расчета, 
	// в которых эти показатели задействованы.
	
	// Выбираем начисления с предопределенным способом в таблице которых не хватает показателей.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПоказателей.СпособРасчета,
	|	ТаблицаПоказателей.Показатель
	|ПОМЕСТИТЬ ВТТаблицаПоказателей
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК ВидРасчета,
	|	ТаблицаПоказателей.Показатель
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПоказателей КАК ТаблицаПоказателей
	|		ПО (ТаблицаПоказателей.СпособРасчета = Начисления.СпособРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.Ссылка = ПоказателиНачислений.Ссылка
	|			И (ТаблицаПоказателей.Показатель = ПоказателиНачислений.Показатель)
	|ГДЕ
	|	ПоказателиНачислений.Показатель ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", РасчетЗарплатыРасширенный.ТаблицаПоказателейПредопределенныхСпособовРасчета());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
		ВидРасчетаОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ВидРасчетаОбъект.Показатели.Добавить();
			НоваяСтрока.Показатель = Выборка.Показатель;
			НоваяСтрока.ИспользоватьПриРасчете = Истина;
		КонецЦикла;
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьФормулуРасчетаНачисленийОтпуска() Экспорт

	// Создает показатель КоэффициентИндексацииСреднегоЗаработка 
	// и вставляет его в формулу начислений категории ОплатаОтпуска.
	
	КоэффИндексацииСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	
	Если КоэффИндексацииСсылка = Неопределено Тогда
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательКоэффициентИндексацииСреднегоЗаработка();
		ОбновитьПовторноИспользуемыеЗначения();
		КоэффИндексацииСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|				ГДЕ
	|					ПоказателиНачислений.Показатель.ИмяПредопределенныхДанных = ""КоэффициентИндексацииСреднегоЗаработка""
	|					И ПоказателиНачислений.Ссылка = Начисления.Ссылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		НачислениеОбъект.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейОтпуска * КоэффициентИндексацииСреднегоЗаработка";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(НачислениеОбъект);
		НачислениеОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект);
		МассивВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(МассивВидовРасчета);
	
КонецПроцедуры

Процедура ИзменитьКодДоходаСтраховыеВзносыДляПособияПоУходуЗаРебенкомДоПолутораЛет() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	Запрос.УстановитьПараметр("КодДоходаСтраховыеВзносы", Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени
	               |	И Начисления.КодДоходаСтраховыеВзносы <> &КодДоходаСтраховыеВзносы";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьВытесняемыеВидыРасчетовДляОтпусков() Экспорт 
	
	Отпуска = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	
	КоллекторНачислений = Новый Соответствие;
	Для Каждого НачислениеОтпуск Из Отпуска Цикл 
		КоллекторНачислений.Вставить(НачислениеОтпуск, НачислениеОтпуск.ПолучитьОбъект());
	КонецЦикла;	
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	ОтборТолькоСПериодомДействия = Новый Структура("НачисляетсяВЦеломЗаМесяц", Ложь);
	
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваНачисления = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(КатегорияНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вытесняющие начисления
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			ОтборВытесняющих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВытесняющих);
			Категория = ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборВытесняющих.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			// Начисления по условию из коллектора.
			ВытесняющиеНачисления = ПланыВидовРасчета.Начисления.ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборВытесняющих);
			Если ВытесняющиеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, вытесняющие начисления с такой категорией.
				// Вытесняемые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ВытесняемыеНачисления = ПланыВидовРасчета.Начисления.ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления, ОтборТолькоСПериодомДействия);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВытесняемыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления, ОтборТолькоСПериодомДействия), Истина);
				Для Каждого ВытесняемоеНачисление Из ВытесняемыеНачисления Цикл
					ВытесняемоеНачислениеОбъект = КоллекторНачислений[ВытесняемоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ВытесняемоеНачислениеОбъект = Неопределено Тогда
						ВытесняемоеНачислениеОбъект = ВытесняемоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ВытесняемоеНачисление, ВытесняемоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					Обновлено = Ложь;
					Для Каждого ВытесняющееНачисление Из ВытесняющиеНачисления Цикл
						Если ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Найти(ВытесняющееНачисление, "ВидРасчета") = Неопределено 
							И ВытесняемоеНачисление <> ВытесняющееНачисление Тогда
							ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ВытесняющееНачисление;
							Обновлено = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ВытесняемоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого НачислениеОтпуск Из Отпуска Цикл 
		КоллекторНачислений.Удалить(НачислениеОтпуск);
	КонецЦикла;	
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(КоллекторНачислений);
	
КонецПроцедуры

Процедура УдалитьПустыеСтрокиИзТаблицыВытесняющихВидовРасчета() Экспорт 
	
	ВидыРасчета = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачисленияВытесняющиеВидыРасчета.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	               |ГДЕ
	               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПустыеСтроки = ВидРасчетаОбъект.ВытесняющиеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", ПланыВидовРасчета.Начисления.ПустаяСсылка()));
		
		Для Каждого ТекСтрока Из ПустыеСтроки Цикл 
			ВидРасчетаОбъект.ВытесняющиеВидыРасчета.Удалить(ТекСтрока);
		КонецЦикла;
		
		ВидыРасчета.Добавить(ВидРасчетаОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчета);
	
КонецПроцедуры

Процедура СкорректироватьВидВремениВнутрисменныхОтклонений() Экспорт

	// При заполнении категории начислений не учитывается, 
	// что внутрисменные отклонения имеют ту же категорию, 
	// что и целодневные, но другой вид времени.
	// Данные метод корректирует вид времени, опираясь на идентификаторы объектов.
	
	ИдентификаторыВнутрисменныхОтклонений = Новый Массив;
	ИдентификаторыВнутрисменныхОтклонений.Добавить("ВнутрисменнаяКомандировка");
	ИдентификаторыВнутрисменныхОтклонений.Добавить("ВнутрисменныйОтпускБезОплатыПоТКРФ");
	ИдентификаторыВнутрисменныхОтклонений.Добавить("ВнутрисменныйОтпускЗаСвойСчет");
	ИдентификаторыВнутрисменныхОтклонений.Добавить("ВнутрисменныйОтпускБезОплатыУчебный");
	ИдентификаторыВнутрисменныхОтклонений.Добавить("ВнутрисменныйНевыход");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное) КАК ВидВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.УдалитьИдентификаторОбъекта В(&ИдентификаторыВнутрисменныхОтклонений)
	|	И Начисления.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторыВнутрисменныхОтклонений", ИдентификаторыВнутрисменныхОтклонений);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитНачисленийСтратегияОтраженияВУчете() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухучете.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях)
	|	КОНЕЦ КАК СтратегияОтраженияВУчете
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СтратегияОтраженияВУчете = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.СтратегияОтраженияВУчете = Выборка.СтратегияОтраженияВУчете;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьНастройкиУчетаВремениНачислений() Экспорт

	// Выполняет корректировку ранее ошибочно заполнявшихся значений вторичных данных ИспользованиеПериода и
	// НачисляетсяВЦеломЗаМесяц.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.ПериодДействияБазовый КАК ПериодДействияБазовыйУстановлено,
	|	Начисления.ИспользованиеПериода КАК ИспользованиеПериодаУстановлено,
	|	Начисления.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяцУстановлено,
	|	ВЫБОР
	|		КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительноеВремя,
	|	Начисления.СпособВыполненияНачисления КАК СпособВыполненияНачисления,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
	|				ГДЕ
	|					ПоказателиНачисления.Ссылка = Начисления.Ссылка
	|					И ПоказателиНачисления.Показатель В (&ПоказателиУчетаВремени))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПоказателиУчетаВремени,
	|	Начисления.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
	|	ВЫБОР
	|		КОГДА Начисления.ТребуетсяРасчетБазы
	|				И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетнаяБазаТекущийМесяц
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.ДополнительноеВремя КАК ДополнительноеВремя,
	|	Начисления.ЕстьПоказателиУчетаВремени КАК ЕстьПоказателиУчетаВремени,
	|	Начисления.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
	|	Начисления.РасчетнаяБазаТекущийМесяц КАК РасчетнаяБазаТекущийМесяц,
	|	Начисления.ПериодДействияБазовыйУстановлено КАК ПериодДействияБазовыйУстановлено,
	|	Начисления.ИспользованиеПериодаУстановлено КАК ИспользованиеПериодаУстановлено,
	|	Начисления.НачисляетсяВЦеломЗаМесяцУстановлено КАК НачисляетсяВЦеломЗаМесяцУстановлено,
	|	ВЫБОР
	|		КОГДА Начисления.ЕстьПоказателиУчетаВремени
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ТребуетсяРасчетБазы
	|					ТОГДА НЕ Начисления.РасчетнаяБазаТекущийМесяц
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете))
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ Начисления.ДополнительноеВремя
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК НачисляетсяВЦеломЗаМесяц
	|ПОМЕСТИТЬ ВТНачисленияНачисляетсяВЦеломЗаМесяц
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ПериодДействияБазовыйУстановлено КАК ПериодДействияБазовыйУстановлено,
	|	Начисления.ИспользованиеПериодаУстановлено КАК ИспользованиеПериодаУстановлено,
	|	Начисления.НачисляетсяВЦеломЗаМесяцУстановлено КАК НачисляетсяВЦеломЗаМесяцУстановлено,
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.ТребуетсяРасчетБазы
	|				И НЕ Начисления.РасчетнаяБазаТекущийМесяц
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.НачисляетсяВЦеломЗаМесяц
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользованиеПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ТребуетсяРасчетБазы
	|				И Начисления.РасчетнаяБазаТекущийМесяц
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодДействияБазовый,
	|	Начисления.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц
	|ПОМЕСТИТЬ ВТНачисленияВсеПризнаки
	|ИЗ
	|	ВТНачисленияНачисляетсяВЦеломЗаМесяц КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ПериодДействияБазовыйУстановлено,
	|	Начисления.ИспользованиеПериодаУстановлено,
	|	Начисления.НачисляетсяВЦеломЗаМесяцУстановлено,
	|	Начисления.ИспользованиеПериода,
	|	Начисления.ПериодДействияБазовый,
	|	Начисления.НачисляетсяВЦеломЗаМесяц
	|ИЗ
	|	ВТНачисленияВсеПризнаки КАК Начисления
	|ГДЕ
	|	(Начисления.ПериодДействияБазовыйУстановлено <> Начисления.ПериодДействияБазовый
	|			ИЛИ Начисления.ИспользованиеПериодаУстановлено <> Начисления.ИспользованиеПериода
	|			ИЛИ Начисления.НачисляетсяВЦеломЗаМесяцУстановлено <> Начисления.НачисляетсяВЦеломЗаМесяц)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПоказателиУчетаВремени", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ПакетВидовРасчета.Добавить(ВидРасчетаОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
КонецПроцедуры

Процедура СкорректироватьЗависимостиНачислений() Экспорт
	
	// Корректирует зависимости между начислениями: таблицы ведущих и вытесняющих начислений.
	
	ПакетВидовРасчета = Новый Соответствие;
	
	// 1. Среди вытесняющих начислений оставляем только начисления "целодневных" видов времени.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияВытесняющиеВидыРасчета.Ссылка
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НЕ НачисленияВытесняющиеВидыРасчета.ВидРасчета.ВидВремени В (&ЦелодневныеВидыВремени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияВытесняющиеВидыРасчета.Ссылка,
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета КАК ВытесняющийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета.ВидВремени В(&ЦелодневныеВидыВремени)
	|	И НачисленияВытесняющиеВидыРасчета.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТНачисления.Ссылка
	|			ИЗ
	|				ВТНачисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияВытесняющиеВидыРасчета.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЦелодневныеВидыВремени", Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневныеВидыРабочегоВремени());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВытесняющиеВидыРасчета.Очистить();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = Выборка.ВытесняющийВидРасчета;
		КонецЦикла;
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	// 2. Начисления, выполняемые в целом за месяц, не должны вытесняться.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.НачисляетсяВЦеломЗаМесяц
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеНачисления
	|			ГДЕ
	|				ВытесняющиеНачисления.Ссылка = Начисления.Ссылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = ПакетВидовРасчета[Выборка.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
		КонецЕсли;
		НачислениеОбъект.ВытесняющиеВидыРасчета.Очистить();
	КонецЦикла;
	
	// 3. Записываем итоговый пакет видов расчета.
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьИспользованиеПоказателяВремяВДняхЧасах() Экспорт

	// Добавляет показатель ВремяВДняхЧасах, если его нет в связи с его безусловным использованием,
	// а также подставляет его в формулы отдельных ранее ошибочно заполненных начислений.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных = ""ВремяВДняхЧасах""");
	
	// Создаем показатель ВремяВДняхЧасах, если его нет.
	Если Запрос.Выполнить().Пустой() Тогда
		ПоказательОбъект = Справочники.ПоказателиРасчетаЗарплаты.СоздатьЭлемент();
		ПоказательОбъект.Наименование = НСтр("ru = 'Время в днях (или часах)'");
		ПоказательОбъект.КраткоеНаименование = НСтр("ru = 'Время в днях (часах)'");
		ПоказательОбъект.Идентификатор = "ВремяВДняхЧасах";
		ПоказательОбъект.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника;
		ПоказательОбъект.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Числовой;
		ПоказательОбъект.ЗначениеРассчитываетсяАвтоматически = Истина;
		ПоказательОбъект.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое;
		ПоказательОбъект.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно;
		ПоказательОбъект.ОтображатьВДокументахНачисления = Ложь;
		ПоказательОбъект.ИмяПредопределенныхДанных = "ВремяВДняхЧасах";
		ПоказательОбъект.Точность = 3;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЕсли;
	
	// Заполняем показатель в формулах начислений определенных категорий, 
	// в том случае, если в формуле есть показатель СреднийЗаработокОбщий и нет показателя ВремяВДняхЧасах.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказательСреднийЗаработокОбщий
	|		ПО (ПоказательСреднийЗаработокОбщий.Ссылка = Начисления.Ссылка)
	|			И (ПоказательСреднийЗаработокОбщий.Показатель.ИмяПредопределенныхДанных = ""СреднийЗаработокОбщий"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказательВремяВДняхЧасах
	|		ПО (ПоказательВремяВДняхЧасах.Ссылка = Начисления.Ссылка)
	|			И (ПоказательВремяВДняхЧасах.Показатель.ИмяПредопределенныхДанных = ""ВремяВДняхЧасах"")
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&Категории)
	|	И Начисления.ВидВремени В(&ЦелодневныеВидыВремени)
	|	И ПоказательСреднийЗаработокОбщий.Показатель ЕСТЬ НЕ NULL 
	|	И ПоказательВремяВДняхЧасах.Показатель ЕСТЬ NULL ");
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	
	Запрос.УстановитьПараметр("Категории", Категории);
	Запрос.УстановитьПараметр("ЦелодневныеВидыВремени", Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневныеВидыРабочегоВремени());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ФормулаРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ЗаменитьПоказательФормулыРасчета(
			НачислениеОбъект.ФормулаРасчета, "ВремяВДнях", "ВремяВДняхЧасах");
		НачислениеОбъект.ФормулаРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ЗаменитьПоказательФормулыРасчета(
			НачислениеОбъект.ФормулаРасчета, "ВремяВЧасах", "ВремяВДняхЧасах");
		// Обновляем вторичные данные, связанные с формулой.
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
КонецПроцедуры

Процедура ЗаполнитьВидРабочегоВремениВПособияхПоУходуЗаРебенком() Экспорт 
	
	ВидыРасчетаДляЗаписи = Новый Массив;
	
	ОтпускПоУходуЗаРебенком = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОтпускПоУходуЗаРебенком);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
	               |	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> &ОбозначениеВТабелеУчетаРабочегоВремени";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидРасчетаОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = ОтпускПоУходуЗаРебенком;
		
		ВидыРасчетаДляЗаписи.Добавить(ВидРасчетаОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаДляЗаписи, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьСоставПоказателейНачисленийПредопределенногоСпособаРасчетаОплатаПростоя() Экспорт

	// Выполняет обновления ранее ошибочно заполняемого состава показателей начислений 
	// с предопределенным способом расчета ОплатаПростоя.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|			ГДЕ
	|				НачисленияПоказатели.Ссылка = Начисления.Ссылка
	|				И (НачисленияПоказатели.Показатель = &ВремяВДнях
	|					ИЛИ НачисленияПоказатели.Показатель = &ВремяВЧасах))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.Показатели.Очистить();
		ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(НачислениеОбъект.СпособРасчета, НачислениеОбъект.Показатели);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьФормулуВнутрисменногоПростояПоВинеРаботодателя() Экспорт 
	
	ВидыРасчетаМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	               |		ПО НачисленияПоказатели.Ссылка = Начисления.Ссылка
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	               |	И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	               |	И НачисленияПоказатели.Показатель = &Показатель";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Отказ = Ложь;
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		ВидРасчета.ФормулаРасчета = "СреднийЗаработокОбщий * (2/3) * ВремяВЧасах";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчета, Отказ);
		
		Если Не Отказ Тогда 
			ВидыРасчетаМассив.Добавить(ВидРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаМассив);
	
КонецПроцедуры

Процедура УточнитьФормулуСдельногоЗаработка() Экспорт 
	
	ВидыРасчетаМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
	               |	И ПОДСТРОКА(Начисления.ФормулаРасчета, 1, 83) = ""Макс(СдельныйЗаработок, ТарифнаяСтавкаЧасовая * ВремяВЧасах / НормаЧасов)""";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Отказ = Ложь;
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		ВидРасчета.ФормулаРасчета = "Макс(СдельныйЗаработок, ТарифнаяСтавкаЧасовая * ВремяВЧасах)";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчета, Отказ);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчета);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(ВидРасчета);
		
		Если Не Отказ Тогда 
			ВидыРасчетаМассив.Добавить(ВидРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаМассив);
	
КонецПроцедуры

Процедура УточнитьФормулуОплатыЗаДонорство() Экспорт 
	
	ВидыРасчетаМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	               |	И ПОДСТРОКА(Начисления.ФормулаРасчета, 1, 70) = ""СреднийЗаработокОбщий * ВремяВДнях * (ПроцентОплатыПоСреднему / 100)""";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Отказ = Ложь;
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		ВидРасчета.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * (ПроцентОплатыПоСреднему / 100)";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчета, Отказ);
		
		Если Не Отказ Тогда 
			ВидыРасчетаМассив.Добавить(ВидРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаМассив);
	
КонецПроцедуры

Процедура УдалитьНачисленияБезЗачетаНормыВремениИзСпискаВытесняющих() Экспорт 
	
	ВидыРасчетаМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияВытесняющиеВидыРасчета.Ссылка КАК Ссылка,
	               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	               |ГДЕ
	               |	НЕ НачисленияВытесняющиеВидыРасчета.ВидРасчета.ЗачетНормыВремени
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл 
			НайденнаяСтрока = ВидРасчета.ВытесняющиеВидыРасчета.Найти(Выборка.ВидРасчета, "ВидРасчета");
			Если НайденнаяСтрока <> Неопределено Тогда 
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		ВидыРасчетаМассив.Добавить(ВидРасчета);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаМассив);
	
КонецПроцедуры

Процедура ЗаполнитьВедущиеНачисленияВнутрисменнымиОтклонениями() Экспорт

	// Заполняет внутрисменные отклонения в список ведущих начислений почасовой оплаты труда.
	
	// Выявляем начисления по часам, а также начисления, для которых эти начисления по часам являются ведущими.
	// Для всех этих начислений добавляем внутрисменные отклонения в качестве ведущих начислений.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТВнутрисменныеОтклонения
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТНачисленияПоЧасам
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.УчетВремениВЧасах
	|	И Начисления.Ссылка.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНачисленияПоЧасам.Ссылка
	|ПОМЕСТИТЬ ВТВедомыеВнутрисменнымиОтклонениями
	|ИЗ
	|	ВТНачисленияПоЧасам КАК ВТНачисленияПоЧасам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ведущие.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК Ведущие
	|ГДЕ
	|	Ведущие.ВидРасчета В
	|			(ВЫБРАТЬ
	|				ВТНачисленияПоЧасам.Ссылка
	|			ИЗ
	|				ВТНачисленияПоЧасам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомыеВнутрисменнымиОтклонениями.Ссылка,
	|	ВнутрисменныеОтклонения.Ссылка КАК ВедущееНачисление
	|ИЗ
	|	ВТВнутрисменныеОтклонения КАК ВнутрисменныеОтклонения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомыеВнутрисменнымиОтклонениями КАК ВедомыеВнутрисменнымиОтклонениями
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисленийПоЧасам
	|		ПО (ВедущиеНачисленийПоЧасам.Ссылка = ВедомыеВнутрисменнымиОтклонениями.Ссылка)
	|			И (ВедущиеНачисленийПоЧасам.ВидРасчета = ВнутрисменныеОтклонения.Ссылка)
	|ГДЕ
	|	ВедущиеНачисленийПоЧасам.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВедомыеВнутрисменнымиОтклонениями.Ссылка";
	
	ПакетВидовРасчета = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = Выборка.ВедущееНачисление;
		КонецЦикла;
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьКатегориюНеявкиПоНевыясненнымПричинам() Экспорт
	
	// В результате разделения категории «Прогул или неявка» на отдельные категории	видам расчета, 
	// обозначающим неявку, уточняется категория, а также список вытесняющих - в него добавляется прогул.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Неявки.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам) КАК КатегорияНачисленияИлиНеоплаченногоВремени,
	|	Прогулы.Ссылка КАК Прогул
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Неявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Прогулы
	|		ПО (Неявки.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул))
	|			И (Неявки.ОбозначениеВТабелеУчетаРабочегоВремени = &Неявка)
	|			И (Прогулы.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул))
	|			И (Прогулы.ОбозначениеВТабелеУчетаРабочегоВремени = &Прогул)
	|			И (НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеНачисления
	|					ГДЕ
	|						ВытесняющиеНачисления.Ссылка = Неявки.Ссылка
	|						И ВытесняющиеНачисления.ВидРасчета = Прогулы.Ссылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Неявки.Ссылка");
	
	Запрос.УстановитьПараметр("Неявка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам"));
	Запрос.УстановитьПараметр("Прогул", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Выборка.КатегорияНачисленияИлиНеоплаченногоВремени;
		Пока Выборка.Следующий() Цикл 
			НачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = Выборка.Прогул;
		КонецЦикла;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьПризнакЗачетНормыВремени() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ИСТИНА КАК ЗачетНормыВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное))
	|	И НЕ Начисления.ЗачетНормыВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьФормулуНатуральногоДохода() Экспорт
	
	НатуральныйДоход = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НатуральныйДоход");
	
	Если НатуральныйДоход = Неопределено Тогда
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательНатуральныйДоход();
		ОбновитьПовторноИспользуемыеЗначения();
		НатуральныйДоход = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НатуральныйДоход");
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ФормулаРасчета = "НатуральныйДоход";
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПризнакУчетВремениВЧасах() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.ВидВремени В (&НецелодневныеВидыВремени)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ИСТИНА В
	|								(ВЫБРАТЬ ПЕРВЫЕ 1
	|									ИСТИНА
	|								ИЗ
	|									ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|								ГДЕ
	|									ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|									И ПоказателиНачислений.Показатель В (&ПоказателиУчетаВремениПоЧасам))
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК УчетВремениВЧасах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.УчетВремениВЧасах <> ВЫБОР
	|			КОГДА Начисления.ВидВремени В (&НецелодневныеВидыВремени)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ИСТИНА В
	|									(ВЫБРАТЬ ПЕРВЫЕ 1
	|										ИСТИНА
	|									ИЗ
	|										ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|									ГДЕ
	|										ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|										И ПоказателиНачислений.Показатель В (&ПоказателиУчетаВремениПоЧасам))
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПоказателиУчетаВремениПоЧасам", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремениВЧасах());
	Запрос.УстановитьПараметр("НецелодневныеВидыВремени", Перечисления.ВидыРабочегоВремениСотрудников.НецелодневныеВидыРабочегоВремени());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьФормулуОплатыВыходногоПособия() Экспорт 
	
	ДнейЧасовВыходногоПособия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия");
	
	Если ДнейЧасовВыходногоПособия = Неопределено Тогда
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательДнейЧасовВыходногоПособия();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	ВидыРасчетаМассив = Новый Массив;
	
	Запрос = Новый Запрос;                  
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
	               |	И ПОДСТРОКА(Начисления.ФормулаРасчета, 1, 50) = ""СреднийЗаработокОбщий * КоличествоДнейКомпенсации""";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Отказ = Ложь;
		ВидРасчета = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		ВидРасчета.ФормулаРасчета = "СреднийЗаработокОбщий * ДнейЧасовВыходногоПособия";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ВидРасчета, Отказ);
		
		Если Не Отказ Тогда 
			ВидыРасчетаМассив.Добавить(ВидРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ВидыРасчетаМассив);
	
КонецПроцедуры

Процедура ПереименоватьВидРасчетаБолезниБезОплаты() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты)
	|	И Начисления.Код = &Код
	|	И Начисления.Наименование <> &Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", НСтр("ru = 'ОБ'"));
	Запрос.УстановитьПараметр("Наименование", НСтр("ru = 'Отсутствие по болезни'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.Наименование = НСтр("ru = 'Отсутствие по болезни'");
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьВидНачисленияДляНалоговогоУчета() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255) КАК ВидНачисленияДляНУ
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|	И Начисления.Код = &КодДонор
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп20ст255)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &РаботаВПраздники
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &КормлениеРебенка
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|	И Начисления.Код = &КодНадбавкиЗаВыслугуЛет
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ДополнительныйУчебныйОтпускОплачиваемый
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КодДонор", НСтр("ru = 'ДОНОР'"));
	Запрос.УстановитьПараметр("КодНадбавкиЗаВыслугуЛет", НСтр("ru = 'НВЛ'"));
	Запрос.УстановитьПараметр("РаботаВПраздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.УстановитьПараметр("КормлениеРебенка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка"));
	Запрос.УстановитьПараметр("ДополнительныйУчебныйОтпускОплачиваемый", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьВедущиеНачисленияНачисленийЗаТекущийКварталГод() Экспорт
	
	// Начислениям с периодом базовых начислений ТекущийГод и ТекущийКвартал были ошибочно не дозаполнены таблицы ведущих
	// начислений,  они должны включать в себя все базовые начисления.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	БазовыеНачисления.ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = Начисления.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисления
	|		ПО (ВедущиеНачисления.Ссылка = Начисления.Ссылка)
	|			И (ВедущиеНачисления.ВидРасчета = БазовыеНачисления.ВидРасчета)
	|ГДЕ
	|	Начисления.ТребуетсяРасчетБазы
	|	И Начисления.ПериодРасчетаБазовыхНачислений В (ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал), ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод))
	|	И ВедущиеНачисления.ВидРасчета ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВедущиеВидыРасчета.Очистить();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = Выборка.ВидРасчета;
		КонецЦикла;
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	Попытка
		РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
	Исключение
		// "Проглатываем" исключение, которое могло возникнуть при реструктуризации плана видов расчета.
	КонецПопытки;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакТребуетсяРасчетОтработаноДнейВсего() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	НЕ Начисления.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
	|					ГДЕ
	|						ПоказателиНачисления.Ссылка = Начисления.Ссылка
	|						И ПоказателиНачисления.Показатель = &ОтработаноДней)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ <> Начисления.ТребуетсяРасчетОтработаноДнейВсего";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУчетВремениВДняхЧасах() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|				ГДЕ
	|					ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|					И ПоказателиНачислений.Показатель В (&ПоказателиВДняхВЧасах))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчетВремениВДняхЧасах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|					ГДЕ
	|						ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|						И ПоказателиНачислений.Показатель В (&ПоказателиВДняхВЧасах))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ <> Начисления.УчетВремениВДняхЧасах";
	
	ПоказателиВДняхВЧасах = Новый Массив;
	ПоказателиВДняхВЧасах.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
	ПоказателиВДняхВЧасах.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПоказателиВДняхВЧасах", ПоказателиВДняхВЧасах);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьФормулуРасчетаОплатыПраздничныхВыходныхДней() Экспорт
	
	// Определяем есть ли в ИБ начисления.
	// Даже если в данный момент они не используются, формулу все равно нужно обновить.
	// Для того, чтобы обновить формулу, нужно создать показатели.
	// Перед созданием показателей проверяем их наличие.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|	И &Праздники <> НЕОПРЕДЕЛЕНО
	|	И Начисления.ФормулаРасчета ПОДОБНО ""%ВремяВЧасах%*%СтоимостьЧаса%*%""
	|	И НЕ(Начисления.ФормулаРасчета ПОДОБНО ""%ВремяВДняхЧасах%""
	|				ИЛИ Начисления.ФормулаРасчета ПОДОБНО ""%СтоимостьДняЧаса%"")";
	
	Праздники = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Праздники", Праздники);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// Нет начислений, которые требовалось бы обработать.
		Возврат;
	КонецЕсли;
	
	ПоказательСтоимостьДняЧаса = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	Если ПоказательСтоимостьДняЧаса = Неопределено Тогда
		ПоказательСтоимостьДняЧаса = Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательСтоимостьДняЧаса();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	ПакетВидовРасчета = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ФормулаРасчета = СтрЗаменить(НачислениеОбъект.ФормулаРасчета, "СтоимостьЧаса", "СтоимостьДняЧаса");
		НачислениеОбъект.ФормулаРасчета = СтрЗаменить(НачислениеОбъект.ФормулаРасчета, "ВремяВЧасах", "ВремяВДняхЧасах");
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьВидДокументаНачисления() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПустаяСсылка) КАК ВидДокументаНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|	И Начисления.ВидДокументаНачисления <> ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьФормулуРасчетаУчебногоОтпуска() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениОтпускУчебный
	|	И Начисления.ВидОтпуска = &ВидОтпускаОтпускУчебный
	|	И &ВидВремениОтпускУчебный <> НЕОПРЕДЕЛЕНО
	|	И &ВидОтпускаОтпускУчебный <> НЕОПРЕДЕЛЕНО
	|	И Начисления.ФормулаРасчета ПОДОБНО ""%СреднийЗаработокОбщий%*%ВремяВДняхЧасах%""";
	
	ВидВремениОтпускУчебный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	ВидОтпускаОтпускУчебный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидВремениОтпускУчебный", ВидВремениОтпускУчебный);
	Запрос.УстановитьПараметр("ВидОтпускаОтпускУчебный", ВидОтпускаОтпускУчебный);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// Нет начислений, которые требовалось бы обработать.
		Возврат;
	КонецЕсли;

	ПакетВидовРасчета = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		НачислениеОбъект.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейОтпуска * КоэффициентИндексацииСреднегоЗаработка";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьФормулуРасчетаДоплатыЗаНочныеВечерниеЧасы() Экспорт
	
	// Определяем есть ли в ИБ начисления.
	// Даже если в данный момент они не используются, формулу все равно нужно обновить.
	// Для того, чтобы обновить формулу, нужно создать показатели.
	// Перед созданием показателей проверяем их наличие.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В(&ОбозначениеВТабелеУчетаРабочегоВремени)
	|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> НЕОПРЕДЕЛЕНО
	|	И Начисления.ФормулаРасчета ПОДОБНО ""%СтоимостьЧаса%*%ВремяВЧасах%*%""
	|	И НЕ(Начисления.ФормулаРасчета ПОДОБНО ""%ПроцентДоплатыЗаРаботуВНочныеЧасы%""
	|				ИЛИ Начисления.ФормулаРасчета ПОДОБНО ""%ПроцентДоплатыЗаРаботуВВечерниеЧасы%"")";
	
	ВидВремениНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	ВидВремениВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	
	ОбозначенияВТабеле = Новый Массив;
	ОбозначенияВТабеле.Добавить(ВидВремениНочные);
	ОбозначенияВТабеле.Добавить(ВидВремениВечерние);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбозначенияВТабеле);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// Нет начислений, которые требовалось бы обработать.
		Возврат;
	КонецЕсли;
	
	ПоказательДоплатаЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПоказательДоплатаЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");

	ПакетВидовРасчета = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОбозначениеВТабелеУчетаРабочегоВремени = ВидВремениНочные Тогда
			Если ПоказательДоплатаЗаНочные = Неопределено Тогда
				ПоказательДоплатаЗаНочные = Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательДоплатаЗаРаботуВНочноеВремя();
			КонецЕсли;
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
			НачислениеОбъект.ФормулаРасчета = "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВНочноеВремя / 100";
			ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
			НачислениеОбъект.КоличествоОтображаемыхПоказателей = 2;
			НачислениеОбъект.КоличествоПоказателейИспользуемыхПриРасчете = 3;
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЕсли;
		Если Выборка.ОбозначениеВТабелеУчетаРабочегоВремени = ВидВремениВечерние Тогда
			Если ПоказательДоплатаЗаВечерние = Неопределено Тогда
				ПоказательДоплатаЗаВечерние = Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательДоплатаЗаРаботуВВечернееВремя();
			КонецЕсли;
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
			НачислениеОбъект.ФормулаРасчета = "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВВечернееВремя / 100";
			ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
			НачислениеОбъект.КоличествоОтображаемыхПоказателей = 2;
			НачислениеОбъект.КоличествоПоказателейИспользуемыхПриРасчете = 3;
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьПризнакНачисляетсяПриРасчетеПервойПоловиныМесяца() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЛОЖЬ КАК НачисляетсяПриРасчетеПервойПоловиныМесяца
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.НачисляетсяПриРасчетеПервойПоловиныМесяца = ИСТИНА
	|	И Начисления.НачисляетсяВЦеломЗаМесяц = ИСТИНА");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ИсправитьЗапрашиватьПриВводеПоказателейСтажа() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТПроблемныеНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|			ГДЕ
	|				ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|				И ПоказателиНачислений.ЗапрашиватьПриВводе
	|				И ПоказателиНачислений.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиНачислений.Ссылка КАК Ссылка,
	|	ПоказателиНачислений.НомерСтроки,
	|	ПоказателиНачислений.Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиНачислений.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ПоказателиНачислений.ЗапрашиватьПриВводе
	|	КОНЕЦ КАК ЗапрашиватьПриВводе,
	|	ПоказателиНачислений.ОсновнойПоказатель,
	|	ПоказателиНачислений.ОпределяющийПоказатель,
	|	ПоказателиНачислений.ИспользоватьПриРасчете
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|ГДЕ
	|	ПоказателиНачислений.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТПроблемныеНачисления.Ссылка
	|			ИЗ
	|				ВТПроблемныеНачисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПоказателиНачислений.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.Показатели.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НачислениеОбъект.Показатели.Добавить(), Выборка);
		КонецЦикла;
		НачислениеОбъект.КоличествоПостоянныхПоказателей = Макс(НачислениеОбъект.КоличествоПостоянныхПоказателей - 1, 0);
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ИсправитьКодДоходаНДФЛНачисленийОплатыОтпуска() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|	И Начисления.КодДоходаНДФЛ <> &Код2012";
	
	Код2012 = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2012");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код2012", Код2012);
	
	ПакетВидовРасчета = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидРасчетаОбъект.КодДоходаНДФЛ = Код2012;
		ПакетВидовРасчета.Добавить(ВидРасчетаОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьВторичныеДанныеНачисленийИспользующихПоказательВремяВДняхЧасах() Экспорт 
	
	ВремяВДняхЧасахПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	
	Если ВремяВДняхЧасахПоказатель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", ВремяВДняхЧасахПоказатель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Показатель = &Показатель
	               |	И НЕ НачисленияПоказатели.Ссылка.УчетВремениВДняхЧасах";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УстановитьПризнакНачисляетсяПриРасчетеПервойПоловиныМесяцаНачислений() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	НЕ Начисления.Рассчитывается
	               |	И Начисления.НачисляетсяПриРасчетеПервойПоловиныМесяца";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ПовыситьОчередностьРасчетаНачислениямТребующимРасчетаБазыЗаПрошлыйПериод() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ТребуетсяРасчетБазы
		|	И Начисления.ОчередностьРасчета = 1");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
	КонецЦикла;
	
	Попытка
		РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
	Исключение
		// "Проглатываем" исключение, которое могло возникнуть при реструктуризации плана видов расчета.
	КонецПопытки;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ВосстановитьФормулуНачисленийОтпускаИКомпенсацииОтпуска() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	НЕ Начисления.Рассчитывается
	               |	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Пока Выборка.Следующий() Цикл
		Описание = СвойстваПоКатегориям[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени];
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.Рассчитывается = Описание.Рассчитывается;
		НачислениеОбъект.ФормулаРасчета = Описание.ФормулаРасчета;
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
		
КонецПроцедуры

Процедура УточнитьЗначениеПериодРасчетаБазовыхНачисленийПремии() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПремияГодоваяПроцентом", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом);
	Запрос.УстановитьПараметр("СпособВыполненияНачисления", Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета);
	Запрос.УстановитьПараметр("ПериодРасчетаБазовыхНачислений", Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияСреднийЗаработокОбщий.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
	               |ГДЕ
	               |	НачисленияСреднийЗаработокОбщий.Значение = &ПремияГодоваяПроцентом 
	               |	И НачисленияСреднийЗаработокОбщий.Ссылка.СпособВыполненияНачисления = &СпособВыполненияНачисления
	               |	И НачисленияСреднийЗаработокОбщий.Ссылка.ПериодРасчетаБазовыхНачислений <> &ПериодРасчетаБазовыхНачислений";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьФормулуРасчетаНачисленийПоСреднемуЗаработку() Экспорт
	
	// Для начислений по среднему заработку в формулу ошибочно не был включен показатель
	// КоэффициентИндексацииСреднегоЗаработка.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени,
	|	Начисления.ФормулаРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами))
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|				ГДЕ
	|					ПоказателиНачислений.Ссылка = Начисления.Ссылка
	|					И ПоказателиНачислений.Показатель = &КоэффициентИндексацииСреднегоЗаработка)";
	
	КоэффициентИндексацииСреднегоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка");
	
	Если КоэффициентИндексацииСреднегоЗаработка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоэффициентИндексацииСреднегоЗаработка", КоэффициентИндексацииСреднегоЗаработка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		// Нет начислений, которые требовалось бы обработать.
		Возврат;
	КонецЕсли;

	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	// Прежние формулы по категориям.
	ПрежниеФормулы = Новый Соответствие;
	// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
	ПрежниеФормулы.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки, "СреднийЗаработокОбщий * ВремяВДняхЧасах"); 
	ПрежниеФормулы.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку, "СреднийЗаработокОбщий * ВремяВДняхЧасах * (ПроцентОплатыПоСреднему / 100)"); 
	ПрежниеФормулы.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя, "СреднийЗаработокОбщий * (2/3) * ВремяВДняхЧасах"); 
	ПрежниеФормулы.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами, "СреднийЗаработокОбщий * ВремяВДняхЧасах");
	
	ПакетВидовРасчета = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФормулаРасчета = ПрежниеФормулы[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени] Тогда
			СвойстваПоКатегории = СвойстваПоКатегориям[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени];
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НачислениеОбъект.ФормулаРасчета = СвойстваПоКатегории.ФормулаРасчета;
			ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
			РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьВторичныеДанныеНачисленийСОперативнымиПоказателями() Экспорт 
	
	ОперативныеПоказатели = Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОперативныеПоказатели", ОперативныеПоказатели);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачисленияПоказатели.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Показатель В(&ОперативныеПоказатели)
	               |	И НачисленияПоказатели.Ссылка.НачисляетсяВЦеломЗаМесяц";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(НачислениеОбъект);
		НачислениеОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект);
		
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОбновитьВторичныеДанныеНачисленийНеявкаПоБолезни(ПараметрыОбновления = НеОпределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни)
	               |	И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	               |	И НЕ Начисления.ЗачетНормыВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ПакетВидовРасчета = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НачислениеОбъект.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЦикла;
		
		РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
		
	КонецЕсли;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьСчетчикиПоказателейНачислений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиНачислений.Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиНачислений.ИспользоватьПриРасчете = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПоказателейИспользуемыхПриРасчете
	|ПОМЕСТИТЬ ВТКоличествоПоказателей
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиНачислений.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	КоличествоПоказателей.КоличествоПоказателейИспользуемыхПриРасчете КАК КоличествоПоказателейИспользуемыхПриРасчете
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоПоказателей КАК КоличествоПоказателей
	|		ПО (КоличествоПоказателей.Ссылка = Начисления.Ссылка)
	|			И (КоличествоПоказателей.КоличествоПоказателейИспользуемыхПриРасчете <> Начисления.КоличествоПоказателейИспользуемыхПриРасчете)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьВидВремениОплатыПерерывовДляКормленияРебенка() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы) КАК ВидВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ПерерывыДляКормленияРебенка
	|	И Начисления.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПерерывыДляКормленияРебенка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка"));
	Выборка = Запрос.Выполнить().Выбрать();
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СоздатьНачисленияДоплатыЗаПраздничныеДниПоГрафику() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем начисления только в том случае, если до сих пор с таким способом начислений не было.
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	КоллекторНачислений = Новый Соответствие;
	
	// Доплата за работу в праздничные дни (дневное время).
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ПРДОП'");
	Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (дневное время)'");
	// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		НастройкиУчетаВремени = УчетРабочегоВремениРасширенный.НастройкиУчетаВремени();
		// Доплата за работу в праздничные дни (ночное время).
		Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ПРНОЧ'");
		Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (ночное время)'");
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
		Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
		Если НастройкиУчетаВремени.УчитыватьНочныеЧасы Тогда
			ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		КонецЕсли;
		// Доплата за работу в праздничные дни (вечернее время).
		Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru = 'ПРВЕЧ'");
		Описание.Наименование			= НСтр("ru = 'Доплата за работу в праздничные дни (вечернее время)'");
		// Строки не локализуются т.к. состоят из идентификаторов текстов формул.
		Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
		Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
		Описание.ВидНачисленияДляНУ		= Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
		Если НастройкиУчетаВремени.УчитыватьНочныеЧасы Тогда
			ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
		КонецЕсли;
	КонецЕсли;
	
	ПланыВидовРасчета.Начисления.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, Новый Соответствие);
	
КонецПроцедуры

Процедура УточнитьПометкуОсновногоПоказателя() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка,
	|	НачисленияПоказатели.НомерСтроки,
	|	Показатели.ЗначениеРассчитываетсяАвтоматически,
	|	Показатели.НазначениеПоказателя
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|		ПО (Показатели.Ссылка = НачисленияПоказатели.Показатель)
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.Показатели КАК ОсновныеПоказатели
	|				ГДЕ
	|					ОсновныеПоказатели.ОсновнойПоказатель = ИСТИНА
	|					И НачисленияПоказатели.Ссылка = ОсновныеПоказатели.Ссылка)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|			ГДЕ
	|				НЕ ПоказателиНачислений.Показатель.ЗначениеРассчитываетсяАвтоматически
	|				И НачисленияПоказатели.Ссылка = ПоказателиНачислений.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияПоказатели.Ссылка,
	|	НачисленияПоказатели.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтрокиПоказателей = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтрокаПоказателя = НачислениеОбъект.Показатели[Выборка.НомерСтроки - 1];
			// Собираем не автоматически рассчитываемые показатели.
			Если Не Выборка.ЗначениеРассчитываетсяАвтоматически 
				И Выборка.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника Тогда
				СтрокиПоказателей.Добавить(СтрокаПоказателя);
			КонецЕсли;
		КонецЦикла;
		Если СтрокиПоказателей.Количество() > 0 Тогда
			// Если не рассчитываемый показатель единственный, то он и будет основным.
			Если СтрокиПоказателей.Количество() = 1 Тогда
				СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
			Иначе
				// ..Если нет, выберем первый, который запрашивается при вводе.
				ОсновнойПоказатель = Неопределено;
				Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
					Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
						СтрокаПоказателя.ОсновнойПоказатель = Истина;
						ОсновнойПоказатель = СтрокаПоказателя.Показатель;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				// Если ни один не запрашивается, то назначаем основным просто первый по порядку.
				Если ОсновнойПоказатель = Неопределено Тогда
					СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеВидаСтажаПФР2014Начислений() Экспорт 
	
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
	|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
	|	Начисления.ВидПособияСоциальногоСтрахования КАК ВидПособия,
	|	Начисления.ВидСтажаСЗВ
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидСтажаПФР2014 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаПФР2014.ПустаяСсылка)
	|	И (Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы))
	|			ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)))");

	ПакетВидовРасчета = Новый Массив;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ВидСтажаПФР2014 = ПерсонифицированныйУчетРасширенный.ВидСтажаПРФ2014ПоСвойствамНачисления(Выборка.КатегорияНачисления, Выборка.ВидУчетаВремени, Выборка.ВидПособия, Выборка.ВидСтажаСЗВ);
		Если ВидСтажаПФР2014 = Неопределено Тогда 
			ВидСтажаПФР2014 = СвойстваПоКатегориям[Выборка.КатегорияНачисления].ВидСтажаПФР2014;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидСтажаПФР2014) Тогда 
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НачислениеОбъект.ВидСтажаПФР2014 = ВидСтажаПФР2014;
			ПакетВидовРасчета.Добавить(НачислениеОбъект);
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОчиститьВидДокументаНачисленийНеВыполняемыхПоОтдельномуДокументу() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|	И Начисления.ВидДокументаНачисления <> ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидДокументаНачисления = Неопределено;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКраткиеНаименованияВидовРасчета() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КраткоеНаименование <> """"";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	// Начисления
	КраткиеНаименования = Новый Соответствие;
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата по окладу'"), 											НСтр("ru = 'Оклад'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата по дневному тарифу'"), 									НСтр("ru = 'Опл. по дням'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за совмещение должностей, исполнение обязанностей'"), 	НСтр("ru = 'Совмещение'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата до среднего заработка'"), 								НСтр("ru = 'Допл. до среднего'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за дни болезни'"), 									НСтр("ru = 'Допл. за дни болезни'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Больничный'"), 												НСтр("ru = 'Больничный'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Больничный за счет работодателя'"), 							НСтр("ru = 'Больн. (работодат.)'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск по беременности и родам'"), 							НСтр("ru = 'Отп. по берем.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Больничный при травме на производстве'"), 						НСтр("ru = 'Больн. при травме'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Больничный при профзаболевании'"), 							НСтр("ru = 'Больн. при профзаб.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отсутствие по болезни'"), 										НСтр("ru = 'Неявка по болезни'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Неоплачиваемые дни отпуска по беременности и родам'"), 		НСтр("ru = 'Отп. по берем. без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Компенсация при увольнении (выходное пособие)'"), 				НСтр("ru = 'Выходн. пособие'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Командировка'"), 												НСтр("ru = 'Командировка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск без оплаты согласно ТК РФ'"), 							НСтр("ru = 'Отп. без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск за свой счет'"), 										НСтр("ru = 'Отп. за свой счет'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)'"), 				НСтр("ru = 'Учебн. отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Дополнительный учебный отпуск без оплаты'"), 					НСтр("ru = 'Учебн. отп. без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Дополнительный отпуск пострадавшим в аварии на ЧАЭС'"), 		НСтр("ru = 'Доп. отп. ЧАЭС'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отсутствие по невыясненной причине'"), 						НСтр("ru = 'Неявка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Прогул'"), 													НСтр("ru = 'Прогул'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Простой по вине работника'"), 									НСтр("ru = 'Простой без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата простоя по независящим от работодателя причинам'"), 	НСтр("ru = 'Простой незав. прич.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата простоя по среднему заработку'"), 						НСтр("ru = 'Простой по средн.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Материальная помощь'"), 										НСтр("ru = 'Мат. пом.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Материальная помощь при рождении ребенка'"), 					НСтр("ru = 'Мат. пом. при рожд. реб.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Материальная помощь, не облагаемая налогами'"), 				НСтр("ru = 'Мат. пом. не обл. нал.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Материальная помощь при отпуске'"), 							НСтр("ru = 'Мат. пом. при отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата за дни сдачи крови и ее компонентов'"), 				НСтр("ru = 'Донорство'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Единовременное начисление'"), 									НСтр("ru = 'Единовр. начисл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Пособие по уходу за ребенком до полутора лет'"), 				НСтр("ru = 'Уход за реб. до 1,5'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Пособие по уходу за ребенком до трех лет'"), 					НСтр("ru = 'Уход за реб. до 3'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Сдельный заработок (для работающих по окладу)'"), 				НСтр("ru = 'Сдельно'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата дней ухода за детьми-инвалидами'"), 					НСтр("ru = 'Уход за детьми-инв.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск основной'"), 											НСтр("ru = 'Отпуск'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск лицам, работающим в районах Крайнего Севера'"), 		НСтр("ru = 'Отп. северн.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за вредные условия труда'"), 							НСтр("ru = 'Вредность'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за выслугу лет'"), 									НСтр("ru = 'Выслуга лет'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата в натуральной форме'"), 								НСтр("ru = 'Оплата в натур. форме'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Натуральный доход'"), 											НСтр("ru = 'Натур. доход'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Районный коэффициент'"), 										НСтр("ru = 'Районн. коэфф.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Северная надбавка'"), 											НСтр("ru = 'Северн. надб.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата по результатам оценки эффективности'"), 				НСтр("ru = 'Допл. за эффективн.'"));
	
	// Премии
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия ежемесячная процентом'"), 								НСтр("ru = 'Премия мес.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия ежемесячная суммой'"), 									НСтр("ru = 'Премия мес.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия за год (процентом)'"), 									НСтр("ru = 'Премия год.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия за год (суммой)'"), 									НСтр("ru = 'Премия год.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия за квартал (процентом)'"), 								НСтр("ru = 'Премия кварт.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия за квартал (суммой)'"), 								НСтр("ru = 'Премия кварт.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия разовая (процентом)'"), 								НСтр("ru = 'Премия разов.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия разовая (суммой)'"), 									НСтр("ru = 'Премия разов.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за выручку от реализации'"), 							НСтр("ru = 'Допл. от реализ.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за выполнение плана'"), 								НСтр("ru = 'Допл. за выполн. плана'"));
	
	// Государственные и муниципальные служащие.
	КраткиеНаименования.Вставить(НСтр("ru = 'Должностной оклад'"), 											НСтр("ru = 'Оклад'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Единое денежное вознаграждение'"), 							НСтр("ru = 'Денежн. вознагр.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оклад за классный чин'"), 										НСтр("ru = 'Оклад за классн. чин'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка к окладу за классный чин'"), 							НСтр("ru = 'Надб. за классн. чин'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Ежемесячная квалификационная надбавка'"), 						НСтр("ru = 'Квалиф. надб.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за выслугу лет на государственной службе'"), 			НСтр("ru = 'Выслуга лет'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за выслугу лет на муниципальной службе'"), 			НСтр("ru = 'Выслуга лет'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за особые условия службы'"), 							НСтр("ru = 'Особые усл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Надбавка за секретность'"), 									НСтр("ru = 'Секретность'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Ежемесячное денежное поощрение'"), 							НСтр("ru = 'Денежн. поощр.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Премия за выполнение особо важных и сложных заданий'"), 		НСтр("ru = 'Особ. задания'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Единовременная выплата к отпуску госслужащего'"), 				НСтр("ru = 'Выпл. к отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Единовременная выплата к отпуску муницип. служащего'"), 		НСтр("ru = 'Выпл. к отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Материальная помощь к отпуску госслужащего'"), 				НСтр("ru = 'Матпом. при отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Командировка (денежное содержание)'"), 						НСтр("ru = 'Командировка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Сохраняемое денежное содержание'"), 							НСтр("ru = 'Денежн. содерж.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Компенсация при увольнении (месячное денежное содержание)'"), 	НСтр("ru = 'Выходн. пособие'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Дополнительный учебный отпуск (сохр. денежное содержание)'"), 	НСтр("ru = 'Учебн. отп.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск основной (сохр. ден. содержание)'"), 					НСтр("ru = 'Отпуск'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск за выслугу лет на государственной службе'"), 			НСтр("ru = 'Отп. (выслуга лет)'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск за выслугу лет на муниципальной службе'"), 				НСтр("ru = 'Отп. (выслуга лет)'"));
	
	// Учет времени сотрудников в часах.
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата по окладу (по часам)'"), 								НСтр("ru = 'Оклад (по часам)'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата по часовому тарифу'"), 									НСтр("ru = 'Часовой тариф'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Сдельный заработок (для работающих по часовому тарифу)'"), 	НСтр("ru = 'Сдельно'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за работу в ночное время'"), 							НСтр("ru = 'Ночные часы'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за работу в праздничные дни (ночное время)'"), 		НСтр("ru = 'Ночные часы (праздн.)'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за работу в вечернее время'"), 						НСтр("ru = 'Вечерние часы'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за работу в праздничные дни (вечернее время)'"), 		НСтр("ru = 'Вечерние часы (праздн.)'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата времени кормления ребенка'"), 							НСтр("ru = 'Кормл. ребенка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата сверхурочных часов'"), 									НСтр("ru = 'Сверхурочно'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата работы в праздничные и выходные дни'"), 				НСтр("ru = 'Праздн. и выходн.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Доплата за работу в праздничные дни (дневное время)'"), 		НСтр("ru = 'Праздн. и выходн.'"));
	
	// Внутрисменные отклонения
	КраткиеНаименования.Вставить(НСтр("ru = 'Командировка (внутрисменная)'"), 								НСтр("ru = 'Командировка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата за дни сдачи крови и ее компонентов (внутрисменная)'"), НСтр("ru = 'Донорство'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск без оплаты согласно ТК РФ (внутрисменный)'"), 			НСтр("ru = 'Отп. без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отпуск за свой счет (внутрисменный)'"), 						НСтр("ru = 'Отп. за свой счет'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Дополнительный учебный отпуск без оплаты (внутрисменный)'"), 	НСтр("ru = 'Учебн. отп. без опл'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Отсутствие по невыясненной причине (внутрисменное)'"), 		НСтр("ru = 'Неявка'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Внутрисменный прогул'"), 										НСтр("ru = 'Прогул'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Внутрисменный простой по вине работника'"), 					НСтр("ru = 'Простой без опл.'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата часового простоя от оклада по часам'"), 				НСтр("ru = 'Простой'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Оплата часового простоя по среднему заработку'"), 				НСтр("ru = 'Простой'"));
	
	НаименованияНачислений = ОбщегоНазначения.ВыгрузитьКолонку(КраткиеНаименования, "Ключ");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НаименованияНачислений", НаименованияНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.Наименование
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.Наименование В(&НаименованияНачислений)";
				   
	ПакетВидовРасчета = Новый Массив;			   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КраткоеНаименование = КраткиеНаименования[Выборка.Наименование];
	    ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
	КраткиеНаименования = Новый Соответствие;
	КраткиеНаименования.Вставить(НСтр("ru = 'Профсоюзные взносы'"), 					НСтр("ru = 'Профвзносы'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Удержание по исполнительному документу'"), НСтр("ru = 'Исп. лист'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Вознаграждение платежного агента'"), 		НСтр("ru = 'Возн. плат. агента'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Добровольные страховые взносы'"), 			НСтр("ru = 'Добр. страх. взносы'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Добровольные взносы в НПФ'"), 				НСтр("ru = 'Добр. взносы НПФ'"));
	КраткиеНаименования.Вставить(НСтр("ru = 'Удержание в счет возмещения ущерба'"), 	НСтр("ru = 'Возмещ. ущерба'"));
	
	// Удержания
	НаименованияУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(КраткиеНаименования, "Ключ");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НаименованияУдержаний", НаименованияУдержаний);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Удержания.Ссылка,
	               |	Удержания.Наименование
	               |ИЗ
	               |	ПланВидовРасчета.Удержания КАК Удержания
	               |ГДЕ
	               |	Удержания.Наименование В(&НаименованияУдержаний)";
				   
	ПакетВидовРасчета = Новый Массив;			   
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдержаниеОбъект.КраткоеНаименование = КраткиеНаименования[Выборка.Наименование];
	    ПакетВидовРасчета.Добавить(УдержаниеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СкорректироватьПризнакЗапрашиватьПриВводеДляРазмераДоплатыЗаСовмещение() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПоказателиНачислений.Ссылка,
		|	ПоказателиНачислений.НомерСтроки
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|ГДЕ
		|	ПоказателиНачислений.Показатель = &РазмерДоплатыЗаСовмещение
		|	И ПоказателиНачислений.ЗапрашиватьПриВводе = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиНачислений.Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РазмерДоплатыЗаСовмещение", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект.Показатели[Выборка.НомерСтроки - 1].ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьПериодРасчетаБазовыхНачисленийДоплатыДоСреднегоЗаработка() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц) КАК ПериодРасчетаБазовыхНачислений
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни))
		|	И Начисления.ПериодРасчетаБазовыхНачислений <> ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ПериодРасчетаБазовыхНачислений = Выборка.ПериодРасчетаБазовыхНачислений;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИспользуетСреднийЗаработокОбщий() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА КАК ИспользуетСреднийЗаработокОбщий
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|			ГДЕ
		|				ПоказателиНачислений.Ссылка = Начисления.Ссылка
		|				И ПоказателиНачислений.Показатель В (&ПоказателиСреднегоЗаработка))
		|	И НЕ Начисления.ИспользуетСреднийЗаработокОбщий");
		
	Запрос.УстановитьПараметр("ПоказателиСреднегоЗаработка", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОбщегоСреднегоЗаработка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ИспользуетСреднийЗаработокОбщий = Выборка.ИспользуетСреднийЗаработокОбщий;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьПоказательСтоимостьЧасаНаСтоимостьДняЧасаВПростое() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета,
		|	ПоказательСтоимостьЧаса.НомерСтроки
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказательСтоимостьЧаса
		|		ПО (ПоказательСтоимостьЧаса.Ссылка = Начисления.Ссылка)
		|			И (ПоказательСтоимостьЧаса.Показатель = &СтоимостьЧаса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказательСтоимостьДняЧаса
		|		ПО (ПоказательСтоимостьДняЧаса.Ссылка = Начисления.Ссылка)
		|			И (ПоказательСтоимостьДняЧаса.Показатель = &СтоимостьДняЧаса)
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
		|	И ПоказательСтоимостьЧаса.Показатель ЕСТЬ НЕ NULL 
		|	И ПоказательСтоимостьДняЧаса.Показатель ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	Запрос.УстановитьПараметр("СтоимостьДняЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
		ВидРасчетаОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ВидРасчетаОбъект.Показатели[Выборка.НомерСтроки - 1].Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
		КонецЦикла;
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СброситьПризнакПериодДействияБазовыйДляРКиСН() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЛОЖЬ КАК ПериодДействияБазовый
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНадбавок)
		|	И Начисления.ПериодДействияБазовый = ИСТИНА");
		
	Запрос.УстановитьПараметр("КатегорииНадбавок", ПланыВидовРасчета.Начисления.КатегорииНадбавокПоБазе());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСдвигБазовогоПериодаНачислений() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.СдвигБазовогоПериода = 0
	               |	И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.СдвигБазовогоПериода = 1;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКатегориюСтатистическогоНаблюденияНачислений() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияСтатистическогоНаблюдения <> ЗНАЧЕНИЕ(Перечисление.КатегорииСтатистическогоНаблюдения.ПустаяСсылка)";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	КатегорииНачислений = Новый Соответствие;
	КатегорииНачислений.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗаработокНаВремяТрудоустройства, Истина);
	КатегорииНачислений.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие, Истина);
	КатегорииНачислений.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь, Истина);
	КатегорииНачислений.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота, Истина);
	
	ПакетВидовРасчета = Новый Массив;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка КАК Начисление,
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
	               |	И НЕ(Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	               |				И НЕ Начисления.ЛьготаУчитываетсяПриРасчетеЗарплаты)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
	    НачислениеОбъект.КатегорияСтатистическогоНаблюдения = ?(КатегорииНачислений[Выборка.Категория] = Неопределено,
			Перечисления.КатегорииСтатистическогоНаблюдения.ЗаработнаяПлатаРаботников, Перечисления.КатегорииСтатистическогоНаблюдения.ВыплатаСоциальногоХарактера);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьВидыВремениВидовРасчета() Экспорт
	
	// Заполняем добавленную табличную часть ПВР Начисления
	// - для всех начислений, у которых заполнено ОбозначениеВТабелеУчетаРабочегоВремени - добавляем единственную строчку с
	// этим видом времени, - для начислений, в формулах которых используется ОтработаноЧасовВПределахНормыВремени
	// * заменяем показатель на ВремяВЧасах
	// * если ОбозначениеВТабелеУчетаРабочегоВремени - ничего не делаем
	// * если что-то другое, то дополняем таблицу видов времени еще и всеми ночными и всеми вечерними часами (сейчас так
	// работает показатль ОтработаноЧасовВПределахНормыВремени).
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыВремени.Ссылка
		|ПОМЕСТИТЬ ВТНочныеВечерние
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыВремени
		|ГДЕ
		|	ВидыВремени.ОсновноеВремя В (&Ночные, &Вечерние)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.ФормулаРасчета,
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ПоказателиНачислений.Показатель ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПоказательОтработаноЧасовВПределахНормыВремени
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = Начисления.Ссылка)
		|			И (ПоказателиНачислений.Показатель = &ОтработаноЧасовВПределахНормыВремени)
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|				ГДЕ
		|					ВидыВремени.Ссылка = Начисления.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРасчета.Ссылка,
		|	ВидыРасчета.ФормулаРасчета,
		|	ВидыРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
		|	ВидыРасчета.ЕстьПоказательОтработаноЧасовВПределахНормыВремени
		|ИЗ
		|	ВТВидыРасчета КАК ВидыРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыРасчета.Ссылка,
		|	ВидыРасчета.ФормулаРасчета,
		|	НочныеВечерние.Ссылка,
		|	ВидыРасчета.ЕстьПоказательОтработаноЧасовВПределахНормыВремени
		|ИЗ
		|	ВТНочныеВечерние КАК НочныеВечерние
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчета КАК ВидыРасчета
		|		ПО (ВидыРасчета.ЕстьПоказательОтработаноЧасовВПределахНормыВремени = ИСТИНА)
		|			И (ВидыРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &РабочееВремя)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.Ссылка");
		
	Запрос.УстановитьПараметр("ОтработаноЧасовВПределахНормыВремени", РасчетЗарплатыРасширенный.ПоказательПоИдентификатору("ОтработаноЧасовВПределахНормыВремени"));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Вечерние", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("Ночные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	
	ПакетВидовРасчета = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект.ВидыВремени.Добавить().ВидВремени = Выборка.ВидВремени;
		КонецЦикла;
		Если Выборка.ЕстьПоказательОтработаноЧасовВПределахНормыВремени = Истина Тогда
			НачислениеОбъект.ФормулаРасчета = СтрЗаменить(НачислениеОбъект.ФормулаРасчета, "ОтработаноЧасовВПределахНормыВремени", "ВремяВЧасах");
			ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
			РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
			РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		КонецЕсли;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
	// Удаляем сам предопределенный показатель.
	ПоказательСсылка = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору("ОтработаноЧасовВПределахНормыВремени");
	Если ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
		ПоказательОбъект.ИмяПредопределенныхДанных = Неопределено;
		ПоказательОбъект.ПометкаУдаления = Истина;
		ПоказательОбъект.НеИспользуется = Истина;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВключатьВФОТДляНачислений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособВыполненияНачисления В(&СпособВыполненияНачисления)
		|	И НЕ Начисления.ВключатьВФОТ";
		
	СпособыВыполненияНачисления = Новый Массив;
	СпособыВыполненияНачисления.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете"));
	СпособыВыполненияНачисления.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете"));
	Запрос.УстановитьПараметр("СпособВыполненияНачисления", СпособыВыполненияНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВключатьВФОТ = Истина;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакПоддерживаетНесколькоПлановыхНачислений() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка КАК Начисление
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение))
	               |	И НЕ Начисления.ПоддерживаетНесколькоПлановыхНачислений";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПакетВидовРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
	    НачислениеОбъект.ПоддерживаетНесколькоПлановыхНачислений = Истина;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Истина);
	
КонецПроцедуры

Процедура УстановитьФОТНеРедактируется() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ФОТНеРедактируется
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФОТНеРедактируется = РасчетЗарплатыРасширенный.ФОТРассчитываетсяАвтоматически(ВидРасчетаОбъект);
		Если ФОТНеРедактируется <> Выборка.ФОТНеРедактируется Тогда
			Если ФОТНеРедактируется = Неопределено Тогда
				ВидРасчетаОбъект.ФОТНеРедактируется = Ложь;
			Иначе
				ВидРасчетаОбъект.ФОТНеРедактируется = ФОТНеРедактируется;	
			КонецЕсли;	
			ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
			ВидРасчетаОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьФормулуНачисленийСПоказателямиЗависящимиОтДругихПоказателей() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель
	               |ПОМЕСТИТЬ ВТЗависимыеПоказатели
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя)
	               |	И ПоказателиРасчетаЗарплаты.БазовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачисленияПоказатели.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗависимыеПоказатели КАК ЗависимыеПоказатели
	               |		ПО НачисленияПоказатели.Показатель = ЗависимыеПоказатели.Показатель";
				   
	ПакетВидовРасчета = Новый Массив;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСтратегияОтраженияВСреднемЗаработке() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета) КАК СтратегияОтраженияВСреднемЗаработке
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СтратегияОтраженияВСреднемЗаработке <> ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Выборка);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСписокВытесняющихНачислений() Экспорт 
	
	Премии = Новый Массив;
	Премии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом);
	Премии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой);
	Премии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом);
	Премии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Премии", Премии);
	Запрос.УстановитьПараметр("ТекущийМесяц", Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВытесняющиеВидыРасчета.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
	               |ГДЕ
	               |	ВытесняющиеВидыРасчета.Ссылка.ТребуетсяРасчетБазы
	               |	И ВытесняющиеВидыРасчета.Ссылка.ПериодРасчетаБазовыхНачислений <> &ТекущийМесяц
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СреднийЗаработокОбщий.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК СреднийЗаработокОбщий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
	               |		ПО СреднийЗаработокОбщий.Ссылка = ВытесняющиеВидыРасчета.Ссылка
	               |			И (СреднийЗаработокОбщий.Ссылка.ПериодРасчетаБазовыхНачислений <> &ТекущийМесяц)
	               |			И (СреднийЗаработокОбщий.Значение В (&Премии))";
				   
	ПакетВидовРасчета = Новый Массив;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВытесняющиеВидыРасчета.Очистить();
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура СоздатьНачислениеПоказателиДниОплаченныеДоНачалаЭксплуатации() Экспорт
	
	НачатьТранзакцию();
	Попытка
		ПланыВидовРасчета.Начисления.СоздатьНачислениеДниОплаченныеДоНачалаЭксплуатации();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка создания начисления «Дни, оплаченные до начала эксплуатации»'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ПланыВидовРасчета.Начисления, , 
			НСтр("ru = 'Не удалось создать начисление «Дни, оплаченные до начала эксплуатации» из-за предположительно неверной (зацикленной) настройки плана видов расчета.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

Процедура УточнитьКатегориюСтатистическогоНаблюденияНачислений() Экспорт 
	
	КатегорииСтатистическогоНаблюдения = Новый ТаблицаЗначений;
	КатегорииСтатистическогоНаблюдения.Колонки.Добавить("КатегорияНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	КатегорииСтатистическогоНаблюдения.Колонки.Добавить("КатегорияСтатистическогоНаблюдения", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииСтатистическогоНаблюдения"));
	
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	Для Каждого КлючИЗначение Из СвойстваПоКатегориям Цикл 
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваКатегории = КлючИЗначение.Значение;
		Если СвойстваКатегории.НедоступныеСвойства.Найти("КатегорияСтатистическогоНаблюдения") = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = КатегорииСтатистическогоНаблюдения.Добавить();
		НоваяСтрока.КатегорияНачисления = КатегорияНачисления;
		НоваяСтрока.КатегорияСтатистическогоНаблюдения = СвойстваКатегории.КатегорияСтатистическогоНаблюдения;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КатегорииСтатистическогоНаблюдения", КатегорииСтатистическогоНаблюдения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КатегорииСтатистическогоНаблюдения.КатегорияНачисления,
	               |	КатегорииСтатистическогоНаблюдения.КатегорияСтатистическогоНаблюдения
	               |ПОМЕСТИТЬ ВТКатегорииСтатистическогоНаблюдения
	               |ИЗ
	               |	&КатегорииСтатистическогоНаблюдения КАК КатегорииСтатистическогоНаблюдения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Начисления.Ссылка КАК Начисление,
	               |	КатегорииСтатистическогоНаблюдения.КатегорияСтатистическогоНаблюдения
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииСтатистическогоНаблюдения КАК КатегорииСтатистическогоНаблюдения
	               |		ПО Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииСтатистическогоНаблюдения.КатегорияНачисления
	               |			И Начисления.КатегорияСтатистическогоНаблюдения <> КатегорииСтатистическогоНаблюдения.КатегорияСтатистическогоНаблюдения";
				   
	ПакетВидовРасчета = Новый Массив;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
		НачислениеОбъект.КатегорияСтатистическогоНаблюдения = Выборка.КатегорияСтатистическогоНаблюдения;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УстановитьЗапрашиваемостьПоказателяРазмерДоплатыЗаСовмещение() Экспорт 
	
	РазмерДоплатыЗаСовмещение = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение");
	
	Если РазмерДоплатыЗаСовмещение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДоплатаЗаСовмещение", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	Запрос.УстановитьПараметр("РазмерДоплатыЗаСовмещение", РазмерДоплатыЗаСовмещение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Начисление
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = &ДоплатаЗаСовмещение
	               |	И НачисленияПоказатели.Показатель = &РазмерДоплатыЗаСовмещение
	               |	И НЕ НачисленияПоказатели.ЗапрашиватьПриВводе";
				   
	ПакетВидовРасчета = Новый Массив;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
		НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", РазмерДоплатыЗаСовмещение));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура УточнитьПризнакТребуетсяРасчетНормыВремениДляНачисленийСодержащихСтоимостьЧаса() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ТребуетсяРасчетНормыВремени
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
		|			ГДЕ
		|				ПоказателиНачисления.Ссылка = Начисления.Ссылка
		|				И ПоказателиНачисления.Показатель = &СтоимостьЧаса)");
		
	Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗапрашиваемостьПоказателяСреднийЗаработокОбщий() Экспорт 
	
	СреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	Если СреднийЗаработокОбщий = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОплатаКомандировки", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Запрос.УстановитьПараметр("СреднийЗаработокОбщий", СреднийЗаработокОбщий);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Начисление
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = &ОплатаКомандировки
	               |	И НачисленияПоказатели.Показатель = &СреднийЗаработокОбщий
	               |	И НЕ НачисленияПоказатели.ЗапрашиватьПриВводе";
				   
	ПакетВидовРасчета = Новый Массив;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НачислениеОбъект = Выборка.Начисление.ПолучитьОбъект();
		НайденныеСтроки = НачислениеОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", СреднийЗаработокОбщий));
		Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл 
			СтрокаПоказателя.ЗапрашиватьПриВводе = Истина;
		КонецЦикла;
		ПакетВидовРасчета.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	
КонецПроцедуры

Процедура ОчиститьВытесняющиеНачисленийВЦеломЗаМесяц() Экспорт
	
	// Начисления, выполняемые в целом за месяц, не должны вытесняться.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.НачисляетсяВЦеломЗаМесяц
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеНачисления
		|			ГДЕ
		|				ВытесняющиеНачисления.Ссылка = Начисления.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВытесняющиеВидыРасчета.Очистить();
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьВидРабочегоВремениПочасовыхНачислений() Экспорт
	
	// Для начислений часовой оплаты труда, создаваемых автоматически при включении настройки, 
	// нужно сменить ОбозначениеВТабелеРабочегоВремени.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|	И Начисления.УчетВремениВЧасах
		|	И Начисления.Код В(&КодыПочасовыхНачислений)
		|	И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени <> &РабочееВремя";
		
	КодыПочасовыхНачислений = Новый Массив;
	КодыПочасовыхНачислений.Добавить(НСтр("ru = 'ОКЛЧС'"));
	КодыПочасовыхНачислений.Добавить(НСтр("ru = 'ТРФЧС'"));
	
	Запрос.УстановитьПараметр("КодыПочасовыхНачислений", КодыПочасовыхНачислений);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьПоказателиПростояНаТарифПростоя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТВидыРасчета КАК ВидыРасчета";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТарифПростоя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифПростоя");
	Если ТарифПростоя = Неопределено Тогда
		ТарифПростоя = Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательТарифПростоя();
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Запрос.УстановитьПараметр("ТарифПростоя", ТарифПростоя);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ВТВидыРасчета КАК Начисления
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|				ГДЕ
		|					ПоказателиНачислений.Ссылка = Начисления.Ссылка
		|					И ПоказателиНачислений.Показатель = &ТарифПростоя)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(НачислениеОбъект.СпособРасчета, НачислениеОбъект.Показатели);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбновитьСписокПоказателейРасчетаПростоя(ПараметрыОбновления = Неопределено) Экспорт
		
	НормаВремениВДнях = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	Если НормаВремениВДнях = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НормаВремениВДнях", НормаВремениВДнях);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
		|				ГДЕ
		|					ПоказателиНачисления.Ссылка = Начисления.Ссылка
		|					И ПоказателиНачисления.Показатель = &НормаВремениВДнях)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(НачислениеОбъект.СпособРасчета, НачислениеОбъект.Показатели);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура УточнитьСоставВидовВремени(ПараметрыОбновления = Неопределено) Экспорт
	
	// Выбираем все начисления, у которых в качестве основного вида времени указано "Рабочее время", 
	// и удаляем из таблицы видов времени все плановые виды времени.
	
	РабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Если РабочееВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееВремя", РабочееВремя);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыПлановогоВремени.ВидВремени
		|ПОМЕСТИТЬ ВТВидыПлановогоВремени
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников.ВидыВремени КАК ВидыПлановогоВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРасчета.Ссылка,
		|	ТаблицаВидыВремени.НомерСтроки,
		|	ТаблицаВидыВремени.ВидВремени
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК СправочникВидыВремени
		|		ПО (СправочникВидыВремени.Ссылка = ВидыРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (СправочникВидыВремени.ОсновноеВремя = &РабочееВремя)
		|			И (НЕ ВидыРасчета.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ТаблицаВидыВремени
		|		ПО (ТаблицаВидыВремени.Ссылка = ВидыРасчета.Ссылка)
		|			И (ТаблицаВидыВремени.ВидВремени.ОсновноеВремя <> &РабочееВремя)
		|ГДЕ
		|	(ТаблицаВидыВремени.ВидВремени.ОсновноеВремя В
		|				(ВЫБРАТЬ
		|					ВТВидыПлановогоВремени.ВидВремени
		|				ИЗ
		|					ВТВидыПлановогоВремени))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдаляемыеСтроки = Новый Массив;
		Пока Выборка.Следующий() Цикл
			УдаляемыеСтроки.Добавить(НачислениеОбъект.ВидыВремени[Выборка.НомерСтроки - 1]);
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			НачислениеОбъект.ВидыВремени.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	// Для начислений без видов времени проставляем Рабочее время.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчета.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ТаблицаВидыВремени
		|		ПО (ТаблицаВидыВремени.Ссылка = ВидыРасчета.Ссылка)
		|ГДЕ
		|	ТаблицаВидыВремени.Ссылка ЕСТЬ NULL 
		|	И НЕ ВидыРасчета.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидыВремени.Добавить().ВидВремени = РабочееВремя;
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	// Если выбран вид Рабочее время, и при этом он не основной, сделаем его основным и удалим все остальные.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыРасчета.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК СправочникВидыВремени
		|		ПО (СправочникВидыВремени.Ссылка = ВидыРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ТаблицаВидыВремени
		|		ПО (ТаблицаВидыВремени.Ссылка = ВидыРасчета.Ссылка)
		|			И (ТаблицаВидыВремени.ВидВремени.ОсновноеВремя = &РабочееВремя)
		|ГДЕ
		|	СправочникВидыВремени.ОсновноеВремя <> &РабочееВремя
		|	И ТаблицаВидыВремени.ВидВремени ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыРасчета.Ссылка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидыВремени.Очистить();
		НачислениеОбъект.ОбозначениеВТабелеУчетаРабочегоВремени = РабочееВремя;
		НачислениеОбъект.ВидыВремени.Добавить().ВидВремени = РабочееВремя;
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ОбновитьСписокПоказателейДоплатыДоСреднегоЗаработка(ПараметрыОбновления = Неопределено) Экспорт
		
	ВремяВДняхЧасах = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВремяВДняхЧасах", ВремяВДняхЧасах);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка)
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
		|				ГДЕ
		|					ПоказателиНачисления.Ссылка = Начисления.Ссылка
		|					И ПоказателиНачисления.Показатель = &ВремяВДняхЧасах)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(НачислениеОбъект.СпособРасчета, НачислениеОбъект.Показатели);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоказетелиНачисленияОтпускаПострадавшимВАварииЧАЭС(ПараметрыОбновления = Неопределено) Экспорт
	ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	
	Если Не ЗначениеЗаполнено(ВидОтпуска) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПоказательКалендарныеДниБезПраздников = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников");
	
	Запрос = Новый Запрос;                                                         
	Запрос.УстановитьПараметр("ВидОтпуска", ВидОтпуска);
	Запрос.УстановитьПараметр("ПоказательКалендарныеДниБезПраздников", ПоказательКалендарныеДниБезПраздников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО Начисления.Ссылка = НачисленияПоказатели.Ссылка
	|			И (НачисленияПоказатели.Показатель = &ПоказательКалендарныеДниБезПраздников)
	|ГДЕ
	|	Начисления.ВидОтпуска = &ВидОтпуска
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|	И НачисленияПоказатели.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		
		СтрокаПоказателя = НачислениеОбъект.Показатели.Добавить();
		СтрокаПоказателя.Показатель = ПоказательКалендарныеДниБезПраздников;
		
		НачислениеОбъект.Записать();
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);	
	КонецЦикла;		
КонецПроцедуры	

Процедура ОбновитьОсновнойПоказательНачисленийОтСтажа(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;                                                         
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК Начисления
	|ГДЕ
	|	Начисления.Показатель.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
	|	И Начисления.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|	И НЕ Начисления.ОсновнойПоказатель
	|	И НЕ Начисления.Показатель.ЗначениеРассчитываетсяАвтоматически";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Каждого СтрокаПоказателя Из НачислениеОбъект.Показатели Цикл
			// Для начала все строки не основные.
			СтрокаПоказателя.ОсновнойПоказатель = Ложь;
		КонецЦикла;
		
		СтрокаПоказателя = НачислениеОбъект.Показатели[Выборка.НомерСтроки - 1];
		СтрокаПоказателя.ОсновнойПоказатель = Истина;
		
		НачислениеОбъект.Записать();
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);	
	КонецЦикла;	
		
КонецПроцедуры	

Процедура ЗаполнитьСпособРасчетаДляНачисленийОплатаДнейУходаЗаДетьмиИнвалидами(ПараметрыОбновления = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами)
	|	И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		
		НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами;
		НачислениеОбъект.Показатели.Очистить();
		
		НачислениеОбъект.ИспользуетФормулу = Ложь;
		ЗарплатаКадрыРасширенный.ЗаполнитьПоказателиПредопределенногоСпособаРасчета(НачислениеОбъект.СпособРасчета, НачислениеОбъект.Показатели);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(НачислениеОбъект);
		
		НачислениеОбъект.Записать();
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);	
	КонецЦикла;		

КонецПроцедуры	

Процедура ЗаполнитьКатегорииСтатистическогоНаблюденияТ57(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеВыполнено = Истина;
	
	СписокКатегорий = КатегорииНачисленийСтатистическогоУчетаТ57ТарифногоЗаработка();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокКатегорий, КатегорииНачисленийСтатистическогоУчетаТ57ВыплатПоРайонномуРегулированию());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокКатегорий, КатегорииНачисленийСтатистическогоУчетаТ57ДругихВыплат());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКатегорий", СписокКатегорий);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Ссылка,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&СписокКатегорий)
		|	И Начисления.КатегорияСтатистическогоНаблюдения57Т = ЗНАЧЕНИЕ(Перечисление.КатегорииСтатистическогоНаблюдения57Т.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
				
				ОбновлениеВыполнено = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НачислениеОбъект.КатегорияСтатистическогоНаблюдения57Т = ПланыВидовРасчета.Начисления.КатегорияСтатистическогоНаблюдения57Т(Выборка.КатегорияНачисленияИлиНеоплаченногоВремени);
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбновлениеВыполнено Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция КатегорииОтгула() Экспорт
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);

	Возврат КатегорииНачислений;
	
КонецФункции

Процедура СкорректироватьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаДоплатыДоСреднего.Ссылка КАК ДоплатаДоСреднего,
		|	БазаДоплатыДоСреднего.ВидРасчета КАК БазовоеНачисление
		|ПОМЕСТИТЬ ВТБазаДоплатыДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазаДоплатыДоСреднего
		|ГДЕ
		|	БазаДоплатыДоСреднего.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияБазовыеВидыРасчета.ВидРасчета,
		|	НачисленияБазовыеВидыРасчета.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
		|ГДЕ
		|	НачисленияБазовыеВидыРасчета.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
		|		ПО НачисленияСреднийЗаработокОбщий.Ссылка = БазаДоплатыДоСреднего.БазовоеНачисление
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать)
		|	И НачисленияСреднийЗаработокОбщий.Ссылка.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка)
		|	И БазаДоплатыДоСреднего.ДоплатаДоСреднего ЕСТЬ NULL";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		ПакетВидовРасчета = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПакетВидовРасчета.Вставить(Выборка.Ссылка, НачислениеОбъект);
		КонецЦикла;
	
		РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(ПакетВидовРасчета);
		РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета, Ложь);
	КонецЕсли;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

// Заполняет соответствие видов документа и начислений, которые регистрируются этим видом документа.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - соответствие, ключ ПеречислениеСсылка.ВидыДокументовНачисления, значение - массив ссылок ПланВидовРасчетаСсылка.Начисление.
//
Функция ВидыДокументовНачислений() Экспорт
	
	ВидыДокументовНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.ВидДокументаНачисления КАК ВидДокументаНачисления,
	|	Начисления.Ссылка КАК Начисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокументаНачисления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ВидДокументаНачисления") Цикл
		ВидДокументаНачисления = Выборка.ВидДокументаНачисления;
		Начисления = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Начисления.Добавить(Выборка.Начисление);
		КонецЦикла;
		ВидыДокументовНачислений.Вставить(ВидДокументаНачисления, Начисления);
	КонецЦикла;
	
	Возврат ВидыДокументовНачислений;
	
КонецФункции

// Подключаемые характеристики
Функция ИмяПланаВидовПодключаемыхХарактеристикЗарплатаКадры() Экспорт
	Возврат "НачисленияПодключаемыеХарактеристики";
КонецФункции

Процедура ЗаполнитьПризнакЕстьВытесняющиеНачисления(ПараметрыОбновления = Неопределено) Экспорт	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	НЕ Начисления.ЕстьВытесняющиеНачисления
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытсеняющиеВидыРасчета
		|			ГДЕ
		|				ВытсеняющиеВидыРасчета.Ссылка = Начисления.Ссылка)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;

		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ЕстьВытесняющиеНачисления = Истина;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЦикла;
	
КонецПроцедуры	

Процедура УточнитьКодДоходаНДФЛКомпенсацияОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска))
	|	И Начисления.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2013)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	КодДохода2013 = Справочники.ВидыДоходовНДФЛ.Код2013;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КодДоходаНДФЛ = КодДохода2013;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НачислениеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли