#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытыеФормы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодключаемыеКомандыГруппаКнопок;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("Объект", КандидатОбъект);
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	Если Не ИспользоватьЭлектронноеИнтервью Тогда
		Элементы.РаботаСКандидатомОткрытьАнкету.Видимость = Ложь;
		Элементы.РаботаСКандидатомПечатьАнкеты.Видимость = Ложь;
		Элементы.ГруппаОценкаПоХарактеристикам.Видимость = Ложь;
		Элементы.КандидатыОтчетПоКомпетенциям.Видимость = Ложь;
		Элементы.ФормаПодробныйОтчетПоХарактеристикам.Видимость = Ложь;
	КонецЕсли;
		
	ИспользоватьШаблоныСообщений = ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений");
	
	Если Параметры.Ключ.Пустая() Тогда
		// Если физическое лицо было указано в обработке заполнения.
		Если КандидатОбъект.ФизическоеЛицо.Пустая() Тогда
			// Генерим ссылку, при записи установим ее объекту.
			КандидатОбъект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
		КонецЕсли;
		// Получаем ссылку нового.
		КандидатСсылка = Справочники.Кандидаты.ПолучитьСсылку();
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "РаботаСКандидатами", КандидатСсылка);
		// Заполняем значения по умолчанию.
		ЗначенияДляЗаполнения = Новый Структура();
		ЗначенияДляЗаполнения.Вставить("Ответственный", "КандидатОбъект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		КандидатОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Россия;
		// Если вакансия была указана в данных заполнения, заполняем сопутствующие сведения.
		Если ЗначениеЗаполнено(КандидатОбъект.Вакансия) Тогда
			ЗаполнитьПоДаннымВакансии();
		КонецЕсли;
		ПриПолученииДанныхНаСервере();
		
		ПараметрСтруктураРезюме = Неопределено;
		Если Параметры.Свойство("СтруктураРезюме", ПараметрСтруктураРезюме) Тогда
			ПараметрРекрутинговыйСайт = Неопределено;
			Параметры.Свойство("Сайт", ПараметрРекрутинговыйСайт);
			КандидатЗаполнен = Ложь;
			ЗаполнитьКандидатаПоДаннымРезюмеРекрутинговогоСайта(ПараметрСтруктураРезюме, ПараметрРекрутинговыйСайт, КандидатЗаполнен);
			Если Не КандидатЗаполнен Тогда
				ЗаполнитьКандидатаПоДаннымРезюме(ПараметрСтруктураРезюме);
			КонецЕсли;
			Параметры.Свойство("ФайлРезюмеДляЗагрузки", ФайлРезюмеДляЗагрузки);
			Параметры.Свойство("АдресРезюмеДляЗагрузки", АдресРезюмеДляЗагрузки);
		КонецЕсли;
		ПараметрВакансия = Неопределено;
		Если Параметры.Свойство("Вакансия", ПараметрВакансия) Тогда
			ЗаполнитьПоВакансии(ПараметрВакансия);
		КонецЕсли;
		ОтобразитьАдресРезюме();
	КонецЕсли;
	
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	
	ТекущаяВакансия = КандидатОбъект.Вакансия;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ДобавитьКомментарий;
	КонецЕсли;
	
	УстановитьВидимостьНаписатьПисьмо();
	УстановитьВидимостьЗвонокSMS();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если КандидатОбъект.Ссылка.Пустая() Тогда
		// Проверить дубли.
		ПодключитьОбработчикОжидания("ПроверитьОднофамильцев", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, КандидатОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	КандидатСсылка = ТекущийОбъект.Ссылка;
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзмененыДанныеДополнительнойФормы" И Источник = ЭтаФорма Тогда
		ПрочитатьДанныеИзХранилищаВФормуНаСервере(Параметр);
		СотрудникиКлиентСервер.УстановитьПризнакРедактированияДанныхВДополнительнойФорме(Параметр.ИмяФормы, ЭтаФорма);
		ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
		ЗаполнитьОбразованиеКвалификацию();
	ИначеЕсли ИмяСобытия = "Проведение_Анкета" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиТекущийЭтапЗапланировать(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиТекущийЭтапВыполнить(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиТекущийЭтапПропустить(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиТекущийЭтапПройти(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(КандидатСсылка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = ФизическоеЛицоСсылка;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаписатьФизическоеЛицо(Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Резюме в формате HTML.
	СтруктураРезюме = ПодборПерсоналаКлиентСервер.СтруктураHTMLРезюме();
	Резюме.ПолучитьHTML(СтруктураРезюме.HTML, СтруктураРезюме.Вложения);
	ТекущийОбъект.Резюме = Новый ХранилищеЗначения(СтруктураРезюме);
	
	ЗаполнитьСреднийРейтинг(ТекущийОбъект);
	
	ИзвлеченныйТекст = Резюме.ПолучитьТекст();
	ТекущийОбъект.РезюмеТекст = Новый ХранилищеЗначения(ИзвлеченныйТекст);
	СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ЗаписатьФизическоеЛицо(Отказ);
	КонецЕсли;
	
	ЗаписатьРаботуСКандидатами();
	
	НаборЗаписей = РеквизитФормыВЗначение("ДанныеПубликацииРезюмеНаборЗаписей");
	НаборЗаписей.Отбор.Кандидат.Установить(КандидатСсылка);
	НаборЗаписей.Записать();
	
	ЗаписатьКомментарии();
	
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтаФорма, КандидатОбъект, ПараметрыЗаписи, "Кандидаты");
	ОповеститьОбИзменении(ФизическоеЛицоСсылка);
	ОповеститьОбИзменении(КандидатСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(КандидатСсылка);
	КонецЕсли;
	
	РазблокироватьДанныеФормыДляРедактирования();
	РазблокироватьФизическоеЛицоОбъектДляРедактирования();
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	Если ФайлРезюмеДляЗагрузки <> "" Тогда
		
		СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ФайлРезюмеДляЗагрузки);
		Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		ИмяБезРасширения = СтруктураПути.ИмяБезРасширения;
		
		ПараметрыФайла = Новый Структура;
		
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ВладелецФайлов", КандидатОбъект.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла,АдресРезюмеДляЗагрузки);
	
		ФайлРезюмеДляЗагрузки = "";
		АдресРезюмеДляЗагрузки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, КандидатОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СброситьРейтинг(Команда)
	
	// Сбрасываем общий рейтинг, если он есть.
	Если КандидатОбъект.Рейтинг <> 0 Тогда
		КандидатОбъект.Рейтинг = 0;
		ОтобразитьРейтинг(ЭтаФорма, 0);
		Возврат;
	КонецЕсли;
	
	// Если есть индивидуальный рейтинг, удаляем оценку ровно этого пользователя.
	СтрокаОценки = СтрокаИндивидуальнойОценки(КандидатОбъект.Оценки);
	Если СтрокаОценки <> Неопределено Тогда
		КандидатОбъект.Оценки.Удалить(СтрокаОценки);
		РассчитатьСреднийРейтинг(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьРейтинг(ЭтаФорма, 0);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбразованиеКвалификацию(Команда)
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ОткрытьОбразованиеКвалификацию();
		Возврат;
	КонецЕсли;
	
	// Если элемент пока не записан, редактировать образование и квалификацию не получится.
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Переход к сведениям об образовании, квалификации возможен только после записи данных.
			|Данные будут записаны.'");
			
	Оповещение = Новый ОписаниеОповещения("ОбразованиеКвалификацияПослеОтветаНаПредложениеЗаписать", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПолныйСписокКандидатов(Команда)
	
	Отбор = Новый Структура("ФизическоеЛицо");
	Отбор.ФизическоеЛицо = КандидатОбъект.ФизическоеЛицо;
	
	ПараметрыСписка = Новый Структура("Отбор");
	ПараметрыСписка.Отбор = Отбор;
	
	ОткрытьФорму("Справочник.Кандидаты.ФормаСписка", ПараметрыСписка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайл(Команда)
	
	ОчиститьСообщения();
	
	Если КандидатОбъект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru='Кандидат еще не записан. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрисоединитьФайлЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьПрисоединениеФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
        Возврат;
    КонецЕсли;
    
    ВыполнитьПрисоединениеФайла();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрисоединениеФайла()
	
	РаботаСФайламиКлиент.ДобавитьФайлы(КандидатОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	НачатьДобавлениеКомментария();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКомментариев(Команда)
	НачатьОткрытиеСпискаКомментариев();
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьЭтап(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован");
	НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭтап(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден");
	НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПройтиИнтервью(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПрохождениеЭлектронногоИнтервьюЭтапаРаботы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьЭтап(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пропущен");
	ТекущиеДанные.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ТекущиеДанные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЭтап(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтменуЭтапаРаботы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнкету(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(КандидатОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураАнкеты = Анкета(КандидатОбъект.Ссылка, КандидатОбъект.Вакансия, ТекущиеДанные.ЭтапРаботы);
	Если СтруктураАнкеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоФормаЗаполнения", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", СтруктураАнкеты.ТолькоПросмотр);
	ПараметрыФормы.Вставить("Ключ", СтруктураАнкеты.Анкета);
	ПараметрыФормы.Вставить("ВозможностьПредварительногоСохранения", Истина);
	ФормаАнкеты = ОткрытьФорму("Документ.Анкета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАнкеты(Команда)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ШаблонАнкеты) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеИнтервьюКлиент.ПечатьАнкеты(ТекущиеДанные.ШаблонАнкеты);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСравнениюХарактеристик(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	СписокФизЛиц = Новый Массив;
	СписокФизЛиц.Добавить(КандидатОбъект.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("СписокФизЛиц", СписокФизЛиц);
	ПараметрыОткрытия.Вставить("Вакансия", КандидатОбъект.Вакансия);
	ОткрытьФорму("Обработка.СравнениеХарактеристикКандидатов.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробныйОтчетПоХарактеристикам(Команда)
	
	Если КандидатОбъект.Ссылка.Пустая() Или Не ЗначениеЗаполнено(КандидатОбъект.Вакансия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вакансия", КандидатОбъект.Вакансия);
	ПараметрыОткрытия.Вставить("Кандидат", КандидатОбъект.Ссылка);
	ОткрытьФорму("Отчет.СравнениеХарактеристикКандидатовПодробно.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьОценку(Команда)
	
	Если Не ЗначениеЗаполнено(КандидатОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Кандидат", КандидатОбъект.Ссылка);
	ОткрытьФорму("Отчет.ОценкиКандидатаРасшифровка.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРезюме(Команда)
	
	ДополнительныеПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьРезюмеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ПодборПерсоналаКлиент.ТекстВопросаПередОтправкой(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ОтправитьРезюмеЗавершение(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяСсылкой(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПоделитьсяСсылкойЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ПодборПерсоналаКлиент.ТекстВопросаПередОтправкой(), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПоделитьсяСсылкойЗавершение(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	Если ПустаяСтрока(EMailПредставление) Тогда
		ТекстПредупреждения = НСтр("ru = 'Чтобы написать письмо, требуется заполнить адрес электронной почты.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НачатьНаписатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокSMSПодменю(Команда)
	
	Если ПустаяСтрока(ТелефонПредставление) Тогда
		ТекстПредупреждения = НСтр("ru = 'Для совершения звонка или отправки SMS требуется ввести номер телефона.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НачатьЗвонокSMS();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, КандидатОбъект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, КандидатОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, КандидатОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиЭлементов

&НаКлиенте
Процедура ФотографияНажатие(Элемент, СтандартнаяОбработка)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
	СотрудникиКлиентРасширенный.ФизическиеЛицаАдресФотографииНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
	
	ФИОПриИзмененииНаСервере();
	
	// Проверить дубли.
	ПроверитьОднофамильцев();
	
КонецПроцедуры

&НаКлиенте
Процедура ВакансияПриИзменении(Элемент)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СостояниеЭтапа", ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден"));
	Если РаботаСКандидатамиНаборЗаписей.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВакансияПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для кандидата существуют пройденные этапы. Текущий список этапов работы будет очищен при изменении вакансии. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ТекущаяВакансия = КандидатОбъект.Вакансия;
	ЗаполнитьПоДаннымВакансии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияПриИзменении(Элемент)
	
	ДанныеПозиции = ДанныеПозиции(КандидатОбъект.Позиция);
	ДанныеПозиции.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	
	УстановитьДоступностьПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
	
	// Заполним возраст.
	ЗаполнитьВозраст(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура EMailПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура МестоРожденияПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоСтранаПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
	
	Если Не ЗначениеЗаполнено(ГражданствоФизическихЛиц.Период) Тогда
		ГражданствоФизическихЛиц.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияВБракеПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
	
	Если Не ЗначениеЗаполнено(СостоянияВБракеФизическихЛиц.Период) Тогда
		СостоянияВБракеФизическихЛиц.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура Комментарий1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьКомментарий(1);
КонецПроцедуры

&НаКлиенте
Процедура Комментарий2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьКомментарий(2);
КонецПроцедуры

&НаКлиенте
Процедура ЗвездаНажатие(Элемент)
	
	Модифицированность = Истина;
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элемент.Имя, "_");
	Рейтинг = Число(ЧастиИмени[2]);
	
	// В любом случае сбрасываем общий рейтинг.
	КандидатОбъект.Рейтинг = 0;
	
	// Устанавливаем индивидуальный рейтинг.
	СтрокаОценки = СтрокаИндивидуальнойОценки(КандидатОбъект.Оценки);
	Если СтрокаОценки = Неопределено Тогда
		СтрокаОценки = КандидатОбъект.Оценки.Добавить();
		СтрокаОценки.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();	
	КонецЕсли;
	СтрокаОценки.Оценка = Рейтинг;
	
	РассчитатьСреднийРейтинг(ЭтаФорма);
	ОтобразитьРейтинг(ЭтаФорма, Рейтинг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпытРаботыПриИзменении(Элемент)
	ЗаблокироватьФизическоеЛицоОбъектДляРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура ОпытРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ФизическоеЛицо = ФизическоеЛицоСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпытРаботыОбязанностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МногострочныйЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СфераДеятельностиКомпанииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	МногострочныйЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСКандидатомПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НастроитьКомандыСпискаЭтаповРаботыСКандидатом(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ВыбранныйЭлемент = Элементы.РаботаСКандидатом.ТекущиеДанные.ПолучитьИдентификатор();
	НастроитьКомандыСпискаЭтаповРаботыСКандидатом(ЭтаФорма, ВыбранныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСКандидатомПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.РаботаСКандидатом.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СостояниеЭтапа) Тогда
		НачатьИзменениеСостоянияЭтапаРаботы(ТекущиеДанные);
	Иначе
		СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован");
		НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтклоненияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура(
		"Кандидаты, 
		|ДатаРешения, 
		|Решение, 
		|ПричинаОтклонения, 
		|КомментарийРешения, 
		|ТолькоПросмотрРешения");
	ПараметрыФормы.Кандидаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатСсылка);
	ПараметрыФормы.ДатаРешения = КандидатОбъект.ДатаРешения;
	ПараметрыФормы.Решение = КандидатОбъект.Состояние;
	ПараметрыФормы.ПричинаОтклонения = КандидатОбъект.ПричинаОтклонения;
	ПараметрыФормы.КомментарийРешения = КандидатОбъект.КомментарийРешения;
	ПараметрыФормы.ТолькоПросмотрРешения = Истина;
	
	ОткрытьФорму("Справочник.Кандидаты.Форма.ФормаРешенияПоКандидату", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, КандидатОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, КандидатОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, КандидатОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, КандидатОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = КандидатОбъект;
	КонецЕсли;
	
	// Прочитать объект физического лица.
	ПрочитатьФизическоеЛицоОбъект();
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "РаботаСКандидатами", КандидатСсылка);
	
	РольДоступнаДобавлениеИзменениеДанныхКандидатов = ПравоДоступа("Изменение", Метаданные.Справочники.Кандидаты);
	Если Не РольДоступнаДобавлениеИзменениеДанныхКандидатов Тогда
		Элементы.РаботаСКандидатом.ТолькоПросмотр = Истина;
	КонецЕсли;
	ПрочитатьРаботуСКандидатом(ТекущийОбъект);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДанныеПубликацииРезюме) Тогда 
		НаборЗаписей = РеквизитФормыВЗначение("ДанныеПубликацииРезюмеНаборЗаписей");
		НаборЗаписей.Отбор.Кандидат.Установить(КандидатСсылка);
		НаборЗаписей.Прочитать();
		ЗначениеВРеквизитФормы(НаборЗаписей, "ДанныеПубликацииРезюмеНаборЗаписей");
	КонецЕсли;
	
	// Резюме в формате HTML.
	Если Не ТекущийОбъект.Ссылка.Пустая() Тогда
		СохраненноеРезюме = ТекущийОбъект.Резюме.Получить();
		Если СохраненноеРезюме <> Неопределено Тогда
			СтруктураРезюме = ПодборПерсоналаКлиентСервер.СтруктураHTMLРезюме();
			ЗаполнитьЗначенияСвойств(СтруктураРезюме, СохраненноеРезюме);
			Резюме.УстановитьHTML(СтруктураРезюме.HTML, СтруктураРезюме.Вложения);
		КонецЕсли;
	КонецЕсли;
	
	ШаблонСообщения = ПодборПерсонала.ШаблонСоСпискомСсылок("Справочник.Кандидаты");
	
	УстановитьПанельСостояния(ТекущийОбъект);
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьПодразделения(ЭтаФорма);
	
	Рейтинг = РейтингДляОтображения(ТекущийОбъект);
	ОтобразитьРейтинг(ЭтаФорма, Рейтинг);
	РассчитатьСреднийРейтинг(ЭтаФорма);
	УстановитьДоступностьРейтинга();
	
	ПрочитатьКомментарии(КандидатСсылка);
	УстановитьДоступностьДобавленияИзмененияКомментариев();
	
	ОтобразитьАдресРезюме();
	
	Если ИспользоватьЭлектронноеИнтервью Тогда
		ЗаполнитьОценкуПоХарактеристикам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФизическоеЛицоОбъект()
	
	Если КандидатОбъект.ФизическоеЛицо.Пустая() Тогда
		КандидатОбъект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	КонецЕсли;
		
	ОбъектФизическоеЛицо = КандидатОбъект.ФизическоеЛицо.ПолучитьОбъект();
	Если ОбъектФизическоеЛицо <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОбъектФизическоеЛицо, "ФизическоеЛицо");
	КонецЕсли;
	
	ФизическоеЛицоВерсияДанных = ФизическоеЛицо.ВерсияДанных;
	ФизическоеЛицоСсылка = КандидатОбъект.ФизическоеЛицо;
	
	// ФИО физического лица.
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка);
	// Состояние в браке физического лица.
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СостоянияВБракеФизическихЛиц", ФизическоеЛицоСсылка);
	// Гражданство физического лица.
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "ГражданствоФизическихЛиц", ФизическоеЛицоСсылка);
	// Трудовая деятельность.
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, "ТрудоваяДеятельностьФизическихЛиц", ФизическоеЛицоСсылка);
	
	// Контактная информация.
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицоСсылка, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	АдресПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Адрес, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицоСсылка, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ТелефонПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	EMail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицоСсылка, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	EMailПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(EMail, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	ЗаполнитьВозраст(ЭтаФорма);
	ЗаполнитьДругиеОбращенияКандидата();
	
	ЗаполнитьОбразованиеКвалификацию();
	
	// Фотография.
	АдресФотографии = КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДругиеОбращенияКандидата()
	
	ТаблицаКандидатов = Справочники.Кандидаты.КандидатыФизическогоЛица(КандидатОбъект.ФизическоеЛицо);
	
	КоличествоОбращений = 2;
	
	НомерОбращения = 1;
	Для Каждого СтрокаТаблицы Из ТаблицаКандидатов Цикл
		Если СтрокаТаблицы.Кандидат = КандидатСсылка Тогда 
			Продолжить;
		КонецЕсли;
		Если НомерОбращения > КоличествоОбращений Тогда
			Прервать;
		КонецЕсли;
		ПредставлениеПозиции = Строка(СтрокаТаблицы.Позиция);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Позиция) Тогда
			ПредставлениеПозиции = Строка(СтрокаТаблицы.Подразделение);
		КонецЕсли;
		ФорматированнаяСтрока = Новый ФорматированнаяСтрока(ПредставлениеПозиции, , , , ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Кандидат));
		Элементы["ДругойКандидат_" + НомерОбращения].Заголовок = ФорматированнаяСтрока;
		Элементы["ДругойКандидат_" + НомерОбращения].Видимость = Истина;
		НомерОбращения = НомерОбращения + 1;
	КонецЦикла;
	
	Пока НомерОбращения <= КоличествоОбращений Цикл
		Элементы["ДругойКандидат_" + НомерОбращения].Видимость = Ложь;
		НомерОбращения = НомерОбращения + 1;
	КонецЦикла;
	
	Элементы.ПолныйСписокКандидатов.Видимость = ТаблицаКандидатов.Количество() - 1 > КоличествоОбращений;
	Элементы.ДругиеКандидатыГруппа.Видимость = ТаблицаКандидатов.Количество() > 0;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымВакансии()
	
	ДанныеВакансии = ДанныеВакансии(КандидатОбъект.Вакансия);
	
	КандидатОбъект.Позиция = ДанныеВакансии.Позиция;
	КандидатОбъект.Подразделение = ДанныеВакансии.Подразделение;
	
	ПрочитатьРаботуСКандидатом();
	
	УстановитьДоступностьПозиции(ЭтаФорма);
	УстановитьДоступностьПодразделения(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВакансии(Вакансия)
	Возврат Справочники.Вакансии.ДанныеВакансии(Вакансия);
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПозиции(Позиция)
	Возврат Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(Позиция);
КонецФункции

&НаСервере
Процедура УстановитьПанельСостояния(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = КандидатОбъект;
	КонецЕсли;
	
	Элементы.Сотрудник.Видимость = Ложь;
	Элементы.ПричинаОтклонения.Видимость = Ложь;
	
	СостоянияКандидата = Новый Массив;
	СостоянияКандидата.Добавить(Перечисления.СостоянияСогласования.Согласовано);
	СостоянияКандидата.Добавить(Перечисления.СостоянияСогласования.Отклонено);
	
	// Работа с кандидатом активна — не отображаем панель согласования.
	Если СостоянияКандидата.Найти(ТекущийОбъект.Состояние) = Неопределено Тогда
		Элементы.СостояниеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Видимость = Истина;
	
	ПредставлениеСостояния = "";
	Если ТекущийОбъект.Состояние = Перечисления.СостоянияСогласования.Согласовано Тогда
		ОписаниеСотрудника = ПодборПерсонала.СотрудникКандидата(ФизическоеЛицоСсылка, КандидатОбъект.Позиция, КандидатОбъект.ДатаРегистрации);
		Сотрудник = ОписаниеСотрудника.Сотрудник;
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			ПредставлениеСостояния = НСтр("ru = 'Одобрен, пока не принят на работу'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Одобрен, принят на работу'");
			Элементы.Сотрудник.Заголовок = ПредставлениеСотрудника(ОписаниеСотрудника);
			Элементы.Сотрудник.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли ТекущийОбъект.Состояние = Перечисления.СостоянияСогласования.Отклонено Тогда
		ПредставлениеСостояния = НСтр("ru = 'Кандидат отклонен'");
		Элементы.ПричинаОтклонения.Видимость = ЗначениеЗаполнено(КандидатОбъект.ПричинаОтклонения);
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Заголовок = ПредставлениеСостояния;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСотрудника(ОписаниеСотрудника)
	
	// Шаблон текста: Позиция в Организация с ДатаПриема
	ОрганизацияТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'в %1 с %2'"), 
		ОписаниеСотрудника.Организация, 
		Формат(ОписаниеСотрудника.ДатаПриема, "ДЛФ=D"));
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ОписаниеСотрудника.Позиция), , , , ПолучитьНавигационнуюСсылку(ОписаниеСотрудника.Сотрудник)));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(ОрганизацияТекст);
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПозиции(Форма)
	
	КандидатОбъект = Форма.КандидатОбъект;
	Элементы = Форма.Элементы;
	
	Элементы.Позиция.Доступность = Не ЗначениеЗаполнено(КандидатОбъект.Вакансия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПодразделения(Форма)
	
	КандидатОбъект = Форма.КандидатОбъект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(КандидатОбъект.Вакансия) 
		Или ЗначениеЗаполнено(КандидатОбъект.Позиция) Тогда
		Элементы.Подразделение.Доступность = Ложь;
	Иначе
		Элементы.Подразделение.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизическоеЛицо(Отказ)
	
	Если Не ФизическоеЛицоЗаблокировано И ОбщегоНазначения.СсылкаСуществует(ФизическоеЛицоСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФизическоеЛицо = РеквизитФормыВЗначение("ФизическоеЛицо");
	Если ОбъектФизическоеЛицо.Ссылка.Пустая() Тогда
		ОбъектФизическоеЛицо.УстановитьСсылкуНового(ФизическоеЛицоСсылка);
	КонецЕсли;
	
	УстановитьКонтактнуюИнформациюФизическогоЛица(ОбъектФизическоеЛицо);
	
	// Проверка и запись физического лица.
	Если Не ОбъектФизическоеЛицо.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектФизическоеЛицо.Записать();
	
	// ФИО физических лиц.
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка);
	// Состояние в браке.
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "СостоянияВБракеФизическихЛиц", ФизическоеЛицоСсылка);
	// Гражданство физического лица.
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "ГражданствоФизическихЛиц", ФизическоеЛицоСсылка);
	// Трудовая деятельность физических лиц.
	НаборЗаписей = РеквизитФормыВЗначение("ТрудоваяДеятельностьФизическихЛицНаборЗаписей");
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоСсылка);
	НаборЗаписей.Записать();
	
	КадровыйУчетРасширенный.ЗаписатьДанныеОбОбразовании(ОбъектФизическоеЛицо, Образование);
	КадровыйУчетРасширенный.ЗаписатьДанныеОЗнанииЯзыков(ОбъектФизическоеЛицо, ЗнаниеЯзыков.Выгрузить());
	КадровыйУчетРасширенный.ЗаписатьФотографию(ОбъектФизическоеЛицо.Ссылка, АдресФотографии);
	
	ЗаполнитьОбразованиеКвалификацию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонтактнуюИнформациюФизическогоЛица(ОбъектФизическоеЛицо)
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	// Адрес.
	СтрокаКИ = КонтактнаяИнформация.Добавить();
	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(АдресПредставление, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	СтрокаКИ.Представление = АдресПредставление;
	
	// Телефон.
	СтрокаКИ = КонтактнаяИнформация.Добавить();
	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ТелефонПредставление, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	СтрокаКИ.Представление = ТелефонПредставление;
	
	// E-mail.
	СтрокаКИ = КонтактнаяИнформация.Добавить();
	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(EMailПредставление, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	СтрокаКИ.Представление = EMailПредставление;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ОбъектФизическоеЛицо, КонтактнаяИнформация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьФизическоеЛицоОбъектДляРедактирования()
	
	Если ФизическоеЛицоЗаблокировано Тогда
		// Уже заблокирован.
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактированияНаСервере();
	
	Если Не ФизическоеЛицоЗаблокировано Тогда
		// Не удалось заблокировать.
		ТекстПредупреждения = НСтр("ru = 'Не удается внести изменения в личные данные кандидата. 
                                    |Возможно, личные данные этого кандидата редактируются другим пользователем.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьФизическоеЛицоОбъектДляРедактирования()
	
	Если Не ФизическоеЛицоЗаблокировано Тогда
		Возврат;
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьФизическоеЛицоОбъектДляРедактированияНаСервере()
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, УникальныйИдентификатор);
		ФизическоеЛицоЗаблокировано = Истина;
	Исключение
		ФизическоеЛицоЗаблокировано = Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРейтинг(Форма, Рейтинг)
	
	Элементы = Форма.Элементы;
	
	Для НомерЗвезды = 1 По 5 Цикл
		Страница = "Неактивная";
		Если НомерЗвезды <= Рейтинг Тогда
			Страница = "Активная";
		КонецЕсли;
		Если Элементы["Звезда" + НомерЗвезды + "Страницы"].ТекущаяСтраница <> Элементы["Звезда" + НомерЗвезды + "Страница" + Страница] Тогда
			Элементы["Звезда" + НомерЗвезды + "Страницы"].ТекущаяСтраница = Элементы["Звезда" + НомерЗвезды + "Страница" + Страница];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРейтинга()
	
	Если Не ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерЗвезды = 1 По 5 Цикл
		Элементы["Звезда_Неактивная_" + НомерЗвезды].Доступность = Ложь;
		Элементы["Звезда_Активная_" + НомерЗвезды].Доступность = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РейтингДляОтображения(ТекущийОбъект)
	
	// Если есть общий рейтинг, показываем его.
	Если ТекущийОбъект.Рейтинг <> 0 Тогда
		Возврат ТекущийОбъект.Рейтинг;
	КонецЕсли;
	
	// Если нет, то ищем индивидуальный по пользователю.
	ИндивидуальнаяОценка = ИндивидуальнаяОценка(ТекущийОбъект.Оценки);
	Если ИндивидуальнаяОценка <> Неопределено Тогда
		Возврат ИндивидуальнаяОценка;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндивидуальнаяОценка(Оценки)
	
	СтрокаОценки = СтрокаИндивидуальнойОценки(Оценки);
	Если СтрокаОценки <> Неопределено Тогда
		Возврат СтрокаОценки.Оценка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаИндивидуальнойОценки(Оценки)
	
	ОтборСтрок = Новый Структура("Пользователь");
	ОтборСтрок.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	НайденныеСтроки = Оценки.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВозраст(Форма)
	
	Форма.Возраст = ПредставлениеВозраста(Форма.ФизическоеЛицо.ДатаРождения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Возраст(ДатаРождения, ДатаВозраста = Неопределено)
	
	Если ДатаВозраста = Неопределено Тогда
	#Если Клиент Тогда		
		ДатаВозраста = ОбщегоНазначенияКлиент.ДатаСеанса();
	#Иначе
		ДатаВозраста = ТекущаяДатаСеанса();
	#КонецЕсли
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возраст = Год(ДатаВозраста) - Год(ДатаРождения);
	Если Месяц(ДатаРождения) > Месяц(ДатаВозраста) Тогда
		Возраст = Возраст - 1;
	Иначе
		Если Месяц(ДатаРождения) = Месяц(ДатаВозраста) Тогда
			Если День(ДатаРождения) > День(ДатаВозраста) Тогда
				Возраст = Возраст - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Макс(Возраст, 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВозраста(ДатаРождения, ДатаВозраста = Неопределено)
	
	Возраст = Возраст(ДатаРождения, ДатаВозраста);
	
	Если Возраст = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Подпись = СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла(НСтр("ru = 'год'"), НСтр("ru = 'года'"), НСтр("ru = 'лет'"), Возраст);
	
	Возврат СтрШаблон("%1 %2", Возраст, Подпись);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованиеКандидата()
	
	ФИО = Новый Структура("Фамилия, Имя, Отчество");
	ЗаполнитьЗначенияСвойств(ФИО, ФИОФизическихЛиц);
	
	КандидатОбъект.Наименование = Справочники.Кандидаты.НаименованиеКандидата(
		ФИО, 
		ФизическоеЛицо.УточнениеНаименования, 
		КандидатОбъект.УточнениеНаименования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднофамильцев()
	
	ПараметрыПроверки = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
		ФизическоеЛицоСсылка,
		ФИОФизическихЛиц.Фамилия,
		ФИОФизическихЛиц.Имя,
		ФИОФизическихЛиц.Отчество);
	
	Если ПараметрыПроверки.ФизическоеЛицоУникально Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ЗаголовокФормы, ТекстИнформационнойНадписи, ДанныеФизическихЛиц");
	ПараметрыОткрытия.Вставить("Фамилия", ФИОФизическихЛиц.Фамилия);
	ПараметрыОткрытия.Вставить("Имя", ФИОФизическихЛиц.Имя);
	ПараметрыОткрытия.Вставить("Отчество", ФИОФизическихЛиц.Отчество);
	
	Если ПараметрыПроверки.ДанныеФизическихЛиц.Количество() = 1 Тогда
		ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем'");
		ПараметрыОткрытия.ТекстИнформационнойНадписи = 
			НСтр("ru='Если вы регистрируете того же человека (например, при повторном обращении кандидата) нажмите «Да, это тот, кто мне нужен».
				|Если это однофамилец, нажмите «Нет, это другой человек».'");
	Иначе
		ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами.'");
		ПараметрыОткрытия.ТекстИнформационнойНадписи = 
			НСтр("ru='Если вы регистрируете одного из приведенных в списке людей (например, при повторном обращении кандидата), выберите его и нажмите «Отмеченный человек тот, кто мне нужен».
				|Если все приведенные в списке лица — однофамильцы, нажмите «Нет, это другой человек».'");
	КонецЕсли;
	
	ПараметрыОткрытия.ДанныеФизическихЛиц = ПараметрыПроверки.ДанныеФизическихЛиц;
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаОднофамильцевЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОднофамильцевЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицоСсылка = РезультатВыбора;
	КандидатОбъект.ФизическоеЛицо = ФизическоеЛицоСсылка;
	ПрочитатьФизическоеЛицоОбъект();
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДополнительнойФормыНаСервере(ОписаниеДополнительнойФормы) Экспорт
	Возврат СотрудникиФормы.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, ЭтаФорма);
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеИзХранилищаВФормуНаСервере(Параметр) Экспорт
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(Параметр.ИмяФормы),
		Параметр.АдресВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеДополнительнойФормы(ИмяФормы, Отказ) Экспорт
	
	СотрудникиФормы.СохранитьДанныеДополнительнойФормы(ЭтаФорма, ИмяФормы, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбразованиеКвалификацию()
	
	// Образование.
	Если ОбщегоНазначения.СсылкаСуществует(ФизическоеЛицоСсылка) Тогда
		ТаблицаОбразования = Справочники.ОбразованиеФизическихЛиц.ОбразованиеФизическогоЛица(ФизическоеЛицоСсылка);
	Иначе
		ТаблицаОбразования = Образование;
	КонецЕсли;
	
	ОбразованиеПредставление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаОбразования Цикл
		ПредставлениеЗаписи = "";
		Если СтрокаТаблицы.ОсновноеОбразование = Истина Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидОбразования) Тогда
				ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.ВидОбразования + ", ";
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидДополнительногоОбучения) Тогда
				ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.ВидДополнительногоОбучения + ", ";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.УчебноеЗаведение) Тогда
			ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.УчебноеЗаведение + ", ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Окончание) Тогда
			ПредставлениеЗаписи = ПредставлениеЗаписи + Формат(Год(СтрокаТаблицы.Окончание), "ЧГ=") + ", ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Квалификация) Тогда
			ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.Квалификация + ", ";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Специальность) Тогда
			ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.Специальность + ", ";
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.НаименованиеКурса) Тогда
			ПредставлениеЗаписи = ПредставлениеЗаписи + СтрокаТаблицы.НаименованиеКурса + ", ";
		КонецЕсли;
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗаписи, 2);
		Если Не ПустаяСтрока(ОбразованиеПредставление) Тогда
			ОбразованиеПредставление = ОбразованиеПредставление + Символы.ПС;
		КонецЕсли;
		ОбразованиеПредставление = ОбразованиеПредставление + ПредставлениеЗаписи;
	КонецЦикла;
	
	Если ПустаяСтрока(ОбразованиеПредставление) Тогда
		ОбразованиеПредставление = НСтр("ru = 'Нет сведений.'");
	КонецЕсли;
	
	Элементы.ОбразованиеПредставление.Заголовок = ОбразованиеПредставление;
	
	// Знание языков.
	Если ОбщегоНазначения.СсылкаСуществует(ФизическоеЛицоСсылка) Тогда
		Элементы.ЗнаниеЯзыковПредставление.Заголовок = РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.ПредставлениеВладениеЯзыкамиФизическогоЛица(ФизическоеЛицоСсылка);
	Иначе
		
		ЗнаниеЯзыковТаблица = Новый ТаблицаЗначений;
		
		Если ЗначениеЗаполнено(ЗнаниеЯзыков) И
			ЗнаниеЯзыков.Количество() > 0 Тогда
			
			ЗнаниеЯзыковТаблица.Колонки.Добавить("Язык");
			ЗнаниеЯзыковТаблица.Колонки.Добавить("СтепеньЗнанияЯзыка");
			
			Для Каждого СтрокаЗнаниеЯзыков Из ЗнаниеЯзыков Цикл
				
				НоваяСтрока = ЗнаниеЯзыковТаблица.Добавить();
				НоваяСтрока.Язык = СтрокаЗнаниеЯзыков.ЯзыкСтрока;
				НоваяСтрока.СтепеньЗнанияЯзыка = СтрокаЗнаниеЯзыков.СтепеньЗнанияЯзыка;
															
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ЗнаниеЯзыковПредставление.Заголовок = РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.ПредставлениеВладениеЯзыкамиПоКоллекцииЗаписей(ЗнаниеЯзыковТаблица);
			
	КонецЕсли;
	
	// Профессии.
	Элементы.ПрофессииПредставление.Заголовок = РегистрыСведений.ПрофессииФизическихЛиц.ПредставлениеПрофессийФизическогоЛица(ФизическоеЛицоСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразованиеКвалификацияПослеОтветаНаПредложениеЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьОбразованиеКвалификацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразованиеКвалификацию()
	
	ОписаниеФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.ФизическиеЛица.Форма.ОбразованиеКвалификация");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьОбразованиеКвалификациюЗавершение", ЭтотОбъект);
	
	СотрудникиКлиент.ОткрытьДополнительнуюФорму(ОписаниеФормы, ЭтаФорма, , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразованиеКвалификациюЗавершение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаполнитьОбразованиеКвалификацию();
	
КонецПроцедуры

&НаСервере
Процедура ФИОПриИзмененииНаСервере()

	// Сформировать ФИО.
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицо.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		ФИОФизическихЛиц.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			ФИОФизическихЛиц.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			ФИОФизическихЛиц.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		// Подбираем дату записи о ФИО.
		Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.Период) Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
				ФИОФизическихЛиц.Период = ФизическоеЛицо.ДатаРождения;
			Иначе
				ФИОФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			КонецЕсли;
		КонецЕсли;
		// Подобрать пол.
		Если ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) И Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
			ФизическоеЛицо.Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(ФИОФизическихЛиц.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	// Изменяем наименование физического лица.
	ФизическоеЛицо.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФИОФизическихЛиц.Фамилия, 
		ФИОФизическихЛиц.Имя, 
		ФИОФизическихЛиц.Отчество, 
		ФизическоеЛицо.УточнениеНаименования);
	
	ЗаполнитьНаименованиеКандидата();
	
	Если Не Параметры.Ключ.Пустая() Тогда 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФизическогоЛица(СтруктураЗаполнения)
	
	ЗаблокироватьФизическоеЛицоОбъектДляРедактированияНаСервере();
	
	Если СтруктураЗаполнения.Свойство("Фамилия") ИЛИ СтруктураЗаполнения.Свойство("Имя") ИЛИ СтруктураЗаполнения.Свойство("Отчество") Тогда
		ФизическоеЛицо.ФИО = ?(СтруктураЗаполнения.Свойство("Фамилия") И ЗначениеЗаполнено(СтруктураЗаполнения.Фамилия), СтруктураЗаполнения.Фамилия, "") 
			+ ?(СтруктураЗаполнения.Свойство("Имя") И ЗначениеЗаполнено(СтруктураЗаполнения.Имя), " " + СтруктураЗаполнения.Имя, "")
			+ ?(СтруктураЗаполнения.Свойство("Отчество") И ЗначениеЗаполнено(СтруктураЗаполнения.Отчество), " " + СтруктураЗаполнения.Отчество, "");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.ФИО) Тогда
		ФизическоеЛицо.ФИО = "";
	КонецЕсли;
	
	ФИОПриИзмененииНаСервере();
	
	Если СтруктураЗаполнения.Свойство("ДатаРождения") Тогда
		Если ТипЗнч(СтруктураЗаполнения.ДатаРождения) = Тип("Дата") Тогда
			ФизическоеЛицо.ДатаРождения = СтруктураЗаполнения.ДатаРождения;
		Иначе
			ФизическоеЛицо.ДатаРождения = ?(ЗначениеЗаполнено(СтруктураЗаполнения.ДатаРождения), Дата(СтрЗаменить(СтруктураЗаполнения.ДатаРождения, "-", "")), Дата(1, 1, 1));
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьВозраст(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) И СтруктураЗаполнения.Свойство("Пол") Тогда
		ФизическоеЛицо.Пол = СтруктураЗаполнения.Пол;
		Если ТипЗнч(СтруктураЗаполнения.Пол) = Тип("Строка") И ЗначениеЗаполнено(СтруктураЗаполнения.Пол) Тогда
			Если СтруктураЗаполнения.Пол = "Мужской" Тогда
				Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ИначеЕсли СтруктураЗаполнения.Пол = "Женский" Тогда
				Пол = Перечисления.ПолФизическогоЛица.Женский;
			КонецЕсли;
			ФизическоеЛицо.Пол = Пол;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураЗаполнения.Свойство("КонтактнаяИнформация") 
				И ЗначениеЗаполнено(СтруктураЗаполнения.КонтактнаяИнформация) Тогда
				
		Для Каждого КонтактнаяИнформацияСтрока Из СтруктураЗаполнения.КонтактнаяИнформация Цикл
			
			Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица") Тогда
				ТелефонПредставление = КонтактнаяИнформацияСтрока.Представление;
			КонецЕсли;
			
			Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица") Тогда
				EMailПредставление = КонтактнаяИнформацияСтрока.Представление;
			КонецЕсли; 
			
			Если КонтактнаяИнформацияСтрока.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица") Тогда
				АдресПредставление = КонтактнаяИнформацияСтрока.Представление;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
	
	Если СтруктураЗаполнения.Свойство("ТрудоваяДеятельность") 
				И ЗначениеЗаполнено(СтруктураЗаполнения.ТрудоваяДеятельность) Тогда
		Для Каждого ТрудоваяДеятельностьСтрока Из СтруктураЗаполнения.ТрудоваяДеятельность Цикл
			
			НоваяСтрокаСтаж = ТрудоваяДеятельностьФизическихЛицНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСтаж, ТрудоваяДеятельностьСтрока, "Организация, Должность, Обязанности, СфераДеятельностиКомпании");
			НоваяСтрокаСтаж.ФизическоеЛицо = ФизическоеЛицоСсылка;
			Если ТипЗнч(ТрудоваяДеятельностьСтрока.ДатаНачала) = Тип("Дата") Тогда 
				НоваяСтрокаСтаж.ДатаНачала = ТрудоваяДеятельностьСтрока.ДатаНачала;
				НоваяСтрокаСтаж.ДатаОкончания = ТрудоваяДеятельностьСтрока.ДатаОкончания;
			Иначе
				НоваяСтрокаСтаж.ДатаНачала = ?(ЗначениеЗаполнено(ТрудоваяДеятельностьСтрока.ДатаНачала), Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТрудоваяДеятельностьСтрока.ДатаНачала, "-", ""), " ", ""), Символы.НПП, "")), Дата(1, 1, 1));
				НоваяСтрокаСтаж.ДатаОкончания = ?(ЗначениеЗаполнено(ТрудоваяДеятельностьСтрока.ДатаОкончания), Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ТрудоваяДеятельностьСтрока.ДатаОкончания, "-", ""), " ", ""), Символы.НПП, "")), Дата(1, 1, 1));
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("СостояниеВБраке")
		И ЗначениеЗаполнено(СтруктураЗаполнения.СостояниеВБраке) 
		И СтруктураЗаполнения.СостояниеВБраке.Количество() = 1 Тогда
		
		СостояниеВБраке = Справочники.СостояниеВБраке.ПустаяСсылка();
		Если ТипЗнч(СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке) = Тип("СправочникСсылка.СостояниеВБраке") Тогда
			СостояниеВБраке = СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке;
		ИначеЕсли СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Женат" 
			Или СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Замужем" Тогда
			СостояниеВБраке = Справочники.СостояниеВБраке.НайтиПоКоду("2");
		ИначеЕсли СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Не женат" 
			Или СтруктураЗаполнения.СостояниеВБраке[0].СостояниеВБраке = "Не замужем" Тогда
			СостояниеВБраке = Справочники.СостояниеВБраке.НайтиПоКоду("1");
		КонецЕсли;
		
		СостоянияВБракеФизическихЛиц.СостояниеВБраке = СостояниеВБраке;
		
		Если Не ЗначениеЗаполнено(СостоянияВБракеФизическихЛиц.Период) Тогда
			СостоянияВБракеФизическихЛиц.Период = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("Гражданство")
		И ЗначениеЗаполнено(СтруктураЗаполнения.Гражданство) 
		И СтруктураЗаполнения.Гражданство.Количество() = 1 Тогда
		
		ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.НайтиПоНаименованию(СтруктураЗаполнения.Гражданство[0].Страна);
		
		Если Не ЗначениеЗаполнено(ГражданствоФизическихЛиц.Период) Тогда
			ГражданствоФизическихЛиц.Период = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("Образование")
		И ЗначениеЗаполнено(СтруктураЗаполнения.Образование)
		И СтруктураЗаполнения.Образование.Количество() > 0 Тогда
		
		Образование.Загрузить(Справочники.Кандидаты.ПодготовитьДанныеОбОбразовании(СтруктураЗаполнения.Образование));
		
	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("ЗнаниеЯзыков")
		И ЗначениеЗаполнено(СтруктураЗаполнения.ЗнаниеЯзыков) 
		И СтруктураЗаполнения.ЗнаниеЯзыков.Количество() > 0 Тогда
		
		ЗнаниеЯзыков.Загрузить(Справочники.Кандидаты.ПодготовитьДанныеОЗнанияхЯзыков(СтруктураЗаполнения.ЗнаниеЯзыков));
		
	КонецЕсли;
	
	ЗаполнитьОбразованиеКвалификацию();
	
	Если СтруктураЗаполнения.Свойство("Фото") 
		И ЗначениеЗаполнено(СтруктураЗаполнения.Фото) Тогда
		
		АдресФотографии = ПоместитьВоВременноеХранилище(СтруктураЗаполнения.Фото, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьАдресРезюме()
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(КандидатОбъект.АдресРезюме, , , , КандидатОбъект.АдресРезюме));
	
	Элементы.АдресРезюме.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВакансии(Вакансия)
	
	Если Вакансия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КандидатОбъект.Вакансия = Вакансия;
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вакансия, "Позиция, Подразделение");
	ЗаполнитьЗначенияСвойств(КандидатОбъект, СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура МногострочныйЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИмяЭлемента", Элемент.Имя);

	Оповещение = Новый ОписаниеОповещения("МногострочныйЭлементНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	 
	ПоказатьВводСтроки(Оповещение, ТекущиеДанные[Элемент.Имя],,, Истина); 
	              
КонецПроцедуры

&НаКлиенте
Процедура МногострочныйЭлементНачалоВыбораЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяЭлемента] = Строка;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция Анкета(Кандидат, Вакансия, Этап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АнкетыКандидатов.Анкета,
		|	АнкетыКандидатов.Анкета.Проведен КАК ТолькоПросмотр
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|ГДЕ
		|	АнкетыКандидатов.Вакансия = &Вакансия
		|	И АнкетыКандидатов.ЭтапРаботыСКандидатом = &Этап
		|	И АнкетыКандидатов.Кандидат = &Кандидат";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураАнкеты = Новый Структура;
		СтруктураАнкеты.Вставить("Анкета", Выборка.Анкета);
		СтруктураАнкеты.Вставить("ТолькоПросмотр", Выборка.ТолькоПросмотр);
		Возврат СтруктураАнкеты;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСписокОценок(Команда)
	
	ПараметрыФормы = Новый Структура("Кандидат, Оценки");
	ПараметрыФормы.Кандидат = КандидатСсылка;
	ПараметрыФормы.Оценки = КандидатОбъект.Оценки;
	
	ОткрытьФорму("Справочник.Кандидаты.Форма.ФормаОценок", ПараметрыФормы, , ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСреднийРейтинг(Форма)
	
	КандидатОбъект = Форма.КандидатОбъект;
	ВсегоОценок = КандидатОбъект.Оценки.Количество();
	
	Если ВсегоОценок < 1 Тогда
		Форма.Элементы.НадписьАгрегированнаяОценка.Заголовок = Неопределено;
		Возврат;
	КонецЕсли;
	
	СреднийРейтинг = СреднийРейтинг(Форма, ВсегоОценок);
	
	Форма.Элементы.НадписьАгрегированнаяОценка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Средняя: %1, всего оценок %2'"), Окр(СреднийРейтинг, 2), ВсегоОценок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СреднийРейтинг(Форма, ВсегоОценок = Неопределено)
	
	Если ВсегоОценок = Неопределено Тогда
		ВсегоОценок = Форма.КандидатОбъект.Оценки.Количество();
	КонецЕсли;
	
	Если ВсегоОценок = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Форма.КандидатОбъект.Оценки.Итог("Оценка") / ВсегоОценок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСреднийРейтинг(ТекущийОбъект)
	ТекущийОбъект.СреднийРейтинг = СреднийРейтинг(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРаботуСКандидатами()
	
	НаборЗаписей = РеквизитФормыВЗначение("РаботаСКандидатамиНаборЗаписей");
	Индекс = 0;
	Пока Индекс < НаборЗаписей.Количество() Цикл
		Если Не ЗначениеЗаполнено(НаборЗаписей[Индекс].Период) Тогда
			НаборЗаписей.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	НаборЗаписей.Отбор.Кандидат.Установить(КандидатСсылка);
	НаборЗаписей.Записать();
	
	// Заполняем текущий этап работы с кандидатом.
	ЗаписатьТекущийЭтапРаботы();
	
КонецПроцедуры

#Область Комментарии

&НаСервере
Функция ПредставлениеКомментария(ДанныеКомментария)
	
	Представление = "";
	
	Автор = ДанныеКомментария.Пользователь;
	Время = ДанныеКомментария.Период;
	Текст = ДанныеКомментария.Комментарий;
	
	АвторПредставление = "";
	Если Автор = Пользователи.СсылкаНеуказанногоПользователя() Тогда
		АвторПредставление = Пользователи.ПолноеИмяНеуказанногоПользователя();
	Иначе
		ФизическоеЛицоАвтора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автор, "ФизическоеЛицо");
		Если Не ЗначениеЗаполнено(ФизическоеЛицоАвтора) Тогда
			АвторПредставление = Строка(Автор);
		Иначе
			ФИОАвтора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоАвтора, "Фамилия, Имя, Отчество");
			АвторПредставление = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОАвтора);
		КонецЕсли;
	КонецЕсли;
	
	ВремяПредставление = "";
	Если НачалоДня(Время) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ВремяПредставление = Формат(Время, "ДФ=ЧЧ:мм; ДЛФ=T");
	Иначе
		ВремяПредставление = Формат(Время, "ДЛФ=D");
	КонецЕсли;
	
	ШаблонЗаголовка = НСтр("ru = '%1 (%2)'");
	ПредставлениеЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, АвторПредставление, ВремяПредставление);
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаголовка, , , , "Ссылка"));
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Текст);
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьДобавленияИзмененияКомментариев()
	
	ДобавлениеИзменениеКомментариевДоступно = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КомментарииКандидатов);
	Если ДобавлениеИзменениеКомментариевДоступно Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДобавитьКомментарий.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеКомментариев()
	
	КомментарииКандидатовНаборЗаписей.Сортировать("Период Убыв");
	КоличествоКомментариев = КомментарииКандидатовНаборЗаписей.Количество();

	Если КоличествоКомментариев = 0 Тогда
		Элементы.ВспомогательнаяГруппаКомментарии.Видимость = Ложь;
		Возврат;
	КонецЕсли;
		
	Элементы.ВспомогательнаяГруппаКомментарии.Видимость = Истина;
	
	Индекс = 0;
	Пока Индекс < КоличествоКомментариев Цикл
		Если Индекс = 2 Тогда
			Прервать;
		КонецЕсли;
		НомерКомментария = Индекс + 1;
		СтрокаНабора = КомментарииКандидатовНаборЗаписей[Индекс];
		Элементы["Комментарий" + НомерКомментария].Видимость = Истина;
		Элементы["Комментарий" + НомерКомментария].Заголовок = ПредставлениеКомментария(СтрокаНабора);
		ЭтаФорма["Комментарий" + НомерКомментария] = СтрокаНабора.ПолучитьИдентификатор();
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Пока Индекс < 2 Цикл
		НомерКомментария = Индекс + 1;
		Элементы["Комментарий" + НомерКомментария].Видимость = Ложь;
		Элементы["Комментарий" + НомерКомментария].Заголовок = Неопределено;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если КоличествоКомментариев <= 2 Тогда
		Элементы.ДругиеКомментарии.Видимость = Ложь;
	Иначе
		Элементы.ДругиеКомментарии.Видимость = Истина;
		Элементы.ДругиеКомментарии.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все комментарии (еще %1)'"), КоличествоКомментариев - 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеКомментария()
	
	ПараметрыФормы = Новый Структура("Пользователь");
	ПараметрыФормы.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеКомментария", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.КомментарииКандидатов.Форма.КомментарийКандидата", ПараметрыФормы, ЭтаФорма, ЭтаФорма, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтрокаНабора = КомментарииКандидатовНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНабора, Результат);
	СтрокаНабора.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	СтрокаНабора.Кандидат = КандидатСсылка;
	СтрокаНабора.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	ЗаполнитьПредставлениеКомментариев();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКомментарий(НомерКомментария)
	НачатьИзменениеКомментария(НомерКомментария);
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеКомментария(НомерКомментария)
	
	ПараметрыФормы = ПодборПерсоналаКлиентСервер.ПараметрыРедактированияКомментарияКандидата();
		
	СтрокаНабора = КомментарииКандидатовНаборЗаписей.НайтиПоИдентификатору(ЭтаФорма["Комментарий" + НомерКомментария]);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаНабора);
	
	ДополнительныеПараметры = Новый Структура("НомерКомментария");
	ДополнительныеПараметры.НомерКомментария = НомерКомментария;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменениеКомментария", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("РегистрСведений.КомментарииКандидатов.Форма.КомментарийКандидата", ПараметрыФормы, ЭтаФорма, ЭтаФорма, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НомерКомментария = ДополнительныеПараметры.НомерКомментария;
	СтрокаНабора = КомментарииКандидатовНаборЗаписей.НайтиПоИдентификатору(ЭтаФорма["Комментарий" + НомерКомментария]);
	ЗаполнитьЗначенияСвойств(СтрокаНабора, Результат);
	СтрокаНабора.Комментарий = Результат.Комментарий;
	СтрокаНабора.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	СтрокаНабора.Кандидат = КандидатСсылка;
	
	ЗаполнитьПредставлениеКомментариев();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытиеСпискаКомментариев()
	
	КомментарииКандидатовНаборЗаписей.Сортировать("Период Убыв");
	
	Комментарии = Новый Массив;
	Для Каждого СтрокаНабора Из КомментарииКандидатовНаборЗаписей Цикл
		ЗаписьКомментария = ПодборПерсоналаКлиентСервер.ПараметрыРедактированияКомментарияКандидата();
		ЗаполнитьЗначенияСвойств(ЗаписьКомментария, СтрокаНабора);
		Комментарии.Добавить(ЗаписьКомментария);
	КонецЦикла;

	ПараметрыФормы = Новый Структура(
		"Кандидат, 
		|Комментарии");
	ПараметрыФормы.Кандидат = КандидатСсылка;
	ПараметрыФормы.Комментарии = Комментарии;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьРаботуСпискаКомментариев", ЭтотОбъект);
	ОткрытьФорму("Справочник.Кандидаты.Форма.СписокКомментариев", ПараметрыФормы, , ЭтаФорма, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуСпискаКомментариев(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	КомментарииКандидатовНаборЗаписей.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, КомментарииКандидатовНаборЗаписей);
	
	ЗаполнитьПредставлениеКомментариев()
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомментарии(КандидатСсылка)
	
	ЗагрузитьКомментарииРекрутинговыхСайтов(КандидатСсылка);
	ПрочитатьКомментарииИзРегистраСведений(КандидатСсылка);
	ЗаполнитьПредставлениеКомментариев();
			
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомментарии()
	
	// Пользователь имеет права только на изменение своих комментариев, поэтому меняем набор с отбором по текущему пользователю.
	НаборЗаписей = РегистрыСведений.КомментарииКандидатов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Кандидат.Установить(КандидатСсылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.АвторизованныйПользователь());
	
	// Добавляем все комментарии текущего пользователя из текущей формы.
	Для Каждого СтрокаНабора Из КомментарииКандидатовНаборЗаписей Цикл
		Если СтрокаНабора.Пользователь = Пользователи.АвторизованныйПользователь() Тогда
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
			НоваяСтрока.Кандидат = КандидатСсылка;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКомментарииИзРегистраСведений(КандидатСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", КандидатСсылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КомментарииКандидатов.Период,
		|	КомментарииКандидатов.Кандидат,
		|	КомментарииКандидатов.Пользователь,
		|	КомментарииКандидатов.Комментарий,
		|	КомментарииКандидатов.Скрытый,
		|	КомментарииКандидатов.МестоПубликации,
		|	КомментарииКандидатов.Идентификатор
		|ИЗ
		|	РегистрСведений.КомментарииКандидатов КАК КомментарииКандидатов
		|ГДЕ
		|	КомментарииКандидатов.Кандидат = &Кандидат
		|	И (КомментарииКандидатов.Скрытый = ЛОЖЬ
		|			ИЛИ КомментарииКандидатов.Пользователь = &ТекущийПользователь)";
		
	НаборЗаписей = РегистрыСведений.КомментарииКандидатов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗначениеВРеквизитФормы(НаборЗаписей, "КомментарииКандидатовНаборЗаписей");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКомментарииРекрутинговыхСайтов(КандидатСсылка)
	ИнтеграцияРекрутинговыхСайтов.ЗагрузитьКомментарииКандидата(КандидатСсылка);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКандидатаПоДаннымРезюмеРекрутинговогоСайта(СтруктураРезюме, Сайт, Заполнен = Ложь)
	
	Если ТипЗнч(СтруктураРезюме) <> Тип("Структура") 
		И ТипЗнч(СтруктураРезюме) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеСайты = ИнтеграцияРекрутинговыхСайтов.ИспользуемыеСайты();
	Если ИспользуемыеСайты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуемыеСайты.Найти(Сайт) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияРекрутинговыхСайтов.ЗаполнитьДанныеПубликацииРезюмеНаборЗаписей(Сайт, ДанныеПубликацииРезюмеНаборЗаписей, СтруктураРезюме, КандидатСсылка);
	
	СтруктураЗаполнения = ИнтеграцияРекрутинговыхСайтов.СтруктураДанныхКандидата(Сайт, СтруктураРезюме);
				
	ЗаполнитьЗначенияСвойств(КандидатОбъект, СтруктураЗаполнения, , "ФизическоеЛицо");
	КандидатОбъект.Состояние = Перечисления.СостоянияСогласования.Рассматривается;
	Если ЗначениеЗаполнено(СтруктураЗаполнения.ФизическоеЛицо) Тогда
		КандидатОбъект.ФизическоеЛицо = СтруктураЗаполнения.ФизическоеЛицо;
	КонецЕсли;
	
	ЗаполнитьДанныеФизическогоЛица(СтруктураЗаполнения);
	
	ЗаполнитьКомментарииПоДаннымРезюмеРекрутинговогоСайта(СтруктураРезюме);
	
	ПолныйТекстРезюме = Неопределено;
	Если СтруктураЗаполнения.Свойство("ПолныйТекстРезюме",ПолныйТекстРезюме) Тогда
		Резюме.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ПолныйТекстРезюме));
	КонецЕсли; 
	
	Заполнен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКандидатаПоДаннымРезюме(СтруктураРезюме)
	
	СтруктураЗаполнения = Справочники.Кандидаты.СтруктураДанныхКандидата();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЗаполнения, СтруктураРезюме, Истина);
	СтруктураЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураЗаполнения.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ДатаОткрытия", ТекущаяДатаСеанса());
	
	ЗаполнитьЗначенияСвойств(КандидатОбъект, СтруктураЗаполнения, , "ФизическоеЛицо");
	КандидатОбъект.Состояние = Перечисления.СостоянияСогласования.Рассматривается;
	Если ЗначениеЗаполнено(СтруктураЗаполнения.ФизическоеЛицо) Тогда
		КандидатОбъект.ФизическоеЛицо = СтруктураЗаполнения.ФизическоеЛицо;
	КонецЕсли;
	
	ЗаполнитьДанныеФизическогоЛица(СтруктураЗаполнения);
	
	ПолныйТекстРезюме = Неопределено;
	Если СтруктураЗаполнения.Свойство("ПолныйТекстРезюме",ПолныйТекстРезюме) Тогда
		Резюме.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ПолныйТекстРезюме));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомментарииПоДаннымРезюмеРекрутинговогоСайта(СтруктураРезюме)
	
	Комментарии = СтруктураРезюме["Комментарии"];
	Если Комментарии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКомментария Из Комментарии Цикл
		Если Не ЗначениеЗаполнено(СтрокаКомментария.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КомментарииКандидатовНаборЗаписей.Добавить(), СтрокаКомментария);
	КонецЦикла;
	
	ЗаполнитьПредставлениеКомментариев();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВакансияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		КандидатОбъект.Вакансия = ТекущаяВакансия;
		Возврат;
	КонецЕсли;
	
	ТекущаяВакансия = КандидатОбъект.Вакансия;
	ЗаполнитьПоДаннымВакансии();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОценкуПоХарактеристикам()
	
	Если КандидатОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОценкиКандидатовПоХарактеристикам.Оценка КАК Оценка
		|ИЗ
		|	РегистрСведений.ОценкиКандидатовПоХарактеристикам КАК ОценкиКандидатовПоХарактеристикам
		|ГДЕ
		|	ОценкиКандидатовПоХарактеристикам.Кандидат = &Кандидат";
	Запрос.УстановитьПараметр("Кандидат", КандидатОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Оценка) Тогда
			ОценкаПоХарактеристикам = Выборка.Оценка;
		Иначе
			ОценкаПоХарактеристикам = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьАнкетуКандидата(Кандидат, Вакансия, ЭтапРаботы)
	
	ЭлектронноеИнтервью.ОтменитьАнкетыПоЭтапу(Вакансия, ЭтапРаботы, Кандидат);
	Кандидаты = Новый Массив;
	Кандидаты.Добавить(Кандидат);
	ЭлектронноеИнтервью.РассчитатьОценкиКандидатов(Вакансия, Кандидаты);
	
КонецПроцедуры

#Область ЭтапыРаботыСКандидатом

&НаСервере
Процедура ЗаполнитьТекущийЭтапРаботы()
	
	// Определяем текущий этап.
	СтрокаНабора = ПодборПерсонала.ТекущийЭтапРаботыСКандидатом(РаботаСКандидатамиНаборЗаписей, КандидатОбъект.Состояние);
	
	ТекущийЭтапИдентификатор = Неопределено;
	Если СтрокаНабора <> Неопределено Тогда
		ТекущийЭтапИдентификатор = СтрокаНабора.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеТекущегоЭтапа()
	
	Перем ПредставлениеЭтапа;
	
	Если ТекущийЭтапИдентификатор = Неопределено Тогда
		// Список этапов отбора для вакансии не определен, или все этапы пройдены.
		Элементы.ТекущийЭтапСостояниеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДобавлятьКоманды = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	
	ТекущийЭтап = РаботаСКандидатамиНаборЗаписей.НайтиПоИдентификатору(ТекущийЭтапИдентификатор);
	
	Элементы.ТекущийЭтапСостояниеГруппа.Видимость = Истина;
	
	ТекстДатаВремя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 в %2'"), 
		ПредставлениеДаты(ТекущийЭтап.Период), 
		Формат(ТекущийЭтап.Период, "ДФ=ЧЧ:мм"));
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текущий этап «%1»'"), 
			ТекущийЭтап.ЭтапРаботы));
	
	ДобавитьПробел(ЧастиСтроки);
	Если ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		ЧастиСтроки.Добавить(НСтр("ru = 'запланирован'"));
		ДобавитьПробел(ЧастиСтроки);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстДатаВремя, , , , "ТекущийЭтапЗапланировать"));
	Иначе
		Если ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
			ЧастиСтроки.Добавить(НСтр("ru = 'пройден'"));
			ДобавитьПробел(ЧастиСтроки);
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстДатаВремя, , , , "ТекущийЭтапВыполнить"));
			ДобавлятьКоманды = Ложь;
		ИначеЕсли ТекущийЭтап.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
			ЧастиСтроки.Добавить(НСтр("ru = 'пропущен'"));
			ДобавитьПробел(ЧастиСтроки);
			ЧастиСтроки.Добавить(ТекстДатаВремя);
			ДобавлятьКоманды = Ложь;
		Иначе
			ЧастиСтроки.Добавить(НСтр("ru = 'пока не запланирован'"));
			Если ДобавлятьКоманды Тогда
				ДобавитьПробел(ЧастиСтроки);
				ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Запланировать'"), , , , "ТекущийЭтапЗапланировать"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлятьКоманды Тогда
		ДобавитьПробел(ЧастиСтроки);
		Если ЗначениеЗаполнено(ТекущийЭтап.ШаблонАнкеты) Тогда
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Пройти'"), , , , "ТекущийЭтапПройти"));	
		Иначе
			ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Отметить пройденным'"), , , , "ТекущийЭтапВыполнить"));
		КонецЕсли;
		ДобавитьПробел(ЧастиСтроки);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Пропустить'"), , , , "ТекущийЭтапПропустить"));
	КонецЕсли;
	
	Элементы.ТекущийЭтапСостояние.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПробел(ЧастиСтроки)
	ЧастиСтроки.Добавить(" ");
КонецПроцедуры

&НаСервере
Функция ПредставлениеДаты(Дата)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если НачалоДня(ТекущаяДата) = НачалоДня(Дата) Тогда
		Возврат НСтр("ru = 'сегодня'");
	КонецЕсли;
	
	Если КонецДня(ТекущаяДата) + 1 = НачалоДня(Дата) Тогда
		Возврат НСтр("ru = 'завтра'");
	КонецЕсли;
	
	Если НачалоГода(ТекущаяДата) <> НачалоГода(Дата) Тогда
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;
	
	Возврат Формат(Дата, "ДФ='д ММММ (ддд)'");
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиТекущийЭтапЗапланировать(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ТекущийЭтапЗапланировать" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачатьУстановкуСостоянияТекущегоЭтапаРаботы(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиТекущийЭтапВыполнить(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ТекущийЭтапВыполнить" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачатьУстановкуСостоянияТекущегоЭтапаРаботы(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиТекущийЭтапПройти(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ТекущийЭтапПройти" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачатьПрохождениеЭлектронногоИнтервьюТекущегоЭтапаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораШаблона(Кандидат, ПередаваемыеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_СформироватьСообщениеЗаявителю", ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборПерсоналаКлиент"), ПередаваемыеПараметры);
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(Оповещение, , Кандидат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРезюмеЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПодборПерсоналаКлиент.ПараметрыФормированияПисьма(УникальныйИдентификатор);
	ДополнительныеПараметры.ИдентификаторПечатнойФормы = ПодборПерсоналаКлиент.ИдентификаторПечатнойФормы(ПараметрыВыполнения.ИмяКоманды);
	ДополнительныеПараметры.Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатОбъект.Ссылка);
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШаблоныСообщений") Тогда
		ОткрытьФормуВыбораШаблона(КандидатОбъект.Ссылка, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("ВывестиСписокПредметов");
		ПодборПерсоналаКлиент.СформироватьСообщениеЗаявителюБезШаблона(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяСсылкойЗавершение(Ответ, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПодборПерсоналаКлиент.ПараметрыФормированияПисьма(УникальныйИдентификатор);
	ДополнительныеПараметры.Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатОбъект.Ссылка);
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШаблоныСообщений") Тогда
		Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
			ПодборПерсоналаКлиент.Подключаемый_СформироватьСообщениеЗаявителю(ШаблонСообщения, ДополнительныеПараметры);
		Иначе
			ОткрытьФормуВыбораШаблона(КандидатОбъект.Ссылка, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("ВывестиСписокСсылок");
		ПодборПерсоналаКлиент.СформироватьСообщениеЗаявителюБезШаблона(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиТекущийЭтапПропустить(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ТекущийЭтапПропустить" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НачатьУстановкуСостоянияТекущегоЭтапаРаботы(ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пропущен"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаписиКандидата(ОбработчикОповещения)
	
	ТекстВопроса = НСтр("ru = 'Данные кандидата не записаны.
                         |Для продолжения данные кандидата необходимо записать.'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрохождениеЭлектронногоИнтервьюТекущегоЭтапаРаботы()
	
	ТекущийЭтап = РаботаСКандидатамиНаборЗаписей.НайтиПоИдентификатору(ТекущийЭтапИдентификатор);
	НачатьПрохождениеЭлектронногоИнтервьюЭтапаРаботы(ТекущийЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрохождениеЭлектронногоИнтервьюЭтапаРаботы(ДанныеЭтапа)
	
	Если Не Модифицированность Тогда
		ПройтиЭлектронноеИнтервьюЭтапаРаботы(ДанныеЭтапа);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ДанныеЭтапа");
	ДополнительныеПараметры.ДанныеЭтапа = ДанныеЭтапа;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПройтиЭлектронноеИнтервьюТекущегоЭтапаРаботыПослеВопросаЗаписать", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопросЗаписиКандидата(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПройтиЭлектронноеИнтервьюТекущегоЭтапаРаботыПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПройтиЭлектронноеИнтервьюЭтапаРаботы(ДополнительныеПараметры.ДанныеЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПройтиЭлектронноеИнтервьюЭтапаРаботы(ДанныеЭтапа)
	
	СтруктураАнкеты = Анкета(КандидатСсылка, КандидатОбъект.Вакансия, ДанныеЭтапа.ЭтапРаботы);
	Если СтруктураАнкеты = Неопределено Или СтруктураАнкеты.ТолькоПросмотр Тогда
		ЭлектронноеИнтервьюКлиент.НачатьИнтервью(
			КандидатСсылка, ФизическоеЛицоСсылка, ДанныеЭтапа.ЭтапРаботы, ДанныеЭтапа.ШаблонАнкеты);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоФормаЗаполнения", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыФормы.Вставить("Ключ", СтруктураАнкеты.Анкета);
	ПараметрыФормы.Вставить("ВозможностьПредварительногоСохранения", Истина);
	ФормаАнкеты = ОткрытьФорму("Документ.Анкета.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтменуЭтапаРаботы(ТекущиеДанные)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СостояниеЭтапа) Тогда
		// Не нужно отменять этап, у которого и так пустое состояние.
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пропущен") Тогда
		// Не спрашиваем, чтобы отменить пропущенный этап.
		ТекущиеДанные.Период = Неопределено;
		НачатьУстановкуСостоянияЭтапаРаботы(Неопределено, ТекущиеДанные, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден") Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этап «%1» отмечен как пройденный кандидатом. 
                  |При отмене этого результата убедитесь, что уведомлены все заинтересованные стороны.'"), 
			ТекущиеДанные.ЭтапРаботы);
		Если ЗначениеЗаполнено(ТекущиеДанные.ШаблонАнкеты) Тогда
			ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Кроме того, действие приведет к отмене результатов интервью по этому этапу.'");
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Продолжить?'");
	ИначеЕсли ТекущиеДанные.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован") Тогда
		ТекстВопроса = НСтр("ru = 'При отмене запланированного этапа убедитесь, что уведомлены все заинтересованные стороны.
                             |Продолжить?'"); 
		
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Отменить этап'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура("ДанныеЭтапа");
	ДополнительныеПараметры.ДанныеЭтапа = ТекущиеДанные;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтменитьЭтапПослеВопросаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЭтапПослеВопросаПодтверждения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ДанныеЭтапа.Период = Неопределено;
	НачатьУстановкуСостоянияЭтапаРаботы(Неопределено, ДополнительныеПараметры.ДанныеЭтапа, Ложь);
	ОтменитьАнкетуКандидата(КандидатСсылка, КандидатОбъект.Вакансия, ДополнительныеПараметры.ДанныеЭтапа.ЭтапРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуСостоянияТекущегоЭтапаРаботы(СостояниеЭтапа, ОткрыватьФорму = Истина)
	
	ТекущийЭтап = РаботаСКандидатамиНаборЗаписей.НайтиПоИдентификатору(ТекущийЭтапИдентификатор);
	НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ТекущийЭтап, ОткрыватьФорму);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуСостоянияЭтапаРаботы(СостояниеЭтапа, ДанныеЭтапа, ОткрыватьФорму = Истина)
	
	Если Не Модифицированность Тогда
		УстановитьСостояниеЭтапаРаботы(СостояниеЭтапа, ДанныеЭтапа, ОткрыватьФорму);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура(
		"СостояниеЭтапа, 
		|ДанныеЭтапа,
		|ОткрыватьФорму");
	ДополнительныеПараметры.СостояниеЭтапа = СостояниеЭтапа;
	ДополнительныеПараметры.ДанныеЭтапа = ДанныеЭтапа;
	ДополнительныеПараметры.ОткрыватьФорму = ОткрыватьФорму;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьСостояниеЭтапаРаботыПослеВопросаЗаписать", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопросЗаписиКандидата(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЭтапаРаботыПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеЭтапаРаботы(ДополнительныеПараметры.СостояниеЭтапа, ДополнительныеПараметры.ДанныеЭтапа, ДополнительныеПараметры.ОткрыватьФорму);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеСостоянияЭтапаРаботы(ДанныеЭтапа)
	
	Если Не Модифицированность Тогда
		ИзменитьСостояниеЭтапаРаботы(ДанныеЭтапа);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура(
		"ДанныеЭтапа");
	ДополнительныеПараметры.ДанныеЭтапа = ДанныеЭтапа;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ИзменитьСостояниеЭтапаРаботыПослеВопросаЗаписать", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопросЗаписиКандидата(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЭтапаРаботыПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеЭтапаРаботы(ДополнительныеПараметры.ДанныеЭтапа);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЭтапаРаботы(ДанныеЭтапа)
	
	ПараметрыФормы = ПодборПерсоналаКлиентСервер.ПараметрыРедактированияЭтапаРаботыСКандидатом();
	ПараметрыФормы.Кандидаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатСсылка);
	ПараметрыФормы.СостояниеЭтапа = ДанныеЭтапа.СостояниеЭтапа;
	ПараметрыФормы.ЭтапРаботы = ДанныеЭтапа.ЭтапРаботы;
	ПараметрыФормы.Период = ДанныеЭтапа.Период;
	ПараметрыФормы.ТолькоПросмотр = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	ПараметрыФормы.ШаблонАнкеты = ДанныеЭтапа.ШаблонАнкеты;
	ПараметрыФормы.Комментарий = ДанныеЭтапа.Комментарий;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьСостояниеЭтапаРаботыПослеВыбора", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.РаботаСКандидатами.Форма.ЭтапРаботыСКандидатом", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЭтапаРаботы(Состояние, ДанныеЭтапа, ОткрыватьФорму = Истина)
	
	Если Не ОткрыватьФорму Тогда
		Результат = ПодборПерсоналаКлиентСервер.РезультатУстановкиЭтапаРаботыСКандидатом();
		Результат.Кандидаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатСсылка);
		Результат.ЭтапРаботы.Этап = ДанныеЭтапа.ЭтапРаботы;
		Результат.ЭтапРаботы.Состояние = Состояние;
		Результат.ЭтапРаботы.Период = ДанныеЭтапа.Период;
		Если Не ЗначениеЗаполнено(ДанныеЭтапа.Период) Тогда
			Результат.ЭтапРаботы.Период = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		УстановитьСостояниеЭтапаРаботыНаСервере(Результат);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПодборПерсоналаКлиентСервер.ПараметрыРедактированияЭтапаРаботыСКандидатом();
	ПараметрыФормы.Кандидаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КандидатСсылка);
	ПараметрыФормы.СостояниеЭтапа = Состояние;
	ПараметрыФормы.ЭтапРаботы = ДанныеЭтапа.ЭтапРаботы;
	ПараметрыФормы.ТолькоПросмотр = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	ПараметрыФормы.ШаблонАнкеты = ДанныеЭтапа.ШаблонАнкеты;
	ПараметрыФормы.Комментарий = ДанныеЭтапа.Комментарий;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("УстановитьСостояниеЭтапаРаботыПослеВыбора", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.РаботаСКандидатами.Форма.ЭтапРаботыСКандидатом", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор, , , ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЭтапаРаботыПослеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеЭтапаРаботыНаСервере(РезультатВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЭтапаРаботыНаСервере(РезультатВыбора)
	
	ПодборПерсонала.УстановитьСостояниеЭтапаРаботыКандидатов(РезультатВыбора);
	
	ПрочитатьРаботуСКандидатом();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРаботуСКандидатом(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = КандидатОбъект;
	КонецЕсли;
	
	РаботаСКандидатомТаблица = ПодборПерсонала.РаботаСКандидатомТаблица(КандидатСсылка, КандидатОбъект.Вакансия);
	
	РаботаСКандидатамиНаборЗаписей.Очистить();
	Для Каждого СтрокаТаблицы Из РаботаСКандидатомТаблица Цикл
		НоваяСтрока = РаботаСКандидатамиНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Период = СтрокаТаблицы.ДатаВремя;
	КонецЦикла;
	
	ЗаполнитьТекущийЭтапРаботы();
	ЗаполнитьПредставлениеТекущегоЭтапа();
	НастроитьКомандыСпискаЭтаповРаботыСКандидатом(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьКомандыСпискаЭтаповРаботыСКандидатом(Форма, ВыбранныйЭтапИдентификатор = Неопределено)
	
	Элементы = Форма.Элементы;
	
	РольДоступнаДобавлениеИзменениеДанныхКандидатов = Форма.РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	
	ТекущиеДанные = Неопределено;
	Если ВыбранныйЭтапИдентификатор <> Неопределено Тогда
		ТекущиеДанные = Форма.РаботаСКандидатамиНаборЗаписей.НайтиПоИдентификатору(ВыбранныйЭтапИдентификатор);
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.РаботаСКандидатомОткрытьАнкету.Доступность = Ложь;
		Элементы.РаботаСКандидатомПечатьАнкеты.Доступность = Ложь;
		Элементы.РаботаСКандидатомЗавершитьЭтап.Доступность = Ложь;
		Элементы.РаботаСКандидатомПройтиИнтервью.Доступность = Ложь;
		Элементы.РаботаСКандидатомПропуститьЭтап.Доступность = Ложь;
		Элементы.РаботаСКандидатомЗапланироватьЭтап.Доступность = Ложь;
		Элементы.РаботаСКандидатомОтменитьЭтап.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаСКандидатомЗапланироватьЭтап.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	Элементы.РаботаСКандидатомОтменитьЭтап.Доступность = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		Элементы.РаботаСКандидатомОтменитьЭтап.Доступность =  РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	КонецЕсли;
	Если ТекущиеДанные.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден") Тогда
		Элементы.РаботаСКандидатомЗавершитьЭтап.Доступность = Ложь;
		Элементы.РаботаСКандидатомПройтиИнтервью.Доступность = Ложь;
		Элементы.РаботаСКандидатомПропуститьЭтап.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	ИначеЕсли ТекущиеДанные.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Пропущен") Тогда
		Элементы.РаботаСКандидатомЗавершитьЭтап.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
		Элементы.РаботаСКандидатомПройтиИнтервью.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
		Элементы.РаботаСКандидатомПропуститьЭтап.Доступность = Ложь;
	Иначе
		Элементы.РаботаСКандидатомЗавершитьЭтап.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
		Элементы.РаботаСКандидатомПройтиИнтервью.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
		Элементы.РаботаСКандидатомПропуститьЭтап.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
	КонецЕсли;
	
	Если Не Форма.ИспользоватьЭлектронноеИнтервью Тогда
		Элементы.РаботаСКандидатомЗавершитьЭтап.Видимость = Истина;
		Элементы.РаботаСКандидатомПройтиИнтервью.Видимость = Ложь;
	Иначе	
		Элементы.РаботаСКандидатомОткрытьАнкету.Доступность = Ложь;
		Элементы.РаботаСКандидатомПечатьАнкеты.Доступность = Ложь;
		СтруктураАнкеты = Анкета(Форма.КандидатСсылка, Форма.КандидатОбъект.Вакансия, ТекущиеДанные.ЭтапРаботы);
		Если СтруктураАнкеты <> Неопределено Тогда
			Элементы.РаботаСКандидатомОткрытьАнкету.Доступность = РольДоступнаДобавлениеИзменениеДанныхКандидатов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ШаблонАнкеты) Тогда
			Элементы.РаботаСКандидатомЗавершитьЭтап.Видимость = Истина;
			Элементы.РаботаСКандидатомПройтиИнтервью.Видимость = Ложь;
		Иначе	
			Элементы.РаботаСКандидатомПечатьАнкеты.Доступность = Истина;
			Элементы.РаботаСКандидатомЗавершитьЭтап.Видимость = Ложь;
			Элементы.РаботаСКандидатомПройтиИнтервью.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТекущийЭтапРаботы()
	
	Если ТекущийЭтапИдентификатор = Неопределено Тогда
		ПодборПерсонала.УстановитьТекущийЭтапРаботыСКандидатом(КандидатСсылка, Неопределено);
		Возврат;
	КонецЕсли;
	
	СтрокаНабора = РаботаСКандидатамиНаборЗаписей.НайтиПоИдентификатору(ТекущийЭтапИдентификатор);
	
	ОписаниеЭтапа = ПодборПерсонала.ОписаниеТекущегоЭтапаРаботыСКандидатом();
	ЗаполнитьЗначенияСвойств(ОписаниеЭтапа, СтрокаНабора);
	ОписаниеЭтапа.ДатаВремя = СтрокаНабора.Период;
	
	ПодборПерсонала.УстановитьТекущийЭтапРаботыСКандидатом(КандидатСсылка, ОписаниеЭтапа);
	
КонецПроцедуры

#КонецОбласти

#Область Взаимодействия

&НаСервере
Процедура УстановитьВидимостьНаписатьПисьмо()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
		Элементы.НаписатьПисьмо.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НаписатьПисьмо.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗвонокSMS()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
		Элементы.ЗвонокSMSПодменю.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ЗвонокSMSПодменю.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗвонокSMS()
	
	Если Не Модифицированность Тогда
		ЗвонокSMSПоказатьПодменю();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗвонокSMSПослеВопросаЗаписать", ЭтотОбъект);
	ПоказатьВопросЗаписиКандидата(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокSMSПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗвонокSMSПоказатьПодменю();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокSMSПоказатьПодменю()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗвонокSMSПодменюПослеВыбора", ЭтотОбъект);
	
	ЗвонокSMSСписокВыбора = Новый СписокЗначений;
	ЗвонокSMSСписокВыбора.Добавить("Звонок", НСтр("ru = 'Позвонить'"), , БиблиотекаКартинок.Позвонить);
	ЗвонокSMSСписокВыбора.Добавить("SMS", НСтр("ru = 'Отправить SMS...'"), , БиблиотекаКартинок.ОтправитьSMS);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, ЗвонокSMSСписокВыбора, Элементы.ЗвонокSMSПодменю);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗвонокSMSПодменюПослеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "SMS" Тогда
		ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.СообщениеSMS.ФормаОбъекта", КандидатСсылка, ЭтаФорма);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Звонок" Тогда
		ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ТелефонныйЗвонок.ФормаОбъекта", КандидатСсылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьНаписатьПисьмо()
	
	Если Не Модифицированность Тогда
		НаписатьПисьмоКандидату();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("НаписатьПисьмоПослеВопросаЗаписать", ЭтотОбъект);
	ПоказатьВопросЗаписиКандидата(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмоПослеВопросаЗаписать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	НаписатьПисьмоКандидату();
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмоКандидату()
	
	Если Не ИспользоватьШаблоныСообщений Тогда
		ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", КандидатСсылка, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ШаблоныСообщенийКлиент.СформироватьСообщение(КандидатСсылка, "Письмо", Неопределено); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
