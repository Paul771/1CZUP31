#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Кандидаты";
	КомандаПечати.Идентификатор = "Резюме";
	КомандаПечати.Представление = НСтр("ru = 'Резюме'");
	КомандаПечати.ЗаголовокФормы = КомандаПечати.Представление;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Кандидаты";
	КомандаПечати.Идентификатор = "РезюмеСРейтингом";
	КомандаПечати.Представление = НСтр("ru = 'Резюме с рейтингом'");
	КомандаПечати.ЗаголовокФормы = КомандаПечати.Представление;
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Резюме");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПутьКМакету = "Справочник.Кандидаты.ПФ_MXL_Резюме";
		
		ПечатнаяФорма.ТабличныйДокумент = ПечатьРезюме(МассивОбъектов, ОбъектыПечати, ПутьКМакету);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Резюме'");
		ПечатнаяФорма.ПолныйПутьКМакету = ПутьКМакету;
		
	КонецЕсли;
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "РезюмеСРейтингом");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПутьКМакету = "Справочник.Кандидаты.ПФ_MXL_Резюме";
		
		ПечатнаяФорма.ТабличныйДокумент = ПечатьРезюме(МассивОбъектов, ОбъектыПечати, ПутьКМакету, Истина);
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Резюме с рейтингом'");
		ПечатнаяФорма.ПолныйПутьКМакету = ПутьКМакету;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Взаимодействия

// Возвращает кандидата и контакты физического лица.
// 
// Параметры:
// Ссылка - СправочникСсылка.Кандидаты - ссылка на предмет взаимодействий.
//
// Возвращаемое значение - контактная информация по предмету.
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Составляет текст запроса по контактам предмета для подсистем Взаимодействия и Шаблоны сообщений.
//
// Параметры:
// ТекстВременнаяТаблица - Строка - текст вложенного запроса.
// Объединить - Булево - определяет необходимость объединения запросов.
//
// Возвращаемое значение - текст запроса.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
		|%ШаблонВыбрать%
		|	Кандидаты.ФизическоеЛицо КАК Контакт " + ТекстВременнаяТаблица + "
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка = &Предмет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		ТекстЗапроса = "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	ДополнитьШаблонРеквизитамиОрганизации(Реквизиты, Вложения, ДополнительныеПараметры);
	ДополнитьШаблонРеквизитамиЭтапаРаботыСКандидатами(Реквизиты, Вложения, ДополнительныеПараметры);
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	ЗаполнитьЗначенияДополнительныхРеквизитовШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры);
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДополнительныеПараметрыРешенияПоКандидату() Экспорт
	
	Параметры = Новый Структура(
		"КомментарийРешения, 
		|ПричинаОтклонения");
		
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьРешениеПоКандидату(Кандидат, Решение, ДатаРешения = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРешенияПоКандидату();
	КонецЕсли;
	
	КандидатОбъект = Кандидат.ПолучитьОбъект();
	Если Решение = Перечисления.СостоянияСогласования.Согласовано Тогда
		// Проверка доступности утверждения.
		Отказ = Ложь;
		КандидатОбъект.ПроверитьУтверждение(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	КандидатОбъект.Состояние = Решение;
	КандидатОбъект.ДатаРешения = ДатаРешения;
	КандидатОбъект.КомментарийРешения = ДополнительныеПараметры.КомментарийРешения;
	КандидатОбъект.ПричинаОтклонения = ДополнительныеПараметры.ПричинаОтклонения;
	КандидатОбъект.Записать();
	
	РеквизитыКандидата = Новый Структура(
		"Вакансия,
		|Состояние");
	ЗаполнитьЗначенияСвойств(РеквизитыКандидата, КандидатОбъект);
	
	ПодборПерсонала.ОбновитьТекущийЭтапРаботыКандидата(Кандидат, РеквизитыКандидата);
	
КонецПроцедуры

// Формирует таблицу значений с данными всех кандидатов указанного физического лица.
//
// Параметры
// - ФизическоеЛицо 
//
// Возвращаемое значение - таблица значений
//
Функция КандидатыФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	Кандидаты.Код КАК Код,
		|	Кандидаты.Наименование КАК Наименование,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	Кандидаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Кандидаты.Позиция КАК Позиция,
		|	Кандидаты.Подразделение КАК Подразделение,
		|	Кандидаты.Ответственный КАК Ответственный,
		|	Кандидаты.ДатаРегистрации КАК ДатаРегистрации,
		|	Кандидаты.ИсточникИнформации КАК ИсточникИнформации,
		|	Кандидаты.Рейтинг КАК Рейтинг,
		|	Кандидаты.ОжидаемыйДоход КАК ОжидаемыйДоход,
		|	Кандидаты.Состояние КАК Состояние,
		|	Кандидаты.ДатаРешения КАК ДатаРешения,
		|	Кандидаты.КомментарийРешения КАК КомментарийРешения,
		|	ТекущийЭтап.ЭтапРаботы КАК ЭтапРаботы,
		|	Кандидаты.ПричинаОтклонения КАК ПричинаОтклонения
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущийЭтап
		|		ПО (ТекущийЭтап.Кандидат = Кандидаты.Ссылка)
		|ГДЕ
		|	Кандидаты.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРегистрации УБЫВ";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Массив кандидатов, соответствующих указанному отбору.
//
// Параметры 
// - Отбор — структура, где ключ имя поля (реквизита справочника).
//
// Возвращаемое значение — массив кандидатов.
//
Функция КандидатыПоОтбору(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТКандидатыПоОтбору(Запрос.МенеджерВременныхТаблиц, Отбор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Кандидат
		|ИЗ
		|	ВТКандидатыПоОтбору КАК Кандидаты";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Кандидаты = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Кандидаты.Добавить(Выборка.Кандидат);
	КонецЦикла;
	
	Возврат Кандидаты;
	
КонецФункции

#Область ДанныеКандидата

#Область ИнициализацияСтруктурХранения

Функция СтруктураДанныхКандидата() Экспорт
	
	Возврат ПодборПерсоналаКлиентСервер.ОписаниеРезюмеКандидата();
	
КонецФункции

Функция СтруктураОбразование() Экспорт
	
	Возврат Новый Структура("УчебноеЗаведение, Факультет, Квалификация, Специальность, НаименованиеКурса, Окончание, ВидОбразования, ВидПослевузовскогоОбразования, ВидДополнительногоОбучения", "", "", "", "");
	
КонецФункции

Функция СтруктураТрудоваяДеятельность() Экспорт
	
	Возврат Новый Структура("Организация, ДатаНачала, ДатаОкончания, Должность, Обязанности, СфераДеятельностиКомпании");
	
КонецФункции

Функция СтруктураЗнаниеЯзыков() Экспорт
	
	Возврат Новый Структура("Язык, СтепеньЗнанияЯзыка");
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанных

// Подготавливает таблицу с данными об образовании по неполным переданным сведениям.
//
// Параметры:
//	СведенияОбОбразовании - массив структур. См. функцию СтруктураОбразование.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* ВидОбразования
//		* УчебноеЗаведениеСсылка
//		* УчебноеЗаведение
//		* СпециальностьСсылка
//		* Специальность
//		* Окончание
//		* ОсновноеОбразование
//		* Квалификация
//		* ВидПослевузовскогоОбразования
//		* ВидДополнительногоОбучения
//		* НаименованиеКурса
//
Функция ПодготовитьДанныеОбОбразовании(СведенияОбОбразовании) Экспорт
	
	ДанныеОбОбразовании = Новый ТаблицаЗначений;
	ДанныеОбОбразовании.Колонки.Добавить("ВидОбразования", Новый ОписаниеТипов("СправочникСсылка.ВидыОбразованияФизическихЛиц"));
	ДанныеОбОбразовании.Колонки.Добавить("УчебноеЗаведениеСсылка", Новый ОписаниеТипов("СправочникСсылка.УчебныеЗаведения"));
	ДанныеОбОбразовании.Колонки.Добавить("УчебноеЗаведение", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ДанныеОбОбразовании.Колонки.Добавить("СпециальностьСсылка", Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию"));
	ДанныеОбОбразовании.Колонки.Добавить("Специальность", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеОбОбразовании.Колонки.Добавить("Окончание", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеОбОбразовании.Колонки.Добавить("ОсновноеОбразование", Новый ОписаниеТипов("Булево"));
	ДанныеОбОбразовании.Колонки.Добавить("Квалификация",ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеОбОбразовании.Колонки.Добавить("ВидПослевузовскогоОбразования", Новый ОписаниеТипов("СправочникСсылка.ВидыОбразованияФизическихЛиц"));
	ДанныеОбОбразовании.Колонки.Добавить("ВидДополнительногоОбучения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрофессиональнойПодготовки"));
	ДанныеОбОбразовании.Колонки.Добавить("НаименованиеКурса", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого Образование Из СведенияОбОбразовании Цикл
		
		СтрокаОбразование = ДанныеОбОбразовании.Добавить();
		
		СтрокаОбразование.ВидОбразования = Образование.ВидОбразования;
		Если ТипЗнч(Образование.ВидОбразования) = Тип("Строка") И ЗначениеЗаполнено(Образование.ВидОбразования) Тогда
			СтрокаОбразование.ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.НайтиПоНаименованию(Образование.ВидОбразования, Истина);
		КонецЕсли;
		СтрокаОбразование.УчебноеЗаведениеСсылка = КадровыйУчетРасширенный.УчебноеЗаведениеПоНаименованию(Образование.УчебноеЗаведение);
		СтрокаОбразование.УчебноеЗаведение = Образование.УчебноеЗаведение;
		СтрокаОбразование.СпециальностьСсылка = КадровыйУчетРасширенный.СпециальностьПоНаименованию(Образование.Специальность);;
		СтрокаОбразование.Специальность = Образование.Специальность;
		
		Если Образование.Свойство("Квалификация") И ЗначениеЗаполнено(Образование.Квалификация) Тогда
			СтрокаОбразование.Квалификация = Образование.Квалификация;
		Иначе
			СтрокаОбразование.Квалификация = Образование.Факультет;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Образование.Окончание) И Образование.Окончание > 0 Тогда
			СтрокаОбразование.Окончание = Дата(Образование.Окончание, 1, 1);
		КонецЕсли;
		
		НаименованиеКурса = Неопределено;
		Если Образование.Свойство("НаименованиеКурса", НаименованиеКурса)
			И ЗначениеЗаполнено(НаименованиеКурса) Тогда
			СтрокаОбразование.НаименованиеКурса = НаименованиеКурса;
		КонецЕсли;
		
		ВидПослевузовскогоОбразования = Неопределено;
		Если Образование.Свойство("ВидПослевузовскогоОбразования", ВидПослевузовскогоОбразования)
			И ЗначениеЗаполнено(ВидПослевузовскогоОбразования) Тогда
			СтрокаОбразование.ВидПослевузовскогоОбразования = ВидПослевузовскогоОбразования;
		КонецЕсли;
		
		ВидДополнительногоОбучения = Неопределено;
		Если Образование.Свойство("ВидДополнительногоОбучения", ВидДополнительногоОбучения)
			И ЗначениеЗаполнено(ВидДополнительногоОбучения) Тогда
			СтрокаОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		КонецЕсли;
		
		Если СтрокаОбразование.ВидОбразования <> Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование 
			И СтрокаОбразование.ВидДополнительногоОбучения <> Перечисления.ВидыПрофессиональнойПодготовки.Переподготовка
			И СтрокаОбразование.ВидДополнительногоОбучения <> Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации Тогда
			СтрокаОбразование.ОсновноеОбразование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОбОбразовании;
	
КонецФункции

// Подготавливает таблицу с данными о знании языков по неполным переданным сведениям.
//
// Параметры:
//	СведенияОЗнанииЯзыков - массив структур. См. функцию СтруктураЗнаниеЯзыков.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* ЯзыкСтрока
//		* ФизическоеЛицо
//		* Язык
//		* СтепеньЗнанияЯзыка
//
Функция ПодготовитьДанныеОЗнанияхЯзыков(СведенияОЗнанииЯзыков) Экспорт
	
	ДанныеОЗнанииЯзыков = Новый ТаблицаЗначений;
	ДанныеОЗнанииЯзыков.Колонки.Добавить("ЯзыкСтрока", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеОЗнанииЯзыков.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеОЗнанииЯзыков.Колонки.Добавить("Язык", Новый ОписаниеТипов("СправочникСсылка.ЯзыкиНародовМира"));
	ДанныеОЗнанииЯзыков.Колонки.Добавить("СтепеньЗнанияЯзыка", Новый ОписаниеТипов("СправочникСсылка.СтепениЗнанияЯзыка"));
	
	Для Каждого ЗнаниеЯзыка Из СведенияОЗнанииЯзыков Цикл
		
		СтрокаЗнаниеЯзыка = ДанныеОЗнанииЯзыков.Добавить();
		
		Если ТипЗнч(ЗнаниеЯзыка.Язык) = Тип("Строка") И ЗначениеЗаполнено(ЗнаниеЯзыка.Язык) Тогда
			СтрокаЗнаниеЯзыка.Язык = КадровыйУчетРасширенный.ЯзыкПоНаименованию(ЗнаниеЯзыка.Язык);
			СтрокаЗнаниеЯзыка.ЯзыкСтрока = ЗнаниеЯзыка.Язык;
		Иначе
			СтрокаЗнаниеЯзыка.Язык = ЗнаниеЯзыка.Язык;
		КонецЕсли;
		
		Если ТипЗнч(ЗнаниеЯзыка.СтепеньЗнанияЯзыка) = Тип("Строка") И ЗначениеЗаполнено(ЗнаниеЯзыка.СтепеньЗнанияЯзыка) Тогда
			СтрокаЗнаниеЯзыка.СтепеньЗнанияЯзыка = Справочники.СтепениЗнанияЯзыка.НайтиПоНаименованию(ЗнаниеЯзыка.СтепеньЗнанияЯзыка, Истина);
		Иначе
			СтрокаЗнаниеЯзыка.СтепеньЗнанияЯзыка = ЗнаниеЯзыка.СтепеньЗнанияЯзыка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОЗнанииЯзыков;
	
КонецФункции

Функция НаименованиеКандидата(ФИО, УточнениеНаименованияФизЛица = "", УточнениеНаименованияКандидата = "") Экспорт
	
	Возврат КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФИО.Фамилия, 
		ФИО.Имя, 
		ФИО.Отчество, 
		УточнениеНаименованияФизЛица, 
		УточнениеНаименованияКандидата);
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура УстановитьУсловноеОформлениеСпискаКандидатов(КандидатыСписок) Экспорт
	
	ЭлементОформления = КандидатыСписок.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.КандидатОдобренТекст);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Состояние", Перечисления.СостоянияСогласования.Согласовано);
	
	ЭлементОформления = КандидатыСписок.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.КандидатОтклоненТекст);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Состояние", Перечисления.СостоянияСогласования.Отклонено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура ИзвлечьТекстДляПолнотекстовогоПоиска(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Кандидаты.Ссылка
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.СтатусИзвлеченияТекста <> ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.Извлечен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Кандидаты.ДатаРегистрации УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КандидатОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СохраненноеРезюме = КандидатОбъект.Резюме.Получить();
		Если СохраненноеРезюме <> Неопределено Тогда
			ФорматированноеРезюме = Новый ФорматированныйДокумент;
			СтруктураРезюме = ПодборПерсоналаКлиентСервер.СтруктураHTMLРезюме();
			ЗаполнитьЗначенияСвойств(СтруктураРезюме, СохраненноеРезюме);
			ФорматированноеРезюме.УстановитьHTML(СтруктураРезюме.HTML, СтруктураРезюме.Вложения);
			ИзвлеченныйТекст = ФорматированноеРезюме.ПолучитьТекст();
			КандидатОбъект.РезюмеТекст = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		КонецЕсли;
		КандидатОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КандидатОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьФотографиюФизическогоЛица(Макет, ФизическоеЛицо, Хранилище)
	
	Если Хранилище = Неопределено Тогда
		Фотография = Новый Картинка();
	Иначе
		ДанныеХранилища = Хранилище.Получить();
		Фотография = ?(ТипЗнч(ДанныеХранилища) = Тип("ДвоичныеДанные"), Новый Картинка(ДанныеХранилища), ДанныеХранилища);
	КонецЕсли;
	
	Макет.Рисунки.Фотография.Картинка = Фотография;
	
КонецПроцедуры

Процедура ЗаполнитьРейтингПоКандидату(Область, СредниеОценки, Кандидат, ВыводитьРейтинг)
	
	Если ВыводитьРейтинг Тогда
		Область.Параметры.СреднийРейтинг = ПредставлениеСреднегоРейтинга(СредниеОценки, Кандидат);
		ВыводитьРейтинг = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Область.Параметры.СреднийРейтинг) Тогда
		Область.Параметры.СреднийРейтинг = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТОсновныеСведенияОКандидатах(МенеджерВременныхТаблиц, Кандидаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Ссылка,
	|	Кандидаты.Вакансия КАК Вакансия,
	|	Кандидаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Кандидаты.ОжидаемыйДоход КАК ОжидаемыйДоход,
	|	Кандидаты.ИсточникИнформации КАК ИсточникИнформации,
	|	Кандидаты.АдресРезюме КАК АдресРезюме,
	|	&Период КАК Период,
	|	ЕСТЬNULL(Фотографии.Фотография, НЕОПРЕДЕЛЕНО) КАК ХранилищеФотографии
	|ПОМЕСТИТЬ ВТКандидаты
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФотографииФизическихЛиц КАК Фотографии
	|		ПО Кандидаты.ФизическоеЛицо = Фотографии.ФизическоеЛицо
	|ГДЕ
	|	Кандидаты.Ссылка В(&Кандидаты)";
	
	Запрос.Выполнить();
	
	МассивНеобходимыхДанных = Новый Массив;
	МассивНеобходимыхДанных.Добавить("ФИОПолные");
	МассивНеобходимыхДанных.Добавить("АдресМестаПроживанияПредставление");
	МассивНеобходимыхДанных.Добавить("EMailПредставление");
	МассивНеобходимыхДанных.Добавить("ТелефонМобильныйПредставление");
	МассивНеобходимыхДанных.Добавить("Пол");
	МассивНеобходимыхДанных.Добавить("ДатаРождения");
	МассивНеобходимыхДанных.Добавить("Возраст");
	МассивНеобходимыхДанных.Добавить("Страна");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		МенеджерВременныхТаблиц,
		"ВТКандидаты");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Ложь, МассивНеобходимыхДанных);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Кандидат,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОткликиКандидатовНаВакансию.Вакансия ЕСТЬ NULL
	|				ТОГДА ВЫРАЗИТЬ(ОткликиКандидатовНаВакансию.Сообщение КАК СТРОКА(1000))
	|			КОГДА НЕ ОткликиКандидатов.Вакансия ЕСТЬ NULL
	|				ТОГДА ВЫРАЗИТЬ(ОткликиКандидатов.Сообщение КАК СТРОКА(1000))
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК Письмо
	|ПОМЕСТИТЬ ВТОткликиКандидатов
	|ИЗ
	|	ВТКандидаты КАК Кандидаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОткликиКандидатов КАК ОткликиКандидатов
	|		ПО Кандидаты.ИсточникИнформации = ОткликиКандидатов.Источник
	|			И (Кандидаты.АдресРезюме = (ВЫРАЗИТЬ(ОткликиКандидатов.АдресРезюме КАК СТРОКА(500))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОткликиКандидатов КАК ОткликиКандидатовНаВакансию
	|		ПО Кандидаты.ИсточникИнформации = ОткликиКандидатовНаВакансию.Источник
	|			И Кандидаты.Вакансия = ОткликиКандидатовНаВакансию.Вакансия
	|			И (Кандидаты.АдресРезюме = (ВЫРАЗИТЬ(ОткликиКандидатовНаВакансию.АдресРезюме КАК СТРОКА(500))))
	|
	|СГРУППИРОВАТЬ ПО
	|	Кандидаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Ссылка,
	|	Кандидаты.ОжидаемыйДоход КАК ОжидаемыйДоход,
	|	Кандидаты.ХранилищеФотографии КАК ХранилищеФотографии,
	|	Кандидаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Кандидаты.Период КАК Период,
	|	КадровыеДанные.Пол КАК Пол,
	|	КадровыеДанные.ФИОПолные КАК ФИО,
	|	КадровыеДанные.ДатаРождения КАК ДатаРождения,
	|	КадровыеДанные.Возраст КАК ПолныхЛет,
	|	КадровыеДанные.Страна КАК Страна,
	|	КадровыеДанные.АдресМестаПроживанияПредставление КАК АдресПроживания,
	|	КадровыеДанные.ТелефонМобильныйПредставление КАК Телефон,
	|	КадровыеДанные.EMailПредставление КАК Почта,
	|	ОткликиКандидатов.Письмо КАК Письмо
	|ПОМЕСТИТЬ ВТСведенияОКандидатах
	|ИЗ
	|	ВТКандидаты КАК Кандидаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанные
	|		ПО Кандидаты.ФизическоеЛицо = КадровыеДанные.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОткликиКандидатов КАК ОткликиКандидатов
	|		ПО Кандидаты.Ссылка = ОткликиКандидатов.Кандидат";
	
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТКандидаты");
	УдалитьВТ.Добавить("ВТКадровыеДанныеФизическихЛиц");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Функция ПараметрыОтбора(ФизическоеЛицо)
	Возврат Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
КонецФункции

Функция ПараметрыОтбораКандидата(Кандидат)
	Возврат Новый Структура("Кандидат", Кандидат);
КонецФункции

Функция ПрофессииФизическихЛиц(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Профессии.Профессия
	|ИЗ
	|	РегистрСведений.ПрофессииФизическихЛиц КАК Профессии
	|ГДЕ
	|	Профессии.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				СведенияОКандидатах.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				ВТСведенияОКандидатах КАК СведенияОКандидатах)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Профессия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗнаниеЯзыковФизическихЛиц(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗнаниеЯзыков.Язык КАК Язык,
	|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка КАК СтепеньЗнанияЯзыка
	|ИЗ
	|	РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ЗнаниеЯзыков
	|ГДЕ
	|	ЗнаниеЯзыков.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				СведенияОКандидатах.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				ВТСведенияОКандидатах КАК СведенияОКандидатах)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Язык";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СредниеОценкиКандидатов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Кандидат,
	|	Кандидаты.СреднийРейтинг КАК СредняяОценка
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|ГДЕ
	|	Кандидаты.Ссылка В
	|			(ВЫБРАТЬ
	|				СведенияОКандидатах.Ссылка КАК Кандидат
	|			ИЗ
	|				ВТСведенияОКандидатах КАК СведенияОКандидатах)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КомментарииПоКандидатам(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КомментарииКандидатов.Период КАК Период,
	|	КомментарииКандидатов.Кандидат КАК Кандидат,
	|	КомментарииКандидатов.Пользователь КАК Пользователь,
	|	КомментарииКандидатов.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.КомментарииКандидатов КАК КомментарииКандидатов
	|ГДЕ
	|	КомментарииКандидатов.Кандидат В
	|			(ВЫБРАТЬ
	|				СведенияОКандидатах.Ссылка КАК Кандидат
	|			ИЗ
	|				ВТСведенияОКандидатах КАК СведенияОКандидатах)
	|	И КомментарииКандидатов.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КомментарииКандидатов.Период,
	|	КомментарииКандидатов.Кандидат,
	|	КомментарииКандидатов.Пользователь,
	|	КомментарииКандидатов.Комментарий
	|ИЗ
	|	РегистрСведений.КомментарииКандидатов КАК КомментарииКандидатов
	|ГДЕ
	|	КомментарииКандидатов.Кандидат В
	|			(ВЫБРАТЬ
	|				СведенияОКандидатах.Ссылка КАК Кандидат
	|			ИЗ
	|				ВТСведенияОКандидатах КАК СведенияОКандидатах)
	|	И КомментарииКандидатов.Пользователь <> &Пользователь
	|	И НЕ КомментарииКандидатов.Скрытый
	|
	|УПОРЯДОЧИТЬ ПО
	|	Кандидат,
	|	Период";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СведенияОТрудовойДеятельностиФизическогоЛица(ТрудоваяДеятельность, ФизическоеЛицо, ОбщийСтажРаботы)
	
	Сведения = Новый ТаблицаЗначений;
	
	Сведения.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	Сведения.Колонки.Добавить("ПериодРаботы", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Сведения.Колонки.Добавить("ПредставлениеПериода", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	Сведения.Колонки.Добавить("Организация", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Сведения.Колонки.Добавить("Должность", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Сведения.Колонки.Добавить("Обязанности", Новый ОписаниеТипов("Строка"));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ОкончаниеПериодаСтажа = '00010101';
	ДатаОкончанияПредыдущая = '00010101';
	
	СтрокиДанныхОТрудовойДеятельности = ТрудоваяДеятельность.НайтиСтроки(ПараметрыОтбора(ФизическоеЛицо));
	
	Если СтрокиДанныхОТрудовойДеятельности.Количество() > 0 Тогда
		
		НомерСтроки = 1;
		
		Для Каждого СтрокаДанных Из СтрокиДанныхОТрудовойДеятельности Цикл
			
			НоваяСтрока = Сведения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных, "Организация, Должность, Обязанности");
			
			ДатаОкончания = ?(СтрокаДанных.ДатаОкончания <> '00010101', КонецМесяца(СтрокаДанных.ДатаОкончания), ТекущаяДата);
			
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.ПериодРаботы = СтрШаблон("%1 - %2", Формат(СтрокаДанных.ДатаНачала, "ДФ='MMMM yyyy'"), Формат(ДатаОкончания, "ДФ='MMMM yyyy'"));
			НоваяСтрока.ПредставлениеПериода = ПредставлениеПериодаРаботы(СтрокаДанных.ДатаНачала, ДатаОкончания);
			
			ДатаНачала = ?(ДатаОкончанияПредыдущая > СтрокаДанных.ДатаНачала, ДатаОкончанияПредыдущая + 1, СтрокаДанных.ДатаНачала);
			ДатаОкончания = Макс(ДатаОкончания, ДатаНачала);
			
			Если ДатаОкончания > ДатаОкончанияПредыдущая Тогда
				
				ОкончаниеПериодаСтажа = ОкончаниеПериодаСтажа + (ДатаОкончания - ДатаНачала);
				ДатаОкончанияПредыдущая = ДатаОкончания;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Лет = Год(ОкончаниеПериодаСтажа) - 1;
		Месяцев = Месяц(ОкончаниеПериодаСтажа);
		
		Если Лет > 0 И Месяцев > 0 Тогда
			ОбщийСтажРаботы = СтрШаблон("- %1 %2", КадровыйУчетРасширенныйКлиентСервер.ПредставлениеЛет(Лет), КадровыйУчетРасширенныйКлиентСервер.ПредставлениеМесяцев(Месяцев));
		Иначе
			ОбщийСтажРаботы = СтрШаблон("- %1", ?(Лет > 0, КадровыйУчетРасширенныйКлиентСервер.ПредставлениеЛет(Лет), КадровыйУчетРасширенныйКлиентСервер.ПредставлениеМесяцев(Месяцев)));
		КонецЕсли;
		
	КонецЕсли;
	
	Сведения.Сортировать("НомерСтроки Убыв");
	
	Возврат Сведения;
	
КонецФункции

Функция СведенияОКомментарияхПоКандидату(Комментарии, Кандидат)
	
	Сведения = Новый ТаблицаЗначений;
	Сведения.Колонки.Добавить("ПользовательПериод", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Сведения.Колонки.Добавить("Комментарий", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	
	Если Комментарии <> Неопределено Тогда
		
		СтрокиДанныхСКомментариями = Комментарии.НайтиСтроки(ПараметрыОтбораКандидата(Кандидат));
		Если СтрокиДанныхСКомментариями.Количество() > 0 Тогда
			
			Для Каждого СтрокаДанных Из СтрокиДанныхСКомментариями Цикл
				
				НоваяСтрока = Сведения.Добавить();
				НоваяСтрока.Комментарий = СтрокаДанных.Комментарий;
				НоваяСтрока.ПользовательПериод = СтрШаблон("%1 (%2)", СтрокаДанных.Пользователь, Формат(СтрокаДанных.Период, "ДЛФ=Д"));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция ПредставлениеСведенийОбОбразовании(Образование, ФизическоеЛицо)
	
	Представление = "";
	СтрокиДанныхОбОбразовании = Образование.НайтиСтроки(ПараметрыОтбора(ФизическоеЛицо));
	
	Если СтрокиДанныхОбОбразовании.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхОбОбразовании Цикл
			
			ПредставлениеЗаписи = "";
			Если ЗначениеЗаполнено(СтрокаДанных.Квалификация) Тогда
				ПредставлениеЗаписи = СтрШаблон("%1, ", СокрЛП(СтрокаДанных.Квалификация));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Специальность) Тогда
				ПредставлениеЗаписи = СтрШаблон("%1%2, ", ПредставлениеЗаписи, СокрЛП(СтрокаДанных.Специальность));
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.НаименованиеКурса) Тогда
				ПредставлениеЗаписи = СтрШаблон("%1%2, ", ПредставлениеЗаписи, СокрЛП(СтрокаДанных.НаименованиеКурса));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.УчебноеЗаведение) Тогда
				ПредставлениеЗаписи = СтрШаблон("%1%2", ПредставлениеЗаписи, СтрокаДанных.УчебноеЗаведение);
			Иначе
				СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗаписи, 2);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Начало) Или ЗначениеЗаполнено(СтрокаДанных.Окончание) Тогда
				ПредставлениеЗаписи = СтрШаблон("%1 (%2 -", ПредставлениеЗаписи, ?(ЗначениеЗаполнено(СтрокаДанных.Начало), Формат(СтрокаДанных.Начало, "ДЛФ=Д"), ""));
				ПредставлениеЗаписи = СтрШаблон("%1 %2)", ПредставлениеЗаписи, ?(ЗначениеЗаполнено(СтрокаДанных.Окончание), Формат(СтрокаДанных.Окончание, "ДЛФ=Д"), ""));
			КонецЕсли;
			
			Если Не ПустаяСтрока(ПредставлениеЗаписи) Тогда
				Представление = Представление + ПредставлениеЗаписи + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Представление = ПредставлениеОтсутствияСведений();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеСведенийОПрофессияхИСпециальностях(Профессии, Специальности, ФизическоеЛицо)
	
	Представление = "";
	
	СтрокиДанныхОПрофессиях = Профессии.НайтиСтроки(ПараметрыОтбора(ФизическоеЛицо));
	Если СтрокиДанныхОПрофессиях.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхОПрофессиях Цикл
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СтрокаДанных.Профессия;
			Иначе
				Представление = СтрШаблон("%1%2%3", Представление, Символы.ПС, СтрокаДанных.Профессия);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокиДанныхОСпециальностях = Специальности.НайтиСтроки(ПараметрыОтбора(ФизическоеЛицо));
	Если СтрокиДанныхОСпециальностях.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхОСпециальностях Цикл
			
			ПредставлениеЗаписи = СтрШаблон("%1%2", СтрокаДанных.Специальность, 
				?(ЗначениеЗаполнено(СтрокаДанных.РазрядКатегория), "- " + СтрокаДанных.РазрядКатегория, ""));
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = ПредставлениеЗаписи;
			Иначе
				Представление = СтрШаблон("%1%2%3", Представление, Символы.ПС, ПредставлениеЗаписи);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = ПредставлениеОтсутствияСведений();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеСведенийОЗнанииЯзыков(ЗнанияЯзыков, ФизическоеЛицо)
	
	Представление = "";
	ПредставлениеНачало = НСтр("ru='Знание языков:'") + Символы.НПП;
	
	СтрокиДанныхОЗнанииЯзыков = ЗнанияЯзыков.НайтиСтроки(ПараметрыОтбора(ФизическоеЛицо));
	
	Если СтрокиДанныхОЗнанииЯзыков.Количество() > 0 Тогда
		
		Представление = ПредставлениеНачало;
		
		Для Каждого СтрокаДанных Из СтрокиДанныхОЗнанииЯзыков Цикл
			
			ПредставлениеЗаписи = СтрШаблон("%1%2", 
				?(ЗначениеЗаполнено(СтрокаДанных.Язык), СтрокаДанных.Язык, ""),
				?(ЗначениеЗаполнено(СтрокаДанных.СтепеньЗнанияЯзыка), " (" + Строка(СтрокаДанных.СтепеньЗнанияЯзыка) + ")", ""));
			
			Представление = СтрШаблон("%1%2%3", 
				Представление, ?(Представление <> ПредставлениеНачало, ", ", ""),
				ПредставлениеЗаписи);
			
		КонецЦикла;
		
	Иначе
		Представление = ПредставлениеОтсутствияСведений();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеСреднегоРейтинга(СредниеРейтинги, Кандидат)
	
	Представление = "";
	СтрокиКандидата = СредниеРейтинги.НайтиСтроки(ПараметрыОтбораКандидата(Кандидат));
	
	Если СтрокиКандидата.Количество() > 0 Тогда
		Представление = СтрШаблон(НСтр("ru='Рейтинг: %1/5'"), СтрокиКандидата[0].СредняяОценка);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеОтсутствияСведений()
	Возврат НСтр("ru = 'Нет сведений.'");
КонецФункции

Функция ПредставлениеПериодаРаботы(ДатаНачала, ДатаОкончания)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) 
		Или ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЛетРаботы = Год(ДатаОкончания) - Год(ДатаНачала);
	МесяцевРаботы = Месяц(ДатаОкончания)- Месяц(ДатаНачала) + 1;
	
	Если Месяц(ДатаНачала) > Месяц(ДатаОкончания) Тогда
		ЛетРаботы = ЛетРаботы - 1;
		МесяцевРаботы = 12 + МесяцевРаботы;
	КонецЕсли;
	
	Если День(ДатаНачала) > День(ДатаОкончания) Тогда
		МесяцевРаботы = МесяцевРаботы - 1;
	КонецЕсли;
	
	ЛетРаботы = Макс(ЛетРаботы, 0);
	МесяцевРаботы = Макс(МесяцевРаботы, 0);
	
	ПредставлениеЛет = ?(ЛетРаботы > 0, КадровыйУчетРасширенныйКлиентСервер.ПредставлениеЛет(ЛетРаботы), "");
	ПредставлениеМесяцев = ?(МесяцевРаботы > 0, КадровыйУчетРасширенныйКлиентСервер.ПредставлениеМесяцев(МесяцевРаботы), "");
	
	Представление = СтрШаблон("%1%2%3", ПредставлениеЛет, ?(Не ПустаяСтрока(ПредставлениеЛет) 
		И Не ПустаяСтрока(ПредставлениеМесяцев), Символы.НПП + НСтр("ru = 'и'") + Символы.НПП, ""), ПредставлениеМесяцев);
	
	Возврат Представление;
	
КонецФункции

Функция ПечатьРезюме(МассивОбъектов, ОбъектыПечати, ПутьКМакету, ВыводитьРейтингИКомментарии = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Резюме";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОписаниеВТ = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляФизическоеЛицо", 
		"ВТСведенияОКандидатах", "ФизическоеЛицо");
	ОписаниеВТСПериодом = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляПериод,ИмяПоляФизическоеЛицо", 
		"ВТСведенияОКандидатах", "Период", "ФизическоеЛицо");
	
	СоздатьВТОсновныеСведенияОКандидатах(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос = КадровыйУчетРасширенный.ЗапросВТТрудоваяДеятельностьФизическихЛиц(Истина, ОписаниеВТ);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТрудоваяДеятельность.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТрудоваяДеятельность.ДатаНачала КАК ДатаНачала,
	|	ТрудоваяДеятельность.ДатаОкончания КАК ДатаОкончания,
	|	ТрудоваяДеятельность.Организация КАК Организация,
	|	ТрудоваяДеятельность.Должность КАК Должность,
	|	ТрудоваяДеятельность.Обязанности КАК Обязанности
	|ИЗ
	|	ВТТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТрудоваяДеятельность.ФизическоеЛицо,
	|	ТрудоваяДеятельность.ДатаНачала";
	
	ТрудоваяДеятельность = Запрос.Выполнить().Выгрузить();
	
	Запрос = КадровыйУчетРасширенный.ЗапросВТОбразованияФизическихЛиц(Истина, ОписаниеВТ);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Образование.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Образование.УчебноеЗаведение КАК УчебноеЗаведение,
	|	Образование.ВидОбразования КАК ВидОбразования,
	|	Образование.Начало КАК Начало,
	|	Образование.Окончание КАК Окончание,
	|	Образование.Квалификация КАК Квалификация,
	|	Образование.Специальность КАК Специальность,
	|	Образование.НаименованиеКурса КАК НаименованиеКурса
	|ПОМЕСТИТЬ ВТОбразование
	|ИЗ
	|	ВТОбразованияФизическихЛиц КАК Образование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновноеОбразование.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОсновноеОбразование.УчебноеЗаведение КАК УчебноеЗаведение,
	|	ОсновноеОбразование.ВидОбразования КАК ВидОбразования,
	|	ОсновноеОбразование.Начало КАК Начало,
	|	ОсновноеОбразование.Окончание КАК Окончание,
	|	ОсновноеОбразование.Квалификация КАК Квалификация,
	|	ОсновноеОбразование.Специальность КАК Специальность,
	|	ОсновноеОбразование.НаименованиеКурса КАК НаименованиеКурса
	|ИЗ
	|	ВТОбразование КАК ОсновноеОбразование
	|ГДЕ
	|	ОсновноеОбразование.ВидОбразования <> ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеОбразование.ФизическоеЛицо,
	|	ОсновноеОбразование.Окончание УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительноеОбразование.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДополнительноеОбразование.УчебноеЗаведение КАК УчебноеЗаведение,
	|	ДополнительноеОбразование.ВидОбразования КАК ВидОбразования,
	|	ДополнительноеОбразование.Начало КАК Начало,
	|	ДополнительноеОбразование.Окончание КАК Окончание,
	|	ДополнительноеОбразование.Квалификация КАК Квалификация,
	|	ДополнительноеОбразование.Специальность КАК Специальность,
	|	ДополнительноеОбразование.НаименованиеКурса КАК НаименованиеКурса
	|ИЗ
	|	ВТОбразование КАК ДополнительноеОбразование
	|ГДЕ
	|	ДополнительноеОбразование.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДополнительноеОбразование.ФизическоеЛицо,
	|	ДополнительноеОбразование.Окончание УБЫВ";

	Результат = Запрос.ВыполнитьПакет();
	Образование = Результат[1].Выгрузить();
	ДопОбразование = Результат[2].Выгрузить();
	
	Запрос = КадровыйУчетРасширенный.ЗапросВТСпециальностиФизическихЛиц(Истина, ОписаниеВТСПериодом);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Специальности.ФизическоеЛицо,
	|	Специальности.Специальность,
	|	Специальности.РазрядКатегория
	|ИЗ
	|	ВТСпециальностиФизическихЛиц КАК Специальности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Специальности.ФизическоеЛицо,
	|	Специальности.Специальность";
	
	Специальности = Запрос.Выполнить().Выгрузить();
	
	Профессии = ПрофессииФизическихЛиц(МенеджерВременныхТаблиц);
	ЗнаниеЯзыков = ЗнаниеЯзыковФизическихЛиц(МенеджерВременныхТаблиц);
	СредниеОценки = СредниеОценкиКандидатов(МенеджерВременныхТаблиц);
	
	Если ВыводитьРейтингИКомментарии Тогда
		Комментарии = КомментарииПоКандидатам(МенеджерВременныхТаблиц);
	Иначе
		Комментарии = Неопределено;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	*,
	|	СведенияОКандидатах.ФИО
	|ИЗ
	|	ВТСведенияОКандидатах КАК СведенияОКандидатах
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеПечати.ОжидаемыйДоход = 0  Тогда
			ОжидаемыйДоход = НСтр("ru = 'не указан'");
		Иначе
			ОжидаемыйДоход = СтрШаблон(НСтр("ru = '%1 руб.'"), ДанныеПечати.ОжидаемыйДоход);
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ОбластьШапка.Параметры.ОжидаемыйДоход = ОжидаемыйДоход;
		ОбластьШапка.Параметры.ДатаРождения = Формат(ДанныеПечати.ДатаРождения, "ДЛФ=Д");
		ОбластьШапка.Параметры.ПолныхЛет = ?(ДанныеПечати.ПолныхЛет <> 0, КадровыйУчетРасширенныйКлиентСервер.ПредставлениеЛет(ДанныеПечати.ПолныхЛет), "");
		
		ЗаполнитьФотографиюФизическогоЛица(ОбластьШапка, ДанныеПечати.ФизическоеЛицо, ДанныеПечати.ХранилищеФотографии);
		
		ОбщийСтажРаботы = "";
		СтрокиСведенийОТрудовойДеятельности = СведенияОТрудовойДеятельностиФизическогоЛица(ТрудоваяДеятельность, ДанныеПечати.ФизическоеЛицо, ОбщийСтажРаботы);
		ОбластьШапка.Параметры.ОбщийСтажРаботы = ОбщийСтажРаботы;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ВыводитьРейтинг = ВыводитьРейтингИКомментарии;
		ВыводитьКомментарии = ВыводитьРейтингИКомментарии;
		
		Если СтрокиСведенийОТрудовойДеятельности.Количество() > 0 Тогда 
			
			Для Каждого СтрокаСведений Из СтрокиСведенийОТрудовойДеятельности Цикл
				
				ОбластьСтрока.Параметры.Заполнить(СтрокаСведений);
				ЗаполнитьРейтингПоКандидату(ОбластьСтрока, СредниеОценки, ДанныеПечати.Ссылка, ВыводитьРейтинг);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьРейтингПоКандидату(ОбластьПустаяСтрока, СредниеОценки, ДанныеПечати.Ссылка, ВыводитьРейтинг);
			ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
			
		КонецЕсли;
		
		ОбластьПодвал.Параметры.Образование = ПредставлениеСведенийОбОбразовании(Образование, ДанныеПечати.ФизическоеЛицо);
		ОбластьПодвал.Параметры.ПрофессииИСпециальности = ПредставлениеСведенийОПрофессияхИСпециальностях(Профессии, Специальности, ДанныеПечати.ФизическоеЛицо);
		ОбластьПодвал.Параметры.Дополнительно = ПредставлениеСведенийОЗнанииЯзыков(ЗнаниеЯзыков, ДанныеПечати.ФизическоеЛицо);
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		Если ДопОбразование.Количество() > 0 Тогда
			
			ОбластьДопОбразование = Макет.ПолучитьОбласть("ДопОбразование");
			ОбластьДопОбразование.Параметры.ДопОбразование = ПредставлениеСведенийОбОбразовании(ДопОбразование, ДанныеПечати.ФизическоеЛицо);
			
			ТабличныйДокумент.Вывести(ОбластьДопОбразование);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Письмо) Тогда
			
			ОбластьПисьмо = Макет.ПолучитьОбласть("СопроводительноеПисьмо");
			ОбластьПисьмо.Параметры.Заполнить(ДанныеПечати);
			
			ТабличныйДокумент.Вывести(ОбластьПисьмо);
			
		КонецЕсли;
		
		Если ВыводитьКомментарии Тогда
			
			ОбластьКомментарииШапка = Макет.ПолучитьОбласть("КомментарииШапка");
			ОбластьКомментарииСтрока = Макет.ПолучитьОбласть("КомментарииСтрока");
			
			СтрокиСведенийОКомментариях = СведенияОКомментарияхПоКандидату(Комментарии, ДанныеПечати.Ссылка);
			
			Если СтрокиСведенийОКомментариях.Количество() > 0 Тогда
				
				ТабличныйДокумент.Вывести(ОбластьКомментарииШапка);
				
				Для Каждого СтрокаСведений Из СтрокиСведенийОКомментариях Цикл
					ОбластьКомментарииСтрока.Параметры.Заполнить(СтрокаСведений);
					ТабличныйДокумент.Вывести(ОбластьКомментарииСтрока);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеСпискаПредметов(СписокПредметов, ДополнительныеПараметры) Экспорт
	
	ПредставлениеСписка = "";
	ПредставлениеКандидата = "";
	ВФорматеHTML = ДополнительныеПараметры.ВФорматеHTML;
	
	Выборка = ВыборкаПредставленийКандидатов(СписокПредметов);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(ПредставлениеСписка) Тогда
			ПредставлениеСписка = СтрШаблон("%1%2", ПредставлениеСписка, ?(ВФорматеHTML, "<p>", Символы.ПС));
		КонецЕсли;
		
		ПредставлениеКандидата = "";
		ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИО, 2, ПредставлениеКандидата, Выборка.Пол);
		ПредставлениеСписка = СтрШаблон("%1%2", ПредставлениеСписка, ПредставлениеКандидата);
		
	КонецЦикла;
	
	Возврат ПредставлениеСписка;
	
КонецФункции

Функция СписокСсылокНаПредметы(СписокПредметов, ДополнительныеПараметры) Экспорт
	
	СписокСсылок = "";
	СсылкаНаБазу = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Выборка = ВыборкаПредставленийКандидатов(СписокПредметов);
	ВФорматеHTML = ДополнительныеПараметры.ВФорматеHTML;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(СписокСсылок) Тогда
			СписокСсылок = СтрШаблон("%1%2", СписокСсылок, ?(ВФорматеHTML, "<p>", Символы.ПС));
		КонецЕсли;
		
		ПредставлениеКандидата = "";
		ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИО, 2, ПредставлениеКандидата, Выборка.Пол);
		
		Если ВФорматеHTML Тогда
			СписокСсылок = СтрШаблон("%1<a href = ""%2#%3"">%4</a>%5", СписокСсылок, СсылкаНаБазу, ПолучитьНавигационнуюСсылку(Выборка.Кандидат), ПредставлениеКандидата);
		Иначе
			СписокСсылок = СтрШаблон(НСтр("ru = '%1%2 по ссылке %3#%4'"), СписокСсылок, ПредставлениеКандидата, СсылкаНаБазу, ПолучитьНавигационнуюСсылку(Выборка.Кандидат));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСсылок;
	
КонецФункции

Функция ВыборкаПредставленийКандидатов(Кандидаты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Кандидат,
	|	Кандидаты.ФизическоеЛицо.ФИО КАК ФИО,
	|	Кандидаты.ФизическоеЛицо.Пол КАК Пол
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|ГДЕ
	|	Кандидаты.Ссылка В(&Кандидаты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИО";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ДополнитьШаблонРеквизитамиОрганизации(Реквизиты, Вложения, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры["ПолноеИмяТипаНазначения"] <> "Справочник.Кандидаты" Тогда
		Возврат;
	КонецЕсли;
	
	// Организация и ее адрес.
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Имя = "Кандидаты.Организация.Наименование";
	НоваяСтрока.Представление = НСтр("ru = 'Наименование организации'");
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Имя = "Кандидаты.Организация.ФактическийАдрес";
	НоваяСтрока.Представление = НСтр("ru = 'Фактический адрес организации'");
	
КонецПроцедуры

Процедура ДополнитьШаблонРеквизитамиЭтапаРаботыСКандидатами(Реквизиты, Вложения, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры["ВладелецШаблона"]) <> Тип("СправочникСсылка.ЭтапыРаботыСКандидатами") Тогда
		Возврат;
	КонецЕсли;
	
	// Этап работы.
	ГруппаЭтапРаботы = Реквизиты.Родитель.Владелец().Строки.Добавить();
	ГруппаЭтапРаботы.Имя = "ЭтапРаботы";
	ГруппаЭтапРаботы.Представление = НСтр("ru = 'Этап работы'");
	
	РеквизитыЭтапа = ГруппаЭтапРаботы.Строки;
	
	// Наименование.
	НоваяСтрока = РеквизитыЭтапа.Добавить();
	НоваяСтрока.Имя = "ЭтапРаботы.Наименование";
	НоваяСтрока.Представление = НСтр("ru = 'Наименование'");
	
	// Дата.
	НоваяСтрока = РеквизитыЭтапа.Добавить();
	НоваяСтрока.Имя = "ЭтапРаботы.Дата";
	НоваяСтрока.Представление = НСтр("ru = 'Дата этапа'");
	НоваяСтрока.Тип = Тип("Дата");
	
	// Время.
	НоваяСтрока = РеквизитыЭтапа.Добавить();
	НоваяСтрока.Имя = "ЭтапРаботы.Время";
	НоваяСтрока.Представление = НСтр("ru = 'Время этапа'");
	НоваяСтрока.Тип = Тип("Дата");
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияДополнительныхРеквизитовШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры)
	
	Если ТипЗнч(ПредметСообщения) <> Тип("СправочникСсылка.Кандидаты") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияРеквизитовОрганизацииШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры);	
	ЗаполнитьЗначенияРеквизитовЭтапаРаботыШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовОрганизацииШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры)
	
	Если ТипЗнч(ПредметСообщения) <> Тип("СправочникСсылка.Кандидаты") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", ПредметСообщения);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Позиция.Владелец КАК Организация,
		|	Кандидаты.ДатаРегистрации КАК ДатаРегистрации,
		|	Кандидаты.Позиция.Владелец.НаименованиеСокращенное КАК НазваниеОрганизации
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка = &Кандидат";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВидФактическийАдрес = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации");
	ФактическийАдресПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Выборка.Организация,
		ВидФактическийАдрес,
		Выборка.ДатаРегистрации);
	
	РеквизитыОрганизации = Новый Соответствие;
	РеквизитыОрганизации.Вставить("Наименование", Выборка.НазваниеОрганизации);
	РеквизитыОрганизации.Вставить("ФактическийАдрес", ФактическийАдресПредставление);
	
	Сообщение.ЗначенияРеквизитов.Вставить("Организация", РеквизитыОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовЭтапаРаботыШаблонаЭтапаРаботыСКандидатами(Сообщение, ПредметСообщения, ДополнительныеПараметры)
	
	Если ТипЗнч(ПредметСообщения) <> Тип("СправочникСсылка.Кандидаты") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЭтапа = Сообщение.ДополнительныеПараметры.ПроизвольныеПараметры["ЭтапРаботы"];
	Если РеквизитыЭтапа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = ДополнительныеПараметры.ПараметрыСообщения;
	
	Если ПараметрыСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСообщения.Свойство("ЭтапРаботы") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЭтапа.Вставить("Наименование", Строка(ПараметрыСообщения.ЭтапРаботы));
	РеквизитыЭтапа.Вставить("Дата", Формат(ПараметрыСообщения.ДатаВремя, "ДЛФ=D"));
	РеквизитыЭтапа.Вставить("Время", Формат(ПараметрыСообщения.ДатаВремя, "ДФ=ЧЧ:мм"));
	
КонецПроцедуры

// Формирует временную таблицу с кандидатами, соответствующими отбору.
//
// Параметры
//	- МенеджерВременныхТаблиц
//	- Отбор - структура
//	- ТолькоРазрешенные - булево, если Истина, в таблицу будут включены кандидаты, доступные текущему пользователю.
//
Процедура СоздатьВТКандидатыПоОтбору(МенеджерВременныхТаблиц, Отбор, ТолькоРазрешенные = Истина)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат
		|ПОМЕСТИТЬ ВТКандидатыПоОтбору
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	&УСЛОВИЕ";
	
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Условие = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ФрагментУсловия = "";
		Если Не ПустаяСтрока(Условие) Тогда
			ФрагментУсловия	= " И ";
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ШаблонУсловия = "Кандидаты.%1 В (&%1)";
		Иначе
			ШаблонУсловия = "Кандидаты.%1 = &%1";
		КонецЕсли;
		ФрагментУсловия = ФрагментУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, КлючИЗначение.Ключ);
		Условие = Условие + ФрагментУсловия;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УСЛОВИЕ", Условие);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли