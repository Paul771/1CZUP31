#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособПолученияОбновлений <> Перечисления.СпособыПолученияОбновленийЧатботов.Webhook Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "АдресПубликацииИнформационнойБазыВИнтернете");
	КонецЕсли;
	
	Если Не ВыводитьОписаниеКомпании Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ОписаниеКомпании");
	КонецЕсли;
	
	Если Не ЗапрашиватьИмя Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаИмени");
	КонецЕсли;
	
	Если Не ЗапрашиватьВозраст Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаВозраста");
	КонецЕсли;
	
	Если Не ЗапрашиватьНомерТелефона Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаНомераТелефона");
	КонецЕсли;
	
	Если Не ЗапрашиватьАдресЭлектроннойПочты Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаАдресаЭлектроннойПочты");
	КонецЕсли;
	
	Если Не ЗапрашиватьИнформациюОСебе Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаИнформацииОСебе");
	КонецЕсли;
	
	Если Не ЗапрашиватьФайлРезюме Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ТекстЗапросаФайлаРезюме");
	КонецЕсли;
	
	Если Не ЗапрашиватьНомерТелефона И Не ЗапрашиватьАдресЭлектроннойПочты Тогда
		ТекстСообщения = НСтр("ru = 'Для регистрации отклика нужно запрашивать хотя бы один вид контактной информации: адрес электронной почты или телефон.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПрежниеЗначенияРеквизитов();
	СоздатьРегламентноеЗадание();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбновитьWebhook(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьРегламентноеЗадание();
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПрежниеЗначенияРеквизитов()
	
	ИменаРеквизитов = 
		"Используется,
		|СпособПолученияОбновлений, 
		|АдресПубликацииИнформационнойБазыВИнтернете";
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ПрежниеЗначения", Новый Структура(ИменаРеквизитов));
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.Ссылка, ИменаРеквизитов);
	ДополнительныеСвойства.Вставить("ПрежниеЗначения", ЗначенияРеквизитов);
	
КонецПроцедуры

Процедура ОбновитьWebhook(Отказ)
	
	ПрежниеЗначения = ДополнительныеСвойства.ПрежниеЗначения;
	
	WebhookИспользуется = Ложь;
	Если Используется Тогда
		Если СпособПолученияОбновлений = Перечисления.СпособыПолученияОбновленийЧатботов.Webhook Тогда
			WebhookИспользуется = Истина;
		КонецЕсли;
	КонецЕсли;
	
	БылоWebhookИспользуется = Ложь;
	Если ПрежниеЗначения.Используется = Истина Тогда
		Если ПрежниеЗначения.СпособПолученияОбновлений = Перечисления.СпособыПолученияОбновленийЧатботов.Webhook Тогда
			БылоWebhookИспользуется = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если WebhookИспользуется И Не БылоWebhookИспользуется Тогда
		УстановитьWebhook(Отказ);
	КонецЕсли;
	
	Если Не WebhookИспользуется И БылоWebhookИспользуется Тогда
		УдалитьWebhook(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьWebhook(Отказ)
	
	Ответ = ЧатботыСлужебный.УстановитьWebhook(Ссылка);
	
	Если Ответ.Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось установить webhook.
              |Подробнее: 
              |%1.'"), 
		Ответ.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура УдалитьWebhook(Отказ)
	
	Ответ = ЧатботыСлужебный.УдалитьWebhook(Ссылка);
	
	Если Ответ.Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось удалить webhook.
              |Подробнее: 
              |%1.'"), 
		Ответ.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура СоздатьРегламентноеЗадание()
	
	Задание = ЧатботыСлужебный.ЗаданиеПолученияСообщенийЧатботу(РегламентноеЗаданиеGUID);
	
	LongPollingИспользуется = Ложь;
	Если Используется Тогда
		Если СпособПолученияОбновлений = Перечисления.СпособыПолученияОбновленийЧатботов.LongPolling Тогда
			LongPollingИспользуется = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не LongPollingИспользуется Тогда
		Если Задание <> Неопределено Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗаданиеGUID);
			РегламентноеЗаданиеGUID = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Задание <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("РегламентноеЗадание", Задание);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеСообщенийЧатбота);
	ПараметрыЗадания.Вставить("Использование", Ложь);
	Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	РегламентноеЗаданиеGUID = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	ДополнительныеСвойства.Вставить("РегламентноеЗадание", Задание);
	
КонецПроцедуры

Процедура ЗапуститьРегламентноеЗадание()
	
	Задание = Неопределено;
	Если Не ДополнительныеСвойства.Свойство("РегламентноеЗадание", Задание) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	Изменения = Новый Структура;
	Изменения.Вставить("Использование", Истина);
	Изменения.Вставить("Расписание", РасписаниеРегламентногоЗадания());
	Изменения.Вставить("Наименование", Лев(ПредставлениеРегламентногоЗадания(), 120));
	
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(Ссылка);
	
	Изменения.Вставить("Параметры", ПараметрыПроцедуры);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
	
КонецПроцедуры

Функция РасписаниеРегламентногоЗадания()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 3;
	
	Возврат Расписание;
	
КонецФункции

Функция ПредставлениеРегламентногоЗадания()
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получение сообщений чатбота «%1»'"), Наименование);
КонецФункции

#КонецОбласти

#КонецЕсли
