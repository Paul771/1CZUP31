#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьПоУмолчанию();
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	Элементы.ФайловыйВариантГруппа.Видимость = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьТокен(Отказ);
	
	ПроверитьДублиВакансий(Отказ);
	ПроверитьЗаполнениеВакансий(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьВакансии(ТекущийОбъект);
	ЗаписатьТокен(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьWebhook(Команда)
	
	ПроверитьWebhookНаСервере(РезультатПроверкиWebhook, Объект.Ссылка, Объект.СпособПолученияОбновлений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьLongPolling(Команда)
	
	ПроверитьLongPollingНаСервере(РезультатПроверкиLongPolling, Объект.Ссылка, Объект.СпособПолученияОбновлений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	ТокенИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	ЗаполнитьНаименование();
	ЗаполнитьПодсказкуКраткогоИмени(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	УстановитьЛогоТипаЧатбота();
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияОбновленийПриИзменении(Элемент)
	УстановитьСвойстваПоляАдресБазыВИнтернете(ЭтаФорма);
	УстановитьСтраницуСпособаПолученияОбновлений(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВакансииВакансияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Вакансии.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Вакансия) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияВакансии = СведенияВакансии(ТекущиеДанные.Вакансия, Объект.Ссылка);
	ТекущиеДанные.КраткоеНаименование = СведенияВакансии.КраткоеНаименование;
	ТекущиеДанные.Описание = СведенияВакансии.Описание;
	
КонецПроцедуры

&НаКлиенте
Процедура ВакансииОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Вакансии.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура("ИдентификаторСтроки");
	ПараметрыОповещения.ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактированияОписанияПриЗавершении", ЭтотОбъект, ПараметрыОповещения);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОповещениеОЗакрытии, ТекущиеДанные.Описание, НСтр("ru = 'Описание вакансии'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированияОписанияПриЗавершении(РезультатРедактирования, ПараметрыОповещения) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ИспользуемыеВакансии.НайтиПоИдентификатору(ПараметрыОповещения.ИдентификаторСтроки);
	СтрокаТаблицы.Описание = РезультатРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОписаниеКомпанииПриИзменении(Элемент)
	УстановитьСвойстваПоляОписаниеКомпании(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьИмяПриИзменении(Элемент)
	
	ЗаполнитьТекстИмениПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляИмени(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьВозрастПриИзменении(Элемент)
	
	ЗаполнитьТекстВозрастаПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляВозраста(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьНомерТелефонаПриИзменении(Элемент)
	
	ЗаполнитьТекстНомераТелефонаПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляНомераТелефона(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьАдресЭлектроннойПочтыПриИзменении(Элемент)
	
	ЗаполнитьТекстАдресаЭлектроннойПочтыПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляАдресаЭлектроннойПочты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьИнформациюОСебеПриИзменении(Элемент)
	
	ЗаполнитьТекстИнформацииОСебеПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляИнформацииОСебе(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьФайлРезюмеПриИзменении(Элемент)
	
	ЗаполнитьТекстФайлаРезюмеПоУмолчанию(ЭтаФорма);
	УстановитьСвойстваПоляФайлаРезюме(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	ПрочитатьТокен(ТекущийОбъект);
	
	УстановитьЛогоТипаЧатбота();
	ЗаполнитьПодсказкуКраткогоИмени(ЭтаФорма);
	УстановитьСвойстваПоляОписаниеКомпании(ЭтаФорма);
	УстановитьСвойстваПоляИмени(ЭтаФорма);
	УстановитьСвойстваПоляВозраста(ЭтаФорма);
	УстановитьСвойстваПоляНомераТелефона(ЭтаФорма);
	УстановитьСвойстваПоляАдресаЭлектроннойПочты(ЭтаФорма);
	УстановитьСвойстваПоляИнформацииОСебе(ЭтаФорма);
	УстановитьСвойстваПоляФайлаРезюме(ЭтаФорма);
	УстановитьСвойстваПоляАдресБазыВИнтернете(ЭтаФорма);
	
	ПрочитатьВакансии(ТекущийОбъект);
	
	ПроверитьWebhookНаСервере(РезультатПроверкиWebhook, ТекущийОбъект.Ссылка, ТекущийОбъект.СпособПолученияОбновлений);
	УстановитьВидимостьРезультатаПроверкиWebhook();
	
	ПроверитьLongPollingНаСервере(РезультатПроверкиLongPolling, ТекущийОбъект.Ссылка, ТекущийОбъект.СпособПолученияОбновлений);
	
	УстановитьСтраницуСпособаПолученияОбновлений(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТокен(ТекущийОбъект)
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийОбъект.Ссылка, "Токен");
	УстановитьПривилегированныйРежим(Ложь);

	Если ЗначениеЗаполнено(Токен) Тогда
		Токен = ЭтотОбъект.УникальныйИдентификатор;
	КонецЕсли;
	
	ТокенИзменен = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТокен(ТекущийОбъект)
	
	Если Не ТокенИзменен Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Токен, "Токен");
	УстановитьПривилегированныйРежим(Ложь);

	Если ЗначениеЗаполнено(Токен) Тогда
		Токен = ЭтотОбъект.УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТокен(Отказ)
	
	Если Не ТокенИзменен Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Токен) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен токен доступа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Токен", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВакансии(ТекущийОбъект)
	
	ТаблицаВакансий = РегистрыСведений.ВакансииЧатботов.ИспользуемыеВакансии(ТекущийОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ТаблицаВакансий, "ИспользуемыеВакансии");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВакансии(ТекущийОбъект)
	
	ВакансииНабор = РегистрыСведений.ВакансииЧатботов.СоздатьНаборЗаписей();
	ВакансииНабор.Отбор.Чатбот.Установить(ТекущийОбъект.Ссылка);
	ВакансииНабор.Прочитать();
	
	ВакансииНабора = Новый Соответствие;
	ОтборСтрок = Новый Структура("Вакансия");
	Для Каждого СтрокаНабора Из ВакансииНабор Цикл
		ВакансииНабора.Вставить(СтрокаНабора.Вакансия, СтрокаНабора);
		ОтборСтрок.Вакансия = СтрокаНабора.Вакансия;
		НайденныеСтроки = ИспользуемыеВакансии.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНабора.Используется = Ложь;
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = НайденныеСтроки[0];
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
		СтрокаНабора.Используется = Истина;
		СтрокаНабора.Порядок = ИспользуемыеВакансии.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ИспользуемыеВакансии Цикл
		СтрокаНабора = ВакансииНабора[СтрокаТаблицы.Вакансия];
		Если СтрокаНабора = Неопределено Тогда
			СтрокаНабора = ВакансииНабор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			СтрокаНабора.Чатбот = ТекущийОбъект.Ссылка;
			СтрокаНабора.Используется = Истина;
			СтрокаНабора.Порядок = ИспользуемыеВакансии.Индекс(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ВакансииНабор.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиВакансий(Отказ)
	
	НайденныеВакансии = Новый Соответствие;
	ДублиВакансий = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ИспользуемыеВакансии Цикл
		Если НайденныеВакансии[СтрокаТаблицы.Вакансия] = Неопределено Тогда
			НайденныеВакансии.Вставить(СтрокаТаблицы.Вакансия, Истина);
			Продолжить;
		КонецЕсли;
		Если ДублиВакансий[СтрокаТаблицы.Вакансия] = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вакансия %1 встречается в таблице более одного раза.'"), 
				СтрокаТаблицы.Вакансия);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ИспользуемыеВакансии", Отказ);
			ДублиВакансий.Вставить(СтрокаТаблицы.Вакансия, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеВакансий(Отказ)
	
	Для Каждого СтрокаТаблицы Из ИспользуемыеВакансии Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Вакансия) Тогда
			ТекстСообщения = НСтр("ru = 'Вакансия не выбрана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ИспользуемыеВакансии.Вакансия", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.КраткоеНаименование) Тогда
			ТекстСообщения = НСтр("ru = 'Краткое наименование не заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ИспользуемыеВакансии.КраткоеНаименование", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			ТекстСообщения = НСтр("ru = 'Описание вакансии не заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "ИспользуемыеВакансии.Описание", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияВакансии(Вакансия, Чатбот)
	
	СведенияВакансии = ПодборПерсоналаКлиентСервер.ОписаниеСведенийВакансииДляЧатбота();
	Результат = РегистрыСведений.ВакансииЧатботов.ЗаполнитьСведенияВакансии(СведенияВакансии, Вакансия, Чатбот);
	
	Если Результат = Истина Тогда
		Возврат СведенияВакансии;
	КонецЕсли;
	
	ДанныеВакансии = Справочники.Вакансии.ДанныеВакансии(Вакансия);
	СведенияВакансии.КраткоеНаименование = Строка(Вакансия);
	
	СведенияВакансии.Описание = Строка(Вакансия);
	Если ЗначениеЗаполнено(ДанныеВакансии.Требования) Тогда
		ТребованияТекст = НСтр("ru = 'Требования'") + Символы.ПС + ДанныеВакансии.Требования;
		СведенияВакансии.Описание = СведенияВакансии.Описание + Символы.ПС + ТребованияТекст;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеВакансии.Обязанности) Тогда
		ОбязанностиТекст = НСтр("ru = 'Обязанности'") + Символы.ПС + ДанныеВакансии.Обязанности;
		СведенияВакансии.Описание = СведенияВакансии.Описание + Символы.ПС + ОбязанностиТекст;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеВакансии.Условия) Тогда
		УсловияТекст = НСтр("ru = 'Условия'") + Символы.ПС + ДанныеВакансии.Условия;
		СведенияВакансии.Описание = СведенияВакансии.Описание + Символы.ПС + УсловияТекст;
	КонецЕсли;
	
	Возврат СведенияВакансии;
	
КонецФункции

&НаСервере
Процедура УстановитьЛогоТипаЧатбота()
	
	Элементы.ЛогоТипаЧатбота.Картинка = Новый Картинка;
	Если Объект.Тип = Перечисления.ТипыЧатботов.Telegram Тогда
		Элементы.ЛогоТипаЧатбота.Картинка = БиблиотекаКартинок.Telegram;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляОписаниеКомпании(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ОписаниеКомпании.Доступность = Объект.ВыводитьОписаниеКомпании;
	Элементы.ОписаниеКомпании.АвтоОтметкаНезаполненного = Объект.ВыводитьОписаниеКомпании;
	Элементы.ОписаниеКомпании.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ОписаниеКомпании);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляИмени(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаИмени.Доступность = Объект.ЗапрашиватьИмя;
	Элементы.ТекстЗапросаИмени.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьИмя;
	Элементы.ТекстЗапросаИмени.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаИмени);
	
	Если Не Объект.ЗапрашиватьИмя Тогда
		Объект.ТекстЗапросаИмени = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляВозраста(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаВозраста.Доступность = Объект.ЗапрашиватьВозраст;
	Элементы.ТекстЗапросаВозраста.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьВозраст;
	Элементы.ТекстЗапросаВозраста.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаВозраста);
	
	Если Не Объект.ЗапрашиватьВозраст Тогда
		Объект.ТекстЗапросаВозраста = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляНомераТелефона(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаНомераТелефона.Доступность = Объект.ЗапрашиватьНомерТелефона;
	Элементы.ТекстЗапросаНомераТелефона.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьНомерТелефона;
	Элементы.ТекстЗапросаНомераТелефона.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаНомераТелефона);
	
	Если Не Объект.ЗапрашиватьНомерТелефона Тогда
		Объект.ТекстЗапросаНомераТелефона = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляАдресаЭлектроннойПочты(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаАдресаЭлектроннойПочты.Доступность = Объект.ЗапрашиватьАдресЭлектроннойПочты;
	Элементы.ТекстЗапросаАдресаЭлектроннойПочты.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьАдресЭлектроннойПочты;
	Элементы.ТекстЗапросаАдресаЭлектроннойПочты.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаАдресаЭлектроннойПочты);
	
	Если Не Объект.ЗапрашиватьАдресЭлектроннойПочты Тогда
		Объект.ТекстЗапросаАдресаЭлектроннойПочты = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляИнформацииОСебе(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаИнформацииОСебе.Доступность = Объект.ЗапрашиватьИнформациюОСебе;
	Элементы.ТекстЗапросаИнформацииОСебе.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьИнформациюОСебе;
	Элементы.ТекстЗапросаИнформацииОСебе.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаИнформацииОСебе);
	
	Если Не Объект.ЗапрашиватьИнформациюОСебе Тогда
		Объект.ТекстЗапросаИнформацииОСебе = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляФайлаРезюме(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ТекстЗапросаФайлаРезюме.Доступность = Объект.ЗапрашиватьФайлРезюме;
	Элементы.ТекстЗапросаФайлаРезюме.АвтоОтметкаНезаполненного = Объект.ЗапрашиватьФайлРезюме;
	Элементы.ТекстЗапросаФайлаРезюме.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ТекстЗапросаФайлаРезюме);
	
	Если Не Объект.ЗапрашиватьФайлРезюме Тогда
		Объект.ТекстЗапросаФайлаРезюме = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляАдресБазыВИнтернете(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ИспользоватьWebhook = Ложь;
	Если Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.СпособыПолученияОбновленийЧатботов.Webhook") Тогда
		ИспользоватьWebhook = Истина;
	КонецЕсли;
	
	Элементы.WebhookГруппа.Видимость = ИспользоватьWebhook;
	Элементы.АдресПубликацииИнформационнойБазыВИнтернете.АвтоОтметкаНезаполненного = ИспользоватьWebhook;
	Элементы.АдресПубликацииИнформационнойБазыВИнтернете.ОтметкаНезаполненного = ЗначениеЗаполнено(Объект.АдресПубликацииИнформационнойБазыВИнтернете);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРезультатаПроверкиWebhook()
	
	Элементы.РезультатПроверкиWebhook.Видимость = Ложь;
	Если Объект.СпособПолученияОбновлений = Перечисления.СпособыПолученияОбновленийЧатботов.Webhook Тогда
		Если ЗначениеЗаполнено(РезультатПроверкиWebhook) Тогда
			Элементы.РезультатПроверкиWebhook.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуСпособаПолученияОбновлений(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.СпособыПолученияОбновленийЧатботов.LongPolling") Тогда
		Элементы.СпособПолученияОбновленийСтраницы.ТекущаяСтраница = Элементы.LongPollingГруппа;
	ИначеЕсли Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.СпособыПолученияОбновленийЧатботов.Webhook") Тогда
		Элементы.СпособПолученияОбновленийСтраницы.ТекущаяСтраница = Элементы.WebhookГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчанию()
	
	Объект.ТекстПриветствия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Привет!
              |Я робот-рекрутер компании %1.
              |Я могу
              |•	Рассказать о компании,
              |•	Рассказать об открытых вакансиях,
              |•	Принять ваш отклик на вакансию
              |Выберите, что вас интересует.'"),
		Справочники.Организации.ОрганизацияПоУмолчанию());
		
	ЗаполнитьТекстИмениПоУмолчанию(ЭтаФорма);	
	ЗаполнитьТекстВозрастаПоУмолчанию(ЭтаФорма);	
	ЗаполнитьТекстНомераТелефонаПоУмолчанию(ЭтаФорма);
	ЗаполнитьТекстАдресаЭлектроннойПочтыПоУмолчанию(ЭтаФорма);
	ЗаполнитьТекстИнформацииОСебеПоУмолчанию(ЭтаФорма);
	ЗаполнитьТекстФайлаРезюмеПоУмолчанию(ЭтаФорма);
	
	Объект.АдресПубликацииИнформационнойБазыВИнтернете = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстИмениПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьИмя И Не ЗначениеЗаполнено(Объект.ТекстЗапросаИмени) Тогда
		Объект.ТекстЗапросаИмени = НСтр("ru = 'Как я могу к вам обращаться?'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстВозрастаПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьВозраст И Не ЗначениеЗаполнено(Объект.ТекстЗапросаВозраста) Тогда
		Объект.ТекстЗапросаВозраста = НСтр("ru = 'Сколько вам сейчас лет?'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстНомераТелефонаПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьНомерТелефона И Не ЗначениеЗаполнено(Объект.ТекстЗапросаНомераТелефона) Тогда
		Объект.ТекстЗапросаНомераТелефона = НСтр("ru = 'По какому телефону с вами можно связаться? (Укажите, пожалуйста, номер.)'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстАдресаЭлектроннойПочтыПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьАдресЭлектроннойПочты И Не ЗначениеЗаполнено(Объект.ТекстЗапросаАдресаЭлектроннойПочты) Тогда
		Объект.ТекстЗапросаАдресаЭлектроннойПочты = НСтр("ru = 'На какой адрес электронной почты вам можно написать?'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстИнформацииОСебеПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьИнформациюОСебе И Не ЗначениеЗаполнено(Объект.ТекстЗапросаИнформацииОСебе) Тогда
		Объект.ТекстЗапросаИнформацииОСебе = НСтр("ru = 'Расскажите о себе, где вы работали (работаете), где учились?'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстФайлаРезюмеПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ЗапрашиватьФайлРезюме И Не ЗначениеЗаполнено(Объект.ТекстЗапросаФайлаРезюме) Тогда
		Объект.ТекстЗапросаФайлаРезюме = НСтр("ru = 'Пожалуйста, загрузите свое резюме в виде файла.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименование()
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = Объект.Код;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПодсказкуКраткогоИмени(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		Элементы.КодРасширеннаяПодсказка.Заголовок = Неопределено;
		Возврат;
	КонецЕсли;
	
	СсылкаНаЧатбот = "https://t.me/" + Объект.Код;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(НСтр("ru = 'Начать общение с этим чатботом можно по ссылке'"));
	ЧастиСтроки.Добавить(" ");
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(СсылкаНаЧатбот, , , , СсылкаНаЧатбот));
	
	Элементы.КодРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьWebhookНаСервере(РезультатПроверки, Чатбот, СпособПолученияОбновлений)
	
	Если Чатбот.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПолученияОбновлений <> Перечисления.СпособыПолученияОбновленийЧатботов.Webhook Тогда
		РезультатПроверки = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЧатботыСлужебный.ПроверитьWebhook(Чатбот, РезультатПроверки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьLongPollingНаСервере(РезультатПроверки, Чатбот, СпособПолученияОбновлений)
	
	Если Чатбот.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПолученияОбновлений <> Перечисления.СпособыПолученияОбновленийЧатботов.LongPolling Тогда
		РезультатПроверки = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЧатботыСлужебный.ПроверитьLongPolling(Чатбот, РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти
