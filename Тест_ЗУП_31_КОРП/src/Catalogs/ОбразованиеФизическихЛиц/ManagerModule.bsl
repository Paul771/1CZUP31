#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Формирует представление об образовании физического лица, по переделанной коллекции записей.
//
// Параметры:
//		ЗаписиОбОбразовании - Коллекция записей с полями:
//				* ВидОбразования.
//				* ВидДополнительногоОбучения.
//				* УчебноеЗаведение.
//				* Окончание				- Дата
//				* Специальность
//				* Квалификация
//
// Возвращаемое значение:
//		Строка
//
Функция ПредставлениеСведенийОбОбразовании(ЗаписиОбОбразовании) Экспорт
	
	ПредставлениеСведенийОбОбразовании = НСтр("ru='Нет сведений'");
	
	ДанныеОбразования = Неопределено;
	Для Каждого СтрокаОбразование Из ЗаписиОбОбразовании Цикл
		
		Если СтрокаОбразование.ВидОбразования = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование")
			Или СтрокаОбразование.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации")
			Или СтрокаОбразование.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка") Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ДанныеОбразования = Неопределено ИЛИ ДанныеОбразования.Окончание < СтрокаОбразование.Окончание Тогда
			ДанныеОбразования = СтрокаОбразование;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ДанныеОбразования <> Неопределено Тогда
		
		ПредставлениеСведенийОбОбразовании = ?(ЗначениеЗаполнено(ДанныеОбразования.ВидОбразования), Строка(ДанныеОбразования.ВидОбразования), "");
		
		ПредставлениеСведенийОбОбразовании = ?(ПустаяСтрока(ПредставлениеСведенийОбОбразовании), "", ПредставлениеСведенийОбОбразовании + Символы.ПС)
			+ ?(ЗначениеЗаполнено(ДанныеОбразования.УчебноеЗаведение), Строка(ДанныеОбразования.УчебноеЗаведение), "")
			+ ?(ЗначениеЗаполнено(ДанныеОбразования.Окончание), " (" + Формат(ДанныеОбразования.Окончание, "ДФ=гггг") + ")", ""); 
			
		ПредставлениеСведенийОбОбразовании = ?(ПустаяСтрока(ПредставлениеСведенийОбОбразовании), "", ПредставлениеСведенийОбОбразовании + Символы.ПС)
			+ ?(ЗначениеЗаполнено(ДанныеОбразования.Специальность), Строка(ДанныеОбразования.Специальность), "")
			+ ?(ЗначениеЗаполнено(ДанныеОбразования.Квалификация), ", " + Строка(ДанныеОбразования.Квалификация), "");
			
	КонецЕсли; 
		
	Возврат ПредставлениеСведенийОбОбразовании;
	
КонецФункции

// Формирует таблицу сведений об образовании физического лица.
//
Функция ОбразованиеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбразованиеФизическихЛиц.Ссылка,
		|	ОбразованиеФизическихЛиц.ВидОбразования,
		|	ОбразованиеФизическихЛиц.ВидПослевузовскогоОбразования,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Квалификация,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.НаименованиеКурса,
		|	ОбразованиеФизическихЛиц.КоличествоЧасов,
		|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения,
		|	ВЫБОР
		|		КОГДА ОбразованиеФизическихЛиц.ВидОбразования <> ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование)
		|				И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения <> ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка)
		|				И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения <> ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновноеОбразование,
		|	ОбразованиеФизическихЛиц.Основание
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.Владелец = &ФизическоеЛицо
		|	И ОбразованиеФизическихЛиц.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновноеОбразование УБЫВ,
		|	Начало");
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

#КонецОбласти

#КонецЕсли


#Область ОбработчикиСобытий

// Формирует представление об образовании физического лица.
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительноеОбразование = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование");
	ПослевузовскоеОбразование = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации");
	
	Если ПослевузовскоеОбразование = Неопределено Тогда
		
		ПослевузовскоеОбразование = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование");
		Если ПослевузовскоеОбразование = Неопределено Тогда
			ПослевузовскоеОбразование = ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Данные.ВидОбразования = ПослевузовскоеОбразование Тогда
		Представление = Строка(Данные.ВидПослевузовскогоОбразования);
	ИначеЕсли ЗначениеЗаполнено(Данные.ВидДополнительногоОбучения)
		И (Данные.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации")
		ИЛИ Данные.ВидДополнительногоОбучения = ПредопределенноеЗначение("Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка")) Тогда
		Представление = Строка(Данные.ВидДополнительногоОбучения);
	ИначеЕсли Не Данные.ВидОбразования = ДополнительноеОбразование Тогда 
		Представление = Строка(Данные.ВидОбразования);
	КонецЕсли;
	
	Представление = Представление + ?(ЗначениеЗаполнено(Данные.УчебноеЗаведение)," "+ Строка(Данные.УчебноеЗаведение), "")
		+ ?(ЗначениеЗаполнено(Данные.Окончание), " (" + Формат(Данные.Окончание, "ДФ=гггг") + ")", ""); 
	
	Если ПустаяСтрока(Представление) Тогда 
		Представление = НСтр("ru='Нет Данных'");
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ВидОбразования");
	Поля.Добавить("ВидПослевузовскогоОбразования");
	Поля.Добавить("ВидДополнительногоОбучения");
	Поля.Добавить("УчебноеЗаведение");
	Поля.Добавить("Окончание");
	
КонецПроцедуры

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОбразованияФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбразованиеФЛ.Ссылка
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФЛ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК Владелец,
			|	ОбразованиеФЛ.ВидОбразования,
			|	ОбразованиеФЛ.ВидПослевузовскогоОбразования,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовОбОбразовании.Диплом) КАК ВидДокумента,
			|	ОбразованиеФЛ.Диплом КАК Номер,
			|	ОбразованиеФЛ.ГодОкончания,
			|	ОбразованиеФЛ.Квалификация
			|ИЗ
			|	РегистрСведений.УдалитьОбразованиеФизическихЛиц КАК ОбразованиеФЛ";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОбразованиеОбъект = Справочники.ОбразованиеФизическихЛиц.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ОбразованиеОбъект, Выборка);
				
				Если Выборка.ГодОкончания > 0 Тогда
					ОбразованиеОбъект.ДатаВыдачи = Дата(Выборка.ГодОкончания, 1, 1);
					ОбразованиеОбъект.Окончание = ОбразованиеОбъект.ДатаВыдачи;
				КонецЕсли;
				
				ОбразованиеОбъект.ОбменДанными.Загрузка = Истина;
				ОбразованиеОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидОбразования(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбразованиеФизическихЛиц.Ссылка
	|ИЗ
	|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
	|ГДЕ
	|	НЕ ОбразованиеФизическихЛиц.УдалитьОсновноеОбразование
	|	И ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ОбразованиеФизическихЛиц", "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ВидОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметровНаборовСвойств(ПараметрыОбновления = Неопределено) Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОбразованиеФизическихЛиц", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли