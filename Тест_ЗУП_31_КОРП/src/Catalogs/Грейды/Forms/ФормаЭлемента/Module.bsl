
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзмененыДанныеГрейдов" Тогда 
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаДанныеГрейдаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.РаботаСГрейдами.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийНачислениеПриИзменении(ЭтотОбъект, ОписаниеТаблицыНачислений(), 0);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ОписаниеТаблицыЛьгот = ОписаниеТаблицыЛьгот();
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыНачислений, 0, "Начисления");
	ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыЛьгот, 0, "Начисления");
	
	ПрочитатьДанныеГрейда();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений);
	ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот);
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписанияТаблиц, 0);
	
	УстановитьУсловноеОформление();
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеГрейда()
	
	Начисления.Очистить();
	Показатели.Очистить();
	Льготы.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Грейд", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОграничениеФОТГрейдов.ОграничиватьФОТ,
	               |	ОграничениеФОТГрейдов.ФОТМин,
	               |	ОграничениеФОТГрейдов.ФОТМакс
	               |ИЗ
	               |	РегистрСведений.ОграничениеФОТГрейдов КАК ОграничениеФОТГрейдов
	               |ГДЕ
	               |	ОграничениеФОТГрейдов.Грейд = &Грейд
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель КАК НачислениеПоказатель,
	               |	ИспользованиеНачисленийПоказателейГрейдов.ИспользованиеРазрешено КАК Используется,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМин КАК РазмерМин,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМакс КАК РазмерМакс
	               |ПОМЕСТИТЬ ВТНачисленияПоказатели
	               |ИЗ
	               |	РегистрСведений.ИспользованиеНачисленийПоказателейГрейдов КАК ИспользованиеНачисленийПоказателейГрейдов
	               |ГДЕ
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд = &Грейд
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.Показатель,
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.ЗначениеМин,
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.ЗначениеМакс
	               |ПОМЕСТИТЬ ВТЗначенияПоказателей
	               |ИЗ
	               |	РегистрСведений.ЗначенияПоказателейРасчетаЗарплатыГрейдов КАК ЗначенияПоказателейРасчетаЗарплатыГрейдов
	               |ГДЕ
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.Грейд = &Грейд
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачисленияПоказатели.НачислениеПоказатель КАК Начисление,
	               |	НачисленияПоказатели.Используется КАК Используется,
	               |	НачисленияПоказатели.РазмерМин,
	               |	НачисленияПоказатели.РазмерМакс
	               |ИЗ
	               |	ВТНачисленияПоказатели КАК НачисленияПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	               |		ПО НачисленияПоказатели.НачислениеПоказатель = Начисления.Ссылка
	               |			И (НЕ Начисления.ЯвляетсяЛьготой)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Используется УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачисленияПоказатели.НачислениеПоказатель КАК Льгота,
	               |	НачисленияПоказатели.Используется КАК Используется,
	               |	НачисленияПоказатели.РазмерМин,
	               |	НачисленияПоказатели.РазмерМакс
	               |ИЗ
	               |	ВТНачисленияПоказатели КАК НачисленияПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	               |		ПО НачисленияПоказатели.НачислениеПоказатель = Начисления.Ссылка
	               |			И (Начисления.ЯвляетсяЛьготой)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Используется УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачисленияПоказатели.НачислениеПоказатель КАК Начисление,
	               |	ЗначенияПоказателей.Показатель,
	               |	ЗначенияПоказателей.ЗначениеМин,
	               |	ЗначенияПоказателей.ЗначениеМакс
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
	               |		ПО ПоказателиНачислений.Ссылка = НачисленияПоказатели.НачислениеПоказатель
	               |			И (НачисленияПоказатели.Используется)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей
	               |		ПО ПоказателиНачислений.Показатель = ЗначенияПоказателей.Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НачисленияПоказатели.НачислениеПоказатель КАК Показатель,
	               |	НачисленияПоказатели.Используется,
	               |	ЕСТЬNULL(ЗначенияПоказателей.ЗначениеМин, 0) КАК ЗначениеМин,
	               |	ЕСТЬNULL(ЗначенияПоказателей.ЗначениеМакс, 0) КАК ЗначениеМакс
	               |ИЗ
	               |	ВТНачисленияПоказатели КАК НачисленияПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ПО НачисленияПоказатели.НачислениеПоказатель = ПоказателиРасчетаЗарплаты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей
	               |		ПО НачисленияПоказатели.НачислениеПоказатель = ЗначенияПоказателей.Показатель";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	ИдентификаторыСтрокНачислений = Новый Соответствие;
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ИдентификаторСтроки = ОписаниеТаблицыНачислений.НомерТаблицы * 1000000 + 1;
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		ИдентификаторыСтрокНачислений.Вставить(Выборка.Начисление, ИдентификаторСтроки);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	ОписаниеТаблицыЛьгот = ОписаниеТаблицыЛьгот();
	ИдентификаторСтроки = ОписаниеТаблицыЛьгот.НомерТаблицы * 1000000 + 1;
	
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Льготы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		ИдентификаторыСтрокНачислений.Вставить(Выборка.Льгота, ИдентификаторСтроки);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторыСтрокНачислений[Выборка.Начисление];
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Показатели.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания = Истина;
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Начисления";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Показатели";
	ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений = Истина;
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьгот()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Ложь, Ложь);
	ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Льготы";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета = "Льгота";
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Льготы";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Показатели";
	ОписаниеТаблицыВидовРасчета.НомерТаблицы = 1;
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаФиксРасчет = "ЛьготыФиксРасчет";
	ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений = Истина;
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Начисления.Используется");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Начисления");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.Используется");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Показатели");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрок()
	
	Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиВидаРасчета", 0);
	
КонецПроцедуры

#КонецОбласти
