#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
			ПроверяемыеРеквизиты,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ГоловнаяОрганизация"));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНовогоСотрудника = ЭтоНовый();
	
	Если ЗаписьНовогоСотрудника Тогда
		ДополнительныеСвойства.Вставить("ЗаписьНовогоСотрудника", Истина);
	КонецЕсли;
	
	Если ЗаписьНовогоСотрудника Или Не ЗначениеЗаполнено(ГоловнойСотрудник) Тогда
		
		СсылкаОбъекта = Неопределено;
		Если ДополнительныеСвойства.Свойство("СсылкаНового") Тогда
			СсылкаОбъекта = ДополнительныеСвойства.СсылкаНового;
			УстановитьСсылкуНового(СсылкаОбъекта);
		ИначеЕсли ЗначениеЗаполнено(Ссылка) Тогда
			СсылкаОбъекта = Ссылка;
		Иначе
			СсылкаОбъекта = Справочники.Сотрудники.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаОбъекта);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГоловнойСотрудник) Тогда
			ГоловнойСотрудник = СсылкаОбъекта;
		КонецЕсли;
		
	Иначе
		СсылкаОбъекта = Ссылка;
	КонецЕсли;
	
	ПрежниеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ГоловнаяОрганизация,Код");
	
	Если ЗаписьНовогоСотрудника Тогда
		ОбновитьЗначенияДоступаПоГоловнойОрганизации(СсылкаОбъекта, ГоловнаяОрганизация, ПрежниеЗначенияРеквизитов.ГоловнаяОрганизация);
	Иначе
		ДополнительныеСвойства.Вставить("ГоловнаяОрганизацияПрежняя", ПрежниеЗначенияРеквизитов.ГоловнаяОрганизация);
	КонецЕсли;
	
	КодПредыдущий = ПрежниеЗначенияРеквизитов.Код;
	Если КодПредыдущий <> Код Тогда
		
		// Проверка уникальности кода справочника в пределах головного сотрудника.
		Если ГоловнойСотрудник = Ссылка
			Или ЗаписьНовогоСотрудника И ГоловнойСотрудник = ПолучитьСсылкуНового() Тогда
			КадровыйУчет.ПроверитьУникальностьТабельногоНомера(Код, Ссылка);
		КонецЕсли;
		
		// Синхронизация кодов всех сотрудников в пределах головного сотрудника.
		Если Не ДополнительныеСвойства.Свойство("СинхронизацияТабельныхНомеров") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Код", Код);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ГоловнойСотрудник", ГоловнойСотрудник);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Сотрудники.Ссылка
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|ГДЕ
				|	Сотрудники.ГоловнойСотрудник = &ГоловнойСотрудник
				|	И Сотрудники.Ссылка <> &Ссылка
				|	И Сотрудники.Код <> &Код";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
					Попытка 
						СотрудникОбъект.Заблокировать();
					Исключение
						
						ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось изменить Таб. номер ""%1"".
							|Возможно, данные редактируется другим пользователем'"),
							СотрудникОбъект.Наименование);
							
						ВызватьИсключение ТекстИсключенияЗаписи;
						
					КонецПопытки;
					
					СотрудникОбъект.Код = Код;
					СотрудникОбъект.ДополнительныеСвойства.Вставить("СинхронизацияТабельныхНомеров");
					СотрудникОбъект.Записать();
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ГоловнаяОрганизацияПрежняя") Тогда
		ОбновитьЗначенияДоступаПоГоловнойОрганизации(Ссылка, ГоловнаяОрганизация, ДополнительныеСвойства.ГоловнаяОрганизацияПрежняя);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И ДополнительныеСвойства.Свойство("ЗаписьНовогоСотрудника") Тогда
		КадровыйУчет.ОбновитьОсновныхСотрудниковФизическихЛицПоСотрудникам(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ГоловнойСотрудник = Ссылка;
	Наименование = "";
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийПроцентСевернойНадбавки = 0;
	УточнениеНаименования = "";
	ВАрхиве = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоСотруднику(ЭтотОбъект, Ссылка, ТекущаяДатаСеанса());
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьЗначенияДоступаПоГоловнойОрганизации(Сотрудник, ГоловнаяОрганизация, ГоловнаяОрганизацияПредыдущая)
	
		ТаблицаАнализаИзменений = КадровыйУчет.ТаблицаАнализаИзменений();
		
		Если ЗначениеЗаполнено(ГоловнаяОрганизацияПредыдущая) Тогда
			
			СтрокаТаблицы = ТаблицаАнализаИзменений.Добавить();
			СтрокаТаблицы.Сотрудник = Сотрудник;
			СтрокаТаблицы.Организация = ГоловнаяОрганизацияПредыдущая;
			СтрокаТаблицы.ФлагИзменений = -1;
			
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаАнализаИзменений.Добавить();
		СтрокаТаблицы.Сотрудник = Сотрудник;
		СтрокаТаблицы.Организация = ГоловнаяОрганизация;
		СтрокаТаблицы.ФлагИзменений = 1;
		
		КадровыйУчет.ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений);
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецЕсли

