
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтатистикаПерсоналаРасширенныйВызовСервера.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение классификатора.
Процедура НачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы");
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Code КАК СТРОКА(11)) КАК Код,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Name КАК СТРОКА(150)) КАК Наименование,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.CategoryCode КАК СТРОКА(3)) КАК КодКатегорииПерсонала,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.ReportForm КАК СТРОКА(50)) КАК ФормаМониторинга,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Comment КАК СТРОКА(300)) КАК Пояснение
	|ПОМЕСТИТЬ СтрокиОтчетностиТаблица
	|ИЗ
	|	&СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетностиТаблица.Код,
	|	СтрокиОтчетностиТаблица.Наименование,
	|	СтрокиОтчетностиТаблица.КодКатегорииПерсонала,
	|	СтрокиОтчетностиТаблица.ФормаМониторинга,
	|	СтрокиОтчетностиТаблица.Пояснение
	|ИЗ
	|	СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО СтрокиОтчетностиТаблица.Код = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка ЕСТЬ NULL ");
	
	ТекстовыйДокумент = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПолучитьМакет("СтрокиОтчетностиМониторинга");
	Таблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	Запрос.УстановитьПараметр("СтрокиОтчетностиТаблица", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьЭлемент();
		СправочникОбъект.Код = СокрЛП(Выборка.Код);
		СправочникОбъект.Наименование = СокрЛП(Выборка.Наименование);
		СправочникОбъект.КодКатегорииПерсонала = СокрЛП(Выборка.КодКатегорииПерсонала);
		СправочникОбъект.Пояснение = СокрЛП(Выборка.Пояснение);
		
		Если СокрЛП(Выборка.ФормаМониторинга) = "ЗПЗдрав" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПЗдрав;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПКультура" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПКультура;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПНаука" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПОбразование" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПОбразование;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПСоц" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПСоц;
		КонецЕсли;
		
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обновление пояснений категорий.
Процедура ОбновлениеПояснений() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка,
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала,
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга,
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Пояснение
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы");
	
	ТаблицаСправочника = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСправочника.Количество() > 0 И ЗначениеЗаполнено(ТаблицаСправочника[0].Пояснение) Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Name КАК СТРОКА(150)) КАК Наименование,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.CategoryCode КАК СТРОКА(3)) КАК КодКатегорииПерсонала,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.ReportForm КАК СТРОКА(50)) КАК ФормаМониторинга,
	|	СтрокиОтчетностиТаблица.Comment КАК Пояснение
	|ПОМЕСТИТЬ СтрокиОтчетностиТаблица
	|ИЗ
	|	&СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетностиТаблица.Наименование,
	|	СтрокиОтчетностиТаблица.КодКатегорииПерсонала,
	|	СтрокиОтчетностиТаблица.ФормаМониторинга,
	|	СтрокиОтчетностиТаблица.Пояснение
	|ИЗ
	|	СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО СтрокиОтчетностиТаблица.КодКатегорииПерсонала = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала
	|			И СтрокиОтчетностиТаблица.ФормаМониторинга = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга");
	
	ТекстовыйДокумент = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПолучитьМакет("СтрокиОтчетностиМониторинга");
	ТаблицаЯзыков = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	Запрос.УстановитьПараметр("СтрокиОтчетностиТаблица", ТаблицаЯзыков);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СокрЛП(Выборка.ФормаМониторинга) = "ЗПЗдрав" Тогда
			ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПЗдрав;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПКультура" Тогда
			ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПКультура;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПНаука" Тогда
			ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПОбразование" Тогда
			ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПОбразование;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПСоц" Тогда
			ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПСоц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КодКатегорииПерсонала", Выборка.КодКатегорииПерсонала);
		СтруктураОтбора.Вставить("ФормаМониторинга", ФормаМониторинга);
		
		Для Каждого СтрокаСправочника Из ТаблицаСправочника.НайтиСтроки(СтруктураОтбора) Цикл
			СправочникОбъект = СтрокаСправочника.Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = СокрЛП(Выборка.Наименование);
			СправочникОбъект.Пояснение = СокрЛП(Выборка.Пояснение);				
			СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			СправочникОбъект.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет удаление элемента "Научные сотрудники" формы ЗП-Наука.
Процедура УдалениеЭлементаНаучныеСотрудники() Экспорт
	
	СтрокиЗамены = СтатистикаПерсоналаРасширенный.ДанныеДляУдаленияКатегорииНаучныеСотрудники();
	
	Если СтрокиЗамены.КатегорияДляУдаления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыйОбъект = СтрокиЗамены.КатегорияДляУдаления.ПолучитьОбъект();
	УдаляемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
	УдаляемыйОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеДублиЭлементов() Экспорт
	
	// В некоторых ИБ ссылки на некоторые элементы оказались продублированы.
	// Выполним поиск таких и пометим на удаление.
	// В разделенном обработчике заменим ссылки.
	// В следующем обработчике обновления (общем) удалим такие элементы.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТДубли
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиОтчетности.Код,
		|	СтрокиОтчетности.Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетности
		|ГДЕ
		|	СтрокиОтчетности.Код В
		|			(ВЫБРАТЬ
		|				Дубли.Код
		|			ИЗ
		|				ВТДубли КАК Дубли)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиОтчетности.Код";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем соответствие ссылок.
	// Первый элемент оставляем, остальные - удалим, поэтому запомним соответствие ссылок.
	СоответствиеСсылок = Новый Соответствие;
	УдаляемыеЭлементы = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Код") Цикл
		ОставляемЭлемент = Выборка.Ссылка;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка = ОставляемЭлемент Тогда
				Продолжить;
			КонецЕсли;
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			Объект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаДублиЭлементов() Экспорт
	
	// Находим ссылки на помеченные на удаление объекты и заменяем на не помеченные
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТДубли
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиОтчетности.Код,
		|	СтрокиОтчетности.Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетности
		|ГДЕ
		|	СтрокиОтчетности.Код В
		|			(ВЫБРАТЬ
		|				Дубли.Код
		|			ИЗ
		|				ВТДубли КАК Дубли)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиОтчетности.Код,
		|	СтрокиОтчетности.ПометкаУдаления";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем соответствие ссылок.
	// Первый элемент оставляем, остальные - удалим, поэтому запомним соответствие ссылок.
	СоответствиеСсылок = Новый Соответствие;
	УдаляемыеЭлементы = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Код") Цикл
		ОставляемЭлемент = Выборка.Ссылка;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка = ОставляемЭлемент Тогда
				Продолжить;
			КонецЕсли;
			СоответствиеСсылок.Вставить(Выборка.Ссылка, ОставляемЭлемент);
			УдаляемыеЭлементы.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	// Выполняем замену ссылок.
	Запрос.УстановитьПараметр("СтрокиОтчетности", УдаляемыеЭлементы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должности.Ссылка,
		|	Должности.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокаОтчетности
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы В(&СтрокиОтчетности)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДолжностьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДолжностьОбъект.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = СоответствиеСсылок[Выборка.СтрокаОтчетности];
			ДолжностьОбъект.ОбменДанными.Загрузка = Истина;
			ДолжностьОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиОтчетности.Должность,
		|	СтрокиОтчетности.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокаОтчетности
		|ИЗ
		|	РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетности
		|ГДЕ
		|	СтрокиОтчетности.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы В(&СтрокиОтчетности)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Должность = Выборка.Должность;
			МенеджерЗаписи.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = СоответствиеСсылок[Выборка.СтрокаОтчетности];
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДублиЭлементов() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТДубли
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиОтчетности.Ссылка
		|ИЗ
		|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетности
		|ГДЕ
		|	СтрокиОтчетности.Код В
		|			(ВЫБРАТЬ
		|				Дубли.Код
		|			ИЗ
		|				ВТДубли КАК Дубли)
		|	И СтрокиОтчетности.ПометкаУдаления = ИСТИНА";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Удаляем элементы-дубли.
	Пока Выборка.Следующий() Цикл
		УдаляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдаляемыйОбъект.ОбменДанными.Загрузка = Истина;
		УдаляемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		УдаляемыйОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
// Используется для сопоставления элементов механизмом «Выгрузка/загрузка областей данных».
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
