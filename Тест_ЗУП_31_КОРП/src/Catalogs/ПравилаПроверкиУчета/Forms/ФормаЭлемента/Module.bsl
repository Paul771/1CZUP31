
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Интерактивное создание запрещено.'");
	КонецЕсли;
	
	МетаданныеТекущейПроверки = МетаданныеТекущейПроверки(Объект.Идентификатор);
	
	УстановитьДоступностьПоляВажности(ЭтотОбъект, МетаданныеТекущейПроверки);
	УстановитьПутьДоПроцедурыОбработчика(ЭтотОбъект, МетаданныеТекущейПроверки);
	
	Если Не ОбновлениеИнформационнойБазы.ОбъектОбработан(Объект).Обработан Тогда
		
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь;
		
	Иначе
		
		УстановитьНачальныеНастройкиРасписания();
		
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			СформироватьРасписания();
		Иначе
			
			МодульПользователи = ОбщегоНазначения.ОбщийМодуль("Пользователи");
			Если МодульПользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
				СформироватьРасписания();
				Элементы.ГруппаРасписание.ТолькоПросмотр = Истина;
			Иначе
				Элементы.ГруппаРасписание.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Код) Тогда
		ТекущийОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресИндивидуальногоРасписания) Тогда
		ТекущийОбъект.РасписаниеВыполненияПроверки = ПолучитьИзВременногоХранилища(АдресИндивидуальногоРасписания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредставлениеИндивидуальногоРасписанияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(НавигационнаяСсылкаФорматированнойСтроки);
	Если ДанныеХранилища = "ДобавитьЗадание" Тогда
		ДиалогРасписания    = Новый ДиалогРасписанияРегламентногоЗадания(Новый РасписаниеРегламентногоЗадания);
		ОповещениеИзменения = Новый ОписаниеОповещения("ДобавитьЗаданиеНаКлиентеЗавершение", ЭтотОбъект);
		ДиалогРасписания.Показать(ОповещениеИзменения);
	Иначе
		ДиалогРасписания    = Новый ДиалогРасписанияРегламентногоЗадания(ДанныеХранилища);
		ОповещениеИзменения = Новый ОписаниеОповещения("ИзменитьЗаданиеНаКлиентеЗавершение", ЭтотОбъект);
		ДиалогРасписания.Показать(ОповещениеИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполняетсяВФонеПоРасписаниюПриИзменении(Элемент)
	
	Если ВыполняетсяВФонеПоРасписанию Тогда
		УстановитьНастройкиРасписанияНаСервере();
	Иначе
		СкрытьНастройкиРасписанияНаСервере();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторРасписанияПриИзменении(Элемент)
	
	УстановитьНастройкиРасписанияНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	ДлительнаяОперация = ВыполнитьПроверкуНаСервере();
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ТекстСообщения       = НСтр("ru = 'Идет выполнение проверки. Это может занять некоторое время'");
		ПараметрыОжидания.Интервал             = 2;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, , ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	ТекстВопроса = НСтр("ru = 'Установить стандартные настройки?'");
	Обработчик = Новый ОписаниеОповещения("УстановитьСтандартныеНастройкиНаКлиенте", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыполнитьПроверкуНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнение проверки ""%1""'"), Объект.Наименование);
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	МассивПараметров = Новый Массив;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Идентификатор",                          Объект.Идентификатор);
	ПараметрыЗадания.Вставить("Наименование",                           Объект.Наименование);
	ПараметрыЗадания.Вставить("ИдентификаторРегламентногоЗадания",      Объект.ИдентификаторРегламентногоЗадания);
	ПараметрыЗадания.Вставить("ДатаНачалаПроверки",                     Объект.ДатаНачалаПроверки);
	ПараметрыЗадания.Вставить("ЛимитПроблем",                           Объект.ЛимитПроблем);
	ПараметрыЗадания.Вставить("СпособВыполнения",                       Объект.СпособВыполнения);
	ПараметрыЗадания.Вставить("ВажностьПроблемы",                       Объект.ВажностьПроблемы);
	ПараметрыЗадания.Вставить("КонтекстПроверокВеденияУчета",           Объект.КонтекстПроверокВеденияУчета);
	ПараметрыЗадания.Вставить("УточнениеКонтекстаПроверокВеденияУчета", Объект.УточнениеКонтекстаПроверокВеденияУчета);
	ПараметрыЗадания.Вставить("ПроверкаБылаОстановлена",                Ложь);
	ПараметрыЗадания.Вставить("РучнойЗапуск",                           Истина);
	
	МассивПараметров.Добавить(ПараметрыЗадания);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("КонтрольВеденияУчетаСлужебный.ВыполнитьПроверкиВФоновомЗадании", Новый Структура("МассивПараметров", МассивПараметров), ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьРасписания()
	
	СформироватьСтрокуСОбщимРасписанием();
	СформироватьСтрокуСИндивидуальнымРасписанием();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуСИндивидуальнымРасписанием()
	
	ИдентификаторРегламентногоЗадания = Объект.ИдентификаторРегламентногоЗадания;
	ОтдельноеРегламентноеЗадание      = Неопределено;
	ОтдельноеРасписаниеПредставление  = "";
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		ОтдельноеРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
		Если ОтдельноеРегламентноеЗадание <> Неопределено Тогда
			ОтдельноеРасписаниеПредставление = Строка(ОтдельноеРегламентноеЗадание.Расписание) + ". ";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОтдельноеРегламентноеЗадание = Неопределено Тогда
			Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок = 
				Новый ФорматированнаяСтрока(НСтр("ru='Настроить расписание'"), , , , ПоместитьВоВременноеХранилище("ДобавитьЗадание", УникальныйИдентификатор));
		Иначе
			Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок = 
				Новый ФорматированнаяСтрока(ОтдельноеРасписаниеПредставление, , , , ПоместитьВоВременноеХранилище(ОтдельноеРегламентноеЗадание.Расписание, УникальныйИдентификатор));
		КонецЕсли;
		
	Иначе
		
		Если ОтдельноеРегламентноеЗадание = Неопределено Тогда
			Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок = 
				Новый ФорматированнаяСтрока(ОтдельноеРасписаниеПредставление + ". ", , ЦветаСтиля.ГиперссылкаЦвет);
		Иначе
			Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок = 
				Новый ФорматированнаяСтрока(ОтдельноеРасписаниеПредставление, , ЦветаСтиля.ГиперссылкаЦвет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуСОбщимРасписанием()
	
	ОбщееРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ПроверкаВеденияУчета);
	Если ОбщееРегламентноеЗадание <> Неопределено Тогда
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			ОбщееРасписаниеПредставление = Строка(ОбщееРегламентноеЗадание.Расписание);
		Иначе
			Если Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
				ОбщееРасписаниеПредставление = Строка(ОбщееРегламентноеЗадание.Шаблон.Расписание.Получить());
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщееРасписаниеПредставление = НСтр("ru = 'Не найдено общее регламентное задание'");
	КонецЕсли;
	
	Элементы.ПредставлениеОбщегоРасписания.Заголовок = 
		Новый ФорматированнаяСтрока(ОбщееРасписаниеПредставление, , ЦветаСтиля.ГиперссылкаЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаданиеНаКлиентеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	ИзменитьЗаданиеНаСервереЗавершение(Расписание, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаданиеНаСервереЗавершение(Расписание, ДополнительныеПараметры)
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.Задание(Объект.ИдентификаторРегламентногоЗадания);
	Если РегламентноеЗадание = Неопределено Тогда
		ДобавитьЗаданиеНаСервереЗавершение(Расписание, ДополнительныеПараметры);
	Иначе
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Объект.ИдентификаторРегламентногоЗадания, Новый Структура("Расписание", Расписание));
		Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок = 
			Новый ФорматированнаяСтрока(Строка(Расписание), , , , ПоместитьВоВременноеХранилище(Расписание, УникальныйИдентификатор));
		
		АдресИндивидуальногоРасписания = ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание)), УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаданиеНаКлиентеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	ДобавитьЗаданиеНаСервереЗавершение(Расписание, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаданиеНаСервереЗавершение(Расписание, ДополнительныеПараметры)
		
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание",    Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ПроверкаВеденияУчета);
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	Объект.ИдентификаторРегламентногоЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Структура;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Строка(РегламентноеЗадание.УникальныйИдентификатор));
	
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	Элементы.ПредставлениеИндивидуальногоРасписания.Заголовок =
		Новый ФорматированнаяСтрока(Строка(Расписание), , , , ПоместитьВоВременноеХранилище(Расписание, УникальныйИдентификатор));
		
	АдресИндивидуальногоРасписания = ПоместитьВоВременноеХранилище(Новый ХранилищеЗначения(ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание)), УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МетаданныеТекущейПроверки(Идентификатор)
	
	СтруктураПроверки = Новый Структура;
	Проверки          = КонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета().Проверки;
	СтрокаПроверки    = Проверки.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаПроверки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		КолонкиПроверок = Проверки.Колонки;
		Для Каждого ТекущаяКолонка Из КолонкиПроверок Цикл
			СтруктураПроверки.Вставить(ТекущаяКолонка.Имя, СтрокаПроверки[ТекущаяКолонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПроверки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьДоступностьПоляВажности(Форма, МетаданныеТекущейПроверки)
	Форма.Элементы.ВажностьПроблемы.Доступность = Не (МетаданныеТекущейПроверки <> Неопределено И МетаданныеТекущейПроверки.ЗапрещеноИзменениеВажности);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПутьДоПроцедурыОбработчика(Форма, МетаданныеТекущейПроверки)
	Форма.ПутьДоПроцедурыОбработчика = ?(МетаданныеТекущейПроверки = Неопределено, НСтр("ru = 'Не задан обработчик'"), МетаданныеТекущейПроверки.ОбработчикПроверки);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройкиНаКлиенте(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтандартныеНастройкиНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	
	МетаданныеТекущейПроверки = МетаданныеТекущейПроверки(Объект.Идентификатор);
	Если МетаданныеТекущейПроверки = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Рассинхронизация проверок учета. Проверка с идентификатором ""%1"" не найдена в метаданных.'"), Объект.Идентификатор);
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(Объект, МетаданныеТекущейПроверки, , "Идентификатор");
	Объект.ПроверкаВеденияУчетаИзменена = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиРасписанияНаСервере()
	
	Если СелекторРасписания = 0 Тогда
		
		Если Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОбщемуРасписанию Тогда
			
			СелекторРасписания = 1;
			
			Элементы.СелекторРасписания.Доступность                     = Истина;
			Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
			Элементы.ПредставлениеОбщегоРасписания.Доступность          = Истина;
			
		ИначеЕсли Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОтдельномуРасписанию Тогда
			
			СелекторРасписания = 2;
			
			Элементы.СелекторРасписания.Доступность                     = Истина;
			Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Истина;
			Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СелекторРасписания = 1 Тогда
		
		Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОбщемуРасписанию;
		Элементы.СелекторРасписания.Доступность                     = Истина;
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Истина;
		
	ИначеЕсли СелекторРасписания = 2 Тогда
		
		Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОтдельномуРасписанию;
		Элементы.СелекторРасписания.Доступность                     = Истина;
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Истина;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьНастройкиРасписанияНаСервере()
	
	Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.Вручную;
	Элементы.СелекторРасписания.Доступность                     = Ложь;
	Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
	Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеНастройкиРасписания()
	
	Если Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОбщемуРасписанию Тогда
		
		ВыполняетсяВФонеПоРасписанию = Истина;
		СелекторРасписания           = 1;
		
		Элементы.СелекторРасписания.Доступность                     = Истина;
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Истина;
		
	ИначеЕсли Объект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОтдельномуРасписанию Тогда
		
		ВыполняетсяВФонеПоРасписанию = Истина;
		СелекторРасписания           = 2;
		
		Элементы.СелекторРасписания.Доступность                     = Истина;
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Истина;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь;
		
	Иначе
		
		ВыполняетсяВФонеПоРасписанию = Ложь;
		СелекторРасписания           = 1;
		
		Элементы.СелекторРасписания.Доступность                     = Ложь;
		Элементы.ПредставлениеИндивидуальногоРасписания.Доступность = Ложь;
		Элементы.ПредставлениеОбщегоРасписания.Доступность          = Ложь
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти