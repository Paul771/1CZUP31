#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция ДобавитьЭлементВПодборку(ПодборкаЭлементов, Элемент, ГруппаЭлементовПодборки, ВесВопроса = 1) Экспорт
	
	ЭлементПодборкиОбъект = Справочники.СтраницыЭлементовЭлектронныхКурсов.СоздатьЭлемент();
		
	ЭлементПодборкиОбъект.Наименование      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Наименование");
	ЭлементПодборкиОбъект.Владелец          = ПодборкаЭлементов;
	ЭлементПодборкиОбъект.СсылкаНаЭлементКурса = Элемент; 
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ТестовыеВопросы") Тогда
		ЭлементПодборкиОбъект.ВесВопроса = ВесВопроса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаЭлементовПодборки) Тогда
		
		ДанныеГруппыЭлементаПодборки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаЭлементовПодборки, "ЭтоГруппа, Родитель");
		
		Если ДанныеГруппыЭлементаПодборки.ЭтоГруппа Тогда
			ЭлементПодборкиОбъект.Родитель = ГруппаЭлементовПодборки;
		Иначе
			ЭлементПодборкиОбъект.Родитель = ДанныеГруппыЭлементаПодборки.Родитель;
		КонецЕсли;
		
	КонецЕсли;
	
	РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементПодборкиОбъект);
	
	ЭлементПодборкиОбъект.Записать();
	
	Возврат ЭлементПодборкиОбъект.Ссылка;	
	
КонецФункции

Функция ЭлементЕдинственнойСтраницы(ПодборкаЭлементов, ВключатьЗависимые = Ложь) Экспорт
	
	ЕдинственныйЭлемент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраницыЭлементов.СсылкаНаЭлементКурса КАК СсылкаНаЭлементКурса
		|ИЗ
		|	Справочник.СтраницыЭлементовЭлектронныхКурсов КАК СтраницыЭлементов
		|ГДЕ
		|	СтраницыЭлементов.ПометкаУдаления = ЛОЖЬ
		|	И СтраницыЭлементов.Владелец = &ПодборкаЭлементов
		|	И СтраницыЭлементов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ПодборкаЭлементов", ПодборкаЭлементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда			
			ВыборкаДетальныеЗаписи.Следующий();	
			ЕдинственныйЭлемент = ВыборкаДетальныеЗаписи.СсылкаНаЭлементКурса;
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ВключатьЗависимые Тогда
		Возврат ЕдинственныйЭлемент;
	КонецЕсли;	
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ПодборкаЭлементов);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкрытыеРесурсы.Ресурс КАК СсылкаНаЭлементКурса
		|ИЗ
		|	&СкрытыеРесурсы КАК СкрытыеРесурсы
		|ГДЕ
		|	СкрытыеРесурсы.Ссылка = &ПодборкаЭлементов";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкрытыеРесурсы", ИмяТаблицы + ".СкрытыеРесурсы");
	
	Запрос.УстановитьПараметр("ПодборкаЭлементов", ПодборкаЭлементов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 1 И ЕдинственныйЭлемент = Неопределено Тогда			
			ВыборкаДетальныеЗаписи.Следующий();	
			ЕдинственныйЭлемент = ВыборкаДетальныеЗаписи.СсылкаНаЭлементКурса;
		КонецЕсли;

	КонецЕсли;
	
	Возврат ЕдинственныйЭлемент;
		
КонецФункции

Процедура Перезаписать(ЭлементПодборки, ВесВопроса = Неопределено) Экспорт

	ОбъектЭлементПодборки =  ЭлементПодборки.ПолучитьОбъект();
	
	Если ВесВопроса <> Неопределено Тогда
		ОбъектЭлементПодборки.ВесВопроса = ВесВопроса;
	КонецЕсли;
	
	// Наименование будет обновлено в обработчике ПередЗаписью модуля объекта
	ОбъектЭлементПодборки.Записать();
			
КонецПроцедуры

// Возвращает группу, в которой хранятся элементы подборки.
// В случае ее отсутствия, создает новую.
//
Функция ГруппаПодчиненныхЭлементов(Знач Подборка, Знач ТипПодчиненногоЭлемента, Знач ЭлектронныйРесурс = Неопределено) Экспорт
	Возврат Неопределено
КонецФункции

// Позволяет получить таблицу групп элементов верхнего уровня подборки.
// Группа элементов - это ссылка на элемент справочника ЭлементыПодборкиСУЗ, не имеющая родителя.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Таблица - содержит данные о группах подборки.
//
Функция СтраницыВладельца(Подборка, УчитыватьПредыдущиеПопытки = Ложь, МаксимальноеКоличествоЭлементов = 0, КонтекстВыполнения = Неопределено) Экспорт
	
	ЗапросГруппыПодборки = Новый Запрос("ВЫБРАТЬ
	                                    |	СтраницыЭлементовЭлектронныхКурсов.Ссылка,
	                                    |	СтраницыЭлементовЭлектронныхКурсов.ЭтоГруппа,
	                                    |	СтраницыЭлементовЭлектронныхКурсов.СсылкаНаЭлементКурса,
	                                    |	СтраницыЭлементовЭлектронныхКурсов.Наименование
	                                    |ИЗ
	                                    |	Справочник.СтраницыЭлементовЭлектронныхКурсов КАК СтраницыЭлементовЭлектронныхКурсов
	                                    |ГДЕ
	                                    |	СтраницыЭлементовЭлектронныхКурсов.Владелец = &Владелец
	                                    |	И СтраницыЭлементовЭлектронныхКурсов.Родитель = &Родитель
	                                    |	И СтраницыЭлементовЭлектронныхКурсов.ПометкаУдаления = &ПометкаУдаления
	                                    |
	                                    |УПОРЯДОЧИТЬ ПО
	                                    |	СтраницыЭлементовЭлектронныхКурсов.Код");
		
	
	ЗапросГруппыПодборки.УстановитьПараметр("Владелец", Подборка); 
	ЗапросГруппыПодборки.УстановитьПараметр("Родитель", Справочники.СтраницыЭлементовЭлектронныхКурсов.ПустаяСсылка()); 
	ЗапросГруппыПодборки.УстановитьПараметр("ПометкаУдаления", Ложь); 
	
	ГруппыПодборки = ЗапросГруппыПодборки.Выполнить().Выгрузить();
	
	Если УчитыватьПредыдущиеПопытки
		И МаксимальноеКоличествоЭлементов <> 0
		И МаксимальноеКоличествоЭлементов < ГруппыПодборки.Количество() Тогда
		
		Возврат СтраницыСУчетомРезультатов(Подборка, КонтекстВыполнения.Учащийся, ГруппыПодборки, МаксимальноеКоличествоЭлементов);
		
	Иначе
	
		Возврат ГруппыПодборки;	
		
	КонецЕсли;
	
	
КонецФункции

// Позволяет получить все элементы группы и все элементы вложенных подгрупп.
// Ссылки на сами группы не выводит, только элементы.
//
// Параметры
//  Группа - Ссылка на элемент справочника ЭлементыПодборкиСУЗ.
//
// Возвращаемое значение:
//   Таблица - содержит ссылки на найденные элементы заданной группы.
//
Функция ВсеЭлементы(Подборка, Группа = Неопределено, ТипЭлемента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтраницыЭлементовЭлектронныхКурсов.Ссылка,
	               |	СтраницыЭлементовЭлектронныхКурсов.СсылкаНаЭлементКурса,
	               |	СтраницыЭлементовЭлектронныхКурсов.ВесВопроса,
	               |	СтраницыЭлементовЭлектронныхКурсов.Родитель
	               |ИЗ
	               |	Справочник.СтраницыЭлементовЭлектронныхКурсов КАК СтраницыЭлементовЭлектронныхКурсов
	               |ГДЕ
	               |	СтраницыЭлементовЭлектронныхКурсов.Владелец = &Подборка
	               |	И СтраницыЭлементовЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ
	               |	И СтраницыЭлементовЭлектронныхКурсов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Подборка", Подборка);
	
	Если ЗначениеЗаполнено(Группа) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		| И	СтраницыЭлементовЭлектронныхКурсов.Родитель В ИЕРАРХИИ(&Группа)";
		
		Запрос.УстановитьПараметр("Группа", Группа);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипЭлемента) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		| И	ТИПЗНАЧЕНИЯ(СтраницыЭлементовЭлектронныхКурсов.СсылкаНаЭлементКурса) = &ТипЭлемента";
		
		Запрос.УстановитьПараметр("ТипЭлемента", ТипЭлемента);
		
	КонецЕсли;
		
	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПустаяПодборка(Подборка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Подборка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраницыЭлементовЭлектронныхКурсов.Ссылка
		|ИЗ
		|	Справочник.СтраницыЭлементовЭлектронныхКурсов КАК СтраницыЭлементовЭлектронныхКурсов
		|ГДЕ
		|	СтраницыЭлементовЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ
		|	И СтраницыЭлементовЭлектронныхКурсов.ЭтоГруппа = ЛОЖЬ
		|	И СтраницыЭлементовЭлектронныхКурсов.Владелец = &Подборка";
	
	Запрос.Параметры.Вставить("Подборка", Подборка);	
		
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Выбирает вопросы из рубрикатора, для последующего использования при тестировании.
//
Функция ВопросыИзРубрикатора(Подборка, УчитыватьПредыдущиеПопытки = Ложь, МаксимальноеКоличествоЭлементов = 0, ПараметрыЭкспорта = Неопределено, КонтекстВыполнения) Экспорт
	
	// 1. Сначала выбираем все элементы подборки из справочника
	// ЭлементыПодборкиИзРубрикатораСУЗ
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.Ссылка,
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.КоличествоЭлементов,
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.ЭлементРубрикатора,
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.Рубрикатор,
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.ИсключенныеЭлементы.(
	               |		Ссылка,
	               |		НомерСтроки,
	               |		Рубрикатор,
	               |		ЭлементРубрикатора
	               |	),
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.РазрешенныйВес
	               |ИЗ
	               |	Справочник.ОтборыТемРубрикаторовЭлектронныхКурсов КАК ОтборыТемРубрикаторовЭлектронныхКурсов
	               |ГДЕ
	               |	ОтборыТемРубрикаторовЭлектронныхКурсов.Владелец = &Владелец
	               |	И ОтборыТемРубрикаторовЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Подборка);
	
	ВыборкаЭлементовПодборки = Запрос.Выполнить().Выбрать();
	
	// 2. Получаем таблицу, содержащую все рубрики из которых
	// следует выбирать элементы подборки и таблицу исключенных рубрик.
	// Рубрик может быть больше, чем указано было пользователем, так как
	// существуют вложенные рубрики, которые так же следует учесть.
	
	// 2.1 Формируем таблицы ТаблицаВсехРубрик и ТаблицаВсехИсключенныхРубрик
	
	ОписаниеТиповЭлементПодборки    = Новый ОписаниеТипов("СправочникСсылка.ОтборыТемРубрикаторовЭлектронныхКурсов"); 
	ОписаниеТиповЭлементРубрикатора = Новый ОписаниеТипов("СправочникСсылка.ТемыРубрикаторовЭлектронныхКурсов"); 
	ОписаниеТиповЧисло              = Новый ОписаниеТипов("Число"); 
	
	ТаблицаВсехРубрик = Новый ТаблицаЗначений;
	ТаблицаВсехРубрик.Колонки.Добавить("ЭлементПодборки", ОписаниеТиповЭлементПодборки); // Ссылка на элемент справочника ЭлементыПодборкиИзРубрикатораСУЗ
	ТаблицаВсехРубрик.Колонки.Добавить("ЭлементРубрикатора", ОписаниеТиповЭлементРубрикатора);
	ТаблицаВсехРубрик.Колонки.Добавить("РазрешенныйВес", ОписаниеТиповЧисло);
	
	ТаблицаВсехИсключенныхРубрик = Новый ТаблицаЗначений;
	ТаблицаВсехИсключенныхРубрик.Колонки.Добавить("ЭлементПодборки", ОписаниеТиповЭлементПодборки); // Ссылка на элемент справочника ЭлементыПодборкиИзРубрикатораСУЗ
	ТаблицаВсехИсключенныхРубрик.Колонки.Добавить("ЭлементРубрикатора", ОписаниеТиповЭлементРубрикатора);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТемыРубрикаторовЭлектронныхКурсов.Ссылка
	               |ИЗ
	               |	Справочник.ТемыРубрикаторовЭлектронныхКурсов КАК ТемыРубрикаторовЭлектронныхКурсов
	               |ГДЕ
	               |	ТемыРубрикаторовЭлектронныхКурсов.Ссылка В ИЕРАРХИИ(&ЭлементРубрикатора)
	               |	И ТемыРубрикаторовЭлектронныхКурсов.Владелец = &Рубрикатор";
	
	// Примечание: используются вложенные циклы с обращением к базе.
	// Потенциально узкое место.
	
	НомерЭлемента = 0;
	
	Пока ВыборкаЭлементовПодборки.Следующий() Цикл
		
		// Добавляем строки к таблице ТаблицаВсехРубрик
		
		Запрос.УстановитьПараметр("Рубрикатор", ВыборкаЭлементовПодборки.Рубрикатор);
		Запрос.УстановитьПараметр("ЭлементРубрикатора", ВыборкаЭлементовПодборки.ЭлементРубрикатора);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока = ТаблицаВсехРубрик.Добавить();
			
			НоваяСтрока.ЭлементПодборки    = ВыборкаЭлементовПодборки.Ссылка;
		    НоваяСтрока.ЭлементРубрикатора = Результат.Ссылка;
			НоваяСтрока.РазрешенныйВес     = ВыборкаЭлементовПодборки.РазрешенныйВес;
			
		КонецЦикла;
		
		// Добавляем строки к таблице ТаблицаВсехИсключенныхРубрик
		// Перебираем исключенные рубрики для текущего элемента подборки.
		
		ТекИсключенныеЭлементы = ВыборкаЭлементовПодборки.ИсключенныеЭлементы.Выгрузить();
		
		Для каждого ИсключенныйЭлемент Из ТекИсключенныеЭлементы Цикл
			
			Запрос.УстановитьПараметр("ЭлементРубрикатора", ИсключенныйЭлемент.ЭлементРубрикатора);
			Запрос.УстановитьПараметр("Рубрикатор", ИсключенныйЭлемент.Рубрикатор);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				НоваяСтрока = ТаблицаВсехИсключенныхРубрик.Добавить();
				НоваяСтрока.ЭлементПодборки    = ВыборкаЭлементовПодборки.Ссылка;
			    НоваяСтрока.ЭлементРубрикатора = Результат.Ссылка;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// 2.2 Формируем таблицу со всеми объектами, которые
	// Могут входить в тест, но исключаем те, которые указаны в исключении.
	
	ТаблицаОбъектовСУЗ  = ВопросыРубрик(ТаблицаВсехРубрик);
	
	Если ТаблицаВсехИсключенныхРубрик.Количество() > 0 Тогда
		
		ТаблицаИсключенныхОбъектовСУЗ = ВопросыРубрик(ТаблицаВсехИсключенныхРубрик);
		
		// Удаляем вопросы, которые исключены
			
		Сч = ТаблицаОбъектовСУЗ.Количество();

		Пока Сч > 0 Цикл			
			
			ТекСтрока = ТаблицаОбъектовСУЗ[Сч - 1];

			Отбор = Новый Структура();
			Отбор.Вставить("СсылкаНаЭлементКурса", ТекСтрока.СсылкаНаЭлементКурса);
			
			Если ТаблицаИсключенныхОбъектовСУЗ.НайтиСтроки(Отбор).Количество() > 0 Тогда
				ТаблицаОбъектовСУЗ.Удалить(Сч - 1);		
			КонецЕсли;
			
			Сч = Сч - 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Удаляем вопросы не подходящие по весу
	
	Сч = ТаблицаОбъектовСУЗ.Количество();

	Пока Сч > 0 Цикл			
		
		ТекСтрока = ТаблицаОбъектовСУЗ[Сч - 1];

		Если ТекСтрока.ВесВопроса > 0 Тогда
		
			// Ищем все разрешенные веса
			
			МассивРазрешенныхВесов = Новый Массив();
			
			Отбор = Новый Структура();
			Отбор.Вставить("ЭлементРубрикатора", ТекСтрока.ЭлементРубрикатора);
			
			СтрокиТВР = ТаблицаВсехРубрик.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТВР Из СтрокиТВР Цикл
			
				Если СтрокаТВР.РазрешенныйВес > 0
					И МассивРазрешенныхВесов.Найти(СтрокаТВР.РазрешенныйВес) = Неопределено Тогда
					
					МассивРазрешенныхВесов.Добавить(СтрокаТВР.РазрешенныйВес);
					
				КонецЕсли;
			
			КонецЦикла;
			
			// Удаляем вопросы, если есть ограничение по весу вопроса
			
			Если МассивРазрешенныхВесов.Количество() > 0 Тогда
				
				Если МассивРазрешенныхВесов.Найти(ТекСтрока.ВесВопроса) = Неопределено Тогда
					ТаблицаОбъектовСУЗ.Удалить(Сч - 1);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч - 1;
		
	КонецЦикла;	
	
	// Удаляем открытые вопросы, если надо
			
	Если Подборка.ИсключитьОткрытыеВопросы Тогда
		
		Сч = ТаблицаОбъектовСУЗ.Количество();

		Пока Сч > 0 Цикл
			
            ТекСтрока = ТаблицаОбъектовСУЗ[Сч - 1];
			
			Если ТекСтрока.ТипВопроса = Перечисления.ТипыТестовыхВопросов.Открытый Тогда
				ТаблицаОбъектовСУЗ.Удалить(Сч - 1);
			КонецЕсли;
			
			Сч = Сч - 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Заполняем таблицу ТаблицаДоступныхОбъектов - это
	// Финальная таблица для возврата из функции.
	
	ТаблицаДоступныхОбъектов = Новый ТаблицаЗначений();
	ТаблицаДоступныхОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаДоступныхОбъектов.Колонки.Добавить("ВесВопроса");
	ТаблицаДоступныхОбъектов.Колонки.Добавить("ТипВопроса");
	
	// Заполняем таблицу ТаблицаЭлементовПодборки, в которой
	// Хранится информация о количестве вопросов для каждого
	// Элемента подборки, которые добавлены в финальную таблицу.
	
	ТаблицаЭлементовПодборки = Новый ТаблицаЗначений();
	ТаблицаЭлементовПодборки.Колонки.Добавить("ЭлементПодборки");
	ТаблицаЭлементовПодборки.Колонки.Добавить("КоличествоВопросов");
	ТаблицаЭлементовПодборки.Колонки.Добавить("РазрешенноеКоличествоВопросов");
	
	// Выбираем из доступных объектов СУЗ (ТаблицаОбъектовСУЗ) необходимое
	// Количество для каждого элемента подборки.
	
	ВыборкаЭлементовПодборки.Сбросить();
	
	Пока ВыборкаЭлементовПодборки.Следующий() Цикл
		
		ТаблицаВопросовЭП = Новый ТаблицаЗначений(); // Таблица вопросов только для одного правила
		
		Для каждого Колонка Из ТаблицаОбъектовСУЗ.Колонки Цикл
			ТаблицаВопросовЭП.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого СтрокаТО Из ТаблицаОбъектовСУЗ Цикл
			
			Если СтрокаТО.ЭлементПодборки = ВыборкаЭлементовПодборки.Ссылка Тогда // Вопрос из нужной рубрики
				
				НоваяСтрокаТВ = ТаблицаВопросовЭП.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТВ, СтрокаТО); 				  
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если УчитыватьПредыдущиеПопытки
			И ТаблицаВопросовЭП.Количество() > 0 Тогда
			
			ТаблицаВопросовЭП = СтраницыСУчетомРезультатов(Подборка, КонтекстВыполнения.Учащийся, ТаблицаВопросовЭП, ВыборкаЭлементовПодборки.КоличествоЭлементов);
			
		КонецЕсли;
		
		Если ВыборкаЭлементовПодборки.КоличествоЭлементов > 0
			И ТаблицаВопросовЭП.Количество() > ВыборкаЭлементовПодборки.КоличествоЭлементов
			И ПараметрыЭкспорта = Неопределено Тогда
			КоличествоЭлементов = ВыборкаЭлементовПодборки.КоличествоЭлементов;
		Иначе
			КоличествоЭлементов = ТаблицаВопросовЭП.Количество();
		КонецЕсли;
		
		ИндексМассив = ЭлектронноеОбучениеСлужебный.ИндексМассив(0, ТаблицаВопросовЭП.Количество(), ?(ПараметрыЭкспорта = Неопределено, Истина, Ложь));
		
		// Формируем выходную таблицу.
		
		Для Сч = 0 По КоличествоЭлементов-1 Цикл
			
			НоваяСтрока = ТаблицаДоступныхОбъектов.Добавить();
			НоваяСтрока.Ссылка          = ТаблицаВопросовЭП[ИндексМассив[Сч]].СсылкаНаЭлементКурса;
			НоваяСтрока.ВесВопроса      = ТаблицаВопросовЭП[ИндексМассив[Сч]].ВесВопроса;
			НоваяСтрока.ТипВопроса      = ТаблицаВопросовЭП[ИндексМассив[Сч]].ТипВопроса;
			
		КонецЦикла;
		
		// Запоминаем количество элементов
		
		НоваяСтрокаТЭП = ТаблицаЭлементовПодборки.Добавить();
		НоваяСтрокаТЭП.ЭлементПодборки               = ВыборкаЭлементовПодборки.Ссылка;
		НоваяСтрокаТЭП.КоличествоВопросов            = КоличествоЭлементов;
		НоваяСтрокаТЭП.РазрешенноеКоличествоВопросов = ?(ПараметрыЭкспорта = Неопределено, ВыборкаЭлементовПодборки.КоличествоЭлементов, 0);
		
	КонецЦикла;
	
	// Если в режиме УчитыватьПредыдущиеПопытки вопросов меньше, чем нужно для теста,
	// То пытаемся их добавить. Это нужно делать после основного набора вопросов, который
	// Мы сделали до этого, так как некоторые вопросы имеют приоритет и должны быть добавлены в тест
	// В первую очередь.
	
	// Если количество вопросов уже больше или равно требуемому для
	// Всего теста, то ничего не делаем.
	
	Если УчитыватьПредыдущиеПопытки	И ТаблицаДоступныхОбъектов.Количество() < МаксимальноеКоличествоЭлементов Тогда
		
		Для каждого СтрокаТЭП Из ТаблицаЭлементовПодборки Цикл
			
			Если ТаблицаДоступныхОбъектов.Количество() >= МаксимальноеКоличествоЭлементов Тогда
				Прервать; // Уже хватает вопросов для теста
			КонецЕсли;
			
			Если СтрокаТЭП.РазрешенноеКоличествоВопросов = 0
				ИЛИ СтрокаТЭП.КоличествоВопросов < СтрокаТЭП.РазрешенноеКоличествоВопросов Тогда // Не хватает для текущего элемента подборки
				
				// Создаем таблицу с вопросами, которые можно добавить в тест
				// Т.е. его еще нет в тесте и он соответствует текущему элементу подборки.
				
				ТаблицаВопросовЭП = Новый ТаблицаЗначений();
				
				Для каждого Колонка Из ТаблицаОбъектовСУЗ.Колонки Цикл
					ТаблицаВопросовЭП.Колонки.Добавить(Колонка.Имя);
				КонецЦикла;
				
				Для каждого СтрокаТО Из ТаблицаОбъектовСУЗ Цикл
					
					Если ТаблицаДоступныхОбъектов.Найти(СтрокаТО.СсылкаНаЭлементКурса, "Ссылка") = Неопределено
						И СтрокаТО.ЭлементПодборки = СтрокаТЭП.ЭлементПодборки Тогда
						
						НоваяСтрокаТВ = ТаблицаВопросовЭП.Добавить(); 
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТВ, СтрокаТО); 				  
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТаблицаВопросовЭП.Количество() = 0 Тогда
					Продолжить; // Нечего добавлять
				КонецЕсли;
				
				ТребуетсяДобавитьВопросов = МаксимальноеКоличествоЭлементов - ТаблицаДоступныхОбъектов.Количество();
				
				Если ТребуетсяДобавитьВопросов < ТаблицаВопросовЭП.Количество() Тогда
					КоличествоЭлементов = ТребуетсяДобавитьВопросов;
				Иначе
					КоличествоЭлементов = ТаблицаВопросовЭП.Количество();
				КонецЕсли;
				
				ИндексМассив = ЭлектронноеОбучениеСлужебный.ИндексМассив(0, ТаблицаВопросовЭП.Количество(), Истина);
				
				// Формируем выходную таблицу.
				
				Для Сч = 0 По КоличествоЭлементов-1 Цикл
					
					НоваяСтрока = ТаблицаДоступныхОбъектов.Добавить();
					НоваяСтрока.Ссылка        = ТаблицаВопросовЭП[ИндексМассив[Сч]].СсылкаНаЭлементКурса;
					НоваяСтрока.ВесВопроса    = ТаблицаВопросовЭП[ИндексМассив[Сч]].ВесВопроса;
					НоваяСтрока.ТипВопроса    = ТаблицаВопросовЭП[ИндексМассив[Сч]].ТипВопроса;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаДоступныхОбъектов;
	
КонецФункции

Функция СтраницыСУчетомРезультатов(Подборка, Пользователь, ГруппыПодборки, МаксимальноеКоличествоЭлементов)

	// Для каждой группы подборки находим соответствующие ей вопросы
	
	ГруппыПодборки.Колонки.Добавить("ВопросыГруппы");
	
	ЕстьКолонкаЭтоГруппа = ?(ГруппыПодборки.Колонки.Найти("ЭтоГруппа") = Неопределено, Ложь, Истина); 
		
	Для каждого СтрокаТП Из ГруппыПодборки Цикл
	
		Если ЕстьКолонкаЭтоГруппа И СтрокаТП.ЭтоГруппа Тогда
			
			ТаблицаВопросовГруппы = ВсеЭлементы(Подборка, СтрокаТП.Ссылка, Тип("СправочникСсылка.ТестовыеВопросы"));
			
			СтрокаТП.ВопросыГруппы = ТаблицаВопросовГруппы.ВыгрузитьКолонку("СсылкаНаЭлементКурса");
			
		Иначе
			
			ВопросыГруппы = Новый Массив();
			
			Если ТипЗнч(СтрокаТП.СсылкаНаЭлементКурса) = Тип("СправочникСсылка.ТестовыеВопросы") Тогда
				ВопросыГруппы.Добавить(СтрокаТП.СсылкаНаЭлементКурса);
			КонецЕсли;
			
			СтрокаТП.ВопросыГруппы = ВопросыГруппы;
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	// Получаем массив всех вопросов из всех групп подборок
	
	МассивВопросов = Новый Массив();
	
	Для каждого СтрокаТП Из ГруппыПодборки Цикл
		
		  Для каждого Вопрос Из СтрокаТП.ВопросыГруппы Цикл
		  
			  Если МассивВопросов.Найти(Вопрос) = Неопределено Тогда
				  МассивВопросов.Добавить(Вопрос);
			  КонецЕсли;
		  
		  КонецЦикла;
		
	КонецЦикла;
	
	// Получаем результаты ответов на все вопросы и формируем массив
	// Вопросов, которые можно включить в тест с учетом прошлых результатов, т.е.
	// На которые пользователь еще не отвечал, или отвечал неверно.
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ответы.Вопрос,
		|	Ответы.Результат
		|ИЗ
		|	РегистрСведений.ОтветыНаТестовыеВопросы КАК Ответы
		|ГДЕ
		|	Ответы.Вопрос В(&МассивВопросов)
		|	И Ответы.Пользователь = &Пользователь";
		
	
	Запрос.УстановитьПараметр("МассивВопросов", МассивВопросов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	МассивПодходящихВопросов = Новый Массив();
	
	Для каждого Вопрос Из МассивВопросов Цикл
	
		ВыборкаДетальныеЗаписи.Сбросить();
		
		Если НЕ ВыборкаДетальныеЗаписи.НайтиСледующий(Новый Структура("Результат, Вопрос", 100, Вопрос)) Тогда
			МассивПодходящихВопросов.Добавить(Вопрос); // Подходит, так как либо его нет в выборке, либо результат <> 100.
		КонецЕсли;
		
	КонецЦикла;
	
	// Формируем специальную таблицу групп подборок, в которые помещаем только подходящие группы
	// т.е. те, в которых есть хоть один подходящий вопрос.
	
	ГруппыПодборкиСУчетомРезультатов = Новый ТаблицаЗначений();
	
	Для каждого Колонка Из ГруппыПодборки.Колонки Цикл
		ГруппыПодборкиСУчетомРезультатов.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для каждого СтрокаТП Из ГруппыПодборки Цикл
		
		ГруппуМожноВключитьВТест = Ложь;	
		
		Для каждого Вопрос Из СтрокаТП.ВопросыГруппы Цикл
			
			Если МассивПодходящихВопросов.Найти(Вопрос) <> Неопределено Тогда 
				// Можно включить в тест, так как в группе есть подходящий вопрос.
				ГруппуМожноВключитьВТест = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ГруппуМожноВключитьВТест Тогда
			
			НоваяСтрокаСУР = ГруппыПодборкиСУчетомРезультатов.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСУР, СтрокаТП); 				  
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если не хватает еще групп подборки
	
	Если ГруппыПодборкиСУчетомРезультатов.Количество() < МаксимальноеКоличествоЭлементов Тогда 
		
		МассивОставшихсяСтрок = Новый Массив(); // Массив, где хранятся ссылки на строки таблицы ГруппыПодборки,
												// Которые еще не попали в выборку.
												
		Для каждого Строка Из ГруппыПодборки Цикл
			
			Если ЕстьКолонкаЭтоГруппа Тогда // Простой тест
				
				Если ГруппыПодборкиСУчетомРезультатов.Найти(Строка.Ссылка, "Ссылка") = Неопределено Тогда
					МассивОставшихсяСтрок.Добавить(Строка);
				КонецЕсли;
				
			Иначе // Выбор из рубрикатора
				
				Если ГруппыПодборкиСУчетомРезультатов.Найти(Строка.СсылкаНаЭлементКурса, "СсылкаНаЭлементКурса") = Неопределено Тогда
					МассивОставшихсяСтрок.Добавить(Строка);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
		МассивОставшихсяСтрок = ЭлектронноеОбучениеСлужебный.ПеремешатьМассив(МассивОставшихсяСтрок);
		
		Если МассивОставшихсяСтрок.Количество() > 0 Тогда
			
			Счетчик = 0;
			
			Пока ГруппыПодборкиСУчетомРезультатов.Количество() < МаксимальноеКоличествоЭлементов И Счетчик < МассивОставшихсяСтрок.Количество() - 1  Цикл
				
				НоваяСтрока = ГруппыПодборкиСУчетомРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивОставшихсяСтрок[Счетчик]);
				
				Счетчик = Счетчик + 1;
			  
			КонецЦикла;
						
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ГруппыПодборкиСУчетомРезультатов;
	
КонецФункции

Функция ВопросыРубрик(ТаблицаРубрик)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаРубрик);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлементПодборки,
	|   ЭлементРубрикатора
	|ПОМЕСТИТЬ ДоступныеРубрики
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	
	Запрос.Выполнить();
		
	// 3. Получаем все объекты СУЗ из доступных рубрик.
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТемыОбъектовЭлектронныхКурсов.СсылкаНаЭлементКурса КАК СсылкаНаЭлементКурса,
	               |	ТемыОбъектовЭлектронныхКурсов.ЭлементРубрикатора КАК ЭлементРубрикатора,
	               |	ДоступныеРубрики.ЭлементПодборки КАК ЭлементПодборки,
	               |	ТемыОбъектовЭлектронныхКурсов.ВесВопроса,
				   |	ВЫРАЗИТЬ(ТемыОбъектовЭлектронныхКурсов.СсылкаНаЭлементКурса КАК Справочник.ТестовыеВопросы).ТипВопроса КАК ТипВопроса
	               |ИЗ
	               |	РегистрСведений.ТемыОбъектовЭлектронныхКурсов КАК ТемыОбъектовЭлектронныхКурсов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеРубрики КАК ДоступныеРубрики
	               |		ПО ТемыОбъектовЭлектронныхКурсов.ЭлементРубрикатора = ДоступныеРубрики.ЭлементРубрикатора
	               |ГДЕ
	               |	ТемыОбъектовЭлектронныхКурсов.СсылкаНаЭлементКурса.ПометкаУдаления = ЛОЖЬ
	               |	И ТИПЗНАЧЕНИЯ(ТемыОбъектовЭлектронныхКурсов.СсылкаНаЭлементКурса) = &ТипОбъекта";
	
		
	Запрос.УстановитьПараметр("ТипОбъекта", Тип("СправочникСсылка.ТестовыеВопросы"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли

