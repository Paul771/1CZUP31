#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		
		БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
		ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
		ИспользоватьРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
		Если Не БазоваяВерсияКонфигурации Тогда
			КорпоративнаяВерсияКонфигурации = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
		КонецЕсли;
		
		СозданиеНовой = Истина;
		ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку();
		УстановитьПараметрыИНН(ЭтаФорма);
		
		УстановитьОтображениеГруппыРКИСН(ЭтаФорма);
		УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтаФорма);
		УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтаФорма);
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", ОрганизацияСсылка);
		
		НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
			Модуль.ОбъектНазначенияПодготовитьФорму(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьВидимостьИндивидуальногоПредпринимателя(ЭтаФорма);
	УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(ЭтаФорма);
	
	УправлениеКонтактнойИнформациейЗарплатаКадры.ПриСозданииНаСервере(
		ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	
	УстановитьВидимостьРегистрацииВНалоговомОргане();
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтаФорма);
	
	ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля 		= ЦветаСтиля.ЦветТекстаПоля;
	ЦветСтиляПоясняющийТекст		= ЦветаСтиля.ПоясняющийТекст;
	
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРН, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	
	Параметры.Свойство("ОткрытаВОкнеКлиентскогоПриложения", ОткрытаВОкнеКлиентскогоПриложения);
	
	УправлениеКонтактнойИнформациейЗарплатаКадры.ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ИННПрежнееЗначение = Объект.ИНН;
	Если Объект.ОбособленноеПодразделение Тогда
		ГоловнаяОрганизацияПрежняя = Объект.ГоловнаяОрганизация;
	Иначе
		ГоловнаяОрганизацияПрежняя = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
		
	Если БазоваяВерсияКонфигурации Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаФилиал",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЕстьОбособленныеПодразделения",
			"Заголовок",
			НСтр("ru = 'У организации есть обособленные подразделения'"));	
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОсновныеСведения",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная"));
	
	Элементы.НадписьСформироватьЗаявлениеНаПодключениеКЭлектронномуДокументообороту.Заголовок =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(ЭтаФорма, Объект.Ссылка, Отказ, СтандартнаяОбработка);
		
	УстановитьПодсказкиВвода();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервОтпусковРасширенный");
		Модуль.ДополнитьФормуЭлементаСправочникаОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		Модуль.ДополнитьФормуЭлементаСправочникаОрганизации(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОткрытаВОкнеКлиентскогоПриложения Тогда
		
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.Заголовок = НСтр("ru = 'Записать'"); 
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Записать объект'");
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Видимость = Ложь;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
	КонецЕсли;
	
	УстановитьПредставленияНастроекОбмена(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	
	Если ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Если Объект.РегистрацияВНалоговомОргане <> Параметр.Ссылка Тогда
			Объект.РегистрацияВНалоговомОргане = Параметр.Ссылка;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И ОрганизацияСсылка = Источник И Параметр.ИмяРегистра = "УчетнаяПолитикаОрганизаций" Тогда	
		
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					ОрганизацияСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
		
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаОрганизацийПериодСтрокой");
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	БазоваяВерсияКонфигурации = ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации();
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ИспользоватьРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Если Не БазоваяВерсияКонфигурации Тогда
		КорпоративнаяВерсияКонфигурации = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПриЧтенииНаСервере(ЭтаФорма);
	ПрочитатьДанныеУчетнойПолитики();
	
	УстановитьПараметрыИНН(ЭтаФорма);
	
	УстановитьОтображениеГруппыРКИСН(ЭтаФорма);
	УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтаФорма);
	УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтаФорма);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтаФорма);
	
	ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриЧтенииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	ЗаписьНовогоОбъекта = Ложь;
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ОрганизацияСсылка);
		ЗаписьНовогоОбъекта = Истина;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Обработчик подсистемы "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если ТекущийОбъект.РегистрацияВНалоговомОргане.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЗаписьНовогоОбъекта Тогда
			СуществующаяЗапись = Неопределено;
		Иначе
			СуществующаяЗапись = РегламентированнаяОтчетность.ПолучитьПоКодамРегистрациюВИФНС(ТекущийОбъект.Ссылка, "");
		КонецЕсли;
		
		Если СуществующаяЗапись = Неопределено Тогда
			
			РегистрацияНайдена = Ложь;
			Если ТекущийОбъект.ОбособленноеПодразделение Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.ГоловнаяОрганизация);
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
					|ГДЕ
					|	РегистрацииВНалоговомОргане.КПП = """"
					|	И РегистрацииВНалоговомОргане.Владелец = &Владелец";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					РегистрацияНайдена = Истина;
					ТекущийОбъект.РегистрацияВНалоговомОргане = Выборка.Ссылка;
					РегистрацияВНалоговомОрганеСсылка = ТекущийОбъект.РегистрацияВНалоговомОргане;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не РегистрацияНайдена Тогда
				ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
				РегистрацияВНалоговомОрганеСсылка = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			
			ТекущийОбъект.РегистрацияВНалоговомОргане = СуществующаяЗапись;
			РегистрацияВНалоговомОрганеСсылка = СуществующаяЗапись;
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		РегистрацияВНалоговомОрганеСсылка = ТекущийОбъект.РегистрацияВНалоговомОргане;
		
	КонецЕсли;
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПередЗаписьюНаСервере(ЭтаФорма);
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", ОрганизацияСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияВНалоговомОрганеСсылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрацияВНалоговомОрганеОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РегистрацияВНалоговомОрганеОбъект.УстановитьСсылкуНового(ТекущийОбъект.РегистрацияВНалоговомОргане);
		
		Если ТекущийОбъект.Ссылка = ТекущийОбъект.ГоловнаяОрганизация Тогда
			РегистрацияВНалоговомОрганеОбъект.Владелец	= ТекущийОбъект.Ссылка;
		Иначе
			РегистрацияВНалоговомОрганеОбъект.Владелец	= ТекущийОбъект.ГоловнаяОрганизация;
		КонецЕсли;
		
		РегистрацияВНалоговомОрганеОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если Не Объект.РегистрацияВНалоговомОргане.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрацияВНалоговомОрганеОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Если РегистрацияВНалоговомОрганеОбъект <> Неопределено Тогда
			РегистрацияВНалоговомОрганеОбъект.Записать();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(ТекущийОбъект, Отказ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект.Ссылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма);
	
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеФормы");
		Модуль.ОбъектНазначенияПриПолученииДанных(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданиеНовой И НЕ Параметры.Ключ.Пустая() Тогда
		Оповестить("СозданаОрганизация", Объект.Ссылка, );
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Объект.Ссылка, ЭтаФорма);
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗарплатаКадры.ОрганизацииФормаЭлементаОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)
	
	УстановитьВидимостьИндивидуальногоПредпринимателя(ЭтаФорма);
	УстановитьПараметрыИНН(ЭтаФорма);
	
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРН, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Объект.ЕстьОбособленныеПодразделения = Ложь;
	КонецЕсли; 
	
	УстановитьОтображениеГруппыРКИСН(ЭтаФорма);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.ЗаполнитьНаименованияПоСокращенному(
		Объект.ЮридическоеФизическоеЛицо,
		Объект.НаименованиеСокращенное,
		Объект.Наименование,
		Объект.НаименованиеПолное,
		НаименованиеСокращенное,
		ФИОИндивидуальногоПредпринимателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьОбособленныеПодразделенияПриИзменении(Элемент)
	
	УстановитьОтображениеГруппыРКИСН(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	Если Объект.ОбособленноеПодразделение Тогда
		ИННПрежнееЗначение = Объект.ИНН;
		Объект.ГоловнаяОрганизация = ГоловнаяОрганизацияПрежняя;
		ДанныеГоловнойОрганизации = ДанныеГоловнойОрганизации(ГоловнаяОрганизацияПрежняя);
		Объект.ИНН = ДанныеГоловнойОрганизации.ИНН;
	Иначе
		Объект.ИНН = ИННПрежнееЗначение;
		ГоловнаяОрганизацияПрежняя = Объект.ГоловнаяОрганизация;
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(ЭтаФорма);
	УстановитьОтображениеГруппыРКИСН(ЭтаФорма);
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтаФорма);
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтаФорма);
	УстановитьПараметрыВыбораТерриториальныхУсловий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьСевернуюНадбавкуПриИзменении(Элемент)
	
	Если НЕ Объект.ПрименятьСевернуюНадбавку Тогда
		ПрименятьСевернуюНадбавкуПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПриИзменении(Элемент)
	
	Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	Объект.КодОрганаПФР	= Лев(СокрЛ(Объект.РегистрационныйНомерПФР), 7);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(ЭтаФорма, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерриториальныеУсловияПФРПриИзменении(Элемент)
	
	ПриИзмененииТерриториальныхУсловий(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеЗавершениеВыбора", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования, 
		НСтр("ru = 'Полное наименование'"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект.НаименованиеПолное = РезультатВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьРайонныйКоэффициентПриИзменении(Элемент)
	
	Если НЕ Объект.ПрименятьРайонныйКоэффициент Тогда
		Объект.ПрименятьСевернуюНадбавку = Ложь;
		Объект.РайонныйКоэффициент = 1;
		Объект.РайонныйКоэффициентРФ = 1;
		УстановитьОтображениеЭлементовЗависящихОтПримененияСН(ЭтаФорма);
	КонецЕсли; 
	
	УстановитьОтображениеЭлементовЗависящихОтПримененияРК(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФПриИзменении(Элемент)
	
	ПриИзмененииРайонногоКоэффициента();
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентПриИзменении(Элемент)
	
	ПриИзмененииРайонногоКоэффициента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиДокументооборота", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОбменаФСС", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(
		ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаОрганизацийПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
		ЭтаФорма,
		ЭтаФорма,
		"УчетнаяПолитикаОрганизаций.Период",
		"УчетнаяПолитикаОрганизацийПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(
		ЭтаФорма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаОрганизацийПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодРегулирование(ЭтаФорма, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

//ПРОЦЕДУРЫ ПОДСИСТЕМЫ "СВОЙСТВ"
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	ИННПрежнееЗначение = Объект.ИНН;
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРН, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОГРНИППриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОГРН(Элементы.ОГРНИП, Объект.ОГРН, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКодПоОКПОПриИзменении(Элемент)
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляОКПО(Элементы.ОрганизацияКодПоОКПО, Объект.КодПоОКПО, Объект.ЮридическоеФизическоеЛицо, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	ИндивидуальныйПредпринимательПриИзмененииНаСервере(Объект.ИНН, Объект.ИндивидуальныйПредприниматель, ФИОИндивидуальногоПредпринимателя);
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ГоловнаяОрганизацияПриИзмененииНаСервере();
	ОбработатьОтображениеПоляИНН(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент)
	
	Если НЕ Объект.КрупнейшийНалогоплательщик Тогда
		Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
	УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицФормы

#Область ОбработчикиСобытийТаблицыФормыМероприятия

&НаКлиенте
Процедура Подключаемый_МероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияВыбор(ЭтотОбъект, Элемент, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПередУдалением(Элемент, Отказ)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПередУдалением(ЭтотОбъект, Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияПриОкончанииРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияМероприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияМероприятиеНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МероприятияМероприятиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("АдаптацияУвольнениеКлиент");
		Модуль.МероприятияМероприятиеОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуМастераЗаявленияНаПодключение", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСпискаЗаявленийНаПодключение", ЭтотОбъект);
	ЗаписатьПриНаличииИзменений(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВОрганеПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, ЭтаФорма, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрациюВНалоговомОргане(Команда)
	
	ДополнительныеПараметры = Новый Структура("ЗаписатьОрганизацию", Истина);
	
	// Если данные организации еще не записаны, предложим записать.
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьРегистрациюВНалоговомОрганеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьОрганизацию = Ложь;
		ИзменитьРегистрациюВНалоговомОрганеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТерриториальныеУсловияПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("ТерриториальныеУсловияПФР", ОрганизацияСсылка, ЭтаФорма, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ВоинскийУчет(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияВоинскийУчет");

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛица(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияОтветственныеЛица");
	
КонецПроцедуры

&НаКлиенте
Процедура БухучетИВыплатаЗарплаты(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты");
		
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитика(Команда)
	
	ОткрытьФормуНастроек("ОбщаяФорма.ОрганизацияУчетнаяПолитика");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ЗаписатьНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикЕНВДИстория(Команда)
	
	ТолькоПросмотрИстории = ТолькоПросмотр ИЛИ Объект.ОбособленноеПодразделение;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("УчетнаяПолитикаОрганизаций", ?(Объект.ОбособленноеПодразделение, Объект.ГоловнаяОрганизация, ОрганизацияСсылка), ЭтаФорма, ТолькоПросмотрИстории);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкиРасчетаРезервовОтпусков(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РезервОтпусковКлиентРасширенный");
		ОткрытьФормуНастроек(Модуль.ИмяФормыНастройкиРасчетаРезервовОтпусков());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкиМедицинскогоСтрахования(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("МедицинскоеСтрахованиеКлиент");
		ОткрытьФормуНастроек(Модуль.ИмяФормыНастройкиМедицинскогоСтрахования());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОрганизации(Команда)
	
	ДополнительныеПараметры = Новый Структура("ЗаписатьОрганизацию", Истина);

	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("НастройкиОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьОрганизацию = Ложь;
		НастройкиОрганизацииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	РезультатОбновления = УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	УправлениеКонтактнойИнформациейЗарплатаКадры.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Результат);
	
	Возврат РезультатОбновления;
	
КонецФункции
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ИзменитьРегистрациюВНалоговомОрганеЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьОрганизацию Тогда 
		// Если получено разрешение на запись данных организации, запишем.
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	
	ДанныеГоловнойОрганизации = ДанныеГоловнойОрганизации(Объект.ГоловнаяОрганизация);
	Объект.ИНН = ДанныеГоловнойОрганизации.ИНН;
	
	УстановитьПредставлениеРегистрацииВНалоговомОргане(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГоловнойОрганизации(ГоловнаяОрганизация)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГоловнаяОрганизация, "ИНН");
	
КонецФункции

&НаСервере
Процедура УстановитьПодсказкиВвода()

	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Ромашка ООО'");      
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'ООО ""Ромашка""'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'Общество с ограниченной ответственностью ""Ромашка""'");	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеУчетнойПолитики()

	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
		
		УчетнаяПолитикаОрганизаций.Период = Дата(2010,1,1);
		
		УчетнаяПолитикаОрганизацийПрежняя = Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(УчетнаяПолитикаОрганизаций, Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций));
		
	КонецЕсли;
	ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "УчетнаяПолитикаОрганизаций", Форма.Объект.Ссылка);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "УчетнаяПолитикаОрганизаций.Период", "УчетнаяПолитикаОрганизацийПериодСтрокой");
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИндивидуальногоПредпринимателя(Форма)
	
	ЭтоЮридическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
	Если ЭтоЮридическоеЛицо Тогда
		
		Форма.Элементы.ГруппаИндивидуальныйПредприниматель.ТекущаяСтраница	= Форма.Элементы.ГруппаИндивидуальныйПредпринимательНевидимая;
		Форма.Элементы.ГруппаОГРН.ТекущаяСтраница							= Форма.Элементы.ГруппаОГРНЮридическоеЛицо;
		Форма.Элементы.ГруппаФилиал.ТекущаяСтраница 						= Форма.Элементы.ГруппаДоступенФилиал;
		
	Иначе
		
		Форма.Элементы.ГруппаИндивидуальныйПредприниматель.ТекущаяСтраница	= Форма.Элементы.ГруппаИндивидуальныйПредпринимательВидимая;
		Форма.Элементы.ГруппаОГРН.ТекущаяСтраница							= Форма.Элементы.ГруппаОГРНФизическоеЛицо;
		Форма.Элементы.ГруппаФилиал.ТекущаяСтраница 						= Форма.Элементы.ГруппаНеДоступенФилиал;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭУПриИзмененииОбособленноеПодразделение(Форма)
	
	Если Форма.Объект.ОбособленноеПодразделение Тогда
		Форма.Элементы.ГруппаГоловнаяОрганизация.ТекущаяСтраница = Форма.Элементы.ГруппаГоловнаяОрганизацияВидимая;
	Иначе
		Форма.Элементы.ГруппаГоловнаяОрганизация.ТекущаяСтраница = Форма.Элементы.ГруппаГоловнаяОрганизацияНевидимая;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИНН",
		"ТолькоПросмотр",
		Форма.Объект.ОбособленноеПодразделение);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"УчетнаяПолитикаОрганизацийПлательщикЕНВД",
		"Доступность",
		Не Форма.Объект.ОбособленноеПодразделение);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"УчетнаяПолитикаОрганизацийПериодСтрокой",
		"Доступность",
		Не Форма.Объект.ОбособленноеПодразделение);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРегистрацииВНалоговомОргане()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	РегистрацияВНалоговомОрганеДоступна = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРегистрацияВНалоговомОргане",
		"Видимость",
		ИспользоватьРасчетЗарплатыРасширенная И РегистрацияВНалоговомОрганеДоступна);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИзменитьРегистрациюВНалоговомОргане",
		"Видимость",
		ИспользоватьРасчетЗарплатыРасширенная И РегистрацияВНалоговомОрганеДоступна);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеРегистрацииВНалоговомОргане(Форма)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, "ГруппаРегистрацияВНалоговомОргане", "Видимость") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПредставлениеРегистрацииВНалоговомОргане =
		ЗарплатаКадрыКлиентСервер.ПредставлениеРегистрацииВНалоговомОргане(Форма.Объект.Ссылка, Форма.Объект.РегистрацияВНалоговомОргане);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеКодаНалоговогоОрганаКрупнейшегоНалогоплательщика(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ОбособленноеПодразделение
		Или Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		
		ВидимостьГруппыКрупнейшийНалогоплательщик = Ложь;
		
	Иначе
		ВидимостьГруппыКрупнейшийНалогоплательщик = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КрупнейшийНалогоплательщикГруппа",
		"Видимость",
		ВидимостьГруппыКрупнейшийНалогоплательщик
	);
	
	Если ВидимостьГруппыКрупнейшийНалогоплательщик Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КодНалоговогоОрганаПолучателя",
			"Доступность",
			Объект.КрупнейшийНалогоплательщик
		);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиДокументооборота(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		
		ЗначенияЗаполнения	= Новый Структура(
			"Организация, ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена",
			Объект.Ссылка, Объект.ВидОбменаСКонтролирующимиОрганами, Объект.УчетнаяЗаписьОбмена);
		ОткрытьФорму("ОбщаяФорма.ОрганизацияНастройкаДокументооборота", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОбменаФСС(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		
		ПараметрыФормы = Новый Структура("ОрганизацияСсылка", Объект.Ссылка);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОбменаФССЗавершение", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", ПараметрыФормы, , , , , 
			Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОбменаФССЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	НастройкиОбменаФССПредставление = ПолучитьНастройкиОбменаФСС(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМастераЗаявленияНаПодключение(Результат, ДополнительныеПараметры) Экспорт

	Если ОрганизацияЗаписанаУспешно() Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаЗаявленийНаПодключение(Результат, ДополнительныеПараметры) Экспорт

	Если ОрганизацияЗаписанаУспешно() Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(ИмяФормы)
	
	ДополнительныеПараметры = Новый Структура("ИмяФормы", ИмяФормы);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Если данные организации еще не записаны, предложим записать.
	ЗаписатьПриНаличииИзменений(Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ОрганизацияЗаписанаУспешно() Тогда 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", Объект.Наименование);
		ПараметрыОткрытия.Вставить("ОрганизацияСсылка", Объект.Ссылка);
			
		ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ОрганизацияЗаписанаУспешно()

	Возврат Не (Модифицированность Или ЭтаФорма.Параметры.Свойство("Ключ") И ЭтаФорма.Параметры.Ключ.Пустая());
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьПриНаличииИзменений(ОбработкаОповещения)
	
	Если ОрганизацияЗаписанаУспешно() Тогда
		ВыполнитьОбработкуОповещения(ОбработкаОповещения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ОбработкаОповещения", ОбработкаОповещения);
	
	ТекстВопроса = НСтр("ru = 'Организация еще не записана.
		|Записать и продолжить?'");
		
	Оповещение = Новый ОписаниеОповещения("ЗаписатьПриНаличииИзмененийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПриНаличииИзмененийЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Если получено разрешение на запись данных организации, запишем.
	Записать(); 
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОбработкаОповещения") Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИндивидуальныйПредпринимательПриИзмененииНаСервере(ИНН, ИндивидуальныйПредприниматель, ФИОИндивидуальногоПредпринимателя)
	
	Если НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ИНН = "";
		ФИОИндивидуальногоПредпринимателя = "";
		Возврат;
	КонецЕсли;
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель, "ИНН");
	
	ФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель, "ФИО");
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыИНН(Форма)
	
	Если Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Маска = "999999999999";
	Иначе
		Маска = "9999999999";
		Если СтрДлина(Форма.Объект.ИНН) > 10 Тогда
			Форма.Объект.ИНН = Лев(Форма.Объект.ИНН, 10);
		КонецЕсли; 
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИНН",
		"Маска",
		Маска);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеГруппыРКИСН(Форма)
	
	Если НЕ Форма.Объект.ЕстьОбособленныеПодразделения Тогда
				
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКНетФилиалов;    
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СННетФилиалов;
		Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияПустая;
		
	ИначеЕсли Форма.Объект.ОбособленноеПодразделение Тогда
		
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКФилиал;
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СНФилиал;
		Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияФилиал;
		
	Иначе
		
		Форма.Элементы.СтраницыРК.ТекущаяСтраница = Форма.Элементы.РКГоловнаяОрганизация;
		Форма.Элементы.СтраницыСН.ТекущаяСтраница = Форма.Элементы.СНГоловнаяОрганизация;
		Если Форма.БазоваяВерсияКонфигурации Тогда
			Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияФилиал;
		Иначе
			Форма.Элементы.ГруппаРКиСНИнформация.ТекущаяСтраница = Форма.Элементы.СтраницаРКСНИнформацияГО;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовЗависящихОтПримененияРК(Форма)
	
	ПрименятьРайонныйКоэффициент = Форма.Объект.ПрименятьРайонныйКоэффициент;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавкуГО",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавкуФилиал",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрименятьСевернуюНадбавку",
		"Доступность",
		ПрименятьРайонныйКоэффициент);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РайонныйКоэффициент",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РайонныйКоэффициентРФ",
		"Доступность",
		ПрименятьРайонныйКоэффициент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеЭлементовЗависящихОтПримененияСН(Форма)
	
	ПрименятьСевернуюНадбавку = Форма.Объект.ПрименятьСевернуюНадбавку;
	
	Если ПрименятьСевернуюНадбавку И Форма.ИспользоватьШтатноеРасписание Тогда
		Форма.Элементы.ГруппаПроцентСНОценкаФОТ.ТекущаяСтраница = Форма.Элементы.ГруппаПроцентСН;
	Иначе
		Форма.Элементы.ГруппаПроцентСНОценкаФОТ.ТекущаяСтраница = Форма.Элементы.ГруппаПроцентСНПустая;
	КонецЕсли;
	
	УстановитьПараметрыВыбораТерриториальныхУсловий(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ДокументооборотСГосОрганамиПриПолученииДанныхНаСервере()
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.Доступность = НЕ ТолькоПросмотр;
	НастройкиОбменаФССПредставление = ПолучитьНастройкиОбменаФСС(Объект.Ссылка);

	Элементы.НастройкиОбменаФССПредставление.Доступность = НЕ ТолькоПросмотр;
	
	УстановитьПредставленияНастроекОбмена(ЭтаФорма);
	
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.ПропускатьПриВводе	= ЗначениеЗаполнено(Объект.ВидОбменаСКонтролирующимиОрганами);	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставленияНастроекОбмена(Форма)
	Организация = Форма.Объект;
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Обмен в универсальном формате'");
	ИначеЕсли Организация.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер") Тогда
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Обмен посредством ПК ""Спринтер""'");
	Иначе
		Форма.ВидОбменаСКонтролирующимиОрганамиПредставление	= НСтр("ru='Не используется'");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораТерриториальныхУсловий(Форма)
	
	Организация = Форма.Объект;
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьТерриторииСОсобымиКлиматическимиУсловиями", Организация.ПрименятьСевернуюНадбавку));
	Если Форма.КорпоративнаяВерсияКонфигурации И Организация.ОбособленноеПодразделение Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВыбиратьЗаграничныеТерритории", Истина));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТерриториальныеУсловияПФР",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиОбменаФСС(Организация)
	
	ПредставлениеНастроек = НСтр("ru='Не используется'");
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = РегистрыСведений.НастройкиОбменаФСС.Выбрать(Новый Структура("Организация", Организация));
	Если Выборка.Следующий() Тогда
		Если Выборка.ИспользоватьОбмен Тогда
			ПредставлениеНастроек = НСтр("ru='Включен'");
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	 
	Возврат ПредставлениеНастроек;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТерриториальныхУсловий(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ТерриториальныеУсловияПФР", Форма.ОрганизацияСсылка);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьПроцентЗаОсобыеКлиматическиеУсловия(
		Форма, Форма.Объект.ПроцентСевернойНадбавки, Форма.ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР);
		
КонецПроцедуры

&НаСервере
Процедура ПрименятьСевернуюНадбавкуПриИзмененииНаСервере()

	ТерриторииСОсобымиКлиматическимиУсловиями = Справочники.ТерриториальныеУсловияПФР.СписокТерриторийСОсобымиКлиматическимиУсловиями();
	Если ТерриторииСОсобымиКлиматическимиУсловиями.НайтиПоЗначению(ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР) <> Неопределено Тогда
		ТерриториальныеУсловияПФР.ТерриториальныеУсловияПФР = Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
		ПриИзмененииТерриториальныхУсловий(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьОтображениеПоляИНН(Форма)
	
	ОрганизацииКлиентСервер.ОбработатьОтображениеПоляИНН(Форма.Элементы.ИНН, Форма.Объект.ИНН, Форма.Объект.ЮридическоеФизическоеЛицо, Форма, Форма.Объект.ОбособленноеПодразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОрганизацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьОрганизацию Тогда 
		// Если получено разрешение на запись данных организации, запишем.
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Объект.Ссылка); 
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючВарианта", "НастройкиОрганизации");
	
	ОткрытьФорму("Отчет.НастройкиПрограммыЗарплатаКадры.Форма", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРайонногоКоэффициента()
	
	Если Объект.РайонныйКоэффициент < Объект.РайонныйКоэффициентРФ Тогда
		Объект.РайонныйКоэффициент = Объект.РайонныйКоэффициентРФ;
	КонецЕсли;
	
КонецПроцедуры

#Область АдаптацияУвольнение

&НаСервере
Функция ЗаголовкиГруппСтраницыАдаптацияУвольнение() Экспорт
	
	ЗаголовкиГрупп = Новый Структура();
	ЗаголовкиГрупп.Вставить("МероприятияАдаптацииГруппа", НСтр("ru = 'При приеме или переводе в организацию назначается задание'"));
	ЗаголовкиГрупп.Вставить("МероприятияУвольненияГруппа", НСтр("ru = 'При увольнении или переводе из организации назначается задание'"));
	
	Возврат ЗаголовкиГрупп;
	
КонецФункции

#КонецОбласти

#Область ЗаписьЭлемента

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ОповещениеЗавершения = Неопределено) Экспорт 
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаписьЭлементаСправочникаОрганизации");
	
	ПараметрыЗаписи = Новый Структура;
	ЗарплатаКадрыКлиент.ФормаОрганизацииПередЗаписью(Объект, ЭтаФорма, Ложь, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
