
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ВидИнструктажаСсылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
		ПриПолученииДанныхНаСервере(Объект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВидИнструктажаСсылка = Объект.Ссылка;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитВДанные(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДанныеВРеквизит(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РазвернутьДеревоЗначений();
	Оповестить("ЗаписанВидИнструктажа", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроводитсяОднократноПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов(ЭтотОбъект, СтруктураПараметровВидимостиЭлементов());
	
	СпособПроведенияИнструктажаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводитсяДляВсехРабочихМестПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	Если ПроводитсяДляВсехРабочихМест = 0 Тогда
		РабочиеМеста.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	УстановитьВидимостьЭлементов(ЭтотОбъект, СтруктураПараметровВидимостиЭлементов());
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьПроведениеИнструктажаПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	Если Не Объект.КонтролироватьПроведениеИнструктажа Тогда
		СпособПроведенияИнструктажа = 0;
		СпособПроведенияИнструктажаПриИзменении();
		ПроводитсяДляВсехРабочихМест = 0;
		РабочиеМеста.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	УстановитьВидимостьЭлементов(ЭтотОбъект, СтруктураПараметровВидимостиЭлементов());
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПроведенияИнструктажаПриИзменении(Элемент)
	УстановитьВидимостьЭлементов(ЭтотОбъект, СтруктураПараметровВидимостиЭлементов());
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочиеМеста

&НаКлиенте
Процедура РабочиеМестаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РабочиеМестаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаПослеУдаления(Элемент)
	РабочиеМестаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РабочиеМестаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОбработатьВыбранныеРабочиеМеста(ВыбранноеЗначение) Тогда
		РазвернутьДеревоЗначений();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("АдресСпискаПодобранных", АдресСпискаПодобранныхРабочихМест());
	
	ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаВыбора", ПараметрыФормы, Элементы.РабочиеМеста);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СпособПроведенияИнструктажаПриИзменении()
	
	Если СпособПроведенияИнструктажа = 0 Тогда
		ПериодПроведенияИнструктажа = "";
	ИначеЕсли СпособПроведенияИнструктажа = 1 И ПустаяСтрока(ПериодПроведенияИнструктажа) Тогда
		ПериодПроведенияИнструктажа =
		Элементы.ПериодПроведенияИнструктажа.СписокВыбора[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементов(Форма, СтруктураПараметров)
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСпособПроведения", "Доступность",
		СтруктураПараметров.КонтролироватьПроведениеИнструктажа);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроводитсяДляВсехРабочихМест", "Доступность",
		СтруктураПараметров.КонтролироватьПроведениеИнструктажа);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РабочиеМеста", "Доступность",
		СтруктураПараметров.КонтролироватьПроведениеИнструктажа И СтруктураПараметров.ПроводитсяДляВсехРабочихМест = 1);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСрокДействия", "Доступность",
		СтруктураПараметров.КонтролироватьПроведениеИнструктажа И СтруктураПараметров.СпособПроведенияИнструктажа = 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСрокДействияПроизвольно", "Видимость",
		СтруктураПараметров.КонтролироватьПроведениеИнструктажа
		И СтруктураПараметров.ПериодПроведенияИнструктажа = ОхранаТрудаКлиентСервер.ПроизвольноеЗначениеСпискаВыбораПериодов(Форма));
		
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровВидимостиЭлементов()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КонтролироватьПроведениеИнструктажа", Объект.КонтролироватьПроведениеИнструктажа);
	СтруктураПараметров.Вставить("ПроводитсяДляВсехРабочихМест", ПроводитсяДляВсехРабочихМест);
	СтруктураПараметров.Вставить("СпособПроведенияИнструктажа", СпособПроведенияИнструктажа);
	СтруктураПараметров.Вставить("ПериодПроведенияИнструктажа", ПериодПроведенияИнструктажа);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ДополнитьФорму();
	
	ОхранаТрудаФормы.ЗаполнитьСписокВыбораПериода(ЭтотОбъект, "ПериодПроведенияИнструктажа",
		ОхранаТруда.СписокВыбораПериодаПроведенияИнструктажей(), ОхранаТруда.ПроизвольноеЗначениеСпискаВыбораПроведенияИнструктажей());
	
	ДанныеВРеквизит(ТекущийОбъект);
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	ОхранаТрудаФормы.ПериодичностьДополнитьФорму(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит(ТекущийОбъект)
	
	ПроводитсяДляВсехРабочихМест = ?(Объект.ИспользоватьДляВсехРабочихМест, 0, 1);
	СпособПроведенияИнструктажа = ?(Объект.ПроводитсяПовторно, 1, 0);
	
	Если Объект.ПроводитсяПовторно Тогда
		СтруктураПериода = Новый Структура("КоличествоРаз, КоличествоПериодов, Периодичность",
			Объект.КоличествоРаз, Объект.КоличествоПериодов, Объект.Периодичность);
		ПериодПроведенияИнструктажа = ОхранаТруда.ПредставлениеПериодаПоСтруктуре(СтруктураПериода);
		Если Элементы.ПериодПроведенияИнструктажа.СписокВыбора.НайтиПоЗначению(ПериодПроведенияИнструктажа) = Неопределено Тогда
			ПериодПроведенияИнструктажа = ОхранаТрудаКлиентСервер.ПроизвольноеЗначениеСпискаВыбораПериодов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДеревоРабочихМест(ТекущийОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КонтролироватьПроведениеИнструктажа", Объект.КонтролироватьПроведениеИнструктажа);
	СтруктураПараметров.Вставить("ПроводитсяДляВсехРабочихМест", ПроводитсяДляВсехРабочихМест);
	СтруктураПараметров.Вставить("СпособПроведенияИнструктажа", СпособПроведенияИнструктажа);
	СтруктураПараметров.Вставить("ПериодПроведенияИнструктажа", ПериодПроведенияИнструктажа);
	УстановитьВидимостьЭлементов(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	ТекущийОбъект.РабочиеМеста.Очистить();
	Для Каждого СтрокаДереваЗначений Из РабочиеМеста.ПолучитьЭлементы() Цикл
		ЗаполнитьРабочиеМестаПоДеревуЗначений(ТекущийОбъект, СтрокаДереваЗначений);
	КонецЦикла;
	
	ТекущийОбъект.ИспользоватьДляВсехРабочихМест = ПроводитсяДляВсехРабочихМест = 0;
	ТекущийОбъект.ПроводитсяПовторно = СпособПроведенияИнструктажа = 1;
	
	Если ТекущийОбъект.ПроводитсяПовторно Тогда
		СтруктураПериода = ОхранаТрудаКлиентСервер.СтруктураПериодаПоПредставлению(ЭтотОбъект, ПериодПроведенияИнструктажа);
		Если СтруктураПериода <> Неопределено Тогда
			ТекущийОбъект.КоличествоРаз = СтруктураПериода.КоличествоРаз;
			ТекущийОбъект.КоличествоПериодов = СтруктураПериода.КоличествоПериодов;
			ТекущийОбъект.Периодичность = СтруктураПериода.Периодичность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхРабочихМест()
	
	РеквизитВДанные(Объект);
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РабочиеМеста.Выгрузить(, "РабочееМесто").ВыгрузитьКолонку("РабочееМесто"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ОбработатьВыбранныеРабочиеМеста(ВыбранноеЗначение)
	
	РабочееМестоДобавлено = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ВыбранныеРабочиеМеста = ВыбранноеЗначение;
	Иначе
		ВыбранныеРабочиеМеста = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	КонецЕсли;
	
	Для каждого РабочееМесто Из ВыбранныеРабочиеМеста Цикл
		
		СтруктураПоиска = Новый Структура("РабочееМесто", РабочееМесто);
		Если Объект.РабочиеМеста.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.РабочиеМеста.Добавить();
			НоваяСтрока.РабочееМесто = РабочееМесто;
			
			РабочееМестоДобавлено = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РабочееМестоДобавлено Тогда
		ЗаполнитьДеревоРабочихМест(Объект);
	КонецЕсли;
	
	Возврат РабочееМестоДобавлено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРабочихМест(ТекущийОбъект)
	
	ТаблицаРабочихМест = ТекущийОбъект.РабочиеМеста.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(ТекущаяДатаСеанса(), , , ТаблицаРабочихМест.ВыгрузитьКолонку("РабочееМесто"));
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
		Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "Организация,Подразделение");
	
	Запрос.УстановитьПараметр("РабочиеМеста", ТаблицаРабочихМест);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто
	|ПОМЕСТИТЬ ВТРабочиеМеста
	|ИЗ
	|	&РабочиеМеста КАК РабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.РабочееМесто,
	|	ВЫБОР
	|		КОГДА ПозицииШтатногоРасписания.Организация ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПозицииШтатногоРасписания.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ПозицииШтатногоРасписания.Подразделение ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПозицииШтатногоРасписания.Подразделение
	|	КОНЕЦ КАК Подразделение
	|ИЗ
	|	ВТРабочиеМеста КАК РабочиеМеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписание КАК ПозицииШтатногоРасписания
	|		ПО РабочиеМеста.РабочееМесто = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Подразделение,
	|	РабочиеМеста.РабочееМесто";
	
	РабочиеМестаДеревоЗначений = РеквизитФормыВЗначение("РабочиеМеста", Тип("ДеревоЗначений"));
	РабочиеМестаДеревоЗначений.Строки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Если Выборка.Организация = Неопределено Тогда
			ГруппаДереваЗначений = ГруппаДереваЗначений("Закрытые позиции", РабочиеМестаДеревоЗначений);
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаДереваЗначений = ГруппаДереваЗначений.Строки.Добавить();
				НоваяСтрокаДереваЗначений.РабочееМесто = Выборка.РабочееМесто;
			КонецЦикла;
		Иначе
			ГруппаОрганизации = ГруппаДереваЗначений(Выборка.Организация, РабочиеМестаДеревоЗначений);
			Пока Выборка.СледующийПоЗначениюПоля("Подразделение") Цикл
				Если Выборка.Подразделение = Неопределено Тогда
					ГруппаПодразделения = ГруппаДереваЗначений("Закрытые позиции", ГруппаОрганизации);
				Иначе
					ГруппаПодразделения = ГруппаДереваЗначений(Выборка.Подразделение, ГруппаОрганизации);
				КонецЕсли;
				Пока Выборка.Следующий() Цикл
					НоваяСтрокаДереваЗначений = ГруппаПодразделения.Строки.Добавить();
					НоваяСтрокаДереваЗначений.РабочееМесто = Выборка.РабочееМесто;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(РабочиеМестаДеревоЗначений, "РабочиеМеста");
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ГруппаДереваЗначений(НаименованиеГруппы, ГруппаВладелец)
	
	Если ГруппаВладелец = Неопределено Тогда
		ГруппаВладелец = ГруппаВладелец;
	КонецЕсли;
	НоваяСтрокаДереваЗначений = ГруппаВладелец.Строки.Добавить();
	НоваяСтрокаДереваЗначений.РабочееМесто = НаименованиеГруппы;
	НоваяСтрокаДереваЗначений.ЭтоГруппа = Истина;
	
	Возврат НоваяСтрокаДереваЗначений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРабочиеМестаПоДеревуЗначений(ТекущийОбъект, СтрокаДереваЗначений)
	
	Если ТипЗнч(СтрокаДереваЗначений.РабочееМесто) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		НоваяСтрока = ТекущийОбъект.РабочиеМеста.Добавить();
		НоваяСтрока.РабочееМесто = СтрокаДереваЗначений.РабочееМесто;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаДереваЗначений Из СтрокаДереваЗначений.ПолучитьЭлементы() Цикл
		ЗаполнитьРабочиеМестаПоДеревуЗначений(ТекущийОбъект, ПодчиненнаяСтрокаДереваЗначений);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоЗначений()
	Для Каждого СтрокаДереваРабочихМест Из РабочиеМеста.ПолучитьЭлементы() Цикл
		Элементы.РабочиеМеста.Развернуть(СтрокаДереваРабочихМест.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РабочиеМестаПриИзмененииНаСервере()
	
	РеквизитВДанные(Объект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.РабочиеМеста");
	
	Возврат Массив
	
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	ПредставлениеПредупрежденияКонтроля = НСтр("ru = 'Редактирование контроля проведения инструктажа приведет к очистке рабочих мест'");
	ПредставлениеПредупреждения = НСтр("ru = 'Редактирование приведет к очистке рабочих мест'");
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, ПредупреждениеПриРедактировании", "КонтролироватьПроведениеИнструктажа", ПредставлениеПредупрежденияКонтроля));
	Массив.Добавить(Новый Структура("ЭлементФормы, ПредупреждениеПриРедактировании", "ПроводитсяДляВсехРабочихМест", ПредставлениеПредупреждения));
	
	Возврат Массив
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
