#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		УстановитьДоступностьПолейСтоимости(ЭтаФорма);
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.СпособОпределенияСтоимости = Перечисления.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаНеЗависитОтКоличестваСотрудников Тогда
		ТекущийОбъект.Стоимость = СтоимостьЗаВсех;
	Иначе
		ТекущийОбъект.Стоимость = СтоимостьЗаОдного;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Мероприятия_ОбученияРазвития",,Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриПолученииДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Записана_Публикация_Обучения" Тогда
		ЗаполнитьТаблицуПубликаций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПроведенияПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияСтоимостиЗаВсехПриИзменении(Элемент)
	УстановитьДоступностьПолейСтоимости(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СпособОпределенияСтоимостиЗаОдногоПриИзменении(Элемент)
	УстановитьДоступностьПолейСтоимости(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПубликаций

&НаКлиенте
Процедура ТаблицаПубликацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПубликаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ТаблицаПубликацийПойдут" Тогда
		ПараметрыФормы = Новый Структура("Публикация", ТекущиеДанные.Публикация);
		ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.Форма.ФормаПросмотраОткликов", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли Поле.Имя = "ТаблицаПубликацийНеПойдут" Тогда
		ПараметрыФормы = Новый Структура("Публикация", ТекущиеДанные.Публикация);
		ПараметрыФормы.Вставить("Отказники", Истина);
		ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.Форма.ФормаПросмотраОткликов", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Публикация);
		ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	ЗаполнитьТаблицуПубликаций();
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристикиПерсонала

&НаКлиенте
Процедура ХарактеристикиПерсоналаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ХарактеристикиПерсоналаКлиент.ХарактеристикиВыбор(Элементы.ХарактеристикиПерсонала.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияХарактеристик(ЭтаФорма, Копирование, Отказ);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодобратьИзПлана(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, Мероприятие", Истина, Истина, Объект.Ссылка); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораСтрокиПлана",ЭтаФорма);
	ОткрытьФорму("Документ.ПланОбученияРазвития.Форма.ФормаПодбораИзПланаОбучения", ПараметрыФормы,ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПубликацию(Команда)
	
	ЗначенияЗаполнения = Новый Структура("Мероприятие", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьХарактеристики(Команда)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуПодбораХарактеристик(ЭтаФорма, Новый Структура("ДобавлятьЗначенияХарактеристик, СтрокаСкрываемыхРеквизитов", Ложь, "Значения"));
КонецПроцедуры

&НаКлиенте
Процедура ПоКомпетенциям(Команда)
	
	Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка = НЕ Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка;
	
	УстановитьСвойстваЭлементовХарактеристикПерсонала(ЭтаФорма);
	
	ЗаполнитьДеревоХарактеристикНаСервере();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриПолученииДанныхНаСервере()

	// Заполняется поле стоимости.
	Если Объект.СпособОпределенияСтоимости = Перечисления.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаНеЗависитОтКоличестваСотрудников Тогда
		СтоимостьЗаВсех = Объект.Стоимость;
	Иначе
		СтоимостьЗаОдного = Объект.Стоимость;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьСписокХарактеристик")
		И Параметры.ОткрытьСписокХарактеристик Тогда
	
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаХарактеристикиПерсонала;
	КонецЕсли;
	
	ХарактеристикиПерсоналаФормы.ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(Объект.ХарактеристикиПерсонала);
	ХарактеристикиПерсоналаФормы.ЗагрузитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямМероприятияОбученияРазвития", Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
	ЗаполнитьТаблицуПубликаций();
	
	ЗаполнитьДеревоХарактеристикНаСервере();

	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

// Устанавливает свойства реквизитов формы от различных условий мероприятия.
//
&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()

	ЗаполнятьКонтрагента = Ложь;
	Если Объект.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнешнееМероприятие Тогда
		ЗаполнятьКонтрагента = Истина;
	КонецЕсли;
	
	ЗаполнятьПреподавателя = Ложь;
	Если Объект.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнутреннееМероприятие Тогда
		ЗаполнятьПреподавателя = Истина;
	КонецЕсли;
	
	ЗаполнятьЭлектронныйКурс = Ложь;
	Если Объект.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ЭлектронныйКурс Тогда
		ЗаполнятьЭлектронныйКурс = Истина;
	КонецЕсли;
	
	ЗаполнятьМестоПроведения = Ложь;
	Если Объект.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнешнееМероприятие 
		Или Объект.СпособПроведения = Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнутреннееМероприятие Тогда
		ЗаполнятьМестоПроведения = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УчебноеЗаведение", "Видимость", ЗаполнятьКонтрагента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", ЗаполнятьКонтрагента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Преподаватель", "Видимость", ЗаполнятьПреподавателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МестоПроведения", "Видимость", ЗаполнятьМестоПроведения);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭлектронныйКурс", "Видимость", ЗаполнятьЭлектронныйКурс);
	
	УстановитьДоступностьСтраницеПубликации();
	
	СкрываемыеПоля = Новый Массив;
	СкрываемыеПоля.Добавить("УчебноеЗаведение");
	СкрываемыеПоля.Добавить("Контрагент");
	СкрываемыеПоля.Добавить("Преподаватель");
	СкрываемыеПоля.Добавить("МестоПроведения");
	СкрываемыеПоля.Добавить("ЭлектронныйКурс");
	
	Для Каждого ИмяПоля Из СкрываемыеПоля Цикл
		ВидимостьПоля = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, ИмяПоля, "Видимость");
		Если Не ВидимостьПоля Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтаФорма, "Объект." + ИмяПоля, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	// Установим название преподавателя.
	Элементы.Преподаватель.Заголовок = ОбучениеРазвитие.НаименованиеПреподавателяПоВидуМероприятия(Объект.ВидМероприятия);
	
	УстановитьСписокВыбораВСпособеПроведения();
	
	УстановитьДоступностьПолейСтоимости(ЭтаФорма);
	
	УстановитьСвойстваЭлементовХарактеристикПерсонала(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтраницеПубликации()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницаПубликации",
		"ТолькоПросмотр",
		НЕ ПравоДоступа("Изменение", Метаданные.Документы.ПубликацияМероприятияОбученияРазвития));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПубликацийСоздатьПубликацию",
		"Доступность",
		ПравоДоступа("Изменение", Метаданные.Документы.ПубликацияМероприятияОбученияРазвития));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокПубликацийПодобратьИзПлана",
		"Доступность",
		ПравоДоступа("Изменение", Метаданные.Документы.ПубликацияМероприятияОбученияРазвития));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейСтоимости(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.Объект.СпособОпределенияСтоимости = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыРасходовНаПерсонал.СуммаНеЗависитОтКоличестваСотрудников") Тогда
		// Стоимость на всех.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьЗаВсех", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьЗаОдного", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СтоимостьЗаОдного", Неопределено);
	Иначе
		// Стоимость за одного.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьЗаВсех", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтоимостьЗаОдного", "Доступность", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СтоимостьЗаВсех", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПубликаций()

	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ПубликацияМероприятияОбученияРазвития) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликацияМероприятияОбученияРазвития.Ссылка КАК Публикация,
		|	ВЫБОР
		|		КОГДА ПубликацияМероприятияОбученияРазвития.ДатаОкончания >= &ДатаПубликации
		|				ИЛИ ПубликацияМероприятияОбученияРазвития.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПубликацияЗавершена,
		|	СУММА(ВЫБОР
		|			КОГДА ОткликиНаПубликациюМероприятияОбученияРазвития.Отклик = ЗНАЧЕНИЕ(Перечисление.ВариантыОткликовСотрудников.Согласие)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Пойдут,
		|	СУММА(ВЫБОР
		|			КОГДА ОткликиНаПубликациюМероприятияОбученияРазвития.Отклик = ЗНАЧЕНИЕ(Перечисление.ВариантыОткликовСотрудников.ВозможноеСогласие)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВозможноПойдут,
		|	СУММА(ВЫБОР
		|			КОГДА ОткликиНаПубликациюМероприятияОбученияРазвития.Отклик = ЗНАЧЕНИЕ(Перечисление.ВариантыОткликовСотрудников.Отказ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеПойдут
		|ПОМЕСТИТЬ ВТПубликации
		|ИЗ
		|	Документ.ПубликацияМероприятияОбученияРазвития КАК ПубликацияМероприятияОбученияРазвития
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОткликиНаПубликациюМероприятияОбученияРазвития КАК ОткликиНаПубликациюМероприятияОбученияРазвития
		|		ПО ПубликацияМероприятияОбученияРазвития.Ссылка = ОткликиНаПубликациюМероприятияОбученияРазвития.Публикация
		|ГДЕ
		|	ПубликацияМероприятияОбученияРазвития.Проведен
		|	И ПубликацияМероприятияОбученияРазвития.Мероприятие = &Мероприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	ПубликацияМероприятияОбученияРазвития.Ссылка,
		|	ВЫБОР
		|		КОГДА ПубликацияМероприятияОбученияРазвития.ДатаОкончания >= &ДатаПубликации
		|				ИЛИ ПубликацияМероприятияОбученияРазвития.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПубликации.Публикация,
		|	ВТПубликации.Пойдут,
		|	ВТПубликации.ВозможноПойдут,
		|	ВТПубликации.НеПойдут,
		|	ПубликацияМероприятияОбученияРазвития.Мероприятие,
		|	ПубликацияМероприятияОбученияРазвития.ДатаНачалаСобытия КАК НачалоДата,
		|	ПубликацияМероприятияОбученияРазвития.ДатаНачалаСобытия КАК НачалоВремя,
		|	ПубликацияМероприятияОбученияРазвития.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ПубликацияМероприятияОбученияРазвития.МестоПроведения
		|ИЗ
		|	Документ.ПубликацияМероприятияОбученияРазвития КАК ПубликацияМероприятияОбученияРазвития
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПубликации КАК ВТПубликации
		|		ПО ПубликацияМероприятияОбученияРазвития.Ссылка = ВТПубликации.Публикация
		|ГДЕ
		|	(&ПоказыватьЗавершенные
		|			ИЛИ ВТПубликации.ПубликацияЗавершена = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ДатаПубликации", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПоказыватьЗавершенные", ПоказыватьЗавершенные);
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПубликаций.Очистить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПубликаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Пойдут = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", Выборка.Пойдут + Выборка.ВозможноПойдут, Выборка.ВозможноПойдут);
		НоваяСтрока.НеПойдут = ?(Выборка.НеПойдут = 0, "", Строка(Выборка.НеПойдут));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСтрокиПлана(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура("Основание", РезультатВыбора);
		ОткрытьФорму("Документ.ПубликацияМероприятияОбученияРазвития.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВСпособеПроведения()

	// Список выбора способа проведения, скрываем электронный курс по ФО.
	СписокВыбора = Элементы.СпособПроведения.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнешнееМероприятие, НСтр("ru = 'Внешнее'"));
	СписокВыбора.Добавить(Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ВнутреннееМероприятие, НСтр("ru = 'Внутреннее'"));
	Если ЭлектронноеОбучение.ИспользоватьЭлектронноеОбучение() Тогда
		СписокВыбора.Добавить(Перечисления.СпособыПроведенияМероприятийОбученияРазвития.ЭлектронныйКурс, НСтр("ru = 'Электронный курс'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоХарактеристикНаСервере()

	ХарактеристикиПерсоналаФормы.СохранитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямМероприятияОбученияРазвития", Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
	Если НЕ Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиДерево = РеквизитФормыВЗначение("ДеревоХарактеристик");
	ХарактеристикиПерсоналаФормы.ЗаполнитьДеревоХарактеристик(Объект.ХарактеристикиПерсонала, ХарактеристикиДерево);
	ЗначениеВРеквизитФормы(ХарактеристикиДерево, "ДеревоХарактеристик");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикиПерсоналаНаСервере(НовыеХарактеристики, ДополнительныеПараметры) Экспорт
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиВТабличнуюЧасть(ЭтаФорма, НовыеХарактеристики, ДополнительныеПараметры, "Объект.ХарактеристикиПерсонала");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовХарактеристикПерсонала(Форма)

	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппХарактеристикПерсонала(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
	ХарактеристикиПерсоналаКлиентСервер.УстановитьДоступностьКомандПанелиХарактеристикПерсонала(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппКомандВКоманднойПанелиХарактеристик(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
КонецПроцедуры

#КонецОбласти 