
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКомандыФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГруппаКомандыФормы");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодборПерсонала.ОбновитьСоставКомандОтправкиВакансии(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		// Заявку сбрасываем при копировании.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Основание = Неопределено;
		КонецЕсли;
		// Проверка наличия заявки.
		Если ПолучитьФункциональнуюОпцию("ОткрытиеВакансииТребуетСогласования") И Не ЗначениеЗаполнено(Объект.Основание) Тогда
			ВызватьИсключение НСтр("ru = 'Открытие новой вакансии доступно только по согласованной заявке на подбор персонала.'");
		КонецЕсли;
		// Устанавливаем ссылку нового
		ВакансияСсылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
		
		ЗаполнитьНаименование(ЭтаФорма);
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
		
		// Заполняем реквизиты значениями по умолчанию.
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Объект.ДатаОткрытия = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаЗакрытия) Тогда
			Объект.ПланируемаяДатаЗакрытия = ДобавитьМесяц(Объект.ДатаОткрытия, 1);
		КонецЕсли;
		
		// Заполняем умолчательное состояние Открыта для новой вакансии.
		СостоянияВакансий.Вакансия = ВакансияСсылка;
		СостоянияВакансий.Период = Объект.ДатаОткрытия;
		СостоянияВакансий.Состояние = Объект.Состояние;
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
	// Отобразим элементы в зависимости от функциональной опции
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	Элементы.ГруппаФункцииТребованияКХарактеристикам.Видимость = ИспользоватьЭлектронноеИнтервью;
	Если НЕ ИспользоватьЭлектронноеИнтервью Тогда
		Элементы.ГруппаДанныеДляПубликацииВакансии.Поведение = ПоведениеОбычнойГруппы.Обычное;
		Элементы.ГруппаДанныеДляПубликацииВакансии.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаДанныеДляПубликацииВакансии.ОтображатьЗаголовок = Ложь;
		Элементы.ЭтапыРаботыСКандидатамиПечатьАнкеты.Видимость = Ложь;
		Элементы.КандидатыОтчетПоКомпетенциям.Видимость = Ложь;
	КонецЕсли;
	
	ДоступноДобавлениеИзменение = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.АнкетыКандидатов);
	ДоступностьОписания = СоответствуетПрофилюДолжностиЧисло = 0;
	Элементы.Характеристики.ТолькоПросмотр = Не (ДоступностьОписания И ДоступноДобавлениеИзменение);
	Элементы.ХарактеристикиПерсоналаОткрытьПодборХарактеристикПерсонала.Доступность = ДоступностьОписания И ДоступноДобавлениеИзменение;
		
	ХарактеристикиПерсоналаФормы.ПрочитатьХарактеристикиВТаблицы(Объект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	
	УстановитьВидимостьОснования();
	ПодборПерсоналаФормы.УстановитьВидимостьЭлементаФормы(Элементы.ОткликиКандидатовЗагрузитьОткликиССайта);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОткликиКандидатов.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Публикации.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Оплаты, "Вакансия", ВакансияСсылка);
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.РасходыНаИсточникИнформацииОКандидатах) Тогда
		Элементы.Оплаты.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьСпособНабора();
	УстановитьВидимостьИнформационнойСтрокиЗанятости();
	
	НастроитьСписокКандидатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВакансияСсылка = Объект.Ссылка;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтаФорма, ВакансияСсылка, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОтредактированаИстория" И Источник = ВакансияСсылка И Параметр.ИмяРегистра = "СостоянияВакансий" Тогда
		КоллекцияСостояний = Параметр.МассивЗаписей;
		КоллекцияСостояний.Сортировать("Период");
		Количество = КоллекцияСостояний.Количество();
		Если Количество > 0 Тогда
			Объект.ДатаОткрытия = КоллекцияСостояний[0].Период;
			Объект.ДатаСостояния = КоллекцияСостояний[Количество - 1].Период;
			Объект.Состояние = КоллекцияСостояний[Количество - 1].Состояние;
		Иначе	
			Объект.ДатаОткрытия = Неопределено;
			Объект.ДатаСостояния = Неопределено;
			Объект.Состояние = Неопределено;
		КонецЕсли;
		УстановитьПанельСостояния();
	ИначеЕсли ИмяСобытия = "ПубликацияВакансии" Тогда
		Элементы.Публикации.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененыНастройкиДоступаКСайтам" Тогда
		ОбработкаОповещенияИзмененыНастройкиДоступаКСайтам();
	ИначеЕсли ИмяСобытия = "Проведение_Анкета" Тогда
		Элементы.Кандидаты.Обновить();
	ИначеЕсли ИмяСобытия = "СохранениеНастроекВопросовДляСобеседования" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьОтображениеНастроекАнкет(); 
	ИначеЕсли ИмяСобытия = "ЗаписьВариантаПечати" Тогда
		ОбновитьСоставПодключаемыхКомандНаСервере();
	КонецЕсли;
	
	ОбработатьОповещенияЭтаповРаботыСКандидатами(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка, Отказ);
	
	Если ДополнятьПредставление И Не ЗначениеЗаполнено(Объект.УточнениеНаименования) Тогда
		ТекстСообщения = НСтр("ru = 'Дополнение представления не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.УточнениеНаименования", , Отказ);
	КонецЕсли;
	
	ХарактеристикиПерсоналаФормы.ОбработкаПроверкиЗаполненияТабличныхЧастейХарактеристик(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиПозицияМассовогоНабора(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	ОбработкаНавигационнойСсылкиСостоянияКандидатов(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗаписатьСКлиента();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСостоянияВакансий(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗакрыватьПослеЗаписи Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПозицияПредыдущееЗначение = Неопределено;
	ПричинаОткрытияПредыдущееЗначение = Неопределено;
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ЗакрыватьПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНеЗакрывать(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	Записать();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ИсторияРаботы(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("СостоянияВакансий", ВакансияСсылка, ЭтаФорма, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПечатиОписания(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Варианты описания будут доступны только после записи данных.
		|Данные будут записаны.'");
		
		Оповещение = Новый ОписаниеОповещения("ВариантыПечатиОписанияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВариантыПечатиОписанияЗавершение(КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОткликиРассмотренными(Команда)
	
	ВыбранныеОтклики = Элементы.ОткликиКандидатов.ВыделенныеСтроки;
	Если ВыбранныеОтклики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтметитьОткликиРассмотреннымиНаСервере(ВыбранныеОтклики);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОткликиКандидатов"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпубликоватьНаСайте(Кнопка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", Кнопка.Имя);
	
	Если Не Модифицированность И Не Параметры.Ключ.Пустая()Тогда
		ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Если элемент пока не записан, получить отклики невозможно.
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Публикация вакансии возможна только после записи данных.
			|Данные будут записаны.'");
	
	Оповещение = Новый ОписаниеОповещения("ОпубликоватьНаСайтеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтклики(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ПолучитьОткликиССайтов();
		Возврат;
	КонецЕсли;

	// Если элемент пока не записан, получить отклики невозможно.
	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Получение откликов возможно только после записи данных.
			|Данные будут записаны.'");
			
	Оповещение = Новый ОписаниеОповещения("ПолучитьОткликиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборХарактеристикПерсонала(Команда)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуПодбораХарактеристик(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАнкеты(Команда)
	
	ТекущиеДанные = Элементы.ЭтапыРаботыСКандидатами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ШаблонАнкеты) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеИнтервьюКлиент.ПечатьАнкеты(ТекущиеДанные.ШаблонАнкеты);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФункциям(Команда)
	
	ЭлектронноеИнтервьюКлиент.ЗаполнитьПоФункциям(Объект, Характеристики, ЗначенияХарактеристики);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДействияДеревом(Команда)
	
	Если Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковСписком Тогда
		СписокДействий = Новый Массив;
		Для Каждого ТекущаяСтрока Из Объект.ДействияСотрудников Цикл
			СписокДействий.Добавить(ТекущаяСтрока.ДействиеСотрудника);
		КонецЦикла;
		ЗаполнитьДеревоДействийСотрудников(СписокДействий);
		Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковДеревом;
	Иначе
		Элементы.ГруппаДействияСотрудников.ТекущаяСтраница = Элементы.СтраницаДействияСотрудниковСписком;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВакансию(Команда)
	
	ДополнительныеПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьВакансиюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ПодборПерсоналаКлиент.ТекстВопросаПередОтправкой(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ОтправитьВакансиюЗавершение(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВакансиюКандидатам(Команда)
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьШаблоныСообщений") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отправка вакансии кандидатам возможна только при использовании шаблонов сообщений.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИмяКоманды", Команда.Имя);
	
	Если Параметры.Ключ.Пустая() Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ОтправитьВакансиюКандидатамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ПодборПерсоналаКлиент.ТекстВопросаПередОтправкой(), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ОтправитьВакансиюКандидатамЗавершение(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяСсылкой(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПоделитьсяСсылкойЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ПодборПерсоналаКлиент.ТекстВопросаПередОтправкой(), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПоделитьсяСсылкойЗавершение(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоказыватьОдобренныхОтклоненныхКандидатов(Команда)
	
	ПодборПерсоналаКлиентСервер.УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(
		Кандидаты, 
		Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов.Пометка, 
		Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов);
	
	ПодключитьОбработчикОжидания("ПриИзмененииСохраняемойНастройки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПозицияПриИзменении(Элемент)
	ПозицияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ДолжностьПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособНабораПриИзменении(Элемент)
	СпособНабораПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНабораПозицияПриИзменении(Элемент)
	НазначениеНабораПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНабораДолжностьПодразделениеПриИзменении(Элемент)
	НазначениеНабораПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Модифицированность Тогда
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Перед созданием кандидата необходимо записать вакансию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбрабатываемыеСсылки = Новый Массив;
	ОбрабатываемыеСсылки.Добавить("ДатаЗакрытия");
	ОбрабатываемыеСсылки.Добавить("ДатаОтмены");
	ОбрабатываемыеСсылки.Добавить("ДатаПриостановки");
	
	Если ОбрабатываемыеСсылки.Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// Предложим пользователю выбрать дату.
	ПараметрыВыбораДаты = Новый Структура("НачальноеЗаполнение, Заголовок, ПоясняющийТекст");
	ПараметрыВыбораДаты.НачальноеЗаполнение = Объект.ДатаСостояния;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ДатаПриостановки" Тогда
		ПараметрыВыбораДаты.Заголовок = НСтр("ru = 'Дата приостановки'");
		ПараметрыВыбораДаты.ПоясняющийТекст = НСтр("ru = 'Выберите дату, с которой следует приостановить набор персонала по вакансии.'");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДатаОтмены" Тогда
		ПараметрыВыбораДаты.Заголовок = НСтр("ru = 'Дата отмены набора'");
		ПараметрыВыбораДаты.ПоясняющийТекст = НСтр("ru = 'Выберите дату, с которой набор персонала отменен по вакансии.'");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДатаЗакрытия" Тогда
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(
		"Состояние, 
		|ДатаСостояния");
	ПараметрыОповещения.Состояние = Объект.Состояние;
	ПараметрыОповещения.ДатаСостояния = Объект.ДатаСостояния;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДатыСостоянияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствуетПрофилюДолжностиЧислоПриИзменении(Элемент)
	
	Если СоответствуетПрофилюДолжностиЧисло = 0 Тогда
		УстановитьДоступностьОписанияВакансии(ЭтаФорма);
		Если ИспользоватьЭлектронноеИнтервью Тогда
			Если Объект.Ссылка.Пустая() Тогда
				ТекстПредупреждения = НСтр("ru = 'Произвольное описание вакансии
					           					 |возможно только после записи данных.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				СоответствуетПрофилюДолжностиЧисло = 1;
			Иначе
				СкопироватьШаблоныАнкетЭтаповРаботыСКандидатами();
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеПрофиля = ДанныеПрофиляДолжности(Объект.ПрофильДолжности);
	
	ДанныеПрофиляИзменены = (Не ПустаяСтрока(Объект.Требования) Или Не ПустаяСтрока(Объект.Обязанности) Или Не ПустаяСтрока(Объект.Условия)) 
			И (Объект.Требования <> ДанныеПрофиля.Требования Или Объект.Обязанности <> ДанныеПрофиля.Обязанности Или Объект.Условия <> ДанныеПрофиля.Условия);
	
	Если ИспользоватьЭлектронноеИнтервью Тогда
		Объект.ХарактеристикиПерсонала.Очистить();
		Для Каждого ТекущаяСтрока Из Характеристики Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
			СтрокиЗначений = ЗначенияХарактеристики.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
				НоваяСтрока = Объект.ХарактеристикиПерсонала.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.Значение = СтрокаЗначения.Значение;
				НоваяСтрока.ВесЗначения = СтрокаЗначения.ВесЗначения;
			КонецЦикла;
		КонецЦикла;
		ДанныеПрофиляИзменены = ДанныеПрофиляИзменены
				ИЛИ ((Объект.ХарактеристикиПерсонала.Количество() <> 0 ИЛИ Объект.ДействияСотрудников.Количество() <> 0 ИЛИ Объект.ЭтапыРаботыСКандидатами.Количество() <> 0)
					И (НЕ ДанныеПрофиляСовпадают(Объект.ХарактеристикиПерсонала, ДанныеПрофиля.ХарактеристикиПерсонала)
						ИЛИ НЕ ДанныеПрофиляСовпадают(Объект.ДействияСотрудников, ДанныеПрофиля.ДействияСотрудников)
						ИЛИ НЕ ДанныеПрофиляСовпадают(Объект.ЭтапыРаботыСКандидатами, ДанныеПрофиля.ЭтапыРаботыСКандидатами)));
				
		// Если в этапах работы заполнен хотя бы один шаблон анкеты, то данные отличаются и их надо заменить.
		Если НЕ ДанныеПрофиляИзменены И Объект.ЭтапыРаботыСКандидатами.Количество() > 0 Тогда
			Для каждого СтрокаЭтапаРаботы Из Объект.ЭтапыРаботыСКандидатами Цикл
				Если ЗначениеЗаполнено(СтрокаЭтапаРаботы.ШаблонАнкеты) Тогда
					ДанныеПрофиляИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Функции, требования к характеристикам, этапы работы с кандидатами
		                     |и данные для публикации вакансии будут заменены описанием из профиля должности.
                             |Продолжить?'");
	Иначе
		
		ДанныеПрофиляИзменены = ДанныеПрофиляИзменены
				ИЛИ (Объект.ЭтапыРаботыСКандидатами.Количество() <> 0
					И НЕ ДанныеПрофиляСовпадают(Объект.ЭтапыРаботыСКандидатами, ДанныеПрофиля.ЭтапыРаботыСКандидатами));		
		ТекстВопроса = НСтр("ru = 'Требования, обязанности, условия работы и этапы работы с кандидатами будут заменены описанием из профиля должности.
                             |Продолжить?'");
	КонецЕсли;
	
	Если ДанныеПрофиляИзменены Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗаменыОписанияИзПрофиляЗавершение", ЭтотОбъект, ДанныеПрофиля), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОписаниеИзПрофиляДолжности(ДанныеПрофиля);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильДолжностиПриИзменении(Элемент)
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 И ЗначениеЗаполнено(Объект.ПрофильДолжности) Тогда
		// Заполняем по данным профиля.
		ДанныеПрофиля = ДанныеПрофиляДолжности(Объект.ПрофильДолжности);
		ЗаполнитьОписаниеИзПрофиляДолжности(ДанныеПрофиля);
	КонецЕсли;
	
	УстановитьДоступностьТумблераСоответствия(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнятьПредставлениеПриИзменении(Элемент)
	УстановитьСвойстваУточненияНаименования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УточнениеНаименованияПриИзменении(Элемент)
	ЗаполнитьНаименование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПубликацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтовКлиент");
	МодульКлиент.ОткрытьФормуНастройкиПубликацииАвторизация(ЭтотОбъект, Объект.Ссылка, ТекущиеДанные.МестоПубликации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияДействий(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковПередУдалением(Элемент, Отказ)
	
	Если Элементы.ДействияСотрудников.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеДействия = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элементы.ДействияСотрудников.ВыделенныеСтроки Цикл
		СтрокаДействия = Объект.ДействияСотрудников.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаДействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеДействия.Добавить(СтрокаДействия.ДействиеСотрудника);
	КонецЦикла;
	
	ПрочиеДействия = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.ДействияСотрудников Цикл
		Если УдаляемыеДействия.Найти(ТекущаяСтрока.ДействиеСотрудника) = Неопределено Тогда
			ПрочиеДействия.Добавить(ТекущаяСтрока.ДействиеСотрудника);
		КонецЕсли;
	КонецЦикла;
	МассивХарактеристик = Новый Массив;
	Для Каждого ТекущаяСтрока Из Характеристики Цикл
		МассивХарактеристик.Добавить(ТекущаяСтрока.Характеристика);
	КонецЦикла;
	МассивЗначенийХарактеристик = Новый Массив;
	Для Каждого ТекущаяСтрока Из ЗначенияХарактеристики Цикл
		МассивЗначенийХарактеристик.Добавить(ТекущаяСтрока.Значение);
	КонецЦикла;
	
	ЭлектронноеИнтервьюКлиент.УдалитьДействияСотрудника(ЭтаФорма, УдаляемыеДействия, ПрочиеДействия, МассивХарактеристик, МассивЗначенийХарактеристик);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ДействияСотрудников.ТекущиеДанные.ДействиеСотрудника);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияХарактеристик(ЭтаФорма, Копирование, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПередУдалением(Элемент, Отказ)
	
	Если Элементы.Характеристики.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Модифицированность = Истина;
	
	ИзменяемыеХарактеристики = Новый Структура;
	УдаляемыеХарактеристики = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элементы.Характеристики.ВыделенныеСтроки Цикл
		СтрокаХарактеристики = Характеристики.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаХарактеристики = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеХарактеристики.Добавить(СтрокаХарактеристики.Характеристика);
	КонецЦикла;
	ИзменяемыеХарактеристики.Вставить("УдаляемыеХарактеристики", УдаляемыеХарактеристики);
	ИзменяемыеХарактеристики.Вставить("ДобавляемыеХарактеристики", Новый Массив);
	
	ЭлектронноеИнтервьюКлиент.ИзменитьСоставХарактеристик(Объект, Характеристики, ЗначенияХарактеристики, ИзменяемыеХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ХарактеристикиЗначенияСтрокой" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступноДобавлениеИзменение Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиПерсоналаКлиент.ОткрытьНастройкуЗначенийХарактеристик(ЭтаФорма, ТекущиеДанные.Характеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Характеристики.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ХарактеристикаРедактируемойСтроки = Элементы.Характеристики.ТекущиеДанные.Характеристика;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеИнтервьюКлиент.ОбработатьИзменениеХарактеристики(ЭтаФорма, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ЭтапыРаботыСКандидатамиНастройкаАнкеты" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапыРаботыСКандидатами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствуетПрофилюДолжностиЧисло = 0 Тогда	// Произвольный
		Если Объект.Ссылка.Пустая() Тогда
			ТекстПредупреждения = НСтр("ru = 'Переход к настройке вопросов для собеседования
				           					 |возможен только после записи данных.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("НастройкаВопросовДляСобеседованияЗавершение", ЭтаФорма, ПараметрыОповещения);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШаблонАнкеты", ТекущиеДанные.ШаблонАнкеты);
	ПараметрыФормы.Вставить("ЭтапРаботы", ТекущиеДанные.ЭтапРаботы);
	
	Если СоответствуетПрофилюДолжностиЧисло = 1 Тогда
		ПараметрыФормы.Вставить("Объект", Объект.ПрофильДолжности);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	Иначе
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаВопросовДляСобеседования", ПараметрыФормы, ЭтаФорма, Строка(УникальныйИдентификатор)+"_"+ТекущиеДанные.НомерСтроки,,, Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиПриИзменении(Элемент)
	
	ЗаполнитьОтображениеНастроекАнкет();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиЭтапРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ЭтапРаботы", ВыбранноеЗначение);
	СтрокиЭтапа = Объект.ЭтапыРаботыСКандидатами.НайтиСтроки(ПараметрыПоиска);
	Если СтрокиЭтапа.Количество() > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Этап ""%1"" уже есть в списке'"), Строка(ВыбранноеЗначение));
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыРаботыСКандидатамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияЭтапов(ЭтаФорма, Копирование, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	СоответствуетПрофилюДолжностиЧисло = ТекущийОбъект.СоответствуетПрофилюДолжности;
	ДополнятьПредставление = ЗначениеЗаполнено(ТекущийОбъект.УточнениеНаименования);
	ШаблонСообщения = ПодборПерсонала.ШаблонСоСпискомСсылок("Справочник.Вакансии");
	
	Если Не Параметры.Ключ.Пустая() Тогда
		СостоянияВакансийНаборЗаписейПрочитан = Ложь;
		ПрочитатьСостоянияВакансий();
	КонецЕсли;
	
	УстановитьПанельСостояния(ТекущийОбъект);
	УстановитьДоступностьОписанияВакансии(ЭтаФорма);
	УстановитьДоступностьТумблераСоответствия(ЭтаФорма);
	УстановитьСвойстваУточненияНаименования(ЭтаФорма);
	УстановитьВидимостьКомандыВариантовПечати();
	
	СоздатьКомандыПубликацииВакансий();
	
	ЗаполнитьОтображениеНастроекАнкет();
	ХарактеристикиПерсоналаФормы.ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(Характеристики);
	
	ЗаполнитьИнформационнуюСтрокуЗанятости();
	ЗаполнитьИнформационнуюСтрокуКандидатов();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ВакансияСсылка);
	КонецЕсли;
	ТекущийОбъект.СоответствуетПрофилюДолжности = СоответствуетПрофилюДолжностиЧисло;
	
	ХарактеристикиПерсоналаФормы.ПеренестиХарактеристикиВТабличнуюЧасть(ТекущийОбъект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	
КонецПроцедуры

#Область ДлительнаяОперация

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСКлиента()
	
	Результат = РезультатЗаписиДлительнойОперацией();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзмененииОбъекта();
		ЗаписьДлительнойОперацией = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(ВакансияСсылка);
	
	ПараметрыОповещения = Новый Структура(
		"Должность, 
		|Подразделение");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_Вакансия", ПараметрыОповещения, ВакансияСсылка);
	
КонецПроцедуры

&НаСервере
Функция ДанныеФормыДляЗаписи()
	
	Возврат Справочники.Вакансии.СериализоватьДанныеФормы(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция РезультатЗаписиДлительнойОперацией()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	СправочникОбъект = Неопределено;
	
	// Преобразовываем данные формы в объект.
	Если Модифицированность Тогда
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(СправочникОбъект);
		ДанныеОбъекта = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(СправочникОбъект);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СправочникСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("ДанныеОбъекта", ДанныеОбъекта);
	СтруктураПараметров.Вставить("ДанныеФормы", ДанныеФормыДляЗаписи());
	СтруктураПараметров.Вставить("Отказ", Ложь);
	
	НаименованиеЗадания = НСтр("ru = 'Сохранение изменений вакансии'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.Вакансии.ВыполнитьЗапись",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ЗаписьДлительнойОперацией = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаписьПослеВыполненияДлительнойОперации();
		ЗаписьДлительнойОперацией = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписьПослеВыполненияДлительнойОперации()
	
	Модифицированность = Ложь;
	Если ЗакрыватьПослеЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(АдресХранилища);
	СправочникОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеОбъекта);
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	ПриПолученииДанныхНаСервере(СправочникОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗаписьПослеВыполненияДлительнойОперации();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
				ОповеститьОбИзмененииОбъекта();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаписьДлительнойОперацией И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
		ЗаписьДлительнойОперацией = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваУточненияНаименования(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.УточнениеНаименования.Доступность = Форма.ДополнятьПредставление;
	Элементы.УточнениеНаименования.АвтоОтметкаНезаполненного = Форма.ДополнятьПредставление;
	Элементы.УточнениеНаименования.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.Объект.УточнениеНаименования);
	
	Если Не Форма.ДополнятьПредставление Тогда
		Форма.Объект.УточнениеНаименования = Неопределено;
		ЗаполнитьНаименование(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостоянияВакансий()
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостоянияВакансий(ТекущийОбъект)
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма, "СостоянияВакансий", ВакансияСсылка);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОснования()
	
	// Если создание вакансии требует согласования, то основание отображаем, иначе — нет.
	Если Не ПолучитьФункциональнуюОпцию("ОткрытиеВакансииТребуетСогласования") Тогда
		Элементы.ОснованиеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ОснованиеГруппа.Видимость = Истина;
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Элементы.ОснованиеСтраницы.ТекущаяСтраница = Элементы.ОснованиеЗаполненоСтраница;
	Иначе
		Элементы.ОснованиеСтраницы.ТекущаяСтраница = Элементы.ОснованиеНеЗаполненоСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПанельСостояния(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	СостоянияВакансии = Новый Массив;
	СостоянияВакансии.Добавить(Перечисления.СостоянияВакансии.Закрыта);
	СостоянияВакансии.Добавить(Перечисления.СостоянияВакансии.Отменена);
	СостоянияВакансии.Добавить(Перечисления.СостоянияВакансии.Приостановлена);
	
	// Работа с вакансией активна — не отображаем панель согласования.
	Если СостоянияВакансии.Найти(ТекущийОбъект.Состояние) = Неопределено Тогда
		Элементы.СостояниеГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Видимость = Истина;
	
	ПредставлениеСостояния = "";
	ПояснениеСостояния = "";
	ЧастиПояснения = Новый Массив;
	Если ТекущийОбъект.Состояние = Перечисления.СостоянияВакансии.Закрыта Тогда
		ПредставлениеСостояния = НСтр("ru = 'Вакансия закрыта'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Набор персонала на вакансию завершен'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(ТекущийОбъект.ДатаСостояния, "ДЛФ=D"), , , , "ДатаЗакрытия"));
	ИначеЕсли ТекущийОбъект.Состояние = Перечисления.СостоянияВакансии.Отменена Тогда
		ПредставлениеСостояния = НСтр("ru = 'Вакансия отменена'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Набор персонала на вакансию отменен'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(ТекущийОбъект.ДатаСостояния, "ДЛФ=D"), , , , "ДатаОтмены"));
	ИначеЕсли ТекущийОбъект.Состояние = Перечисления.СостоянияВакансии.Приостановлена Тогда
		ПредставлениеСостояния = НСтр("ru = 'Набор приостановлен'");
		ЧастиПояснения.Добавить(НСтр("ru = 'Работа с вакансией приостановлена'"));
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(Новый ФорматированнаяСтрока(Формат(ТекущийОбъект.ДатаСостояния, "ДЛФ=D"), , , , "ДатаПриостановки"));
	КонецЕсли;
	
	Элементы.СостояниеГруппа.Заголовок = ПредставлениеСостояния;
	Элементы.СостояниеДекорация.Заголовок = Новый ФорматированнаяСтрока(ЧастиПояснения);
	
	// Заполняем одобренного кандидата.
	ОдобренныйКандидат = Неопределено;
	Если ТекущийОбъект.Состояние = Перечисления.СостоянияВакансии.Закрыта Тогда
		// Формируем условие.
		ОтборКандидатов = Новый Структура("Вакансия, Состояние");
		ОтборКандидатов.Вакансия = ВакансияСсылка;
		ОтборКандидатов.Состояние = Перечисления.СостоянияСогласования.Согласовано;
		// Запрашиваем кандидатов.
		УстановитьПривилегированныйРежим(Истина);
		МассивКандидатов = Справочники.Кандидаты.КандидатыПоОтбору(ОтборКандидатов);
		УстановитьПривилегированныйРежим(Ложь);
		Если МассивКандидатов.Количество() > 0 Тогда
			ОдобренныйКандидат = МассивКандидатов[0];
		КонецЕсли;
	КонецЕсли;
	Элементы.ОдобренныйКандидат.Видимость = ЗначениеЗаполнено(ОдобренныйКандидат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьТумблераСоответствия(Форма)
	
	ТумблерДоступен = ЗначениеЗаполнено(Форма.Объект.ПрофильДолжности);
	
	Форма.Элементы.СоответствуетПрофилюДолжностиЧисло.Доступность = ТумблерДоступен;
	
	Если Не ТумблерДоступен Тогда 
		Форма.СоответствуетПрофилюДолжностиЧисло = 0;
		УстановитьДоступностьОписанияВакансии(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОписанияВакансии(Форма)
	
	ДоступностьОписания = Форма.СоответствуетПрофилюДолжностиЧисло = 0;
	
	Форма.Элементы.Требования.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.Обязанности.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.Условия.ТолькоПросмотр = Не ДоступностьОписания;
	
	Форма.Элементы.Характеристики.ТолькоПросмотр = Не (ДоступностьОписания И Форма.ДоступноДобавлениеИзменение);
	Форма.Элементы.ДействияСотрудников.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.ЭтапыРаботыСКандидатами.ТолькоПросмотр = Не ДоступностьОписания;
	Форма.Элементы.ХарактеристикиПерсоналаОткрытьПодборХарактеристикПерсонала.Доступность = ДоступностьОписания И Форма.ДоступноДобавлениеИзменение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаменыОписанияИзПрофиляЗавершение(РезультатВопроса, ДанныеПрофиля) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		// Пользователь отказался от замены описания из профиля.
		СоответствуетПрофилюДолжностиЧисло = 0;
		УстановитьДоступностьОписанияВакансии(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОписаниеИзПрофиляДолжности(ДанныеПрофиля);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеИзПрофиляДолжности(ДанныеПрофиля)
	
	Если ИспользоватьЭлектронноеИнтервью Тогда
		
		Объект.ХарактеристикиПерсонала.Очистить();
		Для каждого ТекущаяСтрока Из ДанныеПрофиля.ХарактеристикиПерсонала Цикл
			НовСтрока = Объект.ХарактеристикиПерсонала.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекущаяСтрока);	
		КонецЦикла;
		ПрочитатьХарактеристикиВТаблицы();
		
		Объект.ДействияСотрудников.Очистить();
		Для каждого ТекущаяСтрока Из ДанныеПрофиля.ДействияСотрудников Цикл
			НовСтрока = Объект.ДействияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.ЭтапыРаботыСКандидатами.Очистить();
	Для каждого ТекущаяСтрока Из ДанныеПрофиля.ЭтапыРаботыСКандидатами Цикл
		НовСтрока = Объект.ЭтапыРаботыСКандидатами.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекущаяСтрока);
	КонецЦикла;
	
	Объект.Требования = ДанныеПрофиля.Требования;
	Объект.Обязанности = ДанныеПрофиля.Обязанности;
	Объект.Условия = ДанныеПрофиля.Условия;
	
	УстановитьДоступностьОписанияВакансии(ЭтаФорма);
	ЗаполнитьОтображениеНастроекАнкет();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПозицииШтатногоРасписания(Позиция)
	Возврат Справочники.ШтатноеРасписание.ДанныеПозицииШтатногоРасписания(Позиция);
КонецФункции

&НаСервере
Процедура ОтметитьОткликиРассмотреннымиНаСервере(ВыбранныеОтклики)
	
	Отклики = ПодборПерсонала.ПустаяТаблицаОткликиКандидатов();
	
	Для Каждого ВыбранныйОтклик Из ВыбранныеОтклики Цикл
		ЗаполнитьЗначенияСвойств(Отклики.Добавить(), ВыбранныйОтклик);
	КонецЦикла;
	
	ПодборПерсонала.УстановитьОткликамКандидатовОтметкуРассмотрено(Отклики);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыСостоянияЗавершение(ВыбраннаяДата, ПараметрыОповещения) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяДата = ПараметрыОповещения.ДатаСостояния Тогда
		Возврат;
	КонецЕсли;
	
	НачатьИзменениеДатыСостояния(ВыбраннаяДата, Объект.Состояние, ПараметрыОповещения.ДатаСостояния);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеДатыСостояния(ДатаСостояния, Состояние, ПрежняяДатаСостояния)
	
	Если Не Модифицированность Тогда
		ИзменитьДатуСостоянияНаСервере(ДатаСостояния, Состояние, ПрежняяДатаСостояния);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(
		"Состояние, 
		|ДатаСостояния, 
		|ПрежняяДатаСостояния");
	ПараметрыОповещения.Состояние = Состояние;
	ПараметрыОповещения.ДатаСостояния = ДатаСостояния;
	ПараметрыОповещения.ПрежняяДатаСостояния = ПрежняяДатаСостояния;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ИзменитьДатуСостоянияПослеВопросаЗаписать", ЭтотОбъект, ПараметрыОповещения);
	
	ТекстВопроса = НСтр("ru = 'Данные вакансии не записаны.
                         |Для продолжения данные вакансии необходимо записать.'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуСостоянияПослеВопросаЗаписать(Ответ, ПараметрыОповещения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьДатуСостоянияНаСервере(ПараметрыОповещения.ДатаСостояния, ПараметрыОповещения.Состояние, ПараметрыОповещения.ПрежняяДатаСостояния);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуСостоянияНаСервере(ДатаСостояния, Состояние, ПрежняяДатаСостояния)
	
	Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	Справочники.Вакансии.УдалитьСостояние(Вакансии, ПрежняяДатаСостояния, Состояние);
	Справочники.Вакансии.УстановитьСостояние(Вакансии, ДатаСостояния, Состояние);
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ПриПолученииДанныхНаСервере();
	
	УстановитьПанельСостояния();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПрофиляДолжности(ПрофильДолжности)
	Возврат Справочники.ПрофилиДолжностей.ДанныеПрофиляДолжности(ПрофильДолжности);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименование(Форма)
	
	ПодборПерсоналаКлиентСервер.ЗаполнитьНаименованиеВакансии(Форма.Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	ПодразделениеДолжностьПриИзменении();
	ЗаполнитьНаименование(ЭтаФорма);
	ЗаполнитьИнформационнуюСтрокуЗанятости();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	ПодразделениеДолжностьПриИзменении();
	ЗаполнитьНаименование(ЭтаФорма);
	ЗаполнитьИнформационнуюСтрокуЗанятости();
КонецПроцедуры

&НаСервере
Процедура НазначениеНабораПриИзмененииНаСервере()
	ОбновитьСпособНабора();
	ЗаполнитьИнформационнуюСтрокуЗанятости();
КонецПроцедуры

&НаСервере
Процедура ПозицияПриИзмененииНаСервере()
	
	ДанныеПозиции = ДанныеПозицииШтатногоРасписания(Объект.Позиция);
	
	Объект.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	Объект.ПредполагаемыйДоход = ДанныеПозиции.ФОТ;
	Объект.Должность = ДанныеПозиции.Должность;
	
	ЗаполнитьНаименование(ЭтаФорма);
	
	ЗаполнитьИнформационнуюСтрокуЗанятости();
	
КонецПроцедуры

&НаКлиенте 
Процедура ПолучитьОткликиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОткликиССайтов();
	
КонецПроцедуры

&НаКлиенте 
Процедура ОпубликоватьНаСайтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОткликиССайтов()
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;

	МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтовКлиент");
	
	МодульКлиент.ПолучитьОтклики(Объект.Ссылка);
	
	Элементы.ОткликиКандидатов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьВакансиюНаСайте(ДополнительныеПараметры)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Возврат;
	КонецЕсли;

	МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтовКлиент");
	МодульКлиент.ОпубликоватьНаСайте(ЭтотОбъект, ДополнительныеПараметры.ИмяКоманды, СоответствиеКомандИСайтов, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКомандыПубликацииВакансий()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтов");
		Модуль.ВакансииПриПолученииДанныхНаСервере(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияИзмененыНастройкиДоступаКСайтам()
	
	КоличествоЭлементов = Элементы.Публикации.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаОпубликовать.ПодчиненныеЭлементы.Количество();
	ЭлементыДляУдаления = Новый Массив;
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		ЭлементыДляУдаления.Добавить(Элементы.Публикации.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаОпубликовать.ПодчиненныеЭлементы.Получить(Индекс));			
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
	СоответствиеКомандИСайтов = Новый ФиксированноеСоответствие(Новый Соответствие);
	
	СоздатьКомандыПубликацииВакансий();

КонецПроцедуры         

&НаКлиенте
Процедура ОплатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда 
		Отказ = Истина;
		ОткрытьФорму("Документ.РасходыНаИсточникИнформацииОКандидатах.ФормаОбъекта", Новый Структура("Основание", ВакансияСсылка));		
	КонецЕсли;	
КонецПроцедуры

#Область ДобавлениеХарактеристик

&НаСервере
Процедура ДобавитьХарактеристикиИзДействийНаСервере(МассивДобавленныхДействий) Экспорт
	
	ДобавляемыеХарактеристики = ХарактеристикиПерсонала.МассивСтруктурХарактеристикСоЗначениямиИзДействий(МассивДобавленныхДействий);
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиСоЗначениями(Характеристики, ЗначенияХарактеристики, ДобавляемыеХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикиПерсоналаНаСервере(НовыеХарактеристики, ДополнительныеПараметры) Экспорт
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиВТабличнуюЧасть(ЭтаФорма, НовыеХарактеристики, ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ДанныеПрофиляСовпадают(Знач ДанныеВакансии, Знач ДанныеПрофиля)
	
	Если ДанныеВакансии.Количество() <> ДанныеПрофиля.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИндексСтроки = 0;
	Для каждого ТекущаяСтрока Из ДанныеПрофиля Цикл
		Для каждого ТекущаяКолонка Из ТекущаяСтрока Цикл
			Если ДанныеВакансии[ИндексСтроки][ТекущаяКолонка.Ключ] <> ТекущаяСтрока[ТекущаяКолонка.Ключ] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обработчик оповещения о закрытии формы настройки вопросов для собеседования.
// Устанавливает сформированный шаблон анкеты для текущей строки этапов работы с кандидатами.
//
// Параметры 
//	Результат - СправочникСсылка.ШаблоныАнкет, Неопределено - ссылка на сформированный шаблон анкеты. 
//	ДополнительныеПараметры - Структура - структура дополнительных параметров, содержит текущую строку этапа работы с кандидатами.
//
&НаКлиенте
Процедура НастройкаВопросовДляСобеседованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.ШаблонАнкеты = Результат;
	ПредставлениеАнкеты = НСтр("ru = 'Без анкеты'");
	Если ЗначениеЗаполнено(Результат) Тогда
		ВопросовВШаблоне = ВопросовВШаблонеАнкеты(Результат);
		ПредставлениеАнкеты = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Анкета (%1 вопрос);;Анкета (%1 вопроса);Анкета (%1 вопросов);Анкета (%1 вопроса)'"), 
			ВопросовВШаблоне);
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущиеДанные.НастройкаАнкеты = ПредставлениеАнкеты;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьШаблоныАнкетЭтаповРаботыСКандидатами()
	
	Для каждого СтрокаЭтапаРаботы Из Объект.ЭтапыРаботыСКандидатами Цикл
		Если Не ЗначениеЗаполнено(СтрокаЭтапаРаботы.ШаблонАнкеты) Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлементСсылка = КопияШаблонаАнкеты(СтрокаЭтапаРаботы.ШаблонАнкеты, Объект.ПрофильДолжности, Объект.Ссылка);
		СтрокаЭтапаРаботы.ШаблонАнкеты = НовыйЭлементСсылка;
	КонецЦикла;
	
КонецПроцедуры

// Копирует шаблон анкеты и настройки вопросов для собеседования из профиля должности.
// Функция вызывается при переходе к произвольному заполнению вакансии, заполнявшейся из профиля.
//
// Параметры 
//	ЭлементКопирования - СправочникСсылка.ШаблоныАнкет - копируемый шаблон анкеты. 
//	ПрофильДолжности - СправочникСсылка.ПрофилиДолжностей - профиль должности, из которого копируется шаблон анкеты и настройки.
//	Вакансия - СправочникСсылка.Вакансии - ссылка на текущий объект.
//
// ВозвращаемоеЗначение:
//   СправочникСсылка.ШаблоныАнкет - ссылка на новый шаблон анкеты.
//
&НаСервереБезКонтекста
Функция КопияШаблонаАнкеты(ЭлементКопирования, ПрофильДолжности, Вакансия)
	
	НачатьТранзакцию();
	
	Попытка
	
		ШаблонАнкетыОбъект = Справочники.ШаблоныАнкет.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(ШаблонАнкетыОбъект, ЭлементКопирования, "ПометкаУдаления, Наименование, Заголовок, Вступление, Заключение");
		ШаблонАнкетыОбъект.УстановитьСсылкуНового(Справочники.ШаблоныАнкет.ПолучитьСсылку());
		ШаблонАнкетыОбъект.РедактированиеШаблонаЗавершено = Ложь;
		ШаблонАнкетыОбъект.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВопросыШаблонаАнкеты.Ссылка КАК Ссылка,
			|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования,
			|	ВопросыШаблонаАнкеты.ЭлементарныйВопрос
			|ПОМЕСТИТЬ ВТВопросы
			|ИЗ
			|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
			|		ПО ВопросыШаблонаАнкеты.Ссылка = ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты
			|ГДЕ
			|	ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Вопросы.Ссылка КАК Ссылка,
			|	Вопросы.Ссылка.Владелец КАК Владелец,
			|	Вопросы.Ссылка.Родитель КАК Родитель,
			|	Вопросы.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
			|	Вопросы.Ссылка.Код КАК Код,
			|	Вопросы.Ссылка.Наименование КАК Наименование,
			|	Вопросы.Ссылка.Формулировка КАК Формулировка,
			|	Вопросы.Ссылка.Обязательный КАК Обязательный,
			|	Вопросы.Ссылка.ТипВопроса КАК ТипВопроса,
			|	Вопросы.Ссылка.ТипТабличногоВопроса КАК ТипТабличногоВопроса,
			|	Вопросы.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
			|	Вопросы.Ссылка.РодительВопрос КАК РодительВопрос,
			|	Вопросы.Ссылка.Заметки КАК Заметки,
			|	Вопросы.Ссылка.Подсказка КАК Подсказка,
			|	Вопросы.Ссылка.СпособОтображенияПодсказки КАК СпособОтображенияПодсказки,
			|	Вопросы.Ссылка.СоставТабличногоВопроса.(
			|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
			|		НомерСтроки КАК НомерСтроки
			|	) КАК СоставТабличногоВопроса,
			|	Вопросы.Ссылка.ПредопределенныеОтветы.(
			|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
			|		Ответ КАК Ответ,
			|		НомерСтроки КАК НомерСтроки
			|	) КАК ПредопределенныеОтветы,
			|	Вопросы.Ссылка.СоставКомплексногоВопроса.(
			|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
			|		НомерСтроки КАК НомерСтроки
			|	) КАК СоставКомплексногоВопроса,
			|	Вопросы.ВопросДляСобеседования
			|ИЗ
			|	ВТВопросы КАК Вопросы
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка ИЕРАРХИЯ,
			|	Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Вакансия КАК Объект,
			|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
			|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
			|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
			|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
			|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
			|	НастройкаВопросовДляСобеседования.Балл,
			|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
			|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования
			|ИЗ
			|	ВТВопросы КАК Вопросы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
			|		ПО (ВЫБОР
			|				КОГДА Вопросы.ВопросДляСобеседования ЕСТЬ NULL 
			|					ТОГДА Вопросы.ЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос
			|							И НастройкаВопросовДляСобеседования.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
			|				ИНАЧЕ Вопросы.ВопросДляСобеседования = НастройкаВопросовДляСобеседования.ВопросДляСобеседования
			|			КОНЕЦ)
			|			И (НастройкаВопросовДляСобеседования.Объект = &Объект)
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
			|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
			|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
			|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
			|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
			|	НастройкаВопросовДляСобеседования.Балл,
			|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
			|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования";
		
		Запрос.УстановитьПараметр("ШаблонАнкеты", ЭлементКопирования);
		Запрос.УстановитьПараметр("Объект", ПрофильДолжности);
		Запрос.УстановитьПараметр("Вакансия", Вакансия);
		
		Результаты = Запрос.ВыполнитьПакет();
		Если Результаты[1].Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		НастройкаВопросовДляСобеседования = Результаты[2].Выгрузить();
		
		ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(ШаблонАнкетыОбъект.Ссылка, Выборка, НастройкаВопросовДляСобеседования);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ШаблонАнкетыОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, Выборка, НастройкаВопросовДляСобеседования, Родитель = Неопределено)
	
	ВопросыСУсловием = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка, "Наименование, Код, Формулировка");
			
		Иначе
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьЭлемент();
			
			СсылкаНового = Справочники.ВопросыШаблонаАнкеты.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка,, "Владелец, Родитель, СоставТабличногоВопроса, ПредопределенныеОтветы, Код, РодительВопрос");
			СоставТабличногоВопроса = Выборка.СоставТабличногоВопроса.Выгрузить();
			СоставТабличногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставТабличногоВопроса.Загрузить(СоставТабличногоВопроса);
			ПредопределенныеОтветы = Выборка.ПредопределенныеОтветы.Выгрузить();
			ПредопределенныеОтветы.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.ПредопределенныеОтветы.Загрузить(ПредопределенныеОтветы);
			СоставКомплексногоВопроса = Выборка.СоставКомплексногоВопроса.Выгрузить();
			СоставКомплексногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставКомплексногоВопроса.Загрузить(СоставКомплексногоВопроса);
			
			Если Выборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.ВопросСУсловием Тогда
				ВопросыСУсловием.Вставить(Выборка.Ссылка, СсылкаНового);
			КонецЕсли;
			
			Если НЕ Выборка.РодительВопрос.Пустая() Тогда
				НовыйЭлемент.РодительВопрос = ВопросыСУсловием.Получить(Выборка.РодительВопрос);
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЭлемент.Владелец = Ссылка;
		НовыйЭлемент.Родитель = ?(Родитель = Неопределено, Справочники.ВопросыШаблонаАнкеты.ПустаяСсылка(), Родитель);
		НовыйЭлемент.Записать();
		
		Если ЗначениеЗаполнено(Выборка.ВопросДляСобеседования) Тогда
			
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Выборка.ВопросДляСобеседования);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
			
				НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(СтрокиНастройкаВопросовДляСобеседования[0].Объект);
				НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Выборка.ВопросДляСобеседования);
				Для каждого СтрокаТаблицы Из СтрокиНастройкаВопросовДляСобеседования Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
					НоваяЗапись.Подразделение = НоваяЗапись.Объект.Подразделение;
				КонецЦикла;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			// Запись вопросов для собеседования шаблонов анкет
			Запись = РегистрыСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет.СоздатьМенеджерЗаписи();
			Запись.ВопросШаблонаАнкеты = НовыйЭлемент.Ссылка;
			Запись.ВопросДляСобеседования = Выборка.ВопросДляСобеседования;
			Запись.Записать();
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЭлементарныйВопрос) Тогда
			
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Справочники.ВопросыДляСобеседования.ПустаяСсылка());
			СтруктураПоиска.Вставить("ЭлементарныйВопрос", Выборка.ЭлементарныйВопрос);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
			
				НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(СтрокиНастройкаВопросовДляСобеседования[0].Объект);
				НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Справочники.ВопросыДляСобеседования.ПустаяСсылка());
				НаборЗаписей.Отбор.ЭлементарныйВопрос.Установить(Выборка.ЭлементарныйВопрос);
				Для каждого СтрокаТаблицы Из СтрокиНастройкаВопросовДляСобеседования Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
					НоваяЗапись.Подразделение = НоваяЗапись.Объект.Подразделение;
				КонецЦикла;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ПодчиненнаяВыборка.Количество() > 0 Тогда
			ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, ПодчиненнаяВыборка, НастройкаВопросовДляСобеседования, НовыйЭлемент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизЛицоКандидата(Кандидат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кандидат, "ФизическоеЛицо");
	
КонецФункции

&НаКлиенте
Процедура ОтчетПоСравнениюХарактеристик(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыОткрытия.Вставить("Вакансия", Объект.Ссылка);	
		ВыделенныеСтроки = Элементы.Кандидаты.ВыделенныеСтроки;
		СписокФизЛиц = Новый Массив;
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			ФизЛицо = ФизЛицоКандидата(ТекущаяСтрока);
			Если СписокФизЛиц.Найти(ФизЛицо) = Неопределено Тогда
				СписокФизЛиц.Добавить(ФизЛицо);
			КонецЕсли;
		КонецЦикла;
		Если СписокФизЛиц.Количество() = 1 Тогда
			СписокФизЛиц.Очистить();
		КонецЕсли;
		ПараметрыОткрытия.Вставить("СписокФизЛиц", СписокФизЛиц);
	КонецЕсли;
	ОткрытьФорму("Обработка.СравнениеХарактеристикКандидатов.Форма", ПараметрыОткрытия,, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьХарактеристикиВТаблицы()
	
	ХарактеристикиПерсоналаФормы.ПрочитатьХарактеристикиВТаблицы(Объект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВопросовВШаблонеАнкеты(ШаблонАнкеты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВопросыШаблонаАнкеты.Ссылка) КАК КоличествоВопросов,
		|	ВопросыШаблонаАнкеты.Владелец КАК ШаблонАнкеты
		|ИЗ
		|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|ГДЕ
		|	ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты
		|	И НЕ ВопросыШаблонаАнкеты.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВопросыШаблонаАнкеты.Владелец";
	Запрос.УстановитьПараметр("ШаблонАнкеты", ШаблонАнкеты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоВопросов;
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтображениеНастроекАнкет() Экспорт
	
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	Если Не ИспользоватьЭлектронноеИнтервью Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТекущаяСтрока Из Объект.ЭтапыРаботыСКандидатами Цикл
		ТекущаяСтрока.НастройкаАнкеты = НСтр("ru = 'Без анкеты'");
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонАнкеты) Тогда
			ВопросовВШаблоне = ВопросовВШаблонеАнкеты(ТекущаяСтрока.ШаблонАнкеты);
			ТекущаяСтрока.НастройкаАнкеты = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';Анкета (%1 вопрос);;Анкета (%1 вопроса);Анкета (%1 вопросов);Анкета (%1 вопроса)'"), 
				ВопросовВШаблоне);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СпособНабораПриИзмененииНаСервере()
	ОбновитьСпособНабора();
	УстановитьВидимостьИнформационнойСтрокиЗанятости();
	ЗаполнитьИнформационнуюСтрокуЗанятости();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособНабора()
	
	ЭтоМассовая = Объект.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор;
	
	Если Не ЭтоМассовая Тогда 
		Объект.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания;
	КонецЕсли;
	
	НаПозицию = Объект.НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания;
	
	Если НаПозицию Тогда 
		Если ЗначениеЗаполнено(ПозицияПредыдущееЗначение) Тогда 
			Объект.Позиция = ПозицияПредыдущееЗначение;
			ПозицияПредыдущееЗначение = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПричинаОткрытияПредыдущееЗначение) Тогда 
			Объект.ПричинаОткрытия = ПричинаОткрытияПредыдущееЗначение;
			ПричинаОткрытияПредыдущееЗначение = Неопределено;
		КонецЕсли;	
	Иначе 
		ПозицияПредыдущееЗначение = Объект.Позиция;
		Объект.Позиция = Неопределено;
		ПричинаОткрытияПредыдущееЗначение = Объект.ПричинаОткрытия;
		Объект.ПричинаОткрытия = Неопределено;
	КонецЕсли;
	
	Элементы.НазначениеНабораДолжностьПодразделение.ТолькоПросмотр = Не ЭтоМассовая;
	
	Элементы.Позиция.Доступность = НаПозицию;
	
	Элементы.Должность.ТолькоПросмотр = НаПозицию;
	Элементы.Подразделение.ТолькоПросмотр = НаПозицию;
	
КонецПроцедуры	

&НаСервере
Процедура ПодразделениеДолжностьПриИзменении()
	
	Если Не ЗначениеЗаполнено(ПозицияПредыдущееЗначение) Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеПозиции = ДанныеПозицииШтатногоРасписания(ПозицияПредыдущееЗначение);
	
	Если ДанныеПозиции.Должность <> Объект.Должность
		ИЛИ ДанныеПозиции.МестоВСтруктуреПредприятия <> Объект.Подразделение Тогда 
		ПозицияПредыдущееЗначение = Неопределено;
		ПричинаОткрытияПредыдущееЗначение = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДействийСотрудников(СписокДействий)
	
	ДеревоДействий = ЭлектронноеИнтервью.ДеревоДействийСотрудников(СписокДействий);
	ЗначениеВДанныеФормы(ДеревоДействий, ДействияСотрудниковДерево);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыПечатиОписанияЗавершение(Ответ, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вакансия", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Вакансии.Форма.ВариантыОписания", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораШаблона(Вакансия, ПередаваемыеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_СформироватьСообщение", ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборПерсоналаКлиент"), ПередаваемыеПараметры);
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(Оповещение, , Вакансия)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВакансиюЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры = ПодборПерсоналаКлиент.ПараметрыФормированияПисьма(УникальныйИдентификатор);
	ДополнительныеПараметры.ИдентификаторПечатнойФормы = ПодборПерсоналаКлиент.ИдентификаторПечатнойФормы(ПараметрыВыполнения.ИмяКоманды);
	ДополнительныеПараметры.Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШаблоныСообщений") Тогда
		ОткрытьФормуВыбораШаблона(Объект.Ссылка, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("ВывестиСписокПредметов");
		ПодборПерсоналаКлиент.СформироватьСообщениеБезШаблона(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяСсылкойЗавершение(Ответ, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПодборПерсоналаКлиент.ПараметрыФормированияПисьма(УникальныйИдентификатор);
	ДополнительныеПараметры.Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШаблоныСообщений") Тогда
		Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
			ПодборПерсоналаКлиент.Подключаемый_СформироватьСообщение(ШаблонСообщения, ДополнительныеПараметры);
		Иначе
			ОткрытьФормуВыбораШаблона(Объект.Ссылка, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("ВывестиСписокСсылок");
		ПодборПерсоналаКлиент.СформироватьСообщениеБезШаблона(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВакансиюКандидатамЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = ПодборПерсоналаКлиент.СсылкиНаОбъектыВыделенныхСтрокСписка(Элементы.Кандидаты);
	
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = ПодборПерсоналаКлиент.ПараметрыФормированияПисьма(УникальныйИдентификатор);
	ДополнительныеПараметры.ИдентификаторПечатнойФормы = ПодборПерсоналаКлиент.ИдентификаторПечатнойФормы(ПараметрыВыполнения.ИмяКоманды);
	ДополнительныеПараметры.Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Кандидаты", Получатели);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОтправитьСообщенияКандидатам", ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборПерсоналаКлиент"), ДополнительныеПараметры);
	
	ШаблоныСообщенийКлиент.ВыбратьШаблон(Оповещение, , Объект.Ссылка)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставПодключаемыхКомандНаСервере()
	
	ПараметрыПодключаемыхКоманд = Неопределено;
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Элемент = Элементы.Найти(Команда.Имя);
		Если Элемент <> Неопределено И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		Команды.Удалить(Команда);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодборПерсонала.ОбновитьСоставКомандОтправкиВакансии(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыВариантовПечати()
	
	Элементы.ВариантыПечатиОписания.Видимость = ПодборПерсонала.ОписанияВакансийДоступны();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформационнойСтрокиЗанятости()
	
	Если Объект.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор Тогда
		Элементы.ИнформацияЗанятостиГруппа.Видимость = Ложь;
		Элементы.ПричинаОткрытияГруппа.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.ПричинаОткрытияГруппа.Видимость = Ложь;
	Элементы.ИнформацияЗанятостиГруппа.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационнуюСтрокуЗанятости()
	
	Если Объект.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор Тогда
		Возврат;
	КонецЕсли;
	
	ИнформационнаяСтрока = Неопределено;
	
	Справочники.Вакансии.ЗаполнитьИнформационнуюСтрокуЗанятости(
		ИнформационнаяСтрока, Объект.НазначениеНабора, Объект.Должность, Объект.Позиция, Объект.Подразделение, ПозицииМассовогоНабора);
	
	Элементы.ИнформацияЗанятости.Заголовок = ИнформационнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиПозицияМассовогоНабора(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки <> "ПозицииМассовогоНабора" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ПозицииМассовогоНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Отбор = Новый Структура("Ссылка");
	ПараметрыФормы.Отбор.Ссылка = Новый Массив(ПозицииМассовогоНабора);
	ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиСостоянияКандидатов(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Отбор = Новый Структура("Вакансия");
	ПараметрыФормы.Отбор.Вакансия = Объект.Ссылка;
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Этап_") <> 0 Тогда
		ПараметрыФормы.Отбор.Вставить("ЭтапРаботы", СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки));
	КонецЕсли;
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Решение_") <> 0 Тогда
		ПараметрыФормы.Отбор.Вставить("Состояние", СостояниеКандидатаРешениеПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Кандидаты.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеКандидатаЭтапСсылкаПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки)
	
	ИдентификаторЭтапа = Новый УникальныйИдентификатор(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Этап_", ""));
	ЭтапРаботы = Справочники.ЭтапыРаботыСКандидатами.ПолучитьСсылку(ИдентификаторЭтапа);
	
	Возврат ЭтапРаботы;
	
КонецФункции

&НаСервереБезКонтекста
Функция СостояниеКандидатаРешениеПоНавигационнойСтроке(НавигационнаяСсылкаФорматированнойСтроки)
	Возврат Перечисления.СостоянияСогласования[СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "СостояниеКандидата_Решение_", "")];
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформационнуюСтрокуКандидатов()
	
	ИнформационнаяСтрока = Неопределено;
	
	Справочники.Вакансии.ЗаполнитьИнформационнуюСтрокуКандидатов(
		ИнформационнаяСтрока, 
		Объект.Ссылка, 
		Объект.СпособНабора, 
		Объект.Позиция, 
		Объект.ДатаОткрытия, 
		ПозицииМассовогоНабора);
		
	Элементы.ИнформацияКандидатов.Заголовок = ИнформационнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещенияЭтаповРаботыСКандидатами(ИмяСобытия, Параметр, Источник)
	
	ОбрабатываемыеСобытия = Новый Массив;
	ОбрабатываемыеСобытия.Добавить("ЗапланированЭтапРаботыСКандидатом");
	ОбрабатываемыеСобытия.Добавить("ЗавершенЭтапРаботыСКандидатом");
	ОбрабатываемыеСобытия.Добавить("УтвержденыКандидаты");
	ОбрабатываемыеСобытия.Добавить("ОтклоненыКандидаты");
	ОбрабатываемыеСобытия.Добавить("ОтменаРешенияПоКандидату");
	
	Если ОбрабатываемыеСобытия.Найти(ИмяСобытия) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметр.Свойство("Кандидаты") Или Не Параметр.Свойство("Вакансии") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Вакансии.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьИнформационныеСтрокиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформационныеСтрокиНаСервере()
	
	ЗаполнитьИнформационнуюСтрокуЗанятости();
	ЗаполнитьИнформационнуюСтрокуКандидатов();
	Элементы.Кандидаты.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокКандидатов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Кандидаты.Отбор, "Вакансия", ВакансияСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Кандидаты, "Пользователь", Пользователи.АвторизованныйПользователь());
	Справочники.Кандидаты.УстановитьУсловноеОформлениеСпискаКандидатов(Кандидаты);
	
	ПоказыватьОдобренныхОтклоненныхКандидатов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Вакансия", "ПоказыватьОдобренныхОтклоненныхКандидатов");
	Если ПоказыватьОдобренныхОтклоненныхКандидатов = Неопределено Тогда
		ПоказыватьОдобренныхОтклоненныхКандидатов = Ложь;
	КонецЕсли;
	ПодборПерсоналаКлиентСервер.УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(Кандидаты, Не ПоказыватьОдобренныхОтклоненныхКандидатов, Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСохраняемойНастройки()
	
	Настройки = СохраняемыеНастройки();
	Настройки.ПоказыватьОдобренныхОтклоненныхКандидатов = Элементы.ПоказыватьОдобренныхОтклоненныхКандидатов.Пометка;
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СохраняемыеНастройки()
	
	Настройки = Новый Структура("ПоказыватьОдобренныхОтклоненныхКандидатов");
	Возврат Настройки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	Для Каждого КлючИЗначение Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Вакансия", КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#Область УправлениеСвойствами

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти
