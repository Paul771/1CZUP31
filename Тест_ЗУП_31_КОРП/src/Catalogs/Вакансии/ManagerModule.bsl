#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ДополнитьСоставКомандПечати(КомандыПечати);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Вакансии";
	КомандаПечати.Идентификатор = "Вакансия";
	КомандаПечати.Представление = ?(КомандыПечати.Количество() > 1, НСтр("ru = 'Вакансия'"), НСтр("ru = 'Печать'"));
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Вакансия'");
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "Вакансия");
	Если ПечатнаяФорма <> Неопределено Тогда
		
		ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Вакансия'");
		ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Вакансии.ПФ_MXL_Вакансия";
		ПечатнаяФорма.ТабличныйДокумент = ПечатьВакансии(МассивОбъектов, ОбъектыПечати, ПечатнаяФорма.ПолныйПутьКМакету);
		
	КонецЕсли;
	
	СформироватьДополнительныеПечатныеФормы(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	ЗаполнитьЗначенияРеквизитовШаблонаОтправкиОписания(Сообщение, ПредметСообщения, ДополнительныеПараметры);
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует данные указанной вакансии.
//
// Возвращаемое значение — структура
//
Функция ДанныеВакансии(Вакансия) Экспорт
	
	ДанныеВакансии = Новый Структура(
		"Вакансия,
		|Требования,
		|Обязанности,
		|Условия,
		|Позиция,
		|Должность,
		|Подразделение,
		|СпособНабора,
		|НазначениеНабора,
		|ДатаОткрытия,
		|ХарактеристикиПерсонала,
		|ДействияСотрудников,
		|ЭтапыРаботыСКандидатами");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Вакансии.Ссылка КАК Вакансия,
		|	Вакансии.Требования КАК Требования,
		|	Вакансии.Обязанности КАК Обязанности,
		|	Вакансии.Условия КАК Условия,
		|	Вакансии.Позиция КАК Позиция,
		|	Вакансии.Должность КАК Должность,
		|	Вакансии.Подразделение КАК Подразделение,
		|	Вакансии.СпособНабора КАК СпособНабора,
		|	Вакансии.НазначениеНабора КАК НазначениеНабора,
		|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
		|	Вакансии.ХарактеристикиПерсонала.(
		|		Характеристика КАК Характеристика,
		|		Значение КАК Значение,
		|		Вес КАК Вес,
		|		ТребуетсяПроверка КАК ТребуетсяПроверка,
		|		ТребуетсяОбучение КАК ТребуетсяОбучение
		|	) КАК ХарактеристикиПерсонала,
		|	Вакансии.ДействияСотрудников.(
		|		ДействиеСотрудника КАК ДействиеСотрудника
		|	) КАК ДействияСотрудников,
		|	Вакансии.ЭтапыРаботыСКандидатами.(
		|		НомерСтроки КАК Порядок,
		|		ЭтапРаботы КАК ЭтапРаботы,
		|		ШаблонАнкеты КАК ШаблонАнкеты,
		|		Комментарий КАК Комментарий
		|	) КАК ЭтапыРаботыСКандидатами
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Ссылка = &Вакансия");
		
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеВакансии, Выборка, , "ХарактеристикиПерсонала, ДействияСотрудников, ЭтапыРаботыСКандидатами");
	
	МассивХарактеристикиПерсонала = Новый Массив;
	ДействияСотрудников = Новый Массив;
	ЭтапыРаботыСКандидатами = Новый Массив;
	Если Выборка.Количество() > 0 Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью") Тогда
			ВыборкаХарактеристикиПерсонала = Выборка.ХарактеристикиПерсонала.Выбрать();
			Пока ВыборкаХарактеристикиПерсонала.Следующий() Цикл
				СтруктураСтроки = Новый Структура(
					"Характеристика,
					|Значение,
					|Вес,
					|ТребуетсяПроверка,
					|ТребуетсяОбучение");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ВыборкаХарактеристикиПерсонала);
				МассивХарактеристикиПерсонала.Добавить(СтруктураСтроки);
			КонецЦикла;
			ВыборкаДействияСотрудников = Выборка.ДействияСотрудников.Выбрать();
			Пока ВыборкаДействияСотрудников.Следующий() Цикл
				СтруктураСтроки = Новый Структура("ДействиеСотрудника");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ВыборкаДействияСотрудников);
				ДействияСотрудников.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;
		ВыборкаЭтапыРаботыСКандидатами = Выборка.ЭтапыРаботыСКандидатами.Выбрать();
		Пока ВыборкаЭтапыРаботыСКандидатами.Следующий() Цикл
			СтруктураСтроки = Новый Структура(
				"Порядок,
				|ЭтапРаботы,
				|ШаблонАнкеты,
				|Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ВыборкаЭтапыРаботыСКандидатами);
			ЭтапыРаботыСКандидатами.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	ДанныеВакансии.ХарактеристикиПерсонала = МассивХарактеристикиПерсонала;
	ДанныеВакансии.ДействияСотрудников = ДействияСотрудников;
	ДанныеВакансии.ЭтапыРаботыСКандидатами = ЭтапыРаботыСКандидатами;
	
	Возврат ДанныеВакансии;
	
КонецФункции

// Возвращает Истина, в случае, если набор по вакансии является массовым.
//
Функция СпособНабораМассовый(Вакансия) Экспорт
	
	ДанныеВакансии = ДанныеВакансии(Вакансия);
	Если ДанныеВакансии.СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.МассовыйНабор Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Регистрирует факт приостановки набора персонала для указанных вакансий
//
// Параметры
//	- Вакансии, Массив элементов 
//	- ДатаПриостановки, дата
//
Процедура ПриостановитьНабор(Вакансии, ДатаПриостановки) Экспорт
	УстановитьСостояние(Вакансии, ДатаПриостановки, Перечисления.СостоянияВакансии.Приостановлена);
КонецПроцедуры

// Регистрирует факт возобновления набора персонала для указанных вакансий
//
// Параметры
//	- Вакансии, Массив элементов 
//	- ДатаВозобновления, дата
//
Процедура ВозобновитьНабор(Вакансии, ДатаВозобновления) Экспорт
	УдалитьСостояние(Вакансии, ДатаВозобновления);
	УстановитьСостояние(Вакансии, ДатаВозобновления, Перечисления.СостоянияВакансии.Открыта);
КонецПроцедуры

// Отменяет набор по вакансиям
//
// Параметры
//	- Вакансии, Массив
//	- ДатаОтмены, дата
//
Процедура ОтменитьНабор(Вакансии, ДатаОтмены) Экспорт
	УстановитьСостояние(Вакансии, ДатаОтмены, Перечисления.СостоянияВакансии.Отменена);
КонецПроцедуры

// Закрывает вакансию (кандидат подобран).
//
// Параметры
//	- Вакансии, Массив
//	- ДатаЗакрытия, дата
//
Процедура ЗакрытьВакансии(Вакансии, ДатаЗакрытия) Экспорт
	УстановитьСостояние(Вакансии, ДатаЗакрытия, Перечисления.СостоянияВакансии.Закрыта);
КонецПроцедуры

// Массив вакансий, соответствующих указанному отбору.
//
// Параметры 
// - Отбор — структура, где ключ имя поля (реквизита справочника).
//
// Возвращаемое значение — массив вакансий.
//
Функция ВакансииПоОтбору(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВакансииПоОтбору(Запрос.МенеджерВременныхТаблиц, Отбор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансии.Вакансия
		|ИЗ
		|	ВТВакансииПоОтбору КАК Вакансии";
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Вакансии = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Вакансии.Добавить(Выборка.Вакансия);
	КонецЦикла;
	
	Возврат Вакансии;
	
КонецФункции

// Формирует временную таблицу с вакансиями, соответствующими отбору.
//
// Параметры
//	- МенеджерВременныхТаблиц
//	- Отбор - структура
//	- ТолькоРазрешенные - булево, если Истина, в таблицу будут включены вакансии, доступные текущему пользователю.
//
Процедура СоздатьВТВакансииПоОтбору(МенеджерВременныхТаблиц, Отбор, ТолькоРазрешенные = Истина) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Вакансии.Ссылка КАК Вакансия
		|ПОМЕСТИТЬ ВТВакансииПоОтбору
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	&УСЛОВИЕ";
	
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Условие = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ФрагментУсловия = "";
		Если Не ПустаяСтрока(Условие) Тогда
			ФрагментУсловия	= " И ";
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ШаблонУсловия = "Вакансии.%1 В (&%1)";
		Иначе
			ШаблонУсловия = "Вакансии.%1 = &%1";
		КонецЕсли;
		ФрагментУсловия = ФрагментУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, КлючИЗначение.Ключ);
		Условие = Условие + ФрагментУсловия;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УСЛОВИЕ", Условие);
	
	Запрос.Текст = ТекстЗапроса;
	Если Не ТолькоРазрешенные Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьОписаниеВакансийПоПрофилюДолжности(ПрофильДолжности, Требования, Обязанности, Условия, ХарактеристикиПерсонала, ДействияСотрудников, ЭтапыРаботыСКандидатами) Экспорт
	
	ОтборВакансий = Новый Структура(
		"ПрофильДолжности,
		|СоответствуетПрофилюДолжности");
	ОтборВакансий.ПрофильДолжности = ПрофильДолжности;
	ОтборВакансий.СоответствуетПрофилюДолжности = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	ВакансииПоОтбору = ВакансииПоОтбору(ОтборВакансий);
	УстановитьПривилегированныйРежим(Ложь);

	Для Каждого Вакансия Из ВакансииПоОтбору Цикл
		ВакансияОбъект = Вакансия.ПолучитьОбъект();
		
		ЗаписыватьВакансию = Ложь;

		ОбновитьХарактеристикиПерсоналаВакансии(ВакансияОбъект, ХарактеристикиПерсонала, ЗаписыватьВакансию);
		ОбновитьДействияСотрудниковВакансии(ВакансияОбъект, ДействияСотрудников, ЗаписыватьВакансию);
		ОбновитьЭтапыРаботыСКандидатамиВакансии(ВакансияОбъект, ЭтапыРаботыСКандидатами, ЗаписыватьВакансию);
		
		Если ВакансияОбъект.Требования <> Требования Тогда
			ВакансияОбъект.Требования = Требования;
			ЗаписыватьВакансию = Истина;
		КонецЕсли;
		Если ВакансияОбъект.Обязанности <> Обязанности Тогда
			ВакансияОбъект.Обязанности = Обязанности;
			ЗаписыватьВакансию = Истина;
		КонецЕсли;
		Если ВакансияОбъект.Условия <> Условия Тогда
			ВакансияОбъект.Условия = Условия;
			ЗаписыватьВакансию = Истина;
		КонецЕсли;
		
		Если Не ЗаписыватьВакансию Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ВакансияОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется внести изменение в описание вакансии «%1». 
				|В данный момент изменение невозможно, так как вакансия редактируется другим пользователем или в другой форме программы.'"),
				ВакансияОбъект.Наименование);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		ВакансияОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьХарактеристикиПерсоналаВакансии(ВакансияОбъект, ХарактеристикиПерсонала, ЗаписыватьВакансию)
		
	ИменаКолонок = "Характеристика,Значение,Вес,ТребуетсяПроверка,ТребуетсяОбучение,ВесЗначения";
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ХарактеристикиПерсонала, ХарактеристикиПерсонала, ИменаКолонок) Тогда
		ВакансияОбъект.ХарактеристикиПерсонала.Загрузить(ХарактеристикиПерсонала.Выгрузить());
		ЗаписыватьВакансию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДействияСотрудниковВакансии(ВакансияОбъект, ДействияСотрудников, ЗаписыватьВакансию)

	Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ДействияСотрудников, ДействияСотрудников, "ДействиеСотрудника", , Истина) Тогда
		ВакансияОбъект.ДействияСотрудников.Загрузить(ДействияСотрудников.Выгрузить());
		ЗаписыватьВакансию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЭтапыРаботыСКандидатамиВакансии(ВакансияОбъект, ЭтапыРаботыСКандидатами, ЗаписыватьВакансию)
		
	ИменаКолонок = "ЭтапРаботы,ШаблонАнкеты,Комментарий";
	
	Если Не ОбщегоНазначения.КоллекцииИдентичны(ВакансияОбъект.ЭтапыРаботыСКандидатами, ЭтапыРаботыСКандидатами, ИменаКолонок, , Истина) Тогда
		ВакансияОбъект.ЭтапыРаботыСКандидатами.Загрузить(ЭтапыРаботыСКандидатами.Выгрузить());
		ЗаписыватьВакансию = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураДанныхВакансии() Экспорт
	
	СтруктураДанныхВакансии = Новый Структура("
	| Наименование,
	| Позиция, 
	| Подразделение, 
	| ПрофильДолжности, 
	| ПредполагаемыйДоход, 
	| Ответственный, 
	| Заявитель, 
	| ДатаОткрытия, 
	| ПланируемаяДатаЗакрытия, 
	| Требования, 
	| Обязанности, 
	| Условия, 
	| ПричинаОткрытия"
	"",
	Справочники.ШтатноеРасписание.ПустаяСсылка(),
	Справочники.СтруктураПредприятия.ПустаяСсылка(),
	Справочники.ПрофилиДолжностей.ПустаяСсылка(),
	0,
	Справочники.Пользователи.ПустаяСсылка(),
	Справочники.Пользователи.ПустаяСсылка(),
	Дата(1, 1, 1), 
	Дата(1, 1, 1), 
	"",
	"",
	"",
	Справочники.ПричиныОткрытияВакансий.ПустаяСсылка());
	
	Возврат СтруктураДанныхВакансии;
	
КонецФункции

Функция СоответствиеИмениИСинонимаРеквизитовВакансий() Экспорт
	
	СоответствиеИмениИСинонимаРеквизитовВакансий = Новый Соответствие;
	
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Наименование", "Наименование");	
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Позиция", "Позиция");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Подразделение", "Подразделение");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ПрофильДолжности", "Профиль должности");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ПредполагаемыйДоход", "Предполагаемый доход");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Ответственный", "Ответственный");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Заявитель", "Заявитель");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ДатаОткрытия", "Дата открытия");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ПланируемаяДатаЗакрытия", "Планируемая дата закрытия");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Состояние", "Состояние");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ДатаСостояния", "Дата состояния");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Основание", "Основание");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Примечание", "Примечание");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("СоответствуетПрофилюДолжности", "Соответствует профилю должности");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Требования", "Требования");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Обязанности", "Обязанности");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Условия", "Условия");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Сложность", "Сложность");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("Приоритет", "Приоритет");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("ПричинаОткрытия", "Причина открытия");
	СоответствиеИмениИСинонимаРеквизитовВакансий.Вставить("УточнениеНаименования", "Уточнение наименования");
	
	Возврат СоответствиеИмениИСинонимаРеквизитовВакансий;
	
КонецФункции

Функция ВакансииОрганизации(Организация, Вакансии = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вакансии.Ссылка КАК Вакансия
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Позиция.Владелец = &Организация";

	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ТипЗнч(Вакансии) = Тип("Массив") Тогда 
		
		Запрос.Текст = Запрос.Текст + "
		|	И Вакансии.Ссылка В(&Вакансии)";
		
		Запрос.УстановитьПараметр("Вакансии", Вакансии);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вакансия");
	
	Возврат Результат;
	
КонецФункции	

Функция ЕстьДругиеВакансииПоКомбинацииДолжностьПодразделение(Должность, Подразделение, Заявка = Неопределено, Вакансия = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(Должность) Или Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("Основание", Заявка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.СпособНабора = ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.МассовыйНабор)
		|	И НЕ Вакансии.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Закрыта), ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Отменена))
		|	И Вакансии.Должность = &Должность
		|	И Вакансии.Подразделение = &Подразделение
		|	И Вакансии.Ссылка <> &Вакансия
		|	И Вакансии.Основание <> &Основание";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗаполнитьИнформационнуюСтрокуЗанятости(ИнформационнаяСтрока, НазначениеНабора, Должность, Позиция, Подразделение, ПозицииМассовогоНабора) Экспорт
	
	ИнформационнаяСтрока = Неопределено;
	Если Не ЗначениеЗаполнено(Должность) Тогда
		Возврат;
	КонецЕсли;
	
	Позиции = Новый Массив;
	КоличествоПозиций = 0;
	КоличествоСтавок = 0;
	ЗанятоСтавок = 0;
	
	ЗаполнитьПозицииПоДолжностиПодразделению(Позиции, КоличествоПозиций, КоличествоСтавок, НазначениеНабора, Должность, Позиция, Подразделение);
	ЗаполнитьЗанятоСтавокПоПозициям(Позиции, ЗанятоСтавок);
	
	ПозицииМассовогоНабора = Новый ФиксированныйМассив(Позиции);
	
	ВакантноСтавок = КоличествоСтавок - ЗанятоСтавок;
	
	ЧастиНадписи = Новый Массив;
	
	ТекстВакантноСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';Вакантна %1 ставка;;Вакантно %1 ставки;Вакантно %1 ставок;Вакантно %1 ставки'"), 
		ВакантноСтавок);
	ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстВакантноСтавок, Новый Шрифт(, , Истина)));
	
	Если НазначениеНабора <> Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания Тогда
		ТекстПозиций = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';по %1 позиции;;по %1 позициям;по %1 позициям;по %1 позициям'"), 
			КоличествоПозиций);
		ЧастиНадписи.Добавить(" ");	
		ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстПозиций, Новый Шрифт(, , Истина), , , "ПозицииМассовогоНабора"));
	КонецЕсли;
	
	ТекстКоличествоСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';запланирована %1 ставка;;запланировано %1 ставки;запланировано %1 ставок;запланировано %1 ставки'"), 
		КоличествоСтавок);
	ЧастиНадписи.Добавить(" (");	
	ЧастиНадписи.Добавить(ТекстКоличествоСтавок);
	
	ТекстЗанятоСтавок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';занята %1 ставка;;занято %1 ставки;занято %1 ставок;занято %1 ставки'"), 
		ЗанятоСтавок);
	ЧастиНадписи.Добавить(", ");	
	ЧастиНадписи.Добавить(ТекстЗанятоСтавок);
	ЧастиНадписи.Добавить(")");	
		
	ИнформационнаяСтрока = Новый ФорматированнаяСтрока(ЧастиНадписи);
	
КонецПроцедуры

Процедура ЗаполнитьИнформационнуюСтрокуКандидатов(ИнформационнаяСтрока, Вакансия, СпособНабора, Позиция, ДатаОткрытия, ПозицииМассовогоНабора) Экспорт
	
	СтатистикаСостояний = СтатистикаСостоянийКандидатов(Вакансия, СпособНабора, Позиция, ДатаОткрытия, ПозицииМассовогоНабора);
	
	ЧастиНадписи = Новый Массив;
	Для Каждого СтрокаСостояния Из СтатистикаСостояний Цикл
		Если ЧастиНадписи.Количество() > 0 Тогда
			ЧастиНадписи.Добавить(", ");
		КонецЕсли;
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", СтрокаСостояния.ТекущееСостояние, СтрокаСостояния.КоличествоКандидатов);
		НавигационнаяСтрока = СтрокаНавигационнойСсылкиСостоянияКандидатов(СтрокаСостояния.ТекущееСостояние);
		ЧастиНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстСостояния, , , , НавигационнаяСтрока));
	КонецЦикла;
		
	ИнформационнаяСтрока = Новый ФорматированнаяСтрока(ЧастиНадписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗапись(СтруктураПараметров, АдресХранилища) Экспорт
	
	СправочникОбъект = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(СтруктураПараметров.ДанныеОбъекта);
	ДесериализоватьДанныеФормы(СтруктураПараметров.ДанныеФормы);
	
	НачатьТранзакцию();
	Попытка
		СправочникОбъект.Записать();
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			СтруктураПараметров.ДанныеФормы, 
			"СостоянияВакансий", 
			СправочникОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Подбор персонала. Запись вакансии'");
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеОбъекта = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(СправочникОбъект);
	ПоместитьВоВременноеХранилище(ДанныеОбъекта, АдресХранилища);
	
КонецПроцедуры

Функция СериализоватьДанныеФормы(Форма) Экспорт
	
	Данные = Новый Структура(
		"СостоянияВакансий,
		|СостоянияВакансийНаборЗаписей,
		|СостоянияВакансийНаборЗаписейПрочитан,
		|СостоянияВакансийНоваяЗапись,
		|СостоянияВакансийПрежняя");
	
	ЗаполнитьЗначенияСвойств(Данные, Форма);
	
	МенеджерЗаписи = ДанныеФормыВЗначение(Форма["СостоянияВакансий"], Тип("РегистрСведенийМенеджерЗаписи.СостоянияВакансий"));
	Данные["СостоянияВакансий"] = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, Метаданные.РегистрыСведений.СостоянияВакансий);
	
	НаборЗаписей = ДанныеФормыВЗначение(Форма["СостоянияВакансийНаборЗаписей"], Тип("РегистрСведенийНаборЗаписей.СостоянияВакансий"));
	Данные["СостоянияВакансийНаборЗаписей"] = ЗарплатаКадры.СериализоватьОбъектВДвоичныеДанные(НаборЗаписей);
	
	Возврат Данные;
	
КонецФункции

Процедура ДесериализоватьДанныеФормы(ДанныеФормы)
	
	НаборЗаписей = ЗарплатаКадры.ДесериализоватьОбъектИзДвоичныхДанных(ДанныеФормы["СостоянияВакансийНаборЗаписей"]);
	ДанныеФормы["СостоянияВакансийНаборЗаписей"] = НаборЗаписей.Выгрузить();
	
КонецПроцедуры

Функция ПечатьВакансии(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОписаниеВакансии";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	ДанныеПечати = ПодборПерсонала.ОписанияВакансийПоУмолчанию(МассивОбъектов);
	
	Для Каждого СтрокаДанных Из ДанныеПечати Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		Макет.Параметры.Заполнить(СтрокаДанных);
		
		ТабличныйДокумент.Вывести(Макет);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаДанных.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьВариантаВакансии(ИдентификаторОписания, МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = СтрШаблон("ПараметрыПечати_ОписаниеВакансии_%1", ИдентификаторОписания);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	
	Выборка = ПодборПерсонала.ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, МассивОбъектов);
	
	Пока Выборка.СледующийПоЗначениюПоля("Вакансия") Цикл
		
		ДанныеПечати = Новый Структура();
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Пока Выборка.Следующий() Цикл
			ДанныеПечати.Вставить(Выборка.ПолеДанных, Выборка.Значение);
		КонецЦикла;
		
		Макет.Параметры.Заполнить(ДанныеПечати);
		
		ТабличныйДокумент.Вывести(Макет);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Вакансия);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура УстановитьСостояние(Вакансии, Дата, Состояние) Экспорт
	
	ДатаСостояния = НачалоДня(Дата);
	Если Состояние <> Перечисления.СостоянияВакансии.Открыта Тогда
		ДатаСостояния = КонецДня(Дата);
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияВакансий.Период,
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияВакансий КАК СостоянияВакансий
		|ГДЕ
		|	СостоянияВакансий.Период <> &Дата
		|	И СостоянияВакансий.Вакансия В(&Вакансии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("Дата", ДатаСостояния);
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.СостоянияВакансий.СоздатьНаборЗаписей();
	
	// Добавляем строку в наборы для тех вакансий, для которых они уже существуют
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Вакансия") Цикл
		НаборЗаписей.Очистить();
		ТекущееСостояние = Неопределено;
		ДатаТекущегоСостояния = Неопределено;
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			ТекущееСостояние = Выборка.Состояние;
			ДатаТекущегоСостояния = Выборка.Период;
		КонецЦикла;
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ДатаСостояния;
		СтрокаНабора.Вакансия = Выборка.Вакансия;
		СтрокаНабора.Состояние = Состояние;
		НаборЗаписей.Отбор.Вакансия.Установить(Выборка.Вакансия);
		НаборЗаписей.Записать();
		Если ДатаСостояния > ДатаТекущегоСостояния Тогда
			ТекущееСостояние = Состояние;
		КонецЕсли;
		// Устанавливаем состояние для вакансии
		ВакансияОбъект = Выборка.Вакансия.ПолучитьОбъект();
		ВакансияОбъект.Состояние = ТекущееСостояние;
		ВакансияОбъект.ДатаСостояния = ДатаСостояния;
		ВакансияОбъект.Записать();
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Вакансии, Выборка.Вакансия);
	КонецЦикла;
	
	// Для всех остальных вакансий, добавляем единственную строку о состоянии в набор и записываем его.
	Для Каждого Вакансия Из Вакансии Цикл
		НаборЗаписей.Очистить();
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ДатаСостояния;
		СтрокаНабора.Вакансия = Вакансия;
		СтрокаНабора.Состояние = Состояние;
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Записать();
		// Устанавливаем состояние для вакансии
		ВакансияОбъект = Вакансия.ПолучитьОбъект();
		ВакансияОбъект.Состояние = Состояние;
		ВакансияОбъект.ДатаСостояния = НачалоДня(ДатаСостояния);
		ВакансияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСостояние(Вакансии, Дата, Состояние = Неопределено) Экспорт
	
	ДатаСостояния = НачалоДня(Дата);
	Если Состояние <> Перечисления.СостоянияВакансии.Открыта Тогда
		ДатаСостояния = КонецДня(Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("Дата", ДатаСостояния);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияВакансий.Период КАК Период,
		|	СостоянияВакансий.Вакансия КАК Вакансия,
		|	СостоянияВакансий.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияВакансий КАК СостоянияВакансий
		|ГДЕ
		|	СостоянияВакансий.Период = &Дата
		|	И СостоянияВакансий.Вакансия В(&Вакансии)
		|	И СостоянияВакансий.Состояние = &Состояние
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияВакансий.Вакансия,
		|	СостоянияВакансий.Период";
	Если Состояние = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СостоянияВакансий.Состояние = &Состояние", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СостоянияВакансий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Вакансия.Установить(Выборка.Вакансия);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСоставКомандПечати(КомандыПечати)
	
	Выборка = ПодборПерсонала.ВыборкаСоставаОписанийВакансий(, Истина);
	
	Номер = 1;
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторОписания") Цикл
		
		Вакансии = Новый Массив;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Справочник.Вакансии";
		КомандаПечати.Идентификатор = Выборка.ИдентификаторОписания;
		КомандаПечати.Представление = Выборка.МестоПубликации;
		КомандаПечати.ЗаголовокФормы = КомандаПечати.Представление;
		КомандаПечати.Порядок = 10 * Номер;
		
		Пока Выборка.Следующий() Цикл
			Вакансии.Добавить(Выборка.Вакансия);
		КонецЦикла;
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "Ссылка", Вакансии, ВидСравненияКомпоновкиДанных.ВСписке);
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДополнительныеПечатныеФормы(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати)
	
	Выборка = ПодборПерсонала.ВыборкаСоставаОписанийВакансий(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
		
		ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Выборка.ИдентификаторОписания);
		Если ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма.СинонимМакета = Выборка.МестоПубликации;
			ПечатнаяФорма.ПолныйПутьКМакету = "Справочник.Вакансии.ПФ_MXL_Вакансия";
			ПечатнаяФорма.ТабличныйДокумент = ПечатьВариантаВакансии(Выборка.ИдентификаторОписания, МассивОбъектов, ОбъектыПечати, ПечатнаяФорма.ПолныйПутьКМакету);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеСпискаПредметов(СписокПредметов, ДополнительныеПараметры) Экспорт
	
	ПредставлениеСписка = "";
	Выборка = ВыборкаПредставленийВакансий(СписокПредметов, ДополнительныеПараметры.ИдентификаторПечатнойФормы);
	ВФорматеHTML = ДополнительныеПараметры.ВФорматеHTML;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(ПредставлениеСписка) Тогда
			ПредставлениеСписка = СтрШаблон("%1%2", ПредставлениеСписка, ?(ВФорматеHTML, "<p>", Символы.ПС));
		КонецЕсли;
		ПредставлениеСписка = СтрШаблон("%1%2", ПредставлениеСписка, Выборка.ПредставлениеВакансии);
		
	КонецЦикла;
	
	Возврат ПредставлениеСписка;
	
КонецФункции

Функция СписокСсылокНаПредметы(СписокПредметов, ДополнительныеПараметры) Экспорт
	
	СписокСсылок = "";
	
	АдресПубликацииВИнтернете = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	АдресПубликацииВСети = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВЛокальнойСети();
	
	СсылкаНаБазу = ?(ПустаяСтрока(АдресПубликацииВИнтернете), ?(ПустаяСтрока(АдресПубликацииВСети), ПолучитьНавигационнуюСсылкуИнформационнойБазы(), АдресПубликацииВСети), АдресПубликацииВИнтернете);
	Выборка = ВыборкаПредставленийВакансий(СписокПредметов, ДополнительныеПараметры.ИдентификаторПечатнойФормы);
	ВФорматеHTML = ДополнительныеПараметры.ВФорматеHTML;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(СписокСсылок) Тогда
			СписокСсылок = СтрШаблон("%1%2", СписокСсылок, ?(ВФорматеHTML, "<p>", Символы.ПС));
		КонецЕсли;
		
		Если ВФорматеHTML Тогда
			СписокСсылок = СтрШаблон("%1<a href = ""%2#%3"">%4</a>%5", СписокСсылок, СсылкаНаБазу, ПолучитьНавигационнуюСсылку(Выборка.Вакансия), Выборка.ПредставлениеВакансии);
		Иначе
			СписокСсылок = СтрШаблон(НСтр("ru = '%1%2 по ссылке %3#%4'"), СписокСсылок, Выборка.ПредставлениеВакансии, СсылкаНаБазу, ПолучитьНавигационнуюСсылку(Выборка.Вакансия));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСсылок;
	
КонецФункции

Функция ВыборкаПредставленийВакансий(Вакансии, ИдентификаторОписания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	
	Если Не ЗначениеЗаполнено(ИдентификаторОписания) 
		Или ИдентификаторОписания = "Вакансия" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Вакансии.Наименование КАК ПредставлениеВакансии,
		|	Вакансии.Ссылка КАК Вакансия
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|ГДЕ
		|	Вакансии.Ссылка В(&Вакансии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредставлениеВакансии";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПубликацияВакансий.Вакансия КАК Вакансия,
		|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации
		|ПОМЕСТИТЬ ОписаниеВакансииДляПечати
		|ИЗ
		|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
		|ГДЕ
		|	ПубликацияВакансий.Вакансия В(&Вакансии)
		|	И (ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА(100))) = &ИдентификаторОписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПубликацииВакансий.Вакансия КАК Вакансия,
		|	ВЫРАЗИТЬ(ДанныеПубликацииВакансий.Значение КАК СТРОКА(150)) КАК ПредставлениеВакансии
		|ИЗ
		|	РегистрСведений.ДанныеПубликацииВакансий КАК ДанныеПубликацииВакансий
		|ГДЕ
		|	(ДанныеПубликацииВакансий.Вакансия, ДанныеПубликацииВакансий.МестоПубликации) В
		|			(ВЫБРАТЬ
		|				ОписаниеВакансииДляПечати.Вакансия КАК Вакансия,
		|				ОписаниеВакансииДляПечати.МестоПубликации КАК МестоПубликации
		|			ИЗ
		|				ОписаниеВакансииДляПечати КАК ОписаниеВакансииДляПечати)
		|	И ДанныеПубликацииВакансий.ПолеДанных = ""НаименованиеВакансии""
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредставлениеВакансии";
		
		Запрос.УстановитьПараметр("ИдентификаторОписания", ИдентификаторОписания);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаполнитьПозицииПоДолжностиПодразделению(Позиции, КоличествоПозиций, КоличествоСтавок, НазначениеНабора, Должность, Позиция, Подразделение)
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(ТекущаяДатаСеанса());
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Должность", "=", Должность);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "МестоВСтруктуреПредприятия", "=", Подразделение);
		
	КонецЕсли;
	
	Если НазначениеНабора = Перечисления.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ПозицияШтатногоРасписания", "=", Позиция);
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "КоличествоСтавок");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Позиции.ПозицияШтатногоРасписания КАК Позиция,
		|	СУММА(Позиции.КоличествоСтавок) КАК КоличествоСтавок
		|ИЗ
		|	ВТШтатноеРасписание КАК Позиции
		|
		|СГРУППИРОВАТЬ ПО
		|	Позиции.ПозицияШтатногоРасписания";
	
	КоличествоПозиций = 0;
	КоличествоСтавок = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Позиции.Добавить(Выборка.Позиция);
		КоличествоСтавок = КоличествоСтавок + Выборка.КоличествоСтавок;
		КоличествоПозиций = КоличествоПозиций + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗанятоСтавокПоПозициям(Позиции, ЗанятоСтавок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗанятыеСтавки.КоличествоСтавокОстаток) КАК КоличествоСтавок
		|ИЗ
		|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания.Остатки(&Дата, ПозицияШтатногоРасписания В (&Позиции)) КАК ЗанятыеСтавки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗанятыеСтавки.КоличествоСтавокОстаток) > 0";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗанятоСтавок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("КоличествоСтавок")[0];
	КонецЕсли;
	
КонецПроцедуры

Функция СтатистикаСостоянийКандидатов(Вакансия, СпособНабора, Позиция, ДатаОткрытия, ПозицииМассовогоНабора)
	
	Запрос = Новый Запрос;
	Позиции = Новый Массив;
	Если СпособНабора = Перечисления.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор Тогда
		Позиции.Добавить(Позиция);
	Иначе
		Если ПозицииМассовогоНабора <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Позиции, Новый Массив(ПозицииМассовогоНабора));
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	Кандидаты.Вакансия КАК Вакансия,
		|	Кандидаты.Состояние КАК Состояние,
		|	Позиции.Ссылка КАК Позиция
		|ПОМЕСТИТЬ ВТКандидаты
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК Позиции
		|		ПО (Позиции.Ссылка В (&Позиции))
		|			И (Кандидаты.Вакансия = &Вакансия)";
	Запрос.Выполнить();
	
	ПодборПерсонала.СоздатьВТСостоянияКандидатов(Запрос.МенеджерВременныхТаблиц, ДатаОткрытия);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияКандидатов.Кандидат) КАК КоличествоКандидатов,
		|	СостоянияКандидатов.Приоритет КАК Приоритет,
		|	СостоянияКандидатов.НомерЭтапа КАК НомерЭтапа,
		|	СостоянияКандидатов.ТекущееСостояние КАК ТекущееСостояние
		|ИЗ
		|	ВТСостоянияКандидатов КАК СостоянияКандидатов
		|ГДЕ
		|	СостоянияКандидатов.ТекущееСостояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено)
		|	И СостоянияКандидатов.Сотрудник ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияКандидатов.ТекущееСостояние,
		|	СостоянияКандидатов.Приоритет,
		|	СостоянияКандидатов.НомерЭтапа
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияКандидатов.Приоритет,
		|	СостоянияКандидатов.НомерЭтапа УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция СтрокаНавигационнойСсылкиСостоянияКандидатов(СостояниеКандидата)
	
	Если ТипЗнч(СостояниеКандидата) = Тип("СправочникСсылка.ЭтапыРаботыСКандидатами") Тогда
		Возврат Строка("СостояниеКандидата_Этап_" + СостояниеКандидата.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТипЗнч(СостояниеКандидата) = Тип("ПеречислениеСсылка.СостоянияСогласования") Тогда
		Возврат Строка("СостояниеКандидата_Решение_" + ОбщегоНазначения.ИмяЗначенияПеречисления(СостояниеКандидата));
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ЗаполнитьЗначенияРеквизитовШаблонаОтправкиОписания(Сообщение, ПредметСообщения, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ВладелецШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОписания = "";
	Если Не Сообщение.ДополнительныеПараметры.Свойство("ИдентификаторОписания", ИдентификаторОписания) 
		Или ИдентификаторОписания = "Вакансия" Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = Сообщение.ЗначенияРеквизитов;
	Выборка = ПодборПерсонала.ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредметСообщения));
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПолеДанных = "КонтактноеЛицо" Тогда
			
			Ответственный = ЗначенияРеквизитов.Получить("Ответственный");
			Если ЗначениеЗаполнено(Ответственный) И ЗначениеЗаполнено(Ответственный.Получить("Наименование")) Тогда
				Ответственный.Вставить("Наименование", Выборка.Значение);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПолеДанных = "Позиция" Тогда
			
			Позиция = ЗначенияРеквизитов.Получить("Позиция");
			Если ЗначениеЗаполнено(Позиция) И ЗначениеЗаполнено(Позиция.Получить("Наименование")) Тогда
				Позиция.Вставить("Наименование", Выборка.Значение);
			КонецЕсли;
			
		ИначеЕсли Выборка.ПолеДанных = "НаименованиеВакансии" Тогда
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Получить("Наименование")) Тогда
				ЗначенияРеквизитов.Вставить("Наименование", Выборка.Значение);
			ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.Получить("УточнениеНаименования")) Тогда
				ЗначенияРеквизитов.Вставить("УточнениеНаименования", Выборка.Значение);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.Получить(Выборка.ПолеДанных)) Тогда
				ЗначенияРеквизитов.Вставить(Выборка.ПолеДанных, Выборка.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли