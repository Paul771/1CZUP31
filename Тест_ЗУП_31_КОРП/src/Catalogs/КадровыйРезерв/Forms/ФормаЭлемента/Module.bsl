
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Начальное заполнение
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		УстановитьНаименованиеНаСервере();
		
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаполнитьДанныеОбъектаПоВторичнымДаннымФормы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ХарактеристикиПерсоналаФормы.ПеренестиХарактеристикиВТабличнуюЧасть(ТекущийОбъект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанаПозицияКадровогоРезерва");
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриПолученииДанныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзмененыДолжности" Тогда
		ЗагрузитьДолжностиНаСервере(Параметр.Должности);
		УстановитьИнфоДолжности(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ЗаписанаЗаявкаНаВключениеВКадровыйРезерв" Тогда
		Элементы.СписокРезервистов.Обновить();
	ИначеЕсли ИмяСобытия = "ЗаписаноВключениеВКадровыйРезерв" Тогда
		Элементы.СписокРезервистов.Обновить();
	ИначеЕсли ИмяСобытия = "ЗаписаноИсключениеИзКадровогоРезерва" Тогда
		Элементы.СписокРезервистов.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ХарактеристикиПерсоналаФормы.ОбработкаПроверкиЗаполненияТабличныхЧастейХарактеристик(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		ОбработатьСообщенияПользователю();
		Отказ = Истина
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОграничиватьМинимальныйВозрастПриИзменении(Элемент)
	УстановитьДоступностьМинимальногоВозраста(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьМаксимальныйВозрастПриИзменении(Элемент)
	УстановитьДоступностьМаксимальногоВозраста(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьМинимальныйСтажПриИзменении(Элемент)
	УстановитьДоступностьМинимальногоСтажа(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьМаксимальныйСтажПриИзменении(Элемент)
	УстановитьДоступностьМаксимальногоСтажа(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ГруппаКадровогоРезерва") Тогда
		Объект.ПозицияШтатногоРасписания = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.КадровыйРезерв.ПустаяСсылка");
		ПредыдущаяПозицияШтатногоРасписания = Объект.ПозицияШтатногоРасписания;
	Иначе
		Объект.Должности.Очистить();
		УстановитьИнфоДолжности(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНазначения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияПриИзменении(Элемент)
	УстановитьНаименованиеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнфоДолжностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДолжности" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("ТаблицаДолжностей", АдресДолжностей());
		ОткрытьФорму("Справочник.КадровыйРезерв.Форма.ФормаЗаполненияДолжностей", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПозиций = СписокУжеСозданныхПозицийШтатногоРасписанияНаСервере(Объект.Ссылка);
	АдресСпискаПодобранныхПозиций = АдресДанныхВХранилище(СписокПозиций);
	ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, АдресСпискаПодобранных", Истина, Истина, АдресСпискаПодобранныхПозиций);
	ОткрытьФорму("Справочник.ШтатноеРасписание.ФормаВыбора", ПараметрыФормы, Элементы.ПозицияШтатногоРасписания); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УстановитьПодсказкуПоляПозицияШтатногоРасписания(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияОчистка(Элемент, СтандартнаяОбработка)
	УстановитьПодсказкуПоляПозицияШтатногоРасписания(Объект.ПозицияШтатногоРасписания);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьПланаОбученияПриИзменении(Элемент)
	ОбучениеРазвитиеКлиент.ПриИзмененииПродолжительностиПланаОбучения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокРезервистов

&НаКлиенте
Процедура СписокРезервистовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КадровыйРезервКлиент.ОткрытьФормуСправочникаФизическиеЛица(ЭтаФорма, "СписокРезервистов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристикиПерсонала

&НаКлиенте
Процедура ХарактеристикиПерсоналаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя <> "ХарактеристикиПерсоналаЗначение"
		И Поле.Имя <> "ХарактеристикиПерсоналаХарактеристика" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ХарактеристикиПерсонала.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ХарактеристикиПерсоналаЗначение" Тогда
		ХарактеристикиПерсоналаКлиент.ОткрытьНастройкуЗначенийХарактеристик(ЭтаФорма, ТекущиеДанные.Характеристика, "Вес", "ЗаполнитьДеревоХарактеристикНаКлиенте");
	ИначеЕсли Поле.Имя = "ХарактеристикиПерсоналаХарактеристика" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Характеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияХарактеристик(ЭтаФорма, Копирование, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПередУдалением(Элемент, Отказ)
	ХарактеристикиПерсоналаКлиент.УдалитьЗначенияХарактеристик(ЭтаФорма, Элементы.ХарактеристикиПерсонала.ВыделенныеСтроки);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийТаблицыФормыПрограммаОбучения

&НаКлиенте
Процедура ПрограммаОбученияПриИзменении(Элемент)
	ОбучениеРазвитиеКлиент.ПрограммаОбученияПриИзменении(ЭтаФорма, Элемент, Элементы.ПрограммаОбучения);
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОбученияМероприятиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрограммаОбучения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВторичныеДанныеОбученияНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

&НаКлиенте
Процедура ДействияСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ХарактеристикиПерсоналаКлиент.ДействияСотрудниковВыбор(Элементы.ДействияСотрудников.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуДобавленияДействий(ЭтаФорма, Отказ,, Новый Структура("ВыполнитьПроцедуруНаКлиентеЗавершение", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ДействияСотрудниковПередУдалением(Элемент, Отказ)
	ХарактеристикиПерсоналаКлиент.ДействияСотрудниковПередУдалением(ЭтаФорма, "ЗаполнитьДеревоХарактеристикНаКлиенте");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ЗаявкаНаВключениеВКадровыйРезерв(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ПозицияРезерва", Объект.Ссылка);
	ТекущиеДанные = Элементы.СписокРезервистов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо);	
		ЗначенияЗаполнения.Вставить("ВидРезерва", ТекущиеДанные.ВидРезерва);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КадровыйРезервКлиент.ОткрытьФормуЗаявкаНаВключениеВКадровыйРезерв(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключениеВКадровыйРезерв(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПозицияРезерва", Объект.Ссылка);
	ТекущиеДанные = Элементы.СписокРезервистов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо);
		ПараметрыФормы.Вставить("ВидРезерва", ТекущиеДанные.ВидРезерва);
	КонецЕсли;
	КадровыйРезервКлиент.ОткрытьФормуВключениеВКадровыйРезерв(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсключениеИзКадровогоРезерва(Команда)
	
	ТекущиеДанные = Элементы.СписокРезервистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо);
	КадровыйРезервКлиент.ОткрытьФормуИсключениеИзКадровогоРезерва(ЭтаФорма, ПараметрыФормы);
	
КонецПроцедуры

#Область ОбработчикиКомандРейтинга

&НаКлиенте
Процедура Подключаемый_Рейтинг1(Команда)
	ПоставитьРейтингНаКлиенте(1);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Рейтинг2(Команда)
	ПоставитьРейтингНаКлиенте(2);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Рейтинг3(Команда)
	ПоставитьРейтингНаКлиенте(3);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Рейтинг4(Команда)
	ПоставитьРейтингНаКлиенте(4);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Рейтинг5(Команда)
	ПоставитьРейтингНаКлиенте(5);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РейтингСбросить(Команда)
	ПоставитьРейтингНаКлиенте(0);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодобратьХарактеристики(Команда)
	ХарактеристикиПерсоналаКлиент.ОткрытьФормуПодбораХарактеристик(ЭтаФорма, Новый Структура("СтрокаСкрываемыхРеквизитов", "Вес,ТребуетсяОбучение,ТребуетсяПроверка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоКомпетенциям(Команда)
	
	Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка = НЕ Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка;
	
	УстановитьСвойстваЭлементовХарактеристикПерсонала(ЭтаФорма);
	
	ЗаполнитьДеревоХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействияИзПрофиляДолжности(Команда)
	
	Если Объект.ДействияСотрудников.Количество() > 0 Тогда
		
		ТекстВопроса = Нстр("ru = 'Список действий не пустой. При заполнении он будет очищен. Продолжить?'");
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьДействияСотрудниковЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, Нстр("ru = 'Продолжить?'"));
		
	Иначе
		ЗаполнитьДействияСотрудниковЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрограммуОбученияИзПрофиляДолжности(Команда)
	
	Если Объект.ПрограммаОбучения.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Программа обучения будет заменена программой из профиля должности.
                             |Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПрограммуОбученияПоПрофилюЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПрограммуОбученияПоПрофилюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПрограммыОбученияПоХарактеристикам(Команда)
	
	СписокСкрываемыхРеквизитов = Новый Структура;
	СписокСкрываемыхРеквизитов.Вставить("ТребуетсяОбучение");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресХарактеристикПерсонала", АдресХарактеристикПерсонала());
	СтруктураПараметров.Вставить("АдресПрограммыОбучения", АдресПрограммыОбучения());
	СтруктураПараметров.Вставить("СкрытьРеквизиты", СписокСкрываемыхРеквизитов);
	
	ОбучениеРазвитиеКлиент.ОткрытьФормуПодбораПрограммыОбучения(
		ЭтаФорма, Новый Структура("ПараметрыФормыПодбора", СтруктураПараметров));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДанныеОбъектаПоВторичнымДаннымФормы()
	
	// Заполним стаж.
	Объект.МинимальныйСтажМесяцев = МинимальныйСтажЛет*12 + МинимальныйСтажМесяцев;
	Объект.МаксимальныйСтажМесяцев = МаксимальныйСтажЛет*12 + МаксимальныйСтажМесяцев;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыФормы()

	ИспользуютсяЗаявкиНаВключениеВРезерв = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВключениеВКадровыйРезерв");
	
	ПредыдущаяПозицияШтатногоРасписания = Объект.ПозицияШтатногоРасписания;
	
	УстановитьПараметрДинамическогоСпискаРезервистов(ЭтаФорма, ТекущаяДатаСеанса());
	УстановитьСтаж(ЭтаФорма);
	УстановитьИнфоДолжности(ЭтаФорма);
	УстановитьФлагиОграничителиВозраста(ЭтаФорма);
	УстановитьФлагиОграничителиОбразования(ЭтаФорма);
	УстановитьФлагиОграничителиСтажа(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрДинамическогоСпискаРезервистов(Форма, ТекущаяДата)

	Статусы = Новый Массив;
	Если Форма.ИспользуютсяЗаявкиНаВключениеВРезерв Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
	КонецЕсли;
	Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокРезервистов,
		"Статусы",
		Статусы,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокРезервистов,
		"Ссылка",
		Форма.Объект.Ссылка,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокРезервистов,
		"ТекущаяДата",
		ТекущаяДата,
		Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотраСостава()

	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.РезервистыСтраница;
	СкрытьСтраницыНазначенийИТребований();

КонецПроцедуры

&НаСервере
Процедура СкрытьСтраницыНазначенийИТребований()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТребованияСтраница",
		"Видимость",
		Ложь);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРеквизитовФормы(Форма)

	УстановитьДоступностьМинимальногоВозраста(Форма);
	УстановитьДоступностьМаксимальногоВозраста(Форма);
	УстановитьДоступностьОбразования(Форма);
	УстановитьДоступностьОграничителейСтажа(Форма);
	УстановитьДоступностьМинимальногоСтажа(Форма);
	УстановитьДоступностьМаксимальногоСтажа(Форма);
	УстановитьДоступностьЭлементовНазначения(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтаж(Форма)

	ЭтотОбъект = Форма.Объект;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ВидСтажа) Тогда
		Форма.МинимальныйСтажЛет = Цел(ЭтотОбъект.МинимальныйСтажМесяцев/12);
		Форма.МинимальныйСтажМесяцев = ЭтотОбъект.МинимальныйСтажМесяцев - Форма.МинимальныйСтажЛет*12;
		Форма.МаксимальныйСтажЛет = Цел(ЭтотОбъект.МаксимальныйСтажМесяцев/12);
		Форма.МаксимальныйСтажМесяцев = ЭтотОбъект.МаксимальныйСтажМесяцев - Форма.МаксимальныйСтажЛет*12;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИнфоДолжности(Форма)
	
	ДолжностиТЧ = Форма.Объект.Должности;
	
	Если ДолжностиТЧ.Количество() = 0 Тогда
		Форма.ИнфоДолжности = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить список'"),,,,"ОткрытьДолжности");
	Иначе
		МассивСтрок = Новый Массив;
		Для каждого СтрокаДолжности Из ДолжностиТЧ Цикл
			Если МассивСтрок.Количество() >= 3  Тогда // то есть есть уже должность + запятая + еще одна должность.
				Прервать;
			КонецЕсли;
		    МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СтрокаДолжности.Должность)));
			Если ДолжностиТЧ.Индекс(СтрокаДолжности) = 0 И ДолжностиТЧ.Количество() > 1 Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(", "));
			КонецЕсли;
		КонецЦикла; 
		Если ДолжностиТЧ.Количество() > 2 Тогда
			ДопТекст = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'и еще %1'"), ДолжностиТЧ.Количество() - 2);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДопТекст));
		КонецЕсли;	
		Форма.ИнфоДолжности = Новый ФорматированнаяСтрока(МассивСтрок,,,,"ОткрытьДолжности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьМинимальногоВозраста(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МинимальныйВозраст",
		"Доступность",
		Форма.ОграничиватьМинимальныйВозраст);
		
	Если Не Форма.ОграничиватьМинимальныйВозраст Тогда
		Форма.Объект.МинимальныйВозраст = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьМаксимальногоВозраста(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МаксимальныйВозраст",
		"Доступность",
		Форма.ОграничиватьМаксимальныйВозраст);
		
	Если Не Форма.ОграничиватьМаксимальныйВозраст Тогда
		Форма.Объект.МаксимальныйВозраст = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьМинимальногоСтажа(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МинимальныйСтажЛет",
		"Доступность",
		Форма.ОграничиватьМинимальныйСтаж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МинимальныйСтажМесяцев",
		"Доступность",
		Форма.ОграничиватьМинимальныйСтаж);
		
	Если Не Форма.ОграничиватьМинимальныйСтаж Тогда
		Форма.МинимальныйСтажЛет = 0;
		Форма.МинимальныйСтажМесяцев = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьМаксимальногоСтажа(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МаксимальныйСтажЛет",
		"Доступность",
		Форма.ОграничиватьМаксимальныйСтаж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МаксимальныйСтажМесяцев",
		"Доступность",
		Форма.ОграничиватьМаксимальныйСтаж);
		
	Если Не Форма.ОграничиватьМаксимальныйСтаж Тогда
		Форма.МаксимальныйСтажЛет = 0;
		Форма.МаксимальныйСтажМесяцев = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовНазначения(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицияШтатногоРасписания",
		"Доступность",
		Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ПозицияШтатногоРасписания"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИнфоДолжности",
		"Видимость",
		Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ГруппаКадровогоРезерва"));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеНаСервере()
	НаименованиеПоПозицииЕсть = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяПозицияШтатногоРасписания, "Наименование");
	Если Врег(НаименованиеПоПозицииЕсть) = Врег(Объект.Наименование)
		ИЛИ ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПозицияШтатногоРасписания, "Наименование");
	КонецЕсли;
	ПредыдущаяПозицияШтатногоРасписания = Объект.ПозицияШтатногоРасписания;
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьРейтингНаКлиенте(Рейтинг)
	
	ТекущиеДанные = Элементы.СписокРезервистов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоставитьРейтингНаСервере(Объект.Ссылка, ТекущиеДанные.ФизическоеЛицо, Рейтинг);
	Элементы.СписокРезервистов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПоставитьРейтингНаСервере(ПозицияРезерва, ФизическоеЛицо, Рейтинг)
	КадровыйРезерв.ПоставитьРейтинг(ПозицияРезерва, ФизическоеЛицо, Рейтинг);
КонецПроцедуры

&НаСервере
Функция АдресДолжностей()
	Возврат ПоместитьВоВременноеХранилище(Объект.Должности.Выгрузить(), Новый УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ЗагрузитьДолжностиНаСервере(Адрес)
	Объект.Должности.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокУжеСозданныхПозицийШтатногоРасписанияНаСервере(НеУчитываяСсылку)
	Возврат КадровыйРезерв.СписокКлючевыхПозицийШтатногоРасписания(НеУчитываяСсылку);
КонецФункции

&НаСервереБезКонтекста
Функция АдресДанныхВХранилище(ДанныеДляХранилища)
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляХранилища, Новый УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьПодсказкуПоляПозицияШтатногоРасписания(ВыбранноеЗначение)

	СписокПозиций = СписокУжеСозданныхПозицийШтатногоРасписанияНаСервере(Объект.Ссылка);
	УжеЕстьТакаяПозиция = НЕ СписокПозиций.Найти(ВыбранноеЗначение) = Неопределено;
	Если УжеЕстьТакаяПозиция Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПозицияШтатногоРасписания",
			"Подсказка",
			НСтр("ru ='На данную позицию штатного расписания уже заведен кадровый резерв'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПозицияШтатногоРасписания",
		"ОтображениеПодсказки",
		?(УжеЕстьТакаяПозиция, ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет));
		
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьОбразованиеПриИзменении(Элемент)
	УстановитьДоступностьОбразования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидСтажаПриИзменении(Элемент)
	
	УстановитьФлагиОграничителиСтажа(ЭтаФорма);
	УстановитьДоступностьОграничителейСтажа(ЭтаФорма);
	УстановитьДоступностьМинимальногоСтажа(ЭтаФорма);
	УстановитьДоступностьМаксимальногоСтажа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоТребованиям(Команда)
	
	ПараметрыФормы = Новый Структура("ПозицияРезерва", Объект.Ссылка);
	ЗаполнитьУстановленныеПараметры(ПараметрыФормы);
	
	ОткрытьФорму("Справочник.КадровыйРезерв.Форма.ФормаПодбораКандидатовПоТребованиям", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагиОграничителиВозраста(Форма)

	ЭтотОбъект = Форма.Объект;
	
	Форма.ОграничиватьМинимальныйВозраст = ЗначениеЗаполнено(ЭтотОбъект.МинимальныйВозраст);
	Форма.ОграничиватьМаксимальныйВозраст = ЗначениеЗаполнено(ЭтотОбъект.МаксимальныйВозраст);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагиОграничителиОбразования(Форма)

	ЭтотОбъект = Форма.Объект;
	Форма.ОграничиватьОбразование = ЗначениеЗаполнено(ЭтотОбъект.ВидОбразования) ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Специальность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагиОграничителиСтажа(Форма)

	ЭтотОбъект = Форма.Объект;
	
	Форма.ОграничиватьМинимальныйСтаж = ЗначениеЗаполнено(ЭтотОбъект.ВидСтажа) И (ЗначениеЗаполнено(Форма.МинимальныйСтажЛет) ИЛИ ЗначениеЗаполнено(Форма.МинимальныйСтажМесяцев));
	Форма.ОграничиватьМаксимальныйСтаж = ЗначениеЗаполнено(ЭтотОбъект.ВидСтажа) И (ЗначениеЗаполнено(Форма.МаксимальныйСтажЛет) ИЛИ ЗначениеЗаполнено(Форма.МаксимальныйСтажМесяцев));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбразования(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидОбразования",
		"Доступность",
		Форма.ОграничиватьОбразование);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Специальность",
		"Доступность",
		Форма.ОграничиватьОбразование);
		
	Если НЕ Форма.ОграничиватьОбразование Тогда
		Форма.Объект.ВидОбразования = ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка");
		Форма.Объект.Специальность = ПредопределенноеЗначение("Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОграничителейСтажа(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОграничиватьМинимальныйСтаж",
		"Доступность",
		ЗначениеЗаполнено(Форма.Объект.ВидСтажа));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОграничиватьМаксимальныйСтаж",
		"Доступность",
		ЗначениеЗаполнено(Форма.Объект.ВидСтажа));
		
	Если Не ЗначениеЗаполнено(Форма.Объект.ВидСтажа) Тогда
		Форма.ОграничиватьМинимальныйСтаж = Ложь;
		Форма.ОграничиватьМаксимальныйСтаж = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановленныеПараметры(ПараметрыФормы)

	ДанныеТребований = Новый Структура;
	
	ДанныеТребований.Вставить("ОграничиватьМинимальныйВозраст", ОграничиватьМинимальныйВозраст);
	ДанныеТребований.Вставить("МинимальныйВозраст", Объект.МинимальныйВозраст);
	ДанныеТребований.Вставить("ОграничиватьМаксимальныйВозраст", ОграничиватьМаксимальныйВозраст);
	ДанныеТребований.Вставить("МаксимальныйВозраст", Объект.МаксимальныйВозраст);
	ДанныеТребований.Вставить("ОграничиватьОбразование", ОграничиватьОбразование);
	ДанныеТребований.Вставить("ВидОбразования", Объект.ВидОбразования);
	ДанныеТребований.Вставить("Специальность", Объект.Специальность);
	ДанныеТребований.Вставить("ВидСтажа", Объект.ВидСтажа);
	ДанныеТребований.Вставить("ОграничиватьМинимальныйСтаж", ОграничиватьМинимальныйСтаж);
	ДанныеТребований.Вставить("МинимальныйСтажЛет", МинимальныйСтажЛет);
	ДанныеТребований.Вставить("МинимальныйСтажМесяцев", МинимальныйСтажМесяцев);
	ДанныеТребований.Вставить("ОграничиватьМаксимальныйСтаж", ОграничиватьМаксимальныйСтаж);
	ДанныеТребований.Вставить("МаксимальныйСтажЛет", МаксимальныйСтажЛет);
	ДанныеТребований.Вставить("МаксимальныйСтажМесяцев", МаксимальныйСтажМесяцев);
	
	ПараметрыФормы.Вставить("ДанныеТребований", ДанныеТребований);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаРезервистов()

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРезервистов,
		"Кандидат",
		НСтр("ru = 'Кандидат'"),
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРезервистов,
		"ЗачисленВРезерв",
		НСтр("ru = 'Зачислен в резерв'"),
		Истина);
		
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	КадровыйРезервФормы.СоздатьКомандыФормыКадровогоРезерва(ЭтаФорма);
	КадровыйРезервФормы.СоздатьЭлементыФормыКомандыКадровогоРезерва(ЭтаФорма, Элементы.ГруппаКомандКадровогоРезерва);
	
	КадровыйРезервФормы.СоздатьКомандыРейтинга(ЭтаФорма);
	КадровыйРезервФормы.СоздатьЭлементыФормыКомандыРейтинга(ЭтаФорма, Элементы.Рейтинг);
	
	ЗаполнитьВторичныеРеквизитыФормы();
	УстановитьПараметрыСпискаРезервистов();
	
	ХарактеристикиПерсоналаФормы.ПрочитатьХарактеристикиВТаблицы(Объект.ХарактеристикиПерсонала, Характеристики, ЗначенияХарактеристики);
	ХарактеристикиПерсоналаФормы.ЗагрузитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямКадровогоРезерва", Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	ЗаполнитьДеревоХарактеристикНаСервере();
	
	ОбучениеРазвитиеФормы.СоздатьИЗаполнитьРеквизитыПланаОбучения(ЭтаФорма);
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()

	Если Параметры.Свойство("ПросмотрСостава") И Параметры.ПросмотрСостава Тогда
		УстановитьРежимПросмотраСостава();
	Иначе
		УстановитьДоступностьРеквизитовФормы(ЭтаФорма);
	КонецЕсли;
	
	УстановитьСвойстваЭлементовХарактеристикПерсонала(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоХарактеристикНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ЗаполнитьДеревоХарактеристикНаСервере();
	
	РазвернутьДерево();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоХарактеристикНаСервере()

	ХарактеристикиПерсоналаФормы.СохранитьРежимОтображенияПоКомпетенциям("ОтображениеПоКомпетенциямКадровогоРезерва", Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
	Если НЕ Элементы.ХарактеристикиПерсоналаПоКомпетенциям.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиДерево = РеквизитФормыВЗначение("ДеревоХарактеристик");
	ХарактеристикиПерсоналаФормы.ЗаполнитьДеревоХарактеристик(Характеристики, ХарактеристикиДерево, Истина);
	ЗначениеВРеквизитФормы(ХарактеристикиДерево, "ДеревоХарактеристик");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействияСотрудниковЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДействияСотрудниковНаСервере();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействияСотрудниковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиДолжностейДействияСотрудников.ДействиеСотрудника КАК ДействиеСотрудника
		|ИЗ
		|	Справочник.ПрофилиДолжностей.ДействияСотрудников КАК ПрофилиДолжностейДействияСотрудников
		|ГДЕ
		|	ПрофилиДолжностейДействияСотрудников.Ссылка.Должность В(&СписокДолжностей)";
	
	Запрос.УстановитьПараметр("СписокДолжностей", СписокДолжностейПозиции());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДействий = РезультатЗапроса.Выгрузить();
	Объект.ДействияСотрудников.Загрузить(ТаблицаДействий);
	
	ДобавитьХарактеристикиИзДействийНаСервере(ТаблицаДействий.ВыгрузитьКолонку("ДействиеСотрудника"));
	
КонецПроцедуры

&НаСервере
Функция СписокДолжностейПозиции()

	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ПозицияШтатногоРасписания") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПозицияШтатногоРасписания, "Должность");
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ГруппаКадровогоРезерва") Тогда
		Возврат Объект.Должности.Выгрузить(, "Должность").ВыгрузитьКолонку("Должность");
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РазвернутьДерево(Развернуть = Истина)

	Для каждого СтрокаДерева Из ДеревоХарактеристик.ПолучитьЭлементы() Цикл
		Элементы.ДеревоХарактеристик.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Развернуть);
	КонецЦикла; 

КонецПроцедуры

#Область ДобавлениеХарактеристик

&НаСервере
Процедура ДобавитьХарактеристикиИзДействийНаСервере(МассивДобавленныхДействий) Экспорт
	
	ДобавляемыеХарактеристики = ХарактеристикиПерсонала.МассивСтруктурХарактеристикСоЗначениямиИзДействий(МассивДобавленныхДействий);
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиСоЗначениями(Характеристики, ЗначенияХарактеристики, ДобавляемыеХарактеристики);
	
	ЗаполнитьДеревоХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикиИзДействийНаКлиентеЗавершение() Экспорт 
	РазвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ДобавитьХарактеристикиПерсоналаНаСервере(НовыеХарактеристики, ДополнительныеПараметры) Экспорт
	ХарактеристикиПерсоналаФормы.ДобавитьХарактеристикиВТабличнуюЧасть(ЭтаФорма, НовыеХарактеристики, ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовХарактеристикПерсонала(Форма)

	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппХарактеристикПерсонала(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
		
	ХарактеристикиПерсоналаКлиентСервер.УстановитьДоступностьКомандПанелиХарактеристикПерсонала(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	ХарактеристикиПерсоналаКлиентСервер.УстановитьВидимостьГруппКомандВКоманднойПанелиХарактеристик(
		Форма, Форма.Элементы.ХарактеристикиПерсоналаПоКомпетенциям);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСообщенияПользователю()

	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если СтрНайти(Сообщение.Поле, "МинимальныйСтажМесяцев") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "МинимальныйСтажЛет";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#Область ПрограммаОбучения

&НаСервере
Процедура ПересоздатьКолонкиПериодовПрограммыОбучения() Экспорт

	ОбучениеРазвитиеФормы.УдалитьЭлементыКолонкиПериодовПлана(ЭтаФорма);
	ОбучениеРазвитиеФормы.СоздатьКолонкиПериодовПрограммыОбучения(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПрограммуОбучения(Результат) Экспорт
	ОбучениеРазвитиеФормы.ЗагрузитьПрограммуОбучения(ЭтаФорма, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрограммуОбученияПоПрофилюЗавершение(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПрограммуОбученияПоПрофилюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрограммуОбученияПоПрофилюНаСервере()
	
	Объект.ПрограммаОбучения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофилиДолжностей.Ссылка КАК Профиль,
		|	ПрофилиДолжностей.ПродолжительностьПланаОбучения КАК ПродолжительностьПланаОбучения,
		|	ПрофилиДолжностей.РазмерностьПродолжительностиПланаОбучения КАК РазмерностьПродолжительностиПланаОбучения
		|ПОМЕСТИТЬ ВТПрофиль
		|ИЗ
		|	Справочник.ПрофилиДолжностей КАК ПрофилиДолжностей
		|ГДЕ
		|	ПрофилиДолжностей.Должность В(&СписокДолжностей)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиДолжностейПрограммаОбучения.Мероприятие КАК Мероприятие,
		|	ПрофилиДолжностейПрограммаОбучения.Ответственный КАК Ответственный,
		|	ПрофилиДолжностейПрограммаОбучения.Начало КАК Начало,
		|	ПрофилиДолжностейПрограммаОбучения.Окончание КАК Окончание
		|ИЗ
		|	Справочник.ПрофилиДолжностей.ПрограммаОбучения КАК ПрофилиДолжностейПрограммаОбучения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрофиль КАК ВТПрофиль
		|		ПО ПрофилиДолжностейПрограммаОбучения.Ссылка = ВТПрофиль.Профиль";
	
	Запрос.УстановитьПараметр("СписокДолжностей", СписокДолжностейПозиции());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	РезультатЗапросаШапка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	РезультатЗапросаПрограмма = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	Выборка = РезультатЗапросаШапка.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЦикла;
	
	ПересоздатьКолонкиПериодовПрограммыОбучения();
	
	Выборка = РезультатЗапросаПрограмма.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПрограммаОбучения.Добавить(), Выборка);
	КонецЦикла;
	
	ОбучениеРазвитиеФормы.ЗаполнитьВторичныеРеквизитыПрограммыОбучения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеДанныеОбученияНаСервере(ИдентификаторТекущейСтроки)
	ОбучениеРазвитиеФормы.ЗаполнитьУчебныеЧасыПланаОбучения(ЭтаФорма, ИдентификаторТекущейСтроки);
	ОбучениеРазвитиеФормы.ЗаполнитьОтветственногоВСтрокеПрограммыОбучения(ЭтаФорма, ИдентификаторТекущейСтроки);
КонецПроцедуры

&НаСервере
Функция АдресХарактеристикПерсонала()
	Возврат ПоместитьВоВременноеХранилище(Характеристики.Выгрузить(, "Характеристика,КартинкаВида"), УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция АдресПрограммыОбучения()
	Возврат ПоместитьВоВременноеХранилище(Объект.ПрограммаОбучения.Выгрузить(, "Мероприятие,Ответственный"), УникальныйИдентификатор);
КонецФункции

#КонецОбласти

#КонецОбласти
