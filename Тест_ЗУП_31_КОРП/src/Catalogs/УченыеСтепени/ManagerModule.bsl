#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Процедура выполняет первоначальное заполнение классификатора.
Процедура НачальноеЗаполнение() Экспорт
	
	ЗаполнитьИзМакета();
	
КонецПроцедуры

Процедура ОбновитьЭлементы() Экспорт
	
	ЗаполнитьИзМакета();
	
КонецПроцедуры

Процедура ЗаполнитьИзМакета()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтраслиНауки.Ссылка,
	|	ОтраслиНауки.Код
	|ИЗ
	|	Справочник.ОтраслиНауки КАК ОтраслиНауки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УченыеСтепени.Ссылка,
	|	УченыеСтепени.Код,
	|	УченыеСтепени.Наименование,
	|	ЕСТЬNULL(УченыеСтепени.Родитель.Код, "" "") КАК КодРодителя,
	|	ЕСТЬNULL(УченыеСтепени.ОтрасльНауки.Код, "" "") КАК КодОтраслиНауки
	|ИЗ
	|	Справочник.УченыеСтепени КАК УченыеСтепени";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаОтраслей = Результаты[0].Выбрать();
	ТаблицаСуществующихСтепеней = Результаты[1].Выгрузить();
	
	ТекстовыйДокумент = Справочники.УченыеСтепени.ПолучитьМакет("УченыеСтепени");
	ТаблицаКлассификатора = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	СоответствиеОтраслей = Новый Соответствие; 
	СоответствиеСтепеней = Новый Соответствие; 
	
	ОтрасльПустаяСсылка = Справочники.ОтраслиНауки.ПустаяСсылка();
	СтепеньПустаяСсылка = Справочники.УченыеСтепени.ПустаяСсылка();
	
	Пока ВыборкаОтраслей.Следующий() Цикл
		СоответствиеОтраслей.Вставить(ВыборкаОтраслей.Код, ВыборкаОтраслей.Ссылка);
	КонецЦикла;
	
	Для каждого СтрокаКлассификатора Из ТаблицаКлассификатора Цикл
		
		Код = СтрокаКлассификатора.Code;
		КодРодителя = СтрокаКлассификатора.ParentCode;
		Наименование = СтрокаКлассификатора.Name;
		КодОтраслиНауки = СтрокаКлассификатора.ScienceIndustryCode;
				
		СтруктураПоиска = Новый Структура("Код, КодРодителя", Код, КодРодителя);

		НайденныеСтроки = ТаблицаСуществующихСтепеней.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СправочникОбъект = Справочники.УченыеСтепени.СоздатьЭлемент();
		Иначе
			
			СтрокаСтепени = НайденныеСтроки[0];
			Если ПустаяСтрока(КодРодителя) Тогда
				СоответствиеСтепеней.Вставить(СтрокаСтепени.Код, СтрокаСтепени.Ссылка);
			КонецЕсли;

			СправочникОбъект = СтрокаСтепени.Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ОтрасльНауки = ?(СоответствиеОтраслей[КодОтраслиНауки] = Неопределено, ОтрасльПустаяСсылка, СоответствиеОтраслей[КодОтраслиНауки]);
		СтепеньРодитель = ?(СоответствиеСтепеней[КодРодителя] = Неопределено, СтепеньПустаяСсылка, СоответствиеСтепеней[КодРодителя]);
				
		Если СправочникОбъект.Код <> Код
			Или СправочникОбъект.ОтрасльНауки <> ОтрасльНауки 
			Или СправочникОбъект.Наименование <> Наименование Тогда
			
			СправочникОбъект.Код = Код;
			СправочникОбъект.Родитель = СтепеньРодитель;
			СправочникОбъект.ОтрасльНауки = ОтрасльНауки;
			СправочникОбъект.Наименование = Наименование;
			
			СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			Если ПустаяСтрока(КодРодителя) Тогда
				СоответствиеСтепеней.Вставить(Код, СправочникОбъект.Ссылка);
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
// Используется для сопоставления элементов механизмом «Выгрузка/загрузка областей данных».
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Наименование");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли