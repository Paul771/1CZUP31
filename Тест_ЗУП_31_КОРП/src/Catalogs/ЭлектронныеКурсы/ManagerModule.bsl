#Область ОбработчикиСобытий

// ОБРАБОТЧИКИ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
		
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") И НЕ ПравоДоступа("Изменение", Метаданные.Справочники.ЭлектронныеКурсы) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Параметры.Вставить("ЭлектронныйКурс", Параметры.Ключ);
			
			ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
			
			Возврат; // Просмотр курса
			
		КонецЕсли;
		
		ТипыКурсов = РазработкаЭлектронныхКурсовСлужебный.ТипыЭлектронныхКурсов();
		
		Если ТипыКурсов.Количество() = 1 И ТипыКурсов[0] = Перечисления.ТипыЭлектронныхКурсов.Тест Тогда // Только тесты (Экзаменатор)
			
			Если Параметры.Свойство("Ключ") Тогда
								
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Тип") = Перечисления.ТипыЭлектронныхКурсов.Тест Тогда
					
					ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается'");
					
				Иначе
					
					СтандартнаяОбработка = Ложь;

					Параметры.Вставить("СводЗнаний", Параметры.Ключ);
					
					ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
					
					Возврат; // Просмотр курса				
					
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается'");				
				
			КонецЕсли;			
			
		ИначеЕсли ТипыКурсов.Количество() = 1 И ТипыКурсов[0] = Перечисления.ТипыЭлектронныхКурсов.Слайдовый Тогда // Только слайдовые
			
			Если Параметры.Свойство("Ключ") Тогда
				
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Тип") = Перечисления.ТипыЭлектронныхКурсов.Слайдовый Тогда
					
					СтандартнаяОбработка = Ложь;
					
					Параметры.Вставить("ЭлектронныйКурс", Параметры.Ключ);
					Параметры.Вставить("РежимРедактирования", Истина);
					
					ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
					
					Возврат; // Редактирование курса	
					
				Иначе
					
					СтандартнаяОбработка = Ложь;

					Параметры.Вставить("ЭлектронныйКурс", Параметры.Ключ);
					
					ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";				
					
					Возврат; // Просмотр курса
					
				КонецЕсли;
				
			Иначе
				
				СтандартнаяОбработка = Ложь;
				
				Параметры.Вставить("РежимРедактирования", Истина);
				Параметры.Вставить("ТипЭлектронногоКурса", Перечисления.ТипыЭлектронныхКурсов.Слайдовый);
				
				ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
				
				Возврат; // Создание слайдового курса				
				
			КонецЕсли;
			
			
		Иначе // Полные продукты
			
			Если Параметры.Свойство("ЗначениеКопирования")
				ИЛИ (Параметры.Свойство("ЭтоГруппа") И Параметры.ЭтоГруппа) Тогда
				
				Возврат; // Форма курса	
				
			ИначеЕсли Параметры.Свойство("Ключ") Тогда // Существующий курс
				
				ТипКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Тип");

				Если ТипКурса = Перечисления.ТипыЭлектронныхКурсов.Тест Тогда

					ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается'");					
					
				КонецЕсли;

				Если ТипКурса = Перечисления.ТипыЭлектронныхКурсов.Учебник Тогда

					Возврат; // Стандартная форма объекта
					
				КонецЕсли;   
				
				Если ТипКурса = Перечисления.ТипыЭлектронныхКурсов.Слайдовый Тогда

					СтандартнаяОбработка = Ложь;
					
					Параметры.Вставить("ЭлектронныйКурс", Параметры.Ключ);
					Параметры.Вставить("РежимРедактирования", Истина);
					
					ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
					
					Возврат; // Редактирование курса					
					
				КонецЕсли;   

				
			Иначе // Создание нового элементы
				
				Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Тип") Тогда					
						
					Если Параметры.ЗначенияЗаполнения.Тип = Перечисления.ТипыЭлектронныхКурсов.Тест Тогда
						
						ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается'");
						
					КонецЕсли;
					
					Если Параметры.ЗначенияЗаполнения.Тип = Перечисления.ТипыЭлектронныхКурсов.Учебник Тогда
						
						ВызватьИсключение НСтр("ru = 'Функциональность не поддерживается'");
						
					КонецЕсли;
					
					Если Параметры.ЗначенияЗаполнения.Тип = Перечисления.ТипыЭлектронныхКурсов.Слайдовый Тогда
						
						СтандартнаяОбработка = Ложь;
						
						Параметры.Вставить("РежимРедактирования", Истина);
						Параметры.Вставить("ТипЭлектронногоКурса", Перечисления.ТипыЭлектронныхКурсов.Слайдовый);
						
						ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
						
						Возврат; // Создание слайдового курса
						
					КонецЕсли;
					
				Иначе
					
					СтандартнаяОбработка = Ложь;
					
					Параметры.Вставить("РежимРедактирования", Истина);
					
					ВыбраннаяФорма = "ОбщаяФорма.ЭлектронныйКурс";
					
					Возврат; // Создание слайдового курса (по умолчанию)
					
				КонецЕсли;
				
				
			КонецЕсли;			
			
		КонецЕсли; 
		
	КонецЕсли;

	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции	
	
// Возвращает группу нужного типа, в которую будут помещаться элементы электронного курса.
//
Функция ГруппаДляХраненияПодчиненныхЭлементов(Знач ЭлектронныйКурс, Знач ТипПодчиненногоЭлемента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс)
		ИЛИ НЕ ЗначениеЗаполнено(ТипПодчиненногоЭлемента) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ГруппаПодчиненныхЭлементов = РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, ТипПодчиненногоЭлемента);
	
	Если ГруппаПодчиненныхЭлементов = Неопределено Тогда
		
		ИмяСправочника = Метаданные.НайтиПоТипу(ТипПодчиненногоЭлемента).Имя;
		
		НоваяГруппаОбъект =  Справочники[ИмяСправочника].СоздатьГруппу();
		НоваяГруппаОбъект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйКурс, "Наименование");
		
		РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(НоваяГруппаОбъект);

		НоваяГруппаОбъект.Записать();
		
		ГруппаПодчиненныхЭлементов = НоваяГруппаОбъект.Ссылка;
		
		РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.СохранитьГруппуДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, ГруппаПодчиненныхЭлементов);
		
	КонецЕсли;
	
	Возврат ГруппаПодчиненныхЭлементов;
	
КонецФункции

Процедура ПриУстановкеСнятииПометкиУдаленияЭлектронногоКурса(Знач ЭлектронныйКурс, Знач ПометкаУдаления) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
			
		// Подчиненные элементы
		
	    УстановитьСнятьПометкуУдаленияПодчиненныхЭлементов(ЭлектронныйКурс, ПометкаУдаления);
		
		// Группы для хранения элементов
		
		ВсеГруппыХранения = РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.ВсеГруппыЭлектронногоКурса(ЭлектронныйКурс);		
		Для каждого ГруппаХранения Из ВсеГруппыХранения Цикл
		 	ГруппаХраненияОбъект  = ГруппаХранения.ПолучитьОбъект();
			ГруппаХраненияОбъект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);			
		КонецЦикла;
		
		// Публикация (обязательно после обработки элементов)
		
		Если ПометкаУдаления Тогда
			РегистрыСведений.ПубликацииЭлектронныхКурсов.УдалитьПубликацию(ЭлектронныйКурс);
		Иначе
			РегистрыСведений.ПубликацииЭлектронныхКурсов.Опубликовать(ЭлектронныйКурс, Истина);
		КонецЕсли;			
		
		// Статистика изучения

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИзучениеЭлектронногоКурса.Ссылка КАК Ссылка,
			|	ИзучениеЭлектронногоКурса.Учащийся КАК Учащийся
			|ИЗ
			|	Документ.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса
			|ГДЕ
			|	ИзучениеЭлектронногоКурса.ЭлектронныйКурс = &ЭлектронныйКурс";
		
		Запрос.УстановитьПараметр("ЭлектронныйКурс", ЭлектронныйКурс);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Учащийся) Тогда
				Продолжить; // Для совместимости с 3.1, где были тестовые документы
			КонецЕсли;
			
			ИзучениеЭлектронногоКурсаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ИзучениеЭлектронногоКурсаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			
			Если НЕ ПометкаУдаления Тогда
				ИзучениеЭлектронногоКурсаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
		
	Исключение
 
 		ОтменитьТранзакцию();
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
		
		
КонецПроцедуры

Процедура УстановитьСнятьПометкуУдаленияПодчиненныхЭлементов(Знач ЭлектронныйКурс, Знач ПометкаУдаления) Экспорт
	
	ПодчиненныеЭлементы = РазработкаЭлектронныхКурсовСлужебный.ВсеСсылкиЭлементаСправочника(ЭлектронныйКурс, Истина);
		
	Для каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
	
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("СправочникСсылка.ПоставщикиЭлектронныхКурсов") Тогда
			Продолжить; // Поставщика курса не удаляем
		КонецЕсли;		
		
		ПодчиненныйЭлементОбъект  = ПодчиненныйЭлемент.ПолучитьОбъект();
		ПодчиненныйЭлементОбъект.ДополнительныеСвойства.Вставить("ПомечатьПодчиненные", Ложь); // Так как все подчиненные есть в этом массиве ссылок
		ПодчиненныйЭлементОбъект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	
	КонецЦикла;			
	
КонецПроцедуры

// Добавляет элемент в содержание электронного курса
//
Функция ДобавитьЭлементСодержания(ЭлектронныйКурс, СсылкаНаЭлемент, Группа, ЭтоГруппа = Ложь, Наименование = Неопределено, ТипЭлемента = Неопределено, ЭлементСодержания = Неопределено) Экспорт
	
	Если ЭтоГруппа Тогда
		ЭлементСодержанияОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьГруппу();
	Иначе
		ЭлементСодержанияОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьЭлемент();
    КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСодержания) Тогда
		ЭлементСодержанияОбъект.УстановитьСсылкуНового(ЭлементСодержания);
	КонецЕсли;
	
	Если Наименование = Неопределено И ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда		
		ЭлементСодержанияОбъект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлемент, "Наименование");		
	Иначе		
		ЭлементСодержанияОбъект.Наименование = Наименование;			
	КонецЕсли;
	
	ЭлементСодержанияОбъект.Владелец = ЭлектронныйКурс;
	
	Если ЗначениеЗаполнено(СсылкаНаЭлемент)
		И НЕ ЭтоГруппа Тогда
		
		ЭлементСодержанияОбъект.Элемент = СсылкаНаЭлемент;
		
	КонецЕсли;

	Если ТипЗнч(Группа) = Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда
		ЭлементСодержанияОбъект.Родитель = Группа;
	КонецЕсли;
	
	РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементСодержанияОбъект);	
	
	Если ЗначениеЗаполнено(ТипЭлемента) Тогда
		ЭлементСодержанияОбъект.ТипЭлемента = ТипЭлемента;
	Иначе				
		ЭлементСодержанияОбъект.ТипЭлемента = Справочники.СодержаниеЭлектронныхКурсов.ТипЭлементаПоСсылке(СсылкаНаЭлемент, ЭтоГруппа);
	КонецЕсли;		
	
	ЭлементСодержанияОбъект.Записать();
	
	Возврат ЭлементСодержанияОбъект.Ссылка;
	
КонецФункции

Функция СкопироватьЭлектронныйКурс(Знач СтарыйЭлектронныйКурс) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// Делаем копию курса
		//
		
		НовыйЭлектронныйКурсОбъект = СтарыйЭлектронныйКурс.Скопировать();	
		НовыйЭлектронныйКурсОбъект.Наименование =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - копия'"), НовыйЭлектронныйКурсОбъект.Наименование);
		НовыйЭлектронныйКурсОбъект.ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
		НовыйЭлектронныйКурсОбъект.Записать();
		
		НовыйЭлектронныйКурс = НовыйЭлектронныйКурсОбъект.Ссылка;
		
		// Делаем копии подчиненных элементов
		//
		
		ТаблицаСкопированныхЭлементов = Новый ТаблицаЗначений;
		ТаблицаСкопированныхЭлементов.Колонки.Добавить("СтарыйЭлемент");
		ТаблицаСкопированныхЭлементов.Колонки.Добавить("НовыйЭлемент");
		ТаблицаСкопированныхЭлементов.Колонки.Добавить("ТипЭлемента");
		
		СтарыеПодчиненныеЭлементы = РазработкаЭлектронныхКурсовСлужебный.ВсеСсылкиЭлементаСправочника(СтарыйЭлектронныйКурс, Истина, Истина);
		
		Для каждого СтарыйПодчиненныйЭлемент Из СтарыеПодчиненныеЭлементы Цикл			
			
			Если ТипЗнч(СтарыйПодчиненныйЭлемент) = Тип("СправочникСсылка.ПоставщикиЭлектронныхКурсов") Тогда
				Продолжить; // Поставщика не обрабатываем
			КонецЕсли;			
			
			ТипСтарогоЭлемента = ТипЗнч(СтарыйПодчиненныйЭлемент);
			ИмяСправочника = ЭлектронноеОбучениеСлужебный.ИмяСправочникаПоСсылке(СтарыйПодчиненныйЭлемент);
			
			НоваяСтрока = ТаблицаСкопированныхЭлементов.Добавить();
			НоваяСтрока.ТипЭлемента = ТипСтарогоЭлемента;
			НоваяСтрока.СтарыйЭлемент = СтарыйПодчиненныйЭлемент;
			
			Если ТипЗнч(СтарыйПодчиненныйЭлемент) = Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсовПрисоединенныеФайлы") Тогда
				Продолжить; // Присоединенные файлы будут скопированы отдельным алгоритмом (см. ниже)
			КонецЕсли;			
			
			НовыйПодчиненныйЭлементОбъект = СтарыйПодчиненныйЭлемент.Скопировать();
			
			Если РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ЭтоИерархическийСправочник(ИмяСправочника)
				И НЕ РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ЭтоПодчиненныйСправочник(ИмяСправочника) Тогда
			
				НовыйПодчиненныйЭлементОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(НовыйЭлектронныйКурс, ТипСтарогоЭлемента);
				
			КонецЕсли;
			
			НовыйПодчиненныйЭлементОбъект.ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
			НовыйПодчиненныйЭлементОбъект.Записать();
			
			НоваяСтрока.НовыйЭлемент = НовыйПодчиненныйЭлементОбъект.Ссылка;
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаСкопированныхЭлементов.Добавить();
		НоваяСтрока.СтарыйЭлемент = СтарыйЭлектронныйКурс;
		НоваяСтрока.НовыйЭлемент = НовыйЭлектронныйКурс;
		НоваяСтрока.ТипЭлемента = ТипЗнч(СтарыйЭлектронныйКурс);
		
		// Копируем файлы
		//
		
		// Находим все элементы ресурсов и копируем их файлы
		
		СтрокиСЭлементамиРесурсов = ТаблицаСкопированныхЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента", Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсов")));
		
		Для каждого СтрокаСЭлементомРесурса Из СтрокиСЭлементамиРесурсов Цикл									
			
			// Заполняем таблицу с новыми и старыми элементами
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
				|	ПрисоединенныеФайлы.Размер КАК Размер,
				|	ПрисоединенныеФайлы.Наименование КАК Наименование,
				|	ПрисоединенныеФайлы.Расширение КАК Расширение
				|ИЗ
				|	Справочник.ЭлементыЭлектронныхРесурсовПрисоединенныеФайлы КАК ПрисоединенныеФайлы
				|ГДЕ
				|	ПрисоединенныеФайлы.ВладелецФайла = &СтарыйЭлементРесурса
				|	И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("СтарыйЭлементРесурса", СтрокаСЭлементомРесурса.СтарыйЭлемент);
			
			ФайлыСтарогоЭлемента = Запрос.Выполнить().Выгрузить();
			
			Если ФайлыСтарогоЭлемента.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Копируем физически файлы
			
			РаботаСФайламиСлужебный.СкопироватьПрисоединенныеФайлы(СтрокаСЭлементомРесурса.СтарыйЭлемент, СтрокаСЭлементомРесурса.НовыйЭлемент);			
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
				|	ПрисоединенныеФайлы.Наименование КАК Наименование,
				|	ПрисоединенныеФайлы.Размер КАК Размер,
				|	ПрисоединенныеФайлы.Расширение КАК Расширение
				|ИЗ
				|	Справочник.ЭлементыЭлектронныхРесурсовПрисоединенныеФайлы КАК ПрисоединенныеФайлы
				|ГДЕ
				|	ПрисоединенныеФайлы.ВладелецФайла = &НовыйЭлементРесурса
				|	И ПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("НовыйЭлементРесурса", СтрокаСЭлементомРесурса.НовыйЭлемент);
			
			ФайлыНовогоЭлемента = Запрос.Выполнить().Выгрузить();
			
			Если ФайлыСтарогоЭлемента.Количество() <> ФайлыНовогоЭлемента.Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Копирование файлов не выполнено'");
			КонецЕсли;
			
			Для каждого СтрокаФСЭ Из ФайлыСтарогоЭлемента Цикл
			
				СтрокиТСЭ = ТаблицаСкопированныхЭлементов.НайтиСтроки(Новый Структура("СтарыйЭлемент", СтрокаФСЭ.Ссылка));
				
				Если СтрокиТСЭ.Количество() <> 1 Тогда
					ВызватьИсключение НСтр("ru = 'Найдено более одного файла элемента ресурса для копирования'");
				КонецЕсли;
				
				СтрокаТСЭ = СтрокиТСЭ[0];
				
				СтрокиФНЭ = ФайлыНовогоЭлемента.НайтиСтроки(Новый Структура("Наименование, Размер, Расширение", СтрокаФСЭ.Наименование, СтрокаФСЭ.Размер, СтрокаФСЭ.Расширение));
				
				Если СтрокиФНЭ.Количество() <> 1 Тогда
					ВызватьИсключение НСтр("ru = 'Скопированный файл не найден'");
				КонецЕсли;					
				
			    СтрокаТСЭ.НовыйЭлемент = СтрокиФНЭ[0].Ссылка;
				
			КонецЦикла;	
				
		КонецЦикла;		
		
		// Заменяем старые ссылки на подчиненные элементы новыми
		//
		
		ЛокализованноеИмяРеквизитаВладелец = РазработкаЭлектронныхКурсовСлужебный.ПеревестиСтандартныйРеквизит(,"Owner");
		ЛокализованноеИмяРеквизитаРодитель = РазработкаЭлектронныхКурсовСлужебный.ПеревестиСтандартныйРеквизит(,"Parent");
		
		Для каждого Строка Из ТаблицаСкопированныхЭлементов Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.НовыйЭлемент) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Элемент ""%1"" не скопирован. Тип: %2'"), Строка(Строка.СтарыйЭлемент), Строка(Строка.ТипЭлемента));
			КонецЕсли;
			
			ИмяСправочника = ЭлектронноеОбучениеСлужебный.ИмяСправочникаПоСсылке(Строка.СтарыйЭлемент);
			ВсеСсылкиСправочника =  РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ВсеСсылкиСправочника(ИмяСправочника);
			
			// Реквизиты и табличные части
			
			Если ВсеСсылкиСправочника.Реквизиты.Количество() > 0
				ИЛИ ВсеСсылкиСправочника.ТабличныеЧасти.Количество() > 0 Тогда
				
				НовыйЭлементОбъект = Строка.НовыйЭлемент.ПолучитьОбъект();
				
				Для каждого ИмяРеквизита Из ВсеСсылкиСправочника.Реквизиты Цикл
					
					Если ИмяРеквизита = ЛокализованноеИмяРеквизитаВладелец Тогда
						Продолжить; // Владельца пока не меняем, так как это будет сделано далее отдельным алгоритмом
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НовыйЭлементОбъект[ИмяРеквизита]) Тогда
					
						СтрокаТСЭ = ТаблицаСкопированныхЭлементов.Найти(НовыйЭлементОбъект[ИмяРеквизита], "СтарыйЭлемент");						
						
						Если СтрокаТСЭ <> Неопределено И ЗначениеЗаполнено(СтрокаТСЭ.НовыйЭлемент) Тогда
							НовыйЭлементОбъект[ИмяРеквизита] = СтрокаТСЭ.НовыйЭлемент;
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЦикла;
				
				Для каждого ОписаниеТЧ Из ВсеСсылкиСправочника.ТабличныеЧасти Цикл
				
					Для каждого СтрокаТЧ Из НовыйЭлементОбъект[ОписаниеТЧ.Имя] Цикл
						
						Если ЗначениеЗаполнено(СтрокаТЧ[ОписаниеТЧ.Реквизит]) Тогда
							
							СтрокаТСЭ = ТаблицаСкопированныхЭлементов.Найти(СтрокаТЧ[ОписаниеТЧ.Реквизит], "СтарыйЭлемент");
							
							Если СтрокаТСЭ <> Неопределено И ЗначениеЗаполнено(СтрокаТСЭ.НовыйЭлемент) Тогда
								СтрокаТЧ[ОписаниеТЧ.Реквизит] = СтрокаТСЭ.НовыйЭлемент;
							КонецЕсли;						
							
						КонецЕсли;
							
					КонецЦикла;
				
				КонецЦикла;
				
				НовыйЭлементОбъект.ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
				НовыйЭлементОбъект.Записать();
				
			КонецЕсли;
			
			// Подчиненные элементы
			
			Если ВсеСсылкиСправочника.ПодчиненныеСправочники.Количество() > 0 Тогда
				
				Для каждого ИмяПодчиненногоСправочника Из ВсеСсылкиСправочника.ПодчиненныеСправочники Цикл
					
					СтрокиСПодчиненными = ТаблицаСкопированныхЭлементов.НайтиСтроки(Новый Структура("ТипЭлемента", Тип("СправочникСсылка."+ИмяПодчиненногоСправочника)));
					
					Для каждого СтрокаСПодчиненным Из СтрокиСПодчиненными Цикл
					
						Если НЕ ЗначениеЗаполнено(СтрокаСПодчиненным.НовыйЭлемент) Тогда
							Продолжить;
						КонецЕсли;
						
						НовыйЭлементОбъект = СтрокаСПодчиненным.НовыйЭлемент.ПолучитьОбъект();
						
						СтрокаТСЭ = ТаблицаСкопированныхЭлементов.Найти(НовыйЭлементОбъект.Владелец, "СтарыйЭлемент");
						
						Если СтрокаТСЭ <> Неопределено И ЗначениеЗаполнено(СтрокаТСЭ.НовыйЭлемент) Тогда
							НовыйЭлементОбъект.Владелец = СтрокаТСЭ.НовыйЭлемент;
						КонецЕсли;							
						
						НовыйЭлементОбъект.ОбменДанными.Загрузка = Истина;
						НовыйЭлементОбъект.ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
						НовыйЭлементОбъект.Записать();
						
					КонецЦикла;
					
				КонецЦикла
				
			КонецЕсли;
			
		КонецЦикла;
				
		// Завершаем
		//
		
		ЗафиксироватьТранзакцию();
	
	Исключение
 
 		ОтменитьТранзакцию();
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;	
	
	// Завершаем
	
	Возврат НовыйЭлектронныйКурсОбъект.Ссылка;
	
КонецФункции

// ВЕБ-КАБИНЕТ

// Обновляет данные веб-кабинета пользователя, которые не обновляются "пообъектно"
//
Процедура ОбновитьДанныеВебКабинета(Пользователь, ТаблицаЭлектронныхРесурсов = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ВебКабинетСУ") Тогда
		
		МодульВебКабинетСУЗ = ОбщегоНазначения.ОбщийМодуль("ВебКабинетСУЗ");

		МодульВебКабинетСУЗ.ОбновитьДанныеВебКабинета(Пользователь, ТаблицаЭлектронныхРесурсов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

