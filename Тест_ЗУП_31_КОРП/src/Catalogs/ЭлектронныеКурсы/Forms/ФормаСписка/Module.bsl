#Область ОписаниеПеременных

&НаКлиенте
Перем ОписаниеДопустимыхТиповПеретаскивания; // Типы, которые можно перетаскивать в курс

#КонецОбласти


#Область ОбработчикиСобытийФормы

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;	
	
	// Получаем переменные
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.ЭлектронныеКурсы);	
	
	// Прячем все команды Создать
	
	ВсеТипыКурсов = Новый Массив;;
	
	Для каждого ТипКурса Из Перечисления.ТипыЭлектронныхКурсов Цикл	
		ВсеТипыКурсов.Добавить(ТипКурса);	
	КонецЦикла;	
	
	ВсегоТиповКурсов = ВсеТипыКурсов.Количество();
	
	Для каждого ТипКурса Из ВсеТипыКурсов Цикл	
		ИмяТипа = ЭлектронноеОбучениеСлужебный.ИмяЗначенияПеречисления(ТипКурса);		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьВидимостьЭлементаФормыБезопасно(ЭтотОбъект, "КомандаСоздать" + ИмяТипа, Ложь);
	КонецЦикла;	
	
	// Показываем нужные команды Создать
	
	ТипыКурсов = РазработкаЭлектронныхКурсовСлужебный.ТипыЭлектронныхКурсов();
	
	Если ЕстьПравоИзменения Тогда
	
		Если ТипыКурсов.Количество() = ВсегоТиповКурсов Тогда
			
			ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьВидимостьЭлементаФормыБезопасно(ЭтотОбъект, "ПодменюСоздать", Истина);		
			
		Иначе
			
			ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьВидимостьЭлементаФормыБезопасно(ЭтотОбъект, "ПодменюСоздать", Ложь);
			
			Если ТипыКурсов.Количество() = 1 Тогда
				
				ИмяТипа = ЭлектронноеОбучениеСлужебный.ИмяЗначенияПеречисления(ТипыКурсов[0]);
				ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьВидимостьЭлементаФормыБезопасно(ЭтотОбъект, "КомандаСоздать" + ИмяТипа, Истина);				
				ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьЗаголовокЭлементаФормыБезопасно(ЭтотОбъект, "КомандаСоздать" + ИмяТипа, НСтр("ru = 'Создать'"));
				
			Иначе
				
				Для каждого ТипКурса Из ТипыКурсов Цикл	
					ИмяТипа = ЭлектронноеОбучениеСлужебный.ИмяЗначенияПеречисления(ТипКурса);
					ЭлектронноеОбучениеСлужебныйКлиентСервер.УстановитьВидимостьЭлементаФормыБезопасно(ЭтотОбъект, "КомандаСоздать" + ИмяТипа, Истина);		
				КонецЦикла;			
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	// Устанавливаем видимость элементов курса	
	
	УстановитьВидимостьПредупрежденияОбИзмененныхКурсах();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЭлектронныйКурсЗаписан" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

	Если ИмяСобытия = "ВыполняетсяПубликацияЭлектронногоКурса" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредупреждениеОбИзмененныхКурсах", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьПравоИзменения Тогда
		ПодключитьОбработчикОжидания("ОбновитьПредупреждениеОбИзмененныхКурсах", 5, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Список


&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	#Если НЕ ВебКлиент Тогда
		
	Значение    = ПараметрыПеретаскивания.Значение;
	ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение);
	
	// 1. Проверяем возможность перетаскивания, когда нет описания типов.
	
	Если ОписаниеДопустимыхТиповПеретаскивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Проверяем возможность перетаскивания с описанием допустимых типов.
	
	Если ТипЗначения = Тип("Массив") Тогда
		ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение[0]);
	КонецЕсли;
	
	Если ОписаниеДопустимыхТиповПеретаскивания.СодержитТип(ТипЗначения) Тогда		
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;		
	КонецЕсли;		
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	#Если НЕ ВебКлиент Тогда

	Если (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл"))
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда		
			МассивФайлов = ПараметрыПеретаскивания.Значение;
		Иначе
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		КонецЕсли;
		
		КаталогДляЗагрузкиВКурс = Неопределено;
		
		Для каждого ФайлДляЗагрузки Из МассивФайлов Цикл
		
			Если ФайлДляЗагрузки.ЭтоКаталог() Тогда
				КаталогДляЗагрузкиВКурс = ФайлДляЗагрузки;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Если КаталогДляЗагрузкиВКурс <> Неопределено Тогда
		
			ТекстПредупреждения = НСтр("ru = 'Будет создан электронный курс из файлов каталога ""%1"". Продолжить?'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, КаталогДляЗагрузкиВКурс.Имя);		
			
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ЗагрузитьФайлыСДискаВБазу", ЭтотОбъект, КаталогДляЗагрузкиВКурс.ПолноеИмя);		
			ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
			
	КонецЕсли;

	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьФайлыСДискаВБазу(Результат, ПутьККаталогуДляЗагрузкиВКурс) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЗначениеЗаполнено(ПутьККаталогуДляЗагрузкиВКурс) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормыКурса = Новый Структура;
	ПараметрыФормыКурса.Вставить("ПутьККаталогуСФайламиКурса", ПутьККаталогуДляЗагрузкиВКурс);
	ПараметрыФормыКурса.Вставить("РежимРедактирования", Истина);
	
	Состояние(НСтр("ru = 'Загружается каталог...'"),,ПутьККаталогуДляЗагрузкиВКурс);
	
	ОткрытьФорму("ОбщаяФорма.ЭлектронныйКурс", ПараметрыФормыКурса, ЭтотОбъект);
		
		
	#КонецЕсли

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Настройки(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиЭлектронныхКурсов.Форма.ФормаРедактированияНастроек");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзмененныеКурсыНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ИзмененныеЭлектронныеКурсы.ФормаСписка");
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_ОбновитьПредупреждениеОбИзмененныхКурсах()	
	ОбновитьПредупреждениеОбИзмененныхКурсах();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеОбИзмененныхКурсах()	
	
	Если НЕ ЕстьПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьПредупрежденияОбИзмененныхКурсах();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПредупрежденияОбИзмененныхКурсах()
	
	Если НЕ ЕстьПравоИзменения Тогда
		Элементы.ГруппаИзмененные.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	КоличествоИзмененных = РегистрыСведений.ИзмененныеЭлектронныеКурсы.КоличествоИзмененныхКурсов();
	
	Если КоличествоИзмененных > 0 Тогда		
		Элементы.ГруппаИзмененные.Видимость = Истина;
		КоличествоИзмененныхСтрокой = СтрокаСЧислом(";%1 курс отредактирован;;%1 курса отредактировано;%1 курсов отредактировано;%1 курса отредактировано", КоличествоИзмененных, ВидЧисловогоЗначения.Количественное, "L=ru");
		Элементы.ДекорацияИзмененныеКурсы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, но изменения еще не опубликованы и не будут доступны при изучении курса'"), КоличествоИзмененныхСтрокой);
	Иначе
		Элементы.ГруппаИзмененные.Видимость = Ложь;
		Возврат;		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ФайлыДляЗагрузки = Новый Массив;

МассивТипов = Новый Массив;
#Если НЕ ВебКлиент Тогда
МассивТипов.Добавить(Тип("Файл"));
#КонецЕсли
ОписаниеДопустимыхТиповПеретаскивания = Новый ОписаниеТипов(МассивТипов);

#КонецОбласти
