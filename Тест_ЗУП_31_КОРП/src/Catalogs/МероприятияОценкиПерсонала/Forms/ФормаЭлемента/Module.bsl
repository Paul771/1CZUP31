
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОценкуПерсонала") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда // форма нового
		ЗаполнитьВидыEmail();
		ОбработкаЗаполненияНовогоЭлемента();
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьВидыEmail();
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	АктивироватьСтрокуХарактеристик();
	АктивироватьСтрокуОцениваемых();
	
	ОбновитьОписаниеСостоянияМероприятия();
	
	АдресВебСсылки = ПолучитьНавигационнуюСсылку(ПолучитьФорму("Обработка.ДоступныеАнкеты.Форма"));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки мероприятия ""%1"" были модифицированы, сохранить их?'"), Объект.Наименование);
			
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(ОбработчикОповещенияОЗакрытии, Отказ, ЗавершениеРаботы, ТекстВопроса)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала") Тогда
		ЗаполнитьХарактеристикиИВопросы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФизическиеЛица" Тогда
		ЗаполнитьEmailФизическогоЛица(Источник);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппаПроцессОценкиПерсоналаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// При переключении на страницу хода анкетирования, заполним сведения о настройках мероприятия.
	Если ТекущаяСтраница.Имя = "ГруппаАнкетирование" Тогда
		ЗаполнитьСтатусМероприятия();
		ОбновитьОписаниеСостоянияМероприятия();
		Если ПереформироватьРеспондентов Тогда
			ЗаполнитьТЧРеспонденты();
			ПереформироватьРеспондентов = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница.Имя = "ГруппаАнализРезультатов" Тогда
		Если ПереформироватьСотрудников Тогда
			ЗаполнитьТЧСотрудники();
			ПереформироватьСотрудников = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияРеспондентовПриИзменении(Элемент)
	
	УстановитьВидимостьОценивающиеГруппы(ЭтаФорма);
	СпособЗаполненияРеспондентовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОткрытыеВопросы

&НаКлиенте
Процедура ОткрытыеВопросыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Наименование) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Вопрос = ПредопределенноеЗначение("ПланВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка");
		Элемент.ТекущиеДанные.Модифицированность = Истина;
	ИначеЕсли Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОцениваемые

&НаКлиенте
Процедура ОцениваемыеПриАктивизацииСтроки(Элемент)
	ОцениваемыеАктуализироватьОценивающихНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОцениваемыеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ОцениваемыеАктуализироватьОценивающихНаКлиенте(Элемент);
	Если Не ОтменаРедактирования Тогда
		ПереформироватьСотрудников = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОцениваемыеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранныхСотрудников(ВыбранноеЗначение);
	АктивироватьСтрокуОцениваемых();
	
	Модифицированность = Истина;
	ПереформироватьСотрудников = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОцениваемыеПередУдалением(Элемент, Отказ)
	УдалитьРеспондентовФизлица(АктивизированноеФизическоеЛицо);
	ПереформироватьСотрудников = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОцениваемыеФизическоеЛицоПриИзменении(Элемент)
	
	ЗаполнитьПолеФизлицоТаблицыРеспонденты(АктивизированноеФизическоеЛицо, Элементы.Оцениваемые.ТекущиеДанные.ФизическоеЛицо);
	
	АктивизированноеФизическоеЛицо = Элементы.Оцениваемые.ТекущиеДанные.ФизическоеЛицо;
	Элементы.ОценивающиеИндивидуальные.ОтборСтрок = Новый ФиксированнаяСтруктура("ФизическоеЛицо", АктивизированноеФизическоеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОценивающиеИндивидуальные

&НаКлиенте
Процедура ОценивающиеИндивидуальныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ОценивающиеПередНачаломДобавленияНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОценивающиеИндивидуальныеПередУдалением(Элемент, Отказ)
	ПереформироватьРеспондентов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОценивающиеИндивидуальныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ОценивающиеИндивидуальныеПередОкончаниемРедактированияНаКлиенте(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ);
	Если Не ОтменаРедактирования Тогда
		ПереформироватьРеспондентов = Истина;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРеспонденты

&НаКлиенте
Процедура РеспондентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "РеспондентыРеспондент" Тогда
		ВыбранноеФизическоеЛицо = Респонденты.НайтиПоИдентификатору(ВыбраннаяСтрока).Респондент;
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта",Новый Структура("Ключ", ВыбранноеФизическоеЛицо));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРеспонденты

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СотрудникиФизическоеЛицо" Тогда
		ВыбранноеФизическоеЛицо = Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока).ФизическоеЛицо;
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта",Новый Структура("Ключ", ВыбранноеФизическоеЛицо));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыХарактеристикиПерсонала

&НаКлиенте
Процедура ХарактеристикиПерсоналаВключенаПриИзменении(Элемент)
	УстановитьЦветВопросовПоХарактеристикам();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФорму("ПланВидовХарактеристик.ХарактеристикиПерсонала.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ХарактеристикиПерсоналаКлиент.ХарактеристикиВыбор(Элемент.ТекущиеДанные, "ХарактеристикаПерсонала");
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПерсоналаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ЗаголовокИндикаторов = НСтр("ru = 'Поведенческие индикаторы характеристик персонала'");
	Иначе
		ЗаголовокИндикаторов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поведенческие индикаторы характеристики ""%1""'"), Элемент.ТекущиеДанные.ХарактеристикаПерсонала);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВопросыХарактеристик.ОтборСтрок = Новый ФиксированнаяСтруктура("ХарактеристикаПерсонала", Элемент.ТекущиеДанные.ХарактеристикаПерсонала);
	
	УстановитьЦветВопросовПоХарактеристикам();
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормыВопросыХарактеристик
	
&НаКлиенте
Процедура ВопросыХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОтборПоХарактеристикеЗаполнен = Элемент.ОтборСтрок <> Неопределено И ЗначениеЗаполнено(Элемент.ОтборСтрок["ХарактеристикаПерсонала"]);
	Если НЕ ОтборПоХарактеристикеЗаполнен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана характеристика'"),,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыХарактеристикПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Вопрос) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, Элемент.ОтборСтрок);
		ХарактеристикиКВключению = ХарактеристикиПерсонала.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", Элемент.ТекущиеДанные.ХарактеристикаПерсонала));
		Если ХарактеристикиКВключению.Количество() > 0 Тогда
		 	ХарактеристикиКВключению[0].Включена = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыХарактеристикПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтборПоХарактеристике = Новый Структура("ХарактеристикаПерсонала", Элемент.ТекущиеДанные.ХарактеристикаПерсонала);
	Если ВопросыХарактеристик.НайтиСтроки(ОтборПоХарактеристике).Количество() = 1 Тогда
		ХарактеристикиКВыключению = ХарактеристикиПерсонала.НайтиСтроки(ОтборПоХарактеристике);
		Если ХарактеристикиКВыключению.Количество() > 0 Тогда
			ХарактеристикиКВыключению[0].Включена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВопросыХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Вопрос = ВыбранноеЗначение;
	ТекущиеДанные.ХарактеристикаПерсонала =  Элементы.ВопросыХарактеристик.ОтборСтрок.ХарактеристикаПерсонала;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыХарактеристикВопросНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВопросыХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если Элементы.ВопросыХарактеристик.ОтборСтрок.Свойство("ХарактеристикаПерсонала") Тогда
		ПараметрыФормы.Вставить("ХарактеристикаПерсонала", Элементы.ВопросыХарактеристик.ОтборСтрок.ХарактеристикаПерсонала);
	КонецЕсли;
	ОткрытьФорму("Справочник.МероприятияОценкиПерсонала.Форма.СписокВопросовДляАнкетирования", ПараметрыФормы, Элементы.ВопросыХарактеристик); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыХарактеристикВопросОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВопросыХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Вопрос);
	ПараметрыФормы.Вставить("ХарактеристикаПерсонала", ТекущиеДанные.ХарактеристикаПерсонала);
	
	ОткрытьФорму("Справочник.МероприятияОценкиПерсонала.Форма.НастройкаВопросовДляАнкетирования", ПараметрыФормы, Элементы.ВопросыХарактеристик, ТекущиеДанные.ХарактеристикаПерсонала); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СформироватьОтчетКорпоративныеРезультаты(Команда)
	
	ВариантОтчета = "Корпоративный";
	ПользовательскиеНастройкиОтчета = ПользовательскиеНастройкиОтчетаОценкиПерсонала(
		Новый Структура("Мероприятие,КлючВарианта", Объект.Ссылка, ВариантОтчета));
	
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, КлючВарианта, ПользовательскиеНастройки",
		Истина, ВариантОтчета, ПользовательскиеНастройкиОтчета);
	
	ОткрытьФорму("Отчет.ОценкаПерсонала.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетИндивидуальныеРезультаты(Команда)
	
	Если Элементы.Сотрудники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ВариантОтчета = "Индивидуальный";
	ПользовательскиеНастройкиОтчета = ПользовательскиеНастройкиОтчетаОценкиПерсонала(
		Новый Структура("Мероприятие,Оцениваемый,КлючВарианта", Объект.Ссылка, Элементы.Сотрудники.ТекущиеДанные.ФизическоеЛицо, ВариантОтчета));
	
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии, КлючВарианта, ПользовательскиеНастройки",
		Истина, ВариантОтчета, ПользовательскиеНастройкиОтчета);
	
	ОткрытьФорму("Отчет.ОценкаПерсонала.Форма", ПараметрыОтчета);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияВыбранным(Команда)
	
	Если Элементы.Респонденты.ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПриглашенияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияВсем(Команда)
	
	ОтправитьПриглашенияНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРезультатыВыбранным(Команда)
	
	Если Элементы.Сотрудники.ВыделенныеСтроки.Количество() = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Ошибки = Неопределено;
	
	Получатели = Новый Соответствие;
	Для каждого ВыбраннаяСтрока Из Элементы.Сотрудники.ВыделенныеСтроки Цикл
		Если ЗначениеЗаполнено(Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока).АдресЭП) Тогда
			Получатели.Вставить(Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока).ФизическоеЛицо,Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока).АдресЭП);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сотрудники[%1].АдресЭП",Сотрудники.Индекс(Сотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока))),
				НСтр("ru = 'Не заполнен адрес электронной почты'"),"");
		КонецЕсли;
	КонецЦикла; 
	
	ОчиститьСообщения();
	
	ОтправитьРезультатыСервер(Новый Структура("Мероприятие,Получатели,КлючВарианта", Объект.Ссылка, Получатели, "Индивидуальный"));
		
	Если НЕ Ошибки = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРезультатыВсем(Команда)
	
	Ошибки = Неопределено;
	
	Получатели = Новый Соответствие;
	Для каждого Сотрудник Из Сотрудники Цикл
		Если ЗначениеЗаполнено(Сотрудник.АдресЭП) Тогда
			Получатели.Вставить(Сотрудник.ФизическоеЛицо,Сотрудник.АдресЭП);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Сотрудники[%1].АдресЭП",Сотрудники.Индекс(Сотрудник)),
				НСтр("ru = 'Не заполнен адрес электронной почты'"),"");
		КонецЕсли;	
	КонецЦикла; 
	
	ОчиститьСообщения();
	
	ОтправитьРезультатыСервер(Новый Структура("Мероприятие,Получатели,КлючВарианта", Объект.Ссылка, Получатели, "Индивидуальный"));
		
	Если НЕ Ошибки = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудников(Команда)
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихНаДатуПоПараметрамОткрытияФормыСписка(
		Элементы.Оцениваемые,,,
		ДатаАктуальности,,
		АдресСпискаПодобранныхСотрудников());
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеспондентов(Команда)
	
	Если Объект.Участники.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Список сотрудников не заполнен.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуЗаполненияРеспондентов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАнкетирование(Команда)
	
	// Так как мероприятие надо сохранить - спрашиваем пользователя
	Если Модифицированность Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки мероприятия ""%1"" были модифицированы, сохранить их?'"), Объект.Наименование);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НачатьАнкетированиеЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,Нстр("ru = 'Записать?'"));
		
	Иначе
		НачалоАнкетированияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьАнкетирование(Команда)
	
	// Так как мероприятие надо сохранить - спрашиваем пользователя
	Если Модифицированность Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки мероприятия ""%1"" были модифицированы, сохранить их?'"), Объект.Наименование);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПродлитьАнкетированиеЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,Нстр("ru = 'Записать?'"));
		
	Иначе
		ПродлениеАнкетирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияАнкеты(Команда)
	
	// Необходимо сохранить мероприятие в случае если оно модифицировано
	// или шаблон анкеты, которую хотим открыть, не сохранен.
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.ШаблонАнкеты) Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуЗаполненияАнкетыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
			Нстр("ru = 'Для корректного отображения необходимо записать мероприятие.
			|Записать?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			Нстр("ru = 'Записать?'"));
	Иначе
		ОткрытьФормуМастераАнкетыПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблонПриглашения(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки мероприятия ""%1"" были модифицированы, сохранить их?'"), Объект.Наименование);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("НастроитьШаблонПриглашенияЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,Нстр("ru = 'Записать?'"));
		
	Иначе
		НастройкаШаблонаАнкеты();
	КонецЕсли;
		
КонецПроцедуры

// Заменяет текущие вопросы характеристики на те, которые привязаны к ней в регистре сведений.
&НаКлиенте
Процедура ПерезаполнитьИндикаторы(Команда)
	
	Если Элементы.ХарактеристикиПерсонала.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВопросыХарактеристики(Элементы.ХарактеристикиПерсонала.ТекущиеДанные.ХарактеристикаПерсонала);
	ЗаполнитьВопросамиХарактеристик(Элементы.ХарактеристикиПерсонала.ТекущиеДанные.ХарактеристикаПерсонала);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьМероприятие(Команда)
	
	ЗаписатьМероприятиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьМероприятиеНаКлиенте(ЗавершениеРаботы = Ложь)

	НовыйЭлемент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	МероприятиеЗаписано = ЗаписатьМероприятиеНаСервере(ЗавершениеРаботы);
	Если МероприятиеЗаписано Тогда
		Если НовыйЭлемент Тогда
			ОповеститьОЗаписиНового(Объект.Ссылка);
		Иначе
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МероприятиеЗаписано;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЗакрытьМероприятие(Команда)
	
	Если ЗаписатьМероприятиеНаКлиенте(Истина) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область УстановитьВидEmail

&НаКлиенте
Процедура Подключаемый_РеспондентыУстановитьВидEmail(Команда)
	УстановитьВидEmail("Респонденты", Число(Прав(Команда.Имя,1)));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СотрудникиУстановитьВидEmail(Команда)
	УстановитьВидEmail("Сотрудники", Число(Прав(Команда.Имя,1)));
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ПроцедурыИФункцииОсновнойФункциональности

// Заполняет реквизиты формы при ее открытии
//
&НаСервере
Процедура ПриПолученииДанныхНаСервере()

	ДатаАктуальности = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДоступноЧтениеРезультатов = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РезультатыОценкиСотрудников);
	
	СформироватьПодменюВидовEmail("Респонденты");
	СформироватьПодменюВидовEmail("Сотрудники");
	
	ЗаполнитьХарактеристикиИВопросы();
	
	ЗаполнитьТЧРеспонденты();
	ЗаполнитьТЧСотрудники();
	
	ЗаполнитьЦветаНадписей();
	ЗагрузитьШаблонАнкеты();
	
	ЗаполнитьВторичныеРеквизитыФормы();
	
	УстановитьСвойстваЭлементовФормы();

КонецПроцедуры

// Устанавливает доступность элементов фомы в зависимости от прав.
&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()

	УстановитьПараметрыВыбораДляОценивающиеОбщиеРольРеспондента();
	
	УстановитьВидимостьЭлементовОтображенияРезультатов();
	
	УстановитьДоступностьОцениваемых(ЭтаФорма);
	УстановитьДоступностьОценивающих(ЭтаФорма);
	УстановитьПодсказкиОцениваемымИОценивающим(ЭтаФорма);
	
	УстановитьДоступностьЭлементовПериодаАнкетирования();
	УстановитьДоступностьКомандАнкетирования();
	
	УстановитьВидимостьОценивающиеГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляОценивающиеОбщиеРольРеспондента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиРеспондентаОценкиПерсонала.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиРеспондентаОценкиПерсонала КАК РолиРеспондентаОценкиПерсонала
		|ГДЕ
		|	РолиРеспондентаОценкиПерсонала.Ссылка <> &СамооценкаПараметр";
	Запрос.УстановитьПараметр("СамооценкаПараметр", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.РолиРеспондентаОценкиПерсонала.Самооценка"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка")));
	
	Элементы.ОценивающиеОбщиеРольРеспондента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОцениваемых(Форма)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОцениваемыеГруппа", "ТолькоПросмотр", Форма.СведенияОМероприятии.АнкетированиеНачато);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОцениваемыеЗаполнитьСотрудников", "Доступность", Не Форма.СведенияОМероприятии.АнкетированиеНачато);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОценивающих(Форма)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОценивающиеГруппа", "ТолькоПросмотр", Форма.СведенияОМероприятии.АнкетированиеНачато);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОценивающиеЗаполнитьРеспондентов", "Доступность", Не Форма.СведенияОМероприятии.АнкетированиеНачато);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкиОцениваемымИОценивающим(Форма)

	Если Форма.СведенияОМероприятии.АнкетированиеНачато Тогда
		ТекстПодсказкиОцениваемых = НСтр("ru = 'Анкетирование начато, редактирование состава сотрудников, которых необходимо оценить, недоступно'");
		ТекстПодсказкиОценивающих = НСтр("ru = 'Анкетирование начато, редактирование состава тех, кто будет оценивать сотрудников, недоступно'");
	Иначе
		ТекстПодсказкиОцениваемых = НСтр("ru = 'Выберите сотрудников, которых необходимо оценить'");
		ТекстПодсказкиОценивающих = НСтр("ru = 'Выберите тех, кто будет оценивать сотрудников'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОцениваемыеГруппа",
		"Подсказка",
		ТекстПодсказкиОцениваемых);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОценивающиеГруппы",
		"Подсказка",
		ТекстПодсказкиОценивающих);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовОтображенияРезультатов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиГруппаОтчеты", "Видимость", ДоступноЧтениеРезультатов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСредняяОценка", "Видимость", ДоступноЧтениеРезультатов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСреднийРейтинг", "Видимость", ДоступноЧтениеРезультатов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиКонтекстноеМенюСформироватьОтчетИндивидуальныеРезультаты", "Видимость", ДоступноЧтениеРезультатов);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПериодаАнкетирования()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачала", "Доступность", Не СведенияОМероприятии.АнкетированиеНачато);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончания", "Доступность", Не СведенияОМероприятии.АнкетированиеНачато);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандАнкетирования()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачатьАнкетирование", "Доступность", Не СведенияОМероприятии.АнкетированиеНачато);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродлитьАнкетирование", "Доступность", СведенияОМероприятии.АнкетированиеНачато);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОценивающиеГруппы(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОценивающиеИндивидуальныеГруппа",
		"Видимость",
		Форма.Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное"));
				
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОценивающиеОбщиеГруппа",
		"Видимость",
		Форма.Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех"));
				
КонецПроцедуры

// Сохранение мероприятия
&НаСервере
Функция ЗаписатьМероприятиеНаСервере(ЗавершениеРаботы = Ложь)
	
	// Подготовим текущую таблицу вопросов
	ЗаписатьОткрытыеВопросы();
	ТекущиеВопросы = ТекущиеВопросыМероприятия();
	
	Если СведенияОМероприятии.АнкетированиеНачато Тогда
		// Если анкетирование уже начато - удалять старые вопросы нельзя.
		Если БылиИсключеныВопросы(ТекущиеВопросы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'После начала анкетирования нельзя удалять вопросы, которые уже были включены в анкеты.
				|Удаленные вопросы были загружены заново.'"));
			Если ЗавершениеРаботы Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Корректируем связанные с мероприятием анкеты
	ЗаписатьШаблонАнкеты();
	ЗаписатьВопросыШаблонаАнкеты(ТекущиеВопросы);
	
	ЗаписатьХарактеристикиИВопросы();
	
	// сохраним последние используемые варианты
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", "ИспользуемыйВидКонтактнойИнформацииРеспонденты", Объект.ВидКонтактнойИнформацииРеспонденты);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", "ИспользуемыйВидКонтактнойИнформацииСотрудники", Объект.ВидКонтактнойИнформацииСотрудники);
	
	// Записываем
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ СправочникОбъект.ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");		
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОткрытыеВопросы()

	Для каждого ОткрытыйВопрос Из ОткрытыеВопросы Цикл
		Если ЗначениеЗаполнено(ОткрытыйВопрос.Наименование) И ОткрытыйВопрос.Модифицированность Тогда
		    ЗаписатьВариантОтветаНаСервере(ОткрытыйВопрос);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗаписатьВариантОтветаНаСервере(ОткрытыйВопрос)

	Если ЗначениеЗаполнено(ОткрытыйВопрос.Вопрос) Тогда
		ВопросОбъект = ОткрытыйВопрос.Вопрос.ПолучитьОбъект();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВопросыДляАнкетирования.Ссылка КАК ВопросСсылка
			|ИЗ
			|	ПланВидовХарактеристик.ВопросыДляАнкетирования КАК ВопросыДляАнкетирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияОценкиПерсонала.ВопросыХарактеристик КАК МероприятияОценкиПерсоналаВопросы
			|		ПО ВопросыДляАнкетирования.Ссылка = МероприятияОценкиПерсоналаВопросы.Вопрос
			|			И (МероприятияОценкиПерсоналаВопросы.Ссылка <> &ТекущееМероприятие)
			|ГДЕ
			|	ВопросыДляАнкетирования.ТипОтвета = &ТипОтветаСтрока
			|	И ВопросыДляАнкетирования.Наименование ПОДОБНО &Наименование
			|	И МероприятияОценкиПерсоналаВопросы.НомерСтроки ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Наименование", ОткрытыйВопрос.Наименование);
		Запрос.УстановитьПараметр("ТипОтветаСтрока", ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка"));
		Запрос.УстановитьПараметр("ТекущееМероприятие", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка.Следующий();
			ВопросОбъект = Выборка.ВопросСсылка.ПолучитьОбъект();
		Иначе
			ВопросОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
			ВопросОбъект.ТипОтвета = ПредопределенноеЗначение("Перечисление.ТипыОтветовНаВопрос.Строка");
			ВопросОбъект.Длина = 1024;
		КонецЕсли;
	КонецЕсли;
	
	ВопросОбъект.Наименование = ОткрытыйВопрос.Наименование;
	ВопросОбъект.Формулировка = ОткрытыйВопрос.Наименование;
	
	Попытка
		ВопросОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Анкетирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
	КонецПопытки;
	
	ОткрытыйВопрос.Вопрос = ВопросОбъект.Ссылка;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьEmailФизическогоЛица(ФизическоеЛицо)

	ЗаполнитьТЧВидомEmail("Респонденты", Объект.ВидКонтактнойИнформацииРеспонденты, ФизическоеЛицо);
	ЗаполнитьТЧВидомEmail("Сотрудники", Объект.ВидКонтактнойИнформацииСотрудники, ФизическоеЛицо);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыEmail()

	ВидыEmail.Очистить();
	
	ТаблицаВидовКонтактнойИнформацией = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацияОбъекта(
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
		
	СтрокиEmail = ТаблицаВидовКонтактнойИнформацией.НайтиСтроки(Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")));
	Для каждого СтрокаEmail Из СтрокиEmail Цикл
		ВидыEmail.Добавить(СтрокаEmail.Ссылка, СтрокаEmail.Наименование);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура СформироватьПодменюВидовEmail(ИмяПоля)

	Если ВидыEmail.Количество() < 2 Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппаПодменю = ЭтаФорма.Элементы.Найти(ИмяПоля + "ВидыEmailГруппа");
	Если ГруппаПодменю = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВидEmail Из ВидыEmail Цикл
		
		ИндексВида = ВидыEmail.Индекс(ВидEmail);
		
		Если ЭтаФорма.Элементы.Найти(ИмяПоля + "ВидEmail_" + ИндексВида) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяПоля + "УстановитьВидEmail_" + ИндексВида);
		НоваяКоманда.Действие = "Подключаемый_" + ИмяПоля + "УстановитьВидEmail";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
		
		ЭлементКнопкаПодменю = ЭтаФорма.Элементы.Добавить(ИмяПоля + "ВидEmail_" + ИндексВида, Тип("КнопкаФормы"), ГруппаПодменю);
		ЭлементКнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементКнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		ЭлементКнопкаПодменю.Заголовок             = ВидEmail.Представление;
		ЭлементКнопкаПодменю.ТолькоВоВсехДействиях = Ложь;
		
	КонецЦикла;
	
	ТекущееЗначениеКонтактнойИнформации = Объект["ВидКонтактнойИнформации" + ИмяПоля];
	Если ЗначениеЗаполнено(ТекущееЗначениеКонтактнойИнформации) Тогда
		УстановитьПометкуВПодменюВидКонтактнойИнформации(ЭтаФорма, ИмяПоля, ВидыEmail.Индекс(ВидыEmail.НайтиПоЗначению(ТекущееЗначениеКонтактнойИнформации)));
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть "Респонденты" на закладке "Анкетирование".
//
&НаСервере
Процедура ЗаполнитьТЧРеспонденты()

	ЗаполнитьТЧФизическимиЛицамиИзОбъекта("Респонденты");
	ЗаполнитьТЧВидомEmail("Респонденты", Объект.ВидКонтактнойИнформацииРеспонденты);
	
	ЗаполнитьТЧРеспондентыПользователями();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧСотрудники()

	ЗаполнитьТЧФизическимиЛицамиИзОбъекта("Сотрудники");
	ЗаполнитьТЧВидомEmail("Сотрудники", Объект.ВидКонтактнойИнформацииСотрудники);

КонецПроцедуры

// Заполняет вторичные ТЧ Респонденты или Сотрудники уникальными физическими лицами.
//
&НаСервере
Процедура ЗаполнитьТЧФизическимиЛицамиИзОбъекта(ИмяТаблицы)

	Если ИмяТаблицы = "Респонденты" Тогда
		Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное") Тогда
			ТаблицаОбъект = Объект.Респонденты;
		Иначе
			ТаблицаОбъект = Объект.РеспондентыЕдиныйНабор;
		КонецЕсли;
		ИмяПоляФизическоеЛицо = "Респондент";
	ИначеЕсли ИмяТаблицы = "Сотрудники" Тогда
		ТаблицаОбъект = Объект.Участники;
		ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаРеквизит = ЭтаФорма[ИмяТаблицы];
	
	ТаблицаРеквизит.Очистить();
	
	МассивФизическихЛиц = ТаблицаОбъект.Выгрузить(, ИмяПоляФизическоеЛицо).ВыгрузитьКолонку(ИмяПоляФизическоеЛицо);
	
	Для каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		Если ТаблицаРеквизит.НайтиСтроки(Новый Структура(ИмяПоляФизическоеЛицо, ФизическоеЛицо)).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаРеквизит.Добавить();
			НоваяСтрока[ИмяПоляФизическоеЛицо] = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧРеспондентыПользователями()

	Если Респонденты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРеспондентов.Респондент КАК Респондент
		|ПОМЕСТИТЬ ВТРеспонденты
		|ИЗ
		|	&ТаблицаРеспондентов КАК ТаблицаРеспондентов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Респондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРеспонденты.Респондент КАК Респондент,
		|	МАКСИМУМ(ЕСТЬNULL(Пользователи.Ссылка, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))) КАК ИмяПользователяИБ
		|ИЗ
		|	ВТРеспонденты КАК ВТРеспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТРеспонденты.Респондент = Пользователи.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРеспонденты.Респондент";

	Запрос.УстановитьПараметр("ТаблицаРеспондентов", Респонденты.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиФизическогоЛица = Респонденты.НайтиСтроки(Новый Структура("Респондент", Выборка.Респондент));
		Для каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
			СтрокаФизическогоЛица.ИмяПользователяИБ = Выборка.ИмяПользователяИБ;
			Если Не ЗначениеЗаполнено(Выборка.ИмяПользователяИБ) Тогда
				СтрокаФизическогоЛица.СообщениеОбОшибке = 
					НСтр("ru = 'Нет учетной записи.'");
			Иначе
				СтрокаФизическогоЛица.СообщениеОбОшибке = "";
			КонецЕсли;
			СтрокаФизическогоЛица.НедозаполненнаяСтрока = (Не ЗначениеЗаполнено(Выборка.ИмяПользователяИБ));
		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры

// Заполняет табличную часть "Сотрудники" на закладке "Анализ результатов".
//
&НаСервере
Процедура ЗаполнитьТЧВидомEmail(ИмяТаблицы, ВидКонтактнойИнформации, ФизическоеЛицо = Неопределено)

	Если ИмяТаблицы = "Респонденты" Тогда
		ИмяПоляФизическоеЛицо = "Респондент";
	ИначеЕсли ИмяТаблицы = "Сотрудники" Тогда
		ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	Иначе
		Возврат;
	КонецЕсли;
	ТаблицаРеквизит = ЭтаФорма[ИмяТаблицы];
	
	Если ТаблицаРеквизит.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ФизическоеЛицо = Неопределено Тогда
		ТаблицаФизическихЛиц = ТаблицаРеквизит.Выгрузить();
	Иначе
		ОтборПоФизическомуЛицу = Новый Структура(ИмяПоляФизическоеЛицо, ФизическоеЛицо);
		ТаблицаФизическихЛиц = ТаблицаРеквизит.Выгрузить(Новый Структура(ИмяПоляФизическоеЛицо, ФизическоеЛицо));
	КонецЕсли;
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаФизическихЛиц.ВыгрузитьКолонку(ИмяПоляФизическоеЛицо));
	Если МассивФизическихЛиц.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.СоздатьВТКонтактнаяИнформация(
		Запрос.МенеджерВременныхТаблиц,
		МассивФизическихЛиц,,
		ВидКонтактнойИнформации);
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТКонтактнаяИнформация.Представление, """") КАК АдресЭП
		|ИЗ
		|	ВТФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонтактнаяИнформация КАК ВТКонтактнаяИнформация
		|		ПО ФизическиеЛица.ФизическоеЛицо = ВТКонтактнаяИнформация.Объект";

	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	
	Если ИмяПоляФизическоеЛицо = "Респондент" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо", "ТаблицаФизическихЛиц.Респондент КАК ФизическоеЛицо");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиФизическогоЛица = ТаблицаРеквизит.НайтиСтроки(Новый Структура(ИмяПоляФизическоеЛицо, Выборка.ФизическоеЛицо));
		Для каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл
			СтрокаФизическогоЛица.АдресЭП = Выборка.АдресЭП;
		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры

// Заполняет вторичные реквизиты формы для ТЧ Сотрудники и Респонденты в закладках формы "Анкетирование" и "АнализРезультатов".
//
&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыСотрудниковРеспондентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыОценкиСотрудников.ФизическоеЛицо КАК Сотрудник,
		|	СРЕДНЕЕ(РезультатыОценкиСотрудников.Оценка) КАК СредняяОценка,
		|	СРЕДНЕЕ(РезультатыОценкиСотрудников.Рейтинг) КАК СреднийРейтинг
		|ПОМЕСТИТЬ ВТОценки
		|ИЗ
		|	РегистрСведений.РезультатыОценкиСотрудников КАК РезультатыОценкиСотрудников
		|ГДЕ
		|	РезультатыОценкиСотрудников.Мероприятие = &Мероприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыОценкиСотрудников.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОпросыМероприятия.ФизическоеЛицо КАК Сотрудник,
		|	РеспондентыОпросов.Респондент КАК Респондент,
		|	КОЛИЧЕСТВО(РеспондентыОпросов.Респондент) КАК Анкет,
		|	СУММА(ВЫБОР
		|			КОГДА Анкеты.Проведен
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК АнкетЗавершено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Анкеты.Проведен
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК АнкетВРаботе,
		|	СУММА(ВЫБОР
		|			КОГДА Анкеты.Ссылка ЕСТЬ NULL
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК АнкетНеНачато
		|ПОМЕСТИТЬ СтатистикаАнкет
		|ИЗ
		|	Документ.НазначениеОпросов.Респонденты КАК РеспондентыОпросов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МероприятияОценкиПерсонала.Участники КАК ОпросыМероприятия
		|		ПО РеспондентыОпросов.Ссылка = ОпросыМероприятия.НазначениеОпроса
		|			И (ОпросыМероприятия.Ссылка = &Мероприятие)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Анкета КАК Анкеты
		|		ПО (Анкеты.Опрос = РеспондентыОпросов.Ссылка)
		|			И (Анкеты.Респондент = РеспондентыОпросов.Респондент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОпросыМероприятия.ФизическоеЛицо,
		|	РеспондентыОпросов.Респондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатистикаАнкет.Сотрудник КАК Сотрудник,
		|	СУММА(СтатистикаАнкет.Анкет) КАК Анкет,
		|	СУММА(СтатистикаАнкет.АнкетЗавершено) КАК АнкетЗавершено,
		|	СУММА(СтатистикаАнкет.АнкетВРаботе) КАК АнкетВРаботе,
		|	СУММА(СтатистикаАнкет.АнкетНеНачато) КАК АнкетНеНачато
		|ПОМЕСТИТЬ ВТАнкетыСотрудников
		|ИЗ
		|	СтатистикаАнкет КАК СтатистикаАнкет
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатистикаАнкет.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатистикаАнкет.Респондент КАК Респондент,
		|	СУММА(СтатистикаАнкет.Анкет) КАК Анкет,
		|	СУММА(СтатистикаАнкет.АнкетЗавершено) КАК АнкетЗавершено,
		|	СУММА(СтатистикаАнкет.АнкетВРаботе) КАК АнкетВРаботе,
		|	СУММА(СтатистикаАнкет.АнкетНеНачато) КАК АнкетНеНачато
		|ИЗ
		|	СтатистикаАнкет КАК СтатистикаАнкет
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатистикаАнкет.Респондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТАнкетыСотрудников.Сотрудник, ВТОценки.Сотрудник) КАК Сотрудник,
		|	ВТАнкетыСотрудников.Анкет КАК Анкет,
		|	ВТАнкетыСотрудников.АнкетЗавершено КАК АнкетЗавершено,
		|	ВТАнкетыСотрудников.АнкетВРаботе КАК АнкетВРаботе,
		|	ВТАнкетыСотрудников.АнкетНеНачато КАК АнкетНеНачато,
		|	ВТОценки.СредняяОценка КАК СредняяОценка,
		|	ВТОценки.СреднийРейтинг КАК СреднийРейтинг
		|ИЗ
		|	ВТАнкетыСотрудников КАК ВТАнкетыСотрудников
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТОценки КАК ВТОценки
		|		ПО ВТАнкетыСотрудников.Сотрудник = ВТОценки.Сотрудник";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	// Считываем результаты вне зависимости от прав доступа
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ЗаполнитьВторичныеРеквизитыСотрудников(РезультатыЗапроса[РезультатыЗапроса.Количество() - 1]);
	ЗаполнитьВторичныеРеквизитыРеспондентов(РезультатыЗапроса[РезультатыЗапроса.Количество() - 2]);
	
	ЗаполнитьДатыОтправки();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыСотрудников(РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", Выборка.Сотрудник));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыРеспондентов(РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Респонденты.НайтиСтроки(Новый Структура("Респондент", Выборка.Респондент));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Считывает даты отправки сообщений респондентам
// сообщения могут быть как приглашениями к участию, так и результатами оценки.
&НаСервере
Процедура ЗаполнитьДатыОтправки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколыОтправкиСообщенийОценкиПерсонала.ДатаОтправки КАК ДатаОтправки,
		|	ПротоколыОтправкиСообщенийОценкиПерсонала.Адресат КАК Адресат,
		|	ПротоколыОтправкиСообщенийОценкиПерсонала.ТипСообщения КАК ТипСообщения
		|ИЗ
		|	РегистрСведений.ПротоколыОтправкиСообщенийОценкиПерсонала КАК ПротоколыОтправкиСообщенийОценкиПерсонала
		|ГДЕ
		|	ПротоколыОтправкиСообщенийОценкиПерсонала.Мероприятие = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТипСообщения = Перечисления.СообщенияОценкиПерсонала.ПриглашениеКУчастию Тогда
			Строки = Респонденты.НайтиСтроки(Новый Структура("Респондент",ВыборкаДетальныеЗаписи.Адресат));
			Для каждого СтрокаРеспондента Из Строки Цикл
				СтрокаРеспондента.ДатаОтправки = ВыборкаДетальныеЗаписи.ДатаОтправки
			КонецЦикла; 
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипСообщения = Перечисления.СообщенияОценкиПерсонала.ИндивидуальныеРезультаты Тогда
			Строки = Сотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо",ВыборкаДетальныеЗаписи.Адресат));
			Для каждого СтрокаФизическоеЛицо Из Строки Цикл
				СтрокаФизическоеЛицо.ДатаОтправки = ВыборкаДетальныеЗаписи.ДатаОтправки
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМастераАнкетыПоРазделам()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ШаблонАнкеты", Объект.ШаблонАнкеты);
	ОткрытьФорму("ОбщаяФорма.МастерАнкетыПоРазделам", СтруктураПараметры, ЭтотОбъект);

КонецПроцедуры 

&НаКлиенте
Процедура ОтправитьПриглашенияНаКлиенте(ОтправлятьВсем = Ложь)
	
	Если НЕ СведенияОМероприятии.АнкетированиеНачато Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Анкетирование не начато, отправка приглашений невозможна'"));
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	ОчиститьСообщения();
	
	Если ОтправлятьВсем Тогда
		КоллекцияРеспондентов = Респонденты;
	Иначе
		КоллекцияРеспондентов = Элементы.Респонденты.ВыделенныеСтроки;
	КонецЕсли;
	
	// Подготовка респондентов
	МассивСтруктурРеспондентов = Новый Массив;
	Для каждого ВыбраннаяСтрока Из КоллекцияРеспондентов Цикл
		ТекущиеДанные = ?(ОтправлятьВсем, ВыбраннаяСтрока, Респонденты.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
		МожноОтправлятьПриглашение = Истина;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.АдресЭП) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Респонденты[%1].АдресЭП",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен адрес электронной почты у респондента ""%1""'"), ТекущиеДанные.Респондент),
				"", Респонденты.Индекс(ТекущиеДанные));
			МожноОтправлятьПриглашение = Ложь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяПользователяИБ) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Респонденты[%1].ИмяПользователяИБ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для респондента ""%1"" отсутствует учетная запись для входа в систему.'"), ТекущиеДанные.Респондент),
				"", Респонденты.Индекс(ТекущиеДанные));
			МожноОтправлятьПриглашение = Ложь;
		КонецЕсли;
			
		Если Не МожноОтправлятьПриглашение Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРеспондента = Новый Структура;
		СтруктураРеспондента.Вставить("ФизическоеЛицо", ТекущиеДанные.Респондент);
		СтруктураРеспондента.Вставить("Адрес", ТекущиеДанные.АдресЭП);
		СтруктураРеспондента.Вставить("ИмяПользователяИБ", ТекущиеДанные.ИмяПользователяИБ);
		СтруктураРеспондента.Вставить("ОтправкаУспешно", Истина);
		МассивСтруктурРеспондентов.Добавить(СтруктураРеспондента);
	
	КонецЦикла; 
	
	// Отправка приглашений
	ОтправитьПриглашения(МассивСтруктурРеспондентов);
	
	Если НЕ Ошибки = Неопределено Тогда		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Отправляет набору респондентов приглашения к участию.
// МассивСтруктурРеспондентов - массив структур, с ключами
//	ФизическоеЛицо - СправочникСсылка.ФизическоеЛицо
//	Адрес - строка, email сотрудника
//	ИмяПользователяИБ - СправочникСсылка.Пользователи, пользователь, соотнесенный сотруднику
//	ОтправкаУспешно - булево, флаг, который проставляется процедурой отправки.
&НаКлиенте
Процедура ОтправитьПриглашения(МассивСтруктурРеспондентов)

	Если НЕ ВозможноОтправлятьЭлектроннуюПочту() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отправка электронной почты невозможна'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните, пожалуйста, текст приглашения'"));
		Возврат;
	КонецЕсли;
	
	// Подготавливает финальные тексты из шаблона приглашения,
	// отсылает их адресатам,
	// записывает даты отправки.
	ПодготовитьТекстыПриглашенийИОтправитьАдресатам(МассивСтруктурРеспондентов);
	
	// Проверка результатов отправки
	КоличествоУспешных = 0;КоличествоНеУспешных = 0;
	// Формируем сообщения о доставленных и недоставленных
	Для каждого СтрокаРеспондента Из МассивСтруктурРеспондентов Цикл
		
		Если СтрокаРеспондента.ОтправкаУспешно Тогда
			КоличествоУспешных = КоличествоУспешных + 1;
		Иначе
			КоличествоНеУспешных = КоличествоНеУспешных + 1;
		КонецЕсли;
			
	КонецЦикла; 
	// Сообщаем
	ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправлено %1, не отправлено %2 приглашений.'"),КоличествоУспешных,КоличествоНеУспешных));
		
	// Обновляем информацию на форме
	ЗаполнитьДатыОтправки();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШаблонСообщенияТекст(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ЗаполнитьШаблонСообщенияТекст(ЭтаФорма);
КонецПроцедуры

// Заполняет структуру, отображающую общее состояние мероприятия,
// выявленные ошибки укладывает в реквизит формы Ошибки.
// В дальнейшем они могут быть сообщены пользователю через МероприятиеЗаполненоВерно().
&НаСервере
Процедура ЗаполнитьСтатусМероприятия()

	НайденныеОшибки = Неопределено;
	Сведения = Новый Структура;
	
	// Проверка шаблонов
	Если  ЗначениеЗаполнено(ШаблонАнкетыОбъект.Заголовок) Тогда
	    Сведения.Вставить("ШаблонАнкетыЗаполнен", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
			"ШаблонАнкетыОбъект",
			НСтр("ru = 'Не заполнена анкета'"),"");
		Сведения.Вставить("ШаблонАнкетыЗаполнен", Ложь);
	КонецЕсли;
	
	// Проверка характеристик
	Сведения.Вставить("ВыбраныХарактеристики", Истина);
	МассивХарактеристик = ХарактеристикиПерсонала.НайтиСтроки(Новый Структура("Включена",Истина));
	Если МассивХарактеристик.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки, "ХарактеристикиПерсонала",
			НСтр("ru = 'Не выбрана ни одна характеристика'"),"");
		Сведения.ВыбраныХарактеристики = Ложь;
	Иначе
		Сведения.Вставить("НеЗаполненыВопросыХарактеристик", Ложь);
		Для Каждого СтрокаХарактеристики Из МассивХарактеристик Цикл
			ВыбранныеВопросы = ВопросыХарактеристик.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", СтрокаХарактеристики.ХарактеристикаПерсонала));
			Если ВыбранныеВопросы.Количество()=0 Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
					"ХарактеристикиПерсонала[%1].ХарактеристикаПерсонала",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Выбранная характеристика ""%1"" не содержит ни одного поведенческого индикатора.'"), СтрокаХарактеристики.ХарактеристикаПерсонала),
					"",
					ХарактеристикиПерсонала.Индекс(СтрокаХарактеристики));
				Сведения.НеЗаполненыВопросыХарактеристик = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка вопросов на дубли вопросов
	Сведения.Вставить("ДублиВопросовХарактеристик", Ложь);
	
	МассивВопросовХарактеристик = Новый ТаблицаЗначений;
	МассивВопросовХарактеристик.Колонки.Добавить("ХарактеристикаПерсонала");
	МассивВопросовХарактеристик.Колонки.Добавить("Вопрос");
	Для Каждого СтрокаВопросовХарактеристик Из ВопросыХарактеристик Цикл
		СтруктураПоискаПоХарактеристике = Новый Структура("ХарактеристикаПерсонала", СтрокаВопросовХарактеристик.ХарактеристикаПерсонала);
		СтруктураПоискаПоХарактеристикеИВопросу = Новый Структура("ХарактеристикаПерсонала, Вопрос", СтрокаВопросовХарактеристик.ХарактеристикаПерсонала, СтрокаВопросовХарактеристик.Вопрос);
		УжеЕстьВопросы = МассивВопросовХарактеристик.НайтиСтроки(СтруктураПоискаПоХарактеристикеИВопросу);
		Если УжеЕстьВопросы.Количество()> 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"ХарактеристикиПерсонала[%1].ХарактеристикаПерсонала",
				НСтр("ru = 'Один из вопросов указан дважды.'"),"",
				ХарактеристикиПерсонала.Индекс(ХарактеристикиПерсонала.НайтиСтроки(СтруктураПоискаПоХарактеристике)[0]));
			Сведения.ДублиВопросовХарактеристик = Истина;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МассивВопросовХарактеристик.Добавить(), СтрокаВопросовХарактеристик);
	КонецЦикла;
	
	Сведения.Вставить("ДублиОткрытыхВопросов", Ложь);
	МассивОткрытыхВопросов = Новый Массив;
	Для Каждого СтрокаОткрытыхВопросов Из ОткрытыеВопросы Цикл
		Если  МассивОткрытыхВопросов.Найти(СтрокаОткрытыхВопросов.Вопрос) <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"ОткрытыеВопросы[%1].Вопрос",
				НСтр("ru = 'Один из открытых вопросов указан дважды.'"),"",
				ОткрытыеВопросы.Индекс(СтрокаОткрытыхВопросов));
			Сведения.ДублиОткрытыхВопросов = Истина;
		КонецЕсли;
		МассивОткрытыхВопросов.Добавить(СтрокаОткрытыхВопросов.Вопрос);
	КонецЦикла;
	
	// Проверка вопросов на варианты ответа
	Сведения.Вставить("ВопросыЗаполненыСОшибками",  Ложь);
	ВыборкаПлохихВопросов = СведенияОВариантахОтвета(ВопросыХарактеристик.Выгрузить().ВыгрузитьКолонку("Вопрос"));
	Пока ВыборкаПлохихВопросов.Следующий() Цикл
		ХарактеристикиСПлохимиВопросами = ВопросыХарактеристик.НайтиСтроки(Новый Структура("Вопрос",ВыборкаПлохихВопросов.Вопрос));
		Для каждого ХарактеристикаСПлохимиВопросами Из ХарактеристикиСПлохимиВопросами Цикл
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"ХарактеристикиПерсонала[%1].ХарактеристикаПерсонала",
				НСтр("ru = 'Один из вопросов к данной характеристике не содержит ответов.'"),"",
				ХарактеристикиПерсонала.Индекс(ХарактеристикиПерсонала.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала",ХарактеристикаСПлохимиВопросами.ХарактеристикаПерсонала))[0]));
		КонецЦикла; 
		Сведения.ВопросыЗаполненыСОшибками = Истина;
	КонецЦикла;
	
	// Проверка состава
	// Проверка участников
	Сведения.Вставить("УчастникиЗаполнены", Истина);
	Сведения.Вставить("УчастникиЗаполненыСОшибками", Ложь);
	Сведения.Вставить("ДублиУчастников", Ложь);

	Если Объект.Участники.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
			"Объект.Участники",
			НСтр("ru = 'Не заполнен ни один участник'"),"");
		Сведения.УчастникиЗаполнены = Ложь;
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	Для Каждого СтрокаУчастников Из Объект.Участники Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУчастников.ФизическоеЛицо)  Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"Объект.Участники[%1].ФизическоеЛицо",
				НСтр("ru = 'Не заполнен участник.'"),"",
				Объект.Участники.Индекс(СтрокаУчастников));
			Сведения.УчастникиЗаполненыСОшибками = Истина;
		КонецЕсли;	
		Если МассивУчастников.Найти(СтрокаУчастников.ФизическоеЛицо) <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"Объект.Участники[%1].ФизическоеЛицо",
				НСтр("ru = 'Один из участников указан дважды.'"),"",
				Объект.Участники.Индекс(СтрокаУчастников));
			Сведения.ДублиУчастников = Истина;
		КонецЕсли;
		МассивУчастников.Добавить(СтрокаУчастников.ФизическоеЛицо);
	КонецЦикла;
	
	// Проверка респондентов
	Сведения.Вставить("РеспондентыЗаполнены", Истина);
	Сведения.Вставить("ДублиРеспондентов", Ложь);
	Сведения.Вставить("РеспондентыЗаполненыСОшибками", Ложь);
	ДополнитьСведенияПоОценивающим(Сведения, НайденныеОшибки);
	
	// Заполнение состояния мероприятия
	МассивПустыхНазначенийОпросов = Объект.Участники.НайтиСтроки(Новый Структура("НазначениеОпроса",Документы.НазначениеОпросов.ПустаяСсылка()));
	Сведения.Вставить("АнкетированиеНачато", НЕ МассивПустыхНазначенийОпросов.Количество()= Объект.Участники.Количество());
	Сведения.Вставить("МероприятиеЗавершено", Объект.ДатаОкончания < ДатаАктуальности);
		
	// Запишем в реквизиты
	СведенияОМероприятии = Новый ФиксированнаяСтруктура(Сведения);
	ОшибкиЗаполненияМероприятия = НайденныеОшибки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонСообщения()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыШаблона = ШаблоныСообщений.ПараметрыШаблона(Объект.Ссылка);
	ШаблонСообщения = ПараметрыШаблона.Ссылка;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьШаблонСообщенияТекст(Форма)
	
	Если ЗначениеЗаполнено(Форма.ШаблонСообщения) Тогда
		Форма.ШаблонСообщенияТекст = ТекстШаблонаПисьма(Форма.ШаблонСообщения);
	Иначе
		ДемоТексты = ДемонстрационныеТекстыШаблоныСообщений();
		Форма.ШаблонСообщенияТекст = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ДемоТексты.Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстШаблонаПисьма(ШаблонСообщения)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонСообщения, "ТекстШаблонаПисьма, ТекстШаблонаПисьмаHTML");
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ТекстШаблонаПисьма) Тогда
		Возврат СтруктураРеквизитов.ТекстШаблонаПисьма;
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(СтруктураРеквизитов.ТекстШаблонаПисьмаHTML);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДемонстрационныеТекстыШаблоныСообщений()
	Возврат ОценкаПерсонала.ДемонстрационныеТекстыШаблоныСообщений();
КонецФункции

&НаСервере
Процедура ДополнитьСведенияПоОценивающим(Сведения, НайденныеОшибки)

	МассивРеспондентов = Новый ТаблицаЗначений;
	МассивРеспондентов.Колонки.Добавить("Респондент");
	
	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех") Тогда
		НаименованиеТаблицы = "Объект.РеспондентыЕдиныйНабор";
		ФизическоеЛицоПолеОшибки = "Объект.РеспондентыЕдиныйНабор[%1].Респондент";
	ИначеЕсли Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное") Тогда
		НаименованиеТаблицы = "Объект.Респонденты";
		ФизическоеЛицоПолеОшибки = "Объект.Участники[%1].ФизическоеЛицо";
		МассивРеспондентов.Колонки.Добавить("ФизическоеЛицо");
	Иначе
		Возврат;
	КонецЕсли;
	
	ПроверяемаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтаФорма, НаименованиеТаблицы);
	
	Если ПроверяемаяТаблица.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
			НаименованиеТаблицы,
			НСтр("ru = 'Не заполнен ни один респондент'"),"");
		Сведения.РеспондентыЗаполнены = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаРеспондентов Из ПроверяемаяТаблица Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРеспондентов.Респондент)  Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				ФизическоеЛицоПолеОшибки,
				НСтр("ru = 'Не заполнен один из респондентов.'"),"",
				ИндексСтрокиДляОшибкиОценивающих(СтрокаРеспондентов));
			Сведения.РеспондентыЗаполненыСОшибками = Истина;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаРеспондентов.РольРеспондента) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				ФизическоеЛицоПолеОшибки,
				НСтр("ru = 'Не заполнена роль одного из респондентов.'"),"",
				ИндексСтрокиДляОшибкиОценивающих(СтрокаРеспондентов));
			Сведения.РеспондентыЗаполненыСОшибками = Истина;
		КонецЕсли;
		
		Если ЕстьДублиРеспондентов(МассивРеспондентов, СтрокаРеспондентов) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(НайденныеОшибки,
				"Объект.Участники[%1].ФизическоеЛицо",
				НСтр("ru = 'Один из респондентов указан дважды.'"),"",
				Объект.Участники.Индекс(Объект.Участники.НайтиСтроки(Новый Структура("ФизическоеЛицо",СтрокаРеспондентов.ФизическоеЛицо))[0]));
			Сведения.ДублиРеспондентов = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(МассивРеспондентов.Добавить(), СтрокаРеспондентов);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИндексСтрокиДляОшибкиОценивающих(СтрокаРеспондентов)

	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех") Тогда
		Возврат Объект.РеспондентыЕдиныйНабор.Индекс(СтрокаРеспондентов);
	ИначеЕсли Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное") Тогда
		Возврат Объект.Участники.Индекс(Объект.Участники.НайтиСтроки(Новый Структура("ФизическоеЛицо",СтрокаРеспондентов.ФизическоеЛицо))[0]);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ЕстьДублиРеспондентов(МассивРеспондентов, СтрокаРеспондентов)
	
	Если Не ЗначениеЗаполнено(Объект.СпособЗаполненияРеспондентов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Респондент", СтрокаРеспондентов.Респондент);
	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное") Тогда
		СтруктураОтбора.Вставить("ФизическоеЛицо", СтрокаРеспондентов.ФизическоеЛицо);
	КонецЕсли;
	УжеЕстьРеспонденты = МассивРеспондентов.НайтиСтроки(СтруктураОтбора);
	
	Возврат (УжеЕстьРеспонденты.Количество() > 0);
	
КонецФункции

// Возвращает Истина в случае отсутствия ошибок заполнения.
// Возвращает Ложь и выводит ошибки в том случае, если они были найдены.
&НаКлиентеНаСервереБезКонтекста
Функция МероприятиеЗаполненоВерно(Форма)

	МероприятиеЗаполненоВерно = Форма.ОбъектЗаполненоВерно И (Форма.ОшибкиЗаполненияМероприятия = Неопределено);
	
	Если Форма.ОшибкиЗаполненияМероприятия <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Форма.ОшибкиЗаполненияМероприятия);
	КонецЕсли; 
	
	Возврат МероприятиеЗаполненоВерно;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВторичныеРеквизитыФормы()

	ЗаполнитьВторичныеРеквизитыСотрудниковРеспондентов();
	
	ЗаполнитьСтатусМероприятия();
	
	ЗаполнитьШаблонСообщения();
	ЗаполнитьШаблонСообщенияТекст(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦветаНадписей()

	ЦветаНадписейСтруктура = Новый Структура;
	ЦветаНадписейСтруктура.Вставить("Красный", ЦветаСтиля.ЦветОсобогоТекста);
	ЦветаНадписейСтруктура.Вставить("Желтый", ЦветаСтиля.ЗаблокированныйРеквизитЦвет);
	ЦветаНадписейСтруктура.Вставить("Зеленый", ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ЦветаНадписейСтруктура.Вставить("Синий", ЦветаСтиля.ЦветГиперссылки);
	ЦветаНадписейСтруктура.Вставить("Бордовый", ЦветаСтиля.УдаленныеСтроки);
	ЦветаНадписейСтруктура.Вставить("Черный", ЦветаСтиля.ЦветТекстаФормы);
	ЦветаНадписейСтруктура.Вставить("Серый", ЦветаСтиля.ЦветРамки);
	ЦветаНадписейСтруктура.Вставить("ПоясняющийТекст", ЦветаСтиля.ПоясняющийТекст);
	
	ЦветаНадписей = Новый ФиксированнаяСтруктура(ЦветаНадписейСтруктура);

КонецПроцедуры

// Предзаполняет реквизиты формы для нового элемента справочника.
//
&НаСервере
Процедура ОбработкаЗаполненияНовогоЭлемента()

	Объект.ДатаНачала = ТекущаяДатаСеанса();
	Объект.ДатаОкончания = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(),1));
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, Новый Структура("Ответственный", "Объект.Ответственный"));
	
	ЗаполнитьВидыКонтактнойИнформации();
	
	// Заполняем шаблон анкеты
	ЗаполнитьШаблонАнкетыДемоТекстами();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонАнкетыДемоТекстами()

	ДемоТексты = ОценкаПерсонала.ДемонстрационныеТексты(Объект.Наименование);
	ШаблонАнкетыОбъект.Заголовок = ДемоТексты.ШаблонАнкетыЗаголовок;
	ШаблонАнкетыОбъект.Вступление = ДемоТексты.ШаблонАнкетыВступление;
	ШаблонАнкетыОбъект.Заключение = ДемоТексты.ШаблонАнкетыЗаключение;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыКонтактнойИнформации()
	ЗаполнитьВидКонтактнойИнформации("Респонденты");
	ЗаполнитьВидКонтактнойИнформации("Сотрудники");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидКонтактнойИнформации(ИмяПоля)

	 ПредлагаемоеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПользователя",
		"ИспользуемыйВидКонтактнойИнформации" + ИмяПоля,
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица"));
		
	ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПредлагаемоеЗначение, "Используется, ПометкаУдаления");
	
	Если ВидыEmail.НайтиПоЗначению(ПредлагаемоеЗначение) = Неопределено Тогда //вид из настроек уже не используется
		Если ВидыEmail.Количество() > 0 Тогда
			Объект["ВидКонтактнойИнформации" + ИмяПоля] = ВидыEmail[0].Значение;
		КонецЕсли;
	Иначе
		Объект["ВидКонтактнойИнформации" + ИмяПоля] = ПредлагаемоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора таблицы "Оцениваемые".
// Заполняет ее физическими лицами по переданным сотрудникам.
&НаСервере
Процедура ДобавитьВыбранныхСотрудников(ВыбранныеСотрудники)

	Для каждого ВыбранныйСотрудник Из ВыбранныеСотрудники Цикл
		НайденныеФизлица = Объект.Участники.НайтиСтроки(Новый Структура("ФизическоеЛицо",ВыбранныйСотрудник.ФизическоеЛицо));
		Если НайденныеФизлица.Количество()=0 Тогда
			НовыйУчастник = Объект.Участники.Добавить();
			НовыйУчастник.ФизическоеЛицо = ВыбранныйСотрудник.ФизическоеЛицо;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// Сохраняет шаблон анкеты и привязывает его к мероприятию.
&НаСервере
Процедура ЗаписатьШаблонАнкеты()
	
	НеобходимоСоздаватьШаблон = НЕ ЗначениеЗаполнено(ШаблонАнкетыОбъект.Ссылка);
	ШаблонОбъект = РеквизитФормыВЗначение("ШаблонАнкетыОбъект");
	Если НеобходимоСоздаватьШаблон Тогда
		ШаблонОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Шаблон анкеты мероприятия %1'"), Объект.Наименование);
	КонецЕсли;
	
	Попытка
	    ШаблонОбъект.Записать();
		ЗначениеВРеквизитФормы(ШаблонОбъект,"ШаблонАнкетыОбъект");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать шаблон анкеты.'") + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если НеобходимоСоздаватьШаблон Тогда
		Объект.ШаблонАнкеты = ШаблонОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Загружает шаблон анкеты из мероприятия,
// в случае его отсутствия - создает новый и заполняет демо-текстом.
Процедура ЗагрузитьШаблонАнкеты()

	ШаблонАнкетыСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ШаблонАнкеты");
	
	Если ЗначениеЗаполнено(ШаблонАнкетыСсылка) Тогда
		СправочникОбъект = ШаблонАнкетыСсылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(СправочникОбъект, "ШаблонАнкетыОбъект");
	Иначе
		СправочникОбъект = Справочники.ШаблоныАнкет.СоздатьЭлемент();
		ЗначениеВРеквизитФормы(СправочникОбъект, "ШаблонАнкетыОбъект");
		ЗаполнитьШаблонАнкетыДемоТекстами();
	КонецЕсли;

КонецПроцедуры

// Меняет даты окончания у связанных с мероприятием документов "Назначение опроса".
&НаСервереБезКонтекста
Процедура ПеренестиДатуОкончанияОпросов(Мероприятие, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НазначениеОпросов.Ссылка КАК Опрос
		|ИЗ
		|	Справочник.МероприятияОценкиПерсонала.Участники КАК МероприятияОценкиПерсоналаУчастники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеОпросов КАК НазначениеОпросов
		|		ПО МероприятияОценкиПерсоналаУчастники.НазначениеОпроса = НазначениеОпросов.Ссылка
		|			И (МероприятияОценкиПерсоналаУчастники.Ссылка = &Мероприятие)";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НазначениеОпросовОбъект = Выборка.Опрос.ПолучитьОбъект();
		НазначениеОпросовОбъект.ДатаОкончания = ДатаОкончания;
		Попытка
			НазначениеОпросовОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось перенести опрос %1 по причине %2'"),Выборка.Опрос,ИнформацияОбОшибке().Описание));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создает документы "НазначениеОпросов" для каждого оцениваемого сотрудника мероприятия,
// в случае если документ уже создан - обновляет его.
&НаСервере
Процедура СоздатьОпросы()

	Для Каждого Оцениваемый Из Объект.Участники Цикл
		
		Если ЗначениеЗаполнено(Оцениваемый.НазначениеОпроса) Тогда
			// Опрос существует обновляем список респондентов и другие поля
			НазначениеОпросаОбъект = Оцениваемый.НазначениеОпроса.ПолучитьОбъект();
		Иначе
			// Создаем документ Назначение опроса
			НазначениеОпросаОбъект = Документы.НазначениеОпросов.СоздатьДокумент();
			НазначениеОпросаОбъект.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
		КонецЕсли;
		
		НазначениеОпросаОбъект.ШаблонАнкеты		= Объект.ШаблонАнкеты;
		НазначениеОпросаОбъект.ТипРеспондентов	= Справочники.ФизическиеЛица.ПустаяСсылка();
		НазначениеОпросаОбъект.ДатаНачала		= Объект.ДатаНачала;
		НазначениеОпросаОбъект.ДатаОкончания	= Объект.ДатаОкончания;
		НазначениеОпросаОбъект.ВозможностьПредварительногоСохранения = Истина;
		НазначениеОпросаОбъект.СвободныйОпрос	= Ложь;
		НазначениеОпросаОбъект.Наименование		= Объект.Наименование + " " + НСтр("ru = 'для сотрудника'") + " " + Строка(Оцениваемый.ФизическоеЛицо);
		НазначениеОпросаОбъект.ПоказыватьВАрхивеАнкет	= Ложь;
		НазначениеОпросаОбъект.Респонденты.Загрузить(РеспондентыСотрудника(Оцениваемый.ФизическоеЛицо));
		
		Попытка 
			НазначениеОпросаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось назначить опрос для оценки сотрудника %1 по причине: %2"),
				Строка(Оцениваемый.ФизическоеЛицо),
				ИнформацияОбОшибке().Описание));
		КонецПопытки;
		
		Оцениваемый.НазначениеОпроса = НазначениеОпросаОбъект.Ссылка;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РеспондентыСотрудника(Сотрудник)

	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.Индивидуальное") Тогда
		Возврат Объект.Респонденты.Выгрузить(Новый Структура("ФизическоеЛицо", Сотрудник), "Респондент")	
	ИначеЕсли Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех") Тогда
		Возврат Объект.РеспондентыЕдиныйНабор.Выгрузить(, "Респондент")	
	КонецЕсли;	

КонецФункции
 
// Создает вопросы в справочнике ВопросыШаблонаАнкеты по переданной таблице значений.
//
&НаСервере
Процедура ЗаписатьВопросыШаблонаАнкеты(ВопросыДляАнкеты)

	Если Объект.ШаблонАнкеты.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СведенияОМероприятии.АнкетированиеНачато Тогда
		// Если анкетирование не начато - удаляем вопросы из анкеты.
		// в противном случае - будем только добавлять новые.
		Анкетирование.УдалитьВопросыШаблонаАнкеты(Объект.ШаблонАнкеты);
	КонецЕсли;
	
	// Наполняем анкету вопросами
	// Сначала вопросы компетенций
	Для каждого ВопросДляАнкеты Из ВопросыДляАнкеты Цикл
		// Определяем раздел анкеты
		РазделАнкеты = Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию(ВопросДляАнкеты.ВидВопроса,Истина,, Объект.ШаблонАнкеты);
		Если РазделАнкеты.Пустая() Тогда
			РазделАнкетыОбъект = Справочники.ВопросыШаблонаАнкеты.СоздатьГруппу();
			РазделАнкетыОбъект.Наименование	= ВопросДляАнкеты.ВидВопроса;
			РазделАнкетыОбъект.Владелец		= Объект.ШаблонАнкеты;
			РазделАнкетыОбъект.Формулировка	= ВопросДляАнкеты.ВидВопроса;
			РазделАнкетыОбъект.Записать();
			РазделАнкеты = РазделАнкетыОбъект.Ссылка;
		КонецЕсли;
		
		// Создаем вопрос в разделе
		ВопросАнкетыОбъект = Справочники.ВопросыШаблонаАнкеты.НайтиПоРеквизиту("ЭлементарныйВопрос", ВопросДляАнкеты.Вопрос, РазделАнкеты, Объект.ШаблонАнкеты);
		Если ВопросАнкетыОбъект.Пустая() Тогда
			ВопросАнкетыОбъект = Справочники.ВопросыШаблонаАнкеты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ВопросАнкетыОбъект,ВопросДляАнкеты.Вопрос);
			ВопросАнкетыОбъект.Наименование = ВопросДляАнкеты.Вопрос.Наименование;
			
			ВопросАнкетыОбъект.ЭлементарныйВопрос = ВопросДляАнкеты.Вопрос;
			ВопросАнкетыОбъект.Обязательный = Истина;
			ВопросАнкетыОбъект.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Простой;
			ВопросАнкетыОбъект.Родитель = РазделАнкеты;
			ВопросАнкетыОбъект.Владелец	= Объект.ШаблонАнкеты;
			ВопросАнкетыОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Начало процедуры анкетирования.
// Характеризуется генерацией документов-опросов. Подразумевается что каждому пользователю соответствует свой опрос
// вопросы для анкет генерируются в процедуре сохранения мероприятия и связаны с мероприятием через шаблон анкеты.
&НаКлиенте
Процедура НачалоАнкетированияНаКлиенте()

	ОчиститьСообщения();
	
	// Поверяем правильность заполнения реквизитов мероприятия
	ЗаполнитьСтатусМероприятия();
	
	ПроверитьЗаполнениеНаСервере();
	
	Если МероприятиеЗаполненоВерно(ЭтаФорма) Тогда
		// Начинаем анкетирование
		НачалоАнкетированияНаСервере();
		
		// Помещаем изменившееся (Объект) в базу
		ЗаписатьМероприятиеНаКлиенте();
		
		// Перечитываем форму
		ПриПолученииДанныхНаСервере();
		
		// Обновляем описание
		ОбновитьОписаниеСостоянияМероприятия();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НачалоАнкетированияНаСервере()

	// Сохраняем шаблон анкеты и создаем опросы
	ЗаписатьШаблонАнкеты();
	СоздатьОпросы();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеНаСервере()

	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	ОбъектЗаполненоВерно = СправочникОбъект.ПроверитьЗаполнение();

КонецПроцедуры

// Продление анкетирования.
// Продление характеризуется изменением даты окончания у мероприятия и документов опросов.
&НаКлиенте
Процедура ПродлениеАнкетирования()

	ОчиститьСообщения();
	
	// Поверяем правильность заполнения реквизитов мероприятия
	ЗаполнитьСтатусМероприятия();
	
	ПроверитьЗаполнениеНаСервере();
	
	Если МероприятиеЗаполненоВерно(ЭтаФорма) Тогда
		// Открываем форму продления
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПродлениеАнкетирования",ЭтаФорма);
		ПараметрыФормы = Новый Структура("ДатаНачала,ДатаОкончания", Объект.ДатаНачала,Объект.ДатаОкончания);
		ОткрытьФорму("Справочник.МероприятияОценкиПерсонала.Форма.ФормаПродленияАнкетирования",
			ПараметрыФормы, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

// Создает шаблон, в случае необходимости.
// Открывает форму.
&НаКлиенте
Процедура НастройкаШаблонаАнкеты()

	// Записываем мероприятие
	Если НЕ ЗаписатьМероприятиеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонСообщения) Тогда
		// Создаем новый шаблон новый шаблон.
		НаименованиеШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Мероприятие оценки ""%1""'"), Объект.Наименование);
		ШаблонСообщения = НовыйШаблонПриглашения(НаименованиеШаблона, Объект.Ссылка);
		Если ШаблонСообщения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ШаблонСообщения);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбновитьШаблонСообщенияТекст", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценивающиеПередНачаломДобавленияНаКлиенте(Элемент)

	ОтборПоФизлицуЗаполнен = Элемент.ОтборСтрок <> Неопределено И ЗначениеЗаполнено(Элемент.ОтборСтрок["ФизическоеЛицо"]);
	Если НЕ ОтборПоФизлицуЗаполнен Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбран оцениваемый сотрудник'"));
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОценивающиеИндивидуальныеПередОкончаниемРедактированияНаКлиенте(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, Элемент.ОтборСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпособЗаполненияРеспондентовПриИзмененииНаСервере()

	ЗаполнитьТЧРеспонденты();
	ЗаполнитьСтатусМероприятия();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидEmail(Поле, ИндексВида)
	
	Объект["ВидКонтактнойИнформации" + Поле] = ВидыEmail[ИндексВида].Значение;
	УстановитьПометкуВПодменюВидКонтактнойИнформации(ЭтаФорма, Поле, ИндексВида);
	ЗаполнитьТЧВидомEmail(Поле, ВидыEmail[ИндексВида].Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

// Обработчик оповещения загрузки заполнения индивидуального набора респондентов
//
&НаКлиенте
Процедура ПослеЗаполненияОценивающиеИндивидуальные(РезультатЗакрытия,ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеЗаполненияОценивающиеИндивидуальныеНаСервере(РезультатЗакрытия);
	АктивироватьСтрокуОцениваемых();
	
	Модифицированность = Истина;
	ПереформироватьРеспондентов = Истина;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияОценивающиеИндивидуальныеНаСервере(АдресХранилища)
	
	ЗагрузитьРеспондентовИзХранилища(АдресХранилища);
	
КонецПроцедуры

// Обработка оповещения продления анкетирования
//
&НаКлиенте
Процедура ОбработатьПродлениеАнкетирования(НоваяДатаОкончания, ДополнительныеПараметры) Экспорт

	Если НЕ НоваяДатаОкончания = Неопределено Тогда
		// Меняем дату окончания в объекте
		Объект.ДатаОкончания = НоваяДатаОкончания;
		Если ЗаписатьМероприятиеНаКлиенте() Тогда
			ПеренестиДатуОкончанияОпросов(Объект.Ссылка, НоваяДатаОкончания);
			// Обновляем описание мероприятия
			ОбновитьОписаниеСостоянияМероприятия();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры//

// Обработчик вопроса о необходимости записи
&НаКлиенте
Процедура ОткрытьФормуЗаполненияАнкетыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ЗаписатьМероприятиеНаКлиенте() Тогда
			ОткрытьФормуМастераАнкетыПоРазделам();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик вопроса о необходимости записи
&НаКлиенте
Процедура НачатьАнкетированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачалоАнкетированияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик вопроса о необходимости записи
&НаКлиенте
Процедура ПродлитьАнкетированиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПродлениеАнкетирования();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик вопроса о необходимости записи
&НаКлиенте
Процедура НастроитьШаблонПриглашенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НастройкаШаблонаАнкеты();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик вопроса о необходимости записи
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если ЗаписатьМероприятиеНаКлиенте(Истина) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ШаблоныПриглашений

// Подготавливает финальные тексты из шаблона приглашения,
// отсылает их адресатам,
// записывает даты отправки.
// Параметр
//	МассивСтруктурРеспондентов - массив структур, с ключами
//		ФизическоеЛицо - СправочникСсылка.ФизическоеЛицо
//		Адрес - строка, email сотрудника
//		ИмяПользователяИБ - СправочникСсылка.Пользователи, пользователь, соотнесенный сотруднику
//		ОтправкаУспешно - булево, флаг, который проставляется процедурой отправки.
&НаСервере
Процедура ПодготовитьТекстыПриглашенийИОтправитьАдресатам(МассивСтруктурРеспондентов)

	// Добавим сотрудников
	МассивРеспондентов = Новый Массив;
	Для каждого ПриглашаемыйРеспондент Из МассивСтруктурРеспондентов Цикл
		МассивРеспондентов.Добавить(ПриглашаемыйРеспондент.ФизическоеЛицо);
	КонецЦикла;
	ТаблицаСотрудников = ТаблицаСотрудниковИФизлиц(МассивРеспондентов);
	
	УдачноОтправлены = Новый Массив;
	
	Для каждого ПриглашаемыйРеспондент Из МассивСтруктурРеспондентов Цикл
		// Формируем параметры для процедуры подставляющей их в текст шаблонов
		ПередаваемыеПараметры = Новый Структура;
		ПередаваемыеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
		ПередаваемыеПараметры.Вставить("ПараметрыСообщения", Новый Соответствие);
		ПередаваемыеПараметры.Вставить("ПользовательИБ", ПриглашаемыйРеспондент.ИмяПользователяИБ);
		ПередаваемыеПараметры.Вставить("АдресВебСсылкиДоступныеАнкеты", АдресВебСсылки);
		
		ПараметрыШаблонаСообщений = ШаблоныСообщений.ТаблицаПараметров();
		ШаблоныСообщений.ДобавитьПараметрШаблона(ПараметрыШаблонаСообщений, "Получатель", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), Истина, НСтр("ru = 'Получатель'"));
		ШаблоныСообщений.ДобавитьПараметрШаблона(ПараметрыШаблонаСообщений, "Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"), Истина, НСтр("ru = 'Сотрудник'"));
		
		Для каждого ПараметрПриглашения Из ПараметрыШаблонаСообщений Цикл
			ТипПараметраШаблона = ПараметрПриглашения.ОписаниеТипа.Типы()[0];
			Если ТипПараметраШаблона = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ПередаваемыеПараметры.Вставить(ПараметрПриглашения.ИмяПараметра, ПриглашаемыйРеспондент.ФизическоеЛицо);
			ИначеЕсли ТипПараметраШаблона = Тип("СправочникСсылка.Пользователи") Тогда
				ПередаваемыеПараметры.Вставить(ПараметрПриглашения.ИмяПараметра, ПриглашаемыйРеспондент.ИмяПользователяИБ);
			ИначеЕсли ТипПараметраШаблона = Тип("СправочникСсылка.Сотрудники") Тогда
				НайденныйСотрудник = ТаблицаСотрудников.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПриглашаемыйРеспондент.ФизическоеЛицо));
				ПередаваемыеПараметры.Вставить(ПараметрПриглашения.ИмяПараметра,?(НайденныйСотрудник.Количество()>0, НайденныйСотрудник[0].Сотрудник, Справочники.Сотрудники.ПустаяСсылка()));
			КонецЕсли;
		КонецЦикла; 
		
		ОценкаПерсонала.ЗаполнитьПараметрМероприятияОценкиШаблонаСообщения(ПередаваемыеПараметры.ПараметрыСообщения, Объект);
		ОценкаПерсонала.ЗаполнитьРеквизитШаблонаВебСсылкаАнкетирования(ПередаваемыеПараметры);
		
		// Отправляем приглашение
		РезультатОтправки = ШаблоныСообщений.СформироватьСообщениеИОтправить(ШаблонСообщения, ПриглашаемыйРеспондент.ФизическоеЛицо, ЭтотОбъект.УникальныйИдентификатор, ПередаваемыеПараметры);
		ПриглашаемыйРеспондент.ОтправкаУспешно = РезультатОтправки.Отправлено;
		// Удачных сохраняем для последующего протоколирования
		Если ПриглашаемыйРеспондент.ОтправкаУспешно Тогда
			УдачноОтправлены.Добавить(ПриглашаемыйРеспондент.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла; 
	// Протоколируем
	Если УдачноОтправлены.Количество() > 0 Тогда
		ЗаписатьДатуОтправкиСообщения(УдачноОтправлены,Перечисления.СообщенияОценкиПерсонала.ПриглашениеКУчастию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РассылкаОтчетов

// Ищет в справочнике "ВариантыОтчетов" необходимый объект.
// В случает его отсутствия - создает.
&НаСервереБезКонтекста
Функция ВариантОтчетаОценкаПерсонала(КлючВарианта)
	
	ОтчетСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОценкаПерсонала);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Ссылка КАК ВариантОтчета
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	Запрос.УстановитьПараметр("Отчет", ОтчетСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаЗапроса.Количество()>0 Тогда
		Возврат ТаблицаЗапроса[0].ВариантОтчета;
	Иначе
		// Создаем новый вариант
		ВариантНаименование = "ОценкаПерсонала/"+КлючВарианта;
		
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ВариантОбъект.Отчет            = ОтчетСсылка;
		ВариантОбъект.ТипОтчета        = Перечисления.ТипыОтчетов.Внутренний;
		ВариантОбъект.КлючВарианта     = КлючВарианта;
		ВариантОбъект.Пользовательский = Истина;
		ВариантОбъект.Автор            = Пользователи.ТекущийПользователь();
		ВариантОбъект.ЗаполнитьРодителя();
		ВариантОбъект.Наименование = ВариантНаименование;
		ВариантОбъект.Описание     = ВариантНаименование;
		ВариантОбъект.ТолькоДляАвтора      = Ложь; // Доступен только текущему пользователю.
		ВариантОбъект.ВидимостьПоУмолчанию = Ложь; // По умолчанию не виден.
		ВариантОбъект.Записать();
		
		Возврат ВариантОбъект.Ссылка;
		
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОтправитьРезультатыСервер(ПараметрыОтправки)

	// Формируем пользовательские настройки
	НастройкиОтчета = ПользовательскиеНастройкиОтчетаОценкиПерсонала(
		Новый Структура("Мероприятие,Оцениваемый,КлючВарианта",
			ПараметрыОтправки.Мероприятие,
			"[Получатель]",
			ПараметрыОтправки.КлючВарианта));
	
	
	// Таблица отчетов
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("Отчет", Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Отчеты.Реквизиты.Отчет.Тип);
	ТаблицаОтчетов.Колонки.Добавить("ОтправлятьЕслиПустой", Новый ОписаниеТипов("Булево"));
	
	МассивТиповНастроек = Новый Массив;
	МассивТиповНастроек.Добавить(Тип("Неопределено"));
	МассивТиповНастроек.Добавить(Тип("ПользовательскиеНастройкиКомпоновкиДанных"));
	
	ТаблицаОтчетов.Колонки.Добавить("Настройки", Новый ОписаниеТипов(МассивТиповНастроек));
	ТаблицаОтчетов.Колонки.Добавить("Форматы", Новый ОписаниеТипов("Массив"));
	
	СтрокаТаблицы = ТаблицаОтчетов.Добавить();
	СтрокаТаблицы.Отчет = ВариантОтчетаОценкаПерсонала(ПараметрыОтправки.КлючВарианта);
	СтрокаТаблицы.ОтправлятьЕслиПустой = Ложь;
	СтрокаТаблицы.Настройки = НастройкиОтчета;
	
	Форматы = Новый Массив;
	Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.HTML4);
	СтрокаТаблицы.Форматы = Форматы;
	
	// Формируем параметры доставки
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("Автор",Пользователи.ТекущийПользователь());
    ПараметрыДоставки.Вставить("ИспользоватьПапку", Ложь);
    ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог", Ложь);
    ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс", Ложь);
    ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Истина);
	ПараметрыДоставки.Вставить("ТранслитерироватьИменаФайлов", Ложь);
	
    ПараметрыДоставки.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	ПараметрыДоставки.Вставить("Получатели", ПараметрыОтправки.Получатели);
	ПараметрыДоставки.Вставить("Персонализирована", Истина);
	ПараметрыДоставки.Вставить("ШаблонТемы", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"Для [Получатель], результаты %1, от [ДатаВыполнения(ДЛФ='D')]",ПараметрыОтправки.Мероприятие.Наименование));
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыЖурнала = Новый Структура("ИмяСобытия,Метаданные,Данные","Рассылка",ОбработкаОбъект.Метаданные(), Объект.Наименование);
	
	Адресаты = Новый Массив;
	Для каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
		Адресаты.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	Успех = РассылкаОтчетов.ВыполнитьРассылку(
		ТаблицаОтчетов,
		ПараметрыДоставки,
		"",
		ПараметрыЖурнала);
		
	Если Успех Тогда
		ЗаписатьДатуОтправкиСообщения(Адресаты, Перечисления.СообщенияОценкиПерсонала.ИндивидуальныеРезультаты);
		ЗаполнитьДатыОтправки();
		
		ТекстСообщения = НСтр("ru = 'Результаты были успешно отправлены нижеследующим респондентам:'");
		Для каждого Адресат Из Адресаты Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + Адресат;
		КонецЦикла; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуВПодменюВидКонтактнойИнформации(Форма, Поле, ИндексВида)

	Для каждого ВидEmail Из Форма.ВидыEmail Цикл
		ЭлементУправления = Форма.Элементы.Найти(Поле + "ВидEmail_" + Форма.ВидыEmail.Индекс(ВидEmail));
		Если ЭлементУправления <> Неопределено Тогда
			ЭлементУправления.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	ЭлементУправления = Форма.Элементы.Найти(Поле + "ВидEmail_" + ИндексВида);
	Если ЭлементУправления <> Неопределено Тогда
		ЭлементУправления.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСтрокуОцениваемых()

	Если Объект.Участники.Количество() > 0 Тогда
		Элементы.Оцениваемые.ТекущаяСтрока = Объект.Участники[0].ПолучитьИдентификатор();
		ОцениваемыеАктуализироватьОценивающихНаКлиенте(Элементы.Оцениваемые);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьРеспондентовФизлица(ФизическоеЛицо)
	
	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех") Тогда
		Возврат;
	КонецЕсли;
	
    НайденныеСтроки = Объект.Респонденты.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.Респонденты.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьТекстИнформации(Сообщение)
	
	ТекстИнформацииТекущаяСтадия = ТекстИнформацииТекущаяСтадия + Символы.ПС + Сообщение;
	
КонецПроцедуры

// На основе реквизита "СведенияОМероприятии" формирует описание состояния мероприятия.
&НаКлиенте
Процедура ОбновитьОписаниеСостоянияМероприятия()
	
	ТекстИнформацииТекущаяСтадия = "";
	ЦветТекстаИнформации = ЦветаНадписей["ПоясняющийТекст"]; 
	
	Если СведенияОМероприятии.МероприятиеЗавершено Тогда 
		ТекстИнформацииТекущаяСтадия = НСтр("ru = 'Прием анкет завершен. Можно продлить анкетирование или перейти к анализу результатов'");
	Иначе
		ЦветТекстаИнформации = ЦветаНадписей["Желтый"]; 
		Если СведенияОМероприятии.АнкетированиеНачато Тогда
			ТекстИнформацииТекущаяСтадия =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет процесс приема анкет. Анкетирование завершается %1'"), Формат(Объект.ДатаОкончания, "ДФ=dd.MM.yy"));
		Иначе
			ТекстИнформацииТекущаяСтадия = НСтр("ru = 'Анкетирование не начато'");
		КонецЕсли;
		// Правильно ли выполнена настройка:
		// - участников (заполнены ли участники).
		Если НЕ СведенияОМероприятии.УчастникиЗаполнены Тогда
			//	* нет участников
			ДополнитьТекстИнформации(НСтр("ru = 'Список участников не заполнен'"));
			ЦветТекстаИнформации = ЦветаНадписей["Красный"];
		Иначе
			Если СведенияОМероприятии.ДублиУчастников Тогда
				//	* корректно ли заполнены участники
				ДополнитьТекстИнформации(НСтр("ru = 'Список участников заполнен с ошибками'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			КонецЕсли;
			Если НЕ СведенияОМероприятии.РеспондентыЗаполнены Тогда
				//	* для всех ли участников есть респонденты
				ДополнитьТекстИнформации(НСтр("ru = 'Для одного или нескольких сотрудников не заполнен список респондентов'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			Иначе
				Если СведенияОМероприятии.ДублиРеспондентов Тогда
					//	* корректно ли заполнены респонденты
					ДополнитьТекстИнформации(НСтр("ru = 'Списки респондентов заполнены с ошибками'"));
					ЦветТекстаИнформации = ЦветаНадписей["Красный"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// - анкеты
		//	* шаблоны
		Если НЕ СведенияОМероприятии.ШаблонАнкетыЗаполнен Тогда
			ДополнитьТекстИнформации(НСтр("ru = 'Не заполнен заголовок анкеты'"));	
			ЦветТекстаИнформации = ЦветаНадписей["Красный"];
		КонецЕсли;
		//	* выбраны характеристики
		Если НЕ СведенияОМероприятии.ВыбраныХарактеристики Тогда
			ДополнитьТекстИнформации(НСтр("ru = 'Не выбраны характеристики для оценки персонала'"));	
			ЦветТекстаИнформации = ЦветаНадписей["Красный"];
		Иначе
			Если СведенияОМероприятии.НеЗаполненыВопросыХарактеристик Тогда
				//	* Ошибки заполнения вопросов: в выбранной характеристики нет ни одного вопроса.
				ДополнитьТекстИнформации(НСтр("ru = 'В выбранной характеристики не содержится вопросов'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			КонецЕсли;
			Если СведенияОМероприятии.ВопросыЗаполненыСОшибками Тогда
				//	* Ошибки заполнения вопросов: повторяющиеся вопросы, различное количество вариантов ответов.
				ДополнитьТекстИнформации(НСтр("ru = 'Один из вопросов не содержит вариантов ответов'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			КонецЕсли;
			Если СведенияОМероприятии.ДублиВопросовХарактеристик Тогда
				//	* Ошибки заполнения вопросов: один и тот же вопрос для одной характеристики встречается несколько раз.
				ДополнитьТекстИнформации(НСтр("ru = 'Для одной или нескольких характеристик один вопрос указан несколько раз'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			КонецЕсли;
			Если СведенияОМероприятии.ДублиОткрытыхВопросов Тогда
				//	* Ошибки заполнения вопросов: один и тот же открытый вопрос встречается несколько раз.
				ДополнитьТекстИнформации(НСтр("ru = 'В списке открытых вопросов некоторые вопросы встречаются несколько раз'"));
				ЦветТекстаИнформации = ЦветаНадписей["Красный"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТекстИнформацииТекущаяСтадия.ЦветТекста = ЦветТекстаИнформации;
	
КонецПроцедуры

&НаСервере
Функция АдресСотрудниковВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Участники.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

// Протоколирование отправки сообщений
&НаСервере
Процедура ЗаписатьДатуОтправкиСообщения(Адресаты, ТипСообщения)
	
	ДатаВремяОтправки = ТекущаяДатаСеанса();
	
	Для каждого Адресат Из Адресаты Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПротоколыОтправкиСообщенийОценкиПерсонала.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Мероприятие	= Объект.Ссылка;
		МенеджерЗаписи.ТипСообщения	= ТипСообщения;
		МенеджерЗаписи.Адресат		= Адресат;
		МенеджерЗаписи.ДатаОтправки	= ДатаВремяОтправки;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОВариантахОтвета(Вопросы)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Вопросы.Ссылка КАК Вопрос
	|ИЗ
	|	ПланВидовХарактеристик.ВопросыДляАнкетирования КАК Вопросы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовАнкет КАК ВариантыОтветов
	|		ПО Вопросы.Ссылка = ВариантыОтветов.Владелец
	|ГДЕ
	|	Вопросы.Ссылка В(&Вопросы)
	|	И ВариантыОтветов.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Вопросы", Вопросы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

// Проверяет были ли исключены вопросы по сравнению с сохраненным мероприятием.
// В случае если вопросы удалены были после начала анкетирования - загружает удаленные вопросы заново.
// Параметры
//	* МассивВопросов - таблица значений текущих вопросов.
&НаСервере
Функция БылиИсключеныВопросы(МассивВопросов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МассивВопросов.ХарактеристикаПерсонала КАК РодительскийЭлемент,
		|	МассивВопросов.Вопрос КАК Вопрос
		|ПОМЕСТИТЬ ВТНовыеВопросы
		|ИЗ
		|	&МассивВопросов КАК МассивВопросов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МероприятияОценкиПерсоналаВопросы.Вопрос КАК Вопрос,
		|	МероприятияОценкиПерсоналаВопросы.ХарактеристикаПерсонала КАК РодительскийЭлемент
		|ИЗ
		|	Справочник.МероприятияОценкиПерсонала.ВопросыХарактеристик КАК МероприятияОценкиПерсоналаВопросы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеВопросы КАК ВТНовыеВопросы
		|		ПО МероприятияОценкиПерсоналаВопросы.ХарактеристикаПерсонала = ВТНовыеВопросы.РодительскийЭлемент
		|			И МероприятияОценкиПерсоналаВопросы.Вопрос = ВТНовыеВопросы.Вопрос
		|ГДЕ
		|	ВТНовыеВопросы.Вопрос ЕСТЬ NULL
		|	И НЕ МероприятияОценкиПерсоналаВопросы.Вопрос ЕСТЬ NULL
		|	И МероприятияОценкиПерсоналаВопросы.Ссылка = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивВопросов", МассивВопросов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	БылиУдаленыВопросы = НЕ РезультатЗапроса.Пустой();
	
	Если БылиУдаленыВопросы И СведенияОМероприятии.АнкетированиеНачато Тогда
		ЗагрузитьВопросыХарактеристик(РезультатЗапроса.Выбрать());
	КонецЕсли;
	
	Возврат БылиУдаленыВопросы;

КонецФункции

// Возвращает таблицу значений текущих (на форме, возможно не сохраненных)
// вопросов мероприятия.
&НаСервере
Функция ТекущиеВопросыМероприятия()
	
	ТекущаяТаблицаВопросов = Новый ТаблицаЗначений;
	
	РодительскаяТаблица = ХарактеристикиПерсонала;
	ТаблицаВопросов = ВопросыХарактеристик;
	ВидВопроса = НСтр("ru = 'Вопросы компетенций'");
	
	ТекущаяТаблицаВопросов.Колонки.Добавить("ХарактеристикаПерсонала",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала"));
	ТекущаяТаблицаВопросов.Колонки.Добавить("Вопрос",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования"));
	ТекущаяТаблицаВопросов.Колонки.Добавить("ВидВопроса",Новый ОписаниеТипов("Строка"));
	
	// Вопросы компетенций
	ВключенныеРодители = РодительскаяТаблица.НайтиСтроки(Новый Структура("Включена", Истина));
	
	Для каждого СтрокаРодителя Из ВключенныеРодители Цикл
		Вопросы = ТаблицаВопросов.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", СтрокаРодителя.ХарактеристикаПерсонала));
		Для каждого Вопрос Из Вопросы Цикл
			Если НЕ ЗначениеЗаполнено(Вопрос.Вопрос) Тогда
				Продолжить;
			КонецЕсли;
		    СтрокаВопроса = ТекущаяТаблицаВопросов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВопроса, Вопрос);
			СтрокаВопроса.ВидВопроса = ВидВопроса;
		КонецЦикла;
	КонецЦикла; 
	
	// Потом открытые
	Для каждого СтрокаОткрытыхВопросов Из ОткрытыеВопросы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОткрытыхВопросов.Вопрос) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВопроса = ТекущаяТаблицаВопросов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВопроса, СтрокаОткрытыхВопросов);
		СтрокаВопроса.ВидВопроса = НСтр("ru = 'Открытые вопросы'");
	КонецЦикла; 
	
	Возврат ТекущаяТаблицаВопросов;
	
КонецФункции

// Загружает респондентов из таблицы значений временно хранилища.
//
&НаСервере
Процедура ЗагрузитьРеспондентовИзХранилища(РезультатЗакрытия)

	ТаблицаРеспондентов = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
	Объект.Респонденты.Загрузить(ТаблицаРеспондентов);

КонецПроцедуры

// Помещает подобранных сотрудников во временное хранилище.
&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	// Найдем сотрудников по физлицам
	СписокСотрудниковПоФизическимЛицам = ТаблицаСотрудниковИФизлиц(Объект.Участники.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Возврат ПоместитьВоВременноеХранилище(СписокСотрудниковПоФизическимЛицам.ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаСотрудниковИФизлиц(СписокФизическихЛиц)
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыСотрудников);
	
КонецФункции

// Создает новые шаблон сообщений.
//
&НаСервереБезКонтекста
Функция НовыйШаблонПриглашения(НаименованиеШаблона, ВладелецШаблона)
	
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	ПараметрыШаблона.Вставить("ВладелецШаблона", ВладелецШаблона);
	ПараметрыШаблона.Вставить("ПолноеИмяТипаНазначения", "Справочник.ФизическиеЛица");
	ПараметрыШаблона.Вставить("Служебный", Истина);
	
	// Заполняем демотекстами
	ДемоТексты = ОценкаПерсонала.ДемонстрационныеТекстыШаблоныСообщений();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ДемоТексты, Истина);
	
	НовыйШаблон = ШаблоныСообщений.СоздатьШаблон(НаименованиеШаблона, ПараметрыШаблона);
	
	Возврат НовыйШаблон;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиОтчетаОценкиПерсонала(УстанавливаемыйОтбор)
	
	// Формируем пользовательские настройки
	НастройкиОтчета = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ОтчетОбъект = Отчеты.ОценкаПерсонала.Создать();
	КоллекцияПользовательскихЭлементовОтбора = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(УстанавливаемыйОтбор.КлючВарианта).Настройки.Отбор.Элементы;
	
	Для каждого ПользовательскийЭлементОтбора Из КоллекцияПользовательскихЭлементовОтбора Цикл
		
		ЭлементОтбора = НастройкиОтчета.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора,ПользовательскийЭлементОтбора);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		
		Если ПользовательскийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Мероприятие") Тогда
			УстанавливаемыйОтбор.Свойство("Мероприятие", ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли ПользовательскийЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Оцениваемый") Тогда
			УстанавливаемыйОтбор.Свойство("Оцениваемый", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
	КонецЦикла; 	
	
	Возврат НастройкиОтчета;
	
КонецФункции

// Перезаполняет элементы коллекции.
// Параметры
// 	Коллекция
// 	Поле - тип Строка - поле элемента в коллекции
// 	Значение - подставляемое значение
// 	Условие - фильтр строк коллекции.
&НаСервере
Процедура ЗаполнитьПолеКоллекцииПоУсловию(Коллекция, Поле, Значение, Условие)
	
	НайденныеСтроки = Коллекция.НайтиСтроки(Условие);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока[Поле] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеФизлицоТаблицыРеспонденты(БылоФизлицо, СталоФизлицо)
	
	Если Объект.СпособЗаполненияРеспондентов = ПредопределенноеЗначение("Перечисление.СпособЗаполненияРеспондентовВОценке360.ЕдиноеДляВсех") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолеКоллекцииПоУсловию(Объект.Респонденты, "ФизическоеЛицо", СталоФизлицо, Новый Структура("ФизическоеЛицо", БылоФизлицо));	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноОтправлятьЭлектроннуюПочту()

	Возврат РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна();

КонецФункции

// Открытие формы заполнения
&НаКлиенте
Процедура ОткрытьФормуЗаполненияРеспондентов()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаполненияОценивающиеИндивидуальные",ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИндивидуальныеНаборыЗаполнены", (Объект.Респонденты.Количество() > 0));
	ПараметрыФормы.Вставить("АдресСотрудниковВХранилище", АдресСотрудниковВХранилище());
	
	ОткрытьФорму("Справочник.МероприятияОценкиПерсонала.Форма.ФормаЗаполненияРеспондентов",
		ПараметрыФормы,	ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОцениваемыеАктуализироватьОценивающихНаКлиенте(Элемент)

	УстановитьТекстЗаголовкаГруппыИндивидуальныхОценивающих(Элемент);
	УстановитьОтборСтрокОценивающиеИндивидуальные(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокОценивающиеИндивидуальные(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	АктивизированноеФизическоеЛицо = Элемент.ТекущиеДанные.ФизическоеЛицо;
	Элементы.ОценивающиеИндивидуальные.ОтборСтрок = Новый ФиксированнаяСтруктура("ФизическоеЛицо", Элемент.ТекущиеДанные.ФизическоеЛицо);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаГруппыИндивидуальныхОценивающих(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) Тогда
		ТекстЗаголовкаГруппыИндивидуальныхОценивающих = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Респонденты (оценивающие %1)'"),
			ФИОСотрудникаВВинительномПадеже(ТекущиеДанные.ФизическоеЛицо));
	Иначе		
		ТекстЗаголовкаГруппыИндивидуальныхОценивающих = НСтр("ru = 'Респонденты'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ФИОСотрудникаВВинительномПадеже(ФизическоеЛицо)
	
	ЭлементФИОСотрудника = ФИОФизическогоЛицаВинительныйПадежКеш.НайтиПоЗначению(ФизическоеЛицо);
	Если ЭлементФИОСотрудника = Неопределено Тогда
		ФИОСотрудника = ФИОСотрудникаВВинительномПадежеНаСервере(ФизическоеЛицо);
		ФИОФизическогоЛицаВинительныйПадежКеш.Добавить(ФизическоеЛицо, ФИОСотрудника);
	Иначе
		ФИОСотрудника = ЭлементФИОСотрудника.Представление;
	КонецЕсли;
	
	Возврат ФИОСотрудника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФИОСотрудникаВВинительномПадежеНаСервере(ФизическоеЛицо)
	Возврат СклонениеПредставленийОбъектов.ПросклонятьФИО(ФизическоеЛицо, 4);
КонецФункции

&НаКлиенте
Процедура АктивироватьСтрокуХарактеристик()

	Если ХарактеристикиПерсонала.Количество()>0 Тогда
		Элементы.ХарактеристикиПерсонала.ТекущаяСтрока = ХарактеристикиПерсонала[0].ПолучитьИдентификатор();
		ХарактеристикиПерсоналаПриАктивизацииСтроки(Элементы.ХарактеристикиПерсонала);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветВопросовПоХарактеристикам()

	ТекущиеДанные = Элементы.ХарактеристикиПерсонала.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Включена Тогда
		Элементы.ВопросыХарактеристик.ЦветТекста = ЦветаНадписей.Черный;
	Иначе
		Элементы.ВопросыХарактеристик.ЦветТекста = ЦветаНадписей.Серый;
	КонецЕсли;
	
	Элементы.ВопросыХарактеристик.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХарактеристикиИВопросы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МероприятияОценкиПерсоналаВопросы.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	МероприятияОценкиПерсоналаВопросы.Вопрос КАК Вопрос
		|ПОМЕСТИТЬ ВыбранныеВопросыМероприятия
		|ИЗ
		|	Справочник.МероприятияОценкиПерсонала.ВопросыХарактеристик КАК МероприятияОценкиПерсоналаВопросы
		|ГДЕ
		|	МероприятияОценкиПерсоналаВопросы.Ссылка = &Мероприятие
		|	И МероприятияОценкиПерсоналаВопросы.ХарактеристикаПерсонала <> &ПустаяХарактеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХарактеристикаПерсонала,
		|	Вопрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыбранныеВопросыМероприятия.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала
		|ПОМЕСТИТЬ ХарактеристикиМероприятия
		|ИЗ
		|	ВыбранныеВопросыМероприятия КАК ВыбранныеВопросыМероприятия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиПерсонала.Ссылка КАК ХарактеристикаПерсонала,
		|	ВЫБОР
		|		КОГДА ХарактеристикиМероприятия.ХарактеристикаПерсонала ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Включена
		|ИЗ
		|	ПланВидовХарактеристик.ХарактеристикиПерсонала КАК ХарактеристикиПерсонала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикиМероприятия КАК ХарактеристикиМероприятия
		|		ПО ХарактеристикиПерсонала.Ссылка = ХарактеристикиМероприятия.ХарактеристикаПерсонала
		|ГДЕ
		|	ХарактеристикиПерсонала.ВидХарактеристики = &ВидХарактеристикиЛичныеКачества
		|	И (НЕ ХарактеристикиПерсонала.ВАрхиве
		|			ИЛИ НЕ ХарактеристикиМероприятия.ХарактеристикаПерсонала ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВопросыОценкиХарактеристикПерсонала.ХарактеристикаПерсонала, ВыбранныеВопросыМероприятия.ХарактеристикаПерсонала) КАК ХарактеристикаПерсонала,
		|	ЕСТЬNULL(ВопросыОценкиХарактеристикПерсонала.Вопрос, ВыбранныеВопросыМероприятия.Вопрос) КАК Вопрос,
		|	ВЫБОР
		|		КОГДА ВыбранныеВопросыМероприятия.ХарактеристикаПерсонала ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Переопределена
		|ИЗ
		|	РегистрСведений.ВопросыОценкиХарактеристикПерсонала КАК ВопросыОценкиХарактеристикПерсонала
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВыбранныеВопросыМероприятия КАК ВыбранныеВопросыМероприятия
		|		ПО ВопросыОценкиХарактеристикПерсонала.Вопрос = ВыбранныеВопросыМероприятия.Вопрос
		|			И ВопросыОценкиХарактеристикПерсонала.ХарактеристикаПерсонала = ВыбранныеВопросыМероприятия.ХарактеристикаПерсонала
		|ГДЕ
		|	ВопросыОценкиХарактеристикПерсонала.ХарактеристикаПерсонала.ВидХарактеристики = &ВидХарактеристикиЛичныеКачества
		|	И (НЕ ВопросыОценкиХарактеристикПерсонала.ХарактеристикаПерсонала.ВАрхиве
		|			ИЛИ НЕ ВыбранныеВопросыМероприятия.ХарактеристикаПерсонала ЕСТЬ NULL)
		|ИТОГИ
		|	МАКСИМУМ(Переопределена)
		|ПО
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МероприятияОценкиПерсоналаВопросы.Вопрос КАК Вопрос,
		|	МероприятияОценкиПерсоналаВопросы.Вопрос.Наименование КАК Наименование
		|ИЗ
		|	Справочник.МероприятияОценкиПерсонала.ВопросыХарактеристик КАК МероприятияОценкиПерсоналаВопросы
		|ГДЕ
		|	МероприятияОценкиПерсоналаВопросы.Ссылка = &Мероприятие
		|	И МероприятияОценкиПерсоналаВопросы.ХарактеристикаПерсонала = &ПустаяХарактеристика";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидХарактеристикиЛичныеКачества", ПредопределенноеЗначение("Перечисление.ВидыХарактеристикПерсонала.ЛичноеКачество"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПредопределенноеЗначение("ПланВидовХарактеристик.ХарактеристикиПерсонала.ПустаяСсылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатХарактеристик = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	РезультатВопросыХарактеристики = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	РезультатОткрытыеВопросы = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	// Получаем список выбранных характеристик
	ХарактеристикиПерсонала.Загрузить(РезультатХарактеристик.Выгрузить());
	// Получаем список выбранных характеристик
	ОткрытыеВопросы.Загрузить(РезультатОткрытыеВопросы.Выгрузить());
	
	// Получаем список вопросов по характеристик из регистра
	ВопросыХарактеристик.Очистить();
	ВыборкаВопросыХарактеристики = РезультатВопросыХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВопросыХарактеристики.Следующий() Цикл
		Если ВыборкаВопросыХарактеристики.Переопределена Тогда
			ВопросыПереопределеннойХарактеристики = Объект.ВопросыХарактеристик.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", ВыборкаВопросыХарактеристики.ХарактеристикаПерсонала));
			Для каждого ВопросХарактеристики Из ВопросыПереопределеннойХарактеристики Цикл
				ЗаполнитьЗначенияСвойств(ВопросыХарактеристик.Добавить(), ВопросХарактеристики);
			КонецЦикла; 
		Иначе
			ВыборкаВопросов = ВыборкаВопросыХарактеристики.Выбрать();
			Пока ВыборкаВопросов.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ВопросыХарактеристик.Добавить(), ВыборкаВопросов);
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВопросыХарактеристики(ХарактеристикаПерсонала)

	УдаляемыйМассив = ВопросыХарактеристик.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", ХарактеристикаПерсонала));
	Для каждого УдаляемаяСтрока Из УдаляемыйМассив Цикл
		ВопросыХарактеристик.Удалить(УдаляемаяСтрока);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВопросамиХарактеристик(ХарактеристикаПерсонала)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыОценкиХарактеристикПерсонала.Вопрос КАК Вопрос
		|ИЗ
		|	РегистрСведений.ВопросыОценкиХарактеристикПерсонала КАК ВопросыОценкиХарактеристикПерсонала
		|ГДЕ
		|	ВопросыОценкиХарактеристикПерсонала.ХарактеристикаПерсонала = &ХарактеристикаПерсонала";
	
	Запрос.УстановитьПараметр("ХарактеристикаПерсонала", ХарактеристикаПерсонала);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаВопросаХарактеристики = ВопросыХарактеристик.Добавить();
		СтрокаВопросаХарактеристики.ХарактеристикаПерсонала = ХарактеристикаПерсонала;
		ЗаполнитьЗначенияСвойств(СтрокаВопросаХарактеристики, ВыборкаДетальныеЗаписи);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьХарактеристикиИВопросы()
	
	Объект.ВопросыХарактеристик.Загрузить(ТекущиеВопросыМероприятия());
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВопросыХарактеристик(ВыборкаУдаленныхВопросов)

	Пока ВыборкаУдаленныхВопросов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаУдаленныхВопросов.РодительскийЭлемент) Тогда
			СтрокиВопросов = ВопросыХарактеристик.НайтиСтроки(Новый Структура("Вопрос, ХарактеристикаПерсонала", ВыборкаУдаленныхВопросов.Вопрос, ВыборкаУдаленныхВопросов.РодительскийЭлемент));
			Если СтрокиВопросов.Количество() = 0 Тогда
				ВопросФорма = ВопросыХарактеристик.Добавить();
				ЗаполнитьЗначенияСвойств(ВопросФорма, ВыборкаУдаленныхВопросов);
			КонецЕсли;
			ХарактеристикиКВключению = ХарактеристикиПерсонала.НайтиСтроки(Новый Структура("ХарактеристикаПерсонала", ВыборкаУдаленныхВопросов.РодительскийЭлемент));
			Если ХарактеристикиКВключению.Количество() > 0 Тогда
				ХарактеристикиКВключению[0].Включена = Истина;
			КонецЕсли;
		Иначе
			ОткрытыйВопросФорма = ОткрытыеВопросы.Добавить();
			ЗаполнитьЗначенияСвойств(ОткрытыйВопросФорма, ВыборкаУдаленныхВопросов);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецОбласти
