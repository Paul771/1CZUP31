#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Текст = НСтр("ru = 'Необходимо задать имя файла'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
	
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			Текст = НСтр("ru = 'Необходимо задать наименование файла'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Тип) Тогда
			Текст = НСтр("ru = 'Необходимо задать тип файла'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ);
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Media И (НЕ ЗначениеЗаполнено(Ширина) ИЛИ НЕ ЗначениеЗаполнено(Высота)) Тогда
			Текст = НСтр("ru = 'Требуется указать размеры медиаобъекта'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Делаем проверки
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоКопирование") И ДополнительныеСвойства.ЭтоКопирование Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем обязательные реквизиты
	
	Если Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.DataProcessor Тогда
		ОткрыватьВнешнимПриложением = Истина;
	КонецЕсли;	
	
	// Создаем владельца, если он не задан	
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
	
		ВладелецОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
		ВладелецОбъект.Наименование = Наименование;
		
		Если ДополнительныеСвойства.Свойство("РодительРесурса") Тогда
			ВладелецОбъект.Родитель = ДополнительныеСвойства.РодительРесурса;	
		КонецЕсли;
		
		РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ВладелецОбъект);
		
		ВладелецОбъект.Записать();
		
		Владелец = ВладелецОбъект.Ссылка;
		
	КонецЕсли;	
	
	РазработкаЭлектронныхКурсовСлужебный.ПроверитьВозможностьЗаписиЭлементаПередЗаписью(ЭтотОбъект, Отказ);
	РазработкаЭлектронныхКурсовСлужебный.УстановитьДатуИзмененияПередЗаписью(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Делаем проверки
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоКопирование") И ДополнительныеСвойства.ЭтоКопирование Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлятьВладельца = Неопределено;
	ДополнительныеСвойства.Свойство("ОбновлятьВладельца", ОбновлятьВладельца);
	
	Если ОбновлятьВладельца = Неопределено Тогда
		ОбновлятьВладельца = Истина; // По умолчанию обновляем владельца
	КонецЕсли;
	
	Если ОбновлятьВладельца Тогда
	
		// Обновляем владельца
		
		ВладелецОбъект = Владелец.ПолучитьОбъект();
		
		Если Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Document Тогда
			
			ВладелецОбъект.ЭлементЗапуска = Ссылка;
			ВладелецОбъект.ПодключитьAPI = Истина;		
			
		КонецЕсли;	
			
		ЕдинственныйЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(Владелец);
		
		Если ЗначениеЗаполнено(ЕдинственныйЭлементРесурса) Тогда
			ВладелецОбъект.ЕдинственныйЭлемент = ЕдинственныйЭлементРесурса;
		Иначе
			ВладелецОбъект.ЕдинственныйЭлемент = Неопределено;
		КонецЕсли;
		
		Если ЕдинственныйЭлементРесурса = Ссылка И НЕ ПометкаУдаления Тогда		
			ВладелецОбъект.Наименование = Наименование;		
		КонецЕсли;		
		
		ВладелецОбъект.Записать(); // Плюс всегда будет обновлена дата ресурса		
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ДополнительныеСвойства.Вставить("ОбъектКопирования", ОбъектКопирования);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеЭлементаПриЗаписи(Данные, КодДанных, Расширение = Неопределено, ДанныеДляИндексирования = Неопределено) Экспорт
	
	СтрокаСДанными = ДанныеЭлемента.Найти(КодДанных, "КодДанных");
	
	Если СтрокаСДанными = Неопределено Тогда
		СтрокаСДанными = ДанныеЭлемента.Добавить();
		СтрокаСДанными.КодДанных = КодДанных;
	КонецЕсли;
	
	СтрокаСДанными.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	СтрокаСДанными.ДанныеДляИндексирования = ДанныеДляИндексирования;
	
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		
		// Двоичные данные храним в справочниках БСП
		
		Если Ссылка.Пустая() Тогда
			ВызватьИсключение НСтр("ru = 'Данные не могут быть добавлены в незаписанный элемент ресурса'");
		КонецЕсли;		
		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла, Ложь);
		
		Если Расширение = Неопределено Тогда
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
		Иначе
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(СтрокаСДанными.ПрисоединенныйФайл) Тогда			
						
			РаботаСФайлами.ОбновитьФайл(
				СтрокаСДанными.ПрисоединенныйФайл,
				Новый Структура(
					"АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ИмяБезРасширения, ДатаМодификацииУниверсальная, Расширение",					
					ПоместитьВоВременноеХранилище(Данные),
					"",
					СтруктураИмениФайла.ИмяБезРасширения,
					ДатаИзменения,
					РасширениеБезТочки
				)
			);
			
		Иначе
			
			СтрокаСДанными.ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				Новый Структура("Автор, ВладелецФайлов, ИмяБезРасширения, РасширениеБезТочки, ВремяИзмененияУниверсальное",
					Пользователи.ТекущийПользователь(),
					Ссылка,
					СтруктураИмениФайла.ИмяБезРасширения,
					РасширениеБезТочки,
					ДатаИзменения
				),
				ПоместитьВоВременноеХранилище(Данные),
				"");
			
		КонецЕсли;
				
	Иначе
		
		СтрокаСДанными.ХранилищеДанных = Новый ХранилищеЗначения(Данные);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеЭлементаПриЗаписи(КодДанных) Экспорт
	
	СтрокаСДанными = ДанныеЭлемента.Найти(КодДанных, "КодДанных");

	Если СтрокаСДанными = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСДанными.ПрисоединенныйФайл) Тогда
		ПрисоединенныйФайлОбъект = СтрокаСДанными.ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина, Истина);
	КонецЕсли;
	
	ДанныеЭлемента.Удалить(СтрокаСДанными);
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли

