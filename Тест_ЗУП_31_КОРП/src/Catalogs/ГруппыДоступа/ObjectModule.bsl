#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СтарыеЗначения; // Значения некоторых реквизитов и табличных частей группы доступа
                      // до ее изменения для использования в обработчике события ПриЗаписи.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.ПроверитьДинамическоеОбновлениеВерсииПрограммы();
	РегистрыСведений.ПраваРолей.ПроверитьДанныеРегистра();
	
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"Ссылка, Профиль, ПометкаУдаления, Пользователи, ВидыДоступа, ЗначенияДоступа");
	
	Если Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		// Всегда предопределенный профиль Администратор.
		Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
		
		// Не может быть персональной группой доступа.
		Пользователь = Неопределено;
		
		// Не может иметь обычного ответственного (только полноправные пользователи).
		Ответственный = Неопределено;
		
		// Изменение разрешено только полноправному пользователю.
		Если НЕ ПривилегированныйРежим()
		   И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			
			ВызватьИсключение
				НСтр("ru = 'Предопределенную группу доступа Администраторы
				           |можно изменять, либо в привилегированном режиме,
				           |либо при наличии роли ""Полные права"".'");
		КонецЕсли;
		
		// Проверка наличия только пользователей.
		Для каждого ТекущаяСтрока Из ЭтотОбъект.Пользователи Цикл
			Если ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
				ВызватьИсключение
					НСтр("ru = 'Предопределенная группа доступа Администраторы
					           |может содержать только пользователей.
					           |
					           |Группы пользователей, внешние пользователи и
					           |группы внешних пользователей недопустимы.'");
			КонецЕсли;
		КонецЦикла;
		
	// Нельзя устанавливать предопределенный профиль Администратор произвольной группе доступа.
	ИначеЕсли Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
		ВызватьИсключение
			НСтр("ru = 'Предопределенный профиль Администратор может быть только
			           |у предопределенной группы доступа Администраторы.'");
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		// Автоматическая установка реквизитов для персональной группы доступа.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Родитель = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
		Иначе
			Пользователь = Неопределено;
			Если Родитель = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа(Истина) Тогда
				Родитель = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// При снятии пометки удаления с группы доступа выполняется
		// снятие пометки удаления с профиля этой группы доступа.
		Если Не ПометкаУдаления И СтарыеЗначения.ПометкаУдаления = Истина Тогда
			ПометкаУдаленияПрофиля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "ПометкаУдаления");
			ПометкаУдаленияПрофиля = ?(ПометкаУдаленияПрофиля = Неопределено, Ложь, ПометкаУдаленияПрофиля);
			Если ПометкаУдаленияПрофиля Тогда
				ЗаблокироватьДанныеДляРедактирования(Профиль);
				ПрофильОбъект = Профиль.ПолучитьОбъект();
				ПрофильОбъект.ПометкаУдаления = Ложь;
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет:
// - роли добавленных, оставшихся и удаленных пользователей;
// - РегистрСведений.ТаблицыГруппДоступа;
// - РегистрСведений.ЗначенияГруппДоступа.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("НеОбновлятьРолиПользователей") Тогда
		ОбновитьРолиПользователейПриИзмененииГруппыДоступа();
	КонецЕсли;
	
	НаличиеУчастников = Пользователи.Количество() <> 0;
	СтароеНаличиеУчастников = СтарыеЗначения.Ссылка = Ссылка И Не СтарыеЗначения.Пользователи.Пустой();
	
	Если Профиль           <> СтарыеЗначения.Профиль
	 Или ПометкаУдаления   <> СтарыеЗначения.ПометкаУдаления
	 Или НаличиеУчастников <> СтароеНаличиеУчастников Тогда
		
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра(Ссылка);
	КонецЕсли;
	
	Если Справочники.ГруппыДоступа.ИзменилисьВидыИлиЗначенияДоступа(СтарыеЗначения, ЭтотОбъект)
	 Или ПометкаУдаления   <> СтарыеЗначения.ПометкаУдаления
	 Или НаличиеУчастников <> СтароеНаличиеУчастников Тогда
		
		РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра(Ссылка);
	КонецЕсли;
	
	Справочники.ПрофилиГруппДоступа.ОбновитьВспомогательныеДанныеПрофилейИзмененныхПриЗагрузке();
	Справочники.ГруппыДоступа.ОбновитьВспомогательныеДанныеГруппДоступаИзмененныхПриЗагрузке();
	Справочники.ГруппыДоступа.ОбновитьРолиПользователейИзмененныхПриЗагрузке();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДополнительныеСвойства.Свойство("ПроверенныеРеквизитыОбъекта") Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
			ПроверяемыеРеквизиты, ДополнительныеСвойства.ПроверенныеРеквизитыОбъекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьРолиПользователейПриИзмененииГруппыДоступа()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	Иначе
		СеансЗапущенБезРазделителей = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
		И Ссылка = Справочники.ГруппыДоступа.Администраторы
		И Не СеансЗапущенБезРазделителей
		И ДополнительныеСвойства.Свойство("ПарольПользователяСервиса") Тогда
		
		ПарольПользователяСервиса = ДополнительныеСвойства.ПарольПользователяСервиса;
	Иначе
		ПарольПользователяСервиса = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользователиДляОбновления =
		Справочники.ГруппыДоступа.ПользователиДляОбновленияРолей(СтарыеЗначения, ЭтотОбъект);
	
	Если Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		// Добавление пользователей, связанных с пользователямиИБ, имеющих роль ПолныеПрава.
		
		Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				
				НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту(
					"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				
				Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
					НайденныйПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту(
						"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НайденныйПользователь)
				   И ПользователиДляОбновления.Найти(НайденныйПользователь) = Неопределено Тогда
					
					ПользователиДляОбновления.Добавить(НайденныйПользователь);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеДоступом.ОбновитьРолиПользователей(ПользователиДляОбновления, ПарольПользователяСервиса);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
