#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СокращенноеНаименованиеКонфигурации = ИнтеграцияС1СДокументооборот.СокращенноеНаименованиеКонфигурации();
	Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		Элементы.ТипОбъектаПотребителя.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект %1'"), СокращенноеНаименованиеКонфигурации);
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Параметры.ТипОбъектаПотребителя) Тогда
		
		Объект.ТипОбъектаПотребителя = Параметры.ТипОбъектаПотребителя;
		Элементы.ТипОбъектаПотребителя.Доступность = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаПотребителя) Тогда 
		
		ОбъектПотребителя = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаПотребителя);
		Если ОбъектПотребителя <> Неопределено Тогда 
			ПредставлениеОбъектаПотребителя = ?(ОбъектПотребителя.Синоним = "",
				ОбъектПотребителя.Имя,
				ОбъектПотребителя.Синоним); 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота) Тогда 
		
		ОбъектДокументооборота = СписокОбъектовДокументооборота(Истина).НайтиПоЗначению(Объект.ТипОбъектаДокументооборота);
		Если ОбъектДокументооборота <> Неопределено Тогда 
			ПредставлениеОбъектаДокументооборота = ОбъектДокументооборота.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.УсловиеПрименимостиПриВыгрузке.Пометка = 
		Не ПустаяСтрока(Объект.УсловиеПрименимостиПриВыгрузке);
	Элементы.УсловиеПрименимостиПриЗагрузке.Пометка = 
		Не ПустаяСтрока(Объект.УсловиеПрименимостиПриЗагрузке);
	
	Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаПотребителя) Тогда 
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Объект конфигурации'"));
		Сообщение.Поле = "ПредставлениеОбъектаПотребителя";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаДокументооборота) Тогда 
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Объект 1С:Документооборота'"));
		Сообщение.Поле = "ПредставлениеОбъектаДокументооборота";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаПотребителя) Тогда 
		
		// Проверка заполнения реквизитов табличной части
		Для каждого Строка из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
			Если Строка.ОбязательноеЗаполнение 
				И Не (ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаПотребителя) 
				Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДокументооборота) 
				Или ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)
				Или Строка.ЗаполненВШаблоне
				) Тогда
				
				Отказ = Истина;
				
				Элементы.ПравилаЗаполненияРеквизитовПриВыгрузке.ТекущаяСтрока
					= Строка.ПолучитьИдентификатор();
				Элементы.ГруппаСтраницыПравил.ТекущаяСтраница
					= Элементы.ПриВыгрузке;
				Элементы.ГруппаСтраницы.ТекущаяСтраница
					= Элементы.ГруппаПравилаЗаполненияРеквизитов;
					
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = СтрШаблон(
					НСтр("ru = 'Не установлено обязательное правило заполнения для реквизита ""%1""'"),
					Строка.ПредставлениеРеквизитаОбъектаДокументооборота);
				Сообщение.Сообщить();
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
		Если ЗначениеЗаполнено(Строка.ВариантПравилаЗаполненияРеквизитов)
			И (ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаПотребителя) 
			Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДокументооборота)
			Или ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)
			Или Строка.ЗаполненВШаблоне) Тогда 
			
			НоваяСтрока = ТекущийОбъект.ПравилаЗаполненияРеквизитовПриВыгрузке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Очистить();
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Если Строка.Использовать Тогда
			НоваяСтрока = ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПравилаЗаполненияРеквизитовПриЗагрузке.Очистить();
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовПриЗагрузке Цикл
		Если ЗначениеЗаполнено(Строка.ВариантПравилаЗаполненияРеквизитов)
			И (ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаДокументооборота) 
			Или Строка.ДополнительныйРеквизитДокументооборота 
			Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаПотребителя)
			Или ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)) Тогда 
			
			НоваяСтрока = ТекущийОбъект.ПравилаЗаполненияРеквизитовПриЗагрузке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтаФорма);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот";
	 
	ОткрытьФорму(ИмяФормыПараметров,, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ОбработатьФормуСогласноВерсииСервиса();
		УстановитьДоступность();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПотребителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаПотребителяНачалоВыбораЗавершение", ЭтаФорма);
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекущаяСтрока", Объект.ТипОбъектаПотребителя);
	
	Результат = ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ВыборОбъектаМетаданных", 
		ПараметрФормы, ЭтаФорма ,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПотребителяНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ТипОбъектаПотребителя = Результат.Имя;
		ПредставлениеОбъектаПотребителя = Результат.Синоним;
		Модифицированность = Истина;
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПотребителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦИкла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ПредставлениеОбъектаПотребителя = ДанныеВыбора[0].Представление;
		Объект.ТипОбъектаПотребителя = ДанныеВыбора[0].Значение;
		СтандартнаяОбработка = Истина;
		Модифицированность = Истина;
		ЗаполнитьСписокПечатныхФорм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПотребителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданных Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦИкла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПотребителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокМетаданных.НайтиПоЗначению(ВыбранноеЗначение);
		ПредставлениеОбъектаПотребителя = ВыбранныйЭлемент.Представление;
		Объект.ТипОбъектаПотребителя = ВыбранныйЭлемент.Значение;
		Модифицированность = Истина;
		ЗаполнитьДанныеОбъектаПотребителя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДокументооборотаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДокументооборота = Объект.ТипОбъектаДокументооборота;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаДокументооборотаНачалоВыбораЗавершение", 
		ЭтаФорма, НачальныйТипОбъектаДокументооборота);
		
	ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДокументооборотаНачалоВыбораЗавершение(ВыбранноеЗначение, НачальныйТипОбъектаДокументооборота) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ТипОбъектаДокументооборота = ВыбранноеЗначение.Значение;
	ПредставлениеОбъектаДокументооборота = ВыбранноеЗначение.Представление;
	
	Если НачальныйТипОбъектаДокументооборота <> Объект.ТипОбъектаДокументооборота Тогда 
		Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДокументооборотаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦИкла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДокументооборотаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	СписокВыбора = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты);
	НачальныйТипОбъектаДокументооборота = Объект.ТипОбъектаДокументооборота;
	
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если Найти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) <> 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦИкла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		
		ВыбранноеЗначение = ДанныеВыбора[0];
		
		Объект.ТипОбъектаДокументооборота = ВыбранноеЗначение.Значение;
		ПредставлениеОбъектаДокументооборота = ВыбранноеЗначение.Представление;
		
		Если НачальныйТипОбъектаДокументооборота <> Объект.ТипОбъектаДокументооборота Тогда 
			Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
			ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДокументооборотаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДокументооборота = Объект.ТипОбъектаДокументооборота;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокОбъектовДокументооборота(ДоступенФункционалКонтрагенты).НайтиПоЗначению(ВыбранноеЗначение);
		Объект.ТипОбъектаДокументооборота = ВыбранныйЭлемент.Значение;
		ПредставлениеОбъектаДокументооборота = ВыбранныйЭлемент.Представление;
		Если НачальныйТипОбъектаДокументооборота <> Объект.ТипОбъектаДокументооборота Тогда
			Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
			ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", Объект.ТипОбъектаДокументооборота + "Template");
	Если ЗначениеЗаполнено(Объект.ШаблонID) Тогда
		ПараметрыФормы.Вставить("ВыбранныйЭлемент", Объект.ШаблонID);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ШаблонЗавершениеВыбора", ЭтаФорма, Неопределено);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, ЭтаФорма,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЗавершениеВыбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Шаблон = Результат.РеквизитПредставление;
	Объект.ШаблонТип = Результат.РеквизитТип;
	Объект.ШаблонID = Результат.РеквизитID;
	
	ОбновитьРеквизитыШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Шаблон = "";
	Объект.ШаблонТип = "";
	Объект.ШаблонID = "";
	
	ОбновитьРеквизитыШаблона();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовПриВыгрузке

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриВыгрузкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриВыгрузкеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовПриВыгрузке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДокументооборота");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДокументооборота");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаДокументооборота");
	ПараметрыФормы.Вставить("ВариантПравилаЗаполненияРеквизитов");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаПотребителя");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаДокументооборота");
	ПараметрыФормы.Вставить("ИдентификаторЗначенияРеквизита");
	ПараметрыФормы.Вставить("ТипЗначенияРеквизита");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитОбъекта");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитОбъектаСвойство");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДокументооборотаID");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДокументооборотаТип");
	ПараметрыФормы.Вставить("ОбновлятьЗначение");
	ПараметрыФормы.Вставить("Ключевой");
	ПараметрыФормы.Вставить("ЗаполненВШаблоне");
	ПараметрыФормы.Вставить("ШаблонЗначение");
	ПараметрыФормы.Вставить("ШаблонИдентификатор");
	ПараметрыФормы.Вставить("ШаблонТип");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ПараметрыФормы.Вставить("ТипОбъектаПотребителя", Объект.ТипОбъектаПотребителя);
	ПараметрыФормы.Вставить("ШаблонЗапрещаетИзменение", Объект.ШаблонЗапрещаетИзменение);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовПриВыгрузкеПередНачаломИзмененияЗавершение",
		ЭтаФорма,
		ТекущиеДанные);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаВыгрузки", 
		ПараметрыФормы,
		ЭтаФорма,
		ПараметрыФормы.ИмяРеквизитаОбъектаДокументооборота,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриВыгрузкеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовПриВыгрузке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ШаблонЗапрещаетИзменение
		И ТекущиеДанные.ЗаполненВШаблоне Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный шаблон запрещает изменение реквизитов.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИмяРеквизитаОбъектаДокументооборота = "documentType"
		И ТекущиеДанные.ЗаполненВШаблоне Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вид документа указан в шаблоне и не может быть изменен.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовПриВыгрузкеПередУдалениемЗавершение", ЭтаФорма, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения реквизита?'");
	ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединяемыеПечатныеФормы

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыИспользоватьПриИзменении(Элемент)
	
	ОбновитьЗаголовокПечатныхФорм();
	
	Элементы.ПрисоединяемыеПечатныеФормы.ТекущиеДанные.ОбновлятьЗначение =
		Элементы.ПрисоединяемыеПечатныеФормы.ТекущиеДанные.Использовать
		И ДоступенФункционалСинхронизация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовПриЗагрузке

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриЗагрузкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриЗагрузкеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовПриЗагрузке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъектаДокументооборота = Новый Массив;
	Для каждого Строка Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
	
		ДанныеРеквизита = Новый Структура("Имя, Тип, Представление",
			Строка.ИмяРеквизитаОбъектаДокументооборота,
			Строка.ТипРеквизитаОбъектаДокументооборота,
			Строка.ПредставлениеРеквизитаОбъектаДокументооборота);
		ДанныеРеквизита.Вставить("ДополнительныйРеквизитДокументооборота", Строка.ДополнительныйРеквизитДокументооборота);
		ДанныеРеквизита.Вставить("ДополнительныйРеквизитДокументооборотаID", Строка.ДополнительныйРеквизитДокументооборотаID);
		ДанныеРеквизита.Вставить("ДополнительныйРеквизитДокументооборотаТип", Строка.ДополнительныйРеквизитДокументооборотаТип);
			
		РеквизитыОбъектаДокументооборота.Добавить(ДанныеРеквизита);
	
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПравилаЗаполненияРеквизитов");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаПотребителя");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаПотребителя");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДокументооборота");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДокументооборота");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаПотребителя");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("ОбновлятьЗначение");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДокументооборота");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДокументооборотаID");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДокументооборотаТип");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитОбъекта");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитОбъектаСвойство");
	ПараметрыФормы.Вставить("Ключевой");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ПараметрыФормы.Вставить("РеквизитыОбъектаДокументооборота", Новый ФиксированныйМассив(РеквизитыОбъектаДокументооборота));
	ПараметрыФормы.Вставить("ТипОбъектаДокументооборота", Объект.ТипОбъектаДокументооборота);
	
	Оповещение = Новый ОписаниеОповещения("ПравилаЗаполненияРеквизитовПриЗагрузкеПередНачаломИзмененияЗавершение", ЭтаФорма, ТекущиеДанные);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаПравилаЗагрузки", 
		ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриЗагрузкеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовПриЗагрузке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовПриЗагрузкеПередУдалениемЗавершение", ЭтаФорма, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения реквизита?'");
	ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриВыгрузке(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл 
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение) 
			Или ЗначениеЗаполнено(Строка.ИдентификаторЗначенияРеквизита) 
			Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаПотребителя) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюПриВыгрузкеЗавершение", ЭтаФорма);
		ТекстВопроса = НСтр("ru='Правила заполнения для реквизитов будут заменены 
								|на правила заполнения по умолчанию. Продолжить?'");
		ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриЗагрузке(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовПриЗагрузке Цикл 
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение) 
			Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаПотребителя) 
			Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаДокументооборота) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюПриЗагрузкеЗавершение", ЭтаФорма);
		ТекстВопроса = НСтр("ru='Правила заполнения для реквизитов будут заменены 
								|на правила заполнения по умолчанию. Продолжить?'");
		ИнтеграцияС1СДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриЗагрузке(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВычисляемоеВыражение", Объект.УсловиеПрименимостиПриЗагрузке);
	ПараметрыФормы.Вставить("ТипВыражения", "УсловиеПрименимостиПриЗагрузке");
	ПараметрыФормы.Вставить("ТипОбъектаДокументооборота", Объект.ТипОбъектаДокументооборота);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УсловиеПрименимостиПриЗагрузкеЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ВыражениеНаВстроенномЯзыке",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриЗагрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 
		Объект.УсловиеПрименимостиПриЗагрузке = Результат;
		Элементы.УсловиеПрименимостиПриЗагрузке.Пометка = 
			Не ПустаяСтрока(Объект.УсловиеПрименимостиПриЗагрузке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриВыгрузке(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВычисляемоеВыражение", Объект.УсловиеПрименимостиПриВыгрузке);
	ПараметрыФормы.Вставить("ТипВыражения", "УсловиеПрименимостиПриВыгрузке");
	ПараметрыФормы.Вставить("ТипОбъектаПотребителя", Объект.ТипОбъектаПотребителя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УсловиеПрименимостиПриВыгрузкеЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ВыражениеНаВстроенномЯзыке",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура УсловиеПрименимостиПриВыгрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 
		Объект.УсловиеПрименимостиПриВыгрузке = Результат;
		Элементы.УсловиеПрименимостиПриВыгрузке.Пометка = 
			Не ПустаяСтрока(Объект.УсловиеПрименимостиПриВыгрузке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтаФорма, Неопределено);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения, ЭтаФорма, "ПроверитьПодключение");
	
КонецПроцедуры

// Вызывается после проверки подключения к ДО и изменяет форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	ОбработатьФормуСогласноВерсииСервиса();
	УстановитьДоступность();
	ОбновитьЗаголовокПечатныхФорм();

КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Процедура ОбработатьФормуСогласноВерсииСервиса()
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	
	Если ПустаяСтрока(ВерсияСервиса) Тогда // идет подключение
		
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаОжидаетсяПодключение;
			Элементы.СтраницаОжидаетсяПодключение.Видимость = Истина;
		
	Иначе // версия известна
		
		Если ВерсияСервиса = "0.0.0.0" Тогда
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
			Элементы.СтраницаОжидаетсяПодключение.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
			
			ДоступенФункционалСинхронизация = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP");
			ДоступенФункционалКонтрагенты = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3", Истина);
			ДоступенФункционалШаблоны = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1", Истина);
			ДоступенФункционалАвтоСозданиеСвязей = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1", Истина);
			
			Если Не ДоступенФункционалСинхронизация Тогда
				Элементы.ПравилаЗаполненияРеквизитовОбновлятьЗначение.Видимость = Ложь;
				Элементы.ПрисоединяемыеПечатныеФормыОбновлятьЗначение.Видимость = Ложь;
				Элементы.ПравилаЗаполненияРеквизитовПриЗагрузкеОбновлятьЗначение.Видимость = Ложь;
			КонецЕсли;
			
			Если Не ДоступенФункционалШаблоны Тогда
				Элементы.Шаблон.Видимость = Ложь;
			ИначеЕсли Объект.ТипОбъектаДокументооборота = "DMCorrespondent" Тогда
				Элементы.Шаблон.Доступность = Ложь;
			КонецЕсли;
			
			Элементы.НеСоздаватьСвязиПоСсылкам.Видимость = ДоступенФункционалАвтоСозданиеСвязей;
			
			ЗаполнитьСписокВыбораОбъектовКонфигурации();
			ЗаполнитьРеквизитыДокументооборота();
			ЗаполнитьСписокПечатныхФорм();
			ЗаполнитьРеквизитыПотребителя();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриВыгрузкеПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВариантПравилаЗаполненияРеквизитов = 
		ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	ТекущиеДанные.ИмяРеквизитаОбъектаПотребителя = Неопределено;
	ТекущиеДанные.ЗначениеРеквизитаДокументооборота = Неопределено;
	ТекущиеДанные.ИдентификаторЗначенияРеквизита = Неопределено;
	ТекущиеДанные.ТипЗначенияРеквизита = Неопределено;
	ТекущиеДанные.ВычисляемоеВыражение = Неопределено;
	ТекущиеДанные.ЗаполненВШаблоне = Ложь;
	ТекущиеДанные.ШаблонЗначение = Неопределено;
	ТекущиеДанные.ШаблонИдентификатор = Неопределено;
	ТекущиеДанные.ШаблонТип = Неопределено;
	ТекущиеДанные.ШаблонПредставление = Неопределено;
	ТекущиеДанные.ДополнительныйРеквизитДокументооборота = Неопределено;
	ТекущиеДанные.ДополнительныйРеквизитДокументооборотаID = Неопределено;
	ТекущиеДанные.ДополнительныйРеквизитДокументооборотаТип = Неопределено;
	ТекущиеДанные.Ключевой = Ложь;
	ТекущиеДанные.ОбновлятьЗначение = Ложь;
	ТекущиеДанные.Картинка = 0;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриВыгрузкеПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
		
		Если ТекущиеДанные.ИмяРеквизитаОбъектаДокументооборота = "documentType" Тогда
			
			Если (ТекущиеДанные.ВариантПравилаЗаполненияРеквизитов = ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение")
			 		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторЗначенияРеквизита))
				Или (ТекущиеДанные.ВариантПравилаЗаполненияРеквизитов = ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона")
			 		И ЗначениеЗаполнено(ТекущиеДанные.ШаблонИдентификатор)) Тогда 
			 
				ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовПриВыгрузке); 
				ЗаполнитьРеквизитыДокументооборота(); 
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриЗагрузкеПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовПриЗагрузкеПередУдалениемЗавершение(Результат, ПараметрыОповещения) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ПараметрыОповещения;
	
	ТекущиеДанные.ВариантПравилаЗаполненияРеквизитов = 
		ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	ТекущиеДанные.ИмяРеквизитаОбъектаДокументооборота = Неопределено;
	ТекущиеДанные.ПредставлениеРеквизитаОбъектаДокументооборота = Неопределено;
	ТекущиеДанные.ЗначениеРеквизитаПотребителя = Неопределено;
	ТекущиеДанные.ВычисляемоеВыражение = Неопределено;
	ТекущиеДанные.Ключевой = Ложь;
	ТекущиеДанные.ОбновлятьЗначение = Ложь;
	ТекущиеДанные.Картинка = 0;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриВыгрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюПриЗагрузкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.ЗаполнитьПоУмолчанию.Доступность = 
		ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота);
	Элементы.КонтекстноеМенюЗаполнитьПоУмолчанию.Доступность = 
		ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота);
	Элементы.Шаблон.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота)
		И (Объект.ТипОбъектаДокументооборота <> "DMCorrespondent");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПечатныхФорм()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипФайловСохраненияПечатныхФорм) Тогда
		Объект.ТипФайловСохраненияПечатныхФорм = Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов.PDF;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаПотребителя) Тогда 

		Элементы.ПрисоединяемыеПечатныеФормы.Доступность = Истина;

		ПрисоединяемыеПечатныеФормы.Очистить();
		
		ТаблицаПечатныхФорм = ИнтеграцияС1СДокументооборот.МенеджерыПечати(Объект.ТипОбъектаПотребителя);
		
		Для каждого Стр из ТаблицаПечатныхФорм Цикл
			СтрППФ = ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрППФ,Стр);
			СтрокиПечатнойФормы = Объект.ПрисоединяемыеПечатныеФормы.НайтиСтроки(
				новый Структура("ИмяКоманды, МенеджерПечати",СтрППФ.ИмяКоманды,СтрППФ.МенеджерПечати));
			Если СтрокиПечатнойФормы.Количество() > 0 Тогда
				СтрППФ.Использовать = Истина;
				СтрППФ.ОбновлятьЗначение = СтрокиПечатнойФормы[0].ОбновлятьЗначение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОбъектовДокументооборота(Контрагенты)

	Список = Новый СписокЗначений;
	
	Список.Добавить("DMIncomingDocument", НСтр("ru = 'Входящий документ'"));
	Список.Добавить("DMOutgoingDocument", НСтр("ru = 'Исходящий документ'"));
	Список.Добавить("DMInternalDocument", НСтр("ru = 'Внутренний документ'"));
	Если Контрагенты Тогда
		#Если Клиент Тогда
		ИспользоватьТерминКорреспонденты = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты();
		#Иначе
		ИспользоватьТерминКорреспонденты = ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты();
		#КонецЕсли
		Если ИспользоватьТерминКорреспонденты Тогда
			Список.Добавить("DMCorrespondent",    НСтр("ru = 'Корреспондент'"));
		Иначе
			Список.Добавить("DMCorrespondent",    НСтр("ru = 'Контрагент'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список;

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДокументооборота(ПриВыбореШаблона = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота) Тогда 
		ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
		
	Иначе
		
		РеквизитыШаблона = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
			ПолучитьРеквизитыШаблонаДокумента(Объект.ШаблонТип, Объект.ШаблонID, Объект.ШаблонЗапрещаетИзменение);
		Если РеквизитыШаблона = Неопределено Тогда
			Объект.Шаблон = "";
			Объект.ШаблонТип = "";
			Объект.ШаблонID = "";
			Модифицированность = Истина;
		КонецЕсли;
		
		ПараметрыЗаполнения = Неопределено;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", "documentType");
		ПараметрыОтбора.Вставить("ВариантПравилаЗаполненияРеквизитов", Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение);
		ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота", Ложь);
		
		// Вид документа может быть указан явно.
		СтрокиВидДокумента = Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВидДокумента.Количество() > 0 Тогда 
			
			СтрокаВидДокумента = СтрокиВидДокумента[0];
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("documentType",
				Новый Структура("id, type, name", 
				СтрокаВидДокумента.ИдентификаторЗначенияРеквизита,
				СтрокаВидДокумента.ТипЗначенияРеквизита,
				СтрокаВидДокумента.ЗначениеРеквизитаДокументооборота));
				
		ИначеЕсли РеквизитыШаблона <> Неопределено Тогда // Вид документа может быть указан и только в шаблоне.
				
			ПараметрыОтбора.Удалить("ВариантПравилаЗаполненияРеквизитов");
			СтрокиВидДокумента = РеквизитыШаблона.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиВидДокумента.Количество() > 0 Тогда 
				
				СтрокаВидДокумента = СтрокиВидДокумента[0];
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("documentType",
					Новый Структура("id, type, name", 
					СтрокаВидДокумента.ШаблонИдентификатор,
					СтрокаВидДокумента.ШаблонТип,
					СтрокаВидДокумента.ШаблонЗначение));
				
			КонецЕсли;
				
		КонецЕсли;
			
		Реквизиты = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
			ПолучитьРеквизитыОбъектаДокументооборота(Объект.ТипОбъектаДокументооборота, ПараметрыЗаполнения);
			
		ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
		Для Каждого Строка Из Реквизиты Цикл
			
			НоваяСтрока = ПравилаЗаполненияРеквизитовПриВыгрузке.Добавить();
			НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота = Строка.Имя;
			НоваяСтрока.ПредставлениеРеквизитаОбъектаДокументооборота = Строка.Представление;
			НоваяСтрока.ТипРеквизитаОбъектаДокументооборота = Строка.Тип;
			НоваяСтрока.ДополнительныйРеквизитДокументооборота = Строка.ДопРеквизит;
			НоваяСтрока.ДополнительныйРеквизитДокументооборотаID = Строка.ДопРеквизитID;
			НоваяСтрока.ДополнительныйРеквизитДокументооборотаТип = Строка.ДопРеквизитТип;
			НоваяСтрока.ОбязательноеЗаполнение = Строка.ОбязательноеЗаполнение;
			
			Если Строка.Имя = "documentType" Тогда
				НоваяСтрока.Ключевой = Истина;
			КонецЕсли;
			
			// Найдем подходящую строку в табличной части.
			СтруктураОтбора = Новый Структура("ДополнительныйРеквизитДокументооборота", Строка.ДопРеквизит);
			Если Строка.ДопРеквизит Тогда 
				СтруктураОтбора.Вставить("ДополнительныйРеквизитДокументооборотаID", Строка.ДопРеквизитID);
			Иначе
				СтруктураОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", Строка.Имя);
			КонецЕсли;
			
			НайденныеСтроки = Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			КонецЕсли;
			
			// Найдем подходящую строку среди заполненных реквизитов шаблона.
			Если РеквизитыШаблона <> Неопределено Тогда
				
				НайденныеСтроки = РеквизитыШаблона.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда // заполнен в шаблоне
					
					НоваяСтрока.ЗаполненВШаблоне = Истина;
					НоваяСтрока.ШаблонЗначение = НайденныеСтроки[0].ШаблонЗначение;
					НоваяСтрока.ШаблонИдентификатор = НайденныеСтроки[0].ШаблонИдентификатор;
					НоваяСтрока.ШаблонТип = НайденныеСтроки[0].ШаблонТип;
					НоваяСтрока.ШаблонПредставление = НоваяСтрока.ШаблонЗначение;
					НоваяСтрока.ОбновлятьЗначение = НоваяСтрока.ОбновлятьЗначение
						И Не Объект.ШаблонЗапрещаетИзменение;
						
					Если ПриВыбореШаблона 
						И НоваяСтрока.ВариантПравилаЗаполненияРеквизитов
							<> Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
						
						НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
						НоваяСтрока.Картинка = 5;
						НоваяСтрока.ЗначениеРеквизитаДокументооборота = Неопределено;
						НоваяСтрока.ИдентификаторЗначенияРеквизита = Неопределено;
						НоваяСтрока.ИмяРеквизитаОбъектаПотребителя = Неопределено;
						
					Иначе
						
						Если НоваяСтрока.ВариантПравилаЗаполненияРеквизитов =
							Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда // предупредим о конфликте
							
							Если (ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗначенияРеквизита)
								И (НоваяСтрока.ИдентификаторЗначенияРеквизита <> НоваяСтрока.ШаблонИдентификатор))
								Или (Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗначенияРеквизита)
								И (НоваяСтрока.ЗначениеРеквизитаДокументооборота <> НоваяСтрока.ШаблонЗначение)) Тогда
								
								НоваяСтрока.Картинка = 4;
								НоваяСтрока.ШаблонПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'шаблон: %1'"),
									НоваяСтрока.ШаблонЗначение);
								
							Иначе
								
								НоваяСтрока.ШаблонПредставление = "";
								
							КонецЕсли;
								
						ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.ВариантПравилаЗаполненияРеквизитов) Тогда
							
							НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
							
						ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов <> Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда 
							
							НоваяСтрока.ШаблонПредставление = "";
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
					
					НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка();
					НоваяСтрока.ЗаполненВШаблоне = Ложь;
					НоваяСтрока.ШаблонПредставление = "";
					
				КонецЕсли;
				
			ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
				
				НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка();
				НоваяСтрока.ЗаполненВШаблоне = Ложь;
				НоваяСтрока.ШаблонПредставление = "";
				
			КонецЕсли;
			
			// Установим картинку согласно варианту, если она не была установлена ранее.
			Если Не ЗначениеЗаполнено(НоваяСтрока.Картинка) Тогда
				Если НоваяСтрока.ВариантПравилаЗаполненияРеквизитов 
					= Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
					НоваяСтрока.Картинка = 1;
				ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов 
					= Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
					НоваяСтрока.Картинка = 2;
				ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов
					= Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
					НоваяСтрока.Картинка = 3;
				ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов
					= Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
					НоваяСтрока.Картинка = 5;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыШаблона()
	
	ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовПриВыгрузке); 
	ЗаполнитьРеквизитыДокументооборота(Истина); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПотребителя()
	
	ПравилаЗаполненияРеквизитовПриЗагрузке.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаПотребителя) Тогда 
		Возврат;
	КонецЕсли;
	
	Реквизиты = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
			ПолучитьРеквизитыОбъектаПотребителя(Объект.ТипОбъектаПотребителя);
			
	Состояния = Справочники.ПравилаИнтеграцииС1СДокументооборотом.ВозможныеСостоянияОбъектаДокументооборота();
			
	Для каждого Строка  Из Реквизиты Цикл
		
		НоваяСтрока = ПравилаЗаполненияРеквизитовПриЗагрузке.Добавить();
		НоваяСтрока.ИмяРеквизитаОбъектаПотребителя = Строка.Имя;
		НоваяСтрока.ПредставлениеРеквизитаОбъектаПотребителя = Строка.Представление;
		НоваяСтрока.ТипРеквизитаОбъектаПотребителя = Строка.Тип;
		НоваяСтрока.ДополнительныйРеквизитОбъекта = Строка.ДополнительныйРеквизитОбъекта;
		НоваяСтрока.ДополнительныйРеквизитОбъектаСвойство = Строка.ДополнительныйРеквизитОбъектаСвойство;
		
		ПараметрыОтбора = Новый Структура("ИмяРеквизитаОбъектаПотребителя", Строка.Имя);
		
		НайденныеСтроки = Объект.ПравилаЗаполненияРеквизитовПриЗагрузке.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
		КонецЕсли;
		
		
		НоваяСтрока.ДополнительныйРеквизитОбъекта = Строка.ДополнительныйРеквизитОбъекта;
		НоваяСтрока.ДополнительныйРеквизитОбъектаСвойство = Строка.ДополнительныйРеквизитОбъектаСвойство;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота) И Не НоваяСТрока.ДополнительныйРеквизитДокументооборота Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота);
			НайденныеСтроки = ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.ПредставлениеРеквизитаОбъектаДокументооборота =
					НайденныеСтроки[0].ПредставлениеРеквизитаОбъектаДокументооборота;
			КонецЕсли; 
		ИначеЕсли НоваяСТрока.ДополнительныйРеквизитДокументооборота Тогда
		    ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборотаID", НоваяСтрока.ДополнительныйРеквизитДокументооборотаID);
			НайденныеСтроки = ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.ПредставлениеРеквизитаОбъектаДокументооборота =
					НайденныеСтроки[0].ПредставлениеРеквизитаОбъектаДокументооборота;
			КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Имя", НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота);
		НайденныеСтроки = Состояния.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ПредставлениеРеквизитаОбъектаДокументооборота = НайденныеСтроки[0].Представление;
		КонецЕсли;
		
		Если НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = 
			Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
			НоваяСтрока.Картинка = 1;
		ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = 
			Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
			НоваяСтрока.Картинка = 2;
		ИначеЕсли НоваяСтрока.ВариантПравилаЗаполненияРеквизитов = 
			Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
			НоваяСтрока.Картинка = 3;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовПриВыгрузке)
	
	Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.Очистить();
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
		
		Если (Строка.ВариантПравилаЗаполненияРеквизитов
				= ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта")
				И ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаПотребителя))
			Или (Строка.ВариантПравилаЗаполненияРеквизитов
				= ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение")
				И ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДокументооборота))
			Или (Строка.ВариантПравилаЗаполненияРеквизитов
				= ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке")
				И ЗначениеЗаполнено(Строка.ВычисляемоеВыражение))
			Или (Строка.ВариантПравилаЗаполненияРеквизитов
				= ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона")
				И Строка.ЗаполненВШаблоне) Тогда 
			
			НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовПриВыгрузке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовКонфигурации()
	
	Типы = ИнтеграцияС1СДокументооборотПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		СписокМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя(), 
			?(ОбъектМетаданных.Синоним = "", ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним));
	КонецЦикла;
		
	СписокМетаданных.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюПриВыгрузкеНаСервере(НачальноеЗаполнение = Ложь)
	
	// Сбросим шаблон при несоответствии его типа типу объекта
	Если СтрНайти(Объект.ТипОбъектаДокументооборота, Объект.ШаблонТип) = 0 Тогда
		Объект.Шаблон = "";
		Объект.ШаблонID = "";
		Объект.ШаблонТип = "";
		Объект.ШаблонЗапрещаетИзменение = Ложь;
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		ЗаполнитьРеквизитыДокументооборота();
		ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(Истина);
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	// Заполнение вида документа и реквизитов по умолчанию.
	СтрокиВидаДокумента = ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(
		Новый Структура("ИмяРеквизитаОбъектаДокументооборота", "documentType"));
	Если СтрокиВидаДокумента.Количество() > 0 Тогда
		СтрокаПравил = СтрокиВидаДокумента[0];
		СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
		
		Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "name";
		Условие.value = ПредставлениеОбъектаПотребителя;
		СписокУсловий.conditions.Добавить(Условие);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
		Запрос.type = Объект.ТипОбъектаДокументооборота + "Type";
		Запрос.query = СписокУсловий;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Если Результат.items.Количество() = 1 И Не ЗначениеЗаполнено(СтрокаПравил.ТипЗначенияРеквизита) Тогда
			ЭлементДляЗаполнения = Результат.items[0].object;
			ОчиститьСтрокуПравилЗаполненияПриВыгрузке(СтрокаПравил);
			СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
			СтрокаПравил.ЗначениеРеквизитаДокументооборота = ЭлементДляЗаполнения.name;
			СтрокаПравил.ИдентификаторЗначенияРеквизита = ЭлементДляЗаполнения.objectId.id;
			СтрокаПравил.ТипЗначенияРеквизита = ЭлементДляЗаполнения.objectId.type;
			СтрокаПравил.Картинка = 2;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПравил.ТипЗначенияРеквизита) И ДоступенФункционалКонтрагенты Тогда
			ЗапросЗначенийРеквизитов = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDefaultValuesByDocumentTypeRequest");
			ВидXDTO = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
				СтрокаПравил.ИдентификаторЗначенияРеквизита,СтрокаПравил.ТипЗначенияРеквизита);
			ЗапросЗначенийРеквизитов.documentTypeId = ВидXDTO;
			Результат = Прокси.execute(ЗапросЗначенийРеквизитов);
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			
			Для Каждого СтрокаПравил Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
				Если ЗначениеЗаполнено(СтрокаПравил.ИмяРеквизитаОбъектаДокументооборота) Тогда
					ТекущееСвойство = Результат.object[СтрокаПравил.ИмяРеквизитаОбъектаДокументооборота];
					Если ТекущееСвойство <> Неопределено Тогда
						СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
						СтрокаПравил.Картинка = 2;
						Если ТипЗнч(ТекущееСвойство) = Тип("Строка") 
							Или ТипЗнч(ТекущееСвойство) = Тип("Число") 
							Или ТипЗнч(ТекущееСвойство) = Тип("Дата") 
							Или ТипЗнч(ТекущееСвойство) = Тип("Булево") Тогда
							СтрокаПравил.ЗначениеРеквизитаДокументооборота = ТекущееСвойство;
						Иначе
							СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
							СтрокаПравил.ЗначениеРеквизитаДокументооборота = ТекущееСвойство.name;
							СтрокаПравил.ИдентификаторЗначенияРеквизита = ТекущееСвойство.objectId.id;
							СтрокаПравил.ТипЗначенияРеквизита = ТекущееСвойство.objectId.type;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
		ЗаполнитьПравилаЗаполненияПриВыгрузкеОбъекта(Объект, ПравилаЗаполненияРеквизитовПриВыгрузке);
		ЗаполнитьРеквизитыДокументооборота();
		ЭтаФорма.Модифицированность = Истина;
			
	КонецЕсли;
	
	// Заполнение правил по умолчанию
	ПравилаЗаполнения = Новый Соответствие;
	
	Если Найти(Объект.ТипОбъектаПотребителя, "Справочник.") <> 0 Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаПотребителя);
		Если МетаданныеИсточника <> Неопределено Тогда 
			Если МетаданныеИсточника.ДлинаНаименования <> 0 Тогда
				ПравилаЗаполнения.Вставить("title", "Наименование");
				ПравилаЗаполнения.Вставить("name", "Наименование");
			КонецЕсли;
			Если МетаданныеИсточника.ДлинаКода <> 0 Тогда
				ПравилаЗаполнения.Вставить("regNumber", "Код");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(Объект.ТипОбъектаПотребителя, "Документ.") <> 0 Тогда
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Объект.ТипОбъектаПотребителя);
		Если МетаданныеИсточника <> Неопределено Тогда 
			ПравилаЗаполнения.Вставить("title", "Представление");
			ПравилаЗаполнения.Вставить("regDate", "Дата");
			Если МетаданныеИсточника.ДлинаНомера <> 0 Тогда
				ПравилаЗаполнения.Вставить("regNumber", "Номер");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.УстановитьПравилаЗаполненияПриВыгрузкеПоУмолчанию(
		ПравилаЗаполнения, Объект.ТипОбъектаДокументооборота, Объект.ТипОбъектаПотребителя);
	
	Для Каждого СтрокаПравил Из ПравилаЗаполненияРеквизитовПриВыгрузке Цикл
		ЗначениеЗаполнения = ПравилаЗаполнения.Получить(СтрокаПравил.ИмяРеквизитаОбъектаДокументооборота);
		Если Не ПустаяСтрока(ЗначениеЗаполнения) Тогда
			ОчиститьСтрокуПравилЗаполненияПриВыгрузке(СтрокаПравил);
			СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
			СтрокаПравил.ИмяРеквизитаОбъектаПотребителя = ЗначениеЗаполнения;
			СтрокаПравил.ОбновлятьЗначение = ДоступенФункционалСинхронизация;
			СтрокаПравил.Картинка = 1;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение грифа доступа
	СтрокиГрифаДоступа = ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(Новый Структура("ИмяРеквизитаОбъектаДокументооборота", "accessLevel"));
	
	Если СтрокиГрифаДоступа.Количество() > 0 И Не ЗначениеЗаполнено(СтрокиГрифаДоступа[0].ЗначениеРеквизитаДокументооборота) Тогда
		СтрокаПравил = СтрокиГрифаДоступа[0];
		
		СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
		Запрос.type = "DMAccessLevel";
		Запрос.query = СписокУсловий;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		Если Результат.items.Количество() = 1 Тогда
			ЭлементДляЗаполнения = Результат.items[0].object;
			ОчиститьСтрокуПравилЗаполненияПриВыгрузке(СтрокаПравил);
			СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
			СтрокаПравил.ЗначениеРеквизитаДокументооборота = ЭлементДляЗаполнения.name;
			СтрокаПравил.ИдентификаторЗначенияРеквизита = ЭлементДляЗаполнения.objectId.id;
			СтрокаПравил.ТипЗначенияРеквизита = ЭлементДляЗаполнения.objectId.type;
			СтрокаПравил.Картинка = 2;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюПриЗагрузкеНаСервере(НачальноеЗаполнение = Ложь)
	
	Если НачальноеЗаполнение Тогда
		ЗаполнитьРеквизитыПотребителя();
		ЗаполнитьСписокПечатныхФорм();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипОбъектаДокументооборота) Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполнение правил по умолчанию
	ПравилаЗаполнения = Новый Соответствие;
	
	Если Найти(Объект.ТипОбъектаПотребителя, "Справочник.") <> 0 Тогда
		ПравилаЗаполнения.Вставить("Наименование","title");
		ПравилаЗаполнения.Вставить("Код","regNumber");
	ИначеЕсли Найти(Объект.ТипОбъектаПотребителя, "Документ.") <> 0 Тогда
		ПравилаЗаполнения.Вставить("Номер","regNumber");
		ПравилаЗаполнения.Вставить("Дата","regDate");
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.УстановитьПравилаЗаполненияПриЗагрузкеПоУмолчанию(
		ПравилаЗаполнения, Объект.ТипОбъектаПотребителя, Объект.ТипОбъектаДокументооборота);
		
	СтруктураСостояний = Новый Структура;
	СтруктураСостояний.Вставить("statusRegistration", НСтр("ru = 'Состояние регистрации'"));
	СтруктураСостояний.Вставить("statusConsideration", НСтр("ru = 'Состояние рассмотрения'"));
	СтруктураСостояний.Вставить("statusApproval", НСтр("ru = 'Состояние согласования'"));
	СтруктураСостояний.Вставить("statusConfirmation", НСтр("ru = 'Состояние утверждения'"));
	СтруктураСостояний.Вставить("statusPerformance", НСтр("ru = 'Состояние исполнения'"));
	
	Для Каждого СтрокаПравил Из ПравилаЗаполненияРеквизитовПриЗагрузке Цикл
		
		ОчиститьСтрокуПравилЗаполненияПриЗагрузке(СтрокаПравил);
		ЗначениеЗаполнения = ПравилаЗаполнения.Получить(СтрокаПравил.ИмяРеквизитаОбъектаПотребителя);
		Если Не ПустаяСтрока(ЗначениеЗаполнения) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИмяРеквизитаОбъектаДокументооборота", ЗначениеЗаполнения);
			СтрокиРеквизита = ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(Отбор);
			
			Если СтрокиРеквизита.Количество() > 0
				Или СтруктураСостояний.Свойство(ЗначениеЗаполнения) Тогда
				
				Если СтрокиРеквизита.Количество() > 0 Тогда
					СтрокаПравил.ПредставлениеРеквизитаОбъектаДокументооборота = 
						СтрокиРеквизита[0].ПредставлениеРеквизитаОбъектаДокументооборота;
				Иначе
					СтрокаПравил.ПредставлениеРеквизитаОбъектаДокументооборота = 
						СтруктураСостояний[ЗначениеЗаполнения];
					КонецЕсли;
					
				СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = 
					Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
				СтрокаПравил.ИмяРеквизитаОбъектаДокументооборота = 
					ЗначениеЗаполнения;
				СтрокаПравил.Картинка = 1;
				СтрокаПравил.ОбновлятьЗначение = Истина;
				
				Модифицированность = Истина;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере 
Процедура ОчиститьСтрокуПравилЗаполненияПриВыгрузке(СтрокаПравил)
	
	СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Неопределено;
	СтрокаПравил.ЗначениеРеквизитаДокументооборота = Неопределено;
	СтрокаПравил.ИдентификаторЗначенияРеквизита = Неопределено;
	СтрокаПравил.ТипЗначенияРеквизита = Неопределено;
	СтрокаПравил.Картинка = Неопределено;
	СтрокаПравил.ИмяРеквизитаОбъектаПотребителя = Неопределено;
	СтрокаПравил.ВычисляемоеВыражение = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборота = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборотаID = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборотаТип = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитОбъекта = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитОбъектаСвойство = Неопределено;
	СтрокаПравил.ОбновлятьЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере 
Процедура ОчиститьСтрокуПравилЗаполненияПриЗагрузке(СтрокаПравил)
	
	СтрокаПравил.ВариантПравилаЗаполненияРеквизитов = Неопределено;
	СтрокаПравил.ЗначениеРеквизитаПотребителя = Неопределено;
	СтрокаПравил.Картинка = Неопределено;
	СтрокаПравил.ИмяРеквизитаОбъектаДокументооборота = Неопределено;
	СтрокаПравил.ПредставлениеРеквизитаОбъектаДокументооборота = Неопределено;
	СтрокаПравил.ВычисляемоеВыражение = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборота = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборотаID = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитДокументооборотаТип = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитОбъекта = Неопределено;
	СтрокаПравил.ДополнительныйРеквизитОбъектаСвойство = Неопределено;
	СтрокаПравил.ОбновлятьЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбъектаПотребителя()

	ЗаполнитьРеквизитыПотребителя();
	ЗаполнитьСписокПечатныхФорм();

КонецПроцедуры // ЗаполнитьДанныеОбъектаПотребителя()

&НаКлиенте
Процедура ОбновитьЗаголовокПечатныхФорм()
	
	Количество = 0;
	Для Каждого СтрокаФормы Из ПрисоединяемыеПечатныеФормы Цикл
		Количество = Количество + ?(СтрокаФормы.Использовать, 1, 0);
	КонецЦикла;
	
	ЗаголовокЗакладки = НСтр("ru = 'Добавление печатных форм'");
	Если Количество > 0 Тогда
		ЗаголовокЗакладки = СтрШаблон("%1 (%2)", ЗаголовокЗакладки, Количество);
	КонецЕсли;
	Элементы.ГруппаПрисоединяемыеПечатныеФормы.Заголовок = ЗаголовокЗакладки;
	
КонецПроцедуры

#КонецОбласти
