#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает реквизиты объекта Документооборота указанного типа, возможно, с уточнением вида документа.
//
// Параметры:
//   ТипОбъектаДокументооборота - Строка - имя типа объекта XDTO Документооборота.
//   Параметры - Структура - уточняющие параметры со свойством:
//     documentType - Структура - вид объекта документообота, со свойствами:
//       type - Строка - тип XDTO вида документа.
//       id - Строка - идентификатор вида документа.
//
Функция ПолучитьРеквизитыОбъектаДокументооборота(ТипОбъектаДокументооборота, Параметры = Неопределено) Экспорт 
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("СписокЗначений"));
	Реквизиты.Колонки.Добавить("ДопРеквизит", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДопРеквизитID", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ДопРеквизитТип", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	
	// Общие настройки.
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	Запрос.type = ТипОбъектаДокументооборота;
	Запрос.columnSet.Добавить("additionalProperties");
	Запрос.columnSet.Добавить("documentTypeEnabled");
	Запрос.columnSet.Добавить("accessLevelEnabled");
	Запрос.columnSet.Добавить("activityMatterEnabled");
	Запрос.columnSet.Добавить("organizationEnabled");
	Запрос.columnSet.Добавить("statusEnabled");
	Запрос.columnSet.Добавить("statusChangeEnabled");
	
	// Проекты.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Запрос.columnSet.Добавить("projectsEnabled");
	КонецЕсли;
	
	ДоступенПакетныйЗапрос = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
	Если ДоступенПакетныйЗапрос Тогда
		Пакет = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		Пакет.requests.Добавить(Запрос);
	Иначе // только последовательные вызовы
		РезультатДокумент = Прокси.execute(Запрос);
	КонецЕсли;
	
	Если Параметры <> Неопределено 
		И Параметры.Свойство("documentType") 
		И Параметры.documentType <> Неопределено Тогда 
		
		// Настройки по виду документа.
		ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
			Параметры.documentType.id, Параметры.documentType.type); 
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMRetrieveRequest");
		Запрос.objectIds.Добавить(ОбъектID);
		
		Если ДоступенПакетныйЗапрос Тогда
			
			Пакет.requests.Добавить(Запрос);
			ПакетРезультатов = Прокси.execute(Пакет);
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, ПакетРезультатов);
			
			РезультатДокумент = ПакетРезультатов.responses[0];
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДокумент);
			НастройкиТипа = РезультатДокумент;
			ДопРеквизиты = РезультатДокумент.additionalProperties;
			
			РезультатПоНастройкам = ПакетРезультатов.responses[1];
			Попытка
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатПоНастройкам);
				НужноПолучитьНастройкиТипа = Ложь;
			Исключение // Возможно, этого вида документа уже нет в ДО.
				НужноПолучитьНастройкиТипа = Истина;
				ИнтеграцияС1СДокументооборотВызовСервера.ЗаписатьПредупреждение(
					СтрШаблон(НСтр("ru = 'Не найден в 1С:Документообороте ранее существовавший вид документа %1'"),
					Параметры.documentType.id
				));
			КонецПопытки;
			
		Иначе
			РезультатПоНастройкам = Прокси.execute(Запрос);
			НужноПолучитьНастройкиТипа = Ложь;
			
		КонецЕсли;
		
		Если Не НужноПолучитьНастройкиТипа Тогда
			
			НастройкиВида = РезультатПоНастройкам.objects[0];
			
			РезультатДокумент.documentType = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
				Прокси, ТипОбъектаДокументооборота + "Type");
			РезультатДокумент.documentType.name = Параметры.documentType.name;
			РезультатДокумент.documentType.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
				Прокси, Параметры.documentType.id, Параметры.documentType.type);
			
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectAdditionalPropertiesRequest");
			Запрос.object = РезультатДокумент;
			НастройкиТипа = РезультатДокумент;
		
			Результат = Прокси.execute(Запрос);
		
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			ДопРеквизиты = Результат.additionalProperties;
			
		КонецЕсли;
		
	Иначе // вид документа неизвестен
		
		НужноПолучитьНастройкиТипа = Истина;
	
	КонецЕсли;
	
	Если НужноПолучитьНастройкиТипа Тогда
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = ТипОбъектаДокументооборота;
		Запрос.columnSet.Добавить("additionalProperties");
		Запрос.columnSet.Добавить("documentTypeEnabled");
		Запрос.columnSet.Добавить("accessLevelEnabled");
		Запрос.columnSet.Добавить("activityMatterEnabled");
		Запрос.columnSet.Добавить("organizationEnabled");
		Запрос.columnSet.Добавить("statusEnabled");
		Запрос.columnSet.Добавить("statusChangeEnabled");
		
		РезультатДокумент = Прокси.execute(Запрос);
		
	КонецЕсли;
	
	Если Не ДоступенПакетныйЗапрос
		Или НужноПолучитьНастройкиТипа Тогда
		
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДокумент);
		НастройкиТипа = РезультатДокумент;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(РезультатДокумент, "additionalProperties") Тогда
			ДопРеквизиты = РезультатДокумент.additionalProperties;
		Иначе
			ДопРеквизиты = Новый Массив;
		КонецЕсли;
		
		НастройкиВида = Неопределено;
		
	КонецЕсли;
	
	Если ТипОбъектаДокументооборота = "DMIncomingDocument" Тогда 
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMIncomingDocumentType", Истина);
		КонецЕсли;
			
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "correspondent", НСтр("ru = 'Отправитель'"), "DMCorrespondent", Истина);
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "externalNumber", НСтр("ru = '№ отправителя'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "externalDate", НСтр("ru = 'Дата отправителя'"), "Дата");
		
		Если НастройкиТипа.organizationEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "title", НСтр("ru = 'Наименование'"), "Строка", Истина);
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "signer", НСтр("ru = 'Подписал'"), "DMContactPerson");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), "DMUser");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "deliveryMethod",  НСтр("ru = 'Способ получения'"), "DMDeliveryMethod");
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
		
	ИначеЕсли ТипОбъектаДокументооборота = "DMOutgoingDocument" Тогда 
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMOutgoingDocumentType", Истина);
		КонецЕсли;
			
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "correspondent", НСтр("ru = 'Получатель'"), "DMCorrespondent", Истина);
		
		Если НастройкиВида = Неопределено Или НастройкиВида.externalNumberEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "externalNumber", НСтр("ru = '№ получателя'"), "Строка");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "externalDate", НСтр("ru = 'Дата получателя'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.OrganizationEnabled = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "title", НСтр("ru = 'Заголовок'"), "Строка", Истина);
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), "DMContactPerson");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "sent", НСтр("ru = 'Отправлен'"), "Булево");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "sendDate", НСтр("ru = 'Дата отправки'"), "Дата");
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "signer", НСтр("ru = 'Подписал'"), "DMUser");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "author", НСтр("ru = 'Подготовил'"), "DMUser");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "deliveryMethod", НСтр("ru = 'Способ отправки'"), "DMDeliveryMethod");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	ИначеЕсли ТипОбъектаДокументооборота = "DMInternalDocument" Тогда 
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMInternalDocumentType", Истина);
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "folder", НСтр("ru = 'Папка'"), "DMInternalDocumentFolder", Истина);
		
		Если НастройкиТипа.organizationEnabled = Истина
			И (НастройкиВида = Неопределено
				Или НастройкиВида.Свойства().Получить("organizationEnabled") = Неопределено
				Или НастройкиВида.organizationEnabled = Истина) Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "title", НСтр("ru = 'Заголовок'"), "Строка", Истина);
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "signer", НСтр("ru = 'Утвердил'"), "DMUser");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "author", НСтр("ru = 'Подготовил'"), "DMUser");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.correspondentEnabled = Истина Тогда 
			Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
				ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "correspondent", НСтр("ru = 'Корреспондент'"), "DMCorrespondent", Истина);
			Иначе
				ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "correspondent", НСтр("ru = 'Контрагент'"), "DMCorrespondent", Истина);
			КонецЕсли;
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "contactPerson", НСтр("ru = 'Контактное лицо'"), "DMContactPerson");
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.durationEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "beginDate", НСтр("ru = 'Дата начала действия'"), "Дата");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "endDate", НСтр("ru = 'Дата окончания действия'"), "Дата");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "openEnded", НСтр("ru = 'Бессрочный'"), "Булево");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "prolongationProcedure", НСтр("ru = 'Порядок продления'"), "DMProlongationProcedure");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда 
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	ИначеЕсли ТипОбъектаДокументооборота = "DMCorrespondent" Тогда 
		
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "name", НСтр("ru = 'Наименование'"), "Строка", Истина);
		Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "legalPrivatePerson", НСтр("ru = 'Вид корреспондента'"), "DMLegalPrivatePerson", Истина);
		Иначе
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "legalPrivatePerson", НСтр("ru = 'Вид контрагента'"), "DMLegalPrivatePerson", Истина);
		КонецЕсли;
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "inn", НСтр("ru = 'ИНН'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "kpp", НСтр("ru = 'КПП'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "okpo", НСтр("ru = 'Код по ОКПО'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "fullName", НСтр("ru = 'Полное наименование'"), "Строка");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "privatePerson", НСтр("ru = 'Физическое лицо'"), "DMPrivatePerson");
		ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	КонецЕсли;
	
	// Состояния.
	Если ТипОбъектаДокументооборота = "DMIncomingDocument"
		Или ТипОбъектаДокументооборота = "DMOutgoingDocument"
		Или ТипОбъектаДокументооборота = "DMInternalDocument" Тогда
		
		Если НастройкиТипа.statusEnabled = Истина
			И НастройкиТипа.statusChangeEnabled = Истина Тогда
			
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusApproval", НСтр("ru = 'Состояние согласования'"), "DMDocumentStatus");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusConfirmation", НСтр("ru = 'Состояние утверждения'"), "DMDocumentStatus");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusConsideration", НСтр("ru = 'Состояние рассмотрения'"), "DMDocumentStatus");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusPerformance", НСтр("ru = 'Состояние исполнения'"), "DMDocumentStatus");
			ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusRegistration", НСтр("ru = 'Состояние регистрации'"), "DMDocumentStatus");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные свойства.
	Для Каждого ДопСвойство Из ДопРеквизиты Цикл
		
		Типы = Новый СписокЗначений;
		Для Каждого ОписаниеТипа Из ДопСвойство.propertyValueTypes Цикл
			
			Если ОписаниеТипа.xdtoClassName = "integer" Тогда
				ТипЗначения = "Число";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "boolean" Тогда
				ТипЗначения = "Булево";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "string" Тогда
				ТипЗначения = "Строка";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "date" Тогда
				ТипЗначения = "Дата";
			Иначе	
				ТипЗначения = ОписаниеТипа.xdtoClassName;
			КонецЕсли;
			
			Типы.Добавить(ТипЗначения, ОписаниеТипа.presentation);
		КонецЦикла;
		
		ДобавитьСтрокуТаблицыПравилВыгрузкиДопРеквизита(Реквизиты,
			ДопСвойство.name,
			Типы,
			ДопСвойство.objectId.id,
			ДопСвойство.objectID.type);
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает таблицу возможных состояний документа Документооборота.
//
Функция ВозможныеСостоянияОбъектаДокументооборота() Экспорт

	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя");
	Реквизиты.Колонки.Добавить("Представление");
	Реквизиты.Колонки.Добавить("Тип");
	Реквизиты.Колонки.Добавить("ДопРеквизит");
	Реквизиты.Колонки.Добавить("ДопРеквизитID");
	Реквизиты.Колонки.Добавить("ДопРеквизитТип");
	Реквизиты.Колонки.Добавить("ОбязательноеЗаполнение");
	
	ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusRegistration", НСтр("ru = 'Состояние регистрации'"), "DMDocumentStatus");
	ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusConsideration", НСтр("ru = 'Состояние рассмотрения'"), "DMDocumentStatus");
	ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusApproval", НСтр("ru = 'Состояние согласования'"), "DMDocumentStatus");
	ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusConfirmation", НСтр("ru = 'Состояние утверждения'"), "DMDocumentStatus");
	ДобавитьСтрокуТаблицыПравилВыгрузки(Реквизиты, "statusPerformance", НСтр("ru = 'Состояние исполнения'"), "DMDocumentStatus");
		
	Возврат Реквизиты;
	
КонецФункции
 
// Возвращает реквизиты шаблона документа.
//
// Параметры:
//   ШаблонТип - Строка - имя типа объекта XDTO Документооборота (DM<..>DocumentType).
//   ШаблонID - Строка - имя типа объекта XDTO Документооборота (DM<..>DocumentType).
//   ШаблонЗапрещаетИзменение - Булево - неявно возвращаемое значение, Истина, если изменение
//     созданных по шаблону документов запрещено.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание реквизитов шаблона, с колонками:
//     ИмяРеквизитаОбъектаДокументооборота - Строка - имя реквизита в ДО.
//     ШаблонЗначение - Произвольный - значение реквизита шаблона.
//     ШаблонИдентификатор - Строка - идентификатор ссылочного значения реквизита шаблона.
//     ШаблонТип - Строка - тип значения реквизита шаблона.
//     ШаблонТип - Строка - тип значения реквизита шаблона.
//     ДополнительныйРеквизитДокументооборота - Булево - Истина, если это дополнительный реквизит.
//     ДополнительныйРеквизитДокументооборотаID - Строка - идентификатор доп. свойства ДО.
//     ДополнительныйРеквизитДокументооборотаТип - Строка - тип доп. свойства ДО.
//
Функция ПолучитьРеквизитыШаблонаДокумента(ШаблонТип, ШаблонID, ШаблонЗапрещаетИзменение) Экспорт 
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("ИмяРеквизитаОбъектаДокументооборота");
	Реквизиты.Колонки.Добавить("ШаблонЗначение");
	Реквизиты.Колонки.Добавить("ШаблонИдентификатор");
	Реквизиты.Колонки.Добавить("ШаблонТип");
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитДокументооборота");
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитДокументооборотаID");
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитДокументооборотаТип");
	
	Если Не ЗначениеЗаполнено(ШаблонID) Тогда
		ШаблонЗапрещаетИзменение = Ложь;
		Возврат Реквизиты;
	КонецЕсли;
	
	// Общие настройки.
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ШаблонID, ШаблонТип); 
		
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.objectIds.Добавить(ОбъектID);
		
	Результат = Прокси.execute(Запрос);
	Попытка
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
			
	ШаблонXDTO = Результат.objects[0];
		
	Если ШаблонXDTO.Установлено("additionalProperties") Тогда
		ДопРеквизиты = ШаблонXDTO.additionalProperties;
	Иначе
		ДопРеквизиты = Новый Массив;
	КонецЕсли;
	
	Если ШаблонXDTO.Установлено("blockDerivedDocuments") Тогда
		ШаблонЗапрещаетИзменение = ШаблонXDTO.blockDerivedDocuments;
	Иначе
		ШаблонЗапрещаетИзменение = Ложь;
	КонецЕсли;
	
	Если ШаблонТип = "DMIncomingDocumentTemplate"
		Или ШаблонТип = "DMOutgoingDocumentTemplate"
		Или ШаблонТип = "DMInternalDocumentTemplate" Тогда
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "accessLevel", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "comment", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "performanceDate", ШаблонXDTO, "performanceTerm");
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "activityMatter", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "responsible", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "organization", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "subdivision", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "summary", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "title", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "project", ШаблонXDTO);
	КонецЕсли;
	
	Если ШаблонТип = "DMIncomingDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "addressee", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "signer", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "deliveryMethod", ШаблонXDTO);
			
	ИначеЕсли ШаблонТип = "DMOutgoingDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "addressee", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "signer", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "deliveryMethod", ШаблонXDTO);
		
	ИначеЕсли ШаблонТип = "DMInternalDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "folder", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "contactPerson", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "cashFlowItem", ШаблонXDTO);
		
	КонецЕсли;
	
	Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		НоваяСтрока = Реквизиты.Добавить();
		НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота = "";
		НоваяСтрока.ДополнительныйРеквизитДокументооборота = Истина;
		НоваяСтрока.ДополнительныйРеквизитДокументооборотаID = ДопРеквизит.objectId.id;
		НоваяСтрока.ДополнительныйРеквизитДокументооборотаТип = ДопРеквизит.objectId.type;
		Если ДопРеквизит.Установлено("propertySimpleValue") Тогда
			НоваяСтрока.ШаблонЗначение = ДопРеквизит.propertySimpleValue;
		ИначеЕсли ДопРеквизит.Установлено("propertyObjectValue") Тогда
			НоваяСтрока.ШаблонЗначение = ДопРеквизит.propertyObjectValue.name;
			НоваяСтрока.ШаблонИдентификатор = ДопРеквизит.propertyObjectValue.objectId.id;
			НоваяСтрока.ШаблонТип = ДопРеквизит.propertyObjectValue.objectId.type;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает реквизиты объекта потребителя.
// Параметры:
//	ТипОбъектаПотребителя - Строка - полное имя метаданных объекта
//
Функция ПолучитьРеквизитыОбъектаПотребителя(ТипОбъектаПотребителя) Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитОбъекта", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитОбъектаСвойство",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъектаПотребителя);
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
	
		Если МетаданныеРеквизита.Имя = "Код" 
			Или МетаданныеРеквизита.Имя = "Наименование" 
			Или МетаданныеРеквизита.Имя = "Владелец" 
			Или МетаданныеРеквизита.Имя = "Номер"
			Или МетаданныеРеквизита.Имя = "Дата" Тогда
			
			Реквизит = Реквизиты.Добавить();
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним), 
				МетаданныеРеквизита.Синоним, МетаданныеРеквизита.Имя);
				
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.ДополнительныйРеквизитОбъекта = Ложь;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
	
		Реквизит = Реквизиты.Добавить();
		Реквизит.Имя = МетаданныеРеквизита.Имя;
		
		Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним), 
			МетаданныеРеквизита.Синоним, МетаданныеРеквизита.Имя);
			
		Реквизит.Тип = МетаданныеРеквизита.Тип;
		Реквизит.ДополнительныйРеквизитОбъекта = Ложь;
		
	КонецЦикла;
	
	Если Метаданные.ФункциональныеОпции.Найти("ИспользоватьДополнительныеРеквизитыИСведения") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ИмяПредопределенногоНабора = СтрЗаменить(ТипОбъектаПотребителя,".","_");
		МенеджерСправочника = Справочники["НаборыДополнительныхРеквизитовИСведений"];
		Попытка
			НаборСвойств = МенеджерСправочника[ИмяПредопределенногоНабора];
		Исключение
			Возврат Реквизиты;
		КонецПопытки;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
			|	ДополнительныеРеквизитыИСведения.ТипЗначения
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
			|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Реквизит = Реквизиты.Добавить();
			Реквизит.Имя = Строка(Выборка.Ссылка.УникальныйИдентификатор());
			Реквизит.Представление = Выборка.Наименование;
			Реквизит.Тип = Выборка.ТипЗначения;
			Реквизит.ДополнительныйРеквизитОбъекта = Истина;
			Реквизит.ДополнительныйРеквизитОбъектаСвойство = Выборка.Ссылка;
		КонецЦикла; 
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.
		ПолучитьРеквизитыОбъектаПотребителя(ТипОбъектаПотребителя, Реквизиты);
	
	Возврат Реквизиты;
	
КонецФункции // ПолучитьРеквизитыОбъектаПотребителя()

//Возвращает соответствие свойств XDTO и реквизитов формы объекта.
//Параметры:
//	ТипДокумента - тип объекта XDTO
//Возвращает: соответствие
Функция СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ТипДокумента) Экспорт 
	
	СоответствиеРеквизитов = Новый Структура;
	
	Если Найти(ТипДокумента, "Document") <> 0 Тогда
		
		СоответствиеРеквизитов.Вставить("title", 		  	"Наименование");
		СоответствиеРеквизитов.Вставить("summary", 		  	"Описание");
		СоответствиеРеквизитов.Вставить("comment", 		  	"Комментарий");
		СоответствиеРеквизитов.Вставить("regNumber", 	  	"РегистрационныйНомер");
		СоответствиеРеквизитов.Вставить("regDate", 		  	"ДатаРегистрации");
		СоответствиеРеквизитов.Вставить("performanceDate", 	"СрокИсполнения");
		СоответствиеРеквизитов.Вставить("sum", 			  	"Сумма");
		СоответствиеРеквизитов.Вставить("currency", 		"Валюта");
		СоответствиеРеквизитов.Вставить("status", 			"Состояние");
		СоответствиеРеквизитов.Вставить("organization", 	"Организация");
		СоответствиеРеквизитов.Вставить("subdivision", 	  	"Подразделение");
		СоответствиеРеквизитов.Вставить("activityMatter", 	"ВопросДеятельности");
		СоответствиеРеквизитов.Вставить("responsible", 		"Ответственный");
		СоответствиеРеквизитов.Вставить("accessLevel", 		"ГрифДоступа");
		СоответствиеРеквизитов.Вставить("documentType",  	"ВидДокумента");
		
		СоответствиеРеквизитов.Вставить("statusApproval", "СостояниеСогласование");
		СоответствиеРеквизитов.Вставить("statusConfirmation", "СостояниеРассмотрение");
		СоответствиеРеквизитов.Вставить("statusConsideration", "СостояниеУтверждение");
		СоответствиеРеквизитов.Вставить("statusRegistration", "СостояниеРегистрация");
		СоответствиеРеквизитов.Вставить("statusPerformance", "СостояниеИсполнение");
		
		// Шаблоны.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
			СоответствиеРеквизитов.Вставить("template", "Шаблон");
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			СоответствиеРеквизитов.Вставить("project", "Проект");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипДокумента = "DMIncomingDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("externalNumber",  	"НомерОтправителя");
		СоответствиеРеквизитов.Вставить("externalDate", 	"ДатаОтправителя");
		СоответствиеРеквизитов.Вставить("correspondent", 	"Отправитель");
		СоответствиеРеквизитов.Вставить("signer", 			"Подписал");
		СоответствиеРеквизитов.Вставить("addressee", 		"Адресат");
		СоответствиеРеквизитов.Вставить("deliveryMethod",	"СпособПолучения");
		
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("externalNumber", 	"НомерПолучателя");
		СоответствиеРеквизитов.Вставить("externalDate", 	"ДатаПолучателя");
		СоответствиеРеквизитов.Вставить("sent", 			"Отправлен");
		СоответствиеРеквизитов.Вставить("sendDate", 		"ДатаОтправки");
		
		СоответствиеРеквизитов.Вставить("correspondent", 	"Получатель");
		СоответствиеРеквизитов.Вставить("addressee", 		"Адресат");
		СоответствиеРеквизитов.Вставить("signer", 			"Подписал");
		СоответствиеРеквизитов.Вставить("author", 		  	"Подготовил");
		СоответствиеРеквизитов.Вставить("deliveryMethod",	"СпособОтправки");
		
	ИначеЕсли ТипДокумента = "DMInternalDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("beginDate", 	  	"ДатаНачалаДействия");
		СоответствиеРеквизитов.Вставить("endDate", 		  	"ДатаОкончанияДействия");
		СоответствиеРеквизитов.Вставить("openEnded", 	  	"Бессрочный");
		
		СоответствиеРеквизитов.Вставить("folder", 		  	"Папка");
		СоответствиеРеквизитов.Вставить("author", 		  	"Подготовил");
		СоответствиеРеквизитов.Вставить("signer", 		  	"Подписал");
		СоответствиеРеквизитов.Вставить("correspondent",  	"Контрагент");
		СоответствиеРеквизитов.Вставить("contactPerson",  	"КонтактноеЛицо");
		СоответствиеРеквизитов.Вставить("prolongationProcedure","ПорядокПродления");
		
	ИначеЕсли ТипДокумента = "DMCorrespondent" Тогда 
		
		СоответствиеРеквизитов.Вставить("name", "Наименование");
		СоответствиеРеквизитов.Вставить("inn", "ИНН");
		СоответствиеРеквизитов.Вставить("kpp", "КПП");
		СоответствиеРеквизитов.Вставить("okpo", "КодПоОКПО");
		СоответствиеРеквизитов.Вставить("fullName", "ПолноеНаименование");
		СоответствиеРеквизитов.Вставить("comment", "Комментарий");
		СоответствиеРеквизитов.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		СоответствиеРеквизитов.Вставить("privatePerson", "ФизЛицо");
		СоответствиеРеквизитов.Вставить("responsible", "Ответственный");
		
	КонецЕсли;
	
	// Пометка удаления.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
		СоответствиеРеквизитов.Вставить("deletionMark", "ПометкаУдаления");
	КонецЕсли;
		
	Возврат СоответствиеРеквизитов;
	
КонецФункции

//Возвращает соответствие имен свойств XDTO состояний документа Документооборота и реквизитов формы объекта.
//
Функция СоответствиеСвойствXDTOиСостоянийДокумента() Экспорт
	
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("statusRegistration", 	"СостояниеРегистрация");
	СоответствиеРеквизитов.Вставить("statusConsideration",	"СостояниеРассмотрение");
	СоответствиеРеквизитов.Вставить("statusApproval", 	 	"СостояниеСогласование");
	СоответствиеРеквизитов.Вставить("statusConfirmation", 	"СостояниеУтверждение");
	СоответствиеРеквизитов.Вставить("statusPerformance",  	"СостояниеИсполнение");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции // СоответствиеСвойствXDTOиСостоянийДокумента()
 
//Возвращает таблицу правил интеграции по заданным условиям.
//
Функция ПравилаИнтеграцииОбъекта(Объект, ТипОбъектаДокументооборота) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.ПравилаИнтеграцииС1СДокументооборотом
	|ГДЕ
	|	ТипОбъектаПотребителя = &ТипОбъектаПотребителя
	|	И ТипОбъектаДокументооборота = &ТипОбъектаДокументооборота
	|	И Не ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипОбъектаПотребителя", Объект.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ТипОбъектаДокументооборота", ТипОбъектаДокументооборота);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Правила = Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Правила = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Правила;

КонецФункции 

//Возвращает таблицу правил интеграции по заданным условиям.
//Параметры:
//	ТипОбъектаДокументооборота - Строка - тип объекта XDTO Документооборота
//	ВидДокументаID - Строка - идентификатор вида документа Документооборота
//	ВидДокументаТип -Строка - тип XDTO вида документа Документооборота
//
Функция ПравилаИнтеграцииОбъектов(ТипОбъектаДокументооборота, ВидДокументаID, ВидДокументаТип = Неопределено) Экспорт
	
	ДанныеКоманд = Новый ТаблицаЗначений;
	ДанныеКоманд.Колонки.Добавить("Наименование");
	ДанныеКоманд.Колонки.Добавить("ТипОбъектаПотребителя");
	ДанныеКоманд.Колонки.Добавить("Правило");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаИнтеграции.Ссылка Как Правило,
		|	ПравилаИнтеграции.ТипОбъектаПотребителя,
		|	ПравилаИнтеграции.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграции
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовПриВыгрузке КАК ПравилаВыгрузки
		|ПО
		|	ПравилаИнтеграции.Ссылка = ПравилаВыгрузки.Ссылка
		|	И (ПравилаИнтеграции.ТипОбъектаДокументооборота = ""DMCorrespondent""
		|		ИЛИ (
		|		ПравилаВыгрузки.ИмяРеквизитаОбъектаДокументооборота = ""documentType""
		|		И (
		|			(ПравилаВыгрузки.ВариантПравилаЗаполненияРеквизитов = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение)
		|				И ПравилаВыгрузки.ИдентификаторЗначенияРеквизита = &ВидДокументаID
		|				И ПравилаВыгрузки.ТипЗначенияРеквизита = &ВидДокументаТип)
		|			ИЛИ 
		|			(ПравилаВыгрузки.ВариантПравилаЗаполненияРеквизитов = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона)
		|				И ПравилаВыгрузки.ШаблонИдентификатор = &ВидДокументаID
		|				И ПравилаВыгрузки.ШаблонТип = &ВидДокументаТип)
		|			)
		|		)
		|	)
		|ГДЕ
		|	ПравилаИнтеграции.ТипОбъектаДокументооборота = &ТипОбъектаДокументооборота
		|	И НЕ ПравилаИнтеграции.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПравилаИнтеграции.ТипОбъектаПотребителя,
		|	ПравилаИнтеграции.Наименование,
		|	ПравилаИнтеграции.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("ТипОбъектаДокументооборота", ТипОбъектаДокументооборота);
	Запрос.УстановитьПараметр("ВидДокументаID", ВидДокументаID);
	Запрос.УстановитьПараметр("ВидДокументаТип", ВидДокументаТип);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДанныеКоманд = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат ДанныеКоманд;
	
КонецФункции

// Заполняет объект ИС по объекту XDTO.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса Документооборота.
//   Объект - Произвольный - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект ДО, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правила заполнения.
//   Обновление - Булево - заполнять только реквизиты с ОбновлятьЗначение = Истина.
//
// Возвращаемое значение:
//   Булево - Истина, если объект был изменен, и Ложь в противном случае.
//
Функция ЗаполнитьОбъектПоОбъектуXDTO(Прокси, Объект, ОбъектXDTO, Правило, Обновление = Ложь) Экспорт
	
	ОбъектИзменен = Ложь;
	
	ТипОбъекта = ТипЗнч(Объект);
	МетаданныеОбъекта = Объект.Метаданные();
	Реквизиты = ПолучитьРеквизитыОбъектаПотребителя(МетаданныеОбъекта.ПолноеИмя());
	
	ОбновляемыеРеквизиты = Неопределено;
	
	Если Обновление
		И ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		И МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
		И Объект.Проведен Тогда
		
		ОбновляемыеРеквизиты = Новый Массив;
		
		ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(
			МетаданныеОбъекта.ПолноеИмя(),
			ОбновляемыеРеквизиты);
		
	КонецЕсли;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаПотребителя", Реквизит.Имя);
		Если Обновление Тогда
			ПараметрыОтбора.Вставить("ОбновлятьЗначение", Истина);
		КонецЕсли;
		
		НайденныеСтроки = Правило.ПравилаЗаполненияРеквизитовПриЗагрузке.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		
		Если ОбновляемыеРеквизиты <> Неопределено
			И Не Реквизит.ДополнительныйРеквизитОбъекта Тогда
			
			Если ОбновляемыеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Реквизит.ДополнительныйРеквизитОбъекта Тогда
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				Если Не НайденнаяСтрока.ДополнительныйРеквизитДокументооборота Тогда
					ИмяРеквизитаОбъектаДокументооборота = НайденнаяСтрока.ИмяРеквизитаОбъектаДокументооборота;
					ЗначениеСвойства = ОбъектXDTO[ИмяРеквизитаОбъектаДокументооборота];
					ЭтоОбъектноеСвойство = ИнтеграцияС1СДокументооборот.ЭтоОбъектноеСвойство(Прокси,
						ОбъектXDTO,
						ИмяРеквизитаОбъектаДокументооборота);
					
				Иначе
					Для каждого Строка Из ОбъектXDTO.additionalProperties Цикл
						Если Строка.objectId.id = НайденнаяСтрока.ДополнительныйРеквизитДокументооборотаID 
							И Строка.objectId.type = НайденнаяСтрока.ДополнительныйРеквизитДокументооборотаТип Тогда
						 	Если Строка.propertySimpleValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertySimpleValue;
								ЭтоОбъектноеСвойство = Ложь;
							ИначеЕсли  Строка.propertyObjectValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertyObjectValue;
								ЭтоОбъектноеСвойство = Истина;
							Иначе
								ЗначениеСвойства = Неопределено;
								ЭтоОбъектноеСвойство = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
					
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
					ТипРеквизита = ИнтеграцияС1СДокументооборотПереопределяемый.ПодходящийТип(
						ЗначениеСвойства.objectId.type,
						Реквизит.Тип.Типы());
				Иначе
					ТипРеквизита = Реквизит.Тип.Типы()[0];
				КонецЕсли;
			
				ЭтоПримитивныйТип = ТипРеквизита = Тип("Строка")
					Или ТипРеквизита = Тип("Дата") 
					Или ТипРеквизита = Тип("Число") 
					Или ТипРеквизита = Тип("Булево");
			
				Если ЭтоПримитивныйТип
					И Не ЭтоОбъектноеСвойство Тогда 
					
					ПредыдущееЗначение = Объект[Реквизит.Имя];
					Объект[Реквизит.Имя] = ЗначениеСвойства;
					ОбъектИзменен = ОбъектИзменен 
						Или Объект[Реквизит.Имя] <> ПредыдущееЗначение;
					
				ИначеЕсли ЗначениеСвойства <> Неопределено
					И ЭтоОбъектноеСвойство Тогда
					
					ЗначениеРеквизита = ИнтеграцияС1СДокументооборот.ЗначениеРеквизитаПоОбъектуXDTO(
						ЗначениеСвойства,
						ТипРеквизита,
						Реквизит.Имя,
						ТипЗнч(Объект),
						Объект);
						
					Если ЗначениеРеквизита <> Неопределено Тогда
						
						ПредыдущееЗначение = Объект[Реквизит.Имя];
						Объект[Реквизит.Имя] = ЗначениеРеквизита;
						ОбъектИзменен = ОбъектИзменен 
							Или Объект[Реквизит.Имя] <> ПредыдущееЗначение;
						
					КонецЕсли; 
					
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				Если Объект[Реквизит.Имя] <> НайденнаяСтрока.ЗначениеРеквизитаПотребителя Тогда
					ОбъектИзменен = Истина;
					Объект[Реквизит.Имя] = НайденнаяСтрока.ЗначениеРеквизитаПотребителя;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ОбъектXDTO);
				Параметры.Вставить("Приемник", Объект);
				Параметры.Вставить("Результат", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(НайденнаяСтрока.ВычисляемоеВыражение, Параметры);
				
				Если Параметры.Результат <> Неопределено Тогда
					ПредыдущееЗначение = Объект[Реквизит.Имя];
					Объект[Реквизит.Имя] = Параметры.Результат;
					ОбъектИзменен = ОбъектИзменен 
						Или Объект[Реквизит.Имя] <> ПредыдущееЗначение;
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе // дополнительный реквизит объекта ИС
			
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.ДополнительныйРеквизитОбъектаСвойство);
			СтрокиРеквизита = Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска); 
			Если СтрокиРеквизита.Количество() = 0 Тогда
				ОбъектИзменен = Истина;
				СтрокаРеквизита = Объект.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = Реквизит.ДополнительныйРеквизитОбъектаСвойство;
			Иначе
				СтрокаРеквизита = СтрокиРеквизита[0];
			КонецЕсли; 
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				Если Не НайденнаяСтрока.ДополнительныйРеквизитДокументооборота Тогда
					ИмяРеквизитаОбъектаДокументооборота = НайденнаяСтрока.ИмяРеквизитаОбъектаДокументооборота;
					ЗначениеСвойства = ОбъектXDTO[ИмяРеквизитаОбъектаДокументооборота];
					ЭтоОбъектноеСвойство = ИнтеграцияС1СДокументооборот.ЭтоОбъектноеСвойство(Прокси,
						ОбъектXDTO,
						ИмяРеквизитаОбъектаДокументооборота);
					
				Иначе
					Для каждого Строка Из ОбъектXDTO.additionalProperties Цикл
						Если Строка.objectId.id = НайденнаяСтрока.ДополнительныйРеквизитДокументооборотаID 
							И Строка.objectId.type = НайденнаяСтрока.ДополнительныйРеквизитДокументооборотаТип Тогда
						 	Если Строка.propertySimpleValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertySimpleValue;
								ЭтоОбъектноеСвойство = Ложь;
							ИначеЕсли  Строка.propertyObjectValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertyObjectValue;
								ЭтоОбъектноеСвойство = Истина;
							Иначе
								ЗначениеСвойства = Неопределено;
								ЭтоОбъектноеСвойство = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
					
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
					ТипРеквизита = ИнтеграцияС1СДокументооборотПереопределяемый.ПодходящийТип(
						ЗначениеСвойства.objectId.type,
						Реквизит.Тип.Типы());
				Иначе
					ТипРеквизита = Реквизит.Тип.Типы()[0];
				КонецЕсли;
				
				ЭтоПримитивныйТип = ТипРеквизита = Тип("Строка")
					Или ТипРеквизита = Тип("Дата") 
					Или ТипРеквизита = Тип("Число") 
					Или ТипРеквизита = Тип("Булево");
			
				Если ЭтоПримитивныйТип
					И Не ЭтоОбъектноеСвойство Тогда 
					
					ПредыдущееЗначение = СтрокаРеквизита.Значение;
					СтрокаРеквизита.Значение = ЗначениеСвойства;
					ОбъектИзменен = ОбъектИзменен 
						Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
					
				ИначеЕсли ЗначениеСвойства <> Неопределено
					И ЭтоОбъектноеСвойство Тогда
					
					ЗначениеРеквизита = ИнтеграцияС1СДокументооборот.ЗначениеРеквизитаПоОбъектуXDTO(
						ЗначениеСвойства,
						ТипРеквизита,
						Реквизит.Имя,
						ТипЗнч(Объект),
						Объект,
						Истина,
						СтрокаРеквизита.Свойство);
						
					Если ЗначениеРеквизита <> Неопределено Тогда
						ПредыдущееЗначение = СтрокаРеквизита.Значение;
						СтрокаРеквизита.Значение = ЗначениеРеквизита;
						ОбъектИзменен = ОбъектИзменен 
							Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
					КонецЕсли; 
					
				КонецЕсли;
					
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				Если СтрокаРеквизита.Значение <> НайденнаяСтрока.ЗначениеРеквизитаПотребителя Тогда
					ОбъектИзменен = Истина;
					СтрокаРеквизита.Значение = НайденнаяСтрока.ЗначениеРеквизитаПотребителя;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ОбъектXDTO);
				Параметры.Вставить("Приемник", Объект);
				Параметры.Вставить("Результат", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(НайденнаяСтрока.ВычисляемоеВыражение, Параметры);
				
				Если Параметры.Результат <> Неопределено Тогда
					ПредыдущееЗначение = СтрокаРеквизита.Значение;
					СтрокаРеквизита.Значение = Параметры.Результат;
					ОбъектИзменен = ОбъектИзменен 
						Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОбъектXDTO.Свойства().Получить("deletionMark") <> Неопределено
		И ОбъектXDTO.Установлено("deletionMark") Тогда
		
		ОбъектИзменен = ОбъектИзменен 
			Или (ОбъектXDTO.deletionMark <> Объект.ПометкаУдаления);
		Объект.ПометкаУдаления = ОбъектXDTO.deletionMark;
		
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

// Заполняет реквизиты формы из данных объекта-потребителя.
//
// Параметры:
//   ВнешнийОбъект - Произвольный - ссылка на объект ИС.
//   Форма - УправляемаяФорма - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применямое правило.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма, Правило) Экспорт
	
	ПараметрыЗаполнения = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", "documentType");
	
	СтрокиВидДокумента = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		
		Если СтрокаВидДокумента.ВариантПравилаЗаполненияРеквизитов
			= Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
		
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("documentType",
				Новый Структура("id, type, name", 
					СтрокаВидДокумента.ИдентификаторЗначенияРеквизита,
					СтрокаВидДокумента.ТипЗначенияРеквизита,
					СтрокаВидДокумента.ЗначениеРеквизитаДокументооборота));
				
		ИначеЕсли СтрокаВидДокумента.ВариантПравилаЗаполненияРеквизитов
			= Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
		
			ПараметрыЗаполнения = Новый Структура;
			
			ПараметрыЗаполнения.Вставить("documentType",
				Новый Структура("id, type, name", 
					СтрокаВидДокумента.ШаблонИдентификатор,
					СтрокаВидДокумента.ШаблонТип,
					СтрокаВидДокумента.ШаблонЗначение));
				
		КонецЕсли
			
	КонецЕсли;
		
	Реквизиты = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		ПолучитьРеквизитыОбъектаДокументооборота(Правило.ТипОбъектаДокументооборота, ПараметрыЗаполнения);
		
	СоответствиеРеквизитов = СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Форма.Тип);
	МетаданныеОбъекта = ВнешнийОбъект.Метаданные();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Не Реквизит.ДопРеквизит Тогда 
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота", Ложь);
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", Реквизит.Имя);
		Иначе
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота", Истина);
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборотаID", Реквизит.ДопРеквизитID); 
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборотаТип", Реквизит.ДопРеквизитТип);
			
		КонецЕсли;
		
		НайденныеСтроки = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		
		Если Не Реквизит.ДопРеквизит Тогда 
			
			РеквизитФормы = СоответствиеРеквизитов[Реквизит.Имя];
			ТипРеквизита = Реквизит.Тип[0].Значение;
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
					Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Если НайденнаяСтрока.ДополнительныйРеквизитОбъекта Тогда	
						ИмяМетаданных = МетаданныеОбъекта.ПолноеИмя();
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ДополнительныеРеквизиты.Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &ВнешнийОбъект
						|	И ДополнительныеРеквизиты.Свойство = &Свойство";
						Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяМетаданных);
						Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
						Запрос.УстановитьПараметр("Свойство",НайденнаяСтрока.ДополнительныйРеквизитОбъектаСвойство);
						РезультатЗапроса = Запрос.Выполнить();
						Если Не РезультатЗапроса.Пустой() Тогда
							Результат = РезультатЗапроса.Выгрузить()[0].Значение;
						Иначе
							Результат = Неопределено;
						КонецЕсли;
					Иначе
						Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
					КонецЕсли; 
				КонецЕсли;
				
				Если ЭтоПримитивныйТип(ТипРеквизита) Тогда 
					Форма[РеквизитФормы] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					Форма[РеквизитФормы] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						Форма[РеквизитФормы + "ID"] = Строка(Результат.УникальныйИдентификатор());
						Форма[РеквизитФормы + "Тип"] = Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Результат)) Тогда
						Форма[РеквизитФормы + "ID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Результат);
						Форма[РеквизитФормы + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						Форма[РеквизитФормы + "ID"] = Строка(Результат);
						Форма[РеквизитФормы + "Тип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				Если ЭтоПримитивныйТип(ТипРеквизита) Тогда 
					
					Форма[РеквизитФормы] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
					
				Иначе
					
					Если Реквизит.Имя = "documentType"
						И Форма[РеквизитФормы + "ID"] <> НайденнаяСтрока.ИдентификаторЗначенияРеквизита Тогда
						ВидДокументаИзменен = Истина;
					Иначе
						ВидДокументаИзменен = Ложь;
					КонецЕсли;
					
					Форма[РеквизитФормы] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
					Форма[РеквизитФормы + "ID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
					Форма[РеквизитФормы + "Тип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
					
					Если ВидДокументаИзменен Тогда 
						Обработки.ИнтеграцияС1СДокументооборот.ПриИзмененииВидаНаФормеДокумента(Форма);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ВнешнийОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(НайденнаяСтрока.ВычисляемоеВыражение, Параметры);
				
				Если ЭтоПримитивныйТип(ТипРеквизита) Тогда 
					
					Форма[РеквизитФормы] = Параметры.Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда 
					Форма[РеквизитФормы] = Строка(Параметры.Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
						Форма[РеквизитФормы + "ID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
						Форма[РеквизитФормы + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметры.Результат)) Тогда
						Форма[РеквизитФормы + "ID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
						Форма[РеквизитФормы + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
						Форма[РеквизитФормы + "ID"] = Параметры.РезультатID;
						Форма[РеквизитФормы + "Тип"] = Параметры.РезультатТип;
					Иначе // примитивный тип на стороне ИС
						Форма[РеквизитФормы + "Тип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // доп. реквизит
			
			ТипРеквизита = Реквизит.Тип[0].Значение;
			
			ПараметрыОтбора = Новый Структура("СвойствоТип, СвойствоID", Реквизит.ДопРеквизитТип, Реквизит.ДопРеквизитID);
			СтрокиДопРеквизита = Форма.Свойства.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиДопРеквизита.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДопРеквизита = СтрокиДопРеквизита[0];
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Если НайденнаяСтрока.ДополнительныйРеквизитОбъекта Тогда	
						ИмяМетаданных = МетаданныеОбъекта.ПолноеИмя();
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ДополнительныеРеквизиты.Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &ВнешнийОбъект
						|	И ДополнительныеРеквизиты.Свойство = &Свойство";
						Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяМетаданных);
						Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
						Запрос.УстановитьПараметр("Свойство",НайденнаяСтрока.ДополнительныйРеквизитОбъектаСвойство);
						РезультатЗапроса = Запрос.Выполнить();
						Если Не РезультатЗапроса.Пустой() Тогда
							Результат = РезультатЗапроса.Выгрузить()[0].Значение;
						Иначе
							Результат = Неопределено;
						КонецЕсли;
					Иначе
						Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
					КонецЕсли; 
				КонецЕсли;
				
				Если ЭтоПримитивныйТип(ТипРеквизита) Тогда 
					
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Результат)) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				СтрокаДопРеквизита["Значение"] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
				СтрокаДопРеквизита["ЗначениеID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
				СтрокаДопРеквизита["ЗначениеТип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ВнешнийОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(НайденнаяСтрока.ВычисляемоеВыражение, Параметры);
				
				Если ЭтоПримитивныйТип(ТипРеквизита) Тогда 
					
					СтрокаДопРеквизита["Значение"] = Параметры.Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Параметры.Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметры.Результат)) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = Параметры.РезультатID;
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.РезультатТип;
					Иначе // примитивный тип на стороне ИС
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ПометкаУдаления = ВнешнийОбъект.ПометкаУдаления;
	
	Если Правило.ТипОбъектаДокументооборота <> "DMCorrespondent" Тогда
		ЗаполнитьПечатныеФормы(
			ВнешнийОбъект,
			Форма.Файлы,
			Правило,
			Ложь, // не только обновление
			Истина, // помещать во временное хранилище формы
			Форма.УникальныйИдентификатор);
	КонецЕсли;
		
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииФормыОбъектаДОПоОбъектуИС(ВнешнийОбъект,
		Форма,
		Правило);
		
КонецПроцедуры

// Заполняет структуру реквизитов объекта ДО по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - прокси для подключения к веб-сервису DMService.
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применяемое правило.
//   СтруктураРеквизитов - Структура - предварительно подготовленная структура реквизитов,
//     заполняемая по данным объекта ИС.
//   СоответствиеСвойствXDTOиРеквизитов - Структура - соответствие имен свойств XDTO и реквизитов.
//   ТолькоОбновление - Булево - Истина, если нужно заполнять только автоматически обновляемое.
//
Процедура ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(Прокси, Источник, Правило, СтруктураРеквизитов,
	СоответствиеСвойствXDTOиРеквизитов, ТолькоОбновление = Ложь) Экспорт
	
	// Определим вид заполняемого документа и получим описание его реквизитов.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота",
		"documentType");
	ПараметрыОтбора.Вставить("ВариантПравилаЗаполненияРеквизитов",
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение);
	ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота",
		Ложь);
		
	ПараметрыЗаполнения = Неопределено;
	
	// Вид документа может быть задан явно и перекрывать шаблон.
	СтрокиВидДокумента = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
			СтрокаВидДокумента.ИдентификаторЗначенияРеквизита,
			СтрокаВидДокумента.ТипЗначенияРеквизита,
			СтрокаВидДокумента.ЗначениеРеквизитаДокументооборота));
			
	Иначе // Вид документа может быть задан в шаблоне.
		ПараметрыОтбора.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
		СтрокиВидДокумента = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВидДокумента.Количество() > 0 Тогда 
			СтрокаВидДокумента = СтрокиВидДокумента[0];
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("documentType",
				Новый Структура("id, type, name", 
				СтрокаВидДокумента.ШаблонИдентификатор,
				СтрокаВидДокумента.ШаблонТип,
				СтрокаВидДокумента.ШаблонЗначение));
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыОбъектаДО = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		ПолучитьРеквизитыОбъектаДокументооборота(Правило.ТипОбъектаДокументооборота, ПараметрыЗаполнения);
	
	// Заполним реквизиты.
	Для Каждого РеквизитОбъектаДО Из РеквизитыОбъектаДО Цикл
		
		Если Не РеквизитОбъектаДО.ДопРеквизит Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота", Ложь);
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", РеквизитОбъектаДО.Имя);
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборота", Истина);
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборотаID", РеквизитОбъектаДО.ДопРеквизитID);
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДокументооборотаТип", РеквизитОбъектаДО.ДопРеквизитТип);
		КонецЕсли;
		
		Если ТолькоОбновление Тогда
			ПараметрыОтбора.Вставить("ОбновлятьЗначение", Истина);
		КонецЕсли;
		
		НайденныеПравилаЗаполнения = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеПравилаЗаполнения.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ПравилоЗаполненияРеквизита = НайденныеПравилаЗаполнения[0];
		
		Если Не РеквизитОбъектаДО.ДопРеквизит Тогда 
			
			РеквизитСтруктуры = СоответствиеСвойствXDTOиРеквизитов[РеквизитОбъектаДО.Имя];
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			Если ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				// Получим значение реквизита объекта ИС.
				Если ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(Источник);
					
				ИначеЕсли ПравилоЗаполненияРеквизита.ДополнительныйРеквизитОбъекта Тогда
					
					Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	ДополнительныеРеквизиты.Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &ВнешнийОбъект
						|	И ДополнительныеРеквизиты.Свойство = &Свойство");
					ИмяОбъектаМетаданныеИсточника = Источник.Метаданные().ПолноеИмя();
					Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяОбъектаМетаданныеИсточника);
					Запрос.УстановитьПараметр("ВнешнийОбъект", Источник);
					Запрос.УстановитьПараметр("Свойство", ПравилоЗаполненияРеквизита.ДополнительныйРеквизитОбъектаСвойство);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Результат = Выборка.Значение;
					Иначе
						Результат = Неопределено;
					КонецЕсли;
						
				Иначе // обычный реквизит объекта
						
					Попытка
						Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							Источник,
							ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя);
					Исключение
						// В случае отсутствия реквизита выдадим понятное сообщение об ошибке.
						Инфо = ИнформацияОбОшибке();
						МетаданныеИсточника = Источник.Метаданные();
						Если МетаданныеИсточника.Реквизиты.Найти(ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя)
								= Неопределено
							И ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя <> "Представление" Тогда
							Найден = Ложь;
							Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
								Если СтандартныйРеквизит.Имя = ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя Тогда
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не Найден Тогда
								ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграциии с 1С:Документооборотом.
										|Проверьте правило интеграции или обратитесь к администратору.'",
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя);
								ЗаписьЖурналаРегистрации(
									ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
									УровеньЖурналаРегистрации.Ошибка,,
									Правило, 
									ТекстСообщения);
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;
						КонецЕсли;
						// Иная ошибка.
						ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
					КонецПопытки;
					
				КонецЕсли;
				
				// Заполним полученным значением структуру реквизитов.
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда
					СтруктураРеквизитов[РеквизитСтруктуры] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда // ссылочный тип на стороне ДО
					СтруктураРеквизитов[РеквизитСтруктуры] = Строка(Результат);
					
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = Строка(Результат.УникальныйИдентификатор());
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Результат)) Тогда
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Результат);
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе // примитивный тип на стороне ИС
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = Строка(Результат);
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = "Строка";
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда
					СтруктураРеквизитов[РеквизитСтруктуры] = 
						ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДокументооборота;
					
				Иначе // ссылочный тип на стороне ДО
					СтруктураРеквизитов[РеквизитСтруктуры] = 
						ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДокументооборота;
					СтруктураРеквизитов[РеквизитСтруктуры + "ID"]  = 
						ПравилоЗаполненияРеквизита.ИдентификаторЗначенияРеквизита;
					СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = 
						ПравилоЗаполненияРеквизита.ТипЗначенияРеквизита;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
					Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", Источник);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоЗаполненияРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					СтруктураРеквизитов[РеквизитСтруктуры] = Параметры.Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда // ссылочный тип на стороне ДО
					СтруктураРеквизитов[РеквизитСтруктуры] = Строка(Параметры.Результат);
					
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметры.Результат)) Тогда
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = ИнтеграцияС1СДокументооборот.
							ИмяЗначенияПеречисления(Параметры.Результат);
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
						СтруктураРеквизитов[РеквизитСтруктуры + "ID"] = Параметры.РезультатID;
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = Параметры.РезультатТип;
					Иначе // примитивный тип на стороне ИС
						СтруктураРеквизитов[РеквизитСтруктуры + "Тип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // дополнительный реквизит на стороне ДО
			
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			СтрокаДопРеквизита = СтруктураРеквизитов.Свойства.Добавить();
			СтрокаДопРеквизита.СвойствоТип = РеквизитОбъектаДО.ДопРеквизитТип;
			СтрокаДопРеквизита.СвойствоID = РеквизитОбъектаДО.ДопРеквизитID;
			СтрокаДопРеквизита.Свойство = "";
			
			Для Каждого Тип Из РеквизитОбъектаДО.Тип Цикл
				ДанныеОТипе = Новый Структура("xdtoClassName, presentation");
				ДанныеОТипе.xdtoClassName = Тип.Значение;
				ДанныеОТипе.presentation = Тип.Представление;
				СтрокаДопРеквизита.СписокДоступныхТипов.Добавить(ДанныеОТипе);
			КонецЦикла;
			
			Если ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда 
				
				// Получим значение реквизита объекта ИС.
				Если ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(Источник);
					
				ИначеЕсли ПравилоЗаполненияРеквизита.ДополнительныйРеквизитОбъекта Тогда
					
					Запрос = Новый Запрос(
						"ВЫБРАТЬ
						|	ДополнительныеРеквизиты.Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &ВнешнийОбъект
						|	И ДополнительныеРеквизиты.Свойство = &Свойство");
					ИмяОбъектаМетаданныеИсточника = Источник.Метаданные().ПолноеИмя();
					Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяОбъектаМетаданныеИсточника);
					Запрос.УстановитьПараметр("ВнешнийОбъект", Источник);
					Запрос.УстановитьПараметр("Свойство", ПравилоЗаполненияРеквизита.ДополнительныйРеквизитОбъектаСвойство);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Результат = Выборка.Значение;
					Иначе
						Результат = Неопределено;
					КонецЕсли;
						
				Иначе // обычный реквизит объекта
						
					Попытка
						Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							Источник,
							ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя);
					Исключение
						// В случае отсутствия реквизита выдадим понятное сообщение об ошибке.
						Инфо = ИнформацияОбОшибке();
						МетаданныеИсточника = Источник.Метаданные();
						Если МетаданныеИсточника.Реквизиты.Найти(ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя)
								= Неопределено
							И ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя <> "Представление" Тогда
							Найден = Ложь;
							Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
								Если СтандартныйРеквизит.Имя = ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя Тогда
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не Найден Тогда
								ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграциии с 1С:Документооборотом.
										|Проверьте правило интеграции или обратитесь к администратору.'",
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаПотребителя);
								ЗаписьЖурналаРегистрации(
									ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
									УровеньЖурналаРегистрации.Ошибка,,
									Правило, 
									ТекстСообщения);
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;
						КонецЕсли;
						// Иная ошибка.
						ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
					КонецПопытки;
					
				КонецЕсли;
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда // ссылочный тип на стороне ДО
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Результат)) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе // примитивный тип на стороне ИС
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
				
				СтрокаДопРеквизита["Значение"] = 
					ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДокументооборота;
				СтрокаДопРеквизита["ЗначениеID"] = 
					ПравилоЗаполненияРеквизита.ИдентификаторЗначенияРеквизита;
				СтрокаДопРеквизита["ЗначениеТип"] = 
					ПравилоЗаполненияРеквизита.ТипЗначенияРеквизита;
				
			ИначеЕсли ПравилоЗаполненияРеквизита.ВариантПравилаЗаполненияРеквизитов = 
					Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", Источник);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоЗаполненияРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					СтрокаДопРеквизита["Значение"] = Параметры.Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда // ссылочный тип на стороне ДО
					СтрокаДопРеквизита["Значение"] = Строка(Параметры.Результат);
					
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Параметры.Результат)) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
						СтрокаДопРеквизита["ЗначениеID"] = Параметры.РезультатID;
						СтрокаДопРеквизита["ЗначениеТип"] = Параметры.РезультатТип;
					Иначе // примитивный тип на стороне ИС
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураРеквизитов.Свойство("ПометкаУдаления") Тогда
		СтруктураРеквизитов.ПометкаУдаления = Источник.ПометкаУдаления;
	КонецЕсли;
	
	Если Правило.ТипОбъектаДокументооборота <> "DMCorrespondent" Тогда
		ЗаполнитьПечатныеФормы(
			Источник,
			СтруктураРеквизитов.Файлы,
			Правило,
			ТолькоОбновление);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет файлы объекта ДО печатными формами объекта ИС.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   Файлы - Массив, ДанныеФормыКоллекция - заполняемый список файлов.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - выбранное правило.
//   ПомещатьВоВременноеХранилище - Булево - Истина, если файлы следует поместить во временное хранилище
//     с заполнением поля Адрес, и Ложь, если требуется заполнить непосредственно поле ДвоичныеДанные.
//
Процедура ЗаполнитьПечатныеФормы(Источник, Файлы, Правило, ТолькоОбновление = Ложь,
	ПомещатьВоВременноеХранилище = Ложь, ИдентификаторФормы = Неопределено) Экспорт
	
	// Обработаем печатные формы.
	МенеджерыПечати = Правило.ПрисоединяемыеПечатныеФормы.Выгрузить();
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(
		Правило.ТипОбъектаПотребителя + ".Форма.ФормаСписка");

	СтрокиКУдалению = Новый Массив;
	Для Каждого МенеджерПечати Из МенеджерыПечати Цикл
		Отбор = Новый Структура("Идентификатор, МенеджерПечати", МенеджерПечати.ИмяКоманды, МенеджерПечати.МенеджерПечати);
		СтрокиКомандыПечати = КомандыПечати.НайтиСтроки(Отбор);
		Если СтрокиКомандыПечати.Количество() > 0 Тогда
			МенеджерПечати.ИмяКоманды = "КомандаПечати"+Формат(КомандыПечати.Индекс(СтрокиКомандыПечати[0]),"ЧН=0; ЧГ=0");
		Иначе 
			СтрокиКУдалению.Добавить(МенеджерПечати);
		КонецЕсли;
		Если ТолькоОбновление И (Не МенеджерПечати.ОбновлятьЗначение) Тогда
			СтрокиКУдалению.Добавить(МенеджерПечати);
		КонецЕсли; 
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		МенеджерыПечати.Удалить(Строка);
	КонецЦикла;
	
	ПечатныеФормы = МенеджерыПечати.Скопировать();
	МенеджерыПечати.Свернуть("МенеджерПечати");
	МенеджерыПечати = МенеджерыПечати.ВыгрузитьКолонку("МенеджерПечати");
	
	Для каждого МенеджерПечати из МенеджерыПечати Цикл
		
		МакетыМенеджера = ПечатныеФормы.НайтиСтроки(новый Структура("МенеджерПечати",МенеджерПечати));
		ИменаМакетов = "";
		
		Для каждого КомандаМенеджера из МакетыМенеджера Цикл
			
			КоллекцияПечатныхФорм = неопределено;
			
			ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьПечатныеФормы(
				Источник, КомандаМенеджера.ИмяКоманды, КоллекцияПечатныхФорм);
			
			ФорматФайлов = ОбщегоНазначения.ИмяЗначенияПеречисления(Правило.ТипФайловСохраненияПечатныхФорм);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			Для каждого ПечатнаяФорма из КоллекцияПечатныхФорм Цикл
				Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено 
					И ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() > 0 Тогда
					
					ПечатнаяФорма.ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента[ФорматФайлов]);
					Файл = Новый Файл(ИмяВременногоФайла);
					
					СтрокаФайлов = Файлы.Добавить();
					СтрокаФайлов.Расширение = НРег(ФорматФайлов);
					СтрокаФайлов.ДатаСоздания = Файл.ПолучитьВремяИзменения();
					СтрокаФайлов.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
					СтрокаФайлов.Размер = Файл.Размер();
					Файл = Неопределено;
					
					Если ПомещатьВоВременноеХранилище Тогда
						СтрокаФайлов.АдресВременногоХранилищаФайла = 
							ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ИдентификаторФормы);
						СтрокаФайлов.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.
							ПолучитьИндексПиктограммыФайла(СтрокаФайлов.Расширение);
					Иначе
						СтрокаФайлов.ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
					КонецЕсли;
					
					ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 №%2 от %3'"),
						Строка(?(ЗначениеЗаполнено(ПечатнаяФорма.СинонимМакета),
							ПечатнаяФорма.СинонимМакета,
							ПечатнаяФорма.ИмяМакета)),
						Строка(Источник.Номер),
						Формат(Источник.Дата,"ДЛФ=D")); 
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла," ");
					СтрокаФайлов.Наименование = ИмяФайла;
					
				КонецЕсли;
			КонецЦикла;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Обновляет правила интеграции, использующие шаблон, при его изменении на стороне ДО.
//
// Параметры:
//   ШаблонXDTO - ОбъектXDTO - измененный шаблон.
//
Процедура ОбновитьПравилаПоШаблону(ШаблонXDTO) Экспорт
	
	Если ШаблонXDTO.Свойства().Получить("blockDerivedDocuments") <> Неопределено
		И ШаблонXDTO.Установлено("blockDerivedDocuments") Тогда
		ШаблонЗапрещаетИзменение = ШаблонXDTO.blockDerivedDocuments;
	Иначе
		ШаблонЗапрещаетИзменение = Ложь;
	КонецЕсли;
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	Правила.Ссылка КАК Правило,
		|	Правила.ТипОбъектаДокументооборота КАК ТипОбъектаДокументооборота
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	Правила.ШаблонТип = &ШаблонТип
		|	И Правила.ШаблонID = &ШаблонID
		|	И НЕ Правила.ПометкаУдаления");
	ЗапросПравила.УстановитьПараметр("ШаблонТип", ШаблонXDTO.objectId.type);
	ЗапросПравила.УстановитьПараметр("ШаблонID", ШаблонXDTO.objectId.id);
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		Если ШаблонXDTO.Свойства().Получить("documentType") = Неопределено
			Или Не ШаблонXDTO.Установлено("documentType")
			Или Не ЗначениеЗаполнено(ШаблонXDTO.documentType.objectId.id) 
			Или Не ЗначениеЗаполнено(ШаблонXDTO.documentType.objectId.type) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
				ШаблонXDTO.documentType.objectId.id,
				ШаблонXDTO.documentType.objectId.type,
				ШаблонXDTO.documentType.name));
		
		РеквизитыОбъектаДО = ПолучитьРеквизитыОбъектаДокументооборота(
			ВыборкаПравила.ТипОбъектаДокументооборота,
			ПараметрыЗаполнения);
			
		Правило = ВыборкаПравила.Правило.ПолучитьОбъект();
		Правило.Заблокировать();
		НужнаЗапись = Ложь;
		
		НомерРеквизита = 0;
		Пока НомерРеквизита <= Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.Количество() - 1 Цикл
			
			ПравилоРеквизита = Правило.ПравилаЗаполненияРеквизитовПриВыгрузке[НомерРеквизита];
			ИмяРеквизита = ПравилоРеквизита.ИмяРеквизитаОбъектаДокументооборота;
			Если ИмяРеквизита = "performanceDate" Тогда
				ИмяРеквизитаШаблона = "performanceTerm";
			Иначе
				ИмяРеквизитаШаблона = ИмяРеквизита;
			КонецЕсли;
			
			// Проверим, существует ли определенный в правиле реквизит.
			СтруктураОтбора = Новый Структура("ДопРеквизит",
				ПравилоРеквизита.ДополнительныйРеквизитДокументооборота);
			Если ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда 
				СтруктураОтбора.Вставить("ДопРеквизитID",
					ПравилоРеквизита.ДополнительныйРеквизитДокументооборотаID);
			Иначе
				СтруктураОтбора.Вставить("Имя", ИмяРеквизита);
			КонецЕсли;
			
			НайденныеСтроки = РеквизитыОбъектаДО.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				Если Не ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищено правило заполнения реквизита %1, отсутствующего в документе'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищено правило заполнения дополнительного реквизита, отсутствующего в документе'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.Удалить(ПравилоРеквизита);
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда
				Если ШаблонXDTO.Свойства().Получить(ИмяРеквизитаШаблона) <> Неопределено Тогда
					РеквизитШаблона = ШаблонXDTO[ИмяРеквизитаШаблона];
				Иначе
					РеквизитШаблона = Неопределено;
				КонецЕсли;
			Иначе
				Если ШаблонXDTO.Установлено("additionalProperties") Тогда
					РеквизитШаблона = Неопределено;
					Для Каждого ДопРеквизит Из ШаблонXDTO.additionalProperties Цикл
						Если ДопРеквизит.objectId.id = ПравилоРеквизита.ДополнительныйРеквизитДокументооборотаID
							И ДопРеквизит.objectId.type = ПравилоРеквизита.ДополнительныйРеквизитДокументооборотаТип Тогда
								
							Если ДопРеквизит.Установлено("propertySimpleValue") Тогда
								РеквизитШаблона = ДопРеквизит.propertySimpleValue;
							ИначеЕсли ДопРеквизит.Установлено("propertyObjectValue") Тогда
								РеквизитШаблона = ДопРеквизит.propertyObjectValue;
							КонецЕсли;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
				Иначе
					РеквизитШаблона = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Проверим, не изменилось ли значение, заданное шаблоном.
			Если ПравилоРеквизита.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
				И РеквизитШаблона = Неопределено Тогда
				
				Если Не ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищено правило заполнения реквизита %1, отсутствующего в шаблоне'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищено правило заполнения дополнительного реквизита, отсутствующего в шаблоне'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				Правило.ПравилаЗаполненияРеквизитовПриВыгрузке.Удалить(ПравилоРеквизита);
				Продолжить;
				
			КонецЕсли;
			
			Если ТипЗнч(РеквизитШаблона) = Тип("ОбъектXDTO") Тогда
				РеквизитШаблонаID = РеквизитШаблона.objectId.id;
				РеквизитШаблонаТип = РеквизитШаблона.objectId.type;
				РеквизитШаблонаЗначение = РеквизитШаблона.name;
				ЗаполненВШаблоне = ЗначениеЗаполнено(РеквизитШаблонаID);
			Иначе // примитивный тип или Неопределено
				РеквизитШаблонаID = "";
				РеквизитШаблонаТип = "";
				РеквизитШаблонаЗначение = РеквизитШаблона;
				ЗаполненВШаблоне = ЗначениеЗаполнено(РеквизитШаблона);
			КонецЕсли;
			
			// Изменилось ли значение?
			Если (ЗначениеЗаполнено(ПравилоРеквизита.ШаблонИдентификатор)
					И ПравилоРеквизита.ШаблонИдентификатор <> РеквизитШаблонаID)
				Или (Не ЗначениеЗаполнено(ПравилоРеквизита.ШаблонИдентификатор)
					И ПравилоРеквизита.ШаблонЗначение <> РеквизитШаблонаЗначение)
				Или (ПравилоРеквизита.ЗаполненВШаблоне <> ЗаполненВШаблоне) Тогда
					
				НужнаЗапись = Истина;
					
				ПравилоРеквизита.ШаблонЗначение = РеквизитШаблонаЗначение;
				ПравилоРеквизита.ШаблонИдентификатор = РеквизитШаблонаID;
				ПравилоРеквизита.ШаблонТип = РеквизитШаблонаТип;
				ПравилоРеквизита.ЗаполненВШаблоне = ЗаполненВШаблоне;
				
			КонецЕсли;
			
			// Ключевой реквизит должен быть заполнен.
			Если ПравилоРеквизита.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
				И ПравилоРеквизита.Ключевой
				И Не ЗаполненВШаблоне Тогда
				
				Если Не ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищен признак ""Ключевой"" у реквизита %1, отсутствующего в шаблоне'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищен признак ""Ключевой"" у дополнительного реквизита, отсутствующего в шаблоне'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				
				ПравилоРеквизита.Ключевой = Ложь;
				
			КонецЕсли;
			
			// Шаблон, запрещающий изменение реквизитов, не должен перекрываться правилом с другими вариантами заполнения.
			Если ШаблонЗапрещаетИзменение
				И ЗаполненВШаблоне
				И ПравилоРеквизита.ВариантПравилаЗаполненияРеквизитов <> Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона Тогда
				
				Если Не ПравилоРеквизита.ДополнительныйРеквизитДокументооборота Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлен вариант заполнения ""Из шаблона"" для реквизита %1, поскольку шаблон запрещает изменение'"),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Установлен вариант заполнения ""Из шаблона"" для дополнительного реквизита, поскольку шаблон запрещает изменение'");
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				
				ПравилоРеквизита.ВариантПравилаЗаполненияРеквизитов = Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
				ПравилоРеквизита.ЗначениеРеквизитаДокументооборота = Неопределено;
				ПравилоРеквизита.ИмяРеквизитаОбъектаПотребителя = "";
				
			КонецЕсли;
			
			НомерРеквизита = НомерРеквизита + 1;
			
		КонецЦикла;
		
		Если НужнаЗапись Тогда
			Правило.Записать();
		КонецЕсли;
		Правило.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьСтрокуТаблицыПравилВыгрузки(Таблица, Имя, Представление, Тип, ОбязательноеЗаполнение = Ложь)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда 
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	
КонецПроцедуры

// Добавляет дополнительный реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьСтрокуТаблицыПравилВыгрузкиДопРеквизита(Таблица, Представление, Тип, ДопРеквизитID, ДопРеквизитТип)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда 
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ДопРеквизит = Истина;
	НоваяСтрока.ДопРеквизитID = ДопРеквизитID;
	НоваяСтрока.ДопРеквизитТип = ДопРеквизитТип;
	
КонецПроцедуры

Процедура ДобавитьРеквизитШаблона(Прокси, Таблица, ИмяСвойстваДокумента, ШаблонXDTO,
	Знач ИмяСвойстваШаблона = Неопределено)
	
	Если ИмяСвойстваШаблона = Неопределено Тогда // по умолчанию совпадают
		ИмяСвойстваШаблона = ИмяСвойстваДокумента;
	КонецЕсли;
	
	Если Не ШаблонXDTO.Установлено(ИмяСвойстваШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяРеквизитаОбъектаДокументооборота = ИмяСвойстваДокумента;
	НоваяСтрока.ДополнительныйРеквизитДокументооборота = Ложь;
	Если ИнтеграцияС1СДокументооборот.ЭтоОбъектноеСвойство(Прокси, ШаблонXDTO, ИмяСвойстваШаблона) Тогда
		НоваяСтрока.ШаблонЗначение = ШаблонXDTO[ИмяСвойстваШаблона].name;
		НоваяСтрока.ШаблонИдентификатор = ШаблонXDTO[ИмяСвойстваШаблона].objectId.id;
		НоваяСтрока.ШаблонТип = ШаблонXDTO[ИмяСвойстваШаблона].objectId.type;
	Иначе // примитивный тип
		НоваяСтрока.ШаблонЗначение = ШаблонXDTO[ИмяСвойстваШаблона];
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если имя описывает один из примитивных типов, и Ложь в противном случае.
//
Функция ЭтоПримитивныйТип(ИмяТипа)
	
	Возврат ИмяТипа = "Строка"
			Или ИмяТипа = "Дата"
			Или ИмяТипа = "Число"
			Или ИмяТипа = "ДатаВремя"
			Или ИмяТипа = "Булево";
	
КонецФункции

#КонецОбласти

#КонецЕсли