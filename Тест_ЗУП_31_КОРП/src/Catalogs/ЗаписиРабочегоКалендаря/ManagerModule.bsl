#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ПраваДоступа

// Возвращает наименования реквизитов, необходимых для определения прав доступа.
//
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Автор, Пользователь, Связанная, Предмет";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Печать

// Процедура формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", НСтр("ru = 'Карточка записи календаря'"), ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			, "Справочник.ЗаписиРабочегоКалендаря.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки записи календаря.
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ЗаписиКалендаря = ПараметрыПечати.ЗаписиКалендаря;
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Карточка";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.СвязанныйПредмет,
		|	ЗаписиРабочегоКалендаря.Описание
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формирует массив реквизитов записей календаря и сортируем его по дате начала.
	ТаблицаРеквизитовЗаписейКалендаря = Новый ТаблицаЗначений;
	ТаблицаРеквизитовЗаписейКалендаря.Колонки.Добавить("Реквизиты");
	ТаблицаРеквизитовЗаписейКалендаря.Колонки.Добавить("ДатаНачала");
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие
			Или Выборка.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			
			РеквизитыЗаписиКалендаря = РеквизитыЗаписиКалендаря();
			ЗаполнитьЗначенияСвойств(РеквизитыЗаписиКалендаря, Выборка);
			НоваяСтрока = ТаблицаРеквизитовЗаписейКалендаря.Добавить();
			НоваяСтрока.Реквизиты = РеквизитыЗаписиКалендаря;
			НоваяСтрока.ДатаНачала = РеквизитыЗаписиКалендаря.ДатаНачала;
			
		ИначеЕсли Выборка.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
			
			ЗаписьКалендаряОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
				Если Выборка.Ссылка = ЗаписьКалендаря.Ссылка Тогда
					ДатаНачала = Неопределено;
					ЗаписьКалендаря.Свойство("ДатаНачала", ДатаНачала);
					РеквизитыЗаписиКалендаря = ЗаписьКалендаряОбъект.ПолучитьРеквизитыЗаписиКалендаря(ДатаНачала);
					НоваяСтрока = ТаблицаРеквизитовЗаписейКалендаря.Добавить();
					НоваяСтрока.Реквизиты = РеквизитыЗаписиКалендаря;
					НоваяСтрока.ДатаНачала = РеквизитыЗаписиКалендаря.ДатаНачала;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаРеквизитовЗаписейКалендаря.Сортировать("ДатаНачала");
	МассивРеквизитовЗаписейКалендаря = ТаблицаРеквизитовЗаписейКалендаря.ВыгрузитьКолонку("Реквизиты");
	
	// Получение областей макета 
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ЗаписиРабочегоКалендаря.ПФ_MXL_Карточка");
	ОбластьЗаписьКалендаря = Макет.ПолучитьОбласть("ЗаписьКалендаря");
	ОбластьПредмет = Макет.ПолучитьОбласть("Предмет");
	ОбластьПовторять = Макет.ПолучитьОбласть("Повторять");
	ОбластьРеквизитыМероприятия = Макет.ПолучитьОбласть("РеквизитыМероприятия");
	
	ПервыйДокумент = Истина;
	Для Каждого РеквизитыЗаписиКалендаря Из МассивРеквизитовЗаписейКалендаря Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Вывод записи календаря
		ОбластьЗаписьКалендаря.Параметры.Заполнить(РеквизитыЗаписиКалендаря);
		ОбластьЗаписьКалендаря.Параметры.Наименование =
			РаботаСРабочимКалендаремКлиентСервер.ВыделитьПервуюСтрокуОписания(РеквизитыЗаписиКалендаря.Описание);
		ОбластьЗаписьКалендаря.Параметры.Дата =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьПредставлениеДаты(
				РеквизитыЗаписиКалендаря.ДатаНачала,
				РеквизитыЗаписиКалендаря.ДатаОкончания, 
				РеквизитыЗаписиКалендаря.ВесьДень);
		ОбластьЗаписьКалендаря.Параметры.Пользователь = "(" + РеквизитыЗаписиКалендаря.Пользователь + ")";
		ТабличныйДокумент.Вывести(ОбластьЗаписьКалендаря);
		
		// Вывод повторения
		Если ЗначениеЗаполнено(РеквизитыЗаписиКалендаря.Повторять) Тогда
			ОбластьПовторять.Параметры.Повторять = РеквизитыЗаписиКалендаря.Повторять;
			ТабличныйДокумент.Вывести(ОбластьПовторять);
		КонецЕсли;
		
		// Вывод предмета
		Если ЗначениеЗаполнено(РеквизитыЗаписиКалендаря.Предмет) Тогда
			
			ПредставлениеПредмета = РаботаСРабочимКалендарем.ПолучитьПредставлениеПредмета(РеквизитыЗаписиКалендаря.Предмет);
			Если ЗначениеЗаполнено(ПредставлениеПредмета) Тогда
				
				ОбластьПредмет.Параметры.Предмет = ПредставлениеПредмета;
				ТабличныйДокумент.Вывести(ОбластьПредмет);
				
				РаботаСРабочимКалендаремПереопределяемый.ПриВыводеОбластиРеквизитыМероприятия(ТабличныйДокумент, ОбластьРеквизитыМероприятия, РеквизитыЗаписиКалендаря);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, РеквизитыЗаписиКалендаря.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

// Формирует HTML представление записи календаря.
//
Функция СформироватьHTMLПредставление(ЗаписьКалендаря, ДатаЗаписи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗаписьКалендаря)
		ИЛИ ТипЗнч(ЗаписьКалендаря) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	РеквизитыЗаписиКалендаря = ЗаписьКалендаряОбъект.ПолучитьРеквизитыЗаписиКалендаря(ДатаЗаписи);
	
	Если НЕ ЗначениеЗаполнено(РеквизитыЗаписиКалендаря) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	ТекстТема =
		РаботаСРабочимКалендаремКлиентСервер.ВыделитьПервуюСтрокуОписания(РеквизитыЗаписиКалендаря.Описание);
	РаботаСРабочимКалендаремКлиентСервер.ДобавитьТегиКСсылкам(ТекстТема);
	Если РеквизитыЗаписиКалендаря.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ТекстПользователь = Строка(РеквизитыЗаписиКалендаря.Пользователь);
	Иначе
		ТекстПользователь = "";
	КонецЕсли;
	ТекстВремя = Формат(РеквизитыЗаписиКалендаря.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
		+ Формат(РеквизитыЗаписиКалендаря.ДатаОкончания, "ДФ=ЧЧ:мм");
	ТекстДата = Формат(РеквизитыЗаписиКалендаря.ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	Если РеквизитыЗаписиКалендаря.ВесьДень Тогда
		ТекстДатаНачала = Формат(РеквизитыЗаписиКалендаря.ДатаНачала, "ДФ='дддд, д ММММ гггг'");
		ТекстДатаОкончания = Формат(РеквизитыЗаписиКалендаря.ДатаОкончания, "ДФ='дддд, д ММММ гггг'");
	Иначе
		ТекстДатаНачала = Формат(РеквизитыЗаписиКалендаря.ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
		ТекстДатаОкончания = Формат(РеквизитыЗаписиКалендаря.ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	КонецЕсли;
	ТекстПовторять = РеквизитыЗаписиКалендаря.Повторять;
	ТекстПредмет = РаботаСРабочимКалендаремКлиентСервер.ПолучитьСсылкуНаПредмет(РеквизитыЗаписиКалендаря.Предмет);
	
	ТекстОписание = СтрЗаменить(
		РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(РеквизитыЗаписиКалендаря.Описание), Символы.ПС, "<br>");
	РаботаСРабочимКалендаремКлиентСервер.ДобавитьТегиКСсылкам(ТекстОписание);
	
	ПредставлениеHTML =
		"<html><body topmargin=0 scroll=auto>
		|<div style='font-size=14pt;font-family=Arial;line-height:150%'>
		|<b>[Тема]</b>
		|</div>
		|<div style='font-size=12pt;font-family=Arial;top-margin:10px'>
		|<b>[НадписьПользователь]:</b> [Пользователь]<br>
		|<b>[НадписьВремя]:</b> [Время]<br>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>
		|<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>
		|<b>[НадписьПовторять]:</b> [Повторять]<br>
		|<b>[НадписьПредмет]:</b> [Предмет]<br>
		|</div>
		|<hr>
		|<div style='font-size=12pt;font-family=Arial'>
		|[Описание]
		|</div>
		|</body></html>";
	
	Если НачалоДня(РеквизитыЗаписиКалендаря.ДатаОкончания) - НачалоДня(РеквизитыЗаписиКалендаря.ДатаНачала) <> 0 Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьВремя]:</b> [Время]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	ИначеЕсли РеквизитыЗаписиКалендаря.ВесьДень Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьВремя]:</b> [Время]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	Иначе
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстПовторять) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПовторять]:</b> [Повторять]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстПредмет) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПредмет]:</b> [Предмет]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстПользователь) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПользователь]:</b> [Пользователь]<br>", "");
	КонецЕсли;
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПользователь]", НСтр("ru = 'Пользователь'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВремя]", НСтр("ru = 'Время'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДата]", НСтр("ru = 'Дата'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаНачала]", НСтр("ru = 'Дата начала'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаОкончания]", НСтр("ru = 'Дата окончания'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПовторять]", НСтр("ru = 'Повторять'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПредмет]", НСтр("ru = 'Предмет'"));
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[Пользователь]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстПользователь));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[Время]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстВремя));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[Дата]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстДата));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[ДатаНачала]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстДатаНачала));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[ДатаОкончания]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстДатаОкончания));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[Повторять]", РаботаСРабочимКалендаремКлиентСервер.ЗаменитьСпецСимволыHTML(ТекстПовторять));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Тема]", ТекстТема);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Описание]", ТекстОписание);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Предмет]", ТекстПредмет);
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает структуру реквизитов записи календаря.
// 
// Возвращаемое значение:
//  Структура - Реквизиты записи календаря.
//   * Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - ссылка на запись календаря.
//   * Наименование - Строка - первая строка описания.
//   * Описание - Строка - описание без первой строки.
//   * Пользователь - СправочникСсылка.Пользователи - пользователь.
//   * Автор - СправочникСсылка.Пользователи - автор.
//   * ДатаНачала - Дата - дата начала.
//   * ДатаОкончания - Дата - дата окончания.
//   * ВесьДень - Булево - признак того, что запись на весь день.
//   * Повторять - Строка - представление описания повторения.
//   * Предмет - ЛюбаяСсылка - ссылка на предмет записи календаря.
//
Функция РеквизитыЗаписиКалендаря(ЗаписьКалендаря = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
		РеквизитыЗаписиКалендаря = ЗаписьКалендаряОбъект.Реквизиты();
	Иначе
		РеквизитыЗаписиКалендаря = Новый Структура(
			"Ссылка, Описание, Пользователь, ДатаНачала, ДатаОкончания,
			|ВесьДень, Повторять, Предмет, СвязанныйПредмет, Наименование, Автор");
		РеквизитыЗаписиКалендаря.Повторять = "";
	КонецЕсли;
	
	Возврат РеквизитыЗаписиКалендаря;
	
КонецФункции

// Удаляет связанные записи календаря.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - предмет.
//  СвязанныйПредмет - ЛюбаяСсылка - связанный предмет.
//
Процедура УдалитьСвязанныеЗаписиКалендаря(Предмет, СвязанныйПредмет = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Предмет = &Предмет
		|	И ЗаписиРабочегоКалендаря.Связанная
		|	И &УсловиеСвязанногоПредмета
		|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления");
	
	Если ЗначениеЗаполнено(СвязанныйПредмет) Тогда
		УсловиеСвязанногоПредмета = "ЗаписиРабочегоКалендаря.СвязанныйПредмет = &СвязанныйПредмет";
	Иначе
		УсловиеСвязанногоПредмета = "Истина";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСвязанногоПредмета", УсловиеСвязанногоПредмета);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("СвязанныйПредмет", СвязанныйПредмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьСвязаннуюЗаписьКалендаря(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает связанные записи календаря.
//
// Параметры:
//  Предмет - ЛюбаяСсылка, Массив - предмет.
//  СвязанныйПредмет - ЛюбаяСсылка - связанный предмет.
//
// Возвращаемое значение:
//  ТаблицаЗначений - связанные записи календаря.
//
Функция СвязанныеЗаписиКалендаря(Предмет, СвязанныйПредмет = Неопределено) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("Массив") Тогда
		Предметы = Предмет;
	ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда
		Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
	КонецЕсли;
	
	Если ТипЗнч(СвязанныйПредмет) = Тип("Массив") Тогда
		СвязанныеПредметы = Предмет;
	ИначеЕсли ЗначениеЗаполнено(СвязанныйПредмет) Тогда
		СвязанныеПредметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СвязанныйПредмет);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка,
		|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Предмет В(&Предметы)
		|	И ЗаписиРабочегоКалендаря.Связанная
		|	И &УсловиеСвязанныхПредметов
		|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления");
	
	Если ЗначениеЗаполнено(СвязанныеПредметы) Тогда
		УсловиеСвязанныхПредметов = "ЗаписиРабочегоКалендаря.СвязанныйПредмет В (&СвязанныеПредметы)";
	Иначе
		УсловиеСвязанныхПредметов = "Истина";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСвязанныхПредметов", УсловиеСвязанныхПредметов);
	
	Запрос.УстановитьПараметр("Предметы", Предметы);
	Запрос.УстановитьПараметр("СвязанныеПредметы", СвязанныеПредметы);
	
	СвязанныеЗаписиКалендаря = Запрос.Выполнить().Выгрузить();
	
	Возврат СвязанныеЗаписиКалендаря;
	
КонецФункции

// Возвращает связанную запись календаря для указанного пользователя.
//
// Параметры:
//  Предмет - ЛюбаяСсылка, Массив - предмет.
//  Пользователь - СправочникСсылка.Пользователи - пользователь.
//
// Возвращаемое значение:
//  СправочникСсылка.ЗаписиРабочегоКалендаря - связанная запись календаря.
//
Функция СвязаннаяЗаписьКалендаря(Предмет, Знач Пользователь) Экспорт
	
	СвязаннаяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат СвязаннаяЗаписьКалендаря;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Предмет = &Предмет
		|	И ЗаписиРабочегоКалендаря.Пользователь = &Пользователь
		|	И ЗаписиРабочегоКалендаря.Связанная
		|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СвязаннаяЗаписьКалендаря = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СвязаннаяЗаписьКалендаря;
	
КонецФункции

// Создает связанную запись календаря.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - предмет.
//  ПодключатьНапоминаниеАвтоматически - Булево - подключать напоминание автоматически.
//  НеРегистрироватьСобытиеУведомления - Булево - отключает регистрацию событий уведомлений.
//  РеквизитыЗаписи - Структура - необязательный, допустимые свойства см. в описании функции РеквизитыЗаписиКалендаря.
//
Процедура СоздатьСвязаннуюЗаписьКалендаря(
	Предмет,
	ПодключатьНапоминаниеАвтоматически,
	НеРегистрироватьСобытиеУведомления = Ложь,
	РеквизитыЗаписи = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(РеквизитыЗаписи) Тогда
		ДанныеЗаполнения = РеквизитыЗаписи;
	Иначе
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Предмет", Предмет);
	ДанныеЗаполнения.Вставить("Связанная", Истина);
	
	ЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
	ЗаписьКалендаря.Заполнить(ДанныеЗаполнения);
	ЗаписьКалендаря.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
	Если НеРегистрироватьСобытиеУведомления Тогда
		ЗаписьКалендаря.ДополнительныеСвойства.Вставить("НеРегистрироватьСобытиеУведомления");
	КонецЕсли;
	ЗаписьКалендаря.Записать();
	
	Если ПодключатьНапоминаниеАвтоматически Тогда
		РаботаСРабочимКалендарем.ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаря.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет связанную запись календаря.
//
// Параметры:
//  СвязаннаяЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - связанная запись календаря.
//  Предмет - ЛюбаяСсылка - предмет.
//  РеквизитыЗаписи - Структура - необязательный, допустимые свойства см. в описании функции РеквизитыЗаписиКалендаря.
//
Процедура ОбновитьСвязаннуюЗаписьКалендаря(
	СвязаннаяЗаписьКалендаря,
	Предмет,
	РеквизитыЗаписи = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(РеквизитыЗаписи) Тогда
		ДанныеЗаполнения = РеквизитыЗаписи;
	Иначе
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Предмет", Предмет);
	
	ЗаписьКалендаря = СвязаннаяЗаписьКалендаря.ПолучитьОбъект();
	ЗаписьКалендаря.Заблокировать();
	ЗаписьКалендаря.Заполнить(ДанныеЗаполнения);
	ЗаписьКалендаря.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
	ЗаписьКалендаря.Записать();
	
КонецПроцедуры

// Удаляет связанную запись календаря.
//
// Параметры:
//  СвязаннаяЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - связанная запись календаря.
//
Процедура УдалитьСвязаннуюЗаписьКалендаря(
	СвязаннаяЗаписьКалендаря) Экспорт
	
	ЗаписьКалендаря = СвязаннаяЗаписьКалендаря.ПолучитьОбъект();
	ЗаписьКалендаря.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойЗаписи");
	ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. . Следует использовать новую (см. Справочники.ЗаписиРабочегоКалендаря.РеквизитыЗаписиКалендаря().
// Возвращает структуру реквизитов записи календаря.
Функция ПолучитьСтруктуруРеквизитовЗаписиКалендаря() Экспорт
	
	Возврат РеквизитыЗаписиКалендаря();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	// Переопределение для целей избранного - вместо карточки с настройками размещения отчета будет открываться его
	// основная форма.
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СсылкаЗаписиКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ");
		Если Не ЗначениеЗаполнено(СсылкаЗаписиКалендаря) Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыЗаписиКалендаря = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаЗаписиКалендаря, "Связанная, Предмет");
		Если Не РеквизитыЗаписиКалендаря.Связанная Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительнаяИнформация.Вставить("Предмет", РеквизитыЗаписиКалендаря.Предмет);
		
		РаботаСРабочимКалендаремПереопределяемый.ПриОбработкеПолученияФормыЗаписиРабочегоКалендаря(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

