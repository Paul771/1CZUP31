#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяЗаписьКалендаря;

&НаКлиенте
Перем ТекущаяДатаНачала;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(Параметры.ПовторяющеесяСобытие)
		И Параметры.Свойство("ДатаИсключения") И ЗначениеЗаполнено(Параметры.ДатаИсключения) Тогда
		
		ПовторяющеесяСобытие = Параметры.ПовторяющеесяСобытие;
		ПовторяющеесяСобытиеДатаИсключения = Параметры.ДатаИсключения;
		
	КонецЕсли;
	
	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	Если ИспользоватьНапоминанияПользователя Тогда 
		СрокНапоминанияПоУмолчанию =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
		УстанавливатьНапоминаниеАвтоматически =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
		ПрочитатьНапоминание();
	КонецЕсли;
	
	ПрочитатьЦвет();
	ПрочитатьОтработана();
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ПредметСтрокой = РаботаСРабочимКалендарем.ПолучитьПредставлениеПредмета(Объект.Предмет);
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ОтображатьПолеПользователь = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку(
		"ОтображатьПолеПользователь");
	ОтображатьПолеПользователь = ОтображатьПолеПользователь 
		Или Объект.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь();
	
	УстановитьВидимостьЭлементовФормы();
	
	ПроверятьОтсутствие = РаботаСРабочимКалендарем.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ОтображатьВремяС = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
	
	Элементы.Состояние.Доступность = РаботаСРабочимКалендарем.ДоступноИзменениеКалендаря(
		ТекущийПользователь, Объект.Пользователь);
	
	ИнициализироватьКалендарь();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	ВывестиДлительностьСобытия();
	ЗаполнитьСпискиВыбора();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ((УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание))
			Или (Не УстановитьНапоминание И УстановленоНапоминание)) Тогда
		ОбработатьИзменениеНапоминанияНаСервере();
		ОбработатьИзменениеНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = Объект.Ссылка
		И ПараметрыНапоминанияДокументооборота(Параметр) 
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Параметр;
		УстановитьНадписьНапоминания(
			Параметр,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = Объект.Ссылка
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Неопределено;
		УстановитьНадписьНапоминания(
			Неопределено,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		Если (ТипЗнч(Параметр) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря")
				И Параметр = Объект.Ссылка
				И Источник <> УникальныйИдентификатор)
			Или (ТипЗнч(Параметр) = Тип("Массив")
				И Параметр.Найти(Объект.Ссылка) <> Неопределено
				И Источник <> УникальныйИдентификатор) Тогда
			
			Прочитать();
			УстановитьДоступностьЭлементовФормы();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		Если Источник = УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Количество() <> 0 Тогда
				ТекущаяЗаписьКалендаря = Параметр[0];
				ТекущаяДатаНачала = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОтображениеКалендарьКлиент(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДоступноеВремяПользователя"
		Или ИмяСобытия = "Запись_ЗанятостьПользователя"
		Или ИмяСобытия = "Запись_Мероприятие"
		Или ИмяСобытия = "Запись_ДоступноеВремяПользователя"
		Или ИмяСобытия = "Запись_Отсутствие"
		Или ИмяСобытия = "Запись_НастройкиКалендаря" Тогда
		
		ОбновитьОтображениеКалендарьКлиент();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеДатыТекущейЗаписи" 
		И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		ПриИзмененииДаты(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьЦвет();
	ПрочитатьОтработана();
	ПрочитатьНапоминание();
	УстановитьПодписьПовторять();
	УстановитьВидимостьЭлементовФормы();
	ОбновитьОтображениеКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИнформацияОбОтсутствии = Неопределено;
	Если РаботаСРабочимКалендаремКлиент.ПроверитьОтсутствиеПоЗаписиРабочегоКалендаря(ЭтаФорма, Отказ, ИнформацияОбОтсутствии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
			ЭтотОбъект, ПараметрыЗаписи);
		РаботаСРабочимКалендаремКлиент.ПоказатьПредупреждениеОбОтсутствииПоЗаписиРабочегоКалендаря(
			ИнформацияОбОтсутствии, ОписаниеОповещения, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(ПовторяющеесяСобытие) И ЗначениеЗаполнено(ПовторяющеесяСобытиеДатаИсключения) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ПовторяющеесяСобытиеДатаИсключения);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УстановитьНапоминание", УстановитьНапоминание);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСРабочимКалендарем.УстановитьЦветЗаписиКалендаря(ТекущийОбъект.Ссылка, Цвет);
	РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(ТекущийОбъект.Ссылка, Отработана);
	ОбработатьИзменениеНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВыполнитьОповещениеОбИзменении();
	ОбработатьИзменениеНапоминанияНаКлиенте();
	УстановитьДоступностьЭлементовФормы();
	
	ТекстОповещения = ?(ПараметрыЗаписи.ЭтоНовыйОбъект, НСтр("ru = 'Создание:'"), НСтр("ru = 'Изменение:'"));
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПовторятьПриИзменении(Элемент)
	
	Повторять = (Объект.ТипЗаписиКалендаря =
		ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанаПриИзменении(Элемент)
	
	ПриИзмененииОтработана();
	УстановитьДоступностьЭлементовФормы();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьОповещениеОбИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	ПриИзмененииДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиент.ПриИзмененииВесьДень(
		Объект, НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, ОтображатьВремяС);
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ОбновитьОтображениеТекущейЗаписиВКалендаре();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНапоминаниеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойПриИзменении(Элемент)
	
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НСтр("ru = 'Другое...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыФормы.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
		ПараметрыФормы.Вставить("ВремяНапоминания",
			?(СпособУстановкиВремениНапоминания 
				= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"),
				ВремяНапоминания,
				Объект.ДатаНачала));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнтервалВремениСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.НастройкаНапоминания", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ИнтервалВремениСтрокой <> ВыбранноеЗначение Тогда
		
		ИзмененоНапоминание = Истина;
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СпособУстановкиВремениНапоминания
		= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ИнтервалВремениСтрокой <> Результат.ИнтервалВремениСтрокой Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ИнтервалВремениСтрокой = Результат.ИнтервалВремениСтрокой;
		ВремяНапоминания = Дата(1,1,1);
		
	ИначеЕсли Результат.СпособУстановкиВремениНапоминания =
		ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ВремяНапоминания <> Результат.ВремяНапоминания Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ВремяНапоминания = Результат.ВремяНапоминания;
		ИнтервалВремениСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в %2 %1'"),
				Формат(ВремяНапоминания, "ДЛФ=D"),
				Формат(ВремяНапоминания, "ДФ=ЧЧ:мм"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторятьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ПроверитьОтсутствие = Истина;
	
	Если РаботаСРабочимКалендаремВызовСервера.ДоступноИзменениеКалендаря(ТекущийПользователь, Объект.Пользователь) Тогда
		Элементы.Состояние.Доступность = Истина;
	Иначе
		Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом");
		Элементы.Состояние.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ОбновитьОтображениеКалендарьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ВыбратьПользователяЗаписиРабочегоКалендаря(Элемент, Объект.Пользователь, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланДня

&НаКлиенте
Процедура ПланДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаВыбораПланДня(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаНачалаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, Выполнение, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломДобавленияПланДня(
		Элемент, Отказ, Копирование, Родитель, Группа, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломИзмененияПланДня(Элементы.ПланДня, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередУдалением(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередУдалениемПланДня(Элементы.ПланДня, ПланДня, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПриАктивизацииСтроки(Элемент)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаАктивизацииОбластиПланДня(
		Элемент, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПроверкиПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПланировщика

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаВыбораЭлемента(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ПланировщикПередНачаломБыстрогоРедактирования(Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломРедактированиемЭлемента(Элемент,
		НовыйЭлемент, СтандартнаяОбработка, Объект.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередСозданием(
		Элемент,
		Начало,
		Конец,
		Значения,
		Текст,
		СтандартнаяОбработка,
		Ложь,
		Объект.Пользователь,
		НастройкиОтображения,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередУдалениемЭлемента(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПриАктивизации(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаОкончанияРедактированияЭлемента(
		Элемент, НовыйЭлемент, ОтменаРедактирования,
		Планировщик, НастройкиОтображения, УникальныйИдентификатор, Объект.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКалендарь(Команда)
	
	ПоказатьКалендарьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкаУдаления(Команда)
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкаУдаленияЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для установки отметки удаления необходимо записать внесенные изменения. Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкуУдаления(Объект.Ссылка, НЕ Объект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкаУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкуУдаления(Объект.Ссылка, НЕ Объект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПолеПользователь(Команда)
	
	ОтображатьПолеПользователь = Не ОтображатьПолеПользователь;
	ОтображатьПолеПользовательСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПланДня(Команда)
	
	РаботаСРабочимКалендаремКлиент.ОтработатьВыделенныеЗаписиКалендаряПланДня(Элементы.ПланДня, ПланДня);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПланировщик(Команда)
	
	РаботаСРабочимКалендаремКлиент.ОтработатьВыделенныеЗаписиКалендаря(Элементы.Планировщик);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтыйКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленыйКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасныйКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНетКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевыйКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСинийКалендарь(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЦветСобытияРабочегоКалендаря(Цвет)
	
	Если ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		РаботаСРабочимКалендаремКлиент.ОбработкаИзмененияЦветаПланДня(Элементы.ПланДня, ПланДня, Цвет);
	Иначе
		РаботаСРабочимКалендаремКлиент.ОбработкаИзмененияЦвета(Элементы.Планировщик, Цвет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	РаботаСРабочимКалендарем.УстановитьУсловноеОформлениеПланДня(УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты(ИзменятьДатуНачалаИОкончания = Истина)
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала,
		Объект.ДатаОкончания,
		Объект.ВесьДень,
		НачальноеЗначениеДатаНачала,
		НачальноеЗначениеДатаОкончания,,,,,
		ИзменятьДатуНачалаИОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ОбновитьОтображениеТекущейЗаписиВКалендаре();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКалендарьНаСервере()
	
	ПоказыватьКалендарь = Не ПоказыватьКалендарь;
	РаботаСРабочимКалендарем.УстановитьПерсональнуюНастройку(
		"ОтображатьКалендарьВЗаписиКалендаря", ПоказыватьКалендарь);
	ИнициализироватьКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьПолеПользовательСервер()
	
	РаботаСРабочимКалендарем.УстановитьПерсональнуюНастройку(
		"ОтображатьПолеПользователь", ОтображатьПолеПользователь);
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ДатаНачалаВремя.Видимость = Не Объект.ВесьДень;
	Элементы.ДатаОкончанияВремя.Видимость = Не Объект.ВесьДень;
	Элементы.Повторять.Видимость =
		Не Объект.ПометкаУдаления
		И Объект.ТипЗаписиКалендаря <> ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия")
		И Не ТолькоПросмотр;
	
	Если ИспользоватьНапоминанияПользователя Тогда
		Элементы.ИнтервалВремениСтрокой.Доступность = УстановитьНапоминание;
		Элементы.ГруппаНапоминаниеОтносительноДатыНачала.Видимость = Не Объект.ПометкаУдаления;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	ТолькоПросмотр = Объект.Связанная;
	Если Не ТолькоПросмотр И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоПросмотр = Не РаботаСРабочимКалендарем.ДоступноИзменениеЗаписиРабочегоКалендаря(Объект.Ссылка);
	КонецЕсли;
	
	Элементы.Состояние.Видимость =
		(Объект.Состояние <> Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято)
		Или ОтображатьПолеПользователь;
	
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Объект.Предмет);
	Элементы.ПовторениеСтрокой.Видимость = Повторять;
	Элементы.Пользователь.Видимость = ОтображатьПолеПользователь;
	Элементы.ФормаОтображатьПолеПользователь.Пометка = ОтображатьПолеПользователь;
	Элементы.Автор.Видимость = Объект.Пользователь <> Объект.Автор;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ТолькоПросмотр;
	Элементы.ФормаЗаписать.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаУстановитьПометкаУдаления.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаЗакрыть.Видимость = ТолькоПросмотр;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = ТолькоПросмотр;
	
	Элементы.ФормаОтображатьПолеПользователь.Пометка = ОтображатьПолеПользователь;
	
	Элементы.Повторять.Видимость =
		Не Объект.ПометкаУдаления
		И Объект.ТипЗаписиКалендаря <> Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия
		И Не ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодписьПовторять()
	
	Повторять = (Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие);
	Если Повторять Тогда
		НастройкиПовторения = ПолучитьНастройкиПовторения();
		ПовторениеСтрокой =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьСобытия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
	
	Если Объект.ВесьДень Тогда
		ДлительностьСек = ДлительностьСек + 1;
	КонецЕсли;
	
	Дней = Цел(ДлительностьСек / 86400); // 86400 - число секунд в сутках
	ПредставлениеДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 день;;%1 дня;%1 дней;'"), Дней);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600); // 86400 - число секунд в сутках
	ПредставлениеЧасов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 час;;%1 часа;%1 часов;'"), Часов);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60); // 86400 - число секунд в сутках
	ПредставлениеМинут = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;'"), Минут);
	
	Если Дней > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + ПредставлениеДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + ПредставлениеЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 ИЛИ Часов > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + ПредставлениеМинут;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	// Заполнение списка выбора даты начала
	Элементы.ДатаНачалаВремя.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		ТекДата = НачалоДня(Объект.ДатаНачала);
	Иначе
		ТекДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаНачала > ТекДата И Объект.ДатаНачала < ТекДата + 1800 Тогда
			Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(Объект.ДатаНачала, Формат(Объект.ДатаНачала, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	// Заполнение списка выбора даты окончания
	Элементы.ДатаОкончанияВремя.СписокВыбора.Очистить();
	
	СобытиеВПределахОдногоДня = ЗначениеЗаполнено(Объект.ДатаНачала)
		И (НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания))
		И Объект.ДатаНачала < Объект.ДатаОкончания;
	
	Если СобытиеВПределахОдногоДня Тогда
		
		ТекДата = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(Объект.ДатаНачала);
		Если Объект.ДатаОкончания > ТекДата - 1800 И Объект.ДатаОкончания < ТекДата Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекДата = НачалоДня(Объект.ДатаОкончания);
	Иначе
		ТекДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Если СобытиеВПределахОдногоДня И ТекДата > КонецДня(Объект.ДатаНачала) Тогда
			Прервать;
		КонецЕсли;
		
		Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаОкончания > ТекДата И Объект.ДатаОкончания < ТекДата + 1800 Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, "00:00");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНапоминанияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНапоминания(
	Напоминание,
	УстановитьНапоминание,
	УстановленоНапоминание,
	СрокНапоминанияПоУмолчанию,
	ИнтервалВремениСтрокой,
	СпособУстановкиВремениНапоминания,
	ВремяНапоминания)
	
	Если Напоминание <> Неопределено Тогда
		
		УстановитьНапоминание = Истина;
		УстановленоНапоминание = Истина;
		
		Если Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			
			ИнтервалВремениСтрокой =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в %2 %1'"),
					Формат(Напоминание.ВремяСобытия, "ДЛФ=D"),
					Формат(Напоминание.ВремяСобытия, "ДФ=ЧЧ:мм"));
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя");
			ВремяНапоминания = Напоминание.ВремяСобытия;
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			
			Если Напоминание.ИнтервалВремениНапоминания >= 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
				
				ИнтервалВремениСтрокой = РаботаСРабочимКалендаремКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания);
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания <> 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1 до окончания'"),
					НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания));
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания = 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = НСтр("ru = 'при окончании события'");
				
			КонецЕсли;
			
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
			ВремяНапоминания = Дата(1,1,1);
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			
			ИнтервалВремениСтрокой = НСтр("ru = 'по заданному расписанию'");
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьНапоминание = Ложь;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = РаботаСРабочимКалендаремКлиентСервер.ПредставлениеВремени(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНапоминанияДокументооборота(ПараметрыНапоминания)
	
	Если ПараметрыНапоминания.Свойство("Пользователь")
		И ПараметрыНапоминания.Свойство("Источник")
		И ПараметрыНапоминания.Свойство("ВремяСобытия")
		И ПараметрыНапоминания.Свойство("СпособУстановкиВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИнтервалВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИмяРеквизитаИсточника") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИнтервалыНапоминания()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Очистить();
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'при наступлении события'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 5 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 10 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 15 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 30 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 1 час'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 2 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 3 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'Другое...'"));
		
		Если Элементы.ИнтервалВремениСтрокой.СписокВыбора.НайтиПоЗначению(ИнтервалВремениСтрокой) = Неопределено Тогда
			Элементы.ИнтервалВремениСтрокой.СписокВыбора.Вставить(0, ИнтервалВремениСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНапоминание()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		ИзмененоНапоминание = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(Объект.Ссылка);
			УстановитьНадписьНапоминания(
				Напоминание,
				УстановитьНапоминание,
				УстановленоНапоминание,
				СрокНапоминанияПоУмолчанию,
				ИнтервалВремениСтрокой,
				СпособУстановкиВремениНапоминания,
				ВремяНапоминания);
			
		Иначе
			
			УстановитьНапоминание = УстанавливатьНапоминаниеАвтоматически;
			УстановленоНапоминание = Ложь;
			ИнтервалВремениСтрокой = РаботаСРабочимКалендаремКлиентСервер.ПредставлениеВремени(СрокНапоминанияПоУмолчанию * 60);
			СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПовторения()
	
	ПовторениеПоДнямНедели = ПолучитьПовторениеПоДнямНедели();
	ПовторениеПоДнямНеделиВМесяце = Неопределено;
	
	Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно
		И НЕ ЗначениеЗаполнено(Объект.ПовторениеПоДнямМесяца) И Объект.ПовторениеПоДням.Количество() = 1 Тогда
		
		ПовторениеПоДнямНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
		ЗаполнитьЗначенияСвойств(ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоДням[0]);
		
	КонецЕсли;
	
	НастройкиПовторения = РаботаСРабочимКалендаремКлиентСервер.НовыеНастройкиПовторения(
		Объект.ЧастотаПовторения, Объект.ИнтервалПовторения, Объект.ПравилоОкончанияПовторения,
		Объект.КоличествоПовторов, Объект.ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		Объект.ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

&НаСервере
Функция ПолучитьПовторениеПоДнямНедели()
	
	ПовторениеПоДням = Новый Соответствие;
	Для ИндексПовторениеПоДням = 1 По 7 Цикл
		
		Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДеньНедели", ИндексПовторениеПоДням);
			ПараметрыОтбора.Вставить("НомерВхождения", 0);
			НайденныеСтроки = Объект.ПовторениеПоДням.НайтиСтроки(ПараметрыОтбора); 
			
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, НайденныеСтроки.Количество() <> 0);
			
		Иначе
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторениеПоДням;
	
КонецФункции

&НаСервере
Процедура ПрочитатьЦвет()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Цвет = РаботаСРабочимКалендарем.ПолучитьЦветСобытияКалендаря(Параметры.ЗначениеКопирования);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура")
		И Параметры.Основание.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(Параметры.Основание.ПовторяющеесяСобытие) Тогда
		
		Цвет = РаботаСРабочимКалендарем.ПолучитьЦветСобытияКалендаря(Параметры.Основание.ПовторяющеесяСобытие);
		
	Иначе
		
		Цвет = РаботаСРабочимКалендарем.ПолучитьЦветСобытияКалендаря(Объект.Ссылка);
		
	КонецЕсли;
	
	УстановитьПометкуКомандЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦвета()
	
	УстановитьПометкуКомандЦвета();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСРабочимКалендарем.УстановитьЦветЗаписиКалендаря(Объект.Ссылка, Цвет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКомандЦвета()
	
	Элементы.УстановитьЦветКрасный.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный);
	Элементы.УстановитьЦветСиний.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий);
	Элементы.УстановитьЦветЖелтый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый);
	Элементы.УстановитьЦветЗеленый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый);
	Элементы.УстановитьЦветОранжевый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый);
	Элементы.УстановитьЦветНет.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОповещениеОбИзменении()
	
	ИзмененныеЗаписиКалендаря = Новый Массив;
	ИзмененныеЗаписиКалендаря.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПовторяющеесяСобытие) И ЗначениеЗаполнено(ПовторяющеесяСобытиеДатаИсключения) Тогда
		ИзмененныеЗаписиКалендаря.Добавить(ПовторяющеесяСобытие);
		ПовторяющеесяСобытие = Неопределено;
		ПовторяющеесяСобытиеДатаИсключения = Неопределено;
	КонецЕсли;
	Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(НовыйЦвет)
	
	Если Цвет = НовыйЦвет Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = НовыйЦвет;
	ПриИзмененииЦвета();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьОповещениеОбИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтработана()
	
	Если Отработана Тогда
		УстановитьНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(Объект.Ссылка, Отработана);
	КонецЕсли;
	ПриИзмененииЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНапоминанияНаСервере()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание) Тогда
		
		// Отключение старого напоминания, если оно было установлено ранее
		Если УстановленоНапоминание И (ИзмененоНапоминание Или ИзмененоВремя) Тогда
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
			НапоминаниеСтарое = Напоминание;
			Напоминание = Неопределено;
			ИзмененоНапоминание = Ложь;
			ИзмененоВремя = Ложь;
		КонецЕсли;
		
		Если СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
			// Подключение напоминания относительно времени предмета
			ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
			Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминаниеДоВремениПредмета(
				Строка(Объект.Ссылка), ИнтервалВремениНапоминания, Объект.Ссылка, "ДатаНачала");
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		ИначеЕсли СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
			// Подключение напоминания в указанное время
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(
				Строка(Объект.Ссылка), ВремяНапоминания, , Объект.Ссылка);
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не УстановитьНапоминание И УстановленоНапоминание Тогда
		
		// Отключение старого напоминания
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание);
		НапоминаниеСтарое = Напоминание;
		Напоминание = Неопределено;
		УстановленоНапоминание = Ложь;
		
	КонецЕсли;
	
	УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
		СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
		СпособУстановкиВремениНапоминания, ВремяНапоминания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНапоминанияНаКлиенте()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьЗаписьВКешеНапоминаний Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
		ОбновитьЗаписьВКешеНапоминаний = Ложь;
	ИначеЕсли НапоминаниеСтарое <> Неопределено Тогда
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(НапоминаниеСтарое);
		Оповестить("Удаление_НапоминанияПользователя_Документооборот", , НапоминаниеСтарое.Источник);
		НапоминаниеСтарое = Неопределено;
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтработана()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Отработана = РаботаСРабочимКалендарем.ЗаписьКалендаряОтработана(Объект.Ссылка);
	Элементы.Описание.ОтображениеПредупрежденияПриРедактировании = ?(Отработана,
		ОтображениеПредупрежденияПриРедактировании.Отображать,
		ОтображениеПредупрежденияПриРедактировании.НеОтображать);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКалендарь()
	
	ПоказыватьКалендарь = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ОтображатьКалендарьВЗаписиКалендаря");
	Если ПоказыватьКалендарь Тогда
		КлючСохраненияПоложенияОкна = "СКалендарем";
	Иначе
		КлючСохраненияПоложенияОкна = "БезКалендаря";
	КонецЕсли;
	
	Элементы.ГруппаКалендарь.Видимость = ПоказыватьКалендарь;
	Элементы.ФормаПоказатьКалендарь.Пометка = ПоказыватьКалендарь;
	Элементы.ГруппаЗаписьКалендаря.РастягиватьПоГоризонтали = Не ПоказыватьКалендарь;
	
	НастройкиОтображения = РаботаСРабочимКалендарем.ПолучитьНастройкиОтображения();
	ОбновитьОтображениеКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтображения()
	
	НастройкиОтображения.Пользователи.Очистить();
	НастройкиОтображения.Пользователи.Добавить(Объект.Пользователь);
	НастройкиОтображения.ОтобразитьТекущуюЗапись = Истина;
	НастройкиОтображения.ЗапретСоздания = Истина;
	НастройкиОтображения.ПланДняСкрытьПустые = Истина;
	НастройкиОтображения.ТекущаяЗаписьСсылка = Объект.Ссылка;
	НастройкиОтображения.ТекущаяЗаписьДатаНачала = Объект.ДатаНачала;
	НастройкиОтображения.ТекущаяЗаписьДатаОкончания = Объект.ДатаОкончания;
	НастройкиОтображения.ТекущаяЗаписьВесьДень = Объект.ВесьДень;
	
	НачалоОтображаемогоПериода = НачалоДня(Объект.ДатаНачала);
	ОтображаемаяДата = НачалоОтображаемогоПериода;
	КонецОтображаемогоПериода = НачалоДня(Объект.ДатаОкончания);
	ОтображаемыйПериод = (КонецОтображаемогоПериода - НачалоОтображаемогоПериода) / 86400 + 1;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты.Очистить();
	КоличествоДат = 0;
	Пока ОтображаемаяДата <= КонецОтображаемогоПериода Цикл
		НастройкиОтображения.ВыделенныеДаты.Добавить(ОтображаемаяДата);
		ОтображаемаяДата = ОтображаемаяДата + 86400;
		КоличествоДат = КоличествоДат + 1;
		Если КоличествоДат > 31 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтображаемыйПериод <= 3 Тогда
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		Элементы.ГруппаКалендарь.ТекущаяСтраница = Элементы.ГруппаПланировщик;
	Иначе
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня");
		Элементы.ГруппаКалендарь.ТекущаяСтраница = Элементы.ГруппаПланДня;
	КонецЕсли;
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	
	Если Не ЗначениеЗаполнено(НастройкиОтображения.ТекущаяЗаписьСсылка) И ЗначениеЗаполнено(ПовторяющеесяСобытие) Тогда
		НастройкиОтображения.ТекущаяЗаписьСсылка = ПовторяющеесяСобытие;
	КонецЕсли;
	НастройкиОтображения.ИсключенияЗанятости.Добавить(НастройкиОтображения.ТекущаяЗаписьСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОтображенияКлиент()
	
	НастройкиОтображения.Пользователи.Очистить();
	НастройкиОтображения.Пользователи.Добавить(Объект.Пользователь);
	НастройкиОтображения.ОтобразитьТекущуюЗапись = Истина;
	НастройкиОтображения.ЗапретСоздания = Истина;
	НастройкиОтображения.ПланДняСкрытьПустые = Истина;
	НастройкиОтображения.ТекущаяЗаписьСсылка = Объект.Ссылка;
	НастройкиОтображения.ТекущаяЗаписьДатаНачала = Объект.ДатаНачала;
	НастройкиОтображения.ТекущаяЗаписьДатаОкончания = Объект.ДатаОкончания;
	НастройкиОтображения.ТекущаяЗаписьВесьДень = Объект.ВесьДень;
	
	НачалоОтображаемогоПериода = НачалоДня(Объект.ДатаНачала);
	ОтображаемаяДата = НачалоОтображаемогоПериода;
	КонецОтображаемогоПериода = НачалоДня(Объект.ДатаОкончания);
	ОтображаемыйПериод = (КонецОтображаемогоПериода - НачалоОтображаемогоПериода) / 86400 + 1;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты.Очистить();
	КоличествоДат = 0;
	Пока ОтображаемаяДата <= КонецОтображаемогоПериода Цикл
		НастройкиОтображения.ВыделенныеДаты.Добавить(ОтображаемаяДата);
		ОтображаемаяДата = ОтображаемаяДата + 86400;
		КоличествоДат = КоличествоДат + 1;
		Если КоличествоДат > 31 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтображаемыйПериод <= 3 Тогда
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		Элементы.ГруппаКалендарь.ТекущаяСтраница = Элементы.ГруппаПланировщик;
	Иначе
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня");
		Элементы.ГруппаКалендарь.ТекущаяСтраница = Элементы.ГруппаПланДня;
	КонецЕсли;
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	
	Если Не ЗначениеЗаполнено(НастройкиОтображения.ТекущаяЗаписьСсылка) И ЗначениеЗаполнено(ПовторяющеесяСобытие) Тогда
		НастройкиОтображения.ТекущаяЗаписьСсылка = ПовторяющеесяСобытие;
	КонецЕсли;
	НастройкиОтображения.ИсключенияЗанятости.Добавить(НастройкиОтображения.ТекущаяЗаписьСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКалендарь()
	
	Если Не ПоказыватьКалендарь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Элементы.Планировщик.Доступность = Ложь;
		Элементы.ПланДня.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Планировщик.Доступность = Истина;
	Элементы.ПланДня.Доступность = Истина;
	
	ОбновитьНастройкиОтображения();
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		ПланДняЗначение = РеквизитФормыВЗначение("ПланДня");
		РаботаСРабочимКалендарем.ОтобразитьПланДня(ПланДняЗначение, НастройкиОтображения);
		ЗначениеВРеквизитФормы(ПланДняЗначение, "ПланДня");
	Иначе
		РаботаСРабочимКалендарем.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКалендарьКлиент(Параметр = Неопределено)
	
	Если Не ПоказыватьКалендарь Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр <> Неопределено
		И ПериодОтображения <>
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		РаботаСРабочимКалендаремКлиент.ОбновитьЗаписиКалендаряВПланировщике(
			Планировщик,
			НастройкиОтображения,
			Параметр);
		ОбновитьОтображениеТекущейЗаписиВКалендаре();
		Возврат;
	КонецЕсли;
	
	СвернутыеЭлементы = РаботаСРабочимКалендаремКлиент.ПолучитьСвернутыеЭлементыПланаДня(
		Элементы.ПланДня, ПланДня);
	ОбновитьОтображениеКалендарь();
	РаботаСРабочимКалендаремКлиент.ВосстановитьСостояниеПланаДня(
		Элементы.ПланДня, ПланДня, СвернутыеЭлементы, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеТекущейЗаписиВКалендаре()
	
	Если Не ПоказыватьКалендарь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Элементы.Планировщик.Доступность = Ложь;
		Элементы.ПланДня.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Планировщик.Доступность = Истина;
	Элементы.ПланДня.Доступность = Истина;
	
	СтарыйПериодОтображения = ПериодОтображения;
	ОбновитьНастройкиОтображенияКлиент();
	Если ПериодОтображения <> СтарыйПериодОтображения Тогда
		ОбновитьОтображениеКалендарьКлиент();
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		РаботаСРабочимКалендаремКлиентСервер.ОбновитьТекущуюЗапись(Планировщик, НастройкиОтображения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти