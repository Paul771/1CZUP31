#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОтображаемаяДата = НачалоДня(ТекущаяДатаСеанса());
	ПериодОтображения = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку(
		"ПериодОтображенияРабочегоКалендаря");
	ОтображатьЛегенду = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку(
		"ОтображатьЛегенду");
	
	УстановитьГрафикРаботы();
	УстановитьАвтообновление();
	УстановитьВариантРаботыФормы();
	
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаСегодня = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	УстановитьДоступностьЭлементов();
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
	ПланировщикПриАктивизации(Элементы.Планировщик, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		Если Источник = УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			Если Параметр.Количество() <> 0 Тогда
				ТекущаяЗаписьКалендаря = Параметр[0];
				ТекущаяДатаНачала = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьОтображениеКлиент(Параметр);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДоступноеВремяПользователя"
		Или ИмяСобытия = "Запись_ЗанятостьПользователя"
		Или ИмяСобытия = "Запись_Мероприятие"
		Или ИмяСобытия = "Запись_ДоступноеВремяПользователя"
		Или ИмяСобытия = "Запись_Отсутствие" Тогда
		
		ОбновитьОтображениеКлиент();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НастройкиКалендаря" Тогда
		ОбновитьОтображениеКлиент(,, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент)
	
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	
	ОбновитьДанныеКалендаря("ПериодОтображения");
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)
	
	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	ОбновитьНастройкиОтображения();
	
	ОбновитьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриАктивизацииДаты(Элемент)
	
	Если Элемент.ВыделенныеДаты.Количество() = ВыделенныеДаты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеДаты.ЗагрузитьЗначения(Элемент.ВыделенныеДаты);
	Если ВыделенныеДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ВыделенныеДаты.НайтиПоЗначению(ОтображаемаяДата) = Неопределено Тогда
		ОтображаемаяДата = ВыделенныеДаты[ВыделенныеДаты.Количество() - 1].Значение;
	КонецЕсли;
	ОбновитьНастройкиОтображения();
	
	ОбновитьДанныеКалендаря("ПериодОтображения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если Не ЗаданГрафикРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		
		Если ЗаполненныеГода.НайтиПоЗначению(Год(СтрокаОформленияПериода.Дата)) = Неопределено Тогда
			РаботаСРабочимКалендаремВызовСервера.ЗаполнитьРабочиеДни(
				РабочиеДни, ЗаполненныеГода, СтрокаОформленияПериода.Дата);
		КонецЕсли;
		
		СтрокаРабочиеДни = РабочиеДни.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		Если СтрокаРабочиеДни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабочиеДни.Пометка Тогда
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		Иначе
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, ВыбраннаяДата)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ЭлементПланировщика") Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Структура") Тогда
		СтандартнаяОбработка =
			Не РаботаСРабочимКалендаремКлиентСервер.ЭтоЭлементЗаписиКалендаря(
				ПараметрыПеретаскивания.Значение[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПеретаскивание(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, ВыбраннаяДата)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ЭлементПланировщика") Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.ПеренестиЭлементыПланировщикаНаДату(
			Элементы.Планировщик, Планировщик, НастройкиОтображения,
			ПараметрыПеретаскивания.Значение, ВыбраннаяДата, УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Структура") Тогда
		
		Если Не РаботаСРабочимКалендаремКлиентСервер.ЭтоЭлементЗаписиКалендаря(
				ПараметрыПеретаскивания.Значение[0]) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.ПеренестиЭлементыЗаписейКалендаряНаДату(
			ПараметрыПеретаскивания.Значение, ВыбраннаяДата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиКалендаряНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьКалендарьПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиКалендаряПриИзменении(Элемент)
	
	ОбновитьНастройкиОтображения();
	ЗавершениеВыбратьКалендарьПользователяСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПустоНажатие(Элемент)
	
	ВыбратьКалендарьПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКалендаря

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПриАктивизации(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередСозданием(
		Элемент,
		Начало,
		Конец,
		Значения,
		Текст,
		СтандартнаяОбработка,
		ИспользоватьБыстроеРедактирование,
		ПользовательКалендаря,
		НастройкиОтображения,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаВыбораЭлемента(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаОкончанияРедактированияЭлемента(
		Элемент, НовыйЭлемент, ОтменаРедактирования,
		Планировщик, НастройкиОтображения, УникальныйИдентификатор, ПользовательКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломРедактированиемЭлемента(Элемент,
		НовыйЭлемент, СтандартнаяОбработка, ПользовательКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередУдалениемЭлемента(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ПланировщикПередНачаломБыстрогоРедактирования(Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланДня

&НаКлиенте
Процедура ПланДняПриАктивизацииСтроки(Элемент)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаАктивизацииОбластиПланДня(
		Элемент, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаВыбораПланДня(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломДобавленияПланДня(
		Элемент, Отказ, Копирование, Родитель, Группа, НастройкиОтображения, ПользовательКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередНачаломИзмененияПланДня(Элементы.ПланДня, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередУдалением(Элемент, Отказ)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПередУдалениемПланДня(Элементы.ПланДня, ПланДня, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаНачалаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, Выполнение, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПроверкиПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	РаботаСРабочимКалендаремКлиент.ОбработкаПеретаскиванияПланДня(
		Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отработать(Команда)
	
	РаботаСРабочимКалендаремКлиент.ОтработатьВыделенныеЗаписиКалендаря(Элементы.Планировщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПланДня(Команда)
	
	РаботаСРабочимКалендаремКлиент.ОтработатьВыделенныеЗаписиКалендаряПланДня(Элементы.ПланДня, ПланДня);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда)
	
	ОбновитьОтображениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиКалендаря(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.НастройкиКалендаря");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредыдущийПериод(Команда)
	
	УстановитьОтображаемуюДату(
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(
			ПериодОтображения, ОтображаемаяДата));
	
	ОбновитьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСегодня(Команда)
	
	УстановитьОтображаемуюДату(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ОбновитьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСледующийПериод(Команда)
	
	УстановитьОтображаемуюДату(
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(
			ПериодОтображения, ОтображаемаяДата));
	
	ОбновитьДанныеКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если ПериодОтображения <>
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		ВыделенныеЭлементы =
			РаботаСРабочимКалендаремКлиент.ВыделенныеЭлементы(Элементы.Планировщик);
	Иначе
		ВыделенныеЭлементы =
			РаботаСРабочимКалендаремКлиент.ВыделенныеЭлементыПланДня(
				Элементы.ПланДня, ПланДня, Истина);
	КонецЕсли;
	РаботаСРабочимКалендаремКлиент.Печать(ВыделенныеЭлементы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЛегенду(Команда)
	
	СкрытьЛегендуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗанятость(Команда)
	
	Если ОтображаемаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		РаботаСРабочимКалендаремКлиент.СоздатьЗанятость();
		Возврат;
	КонецЕсли;
	
	ДатаНачалаНовойЗаписи = ОтображаемаяДата + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	РаботаСРабочимКалендаремКлиент.СоздатьЗанятость(ДатаНачалаНовойЗаписи,
		ДатаОкончанияНовойЗаписи, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаря(Команда)
	
	Если ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаряПланДня(
			Элементы.ПланДня, НастройкиОтображения, ПользовательКалендаря);
	Иначе
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаряПланировщик(
			НастройкиОтображения, ПользовательКалендаря);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(
		ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗавершениеВыбратьКалендарьПользователяСервер()
	
	РаботаСРабочимКалендарем.УстановитьПерсональнуюНастройку(
		"ТекущиеКалендариВсеКалендари", ПользователиКалендаря.ВыгрузитьЗначения());
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаЛегенда.Видимость = ОтображатьЛегенду;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Если ПериодОтображения =
		ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Элементы.ГруппаОписаниеЛегенды.Доступность = Ложь;
		
	Иначе
		
		Элементы.ГруппаОписаниеЛегенды.Доступность = 
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЛегендуСервер()
	
	ОтображатьЛегенду = Ложь;
	РаботаСРабочимКалендарем.УстановитьПерсональнуюНастройку("ОтображатьЛегенду", Ложь);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтообновление()
	
	НастройкиАвтообновления = ИнтеграцияС1СДокументооборотВызовСервера.НастройкиАвтообновленияФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработкаАвтообновления", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвтообновления()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	Иначе
		
		Если ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			
			ОбновитьОтображениеКлиент();
			
		Иначе
			
			ОбновитьДанныеКалендаря();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГрафикРаботы()
	
	ЗаданГрафикРаботы = РаботаСРабочимКалендарем.ЗаданГрафикРаботыПользователя(ПользователиКлиентСервер.ТекущийПользователь(), ОтображаемаяДата);
	
	Если ЗаданГрафикРаботы Тогда
		РаботаСРабочимКалендарем.ЗаполнитьРабочиеДни(РабочиеДни, ЗаполненныеГода, ОтображаемаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Очистить();
	ОтображаемаяДата = НоваяОтображаемаяДата;
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	ВыделенныеДаты.ЗагрузитьЗначения(Элементы.ОтображаемаяДата.ВыделенныеДаты);
	
	ОбновитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСобытияРабочегоКалендаря(Цвет)
	
	Если ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		РаботаСРабочимКалендаремКлиент.ОбработкаИзмененияЦветаПланДня(Элементы.ПланДня, ПланДня, Цвет);
	Иначе
		РаботаСРабочимКалендаремКлиент.ОбработкаИзмененияЦвета(Элементы.Планировщик, Цвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКлиент(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройкиАвтообновления = Ложь)
	
	ДатаСегодня = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если Параметр <> Неопределено
		И ПериодОтображения <>
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		РаботаСРабочимКалендаремКлиент.ОбновитьЗаписиКалендаряВПланировщике(
			Планировщик, НастройкиОтображения, Параметр);
		Возврат;
		
	КонецЕсли;
	
	СвернутыеЭлементы = РаботаСРабочимКалендаремКлиент.ПолучитьСвернутыеЭлементыПланаДня(
		Элементы.ПланДня, ПланДня);
	ОбновитьОтображениеСервер(Параметр, ИзмененнаяНастройка, ОбновитьНастройкиАвтообновления);
	РаботаСРабочимКалендаремКлиент.ВосстановитьСостояниеПланаДня(
		Элементы.ПланДня, ПланДня, СвернутыеЭлементы, ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
	#Если Не ВебКлиент Тогда
		Если ОбновитьНастройкиАвтообновления Тогда
			УстановитьАвтообновлениеФормы();
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКалендаря(ИзмененнаяНастройка = Неопределено)
	
	Если ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ОбновитьОтображениеКлиент(, ИзмененнаяНастройка);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.ОбновитьОтображениеПланировщика(
			Планировщик, НастройкиОтображения, ИзмененнаяНастройка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСервер(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройкиАвтообновления = Ложь)
	
	РаботаСРабочимКалендарем.СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	НастройкиОтображения = РаботаСРабочимКалендарем.ПолучитьНастройкиОтображения();
	НастройкиОтображения.Пользователи.Очистить();
	Для Каждого ОчереднойПользователь Из ПользователиКалендаря Цикл
		НастройкиОтображения.Пользователи.Добавить(ОчереднойПользователь.Значение);
	КонецЦикла;
	Если ПользователиКалендаря.Количество() = 1 Тогда
		ПользовательКалендаря = ПользователиКалендаря[0].Значение;
	Иначе
		ПользовательКалендаря = Неопределено;
	КонецЕсли;
	Если ПользователиКалендаря.Количество() > 1 Тогда
		НастройкиОтображения.ОтображатьЗанятость = Ложь;
	КонецЕсли;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	
	УстановитьТекущуюСтраницу(Элементы, ПользователиКалендаря, ПериодОтображения);
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		
		ПланДняЗначение = РеквизитФормыВЗначение("ПланДня");
		РаботаСРабочимКалендарем.ОтобразитьПланДня(ПланДняЗначение, НастройкиОтображения);
		ЗначениеВРеквизитФормы(ПланДняЗначение, "ПланДня");
		
	Иначе
		
		РаботаСРабочимКалендарем.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
		
		ИспользоватьБыстроеРедактирование =
			РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку(
				"ИспользоватьБыстроеРедактирование");
		
		УстановитьВидимостьЭлементов();
		
	КонецЕсли;
	
	Если ОбновитьНастройкиАвтообновления Тогда
		УстановитьАвтообновление();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантРаботыФормы()
	
	Если Не ЗначениеЗаполнено(Параметры.ВариантРаботыФормы) Тогда
		Параметры.ВариантРаботыФормы = "МойКалендарь";
	КонецЕсли;
	
	Если Параметры.ВариантРаботыФормы = "МойКалендарь" Тогда
		КлючНазначенияИспользования = "МойКалендарь";
		Заголовок = НСтр("ru = 'Мой календарь'");
		ПользовательКалендаря = ПользователиКлиентСервер.ТекущийПользователь();
		ПользователиКалендаря.Добавить(ПользовательКалендаря);
		Элементы.ПользователиКалендаря.Видимость = Ложь;
		Элементы.ФормаСоздатьЗанятость.Видимость = Истина;
	ИначеЕсли Параметры.ВариантРаботыФормы = "ВсеКалендари" Тогда
		КлючНазначенияИспользования = "ВсеКалендари";
		Заголовок = НСтр("ru = 'Все календари'");
		ПользователиКалендаря.ЗагрузитьЗначения(РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку(
			"ТекущиеКалендариВсеКалендари"));
		Элементы.ПользователиКалендаря.Видимость = Истина;
		Элементы.ФормаСоздатьЗанятость.Видимость = Ложь;
	ИначеЕсли Параметры.ВариантРаботыФормы = "КалендарьПользователя" Тогда
		КлючНазначенияИспользования = "КалендарьПользователя";
		Заголовок = СтрШаблон(НСтр("ru = 'Календарь пользователя %1'"), Параметры.Пользователь);
		ПользовательКалендаря = Параметры.Пользователь;
		ПользователиКалендаря.Добавить(ПользовательКалендаря);
		Элементы.ПользователиКалендаря.Видимость = Ложь;
		Элементы.ФормаСоздатьЗанятость.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОтображения()
	
	НастройкиОтображения.Пользователи.Очистить();
	Для Каждого ОчереднойПользователь Из ПользователиКалендаря Цикл
		НастройкиОтображения.Пользователи.Добавить(ОчереднойПользователь.Значение);
	КонецЦикла;
	Если ПользователиКалендаря.Количество() = 1 Тогда
		ПользовательКалендаря = ПользователиКалендаря[0].Значение;
	Иначе
		ПользовательКалендаря = Неопределено;
	КонецЕсли;
	Если ПользователиКалендаря.Количество() > 1 Тогда
		НастройкиОтображения.ОтображатьЗанятость = Ложь;
	КонецЕсли;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодОтображения;
	
	УстановитьТекущуюСтраницу(Элементы, ПользователиКалендаря, ПериодОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКалендарьПользователя()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВыбратьКалендарьПользователя", ЭтотОбъект);
	
	РаботаСРабочимКалендаремКлиентПереопределяемый.ПриНачалеВыбораПользователейДляКалендаря(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбратьКалендарьПользователя(ВыбранныеПользователи, ДопПараметры) Экспорт
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиКалендаря.Очистить();
	
	РаботаСРабочимКалендаремКлиентПереопределяемый.ПриОкончанииВыбораПользователейДляКалендаря(ЭтотОбъект, ВыбранныеПользователи);
	
	ОбновитьНастройкиОтображения();
	ЗавершениеВыбратьКалендарьПользователяСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Элементы, ПользователиКалендаря, ПериодОтображения)
	
	УказаныПользователи = ПользователиКалендаря.Количество() <> 0;
	
	Если УказаныПользователи
		И ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланДня;
	ИначеЕсли УказаныПользователи Тогда
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПланировщик;
	Иначе
		Элементы.СтраницыПланировщика.ТекущаяСтраница = Элементы.СтраницаПусто;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	РаботаСРабочимКалендарем.УстановитьУсловноеОформлениеПланДня(УсловноеОформление);
	
КонецПроцедуры

#КонецОбласти