
#Область ПрограммныйИнтерфейс

// См. ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, регистрировалось ли во взаиморасчетах начисление зарплаты указанным документом.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить регистрацию начисленной зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если документом регистрировалась зарплата к выплате, иначе Ложь.
//
Функция ЗарегистрированаНачисленнаяЗарплатаДокументом(ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗарегистрированаНачисленнаяЗарплатаДокументом
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ЗарплатаКВыплате.Регистратор = &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты по указанному документу-основанию.
//
// Параметры:
//		ДокументОснование - Ссылка - Документ, по которому требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если по документу выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаПоДокументу(ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаПоДокументу
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаКВыплате.ДокументОснование = &ДокументОснование
	|	И ЗарплатаКВыплате.Регистратор <> &ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет, регистрировалась ли во взаиморасчетах выплата зарплаты за указанный период.
//
// Параметры:
//		Организация          - СправочникСсылка.Организация - организация, в которой проверяется наличие выплат.
//		ПериодВзаиморасчетов - Дата                         - Период, за который требуется проверить выплату зарплаты.
//
// Возвращаемое значение:
//		Булево - Истина, если за период взаиморасчетов выплачивалась зарплата, иначе Ложь.
//
Функция ЗарегистрированаВыплаченнаяЗарплатаЗаПериод(Организация, ПериодВзаиморасчетов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", НачалоМесяца(ПериодВзаиморасчетов));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗарегистрированаВыплаченнаяЗарплатаЗаПериод
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|		ПО (ВзаиморасчетыССотрудниками.Регистратор = ЗарплатаКВыплате.Регистратор)
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодВзаиморасчетов
	|	И ВзаиморасчетыССотрудниками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Регистрация удержания НДФЛ при оплате ведомостей.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости на выплату зарплаты
//                          (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//                          ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.д.)
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплатуВедомостейВУчетеНДФЛ(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ведомости",		Ведомости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗарплатаКВыплате.Период) КАК ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	ВыборкаМаксимальногоПериода = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаМаксимальногоПериода.Следующий() Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарегистрироватьОплатуВедомостейВУчетеНДФЛСоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица, ДатаОперации);
	ЗарегистрироватьОплатуВедомостейВУчетеНДФЛСоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица);

	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, "ВТЗарплатаКВыплате");
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Организация, ВыборкаМаксимальногоПериода.ПериодРегистрации, 
		Ведомости, 
		"ВТСписокСотрудников");
	
	ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(ПлатежныйДокумент, Отказ, Организация, ДатаОперации, ДатаОперации, МенеджерВременныхТаблиц);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Функция ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыОрганизаций() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыПодразделений() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыОрганизаций() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыПодразделений);
КонецФункции	

Функция ДоступноЧтениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

Функция ДоступноИзменениеМестВыплатыЗарплатыСотрудников() Экспорт
	Возврат 
		ДоступноЧтениеМестВыплатыЗарплатыПодразделений() 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников);
КонецФункции	

// Возвращает информацию о настройке места выплаты для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//
Функция МестоВыплатыЗарплатыОрганизации(Организация) Экспорт
	
	МестоВыплатыЗарплатыОрганизации = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыОрганизации.Организация = Организация;
	МестоВыплатыЗарплатыОрганизации.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыОрганизации.Выбран() Тогда
		МестоВыплатыЗарплатыОрганизации.Организация = Организация;
		МестоВыплатыЗарплатыОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыОрганизации
	
КонецФункции

// Возвращает информацию о настройке места выплаты для подразделения.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//
Функция МестоВыплатыЗарплатыПодразделения(Подразделение, Знач Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Владелец");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыПодразделения = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыПодразделения.Подразделение	= Подразделение;
	МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	
	МестоВыплатыЗарплатыПодразделения.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыПодразделения.Выбран() Тогда
		МестоВыплатыЗарплатыПодразделения.Подразделение = Подразделение;
		МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	КонецЕсли;	
		
	Возврат МестоВыплатыЗарплатыПодразделения
	
КонецФункции

// Возвращает информацию о месте выплаты подразделения с учетом организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	Иерархически  - булево, учитывать ли место выплаты организации.
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение) Экспорт
	
	МестоВыплаты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.Подразделение
	|		КОГДА НЕ МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Источник,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.Вид, МестаВыплатыЗарплатыОрганизаций.Вид) КАК Вид,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.МестоВыплаты, МестаВыплатыЗарплатыОрганизаций.МестоВыплаты) КАК МестоВыплаты,
	|	ПодразделенияОрганизаций.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = ПодразделенияОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = ПодразделенияОрганизаций.Владелец)
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
			МестоВыплаты.Подразделение	= Выборка.Источник;
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты = Выборка.МестоВыплаты;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.Организации") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты	= Выборка.МестоВыплаты;
		Иначе	
			МестоВыплаты = Неопределено
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//
Функция МестоВыплатыЗарплатыСотрудника(Сотрудник, Знач ФизическоеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыСотрудника = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
	МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплатыЗарплатыСотрудника.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыСотрудника.Выбран() Тогда
		МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
		МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыСотрудника
	
КонецФункции

// Возвращает информацию о настройке места выплаты зарплаты сотрудника с учетом подразделения.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджер.МестаВыплатыЗарплатыСотрудников,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыСотрудникаПодразделения(Сотрудник, Знач ФизическоеЛицо, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплаты.Сотрудник		= Сотрудник;
	МестоВыплаты.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплаты.Прочитать();
	
	Если НЕ МестоВыплаты.Выбран() Тогда
		МестоВыплаты = МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение);
	КонецЕсли;	
	
	Возврат МестоВыплаты
	
КонецФункции

// Возвращает информацию о местах выплаты зарплаты сотрудников.
//
// Параметры:
//	Сотрудники - массив СправочникСсылка.Сотрудники.
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//		Таблица значений с колонками:
//			- Сотрудник (СправочникСсылка.Сотрудники)
//			- Вид (ПеречислениеСсылка.ВидыМестВыплатыЗарплаты)
//			- МестоВыплаты.
//
Функция МестаВыплатыЗарплатыСотрудников(Сотрудники, ВидыМестВыплаты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("ВидыМестВыплаты",?(ВидыМестВыплаты = Неопределено, Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения(), ВидыМестВыплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник КАК Сотрудник,
	|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты КАК МестоВыплаты
	|ИЗ
	|	РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|ГДЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник В(&Сотрудники)
	|	И МестаВыплатыЗарплатыСотрудников.Вид В(&ВидыМестВыплаты)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает представление места выплаты зарплаты в виде строки.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджер регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//	ПредставлениеНеуказанного - необязательная строка с текстом представления незаданного места выплаты.
//
// Возвращаемое значение
//	строка
//
Функция ПредставлениеМестаВыплатыЗарплаты(МестоВыплатыЗарплаты, ПредставлениеНеуказанного = "") Экспорт
	
	МестаВыплатыЗарплаты = Новый Массив;
	МестаВыплатыЗарплаты.Добавить(МестоВыплатыЗарплаты);
	
	ПредставленияНазначенийМестВыплаты = Новый Соответствие;
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций"), 
		НСтр("ru = 'Как всему подразделению:'"));
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений"), 
		НСтр("ru = 'Как всему подразделению:'"));

	ПредставленияМестВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты);
	
	ПредставлениеМестаВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты[МестоВыплатыЗарплаты];
	ПредставлениеМестаВыплатыЗарплаты = ?(ЗначениеЗаполнено(ПредставлениеМестаВыплатыЗарплаты), ПредставлениеМестаВыплатыЗарплаты, ПредставлениеНеуказанного); 
	
	Возврат ПредставлениеМестаВыплатыЗарплаты
	
КонецФункции	

// Возвращает представление мест выплаты зарплаты в виде соответствия место - представление.
//
// Параметры:
//	МестаВыплатыЗарплаты - массив элементов РегистрСведенийМенеджер одного из регистров МестоВыплатыЗарплаты
//	                       (Организаций, Подразделений, Сотрудников).
//	ПредставленияНазначенийМестВыплаты - соответствие (тип менеджера регистра сведений) - представление назначения.
//		Например Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений") - "Как всему подразделению:".
//
// Возвращаемое значение
//	соответствие
//
Функция ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты) Экспорт
	
	ПредставленияМестВыплатыЗарплаты = Новый Соответствие;
	
	МестаВыплаты = Новый ТаблицаЗначений;
	МестаВыплаты.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников.Ресурсы.МестоВыплаты.Тип);
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		Если МестоВыплатыЗарплаты <> Неопределено Тогда
			МестоВыплаты = МестаВыплаты.Добавить();
			МестоВыплаты.Ссылка = МестоВыплатыЗарплаты.МестоВыплаты;
		КонецЕсли	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестаВыплаты", МестаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТМестаВыплаты
	|ИЗ
	|	&МестаВыплаты КАК МестаВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК МестоВыплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МестаВыплаты.Ссылка) КАК Представление
	|ИЗ
	|	ВТМестаВыплаты КАК МестаВыплаты";
	
	ВыборкаПредставлений = Запрос.Выполнить().Выбрать();
	
	СтрокаПодстановкиМестоЕсть	= НСтр("ru = '%1 %2 «%3»'");
	СтрокаПодстановкиМестоПустое= НСтр("ru = '%1 %2'");
	
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		
		Представление = "";
		
		ВыборкаПредставлений.Сбросить();
		Если МестоВыплатыЗарплаты <> Неопределено И ВыборкаПредставлений.НайтиСледующий(МестоВыплатыЗарплаты.МестоВыплаты, "МестоВыплаты") Тогда
			Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
				
				СтрокаПодстановки = ?(ЗначениеЗаполнено(ВыборкаПредставлений.Представление), СтрокаПодстановкиМестоЕсть, СтрокаПодстановкиМестоПустое);
				
				ПредставлениеНазначенияМестаВыплаты = ПредставленияНазначенийМестВыплаты[ТипЗнч(МестоВыплатыЗарплаты)];
				ПредставлениеНазначенияМестаВыплаты = ?(ЗначениеЗаполнено(ПредставлениеНазначенияМестаВыплаты), ПредставлениеНазначенияМестаВыплаты, "");

				Представление = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки, 
						ПредставлениеНазначенияМестаВыплаты, 
						МестоВыплатыЗарплаты.Вид, 
						ВыборкаПредставлений.Представление)
			КонецЕсли;              
		КонецЕсли;              
					
		ПредставленияМестВыплатыЗарплаты.Вставить(МестоВыплатыЗарплаты, СокрЛП(Представление))
		
	КонецЦикла;	
	
	Возврат ПредставленияМестВыплатыЗарплаты;
	
КонецФункции	

// Проверяет информацию о настройке мест выплаты для организации.
//
// Параметры:
//	МестоВыплатыЗарплатыОрганизации 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыОрганизации(МестоВыплатыЗарплатыОрганизации, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыОрганизации, 
		РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыПодразделения 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыПодразделения(МестоВыплатыЗарплатыПодразделения, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыПодразделения, 
		РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыСотрудника 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплатыЗарплатыСотрудника, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыСотрудника, 
		РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Сохраняет информацию о настройке места выплаты.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджерЗаписи регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//
Процедура ЗаписатьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты) Экспорт
	
	Если МестоВыплатыЗарплаты.Модифицированность() Тогда
		Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
			МестоВыплатыЗарплаты.МестоВыплаты = ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты);
			МестоВыплатыЗарплаты.Записать();
		Иначе	
			МестоВыплатыЗарплаты.Удалить();
		КонецЕсли	
	КонецЕсли	
	
КонецПроцедуры

// Обработчик события ПередЗаписью модулей наборов записей регистров мест выплаты
//
// Параметры:
//	НаборЗаписей - РегистрСведенийНаборЗаписей
//	Отказ - Булево - Признак отказа от записи 
//	Замещение - Булево - Режим записи набора.
//	
Процедура МестаВыплатыЗарплатыПередЗаписью(НаборЗаписей, Отказ, Замещение) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если МенеджерРегистра.ДопустимыеВидыМестВыплаты().Найти(Запись.Вид) = Неопределено Тогда
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимый вид выплаты (%1)'"),
					Запись.Вид);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
		ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(Запись.Вид); 
		
		Если ОписаниеТипов = Неопределено Тогда
			Запись.МестоВыплаты = Неопределено
		Иначе
			Если ЗначениеЗаполнено(Запись.МестоВыплаты) И НЕ ОписаниеТипов.СодержитТип(ТипЗнч(Запись.МестоВыплаты)) Тогда
				ТекстСообщения = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место выплаты (%2) не соответствует виду выплаты (%1)'"),
						Запись.Вид, Запись.МестоВыплаты);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
			КонецЕсли;
			Запись.МестоВыплаты = ОписаниеТипов.ПривестиЗначение(Запись.МестоВыплаты);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Возвращает описание типов, соответствующее виду места выплаты.
//
// Параметры:
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//	ОписаниеТипов
//
Функция ОписаниеТипаМестаВыплатыПоВиду(ВидМестаВыплаты) Экспорт
	
	ОписаниеТипов = Неопределено;

	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	КонецЕсли;	
	
	Возврат ОписаниеТипов
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ЗаполнитьФизическоеЛицо";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьФизическоеЛицоПлановыхАвансов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.7";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатуОтпускаПоУходуЗаРебенком";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьПериодыВзаиморасчетовЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьПериодыВзаиморасчетовЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьФизическиеЛицаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьФизическиеЛицаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.135";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыУстановитьХарактерВыплатыОкончательныхРасчетовПоОснованию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.141";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.141";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.148";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьНДФЛВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.158";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ПеренестиКомпенсацииИзВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.166";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьАванс";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.168";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьПериодВзаиморасчетов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.199";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СогласоватьТабличныеЧастиВедомостей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.63";
	Обработчик.Процедура = "РегистрыСведений.ПорядокВыплатыДокументов.ЗаполнитьПоДокументам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.90";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатуДоначисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.76";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатуКомпенсацииЗадержкиЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.76";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьПорядокВыплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.91";
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ЗаполнитьДокументыОснованияВДвиженияхВедомостейПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.44";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьСуммаПоДокументу";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.11";
	Обработчик.Процедура = "Документы.КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьСостав";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("777adac0-047c-4e7c-8dab-e5d23644bd26");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансом";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение документов-оснований в регистре накопления ""Зарплата к выплате авансом"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.12";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e5d5efc9-393d-4b71-828c-9ecb4b4f9e70");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатуНачисленияПоДоговорам";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способа выплаты зарплаты ""Начисления по договорам"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.5";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c56b78c0-b75d-4d55-aa46-ba84728324e3");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатуОтпусковИБольничныхПодРасчет";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты зарплаты ""Больничные листы (под расчет)"" и ""Отпуска (под расчет)"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.151";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0f1a0a3-645a-4fb7-8db7-7b4350992d5e");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыЗаполнитьГруппуВидовДоговоров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение групп видов договоров с сотрудниками в способах выплаты зарплаты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.152";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e77eb31e-f75a-40d5-8112-d1eabbb203a3");
	Обработчик.Процедура = "ВзаиморасчетыССотрудникамиРасширенный.СпособыВыплатыЗарплатыДобавитьВыплатыДенежногоДовольствияЗарплатыШтатнымВознагражденийДоговорникам";
	Обработчик.Комментарий = НСтр("ru = 'Добавление способов выплаты денежного довольствия военнослужащим и вознаграждения по договором ГПХ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.51";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.НачальнаяЗадолженностьПоЗарплате.ЗаполнитьСпособВводаЗадолженности";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d1f617eb-9329-4dab-b250-b6bdd0d6ce1e"); 
	Обработчик.Комментарий = НСтр("ru = 'Заполнение способа ввода задолженности в документе Начальная задолженность по зарплате.'");

КонецПроцедуры

Процедура СпособыВыплатыЗарплатыНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты КАК ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования КАК ВидДокументаОснования,
	|	СпособыВыплатыЗарплаты.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Поставляемый";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = СпособыВыплатыЗарплатыКлюч();
	Для Каждого ОписаниеПоставляемого Из СпособыВыплатыЗарплатыОписанияПоставляемых() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеПоставляемого);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.ПометкаУдаления = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ОписаниеПоставляемого.ИмяПредопределенныхДанных) Тогда
				Предопределенный = 
					ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты." + ОписаниеПоставляемого.ИмяПредопределенныхДанных);
				СпособВыплатыОбъект	= Предопределенный.ПолучитьОбъект();
			Иначе	
				СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			КонецЕсли	
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеПоставляемого,, "ИмяПредопределенныхДанных");
		
		СпособВыплатыОбъект.Записать();
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыЗаполнитьПризнакПоставляемый() Экспорт
	
	// Предопределенный элемент по определению поставляемый.
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
	Если НЕ СпособВыплатыОбъект.Поставляемый Тогда
		СпособВыплатыОбъект.Поставляемый = Истина;
		СпособВыплатыОбъект.Записать();
	КонецЕсли;	
	
	// Выбираем не помеченные как поставляемые.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.Поставляемый,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = СпособыВыплатыЗарплатыКлюч();
	СтруктураПоиска.Вставить("Поставляемый");
	
	Для Каждого ОписаниеПоставляемого Из СпособыВыплатыЗарплатыОписанияПоставляемых() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеПоставляемого);
		
		// Проверяем наличие поставляемого.
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			// Если такой поставляемый уже есть - ничего делать не надо.
			Продолжить;
		КонецЕсли;	
		
		// Ищем такой же, но без признака поставляемых.
		СтруктураПоиска.Поставляемый = Ложь;
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.Поставляемый = Истина;
			СпособВыплатыОбъект.Записать();
		КонецЕсли;	
		
	КонецЦикла	
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоПлановыхАвансов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыБезФизическогоЛица
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеАвансы.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПлановыеАвансы.Период,
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.НомерСтроки,
		|	ПлановыеАвансы.Активность,
		|	ПлановыеАвансы.Сотрудник,
		|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПлановыеАвансы.ФизическоеЛицо КАК ФизическоеЛицо1,
		|	ПлановыеАвансы.СпособРасчетаАванса,
		|	ПлановыеАвансы.Аванс,
		|	ПлановыеАвансы.ДействуетДо,
		|	ПлановыеАвансы.СпособРасчетаАвансаПоОкончании,
		|	ПлановыеАвансы.АвансПоОкончании
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.Регистратор В
		|			(ВЫБРАТЬ
		|				РегистраторыБезФизическогоЛица.Регистратор
		|			ИЗ
		|				ВТРегистраторыБезФизическогоЛица КАК РегистраторыБезФизическогоЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПлановыеАвансы.СоздатьНаборЗаписей();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СпособыВыплатыЗарплатыДобавитьВыплатуОтпускаПоУходуЗаРебенком() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &ОтпускПоУходуЗаРебенком
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("ОтпускПоУходуЗаРебенком", Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеОтпускаПоУходуЗаРебенком = 
			СпособыВыплатыЗарплатыОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеОтпускаПоУходуЗаРебенком,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура СпособыВыплатыЗарплатыУстановитьХарактерВыплатыОкончательныхРасчетовПоОснованию() Экспорт

	// Выбираем способы выплаты с основаниями, подразумевающими окончательный расчет.
	
	ВидыДокументовСОкончательнымРасчетом = Новый Массив;
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДокументовСОкончательнымРасчетом", ВидыДокументовСОкончательнымРасчетом);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования В(&ВидыДокументовСОкончательнымРасчетом)
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты <> ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		 СпособВыплаты = Выборка.Ссылка.ПолучитьОбъект();
		 
		 СпособВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		 
		 СпособВыплаты.ОбменДанными.Загрузка = Истина;
		 СпособВыплаты.Записать()
		 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛВедомостей() Экспорт
	
	ПолныеИменаВедомостей = Новый Массив;
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ПолноеИмя());
	ПолныеИменаВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолноеИмя());
	
	Для Каждого ПолноеИмяВедомости Из ПолныеИменаВедомостей Цикл
		
		// Выбираем проведенные ведомости, имеющие пустую ТЧ НДФЛ
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ведомость.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТОбновляемыеВедомости
		|ИЗ
		|	#ВедомостьДокумент КАК Ведомость
		|ГДЕ
		|	Ведомость.Проведен
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1 КАК Поле1
		|				ИЗ
		|					#ВедомостьНДФЛ КАК ВедомостьСостав
		|				ГДЕ
		|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмяВедомости); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьНДФЛ",		ПолноеИмяВедомости + ".НДФЛ"); 
		Запрос.Выполнить();
		
		// Получаем движения проведенных ведомостей по регистру взаиморасчетов работников с налоговой.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Ссылка,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
		|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		|ГДЕ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
		|			(ВЫБРАТЬ
		|				ОбновляемыеВедомости.Ссылка
		|			ИЗ
		|				ВТОбновляемыеВедомости КАК ОбновляемыеВедомости)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			Ведомость = Выборка.Ссылка.ПолучитьОбъект();
			Ведомость.НДФЛ.Очистить();
			
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				
				СтрокаСостава = Ведомость.Состав.Найти(Выборка.ФизическоеЛицо, "ФизическоеЛицо");
				Если СтрокаСостава = Неопределено Тогда
					СтрокаСостава = Ведомость.Состав.Добавить();
					СтрокаСостава.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				КонецЕсли;	
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаНДФЛ = Ведомость.НДФЛ.Добавить();
					СтрокаНДФЛ.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
					ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, Выборка);
					
				КонецЦикла;
			КонецЦикла;
			
			Ведомость.ОбменДанными.Загрузка = Истина;
			Ведомость.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла

КонецПроцедуры	

Процедура ПеренестиКомпенсацииИзВедомостей() Экспорт
	
	ВедомостиСКомпенсацией = Новый Массив;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Данные для исправленных движений ведомостей на выплату зарплаты:
	// компенсации, начисленные ведомостями.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.Регистратор КАК Ссылка,
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Период КАК Период,
	|	НачисленияУдержания.Период КАК ПериодВзаиморасчетов,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|	И (НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
	|			ИЛИ НачисленияУдержания.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Регистратор,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Сотрудник.ФизическоеЛицо,
	|	НачисленияУдержания.Период,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	Период,
	|	Подразделение,
	|	СтатьяФинансирования,
	|	СтатьяРасходов";
	
	ВыборкаКомпенсаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКомпенсаций.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		// запоминаем ведомость для будущего удаления компенсаций из начислений-удержаний
		ВедомостиСКомпенсацией.Добавить(ВыборкаКомпенсаций.Ссылка);
		
		// из взаиморасчетов удаляем начисления компенсаций
		
		Взаиморасчеты = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		Взаиморасчеты.Отбор.Регистратор.Установить(ВыборкаКомпенсаций.Ссылка);
		Взаиморасчеты.Прочитать();
		
		ЗаписиКомпенсации = Новый Массив;
		Для Каждого ЗаписьВзаиморасчетов Из Взаиморасчеты Цикл
			Если ЗаписьВзаиморасчетов.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				ЗаписиКомпенсации.Добавить(ЗаписьВзаиморасчетов);
			КонецЕсли	
		КонецЦикла;	
		
		Для Каждого ЗаписьКомпенсации Из ЗаписиКомпенсации Цикл
			Взаиморасчеты.Удалить(ЗаписьКомпенсации);
		КонецЦикла;	
		
		Взаиморасчеты.ОбменДанными.Загрузка = Истина;
		Взаиморасчеты.Записать();
		
		// в ведомость и в ее зарплату к выплате добавляем выплату компенсации
		
		Ведомость = ВыборкаКомпенсаций.Ссылка.ПолучитьОбъект();
		
		ЗарплатаКВыплате = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
		ЗарплатаКВыплате.Отбор.Регистратор.Установить(ВыборкаКомпенсаций.Ссылка);
		ЗарплатаКВыплате.Прочитать();
		
		Пока ВыборкаКомпенсаций.Следующий() Цикл
			
			СтрокаСостава = Ведомость.Состав.Найти(ВыборкаКомпенсаций.ФизическоеЛицо, "ФизическоеЛицо");
			Если СтрокаСостава = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			СтрокаЗарплаты.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, ВыборкаКомпенсаций);
			СтрокаЗарплаты.КВыплате = ВыборкаКомпенсаций.Сумма;
			
			ЗаписьЗарплатаКВыплате = ЗарплатаКВыплате.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(ЗаписьЗарплатаКВыплате, ВыборкаКомпенсаций);
			ЗаписьЗарплатаКВыплате.СуммаКВыплате = ВыборкаКомпенсаций.Сумма;
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();

		ЗарплатаКВыплате.ОбменДанными.Загрузка = Истина;
		ЗарплатаКВыплате.Записать();
		
	КонецЦикла;	
	
	// Данные для движений создаваемых документов КомпенсацияЗаЗадержкуЗарплаты:
	// сумма начисленной компенсации в разрезе периодов и организаций.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
	|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)
	|	И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
	|			ИЛИ НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Организация";
	
	
	ВыборкаНачислений = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Период") Цикл
		Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Организация") Цикл
			
			НовыйДокумент = Документы.КомпенсацияЗаЗадержкуЗарплаты.СоздатьДокумент();
			НовыйДокумент.Дата = КонецМесяца(ВыборкаНачислений.Период);
			НовыйДокумент.ПериодРегистрации	= ВыборкаНачислений.Период;
			НовыйДокумент.Организация		= ВыборкаНачислений.Организация;
			НовыйДокумент.СтатьяРасходов	= ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов290();
			
			Пока ВыборкаНачислений.Следующий() Цикл
				
				СтрокаДокумента = НовыйДокумент.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВыборкаНачислений);
				
			КонецЦикла;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;	
	КонецЦикла;	
	
	// Очищаем движения ведомостей по начислениям-удержаниям
	ВедомостиСКомпенсацией = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВедомостиСКомпенсацией);
	Для Каждого Ведомость Из ВедомостиСКомпенсацией Цикл
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ведомость);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();

	КонецЦикла;	

	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьАванс() Экспорт
	
	// Выбираем авансовые способы выплаты, не являющиеся Авансом
	ОписаниеАванса = 
		СпособыВыплатыЗарплатыОписанияПоставляемых().Найти(
			Перечисления.ХарактерВыплатыЗарплаты.Аванс, "ХарактерВыплаты"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.Наименование КАК Наименование,
	|	СпособыВыплатыЗарплаты.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Поставляемый
	|	И СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)";
	УстаревшиеАвансы = Запрос.Выполнить().Выгрузить();
	
	СтрокаАванса = УстаревшиеАвансы.Найти(ОписаниеАванса.Наименование, "Наименование");
	Если СтрокаАванса = Неопределено Тогда
		// Если нет Аванса, то создаем
		СпособВыплатыАванс = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыАванс, ОписаниеАванса,, "ИмяПредопределенныхДанных");
		СпособВыплатыАванс.Записать();
	Иначе
		// Если Аванс есть, то запоминаем, а остальные - устаревшие
		СпособВыплатыАванс = СтрокаАванса.Ссылка;
		Если СтрокаАванса.ПометкаУдаления Тогда
			ЭлементСправочника = СтрокаАванса.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;	
		УстаревшиеАвансы.Удалить(СтрокаАванса);
	КонецЕсли;	
	
	// Ищем ведомости с устаревшими авансами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УстаревшиеАвансы", УстаревшиеАвансы.ВыгрузитьКолонку("Ссылка"));
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.СпособВыплаты В(&УстаревшиеАвансы)";
	
	ТипыВедомостей = Новый Массив;
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением.ПолноеИмя());
	ТипыВедомостей.Добавить(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком.ПолноеИмя());
	
	ЗапросыВедомостей = Новый Массив;
	Для Каждого ТипВедомости Из ТипыВедомостей Цикл
		ТекстЗапросаПоТипуВедомости = СтрЗаменить(ШаблонЗапроса, "#Ведомость", ТипВедомости);
		ЗапросыВедомостей.Добавить(ТекстЗапросаПоТипуВедомости);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ЗапросыВедомостей, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	
	ВыборкаВедомостей = Запрос.Выполнить().Выбрать();
	
	// Заменяем в ведомостях устаревшие авансовые способы выплаты на Аванс
	Пока ВыборкаВедомостей.Следующий() Цикл
		
		Ведомость = ВыборкаВедомостей.Ссылка.ПолучитьОбъект();
		Ведомость.СпособВыплаты = СпособВыплатыАванс.Ссылка;
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;	
	
	// Удаляем устаревшие авансовые способы выплаты
	Для Каждого УстаревшийАванс Из УстаревшиеАвансы Цикл
		Если НЕ УстаревшийАванс.ПометкаУдаления Тогда
			ЭлементСправочника = УстаревшийАванс.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.УстановитьПометкуУдаления(Истина);
		КонецЕсли	
	КонецЦикла;
	
КонецПроцедуры	

Процедура СогласоватьТабличныеЧастиВедомостей() Экспорт
	
	СогласуемыеПоля = Новый Соответствие;
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"),		"ФизическоеЛицо");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"),			"ФизическоеЛицо, НомерЛицевогоСчета");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением"),	"ФизическоеЛицо, БанковскийСчет");
	СогласуемыеПоля.Вставить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком"),	"ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И Состав.Ссылка ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И (Состав.Ссылка ЕСТЬ NULL 
	|			ИЛИ Зарплата.НомерЛицевогоСчета <> Состав.НомерЛицевогоСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И (Состав.Ссылка ЕСТЬ NULL 
	|			ИЛИ Зарплата.БанковскийСчет <> Состав.БанковскийСчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Состав КАК Состав
	|		ПО Зарплата.Ссылка = Состав.Ссылка
	|			И Зарплата.ИдентификаторСтроки = Состав.ИдентификаторСтроки
	|ГДЕ
	|	НЕ Зарплата.Ссылка.Номер ЕСТЬ NULL 
	|	И Состав.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЛишниеСтроки = Новый Массив;
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаСостава = Ведомость.Состав.Найти(СтрокаЗарплаты.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СтрокаСостава = Неопределено Тогда
				ЛишниеСтроки.Добавить(СтрокаЗарплаты);
			Иначе	
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СогласуемыеПоля[ТипЗнч(Выборка.Ссылка)])
			КонецЕсли	
		КонецЦикла;
		Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
			Ведомость.Зарплата.Удалить(ЛишняяСтрока);
		КонецЦикла;	
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьВыплатуДоначисления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &НачислениеЗарплаты
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("НачислениеЗарплаты", Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеДоначисления = 
			СпособыВыплатыЗарплатыОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеДоначисления,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура СпособыВыплатыЗарплатыДобавитьВыплатуКомпенсацииЗадержкиЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &КомпенсацияЗаЗадержкуЗарплаты
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("КомпенсацияЗаЗадержкуЗарплаты", Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеКомпенсации = 
			СпособыВыплатыЗарплатыОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты, 
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеКомпенсации,, "ИмяПредопределенныхДанных");
		СпособВыплатыОбъект.ОбменДанными.Загрузка = Истина;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли	
	
КонецПроцедуры	

Процедура ЗаполнитьДокументыОснованияВДвиженияхВедомостейПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) КАК КоличествоДокументовОснований
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка.Проведен
	|	И ВедомостьНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ВедомостьНДФЛ.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНДФЛ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВедомостьНДФЛ.ДокументОснование) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор КАК Регистратор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыНалогоплательщиковСБюджетом.ДокументОснование) КАК КоличествоДокументовОснований
	|ПОМЕСТИТЬ ВТДвижения
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетом
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТВедомости.Ссылка
	|			ИЗ
	|				ВТВедомости)
	|	И РасчетыНалогоплательщиковСБюджетом.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И РасчетыНалогоплательщиковСБюджетом.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетом.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТВедомости КАК Ведомости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвижения КАК Движения
	|		ПО Ведомости.Ссылка = Движения.Регистратор
	|ГДЕ
	|	Ведомости.КоличествоДокументовОснований <> ЕСТЬNULL(Движения.КоличествоДокументовОснований, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомости.Ссылка.Дата,
	|	Ведомости.Ссылка.ПериодРегистрации,
	|	Ведомости.Ссылка.Номер";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();	
		ЗаполнитьДокументыОснованияВДвиженияхВедомостиПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ(Ведомость);	
	КонецЦикла	
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияВДвиженияхВедомостиПоРегиструРасчетыНалогоплательщиковСБюджетомПоНДФЛ(Ведомость, Отказ = Ложь)
	
	ИзмеренияУдержанногоНалога = "ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование";
	УдержанныйНалог = Ведомость.НДФЛ.Выгрузить(, ИзмеренияУдержанногоНалога +", "+ "Сумма");
	УдержанныйНалог.Свернуть(ИзмеренияУдержанногоНалога, "Сумма");
	УдержанныйНалог.Колонки.Добавить("Ставка",Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
	УдержанныйНалог.ЗаполнитьЗначения(Перечисления.НДФЛСтавки.Ставка13, "Ставка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Ведомость.ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Период КАК Период,
	|	ВедомостьНДФЛ.КодДохода КАК КодДохода,
	|	ВедомостьНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТСтавкаРезидента
	|ИЗ
	|	#ВедомостьНДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка = &Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьНДФЛ", Ведомость.Метаданные().ПолноеИмя() + ".НДФЛ");
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента2016(МенеджерВременныхТаблиц, "ВТСтавкаРезидента");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо,
	|	СтавкаНДФЛПоСтавкеРезидента.КодДохода,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента,
	|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
	|ИЗ
	|	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|ГДЕ
	|	СтавкаНДФЛПоСтавкеРезидента.Период = &Период";
	ВыборкаСтавок = Запрос.Выполнить().Выбрать();
	
	ОтборСтавок = Новый Структура("ФизическоеЛицо, КодДохода, СтавкаНалогообложенияРезидента");
	Для Каждого СтрокаНалога Из УдержанныйНалог Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтавок, СтрокаНалога);
		ВыборкаСтавок.Сбросить();
		Если ВыборкаСтавок.НайтиСледующий(ОтборСтавок) Тогда
			СтрокаНалога.Ставка = ВыборкаСтавок.СтавкаНДФЛ
		КонецЕсли;	
	КонецЦикла;	
	
	Движения = Новый Структура;
	Движения.Вставить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ",		РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей());
	Движения.Вставить("РасчетыНалогоплательщиковСБюджетомПоНДФЛ",	РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей());
	
	Для Каждого Движение Из Движения Цикл
		Движение.Значение.Отбор.Регистратор.Установить(Ведомость.Ссылка); 
	КонецЦикла;	
	
	УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Ведомость.Организация, Ведомость.Дата, УдержанныйНалог, , Ложь);
	
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ОбменДанными.Загрузка = Истина;
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
	
КонецПроцедуры

Процедура ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансом(ПараметрыОбновления = Неопределено) Экспорт
	
	Регистраторы = ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомРегистраторыКОбновлению();
	
	Если Регистраторы.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомВыполнить(ПараметрыОбновления, Регистраторы)
	КонецЕсли;
	
КонецПроцедуры	

Процедура СпособыВыплатыЗарплатыДобавитьВыплатуНачисленияПоДоговорам(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &НачислениеПоДоговорам
	|	И СпособыВыплатыЗарплаты.Поставляемый";
	Запрос.УстановитьПараметр("НачислениеПоДоговорам", Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОписаниеНачисленияПоДоговорам = 
			СпособыВыплатыЗарплатыОписанияПоставляемых().Найти(
				Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам,
				"ВидДокументаОснования");
		
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеНачисленияПоДоговорам,, "ИмяПредопределенныхДанных");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
		
	КонецЕсли
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьВыплатуОтпусковИБольничныхПодРасчет(ПараметрыОбновления = НеОпределено) Экспорт
	
	Описания = СпособыВыплатыЗарплатыОписаниеПоставляемыхОтпусковИБольничныхПодРасчет();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеПоставляемых", Описания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписаниеПоставляемых.ХарактерВыплаты КАК ХарактерВыплаты,
	|	ОписаниеПоставляемых.ВидДокументаОснования КАК ВидДокументаОснования
	|ПОМЕСТИТЬ ВТПоставляемые
	|ИЗ
	|	&ОписаниеПоставляемых КАК ОписаниеПоставляемых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Поставляемые.ХарактерВыплаты КАК ХарактерВыплаты,
	|	Поставляемые.ВидДокументаОснования КАК ВидДокументаОснования
	|ИЗ
	|	ВТПоставляемые КАК Поставляемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО Поставляемые.ХарактерВыплаты = СпособыВыплатыЗарплаты.ХарактерВыплаты
	|			И Поставляемые.ВидДокументаОснования = СпособыВыплатыЗарплаты.ВидДокументаОснования
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеДобавляемых = Описания.СкопироватьКолонки();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПараметрыОтбора = Новый Структура("ХарактерВыплаты, ВидДокументаОснования");
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
			ЗаполнитьЗначенияСвойств(ОписаниеДобавляемых.Добавить(), Описания.НайтиСтроки(ПараметрыОтбора)[0]);
		КонецЦикла;
	КонецЕсли;
	
	СпособыВыплатыЗарплатыДобавитьПоОписаниям(ОписаниеДобавляемых, ПараметрыОбновления)	
		
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыЗаполнитьГруппуВидовДоговоров(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.ГруппаВидовДоговоров = ЗНАЧЕНИЕ(Перечисление.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);		
		
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
		КонецЦикла;		
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьВыплатыДенежногоДовольствияЗарплатыШтатнымВознагражденийДоговорникам(ПараметрыОбновления = НеОпределено) Экспорт
	
	СпособыВыплатыЗарплатыДобавитьПоОписаниям(
		СпособыВыплатыЗарплатыОписанияПоставляемых(), 
		ПараметрыОбновления)	
		
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыДобавитьПоОписаниям(Знач Описания, Знач ПараметрыОбновления = НеОпределено) Экспорт
	
	ОписанияДобавляемых = СпособыВыплатыЗарплатыДобавитьПоОписаниямКОбработке(Описания);
	
	Если ОписанияДобавляемых.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);	
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		СпособыВыплатыЗарплатыДобавитьПоОписаниямОбработать(ОписанияДобавляемых)
	КонецЕсли;
	
КонецПроцедуры

Функция СпособыВыплатыЗарплатыНовыеОписания() Экспорт
	Описания = Новый ТаблицаЗначений;
	Описания.Колонки.Добавить("ИмяПредопределенныхДанных", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
	Описания.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Для Каждого Реквизит Из Метаданные.Справочники.СпособыВыплатыЗарплаты.Реквизиты Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;	
		Описания.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Возврат Описания
КонецФункции

Функция СпособыВыплатыЗарплатыДобавитьОписание(Описания) Экспорт
	Описание = Описания.Добавить();
	
	Описание.Поставляемый = Истина;
	Описание.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	Описание.ПроцентВыплаты = 100;
	
	Возврат Описание
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки взаиморасчетов с сотрудниками

Функция НастройкиВзаиморасчетовССотрудниками() Экспорт
	
	НастройкиВзаиморасчетов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.НастройкиВзаиморасчетовССотрудниками.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.НастройкиВзаиморасчетовССотрудниками);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиВзаиморасчетов.ПроверятьЗаполнениеФинансированияВВедомостях КАК ПроверятьЗаполнениеФинансированияВВедомостях,
		|	НастройкиВзаиморасчетов.ПроверятьСоответствиеНачисленийИВыплат КАК ПроверятьСоответствиеНачисленийИВыплат
		|ИЗ
		|	РегистрСведений.НастройкиВзаиморасчетовССотрудниками КАК НастройкиВзаиморасчетов";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(НастройкиВзаиморасчетов, Выборка);
		
	КонецЕсли; 
	
	Возврат НастройкиВзаиморасчетов;
	
КонецФункции

// Сторнирует зарплату, зарегистрированную указанным документом в учете взаиморасчетов с сотрудниками.
//
// Параметры:
//	Движения             - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка                - Документ, записи которого необходимо сторнировать.
//	ПериодРегистрации    - Дата                          - Период, которым будут зарегистрированы сторно-записи (первое число месяца периода регистрации)
//                                                         Если не указан, будут сохранены периоды регистрации
//                                                         сторнируемых движений
//  Записывать           - Булево                        - Если Истина, то наборы будут записаны сразу, если Ложь, то
//                                                         наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьНачисленнуюЗарплату(Движения, ИсправленныйДокумент, ПериодРегистрации = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "ВзаиморасчетыССотрудникамиРасширенный";
	НаборыЗаписей = ОбщегоНазначенияБЗК.ДвиженияВСтруктуру(Движения);
	
	МетаданныеРегистров = Новый Массив;
	МетаданныеРегистров.Добавить(Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками);
	МетаданныеРегистров.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплате);
	МетаданныеРегистров.Добавить(Метаданные.РегистрыНакопления.ЗарплатаКВыплатеАвансом);
	МетаданныеРегистров.Добавить(Метаданные.РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками);
	
	НаборЗаписей = Неопределено;
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		Если НаборыЗаписей.Свойство(МетаданныеРегистра.Имя, НаборЗаписей)
			И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, ИмяУчета) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;	
		Если ПериодРегистрации <> Неопределено Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Период = ПериодРегистрации
			КонецЦикла	
		КонецЕсли;	
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////
/// Учет начисленной и выплаченной зарплаты.

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления, Удержания);
	
	/// Регистрация порядка выплаты документа
	ЕстьДвижениеПорядокВыплатыДокументов = Ложь;
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Свойство("ПорядокВыплатыДокументов");
	Иначе
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Найти("ПорядокВыплатыДокументов") <> Неопределено;
	КонецЕсли;
	
	Если ЕстьДвижениеПорядокВыплатыДокументов Тогда
		Если Движения.ПорядокВыплатыДокументов.Количество() = 0 Тогда 
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов.Добавить();
			ПорядокВыплатыДокумента.ДокументОснование	= Движения.ЗарплатаКВыплате.Отбор.Регистратор.Значение;
			ПорядокВыплатыДокумента.ПорядокВыплаты		= ХарактерВыплаты;
			Движения.ПорядокВыплатыДокументов.Записывать = Истина;
		Иначе
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов[0];
			Если ПорядокВыплатыДокумента.ПорядокВыплаты <> ХарактерВыплаты Тогда
				 ВызватьИсключение НСтр("ru = 'Все выплаты по документу должны иметь одинаковый порядок выплаты'")
			КонецЕсли	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата)
КонецПроцедуры

Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

Процедура ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ХарактерВыплаты) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ХарактерВыплаты)
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Заполнение ведомостей.

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	
	ДанныеЗаполненияВедомости = ВзаиморасчетыССотрудникамиБазовый.ДанныеЗаполненияВедомости();
	
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛВыполнено", Истина);
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛРеквизиты", "");
	
	ДанныеЗаполненияВедомости.Вставить("Основания", Новый Массив);

	Возврат ДанныеЗаполненияВедомости
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Оплата ведомостей.

Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНеВыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеАвансом.Период,
	|	ЗарплатаКВыплатеАвансом.ВидДвижения,
	|	ЗарплатаКВыплатеАвансом.Организация,
	|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо,
	|	ЗарплатаКВыплатеАвансом.Сотрудник,
	|	ЗарплатаКВыплатеАвансом.Подразделение,
	|	ЗарплатаКВыплатеАвансом.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеАвансом.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеАвансом.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеАвансом.СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
	|ГДЕ
	|	ЗарплатаКВыплатеАвансом.Регистратор = &Ведомость
	|	И ЗарплатаКВыплатеАвансом.ФизическоеЛицо В(&Физлица)";
	
	ВыборкаЗарплатаКВыплатеАвансом	= Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗарплатаКВыплатеАвансом.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплатеАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплатеАвансом);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплатеАвансом.СуммаКВыплате;
	КонецЦикла;
	
	Движения.ЗарплатаКВыплатеАвансом.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуВедомостейВУчетеНДФЛСоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица, ДатаОперации)
	
	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.УстановитьПараметр("Организация", Организация);
	ЗапросНДФЛ.УстановитьПараметр("Ведомости",   Ведомости);
	
	ШаблонЗапросаНФДЛВедомости = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#ВедомостьНаВыплатуЗарплатыНДФЛ КАК ВедомостьНаВыплатуЗарплатыНДФЛ
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыНДФЛ.Ссылка.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыНДФЛ.Ссылка В(&Ведомости)
	|	И &ФизическиеЛица";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		ШаблонЗапросаНФДЛВедомости = СтрЗаменить(ШаблонЗапросаНФДЛВедомости, "&ФизическиеЛица", "ВедомостьНаВыплатуЗарплатыНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)");
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	
	ТипыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		ТипыВедомостей.Вставить(Ведомость.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	ЧастиЗапросаНФДЛВедомостей = Новый Массив;
	Для Каждого ТипВедомости Из ТипыВедомостей Цикл
		ЧастиЗапросаНФДЛВедомостей.Добавить(СтрЗаменить(ШаблонЗапросаНФДЛВедомости, "#ВедомостьНаВыплатуЗарплатыНДФЛ", ТипВедомости.Ключ + ".НДФЛ"));
	КонецЦикла;
	
	ЗапросНДФЛ.Текст = 
		СтрСоединить(
			ЧастиЗапросаНФДЛВедомостей,
			ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, ЗапросНДФЛ, ДатаОперации); 
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуВедомостейВУчетеНДФЛСоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ведомости",		Ведомости);
	
	// Данные ведомостей 	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	
	Запрос.Выполнить();
	
КонецПроцедуры
	
Процедура ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(Регистратор, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц)
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор.Ссылка, Регистратор.Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Истина);
	УчетНДФЛ.ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, Регистратор.Ссылка);	
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(Регистратор.Движения, Отказ, Организация, ДатаВыплаты, МенеджерВременныхТаблиц, , Истина);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Связь между расчетными документами и ведомостями.

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	
	СпособВыплатыПоРасчетномуДокументу = Справочники.СпособыВыплатыЗарплаты.ПустаяСсылка();
	
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		СпособВыплатыПоРасчетномуДокументу = Справочники.СпособыВыплатыЗарплаты.Зарплата
	Иначе
		ВидДокумента = Перечисления.ВидыДокументовМежрасчетныхНачислений.ПоДокументу(РасчетныйДокумент);
		Если ВидДокумента <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидДокументаОснования", ВидДокумента);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СпособыВыплатыЗарплаты.Ссылка КАК СпособыВыплатыЗарплаты
			|ИЗ
			|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
			|ГДЕ
			|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &ВидДокументаОснования
			|
			|УПОРЯДОЧИТЬ ПО
			|	СпособыВыплатыЗарплаты.Наименование";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СпособВыплатыПоРасчетномуДокументу =  Выборка.СпособыВыплатыЗарплаты
			КонецЕсли	
		КонецЕсли	
	КонецЕсли;	
	
	Возврат СпособВыплатыПоРасчетномуДокументу;
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Выплата зарплаты

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания ведомостей на выплату зарплаты.

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыПеречислением
	Иначе
		МенеджерДокументаПоМестуВыплаты = ВзаиморасчетыССотрудникамиБазовый.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод
	Иначе	
		ВидВзаиморасчетов = ВзаиморасчетыССотрудникамиБазовый.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
	КонецЕсли;
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудникамиБазовый.ПараметрыПолученияЗарплатыКВыплате();
	
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ДокументыОснования",	Новый Массив);
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяФинансирования",	Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяРасходов",		Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	
	Возврат ПараметрыПолученияЗарплатыКВыплате;
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
		
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудникамиБазовый.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	
	ПараметрыПолученияЗарплатыКВыплате.ДокументыОснования	= Ведомость.Основания.ВыгрузитьКолонку("Документ");
	ПараметрыПолученияЗарплатыКВыплате.СтатьяФинансирования	= Ведомость.СтатьяФинансирования;
	ПараметрыПолученияЗарплатыКВыплате.СтатьяРасходов		= Ведомость.СтатьяРасходов;

	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	ИначеЕсли Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда 
		СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	Иначе	
		ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	КонецЕсли;
	
	// если указан отбор по финансированию, то фильтруем по статьям
	ОтборПоСтатьям = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.СтатьяФинансирования) Тогда
		ОтборПоСтатьям.Добавить("СтатьяФинансирования = &СтатьяФинансирования");
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатьяРасходов) Тогда
		ОтборПоСтатьям.Добавить("СтатьяРасходов = &СтатьяРасходов");
	КонецЕсли;	
	Если ОтборПоСтатьям.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СтатьяФинансирования",	Параметры.СтатьяФинансирования);
		Запрос.УстановитьПараметр("СтатьяРасходов",			Параметры.СтатьяРасходов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеПоУказаннымСтатьям
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	&ОтборПоСтатьям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗарплатаКВыплате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплате
		|ИЗ
		|	ВТЗарплатаКВыплатеПоУказаннымСтатьям КАК ЗарплатаКВыплате";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", СтрСоединить(ОтборПоСтатьям, " И "));
		
		Запрос.Выполнить();
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) 
	
	// аванс при наличии окончательного расчета по сотруднику не выплачивается
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиБезОкончательногоРасчета
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник
	|				ИЗ
	|					РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|				ГДЕ
	|					ВзаиморасчетыССотрудниками.Период = &ПериодРегистрации
	|					И ВзаиморасчетыССотрудниками.Организация = &Организация
	|					И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)
	|					И НЕ ВзаиморасчетыССотрудниками.Регистратор В (&ИгнорируемыеРегистраторы)
	|					И ВзаиморасчетыССотрудниками.Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТСотрудникиБезОкончательногоРасчета")
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Основания", Параметры.ДокументыОснования);	
	
	Запрос.Текст =
	// Как указанные документы-основания, так и сторнированные ими документы.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.ДокументОснование КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И (ЗарплатаКВыплате.ДокументОснование = ЗарплатаКВыплате.Регистратор
	|			ИЛИ ЗарплатаКВыплате.Сторно)
	|	И ЗарплатаКВыплате.ДокументОснование <> НЕОПРЕДЕЛЕНО"
	
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
	
	// Документы-основания, зарегистрированные в старых релизах 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.ДокументОснование = НЕОПРЕДЕЛЕНО
	|	И ЗарплатаКВыплате.УдалитьДокументОснование <> НЕОПРЕДЕЛЕНО";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[0].Выгрузить().ВыгрузитьКолонку("Документ"));
	СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатыЗапросов[1].Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3022 КАК ЗарплатаКВыплатеМежрасчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3021 КАК ЗарплатаКВыплатеМежрасчет";

  	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",     КонецМесяца(Параметры.ПериодРегистрации));
	Запрос.УстановитьПараметр("Основания",                ДокументыОснования);	
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3022
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				,
	|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|					И Организация = &Организация
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)
	|					И ДокументОснование В (&Основания)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)
	|		И ЗарплатаКВыплате.ДокументОснование В(&Основания)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3021(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("Основания",					ДокументыОснования);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.Регистратор КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3021
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				#ВТСотрудники КАК Сотрудники)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.Регистратор";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные) Экспорт
	
	// Получаем плановые авансы по настройкам
	
	Если Не ПустаяСтрока(КадровыеДанные) Тогда
		КадровыеДанные = КадровыеДанные + ",";
	КонецЕсли;
	КадровыеДанные = КадровыеДанные + "ТерриторияВыполненияРаботВОрганизации";
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные);
	
	// Перемещаем полученные авансы в служебную таблицу
	// Готовим фильтры для обращения к подсистемам.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Сотрудник КАК Сотрудник,
	|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыйАванс.Подразделение КАК Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|	ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАвансБазовый
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыйАванс.Сотрудник,
	|	ПлановыйАванс.Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПодразделенияПериоды
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПодразделенияПериоды.Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиПодразделенияПериоды КАК СотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	
	Запрос.Выполнить();
	
	// Определяем сотрудников в состоянии, исключающем получение аванса.
	СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", Параметры.ПериодРегистрации);	
	
	// Получаем применение плановых начислений сотрудников.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
	
	// Определяем источники финансирования зарплаты сотрудников.
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПодразделенияПериоды", ,
		Параметры.Организация);
		
	// Заполняем источники финансирования
	// Обнуляем суммы отсутствующим.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансБазовый.Сотрудник КАК Сотрудник,
	|	АвансБазовый.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АвансБазовый.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Бухучет.СтатьяФинансирования, АвансБазовый.СтатьяФинансирования) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(Бухучет.СтатьяРасходов, АвансБазовый.СтатьяРасходов) КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА СотрудникиНеПолучающиеАванс.Сотрудник ЕСТЬ NULL 
	|				И ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, ИСТИНА)
	|			ТОГДА АвансБазовый.СуммаКВыплате
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК АвансБазовый
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК Бухучет
	|		ПО АвансБазовый.Сотрудник = Бухучет.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНеПолучающиеАванс КАК СотрудникиНеПолучающиеАванс
	|		ПО АвансБазовый.Сотрудник = СотрудникиНеПолучающиеАванс.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
	|		ПО АвансБазовый.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник";
	
 	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПлановыйАвансБазовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиНеПолучающиеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПериоды";

 	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Месяц = ПериодРегистрации;
	НачалоПериода	= Дата(Год(Месяц), Месяц(Месяц), 1);
	КонецПериода	= Дата(Год(Месяц), Месяц(Месяц), 15);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВременнойТаблицы);
	
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	СостоянияИсключающиеАванс = Новый Массив;
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам);
	
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
		МенеджерВременныхТаблиц,
		Сотрудники,
		СостоянияИсключающиеАванс,
		НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);		
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК Продолжительность
	|ПОМЕСТИТЬ ВТСотрудникиНеПолучающиеАванс
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) >= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ) + 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияСотрудников";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "") Экспорт
	
	// Отбор сотрудников по документам-основаниям.
	СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", Ведомость.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "")
	
	ВидДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования");
	
	Если ЗначениеЗаполнено(ВидДокументаОснования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Основания",	Ведомость.Основания.ВыгрузитьКолонку("Документ"));	

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоОснованию
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Регистратор В(&Основания)";
		
		Запрос.Выполнить();
		
		ИмяВТСотрудники	= "ВТСотрудникиПоОснованию"
		
	Иначе
		
		ИмяВТСотрудники	= ""
		
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники)
	
	ПараметрыПолученияСотрудников = ПараметрыПолученияСотрудниковПоШапкеВедомости(Ведомость);

	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиПоМестуРаботыПоШапкеВедомости");
		
	ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыПоШапкеВедомости";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// при отборе по подразделениям	берем относящихся к нему на конец периода
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
		
		Запрос.УстановитьПараметр("Подразделение", ПараметрыПолученияСотрудников.Подразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТСотрудникиОтносящиесяКПодразделению
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Подразделение В ИЕРАРХИИ(&Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиОтносящиесяКПодразделению";
		
	КонецЕсли;	
	
	// аванс не работающим на дату ведомости не выплачивается
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		
		ПараметрыПолученияСотрудников.НачалоПериода 	= НачалоДня(Ведомость.Дата);
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= КонецДня(Ведомость.Дата);
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыНаДатуВедомости");
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТРаботающиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуРаботыНаДатуВедомости КАК РаботающиеСотрудники
		|		ПО Сотрудники.Сотрудник = РаботающиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыНаДатуВедомости";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТРаботающиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;	
	
	// если передан список сотрудников, берем только присутствующих в нем
	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТВходящиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудники";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТВходящиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
	|ИЗ
	|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники)
	
	МестоВыплаты = Ведомость.МестоВыплаты();
	
	Если НЕ ЗначениеЗаполнено(МестоВыплаты.Вид) Тогда
		Возврат
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",	Ведомость.Организация);
	Запрос.УстановитьПараметр("ВидМестаВыплаты",МестоВыплаты.Вид);
	Запрос.УстановитьПараметр("ВсеМестаВыплаты",НЕ ЗначениеЗаполнено(МестоВыплаты.Значение));
	Запрос.УстановитьПараметр("МестоВыплаты",	МестоВыплаты.Значение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = Сотрудники.Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|		ПО (МестаВыплатыЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА МестаВыплатыЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыСотрудников.Вид
	|			КОГДА МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыПодразделений.Вид
	|			КОГДА МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|		КОНЕЦ = &ВидМестаВыплаты
	|	И (&ВсеМестаВыплаты
	|			ИЛИ ВЫБОР
	|				КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыСотрудников.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА МестаВыплатыЗарплатыСотрудников.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты.Банк
	|							ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыПодразделений.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты
	|				КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыОрганизаций.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
	|			КОНЕЦ = &МестоВыплаты)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
		
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) Экспорт
	
	ПараметрыПолученияСотрудников = ПараметрыПолученияСотрудниковПоШапкеВедомости(Ведомость);
	
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

Функция ПараметрыПолученияСотрудниковПоШапкеВедомости(Ведомость)
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	РеквизитыСпособаВыплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты, ГруппаВидовДоговоров");
	
	Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ЗаполнитьПараметрыПолученияСотрудниковОрганизаций(
		ПараметрыПолученияСотрудников,
		РеквизитыСпособаВыплаты.ГруппаВидовДоговоров);
	
	Если РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
		ОкончаниеПериода	= МИН(Дата(Год(Ведомость.ПериодРегистрации), Месяц(Ведомость.ПериодРегистрации), 15), Ведомость.Дата);
		РаботникиПоДоговорамГПХ = Неопределено;
	ИначеЕсли РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда 
		НачалоПериода 		=  '00010101';
		ОкончаниеПериода	=  МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);
	Иначе
		НачалоПериода 		=  '00010101';
		ОкончаниеПериода	=  КонецМесяца(Ведомость.ПериодРегистрации);
	КонецЕсли;	
	
	ПараметрыПолученияСотрудников.Организация	= Ведомость.Организация;
	ПараметрыПолученияСотрудников.Подразделение	= Ведомость.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода 	= НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= ОкончаниеПериода;
	
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";	
	
	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

Функция ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомРегистраторыКОбновлению()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеАвансом.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
	|ГДЕ
	|	ЗарплатаКВыплатеАвансом.УдалитьДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И ЗарплатаКВыплатеАвансом.ДокументОснование = НЕОПРЕДЕЛЕНО";
	Возврат Запрос.Выполнить()
КонецФункции	

Процедура ПеренестиДокументыОснованияВДвиженияхРегистраЗарплатаКВыплатеАвансомВыполнить(ПараметрыОбновления, Регистраторы)
	
	ВыборкаРегистраторов = Регистраторы.Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплатеАвансом.НаборЗаписей", "Регистратор", ВыборкаРегистраторов.Ссылка) Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплатеАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Ссылка;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДокументОснование = Запись.УдалитьДокументОснование;
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла
	
КонецПроцедуры

Функция СпособыВыплатыЗарплатыДобавитьПоОписаниямКОбработке(Описания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеПоставляемых", Описания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписаниеПоставляемых.ХарактерВыплаты КАК ХарактерВыплаты,
	|	ОписаниеПоставляемых.ВидДокументаОснования КАК ВидДокументаОснования,
	|	ОписаниеПоставляемых.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров
	|ПОМЕСТИТЬ ВТПоставляемые
	|ИЗ
	|	&ОписаниеПоставляемых КАК ОписаниеПоставляемых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Поставляемые.ХарактерВыплаты КАК ХарактерВыплаты,
	|	Поставляемые.ВидДокументаОснования КАК ВидДокументаОснования,
	|	Поставляемые.ГруппаВидовДоговоров КАК ГруппаВидовДоговоров
	|ИЗ
	|	ВТПоставляемые КАК Поставляемые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|		ПО Поставляемые.ХарактерВыплаты = СпособыВыплатыЗарплаты.ХарактерВыплаты
	|			И Поставляемые.ВидДокументаОснования = СпособыВыплатыЗарплаты.ВидДокументаОснования
	|			И Поставляемые.ГруппаВидовДоговоров = СпособыВыплатыЗарплаты.ГруппаВидовДоговоров
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеДобавляемых = Описания.СкопироватьКолонки();
	Если Не РезультатЗапроса.Пустой() Тогда
		ПараметрыОтбора = СпособыВыплатыЗарплатыКлюч();
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
			ЗаполнитьЗначенияСвойств(ОписаниеДобавляемых.Добавить(), Описания.НайтиСтроки(ПараметрыОтбора)[0]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеДобавляемых
	
КонецФункции	

Процедура СпособыВыплатыЗарплатыДобавитьПоОписаниямОбработать(ОписаниеДобавляемых)
	
	Для Каждого ОписаниеЭлемента Из ОписаниеДобавляемых Цикл
		СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпособВыплатыОбъект);
	КонецЦикла	
	
КонецПроцедуры

Функция СпособыВыплатыЗарплатыКлюч()
	Возврат Новый Структура("ХарактерВыплаты, ВидДокументаОснования, ГруппаВидовДоговоров")
КонецФункции

Функция СпособыВыплатыЗарплатыОписанияПоставляемых() Экспорт
	
	Описания = СпособыВыплатыЗарплатыНовыеОписания();
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Аванс'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.ИмяПредопределенныхДанных = "Зарплата";
	Описание.Наименование              = НСтр("ru = 'Зарплата за месяц'");
	Описание.ХарактерВыплаты           = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров      = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Зарплата работников и служащих'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.РаботникиСлужащие;
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование         = НСтр("ru = 'Вознаграждение сотрудникам по договорам ГПХ'");
	Описание.ХарактерВыплаты      = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ГруппаВидовДоговоров = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПоДоговорамГПХ;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СпособыВыплатыЗарплатыОписаниеПоставляемыхОтпусковИБольничныхПодРасчет(), 
		Описания); 
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			Модуль.СпособыВыплатыЗарплатыОписанияПоставляемых(), 
			Описания); 
	КонецЕсли;
	
	МежрасчетныеВыплаты = Новый Соответствие;
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.БольничныйЛист,                    НСтр("ru = 'Больничные листы'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ВозвратНДФЛ,                       НСтр("ru = 'Возврат НДФЛ'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ЕдиновременноеПособиеЗаСчетФСС,    НСтр("ru = 'Единовременные пособия за счет ФСС'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Командировка,                      НСтр("ru = 'Командировки'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты,     НСтр("ru = 'Компенсации за задержку зарплаты'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.МатериальнаяПомощь,                НСтр("ru = 'Материальная помощь'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты,                НСтр("ru = 'Доначисление'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаДнейУходаЗаДетьмиИнвалидами, НСтр("ru = 'Оплата дней ухода за детьми-инвалидами'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаПоСреднемуЗаработку,         НСтр("ru = 'Отсутствие с сохранением оплаты'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Отпуск,                            НСтр("ru = 'Отпуска'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком,           НСтр("ru = 'Отпуска по уходу за ребенком'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Премия,                            НСтр("ru = 'Премии'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ПростойСотрудников,                НСтр("ru = 'Простои'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.РазовоеНачисление,                 НСтр("ru = 'Разовые начисления'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение,                        НСтр("ru = 'Увольнения'"));
	МежрасчетныеВыплаты.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеПоДоговорам,             НСтр("ru = 'Начисления по договорам'"));

	ВидыДокументовСОкончательнымРасчетом = Новый Массив;
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОтпускПоУходуЗаРебенком);
	ВидыДокументовСОкончательнымРасчетом.Добавить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение);
	
	ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоМетаданным();	
	Для Каждого МежрасчетнаяВыплата Из МежрасчетныеВыплаты Цикл
		
		Если ДоступныеВидыДокументаОснования.Найти(МежрасчетнаяВыплата.Ключ) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
		Описание.Наименование = МежрасчетнаяВыплата.Значение;
		Если ВидыДокументовСОкончательнымРасчетом.Найти(МежрасчетнаяВыплата.Ключ) <> Неопределено Тогда
			Описание.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;	
		Иначе	
			Описание.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;	
		КонецЕсли;	
		Описание.ВидДокументаОснования = МежрасчетнаяВыплата.Ключ;
		Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
		
	КонецЦикла;	
	
	Возврат Описания;
			
КонецФункции

Функция СпособыВыплатыЗарплатыОписаниеПоставляемыхОтпусковИБольничныхПодРасчет()
	
	Описания = СпособыВыплатыЗарплатыНовыеОписания();
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Отпуска (под расчет)'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.Отпуск;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Описание = СпособыВыплатыЗарплатыДобавитьОписание(Описания);
	Описание.Наименование          = НСтр("ru = 'Больничные листы (под расчет)'");
	Описание.ХарактерВыплаты       = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	Описание.ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.БольничныйЛист;
	Описание.ГруппаВидовДоговоров  = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.Все;
	
	Возврат Описания
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции ведомостей на выплату зарплаты.

// Заполнение и расчет документа.

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	
	СтандартнаяОбработка = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиУправленческий");
		Модуль.ПриПолученииМестаВыплатыВедомостиВКассу(Ведомость, МестоВыплаты, СтандартнаяОбработка);
	КонецЕсли;
	Если Не СтандартнаяОбработка Тогда
		Возврат МестоВыплаты
	КонецЕсли;
	
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Ведомость.Касса;
	
	Возврат МестоВыплаты
	
КонецФункции	

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	Ведомость.Касса = Значение;
КонецПроцедуры	

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	МожноЗаполнитьЗарплату = ВзаиморасчетыССотрудникамиБазовый.ВедомостьМожноЗаполнитьЗарплату(Ведомость);

	ПравилаПроверки = Новый Структура;
	ПравилаПроверки.Вставить("ПроцентВыплаты", НСтр("ru='Не задан размер выплаты в параметрах расчета'"));
	
	Если ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях") Тогда
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ведомость.Метаданные().Реквизиты.СтатьяФинансирования) Тогда
			ПравилаПроверки.Вставить("СтатьяФинансирования", НСтр("ru='Не указана статья финансирования'"));
		КонецЕсли;
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ведомость.Метаданные().Реквизиты.СтатьяРасходов) Тогда
			ПравилаПроверки.Вставить("СтатьяРасходов",       НСтр("ru='Не указана статья расходов'"));
		КонецЕсли;
	КонецЕсли;	
	
	МожноЗаполнитьЗарплату = 
		ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)
		И МожноЗаполнитьЗарплату;

	ВидДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования");
	Если ЗначениеЗаполнено(ВидДокументаОснования) И Ведомость.Основания.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не выбраны документы-основания'"), 
			Ведомость, 
			"Основания");
		МожноЗаполнитьЗарплату = Ложь;	
	КонецЕсли;	
	
	Возврат МожноЗаполнитьЗарплату;

КонецФункции

Процедура ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Процент выплаты
	Если ЗначениеЗаполнено(Ведомость.ПроцентВыплаты) И Ведомость.ПроцентВыплаты <> 100 Тогда
		Для Каждого СтрокаЗарплаты Из ТаблицаЗарплат Цикл

			СтрокаЗарплаты.КВыплате = СтрокаЗарплаты.КВыплате * Ведомость.ПроцентВыплаты/100;
		КонецЦикла;
	КонецЕсли;

	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат);
		
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	Состав = ВзаиморасчетыССотрудникамиБазовый.ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Инициализируем колонку налога в таблице состава 		
	Состав.Колонки.Добавить("НДФЛ"); 
	Для Каждого СтрокаСостава Из Состав Цикл
		СтрокаСостава.НДФЛ = НДФЛ.СкопироватьКолонки()
	КонецЦикла;		
			
	// получаем список различных физлиц
	Физлица = ТаблицаЗарплат.Скопировать(, "ФизическоеЛицо");
	Физлица.Свернуть("ФизическоеЛицо");
	Физлица = Физлица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	// ищем строки состава для физлиц, помещая в них соответствующий налог
	Состав.Индексы.Добавить("ФизическоеЛицо");
	НДФЛ.Индексы.Добавить("ФизическоеЛицо");
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	Для Каждого Физлицо Из Физлица Цикл
		
		СтрокаСостава = Состав.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаСостава = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = Физлицо; 
		СтрокаСостава.НДФЛ = НДФЛ.Скопировать(ПараметрыОтбораНДФЛ);
		
	КонецЦикла;
	
	Возврат Состав
	
КонецФункции

Процедура ВедомостьОчиститьСостав(Ведомость) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьОчиститьСостав(Ведомость);
	Ведомость.НДФЛ.Очистить();
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьДополнитьСостав(Ведомость, Состав);
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		СтрокаТЧСостав = Ведомость.Состав.Найти(СтрокаСостава.ИдентификаторСтроки, "ИдентификаторСтроки");

		Для Каждого СтрокаНДФЛ Из СтрокаСостава.НДФЛ Цикл
			СтрокаТЧНДФЛ = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧНДФЛ, СтрокаНДФЛ);
			СтрокаТЧНДФЛ.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла
		
	КонецЦикла
	
КонецПроцедуры

Процедура ВедомостьОбновитьНДФЛ(Ведомость, Физлица) Экспорт
	
	ТаблицаЗарплат = Ведомость.Зарплата.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, КВыплате");
	Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
		Если Физлица.Найти(СтрокаЗарплаты.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗарплат.Добавить(), СтрокаЗарплаты);
		КонецЕсли
	КонецЦикла;	
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	НДФЛ.Индексы.Добавить("ФизическоеЛицо");
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	Для Каждого Физлицо Из Физлица Цикл
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = ФизЛицо;
		
		// Определяем идентификатор строки состава, к которой будет привязан НДФЛ физического лица.
		ИдентификаторСтроки = Неопределено;
		СтрокаНДФЛ = Ведомость.НДФЛ.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаНДФЛ = Неопределено Тогда
			СтрокаСостава = Ведомость.Состав.Найти(Физлицо, "ФизическоеЛицо");
			Если СтрокаСостава <> Неопределено Тогда
				ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки
			КонецЕсли	
		Иначе
			ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки
		КонецЕсли;	
		
		Если ИдентификаторСтроки = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		// Удаляем старый НДФЛ физического лица
		УдаляемыеСтроки = Ведомость.НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Ведомость.НДФЛ.Удалить(УдаляемаяСтрока)
		КонецЦикла;
		
		// Помещаем новый НДФЛ физического лица, привязывая его к строке состава
		НДФЛФизлица = НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого СтрокаНДФЛФизлица Из НДФЛФизлица Цикл
			ДобавляемаяСтрока = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, СтрокаНДФЛФизлица);
			ДобавляемаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла	
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РеквизитыСпособаВыплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты, ВидДокументаОснования");
	
	ВедомостьСоздатьВТСписокСотрудниковПоТаблицеЗарплат(МенеджерВременныхТаблиц, ТаблицаЗарплат, Ведомость);
	
	НДФЛ = 	
		УчетНДФЛ.РассчитатьУдержанныеНалоги(
			Ведомость.Ссылка, 
			Ведомость.Организация, 
			Ведомость.Дата, 
			МенеджерВременныхТаблиц, 
			Ведомость.ПериодРегистрации,
			РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
			
	// При постатейной выплате оставляем только налоги с заказанных статей 
	Если ЗначениеЗаполнено(Ведомость.СтатьяФинансирования) Или ЗначениеЗаполнено(Ведомость.СтатьяРасходов) Тогда
		
		КолонкиОтбораНДФЛ = "ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, ДокументОснование";
		ТаблицаОтбораБухучетаНДФЛ = НДФЛ.Скопировать(, КолонкиОтбораНДФЛ);
		ТаблицаОтбораБухучетаНДФЛ.Свернуть(КолонкиОтбораНДФЛ);
		
		БухучетНДФЛ = ОтражениеЗарплатыВБухучетеРасширенный.БухучетНДФЛСотрудниковПоДокументамОснованиям(ТаблицаОтбораБухучетаНДФЛ);
		БухучетНДФЛ.Индексы.Добавить(КолонкиОтбораНДФЛ);
		
		УдаляемыеСтрокиНДФЛ = Новый Массив;
		ПараметрыОтбораНДФЛ = Новый Структура(КолонкиОтбораНДФЛ);
		Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораНДФЛ, СтрокаНДФЛ); 
			БухучетПоСтрокеНДФЛ = БухучетНДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
			СуммаИтого = 0;
			СуммаПоИсточнику = 0;
			Для Каждого СтрокаБухучета Из БухучетПоСтрокеНДФЛ Цикл
				СуммаИтого = СуммаИтого + СтрокаБухучета.Сумма;
				Если (Не ЗначениеЗаполнено(Ведомость.СтатьяФинансирования) Или Ведомость.СтатьяФинансирования = СтрокаБухучета.СтатьяФинансирования)
					И (Не ЗначениеЗаполнено(Ведомость.СтатьяРасходов) Или Ведомость.СтатьяРасходов = СтрокаБухучета.СтатьяРасходов) Тогда
					СуммаПоИсточнику = СуммаПоИсточнику + СтрокаБухучета.Сумма
				КонецЕсли;
			КонецЦикла;	
			Если СуммаПоИсточнику <> 0 И СуммаИтого <> 0 Тогда
				СтрокаНДФЛ.Сумма = МИН(СтрокаНДФЛ.НачисленоНалога * СуммаПоИсточнику / СуммаИтого, СтрокаНДФЛ.Сумма);
			Иначе
				УдаляемыеСтрокиНДФЛ.Добавить(СтрокаНДФЛ);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаНДФЛ Из УдаляемыеСтрокиНДФЛ Цикл
			НДФЛ.Удалить(СтрокаНДФЛ)
		КонецЦикла;	
		
	КонецЕсли;	
	
	КолонкиСортировки = Новый Массив;
	КолонкиСортировки.Добавить("ФизическоеЛицо");
	КолонкиСортировки.Добавить("МесяцНалоговогоПериода");
	КолонкиСортировки.Добавить("КатегорияДохода");
	КолонкиСортировки.Добавить("СтавкаНалогообложенияРезидента");
	КолонкиСортировки.Добавить("КодДохода");
	КолонкиСортировки.Добавить("Сумма");
	КолонкиСортировки.Добавить("Подразделение");
	КолонкиСортировки.Добавить("ДокументОснование");
	КолонкиСортировки.Добавить("РегистрацияВНалоговомОргане");
	Для Каждого Колонка Из НДФЛ.Колонки Цикл
		Если КолонкиСортировки.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиСортировки.Добавить(Колонка.Имя);
		КонецЕсли	
	КонецЦикла;	
	НДФЛ.Сортировать(СтрСоединить(КолонкиСортировки, ",") , Новый СравнениеЗначений);

	Возврат НДФЛ
	
КонецФункции

/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	Если ВзаиморасчетыССотрудниками.ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Тогда
		Для Каждого Основание Из ДанныеЗаполнения.Основания Цикл
			СтрокаОснования = ДокументОбъект.Основания.Добавить();
			СтрокаОснования.Документ = Основание;
		КонецЦикла	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях") Тогда
		
		ПоляСтатей = Новый Массив;
		ПоляСтатей.Добавить("СтатьяФинансирования");
		ПоляСтатей.Добавить("СтатьяРасходов");
		КолонкиСтатей = СтрСоединить(ПоляСтатей, ",");
		
		Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
			ЗарплатаСтроки = ДокументОбъект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), КолонкиСтатей);
			ОшибкаФинансированияСтроки = Ложь;
			Для Каждого ПолеСтатьи Из ПоляСтатей Цикл
				Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ДокументОбъект.Метаданные().Реквизиты[ПолеСтатьи]) И ЗначениеЗаполнено(ДокументОбъект[ПолеСтатьи]) Тогда
					СтатьиСтроки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗарплатаСтроки.ВыгрузитьКолонку(ПолеСтатьи));
					Если СтатьиСтроки.Количество() > 1 Или СтатьиСтроки[0] <> ДокументОбъект[ПолеСтатьи] Тогда
						ОшибкаФинансированияСтроки = Истина;
						Прервать;
					КонецЕсли	
				КонецЕсли;	
			КонецЦикла;	
			Если ОшибкаФинансированияСтроки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У сотрудника %1 финансирование не совпадает с ведомостью'"),
							СтрокаСостава.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состав[%1].ФизическоеЛицо", СтрокаСостава.НомерСтроки-1),, Отказ);
			КонецЕсли;	
		КонецЦикла;
		
		
	Иначе	
		ИсключаемыеРеквизиты = Новый Массив;
		ИсключаемыеРеквизиты.Добавить("СтатьяФинансирования");
		ИсключаемыеРеквизиты.Добавить("СтатьяРасходов");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	КонецЕсли;	
	
	Если НачалоДня(ДокументОбъект.Дата) > ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьДатаВыплаты(ДокументОбъект) Тогда
		ТекстОшибки = НСтр("ru = 'Дата выплаты не может быть меньше даты документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "ДатаВыплаты",, Отказ);
	КонецЕсли;
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Очистка табличной части НДФЛ от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и НДФЛ.
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаНДФЛ Из ДокументОбъект.НДФЛ Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаНДФЛ.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаНДФЛ);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаСостава, "ФизическоеЛицо")
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.НДФЛ.Удалить(ЛишняяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ);
	
	// Регистрация выдачи зарплаты.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		
		ВедомостьЗарегистрироватьВыданнуюЗарплату(Ведомость, Отказ);
		
		ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ);
		
		Если Ведомость.ПеречислениеНДФЛВыполнено Тогда
			ВедомостьЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ);
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыданнуюЗарплату(Ведомость, Отказ = Ложь)
	
	// Выданную зарплату берем по движениям в р.н. ВзаиморасчетыССотрудниками
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыданнойЗарплаты();
	Для Каждого Запись Из Ведомость.Движения.ВзаиморасчетыССотрудниками Цикл
		СтрокаЗарплаты = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Запись);
		СтрокаЗарплаты.Сумма = Запись.СуммаВзаиморасчетов
	КонецЦикла;	
	
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыданнуюЗарплату(Ведомость.Движения, Отказ, Ведомость.Организация, ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьДатаВыплаты(Ведомость), Зарплата, ХарактерВыплаты); 
	
КонецПроцедуры
	
Процедура ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВедомостьСоздатьВТСписокСотрудниковПоТаблицеЗарплат(МенеджерВременныхТаблиц, Ведомость.Зарплата, Ведомость);

	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
	|	*
	|ИЗ
	|	#ВедомостьНДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка = &Ссылка";
	ЗапросНДФЛ.Текст = СтрЗаменить(ТекстЗапроса, "#ВедомостьНДФЛ", Ведомость.Метаданные().ПолноеИмя() + ".НДФЛ");
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, ЗапросНДФЛ, ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьДатаВыплаты(Ведомость)); 
	
	ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(Ведомость, Отказ, Ведомость.Организация, Ведомость.Дата, ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьДатаВыплаты(Ведомость), МенеджерВременныхТаблиц);

КонецПроцедуры

Процедура ВедомостьЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ = Ложь)
	
	УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Ведомость.Движения, Отказ, Ведомость.Организация, ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьДатаВыплаты(Ведомость), Ведомость.ПеречислениеНДФЛРеквизиты);
	
КонецПроцедуры

Процедура ВедомостьСоздатьВТСписокСотрудниковПоТаблицеЗарплат(МенеджерВременныхТаблиц, ТаблицаЗарплат, Ведомость)

	КолонкиГруппировокСпискаСотрудников = "ФизическоеЛицо, ДокументОснование, СтатьяФинансирования, СтатьяРасходов";
	
	СписокСотрудников = Ведомость.Зарплата.ВыгрузитьКолонки(КолонкиГруппировокСпискаСотрудников + ", КВыплате");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗарплат, СписокСотрудников);
	СписокСотрудников.Свернуть(КолонкиГруппировокСпискаСотрудников, "КВыплате");
	СписокСотрудников.Колонки.КВыплате.Имя = "СуммаВыплаты";
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Ведомость.Организация, Ведомость.ПериодРегистрации, 
		Ведомость.Ссылка, 
		"ВТСписокСотрудников");
	
КонецПроцедуры

/// Печать

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);	
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьВБанкВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт
	Возврат ВзаиморасчетыССотрудникамиБазовый.ВедомостьВБанкВыборкаДляПечатиШапки(ИмяТипа, Ведомости)
КонецФункции

Функция ВедомостьВБанкВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	Возврат ВзаиморасчетыССотрудникамиБазовый.ВедомостьВБанкВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости)
КонецФункции

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчетно-платежная ведомость (Т-49).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'");
	КомандаПечати.Порядок = 30;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т49") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т49",
			НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'"), ПечатьТ49(МассивОбъектов, ОбъектыПечати));
		
	Иначе
		ВзаиморасчетыССотрудникамиБазовый.ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(МассивОбъектов, ОбъектыПечати)
	
	СпособыВыплатыВедомостей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "СпособВыплаты");
	ХарактерыВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(СпособыВыплатыВедомостей, "Значение", Истина), "ХарактерВыплаты");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если ХарактерыВыплаты[СпособыВыплатыВедомостей[ДокументСсылка]] = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
			ПечатнаяФормаДокумента = Отчеты.АнализНачисленийИУдержанийАвансом.ПечатьТ49(ДокументСсылка);
		Иначе
			ПечатнаяФормаДокумента = Отчеты.АнализНачисленийИУдержаний.ПечатьТ49(ДокументСсылка);
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ДокументРезультат = ПечатнаяФормаДокумента;
			НомерСтрокиНачало = 1;
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			// Добавим очередную ведомость к результирующему табличному документу
			ДокументРезультат.Вывести(ПечатнаяФормаДокумента);
		КонецЕсли;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Кассир,
	|	Ведомость.ДолжностьКассира КАК КассирДолжность,
	|	Ведомость.Бухгалтер,
	|	Ведомость.Составил,
	|	Ведомость.ДолжностьСоставившего,
	|	Ведомость.Проверил,
	|	Ведомость.ДолжностьПроверившего,
	|	Ведомость.Раздатчик,
	|	Ведомость.ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	Возврат ВзаиморасчетыССотрудникамиБазовый.ВедомостьВКассуВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости)
КонецФункции

/// Ограничение документа

Функция ВедомостьВБанкОперацияОграниченияДокумента() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныйОбменСБанкамиПоЗарплатнымПроектам") Тогда
		Возврат ОграничениеИспользованияДокументов.ОперацияВыгрузки();
	Иначе
		Возврат ОграничениеИспользованияДокументов.ОперацияОтсутствует();
	КонецЕсли;
	
КонецФункции

Функция ВедомостьВКассуОперацияОграниченияДокумента() Экспорт
	
	Возврат ОграничениеИспользованияДокументов.ОперацияОтсутствует();
	
КонецФункции

/// Контроль соответствия начислений и выплат

Функция ПереплатыПоДокументамСотрудникам(МенеджерВременныхТаблиц, ИмяВТДокументыСотрудники = "ВТДокументыСотрудники") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТДокументыСотрудники КАК ДокументыСотрудники
	|		ПО ЗарплатаКВыплате.ДокументОснование = ДокументыСотрудники.ДокументОснование
	|			И ЗарплатаКВыплате.Сотрудник = ДокументыСотрудники.Сотрудник
	|			И ЗарплатаКВыплате.СтатьяФинансирования = ДокументыСотрудники.СтатьяФинансирования
	|			И ЗарплатаКВыплате.СтатьяРасходов = ДокументыСотрудники.СтатьяРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТДокументыСотрудники", ИмяВТДокументыСотрудники);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Способы выплаты зарплаты

Процедура СпособыВыплатыЗарплатыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоФункциональнымОпциям();
	ДоступныеГруппыВидовДоговоров   = Перечисления.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ДоступныеПоФункциональнымОпциям();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеВидыДокументаОснования", ДоступныеВидыДокументаОснования);
	Запрос.УстановитьПараметр("ДоступныеГруппыВидовДоговоров",   ДоступныеГруппыВидовДоговоров);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				И СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Вес
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.ПометкаУдаления
	|	И (СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ИЛИ СпособыВыплатыЗарплаты.ВидДокументаОснования В (&ДоступныеВидыДокументаОснования))
	|	И (СпособыВыплатыЗарплаты.ГруппаВидовДоговоров = ЗНАЧЕНИЕ(Перечисление.ГруппыВидовДоговоровССотрудникамДляВыплатыЗарплаты.ПустаяСсылка)
	|			ИЛИ СпособыВыплатыЗарплаты.ГруппаВидовДоговоров В (&ДоступныеГруппыВидовДоговоров))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вес,
	|	СпособыВыплатыЗарплаты.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыОбработкаПроверкиЗаполнения(СпособВыплаты, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ЗначениеЗаполнено(СпособВыплаты.ВидДокументаОснования) Тогда
		
		ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоМетаданным();

		Если ДоступныеВидыДокументаОснования.Найти(СпособВыплаты.ВидДокументаОснования) = Неопределено Тогда
			ТекстОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ ""%1"" недоступен в этой конфигурации'"), 
					СпособВыплаты.ВидДокументаОснования);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				СпособВыплаты.Ссылка, 
				"ВидДокументаОснования",
				, 
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Процедура ПроверитьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты, ДопустимыеВидыМестВыплаты, Отказ)
	
	Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
		
		ТекстСообщения = "";
		
		Если ДопустимыеВидыМестВыплаты.Найти(МестоВыплатыЗарплаты.Вид) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Недопустимый вид места выплаты зарплаты'");
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан банковский счет'");
			КонецЕсли	
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда	
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан раздатчик'");
			КонецЕсли	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
	КонецЕсли	
	
КонецПроцедуры

Функция ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)
	
	ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(МестоВыплатыЗарплаты.Вид);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПриведенноеЗначениеМестаВыплаты = ОписаниеТипов.ПривестиЗначение(МестоВыплатыЗарплаты.МестоВыплаты);
	Иначе
		ПриведенноеЗначениеМестаВыплаты = Неопределено
	КонецЕсли;	
	
	Возврат ПриведенноеЗначениеМестаВыплаты;
	
КонецФункции	

#КонецОбласти