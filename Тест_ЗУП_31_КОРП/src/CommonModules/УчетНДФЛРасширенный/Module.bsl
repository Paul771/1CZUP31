
#Область ПрограммныйИнтерфейс

// Выполняет регистрацию доходов по дивидендам и налога с этих доходов.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаВыплаты - дата - дата, которой будет зарегистрировано движение.
//		Дивиденды - ТаблицаЗначений - содержит, как минимум, колонки:
//			Акционер
//			Начислено
//			ВычетПоНДФЛ
//			НДФЛ
//		ВключатьВДекларациюПоНалогуНаПрибыль - булево -
//		РегистрироватьУдержаниеПеречислениеНДФЛ - булево - признак того, что необходимо зарегистрировать удержание и перечисление НДФЛ
//		ДатаПлатежа - дата -
//		РеквизитыПлатежа - строка - реквизиты платежного поручения на перечисление налога.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДоходыИНДФЛСДивидендов(Регистратор, Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, ВключатьВДекларациюПоНалогуНаПрибыль, РегистрироватьУдержаниеПеречислениеНДФЛ = Ложь, ДатаПлатежа = Неопределено, РеквизитыПлатежа = "", Записывать = Ложь) Экспорт
	
	Дивиденды.Колонки.Акционер.Имя = "ФизическоеЛицо";
	Дивиденды.Колонки.Начислено.Имя = "СуммаДохода";
	Дивиденды.Колонки.ВычетПоНДФЛ.Имя = "СуммаВычета";
	Дивиденды.Колонки.НДФЛ.Имя = "Сумма";
	
	Дивиденды.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Дивиденды.ЗаполнитьЗначения(ДатаВыплаты, "ДатаПолученияДохода");
	Если Дивиденды.Колонки.Найти("КатегорияДохода") = Неопределено Тогда
		Дивиденды.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		Дивиденды.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.Дивиденды, "КатегорияДохода");
	КонецЕсли;
	Дивиденды.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	Дивиденды.ЗаполнитьЗначения(Справочники.ВидыДоходовНДФЛ.Код1010, "КодДохода");
	Дивиденды.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	Дивиденды.ЗаполнитьЗначения(Справочники.ВидыВычетовНДФЛ.Код601, "КодВычета");
	Дивиденды.Колонки.Добавить("СтавкаНалогообложенияРезидента", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	Дивиденды.ЗаполнитьЗначения(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09, "СтавкаНалогообложенияРезидента");
	Дивиденды.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	Дивиденды.ЗаполнитьЗначения(НачалоМесяца(ДатаВыплаты), "МесяцНалоговогоПериода");
	Дивиденды.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль", Новый ОписаниеТипов("Булево"));
	Дивиденды.ЗаполнитьЗначения(ВключатьВДекларациюПоНалогуНаПрибыль, "ВключатьВДекларациюПоНалогуНаПрибыль");
	Дивиденды.Колонки.Добавить("НеУчитыватьДоходВ6НДФЛ", Новый ОписаниеТипов("Булево"));
	Дивиденды.ЗаполнитьЗначения(Истина, "НеУчитыватьДоходВ6НДФЛ");
	
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, Записывать,,Регистратор);
	
	Дивиденды.Колонки.Удалить("МесяцНалоговогоПериода");
	Дивиденды.Колонки.ДатаПолученияДохода.Имя = "МесяцНалоговогоПериода";
	УчетНДФЛ.СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды);
	
	Если РегистрироватьУдержаниеПеречислениеНДФЛ Тогда
		
		Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
			ДатаПлатежа = ДатаВыплаты
		КонецЕсли;
		Дивиденды.Колонки.СуммаДохода.Имя = "СуммаВыплаченногоДохода";
		Дивиденды.Колонки.НеУчитыватьДоходВ6НДФЛ.Имя = "УчитыватьВыплаченныйДоходВ6НДФЛ";
		УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды,,Записывать);
		
		ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаПлатежа, РеквизитыПлатежа, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Расчет НДФЛ

// Выполняет расчет налога по отдельным доходам с учетом вида дохода и резидентства получателя дохода.
// Заполняет в переданной таблице Доходы колонку НДФЛ, если такой колонки нет - создает ее.
//
// Параметры:
//		ДатаПолученияДохода - дата -
//		Доходы - ТаблицаЗначений - содержит колонки
//			ФизическоеЛицо
//			КатегорияДохода
//			КодДохода 
//			СуммаДохода
//  	    КодВычета (необязательная)
//  	    СуммаВычета (необязательная)
//  	    НомерСтроки (необязательная)
// 
Процедура РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, Доходы) Экспорт
	
	УдалятьКолонкуВычета = Ложь;	
	Если Доходы.Колонки.Найти("СуммаВычета") = Неопределено Тогда
		Доходы.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		УдалятьКолонкуВычета = Истина	
	КонецЕсли;
	УдалятьКолонкуКодаВычета = Ложь;	
	Если Доходы.Колонки.Найти("КодВычета") = Неопределено Тогда
		Доходы.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
		УдалятьКолонкуКодаВычета = Истина	
	КонецЕсли;
	УдалятьКолонкуНомера = Ложь;	
	Если Доходы.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Доходы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		УдалятьКолонкуНомера = Истина;	
		НомерСтроки = 0;
		Для Каждого СтрокаРасчета Из Доходы Цикл
			СтрокаРасчета.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	УдалятьКолонкуКатегорияДохода = Ложь;	
	Если Доходы.Колонки.Найти("КатегорияДохода") = Неопределено Тогда
		Доходы.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		УдалятьКолонкуКатегорияДохода = Истина;
		Если Доходы.Колонки.Найти("КодДохода") <> Неопределено Тогда
			Для каждого СтрокаТЗ Из Доходы Цикл
				СтрокаТЗ.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(СтрокаТЗ.КодДохода)
			КонецЦикла;
		Иначе
			Доходы.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы, "КатегорияДохода");
		КонецЕсли;
	КонецЕсли;
	
	Если Доходы.Колонки.Найти("НДФЛ") = Неопределено Тогда
		Доходы.Колонки.Добавить("НДФЛ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 0)));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Доходы", Доходы); 
	Запрос.УстановитьПараметр("ДатаПолученияДохода", ДатаПолученияДохода); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.НомерСтроки КАК НомерСтроки,
	|	Список.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Список.КодДохода КАК КодДохода,
	|	Список.КатегорияДохода КАК КатегорияДохода,
	|	Список.КодВычета КАК КодВычета,
	|	Список.СуммаДохода КАК СуммаДохода,
	|	Список.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСписокДоходов
	|ИЗ
	|	&Доходы КАК Список
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДоходов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокДоходов.КодДохода КАК КодДохода,
	|	СписокДоходов.КатегорияДохода КАК КатегорияДохода,
	|	&ДатаПолученияДохода КАК Период,
	|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТСписокДоходов КАК СписокДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО СписокДоходов.КодДохода = ВидыДоходовНДФЛ.Ссылка";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДоходов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокДоходов.КодДохода.НеОблагаетсяУНалоговогоАгента
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((СписокДоходов.СуммаДохода - ВЫБОР
	|					КОГДА ЕСТЬNULL(СтавкаНДФЛПоСтавкеРезидента.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|						ТОГДА СписокДоходов.СуммаВычета
	|					КОГДА ЕСТЬNULL(ВидыВычетовНДФЛ.НеПредоставляетсяНерезидентам, ЛОЖЬ)
	|						ТОГДА 0
	|					ИНАЧЕ СписокДоходов.СуммаВычета
	|				КОНЕЦ) * СтавкаНДФЛПоСтавкеРезидента.СтавкаЧислом КАК ЧИСЛО(13, 0))
	|	КОНЕЦ КАК НДФЛ
	|ИЗ
	|	ВТСписокДоходов КАК СписокДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|		ПО СписокДоходов.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
	|			И СписокДоходов.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СписокДоходов.КодВычета = ВидыВычетовНДФЛ.Ссылка";
	Налоги = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРасчета Из Доходы Цикл
		
		СтрокаРезультата = Налоги.Найти(СтрокаРасчета.НомерСтроки,"НомерСтроки");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРасчета.НДФЛ = СтрокаРезультата.НДФЛ; 
		Иначе 	
			СтрокаРасчета.НДФЛ = 0; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалятьКолонкуВычета Тогда
		Доходы.Колонки.Удалить("СуммаВычета");
	КонецЕсли;
	Если УдалятьКолонкуКодаВычета Тогда
		Доходы.Колонки.Удалить("КодВычета");
	КонецЕсли;
	Если УдалятьКолонкуНомера Тогда
		Доходы.Колонки.Удалить("НомерСтроки");
	КонецЕсли;
	Если УдалятьКолонкуКатегорияДохода Тогда
		Доходы.Колонки.Удалить("КатегорияДохода");
	КонецЕсли;
	
КонецПроцедуры

// Метод выполняет расчет материальной выгоды и налога.
// Исходная таблица дополняется двумя колонками 
//	МатериальнаяВыгода и НалогНаМатериальнуюВыгоду, 
//	в которую соответственно заполняются значения выгоды и налога.
//
//
// Параметры:
//		Организация - СправочникСсылка.Организации -
//		ДатаПолученияДохода - дата -
//		РасчетЗаймов - ТаблицаЗначений - содержит колонки
//			ФизическоеЛицо.
//			Подразделение
//			ДатаНачала - начало периода, за который выполняется начисление/погашение процентов.
//			ДатаОкончания - конец периода.
//			ПогашениеПроцентов - сумма погашения процентов.
//			ПроцентнаяСтавка - годовая процентная ставка по договору.
//			МатериальнаяВыгодаОблагаетсяНДФЛ - признак необходимости начислять материальную выгоду.
//
Процедура РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, ДатаПолученияДохода, РасчетЗаймов, Регистратор) Экспорт
	
	Отбор = Новый Структура("МатериальнаяВыгодаОблагаетсяНДФЛ", Истина);
	СтрокиКРасчету = РасчетЗаймов.НайтиСтроки(Отбор);
	Если СтрокиКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИдентификаторСтроки = 1;
	СтрокиРасчета = Новый Соответствие;
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		СтрокаРасчета.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиРасчета.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	РасчетЗаймов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетЗаймов.ДатаНачала КАК ДатаНачала,
	|	РасчетЗаймов.ДатаОкончания КАК ДатаОкончания,
	|	РасчетЗаймов.ПогашениеЗайма КАК ПогашениеЗайма,
	|	РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ КАК МатериальнаяВыгодаОблагаетсяНДФЛ
	|ПОМЕСТИТЬ ВТРасчетЗаймов
	|ИЗ
	|	&РасчетЗаймов КАК РасчетЗаймов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	РасчетЗаймов.ДатаНачала КАК Период,
	|	РасчетЗаймов.ДатаНачала КАК ДатаНачала,
	|	РасчетЗаймов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыПогашенияЗайма
	|ИЗ
	|	ВТРасчетЗаймов КАК РасчетЗаймов
	|ГДЕ
	|	РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	МАКСИМУМ(НачисленияУдержанияПоСотрудникам.ДатаОкончания) КАК Период
	|ПОМЕСТИТЬ ВТДатыНачисленияМатериальнойВыгоды
	|ИЗ
	|	ВТРасчетЗаймов КАК РасчетЗаймов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ПО (НачисленияУдержанияПоСотрудникам.ДокументОснование = РасчетЗаймов.ДоговорЗайма)
	|			И (НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = РасчетЗаймов.ФизическоеЛицо)
	|			И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам))
	|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
	|			И (НачисленияУдержанияПоСотрудникам.Период <= &ДатаОперации)
	|			И (НачисленияУдержанияПоСотрудникам.ДатаОкончания <= &ДатаОперации)
	|			И (РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетЗаймов.ДоговорЗайма";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РасчетЗаймов", РасчетЗаймов);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаПолученияДохода);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	// Запрашиваем ставку рефинансирования
	СтавкаРефинансирования = 0;
	Выборка = РегистрыСведений.СтавкаРефинансированияЦБ.Выбрать(, ДатаПолученияДохода, , "Убыв");
	Если Выборка.Следующий() Тогда 
		СтавкаРефинансирования = Выборка.Размер;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыПогашенияЗайма.Период КАК Период,
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма КАК ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала КАК ИсходнаяДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания КАК ИсходнаяДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыНачисленияМатериальнойВыгоды
	|ИЗ
	|	ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, ДЕНЬ), СЕКУНДА, 1),
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания
	|ИЗ
	|	ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|ГДЕ
	|	КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, ДЕНЬ) <> КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДатыНачисленияМатериальнойВыгоды.Период, ДЕНЬ), СЕКУНДА, 1),
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания
	|ИЗ
	|	ВТДатыНачисленияМатериальнойВыгоды КАК ДатыНачисленияМатериальнойВыгоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|		ПО ДатыНачисленияМатериальнойВыгоды.ДоговорЗайма = ПериодыПогашенияЗайма.ДоговорЗайма
	|			И (ДатыНачисленияМатериальнойВыгоды.Период МЕЖДУ ПериодыПогашенияЗайма.ДатаНачала И ПериодыПогашенияЗайма.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Периоды.ДоговорЗайма КАК ДоговорЗайма,
	|	Периоды.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL
	|			ТОГДА Периоды.ИсходнаяДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТПериодыНачисленияМатериальнойВыгоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыНачисленияМатериальнойВыгоды КАК ПериодыСлед
	|		ПО Периоды.Период < ПериодыСлед.Период
	|			И Периоды.ИдентификаторСтроки = ПериодыСлед.ИдентификаторСтроки
	|ГДЕ
	|	Периоды.Период >= Периоды.ИсходнаяДатаНачала
	|	И Периоды.Период <= Периоды.ИсходнаяДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ИдентификаторСтроки,
	|	Периоды.ДоговорЗайма,
	|	Периоды.Период,
	|	Периоды.ИсходнаяДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Интервалы.ДоговорЗайма КАК ДоговорЗайма,
	|	Интервалы.ДатаНачала КАК ДатаНачала,
	|	Интервалы.ДатаОкончания КАК ДатаОкончания,
	|	РАЗНОСТЬДАТ(Интервалы.ДатаНачала, Интервалы.ДатаОкончания, ДЕНЬ) + 1 КАК Дней,
	|	ВЫБОР
	|		КОГДА ДатыНачисленияМатериальнойВыгоды.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РассчитыватьМатериальнуюВыгоду
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачисленияМатериальнойВыгоды КАК ДатыНачисленияМатериальнойВыгоды
	|		ПО (ДатыНачисленияМатериальнойВыгоды.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (ДатыНачисленияМатериальнойВыгоды.Период >= Интервалы.ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Интервалы.ИдентификаторСтроки,
	|	Интервалы.ДоговорЗайма";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.РассчитыватьМатериальнуюВыгоду Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасчета = СтрокиРасчета[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.РассчитыватьМатериальнуюВыгоду = Выборка.РассчитыватьМатериальнуюВыгоду;
		
		Если СтрокаРасчета.ПроцентнаяСтавка >= СтавкаРефинансирования * (2/3) Тогда
			Продолжить;
		КонецЕсли;
		
		ДнейВГоду = ЗаймыСотрудникамКлиентСервер.КоличествоДнейВГоду(Год(СтрокаРасчета.ДатаНачала));
		// Материальная выгода рассчитывается как превышение суммы процентов за пользование заемными средствами, 
		// исчисленной исходя из двух третьих действующей ставки рефинансирования, 
		// над суммой процентов, исчисленной исходя из условий договора (п. 1 ст. 212 НК РФ).
		МатериальнаяВыгода = СтрокаРасчета.ОстатокЗайма 
				* (СтавкаРефинансирования * (2/3) - СтрокаРасчета.ПроцентнаяСтавка) * 0.01 / ДнейВГоду 
				* Выборка.Дней;
		СтрокаРасчета.МатериальнаяВыгода = СтрокаРасчета.МатериальнаяВыгода + МатериальнаяВыгода; 
		
	КонецЦикла;
	
	РасчетЗаймов.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	РасчетЗаймов.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы, "КатегорияДохода");
	РасчетЗаймов.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	РасчетЗаймов.ЗаполнитьЗначения(Справочники.ВидыДоходовНДФЛ.Код2610, "КодДохода");
	РасчетЗаймов.Колонки.МатериальнаяВыгода.Имя = "СуммаДохода";
	РасчетЗаймов.Колонки.НалогНаМатериальнуюВыгоду.Имя = "НДФЛ";
	
	РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, РасчетЗаймов);
	РасчетЗаймов.Колонки.НДФЛ.Имя = "НалогНаМатериальнуюВыгоду";
	РасчетЗаймов.Колонки.СуммаДохода.Имя = "МатериальнаяВыгода";
	
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		Если СтрокаРасчета.МатериальнаяВыгода = 0 Или Не СтрокаРасчета.РассчитыватьМатериальнуюВыгоду Тогда
			СтрокаРасчета.НалогНаМатериальнуюВыгоду = 0 
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗаймов.Колонки.Удалить("КодДохода");
	
КонецПроцедуры

// Выполняет расчет налога с дивидендов для одного акционера.
//
// Параметры:
//	- Организация
//	- Акционер
//	- Начислено
//	- ВычетПоНДФЛ
// Возвращаемое значение - величина НДФЛ.
// 
Функция НалогСДивидендовАкционера(ДатаПолученияДохода, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КатегорияДивидендов) Тогда 
		КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	КонецЕсли;
	
	ТаблицаДивиденды = Новый ТаблицаЗначений();
	ТаблицаДивиденды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДивиденды.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ТаблицаДивиденды.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ТаблицаДивиденды.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаДивиденды.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число"));
	ТаблицаДивиденды.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число"));
	ТаблицаДивиденды.Колонки.Добавить("НДФЛ", Новый ОписаниеТипов("Число"));
	СтрокаДохода = ТаблицаДивиденды.Добавить();
	СтрокаДохода.ФизическоеЛицо = Акционер;
	СтрокаДохода.СуммаДохода = Начислено;
	СтрокаДохода.СуммаВычета = ВычетПоНДФЛ;
	СтрокаДохода.КатегорияДохода = КатегорияДивидендов;
	СтрокаДохода.КодДохода = Справочники.ВидыДоходовНДФЛ.Код1010;
	СтрокаДохода.КодВычета = Справочники.ВидыВычетовНДФЛ.Код403;
	РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, ТаблицаДивиденды);
	
	Возврат ТаблицаДивиденды[0].НДФЛ;
	
КонецФункции

// формирование движений

// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом возможных сторнирований и
// исправлений документов.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДатаВыплаты - дата -
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицу 
//			ВТНачисления с полями.
//				Сотрудник, тип СправочникСсылка.Сотрудники.
//				Начисление, тип ПланВидовРасчетаСсылка.Начисления,СправочникСсылка.ВидыДоходовНДФЛ 
//				ДатаНачала, тип дата 
//				Сторно, тип булево 
//				СторнируемыйДокумент, тип ДокументСсылка
//				СуммаДохода, тип число
//				СуммаВычетаНДФЛ, тип число
//				КодВычетаНДФЛ, тип СправочникСсылка.ВидыВычетовНДФЛ.
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				ПодразделениеОрганизации, тип СправочникСсылка.ПодразделенияОрганизаций.
//				СуммаЗаСчетГрантов, тип число - необязательная
//		МесяцНачисления - дата -
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		ИсключаемыйРегистратор - ДокументСсылка - документ, движения которого не следует учитывать при расчете движений.
//		МенеджерКадровогоУчета - Общий модуль - держатель метода СоздатьВТКадровыеДанныеСотрудников.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ИмяВТНачисления = "ВТНачисления", ИсключаемыйРегистратор = Неопределено, МенеджерКадровогоУчета = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(МесяцНачисления) Тогда
		МесяцНачисления = ДатаОперации
	КонецЕсли;
	
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.Сторно
	|	И (НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВременнаяТаблица", ИмяВТНачисления);
	
	Если Запрос.Выполнить().Пустой() Тогда // Сторнировать доходы не требуется.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, ИмяВТНачисления, ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
		Возврат 
	КонецЕсли;
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВТНачисления, "Сотрудник, ДатаНачала");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТВоеннослужащиеПоПризыву";
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ЯвляетсяВоеннослужащимПоПризыву");
	РасчетЗарплаты.СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0 КАК СуммаЗаСчетГрантов,
	|	ВЫБОР
	|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
	|			ТОГДА НачисленияДокумента.СуммаДохода
	|		КОГДА НачисленияДокумента.СуммаДохода * НачисленияДокумента.СуммаДохода < НачисленияДокумента.СуммаЗаСчетГрантов * НачисленияДокумента.СуммаЗаСчетГрантов
	|			ТОГДА 0
	|		ИНАЧЕ НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаЗаСчетГрантов
	|	КОНЕЦ КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
	|				ИЛИ НачисленияДокумента.СуммаДохода = 0
	|			ТОГДА НачисленияДокумента.СуммаВычетаНДФЛ
	|		ИНАЧЕ НачисленияДокумента.СуммаВычетаНДФЛ * (1 - НачисленияДокумента.СуммаЗаСчетГрантов / НачисленияДокумента.СуммаДохода)
	|	КОНЕЦ КАК СуммаВычетаНДФЛ,
	|	*
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	#ИмяВТНачисления КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВоеннослужащиеПоПризыву КАК ДанныеОСотруднике
	|		ПО НачисленияДокумента.Сотрудник = ДанныеОСотруднике.Сотрудник
	|		И НачисленияДокумента.ДатаНачала = ДанныеОСотруднике.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваНачислений КАК СвойстваНачислений
	|		ПО НачисленияДокумента.Начисление = СвойстваНачислений.Начисление
	|ГДЕ
	|	(НЕ ДанныеОСотруднике.ЯвляетсяВоеннослужащимПоПризыву
	|			ИЛИ ЕСТЬNULL(НЕ СвойстваНачислений.ЯвляетсяДенежнымДовольствием, ИСТИНА))";
	Если МенеджерВременныхТаблиц.Таблицы[ИмяВТНачисления].Колонки.Найти("СуммаЗаСчетГрантов") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СуммаЗаСчетГрантов", "0");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ИмяВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТВоеннослужащиеПоПризыву");
	ТаблицыКУдалению.Добавить("ВТДополнительныеСвойстваНачислений");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияДокумента.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.Сторно
	|	И (НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)";
	Если Запрос.Выполнить().Пустой() Тогда // Сторнировать доходы не требуется.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, "ВТВременнаяТаблица", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВременнаяТаблица");
		Возврат 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&ДатаОперации,
	|			СтруктурнаяЕдиница В
	|				(ВЫБРАТЬ
	|					Начисления.Подразделение
	|				ИЗ
	|					ВТВременнаяТаблица КАК Начисления)) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТСторноЗаписи
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НачисленияДокумента.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноЗаписи КАК СторноЗаписи
	|		ПО НачисленияДокумента.Сотрудник.ФизическоеЛицо = СторноЗаписи.ФизическоеЛицо
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = СторноЗаписи.КодДоходаНДФЛ)
	|			И (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = СторноЗаписи.РегистрацияВНалоговомОргане)
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И СторноЗаписи.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСторноЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.Сотрудник.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Отдельно отразим доходы сотрудников, у которых не было сторнирования.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПоложительныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	НАЧАЛОПЕРИОДА(НачисленияДокумента.ДатаНачала, МЕСЯЦ) КАК ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.СуммаДохода КАК СуммаДохода,
	|	НачисленияДокумента.СуммаВычетаНДФЛ КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ПОМЕСТИТЬ ВТНеПоложительныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.Сотрудник.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтрицательныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.КодДоходаНДФЛ,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.ДатаНачала
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.КодДоходаНДФЛ,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.ДатаНачала
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО НачисленияДокумента.РегистрацияВНалоговомОргане = ОтрицательныеДоходы.РегистрацияВНалоговомОргане
	|			И НачисленияДокумента.КодДоходаНДФЛ = ОтрицательныеДоходы.КодДоходаНДФЛ
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|			И НачисленияДокумента.ДатаНачала = ОтрицательныеДоходы.ДатаНачала
	|ГДЕ
	|	ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Отдельно отразим доходы за те месяцы, когда не было сторнирования.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТПоложительныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычета,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО НачисленияДокумента.РегистрацияВНалоговомОргане = ОтрицательныеДоходы.РегистрацияВНалоговомОргане
	|			И НачисленияДокумента.КодДоходаНДФЛ = ОтрицательныеДоходы.КодДоходаНДФЛ
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|			И НачисленияДокумента.ДатаНачала = ОтрицательныеДоходы.ДатаНачала
	|ГДЕ
	|	ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно";
	
	Результат = Запрос.Выполнить();
	ЕстьСторно = Не Результат.Пустой();
	
	Если ЕстьСторно Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
		|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних";
		ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТНеПоложительныеДоходы");
	ТаблицыКУдалению.Добавить("ВТОтрицательныеДоходы");
	ТаблицыКУдалению.Добавить("ВТВременнаяТаблица");
	ТаблицыКУдалению.Добавить("ВТРегистрацииВНалоговомОргане");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
	Если Не ЕстьСторно Тогда
		УчетНДФЛ.ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, ИсключаемыйРегистратор); 
		Если Записывать Тогда
			Движения.СведенияОДоходахНДФЛ.Записать();
			Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
		Иначе
			Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	ВременнаяТаблица = Результат.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	НомерСтроки = 1;
	Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
		СтрокаТЗ.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", ВременнаяТаблица); ВременнаяТаблица = Неопределено;
	Запрос.УстановитьПараметр("ДатаВыплаты", ДатаВыплаты);
	Запрос.УстановитьПараметр("ТаблицаРегистраций", ТаблицаРегистраций);
	Запрос.УстановитьПараметр("КонецМесяцаНачисления", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	&КонецМесяцаНачисления КАК Период,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.СуммаДохода,
	|	НачисленияДокумента.СуммаВычета,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ПОМЕСТИТЬ ВТНачисленияДокумента
	|ИЗ
	|	&Начисления КАК НачисленияДокумента";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТНачисленияДокумента");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТДатыУвольненияНДФЛ";
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ДатаУвольнения");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОргане
	|ИЗ
	|	&ТаблицаРегистраций КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТСторноНачисленияДокумента
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТПарныеСтроки
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ПО НачисленияДокумента.Сотрудник = СторноНачисленияДокумента.Сотрудник
	|			И НачисленияДокумента.Начисление = СторноНачисленияДокумента.Начисление
	|			И НачисленияДокумента.ДатаНачала = СторноНачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НЕ НачисленияДокумента.Сторно
	|	И СторноНачисленияДокумента.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СторноНачисленияДокумента.НомерСтроки
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ПО НачисленияДокумента.Сотрудник = СторноНачисленияДокумента.Сотрудник
	|			И НачисленияДокумента.Начисление = СторноНачисленияДокумента.Начисление
	|			И НачисленияДокумента.ДатаНачала = СторноНачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НЕ НачисленияДокумента.Сторно
	|	И СторноНачисленияДокумента.Сотрудник ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиДокументаСПарнымиНачислениями
	|ИЗ
	|	ВТПарныеСтроки КАК НачисленияДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СторноНачисленияДокумента.НомерСтроки
	|ИЗ
	|	ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияДокумента.ДатаНачала КАК ДатаНачала,
	|			НачисленияДокумента.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТНачисленияДокумента КАК НачисленияДокумента
	|		ГДЕ
	|			НЕ НачисленияДокумента.Сторно
	|			И НЕ НачисленияДокумента.НомерСтроки В
	|						(ВЫБРАТЬ
	|							ПарныеСтроки.НомерСтроки
	|						ИЗ
	|							ВТПарныеСтроки КАК ПарныеСтроки)) КАК НачисленияДокумента
	|		ПО СторноНачисленияДокумента.Сотрудник = НачисленияДокумента.Сотрудник
	|			И СторноНачисленияДокумента.ДатаНачала = НачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НачисленияДокумента.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НачисленияДокумента.НомерСтроки) КАК НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.Сторно,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиДоходов
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.НомерСтроки В
	|			(ВЫБРАТЬ
	|				СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|			ИЗ
	|				ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Сторно,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.КодВычетаНДФЛ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаДохода
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаВычета
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно,
	|	СтрокиДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписямиПоПарнымСтрокам
	|ИЗ
	|	ВТСтрокиДоходов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДоходов КАК СторноЗаписиДокумента
	|		ПО ДанныеДокумента.Сотрудник = СторноЗаписиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СторноЗаписиДокумента.ФизическоеЛицо
	|			И ДанныеДокумента.Начисление = СторноЗаписиДокумента.Начисление
	|			И ДанныеДокумента.КодВычетаНДФЛ = СторноЗаписиДокумента.КодВычетаНДФЛ
	|			И ДанныеДокумента.ДатаНачала = СторноЗаписиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СторноЗаписиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СторноЗаписиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СторноЗаписиДокумента.РегистрацияВНалоговомОргане
	|			И (НЕ ДанныеДокумента.Сторно
	|					И СторноЗаписиДокумента.Сторно
	|				ИЛИ ДанныеДокумента.Сторно
	|					И НЕ СторноЗаписиДокумента.Сторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК СтрокиДокумента
	|		ПО ДанныеДокумента.Сотрудник = СтрокиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СтрокиДокумента.ФизическоеЛицо
	|			И ДанныеДокумента.Начисление = СтрокиДокумента.Начисление
	|			И ДанныеДокумента.ДатаНачала = СтрокиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СтрокиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СтрокиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СтрокиДокумента.РегистрацияВНалоговомОргане
	|			И ДанныеДокумента.Сторно = СтрокиДокумента.Сторно
	|			И (ДанныеДокумента.Сторно)
	|			И (СтрокиДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТСторноЗаписи
	|ИЗ
	|	ВТСторноНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноЗаписи КАК СторноЗаписи
	|		ПО НачисленияДокумента.ФизическоеЛицо = СторноЗаписи.ФизическоеЛицо
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = СторноЗаписи.КодДоходаНДФЛ)
	|			И (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = СторноЗаписи.РегистрацияВНалоговомОргане)
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычета <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|	И СторноЗаписи.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычета) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСторноЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.СуммаДохода КАК СуммаДохода,
	|	НачисленияДокумента.СуммаВычета КАК СуммаВычета,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеСотрудника КАК ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиПоложительныхДоходов
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычета <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|	И НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТСтрокиПоложительныхДоходов КАК НачисленияДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Могли остаться только положительные доходы.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, Запрос.МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(НачисленияДокумента.НомерСтроки) КАК НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДохода,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.Сторно,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиДоходовПоКодамДохода
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|ГДЕ
	|	НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					СтрокиПоложительныхДоходов.НомерСтроки
	|				ИЗ
	|					ВТСтрокиПоложительныхДоходов КАК СтрокиПоложительныхДоходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Сторно,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.КодВычетаНДФЛ,
	|	ДанныеДокумента.СуммаДохода,
	|	ДанныеДокумента.СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно,
	|	ДанныеДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписями
	|ИЗ
	|	ВТНачисленияСоСторноЗаписямиПоПарнымСтрокам КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	СтрокиДокумента.Начисление,
	|	ДанныеДокумента.КодВычетаНДФЛ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаДохода
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаВычета
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно,
	|	СтрокиДокумента.СторнируемыйДокумент
	|ИЗ
	|	ВТСтрокиДоходовПоКодамДохода КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДоходовПоКодамДохода КАК СторноЗаписиДокумента
	|		ПО ДанныеДокумента.Сотрудник = СторноЗаписиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СторноЗаписиДокумента.ФизическоеЛицо
	|			И ДанныеДокумента.КодДохода = СторноЗаписиДокумента.КодДохода
	|			И ДанныеДокумента.КодВычетаНДФЛ = СторноЗаписиДокумента.КодВычетаНДФЛ
	|			И ДанныеДокумента.ДатаНачала = СторноЗаписиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СторноЗаписиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СторноЗаписиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СторноЗаписиДокумента.РегистрацияВНалоговомОргане
	|			И (НЕ ДанныеДокумента.Сторно
	|					И СторноЗаписиДокумента.Сторно
	|				ИЛИ ДанныеДокумента.Сторно
	|					И НЕ СторноЗаписиДокумента.Сторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК СтрокиДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ПО СтрокиДокумента.Начисление = Начисления.Ссылка
	|		ПО ДанныеДокумента.Сотрудник = СтрокиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СтрокиДокумента.ФизическоеЛицо
	|			И (ДанныеДокумента.КодДохода = ЕСТЬNULL(Начисления.КодДоходаНДФЛ, СтрокиДокумента.Начисление))
	|			И ДанныеДокумента.ДатаНачала = СтрокиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СтрокиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СтрокиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СтрокиДокумента.РегистрацияВНалоговомОргане
	|			И ДанныеДокумента.Сторно = СтрокиДокумента.Сторно
	|			И (ДанныеДокумента.Сторно)
	|			И (НЕ СтрокиДокумента.НомерСтроки В
	|					(ВЫБРАТЬ
	|						СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|					ИЗ
	|						ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ
	|						СтрокиПоложительныхДоходов.НомерСтроки
	|					ИЗ
	|						ВТСтрокиПоложительныхДоходов КАК СтрокиПоложительныхДоходов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСоСторноЗаписями.НомерСтроки,
	|	НачисленияСоСторноЗаписями.СторнируемыйДокумент
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
	|ГДЕ
	|	НачисленияСоСторноЗаписями.Сторно";
	
	ТаблицаСторнируемыхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаПромежуточныхИсправлений = ТаблицаСторнируемыхДокументов.СкопироватьКолонки("СторнируемыйДокумент");
	ТаблицаПромежуточныхИсправлений.Колонки.Добавить("ПромежуточноеИсправление", ТаблицаСторнируемыхДокументов.Колонки.СторнируемыйДокумент.ТипЗначения);
	УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений);
	Запрос.УстановитьПараметр("ТаблицаСторнируемыхДокументов", ТаблицаСторнируемыхДокументов);
	Запрос.УстановитьПараметр("ТаблицаПромежуточныхИсправлений", ТаблицаПромежуточныхИсправлений);
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСторнируемыхДокументов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСторнируемыхДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаСторнируемыхДокументов
	|ИЗ
	|	&ТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление КАК ПромежуточноеИсправление,
	|	ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаПромежуточныхИсправлений
	|ИЗ
	|	&ТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСведенияРегистраБезУточнений
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СторноЗаписи.СторнируемыйДокумент КАК Документ
	|		ИЗ
	|			ВТТаблицаСторнируемыхДокументов КАК СторноЗаписи) КАК СторнируемыеДокументы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = СторнируемыеДокументы.Документ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Начисления.ФизическоеЛицо
	|			ИЗ
	|				ВТНачисленияСоСторноЗаписями КАК Начисления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияРегистраБезУточнений.Регистратор КАК Регистратор,
	|	СведенияРегистраБезУточнений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияРегистраБезУточнений.КодДохода КАК КодДохода,
	|	МИНИМУМ(СведенияРегистраБезУточнений.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода,
	|	МИНИМУМ(СведенияРегистраБезУточнений.ДатаПолученияДохода) КАК ДатаПолученияДохода,
	|	СведенияРегистраБезУточнений.Начисление КАК Начисление,
	|	СведенияРегистраБезУточнений.Подразделение КАК Подразделение,
	|	СведенияРегистраБезУточнений.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияРегистраБезУточнений.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияРегистраБезУточнений.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСторнируемыеСтрокиДоходов
	|ИЗ
	|	ВТСведенияРегистраБезУточнений КАК СведенияРегистраБезУточнений
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияРегистраБезУточнений.Регистратор,
	|	СведенияРегистраБезУточнений.ФизическоеЛицо,
	|	СведенияРегистраБезУточнений.КодДохода,
	|	СведенияРегистраБезУточнений.Начисление,
	|	СведенияРегистраБезУточнений.Подразделение,
	|	СведенияРегистраБезУточнений.ПодразделениеСотрудника,
	|	СведенияРегистраБезУточнений.РегистрацияВНалоговомОргане,
	|	СведенияРегистраБезУточнений.ИсточникДоходаЗаПределамиРФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСведенияРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|		СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|		СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|		СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|		СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета,
	|		СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|		СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|		СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|		СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода
	|	ИЗ
	|		ВТСведенияРегистраБезУточнений КАК СведенияОДоходахНДФЛ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтрокиДоходов.Регистратор,
	|		СтрокиДоходов.ФизическоеЛицо,
	|		СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|		СтрокиДоходов.КодДохода,
	|		СтрокиДоходов.РегистрацияВНалоговомОргане,
	|		СтрокиДоходов.ИсточникДоходаЗаПределамиРФ,
	|		СведенияОДоходахНДФЛ.СуммаДохода,
	|		СведенияОДоходахНДФЛ.СуммаВычета,
	|		СтрокиДоходов.Начисление,
	|		СтрокиДоходов.Подразделение,
	|		СтрокиДоходов.ПодразделениеСотрудника,
	|		СведенияОДоходахНДФЛ.ДатаПолученияДохода
	|	ИЗ
	|		ВТСведенияРегистраБезУточнений КАК СтрокиДоходов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|			ПО СтрокиДоходов.Регистратор = ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|			ПО (ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление = СведенияОДоходахНДФЛ.Регистратор)
	|				И СтрокиДоходов.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо
	|				И СтрокиДоходов.КодДохода = СведенияОДоходахНДФЛ.КодДохода
	|				И СтрокиДоходов.Подразделение = СведенияОДоходахНДФЛ.Подразделение
	|				И СтрокиДоходов.РегистрацияВНалоговомОргане = СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
	|				И СтрокиДоходов.ИсточникДоходаЗаПределамиРФ = СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ
	|	ГДЕ
	|		СведенияОДоходахНДФЛ.ФизическоеЛицо ЕСТЬ НЕ NULL ) КАК СведенияОДоходахНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ
	|
	|ИМЕЮЩИЕ
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.КодДохода КАК Ссылка
	|ПОМЕСТИТЬ ВТОплатаТруда
	|ИЗ
	|	ВТДополнительныеСвойстваКодаДохода КАК ВидыДоходовНДФЛ
	|ГДЕ
	|	ВидыДоходовНДФЛ.СоответствуетОплатеТруда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСоСторноЗаписями.НомерСтроки КАК НомерСтроки,
	|	НачисленияСоСторноЗаписями.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СведенияРегистра.Подразделение, НачисленияСоСторноЗаписями.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(СведенияРегистра.ПодразделениеСотрудника, НачисленияСоСторноЗаписями.ПодразделениеСотрудника) КАК ПодразделениеСотрудника,
	|	ЕСТЬNULL(СведенияРегистра.РегистрацияВНалоговомОргане, НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	СведенияРегистра.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	ЕСТЬNULL(СведенияРегистра.ДатаПолученияДохода, ВЫБОР
	|			КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
	|					(ВЫБРАТЬ
	|						ОплатаТруда.Ссылка
	|					ИЗ
	|						ВТОплатаТруда КАК ОплатаТруда)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления) < &КонецМесяцаНачисления
	|								И КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления), МЕСЯЦ) = &КонецМесяцаНачисления
	|							ТОГДА ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления)
	|						ИНАЧЕ &КонецМесяцаНачисления
	|					КОНЕЦ
	|			ИНАЧЕ &ДатаВыплаты
	|		КОНЕЦ) КАК ДатаПолученияДохода,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) КАК КодДохода,
	|	ЕСТЬNULL(СведенияРегистра.МесяцНалоговогоПериода, НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
	|						(ВЫБРАТЬ
	|							ОплатаТруда.Ссылка
	|						ИЗ
	|							ВТОплатаТруда КАК ОплатаТруда)
	|					ТОГДА &КонецМесяцаНачисления
	|				ИНАЧЕ &ДатаВыплаты
	|			КОНЕЦ, МЕСЯЦ)) КАК МесяцНалоговогоПериода,
	|	НачисленияСоСторноЗаписями.СуммаДохода КАК СуммаДохода,
	|	НачисленияСоСторноЗаписями.КодВычетаНДФЛ КАК КодВычета,
	|	НачисленияСоСторноЗаписями.СуммаВычета КАК СуммаВычета,
	|	НачисленияСоСторноЗаписями.Сотрудник КАК Сотрудник,
	|	Начисления.Ссылка КАК Начисление,
	|	ВЫБОР
	|		КОГДА СведенияРегистра.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСторнируемыеДанныеУчета,
	|	ЕСТЬNULL(СведенияРегистра.СуммаДохода, 0) КАК СуммаДоходаВУчете,
	|	ЕСТЬNULL(СведенияРегистра.СуммаВычета, 0) КАК СуммаВычетаВУчете
	|ПОМЕСТИТЬ ВТНачисленияСоСведениямиРегистра
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|		ПО НачисленияСоСторноЗаписями.НомерСтроки = ТаблицаСторнируемыхДокументов.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольненияНДФЛ КАК ДанныеОСотруднике
	|		ПО НачисленияСоСторноЗаписями.Сотрудник = ДанныеОСотруднике.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияСоСторноЗаписями.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияРегистра КАК СведенияРегистра
	|		ПО (ТаблицаСторнируемыхДокументов.СторнируемыйДокумент = СведенияРегистра.Регистратор)
	|			И НачисленияСоСторноЗаписями.ФизическоеЛицо = СведенияРегистра.ФизическоеЛицо
	|			И НачисленияСоСторноЗаписями.Подразделение = СведенияРегистра.Подразделение
	|			И НачисленияСоСторноЗаписями.ПодразделениеСотрудника = СведенияРегистра.ПодразделениеСотрудника
	|			И НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане = СведенияРегистра.РегистрацияВНалоговомОргане
	|			И (НачисленияСоСторноЗаписями.Сторно)
	|			И (НачисленияСоСторноЗаписями.Начисление = СведенияРегистра.Начисление
	|				ИЛИ НачисленияСоСторноЗаписями.Начисление = СведенияРегистра.КодДохода)
	|ГДЕ
	|	(НачисленияСоСторноЗаписями.СуммаДохода <> 0
	|			ИЛИ НачисленияСоСторноЗаписями.СуммаВычета <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
	|	-НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаСторнирования,
	|	СУММА(НачисленияСоСведениямиРегистра.СуммаДоходаВУчете) КАК СуммаВУчете,
	|	МИНИМУМ(НачисленияСоСведениямиРегистра.ДатаПолученияДохода) КАК РанняяДатаПолученияДохода
	|ПОМЕСТИТЬ ВТНекомпенсированныеСторноНачисления
	|ИЗ
	|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
	|ГДЕ
	|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСоСведениямиРегистра.НомерСтроки,
	|	-НачисленияСоСведениямиРегистра.СуммаДохода";
	Запрос.Выполнить();
	
	Если ДоходПолученНаТерриторииРФ Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияСоСведениямиРегистра.Подразделение КАК Подразделение,
		|	НачисленияСоСведениямиРегистра.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	НачисленияСоСведениямиРегистра.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЛОЖЬ КАК ИсточникДоходаЗаПределамиРФ,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	НачисленияСоСведениямиРегистра.КодДохода КАК КодДохода,
		|	НачисленияСоСведениямиРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаДохода,
		|	НачисленияСоСведениямиРегистра.КодВычета КАК КодВычета,
		|	НачисленияСоСведениямиРегистра.СуммаВычета КАК СуммаВычета,
		|	НачисленияСоСведениямиРегистра.Сотрудник КАК Сотрудник,
		|	НачисленияСоСведениямиРегистра.Начисление КАК Начисление,
		|	ЕСТЬNULL(НачисленияСоСведениямиРегистра.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ДатаПолученияДоходаФиксирована,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ЕстьСторнируемыеДанныеУчета,
		|	НачисленияСоСведениямиРегистра.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
		|	НачисленияСоСведениямиРегистра.СуммаВычетаВУчете КАК СуммаВычетаВУчете
		|ИЗ
		|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
		|		ПО НачисленияСоСведениямиРегистра.НомерСтроки = СторноНачисления.НомерСтроки
		|ГДЕ
		|	(НЕ НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
		|			ИЛИ ЕСТЬNULL(СторноНачисления.СуммаСторнирования, 0) <= ЕСТЬNULL(СторноНачисления.СуммаВУчете, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСоСведениямиРегистра.НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода УБЫВ";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияСоСведениямиРегистра.Подразделение КАК Подразделение,
		|	НачисленияСоСведениямиРегистра.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	НачисленияСоСведениямиРегистра.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВЫБОР
		|		КОГДА НачисленияСоСведениямиРегистра.ИсточникДоходаЗаПределамиРФ ЕСТЬ НЕ NULL 
		|			ТОГДА НачисленияСоСведениямиРегистра.ИсточникДоходаЗаПределамиРФ
		|		КОГДА СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникДоходаЗаПределамиРФ,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	НачисленияСоСведениямиРегистра.КодДохода КАК КодДохода,
		|	НачисленияСоСведениямиРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаДохода,
		|	НачисленияСоСведениямиРегистра.КодВычета КАК КодВычета,
		|	НачисленияСоСведениямиРегистра.СуммаВычета КАК СуммаВычета,
		|	НачисленияСоСведениямиРегистра.Сотрудник КАК Сотрудник,
		|	НачисленияСоСведениямиРегистра.Начисление КАК Начисление,
		|	ЕСТЬNULL(НачисленияСоСведениямиРегистра.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ДатаПолученияДоходаФиксирована,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ЕстьСторнируемыеДанныеУчета,
		|	НачисленияСоСведениямиРегистра.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
		|	НачисленияСоСведениямиРегистра.СуммаВычетаВУчете КАК СуммаВычетаВУчете
		|ИЗ
		|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
		|		ПО НачисленияСоСведениямиРегистра.НомерСтроки = СторноНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
		|		ПО НачисленияСоСведениямиРегистра.ПодразделениеСотрудника = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
		|			И (НачисленияСоСведениямиРегистра.ДатаПолученияДохода МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)
		|ГДЕ
		|	(НЕ НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
		|			ИЛИ ЕСТЬNULL(СторноНачисления.СуммаСторнирования, 0) <= ЕСТЬNULL(СторноНачисления.СуммаВУчете, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСоСведениямиРегистра.НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода УБЫВ";
	КонецЕсли;
	
	РегистрацияОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		Если Выборка.ЕстьСторнируемыеДанныеУчета Тогда
			
			СторноВсего = -Выборка.СуммаДохода;
			СторноВычета = -Выборка.СуммаВычета;
			
			Пока Выборка.Следующий() Цикл
				
				СуммаДохода = -Мин(СторноВсего, Выборка.СуммаДоходаВУчете);
				СторноВсего = СторноВсего + СуммаДохода;
				Если СторноВычета = 0 Тогда
					СуммаВычета = 0
				Иначе
					СуммаВычета = -Мин(СторноВычета, Выборка.СуммаВычетаВУчете);
					СторноВычета = СторноВычета + СуммаВычета;
				КонецЕсли;
				
				НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
				УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
				НоваяСтрока.СуммаДохода	= СуммаДохода;
				НоваяСтрока.СуммаВычета	= СуммаВычета;
				
				Если СторноВсего = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
			УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
			
		КонецЕсли;
	КонецЦикла;
	
	// Теперь поищем отменяемые начисления по периоду действия.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СторноНачисления.НомерСтроки,
	|	СторноНачисления.РанняяДатаПолученияДохода
	|ПОМЕСТИТЬ ВТСтрокиСторноПериода
	|ИЗ
	|	ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
	|ГДЕ
	|	СторноНачисления.СуммаСторнирования > СторноНачисления.СуммаВУчете";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда 
		
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСоСторноЗаписями.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСторноЗаписями.ФизическоеЛицо,
		|	ЕСТЬNULL(СведенияОДоходах.Подразделение, НачисленияСоСторноЗаписями.Подразделение) КАК Подразделение,
		|	ЕСТЬNULL(СведенияОДоходах.ПодразделениеСотрудника, НачисленияСоСторноЗаписями.ПодразделениеСотрудника) КАК ПодразделениеСотрудника,
		|	ЕСТЬNULL(СведенияОДоходах.РегистрацияВНалоговомОргане, НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
		|	СведенияОДоходах.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
		|	ЕСТЬNULL(СведенияОДоходах.ДатаПолученияДохода, ВЫБОР
		|			КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
		|					(ВЫБРАТЬ
		|						ОплатаТруда.Ссылка
		|					ИЗ
		|						ВТОплатаТруда КАК ОплатаТруда)
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления) < &КонецМесяцаНачисления
		|								И КОНЕЦПЕРИОДА(ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления), МЕСЯЦ) = &КонецМесяцаНачисления
		|							ТОГДА ЕСТЬNULL(ДанныеОСотруднике.ДатаУвольнения, &КонецМесяцаНачисления)
		|						ИНАЧЕ &КонецМесяцаНачисления
		|					КОНЕЦ
		|			ИНАЧЕ &ДатаВыплаты
		|		КОНЕЦ) КАК ДатаПолученияДохода,
		|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) КАК КодДохода,
		|	ЕСТЬNULL(СведенияОДоходах.МесяцНалоговогоПериода, НАЧАЛОПЕРИОДА(ВЫБОР
		|				КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
		|						(ВЫБРАТЬ
		|							ОплатаТруда.Ссылка
		|						ИЗ
		|							ВТОплатаТруда КАК ОплатаТруда)
		|					ТОГДА &КонецМесяцаНачисления
		|				ИНАЧЕ &ДатаВыплаты
		|			КОНЕЦ, МЕСЯЦ)) КАК МесяцНалоговогоПериода,
		|	НачисленияСоСторноЗаписями.СуммаДохода,
		|	НачисленияСоСторноЗаписями.КодВычетаНДФЛ КАК КодВычета,
		|	НачисленияСоСторноЗаписями.СуммаВычета,
		|	НачисленияСоСторноЗаписями.Сотрудник,
		|	Начисления.Ссылка КАК Начисление,
		|	ЕСТЬNULL(СведенияОДоходах.СуммаДохода, 0) КАК СуммаДоходаВУчете,
		|	ЕСТЬNULL(СведенияОДоходах.СуммаВычета, 0) КАК СуммаВычетаВУчете
		|ПОМЕСТИТЬ ВТНачисленияОтменяемыеПоПериодуДействия
		|ИЗ
		|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО НачисленияСоСторноЗаписями.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольненияНДФЛ КАК ДанныеОСотруднике
		|		ПО НачисленияСоСторноЗаписями.Сотрудник = ДанныеОСотруднике.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиСторноПериода КАК ТаблицаСторнируемыхСтрок
		|		ПО НачисленияСоСторноЗаписями.НомерСтроки = ТаблицаСторнируемыхСтрок.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
		|		ПО НачисленияСоСторноЗаписями.ФизическоеЛицо = СведенияОДоходах.ФизическоеЛицо
		|			И НачисленияСоСторноЗаписями.Начисление = СведенияОДоходах.Начисление
		|			И (СведенияОДоходах.Регистратор <> &ИсключаемыйРегистратор)
		|			И (СведенияОДоходах.Организация = &Организация)
		|			И (СведенияОДоходах.ДатаПолученияДохода >= ТаблицаСторнируемыхСтрок.РанняяДатаПолученияДохода)
		|ГДЕ
		|	(НачисленияСоСторноЗаписями.СуммаДохода <> 0
		|			ИЛИ НачисленияСоСторноЗаписями.СуммаВычета <> 0)
		|	И ТаблицаСторнируемыхСтрок.НомерСтроки ЕСТЬ НЕ NULL";
		Запрос.Выполнить();
		
		Если ДоходПолученНаТерриторииРФ Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияОтменяемыеПоПериодуДействия.НомерСтроки КАК НомерСтроки,
			|	НачисленияОтменяемыеПоПериодуДействия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияОтменяемыеПоПериодуДействия.Подразделение КАК Подразделение,
			|	НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
			|	НачисленияОтменяемыеПоПериодуДействия.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ЛОЖЬ КАК ИсточникДоходаЗаПределамиРФ,
			|	НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодДохода КАК КодДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДохода КАК СуммаДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодВычета КАК КодВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычета КАК СуммаВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.Сотрудник КАК Сотрудник,
			|	НачисленияОтменяемыеПоПериодуДействия.Начисление КАК Начисление,
			|	ЕСТЬNULL(НачисленияОтменяемыеПоПериодуДействия.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
			|	ИСТИНА КАК ДатаПолученияДоходаФиксирована,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычетаВУчете КАК СуммаВычетаВУчете
			|ИЗ
			|	ВТНачисленияОтменяемыеПоПериодуДействия КАК НачисленияОтменяемыеПоПериодуДействия
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	ДатаПолученияДохода УБЫВ";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияОтменяемыеПоПериодуДействия.НомерСтроки КАК НомерСтроки,
			|	НачисленияОтменяемыеПоПериодуДействия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияОтменяемыеПоПериодуДействия.Подразделение КАК Подразделение,
			|	НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
			|	НачисленияОтменяемыеПоПериодуДействия.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ВЫБОР
			|		КОГДА НачисленияОтменяемыеПоПериодуДействия.ИсточникДоходаЗаПределамиРФ ЕСТЬ НЕ NULL 
			|			ТОГДА НачисленияОтменяемыеПоПериодуДействия.ИсточникДоходаЗаПределамиРФ
			|		КОГДА СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИсточникДоходаЗаПределамиРФ,
			|	НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодДохода КАК КодДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДохода КАК СуммаДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодВычета КАК КодВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычета КАК СуммаВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.Сотрудник КАК Сотрудник,
			|	НачисленияОтменяемыеПоПериодуДействия.Начисление КАК Начисление,
			|	ЕСТЬNULL(НачисленияОтменяемыеПоПериодуДействия.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
			|	ИСТИНА КАК ДатаПолученияДоходаФиксирована,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычетаВУчете КАК СуммаВычетаВУчете
			|ИЗ
			|	ВТНачисленияОтменяемыеПоПериодуДействия КАК НачисленияОтменяемыеПоПериодуДействия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
			|		ПО НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
			|			И (НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	ДатаПолученияДохода УБЫВ";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СторноВсего = -Выборка.СуммаДохода;
			СторноВычета = -Выборка.СуммаВычета;
			Пока Выборка.Следующий() Цикл
				
				СуммаДохода = -Мин(СторноВсего, Выборка.СуммаДоходаВУчете);
				СторноВсего = СторноВсего + СуммаДохода;
				Если СторноВычета = 0 Тогда
					СуммаВычета = 0
				Иначе
					СуммаВычета = -Мин(СторноВычета, Выборка.СуммаВычетаВУчете);
					СторноВычета = СторноВычета + СуммаВычета;
				КонецЕсли;
				
				НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
				УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
				НоваяСтрока.СуммаДохода	= СуммаДохода;
				НоваяСтрока.СуммаВычета	= СуммаВычета;
				
				Если СторноВсего = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	УчетНДФЛ.ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, ИсключаемыйРегистратор); 
	
	Если Записывать Тогда
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом расширенных настроек.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		МесяцНачисления - дата -
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				КатегорияУдержания - тип ПеречислениеСсылка.КатегорииУдержаний.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				ДокументОснование - тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ, ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Удержания, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", Удержания);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.КатегорияУдержания КАК КатегорияВзносов,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&Удержания КАК Удержания";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов КАК КатегорияУдержания,
	|	ДанныеДокумента.Удержание,
	|	ДанныеДокумента.Сумма
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)";
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Запрос.Выполнить().Выгрузить(), Записывать, ОкончательныйРасчет);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым
//				КатегорияВзносов: должно быть непустым, тип ПеречислениеСсылка.КатегорииУдержаний.
//				ДокументОснование - необязательное, тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ,
//				                    ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных.
//				НеПредоставлятьВычет - необязательное, булево.
//				ДействуетДо - необязательное, дата.
//				НеПредоставлятьВычетПоОкончании - необязательное, булево.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПрименениеСоциальныхВычетовПоУдержаниям(Движения, Отказ, Организация, ДатаОперации, Удержания, Записывать = Ложь) Экспорт
	
	Если Удержания = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из Удержания Цикл
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, СтрокаДанных);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записать();
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Ложь;
		Иначе
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата, ПериодРегистрации - реквизиты регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(Регистратор, Движения, Отказ, Организация, Дата, ПериодРегистрации, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДанныеДляПроведения, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт 
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// регистрация доходов
	СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПериодРегистрации, Ложь, Не РегистрироватьСуммыНалога, , Регистратор, , ДоходПолученНаТерриторииРФ);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьДоходыНДФЛСведениямиОРаспределенииПоСтатьямФинансирования(Движения);
	Если Записывать Тогда
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Записывать, Ложь, ПланируемаяДатаВыплаты);
		СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПериодРегистрации, ДанныеДляПроведения.УдержанияПоСотрудникам, Записывать, Ложь);
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПорядокВыплаты, Записывать,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата - дата - реквизит регистратора.
//		МесяцНачисления - дата.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицей ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		ТаблицаДоходов - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				Подразделение: тип СправочникСсылка.ПодразделенияОрганизаций
//      	    ДатаПолученияДохода: должно быть непустым
//				КодДохода
//				СуммаДохода
//      	    КодВычета
//          	СуммаВычета.
//				Сотрудник - необязательная, может отсутствовать.
//      	    Начисление - необязательная, может отсутствовать.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоТаблицеДоходов(Регистратор, Движения, Отказ, Организация, Дата, МесяцНачисления, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДанныеДляПроведения, ТаблицаДоходов, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт 
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, МесяцНачисления);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// регистрация доходов
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ТаблицаДоходов, Истина, Не РегистрироватьСуммыНалога, Регистратор, ДоходПолученНаТерриторииРФ);
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Записывать, Ложь, ПланируемаяДатаВыплаты);
		СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, МесяцНачисления, ДанныеДляПроведения.УдержанияПоСотрудникам, Записывать, Ложь);
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПорядокВыплаты, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по перечисленному НДФЛ с учетом зарегистрированных ранее авансов по налогу.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация 
//		ДатаОперации - дата
//		РеквизитыПлатежногоПоручения - строка.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаОперации, РеквизитыПлатежногоПоручения, Записывать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ * РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержанныеНалоги
	|ИЗ
	|	&Движения КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	СУММА(УдержанныеНалоги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТСуммыПоФизлицам
	|ИЗ
	|	ВТУдержанныеНалоги КАК УдержанныеНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанныеНалоги.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	УдержанныеНалоги.Ставка,
	|	УдержанныеНалоги.МесяцНалоговогоПериода,
	|	УдержанныеНалоги.РегистрацияВНалоговомОргане,
	|	СУММА(УдержанныеНалоги.Сумма) КАК Сумма,
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	УдержанныеНалоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	УдержанныеНалоги.ИсчисленоПоДивидендам
	|ИЗ
	|	ВТУдержанныеНалоги КАК УдержанныеНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыПоФизлицам КАК СуммыПоФизлицам
	|		ПО УдержанныеНалоги.ФизическоеЛицо = СуммыПоФизлицам.ФизическоеЛицо
	|ГДЕ
	|	СуммыПоФизлицам.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	УдержанныеНалоги.Ставка,
	|	УдержанныеНалоги.МесяцНалоговогоПериода,
	|	УдержанныеНалоги.РегистрацияВНалоговомОргане,
	|	УдержанныеНалоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	УдержанныеНалоги.ИсчисленоПоДивидендам";

	Запрос.УстановитьПараметр("Движения", Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения", Лев(СокрЛП(РеквизитыПлатежногоПоручения), 50));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			УчетНДФЛ.СтрокаПеречисленияНДФЛПоНалогоплательщику(Движения, Организация, ДатаОперации, Выборка)
		КонецЦикла;
		
		Если Записывать Тогда
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные для регистрации факта применения вычетов по результатам удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляПримененияСоциальныхВычетов(ДанныеДляПроведения, Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Удержание.КатегорияУдержания КАК КатегорияВзносов,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ДокументУдержания.Ссылка.НеПредоставлятьСоциальныйВычетУРаботодателя
	|		ИНАЧЕ НЕ ДокументУдержания.Ссылка.НеПредоставлятьСоциальныйВычетУРаботодателя
	|	КОНЕЦ КАК НеПредоставлятьВычет
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ";
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"
			|	&ПустойДокументОснование КАК ДокументОснование,");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", МетаданныеДокумента.ПолноеИмя() + ".Удержания");
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ДействуетДо,
	|	ДанныеДокумента.НеПредоставлятьВычет,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)
	|	КОНЕЦ КАК НеПредоставлятьВычетПоОкончании
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	ДанныеДляПроведения.Вставить("ПримененияСоциальныхВычетов",Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Формирует массив физических лиц, получивших доход в указанном периоде, исключая заданных.
//
Функция ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ИсключаяФизическихЛиц, Начало, Окончание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ФизическиеЛица", ИсключаяФизическихЛиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо НЕ В (&ФизическиеЛица)
		|	И СведенияОДоходахНДФЛ.Организация = &Организация
		|	И СведенияОДоходахНДФЛ.ПодразделениеСотрудника В ИЕРАРХИИ (&Подразделение)";
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОДоходахНДФЛ.ПодразделениеСотрудника В ИЕРАРХИИ (&Подразделение)", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

// Взводит флажок ВключатьВДекларациюПоНалогуНаПрибыль в регистрах учета для доходов по акциям.
// 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
// 
Процедура УточнитьУчетНалогаПоЦеннымБумагам(Движения, Записывать = Ложь) Экспорт
	
	Если Движения.Найти("СведенияОДоходахНДФЛ") = Неопределено Или Движения.СведенияОДоходахНДФЛ.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Регистры = Новый Массив;
	Регистры.Добавить("ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ");
	Регистры.Добавить("РасчетыНалогоплательщиковСБюджетомПоНДФЛ");
	Регистры.Добавить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
	
	ДвиженияДокумента = Движения.СведенияОДоходахНДФЛ.Выгрузить();

	СтрокиВДекларациюПоНалогуНаПрибыль = ДвиженияДокумента.НайтиСтроки(Новый Структура("ВключатьВДекларациюПоНалогуНаПрибыль", Истина));
	Если СтрокиВДекларациюПоНалогуНаПрибыль.Количество() = 0 Тогда
		
		Возврат
	
	ИначеЕсли ДвиженияДокумента.Количество() = СтрокиВДекларациюПоНалогуНаПрибыль.Количество() Тогда
		
		Для каждого Регистр Из Регистры Цикл
			
			НаборЗаписей = Движения.Найти(Регистр);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ВключатьВДекларациюПоНалогуНаПрибыль = Истина
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				Если Записывать Тогда
					НаборЗаписей.Записать();
					НаборЗаписей.Записывать = Ложь;
				Иначе
					НаборЗаписей.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Движения", ДвиженияДокумента);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.ДатаПолученияДохода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТДвиженияДокумента
		|ИЗ
		|	&Движения КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода >= ДАТАВРЕМЯ(2014, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТФизлицаСОднотипнымиДоходами
		|ИЗ
		|	ВТДвиженияДокумента КАК СведенияОДоходахНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизлицаСОднотипнымиДоходами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаСОднотипнымиДоходами.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода
		|ИЗ
		|	ВТФизлицаСОднотипнымиДоходами КАК ФизлицаСОднотипнымиДоходами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияДокумента КАК СведенияОДоходахНДФЛ
		|		ПО ФизлицаСОднотипнымиДоходами.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо
		|			И ФизлицаСОднотипнымиДоходами.МесяцНалоговогоПериода = СведенияОДоходахНДФЛ.МесяцНалоговогоПериода
		|			И ФизлицаСОднотипнымиДоходами.РегистрацияВНалоговомОргане = СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	РегистрацияВНалоговомОргане";
		ТаблицаФизлиц = Запрос.Выполнить().Выгрузить();
		
		СтруктураПоиска = Новый Структура("ФизическоеЛицо, РегистрацияВНалоговомОргане, МесяцНалоговогоПериода");
		
		Для каждого Регистр Из Регистры Цикл
			
			НаборЗаписей = Движения.Найти(Регистр);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Запись Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
				СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(СтруктураПоиска.МесяцНалоговогоПериода);
				Если ТаблицаФизлиц.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
					Запись.ВключатьВДекларациюПоНалогуНаПрибыль = Истина
				КонецЕсли;
			КонецЦикла;

			Если НаборЗаписей.Модифицированность() Тогда
				Если Записывать Тогда
					НаборЗаписей.Записать();
					НаборЗаписей.Записывать = Ложь;
				Иначе
					НаборЗаписей.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКорректировкуДвижений(Набор, ПараметрыКорректировки) Экспорт
	Если ПараметрыКорректировки.ВидКорректировки = "ВосстановлениеДатПолученияДохода" Тогда
		ВосстановитьДатыПолученияДохода(Набор, ПараметрыКорректировки);
	КонецЕсли;
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент	 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  ПараметрыИсправления	 - Структура					 - Свойства см. в описании функции СторнироватьПоУчетам модулей менеджеров документов.
//  ИсключаемыйРегистратор	 - ДокументСсылка				 - Документ, движения которого не следует учитывать при расчете движений.
//  Записывать				 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыИсправления = Неопределено, ИсключаемыйРегистратор = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетНДФЛРасширенный";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	ИсправлениеВТекущемПериоде = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ИсправлениеВТекущемПериоде") И ПараметрыИсправления.ИсправлениеВТекущемПериоде;
	ОтменаДокумента = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ОтменаДокумента") И ПараметрыИсправления.ОтменаДокумента;

	Если ОтменаДокумента И Не ИсправлениеВТекущемПериоде Тогда
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
		
		Для Каждого МетаданныеРегистра Из ИсключаемыеРегистры Цикл
			Если ДвиженияВСтруктуре Тогда
				Движения.Свойство(МетаданныеРегистра.Имя, Набор);
			Иначе
				Набор = Движения.Найти(МетаданныеРегистра.Имя);
			КонецЕсли;
			
			Если Набор <> Неопределено Тогда
				// Наборы для исключаемых регистров изолируются, но не сторнируются.
				ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИсправлениеВТекущемПериоде Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ;
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		Если Набор <> Неопределено И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	(РегистрНакопления.ДокументОснование = &ИсправленныйДокумент ИЛИ РегистрНакопления.Регистратор = &ИсправленныйДокумент)
			|	И РегистрНакопления.Регистратор НЕ В(&ИсключаемыйРегистратор, &ДокументИсправление)
			|	И РегистрНакопления.Сторно = ЛОЖЬ";
			
			ДокументИсправление = Набор.Отбор.Регистратор.Значение;
			Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключаемыйРегистратор = Неопределено, ДокументИсправление, ИсключаемыйРегистратор));
			Запрос.УстановитьПараметр("ДокументИсправление", ДокументИсправление);
			Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
				
				СохраняемыеДатыДохода = Новый ТаблицаЗначений();
				СохраняемыеДатыДохода.Колонки.Добавить("СуммаДохода");
				СохраняемыеДатыДохода.Колонки.Добавить("СуммаВычета");
				КолонкиГруппировки = "ФизическоеЛицо,ДатаПолученияДохода,СтатьяФинансирования,СтатьяРасходов,Сотрудник,Подразделение,КодДохода";
				Для Каждого Колонка Из СтрРазделить(КолонкиГруппировки, ",") Цикл
					СохраняемыеДатыДохода.Колонки.Добавить(Колонка);
				КонецЦикла;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					// Формирование сторно строк.
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
						НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
					КонецЦикла;
					НоваяСтрока.Сторно = Истина;
					
					// Формирование таблицы дат получения дохода для восстановления их после формирования новых движений.
					Если Выборка.ДокументОснование <> Выборка.Регистратор И Не Выборка.ДатаПолученияДоходаФиксирована
						И ЗначениеЗаполнено(Выборка.УстаревшаяДатаПолученияДохода) Тогда
						ЗаполнитьЗначенияСвойств(СохраняемыеДатыДохода.Добавить(), Выборка);
					КонецЕсли;
				КонецЦикла;
				
				Если СохраняемыеДатыДохода.Количество() > 0 Тогда
					ВариантыГруппировки = Новый Массив;
					ВариантыГруппировки.Добавить(КолонкиГруппировки);
					ВариантыГруппировки.Добавить("ФизическоеЛицо,ДатаПолученияДохода,СтатьяФинансирования,СтатьяРасходов,Сотрудник,Подразделение");
					ВариантыГруппировки.Добавить("ФизическоеЛицо,ДатаПолученияДохода");
					
					ПараметрыКорректировки = Новый Структура;
					ПараметрыКорректировки.Вставить("ИмяМодуля", "УчетНДФЛРасширенный");
					ПараметрыКорректировки.Вставить("ВидКорректировки", "ВосстановлениеДатПолученияДохода");
					ПараметрыКорректировки.Вставить("ВариантыГруппировки", ВариантыГруппировки);
					ПараметрыКорректировки.Вставить("ПоляКорректировки", "ДатаПолученияДохода,МесяцНалоговогоПериода");
					ПараметрыКорректировки.Вставить("Ресурсы", "СуммаДохода,СуммаВычета");
					ПараметрыКорректировки.Вставить("СохраняемыеДатыДохода", СохраняемыеДатыДохода);
					ПараметрыКорректировки.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
					
					ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки);
				КонецЕсли;
					
				Если Записывать Тогда
					Набор.Записать();
					Набор.Записывать = Ложь;
				Иначе
					Набор.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ;
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		Если Набор <> Неопределено И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	(РегистрНакопления.ДокументОснование = &ИсправленныйДокумент ИЛИ РегистрНакопления.Регистратор = &ИсправленныйДокумент)
			|	И РегистрНакопления.Регистратор НЕ В(&ИсключаемыйРегистратор, &ДокументИсправление)
			|	И РегистрНакопления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РегистрНакопления.Сторно = ЛОЖЬ";
			
			ДокументИсправление = Набор.Отбор.Регистратор.Значение;
			Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключаемыйРегистратор = Неопределено, ДокументИсправление, ИсключаемыйРегистратор));
			Запрос.УстановитьПараметр("ДокументИсправление", ДокументИсправление);
			Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
				
				СохраняемыеДатыДохода = Новый ТаблицаЗначений();
				СохраняемыеДатыДохода.Колонки.Добавить("Сумма");
				КолонкиГруппировки = "ФизическоеЛицо,МесяцНалоговогоПериода,СтавкаНалогообложенияРезидента,КатегорияДохода,СрокПеречисления,Подразделение";
				Для Каждого Колонка Из СтрРазделить(КолонкиГруппировки, ",") Цикл
					СохраняемыеДатыДохода.Колонки.Добавить(Колонка);
				КонецЦикла;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					// Формирование сторно строк.
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
						НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
					КонецЦикла;
					НоваяСтрока.Сторно = Истина;
					
					// Формирование таблицы дат получения дохода для восстановления их после формирования новых движений.
					Если Выборка.ДокументОснование <> Выборка.Регистратор И Не Выборка.ДатаПолученияДоходаФиксирована
						И ЗначениеЗаполнено(Выборка.УстаревшаяДатаПолученияДохода) Тогда
						ЗаполнитьЗначенияСвойств(СохраняемыеДатыДохода.Добавить(), Выборка);
					КонецЕсли;
				КонецЦикла;
				
				Если СохраняемыеДатыДохода.Количество() > 0 Тогда
					ВариантыГруппировки = Новый Массив;
					ВариантыГруппировки.Добавить(КолонкиГруппировки);
					ВариантыГруппировки.Добавить("ФизическоеЛицо,МесяцНалоговогоПериода,Подразделение");
					ВариантыГруппировки.Добавить("ФизическоеЛицо,МесяцНалоговогоПериода");
					
					ПараметрыКорректировки = Новый Структура;
					ПараметрыКорректировки.Вставить("ИмяМодуля", "УчетНДФЛРасширенный");
					ПараметрыКорректировки.Вставить("ВидКорректировки", "ВосстановлениеДатПолученияДохода");
					ПараметрыКорректировки.Вставить("ВариантыГруппировки", ВариантыГруппировки);
					ПараметрыКорректировки.Вставить("ПоляКорректировки", "МесяцНалоговогоПериода");
					ПараметрыКорректировки.Вставить("Ресурсы", "Сумма");
					ПараметрыКорректировки.Вставить("СохраняемыеДатыДохода", СохраняемыеДатыДохода);
					ПараметрыКорректировки.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
					
					ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки);
				КонецЕсли;
				
				Если Записывать Тогда
					Набор.Записать();
					Набор.Записывать = Ложь;
				Иначе
					Набор.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		ИмяРегистра = МетаданныеРегистра.Имя;
		
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(ИмяРегистра, Набор);
		Иначе
			Набор = Движения.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обслуживание печати в документах выплаты зарплаты.

Процедура ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов, ЧтениеНалоговИВзносов", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.Идентификатор = "ПФ_MXL_РеестрПеречисленныхСумм";
		КомандаПечати.Представление = НСтр("ru = 'Реестр перечисленных сумм НДФЛ'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.ПеречислениеНДФЛРеквизиты КАК ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Бухгалтер КАК Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеРегистраторов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовВКассу.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовВКассу.Ссылка,
	|	ВедомостьПрочихДоходовВКассу.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовВКассу.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК ВедомостьПрочихДоходовВКассу
	|ГДЕ
	|	ВедомостьПрочихДоходовВКассу.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовВБанк.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовВБанк.Ссылка,
	|	ВедомостьПрочихДоходовВБанк.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовВБанк.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК ВедомостьПрочихДоходовВБанк
	|ГДЕ
	|	ВедомостьПрочихДоходовВБанк.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовПеречислением.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовПеречислением.Ссылка,
	|	ВедомостьПрочихДоходовПеречислением.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовПеречислением.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК ВедомостьПрочихДоходовПеречислением
	|ГДЕ
	|	ВедомостьПрочихДоходовПеречислением.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период КАК ДатаПлатежа,
	|	ЕСТЬNULL(ПОДСТРОКА(ДанныеРегистраторов.ПеречислениеНДФЛРеквизиты, 1, 50), """") КАК РеквизитыПлатежногоПоручения,
	|	ДанныеРегистраторов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеРегистраторов.Бухгалтер КАК Бухгалтер
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистраторов КАК ДанныеРегистраторов
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = ДанныеРегистраторов.Ссылка
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор В(&МассивОбъектов)
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
				   
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(Запрос.Выполнить().Выгрузить());
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, ?(ЗначениеЗаполнено(МассивОбъектов), МассивОбъектов[0], Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка()));
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм", 
		НСтр("ru = 'Реестр перечисленных сумм'"), ТабличныйДокумент, , "ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	
КонецПроцедуры

Функция НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Экспорт
	
	Возврат УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.2";
	Обработчик.Процедура = "Документы.РегистрацияПрочихДоходов.ЗаполнитьРеквизитыКВыплате";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.57";
	Обработчик.Процедура = "Документы.УвольнениеСписком.УстановитьИдентификаторыСтрокНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.61";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВосстановитьДатыПолученияДоходовУвольнений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.69";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗаполнитьПорядокВыплатыВозвратаНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.33";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ОтметитьОтпускаИБольничные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.80";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВосстановитьПорядокВыплатыВозвратаНДФЛ";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.86";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВыделитьДанныеДля6НДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.93";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВписатьОснованиеДляНатуральныхДоходов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "УчетНДФЛРасширенный.УстановитьПараметрыНабораСвойствСправочников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.39";
	Обработчик.Процедура = "Регистрысведений.ПодразделенияЗаПределамиРФ.ЗаполнитьВторичныеДанныеПодразделенияЗаПределамиРФ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("07c02f11-2d14-41ea-8e45-9e80a991d9a6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных о заграничных подразделениях.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.49";
	Обработчик.Процедура = "УчетНДФЛРасширенный.УточнитьНачислениеВСведенияОДоходах";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bd401e95-2769-40ba-b605-7ffa97bc46f0");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение реквизита Начисление в сведениях о доходах по НДФЛ для документов «Приз, подарок», «Выплата бывшим сотрудникам» и «Начисление прочих доходов».'");
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоходыНДФЛПоВидуОсобыхНачислений(ВидНачисления) Экспорт

	ВидыДоходаНДФЛ = Новый Массив;
	Если ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2010);
	ИначеЕсли ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2201);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2202);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2203);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2204);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2205);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2206);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2207);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2208);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2209);
	ИначеЕсли ВидНачисления = Перечисления.ВидыПризовПодарков.Подарок Тогда
 		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2720);
	ИначеЕсли ВидНачисления = Перечисления.ВидыПризовПодарков.Приз Тогда
 		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2740);
	КонецЕсли;
	
	Возврат ВидыДоходаНДФЛ;

КонецФункции

// Функция возвращает Ставку налогообложения резидента для дохода НДФЛ.
// Если код вычета не определен, то возвращается пустая ссылка.
Функция СтавкаНалогообложенияРезидентаПоКодуДоходаНДФЛ(КодДоходаНДФЛ) Экспорт
	СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка();	
	Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КодДоходаНДФЛ, "СтавкаНалогообложенияРезидента");
	КонецЕсли;
	Возврат СтавкаНалогообложенияРезидента	
КонецФункции 

Функция ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации) Экспорт

	Возврат УчетНДФЛ.ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации)

КонецФункции

// Функция возвращает структуру с доходами НДФЛ.
// Параметр
//	ПрочиеДоходы - структура
//		Ключ - вид дохода, для которого надо подобрать вид дохода НДФЛ.
//
Функция ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы) Экспорт

	ДоходыНДФЛ = Новый Структура;
	Для каждого ВидДоход Из ПрочиеДоходы Цикл
		
		Доход = ВидДоход.Ключ;
		Если Доход = "АрендаТранспорта" Тогда
			Код = "2400";
		ИначеЕсли Доход = "ПризыВЦеляхРекламы" Тогда
			Код = "2740";
		ИначеЕсли Доход = "Подарки" Тогда
			Код = "2720";
		ИначеЕсли Доход = "ЛицензионныйДоговор" Тогда
			Код = "1300";
		ИначеЕсли Доход = "ОтчуждениеАвторскихПрав" Тогда
			Код = "1301";
		ИначеЕсли Доход = "ВознагражденияНаследникам" Тогда
			Код = "2210";
		ИначеЕсли Доход = "МатериальнаяПомощьБывшимСотрудникам" Тогда
			Код = "2760";
		ИначеЕсли Доход = "ВозмещениеСтоимостиМедикаментов" Тогда
			Код = "2770";	
		Иначе
			Код = "";
		КонецЕсли;
		
		СсылкаНаЭлемент = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду(Код);
		ДоходыНДФЛ.Вставить(Доход, СсылкаНаЭлемент);
	
	КонецЦикла;
		
	Возврат ДоходыНДФЛ;

КонецФункции 

// Функция осматривает переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваКодаДохода КАК СвойстваКодаДохода
	|		ПО Начисления.КодДоходаНДФЛ = СвойстваКодаДохода.КодДохода
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|	И Начисления.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НЕ СвойстваКодаДохода.СоответствуетОплатеТруда";
	Запрос.УстановитьПараметр("Начисления", Начисления);
	
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции 

// Функция анализирует порядок выплаты и переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	ПорядокВыплаты - ПорядокВыплаты, ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, Начисления) Экспорт

	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
			Или ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления);
	
КонецФункции 

// Функция возвращает массив кодов дохода, которыми регистрируется оплата труда для целей ст. 223 НК РФ.
//
// Параметры:
//	нет
//
// Возвращаемое значение - массив значений типа СправочникСсылка.ВидыДоходовНДФЛ.
//
Функция КодыДоходовОплатыТруда() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваКодаДохода КАК СвойстваКодаДохода
	|		ПО ВидыДоходовНДФЛ.Ссылка = СвойстваКодаДохода.КодДохода
	|ГДЕ
	|	СвойстваКодаДохода.СоответствуетОплатеТруда";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Определяет, применяется ли автоматически социальный вычет, соответствующий переданному документу-основанию.
//
// Параметры:
//	Организация
//	ФизическоеЛицо
//	Удержание - тип ПланВидовРасчетаСсылка.Удержания
//	ДокументОснование.
//	ДатаАктуальности - дата, на которую определяется применение вычета.
//	Регистратор - если указан, движения регистратора игнорируются.
//	
Функция ПрименениеСоциальныхВычетовНаДату(Организация, ФизическоеЛицо, Удержание, ДокументОснование, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаАктуальности КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	&ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДокументОснование КАК ДокументОснование,
	|	&Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТДанныеДокумента";
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДанныеДокумента.Удержание.КатегорияУдержания КАК КатегорияВзносов
	|ПОМЕСТИТЬ ВТИзмерения
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмерения",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ) КАК НеПредоставлятьВычет
	|ИЗ
	|	ВТИзмерения КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	НеПредоставлятьВычет = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НеПредоставлятьВычет = Выборка.НеПредоставлятьВычет;
	КонецЕсли;
	
	Возврат НеПредоставлятьВычет;
	
КонецФункции

Функция КонтролируемыеПоляДляФиксацииРезультатов() Экспорт

	НДФЛФиксРасчет = Новый Массив;
	НДФЛФиксРасчет.Добавить("Налог");
	НДФЛФиксРасчет.Добавить("ЗачтеноАвансовыхПлатежей");
	НДФЛФиксРасчет.Добавить("НалогКЗачетуВозврату");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичный");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКодВычета");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКЗачетуВозврату");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");

	НДФЛФиксСтрока = Новый Массив;
	НДФЛФиксСтрока.Добавить("ФизическоеЛицо");
	НДФЛФиксСтрока.Добавить("МесяцНалоговогоПериода");
	НДФЛФиксСтрока.Добавить("Подразделение");
	
	Возврат Новый Структура("ФиксРасчет, ФиксСтрока", НДФЛФиксРасчет, НДФЛФиксСтрока)
	
КонецФункции

Процедура ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки)
	
	КорректировкиПоУчетам = Неопределено;
	Если Не Набор.ДополнительныеСвойства.Свойство("КорректировкиПоУчетам", КорректировкиПоУчетам) Тогда
		КорректировкиПоУчетам = Новый Массив;
		Набор.ДополнительныеСвойства.Вставить("КорректировкиПоУчетам", КорректировкиПоУчетам);
	КонецЕсли;
	КорректировкиПоУчетам.Добавить(ПараметрыКорректировки);
	
КонецПроцедуры

Процедура ВосстановитьДатыПолученияДохода(Набор, ПараметрыКорректировки)
	
	ПоляКорректировки = СтрРазделить(ПараметрыКорректировки.ПоляКорректировки, ",");
	ДатыПолученияДохода = ПараметрыКорректировки.СохраняемыеДатыДохода;
	
	МетаданныеРегистра = Набор.Метаданные();
	
	НаборДоп = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	
	Ресурсы = СтрРазделить(ПараметрыКорректировки.Ресурсы, ",");
	КолонкиСуммирования = ПараметрыКорректировки.Ресурсы;
	
	ДанныеКорректировки = Новый Структура;
	Для Каждого ПолеКорректировки Из ПоляКорректировки Цикл
		ДанныеКорректировки.Вставить(ПолеКорректировки);
	КонецЦикла;
	ДанныеКорректировки.Вставить("УстаревшаяДатаПолученияДохода");
	
	ДанныеНабора = Новый Структура;
	Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
		ДанныеНабора.Вставить(Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		ДанныеНабора.Вставить(Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
		ДанныеНабора.Вставить(Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		ДанныеНабора.Вставить(Поле.Имя);
	КонецЦикла;
	
	Для Каждого КолонкиГруппировки Из ПараметрыКорректировки.ВариантыГруппировки Цикл
		
		ДатыПолученияДохода.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		
		Для Сч = -ДатыПолученияДохода.Количество() + 1 По 0 Цикл
			СтрКорректировка = ДатыПолученияДохода[-Сч];
			НулевыеРесурсы = Истина;
			Для Каждого Ресурс Из Ресурсы Цикл
				Если СтрКорректировка[Ресурс] <> 0 Тогда
					НулевыеРесурсы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НулевыеРесурсы Тогда
				ДатыПолученияДохода.Удалить(-Сч);
			КонецЕсли;
		КонецЦикла;
		
		Если ДатыПолученияДохода.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КолонкиСравнения = СтрРазделить(КолонкиГруппировки, ",");
		Для Каждого ИсключаемаяКолонка Из ПоляКорректировки Цикл
			ИндексЭлемента = КолонкиСравнения.Найти(ИсключаемаяКолонка);
			Если ИндексЭлемента <> Неопределено Тогда
				КолонкиСравнения.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрКорректировка Из ДатыПолученияДохода Цикл
			
			РаспределенаПоВсемСтрокамНабора = Истина;
			КорректировкаПолностьюРаспределена = Ложь;

			Для Каждого СтрНабора Из Набор Цикл
				
				Если СтрНабора.Сторно Или СтрНабора.ДатаПолученияДоходаФиксирована Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьКорректировка = Истина;
				Для Каждого Колонка Из КолонкиСравнения Цикл
					Если СтрНабора[Колонка] <> СтрКорректировка[Колонка] Тогда
						ЕстьКорректировка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьКорректировка Тогда
					
					ЗаполнитьЗначенияСвойств(ДанныеНабора, СтрНабора);
					
					Для Каждого Ресурс Из Ресурсы Цикл
						
						Если СтрКорректировка[Ресурс] = 0 И СтрНабора[Ресурс] = 0 Тогда
							Продолжить;
						КонецЕсли;
							
						Остаток = СтрКорректировка[Ресурс] - СтрНабора[Ресурс];
						
						ЗаполнитьЗначенияСвойств(ДанныеКорректировки, СтрКорректировка);
						Если ДанныеКорректировки.Свойство("ДатаПолученияДохода") И ДанныеКорректировки.Свойство("МесяцНалоговогоПериода") Тогда
							ДанныеКорректировки.МесяцНалоговогоПериода = НачалоМесяца(СтрКорректировка.ДатаПолученияДохода);
							ДанныеКорректировки.УстаревшаяДатаПолученияДохода = СтрКорректировка.ДатаПолученияДохода;
						Иначе
							ДанныеКорректировки.УстаревшаяДатаПолученияДохода = СтрКорректировка.МесяцНалоговогоПериода;
						КонецЕсли;
						
						Если Остаток >= 0 Тогда
							ЗаполнитьЗначенияСвойств(СтрНабора, ДанныеКорректировки);
							СтрКорректировка[Ресурс] = Остаток;
						Иначе
							СтрНабораДоп = НаборДоп.Добавить();
							ЗаполнитьЗначенияСвойств(СтрНабораДоп, ДанныеНабора,,КолонкиСуммирования);
							СтрНабораДоп[Ресурс] = -1 * Остаток;
							
							СтрНабора[Ресурс] = СтрКорректировка[Ресурс];
							ЗаполнитьЗначенияСвойств(СтрНабора, ДанныеКорректировки);
							СтрКорректировка[Ресурс] = 0;
						КонецЕсли;
						СтрНабора.ДокументОснование = ПараметрыКорректировки.ИсправленныйДокумент;
						Набор.Записывать = Истина;
						
					КонецЦикла;
					
					КорректировкаПолностьюРаспределена = Истина;
					Для Каждого Ресурс Из Ресурсы Цикл
						Если СтрКорректировка[Ресурс] <> 0 Тогда
							КорректировкаПолностьюРаспределена = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					РаспределенаПоВсемСтрокамНабора = Ложь;
				КонецЕсли;
				
				Если КорректировкаПолностьюРаспределена Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РаспределенаПоВсемСтрокамНабора И Не КорректировкаПолностьюРаспределена Тогда
				Для Каждого Ресурс Из Ресурсы Цикл
					// "Списание" остатка корректировки.
					СтрКорректировка[Ресурс] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрНабораДоп Из НаборДоп Цикл
		СтрНабора = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СтрНабора, СтрНабораДоп);
		Набор.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьКатегориюДоходаВПеренесенныеДанные() Экспорт 
	
	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций) КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	*
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст);

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И СведенияОДоходахНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций) КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст);

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункцииИПроцедуры

Функция СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, ДанныеДокумента)
	
	НоваяСтрока = Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Период = ДатаОперации;
	
    Возврат НоваяСтрока
	
КонецФункции

Процедура УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений)
    
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
	    Если Не ЗначениеЗаполнено(СтрокаТЗ.СторнируемыйДокумент) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ)
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		ТаблицаСторнируемыхДокументов.Удалить(СтрокаТЗ)
	КонецЦикла;
	
	ОбработанныеДокументы = Новый Соответствие;	
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
		УточненныйДокумент = ОбработанныеДокументы[СтрокаТЗ.СторнируемыйДокумент];
		Если ЗначениеЗаполнено(УточненныйДокумент) Тогда
			СтрокаТЗ.СторнируемыйДокумент = УточненныйДокумент
		Иначе
			Если СтрокаТЗ.СторнируемыйДокумент.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
				ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, СтрокаТЗ.СторнируемыйДокумент);
				Продолжить;
			КонецЕсли;
			ПредыдущаяСсылка = СтрокаТЗ.СторнируемыйДокумент;
			СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент");
			НовыеСтроки = Новый Массив;
			Пока ЗначениеЗаполнено(СледующаяСсылка) Цикл
				СтрокаТаблицыПромежуточныхИсправлений = ТаблицаПромежуточныхИсправлений.Добавить();
				СтрокаТаблицыПромежуточныхИсправлений.ПромежуточноеИсправление = ПредыдущаяСсылка;
				НовыеСтроки.Добавить(СтрокаТаблицыПромежуточныхИсправлений);
				ПредыдущаяСсылка = СледующаяСсылка;
				Если ПредыдущаяСсылка.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
					Прервать;
				КонецЕсли;
				СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент")
			КонецЦикла;
			ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, ПредыдущаяСсылка);
			СтрокаТЗ.СторнируемыйДокумент = ПредыдущаяСсылка;
			Для каждого СтрокаТаблицыПромежуточныхИсправлений Из НовыеСтроки Цикл
				СтрокаТаблицыПромежуточныхИсправлений.СторнируемыйДокумент = ПредыдущаяСсылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению);
	
	Возврат Регистры;
КонецФункции

// Обновление ИБ

Процедура ОтметитьСтрокиДля6НДФЛ(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистраторы.Ссылка,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ПО Регистраторы.Ссылка = СведенияОДоходахНДФЛ.Регистратор
	|ГДЕ
	|	НЕ СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистраторы.Ссылка
	|ПОМЕСТИТЬ ВТДоходыИзНалогов
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО Регистраторы.Ссылка = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано))
	|ГДЕ
	|	НЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УчитыватьВыплаченныйДоходВ6НДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.Ссылка
	|ПОМЕСТИТЬ ВТКОбработке
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходы КАК Доходы
	|		ПО Регистраторы.Ссылка = Доходы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыИзНалогов КАК ДоходыИзНалогов
	|		ПО Регистраторы.Ссылка = ДоходыИзНалогов.Ссылка
	|ГДЕ
	|	Доходы.СуммаДохода > 0
	|	И ДоходыИзНалогов.Ссылка ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДоходыИзНалогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода,
	|	Регистраторы.Ссылка,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ПО Регистраторы.Ссылка = СведенияОДоходахНДФЛ.Регистратор
	|ГДЕ
	|	НЕ СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.Ссылка,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода";
	Запрос.Выполнить();

	Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РасчетМежрасчетногоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КрайнийСрокУплаты
	|ПОМЕСТИТЬ ВТНалоги
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				КОбработке.Ссылка
	|			ИЗ
	|				ВТКОбработке КАК КОбработке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Суммы.ФизическоеЛицо,
	|	Суммы.МесяцНалоговогоПериода,
	|	Суммы.Регистратор,
	|	МИНИМУМ(Налоги.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиДляПрисоединения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|		МАКСИМУМ(Налоги.Сумма) КАК Сумма,
	|		Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Налоги.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТНалоги КАК Налоги
	|	ГДЕ
	|		Налоги.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Налоги.ФизическоеЛицо,
	|		Налоги.МесяцНалоговогоПериода,
	|		Налоги.Регистратор) КАК Суммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалоги КАК Налоги
	|		ПО Суммы.ФизическоеЛицо = Налоги.ФизическоеЛицо
	|			И Суммы.Сумма = Налоги.Сумма
	|			И Суммы.МесяцНалоговогоПериода = Налоги.МесяцНалоговогоПериода
	|			И Суммы.Регистратор = Налоги.Регистратор
	|			И (Налоги.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано))
	|
	|СГРУППИРОВАТЬ ПО
	|	Суммы.ФизическоеЛицо,
	|	Суммы.МесяцНалоговогоПериода,
	|	Суммы.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РасчетМежрасчетногоПериода,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|			ТОГДА Доходы.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВыплаченногоДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КрайнийСрокУплаты,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано) КАК УчитыватьВыплаченныйДоходВ6НДФЛ
	|ИЗ
	|	ВТНалоги КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДляПрисоединения КАК СтрокиДляПрисоединения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходы КАК Доходы
	|			ПО СтрокиДляПрисоединения.Регистратор = Доходы.Ссылка
	|				И СтрокиДляПрисоединения.ФизическоеЛицо = Доходы.ФизическоеЛицо
	|				И СтрокиДляПрисоединения.МесяцНалоговогоПериода = Доходы.ДатаПолученияДохода
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = СтрокиДляПрисоединения.Регистратор
	|			И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки = СтрокиДляПрисоединения.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст, , МенеджерВременныхТаблиц);
	
	Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Период,
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СведенияОДоходахНДФЛ.Активность,
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.Организация,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.КодВычета,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета,
	|	СведенияОДоходахНДФЛ.Начисление,
	|	СведенияОДоходахНДФЛ.Сотрудник,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника,
	|	ИСТИНА КАК НеУчитыватьДоходВ6НДФЛ
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				КОбработке.Ссылка
	|			ИЗ
	|				ВТКОбработке КАК КОбработке)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, , МенеджерВременныхТаблиц);
	
КонецПроцедуры


Процедура ВосстановитьДатыПолученияДоходовУвольнений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
		|	СведенияОДоходахНДФЛ.Сотрудник КАК Сотрудник,
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.Регистратор ССЫЛКА Документ.Увольнение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистраторы.Регистратор,
		|	Регистраторы.Сотрудник,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(Увольнение.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, МЕСЯЦ)
		|			ТОГДА Увольнение.ДатаУвольнения
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Увольнение.Ссылка.ПериодРегистрации, МЕСЯЦ), ДЕНЬ)
		|	КОНЕЦ КАК ДатаПолученияДохода
		|ПОМЕСТИТЬ ВТРегистраторыКИсправлению
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО Увольнение.Ссылка = Регистраторы.Регистратор
		|			И Увольнение.Сотрудник = Регистраторы.Сотрудник
		|ГДЕ
		|	Регистраторы.ДатаПолученияДохода <> ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(Увольнение.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, МЕСЯЦ)
		|				ТОГДА Увольнение.ДатаУвольнения
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Увольнение.ПериодРегистрации, МЕСЯЦ), ДЕНЬ)
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистраторы.Регистратор,
		|	Регистраторы.Сотрудник,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(УвольнениеСпискомСотрудники.ДатаУвольнения, МЕСЯЦ)
		|			ТОГДА УвольнениеСпискомСотрудники.ДатаУвольнения
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ), ДЕНЬ)
		|	КОНЕЦ
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО УвольнениеСпискомСотрудники.Ссылка = Регистраторы.Регистратор
		|			И УвольнениеСпискомСотрудники.Сотрудник = Регистраторы.Сотрудник
		|ГДЕ
		|	Регистраторы.ДатаПолученияДохода <> ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(УвольнениеСпискомСотрудники.ДатаУвольнения, МЕСЯЦ)
		|				ТОГДА УвольнениеСпискомСотрудники.ДатаУвольнения
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(УвольнениеСпискомСотрудники.Ссылка.ПериодРегистрации, МЕСЯЦ), ДЕНЬ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистраторыКИсправлению.Регистратор
		|ИЗ
		|	ВТРегистраторыКИсправлению КАК РегистраторыКИсправлению";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистраторыКИсправлению.Регистратор,
			|	РегистраторыКИсправлению.Сотрудник,
			|	РегистраторыКИсправлению.ДатаПолученияДохода
			|ИЗ
			|	ВТРегистраторыКИсправлению КАК РегистраторыКИсправлению";
			
		ДатыПолученияДоходов = Запрос.Выполнить().Выгрузить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				
				СтрокиСотрудника = ДатыПолученияДоходов.НайтиСтроки(Новый Структура("Регистратор,Сотрудник", Выборка.Регистратор, Запись.Сотрудник));
				Если СтрокиСотрудника.Количество() > 0 Тогда
					Запись.ДатаПолученияДохода = СтрокиСотрудника[0].ДатаПолученияДохода;
				КонецЕсли; 
				
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПорядокВыплатыВозвратаНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратНДФЛ.Ссылка
	|ИЗ
	|	Документ.ВозвратНДФЛ КАК ВозвратНДФЛ
	|ГДЕ
	|	ВозвратНДФЛ.ПорядокВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Документ = Выборка.Ссылка.ПолучитьОбъект();		
		Документ.ОбменДанными.Загрузка = Истина;
		Документ.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		Документ.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		Документ.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтметитьОтпускаИБольничные() Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период >= ДАТАВРЕМЯ(2016, 1, 1, 0, 0, 0)
	|	И ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование ССЫЛКА Документ.БольничныйЛист
	|					И ВЫРАЗИТЬ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК Документ.БольничныйЛист).ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование ССЫЛКА Документ.Отпуск
	|					И ВЫРАЗИТЬ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК Документ.Отпуск).ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления = ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.ПустаяСсылка)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания <> ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|			ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период < ДАТАВРЕМЯ(2016, 1, 1, 0, 0, 0)
	|			ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование ССЫЛКА Документ.БольничныйЛист
	|				И ВЫРАЗИТЬ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК Документ.БольничныйЛист).ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные)
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование ССЫЛКА Документ.Отпуск
	|				И ВЫРАЗИТЬ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК Документ.Отпуск).ИсправленныйДокумент = ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные)
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления
	|	КОНЕЦ КАК СрокПеречисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УдалитьКодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РасчетМежрасчетногоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УдалитьОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст)
	
КонецПроцедуры

Процедура ВосстановитьПорядокВыплатыВозвратаНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Регистратор,
	|	Документ.ПорядокВыплаты КАК ПорядокВыплаты
	|ИЗ
	|	Документ.ВозвратНДФЛ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокВыплатыДокументов КАК Регистр
	|		ПО (Регистр.Регистратор = Документ.Ссылка)
	|ГДЕ
	|	Документ.Проведен
	|	И (Регистр.ПорядокВыплаты ЕСТЬ NULL 
	|			ИЛИ Документ.ПорядокВыплаты <> Регистр.ПорядокВыплаты)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорядокВыплатыДокументов = РегистрыСведений.ПорядокВыплатыДокументов.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		ПорядокВыплатыДокументов.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ПорядокВыплатыДокумента = ПорядокВыплатыДокументов.Добавить();
		ПорядокВыплатыДокумента.ДокументОснование	= Выборка.Регистратор;
		ПорядокВыплатыДокумента.ПорядокВыплаты		= Выборка.ПорядокВыплаты;
		
		ПорядокВыплатыДокументов.Записать();
		ПорядокВыплатыДокументов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьДанныеДля6НДФЛ() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыплатаБывшимСотрудникам.Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ВыплатаБывшимСотрудникам КАК ВыплатаБывшимСотрудникам
	|ГДЕ
	|	ВыплатаБывшимСотрудникам.Проведен
	|	И ВыплатаБывшимСотрудникам.ПланируемаяДатаВыплаты >= ДАТАВРЕМЯ(2016, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПрочихДоходов.Ссылка
	|ИЗ
	|	Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|ГДЕ
	|	РегистрацияПрочихДоходов.Проведен
	|	И РегистрацияПрочихДоходов.ПланируемаяДатаВыплаты >= ДАТАВРЕМЯ(2016, 1, 1, 0, 0, 0)";
	Запрос.Выполнить();

	ОтметитьСтрокиДля6НДФЛ(Запрос.МенеджерВременныхТаблиц);

КонецПроцедуры

Процедура ВписатьОснованиеДляНатуральныхДоходов() Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ДоходВНатуральнойФорме
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2016, 1, 1, 0, 0, 0)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование <> РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РасчетМежрасчетногоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КрайнийСрокУплаты,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УчитыватьВыплаченныйДоходВ6НДФЛ
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст);

КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочников() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыБывшимСотрудникам");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыВыплатБывшимСотрудникам", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьРегистрациюПрочихДоходов");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыПрочихДоходовФизическихЛиц", ПараметрыНабора);
	
КонецПроцедуры

Процедура УточнитьНачислениеВСведенияОДоходах(ПараметрыОбновления = Неопределено) Экспорт 
	
	Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов) КАК Начисление,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПризПодарок КАК ПризПодарок
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ПризПодарок.Ссылка
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Начисление <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыплатаБывшимСотрудникам.ВидВыплаты,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыплатаБывшимСотрудникам КАК ВыплатаБывшимСотрудникам
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ВыплатаБывшимСотрудникам.Ссылка
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Начисление <> ВыплатаБывшимСотрудникам.ВидВыплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПрочихДоходов.ВидПрочегоДохода КАК Начисление,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|		ПО СведенияОДоходахНДФЛ.Регистратор = РегистрацияПрочихДоходов.Ссылка
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Начисление <> РегистрацияПрочихДоходов.ВидПрочегоДохода
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОДоходахНДФЛ.Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, , , ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

