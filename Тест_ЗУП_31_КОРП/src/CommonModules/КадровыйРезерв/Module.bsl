#Область СлужебныйПрограммныйИнтерфейс

// Возвращает доступность подсистемы кадрового резерва для пользователя по правам и интерфейсу.
// 
Функция КадровыйРезервДоступенПользователю() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйРезерв") Тогда
		Возврат Ложь;
	Иначе
		Возврат ПравоДоступа("Чтение", Метаданные.Справочники.КадровыйРезерв);
	КонецЕсли;

КонецФункции

// Возвращает состояние кадрового резерва на определенную дату
// 	
// Параметры
//	ДатаСреза - дата, на конец дня которой вычисляется статус
//	Отбор - Структура, с возможными значениями
//		ФизическоеЛицо - тип СправочникСсылка.Сотрудники
//		Статус - тип Массив или ПеречислениеСсылка.СостоянияСогласования
//		ПозицияРезерва - тип СправочникСсылка.КадровыйРезерв
//		ВидРезерва - тип СправочникСсылка.ВидыКадровогоРезерва
// Возвращаемое значение
// 	Таблица значений с колонками
//		ФизическоеЛицо - тип СправочникСсылка.Сотрудники
// 		ПозицияРезерва - тип СправочникСсылка.КадровыйРезерв
// 		Статус - тип ПеречислениеСсылка.СостоянияСогласования
// 		ВидРезерва - тип СправочникСсылка.ВидыКадровогоРезерва.
//
Функция КадровыйРезервНаДату(ДатаСреза, Отбор = Неопределено, ИсключаяРегистратор = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаСреза) Тогда
		Возврат Неопределено;
	Иначе
		ДатаСреза = КонецДня(ДатаСреза);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияКадровогоРезерваСрезПоследних.ФизическоеЛицо,
		|	ИсторияКадровогоРезерваСрезПоследних.ПозицияРезерва,
		|	ИсторияКадровогоРезерваСрезПоследних.Статус,
		|	ИсторияКадровогоРезерваСрезПоследних.ВидРезерва
		|ПОМЕСТИТЬ ВТРезервисты
		|ИЗ
		|	РегистрСведений.ИсторияКадровогоРезерва.СрезПоследних(&ДатаСреза, (ДатаОкончания >= &ДатаСреза ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1,1,1)) %ОтборИзмерений%) КАК ИсторияКадровогоРезерваСрезПоследних
		|%УсловиеОтбор%";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	ТекстУсловияИзмерений = "";
	ТекстУсловия = "";
	Если НЕ Отбор = Неопределено Тогда
		// Отбор по измерениям регистра.
		Если Отбор.Свойство("ФизическоеЛицо") И ЗначениеЗаполнено(Отбор.ФизическоеЛицо) Тогда
			ТекстУсловияИзмерений = ТекстУсловияИзмерений + " И ФизическоеЛицо В(&ФизическоеЛицо)";
			Если НЕ ТипЗнч(Отбор.ФизическоеЛицо) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ФизическоеЛицо));
			Иначе
				Запрос.УстановитьПараметр("ФизическоеЛицо", Отбор.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ПозицияРезерва") И ЗначениеЗаполнено(Отбор.ПозицияРезерва) Тогда
			ТекстУсловияИзмерений = ТекстУсловияИзмерений + " И ПозицияРезерва В(&ПозицияРезерва)";
			Если НЕ ТипЗнч(Отбор.ФизическоеЛицо) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ПозицияРезерва", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ПозицияРезерва));
			Иначе
				Запрос.УстановитьПараметр("ПозицияРезерва", Отбор.ПозицияРезерва);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ИсключаяРегистратор") И ЗначениеЗаполнено(Отбор.ИсключаяРегистратор) Тогда
			ТекстУсловияИзмерений = ТекстУсловияИзмерений + " И Регистратор <> &Регистратор";
			Запрос.УстановитьПараметр("Регистратор", Отбор.ИсключаяРегистратор);
		КонецЕсли;
		// Отбор по ресурсам регистра.
		Если Отбор.Свойство("Статус") И ЗначениеЗаполнено(Отбор.Статус) Тогда
			ТекстУсловия = ТекстУсловия + " ГДЕ ИсторияКадровогоРезерваСрезПоследних.Статус В(&Статус)";
			Если НЕ ТипЗнч(Отбор.Статус) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("Статус", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.Статус));
			Иначе
				Запрос.УстановитьПараметр("Статус", Отбор.Статус);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ВидРезерва") И ЗначениеЗаполнено(Отбор.ВидРезерва) Тогда
			Приставка = ?(ПустаяСтрока(ТекстУсловия), " ГДЕ ", " И ");
			ТекстУсловия = ТекстУсловия + Приставка + "ВидРезерва В(&ВидРезерва)";
			Если НЕ ТипЗнч(Отбор.ВидРезерва) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ВидРезерва", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ВидРезерва));
			Иначе
				Запрос.УстановитьПараметр("ВидРезерва", Отбор.ВидРезерва);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборИзмерений%", ТекстУсловияИзмерений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеОтбор%", ТекстУсловия);
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТРезервисты.ФизическоеЛицо
		|ИЗ
		|	ВТРезервисты КАК ВТРезервисты";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТСотрудникиОрганизации.Сотрудник) КАК КоличествоСотрудников,
		|	ВТСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПризнакСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиОрганизации.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРезервисты.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ВТПризнакСотрудников.КоличествоСотрудников ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.ПустаяСсылка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.Сотрудник)
		|	КОНЕЦ КАК РольФизическогоЛица,
		|	ВТРезервисты.ПозицияРезерва,
		|	ВТРезервисты.Статус,
		|	ВТРезервисты.ВидРезерва
		|ИЗ
		|	ВТРезервисты КАК ВТРезервисты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПризнакСотрудников КАК ВТПризнакСотрудников
		|		ПО ВТРезервисты.ФизическоеЛицо = ВТПризнакСотрудников.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает состояние кадрового резерва на текущий момент
// 	(запрос происходит по "вторичному" регистру)
// Параметры
//	Отбор - Структура, с возможными значениями
//		ФизическоеЛицо - тип СправочникСсылка.Сотрудники
//		Статус - тип Массив или ПеречислениеСсылка.СостоянияСогласования
//		ПозицияРезерва - тип СправочникСсылка.КадровыйРезерв
//		ВидРезерва - тип СправочникСсылка.ВидыКадровогоРезерва
// Возвращаемое значение
// 	Таблица значений с колонками
//		ФизическоеЛицо - тип СправочникСсылка.Сотрудники
// 		ПозицияРезерва - тип СправочникСсылка.КадровыйРезерв
// 		Статус - тип ПеречислениеСсылка.СостоянияСогласования
// 		ВидРезерва - тип СправочникСсылка.ВидыКадровогоРезерва.
//
Функция ТекущийРезерв(Отбор = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТКадровыйРезерв(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйРезерв.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
		|	КадровыйРезерв.Статус КАК Статус,
		|	КадровыйРезерв.ВидРезерва КАК ВидРезерва
		|ИЗ
		|	ВТКадровыйРезерв";
		
	Если НЕ Отбор = Неопределено Тогда
		ТекстУсловия = " ГДЕ ";
		Если Отбор.Свойство("Статус") И ЗначениеЗаполнено(Отбор.Статус) Тогда
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = " ГДЕ ", "", " И ") + "КадровыйРезерв.Статус В(&Статус)";
			Если НЕ ТипЗнч(Отбор.Статус) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("Статус", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.Статус));
			Иначе
				Запрос.УстановитьПараметр("Статус", Отбор.Статус);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ФизическоеЛицо") И ЗначениеЗаполнено(Отбор.ФизическоеЛицо) Тогда
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = " ГДЕ ", "", " И ") + "КадровыйРезерв.ФизическоеЛицо В(&ФизическоеЛицо)";
			Если НЕ ТипЗнч(Отбор.ФизическоеЛицо) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ФизическоеЛицо));
			Иначе
				Запрос.УстановитьПараметр("ФизическоеЛицо", Отбор.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ПозицияРезерва") И ЗначениеЗаполнено(Отбор.ПозицияРезерва) Тогда
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = " ГДЕ ", "", " И ") + "КадровыйРезерв.ПозицияРезерва В(&ПозицияРезерва)";
			Если НЕ ТипЗнч(Отбор.ПозицияРезерва) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ПозицияРезерва", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ПозицияРезерва));
			Иначе
				Запрос.УстановитьПараметр("ПозицияРезерва", Отбор.ПозицияРезерва);
			КонецЕсли;
		КонецЕсли;
		Если Отбор.Свойство("ВидРезерва") И ЗначениеЗаполнено(Отбор.ВидРезерва) Тогда
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = " ГДЕ ", "", " И ") + "КадровыйРезерв.ВидРезерва В(&ВидРезерва)";
			Если НЕ ТипЗнч(Отбор.ВидРезерва) = Тип("Массив") Тогда
				Запрос.УстановитьПараметр("ВидРезерва", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отбор.ВидРезерва));
			Иначе
				Запрос.УстановитьПараметр("ВидРезерва", Отбор.ВидРезерва);
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ТекстУсловия;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Определяет является ли позиция штатного расписания ключевой, то есть проассоциирована ли с ней однозначная позиция
// кадрового резерва.
//
Функция ЭтоКлючеваяПозицияШтатногоРасписания(ПозицияШтатногоРасписанияСсылка) Экспорт
	
	СписокПозицийШР = ПодобратьПозицииРезерваПоПозицииШтатногоРасписания(ПозицияШтатногоРасписанияСсылка, Ложь);
	Возврат СписокПозицийШР.Количество() = 0;
	
КонецФункции

// Создает временную таблицу ВТКадровыйРезерв с описанием текущих статусов резервистов.
//
Процедура СоздатьВТКадровыйРезерв(МенеджерВременныхТаблиц, ТекущаяДата = Неопределено) Экспорт

	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
		|	КадровыйРезерв.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА КадровыйРезерв.ДатаИсключения = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА КадровыйРезерв.Статус
		|		ИНАЧЕ ВЫБОР
		|				КОГДА КадровыйРезерв.ДатаИсключения > &ТекущаяДата
		|					ТОГДА КадровыйРезерв.Статус
		|				ИНАЧЕ &СтатусИсключен
		|			КОНЕЦ
		|	КОНЕЦ КАК Статус,
		|	КадровыйРезерв.ВидРезерва КАК ВидРезерва,
		|	КадровыйРезерв.Рейтинг КАК Рейтинг,
		|	КадровыйРезерв.ДатаВключения,
		|	КадровыйРезерв.ДатаИсключения,
		|	КадровыйРезерв.Статус КАК СтатусДоИсключения
		|ПОМЕСТИТЬ ВТКадровыйРезерв
		|ИЗ
		|	РегистрСведений.КадровыйРезерв КАК КадровыйРезерв";
	
	Запрос.УстановитьПараметр("СтатусИсключен", ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Запрос.Выполнить();

	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ДанныеДокументовДляПроведения

// Возвращает таблицу значений, соответствующую движениям документа по регистру сведений ИсторияКадровогоРезерва.
//
Функция ДанныеКадровогоПереводаДляКадровогоРезерва(ДокументСсылка) Экспорт

	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КадровыйПеревод") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадровыйПеревод.ДатаНачала КАК Период,
			|	КадровыйПеревод.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыйПереводКадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
			|	КадровыйПереводКадровыйРезерв.ВидРезерва КАК ВидРезерва,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка) КАК Статус
			|ИЗ
			|	Документ.КадровыйПеревод.КадровыйРезерв КАК КадровыйПереводКадровыйРезерв
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
			|		ПО КадровыйПереводКадровыйРезерв.Ссылка = КадровыйПеревод.Ссылка
			|ГДЕ
			|	КадровыйПереводКадровыйРезерв.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСКадровымиРезервистами.Отклонить)
			|	И КадровыйПеревод.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадровыйПереводСпискомСотрудники.ДатаНачала КАК Период,
			|	КадровыйПереводСпискомСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыйПереводСпискомКадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
			|	КадровыйПереводСпискомКадровыйРезерв.ВидРезерва КАК ВидРезерва,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка) КАК Статус
			|ИЗ
			|	Документ.КадровыйПереводСписком.КадровыйРезерв КАК КадровыйПереводСпискомКадровыйРезерв
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
			|		ПО КадровыйПереводСпискомКадровыйРезерв.Ссылка = КадровыйПереводСпискомСотрудники.Ссылка
			|			И КадровыйПереводСпискомКадровыйРезерв.ИдентификаторСтрокиСотрудника = КадровыйПереводСпискомСотрудники.ИдентификаторСтрокиСотрудника
			|ГДЕ
			|	КадровыйПереводСпискомКадровыйРезерв.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСКадровымиРезервистами.Отклонить)
			|	И КадровыйПереводСпискомСотрудники.Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Возвращает таблицу значений, соответствующую движениям документа по регистру сведений ИсторияКадровогоРезерва.
//
Функция ДанныеКадровыйРезервДляРезультатыАттестацииСотрудников(ДанныеДляПроведения) Экспорт

	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РешенияПоРезерву.Период,
	|	РешенияПоРезерву.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РешенияПоРезерву.ПозицияРезерва,
	|	РешенияПоРезерву.ВидРезерва,
	|	&Включить КАК Статус
	|ИЗ
	|	ВТРезультатыАттестацийСотрудников КАК РешенияПоРезерву
	|ГДЕ
	|	РешенияПоРезерву.РешениеКомиссии = &РекомендуетсяВКадровыйРезерв";
	Запрос.УстановитьПараметр("РекомендуетсяВКадровыйРезерв", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.РешенияАттестационныхКомиссий.РекомендуетсяВКадровыйРезерв"));
	Запрос.УстановитьПараметр("Включить", ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Возвращает таблицу значений, соответствующую движениям документа по регистру сведений ИсторияКадровогоРезерва.
//
Функция ДанныеУвольненияДляКадровогоРезерва(ДокументСсылка) Экспорт

	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Увольнение.ДатаУвольнения КАК Период,
			|	Увольнение.ФизическоеЛицо КАК ФизическоеЛицо,
			|	УвольнениеКадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
			|	УвольнениеКадровыйРезерв.ВидРезерва КАК ВидРезерва,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка) КАК Статус
			|ИЗ
			|	Документ.Увольнение.КадровыйРезерв КАК УвольнениеКадровыйРезерв
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
			|		ПО УвольнениеКадровыйРезерв.Ссылка = Увольнение.Ссылка
			|ГДЕ
			|	УвольнениеКадровыйРезерв.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСКадровымиРезервистами.Отклонить)
			|	И Увольнение.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК Период,
			|	УвольнениеСпискомСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	УвольнениеСпискомКадровыйРезерв.ПозицияРезерва КАК ПозицияРезерва,
			|	УвольнениеСпискомКадровыйРезерв.ВидРезерва КАК ВидРезерва,
			|	ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.ПустаяСсылка) КАК Статус
			|ИЗ
			|	Документ.УвольнениеСписком.КадровыйРезерв КАК УвольнениеСпискомКадровыйРезерв
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
			|		ПО УвольнениеСпискомКадровыйРезерв.Ссылка = УвольнениеСпискомСотрудники.Ссылка
			|			И УвольнениеСпискомКадровыйРезерв.ИдентификаторСтрокиСотрудника = УвольнениеСпискомСотрудники.ИдентификаторСтрокиСотрудника
			|ГДЕ
			|	УвольнениеСпискомКадровыйРезерв.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСКадровымиРезервистами.Отклонить)
			|	И УвольнениеСпискомСотрудники.Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

// Заполняет движения ИсторияКадровогоРезерва.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	КадровыйРезервДвижения - таблица значений с полями:
//		ПозицияРезерва
//		ФизическоеЛицо
//		Статус
//
Процедура СформироватьДвиженияИсторииКадровогоРезерва(Движения, ДвиженияДокумента, ИмяСвойстваКадровогоРезерва) Экспорт
	
	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ТипЗнч(ДвиженияДокумента) = Тип("Структура") ИЛИ
			НЕ ДвиженияДокумента.Свойство(ИмяСвойстваКадровогоРезерва) ИЛИ
			ДвиженияДокумента[ИмяСвойстваКадровогоРезерва] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КадровыйРезервДвижения = ДвиженияДокумента[ИмяСвойстваКадровогоРезерва];
	Если КадровыйРезервДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИсторияКадровогоРезерва.Записывать = Истина;
	Для Каждого СтрокаДанных Из КадровыйРезервДвижения Цикл
		НоваяСтрока = Движения.ИсторияКадровогоРезерва.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанных);
		НоваяСтрока.Период = НачалоДня(НоваяСтрока.Период) + ЗначениеВремениПоСтатусуРезерва(НоваяСтрока.Статус);
	КонецЦикла;
	
	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеРегистров

// Заполняет вторичный Регистр сведений КадровыйРезерв из источника - РегистрСведений.ИсторияКадровогоРезерва.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//
Процедура ЗаполнитьЗаписиКадровогоРезерва(Движения, ТаблицаОтборов) Экспорт
	
	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтборов.ПозицияРезерва КАК ПозицияРезерва,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборов
		|ИЗ
		|	&ТаблицаОтборов КАК ТаблицаОтборов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияКадровогоРезерва.ПозицияРезерва,
		|	ИсторияКадровогоРезерва.ФизическоеЛицо,
		|	ИсторияКадровогоРезерва.Статус,
		|	ИсторияКадровогоРезерва.ВидРезерва,
		|	ИсторияКадровогоРезерва.Период КАК ДатаВключения,
		|	ИсторияКадровогоРезерва.ДатаОкончания КАК ДатаИсключения
		|ПОМЕСТИТЬ ВТДанныеРегистра
		|ИЗ
		|	РегистрСведений.ИсторияКадровогоРезерва КАК ИсторияКадровогоРезерва
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтборов КАК ВТТаблицаОтборов
		|		ПО ИсторияКадровогоРезерва.ПозицияРезерва = ВТТаблицаОтборов.ПозицияРезерва
		|			И ИсторияКадровогоРезерва.ФизическоеЛицо = ВТТаблицаОтборов.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеРегистра.ПозицияРезерва,
		|	ВТДанныеРегистра.ФизическоеЛицо,
		|	ВТДанныеРегистра.Статус,
		|	ВТДанныеРегистра.ВидРезерва,
		|	ВТДанныеРегистра.ДатаВключения,
		|	ВТДанныеРегистра.ДатаИсключения
		|ПОМЕСТИТЬ ВТЗначащихСтатусов
		|ИЗ
		|	ВТДанныеРегистра КАК ВТДанныеРегистра
		|ГДЕ
		|	ВТДанныеРегистра.Статус В(&ЗначащиеСтатусы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗначащихСтатусов.ПозицияРезерва,
		|	ВТЗначащихСтатусов.ФизическоеЛицо,
		|	МАКСИМУМ(ВТЗначащихСтатусов.ДатаВключения) КАК ДатаВключения
		|ПОМЕСТИТЬ ВТУказателиПоследнихЗначащихПериодов
		|ИЗ
		|	ВТЗначащихСтатусов КАК ВТЗначащихСтатусов
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТЗначащихСтатусов.ПозицияРезерва,
		|	ВТЗначащихСтатусов.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУказателиПоследнихЗначащихПериодов.ПозицияРезерва,
		|	ВТУказателиПоследнихЗначащихПериодов.ФизическоеЛицо,
		|	ВТЗначащихСтатусов.Статус,
		|	ВТЗначащихСтатусов.ВидРезерва,
		|	ВТУказателиПоследнихЗначащихПериодов.ДатаВключения,
		|	ВТЗначащихСтатусов.ДатаИсключения
		|ПОМЕСТИТЬ ВТИтоговыеЗначащиеПериоды
		|ИЗ
		|	ВТУказателиПоследнихЗначащихПериодов КАК ВТУказателиПоследнихЗначащихПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначащихСтатусов КАК ВТЗначащихСтатусов
		|		ПО ВТУказателиПоследнихЗначащихПериодов.ПозицияРезерва = ВТЗначащихСтатусов.ПозицияРезерва
		|			И ВТУказателиПоследнихЗначащихПериодов.ФизическоеЛицо = ВТЗначащихСтатусов.ФизическоеЛицо
		|			И ВТУказателиПоследнихЗначащихПериодов.ДатаВключения = ВТЗначащихСтатусов.ДатаВключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеРегистра.ПозицияРезерва,
		|	ВТДанныеРегистра.ФизическоеЛицо,
		|	ВТДанныеРегистра.Статус,
		|	ВТДанныеРегистра.ВидРезерва,
		|	ВТДанныеРегистра.ДатаВключения КАК ДатаИсключения
		|ПОМЕСТИТЬ ВТНеЗначащихСтатусов
		|ИЗ
		|	ВТДанныеРегистра КАК ВТДанныеРегистра
		|ГДЕ
		|	ВТДанныеРегистра.Статус В(&СтатусУволен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНеЗначащихСтатусов.ПозицияРезерва,
		|	ВТНеЗначащихСтатусов.ФизическоеЛицо,
		|	МАКСИМУМ(ВТНеЗначащихСтатусов.ДатаИсключения) КАК ДатаИсключения
		|ПОМЕСТИТЬ ВТУказателиПоследнихНеЗначащихПериодов
		|ИЗ
		|	ВТНеЗначащихСтатусов КАК ВТНеЗначащихСтатусов
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНеЗначащихСтатусов.ПозицияРезерва,
		|	ВТНеЗначащихСтатусов.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыйРезерв.ПозицияРезерва,
		|	КадровыйРезерв.ФизическоеЛицо,
		|	КадровыйРезерв.Рейтинг
		|ПОМЕСТИТЬ ВТРейтинг
		|ИЗ
		|	РегистрСведений.КадровыйРезерв КАК КадровыйРезерв
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтборов КАК ВТТаблицаОтборов
		|		ПО КадровыйРезерв.ПозицияРезерва = ВТТаблицаОтборов.ПозицияРезерва
		|			И КадровыйРезерв.ФизическоеЛицо = ВТТаблицаОтборов.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговыеЗначащиеПериоды.ПозицияРезерва,
		|	ВТИтоговыеЗначащиеПериоды.ФизическоеЛицо,
		|	ВТИтоговыеЗначащиеПериоды.Статус,
		|	ВТИтоговыеЗначащиеПериоды.ВидРезерва,
		|	ВТИтоговыеЗначащиеПериоды.ДатаВключения КАК ДатаВключения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТУказателиПоследнихНеЗначащихПериодов.ДатаИсключения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ВТИтоговыеЗначащиеПериоды.ДатаИсключения
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВТИтоговыеЗначащиеПериоды.ДатаИсключения = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ВТУказателиПоследнихНеЗначащихПериодов.ДатаИсключения
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ВТИтоговыеЗначащиеПериоды.ДатаИсключения > ВТУказателиПоследнихНеЗначащихПериодов.ДатаИсключения
		|							ТОГДА ВТУказателиПоследнихНеЗначащихПериодов.ДатаИсключения
		|						ИНАЧЕ ВТИтоговыеЗначащиеПериоды.ДатаИсключения
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаИсключения,
		|	ЕСТЬNULL(ВТРейтинг.Рейтинг, 0) КАК Рейтинг
		|ИЗ
		|	ВТИтоговыеЗначащиеПериоды КАК ВТИтоговыеЗначащиеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУказателиПоследнихНеЗначащихПериодов КАК ВТУказателиПоследнихНеЗначащихПериодов
		|		ПО ВТИтоговыеЗначащиеПериоды.ПозицияРезерва = ВТУказателиПоследнихНеЗначащихПериодов.ПозицияРезерва
		|			И ВТИтоговыеЗначащиеПериоды.ФизическоеЛицо = ВТУказателиПоследнихНеЗначащихПериодов.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРейтинг КАК ВТРейтинг
		|		ПО ВТИтоговыеЗначащиеПериоды.ПозицияРезерва = ВТРейтинг.ПозицияРезерва
		|			И ВТИтоговыеЗначащиеПериоды.ФизическоеЛицо = ВТРейтинг.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ТаблицаОтборов", ТаблицаОтборов);
	ЗначащиеСтатусы = Новый Массив;
	ЗначащиеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается"));
	ЗначащиеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано"));
	Запрос.УстановитьПараметр("ЗначащиеСтатусы", ЗначащиеСтатусы);
	Запрос.УстановитьПараметр("СтатусУволен", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка")));
	
	РезультатЗапроса = Запрос.Выполнить();
 	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КадровыйРезерв.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПозицияРезерва.Установить(ВыборкаДетальныеЗаписи.ПозицияРезерва);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		Если НЕ ВыборкаДетальныеЗаписи.Статус = Null Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Записывает в регистр сведений КадровыйРезерв рейтинг физического лица
//
Процедура ПоставитьРейтинг(ПозицияРезерва, ФизическоеЛицо, Рейтинг) Экспорт

	НадоВыключатьПривилегированныйРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КадровыйРезерв.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПозицияРезерва = ПозицияРезерва;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Рейтинг = Рейтинг;
	МенеджерЗаписи.Записать(Истина);

	Если НадоВыключатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеПроцедурыИФункции
	                          
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт

	// Раздел ОбучениеРазвитие
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаВключениеВКадровыйРезерв",				"ДатаВыдвижения",				"КадровыйРезерв", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВключениеВКадровыйРезерв",					 	"ДатаРассмотрения",				"КадровыйРезерв", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсключениеИзКадровогоРезерва",					"ДатаИсключения",				"КадровыйРезерв", "Подразделение.Источник");

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.14";
	Обработчик.Процедура = "КадровыйРезерв.НачальноеЗаполнениеВидовРезерва";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.12";
	Обработчик.Процедура = "КадровыйРезерв.ЗаполнениеВремениДвиженийРегистраИРеквизитовДокументов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "КадровыйРезерв.УстановитьПараметрыНабораСвойствСправочников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2522ddeb-764e-49d1-8c17-d32dc9ef9233");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников кадрового резерва. Дополнительные реквизиты в кадровом резерве временно недоступны.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.39";
	Обработчик.Процедура = "КадровыйРезерв.УстановитьПараметрыНабораСвойствДокументовКадровогоРезерва";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("115c93d0-dd8c-4ff6-af83-fa4c84046aa3");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств документов кадрового резерва. Дополнительные реквизиты в кадровом резерве временно недоступны.'");
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВидовРезерва() Экспорт 
	Справочники.ВидыКадровогоРезерва.НачальноеЗаполнение();
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочников(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиКадровогоРезерва.ИспользоватьКадровыйРезервПоВидам) КАК ИспользоватьКадровыйРезервПоВидам
	|ИЗ
	|	РегистрСведений.НастройкиКадровогоРезерва КАК НастройкиКадровогоРезерва";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьКадровыйРезервПоВидам;
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыКадровогоРезерва", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КадровыйРезерв", ПараметрыНабора);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствДокументовКадровогоРезерва(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиКадровогоРезерва.ИспользоватьКадровыйРезерв) КАК ИспользоватьКадровыйРезерв
	|ИЗ
	|	РегистрСведений.НастройкиКадровогоРезерва КАК НастройкиКадровогоРезерва";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьКадровыйРезерв;
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВключениеВКадровыйРезерв", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗаявкаНаВключениеВКадровыйРезерв", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИсключениеИзКадровогоРезерва", ПараметрыНабора);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

// Проверяет заполнение реквизитов ПозицияРезерва и ВидРезерва в табличной части документа.
//
Процедура ПроверитьЗаполнениеВидаРезерваВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ПроверяемыеРеквизиты, Отказ, ПроверкаВнутриТЧ = Ложь) Экспорт

	Если НЕ КадровыйРезерв.КадровыйРезервДоступенПользователю() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	ТабличнаяЧастьДокумента = ДокументОбъект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		// Если проверка идет по условию других полей в строке - проверяем на это условие.
		Если ПроверкаВнутриТЧ Тогда
			Если НЕ СтрокаТЧ.РешениеКомиссии = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.РешенияАттестационныхКомиссий.РекомендуетсяВКадровыйРезерв") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПозицияРезерва) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заполнена позиция резерва'"),
					ДокументОбъект,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяТабличнойЧасти + "[%1].ПозицияРезерва", ТабличнаяЧастьДокумента.Индекс(СтрокаТЧ)),,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	    // Если включен учет резерва по видам, то проверяем на заполнение и вид.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйРезервПоВидам") И НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидРезерва) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнен вид резерва'"),
				ДокументОбъект,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяТабличнойЧасти + "[%1].ВидРезерва", ТабличнаяЧастьДокумента.Индекс(СтрокаТЧ)),,
				Отказ);
		КонецЕсли;
	КонецЦикла; 
	
	Если ПроверкаВнутриТЧ Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, ИмяТабличнойЧасти + ".ПозицияРезерва");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, ИмяТабличнойЧасти + ".ВидРезерва");

КонецПроцедуры

// Возвращает список позиций кадрового резерва, соответствующих конкретной позици штатного расписания.
// 
Функция ПодобратьПозицииРезерваПоПозицииШтатногоРасписания(ПозицияШР, ВключатьГруппыДолжностей = Истина) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПозицияШР", ПозицияШР);
	Запрос.УстановитьПараметр("ШтатноеНазначение", ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ПозицияШтатногоРасписания"));
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КадровыйРезерв.Ссылка КАК ПозицияРезерва
		|ИЗ
		|	Справочник.КадровыйРезерв КАК КадровыйРезерв
		|ГДЕ
		|	КадровыйРезерв.Назначение = &ШтатноеНазначение
		|	И КадровыйРезерв.ПозицияШтатногоРасписания = &ПозицияШР";
	
	Если ВключатьГруппыДолжностей Тогда
		Запрос.УстановитьПараметр("Должность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияШР, "Должность"));
		Запрос.УстановитьПараметр("ГруппаДолжностейНазначение", ПредопределенноеЗначение("Перечисление.НазначенияКадровогоРезерва.ГруппаКадровогоРезерва"));
		Запрос.Текст = Запрос.Текст +
		"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйРезервДолжности.Ссылка
		|ИЗ
		|	Справочник.КадровыйРезерв.Должности КАК КадровыйРезервДолжности
		|ГДЕ
		|	КадровыйРезервДолжности.Ссылка.Назначение = &ГруппаДолжностейНазначение
		|	И КадровыйРезервДолжности.Должность = &Должность";
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПозицияРезерва");

КонецФункции

// Функция возвращает список уже введенных позиций кадрового резерва, соотнесенных с позицией штатного расписания.
//
Функция СписокКлючевыхПозицийШтатногоРасписания(НеУчитываяСсылку) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НеУчитываяСсылку", НеУчитываяСсылку);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КадровыйРезерв.ПозицияШтатногоРасписания
	|ИЗ
	|	Справочник.КадровыйРезерв КАК КадровыйРезерв
	|ГДЕ
	|	НЕ КадровыйРезерв.ВАрхиве
	|	И КадровыйРезерв.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияКадровогоРезерва.ПозицияШтатногоРасписания)
	|	И НЕ КадровыйРезерв.ПозицияШтатногоРасписания = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|	И КадровыйРезерв.Ссылка <> &НеУчитываяСсылку";	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПозицияШтатногоРасписания");

КонецФункции

// Возвращает СправочникСсылка.КадровыйРезерв по строковому GUID
//
Функция ПолучитьПозициюРезерваПоСсылке(НавигационнаяСсылка) Экспорт
	Возврат Справочники.КадровыйРезерв.ПолучитьСсылку(Новый УникальныйИдентификатор(НавигационнаяСсылка));
КонецФункции

Процедура СоздатьРешениеАттестационныхКомиссийРекомендуетсяВКадровыйРезерв() Экспорт

	ОписаниеРешения = Справочники.РешенияАттестационныхКомиссий.ОписаниеРешения();
	ОписаниеРешения.ПредопределенныйЭлемент 	= Истина;
	ОписаниеРешения.ИмяПредопределенныхДанных 	= "РекомендуетсяВКадровыйРезерв";
	ОписаниеРешения.Наименование				= НСтр("ru = 'Рекомендуется в кадровый резерв'");
	ОписаниеРешения.РешениеКомиссии				= НСтр("ru = 'Рекомендуется в кадровый резерв'");
	Справочники.РешенияАттестационныхКомиссий.НовоеРешение(ОписаниеРешения);
	
КонецПроцедуры

// Функция дополняет описание профиля ролями для работы с подсистемой Кадровый резерв.
// 
Процедура ДополнитьОписаниеПрофиляКадровымРезервом(ОписаниеПрофиля) Экспорт

	МассивДобавляемыхРолей = Новый Массив;
	// Роли кадрового резерва.
	МассивДобавляемыхРолей.Добавить("ДобавлениеИзменениеКадровогоРезерва");
	МассивДобавляемыхРолей.Добавить("ДобавлениеИзменениеЗаявокНаВключениеВКадровыйРезерв");
	МассивДобавляемыхРолей.Добавить("СогласованиеЗаявокНаВключениеВКадровыйРезерв");
	МассивДобавляемыхРолей.Добавить("НастройкаКадровогоРезерва");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПрофиля.Роли, МассивДобавляемыхРолей, Истина);
	
КонецПроцедуры

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.КадровыйРезерв);
	СписокОбъектов.Добавить(Документы.ВключениеВКадровыйРезерв);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаВключениеВКадровыйРезерв);
	СписокОбъектов.Добавить(Документы.ИсключениеИзКадровогоРезерва);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "КадровыйРезерв";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("09c29400-d682-4082-b491-8adcdd9aa19b");
	Раздел.Представление = НСтр("ru = 'Кадровый резерв'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ОбучениеИРазвитие) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ОбучениеИРазвитие, НСтр("ru = 'Отчеты по обучению и развитию'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СоставКадровогоРезерва);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СоставКадровогоРезерва, "ПозицииРезерва");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьКадровыйРезерв");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СоставКадровогоРезерва, "КлючевыеПозиции");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьКадровыйРезерв");
	
КонецПроцедуры

// Возвращает таблицу позиций кадрового резерва, соответствующих переданным позициям штатного расписания.
// 
Функция ПозицииРезерваПоПозициямШтатногоРасписания(СписокПозиций, ВключатьГруппыДолжностей = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций", СписокПозиций);
	Запрос.УстановитьПараметр("ВключатьГруппыДолжностей", ВключатьГруппыДолжностей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйРезерв.ПозицияШтатногоРасписания КАК Позиция,
	               |	КадровыйРезерв.Ссылка КАК КадровыйРезерв
	               |ИЗ
	               |	Справочник.КадровыйРезерв КАК КадровыйРезерв
	               |ГДЕ
	               |	КадровыйРезерв.ПозицияШтатногоРасписания В(&СписокПозиций)
	               |	И КадровыйРезерв.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияКадровогоРезерва.ПозицияШтатногоРасписания)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ШтатноеРасписание.Ссылка,
	               |	КадровыйРезервДолжности.Ссылка
	               |ИЗ
	               |	Справочник.КадровыйРезерв.Должности КАК КадровыйРезервДолжности
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	               |		ПО КадровыйРезервДолжности.Должность = ШтатноеРасписание.Должность
	               |			И (&ВключатьГруппыДолжностей)
	               |			И (ШтатноеРасписание.Ссылка В (&СписокПозиций))
	               |			И (КадровыйРезервДолжности.Ссылка.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияКадровогоРезерва.ГруппаКадровогоРезерва))";
				   
	УстановитьПривилегированныйРежим(Истина);
	ПозицииРезерва = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПозицииРезерва;
	
КонецФункции

Функция СогласованныйРезервПозиций(СписокПозиций, ДатаАктуальности) Экспорт 
	
	ПозицииКадровогоРезерва = ПозицииРезерваПоПозициямШтатногоРасписания(СписокПозиций);
	
	Отбор = Новый Структура("Статус", Перечисления.СостоянияСогласования.Согласовано);
	УстановитьПривилегированныйРежим(Истина);
	ДанныеКадровогоРезерва = КадровыйРезерв.КадровыйРезервНаДату(ДатаАктуальности, Отбор);
	УстановитьПривилегированныйРежим(Ложь);
		
	УникальныеФизическиеЛица = Новый Соответствие;
	СписокФизическихЛиц = Новый Массив;
	
	ФизическиеЛицаПозиций = Новый Соответствие;
	
	Для Каждого ДанныеФизическогоЛица Из ДанныеКадровогоРезерва Цикл 
		
		Если УникальныеФизическиеЛица[ДанныеФизическогоЛица.ФизическоеЛицо] = Неопределено Тогда 
			УникальныеФизическиеЛица.Вставить(ДанныеФизическогоЛица.ФизическоеЛицо, Истина);
			СписокФизическихЛиц.Добавить(ДанныеФизическогоЛица.ФизическоеЛицо);
		КонецЕсли;
		
		Отбор = Новый Структура("КадровыйРезерв", ДанныеФизическогоЛица.ПозицияРезерва);
		НайденныеПозиции = ПозицииКадровогоРезерва.НайтиСтроки(Отбор);
		
		Для Каждого ДанныеПозиции Из НайденныеПозиции Цикл 
			ФизическиеЛица = ФизическиеЛицаПозиций[ДанныеПозиции.Позиция];
			Если ФизическиеЛица = Неопределено Тогда 
				ФизическиеЛица = Новый Соответствие;
				ФизическиеЛицаПозиций.Вставить(ДанныеПозиции.Позиция, ФизическиеЛица);
			КонецЕсли;
			ФизическиеЛица.Вставить(ДанныеФизическогоЛица.ФизическоеЛицо, Истина);
		КонецЦикла;
		
	КонецЦикла;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, "ФИОПолные", ДатаАктуальности);
	
	КадровыйРезервПозиций = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаПозиций Цикл 
		
		Позиция = КлючИЗначение.Ключ;
		ФизическиеЛица = КлючИЗначение.Значение;
		
		КадровыйРезервПозиции = Новый СписокЗначений;
		Для Каждого ДанныеФизическогоЛица Из ФизическиеЛица Цикл 
			КадровыеДанныеФизическогоЛица = КадровыеДанные.Найти(ДанныеФизическогоЛица.Ключ, "ФизическоеЛицо");
			Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда 
				КадровыйРезервПозиции.Добавить(КадровыеДанныеФизическогоЛица.ФизическоеЛицо, КадровыеДанныеФизическогоЛица.ФИОПолные);
			КонецЕсли;
		КонецЦикла;
		
		КадровыйРезервПозиции.СортироватьПоПредставлению();
		КадровыйРезервПозиций.Вставить(Позиция, КадровыйРезервПозиции);
		
	КонецЦикла;
	
	Возврат КадровыйРезервПозиций;
	
КонецФункции

Функция ЗначениеВремениПоСтатусуРезерва(Статус) Экспорт 

	Если Статус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается") Тогда
	    Возврат 20;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано") Тогда
		Возврат 40;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка") Тогда
		Возврат 60;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура ЗаполнениеВремениДвиженийРегистраИРеквизитовДокументов() Экспорт

	// Движения регистра
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияКадровогоРезерва.Регистратор
		|ИЗ
		|	РегистрСведений.ИсторияКадровогоРезерва КАК ИсторияКадровогоРезерва
		|ГДЕ
		|	ИсторияКадровогоРезерва.Период = НАЧАЛОПЕРИОДА(ИсторияКадровогоРезерва.Период, ДЕНЬ)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ИсторияКадровогоРезерва.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.Период = НачалоДня(ЗаписьНабора.Период) + КадровыйРезерв.ЗначениеВремениПоСтатусуРезерва(ЗаписьНабора.Статус);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Документы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкаНаВключениеВКадровыйРезерв.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ЗаявкаНаВключениеВКадровыйРезерв КАК ЗаявкаНаВключениеВКадровыйРезерв
		|ГДЕ
		|	ЗаявкаНаВключениеВКадровыйРезерв.ДатаВыдвижения = НАЧАЛОПЕРИОДА(ЗаявкаНаВключениеВКадровыйРезерв.ДатаВыдвижения, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВключениеВКадровыйРезерв.Ссылка
		|ИЗ
		|	Документ.ВключениеВКадровыйРезерв КАК ВключениеВКадровыйРезерв
		|ГДЕ
		|	ВключениеВКадровыйРезерв.ДатаРассмотрения = НАЧАЛОПЕРИОДА(ВключениеВКадровыйРезерв.ДатаРассмотрения, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсключениеИзКадровогоРезерва.Ссылка
		|ИЗ
		|	Документ.ИсключениеИзКадровогоРезерва КАК ИсключениеИзКадровогоРезерва
		|ГДЕ
		|	ИсключениеИзКадровогоРезерва.ДатаИсключения = НАЧАЛОПЕРИОДА(ИсключениеИзКадровогоРезерва.ДатаИсключения, ДЕНЬ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокументОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиКадровогоРезерва", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиКадровогоРезерва, Метаданные.РегистрыСведений.НастройкиКадровогоРезерва));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиКадровогоРезерва") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиКадровогоРезерва"], СохраненныеНастройки["НастройкиКадровогоРезерва"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиКадровогоРезерва);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиКадровогоРезерва, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиКадровогоРезерва);
	НастройкиПрограммы.Вставить("НастройкиКадровогоРезерва", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиКадровогоРезерва.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиКадровогоРезерва);
	Настройки.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти