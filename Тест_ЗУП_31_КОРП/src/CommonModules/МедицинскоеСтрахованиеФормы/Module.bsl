////////////////////////////////////////////////////////////////////////////////
// Подсистема "Медицинское страхование"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураИменТаблиц() Экспорт
	
	СтруктураИменТаблиц = Новый Структура;
	СтруктураИменТаблиц.Вставить("ИмяТаблицыСотрудники", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыСведенийСотрудников", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыПрограммыСтрахованияСотрудников", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыРасширенийПрограммСтрахованияСотрудников", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыРодственники", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыСведенийРодственников", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыПрограммыСтрахованияРодственников", Неопределено);
	СтруктураИменТаблиц.Вставить("ИмяТаблицыРасширенийПрограммСтрахованияРодственников", Неопределено);
	
	Возврат СтруктураИменТаблиц;
	
КонецФункции

Процедура ПрикреплениеКПрограммамСтрахованияЗаполнить(Форма, СтруктураИменТаблиц, Сотрудники = Неопределено, ЗаполнятьКонтактнуюИнформацию = Истина, ЗаполнятьПрограммыСтрахования = Истина, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Очистим данные
	МассивСотрудников = Новый Массив;
	ЗаполняемыеТаблицыСотрудников = Новый Массив;
	Если СтруктураИменТаблиц.ИмяТаблицыСотрудники <> Неопределено Тогда
		ЗаполняемыеТаблицыСотрудников.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников <> Неопределено Тогда
		ЗаполняемыеТаблицыСотрудников.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыСведенийСотрудников]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников <> Неопределено Тогда
		ЗаполняемыеТаблицыСотрудников.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников <> Неопределено Тогда
		ЗаполняемыеТаблицыСотрудников.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников]);
	КонецЕсли;
	ЗаполняемыеТаблицыФизическихЛиц = Новый Массив;
	Если СтруктураИменТаблиц.ИмяТаблицыРодственники <> Неопределено Тогда
		ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыРодственники]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников <> Неопределено Тогда
		ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников <> Неопределено Тогда
		ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников]);
	КонецЕсли;
	Если СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников <> Неопределено Тогда
		ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников]);
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыСотрудников Цикл
			ЗаполняемаяТаблица.Очистить();
		КонецЦикла;
		Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыФизическихЛиц Цикл
			ЗаполняемаяТаблица.Очистить();
		КонецЦикла;
	Иначе
		Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
			МассивСотрудников = Сотрудники;
		Иначе
			МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		КонецЕсли;
		
		Для Каждого СотрудникМассива Из МассивСотрудников Цикл
			
			СтруктураОтбора = Новый Структура("Сотрудник", СотрудникМассива);
			Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыСотрудников Цикл
				НайденныеСтроки = ЗаполняемаяТаблица.НайтиСтроки(СтруктураОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполняемаяТаблица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникМассива, "ФизическоеЛицо"));
			Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыФизическихЛиц Цикл
				НайденныеСтроки = ЗаполняемаяТаблица.НайтиСтроки(СтруктураОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполняемаяТаблица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Получим сведения по сотрудникам, не прикрепленных к программам страхования
	Если Не ЗначениеЗаполнено(Объект.Организация) ИЛИ Не ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		// Показываем только сводные сведения
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтраховаяКомпания", Объект.СтраховаяКомпания);
	Запрос.УстановитьПараметр("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса() + (Форма.СдвигДатыПрикрепления * ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах()));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключаемыйРегистратор = Неопределено, Документы.ПрикреплениеКПрограммамМедицинскогоСтрахования.ПустаяСсылка(), ИсключаемыйРегистратор));
	
	ПередаваемыеСведения = ПередаваемыеСведения(Истина);
	КадровыеДанные = Новый Массив;
	КадровыеДанные.Добавить("Организация");
	КадровыеДанные.Добавить("ДатаПриема");
	Для Каждого ПередаваемоеСведение Из ПередаваемыеСведения Цикл
		Если ТипЗнч(ПередаваемоеСведение.Значение) = Тип("Строка") Тогда
			КадровыеДанные.Добавить(ПередаваемоеСведение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСотрудников.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&ДатаНачалаСтрахования КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиДляПерезаполнения
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляПерезаполнения");
		ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
		Запрос.Выполнить();
		
	Иначе
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация = Объект.Организация;
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
		КонецЕсли;
		ПараметрыПолученияСотрудников.НачалоПериода 	= Объект.ДатаНачалаСтрахования;
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= Объект.ДатаОкончанияСтрахования;
		ПараметрыПолученияСотрудников.КадровыеДанные	= КадровыеДанные;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаСотрудников") = Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	NULL КАК ФизическоеЛицо,
		|	NULL КАК Группа
		|ПОМЕСТИТЬ ВТГруппыСотрудников";
		
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("ГруппаСотрудников", Неопределено);
		Запрос.УстановитьПараметр("ОтборПоГруппеСотрудников", Ложь);
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ГруппаСотрудников) Тогда
			Если МассивСотрудников.Количество() = 0 Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СотрудникиОрганизации.Сотрудник КАК Сотрудник
				|ИЗ
				|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
				
				МассивСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
				
			КонецЕсли;
			
			ГруппыСотрудников.СоздатьВТГруппыСотрудников(Запрос.МенеджерВременныхТаблиц, МассивСотрудников);
			Запрос.УстановитьПараметр("ГруппаСотрудников", Форма.ГруппаСотрудников);
			Запрос.УстановитьПараметр("ОтборПоГруппеСотрудников", ЗначениеЗаполнено(Форма.ГруппаСотрудников));
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Сотрудник,
			|	NULL КАК ФизическоеЛицо,
			|	NULL КАК Группа
			|ПОМЕСТИТЬ ВТГруппыСотрудников";
			
			Запрос.Выполнить();
			
			Запрос.УстановитьПараметр("ГруппаСотрудников", Неопределено);
			Запрос.УстановитьПараметр("ОтборПоГруппеСотрудников", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрограммыМедицинскогоСтрахования.Ссылка КАК ПрограммаСтрахования
	|ПОМЕСТИТЬ ВТПрограммыСтрахования
	|ИЗ
	|	Справочник.ПрограммыМедицинскогоСтрахования КАК ПрограммыМедицинскогоСтрахования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыМедицинскогоСтрахованияПоУмолчанию КАК ПрограммыМедицинскогоСтрахованияПоУмолчанию
	|		ПО ПрограммыМедицинскогоСтрахования.Ссылка = ПрограммыМедицинскогоСтрахованияПоУмолчанию.ПрограммаСтрахования
	|ГДЕ
	|	ПрограммыМедицинскогоСтрахованияПоУмолчанию.Организация = &Организация
	|	И ПрограммыМедицинскогоСтрахования.СтраховаяКомпания = &СтраховаяКомпания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА &ТекущаяДата > СотрудникиОрганизации.ДатаПриема
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ СотрудникиОрганизации.ДатаПриема
	|	КОНЕЦ КАК ДатаНачала,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиНеПрикрепленные
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыМедицинскогоСтрахованияСотрудников КАК ПрограммыМедицинскогоСтрахованияСотрудников
	|		ПО СотрудникиОрганизации.Организация = ПрограммыМедицинскогоСтрахованияСотрудников.Организация
	|			И СотрудникиОрганизации.ФизическоеЛицо = ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо
	|			И (ПрограммыМедицинскогоСтрахованияСотрудников.Регистратор <> &ИсключаемыйРегистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГруппыСотрудников КАК ГруппыСотрудников
	|		ПО СотрудникиОрганизации.Сотрудник = ГруппыСотрудников.Сотрудник
	|ГДЕ
	|	ПрограммыМедицинскогоСтрахованияСотрудников.ФизическоеЛицо ЕСТЬ NULL
	|	И (НЕ &ОтборПоГруппеСотрудников
	|			ИЛИ ГруппыСотрудников.Группа = &ГруппаСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНеПрикрепленные.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтложенныеСотрудники
	|ИЗ
	|	ВТСотрудникиНеПрикрепленные КАК СотрудникиНеПрикрепленные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтложенноеМедицинскоеСтрахованиеСотрудников КАК ОтложенноеМедицинскоеСтрахованиеСотрудников
	|		ПО СотрудникиНеПрикрепленные.Сотрудник = ОтложенноеМедицинскоеСтрахованиеСотрудников.Сотрудник
	|			И (ОтложенноеМедицинскоеСтрахованиеСотрудников.Организация = &Организация)
	|			И (ОтложенноеМедицинскоеСтрахованиеСотрудников.СтраховаяКомпания = &СтраховаяКомпания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНеПрикрепленные.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(МАКСИМУМ(МедицинскоеСтрахованиеПрикреплениеСотрудники.Ссылка), ЗНАЧЕНИЕ(Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.ПустаяСсылка)) КАК ДокументПрикрепления
	|ПОМЕСТИТЬ ВТДокументыПрикрепления
	|ИЗ
	|	ВТСотрудникиНеПрикрепленные КАК СотрудникиНеПрикрепленные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Сотрудники КАК МедицинскоеСтрахованиеПрикреплениеСотрудники
	|		ПО СотрудникиНеПрикрепленные.Сотрудник = МедицинскоеСтрахованиеПрикреплениеСотрудники.Сотрудник
	|ГДЕ
	|	МедицинскоеСтрахованиеПрикреплениеСотрудники.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И МедицинскоеСтрахованиеПрикреплениеСотрудники.Ссылка.Проведен = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиНеПрикрепленные.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНеПрикрепленные.Сотрудник КАК Сотрудник,
	|	СотрудникиНеПрикрепленные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыПрикрепления.ДокументПрикрепления КАК ДокументПрикрепления,
	|	ВЫБОР
	|		КОГДА ОтложенныеСотрудники.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтложенныйСотрудник,
	|	ВЫБОР
	|		КОГДА &ДатаНачалаСтрахования > СотрудникиНеПрикрепленные.ДатаНачала
	|			ТОГДА &ДатаНачалаСтрахования
	|		ИНАЧЕ СотрудникиНеПрикрепленные.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВТПрограммыСтрахования.ПрограммаСтрахования КАК ПрограммаСтрахования
	|ИЗ
	|	ВТСотрудникиНеПрикрепленные КАК СотрудникиНеПрикрепленные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыПрикрепления КАК ДокументыПрикрепления
	|		ПО СотрудникиНеПрикрепленные.Сотрудник = ДокументыПрикрепления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтложенныеСотрудники КАК ОтложенныеСотрудники
	|		ПО СотрудникиНеПрикрепленные.Сотрудник = ОтложенныеСотрудники.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрограммыСтрахования КАК ВТПрограммыСтрахования
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиНеПрикрепленные.Сотрудник,
	|	ВТПрограммыСтрахования.ПрограммаСтрахования";
	
	СтрокаКадровыхСведенийСотрудников = ",
	|";
	Для каждого КадровоеСведение Из КадровыеДанные Цикл
		СтрокаКадровыхСведенийСотрудников = СтрокаКадровыхСведенийСотрудников + "СотрудникиОрганизации." + КадровоеСведение + ",
		|";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаКадровыхСведенийСотрудников, 2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо", "СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо" + СтрокаКадровыхСведенийСотрудников);
	
	СтрокаКадровыхСведенийСотрудников = ",
	|";
	Для каждого КадровоеСведение Из КадровыеДанные Цикл
		СтрокаКадровыхСведенийСотрудников = СтрокаКадровыхСведенийСотрудников + "СотрудникиНеПрикрепленные." + КадровоеСведение + ",
		|";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаКадровыхСведенийСотрудников, 2);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПрограммыСтрахования.ПрограммаСтрахования КАК ПрограммаСтрахования", "ВТПрограммыСтрахования.ПрограммаСтрахования КАК ПрограммаСтрахования" + СтрокаКадровыхСведенийСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ЗаполнятьКонтактнуюИнформацию Тогда
		ПередаваемыеСведения = ПередаваемыеСведения(, Истина);
		МассивФизическихЛиц = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		Если МассивФизическихЛиц.Количество() > 0 Тогда
			КонтактнаяИнформацияСотрудников = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				МассивФизическихЛиц,,ПередаваемыеСведения.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Если Не ЗначениеЗаполнено(Сотрудники) И Выборка.ОтложенныйСотрудник И Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].Выгрузить().Колонки.Найти("ПрикреплениеКПрограммеСтрахованияОтложено") = Неопределено Тогда
			// В документ отложенных сотрудников не заполняем, можем добавлять только вручную
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].Выгрузить().Колонки.Найти("ПрикреплениеКПрограммеСтрахованияОтложено") <> Неопределено Тогда
			НоваяСтрока.ПрикреплениеКПрограммеСтрахованияОтложено = Выборка.ОтложенныйСотрудник;
			НоваяСтрока.Команда = ?(Выборка.ОтложенныйСотрудник, НСтр("ru = 'Возобновить'"), НСтр("ru = 'Отложить'"));
		КонецЕсли;
		Если НоваяСтрока.Свойство("СтраховатьСотрудника") Тогда
			НоваяСтрока.СтраховатьСотрудника = Истина;
		КонецЕсли;
		
		Если ЗаполнятьКонтактнуюИнформацию Тогда
			СтруктураОтбора = Новый Структура("Объект", Выборка.ФизическоеЛицо);
			НайденныеСтроки = КонтактнаяИнформацияСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
				СтруктураОтбораВида = Новый Структура("Ссылка", СтрокаДанных.Вид);
				НайденныеВиды = ВсеПередаваемыеСведения.НайтиСтроки(СтруктураОтбораВида);
				Для каждого НайденныйВид Из НайденныеВиды Цикл
					НоваяСтрока[НайденныйВид.Имя] = СтрокаДанных.ЗначенияПолей;
					НоваяСтрока[НайденныйВид.Имя + "Представление"] = СтрокаДанных.Представление;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаполнятьПрограммыСтрахования Тогда
			МассивСтруктурПрограмм = Новый Массив;
			Пока Выборка.СледующийПоЗначениюПоля("ПрограммаСтрахования") Цикл
				Если Не ЗначениеЗаполнено(Выборка.ПрограммаСтрахования) Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПрограммы = Новый Структура;
				СтруктураПрограммы.Вставить("ПрограммаСтрахования", Выборка.ПрограммаСтрахования);
				
				ДатыСтрахования = Новый Структура;
				ДатыСтрахования.Вставить("ДатаНачала", НоваяСтрока.ДатаНачала);
				ДатыСтрахования.Вставить("ДатаОкончания", Объект.ДатаОкончанияСтрахования);
				ДатыСтрахования.Вставить("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
				ДатыСтрахования.Вставить("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
				
				СтруктураПрограммы.Вставить("СтраховаяПремия",  МедицинскоеСтрахование.СтраховаяПремия(
					Выборка.ПрограммаСтрахования, ДатыСтрахования, НоваяСтрока.ДатаРождения, Форма.ШкалаВозрастов, Истина));
				МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
			КонецЦикла;
			УстановитьПрограммыСтрахования(Форма.Объект, НоваяСтрока, "ПрограммыСтрахованияСотрудников", "Сотрудник", МассивСтруктурПрограмм);
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнятьПрограммыСтрахования Тогда
		РассчитатьСтраховуюПремиюСотрудников(Форма.Объект, СтруктураИменТаблиц, Сотрудники);
	КонецЕсли;
	
	Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].Сортировать("Сотрудник");
	
	// Активизируем редактируемую строку
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		СтруктураОтбора = Новый Структура("Сотрудник", Сотрудники);
		НайденныеСтроки = Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы[СтруктураИменТаблиц.ИмяТаблицыСотрудники].ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрикреплениеКПрограммамСтрахованияЗаполнитьРодственников(Форма, СтруктураИменТаблиц, ИсключаемыйДокумент = Неопределено, Сотрудники = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Очистим данные
	ЗаполняемыеТаблицыФизическихЛиц = Новый Массив;
	ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыРодственники]);
	ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников]);
	ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников]);
	ЗаполняемыеТаблицыФизическихЛиц.Добавить(Объект[СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников]);
	
	Если Сотрудники = Неопределено Тогда
		Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыФизическихЛиц Цикл
			ЗаполняемаяТаблица.Очистить();
		КонецЦикла;
		МассивСотрудников = Объект[СтруктураИменТаблиц.ИмяТаблицыСотрудники].Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
			МассивСотрудников = Сотрудники;
		Иначе
			МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		КонецЕсли;
		
		Для Каждого СотрудникМассива Из МассивСотрудников Цикл
			
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникМассива, "ФизическоеЛицо"));
			Для Каждого ЗаполняемаяТаблица Из ЗаполняемыеТаблицыФизическихЛиц Цикл
				НайденныеСтроки = ЗаполняемаяТаблица.НайтиСтроки(СтруктураОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ЗаполняемаяТаблица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Получим сведения по родственникам, с учетом ранее введенных документов прикрепления.
	Если Не ЗначениеЗаполнено(Объект.Организация) ИЛИ Не ЗначениеЗаполнено(Объект.СтраховаяКомпания) Тогда
		// Показываем только сводные сведения
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтраховаяКомпания", Объект.СтраховаяКомпания);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ИсключаемыйДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РодственникиФизическихЛиц.Наименование КАК Родственник,
	|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ ВТРодственники
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО РодственникиФизическихЛиц.Владелец = ФизическиеЛица.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник КАК Родственник,
	|	МАКСИМУМ(МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка) КАК ДокументРодственника
	|ПОМЕСТИТЬ ВТДокументыРодственников
	|ИЗ
	|	Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Родственники КАК МедицинскоеСтрахованиеПрикреплениеРодственники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРодственники КАК Родственники
	|		ПО МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = Родственники.ФизическоеЛицо
	|			И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = Родственники.Родственник
	|			И (МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка <> &ИсключаемыйДокумент)
	|
	|СГРУППИРОВАТЬ ПО
	|	МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо,
	|	МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Родственники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Родственники.Родственник КАК Родственник,
	|	Родственники.ДатаРождения КАК ДатаРождения,
	|	СведенияРодственников.СведениеИмя КАК СведениеИмя,
	|	СведенияРодственников.СведениеЗначение КАК СведениеЗначение
	|ИЗ
	|	ВТРодственники КАК Родственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Родственники КАК МедицинскоеСтрахованиеПрикреплениеРодственники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРодственников КАК ДокументыРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = ДокументыРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = ДокументыРодственников.Родственник
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = ДокументыРодственников.ДокументРодственника
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.СведенияРодственников КАК СведенияРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = СведенияРодственников.Ссылка
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = СведенияРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = СведенияРодственников.Родственник
	|		ПО Родственники.ФизическоеЛицо = МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо
	|			И Родственники.Родственник = МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Родственники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Родственники.Родственник КАК Родственник,
	|	ПрограммыСтрахованияРодственников.ПрограммаСтрахования КАК ПрограммаСтрахования
	|ИЗ
	|	ВТРодственники КАК Родственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Родственники КАК МедицинскоеСтрахованиеПрикреплениеРодственники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРодственников КАК ДокументыРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = ДокументыРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = ДокументыРодственников.Родственник
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = ДокументыРодственников.ДокументРодственника
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.ПрограммыСтрахованияРодственников КАК ПрограммыСтрахованияРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = ПрограммыСтрахованияРодственников.Ссылка
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = ПрограммыСтрахованияРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = ПрограммыСтрахованияРодственников.Родственник
	|		ПО Родственники.ФизическоеЛицо = МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо
	|			И Родственники.Родственник = МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник
	|ГДЕ
	|	ПрограммыСтрахованияРодственников.ПрограммаСтрахования ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Родственники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Родственники.Родственник КАК Родственник,
	|	РасширенияПрограммСтрахованияРодственников.РасширениеСтрахования КАК РасширениеСтрахования
	|ИЗ
	|	ВТРодственники КАК Родственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.Родственники КАК МедицинскоеСтрахованиеПрикреплениеРодственники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРодственников КАК ДокументыРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = ДокументыРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = ДокументыРодственников.Родственник
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = ДокументыРодственников.ДокументРодственника
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрикреплениеКПрограммамМедицинскогоСтрахования.РасширенияПрограммСтрахованияРодственников КАК РасширенияПрограммСтрахованияРодственников
	|			ПО МедицинскоеСтрахованиеПрикреплениеРодственники.Ссылка = РасширенияПрограммСтрахованияРодственников.Ссылка
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо = РасширенияПрограммСтрахованияРодственников.ФизическоеЛицо
	|				И МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник = РасширенияПрограммСтрахованияРодственников.Родственник
	|		ПО Родственники.ФизическоеЛицо = МедицинскоеСтрахованиеПрикреплениеРодственники.ФизическоеЛицо
	|			И Родственники.Родственник = МедицинскоеСтрахованиеПрикреплениеРодственники.Родственник
	|ГДЕ
	|	РасширенияПрограммСтрахованияРодственников.РасширениеСтрахования ЕСТЬ НЕ NULL ";
	
	ТекущаяДатаНачала = ТекущаяДатаСеанса() + (Форма.СдвигДатыПрикрепления * ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах());
	
	Результат = Запрос.ВыполнитьПакет();
	
	МассивРодственников = Новый Массив;
	ВыборкаПрограммыСтрахования = Результат[4].Выбрать();
	Пока ВыборкаПрограммыСтрахования.Следующий() Цикл
		СтрокаПрограммыСтрахования = Объект[СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников].Добавить();
		СтрокаПрограммыСтрахования.ФизическоеЛицо = ВыборкаПрограммыСтрахования.ФизическоеЛицо;
		СтрокаПрограммыСтрахования.Родственник = ВыборкаПрограммыСтрахования.Родственник;
		СтрокаПрограммыСтрахования.ПрограммаСтрахования = ВыборкаПрограммыСтрахования.ПрограммаСтрахования;
		Если МассивРодственников.Найти(ВыборкаПрограммыСтрахования.Родственник) = Неопределено Тогда
			МассивРодственников.Добавить(ВыборкаПрограммыСтрахования.Родственник);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаРасширенийПрограммСтрахования = Результат[5].Выбрать();
	Пока ВыборкаРасширенийПрограммСтрахования.Следующий() Цикл
		СтрокаРасширенияПрограммыСтрахования = Объект[СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников].Добавить();
		СтрокаРасширенияПрограммыСтрахования.ФизическоеЛицо = ВыборкаРасширенийПрограммСтрахования.ФизическоеЛицо;
		СтрокаРасширенияПрограммыСтрахования.Родственник = ВыборкаРасширенийПрограммСтрахования.Родственник;
		СтрокаРасширенияПрограммыСтрахования.РасширениеСтрахования = ВыборкаРасширенийПрограммСтрахования.РасширениеСтрахования;
		Если МассивРодственников.Найти(ВыборкаРасширенийПрограммСтрахования.Родственник) = Неопределено Тогда
			МассивРодственников.Добавить(ВыборкаРасширенийПрограммСтрахования.Родственник);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСведения = Результат[3].Выбрать();
	Пока ВыборкаСведения.СледующийПоЗначениюПоля("Родственник") Цикл
		СтрокаРодственника = Объект[СтруктураИменТаблиц.ИмяТаблицыРодственники].Добавить();
		СтрокаРодственника.ФизическоеЛицо = ВыборкаСведения.ФизическоеЛицо;
		СтрокаРодственника.Родственник = ВыборкаСведения.Родственник;
		Если Не ЗначениеЗаполнено(СтрокаРодственника.ДатаРождения) Тогда
			СтрокаРодственника.ДатаРождения = ВыборкаСведения.ДатаРождения;
		КонецЕсли;
		Если Объект.ДатаНачалаСтрахования > ТекущаяДатаНачала Тогда
			СтрокаРодственника.ДатаНачала = Форма.ДатаНачалаСтрахования;
		Иначе
			СтрокаРодственника.ДатаНачала = ТекущаяДатаНачала;
		КонецЕсли;
		СтрокаРодственника.ДатаОкончания = Объект.ДатаОкончанияСтрахования;
		Если МассивРодственников.Найти(ВыборкаСведения.Родственник) = Неопределено Тогда
			МассивРодственников.Добавить(ВыборкаСведения.Родственник);
		КонецЕсли;
		
		Пока ВыборкаСведения.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаСведения.СведениеИмя) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийРодственника = Объект[СтруктураИменТаблиц.ИмяТаблицыСведенийРодственников].Добавить();
			СтрокаСведенийРодственника.ФизическоеЛицо = ВыборкаСведения.ФизическоеЛицо;
			СтрокаСведенийРодственника.Родственник = ВыборкаСведения.Родственник;
			Если ВыборкаСведения.СведениеИмя = "ДатаРождения" Тогда
				Если ЗначениеЗаполнено(ВыборкаСведения.СведениеЗначение) И СтрокаРодственника.ДатаРождения <> ВыборкаСведения.СведениеЗначение Тогда
					СтрокаРодственника.ДатаРождения = ВыборкаСведения.СведениеЗначение;
				Иначе
					СтрокаСведенийРодственника.СведениеИмя = "ДатаРождения";
					СтрокаСведенийРодственника.СведениеЗначение = СтрокаРодственника.ДатаРождения;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаСведенийРодственника.СведениеИмя = ВыборкаСведения.СведениеИмя;
			СтрокаСведенийРодственника.СведениеЗначение = ВыборкаСведения.СведениеЗначение;
			СтрокаРодственника[ВыборкаСведения.СведениеИмя] = ВыборкаСведения.СведениеЗначение;
		КонецЦикла;
		
		ДатыСтрахования = Новый Структура;
		ДатыСтрахования.Вставить("ДатаНачала", СтрокаРодственника.ДатаНачала);
		ДатыСтрахования.Вставить("ДатаОкончания", СтрокаРодственника.ДатаОкончания);
		ДатыСтрахования.Вставить("ДатаНачалаСтрахования", Объект.ДатаНачалаСтрахования);
		ДатыСтрахования.Вставить("ДатаОкончанияСтрахования", Объект.ДатаОкончанияСтрахования);
		
		МассивСтруктурПрограмм = Новый Массив;
		ОтборСтрок = Новый Структура("Родственник", ВыборкаСведения.Родственник);
		НайденныеСтроки = Объект[СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников].НайтиСтроки(ОтборСтрок);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
				НайденнаяСтрока.ПрограммаСтрахования, ДатыСтрахования, СтрокаРодственника.ДатаРождения, Форма.ШкалаВозрастов, Ложь);
			СтруктураПрограммы = Новый Структура;
			СтруктураПрограммы.Вставить("ПрограммаСтрахования", НайденнаяСтрока.ПрограммаСтрахования);
			СтруктураПрограммы.Вставить("СтраховаяПремия", НайденнаяСтрока.СтраховаяПремия);
			МассивСтруктурПрограмм.Добавить(СтруктураПрограммы);
		КонецЦикла;
		УстановитьПрограммыСтрахования(Объект, СтрокаРодственника, СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников, "Родственник", МассивСтруктурПрограмм, "ФизическоеЛицо");
		
		МассивСтруктурРасширений = Новый Массив;
		ОтборСтрок = Новый Структура("Родственник", ВыборкаСведения.Родственник);
		НайденныеСтроки = Объект[СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников].НайтиСтроки(ОтборСтрок);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.СтраховаяПремия = МедицинскоеСтрахование.СтраховаяПремия(
				НайденнаяСтрока.РасширениеСтрахования, ДатыСтрахования, СтрокаРодственника.ДатаРождения, Форма.ШкалаВозрастов, Ложь);
			СтруктураРасширения = Новый Структура;
			СтруктураРасширения.Вставить("РасширениеСтрахования", НайденнаяСтрока.РасширениеСтрахования);
			СтруктураРасширения.Вставить("СтраховаяПремия", НайденнаяСтрока.СтраховаяПремия);
			МассивСтруктурРасширений.Добавить(СтруктураРасширения);
		КонецЦикла;
		УстановитьРасширенияПрограммСтрахования(Объект, СтрокаРодственника, СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников, "Родственник", МассивСтруктурРасширений, "ФизическоеЛицо");
	КонецЦикла;
	
	РассчитатьСтраховуюПремиюРодственников(Объект, СтруктураИменТаблиц, МассивРодственников);
	
КонецПроцедуры

Процедура РассчитатьСтраховуюПремиюСотрудников(Объект, СтруктураИменТаблиц, Сотрудники = Неопределено) Экспорт
	
	ИменаТаблиц = Новый Структура;
	ИменаТаблиц.Вставить("ИмяТаблицы", СтруктураИменТаблиц.ИмяТаблицыСотрудники);
	ИменаТаблиц.Вставить("ПрограммыСтрахования", СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияСотрудников);
	ИменаТаблиц.Вставить("РасширенияПрограммСтрахования", СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияСотрудников);
	
	РассчитатьСтраховуюПремию(Объект, ИменаТаблиц, "Сотрудник", Сотрудники);
	
КонецПроцедуры

Процедура РассчитатьСтраховуюПремиюРодственников(Объект, СтруктураИменТаблиц, Родственники = Неопределено) Экспорт
	
	ИменаТаблиц = Новый Структура;
	ИменаТаблиц.Вставить("ИмяТаблицы", СтруктураИменТаблиц.ИмяТаблицыРодственники);
	ИменаТаблиц.Вставить("ПрограммыСтрахования", СтруктураИменТаблиц.ИмяТаблицыПрограммыСтрахованияРодственников);
	ИменаТаблиц.Вставить("РасширенияПрограммСтрахования", СтруктураИменТаблиц.ИмяТаблицыРасширенийПрограммСтрахованияРодственников);
	
	РассчитатьСтраховуюПремию(Объект, ИменаТаблиц, "Родственник", Родственники);
	
КонецПроцедуры

Процедура УстановитьПрограммыСтрахования(Объект, ТекущиеДанные, ИмяТаблицы, ИмяПоля, ПрограммыСтрахования, ИмяПоляФизическогоЛица = Неопределено) Экспорт
	
	ТекущиеДанные.ПрограммыСтрахования = "";
	СтруктураОтбора = Новый Структура(ИмяПоля, ТекущиеДанные[ИмяПоля]);
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Объект[ИмяТаблицы].Удалить(СтрокаТаблицы);
	КонецЦикла;
	Для каждого ЭлементМассива Из ПрограммыСтрахования Цикл
		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		НоваяСтрока[ИмяПоля] = ТекущиеДанные[ИмяПоля];
		Если ИмяПоляФизическогоЛица <> Неопределено Тогда
			НоваяСтрока[ИмяПоляФизическогоЛица] = ТекущиеДанные[ИмяПоляФизическогоЛица];
		КонецЕсли;
		НоваяСтрока.ПрограммаСтрахования = ЭлементМассива.ПрограммаСтрахования;
		НоваяСтрока.СтраховаяПремия = ЭлементМассива.СтраховаяПремия;
		ТекущиеДанные.ПрограммыСтрахования = ТекущиеДанные.ПрограммыСтрахования + ЭлементМассива.ПрограммаСтрахования + "; ";
	КонецЦикла;
	Если Не ПустаяСтрока(ТекущиеДанные.ПрограммыСтрахования) Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекущиеДанные.ПрограммыСтрахования, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРасширенияПрограммСтрахования(Объект, ТекущиеДанные, ИмяТаблицы, ИмяПоля, РасширенияПрограммСтрахования, ИмяПоляФизическогоЛица = Неопределено) Экспорт
	
	ТекущиеДанные.РасширенияПрограммСтрахования = "";
	СтруктураОтбора = Новый Структура(ИмяПоля, ТекущиеДанные[ИмяПоля]);
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Объект[ИмяТаблицы].Удалить(СтрокаТаблицы);
	КонецЦикла;
	Для каждого ЭлементМассива Из РасширенияПрограммСтрахования Цикл
		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		НоваяСтрока[ИмяПоля] = ТекущиеДанные[ИмяПоля];
		Если ИмяПоляФизическогоЛица <> Неопределено Тогда
			НоваяСтрока[ИмяПоляФизическогоЛица] = ТекущиеДанные[ИмяПоляФизическогоЛица];
		КонецЕсли;
		НоваяСтрока.РасширениеСтрахования = ЭлементМассива.РасширениеСтрахования;
		НоваяСтрока.СтраховаяПремия = ЭлементМассива.СтраховаяПремия;
		ТекущиеДанные.РасширенияПрограммСтрахования = ТекущиеДанные.РасширенияПрограммСтрахования + ЭлементМассива.РасширениеСтрахования + "; ";
	КонецЦикла;
	Если Не ПустаяСтрока(ТекущиеДанные.РасширенияПрограммСтрахования) Тогда
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекущиеДанные.РасширенияПрограммСтрахования, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрикреплениеДополнитьФорму(Форма, ТаблицыСоСведениями) Экспорт
	
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПередаваемыхСведений", Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлемента", Новый ОписаниеТипов("Строка"), "ПараметрыПередаваемыхСведений"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита", Новый ОписаниеТипов("Строка"), "ПараметрыПередаваемыхСведений"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяТаблицы", Новый ОписаниеТипов("Строка"), "ПараметрыПередаваемыхСведений"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидКонтактнойИнформации", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), "ПараметрыПередаваемыхСведений"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипИнформации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), "ПараметрыПередаваемыхСведений"));
	Для Каждого СтрокаТаблицы Из ВсеПередаваемыеСведения Цикл
		Для каждого ТаблицаСоСведениями Из ТаблицыСоСведениями Цикл
			НаименованиеТаблицы = ТаблицаСоСведениями.Ключ;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаТаблицы.Имя, Новый ОписаниеТипов("Строка"), "Объект." + НаименованиеТаблицы));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаТаблицы.Имя + "Представление", Новый ОписаниеТипов("Строка"), "Объект." + НаименованиеТаблицы, СтрокаТаблицы.Представление));
			Иначе
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаТаблицы.Имя, СтрокаТаблицы.Тип, "Объект." + НаименованиеТаблицы, СтрокаТаблицы.Представление));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	Для каждого ТаблицаСоСведениями Из ТаблицыСоСведениями Цикл
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, "Объект." + ТаблицаСоСведениями.Ключ);
	КонецЦикла;
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Для Каждого СтрокаТаблицы Из ВсеПередаваемыеСведения Цикл
		Если Не СтрокаТаблицы.ОтображатьЭлемент Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ТаблицаСоСведениями Из ТаблицыСоСведениями Цикл
			ИмяЭлемента = ТаблицаСоСведениями.Ключ + СтрокаТаблицы.Имя;
			СтрокаПараметров = Форма.ПараметрыПередаваемыхСведений.Добавить();
			СтрокаПараметров.ИмяТаблицы = ТаблицаСоСведениями.Ключ;
			СтрокаПараметров.ИмяЭлемента = ИмяЭлемента;
			Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				ГруппаЭлемента = Форма.Элементы.Найти(ТаблицаСоСведениями.Значение);
				Если ГруппаЭлемента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлемента);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
					Элемент.ПутьКДанным = "Объект." + ТаблицаСоСведениями.Ключ + "." + СтрокаТаблицы.Имя + "Представление";
					Если СтрокаТаблицы.Ссылка <> Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица Тогда
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_"+ ТаблицаСоСведениями.Ключ + "ЭлементНачалоВыбора");
						Элемент.РедактированиеТекста = Ложь;
					КонецЕсли;
					СтрокаПараметров.ВидКонтактнойИнформации = СтрокаТаблицы.Ссылка;
					СтрокаПараметров.ТипИнформации = СтрокаТаблицы.ТипКИ;
				Иначе
					Элемент.ПутьКДанным = "Объект." + ТаблицаСоСведениями.Ключ + "." + СтрокаТаблицы.Имя;
					Если СтрокаТаблицы.ДокументУдостоверяющийЛичность Тогда
						Элемент.РедактированиеТекста = Ложь;
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_"+ ТаблицаСоСведениями.Ключ + "ДокументНачалоВыбора");
					КонецЕсли;
				КонецЕсли;
				СтрокаПараметров.ИмяРеквизита = СтрокаТаблицы.Имя;
				Элемент.КнопкаВыбора = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Для Каждого СтрокаПараметров Из Форма.ПараметрыПередаваемыхСведений Цикл
		Если Не ЗначениеЗаполнено(СтрокаПараметров.ВидКонтактнойИнформации) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПараметров.ИмяТаблицы = "Сотрудники" Тогда
			Для каждого СтрокаТаблицы Из Форма.Объект.Сотрудники Цикл
				НомерСтрокиТаблицы = СтрокаТаблицы.НомерСтроки-1;
				УровеньОшибок = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы[СтрокаПараметров.ИмяРеквизита + "Представление"],
					СтрокаТаблицы[СтрокаПараметров.ИмяРеквизита], СтрокаПараметров.ВидКонтактнойИнформации, СтрокаПараметров.ТипИнформации, СтрокаПараметров.ИмяРеквизита, ,
					"Объект.Сотрудники[" + НомерСтрокиТаблицы + "].Сотрудник");
				Если УровеньОшибок <> 0 Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаПараметров.ИмяТаблицы = "Родственники" Тогда
			Для каждого СтрокаТаблицы Из Форма.Объект.Родственники Цикл
				НомерСтрокиТаблицы = СтрокаТаблицы.НомерСтроки-1;
				УровеньОшибок = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(СтрокаТаблицы[СтрокаПараметров.ИмяРеквизита + "Представление"],
					СтрокаТаблицы[СтрокаПараметров.ИмяРеквизита], СтрокаПараметров.ВидКонтактнойИнформации, СтрокаПараметров.ТипИнформации, СтрокаПараметров.ИмяРеквизита, ,
					"Объект.Родственники[" + НомерСтрокиТаблицы + "].Родственник");
				Если УровеньОшибок <> 0 Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрикреплениеПрочитатьНастройки(Форма) Экспорт
	
	// Основные настройки
	НаборЗаписей = РегистрыСведений.УсловияМедицинскогоСтрахования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Форма.Объект.Организация);
	НаборЗаписей.Отбор.СтраховаяКомпания.Установить(Форма.Объект.СтраховаяКомпания);
	НаборЗаписей.Прочитать();
	
	Форма.Объект.ДатаНачалаСтрахования = Неопределено;
	Форма.Объект.ДатаОкончанияСтрахования = Неопределено;
	Форма.СдвигДатыПрикрепления = 0;
	Форма.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = Ложь;
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если Форма.Объект.ДатаОкончанияСтрахования < ЗаписьНабора.ОкончаниеПериодаСтрахования Тогда
			Форма.Объект.ДатаОкончанияСтрахования = ЗаписьНабора.ОкончаниеПериодаСтрахования;
			Форма.Объект.ДатаНачалаСтрахования = ЗаписьНабора.НачалоПериодаСтрахования;
		КонецЕсли;
		Форма.СдвигДатыПрикрепления = ЗаписьНабора.СдвигДатыПрикрепления;
		Форма.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = ЗаписьНабора.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
	КонецЦикла;
	
	ЗаполнитьШкалуВозрастов(Форма);
	
	// Основные настройки
	НаборЗаписей = РегистрыСведений.АдресаОтправкиУведомленийСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Форма.Объект.Организация);
	НаборЗаписей.Отбор.СтраховаяКомпания.Установить(Форма.Объект.СтраховаяКомпания);
	НаборЗаписей.Прочитать();
	
	Форма.Получатели = Новый СписокЗначений;
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		Форма.Получатели.Добавить(ЗаписьНабора.Email);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткреплениеПрочитатьНастройки(Форма) Экспорт
	
	// Основные настройки
	НаборЗаписей = РегистрыСведений.УсловияМедицинскогоСтрахования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Форма.Объект.Организация);
	НаборЗаписей.Отбор.СтраховаяКомпания.Установить(Форма.Объект.СтраховаяКомпания);
	НаборЗаписей.Прочитать();
	
	Форма.Объект.ДатаНачалаСтрахования = Неопределено;
	Форма.Объект.ДатаОкончанияСтрахования = Неопределено;
	Форма.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = Ложь;
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если Форма.Объект.ДатаОкончанияСтрахования < ЗаписьНабора.ОкончаниеПериодаСтрахования Тогда
			Форма.Объект.ДатаОкончанияСтрахования = ЗаписьНабора.ОкончаниеПериодаСтрахования;
			Форма.Объект.ДатаНачалаСтрахования = ЗаписьНабора.НачалоПериодаСтрахования;
		КонецЕсли;
		Форма.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком = ЗаписьНабора.ОткреплятьСотрудниковВОтпускеПоУходуЗаРебенком;
	КонецЦикла;
	
	ЗаполнитьШкалуВозрастов(Форма);
	
	// Основные настройки
	НаборЗаписей = РегистрыСведений.АдресаОтправкиУведомленийСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Форма.Объект.Организация);
	НаборЗаписей.Отбор.СтраховаяКомпания.Установить(Форма.Объект.СтраховаяКомпания);
	НаборЗаписей.Прочитать();
	
	Форма.Получатели = Новый СписокЗначений;
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		Форма.Получатели.Добавить(ЗаписьНабора.Email);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьПередаваемыхСведений(Форма, ТаблицыСоСведениями) Экспорт
	
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	ПередаваемыеСведения = ПередаваемыеСведения();
	
	Для каждого СтрокаТаблицы Из ВсеПередаваемыеСведения Цикл
		Для каждого ТаблицаСоСведениями Из ТаблицыСоСведениями Цикл
			ИмяЭлемента = ТаблицаСоСведениями.Ключ + СтрокаТаблицы.Имя;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
				ИскомоеЗначение = СтрокаТаблицы.Ссылка;
			Иначе
				ИскомоеЗначение = СтрокаТаблицы.Имя;
			КонецЕсли;
			СведениеПередается = ПередаваемыеСведения.НайтиПоЗначению(ИскомоеЗначение) <> Неопределено;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", СведениеПередается);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьСтраховуюПремию(Объект, ИменаТаблиц, ИмяПоля, Страхователи = Неопределено)
	
	Если Страхователи = Неопределено Тогда
		МассивСтрахователей = Объект[ИменаТаблиц.ИмяТаблицы].Выгрузить().ВыгрузитьКолонку(ИмяПоля);
	ИначеЕсли ТипЗнч(Страхователи) = Тип("Массив") Тогда
		МассивСтрахователей = Страхователи;
	Иначе
		МассивСтрахователей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Страхователи);
	КонецЕсли;
	
	
	Для Каждого Страхователь Из МассивСтрахователей Цикл
		ПараметрыОтбора = Новый Структура(ИмяПоля, Страхователь);
		НайденныеСтроки = Объект[ИменаТаблиц.ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаСтрахователя Из НайденныеСтроки Цикл
			
			СтрокаСтрахователя.СтраховаяПремия = 0;
			
			НайденныеСтрокиПрограмм = Объект[ИменаТаблиц.ПрограммыСтрахования].НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТаблицы Из НайденныеСтрокиПрограмм Цикл
				СтрокаСтрахователя.СтраховаяПремия = СтрокаСтрахователя.СтраховаяПремия + СтрокаТаблицы.СтраховаяПремия;
			КонецЦикла;
			НайденныеСтрокиРасширений = Объект[ИменаТаблиц.РасширенияПрограммСтрахования].НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТаблицы Из НайденныеСтрокиРасширений Цикл
				СтрокаСтрахователя.СтраховаяПремия = СтрокаСтрахователя.СтраховаяПремия + СтрокаТаблицы.СтраховаяПремия;
			КонецЦикла;
			СтрокаСтрахователя.СтраховаяПремия = ?(СтрокаСтрахователя.СтраховаяПремия < 0, 0, СтрокаСтрахователя.СтраховаяПремия);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПередаваемыеСведения(ТолькоКадровыеСведения = Ложь, ТолькоКонтактнуюИнформацию = Ложь, ТолькоОтображаемыеСведения = Ложь) Экспорт
	
	ВсеПередаваемыеСведения = МедицинскоеСтрахование.ПередаваемыеСведенияВСтраховуюКомпанию();
	ПередаваемыеСведения = Новый СписокЗначений;
	Для каждого ПередаваемоеСведение Из ВсеПередаваемыеСведения Цикл
		Если ЗначениеЗаполнено(ПередаваемоеСведение.Ссылка) Тогда
			ЗначениеСведения = ПередаваемоеСведение.Ссылка;
		Иначе
			ЗначениеСведения = ПередаваемоеСведение.Имя;
		КонецЕсли;
		Если ТолькоКадровыеСведения И Не ПередаваемоеСведение.КадровыеСведения Тогда
			Продолжить;
		КонецЕсли;
		Если ТолькоКонтактнуюИнформацию И ПередаваемоеСведение.Тип <> Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			Продолжить;
		КонецЕсли;
		Если ТолькоОтображаемыеСведения И Не ПередаваемоеСведение.ОтображатьЭлемент Тогда
			Продолжить;
		КонецЕсли;
		ПередаваемыеСведения.Добавить(ЗначениеСведения, ПередаваемоеСведение.Представление);
	КонецЦикла;
	
	Возврат ПередаваемыеСведения;
	
КонецФункции

Процедура ЗаполнитьШкалуВозрастов(Форма)
	
	Объект = Форма.Объект;
	
	// Шкала повышающего коэффициента
	НаборЗаписей = РегистрыСведений.ВозрастныеКоэффициентыСтраховыхКомпаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	НаборЗаписей.Отбор.СтраховаяКомпания.Установить(Объект.СтраховаяКомпания);
	НаборЗаписей.Прочитать();
	ТаблицаШкалы = НаборЗаписей.Выгрузить();
	ТаблицаШкалы.Сортировать("ИндексСтроки");
	
	Форма.ШкалаВозрастов.Очистить();
	ЗначениеДоПредыдущее = 0;
	Для Каждого ТекСтрока Из ТаблицаШкалы Цикл 
		НоваяСтрока = Форма.ШкалаВозрастов.Добавить();
		НоваяСтрока.ЗначениеОт = ЗначениеДоПредыдущее + 1;
		НоваяСтрока.ЗначениеДо = ?(ТекСтрока.ВерхняяГраницаИнтервалаВозраста = 0, 999, ТекСтрока.ВерхняяГраницаИнтервалаВозраста);
		НоваяСтрока.ЗначениеПоказателя = ТекСтрока.ЗначениеПоказателя;
		
		ЗначениеДоПредыдущее = НоваяСтрока.ЗначениеДо;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
