#Область СлужебныеПроцедурыИФункции

#Область Публикация

// Возвращает структуру данных курса, которая используется для его просмотра и публикации.
//
// Параметры:
//   ЭлектронныйКурс - СправочникСсылка.ЭлектронныеКурсы - электронный курс.
//   ФрагментКурса  - СправочникСсылка.СодержаниеЭлектронныхКурсов - фрагмент курса, который надо отобразить.
//   ДатаИзмененияСуществующихДанных - Дата - дата уже выгруженных данных.
//
// Возвращаемое значение:
//  Структура - данные курса.
//
Функция ДанныеПубликацииЭлектронногоКурса(Знач ЭлектронныйКурс, Знач ФрагментКурса = Неопределено, Знач ДатаИзмененияСуществующихДанных = Неопределено) Экспорт
	
	// Делаем проверки
	//
	
	Если ЭлектронныйКурс = ФрагментКурса Тогда
		ВызватьИсключение НСтр("ru = 'Фрагмент курса не может быть самим курсом'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйКурс) Тогда
		ВызватьИсключение НСтр("ru = 'Электронный курс для публикации не задан'");
	КонецЕсли;	
	
	// Получаем реквизиты курса и его содержание
	//
	
	ТребуемыеДанныеЭК = Новый Структура();
	ТребуемыеДанныеЭК.Вставить("Наименование", "Наименование");
	ТребуемыеДанныеЭК.Вставить("ДатаИзменения", "ДатаИзменения");
	ТребуемыеДанныеЭК.Вставить("Презентация", "Презентация");
		
	Если ФрагментКурса = Неопределено ИЛИ ФрагментКурса = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Начало Тогда
		ТребуемыеДанныеЭК.Вставить("СтартоваяСтраница", "СтартоваяСтраница");
		ТребуемыеДанныеЭК.Вставить("СтартоваяСтраницаЭлемент", "СтартоваяСтраница.ЕдинственныйЭлемент");			
	КонецЕсли;
		
	Если ФрагментКурса = Неопределено ИЛИ ФрагментКурса = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Финальный Тогда
		ТребуемыеДанныеЭК.Вставить("ФинальнаяСтраница", "ФинальнаяСтраница");
		ТребуемыеДанныеЭК.Вставить("ФинальнаяСтраницаЭлемент", "ФинальнаяСтраница.ЕдинственныйЭлемент");
	КонецЕсли;		
		
	ДанныеЭлектронногоКурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйКурс, ТребуемыеДанныеЭК);	
	
	Если ТипЗнч(ФрагментКурса) = Тип("СправочникСсылка.СтраницыЭлементовЭлектронныхКурсов") Тогда				
		ДанныеСтраницыПодборки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФрагментКурса, "Владелец, СсылкаНаЭлементКурса, ДатаИзменения");
	Иначе
		ДанныеСтраницыПодборки = Неопределено;
	КонецЕсли;		
	
	ЭлементыСодержания = Неопределено;
	
	Если ФрагментКурса = Неопределено ИЛИ ТипЗнч(ФрагментКурса) = Тип("СправочникСсылка.СодержаниеЭлектронныхКурсов") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Содержание.Ссылка КАК Ссылка,
			|	Содержание.Элемент КАК СсылкаНаЭлемент,
			|	Содержание.ТипЭлемента КАК ТипЭлемента,
			|	Содержание.Наименование КАК Наименование,
			|	Содержание.ДатаИзменения КАК ДатаИзменения,
			|	Содержание.ПараметрыЗапуска КАК ПараметрыЗапуска,
			|	Содержание.КоличествоПопыток КАК КоличествоПопыток,
			|	Содержание.ПродолжительностьПопытки КАК ПродолжительностьПопытки,
			|	Содержание.ПорогВыполнения КАК ПорогВыполнения,
			|	Содержание.ДанныеИнициализации КАК ДанныеИнициализации,
			|	Содержание.ДействиеПослеИстеченияВремени КАК ДействиеПослеИстеченияВремени
			|ИЗ
			|	Справочник.СодержаниеЭлектронныхКурсов КАК Содержание
			|ГДЕ
			|	Содержание.Владелец = &ЭлектронныйКурс
			|	И Содержание.ЭтоГруппа = ЛОЖЬ
			|	И Содержание.ПометкаУдаления = ЛОЖЬ
			|	И &ОтборПоЭлементуСодержания
			|
			|УПОРЯДОЧИТЬ ПО
			|	Содержание.Код";
		
		Запрос.УстановитьПараметр("ЭлектронныйКурс", ЭлектронныйКурс);
		
		Если ЗначениеЗаполнено(ФрагментКурса) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоЭлементуСодержания", "Содержание.Ссылка = &ЭлементСодержания");
			Запрос.УстановитьПараметр("ЭлементСодержания", ФрагментКурса);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоЭлементуСодержания", "ИСТИНА");
		КонецЕсли;	
		
		ЭлементыСодержания = Запрос.Выполнить().Выгрузить();		
		
	КонецЕсли;	
		
	// Определяем дату изменения
	//
	
	ДатаИзменения = ОбновлениеИнформационнойБазыБЭО.ДатаИзмененияПоставляемыхМакетов();
	
	Если ДанныеЭлектронногоКурса.ДатаИзменения > ДатаИзменения Тогда 	
		ДатаИзменения = ДанныеЭлектронногоКурса.ДатаИзменения;
	КонецЕсли;
	
	Если ЭлементыСодержания <> Неопределено Тогда
		
		Для каждого Строка Из ЭлементыСодержания Цикл
			Если Строка.ДатаИзменения > ДатаИзменения Тогда
				ДатаИзменения = Строка.ДатаИзменения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеСтраницыПодборки <> Неопределено
		И ДанныеСтраницыПодборки.ДатаИзменения > ДатаИзменения Тогда
		
		ДатаИзменения = ДанныеСтраницыПодборки.ДатаИзменения;
		
	КонецЕсли;
	
	// Проверяем дату изменения предыдущих данных
	//
	
	Если ДатаИзмененияСуществующихДанных <> Неопределено
		И ДатаИзменения < ДатаИзмененияСуществующихДанных Тогда		
		Возврат Неопределено;		
	КонецЕсли;	
	
	// Получаем структуру курса и список ресурсов для выгрузки
	//
	
	СтруктураКурса = Новый Структура;
	СтруктураКурса.Вставить("title", ДанныеЭлектронногоКурса.Наименование);
	СтруктураКурса.Вставить("uuid", ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ИдентификаторДанныхПубликации(ЭлектронныйКурс, ФрагментКурса));
	
	РесурсыКурса = Новый Массив;
	
	// Добавляем слайды
	//
	
	МассивСлайдов = Новый Массив;
	СтруктураКурса.Вставить("slides", МассивСлайдов);
	
	// Стартовый слайд
	
	Если ДанныеЭлектронногоКурса.Свойство("СтартоваяСтраницаЭлемент") И ЗначениеЗаполнено(ДанныеЭлектронногоКурса.СтартоваяСтраницаЭлемент) Тогда
		
		ФорматированныйДокументИзБазы = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляВыгрузки(ДанныеЭлектронногоКурса.СтартоваяСтраницаЭлемент, Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text);
		ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ФорматированныйДокументИзБазы, ДанныеЭлектронногоКурса.СтартоваяСтраница.УникальныйИдентификатор(),,,,"data");
		
		Если НЕ ЭлектронноеОбучениеСлужебный.ЭтоПустойHTMLДокумент(ДанныеФорматированногоДокумента.ПредставлениеHTML) Тогда // Пустой слайд не делаем
			
			СтруктураСлайда = Новый Структура;
			СтруктураСлайда.Вставить("uuid", Строка(ЭлектронныйКурс.УникальныйИдентификатор())+ "-start");
			СтруктураСлайда.Вставить("type", "START");		
			
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("encoded", Истина);
			ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
			
			СтруктураСлайда.Вставить("text", ДанныеДокумента);
			
			Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
				ДобавитьРесурсВМассивРесурсов(ДанныеЭлектронногоКурса.СтартоваяСтраница, РесурсыКурса); 
			КонецЕсли;		
			
			МассивСлайдов.Добавить(СтруктураСлайда);
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Единичная страница подборки
	
	Если ТипЗнч(ФрагментКурса) = Тип("СправочникСсылка.СтраницыЭлементовЭлектронныхКурсов") Тогда		
		
		СтраницаПодборки = ФрагментКурса; 

		Подборка = ДанныеСтраницыПодборки.Владелец;		
		
		СтруктураПодборки = Новый Структура;
		СтруктураПодборки.Вставить("uuid", Подборка.УникальныйИдентификатор());		
		СтруктураПодборки.Вставить("elements", Новый Массив);
		
		СтруктураСлайда = Новый Структура;
		СтруктураСлайда.Вставить("uuid", Строка(Подборка.УникальныйИдентификатор()));
		СтруктураСлайда.Вставить("type", "COLLECTION");
		СтруктураСлайда.Вставить("collection", СтруктураПодборки);			
		
		Если ТипЗнч(ДанныеСтраницыПодборки.СсылкаНаЭлементКурса) = Тип("СправочникСсылка.ТестовыеВопросы") Тогда
			
			МассивВопросов = Новый Массив;
			МассивВопросов.Добавить(ДанныеСтраницыПодборки.СсылкаНаЭлементКурса);
			
			ВопросыТеста = СтруктураТестовыхВопросовДляПросмотра(МассивВопросов, РесурсыКурса);			
			
			СтруктураВопроса = ВопросыТеста[0];
			
			СтруктураЭлементаПодборки = Новый Структура;
			СтруктураЭлементаПодборки.Вставить("uuid", ФрагментКурса.УникальныйИдентификатор());
			СтруктураЭлементаПодборки.Вставить("type", "QUESTION");
			СтруктураЭлементаПодборки.Вставить("question", СтруктураВопроса);			
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Неизвестный тип фрагмента курса'");
			
		КонецЕсли;

		СтруктураПодборки.elements.Добавить(СтруктураЭлементаПодборки);				
		
		МассивСлайдов.Добавить(СтруктураСлайда);
		
	КонецЕсли;

	// Слайды элементов содержания
	
	ДеревоЭлементовРесурсаSCO = Неопределено;
	
	Если ЭлементыСодержания <> Неопределено Тогда
	
		Для каждого Строка Из ЭлементыСодержания Цикл		
			
			СтруктураСлайда = Новый Структура;
			СтруктураСлайда.Вставить("uuid", Строка(Строка.Ссылка.УникальныйИдентификатор()));		
			
			// TEXT
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Документ Тогда
				
				СтруктураСлайда.Вставить("type", "TEXT");
				
				РесурсСДокументом = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(Строка.СсылкаНаЭлемент);
				ЭлементРесурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РесурсСДокументом, "ЕдинственныйЭлемент");			
				
				Если НЕ ЗначениеЗаполнено(ЭлементРесурса) Тогда
					ВызватьИсключение НСтр("ru = 'Элемент ресурса с текстовым документом не найден'");
				КонецЕсли;
				
				ФорматированныйДокументИзБазы = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляВыгрузки(ЭлементРесурса, Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text);
				ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ФорматированныйДокументИзБазы, РесурсСДокументом.УникальныйИдентификатор(),,,,"data");
				
				ДанныеДокумента = Новый Структура;
				ДанныеДокумента.Вставить("encoded", Истина);
				ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
				
				СтруктураСлайда.Вставить("text", ДанныеДокумента);
				
				Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
					ДобавитьРесурсВМассивРесурсов(РесурсСДокументом, РесурсыКурса); 
				КонецЕсли;
				
			КонецЕсли;
			
			// WORD
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.ДокументWord Тогда
				
				СтруктураСлайда.Вставить("type", "WORD");			
				ЭлементКурсаСДокументомWord = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(Строка.СсылкаНаЭлемент);			
				СтруктураСлайда.Вставить("doc", ЭлементКурсаСДокументомWord.УникальныйИдентификатор());			
				ДобавитьРесурсВМассивРесурсов(ЭлементКурсаСДокументомWord, РесурсыКурса);  
				
			КонецЕсли;
			
			// QUIZ 
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Тест Тогда			
				
				// Получаем данные теста и вопросов
				
				ЭлектронныйТест = Строка.СсылкаНаЭлемент;
				
				ДанныеЭлектронногоТеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйТест, "ВремяТеста, КоличествоПопыток, КоличествоГруппЭлементов");
				
				СтруктураТеста = Новый Структура;			
				СложностьТеста = Новый Структура;
				
				// Добавляем тест к слайду
				
				СтруктураСлайда.Вставить("quiz", СтруктураТеста);			
				СтруктураСлайда.Вставить("type", "QUIZ");
				
				// Заполняем свойства теста
				
				СтруктураТеста.Вставить("uuid", ЭлектронныйТест.УникальныйИдентификатор());			
				СтруктураТеста.Вставить("level", СложностьТеста);
				СтруктураТеста.Вставить("countAttempts", ДанныеЭлектронногоТеста.КоличествоПопыток);
				
				// Заполняем свойства сложности
				
				СложностьТеста.Вставить("countQuestions", ДанныеЭлектронногоТеста.КоличествоГруппЭлементов);
				СложностьТеста.Вставить("timePeriod", ИзучениеЭлектронныхКурсовСлужебныйSCORM.КоличествоСекундИзДаты(ДанныеЭлектронногоТеста.ВремяТеста));
				
				// Заполняем вопросы
				
				ТаблицаВопросовТеста = Справочники.ЭлектронныеТесты.ВопросыТеста(ЭлектронныйТест);			
				МассивВопросов = ТаблицаВопросовТеста.ВыгрузитьКолонку("Ссылка");
				
				ВопросыТеста = СтруктураТестовыхВопросовДляПросмотра(МассивВопросов, РесурсыКурса);
				СтруктураТеста.Вставить("questions", ВопросыТеста);
								
			КонецЕсли;
			
					
			// VIDEO
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Видео Тогда
				
				СтруктураСлайда.Вставить("type", "VIDEO");
				
				РесурсСВидео = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(Строка.СсылкаНаЭлемент);
				
				НеобходимыеДанныеВидео = Новый Структура;
				НеобходимыеДанныеВидео.Вставить("ЭлементРесурса", "ЕдинственныйЭлемент");
				НеобходимыеДанныеВидео.Вставить("Ширина", "ЕдинственныйЭлемент.Ширина");
				НеобходимыеДанныеВидео.Вставить("Высота", "ЕдинственныйЭлемент.Высота");
				НеобходимыеДанныеВидео.Вставить("ИмяФайла", "ЕдинственныйЭлемент.ИмяФайла");
				НеобходимыеДанныеВидео.Вставить("ПроигрыватьАвтоматически", "ЕдинственныйЭлемент.ПроигрыватьАвтоматически");
				НеобходимыеДанныеВидео.Вставить("Описание", "ЕдинственныйЭлемент.Описание");
				
				ДанныеВидео = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РесурсСВидео, НеобходимыеДанныеВидео);
				
				СтруктураВидео = Новый Структура;
				СтруктураВидео.Вставить("autoplay", ДанныеВидео.ПроигрыватьАвтоматически);
				СтруктураВидео.Вставить("width", ДанныеВидео.Ширина);
				СтруктураВидео.Вставить("height", ДанныеВидео.Высота);
							
				ФорматыВидео = Новый Массив;
				
				ФорматДляВыгрузки = Справочники.ЭлементыЭлектронныхРесурсов.ФорматВидеоФайлаДляВыгрузки(ДанныеВидео.ЭлементРесурса);
				ФорматДляВыгрузки = НРег(ФорматДляВыгрузки);
				
				СтруктураФормата = Новый Структура;
				СтруктураФормата.Вставить("type", "video/" + ФорматДляВыгрузки);
				СтруктураФормата.Вставить("file", Строка(РесурсСВидео.УникальныйИдентификатор()) + "/video." + ФорматДляВыгрузки);
				
				ФорматыВидео.Добавить(СтруктураФормата);
				
				СтруктураВидео.Вставить("formats", ФорматыВидео);
				
				ОписаниеВидеоФорматированныйДокумент = ДанныеВидео.Описание.Получить();
				
				Если ОписаниеВидеоФорматированныйДокумент <> Неопределено Тогда
					
					ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ОписаниеВидеоФорматированныйДокумент, ДанныеВидео.ЭлементРесурса.УникальныйИдентификатор(), "Описание",,,"data");
					
					Если НЕ ЭлектронноеОбучениеСлужебный.ЭтоПустойHTMLДокумент(ДанныеФорматированногоДокумента.ПредставлениеHTML) Тогда
						ДанныеДокумента = Новый Структура;
						ДанныеДокумента.Вставить("encoded", Истина);
						ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
						
						СтруктураВидео.Вставить("description", ДанныеДокумента);
						
						Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
							ДобавитьРесурсВМассивРесурсов(ДанныеВидео.ЭлементРесурса, РесурсыКурса, "Описание"); 
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураСлайда.Вставить("video", СтруктураВидео);			
				
				ДобавитьРесурсВМассивРесурсов(РесурсСВидео, РесурсыКурса);  
				
			КонецЕсли;		
			
			// YOUTUBE
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.YouTube Тогда
				
				СтруктураСлайда.Вставить("type", "YOUTUBE");
				
				РесурсСВидео = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(Строка.СсылкаНаЭлемент);
				
				НеобходимыеДанныеВидео = Новый Структура;
				НеобходимыеДанныеВидео.Вставить("ЭлементРесурса", "ЕдинственныйЭлемент");
				НеобходимыеДанныеВидео.Вставить("ИдентификаторВидео", "ЕдинственныйЭлемент.ИмяФайла");
				НеобходимыеДанныеВидео.Вставить("ПроигрыватьАвтоматически", "ЕдинственныйЭлемент.ПроигрыватьАвтоматически");
				НеобходимыеДанныеВидео.Вставить("Описание", "ЕдинственныйЭлемент.Описание");
				
				ДанныеВидео = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РесурсСВидео, НеобходимыеДанныеВидео);
				
				СтруктураВидео = Новый Структура;
				СтруктураВидео.Вставить("autoplay", ДанныеВидео.ПроигрыватьАвтоматически);
				СтруктураВидео.Вставить("id", ДанныеВидео.ИдентификаторВидео);
				
				ОписаниеВидеоФорматированныйДокумент = Неопределено;
				
				Если ЗначениеЗаполнено(ДанныеВидео.Описание) Тогда
					ОписаниеВидеоФорматированныйДокумент = ДанныеВидео.Описание.Получить();
				КонецЕсли;
				
				Если ОписаниеВидеоФорматированныйДокумент <> Неопределено Тогда
					
					ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ОписаниеВидеоФорматированныйДокумент, ДанныеВидео.ЭлементРесурса.УникальныйИдентификатор(), "Описание",,,"data");
					
					Если НЕ ЭлектронноеОбучениеСлужебный.ЭтоПустойHTMLДокумент(ДанныеФорматированногоДокумента.ПредставлениеHTML) Тогда
						ДанныеДокумента = Новый Структура;
						ДанныеДокумента.Вставить("encoded", Истина);
						ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
						
						СтруктураВидео.Вставить("description", ДанныеДокумента);
						
						Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
							ДобавитьРесурсВМассивРесурсов(ДанныеВидео.ЭлементРесурса, РесурсыКурса, "Описание"); 
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураСлайда.Вставить("youtube", СтруктураВидео);			
				
				ДобавитьРесурсВМассивРесурсов(РесурсСВидео, РесурсыКурса);  
				
			КонецЕсли;				
			
			// AUDIO
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.Звук Тогда
				
				СтруктураСлайда.Вставить("type", "AUDIO");
				
				РесурсСАудио = Справочники.ТеорияЭлектронныхКурсов.ЕдинственныйЭлемент(Строка.СсылкаНаЭлемент);
				
				НеобходимыеДанныеАудио = Новый Структура;
				НеобходимыеДанныеАудио.Вставить("ЭлементРесурса", "ЕдинственныйЭлемент");
				НеобходимыеДанныеАудио.Вставить("ИмяФайла","ЕдинственныйЭлемент.ИмяФайла");
				НеобходимыеДанныеАудио.Вставить("Описание","ЕдинственныйЭлемент.Описание");
				НеобходимыеДанныеАудио.Вставить("ПроигрыватьАвтоматически","ЕдинственныйЭлемент.ПроигрыватьАвтоматически");				
				
				ДанныеАудио = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РесурсСАудио, НеобходимыеДанныеАудио);				
				ФорматАудио = НРег(ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДанныеАудио.ИмяФайла)));
				
				СтруктураАудио = Новый Структура;
				СтруктураАудио.Вставить("autoplay", ДанныеАудио.ПроигрыватьАвтоматически);
				
				ФорматыАудио = Новый Массив;
				
				СтруктураФормата = Новый Структура;
				СтруктураФормата.Вставить("type", "audio/" + ФорматАудио);
				СтруктураФормата.Вставить("file", Строка(РесурсСАудио.УникальныйИдентификатор()) + "/audio." + ФорматАудио);
				
				ФорматыАудио.Добавить(СтруктураФормата);
				
				СтруктураАудио.Вставить("formats", ФорматыАудио);
				
				
				ОписаниеАудиоФорматированныйДокумент = ДанныеАудио.Описание.Получить();
				
				Если ОписаниеАудиоФорматированныйДокумент <> Неопределено Тогда
					
					ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ОписаниеАудиоФорматированныйДокумент, ДанныеАудио.ЭлементРесурса.УникальныйИдентификатор(), "Описание",,,"data");
					
					Если НЕ ЭлектронноеОбучениеСлужебный.ЭтоПустойHTMLДокумент(ДанныеФорматированногоДокумента.ПредставлениеHTML) Тогда
						ДанныеДокумента = Новый Структура;
						ДанныеДокумента.Вставить("encoded", Истина);
						ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
						
						СтруктураАудио.Вставить("description", ДанныеДокумента);
						
						Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
							ДобавитьРесурсВМассивРесурсов(ДанныеАудио.ЭлементРесурса, РесурсыКурса, "Описание"); 
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;				
				
				СтруктураСлайда.Вставить("audio", СтруктураАудио);			
				
				ДобавитьРесурсВМассивРесурсов(РесурсСАудио, РесурсыКурса);  
				
			КонецЕсли;				
			
			// IMAGE
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.СлайдПрезентации Тогда
				
				СтруктураСлайда.Вставить("type", "IMAGE");
				
				РесурсСКартинками = ДанныеЭлектронногоКурса.Презентация;
				
				СтруктураКартинки = Новый Структура;
				СтруктураКартинки.Вставить("path", Строка(РесурсСКартинками.УникальныйИдентификатор()) + "/" + Строка.ПараметрыЗапуска);
				
				СтруктураСлайда.Вставить("image", СтруктураКартинки);
				
				ДобавитьРесурсВМассивРесурсов(РесурсСКартинками, РесурсыКурса);
				
			КонецЕсли;
			
			// SCO
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.SCO Тогда
				
				СтруктураСлайда.Вставить("type", "SCO");
				
				РесурсSCO = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СсылкаНаЭлемент, "Владелец");
				
				// ДеревоЭлементовРесурсаSCO - это переменная выше, в которой запоминается дерево ресурса SCO,
				// так как он один на весь курс.
				
				ПутьКЭлементу = Справочники.ЭлектронныеРесурсы.ОтносительныйПутьКЭлементуРесурса(Строка.СсылкаНаЭлемент, ДеревоЭлементовРесурсаSCO);
				
				СтруктураSCO = Новый Структура;
				СтруктураSCO.Вставить("path", ПутьКЭлементу);
				СтруктураSCO.Вставить("parameters", Строка.ПараметрыЗапуска);
				СтруктураSCO.Вставить("attemptLimit", Строка.КоличествоПопыток);
				СтруктураSCO.Вставить("limitConditions", Строка.ПродолжительностьПопытки);
				СтруктураSCO.Вставить("completionThreshold", Строка.ПорогВыполнения);
				СтруктураSCO.Вставить("dataFromLMS", Строка.ДанныеИнициализации);
				СтруктураSCO.Вставить("timeLimitAction", Перечисления.ДействияПослеИстеченияВремениВыполненияОбъектаSCORM.ЗначениеSCORM(Строка.ДействиеПослеИстеченияВремени));
				
				СтруктураСлайда.Вставить("sco", СтруктураSCO);

				ДобавитьРесурсВМассивРесурсов(РесурсSCO, РесурсыКурса);
				
			КонецЕсли;			
			
			// HTML
			
			Если Строка.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.HTML Тогда
				
				СтруктураСлайда.Вставить("type", "HTML");
				
				РесурсHTML = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СсылкаНаЭлемент, "Владелец");
				
				ПутьКЭлементу = Справочники.ЭлектронныеРесурсы.ОтносительныйПутьКЭлементуРесурса(Строка.СсылкаНаЭлемент);
				
				СтруктураHTML = Новый Структура;
				СтруктураHTML.Вставить("path", ПутьКЭлементу);
				
				СтруктураСлайда.Вставить("html", СтруктураHTML);

				ДобавитьРесурсВМассивРесурсов(РесурсHTML, РесурсыКурса);				
				
			КонецЕсли;			
			
			
			МассивСлайдов.Добавить(СтруктураСлайда);
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Финальный слайд
	
	Если ДанныеЭлектронногоКурса.Свойство("ФинальнаяСтраницаЭлемент") И ЗначениеЗаполнено(ДанныеЭлектронногоКурса.ФинальнаяСтраницаЭлемент) Тогда
		
		ФорматированныйДокументИзБазы = Справочники.ЭлементыЭлектронныхРесурсов.ДанныеЭлементаДляВыгрузки(ДанныеЭлектронногоКурса.ФинальнаяСтраницаЭлемент, Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text);
		ДанныеФорматированногоДокумента = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ФорматированныйДокументИзБазы, ДанныеЭлектронногоКурса.ФинальнаяСтраница.УникальныйИдентификатор(),,,,"data");
		
		Если НЕ ЭлектронноеОбучениеСлужебный.ЭтоПустойHTMLДокумент(ДанныеФорматированногоДокумента.ПредставлениеHTML) Тогда // Пустой слайд не делаем
			
			СтруктураСлайда = Новый Структура;
			СтруктураСлайда.Вставить("uuid", Строка(ЭлектронныйКурс.УникальныйИдентификатор())+ "-final");
			СтруктураСлайда.Вставить("type", "FINAL");		
			
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("encoded", Истина);
			ДанныеДокумента.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокумента.ПредставлениеHTML));
			
			СтруктураСлайда.Вставить("text", ДанныеДокумента);
			
			Если ДанныеФорматированногоДокумента.ЕстьВложения Тогда
				ДобавитьРесурсВМассивРесурсов(ДанныеЭлектронногоКурса.ФинальнаяСтраница, РесурсыКурса); 
			КонецЕсли;		
			
			МассивСлайдов.Добавить(СтруктураСлайда);
			
		КонецЕсли;
			
	КонецЕсли;
	
	// Формируем результат для возврата
	//

	ДанныеДляВозврата = ПустаяСтруктураДанныхПубликации();	
	ДанныеДляВозврата.СтруктураКурса = "var courseData = " + ЭлектронноеОбучениеСлужебный.ДанныеВJSON(СтруктураКурса) + ";";	
	ДанныеДляВозврата.Ресурсы = Новый ФиксированныйМассив(РесурсыКурса);
	ДанныеДляВозврата.ДатаИзменения = ДатаИзменения;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеДляВозврата);
	
КонецФункции

// Возвращает пустую структуру данных курса, которая используется для его просмотра и публикации.
//
// Возвращаемое значение:
//  Структура - данные курса.
//
Функция ПустаяСтруктураДанныхПубликации() Экспорт
	Возврат Новый Структура("СтруктураКурса, Ресурсы, ДатаИзменения");
КонецФункции

// Возвращает данные публикации тестовых вопросов.
// Данные вопросов могут быть использованы в тестах и подборках.
//
// Параметры:
//   МассивВопросов - Массив - массив элементов типа СправочникСсылка.ТестовыеВопросы.
//   РесурсыКурса  - Массив - будет заполнен ресурсами вопросов.
//
// Возвращаемое значение:
//  Массив - данные для публикации вопросов.
//
Функция СтруктураТестовыхВопросовДляПросмотра(МассивВопросов, РесурсыКурса)
	
	Вопросы = Новый Массив;
	
	ДанныеВопросов = Справочники.ТестовыеВопросы.ДанныеВопросаДляПросмотра(МассивВопросов);
			
	Для каждого СтрокаТВ Из ДанныеВопросов.Вопросы Цикл
		
		ФорматированныйДокументЗадания = СтрокаТВ.Задание.Получить();
		ДанныеФорматированногоДокументаЗадания = ЭлектронноеОбучениеСлужебный.ПредставлениеФорматированногоДокументаДляВыгрузкиHTML(ФорматированныйДокументЗадания, СтрокаТВ.Ссылка.УникальныйИдентификатор(),,,,"data");
		
		Если ДанныеФорматированногоДокументаЗадания.ЕстьВложения Тогда
			ДобавитьРесурсВМассивРесурсов(СтрокаТВ.Ссылка, РесурсыКурса);
		КонецЕсли;
		
		ЗаданиеВопроса = Новый Структура;
		ЗаданиеВопроса.Вставить("encoded", Истина);
		ЗаданиеВопроса.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(ДанныеФорматированногоДокументаЗадания.ПредставлениеHTML));
		
		СтруктураВопроса = Новый Структура;
	    СтруктураВопроса.Вставить("uuid", СтрокаТВ.Ссылка.УникальныйИдентификатор());
		СтруктураВопроса.Вставить("type", Перечисления.ТипыТестовыхВопросов.ТипВопросаВСтроку(СтрокаТВ.ТипВопроса));
		СтруктураВопроса.Вставить("task", ЗаданиеВопроса);
						
		ВариантыВопроса = ДанныеВопросов.Варианты.НайтиСтроки(Новый Структура("Вопрос", СтрокаТВ.Ссылка));
		СтруктураВариантов = Новый Массив;
		
		Для каждого СтрокаТВВ Из ВариантыВопроса Цикл
			
			ТекстВарианта = Новый Структура;
			ТекстВарианта.Вставить("encoded", Истина);
			ТекстВарианта.Вставить("data", ЭлектронноеОбучениеСлужебный.Base64ИзСтроки(СтрокаТВВ.ТекстВарианта.Получить()));
			
			СтруктураВарианта = Новый Структура;
			СтруктураВарианта.Вставить("uuid", СтрокаТВВ.Ссылка.УникальныйИдентификатор());
			СтруктураВарианта.Вставить("text", ТекстВарианта);
			СтруктураВарианта.Вставить("correct", СтрокаТВВ.Верный);
			
			СтруктураВариантов.Добавить(СтруктураВарианта);
			
		КонецЦикла;
		
		СтруктураВопроса.Вставить("variants", СтруктураВариантов);

		Вопросы.Добавить(СтруктураВопроса);
		
	КонецЦикла;
	
	Возврат Вопросы;
	
КонецФункции

// Получает пустую структуру ресурса с файлами курса.
// Ресурс - это каталог с файлами элемента курса.
// Ресурсы выгружаются в локальный кэш на клиенте или на сервере.
// Структура используется для проверки необходимости выгрузки данных,
// и не содержит данные самого ресурса.
//
// В качестве ресурса могут выступать не только элементы справочника,
// ЭлектронныеРесурсы, но и, например, элементы, которые
// содержат форматированный документ с картинками.
//
Функция ПустаяСтруктураДанныхРесурса(Ссылка, КодДанных = "") Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда
	
		ДанныеРесурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДатаИзменения, ПодключитьAPI, SCO");
		
		ДанныеРесурса.Вставить("Идентификатор", Строка(Ссылка.УникальныйИдентификатор()));
		
		Если ТипЗнч(ДанныеРесурса.ПодключитьAPI) <> Тип("Булево") Тогда
			ДанныеРесурса.ПодключитьAPI = Ложь;
		КонецЕсли;		
		
		Если ДанныеРесурса.ПодключитьAPI Тогда
			
			// Устанавливаем дату изменения для такого ресурса не меньше даты изменения шаблонов,
			// так как файл он может содержать измененные скрипты.
			
			ДатаИзмененияШаблонов = ОбновлениеИнформационнойБазыБЭО.ДатаИзмененияПоставляемыхМакетов();
			
			Если ДанныеРесурса.ДатаИзменения < ДатаИзмененияШаблонов Тогда
				ДанныеРесурса.ДатаИзменения = ДатаИзмененияШаблонов;
			КонецЕсли;
			
		КонецЕсли;			
				
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Ссылка)) Тогда
		
		ДанныеРесурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДатаИзменения");
		
		ДанныеРесурса.Вставить("ПодключитьAPI", Ложь);
		ДанныеРесурса.Вставить("Идентификатор", Строка(Ссылка.УникальныйИдентификатор()));
		ДанныеРесурса.Вставить("SCO", Ложь);
	

	Иначе
		
		ДанныеРесурса = Новый Структура();
		ДанныеРесурса.Вставить("ДатаИзменения", ОбновлениеИнформационнойБазыБЭО.ДатаИзмененияПоставляемыхМакетов());
		ДанныеРесурса.Вставить("ПодключитьAPI", Ложь);
		ДанныеРесурса.Вставить("Идентификатор", "");
		ДанныеРесурса.Вставить("SCO", Ложь);

		
	КонецЕсли;
	
	СтруктураРесурса = Новый Структура();
	СтруктураРесурса.Вставить("Ссылка", Ссылка);
	СтруктураРесурса.Вставить("Идентификатор", ДанныеРесурса.Идентификатор);
	СтруктураРесурса.Вставить("ДатаИзменения", ДанныеРесурса.ДатаИзменения);
	СтруктураРесурса.Вставить("ПодключитьAPI", ДанныеРесурса.ПодключитьAPI);
	СтруктураРесурса.Вставить("КодДанных", КодДанных);
	СтруктураРесурса.Вставить("Постфикс", ПостфиксРесурсаДляВыгрузки(КодДанных));
	СтруктураРесурса.Вставить("Размер", 0); // Размер в МБ
	СтруктураРесурса.Вставить("SCO", ДанныеРесурса.SCO); // Это SCO ресурс


	Возврат СтруктураРесурса;
	
КонецФункции

// Добавляет ресурс (описание ресурса) в массив, если он не был добавлен в него ранее.
//
Процедура ДобавитьРесурсВМассивРесурсов(Знач Ресурс, МассивРесурсов, КодДанных = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Ресурс) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.ЭлектронныеРесурсы") Тогда		
		ИдентичныйРесурс  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ресурс, "ИдентичныйРесурс");		
		ДобавляемыйРесурс = ?(ЗначениеЗаполнено(ИдентичныйРесурс), ИдентичныйРесурс, Ресурс);		
	Иначе		
		ДобавляемыйРесурс = Ресурс;		
	КонецЕсли;
	
	Для каждого Элемент Из МассивРесурсов Цикл
		
		Если Элемент.Ссылка = ДобавляемыйРесурс И Элемент.КодДанных = КодДанных Тогда
			Возврат; // Ресурс уже добавлен			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРесурса = ПустаяСтруктураДанныхРесурса(ДобавляемыйРесурс, КодДанных);
	
	МассивРесурсов.Добавить(СтруктураРесурса);	
			
КонецПроцедуры

// Получает уникальный постфикс ресурса на основе кода данных.
// Используется в том случае, когда "склеиваются" в одном объекте,
// например в вопросе, различные форматированные документы и требуется
// разнести ресурсы из разных документов в разные каталоги.
//
Функция ПостфиксРесурсаДляВыгрузки(КодДанных) Экспорт
	
	Если ЗначениеЗаполнено(КодДанных) Тогда
		Возврат "_" + ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(КодСимвола(КодДанных, 1))+Строка(СтрДлина(КодДанных));	
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает данные макета электронного курса.
//
// Возвращаемое значение:
//  ДвоичныеДанные - архив с макетом.
//
Функция МакетЭлектронногоКурса() Экспорт
	
	// Определяем язык
	
	ЯзыкИнтерфейса = РегистрыСведений.НастройкиЭлектронныхКурсов.Значение("ЯзыкИнтерфейса");
	
	Если НЕ ЗначениеЗаполнено(ЯзыкИнтерфейса) Тогда
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		КодОсновногоЯзыка = КодОсновногоЯзыка + ВРег(КодОсновногоЯзыка);
		
		ЯзыкИнтерфейсаОбъектМетаданных = Метаданные.Перечисления.ЯзыкиИнтерфейсаЭлектронныхКурсов.ЗначенияПеречисления.Найти(КодОсновногоЯзыка);
		
		Если ЯзыкИнтерфейсаОбъектМетаданных <> Неопределено Тогда
			ЯзыкИнтерфейса = Перечисления.ЯзыкиИнтерфейсаЭлектронныхКурсов[ЯзыкИнтерфейсаОбъектМетаданных.Имя];
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЯзыкИнтерфейса) Тогда
		ЯзыкИнтерфейса = Перечисления.ЯзыкиИнтерфейсаЭлектронныхКурсов.ruRU;
	КонецЕсли;
	
	// Определяем тему
	
	ТемаОформления = РегистрыСведений.НастройкиЭлектронныхКурсов.Значение("ТемаОформления");
	
	Если НЕ ЗначениеЗаполнено(ТемаОформления) Тогда
		ТемаОформления = Перечисления.ТемыОформленияЭлектронныхКурсов.Облако;
	КонецЕсли;
	
	// Получаем макет
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыЭлектронныхКурсов.Макет КАК Макет
		|ИЗ
		|	РегистрСведений.МакетыЭлектронныхКурсов КАК МакетыЭлектронныхКурсов
		|ГДЕ
		|	МакетыЭлектронныхКурсов.Язык = &Язык
		|	И МакетыЭлектронныхКурсов.Тема = &Тема";
	
	Запрос.УстановитьПараметр("Тема", ТемаОформления);
	Запрос.УстановитьПараметр("Язык", ЯзыкИнтерфейса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Макет электронного курса не найден'");
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Макет.Получить();	
	
КонецФункции

#КонецОбласти

#Область Изучение

Функция ДанныеОбИзученииЭлектронногоКурса(Знач ИзучениеЭлектронногоКурса = Неопределено, Знач ЭлектронныйКурс = Неопределено, Знач Учащийся = Неопределено, Знач Контекст = Неопределено) Экспорт
			
	УстановитьПривилегированныйРежим(Истина);	
	
	Если ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда
		
		ДанныеИзучения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИзучениеЭлектронногоКурса, "ЭлектронныйКурс, Учащийся, Контекст");
		
		ЭлектронныйКурс = ДанныеИзучения.ЭлектронныйКурс;
		Учащийся = ДанныеИзучения.Учащийся;
		Контекст = ДанныеИзучения.Контекст;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзученныеЭлектронныеКурсы.Завершено КАК Завершено,
		|	ИзученныеЭлектронныеКурсы.Результат КАК Результат,
		|	ИзученныеЭлектронныеКурсы.ИзученоВПроцентах КАК ИзученоВПроцентах,
		|	ИзученныеЭлектронныеКурсы.ПроверяетсяПреподавателем КАК ПроверяетсяПреподавателем,
		|	ИзученныеЭлектронныеКурсы.ПроверенПреподавателем КАК ПроверенПреподавателем,
		|	ИзученныеЭлектронныеКурсы.Регистратор КАК ИзучениеЭлектронногоКурса
		|ИЗ
		|	РегистрСведений.ИзученныеЭлектронныеКурсы КАК ИзученныеЭлектронныеКурсы
		|ГДЕ
		|	ИзученныеЭлектронныеКурсы.ЭлектронныйКурс = &ЭлектронныйКурс
		|	И ИзученныеЭлектронныеКурсы.Учащийся = &Учащийся
		|	И ИзученныеЭлектронныеКурсы.Контекст = &Контекст";
	
	Запрос.УстановитьПараметр("Контекст", Контекст);
	Запрос.УстановитьПараметр("Учащийся", Учащийся);
	Запрос.УстановитьПараметр("ЭлектронныйКурс", ЭлектронныйКурс);
	
	РезультатЗапроса = Запрос.Выполнить();			
	
	ДанныеОбИзучении = Новый Структура();
	
	ДанныеОбИзучении.Вставить("Начато", Ложь);
	ДанныеОбИзучении.Вставить("Завершено", Ложь);
	ДанныеОбИзучении.Вставить("ИзученоВПроцентах", 0);
	ДанныеОбИзучении.Вставить("ЗавершеноВПроцентах", 0);  // Для совместимости
	ДанныеОбИзучении.Вставить("Результат", 0);
	ДанныеОбИзучении.Вставить("Балл", 0);   // Для совместимости
	ДанныеОбИзучении.Вставить("ПроверяетсяПреподавателем", Ложь);
	ДанныеОбИзучении.Вставить("ПроверенПреподавателем", Ложь);
	ДанныеОбИзучении.Вставить("ИзучениеЭлектронногоКурса", Неопределено);	
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеОбИзучении;
	КонецЕсли;			
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	ВыборкаДетальныеЗаписи.Следующий();	
	
	ДанныеОбИзучении.Вставить("Начато", Истина);
	ДанныеОбИзучении.Вставить("Завершено", ВыборкаДетальныеЗаписи.Завершено);
	ДанныеОбИзучении.Вставить("ИзученоВПроцентах", ВыборкаДетальныеЗаписи.ИзученоВПроцентах);
	ДанныеОбИзучении.Вставить("ЗавершеноВПроцентах", ВыборкаДетальныеЗаписи.ИзученоВПроцентах); // Для совместимости
	ДанныеОбИзучении.Вставить("Результат", ВыборкаДетальныеЗаписи.Результат);
	ДанныеОбИзучении.Вставить("Балл", ВыборкаДетальныеЗаписи.Результат);   // Для совместимости
	ДанныеОбИзучении.Вставить("ПроверяетсяПреподавателем", ВыборкаДетальныеЗаписи.ПроверяетсяПреподавателем);
	ДанныеОбИзучении.Вставить("ПроверенПреподавателем", ВыборкаДетальныеЗаписи.ПроверенПреподавателем);
	ДанныеОбИзучении.Вставить("ИзучениеЭлектронногоКурса", ВыборкаДетальныеЗаписи.ИзучениеЭлектронногоКурса);
	
	Возврат ДанныеОбИзучении;
	
КонецФункции

Процедура СохранитьВБазуДанныеИзучения(Знач ИзучениеЭлектронногоКурса, Знач ДанныеИзучения, Знач ДатаНачалаПопыткиИзучения, Знач ВыполняетсяЗакрытиеФормы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИзучениеЭлектронногоКурса) Тогда		
		Возврат;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзучениеЭлектронногоКурсаОбъект = ИзучениеЭлектронногоКурса.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(ДанныеИзучения) Тогда
		ИзучениеЭлектронногоКурсаОбъект.ДанныеИзучения = Новый ХранилищеЗначения(ДанныеИзучения);
	КонецЕсли;
	
	ПопыткаИзученияСтрока = ИзучениеЭлектронногоКурсаОбъект.ПопыткиИзучения.Найти(ДатаНачалаПопыткиИзучения, "ДатаНачала");
	
	Если ПопыткаИзученияСтрока = Неопределено Тогда
		ПопыткаИзученияСтрока = ИзучениеЭлектронногоКурсаОбъект.ПопыткиИзучения.Добавить();
		ПопыткаИзученияСтрока.ДатаНачала = ДатаНачалаПопыткиИзучения;		
	КонецЕсли;
	
	ПопыткаИзученияСтрока.ДанныеПопытки = ИзучениеЭлектронногоКурсаОбъект.ДанныеИзучения; // Дублируем данные
	
	Если ВыполняетсяЗакрытиеФормы И НЕ ИзучениеЭлектронногоКурсаОбъект.ПометкаУдаления Тогда
		
		Если ПопыткаИзученияСтрока = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Попытка изучения не найдена'");
		Иначе
			ПопыткаИзученияСтрока.ДатаОкончания = ТекущаяДатаСеанса();
		КонецЕсли;		
		
		ИзучениеЭлектронногоКурсаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Иначе
		
		ИзучениеЭлектронногоКурсаОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Вызываем событие ПриЗакрытииЭлектронногоКурса переопределяемого модуля
	
	Если ВыполняетсяЗакрытиеФормы Тогда
		
		ЭлектронныйКурс = ИзучениеЭлектронногоКурсаОбъект.ЭлектронныйКурс;
		Учащийся = ИзучениеЭлектронногоКурсаОбъект.Учащийся;
		Контекст = ИзучениеЭлектронногоКурсаОбъект.Контекст;
		
		ДанныеОбИзучении = ИзучениеЭлектронныхКурсовСлужебный.ДанныеОбИзученииЭлектронногоКурса(,ЭлектронныйКурс, Учащийся, Контекст);
		
		ИзучениеЭлектронныхКурсовПереопределяемый.ПриЗакрытииФормыЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, ДанныеОбИзучении);
		
		Если ДанныеОбИзучении.Завершено Тогда
			ИзучениеЭлектронныхКурсовПереопределяемый.ПослеИзученияЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, ДанныеОбИзучении);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
