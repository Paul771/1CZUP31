#Область ПрограммныйИнтерфейс

// Возвращает структуру настроек резервов отпусков
//
// Параметры:
//   Организация - Спр.Организации.СправочникСсылка - Организация.
//   Период - Дата - Период дат.
//
// Возвращаемое значение:
//  Структура - описанная в методе
//
Функция НастройкиРезервовОтпусков(Организация, Период) Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ФормироватьРезервОтпусковБУ", Ложь);
	Настройки.Вставить("ФормироватьРезервОтпусковНУ", Ложь);
	Настройки.Вставить("МетодНачисленияРезерваОтпусков", Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод);
	Настройки.Вставить("НормативОтчисленийВРезервОтпусков", 0);
	Настройки.Вставить("ПредельнаяВеличинаОтчисленийВРезервОтпусков", 0);
	Настройки.Вставить("ОпределятьИзлишкиЕжемесячно", Ложь);
	
	Если Не ЗначениеЗаполнено(Период) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	НастройкиРасчетаРезервовОтпусков = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(Период, Новый Структура("Организация", Организация));
	Если НастройкиРасчетаРезервовОтпусков.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиРасчетаРезервовОтпусков[0]);
	КонецЕсли;
	
	РезервОтпусковПереопределяемый.ЗаполнитьНастройкиРезервовОтпусков(Настройки, Организация, Период);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает ссылку на заполненный Док.НачислениеОценочныхОбязательствПоОтпускам.
// Если для заданного месяца и организации существует несколько 
// документов, возвращается хронологически первый.
// Если необходимого документа нет, он создается и записывается.
// В любом случае выполняется заполнение документа.
//
// Параметры:
//	ПериодРегистрации - Дата - Период регистрации.
//	Организация - СправочникСсылка.Организации - Ссылка на организацию.
//
// Возвращаемое значение - ссылка на документ.
//
Функция ДокументНачислениеОценочныхОбязательствПоОтпускам(ПериодРегистрации, Организация) Экспорт
	
	ДокументСсылка = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеОценочныхОбязательствПоОтпускам.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОценочныхОбязательствПоОтпускам
	|ГДЕ
	|	НачислениеОценочныхОбязательствПоОтпускам.ПериодРегистрации = &ПериодРегистрации
	|	И НачислениеОценочныхОбязательствПоОтпускам.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеОценочныхОбязательствПоОтпускам.Дата,
	|	НачислениеОценочныхОбязательствПоОтпускам.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.ПериодРегистрации = ПериодРегистрации;
		ДокументОбъект.Организация = Организация;
	КонецЕсли;
	
	ОписаниеДокумента = Новый Структура("Ссылка,
		|Организация, Дата, ПериодРегистрации,
		|КорректировкаОбязательств, ДоляРасходов");
	ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ДокументОбъект);
	
	ОписаниеДокумента.Вставить("РасчетРезерваОтпусков",               ДокументОбъект.РасчетРезерваОтпусков.ВыгрузитьКолонки());
	ОписаниеДокумента.Вставить("ОценочныеОбязательства",              ДокументОбъект.ОценочныеОбязательства.ВыгрузитьКолонки());
	ОписаниеДокумента.Вставить("ФизическиеЛица",                      ДокументОбъект.ФизическиеЛица.ВыгрузитьКолонки());
	ОписаниеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.ВыгрузитьКолонки());
	
	ЗаполнитьДокументНачислениеОценочныхОбязательствПоОтпускам(ОписаниеДокумента);
	
	ДокументОбъект.РасчетРезерваОтпусков.Загрузить(ОписаниеДокумента.РасчетРезерваОтпусков);
	ДокументОбъект.ОценочныеОбязательства.Загрузить(ОписаниеДокумента.ОценочныеОбязательства);
	ДокументОбъект.ФизическиеЛица.Загрузить(ОписаниеДокумента.ФизическиеЛица);
	ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(ОписаниеДокумента.ОценочныеОбязательстваПоСотрудникам);
	ДокументОбъект.ДоляРасходов = ОписаниеДокумента.ДоляРасходов;
	
	ДокументОбъект.Записать();
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Возврат ДокументСсылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеОценочныхОбязательствПоОтпускам",		"ПериодРегистрации",	"БухгалтерскийУчетЗарплаты", "Организация");
	
КонецПроцедуры

// Процедура обеспечивает сбор сведений о хранении данных относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// Документ.НачислениеОценочныхОбязательствПоОтпускам.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	НовыеСведения.ПоляРегистрации	= "РасчетРезерваОтпусков.Сотрудник";
	НовыеСведения.ПоляДоступа		= "РасчетРезерваОтпусков.ОстатокОтпуска";
	НовыеСведения.ПоляДоступа		= "РасчетРезерваОтпусков.ОтпускАвансом";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	// Документ.НачислениеОценочныхОбязательствПоОтпускам.
	// Табличная часть РасчетРезерваОтпусков.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	НовыеСведения.ПоляРегистрации	= "РасчетРезерваОтпусков.Сотрудник";
	НовыеСведения.ПоляДоступа		= "РасчетРезерваОтпусков.ФОТ,РасчетРезерваОтпусков.СтраховыеВзносы,
	|РасчетРезерваОтпусков.СуммаРезерва,РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносов,РасчетРезерваОтпусков.СреднийЗаработок,
	|РасчетРезерваОтпусков.СуммаРезерваНУ,РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносовНУ,РасчетРезерваОтпусков.СуммаРезерваНакоплено,
	|РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносовНакоплено,РасчетРезерваОтпусков.СуммаРезерваНакопленоНУ,
	|РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносовНакопленоНУ,РасчетРезерваОтпусков.СуммаРезерваИсчислено,
	|РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносовИсчислено,РасчетРезерваОтпусков.СуммаРезерваИсчисленоНУ,
	|РасчетРезерваОтпусков.СуммаРезерваСтраховыхВзносовИсчисленоНУ,РасчетРезерваОтпусков.ФССНесчастныеСлучаи,
	|РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаи,РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаиНУ,
	|РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаиНакоплено,РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
	|РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаиИсчислено,РасчетРезерваОтпусков.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// Табличная часть ОценочныеОбязательстваПоСотрудникам.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.НачислениеОценочныхОбязательствПоОтпускам";
	НовыеСведения.ПоляРегистрации	= "ОценочныеОбязательстваПоСотрудникам.Сотрудник";
	НовыеСведения.ПоляДоступа		= "ОценочныеОбязательстваПоСотрудникам.Подразделение,ОценочныеОбязательстваПоСотрудникам.СпособОтраженияЗарплатыВБухучете,
	|ОценочныеОбязательстваПоСотрудникам.СтатьяФинансирования,ОценочныеОбязательстваПоСотрудникам.ОблагаетсяЕНВД,
	|ОценочныеОбязательстваПоСотрудникам.СуммаРезерва,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваСтраховыхВзносов,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваФССНесчастныеСлучаи,
	|ОценочныеОбязательстваПоСотрудникам.СуммаРезерваНУ,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваСтраховыхВзносовНУ,ОценочныеОбязательстваПоСотрудникам.СуммаРезерваФССНесчастныеСлучаиНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// РегистрСведений.РасчетРезерваОтпусков.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.РасчетРезерваОтпусков";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "ОстатокОтпуска";
	НовыеСведения.ПоляДоступа		= "ОтпускАвансом";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	// РегистрСведений.РасчетРезерваОтпусков.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.РасчетРезерваОтпусков";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "ФОТ,СтраховыеВзносы,СуммаРезерва,СуммаРезерваСтраховыхВзносов,СреднийЗаработок,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваНакоплено,СуммаРезерваСтраховыхВзносовНакоплено,СуммаРезерваНакопленоНУ,
	|СуммаРезерваСтраховыхВзносовНакопленоНУ,СуммаРезерваИсчислено,СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваИсчисленоНУ,
	|СуммаРезерваСтраховыхВзносовИсчисленоНУ,ФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ,
	|СуммаРезерваФССНесчастныеСлучаиНакоплено,СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,СуммаРезерваФССНесчастныеСлучаиИсчислено,
	|СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	// РегистрНакопления.ОценочныеОбязательстваПоСотрудникам
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ОценочныеОбязательстваПоСотрудникам";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СтатьяФинансирования,СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ";
	НовыеСведения.ПоляДоступа = СтрЗаменить(НовыеСведения.ПоляДоступа, Символы.ПС, "");
	НовыеСведения.ОбластьДанных		= "Доходы";

КонецПроцедуры

// Списывает расходы по оплате отпуска за счет оценочных обязательств
//
// Параметры:
//			Организация - СправочникСсылка.Организации - Организация.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			ДокументСсылка - ДокументСсылка - ДокументСсылка.
//			ТаблицаНачисленнаяЗарплатаИВзносы - ТаблицаЗначений - из ОтражениеЗарплатыВБухучете.ДанныеДляОтраженияЗарплатыВБухучете.
//			НачисленныеОтпуска - ТаблицаЗначений - из ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленныеОтпуска().
//			КолонкиСуммирования - Массив - Имена колонок для суммирования значений.
//
Процедура СписатьРасходыПоОплатеОтпускаЗаСчетОценочныхОбязательств(Организация, ПериодРегистрации, ДокументСсылка, ТаблицаНачисленнаяЗарплатаИВзносы, НачисленныеОтпуска, КолонкиСуммирования) Экспорт

	НастройкиРезервовОтпусков = НастройкиРезервовОтпусков(Организация, ПериодРегистрации);
	Если Не НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ Тогда
		Возврат;
	КонецЕсли;
	
	// отберем из таблицы строки отпусков и компенсации отпуска
	ТаблицаНачисленнаяЗарплатаИВзносы.Индексы.Добавить("ВидОперации");
	
	Отбор = Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
	ТаблицаОтпусков = ТаблицаНачисленнаяЗарплатаИВзносы.Скопировать(Отбор);
	
	Отбор = Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска);
	ТаблицаКомпенсаций = ТаблицаНачисленнаяЗарплатаИВзносы.Скопировать(Отбор);
	
	ТаблицаНачисленнаяЗарплатаИВзносы.Индексы.Удалить(0);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаКомпенсаций, ТаблицаОтпусков);
	
	Если ТаблицаОтпусков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиСуммированияСтрока = СтрСоединить(КолонкиСуммирования, ", ");
	ТаблицаОтпусков.Свернуть("Сотрудник, СтатьяФинансирования", КолонкиСуммированияСтрока);
	Сотрудники = ТаблицаОтпусков.ВыгрузитьКолонку("Сотрудник");
	
	ГруппыОбязательств = Новый Структура("Начисления, СтраховыеВзносы, ВзносыФСС_НС");
	
	ГруппыОбязательств.Начисления = Новый Массив;
	ГруппыОбязательств.Начисления.Добавить("Сумма");
	
	ГруппыОбязательств.ВзносыФСС_НС = Новый Массив;
	ГруппыОбязательств.ВзносыФСС_НС.Добавить("ФССНесчастныеСлучаи");
	
	КолонкиВзносов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(КолонкиСуммирования);
	ИндексЭлемента = КолонкиВзносов.Найти("Сумма");   
	КолонкиВзносов.Удалить(ИндексЭлемента);
	ИндексЭлемента = КолонкиВзносов.Найти("ФССНесчастныеСлучаи"); 
	КолонкиВзносов.Удалить(ИндексЭлемента);
	ГруппыОбязательств.СтраховыеВзносы = КолонкиВзносов;
	
	НоваяТаблицаОтпусков = ТаблицаНачисленнаяЗарплатаИВзносы.СкопироватьКолонки();
	КолонкиГруппировок = Новый Массив;
	Для каждого КолонкаТЗ Из НоваяТаблицаОтпусков.Колонки Цикл
		Если КолонкиСуммирования.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиКопированияСтрока = СтрСоединить(КолонкиГруппировок, ", ");
	
	НоваяТаблицаОтпусков.Колонки.Добавить("СтрокаОбязательств", Новый ОписаниеТипов("Булево"));
	НоваяТаблицаОтпусков.Колонки.Добавить("СтрокаКорректировки", Новый ОписаниеТипов("Булево"));
	КолонкиГруппировок.Добавить("СтрокаОбязательств");
	КолонкиГруппировок.Добавить("СтрокаКорректировки");
	КолонкиГруппировокСтрока = СтрСоединить(КолонкиГруппировок, ", ");
	
	НакопленныеОценочныеОбязательства = НакопленныеОценочныеОбязательства(Организация, ПериодРегистрации, ДокументСсылка, Сотрудники);
	
	Отбор = Новый Структура("Сотрудник, СтатьяФинансирования");
	НакопленныеОценочныеОбязательства.Индексы.Добавить("Сотрудник,СтатьяФинансирования");
	
	ОтборОсновнойТаблицы = Новый Структура("Сотрудник,ВидОперации,СтатьяФинансирования");
	ТаблицаНачисленнаяЗарплатаИВзносы.Индексы.Добавить("Сотрудник,СтатьяФинансирования,ВидОперации");
	
	ФормироватьРезервОтпусковНУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	
	Для каждого СтрокаТЗ Из ТаблицаОтпусков Цикл
		
		СуммаВзносовПоСтрокеРасчетная = 0;
		СуммаВзносовПоСтроке = 0;
		Для каждого КолонкаТЗ Из ТаблицаОтпусков.Колонки Цикл
			Если КолонкиВзносов.Найти(КолонкаТЗ.Имя) <> Неопределено Тогда
				СуммаВзносовПоСтроке = СуммаВзносовПоСтроке + СтрокаТЗ[КолонкаТЗ.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Отбор.Сотрудник            = СтрокаТЗ.Сотрудник;
		Отбор.СтатьяФинансирования = СтрокаТЗ.СтатьяФинансирования;
		ОценочныеОбязательстваСотрудника = НакопленныеОценочныеОбязательства.Скопировать(Отбор);
		
		ТаблицаСтатейФинансирования = ОценочныеОбязательстваСотрудника.Скопировать();
		ТаблицаСтатейФинансирования.Свернуть("СтатьяФинансирования", "Сумма, СтраховыеВзносы, ФССНесчастныеСлучаи");
		
		ОтборОсновнойТаблицы.Сотрудник            = СтрокаТЗ.Сотрудник;
		ОтборОсновнойТаблицы.СтатьяФинансирования = СтрокаТЗ.СтатьяФинансирования;
		ОтборОсновнойТаблицы.ВидОперации          = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск;
		СтрокиОтпуска = ТаблицаНачисленнаяЗарплатаИВзносы.НайтиСтроки(ОтборОсновнойТаблицы);
		
		ОтборОсновнойТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска;
		СтрокиКомпенсации = ТаблицаНачисленнаяЗарплатаИВзносы.НайтиСтроки(ОтборОсновнойТаблицы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиОтпуска, СтрокиКомпенсации);
		
		Если ОценочныеОбязательстваСотрудника.Количество() = 0 Тогда
			Сумма = 0;
			СтраховыеВзносы = 0;
			СуммаФСС_НС = 0;
		Иначе
			Сумма = Макс(ОценочныеОбязательстваСотрудника.Итог("Сумма"), 0);
			СтраховыеВзносы = Макс(ОценочныеОбязательстваСотрудника.Итог("СтраховыеВзносы"), 0);
			СуммаФСС_НС = Макс(ОценочныеОбязательстваСотрудника.Итог("ФССНесчастныеСлучаи"), 0);
		КонецЕсли;
		
		Если Сумма = 0 И СтраховыеВзносы = 0 И СуммаФСС_НС = 0 Тогда
			
			// нет накопленных сумм ОО
			Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				НоваяСтрокаНУ = НоваяТаблицаОтпусков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНУ, СтрокаОтпуска);
				Если ФормироватьРезервОтпусковНУ И СтрокаОтпуска.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
					//ведется учет резервов в НУ
					НоваяСтрокаНУ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Сумма >= СтрокаТЗ.Сумма И СтраховыеВзносы >= СуммаВзносовПоСтроке И СуммаФСС_НС >= СтрокаТЗ.ФССНесчастныеСлучаи Тогда
			
			// суммы всех ОО достаточно для списания
			
			ТаблицаОтпусковВременная = НоваяТаблицаОтпусков.СкопироватьКолонки();
			
			Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				
				ЭтоСтрокаОтпуск = (СтрокаОтпуска.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
				Если ФормироватьРезервОтпусковНУ Тогда
					ВидОперацииОбязательств  = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
				Иначе
					ВидОперацииОбязательств  = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
				КонецЕсли;
				
				НоваяСтрока = ТаблицаОтпусковВременная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска);
				НоваяСтрока.ВидОперации = ВидОперацииОбязательств;
				
			КонецЦикла;
			
			ТаблицаОтпусковВременная.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммированияСтрока);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтпусковВременная,НоваяТаблицаОтпусков);
			
		Иначе
			
			КоэффициентСуммы   = ?(СтрокаТЗ.Сумма = 0,0, Мин(Сумма/СтрокаТЗ.Сумма,1));
			КоэффициентВзносов = ?(СуммаВзносовПоСтроке = 0,0, Мин(СтраховыеВзносы/СуммаВзносовПоСтроке,1));
			КоэффициентФСС_НС  = ?(СтрокаТЗ.ФССНесчастныеСлучаи = 0,0, Мин(СуммаФСС_НС/СтрокаТЗ.ФССНесчастныеСлучаи,1));
			
			ТаблицаОтпусковВременная = НоваяТаблицаОтпусков.СкопироватьКолонки();
			
			Для каждого ГруппаОбязательств Из ГруппыОбязательств Цикл
				
				ТаблицаГруппыОбязательств = НоваяТаблицаОтпусков.СкопироватьКолонки();
				СуммаСписанныхОО = 0;
				
				Если ГруппаОбязательств.Ключ = "Начисления" Тогда
					КоэффициентБУ 	   = КоэффициентСуммы;
					СуммаНакопленныхОО = Сумма;
				ИначеЕсли ГруппаОбязательств.Ключ = "ВзносыФСС_НС" Тогда
					КоэффициентБУ      = КоэффициентФСС_НС;
					СуммаНакопленныхОО = СуммаФСС_НС;
				Иначе
					КоэффициентБУ      = КоэффициентВзносов;
					СуммаНакопленныхОО = СтраховыеВзносы;
				КонецЕсли;
				
				Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
					
					ЭтоСтрокаОтпуск = (СтрокаОтпуска.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
					Если ФормироватьРезервОтпусковНУ Тогда
						ВидОперацииОбязательств  = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
						ВидОперации = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска); 
					Иначе
						ВидОперацииОбязательств  = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства,Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
						ВидОперации = ?(ЭтоСтрокаОтпуск,Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск, Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска);
					КонецЕсли;
					
					КолонкиСуммГруппыОбязательств = ГруппаОбязательств.Значение;
					Для каждого ИмяКолонки Из КолонкиСуммГруппыОбязательств Цикл
						
						Сумма_ОО = ОКР(СтрокаОтпуска[ИмяКолонки] * КоэффициентБУ, 2);
						
						Если Сумма_ОО > 0 Тогда
							
							НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска, КолонкиКопированияСтрока);
							НоваяСтрока[ИмяКолонки] = Сумма_ОО;
							НоваяСтрока.ВидОперации = ВидОперацииОбязательств;
							НоваяСтрока.СтрокаОбязательств  = Истина;
							
							СуммаСписанныхОО = СуммаСписанныхОО + НоваяСтрока[ИмяКолонки];
							
							НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска, КолонкиКопированияСтрока);
							НоваяСтрока.ВидОперации = ВидОперации;
							НоваяСтрока[ИмяКолонки] = СтрокаОтпуска[ИмяКолонки] - Сумма_ОО;
							НоваяСтрока.СтрокаКорректировки  = Истина;
							
						ИначеЕсли Сумма_ОО <> 0 Тогда
							
							НоваяСтрока = ТаблицаГруппыОбязательств.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска, КолонкиКопированияСтрока);
							НоваяСтрока.ВидОперации = ВидОперации;
							НоваяСтрока[ИмяКолонки] = СтрокаОтпуска[ИмяКолонки];
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ТаблицаГруппыОбязательств.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммированияСтрока);
				РазницаСумма = СуммаСписанныхОО - СуммаНакопленныхОО;
				
				Если РазницаСумма > 0 Тогда
					// списали за счет ОО больше, чем накоплено
					
					СтрокаОбязательств  = ТаблицаГруппыОбязательств.НайтиСтроки(Новый Структура("СтрокаОбязательств", Истина))[0];
					СтрокаКорректировки = ТаблицаГруппыОбязательств.НайтиСтроки(Новый Структура("СтрокаКорректировки", Истина))[0];
					
					Для каждого ИмяКолонки Из КолонкиСуммГруппыОбязательств Цикл
						
						Если РазницаСумма = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Корректировка = МИН(СтрокаОбязательств[ИмяКолонки], РазницаСумма);
						СтрокаОбязательств[ИмяКолонки] = СтрокаОбязательств[ИмяКолонки] - Корректировка;
						РазницаСумма = РазницаСумма - Корректировка;
						
						СтрокаКорректировки[ИмяКолонки] = СтрокаКорректировки[ИмяКолонки] + Корректировка;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаГруппыОбязательств, ТаблицаОтпусковВременная);
				
			КонецЦикла;
			
			ТаблицаОтпусковВременная.Свернуть(КолонкиГруппировокСтрока,КолонкиСуммированияСтрока);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтпусковВременная,НоваяТаблицаОтпусков);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаНачисленнаяЗарплатаИВзносы.Индексы.Удалить(0);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", ТаблицаНачисленнаяЗарплатаИВзносы);
	Запрос.УстановитьПараметр("НоваяТаблицаОтпусков",       НоваяТаблицаОтпусков);
	Запрос.УстановитьПараметр("Организация",                Организация);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияИВзносы.Сотрудник КАК Сотрудник,
	|	НачисленияИВзносы.Подразделение КАК Подразделение,
	|	НачисленияИВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НачисленияИВзносы.ВидОперации КАК ВидОперации,
	|	НачисленияИВзносы.Начисление КАК Начисление,
	|	НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НачисленияИВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленияИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	НачисленияИВзносы.ПоляВзносов КАК ПоляВзносов,
	|	НачисленияИВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	НачисленияИВзносы.Сумма КАК Сумма,
	|	НачисленияИВзносы.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТНачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленияИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияИВзносы.Сотрудник КАК Сотрудник,
	|	НачисленияИВзносы.Подразделение КАК Подразделение,
	|	НачисленияИВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НачисленияИВзносы.ВидОперации КАК ВидОперации,
	|	НачисленияИВзносы.Начисление КАК Начисление,
	|	НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НачисленияИВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленияИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	НачисленияИВзносы.ПоляВзносов КАК ПоляВзносов,
	|	НачисленияИВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	НачисленияИВзносы.Сумма КАК Сумма,
	|	НачисленияИВзносы.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТТаблицаОтпусков
	|ИЗ
	|	&НоваяТаблицаОтпусков КАК НачисленияИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияИВзносы.Сотрудник КАК Сотрудник,
	|	НачисленияИВзносы.Подразделение КАК Подразделение,
	|	НачисленияИВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НачисленияИВзносы.ВидОперации КАК ВидОперации,
	|	НачисленияИВзносы.Начисление КАК Начисление,
	|	НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НачисленияИВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленияИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|	СУММА(НачисленияИВзносы.ПоляВзносов) КАК ПоляВзносов,
	|	СУММА(НачисленияИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СУММА(НачисленияИВзносы.Сумма) КАК Сумма,
	|	НачисленияИВзносы.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияИВзносы.Сотрудник КАК Сотрудник,
	|		НачисленияИВзносы.Подразделение КАК Подразделение,
	|		НачисленияИВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|		НачисленияИВзносы.ВидОперации КАК ВидОперации,
	|		НачисленияИВзносы.Начисление КАК Начисление,
	|		НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		НачисленияИВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|		НачисленияИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|		НачисленияИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|		НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|		НачисленияИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	|		НачисленияИВзносы.ПоляВзносов КАК ПоляВзносов,
	|		НачисленияИВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|		НачисленияИВзносы.Сумма КАК Сумма,
	|		НачисленияИВзносы.ДатаНачала КАК ДатаНачала
	|	ИЗ
	|		ВТНачисленнаяЗарплатаИВзносы КАК НачисленияИВзносы
	|	ГДЕ
	|		НЕ НачисленияИВзносы.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияИВзносы.ФизическоеЛицо,
	|		НачисленияИВзносы.Сотрудник,
	|		НачисленияИВзносы.Подразделение,
	|		НачисленияИВзносы.ПодразделениеУчетаЗатрат,
	|		НачисленияИВзносы.ВидОперации,
	|		НачисленияИВзносы.Начисление,
	|		НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете,
	|		НачисленияИВзносы.СтатьяФинансирования,
	|		НачисленияИВзносы.СтатьяРасходов,
	|		НачисленияИВзносы.ОблагаетсяЕНВД,
	|		НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ,
	|		НачисленияИВзносы.ПериодПринятияРасходов,
	|		НачисленияИВзносы.ПоляВзносов,
	|		НачисленияИВзносы.ФССНесчастныеСлучаи,
	|		НачисленияИВзносы.Сумма,
	|		НачисленияИВзносы.ДатаНачала
	|	ИЗ
	|		ВТТаблицаОтпусков КАК НачисленияИВзносы) КАК НачисленияИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО НачисленияИВзносы.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО НачисленияИВзносы.ПодразделениеУчетаЗатрат = ПодразделенияОрганизаций.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияИВзносы.Начисление,
	|	НачисленияИВзносы.ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленияИВзносы.СпособОтраженияЗарплатыВБухучете,
	|	НачисленияИВзносы.ВидОперации,
	|	НачисленияИВзносы.СтатьяРасходов,
	|	НачисленияИВзносы.Подразделение,
	|	НачисленияИВзносы.ПодразделениеУчетаЗатрат,
	|	НачисленияИВзносы.ПериодПринятияРасходов,
	|	НачисленияИВзносы.СтатьяФинансирования,
	|	НачисленияИВзносы.ФизическоеЛицо,
	|	НачисленияИВзносы.Сотрудник,
	|	НачисленияИВзносы.ОблагаетсяЕНВД,
	|	НачисленияИВзносы.ДатаНачала,
	|	ФизическиеЛица.Наименование,
	|	ПодразделенияОрганизаций.Наименование
	|
	|ИМЕЮЩИЕ
	|	(СУММА(НачисленияИВзносы.Сумма) <> 0
	|		ИЛИ СУММА(НачисленияИВзносы.ФССНесчастныеСлучаи) <> 0
	|		ИЛИ СУММА(НачисленияИВзносы.ПоляВзносов) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическиеЛица.Наименование,
	|	ПодразделенияОрганизаций.Наименование,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	СпособОтраженияЗарплатыВБухучете
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ТаблицаОтпусков.Сотрудник КАК Сотрудник,
	|	ТаблицаОтпусков.ВидОперации КАК ВидОперации,
	|	ТаблицаОтпусков.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(ТаблицаОтпусков.Сумма) КАК Сумма,
	|	СУММА(ТаблицаОтпусков.ПоляВзносов) КАК СтраховыеВзносы,
	|	СУММА(ТаблицаОтпусков.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	ТаблицаОтпусков.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	ВТТаблицаОтпусков КАК ТаблицаОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаОтпусков.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	ТаблицаОтпусков.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтпусков.Сотрудник,
	|	Сотрудники.Наименование,
	|	ТаблицаОтпусков.ВидОперации,
	|	ТаблицаОтпусков.СтатьяФинансирования,
	|	ТаблицаОтпусков.ДатаНачала
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаОтпусков.Сумма) <> 0
	|		ИЛИ СУММА(ТаблицаОтпусков.ФССНесчастныеСлучаи) <> 0
	|		ИЛИ СУММА(ТаблицаОтпусков.ПоляВзносов) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Наименование";
	
	ТекстПолейВзносов = "";
	ТекстПолейСуммВзносов = "";
	ТекстПолейСуммВзносовУсловие = "";
	ТекстПолейСуммВзносовОтпуск = "";
	ТекстПолейСуммВзносовОтпускУсловие = "";
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		Если ИмяПоля = "ФССНесчастныеСлучаи" Тогда
			Продолжить;
		КонецЕсли;
		ТекстПолейВзносов = ТекстПолейВзносов + "НачисленияИВзносы." + ИмяПоля + " КАК " + ИмяПоля + "," + Символы.ПС;
		ТекстПолейСуммВзносов = ТекстПолейСуммВзносов + "СУММА(НачисленияИВзносы." + ИмяПоля + ") КАК " + ИмяПоля + "," + Символы.ПС;
		ТекстПолейСуммВзносовУсловие = ТекстПолейСуммВзносовУсловие + "ИЛИ СУММА(НачисленияИВзносы." + ИмяПоля + ") <> 0" + Символы.ПС;
		ТекстПолейСуммВзносовОтпускУсловие = ТекстПолейСуммВзносовОтпускУсловие + "ИЛИ СУММА(ТаблицаОтпусков." + ИмяПоля + ") <> 0" + Символы.ПС;
		ТекстПолейСуммВзносовОтпуск = ТекстПолейСуммВзносовОтпуск + ?(ПустаяСтрока(ТекстПолейСуммВзносовОтпуск),"","+") + " ТаблицаОтпусков." + ИмяПоля;
	КонецЦикла;
	ТекстПолейСуммВзносовОтпуск = "СУММА("+ТекстПолейСуммВзносовОтпуск+") КАК СтраховыеВзносы,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияИВзносы.ПоляВзносов,", ТекстПолейВзносов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияИВзносы.ПоляВзносов КАК ПоляВзносов,", ТекстПолейВзносов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ СУММА(НачисленияИВзносы.ПоляВзносов) <> 0", ТекстПолейСуммВзносовУсловие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ СУММА(ТаблицаОтпусков.ПоляВзносов) <> 0", ТекстПолейСуммВзносовОтпускУсловие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(ТаблицаОтпусков.ПоляВзносов) КАК СтраховыеВзносы,", ТекстПолейСуммВзносовОтпуск);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(НачисленияИВзносы.ПоляВзносов) КАК ПоляВзносов,", ТекстПолейСуммВзносов);
	
	Результат = Запрос.ВыполнитьПакет();
		
	ТаблицаНачисленнаяЗарплатаИВзносы.Очистить();
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНачисленнаяЗарплатаИВзносы.Добавить(),Выборка);
	КонецЦикла;
	
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НачисленныеОтпуска.Добавить(),Выборка);
	КонецЦикла;

КонецПроцедуры

// Формирует движения выплаты отпусков за счет резерва
//
// Параметры:
//			Движения - КоллекцияДвижений - Движения.
//			Отказ - Булево - Отказ.
//			Организация - СправочникСсылка.Организации - Организация.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			ВыплатаОтпусковЗаСчетРезерва - ТаблицаЗначений - из ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленныеОтпуска.
//
Процедура СформироватьДвиженияВыплатаОтпусковЗаСчетРезерва(Движения, Отказ, Организация, ПериодРегистрации, ВыплатаОтпусковЗаСчетРезерва) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("ВыплатаОтпусковЗаСчетРезерва", ВыплатаОтпусковЗаСчетРезерва);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыплатаОтпусковЗаСчетРезерва.Сотрудник,
	|	ВыплатаОтпусковЗаСчетРезерва.ВидОперации,
	|	ВыплатаОтпусковЗаСчетРезерва.СтатьяФинансирования,
	|	ВыплатаОтпусковЗаСчетРезерва.Сумма,
	|	ВыплатаОтпусковЗаСчетРезерва.СтраховыеВзносы,
	|	ВыплатаОтпусковЗаСчетРезерва.ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТВыплаты
	|ИЗ
	|	&ВыплатаОтпусковЗаСчетРезерва КАК ВыплатаОтпусковЗаСчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Выплаты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства))
	|			ТОГДА Выплаты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерва,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы))
	|			ТОГДА Выплаты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваНУ,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства))
	|			ТОГДА Выплаты.СтраховыеВзносы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваСтраховыхВзносов,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы))
	|			ТОГДА Выплаты.СтраховыеВзносы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства))
	|			ТОГДА Выплаты.ФССНесчастныеСлучаи
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ВЫБОР
	|		КОГДА Выплаты.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы))
	|			ТОГДА Выплаты.ФССНесчастныеСлучаи
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваФССНесчастныеСлучаиНУ
	|ИЗ
	|	ВТВыплаты КАК Выплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Выплаты.Сотрудник = Сотрудники.Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТЗ Из Результат Цикл
			
			НоваяСтрока = Движения.ОценочныеОбязательстваПоСотрудникам.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			
		КонецЦикла;
		
		Движения.ОценочныеОбязательстваПоСотрудникам.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// Формирует движения списания резерва отпусков в Рнк.ВыплатаОтпусковЗаСчетРезерва
//
// Параметры:
//			Движения - КоллекцияДвижений - Движения.
//			Отказ - Булево - Отказ.
//			Организация - СправочникСсылка.Организации - Организация.
//			ПериодРегистрации - Дата - ПериодРегистрации.
//			ТаблицаОбязательств - ТаблицаЗначений - Соответствует ресурсам Рнк.ОценочныеОбязательстваПоСотрудникам.
//
Процедура СформироватьДвиженияСписаниеРезерваОтпусков(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаОбязательств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбязательств", ТаблицаОбязательств);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбязательств.СуммаРезерва КАК СуммаРезерва,
	|	ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ТаблицаОбязательств.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	&Организация КАК Организация,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаОбязательств
	|ИЗ
	|	&ТаблицаОбязательств КАК ТаблицаОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация КАК Организация,
	|	ВТ_ТаблицаОбязательств.Период КАК Период,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерва) КАК Сумма,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваНУ) КАК СуммаНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям) КАК ТипОценочногоОбязательства,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерва <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам),
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ),
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	СтатьяФинансирования,
	|	ТипОценочногоОбязательства";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		Движения.ОценочныеОбязательства.Загрузить(Результат);
		Движения.ОценочныеОбязательства.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Распределяет суммы начисленных резервов по способам отражения в учете
// при ручном редактировании сумм резервов.
//
// Параметры:
//			Объект - Объект - Движения.
//			ПересчитатьПолностью - булево, признак необходимости полного пересчета
//
Процедура ПеречитатьОценочныеОбязательства(Объект, ПересчитатьПолностью) Экспорт
	
	РасчетРезерваОтпусков = Объект.РасчетРезерваОтпусков.Скопировать();
	
	ТаблицыРасчетаОбязательств = ОтражениеЗарплатыВБухучете.ПараметрыДляРасчетаОценочныхОбязательствОтпусков(Объект.Организация, Объект.ПериодРегистрации);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОстаткиОтпусков",                 ТаблицыРасчетаОбязательств.ОстаткиОтпусков);
	Запрос.УстановитьПараметр("ФондОплатыТрудаИСтраховыеВзносы", ТаблицыРасчетаОбязательств.ФондОплатыТрудаИСтраховыеВзносы);
	Запрос.УстановитьПараметр("Регистратор",                     Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Организация,
	|	ОстаткиОтпусков.Сотрудник,
	|	ОстаткиОтпусков.ОстатокОтпусков,
	|	ОстаткиОтпусков.ОтпускАвансом,
	|	ОстаткиОтпусков.Подразделение,
	|	ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ОстаткиОтпусков.СтатьяФинансирования,
	|	ОстаткиОтпусков.ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТ_ОстаткиОтпусков
	|ИЗ
	|	&ОстаткиОтпусков КАК ОстаткиОтпусков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФондОплатыТрудаИСтраховыеВзносы.Организация,
	|	ФондОплатыТрудаИСтраховыеВзносы.Сотрудник,
	|	ФондОплатыТрудаИСтраховыеВзносы.Подразделение,
	|	ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия,
	|	ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования,
	|	ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|ИЗ
	|	&ФондОплатыТрудаИСтраховыеВзносы КАК ФондОплатыТрудаИСтраховыеВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда КАК ФОТ,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы КАК СтраховыеВзносы,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Подразделение КАК Подразделение,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	ВТ_ОстаткиОтпусков.ОстатокОтпусков КАК ОстатокОтпуска,
	|	ВТ_ОстаткиОтпусков.ОтпускАвансом КАК ОтпускАвансом
	|ИЗ
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|		ПО (ВТ_ОстаткиОтпусков.Организация = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Организация)
	|			И (ВТ_ОстаткиОтпусков.Сотрудник = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ВТ_ОстаткиОтпусков.СтатьяФинансирования,
	|	СУММА(0),
	|	СУММА(0),
	|	ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД,
	|	ВТ_ОстаткиОтпусков.Подразделение,
	|	ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	СУММА(0),
	|	ВТ_ОстаткиОтпусков.ОстатокОтпусков,
	|	ВТ_ОстаткиОтпусков.ОтпускАвансом
	|ИЗ
	|	ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|ГДЕ
	|	НЕ ВТ_ОстаткиОтпусков.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник
	|				ИЗ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиОтпусков.СтатьяФинансирования,
	|	ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД,
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВТ_ОстаткиОтпусков.Подразделение,
	|	ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ВТ_ОстаткиОтпусков.ОстатокОтпусков,
	|	ВТ_ОстаткиОтпусков.ОтпускАвансом";
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерва",                      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваНУ",                    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносов",      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ",    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи",   ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ", ОписаниеТиповЧисло);
	
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваИсчислено",                      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваИсчисленоНУ",                    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчислено",      ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ",    ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено",   ОписаниеТиповЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", ОписаниеТиповЧисло);
	
	Для Каждого СтрокаТаблицы Из РасчетРезерваОтпусков Цикл
		
		ПараметрыОтбора = Новый Структура("Сотрудник",СтрокаТаблицы.Сотрудник);
		МассивСтрок = ТаблицаРаспределения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() <> 0 Тогда
			
			ИмяКолонкиРаспределения = "ФОТ";
			Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, ИмяКолонкиРаспределения) = 0 Тогда
				ИмяКолонкиРаспределения = "ОстатокОтпуска";
			Иначе
				РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "ОстатокОтпуска", "ФОТ");
			КонецЕсли;
			
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерва",                      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносов",      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаи",   ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваНУ",                    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовНУ",    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиНУ", ИмяКолонкиРаспределения);
			
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваИсчислено",                      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовИсчислено",      ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиИсчислено",   ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваИсчисленоНУ",                    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваСтраховыхВзносовИсчисленоНУ",    ИмяКолонкиРаспределения);
			РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", ИмяКолонкиРаспределения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРаспределения.Свернуть("Сотрудник, МестоВСтруктуреПредприятия, Подразделение,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования,ОблагаетсяЕНВД", 
		"СуммаРезерва,СуммаРезерваНУ,
		|СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,
		|СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ,
		|СуммаРезерваИсчислено,СуммаРезерваИсчисленоНУ,
		|СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваСтраховыхВзносовИсчисленоНУ,
		|СуммаРезерваФССНесчастныеСлучаиИсчислено,СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	
	СтруктураПараметровРасчета = Новый Структура;
	СтруктураПараметровРасчета.Вставить("Организация",       Объект.Организация);
	СтруктураПараметровРасчета.Вставить("Регистратор",       Объект.Ссылка);
	СтруктураПараметровРасчета.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета);
	
	ОпределитьСуммуКорректировкиОстатков(ТаблицаРаспределения, СтруктураПараметровРасчета);
	
	Объект.ОценочныеОбязательстваПоСотрудникам.Очистить();
	СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(ТаблицаРаспределения, Объект.ОценочныеОбязательстваПоСотрудникам);
	
	Если ПересчитатьПолностью Тогда
		Объект.ОценочныеОбязательства.Очистить();
		СформироватьТаблицуОценочныеОбязательства(ТаблицаРаспределения, Объект.ОценочныеОбязательства);
	КонецЕсли;
	
КонецПроцедуры

// Сворачивает суммы начисленных резервов по способам отражения в учете
// при ручном редактировании сумм резервов.
//
// Параметры:
//			Объект - Объект - Движения.
//
Процедура ОбновитьОтражениеВУчете(Объект) Экспорт
	
	ТаблицаРаспределения = Объект.ОценочныеОбязательстваПоСотрудникам.Скопировать();
	
	Объект.ОценочныеОбязательства.Очистить();
	СформироватьТаблицуОценочныеОбязательства(ТаблицаРаспределения, Объект.ОценочныеОбязательства);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область НачислениеРезерваОтпусков

Функция МетодНачисленияРезерваОтпусков(Организация, Период) Экспорт
	
	Возврат УточнитьМетодНачисленияРезерваОтпусков(Организация, Период);

КонецФункции

Функция ПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Регистратор = Неопределено, Инвентаризация, ОпределятьИзлишкиЕжемесячно) Экспорт
	
	ТаблицыРасчетаОбязательств = ОтражениеЗарплатыВБухучете.ПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации);
	
	МассивСотрудников = Новый Массив;
	ПолучитьМассивСотрудников(МассивСотрудников, ТаблицыРасчетаОбязательств.ФондОплатыТрудаИСтраховыеВзносы);
	ПолучитьМассивСотрудников(МассивСотрудников, ТаблицыРасчетаОбязательств.ОстаткиОтпусков);
	
	ТаблицаСостоянияСотрудников = ЗарплатаКадры.СостоянияСотрудниковДляРасчетаОценочныхОбязательствОтпусков(МассивСотрудников, ПериодРегистрации);
	
	Если Инвентаризация Тогда
		РезервОтпусковПереопределяемый.ДополнитьТаблицуОстатковОтпусков(Организация, ПериодРегистрации, ТаблицыРасчетаОбязательств.ОстаткиОтпусков);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОстаткиОтпусков",                 ТаблицыРасчетаОбязательств.ОстаткиОтпусков);
	Запрос.УстановитьПараметр("ФондОплатыТрудаИСтраховыеВзносы", ТаблицыРасчетаОбязательств.ФондОплатыТрудаИСтраховыеВзносы);
	Запрос.УстановитьПараметр("ТаблицаСостоянияСотрудников",     ТаблицаСостоянияСотрудников);
	Запрос.УстановитьПараметр("Регистратор",                     Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Организация,
	|	ОстаткиОтпусков.Сотрудник,
	|	ОстаткиОтпусков.ОстатокОтпусков,
	|	ОстаткиОтпусков.ОтпускАвансом,
	|	ОстаткиОтпусков.Подразделение,
	|	ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ОстаткиОтпусков.СтатьяФинансирования,
	|	ОстаткиОтпусков.ОблагаетсяЕНВД,
	|	ОстаткиОтпусков.СреднийЗаработок
	|ПОМЕСТИТЬ ВТ_ОстаткиОтпусков
	|ИЗ
	|	&ОстаткиОтпусков КАК ОстаткиОтпусков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФондОплатыТрудаИСтраховыеВзносы.Организация,
	|	ФондОплатыТрудаИСтраховыеВзносы.Сотрудник,
	|	ФондОплатыТрудаИСтраховыеВзносы.Подразделение,
	|	ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия,
	|	ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования,
	|	ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда,
	|	ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы,
	|	ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи
	|ПОМЕСТИТЬ ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|ИЗ
	|	&ФондОплатыТрудаИСтраховыеВзносы КАК ФондОплатыТрудаИСтраховыеВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостоянияСотрудников.Сотрудник,
	|	ТаблицаСостоянияСотрудников.Уволен
	|ПОМЕСТИТЬ ВТ_СостоянияСотрудников
	|ИЗ
	|	&ТаблицаСостоянияСотрудников КАК ТаблицаСостоянияСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Регистратор КАК Регистратор,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Организация КАК Организация,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФондОплатыТруда
	|	КОНЕЦ КАК ФОТ,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.СтраховыеВзносы
	|	КОНЕЦ КАК СтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОстатокОтпусков
	|	КОНЕЦ КАК ОстатокОтпуска,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОтпускАвансом
	|	КОНЕЦ КАК ОтпускАвансом,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СреднийЗаработок
	|	КОНЕЦ КАК СреднийЗаработок,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.Подразделение КАК Подразделение,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ФондОплатыТрудаИСтраховыеВзносы.ФССНесчастныеСлучаи
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	0 КАК ТекущаяСтавкаСтраховыхВзносов,
	|	0 КАК ТекущаяСтавкаФССНесчастныеСлучаи,
	|	ВТ_СостоянияСотрудников.Уволен КАК Уволен
	|ИЗ
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|		ПО (ВТ_ОстаткиОтпусков.Организация = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Организация)
	|			И (ВТ_ОстаткиОтпусков.Сотрудник = ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияСотрудников КАК ВТ_СостоянияСотрудников
	|		ПО ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник = ВТ_СостоянияСотрудников.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Регистратор,
	|	ВТ_ОстаткиОтпусков.Организация,
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ВТ_ОстаткиОтпусков.СтатьяФинансирования,
	|	СУММА(0),
	|	СУММА(0),
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОстатокОтпусков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОтпускАвансом
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СреднийЗаработок
	|	КОНЕЦ,
	|	ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД,
	|	ВТ_ОстаткиОтпусков.Подразделение,
	|	ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	ВТ_СостоянияСотрудников.Уволен
	|ИЗ
	|	ВТ_ОстаткиОтпусков КАК ВТ_ОстаткиОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияСотрудников КАК ВТ_СостоянияСотрудников
	|		ПО ВТ_ОстаткиОтпусков.Сотрудник = ВТ_СостоянияСотрудников.Сотрудник,
	|	ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы
	|ГДЕ
	|	НЕ ВТ_ОстаткиОтпусков.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы.Сотрудник КАК Сотрудник
	|				ИЗ
	|					ВТ_ФондОплатыТрудаИСтраховыеВзносы КАК ВТ_ФондОплатыТрудаИСтраховыеВзносы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиОтпусков.СтатьяФинансирования,
	|	ВТ_ОстаткиОтпусков.ОблагаетсяЕНВД,
	|	ВТ_ОстаткиОтпусков.Сотрудник,
	|	ВТ_ОстаткиОтпусков.Подразделение,
	|	ВТ_ОстаткиОтпусков.МестоВСтруктуреПредприятия,
	|	ВТ_ОстаткиОтпусков.Организация,
	|	ВТ_ОстаткиОтпусков.СпособОтраженияЗарплатыВБухучете,
	|	ВТ_СостоянияСотрудников.Уволен,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОстатокОтпусков
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.ОтпускАвансом
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_СостоянияСотрудников.Уволен
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_ОстаткиОтпусков.СреднийЗаработок
	|	КОНЕЦ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Инвентаризация Тогда
		ТаблицыСтавокСтраховыхВзносов = ОтражениеЗарплатыВБухучете.ПараметрыДляИнвентаризацииОценочныхОбязательствОтпусков(Организация, ПериодРегистрации);
		СтавкиВзносовФСС_НС    = ТаблицыСтавокСтраховыхВзносов.СтавкиВзносовФСС_НС;
		СтавкиСтраховыхВзносов = ТаблицыСтавокСтраховыхВзносов.СтавкиСтраховыхВзносов;
		Для Каждого СтрокаТаблицы Из Результат Цикл
			ПараметрыОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
			МассивСтрок = СтавкиВзносовФСС_НС.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи = СтрокаМассива.Ставка;
			КонецЦикла;
			МассивСтрок = СтавкиСтраховыхВзносов.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаМассива Из МассивСтрок Цикл
				Для Каждого Колонка Из СтавкиСтраховыхВзносов.Колонки Цикл
					Если Колонка.Имя <> "Сотрудник" Тогда
						СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов = СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов + СтрокаМассива[Колонка.Имя];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СобратьДанныеДляНачислениеРезерваОтпусков(Регистратор, Организация, ПериодРегистрации, РасчетРезерваОтпусков, ОценочныеОбязательства, ОценочныеОбязательстваПоСотрудникам) Экспорт
	
	Реквизиты = Новый Структура("Организация, Период", Организация, ПериодРегистрации);
	
	НастройкиРезервовОтпусков   = НастройкиРезервовОтпусков(Организация, НачалоМесяца(ПериодРегистрации));
	ФормироватьРезервОтпусковБУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ;
	ФормироватьРезервОтпусковНУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	ОпределятьИзлишкиЕжемесячно = НастройкиРезервовОтпусков.ОпределятьИзлишкиЕжемесячно;
		
	Если НЕ ФормироватьРезервОтпусковБУ И НЕ ФормироватьРезервОтпусковНУ Тогда
		Возврат;
	КонецЕсли;
	
	МетодНачисленияРезерваОтпусков              = НастройкиРезервовОтпусков.МетодНачисленияРезерваОтпусков;
	НормативОтчисленийВРезервОтпусков           = НастройкиРезервовОтпусков.НормативОтчисленийВРезервОтпусков;
	ПредельнаяВеличинаОтчисленийВРезервОтпусков = НастройкиРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков;
	Инвентаризация                              = КонецМесяца(ПериодРегистрации) = КонецГода(ПериодРегистрации);
	
	ПараметрыРасчетаОбязательств = ПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Регистратор, Инвентаризация, ОпределятьИзлишкиЕжемесячно);
	
	Организации = ВсяОрганизация(Организация);
	ДоляРезервовОтпусков = ДоляСписанияКосвенныхРасходов(ПериодРегистрации, Организация, Регистратор);
	ПредельнаяВеличинаРезерваТекущегоМесяца = Окр(ДоляРезервовОтпусков * (ПараметрыРасчетаОбязательств.Итог("ФОТ")
		+ ПараметрыРасчетаОбязательств.Итог("СтраховыеВзносы")
		+ ПараметрыРасчетаОбязательств.Итог("ФССНесчастныеСлучаи"))
		, 2);

	СтруктураПараметровРасчета = Новый Структура;
	СтруктураПараметровРасчета.Вставить("Организация",                                 Организация);
	СтруктураПараметровРасчета.Вставить("Регистратор",                                 Регистратор);
	СтруктураПараметровРасчета.Вставить("ПериодРегистрации",                           ПериодРегистрации);
	СтруктураПараметровРасчета.Вставить("Инвентаризация",                              Инвентаризация);
	СтруктураПараметровРасчета.Вставить("ОпределятьИзлишкиЕжемесячно",                 ОпределятьИзлишкиЕжемесячно);
	СтруктураПараметровРасчета.Вставить("ФормироватьРезервОтпусковБУ",                 ФормироватьРезервОтпусковБУ);
	СтруктураПараметровРасчета.Вставить("ФормироватьРезервОтпусковНУ",                 ФормироватьРезервОтпусковНУ);
	СтруктураПараметровРасчета.Вставить("МетодНачисленияРезерваОтпусков",              МетодНачисленияРезерваОтпусков);
	СтруктураПараметровРасчета.Вставить("НормативОтчисленийВРезервОтпусков",           НормативОтчисленийВРезервОтпусков);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаОтчисленийВРезервОтпусков", ПредельнаяВеличинаОтчисленийВРезервОтпусков);
	СтруктураПараметровРасчета.Вставить("ПредельнаяВеличинаРезерваТекущегоМесяца",     ПредельнаяВеличинаРезерваТекущегоМесяца);
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерва",                               ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносов",               ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаи",            ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваНУ",                             ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНУ",             ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНУ",          ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваНакоплено",                      ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНакоплено",      ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНакоплено",   ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваНакопленоНУ",                    ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносовНакопленоНУ",    ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваИсчислено",                      ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчислено",      ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчислено",   ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваИсчисленоНУ",                    ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваСтраховыхВзносовИсчисленоНУ",    ОписаниеТиповЧисло);
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ", ОписаниеТиповЧисло);
	
	РассчитатьСуммыРезервовОтпусков(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
	ВычислитьСуммыРезервовТекущегоМесяца(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, Регистратор);
	
	СформироватьТаблицуРасчетаРезерваОтпусков(ПараметрыРасчетаОбязательств, Реквизиты, РасчетРезерваОтпусков, МетодНачисленияРезерваОтпусков);
	
	ОпределитьСуммуКорректировкиОстатков(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
	
	СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(ПараметрыРасчетаОбязательств, ОценочныеОбязательстваПоСотрудникам);
	СформироватьТаблицуОценочныеОбязательства(ПараметрыРасчетаОбязательств, ОценочныеОбязательства);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетаРезерваОтпусков(ТаблицаОбязательств, Реквизиты, РасчетРезерваОтпусков, МетодНачисленияРезерваОтпусков)
	
	ТаблицаРезервов =  ТаблицаОбязательств.Скопировать();
	
	ТаблицаРезервов.Свернуть("Сотрудник,
		|СреднийЗаработок,ТекущаяСтавкаСтраховыхВзносов,ТекущаяСтавкаФССНесчастныеСлучаи",
		"ОстатокОтпуска,ОтпускАвансом,ФОТ,СтраховыеВзносы,ФССНесчастныеСлучаи,
		|СуммаРезерваНакоплено,СуммаРезерваСтраховыхВзносовНакоплено,СуммаРезерваФССНесчастныеСлучаиНакоплено,
		|СуммаРезерваНакопленоНУ,СуммаРезерваСтраховыхВзносовНакопленоНУ,СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
		|СуммаРезерваИсчислено,СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваФССНесчастныеСлучаиИсчислено,
		|СуммаРезерваИсчисленоНУ,СуммаРезерваСтраховыхВзносовИсчисленоНУ,СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
		|СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
		|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ");

	ТаблицаРезервов.Колонки.Добавить("Организация");
	ТаблицаРезервов.Колонки.Добавить("ПериодРасчета");
	ТаблицаРезервов.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаРезервов.ЗаполнитьЗначения(Реквизиты.Период, "ПериодРасчета");
	
	РасчетРезерваОтпусков = ТаблицаРезервов.Скопировать();
	
КонецПроцедуры

Процедура СформироватьТаблицуОценочныеОбязательства(ТаблицаОбязательств, ОценочныеОбязательства)
	
	ТаблицаРезервов = ТаблицаОбязательств.Скопировать(Новый Структура("КорректировкаОбязательств", Ложь));
	
	ТаблицаРезервов.Свернуть("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД",	
	"СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ");

	ТаблицаРезервов.Сортировать("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, СуммаРезерва, СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если СтрокаТаблицы.СуммаРезерва = 0
			И СтрокаТаблицы.СуммаРезерваНУ = 0
			И (СтрокаТаблицы.СуммаРезерва - СтрокаТаблицы.СуммаРезерваНУ) = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносов = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ = 0
			И (СтрокаТаблицы.СуммаРезерваСтраховыхВзносов - СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ) = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ОценочныеОбязательства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуОценочныеОбязательстваПоСотрудникам(ТаблицаОбязательств, ОценочныеОбязательстваПоСотрудникам)
	
	ТаблицаРезервов =  ТаблицаОбязательств.Скопировать();
	
	ТаблицаРезервов.Свернуть("Сотрудник, МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, КорректировкаОбязательств",
	"СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ");

	ТаблицаРезервов.Сортировать("Сотрудник, МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, СуммаРезерва, СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если СтрокаТаблицы.СуммаРезерва = 0
			И СтрокаТаблицы.СуммаРезерваНУ = 0
			И (СтрокаТаблицы.СуммаРезерва - СтрокаТаблицы.СуммаРезерваНУ) = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносов = 0
			И СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ = 0
			И (СтрокаТаблицы.СуммаРезерваСтраховыхВзносов - СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ) = 0
			И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи = 0
			И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ = 0
			И (СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи - СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ) = 0
			Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ОценочныеОбязательстваПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНачислениеОценочныхОбязательствПоОтпускам(ДокументОбъект) Экспорт
	
	// Начисленная зарплата и взносы.
	ДокументОбъект.РасчетРезерваОтпусков.Очистить();
	ДокументОбъект.ОценочныеОбязательства.Очистить();
	ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Очистить();
	
	Если ДокументОбъект.ДоляРасходов = 0 Тогда
		
		ДокументОбъект.ДоляРасходов = ДоляРезерваОтпусков(ДокументОбъект.ПериодРегистрации, 
			ДокументОбъект.Организация, ДокументОбъект.Ссылка);
			
	КонецЕсли;
	
	РасчетРезерваОтпусков  = ДокументОбъект.РасчетРезерваОтпусков.СкопироватьКолонки();
	ОценочныеОбязательства = ДокументОбъект.ОценочныеОбязательства.СкопироватьКолонки();
	ОценочныеОбязательстваПоСотрудникам = ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.СкопироватьКолонки();

	СобратьДанныеДляНачислениеРезерваОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, 
		РасчетРезерваОтпусков, ОценочныеОбязательства, ОценочныеОбязательстваПоСотрудникам);
		
	РасчетРезерваОтпусков.Сортировать("Сотрудник");
	ОценочныеОбязательства.Сортировать("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухучете, СтатьяФинансирования, ОблагаетсяЕНВД");
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетРезерваОтпусков,
		ДокументОбъект.РасчетРезерваОтпусков);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОценочныеОбязательстваПоСотрудникам,
		ДокументОбъект.ОценочныеОбязательстваПоСотрудникам);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОценочныеОбязательства,
		ДокументОбъект.ОценочныеОбязательства);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСуммыРезерва

Процедура РассчитатьСуммыРезервовОтпусков(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	Если СтруктураПараметровРасчета.Инвентаризация Тогда
		СуммыРезервовОтпусковМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
		СинхронизацияСведенийОСуммеРезервовБУиНУ(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
	Иначе
		Если СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ Тогда
			СуммыРезервовОтпусковМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
			СуммыРезервовОтпусковНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
		КонецЕсли;
		
		Если СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ Тогда
			СуммыРезервовОтпусковНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, "НУ")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычислитьСуммыРезервовТекущегоМесяца(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, Регистратор)
	
	НачисленоРезервов                    = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваИсчислено");
	НачисленоВзносовРезервов             = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваСтраховыхВзносовИсчислено");
	НачисленоФССНесчастныеСлучаиРезервов = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваФССНесчастныеСлучаиИсчислено");
	ВсегоНачисленоРезервов               = НачисленоРезервов + НачисленоВзносовРезервов + НачисленоФССНесчастныеСлучаиРезервов;
	
	НачисленоРезервовНУ                    = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваИсчисленоНУ");
	НачисленоВзносовРезервовНУ             = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваСтраховыхВзносовИсчисленоНУ");
	НачисленоФССНесчастныеСлучаиРезервовНУ = ПараметрыРасчетаОбязательств.Итог("СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
	ВсегоНачисленоРезервовНУ               = НачисленоРезервовНУ + НачисленоВзносовРезервовНУ + НачисленоФССНесчастныеСлучаиРезервовНУ;
	
	СтруктураПараметровРасчета.Вставить("НачисленоРезервов",                      НачисленоРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоВзносовРезервов",               НачисленоВзносовРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоФССНесчастныеСлучаиРезервов",   НачисленоФССНесчастныеСлучаиРезервов);
	СтруктураПараметровРасчета.Вставить("ВсегоНачисленоРезервов",                 ВсегоНачисленоРезервов);
	СтруктураПараметровРасчета.Вставить("НачисленоРезервовНУ",                    НачисленоРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НачисленоВзносовРезервовНУ",             НачисленоВзносовРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НачисленоФССНесчастныеСлучаиРезервовНУ", НачисленоФССНесчастныеСлучаиРезервовНУ);
	СтруктураПараметровРасчета.Вставить("ВсегоНачисленоРезервовНУ",               ВсегоНачисленоРезервовНУ);
	
	ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета);
	
	Если НЕ СтруктураПараметровРасчета.Инвентаризация Тогда
		СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты);
		Если СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ Тогда
			СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, "НУ");
		КонецЕсли;
	КонецЕсли;
	ДополнитьТаблицуНакопленнымиРезервами(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Регистратор);
	
	СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета);
	Если СтруктураПараметровРасчета.Инвентаризация Тогда
		СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, "НУ");
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизацияСведенийОСуммеРезервовБУиНУ(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	Для Каждого СтрокаТаблицы Из ПараметрыРасчетаОбязательств Цикл
		Если СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ Тогда
			СтрокаТаблицы.СуммаРезерваИсчисленоНУ                    = СтрокаТаблицы.СуммаРезерваИсчислено;
			СтрокаТаблицы.СуммаРезерваСтраховыхВзносовИсчисленоНУ    = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовИсчислено;
			СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиИсчислено;
		КонецЕсли;
		Если НЕ СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ Тогда
			СтрокаТаблицы.СуммаРезерваИсчислено                    = 0;
			СтрокаТаблицы.СуммаРезерваСтраховыхВзносовИсчислено    = 0;
			СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиИсчислено = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НормативныйМетод

Процедура СуммыРезервовОтпусковНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "")
	
	Если СтруктураПараметровРасчета.МетодНачисленияРезерваОтпусков =  Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод 
		ИЛИ ВидУчета = "НУ" Тогда
		
		Для Каждого СтрокаТаблицы Из ПараметрыРасчетаОбязательств Цикл
			
			СтрокаТаблицы["СуммаРезерваИсчислено" + ВидУчета]                    = Окр(СтрокаТаблицы.ФОТ*СтруктураПараметровРасчета.НормативОтчисленийВРезервОтпусков/100,2);
			СтрокаТаблицы["СуммаРезерваСтраховыхВзносовИсчислено" + ВидУчета]    = Окр(СтрокаТаблицы.СтраховыеВзносы*СтруктураПараметровРасчета.НормативОтчисленийВРезервОтпусков/100,2);
			СтрокаТаблицы["СуммаРезерваФССНесчастныеСлучаиИсчислено" + ВидУчета] = Окр(СтрокаТаблицы.ФССНесчастныеСлучаи*СтруктураПараметровРасчета.НормативОтчисленийВРезервОтпусков/100,2);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммыРезервовТекущегоМесяцаНормативныйМетод(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Реквизиты, ВидУчета = "")
	
	Если ((СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ И СтруктураПараметровРасчета.МетодНачисленияРезерваОтпусков =  Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод))
		ИЛИ (СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ И ВидУчета = "НУ") Тогда
		
		Если СтруктураПараметровРасчета["ВсегоНакопленоРезервов" + ВидУчета] + СтруктураПараметровРасчета["ВсегоНачисленоРезервов" + ВидУчета] > СтруктураПараметровРасчета.ПредельнаяВеличинаОтчисленийВРезервОтпусков Тогда
			Разница = СтруктураПараметровРасчета.ПредельнаяВеличинаОтчисленийВРезервОтпусков - СтруктураПараметровРасчета["ВсегоНакопленоРезервов" + ВидУчета];
			Разница = Мин(Разница,СтруктураПараметровРасчета["ВсегоНачисленоРезервов" + ВидУчета], СтруктураПараметровРасчета.ПредельнаяВеличинаРезерваТекущегоМесяца);
			Если Разница <> 0 Тогда
				
				ВсегоНачисленоРезервов = СтруктураПараметровРасчета["НачисленоРезервов" + ВидУчета]
					+ СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]
					+ СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета];
				
				ДоляВзносов =  ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
				ВзносыКНачислению  = Окр(Разница*ДоляВзносов, 2);
				
				ДоляФССНесчастныеСлучаи = ?(ВсегоНачисленоРезервов = 0, 0, СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета]/ВсегоНачисленоРезервов);
				
				ФССНесчастныеСлучаиКНачислению  = Окр(Разница*ДоляФССНесчастныеСлучаи, 2);
				
				РезервКНачислению = Разница - ВзносыКНачислению - ФССНесчастныеСлучаиКНачислению;
				
				РаспределитьСуммуПоКолонкеТаблицы(РезервКНачислению,
					ПараметрыРасчетаОбязательств,
					"СуммаРезерва" + ВидУчета,
					"СуммаРезерваИсчислено" + ВидУчета);
				РаспределитьСуммуПоКолонкеТаблицы(ВзносыКНачислению,
					ПараметрыРасчетаОбязательств,
					"СуммаРезерваСтраховыхВзносов" + ВидУчета,
					"СуммаРезерваСтраховыхВзносовИсчислено" + ВидУчета);
				РаспределитьСуммуПоКолонкеТаблицы(ФССНесчастныеСлучаиКНачислению,
					ПараметрыРасчетаОбязательств,
					"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета,
					"СуммаРезерваФССНесчастныеСлучаиИсчислено" + ВидУчета);
				
			Иначе
				
				ПараметрыРасчетаОбязательств.ЗаполнитьЗначения(0, "СуммаРезерва" + ВидУчета);
				ПараметрыРасчетаОбязательств.ЗаполнитьЗначения(0, "СуммаРезерваСтраховыхВзносов" + ВидУчета);
				ПараметрыРасчетаОбязательств.ЗаполнитьЗначения(0, "СуммаРезерваФССНесчастныеСлучаи" + ВидУчета);
				
			КонецЕсли;
			
		Иначе
			
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоРезервов" + ВидУчета],
				ПараметрыРасчетаОбязательств,
				"СуммаРезерва" + ВидУчета,
				"СуммаРезерваИсчислено" + ВидУчета);
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоВзносовРезервов" + ВидУчета],
				ПараметрыРасчетаОбязательств,
				"СуммаРезерваСтраховыхВзносов" + ВидУчета,
				"СуммаРезерваСтраховыхВзносовИсчислено" + ВидУчета);
			РаспределитьСуммуПоКолонкеТаблицы(СтруктураПараметровРасчета["НачисленоФССНесчастныеСлучаиРезервов" + ВидУчета],
				ПараметрыРасчетаОбязательств,
				"СуммаРезерваФССНесчастныеСлучаи" + ВидУчета,
				"СуммаРезерваФССНесчастныеСлучаиИсчислено" + ВидУчета);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуНакопленнымиРезервами(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, Регистратор)
	
	Если (СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ И СтруктураПараметровРасчета.МетодНачисленияРезерваОтпусков =  Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод) 
		ИЛИ СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ 
		ИЛИ СтруктураПараметровРасчета.Инвентаризация Тогда
		
		ТолькоНУ = НЕ СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ И СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ;
		
		ТаблицаОстатков = ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств);
		
		ПараметрыРасчетаОбязательств.Колонки.Добавить("КоэффициентРавномерности",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)));
		ПараметрыРасчетаОбязательств.ЗаполнитьЗначения(1, "КоэффициентРавномерности");
		
		Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
			
			СтруктураОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
			МассивСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли МассивСтрок.Количество() = 1 Тогда
				ТекущаяСтрока = МассивСтрок[0];
				Если НЕ ТолькоНУ Тогда
					ТекущаяСтрока.СуммаРезерваНакоплено =                    СтрокаТаблицы.СуммаРезерваОстаток;
					ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакоплено =    СтрокаТаблицы.СуммаРезерваСтраховыхВзносовОстаток;
					ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакоплено = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиОстаток;
				КонецЕсли;
				ТекущаяСтрока.СуммаРезерваНакопленоНУ =                      СтрокаТаблицы.СуммаРезерваОстатокНУ;
				ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакопленоНУ =      СтрокаТаблицы.СуммаРезерваСтраховыхВзносовОстатокНУ;
				ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ =   СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиОстатокНУ;
			Иначе
				ТекущаяСтрока = МассивСтрок[0];
				Если НЕ ТолькоНУ Тогда
					ТекущаяСтрока.СуммаРезерваНакоплено = СтрокаТаблицы.СуммаРезерваОстаток;
					
					ИмяКолонкиРаспределения = "ОстатокОтпуска";
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, ИмяКолонкиРаспределения) = 0 Тогда
						ИмяКолонкиРаспределения = "КоэффициентРавномерности";
					КонецЕсли;
					
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерва") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваНакоплено", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваНакоплено", "СуммаРезерва");
					КонецЕсли;
					
					ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакоплено = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовОстаток;
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерваСтраховыхВзносов") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакоплено", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакоплено", "СуммаРезерваСтраховыхВзносов");
					КонецЕсли;
					
					ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакоплено = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиОстаток;
					Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи") = 0 Тогда
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакоплено", ИмяКолонкиРаспределения);
					Иначе
						РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакоплено", "СуммаРезерваФССНесчастныеСлучаи");
					КонецЕсли;
				КонецЕсли;
				
				ТекущаяСтрока.СуммаРезерваНакопленоНУ = СтрокаТаблицы.СуммаРезерваОстатокНУ;
				Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерваНУ") = 0 Тогда
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваНакопленоНУ", ИмяКолонкиРаспределения);
				Иначе
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваНакопленоНУ", "СуммаРезерваНУ");
				КонецЕсли;
				
				ТекущаяСтрока.СуммаРезерваСтраховыхВзносовНакопленоНУ = СтрокаТаблицы.СуммаРезерваСтраховыхВзносовОстатокНУ;
				Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ") = 0 Тогда
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакопленоНУ", ИмяКолонкиРаспределения);
				Иначе
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваСтраховыхВзносовНакопленоНУ", "СуммаРезерваСтраховыхВзносовНУ");
				КонецЕсли;
				
				ТекущаяСтрока.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ = СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиОстатокНУ;
				Если ИтогПоКолонкеМассиваСтрок(МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ") = 0 Тогда
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", ИмяКолонкиРаспределения);
				Иначе
					РаспределитьСуммуОстатка(МассивСтрок, ТекущаяСтрока, "СуммаРезерваФССНесчастныеСлучаиНакопленоНУ", "СуммаРезерваФССНесчастныеСлучаиНУ");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Уволен = Истина Тогда
				Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
					СтрокаМассива.СуммаРезерва =                      - СтрокаМассива.СуммаРезерваНакоплено;
					СтрокаМассива.СуммаРезерваСтраховыхВзносов =      - СтрокаМассива.СуммаРезерваСтраховыхВзносовНакоплено;
					СтрокаМассива.СуммаРезерваФССНесчастныеСлучаи =   - СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНакоплено;
					СтрокаМассива.СуммаРезерваНУ =                    - СтрокаМассива.СуммаРезерваНакопленоНУ;
					СтрокаМассива.СуммаРезерваСтраховыхВзносовНУ =    - СтрокаМассива.СуммаРезерваСтраховыхВзносовНакопленоНУ;
					СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНУ = - СтрокаМассива.СуммаРезерваФССНесчастныеСлучаиНакопленоНУ;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИтогПоКолонкеМассиваСтрок(МассивСтрок, ИмяКолонки)
	
	Итог = 0;
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		Итог = Итог + СтрокаМассива[ИмяКолонки];
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

#КонецОбласти

#Область РезервОтпусковМетодОбязательств

// Содержимое модуля отличается в версиях ПРОФ и КОРП

#Область Соглашения

Функция УточнитьМетодНачисленияРезерваОтпусков(Организация, Период) Экспорт

	Результат = Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод;
	
	// Версия КОРП
	НастройкиРезервовОтпусков = НастройкиРезервовОтпусков(Организация, НачалоМесяца(Период));
	Результат = НастройкиРезервовОтпусков.МетодНачисленияРезерваОтпусков;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область МетодОбязательств

Процедура СуммыРезервовОтпусковМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета) Экспорт
	
	Если СтруктураПараметровРасчета.МетодНачисленияРезерваОтпусков =  Перечисления.МетодыНачисленияРезервовОтпусков.МетодОбязательств 
		ИЛИ СтруктураПараметровРасчета.Инвентаризация Тогда
		
		ПредыдущийПериод = КонецМесяца(ДобавитьМесяц(СтруктураПараметровРасчета.ПериодРегистрации, -1));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаОбязательств",    ПараметрыРасчетаОбязательств);
		Запрос.УстановитьПараметр("Организация",            СтруктураПараметровРасчета.Организация);
		Запрос.УстановитьПараметр("ПредыдущийПериодНачало", НачалоМесяца(ПредыдущийПериод));
		Запрос.УстановитьПараметр("ПредыдущийПериодКонец",  КонецМесяца(ПредыдущийПериод));
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОбязательств.Сотрудник,
		|	ТаблицаОбязательств.ФОТ,
		|	ТаблицаОбязательств.СтраховыеВзносы,
		|	ТаблицаОбязательств.ФССНесчастныеСлучаи,
		|	ТаблицаОбязательств.ОстатокОтпуска,
		|	ТаблицаОбязательств.ОтпускАвансом,
		|	ТаблицаОбязательств.СреднийЗаработок
		|ПОМЕСТИТЬ ВТ_ТаблицаОбязательств
		|ИЗ
		|	&ТаблицаОбязательств КАК ТаблицаОбязательств
		|ГДЕ
		|	ТаблицаОбязательств.ФОТ = 0
		|	И ТаблицаОбязательств.СтраховыеВзносы = 0
		|	И ТаблицаОбязательств.ФССНесчастныеСлучаи = 0
		|	И ТаблицаОбязательств.СреднийЗаработок <> 0
		|	И ТаблицаОбязательств.ОстатокОтпуска <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РасчетРезерваОтпусков.ТекущаяСтавкаСтраховыхВзносов) КАК ТекущаяСтавкаСтраховыхВзносов,
		|	МАКСИМУМ(РасчетРезерваОтпусков.ТекущаяСтавкаФССНесчастныеСлучаи) КАК ТекущаяСтавкаФССНесчастныеСлучаи,
		|	РасчетРезерваОтпусков.Сотрудник
		|ИЗ
		|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств,
		|	РегистрСведений.РасчетРезерваОтпусков КАК РасчетРезерваОтпусков
		|ГДЕ
		|	РасчетРезерваОтпусков.ПериодРасчета МЕЖДУ &ПредыдущийПериодНачало И &ПредыдущийПериодКонец
		|	И РасчетРезерваОтпусков.Организация = &Организация
		|	И РасчетРезерваОтпусков.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаОбязательств.Сотрудник КАК Сотрудник
		|			ИЗ
		|				ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетРезерваОтпусков.Сотрудник";
		
		ТаблицаСтавокПредыдущегоПериода = Запрос.Выполнить().Выгрузить();
		
		СводнаяТаблица =  ПараметрыРасчетаОбязательств.Скопировать();
		
		СводнаяТаблица.Свернуть("Сотрудник", "СтраховыеВзносы, ФССНесчастныеСлучаи, ФОТ");
		
		Для Каждого СтрокаТаблицы Из ПараметрыРасчетаОбязательств Цикл
			
			ОтборПоСотруднику = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
			
			МассивСтрок = СводнаяТаблица.НайтиСтроки(ОтборПоСотруднику);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				
				// Проверка на случай нулевого ФОТа
				Если МассивСтрок[0].ФОТ = 0 Тогда
				
					НулевойЗнаменатель = Истина;
					
				Иначе 
					
					НулевойЗнаменатель = Ложь;
					
				КонецЕсли;
				
				// Проверка на случай отсутствия остатка отпусков или среднего заработка
				Если (СтрокаТаблицы.СреднийЗаработок = Null)
					ИЛИ (СтрокаТаблицы.ОстатокОтпуска = Null)
					ИЛИ (СтрокаТаблицы.ОтпускАвансом = Null)
					ИЛИ СтрокаТаблицы.ОстатокОтпуска <= 0 
					ИЛИ СтрокаТаблицы.ОстатокОтпуска <= СтрокаТаблицы.ОтпускАвансом
					Тогда
				
					СтрокаТаблицы.СуммаРезерваИсчислено = 0;
				
				Иначе
				
					СтрокаТаблицы.СуммаРезерваИсчислено = Окр(СтрокаТаблицы.СреднийЗаработок*(СтрокаТаблицы.ОстатокОтпуска - СтрокаТаблицы.ОтпускАвансом), 2);
				
				КонецЕсли;
				
				МассивСтавокПредыдущегоПериода = ТаблицаСтавокПредыдущегоПериода.НайтиСтроки(ОтборПоСотруднику);
				// Расчет на случай нулевого ФОТа
				Если НулевойЗнаменатель Тогда
					
					СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов = 0;
					
					Если МассивСтавокПредыдущегоПериода.Количество() <> 0 Тогда
						СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов = МассивСтавокПредыдущегоПериода[0].ТекущаяСтавкаСтраховыхВзносов;
					КонецЕсли;
				
				Иначе
				
					Если НЕ СтруктураПараметровРасчета.Инвентаризация Тогда
						СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов = Окр(МассивСтрок[0].СтраховыеВзносы/МассивСтрок[0].ФОТ*100, 4);
					КонецЕсли;
				
				КонецЕсли; 
				
				СтрокаТаблицы.СуммаРезерваСтраховыхВзносовИсчислено = Окр(СтрокаТаблицы.СуммаРезерваИсчислено*СтрокаТаблицы.ТекущаяСтавкаСтраховыхВзносов/100, 2);
				
				Если НулевойЗнаменатель Тогда
				
					СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи = 0;
					
					Если МассивСтавокПредыдущегоПериода.Количество() <> 0 Тогда
						СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи = МассивСтавокПредыдущегоПериода[0].ТекущаяСтавкаФССНесчастныеСлучаи;
					КонецЕсли;
				
				Иначе
					
					Если НЕ СтруктураПараметровРасчета.Инвентаризация Тогда
						СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи = Окр(МассивСтрок[0].ФССНесчастныеСлучаи/МассивСтрок[0].ФОТ*100, 4);
					КонецЕсли;
					
				КонецЕсли; 
				
				СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиИсчислено = Окр(СтрокаТаблицы.СуммаРезерваИсчислено*СтрокаТаблицы.ТекущаяСтавкаФССНесчастныеСлучаи/100, 2);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из СводнаяТаблица Цикл
			
			МассивСтрок = ПараметрыРасчетаОбязательств.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник));
			
			РаспределитьСуммуПоКолонкеТаблицы(МассивСтрок[0].СуммаРезерваИсчислено,
				МассивСтрок,
				"СуммаРезерваИсчислено",
				"ФОТ");
			РаспределитьСуммуПоКолонкеТаблицы(МассивСтрок[0].СуммаРезерваСтраховыхВзносовИсчислено,
				МассивСтрок,
				"СуммаРезерваСтраховыхВзносовИсчислено",
				"ФОТ");
			РаспределитьСуммуПоКолонкеТаблицы(МассивСтрок[0].СуммаРезерваФССНесчастныеСлучаиИсчислено,
				МассивСтрок,
				"СуммаРезерваФССНесчастныеСлучаиИсчислено",
				"ФОТ");
			РаспределитьСуммуПоКолонкеТаблицы(МассивСтрок[0].ОстатокОтпуска,
				МассивСтрок,
				"ОстатокОтпуска",
				"ФОТ");
			РаспределитьСуммуПоКолонкеТаблицы(МассивСтрок[0].ОтпускАвансом,
				МассивСтрок,
				"ОтпускАвансом",
				"ФОТ");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетСуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "")
	
	Инвентаризация = СтруктураПараметровРасчета.Инвентаризация;
	Если ВидУчета = "НУ" Тогда
		Списывать = Истина;
		ИспользоватьДетализацию = Инвентаризация;
	Иначе
		Списывать = Инвентаризация
		ИЛИ СтруктураПараметровРасчета.ОпределятьИзлишкиЕжемесячно;
		ИспользоватьДетализацию = Истина;
	КонецЕсли;
	
	ТаблицаОстатков = ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ИспользоватьДетализацию);
	
	ПараметрыАлитики = ПараметрыРасчетаОбязательств.Скопировать();
	ПараметрыАлитики.Свернуть("Сотрудник");
	Для Каждого СтрокаТаблицы ИЗ ПараметрыАлитики Цикл
		
		СтруктураОтбора = Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник);
		МассивРезервов = ПараметрыРасчетаОбязательств.НайтиСтроки(СтруктураОтбора);
		МассивОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		ТаблицаОстатковВременная = ТаблицаОстатков.Скопировать(МассивОстатков);
		
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерва",                    ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация);
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерваСтраховыхВзносов",    ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация);
		СуммаРезерваТекущегоМесяцаМетодОбязательств("СуммаРезерваФССНесчастныеСлучаи", ВидУчета, МассивРезервов, ТаблицаОстатковВременная, Списывать, Инвентаризация);
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура СуммаРезерваТекущегоМесяцаМетодОбязательств(ИмяПоказателя, ВидУчета, МассивРезервов, ТаблицаОстатков, Списывать, Инвентаризация)
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		Для Каждого ТекущаяСтрока ИЗ МассивРезервов Цикл
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = ТекущаяСтрока[ИмяПоказателя + "Исчислено" + ВидУчета];
		КонецЦикла;
	Иначе
		
		ИмяКолонкиРаспределения = "ФОТ";
		Если ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяКолонкиРаспределения) = 0 Тогда
			ИмяКолонкиРаспределения = "ОстатокОтпуска";
		КонецЕсли;
		
		СуммаРезерваНакоплено = ТаблицаОстатков.Итог(ИмяПоказателя + "Остаток" + ВидУчета);
		РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерваНакоплено, МассивРезервов, ИмяПоказателя + "Накоплено" + ВидУчета, ИмяКолонкиРаспределения);
		
		СуммаРезерваИсчислено = ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + "Исчислено" + ВидУчета);
		СуммаРезерва = СуммаРезерваИсчислено - СуммаРезерваНакоплено;
		РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерва, МассивРезервов, ИмяПоказателя + ВидУчета, ИмяКолонкиРаспределения);
		
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока ИЗ МассивРезервов Цикл
		Если ТекущаяСтрока[ИмяПоказателя + ВидУчета] < 0
			И НЕ Списывать Тогда
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Уволен = Истина Тогда
			ТекущаяСтрока[ИмяПоказателя + ВидУчета] = -ТекущаяСтрока[ИмяПоказателя + "Накоплено" + ВидУчета];
		КонецЕсли;
	КонецЦикла;
	
	// Возможно в учете по части статей уже не остатков и списывать по ним нельзя
	СуммаРезерва = ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + ВидУчета);
	Если СуммаРезерва < 0
		И ((ВидУчета = "" И Списывать) ИЛИ Инвентаризация) Тогда
		
		МассивРезервовВременный = Новый Массив;
		ТребуетсяПерераспределение = Ложь;
		
		Для Каждого ТекущаяСтрока ИЗ МассивРезервов Цикл
			
			МассивРезервовВременный.Добавить(ТекущаяСтрока[ИмяПоказателя + ВидУчета]);
			
			СтруктураОтбора = Новый Структура("СтатьяФинансирования", ТекущаяСтрока.СтатьяФинансирования);
			МассивОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			
			Если МассивОстатков.Количество() = 0 Тогда
				ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
				ТребуетсяПерераспределение = Истина;
			Иначе
				Для Каждого СтрокаОстатков ИЗ МассивОстатков Цикл
					Если СтрокаОстатков.СтатьяФинансирования = ТекущаяСтрока.СтатьяФинансирования Тогда
						СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета] = СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета] - ТекущаяСтрока[ИмяПоказателя + ВидУчета];
					КонецЕсли;
					Если СтрокаОстатков[ИмяПоказателя + "Остаток" + ВидУчета]<0 Тогда
						ТекущаяСтрока[ИмяПоказателя + ВидУчета] = 0;
						ТребуетсяПерераспределение = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяПерераспределение Тогда
			БазаРаспределения = ИтогПоКолонкеМассиваСтрок(МассивРезервов, ИмяПоказателя + ВидУчета);
			Если БазаРаспределения <> 0 Тогда
				РаспределитьСуммуПоКолонкеТаблицы(СуммаРезерва, МассивРезервов, ИмяПоказателя + ВидУчета);
			Иначе
				Для НомерЗаписи = 1 По МассивРезервовВременный.Количество() Цикл
					МассивРезервов[НомерЗаписи-1][ИмяПоказателя + ВидУчета] = МассивРезервовВременный[НомерЗаписи-1];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета = "") Экспорт
	
	Если (ВидУчета = "НУ"
			И СтруктураПараметровРасчета.ФормироватьРезервОтпусковНУ
			И СтруктураПараметровРасчета.Инвентаризация) // инвентаризация в НУ
		ИЛИ
		(ВидУчета = ""
			И ((СтруктураПараметровРасчета.ФормироватьРезервОтпусковБУ
				И СтруктураПараметровРасчета.МетодНачисленияРезерваОтпусков =  Перечисления.МетодыНачисленияРезервовОтпусков.МетодОбязательств)
			ИЛИ СтруктураПараметровРасчета.Инвентаризация)) Тогда // инвентаризация в БУ или метод обязательств
		
		РасчетСуммыРезервовТекущегоМесяцаМетодОбязательств(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета, ВидУчета);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВходящиеОстатки(СтруктураПараметровРасчета, ПараметрыРасчетаОбязательств, ИспользоватьДетализацию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("Период",        Новый Граница(КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",   СтруктураПараметровРасчета.Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток) КАК СуммаРезерваОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваНУОстаток) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовНУОстаток) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиНУОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(&Период, Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУПриход),
	|	СУММА(-ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход),
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Сотрудник КАК Сотрудник,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстаток) КАК СуммаРезерваОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстатокНУ) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстатокНУ) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстаток + ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстаток + ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезервовВсегоБУ,
	|	СУММА(ВТ_Остатки.СуммаРезерваОстатокНУ + ВТ_Остатки.СуммаРезерваСтраховыхВзносовОстатокНУ + ВТ_Остатки.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезервовВсегоНУ,
	|	ВТ_Остатки.СтатьяФинансирования КАК СтатьяФинансирования
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОстатки.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ОценочныеОбязательстваОстатки.СуммаНУОстаток) КАК СуммаОстатокНУ
	|ПОМЕСТИТЬ ВТ_СводныеОстатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Остатки(&Период, Организация = &Организация) КАК ОценочныеОбязательстваОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстатки.ТипОценочногоОбязательства
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
	|	СУММА(-ОценочныеОбязательстваОбороты.СуммаПриход),
	|	СУММА(-ОценочныеОбязательстваОбороты.СуммаНУПриход)
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваОстатокНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_СводныеОстатки.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ВТ_СводныеОстатки.СуммаОстатокНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	СУММА(ВТ_СводныеОстатки.СуммаОстаток) КАК СуммаРезервовВсегоБУ,
	|	СУММА(ВТ_СводныеОстатки.СуммаОстатокНУ) КАК СуммаРезервовВсегоНУ
	|ИЗ
	|	ВТ_СводныеОстатки КАК ВТ_СводныеОстатки";
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатПоСотрудникам = Результат[1].Выгрузить();
	РезультатСводный       = Результат[3].Выгрузить();
	
	Если РезультатПоСотрудникам.Итог("СуммаРезервовВсегоБУ") <> РезультатСводный.Итог("СуммаРезервовВсегоБУ")
		ИЛИ РезультатПоСотрудникам.Итог("СуммаРезервовВсегоНУ") <> РезультатСводный.Итог("СуммаРезервовВсегоНУ") Тогда
		
		ТаблицаРаспределенияОстатков = ПараметрыРасчетаОбязательств.Скопировать();
		ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваОстаток",                      ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваСтраховыхВзносовОстаток",      ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиОстаток",   ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваОстатокНУ",                    ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваСтраховыхВзносовОстатокНУ",    ОписаниеТиповЧисло);
		ТаблицаРаспределенияОстатков.Колонки.Добавить("СуммаРезерваФССНесчастныеСлучаиОстатокНУ", ОписаниеТиповЧисло);
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваОстаток", "СуммаРезерваИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваСтраховыхВзносовОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваСтраховыхВзносовОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваСтраховыхВзносовОстаток", "СуммаРезерваСтраховыхВзносовИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваФССНесчастныеСлучаиОстаток") - РезультатПоСотрудникам.Итог("СуммаРезерваФССНесчастныеСлучаиОстаток");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваФССНесчастныеСлучаиОстаток", "СуммаРезерваФССНесчастныеСлучаиИсчислено");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваОстатокНУ", "СуммаРезерваИсчисленоНУ");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваСтраховыхВзносовОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваСтраховыхВзносовОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваСтраховыхВзносовОстатокНУ", "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		КонецЕсли;
		
		СуммаРаспределения = РезультатСводный.Итог("СуммаРезерваФССНесчастныеСлучаиОстатокНУ") - РезультатПоСотрудникам.Итог("СуммаРезерваФССНесчастныеСлучаиОстатокНУ");
		Если СуммаРаспределения <> 0 Тогда
			РаспределитьСуммуПоКолонкеТаблицы(СуммаРаспределения, ТаблицаРаспределенияОстатков, "СуммаРезерваФССНесчастныеСлучаиОстатокНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатПоСотрудникам, ТаблицаРаспределенияОстатков);
		
		КолонкиСвертки = "Сотрудник";
		Если ИспользоватьДетализацию Тогда
			КолонкиСвертки = КолонкиСвертки + ", СтатьяФинансирования";
		КонецЕсли;
		
		ТаблицаРаспределенияОстатков.Свернуть(КолонкиСвертки, "СуммаРезерваОстаток, СуммаРезерваСтраховыхВзносовОстаток, СуммаРезерваФССНесчастныеСлучаиОстаток, СуммаРезерваОстатокНУ, СуммаРезерваСтраховыхВзносовОстатокНУ, СуммаРезерваФССНесчастныеСлучаиОстатокНУ");
		
		Возврат ТаблицаРаспределенияОстатков;
		
	Иначе
		
		Возврат РезультатПоСотрудникам;
		
	КонецЕсли;
	
КонецФункции

Процедура РаспределитьСуммуОстатка(МассивСтрок, СтрокаТаблицы, ИмяКолонкиСуммы, ИмяКолонкиБазы = "")
	
	РаспределяемаяСумма = СтрокаТаблицы[ИмяКолонкиСуммы];
	
	Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
		ИмяКолонкиБазы = ИмяКолонкиСуммы;
	КонецЕсли;
	
	// Распределение по колонке таблицы резервов
	МассивСтарыхСумм = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивСтрок Цикл
		МассивСтарыхСумм.Добавить(ЗначениеМассива[ИмяКолонкиБазы]);
	КонецЦикла;
	МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
	Если МассивНовыхСумм <> Неопределено Тогда
		ИндексСтроки = 0;
		КоличествоСтрок = МассивСтрок.Количество();
		Пока ИндексСтроки < КоличествоСтрок Цикл
			МассивСтрок[ИндексСтроки][ИмяКолонкиСуммы] = МассивНовыхСумм[ИндексСтроки];
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	Иначе
		// Распределение по дням отпуска
		МассивСтарыхСумм = Новый Массив;
		Для Каждого ЗначениеМассива Из МассивСтрок Цикл
			МассивСтарыхСумм.Добавить(ЗначениеМассива.ОстатокОтпуска + ЗначениеМассива.ОтпускАвансом);
		КонецЦикла;
		МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
			ИндексСтроки = 0;
			КоличествоСтрок = МассивСтрок.Количество();
			Пока ИндексСтроки < КоличествоСтрок Цикл
				МассивСтрок[ИндексСтроки][ИмяКолонкиСуммы] = МассивНовыхСумм[ИндексСтроки];
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			// Нет базы распределения - весь остаток в одной строке
			МассивСтрок[0][ИмяКолонкиСуммы] = РаспределяемаяСумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РезервОтпусковПереопределяемый

#Область НакопленныеРезервы

// Получаем суммы накопленных резервов по сотрудникам 
// для отражения в учете оплаты отпуска за счет резерва.
//
Функция НакопленныеОценочныеОбязательства(Организация, Период, ДокументСсылка, Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Период",        Период);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Регистратор",   ДокументСсылка);
	Запрос.УстановитьПараметр("Сотрудники",    Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваОстаток) КАК Сумма,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовОстаток) КАК СтраховыеВзносы,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК ФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваНУОстаток) КАК СуммаНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваСтраховыхВзносовНУОстаток) КАК СтраховыеВзносыНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстатки.СуммаРезерваФССНесчастныеСлучаиНУОстаток) КАК ФССНесчастныеСлучаиНУ
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОстатки.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник КАК Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваОборот) КАК Сумма,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовОборот) КАК СтраховыеВзносы,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиОборот) КАК ФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУОборот) КАК СуммаНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУОборот) КАК СтраховыеВзносыНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУОборот) КАК ФССНесчастныеСлучаиНУ
	|ПОМЕСТИТЬ ВТ_Исключения
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор <> &Регистратор
	|	И ВЫБОР
	|			КОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	|				ТОГДА ВЫБОР
	|						КОГДА ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор.КорректировкаОбязательств
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Сотрудник КАК Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(ВТ_Остатки.Сумма + ЕСТЬNULL(ВТ_Исключения.Сумма, 0)) КАК Сумма,
	|	СУММА(ВТ_Остатки.СтраховыеВзносы + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносы, 0)) КАК СтраховыеВзносы,
	|	СУММА(ВТ_Остатки.ФССНесчастныеСлучаи + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаи, 0)) КАК ФССНесчастныеСлучаи,
	|	СУММА(ВТ_Остатки.СуммаНУ + ЕСТЬNULL(ВТ_Исключения.СуммаНУ, 0)) КАК СуммаНУ,
	|	СУММА(ВТ_Остатки.СтраховыеВзносыНУ + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносыНУ, 0)) КАК СтраховыеВзносыНУ,
	|	СУММА(ВТ_Остатки.ФССНесчастныеСлучаиНУ + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаиНУ, 0)) КАК ФССНесчастныеСлучаиНУ
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключения КАК ВТ_Исключения
	|		ПО ВТ_Остатки.Сотрудник = ВТ_Исключения.Сотрудник
	|			И ВТ_Остатки.СтатьяФинансирования = ВТ_Исключения.СтатьяФинансирования
	|ГДЕ
	|	(ВТ_Остатки.Сумма + ЕСТЬNULL(ВТ_Исключения.Сумма, 0) <> 0
	|			ИЛИ ВТ_Остатки.СтраховыеВзносы + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносы, 0) <> 0
	|			ИЛИ ВТ_Остатки.ФССНесчастныеСлучаи + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаи, 0) <> 0
	|			ИЛИ ВТ_Остатки.СуммаНУ + ЕСТЬNULL(ВТ_Исключения.СуммаНУ, 0) <> 0
	|			ИЛИ ВТ_Остатки.СтраховыеВзносыНУ + ЕСТЬNULL(ВТ_Исключения.СтраховыеВзносыНУ, 0) <> 0
	|			ИЛИ ВТ_Остатки.ФССНесчастныеСлучаиНУ + ЕСТЬNULL(ВТ_Исключения.ФССНесчастныеСлучаиНУ, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Сотрудник,
	|	ВТ_Остатки.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	СтатьяФинансирования";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОпределениеДолиРезерва

Функция РассчитыватьДолиРезерваПоБУ(Организация, Период) Экспорт
	
	Возврат УточнитьМетодНачисленияРезерваОтпусков(Организация, Период) = Перечисления.МетодыНачисленияРезервовОтпусков.НормативныйМетод;
	
КонецФункции

Функция ДоляРезерваОтпусков(Период, Организация, Регистратор = Неопределено) Экспорт
	
	НастройкиРезервовОтпусков = НастройкиРезервовОтпусков(Организация, НачалоМесяца(Период));
	РассчитыватьДолиПоНУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	РассчитыватьДолиПоБУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ;

	Если РассчитыватьДолиПоБУ Тогда
		РассчитыватьДолиПоБУ = РассчитыватьДолиРезерваПоБУ(Организация, Период);
	КонецЕсли;
	
	Если НЕ РассчитыватьДолиПоБУ И НЕ РассчитыватьДолиПоНУ Тогда
		Возврат 0;
	КонецЕсли;
	
	Организации = ВсяОрганизация(Организация);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	
	Если Регистратор = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства,
		|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход) КАК НакопленныйРезерв,
		|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход) КАК НакопленныйРезервНУ
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация В (&Организации)) КАК ОценочныеОбязательстваОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства,
		|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход) КАК НакопленныйРезерв,
		|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход) КАК НакопленныйРезервНУ
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация В (&Организации)) КАК ОценочныеОбязательстваОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
		|	СУММА(ОценочныеОбязательстваОбороты.СуммаПриход) КАК Оборот,
		|	СУММА(ОценочныеОбязательстваОбороты.СуммаНУПриход) КАК ОборотНУ
		|ПОМЕСТИТЬ ВТ_ТекущиеОбороты
		|ИЗ
		|	РегистрНакопления.ОценочныеОбязательства.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация В (&Организации)) КАК ОценочныеОбязательстваОбороты
		|ГДЕ
		|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
		|	СУММА(ВТ_ОстаткиИОбороты.НакопленныйРезерв - ЕСТЬNULL(ВТ_ТекущиеОбороты.Оборот, 0)) КАК НакопленныйРезерв,
		|	СУММА(ВТ_ОстаткиИОбороты.НакопленныйРезервНУ - ЕСТЬNULL(ВТ_ТекущиеОбороты.ОборотНУ, 0)) КАК НакопленныйРезервНУ
		|ИЗ
		|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОбороты КАК ВТ_ТекущиеОбороты
		|		ПО ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства = ВТ_ТекущиеОбороты.ТипОценочногоОбязательства
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства";
	КонецЕсли;

	ТаблицаНакопленныхРезервов = Запрос.Выполнить().Выгрузить();
		
	ТаблицаФондаОплатыТруда = ОтражениеЗарплатыВБухучете.ФондОплатыТрудаПоОрганизациямДляРасчетаОценочныхОбязательствОтпусков(Организации, Период);
	
	НормативОтчисленийВРезервОтпусков           = НастройкиРезервовОтпусков.НормативОтчисленийВРезервОтпусков;
	ПредельнаяВеличинаОтчисленийВРезервОтпусков = НастройкиРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков;
	
	ФондОплатыТруда          = ТаблицаФондаОплатыТруда.Итог("ФондаОплатыТруда");
	ВсегоНачисленоРезервов   = Окр(ФондОплатыТруда*НормативОтчисленийВРезервОтпусков/100,2);
	
	Если РассчитыватьДолиПоБУ Тогда
		ВсегоНакопленоРезервов = ТаблицаНакопленныхРезервов.Итог("НакопленныйРезерв");
	Иначе
		ВсегоНакопленоРезервов = ТаблицаНакопленныхРезервов.Итог("НакопленныйРезервНУ");
	КонецЕсли;
	
	Если ВсегоНакопленоРезервов + ВсегоНачисленоРезервов > ПредельнаяВеличинаОтчисленийВРезервОтпусков Тогда
		Разница = ПредельнаяВеличинаОтчисленийВРезервОтпусков - ВсегоНакопленоРезервов;
		РезервОтпусковТекущегоМесяца = Макс(0,Мин(Разница,ВсегоНачисленоРезервов));
	Иначе
		РезервОтпусковТекущегоМесяца = ВсегоНачисленоРезервов;
	КонецЕсли;
	
	Если ФондОплатыТруда = 0 Тогда
		ДоляРезервовОтпусков = 0;
	Иначе
		ДоляРезервовОтпусков = РезервОтпусковТекущегоМесяца/ФондОплатыТруда;	
	КонецЕсли;
	// Эта доля - максимально допустимое соотношение между начисленным резервом текущего месяца
	// и фондом оплаты труда текущего месяца.
	
	ДолиСписанияКосвенныхРасходов = РегистрыСведений.ЗарплатаКадрыДолиСписанияКосвенныхРасходов.СоздатьМенеджерЗаписи();
	ДолиСписанияКосвенныхРасходов.Организация = Организация;
	ДолиСписанияКосвенныхРасходов.ПериодРасчета = Период;
	ДолиСписанияКосвенныхРасходов.Прочитать();
	ДолиСписанияКосвенныхРасходов.Организация = Организация;
	ДолиСписанияКосвенныхРасходов.ПериодРасчета = Период;
	ДолиСписанияКосвенныхРасходов.ДоляРезервовОтпусков = ДоляРезервовОтпусков;
	ДолиСписанияКосвенныхРасходов.Записать();
	
	Возврат ДоляРезервовОтпусков;
	
КонецФункции

Функция ДоляСписанияКосвенныхРасходов(Период, Организация, Регистратор = Неопределено) Экспорт
	
	ДолиСписанияКосвенныхРасходов = РегистрыСведений.ЗарплатаКадрыДолиСписанияКосвенныхРасходов.Получить(Новый Структура("Организация,ПериодРасчета", Организация, Период));
	ДоляРезервовОтпусков = ДолиСписанияКосвенныхРасходов.ДоляРезервовОтпусков;
	
	Если ДоляРезервовОтпусков = 0 Тогда
		ДоляРезервовОтпусков = ДоляРезерваОтпусков(Период, Организация, Регистратор);
	КонецЕсли;
	
	Возврат ДоляРезервовОтпусков;
	
КонецФункции

#КонецОбласти

#Область ОпределениеРазмераРезерваТекущегоПериода

// Получает накопленные с начала года суммы резервов с учетом движений текущего месяца.
//
Функция ТаблицаНакопленныхРезервовТекущегоМесяца(СтруктураПараметровРасчета, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток) КАК НачальныйОстатокНУ,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход) КАК Оборот,
	|	СУММА(ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход) КАК ОборотНУ
	|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация) КАК ОценочныеОбязательстваОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства,
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаПриход) КАК Оборот,
	|	СУММА(ОценочныеОбязательстваОбороты.СуммаНУПриход) КАК ОборотНУ
	|ПОМЕСТИТЬ ВТ_ТекущиеОбороты
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства КАК ТипОценочногоОбязательства,
	|	СУММА(ВТ_ОстаткиИОбороты.НачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ВТ_ОстаткиИОбороты.НачальныйОстатокНУ) КАК НачальныйОстатокНУ,
	|	СУММА(ВТ_ОстаткиИОбороты.Оборот - ЕСТЬNULL(ВТ_ТекущиеОбороты.Оборот, 0)) КАК Оборот,
	|	СУММА(ВТ_ОстаткиИОбороты.ОборотНУ - ЕСТЬNULL(ВТ_ТекущиеОбороты.ОборотНУ, 0)) КАК ОборотНУ
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОбороты КАК ВТ_ТекущиеОбороты
	|		ПО ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства = ВТ_ТекущиеОбороты.ТипОценочногоОбязательства
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОбороты.ТипОценочногоОбязательства";
	
	ТаблицаНакопленныхРезервов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНакопленныхРезервов;
	
КонецФункции

Процедура ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета)
	
	ТаблицаНакопленныхРезервов = ТаблицаНакопленныхРезервовТекущегоМесяца(СтруктураПараметровРасчета, СтруктураПараметровРасчета.Регистратор);
	
	ЗначениеРезервОтпусков                     = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям;
	ЗначениеВзносыРезерваОтпусков              = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам;
	ЗначениеФССНесчастныеСлучаиРезерваОтпусков = Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ;
	
	НакопленоРезервов                      = 0;
	НакопленоРезервовНУ                    = 0;
	НакопленоВзносовРезервов               = 0;
	НакопленоВзносовРезервовНУ             = 0;
	НакопленоФССНесчастныеСлучаиРезервов   = 0;
	НакопленоФССНесчастныеСлучаиРезервовНУ = 0;
	
	Если ТаблицаНакопленныхРезервов <> Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеРезервОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеВзносыРезерваОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоВзносовРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоВзносовРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаНакопленныхРезервов.Найти(ЗначениеФССНесчастныеСлучаиРезерваОтпусков, "ТипОценочногоОбязательства"); 
		Если НайденнаяСтрока <> Неопределено Тогда
			НакопленоФССНесчастныеСлучаиРезервов   = НайденнаяСтрока.НачальныйОстаток + НайденнаяСтрока.Оборот;
			НакопленоФССНесчастныеСлучаиРезервовНУ = НайденнаяСтрока.НачальныйОстатокНУ + НайденнаяСтрока.ОборотНУ;
		КонецЕсли;
		
	КонецЕсли;
	
	ВсегоНакопленоРезервов   = НакопленоРезервов + НакопленоВзносовРезервов + НакопленоФССНесчастныеСлучаиРезервов;
	ВсегоНакопленоРезервовНУ = НакопленоРезервовНУ + НакопленоВзносовРезервовНУ + НакопленоФССНесчастныеСлучаиРезервовНУ;
	
	СтруктураПараметровРасчета.Вставить("НакопленоРезервов",                      НакопленоРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервов",               НакопленоВзносовРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервов",   НакопленоФССНесчастныеСлучаиРезервов);
	СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервов",                 ВсегоНакопленоРезервов);
	СтруктураПараметровРасчета.Вставить("НакопленоРезервовНУ",                    НакопленоРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НакопленоВзносовРезервовНУ",             НакопленоВзносовРезервовНУ);
	СтруктураПараметровРасчета.Вставить("НакопленоФССНесчастныеСлучаиРезервовНУ", НакопленоФССНесчастныеСлучаиРезервовНУ);
	СтруктураПараметровРасчета.Вставить("ВсегоНакопленоРезервовНУ",               ВсегоНакопленоРезервовНУ);
	
КонецПроцедуры

// Возможно ранее регистрировались документы сводной корректировки обязательств.
// Такими документами корректировалась сумма обязательств без разбиения по сотрудникам.
// Такая корректировка учитывается при расчете, однако ее необходимо отразить 
// в учете в разрезе сотрудников
//
Процедура ОпределитьСуммуКорректировкиОстатков(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	ПараметрыРасчетаОбязательств.Колонки.Добавить("КорректировкаОбязательств", Новый ОписаниеТипов("Булево"));
	
	ТаблицаКорректировок = ТаблицаКорректировокТекущегоМесяца(СтруктураПараметровРасчета, СтруктураПараметровРасчета.Регистратор);
	Если ТаблицаКорректировок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковИсточник = ПараметрыРасчетаОбязательств.Скопировать();
	ТаблицаОстатковИсточник.ЗаполнитьЗначения(0,"СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
										|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ТаблицаОстатков = ТаблицаОстатковИсточник.Скопировать();
	
	ТаблицаОстатков.Свернуть("Сотрудник, СтатьяФинансирования, КорректировкаОбязательств",
		"СуммаРезерваИсчислено, СуммаРезерваСтраховыхВзносовИсчислено, СуммаРезерваФССНесчастныеСлучаиИсчислено,
		|СуммаРезерваИсчисленоНУ, СуммаРезерваСтраховыхВзносовИсчисленоНУ, СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
		|СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
		|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	МассивОбщихОстатков = Новый Массив;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаКорректировок Цикл
		
		МассивСтрок = ТаблицаОстатковИсточник.НайтиСтроки(Новый Структура("СтатьяФинансирования", СтрокаТаблицы.СтатьяФинансирования));
		Если МассивСтрок.Количество() = 0 Тогда
			МассивОбщихОстатков.Добавить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерва",                      "СуммаРезерваИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаиИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваНУ",                    "СуммаРезерваИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОстатковИсточник, ТаблицаОстатков);
		
	КонецЦикла;
	
	Если МассивОбщихОстатков.Количество() <> 0 Тогда
		
		Для Каждого СтрокаМассива ИЗ МассивОбщихОстатков Цикл
			
			ТаблицаНераспределенныхОстатков = ТаблицаОстатков.Скопировать();
			ТаблицаНераспределенныхОстатков.ЗаполнитьЗначения(СтрокаМассива.СтатьяФинансирования, "СтатьяФинансирования");
			МассивСтрок = ТаблицаНераспределенныхОстатков.НайтиСтроки(Новый Структура("КорректировкаОбязательств", Ложь));
			
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерва",                      "СуммаРезерваИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаиИсчислено");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваНУ",                    "СуммаРезерваИсчисленоНУ");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
			РаспределитьПоМассиву(СтрокаМассива, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНераспределенныхОстатков, ТаблицаОстатков);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.СуммаРезерва КАК СуммаРезерваОстаток,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ТаблицаОстатков.СуммаРезерваНУ КАК СуммаРезерваОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ТаблицаОстатков.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиРезервов
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиРезервов.Сотрудник КАК Сотрудник,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстаток) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ИСТИНА КАК КорректировкаОбязательств
	|ИЗ
	|	ВТ_ОстаткиРезервов КАК ВТ_ОстаткиРезервов
	|ГДЕ
	|	(ВТ_ОстаткиРезервов.СуммаРезерваОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиРезервов.Сотрудник,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ПараметрыРасчетаОбязательств);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПоМассиву(СтрокаТаблицы, МассивИсточник, ИмяКолонки, ИмяКолонкиБазы)
	
	РаспределяемаяСумма = СтрокаТаблицы[ИмяКолонки];
	
	Если РаспределяемаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИсточник.Количество() <> 0 Тогда
		МассивСтарыхСумм = Новый Массив;
		Для Каждого Строка ИЗ МассивИсточник Цикл
			МассивСтарыхСумм.Добавить(Строка[ИмяКолонкиБазы]);
		КонецЦикла;
		МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
			Для НомерЗаписи = 1 По МассивНовыхСумм.Количество() Цикл
				МассивИсточник[НомерЗаписи-1][ИмяКолонки] = МассивНовыхСумм[НомерЗаписи-1];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаКорректировокТекущегоМесяца(СтруктураПараметровРасчета, Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваПриход) КАК СуммаРезерва,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваНУПриход) КАК СуммаРезерваНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовПриход) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваСтраховыхВзносовНУПриход) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиПриход) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНУНачальныйОстаток + ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиИОборотыСотрудников
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОстаткиИОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваПриход) КАК СуммаРезерваПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваНУПриход) КАК СуммаРезерваНУПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовПриход) КАК СуммаРезерваСтраховыхВзносовПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваСтраховыхВзносовНУПриход) КАК СуммаРезерваСтраховыхВзносовНУПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиПриход) КАК СуммаРезерваФССНесчастныеСлучаиПриход,
	|	СУММА(ОценочныеОбязательстваПоСотрудникамОбороты.СуммаРезерваФССНесчастныеСлучаиНУПриход) КАК СуммаРезерваФССНесчастныеСлучаиНУПриход,
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ТекущиеОборотыСотрудников
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваПоСотрудникамОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерва - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваПриход, 0)) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваНУПриход, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваСтраховыхВзносов - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваСтраховыхВзносовПриход, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваСтраховыхВзносовНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваСтраховыхВзносовНУПриход, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаи - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиИОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСотрудников.СуммаРезерваФССНесчастныеСлучаиНУПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиСотрудников
	|ИЗ
	|	ВТ_ОстаткиИОборотыСотрудников КАК ВТ_ОстаткиИОборотыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОборотыСотрудников КАК ВТ_ТекущиеОборотыСотрудников
	|		ПО ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования = ВТ_ТекущиеОборотыСотрудников.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОборотыСотрудников.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерва,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОстаткиИОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОстаткиИОбороты.СуммаНУНачальныйОстаток + ОценочныеОбязательстваОстаткиИОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ОценочныеОбязательстваОстаткиИОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиИОборотыСводные
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Организация = &Организация) КАК ОценочныеОбязательстваОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОстаткиИОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваНУПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваСтраховыхВзносовНУПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ОценочныеОбязательстваОбороты.ТипОценочногоОбязательства = ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ)
	|				ТОГДА ОценочныеОбязательстваОбороты.СуммаНУПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРезерваФССНесчастныеСлучаиНУПриход,
	|	ОценочныеОбязательстваОбороты.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ТекущиеОборотыСводные
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательства.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК ОценочныеОбязательстваОбороты
	|ГДЕ
	|	ОценочныеОбязательстваОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОценочныеОбязательстваОбороты.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерва - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваПриход, 0)) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваНУПриход, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваСтраховыхВзносов - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваСтраховыхВзносовПриход, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваСтраховыхВзносовНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваСтраховыхВзносовНУПриход, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваФССНесчастныеСлучаи - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваФССНесчастныеСлучаиПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиИОборотыСводные.СуммаРезерваФССНесчастныеСлучаиНУ - ЕСТЬNULL(ВТ_ТекущиеОборотыСводные.СуммаРезерваФССНесчастныеСлучаиНУПриход, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиСводные
	|ИЗ
	|	ВТ_ОстаткиИОборотыСводные КАК ВТ_ОстаткиИОборотыСводные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеОборотыСводные КАК ВТ_ТекущиеОборотыСводные
	|		ПО ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования = ВТ_ТекущиеОборотыСводные.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОборотыСводные.СтатьяФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерва, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерва, 0)) КАК СуммаРезерва,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваНУ, 0)) КАК СуммаРезерваНУ,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваСтраховыхВзносов, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваСтраховыхВзносов, 0)) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваСтраховыхВзносовНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваСтраховыхВзносовНУ, 0)) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваФССНесчастныеСлучаи, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваФССНесчастныеСлучаи, 0)) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ЕСТЬNULL(ВТ_ОстаткиСводные.СуммаРезерваФССНесчастныеСлучаиНУ, 0) - ЕСТЬNULL(ВТ_ОстаткиСотрудников.СуммаРезерваФССНесчастныеСлучаиНУ, 0)) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ЕСТЬNULL(ВТ_ОстаткиСводные.СтатьяФинансирования, ВТ_ОстаткиСотрудников.СтатьяФинансирования) КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_Итоги
	|ИЗ
	|	ВТ_ОстаткиСводные КАК ВТ_ОстаткиСводные
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОстаткиСотрудников КАК ВТ_ОстаткиСотрудников
	|		ПО ВТ_ОстаткиСводные.СтатьяФинансирования = ВТ_ОстаткиСотрудников.СтатьяФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_ОстаткиСводные.СтатьяФинансирования, ВТ_ОстаткиСотрудников.СтатьяФинансирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоги.СуммаРезерва КАК СуммаРезерва,
	|	ВТ_Итоги.СуммаРезерваНУ КАК СуммаРезерваНУ,
	|	ВТ_Итоги.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
	|	ВТ_Итоги.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
	|	ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
	|	ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_Итоги.СтатьяФинансирования КАК СтатьяФинансирования
	|ИЗ
	|	ВТ_Итоги КАК ВТ_Итоги
	|ГДЕ
	|	(ВТ_Итоги.СуммаРезерва <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваНУ <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваСтраховыхВзносовНУ <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_Итоги.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

// Возвращает перечень (фиксированный массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//		ИсхСумма - распределяемая сумма.
//		МассивКоэф - массив коэффициентов распределения.
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт
 
	Возврат ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
		ИсхСумма, МассивКоэф, Точность);
 
КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, НаборСтрок, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		МассивСтарыхСумм = Новый Массив;
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			ИмяКолонкиБазы = ИмяКолонки;
		КонецЕсли;
		Для Каждого СтрокаМассива ИЗ НаборСтрок Цикл
			МассивСтарыхСумм.Добавить(СтрокаМассива[ИмяКолонкиБазы]);
		КонецЦикла;
		МассивНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
			Для ИндексЗначения = 0 ПО МассивНовыхСумм.Количество()-1 Цикл
				НаборСтрок[ИндексЗначения][ИмяКолонки] = МассивНовыхСумм[ИндексЗначения];
			КонецЦикла;
		КонецЕсли; 
	Иначе
		Для Каждого СтрокаМассива ИЗ НаборСтрок Цикл
			СтрокаМассива[ИмяКолонки] = 0;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьМассивСотрудников(МассивСотрудников, Таблица)
	
	ТаблицаИсточник = Таблица.Скопировать(,"Сотрудник");
	ТаблицаИсточник.Свернуть("Сотрудник");
	
	Если МассивСотрудников.Количество() = 0 Тогда
		МассивСотрудников = ТаблицаИсточник.ВыгрузитьКолонку("Сотрудник");
	Иначе
		Для Каждого СтрокаТаблицы ИЗ ТаблицаИсточник Цикл
			Если МассивСотрудников.Найти(СтрокаТаблицы.Сотрудник) = Неопределено Тогда
				МассивСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДвиженийДокумента

Процедура СформироватьДвиженияПоНачислениюОбязательств(Движения, Отказ, Организация, Период, ПериодРегистрации, ДанныеДляОтражения) Экспорт
	
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательства") Тогда
		СформироватьДвиженияНачислениеРезерваОтпусков(ДанныеДляОтражения.ОценочныеОбязательства, Организация, ПериодРегистрации, Движения, Отказ)
	КонецЕсли;
	Если ДанныеДляОтражения.Свойство("РасчетРезерваОтпусков") Тогда
		СформироватьДвиженияРегистраРасчетРезерваОтпусков(ДанныеДляОтражения.РасчетРезерваОтпусков, Организация, Период, ПериодРегистрации, Движения, Отказ);
	КонецЕсли;
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательстваПоСотрудникам") Тогда
		СформироватьДвиженияРегистраОценочныеОбязательстваПоСотрудникам(ДанныеДляОтражения.ОценочныеОбязательстваПоСотрудникам, Организация, Период, ПериодРегистрации, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРегистраРасчетРезерваОтпусков(ТаблицаОбязательств, Организация, Период, ПериодРегистрации, Движения, Отказ)
	
	ТаблицаОбязательств.Свернуть("Сотрудник,
	|СреднийЗаработок,ТекущаяСтавкаСтраховыхВзносов, ТекущаяСтавкаФССНесчастныеСлучаи" ,
	"ОстатокОтпуска,ОтпускАвансом,ФОТ,СтраховыеВзносы,ФССНесчастныеСлучаи,
	|СуммаРезерваНакоплено,СуммаРезерваСтраховыхВзносовНакоплено,СуммаРезерваФССНесчастныеСлучаиНакоплено,
	|СуммаРезерваНакопленоНУ,СуммаРезерваСтраховыхВзносовНакопленоНУ,СуммаРезерваФССНесчастныеСлучаиНакопленоНУ,
	|СуммаРезерваИсчислено,СуммаРезерваСтраховыхВзносовИсчислено,СуммаРезерваФССНесчастныеСлучаиИсчислено,
	|СуммаРезерваИсчисленоНУ,СуммаРезерваСтраховыхВзносовИсчисленоНУ,СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
	|СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаОбязательств.ВыгрузитьКолонку("Сотрудник"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	СотрудникиФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СотрудникиФизическиеЛица.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
	КонецЦикла;	
	
	Для каждого СтрокаТЗ Из ТаблицаОбязательств Цикл
	
		НоваяСтрока = Движения.РасчетРезерваОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодРасчета = ПериодРегистрации;
		НоваяСтрока.Период = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.ФизическоеЛицо = СотрудникиФизическиеЛица[НоваяСтрока.Сотрудник];
	
	КонецЦикла;
	
	Движения.РасчетРезерваОтпусков.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНачислениеРезерваОтпусков(ТаблицаОбязательств, Организация, ПериодРегистрации, Движения, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбязательств", ТаблицаОбязательств);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Период",              ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбязательств.СуммаРезерва,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи,
	|	ТаблицаОбязательств.СуммаРезерваНУ,
	|	ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ,
	|	ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ТаблицаОбязательств.СтатьяФинансирования,
	|	&Организация КАК Организация,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаОбязательств
	|ИЗ
	|	&ТаблицаОбязательств КАК ТаблицаОбязательств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период КАК Период,
	|	ВТ_ТаблицаОбязательств.Организация КАК Организация,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям) КАК ТипОценочногоОбязательства,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерва) КАК Сумма,
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваНУ) КАК СуммаНУ
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерва <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносов <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваСтраховыхВзносовНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи),
	|	СУММА(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ)
	|ИЗ
	|	ВТ_ТаблицаОбязательств КАК ВТ_ТаблицаОбязательств
	|ГДЕ
	|	(ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаи <> 0
	|			ИЛИ ВТ_ТаблицаОбязательств.СуммаРезерваФССНесчастныеСлучаиНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОбязательств.Организация,
	|	ВТ_ТаблицаОбязательств.Период,
	|	ВТ_ТаблицаОбязательств.СтатьяФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	ТипОценочногоОбязательства";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		Движения.ОценочныеОбязательства.Загрузить(Результат);
		Движения.ОценочныеОбязательства.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРегистраОценочныеОбязательстваПоСотрудникам(ТаблицаОбязательств, Организация, Период, ПериодРегистрации, Движения, Отказ)
	
	ТаблицаОбязательств.Свернуть("Сотрудник,СтатьяФинансирования",
	"СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
	|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", ТаблицаОбязательств.ВыгрузитьКолонку("Сотрудник"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)";
	Выборка = Запрос.Выполнить().Выбрать();
	СотрудникиФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СотрудникиФизическиеЛица.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
	КонецЦикла;
	
	Для Каждого СтрокаТЗ Из ТаблицаОбязательств Цикл
		
		НоваяСтрока = Движения.ОценочныеОбязательстваПоСотрудникам.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		НоваяСтрока.Организация    = Организация;
		НоваяСтрока.Период         = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.ФизическоеЛицо = СотрудникиФизическиеЛица[НоваяСтрока.Сотрудник];
	
	КонецЦикла;
	
	Движения.ОценочныеОбязательстваПоСотрудникам.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НачислениеОценочныхОбязательствПоОтпускам);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.271";
	Обработчик.Процедура = "РезервОтпусков.СформироватьОценочныеОбязательстваПоСотрудникам";

КонецПроцедуры

// Обработка результата рефакторинга подсистемы учета обязательств по отпускам
// Заполнение регистра накопления ОценочныеОбязательстваПоСотрудникам
//
Процедура СформироватьОценочныеОбязательстваПоСотрудникам() Экспорт
	
	ПодготовитьДокументыДляФормированияОценочныхОбязательствПоСотрудникам();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОценочныеОбязательстваПоСотрудникам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Исключения
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам КАК ОценочныеОбязательстваПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетРезерваОтпусков.Регистратор КАК Ссылка,
	|	ЛОЖЬ КАК Отпуск,
	|	РасчетРезерваОтпусков.ПериодРасчета КАК ПериодРасчета
	|ИЗ
	|	РегистрСведений.РасчетРезерваОтпусков КАК РасчетРезерваОтпусков
	|ГДЕ
	|	РасчетРезерваОтпусков.Регистратор ССЫЛКА Документ.НачислениеОценочныхОбязательствПоОтпускам
	|	И НЕ РасчетРезерваОтпусков.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТ_Исключения.Регистратор
	|				ИЗ
	|					ВТ_Исключения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьВыплатаОтпусковЗаСчетРезерва.Регистратор,
	|	ИСТИНА,
	|	УдалитьВыплатаОтпусковЗаСчетРезерва.Период
	|ИЗ
	|	РегистрНакопления.УдалитьВыплатаОтпусковЗаСчетРезерва КАК УдалитьВыплатаОтпусковЗаСчетРезерва
	|ГДЕ
	|	НЕ УдалитьВыплатаОтпусковЗаСчетРезерва.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТ_Исключения.Регистратор
	|				ИЗ
	|					ВТ_Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРасчета";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТребуетОбработки = Выборка.Количество();
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если НЕ Выборка.Отпуск Тогда
				
				РасчетРезерваОтпусков = РегистрыСведений.РасчетРезерваОтпусков.СоздатьНаборЗаписей();
				РасчетРезерваОтпусков.Отбор.Регистратор.Значение = Выборка.Ссылка;
				РасчетРезерваОтпусков.Прочитать();
				ТаблицаРасчетРезерваОтпусков = РасчетРезерваОтпусков.Выгрузить();
				
				СтруктураПараметровРасчета = Новый Структура;
				СтруктураПараметровРасчета.Вставить("Организация",       ДокументОбъект.Организация);
				СтруктураПараметровРасчета.Вставить("Регистратор",       Выборка.Ссылка);
				СтруктураПараметровРасчета.Вставить("ПериодРегистрации", ДокументОбъект.ПериодРегистрации);
				
				ДополнитьПараметрыРасчетаНакопленнымиРезервами(СтруктураПараметровРасчета);
				
				ОпределитьСуммуКорректировкиОстатковПриОбновлении(ТаблицаРасчетРезерваОтпусков, СтруктураПараметровРасчета);
				
				ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(ТаблицаРасчетРезерваОтпусков);
				
				ТаблицаРасчетРезерваОтпусков.Свернуть("Период, Регистратор, Организация, Сотрудник, ФизическоеЛицо, СтатьяФинансирования",
					"СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
					|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ");
				
				ДокументОбъект.Движения.ОценочныеОбязательстваПоСотрудникам.Загрузить(ТаблицаРасчетРезерваОтпусков);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект.Движения.ОценочныеОбязательстваПоСотрудникам);
				
			Иначе
				
				ВыплатаОтпусковЗаСчетРезерва = РегистрыНакопления.УдалитьВыплатаОтпусковЗаСчетРезерва.СоздатьНаборЗаписей();
				ВыплатаОтпусковЗаСчетРезерва.Отбор.Регистратор.Значение = Выборка.Ссылка;
				ВыплатаОтпусковЗаСчетРезерва.Прочитать();
				
				ОценочныеОбязательстваПоСотрудникам = РегистрыНакопления.ОценочныеОбязательстваПоСотрудникам.СоздатьНаборЗаписей();
				ОценочныеОбязательстваПоСотрудникам.Отбор.Регистратор.Значение = Выборка.Ссылка;
				
				Для Каждого ЗаписьНабора ИЗ ВыплатаОтпусковЗаСчетРезерва Цикл
					НоваяЗапись = ОценочныеОбязательстваПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
					НоваяЗапись.СуммаРезерва                      = ЗаписьНабора.СуммаРезерваВыбыло;
					НоваяЗапись.СуммаРезерваСтраховыхВзносов      = ЗаписьНабора.СуммаРезерваСтраховыхВзносовВыбыло;
					НоваяЗапись.СуммаРезерваФССНесчастныеСлучаи   = ЗаписьНабора.СуммаРезерваФССНесчастныеСлучаиВыбыло;
					НоваяЗапись.СуммаРезерваНУ                    = ЗаписьНабора.СуммаРезерваВыбылоНУ;
					НоваяЗапись.СуммаРезерваСтраховыхВзносовНУ    = ЗаписьНабора.СуммаРезерваСтраховыхВзносовВыбылоНУ;
					НоваяЗапись.СуммаРезерваФССНесчастныеСлучаиНУ = ЗаписьНабора.СуммаРезерваФССНесчастныеСлучаиВыбылоНУ;
					НоваяЗапись.ВидДвижения                       = ВидДвиженияНакопления.Расход;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОценочныеОбязательстваПоСотрудникам);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить данные о резервах отпусков по документу ""%1"" по причине:
				|%2'"), 
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано < ТребуетОбработки Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре РезервОтпусков.СформироватьОценочныеОбязательстваПоСотрудникам
		|не удалось обновить данные о резервах отпусков в %1 документах.'"), 
		ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	ИначеЕсли ОбъектовОбработано <> 0 Тогда
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура РезервОтпусков.СформироватьОценочныеОбязательстваПоСотрудникам
		|обработала документы учета резервов отпусков: %1 элементов'"), 
		ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДокументыДляФормированияОценочныхОбязательствПоСотрудникам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.СпособОтраженияЗарплатыВБухучете) КАК КоличествоЗаполненных,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВбухучете.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПустых
	|ПОМЕСТИТЬ ВТ_ДокументыДляОтбора
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательстваПоСотрудникам КАК НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам
	|ГДЕ
	|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.Ссылка.Проведен
	|	И НЕ НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.Ссылка.КорректировкаОбязательств
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательстваПоСотрудникам.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВыплатаОтпусковЗаСчетРезерва.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОтобранныеДокументы
	|ИЗ
	|	РегистрНакопления.УдалитьВыплатаОтпусковЗаСчетРезерва КАК УдалитьВыплатаОтпусковЗаСчетРезерва
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыДляОтбора.Ссылка
	|ИЗ
	|	ВТ_ДокументыДляОтбора КАК ВТ_ДокументыДляОтбора
	|ГДЕ
	|	ВТ_ДокументыДляОтбора.КоличествоЗаполненных = ВТ_ДокументыДляОтбора.КоличествоПустых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтобранныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ОтобранныеДокументы КАК ВТ_ОтобранныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтобранныеДокументы.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.НачислениеОценочныхОбязательствПоОтпускам") Тогда
				ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			КонецЕсли;
			ДокументОбъект.Движения.ОценочныеОбязательстваПоСотрудникам.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект.Движения.ОценочныеОбязательстваПоСотрудникам);
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре РезервОтпусков.ПодготовитьДокументыДляФормированияОценочныхОбязательствПоСотрудникам не удалось подготовить данные по документу ""%1"" по причине:
				|%2'"), 
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьСуммуКорректировкиОстатковПриОбновлении(ПараметрыРасчетаОбязательств, СтруктураПараметровРасчета)
	
	ПараметрыРасчетаОбязательств.Колонки.Добавить("КорректировкаОбязательств", Новый ОписаниеТипов("Булево"));
	ПараметрыРасчетаОбязательств.Колонки.Добавить("СтатьяФинансирования",      Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	
	ТаблицаКорректировок = ТаблицаКорректировокТекущегоМесяца(СтруктураПараметровРасчета, СтруктураПараметровРасчета.Регистратор);
	Если ТаблицаКорректировок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатков = ПараметрыРасчетаОбязательств.Скопировать();
	ТаблицаОстатков.ЗаполнитьЗначения(0,"СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
										|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	ТаблицаОстатков.Свернуть("Сотрудник, ФизическоеЛицо, СтатьяФинансирования, КорректировкаОбязательств",
		"СуммаРезерваИсчислено, СуммаРезерваСтраховыхВзносовИсчислено, СуммаРезерваФССНесчастныеСлучаиИсчислено,
		|СуммаРезерваИсчисленоНУ, СуммаРезерваСтраховыхВзносовИсчисленоНУ, СуммаРезерваФССНесчастныеСлучаиИсчисленоНУ,
		|СуммаРезерва , СуммаРезерваСтраховыхВзносов, СуммаРезерваФССНесчастныеСлучаи,
		|СуммаРезерваНУ , СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаКорректировок Цикл
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(Новый Структура("СтатьяФинансирования", СтрокаТаблицы.СтатьяФинансирования));
		
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерва",                      "СуммаРезерваИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносов",      "СуммаРезерваСтраховыхВзносовИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаи",   "СуммаРезерваФССНесчастныеСлучаиИсчислено");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваНУ",                    "СуммаРезерваИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваСтраховыхВзносовНУ",    "СуммаРезерваСтраховыхВзносовИсчисленоНУ");
		РаспределитьПоМассиву(СтрокаТаблицы, МассивСтрок, "СуммаРезерваФССНесчастныеСлучаиНУ", "СуммаРезерваФССНесчастныеСлучаиНУ");
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
	Запрос.УстановитьПараметр("Регистратор",     СтруктураПараметровРасчета.Регистратор);
	Запрос.УстановитьПараметр("Организация",     СтруктураПараметровРасчета.Организация);
	Запрос.УстановитьПараметр("Период",          КонецМесяца(СтруктураПараметровРасчета.ПериодРегистрации));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Сотрудник КАК Сотрудник,
	|	ТаблицаОстатков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаОстатков.СуммаРезерва КАК СуммаРезерваОстаток,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносовОстаток,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаиОстаток,
	|	ТаблицаОстатков.СуммаРезерваНУ КАК СуммаРезерваОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовОстатокНУ,
	|	ТаблицаОстатков.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиОстатокНУ,
	|	ТаблицаОстатков.СтатьяФинансирования КАК СтатьяФинансирования
	|ПОМЕСТИТЬ ВТ_ОстаткиРезервов
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиРезервов.Сотрудник КАК Сотрудник,
	|	ВТ_ОстаткиРезервов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстаток) КАК СуммаРезерва,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток) КАК СуммаРезерваСтраховыхВзносов,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток) КАК СуммаРезерваФССНесчастныеСлучаи,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ) КАК СуммаРезерваНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ) КАК СуммаРезерваСтраховыхВзносовНУ,
	|	СУММА(ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ) КАК СуммаРезерваФССНесчастныеСлучаиНУ,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ИСТИНА КАК КорректировкаОбязательств,
	|	&Организация КАК Организация,
	|	&Регистратор КАК Регистратор,
	|	&Период КАК Период
	|ИЗ
	|	ВТ_ОстаткиРезервов КАК ВТ_ОстаткиРезервов
	|ГДЕ
	|	(ВТ_ОстаткиРезервов.СуммаРезерваОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстаток <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваСтраховыхВзносовОстатокНУ <> 0
	|			ИЛИ ВТ_ОстаткиРезервов.СуммаРезерваФССНесчастныеСлучаиОстатокНУ <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиРезервов.Сотрудник,
	|	ВТ_ОстаткиРезервов.ФизическоеЛицо,
	|	ВТ_ОстаткиРезервов.СтатьяФинансирования";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(),
			ПараметрыРасчетаОбязательств);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 
