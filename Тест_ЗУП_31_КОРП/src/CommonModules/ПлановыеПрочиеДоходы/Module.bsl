
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Плановые прочие доходы"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным.
//
// Параметры:
//	ТаблицаСведений - таблица значений с полями:
//		* Объект 		- строка, содержащая полное имя объекта метаданных,
//		* ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//							отдельные поля регистрации отделяются запятой,
//							альтернативные - символом "|",
//		* ПоляДоступа	- строка, в которой перечислены через запятую имена полей доступа.
//		* ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПлановоеНачислениеПрочихДоходов";
	НовыеСведения.ПоляРегистрации	= "Получатели.ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Получатели.Размер";
	НовыеСведения.ОбластьДанных		= "Доходы";

	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ПлановыеПрочиеДоходы";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Размер,РазмерПоОкончании";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//									общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.60";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПлановыхПрочихДоходов.УстановитьИспользоватьПлановыеПрочиеДоходы";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5988961f-c912-4925-b59f-33f4c671f782");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования плановых прочих доходов.'");

КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПлановоеНачислениеПрочихДоходов",	"ДатаНачала", "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеПрочиеДоходы",		"Период",	  "Зарплата", "Организация");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВидимостьКомандыЗаполнитьПолучателей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьПолучателей", "Видимость", ПолучитьФункциональнуюОпцию("НачислятьПлановыеПрочиеДоходы"));

КонецПроцедуры

Функция ВыборкаНачисленийПолучателямПрочегоДохода(Форма, МассивФизическихЛиц = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Ссылка = Объект.Ссылка;

	Организация			= Объект.Организация;
	ПериодРегистрации	= Объект.ПериодРегистрации;
	КоллекцияСтрок 		= Объект.НачисленияУдержанияВзносы;
	ВидПрочегоДохода	= Объект.ВидПрочегоДохода;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("ВидПрочегоДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	Если МассивФизическихЛиц <> Неопределено Тогда
		
		ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
		Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
			
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Период = КонецМесяца(ПериодРегистрации);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ВидПрочегоДохода = ВидПрочегоДохода;
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Период = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидПрочегоДохода = ВидПрочегоДохода;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеПрочиеДоходы",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлановыеПрочиеДоходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеПрочиеДоходы.Размер КАК КНачислению
	|ПОМЕСТИТЬ ВТПлановыеПрочиеДоходы
	|ИЗ
	|	ВТПлановыеПрочиеДоходыСрезПоследних КАК ПлановыеПрочиеДоходы
	|ГДЕ
	|	ПлановыеПрочиеДоходы.Используется
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеОНачислениях
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Регистратор <> &Регистратор
	|	И НачисленияУдержания.Организация = &Организация
	|	И НачисленияУдержания.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ФизическиеЛица.ФизическоеЛицо
	|			ИЗ
	|				ВТПлановыеПрочиеДоходы КАК ФизическиеЛица)
	|	И НачисленияУдержания.НачислениеУдержание = &ВидПрочегоДохода
	|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И НачисленияУдержания.Период = &ПериодРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеПрочиеДоходы.ФизическоеЛицо,
	|	ПлановыеПрочиеДоходы.КНачислению КАК Начислено
	|ИЗ
	|	ВТПлановыеПрочиеДоходы КАК ПлановыеПрочиеДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОНачислениях КАК ДанныеОНачислениях
	|		ПО ПлановыеПрочиеДоходы.ФизическоеЛицо = ДанныеОНачислениях.ФизическоеЛицо
	|ГДЕ
	|	ДанныеОНачислениях.ФизическоеЛицо ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Регистратор",		Ссылка);
	Запрос.УстановитьПараметр("ВидПрочегоДохода",	ВидПрочегоДохода);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ПриУстановкеИспользоватьРегистрациюПрочихДоходов(ИспользоватьРегистрацию) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Использовать = ИспользоватьРегистрацию И ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлановыеПрочиеДоходы.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеПрочиеДоходы КАК ПлановыеПрочиеДоходы");
	
	НаборЗаписей = РегистрыСведений.НастройкиПлановыхПрочихДоходов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Запись = ?(НаборЗаписей.Количество() = 0, НаборЗаписей.Добавить(), НаборЗаписей[0]);
	Запись.ИспользоватьПлановыеПрочиеДоходы = Использовать;
	Запись.НачислятьПлановыеПрочиеДоходы = Использовать И Не Запрос.Выполнить().Пустой();

	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализПлановыхПрочихДоходов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДинамикаПлановыхПрочихДоходов);
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьПлановыеПрочиеДоходы");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализПлановыхПрочихДоходов, "АнализПлановыхПрочихДоходовПоВидам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Зарплата, "СмТакже");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализПлановыхПрочихДоходов, "АнализПлановыхПрочихДоходовПоФизическимЛицам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Зарплата, "СмТакже");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ДинамикаПлановыхПрочихДоходов, "ИсторияИзмененияПлановыхПрочихДоходов");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Зарплата, "СмТакже");
	
КонецПроцедуры

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//	СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПлановоеНачислениеПрочихДоходов);
	
КонецПроцедуры

#КонецОбласти