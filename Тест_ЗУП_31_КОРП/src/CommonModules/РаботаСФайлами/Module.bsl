////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает двоичные данные файла.
// Если двоичные данные файла не найдены в информационной базе или в томах, будет вызвано исключение.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на элемент справочника с файлом.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные присоединенного файла.
//
Функция ДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлОбъект = РаботаСФайламиСлужебный.ФайлОбъект(ПрисоединенныйФайл);
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда

		Результат = ХранилищеФайлаИзИнформационнойБазы(ФайлОбъект.Ссылка);
		Если Результат <> Неопределено Тогда
			Возврат Результат.Получить();
		КонецЕсли;
		
		// Запись в журнал регистрации.
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Двоичные данные файла отсутствуют в регистре ДвоичныеДанныеФайла
			           |
			           |Ссылка на файл: ""%1"".'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Открытие файла'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
		
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Присоединен к %1 : %2'"),
				Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
				ФайлОбъект.ВладелецФайла);
		
		ВызватьИсключение РаботаСФайламиСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
			ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
			Ложь,
			ПредставлениеВладельцаФайла);
	Иначе
		ПолныйПуть = РаботаСФайламиСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть);
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Присоединен к %1 : %2'"),
					Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
					ФайлОбъект.ВладелецФайла);
				
			ВызватьИсключение РаботаСФайламиСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
				,
				ПредставлениеВладельцаФайла);
				
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает структурированную информацию о файле. Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла в других процедурах и функциях.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на элемент справочника с файлом.
//
//  ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы,
//                       во временное хранилище которой надо поместить файл и
//                       вернуть адрес в свойстве СсылкаНаДвоичныеДанныеФайла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - если передать Ложь, то ссылка на двоичные данные в СсылкаНаДвоичныеДанныеФайла
//                 не будет получена, что существенно ускорит выполнение для больших двоичных данных.
//
//  ДляРедактирования - Булево - если указать Истина, то файл будет захвачен для редактирования.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * СсылкаНаДвоичныеДанныеФайла        - Строка - Адрес во временном хранилище, по которому помещены данные.
//    * ОтносительныйПуть                  - Строка - Относительный путь файла.
//    * ДатаМодификацииУниверсальная       - Дата   - Дата изменения фала.
//    * ИмяФайла                           - Строка - Имя файла без точки.
//    * Наименование                       - Строка - Наименование файла в справочнике хранения файлов.
//    * Расширение                         - Строка - Расширение файла без точки.
//    * Размер                             - Число  - Размер файла.
//    * Редактирует                        - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи,
//                                           Неопределено - Ссылка на пользователя, занявшего файл.
//    * ПодписанЭП                         - Булево - Признак, что файл подписан.
//    * Зашифрован                         - Булево - Признак, что файл зашифрован.
//    * ФайлРедактируется                  - Булево - Признак, что файл занят для редактирования.
//    * ФайлРедактируетТекущийПользователь - Булево - Признак, что файл занят для редактирования текущим пользователем.
//
Функция ДанныеФайла(Знач ПрисоединенныйФайл,
                    Знач ИдентификаторФормы = Неопределено,
                    Знач ПолучатьСсылкуНаДвоичныеДанные = Истина,
                    Знач ДляРедактирования = Ложь) Экспорт
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ПрисоединенныйФайл);
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДанныеФайла", "ПрисоединенныйФайл",
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
		
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ОбщегоНазначенияКлиентСервер.Проверить(ФайлОбъект <> Неопределено, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден присоединенный файл ""%1"" (%2)'"),
			Строка(ПрисоединенныйФайл), ПрисоединенныйФайл.Метаданные()));
	
	Если ДляРедактирования И Не ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
		ФайлОбъект.Заблокировать();
		РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ФайлОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ПоддерживаетсяХранениеВерсий = (ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.Файлы"));
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		Если ПоддерживаетсяХранениеВерсий И ПрисоединенныйФайл.ХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
			ДвоичныеДанные = ДвоичныеДанныеФайла(ПрисоединенныйФайл.ТекущаяВерсия);
		Иначе
			ДвоичныеДанные = ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		КонецЕсли;
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",                       ПрисоединенныйФайл);
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	Результат.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	Результат.Вставить("Наименование",                 ФайлОбъект.Наименование);
	Результат.Вставить("Расширение",                   ФайлОбъект.Расширение);
	Результат.Вставить("Размер",                       ФайлОбъект.Размер);
	Результат.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	Результат.Вставить("ПодписанЭП",                   ФайлОбъект.ПодписанЭП);
	Результат.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	Результат.Вставить("ХранитьВерсии",                ФайлОбъект.ХранитьВерсии);
	Результат.Вставить("ПометкаУдаления",              ФайлОбъект.ПометкаУдаления);
	Результат.Вставить("ДатаЗаема",                    ФайлОбъект.ДатаЗаема);
	Результат.Вставить("Владелец",                     ФайлОбъект.ВладелецФайла);
	Результат.Вставить("АвторТекущейВерсии",           ФайлОбъект.Изменил);
	Результат.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
	
	МетаданныеОбъектаФайла = Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл));
	ЕстьВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеОбъектаФайла);
	
	Если ЕстьВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, ПрисоединенныйФайл.ТекущаяВерсия);
	Иначе
		РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, Неопределено);
	КонецЕсли;
	
	Результат.Вставить("ФайлРедактируется",            ЗначениеЗаполнено(ФайлОбъект.Редактирует));
	Результат.Вставить("ФайлРедактируетТекущийПользователь",
		?(Результат.ФайлРедактируется, ФайлОбъект.Редактирует = Пользователи.АвторизованныйПользователь(), Ложь) );
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Если ФайлОбъект.Зашифрован Тогда
			Результат.Вставить("МассивСертификатовШифрования", МодульЭлектроннаяПодпись.СертификатыШифрования(ПрисоединенныйФайл));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит все присоединенные файлы к объекту и добавляет ссылки на них в свойство Файлы.
//
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Ссылка на объект-владелец файлов.
//  Файлы         - Массив - Массив в который будут добавлены ссылки на файлы объекта:
//                  * ОпределяемыйТип.ПрисоединенныйФайл - (возвращаемое значение),
//                  ссылка на элемента справочника с файлом.
//
Процедура ЗаполнитьПрисоединенныеФайлыКОбъекту(Знач ВладелецФайла, Знач Файлы) Экспорт
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВладелецФайла)) <> Неопределено Тогда
		
		МассивФайловЛокальный = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(ВладелецФайла);
		Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл
			Файлы.Добавить(СсылкаНаФайл);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новую ссылку на файл для указанного владельца файла.
// В частности ссылка используется при добавление файла в функции ДобавитьФайл.
//
// Параметры:
//  ВладелецФайлов - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Папка файлов или объект, к которому
//                   требуется прикрепить добавляемый файл.
//
//  ИмяСправочника - Неопределено - вычислить справочник по владельцу (допустимо,
//                   когда справочник только один, иначе будет вызвано исключение).
//
//                 - Строка - имя справочника *ПрисоединенныеФайлы, отличное
//                            от стандартного <ИмяВладельца>ПрисоединенныеФайлы.
//  
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на новый еще не записанный элемент справочника с файлом.
//
Функция НоваяСсылкаНаФайл(ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении новой ссылки на присоединенный файл.'");
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку();
	
КонецФункции

// Обновляет свойства файла без учета версий - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства. Использовать только для файлов, которые не хранят версии.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на элемент справочника с файлом.
//  ИнформацияОФайле - Структура - со свойствами:
//     <обязательные>
//     * АдресФайлаВоВременномХранилище - Строка - Адрес новых двоичных данных файла.
//     * АдресВременногоХранилищаТекста - Строка - Адрес новых двоичных данных текста,
//                                                 извлеченного из файла.
//     <необязательные>
//     * ИмяБезРасширения               - Строка - Если свойство не указано или не заполнено,
//                                                 тогда не будет изменено.
//     * ДатаМодификацииУниверсальная   - Дата   - Дата последнего изменения файла, если
//                                                 свойство не указано или не заполнено, тогда будет
//                                                 установлена текущая дата сеанса.
//     * Расширение                     - Строка - Новое расширение файла.
//     * Редактирует                    - Ссылка - Новый пользователь, редактирующий файл.
//
Процедура ОбновитьФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	РаботаСФайламиСлужебный.ОбновитьФайл(ИнформацияОФайле, ПрисоединенныйФайл);
	
КонецПроцедуры

// Возвращает имя формы объекта присоединенных файлов по владельцу.
//
// Параметры:
//  ВладелецФайлов - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Папка файлов или объект, к которому
//                       требуется прикрепить добавляемый файл.
//
// Возвращаемое значение:
//  Строка - Полное имя формы объекта присоединенных файлов по владельцу.
//
Функция ИмяФормыОбъектаФайловПоВладельцу(Знач ВладелецФайлов) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении имени формы присоединенного файла.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае получение формы невозможно.'");
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ПолноеИмяОМ = "Справочник." + ИмяСправочника;
	
	МетаданныеПрисоединенныхФайлов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	
	Если МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта = Неопределено Тогда
		ИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
	Иначе
		ИмяФормы = МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Определяет возможность прикрепления добавляемого файла к владельцу файлов.
//
// Параметры:
//  ВладелецФайлов - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Папка файлов или объект, к которому
//                       требуется прикрепить добавляемый файл.
//  ИмяСправочника - Строка - Если указано, то выполняется проверка добавления в определенное хранилище файлов.
//                            Иначе имя справочника будет определено по владельцу.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда к объекту может присоединять файлы.
//
Функция КОбъектуМожноПрисоединятьФайлы(ВладелецФайлов, ИмяСправочника = "") Экспорт
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника);
		
	СправочникПрисоединенныеФайлы = Метаданные.Справочники.Найти(ИмяСправочника);
	
	ТипыХранимыхФайлов = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип;
	
	Возврат СправочникПрисоединенныеФайлы <> Неопределено
		И ПравоДоступа("Добавление", СправочникПрисоединенныеФайлы)
		И ТипыХранимыхФайлов.СодержитТип(Тип("СправочникСсылка." + ИмяСправочника));
	
КонецФункции

// Добавляет к указанному владельцу файлов новый файл на основании файла из файловой системы.
// Если владельцу файлов поддерживает хранение версий, то будет создана первая версия файла.
// 
// Параметры:
//   ВладелецФайлов    - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Папка файлов или объект, к которому
//                       требуется прикрепить добавляемый файл.
//   ПутьКФайлуНаДиске - Строка - Полный путь к файлу на диске, включающий имя и расширение файла.
//                       Файл должен находиться на сервере.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на элемент справочника с созданным файлом.
//
Функция СоздатьФайлНаОсновеФайлаНаДиске(ВладелецФайлов, ПутьКФайлуНаДиске) Экспорт
	
	Файл = Новый Файл(ПутьКФайлуНаДиске);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлуНаДиске);
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	АдресВременногоХранилищаТекста = "";
	
	Если РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
		// Текст извлечет регламентное задание.
		АдресВременногоХранилищаТекста = ""; 
	Иначе
		// Попытка извлечения текста, если сервер под Windows.
		Если РаботаСФайламиСлужебный.ЭтоПлатформаWindows() Тогда
			Текст = РаботаСФайламиСлужебныйКлиентСервер.ИзвлечьТекст(ПутьКФайлуНаДиске);
			АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(Текст);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Файл);
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = АдресВременногоХранилищаТекста;
	Возврат РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ВладелецФайлов, СведенияОФайле);
	
КонецФункции

// Обработчик подписки на событие ОбработкаПолученияФормы для переопределения формы файла.
//
// Параметры:
//  Источник                 - СправочникМенеджер - менеджер справочника с именем "*ПрисоединенныеФайлы".
//  ВидФормы                 - Строка - имя стандартной формы.
//  Параметры                - Структура - параметры формы.
//  ВыбраннаяФорма           - Строка - имя или объект метаданных открываемой формы.
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы.
//  СтандартнаяОбработка     - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОпределитьФормуПрисоединенногоФайла(Источник, ВидФормы, Параметры,
				ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ЭтоФормаВерсии = Ложь;
	
	Если Источник <> Неопределено Тогда
		ЭтоФормаВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("РодительскаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(Источник)));
	КонецЕсли;
	
	Если ВидФормы = "ФормаГруппы" Тогда
		ВыбраннаяФорма = "Обработка.РаботаСФайлами.Форма.ГруппаФайлов";
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
		Если Не ЭтоФормаВерсии Тогда
			ВыбраннаяФорма = "Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		Если Не ЭтоФормаВерсии Тогда
			ВыбраннаяФорма = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен только для объектов Документ.
//
// Параметры:
//  Источник        - ДокументОбъект           - стандартный параметр события ПередЗаписью.
//  Отказ           - Булево                   - стандартный параметр события ПередЗаписью.
//  РежимЗаписи     - РежимЗаписиДокумента     - стандартный параметр события ПередЗаписью.
//  РежимПроведения - РежимПроведенияДокумента - стандартный параметр события ПередЗаписью.
//
Процедура УстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью объектов-владельцев файлов.
// Определен для объектов, кроме Документ.
//
// Параметры:
//  Источник - Объект - стандартный параметр события ПередЗаписью, например, СправочникОбъект.
//                      Исключение - ДокументОбъект.
//  Отказ    - Булево - стандартный параметр события ПередЗаписью.
//
Процедура УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления") Тогда
		ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	КонецЕсли;
	
КонецПроцедуры

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ПараметрыФайла - Структура - Параметры с данными файла.
//       * Автор                        - Ссылка - Пользователь, создавший файл.
//       * ВладелецФайлов               - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Папка файлов или объект, к которому
//                                        требуется прикрепить добавляемый файл.
//       * ИмяБезРасширения             - Строка - Имя файла без расширения.
//       * РасширениеБезТочки           - Строка - Расширение файла (без точки вначале).
//       * ВремяИзмененияУниверсальное  - Дата   - Дата и время изменения файла (UTC+0:00),
//                                        если не указана, тогда используется ТекущаяУниверсальнаяДата().
//         ГруппаФайлов                 - Ссылка - Группа справочника с файлами, в которую будет добавлен новый файл.
//  АдресФайлаВоВременномХранилище      - Строка - Адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста      - Строка - Адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                            - Строка - Текстовое описание файла.
//
//  НоваяСсылкаНаФайл                   - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                        или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                        справочников, требуется обязательно передать ссылку, иначе будет вызвано
//                                        исключение.
//                                        - Ссылка - ссылка на элемент справочника хранения файлов,
//                                        которую следует использовать для добавляемого файла.
//                                        Должна соответствовать одному из типов справочников хранения файлов владельца
//                                        файлов. Ссылка может быть получена функцией НоваяСсылкаНаФайл.
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на созданный присоединенный файл.
//
Функция ДобавитьФайл(ПараметрыФайла,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт

	Автор =              ПараметрыФайла.Автор;
	ВладелецФайлов =     ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения  =  ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов") 
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;

	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = РаботаСФайламиСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;
	
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		НачатьТранзакцию();
		Попытка
			СвояТранзакцияОткрыта = Истина;
			РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли НЕ РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				СтатусИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(
					ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ПрисоединенныйФайл.Автор = Автор;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
				|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		Попытка
			// Добавление в один из томов (где есть свободное место).
			СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
				ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
				ИзвлеченныйТекст = РаботаСФайламиСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
				
			ИначеЕсли НЕ РаботаСФайламиСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
				// Тексты извлекаются сразу, а не в фоновом задании.
				СтатусИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(
					ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
			КонецЕсли;
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ПрисоединенныйФайл.Автор = Автор;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
				|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Возвращает структуру, содержащую персональные настройки работы с файлами.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПоказыватьЗанятыеФайлыПриЗавершенииРаботы        - Булево - Существует, только если внедрена подсистема Работа с
//                                                                  файлами.
//    * СпрашиватьРежимРедактированияПриОткрытииФайла    - Булево - Существует, только если внедрена подсистема Работа с
//                                                                  файлами.
//    * ПоказыватьКолонкуРазмер                          - Булево - Существует, только если внедрена подсистема Работа с
//                                                                  файлами.
//    * ДействиеПоДвойномуЩелчкуМыши                     - Строка - Существует, только если внедрена подсистема Работа с
//                                                                  файлами.
//    * СпособСравненияВерсийФайлов                      - Строка - Существует, только если внедрена подсистема Работа с
//                                                                  файлами.
//    * ГрафическиеСхемыРасширение                       - Строка - Список расширений для графических схем.
//    * ГрафическиеСхемыСпособОткрытия                   - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр - способ
//        открытия графических схем.
//    * ТекстовыеФайлыРасширение                         - Строка - Расширения файлов открытого формата документов.
//    * ТекстовыеФайлыСпособОткрытия                     - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр - способ
//        открытия текстовых файлов.
//    * МаксимальныйРазмерЛокальногоКэшаФайлов           - Число - Определяет максимальный размер локального кэша файлов.
//    * ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов    - Булево - Задавать вопрос при удалении файлов из локального кэша.
//    * ПоказыватьИнформациюЧтоФайлНеБылИзменен          - Булево - Показывать файлы при завершении работы.
//    * ПоказыватьПодсказкиПриРедактированииФайлов       - Булево - В веб-клиенте показывать подсказки при
//                                                                  редактировании файлов.
//    * ПутьКЛокальномуКэшуФайлов                        - Строка - Путь к локальному кэшу файлов.
//    * ЭтоПолноправныйПользователь                      - Булево - Истина, если это полноправный пользователь.
//    * УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования - Булево - удаления файлов из локального кэша при
//                                                                              завершении редактирования.
//
Функция НастройкиРаботыСФайлами() Экспорт
	
	Возврат РаботаСФайламиСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
КонецФункции

// Возвращает максимальный размер файла.
//
// Возвращаемое значение:
//  Число - целое число байт.
//
Функция МаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазделениеВключеноИДоступноИспользование = (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
		
	ИмяКонстанты = ?(РазделениеВключеноИДоступноИспользование, "МаксимальныйРазмерФайлаОбластиДанных", "МаксимальныйРазмерФайла");
	
	МаксимальныйРазмерФайла = Константы[ИмяКонстанты].Получить();
	
	Если НЕ ЗначениеЗаполнено(МаксимальныйРазмерФайла) Тогда
		МаксимальныйРазмерФайла = 52428800; // 50*1024*1024 = 50 Мб
	КонецЕсли;
	
	Если РазделениеВключеноИДоступноИспользование Тогда
		ГлобальныйМаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
		ГлобальныйМаксимальныйРазмерФайла = ?(ЗначениеЗаполнено(ГлобальныйМаксимальныйРазмерФайла),
			ГлобальныйМаксимальныйРазмерФайла, 52428800);
		МаксимальныйРазмерФайла           = Мин(МаксимальныйРазмерФайла, ГлобальныйМаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает максимальный размер файла провайдера.
//
// Возвращаемое значение:
//  Число - целое число байт.
//
Функция МаксимальныйРазмерФайлаОбщий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = Неопределено
	 ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Сохраняет настройки работы с файлами.
//
// Параметры:
//  НастройкиРаботыСФайлами - Структура - настройки работы с файлами с их значениями.
//     * ПоказыватьИнформациюЧтоФайлНеБылИзменен        - Булево - Необязательный. Показывать сообщение, если файл не
//                                                                 был изменен.
//     * ПоказыватьЗанятыеФайлыПриЗавершенииРаботы      - Булево - Необязательный. Показывать файлы при завершении работы.
//     * ПоказыватьКолонкуРазмер                        - Булево - Необязательный. Отображать колонку размер в формах
//                                                                 списках файлов.
//     * ТекстовыеФайлыРасширение                       - Строка - Расширения файлов открытого формата документов.
//     * ТекстовыеФайлыСпособОткрытия                   - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр - способ
//         открытия текстовых файлов.
//     * ГрафическиеСхемыРасширение                     - Строка - Список расширений графических файлов.
//     * ПоказыватьПодсказкиПриРедактированииФайлов     - Булево - Необязательный. В веб-клиенте показывать подсказки
//                                                                 при редактировании файлов.
//     * СпрашиватьРежимРедактированияПриОткрытииФайла  - Булево - Необязательный. Выбирать режим редактирования при
//                                                                 открытии файла.
//     * СпособСравненияВерсийФайлов                    - ПеречислениеСсылка.СпособыСравненияВерсийФайлов -
//                                                        Необязательный. Способ сравнения версий и файлов.
//     * ДействиеПоДвойномуЩелчкуМыши                   - ПеречислениеСсылка.ДействияСФайламиПоДвойномуЩелчку - Необязательный.
//     * ГрафическиеСхемыСпособОткрытия                 - ПеречислениеСсылка.СпособыОткрытияФайлаНаПросмотр -
//                                                        Необязательный. Способ открытия файла на просмотр.
//
Процедура СохранитьНастройкиРаботыСФайлами(НастройкиРаботыСФайлами) Экспорт
	
	КлючиОбъектовНастроекРаботыСФайлами = КлючиОбъектовНастроекРаботыСФайлами();
	
	Для Каждого Настройка Из НастройкиРаботыСФайлами Цикл
		
		КлючОбъектаНастройки = КлючиОбъектовНастроекРаботыСФайлами[Настройка.Ключ];
		Если КлючОбъектаНастройки <> Неопределено Тогда
			Если СтрНачинаетсяС(КлючОбъектаНастройки, "НастройкиОткрытияФайлов\") Тогда
				ТипФайловНастройки = СтрЗаменить(КлючОбъектаНастройки, "НастройкиОткрытияФайлов\", "");
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастройки,
					СтрЗаменить(Настройка.Ключ, ТипФайловНастройки, ""), Настройка.Значение);
			Иначе
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастройки, Настройка.Ключ, Настройка.Значение);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Описание");
	РедактируемыеРеквизиты.Добавить("Редактирует");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Переносит файлы из справочника Файлы в присоединенные файлы при объекте-владельце файлов и помечает 
// перенесенные файлы к удалению.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// хранения файлов в справочнике Файлы на хранение файлов как присоединенных при объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайлов - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Объект-владелец приемник файлов.
//   ИмяСправочника - Строка - если требуется конвертация в указанное хранилище.
//
// Возвращаемое значение:
//  Соответствие - файлы:
//   * Ключ     - СправочникСсылка.Файлы - Перенесенный файл, который помечен на удаление после переноса.
//   * Значение - ОпределяемыйТип.ПрисоединенныйФайл - Созданный файл.
//
Функция СконвертироватьФайлыВПрисоединенные(Знач ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами
	                             |в присоединенные файлы подсистемы Присоединенные файлы.'");
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыИсточник = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			// Установить исключительную блокировку на файл-источник, 
			// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.Файлы.ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлИсточникОбъект.Ссылка);
			БлокировкаДанных.Заблокировать();

			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
				// Установить исключительную блокировку на текущую версию файла-источник, 
				// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя());
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ТекущаяВерсияОбъект.Ссылка);
				БлокировкаДанных.Заблокировать();
			Иначе
				ТекущаяВерсияОбъект = ФайлИсточникОбъект;
			КонецЕсли;
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭП                   = ФайлИсточникОбъект.ПодписанЭП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.УдалитьСертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.УдалитьСертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				Для Каждого ЭПСтрока Из ТекущаяВерсияОбъект.УдалитьЭлектронныеПодписи Цикл
					НоваяСтрока = ПрисоединенныйФайл.УдалитьЭлектронныеПодписи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭПСтрока);
				КонецЦикла;
			КонецЕсли;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ХранилищеФайла = ХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка);
				
				// Если двоичные данных файла отсутствуют в информационной базе, то пропускаем их перенос, но карточку файла оставляем.
				// Это возможно после выполнения очистки ненужных файлов или вследствие ошибок некорректного обмена или импорта.
				Если ХранилищеФайла <> Неопределено Тогда
					МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Файл = СсылкаНового;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.Файл = СсылкаНового;
					МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ХранилищеФайла.Получить(), Новый СжатиеДанных(9));
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ПутьКФайлу = "";
				ФайлИсточникОбъект.Том = "";
				Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
					РаботаСФайламиСлужебный.ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
				ТекущаяВерсияОбъект.Записать();
			КонецЕсли;
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			Результат.Вставить(ФайлИсточникОбъект.Ссылка, СсылкаНового);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// одной подсистемы к другой в каком-либо объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайлов - Ссылка - ссылка на объект, для которого выполняется конвертация.
//   ИмяСправочника - Строка - если требуется конвертация в указанное хранилище.
//
Процедура ИзменитьСправочникХраненияФайлов(Знач ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами
	                             |в присоединенные файлы подсистемы Присоединенные файлы.'");
	
	ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыИсточник = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			// Установить исключительную блокировку на файл-источник, 
			// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.Файлы.ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ФайлИсточникОбъект.Ссылка);
			БлокировкаДанных.Заблокировать();

			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
				// Установить исключительную блокировку на текущую версию файла-источник, 
				// для того чтобы гарантировать, что в момент записи значения его реквизитов не изменится..
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.Справочники.ВерсииФайлов.ПолноеИмя());
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ТекущаяВерсияОбъект.Ссылка);
				БлокировкаДанных.Заблокировать();
			Иначе
				ТекущаяВерсияОбъект = ФайлИсточникОбъект;
			КонецЕсли;
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭП                   = ФайлИсточникОбъект.ПодписанЭП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.УдалитьСертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.УдалитьСертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				Для Каждого ЭПСтрока Из ТекущаяВерсияОбъект.УдалитьЭлектронныеПодписи Цикл
					НоваяСтрока = ПрисоединенныйФайл.УдалитьЭлектронныеПодписи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭПСтрока);
				КонецЦикла;
			КонецЕсли;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ХранилищеФайла = ХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка);
				
				МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Файл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.Файл = СсылкаНового;
				МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ХранилищеФайла.Получить(), Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ПутьКФайлу = "";
				ФайлИсточникОбъект.Том = "";
				Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
					РаботаСФайламиСлужебный.ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлИсточникОбъект.ТекущаяВерсия) Тогда
				ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
				ТекущаяВерсияОбъект.Записать();
			КонецЕсли;
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик события ПриЗаписиНаСервере управляемой формы владельца файла.
//
// Параметры:
//  Отказ - Булево  - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  ТекущийОбъект   - Объект - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  ПараметрыЗаписи - Структура - стандартный параметр события ПриЗаписиНаСервере управляемой формы.
//  Параметры       - ДанныеФормыСтруктура - свойство Параметры управляемой формы.
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		РаботаСФайламиСлужебный.СкопироватьПрисоединенныеФайлы(
			Параметры.ЗначениеКопирования, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с томами файлов

// Определяет наличие активных томов хранения файлов.
// Если есть хоть один том хранения файлов, то будет возвращена Истина.
//
// Возвращаемое значение:
//  Булево - если Истина, тогда существует хотя бы один работающий том.
//
Функция ЕстьТомаХраненияФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов
	|ГДЕ
	|	ТомаХраненияФайлов.ПометкаУдаления = ЛОЖЬ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает ссылки на объекты с файлами.
//
// Используется совместно с функцией СконвертироватьФайлыВПрисоединенные.
//
// Параметры:
//  ИмяТаблицыВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может являться владельцем присоединенными файлами.
//
// Возвращаемое значение:
//  Массив - со значениями:
//   * Ссылка - Ссылка на объект, у которого есть хотя бы один присоединенный файл.
//
Функция СсылкиНаОбъектыСФайлами(Знач ИмяТаблицыВладельцевФайлов) Экспорт
	
	Возврат РаботаСФайламиСлужебный.СсылкиНаОбъектыСФайлами(ИмяТаблицыВладельцевФайлов);
	
КонецФункции

// Добавляет электронную подпись к файлу.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - Ссылка на элемент справочника с файлом.
//
//  СвойстваПодписи    - Структура - содержит данные, которые возвращает процедура Подписать
//                       общего модуля ЭлектроннаяПодписьКлиент в качестве результата.
//                     - Массив - массив описанных выше структур.
//                     
//  ИдентификаторФормы - УникальныйИдентификатор - если указан, то используется при блокировке объекта.
//
Процедура ДобавитьПодписьКФайлу(ПрисоединенныйФайл, СвойстваПодписи, ИдентификаторФормы = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ПрисоединенныеФайлы.ДобавитьПодписьКФайлу", "ПрисоединенныйФайл", 
		ПрисоединенныйФайлСсылка, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
		
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Редактирует) Тогда
		ВызватьИсключение РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодпись.ДобавитьПодпись(ПрисоединенныйФайл, СвойстваПодписи, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Возвращает ключи объектов настроек работы с файлами.
// 
Функция КлючиОбъектовНастроекРаботыСФайлами()
	
	КлючиОбъектовНастроекРаботыСФайлами = Новый Соответствие;
	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла" ,"НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ДействиеПоДвойномуЩелчкуМыши",                  "НастройкиОткрытияФайлов");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьКолонкуРазмер" ,                      "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",     "НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("СпособСравненияВерсийФайлов",                   "НастройкиСравненияФайлов");
	
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ТекстовыеФайлыРасширение" ,      "НастройкиОткрытияФайлов\ТекстовыеФайлы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ТекстовыеФайлыСпособОткрытия" ,  "НастройкиОткрытияФайлов\ТекстовыеФайлы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ГрафическиеСхемыРасширение" ,    "НастройкиОткрытияФайлов\ГрафическиеСхемы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ГрафическиеСхемыСпособОткрытия" ,"НастройкиОткрытияФайлов\ГрафическиеСхемы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов" ,"НастройкиПрограммы");
	КлючиОбъектовНастроекРаботыСФайлами.Вставить("ПоказыватьИнформациюЧтоФайлНеБылИзменен" ,   "НастройкиПрограммы");
	
	Возврат КлючиОбъектовНастроекРаботыСФайлами;
	
КонецФункции

// Помечает/снимает пометку удаления у приложенных файлов.
Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИменаСправочников = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(
			ТипЗнч(Источник.Ссылка));
	Исключение
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение НСтр("ru = 'Ошибка при пометке на удаление присоединенных файлов.'")
			+ Символы.ПС
			+ ПредставлениеОшибки;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Редактирует КАК Редактирует
		|ИЗ
		|	&ИмяСправочника КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Для каждого ОписаниеИмениСправочника Из ИменаСправочников Цикл
		
		ПолноеИмяСправочника = "Справочник." + ОписаниеИмениСправочника.Ключ;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" не может быть удален,
					           |т.к. содержит присоединенный файл ""%2"",
					           |занятый для редактирования.'"),
					Строка(Источник.Ссылка),
					Строка(Выборка.Ссылка));
			КонецЕсли;
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает идентификатор владельца присоединенного файла.
Функция ПолучитьИдентификаторОбъекта(Знач ВладелецФайлов)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаличиеФайлов.ИдентификаторОбъекта
		|ИЗ
		|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|ГДЕ
		|	НаличиеФайлов.ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

// Возвращает двоичные данные файла из информационной базы.
//
// Параметры:
//   ФайлСсылка - ссылка на файл или его версию.
//
// Возвращаемое значение:
//   ХранилищеЗначения - двоичные данные файла.
//
Функция ХранилищеФайлаИзИнформационнойБазы(ФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвоичныеДанныеФайлов.Файл,
	|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
	|ИЗ
	|	РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|ГДЕ
	|	ДвоичныеДанныеФайлов.Файл = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДвоичныеДанныеФайла, Неопределено);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписки на событие ПередЗаписью для заполнения авто реквизитов присоединенного файла.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		// Проверка права "Добавление".
		Если НЕ РаботаСФайламиСлужебный.ЕстьПраво("ДобавлениеФайлов", Источник.ВладелецФайла) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав для добавления файлов в папку ""%1"".'"),
				Строка(Источник.ВладелецФайла));
		КонецЕсли;
	Иначе
		
		ИзмененаПометкаУдаления = 
			Источник.ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
			
		Если ИзмененаПометкаУдаления Тогда
			// Проверка права "Пометка на удаление".
			Если НЕ РаботаСФайламиСлужебный.ЕстьПраво("ПометкаУдаленияФайлов", Источник.ВладелецФайла) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недостаточно прав для пометки файлов на удаление в папке ""%1"".'"),
					Строка(Источник.ВладелецФайла));
			КонецЕсли;
		КонецЕсли;
		
		Если ИзмененаПометкаУдаления И ЗначениеЗаполнено(Источник.Редактирует) Тогда
				
			Если Источник.Редактирует = Пользователи.АвторизованныйПользователь() Тогда
				
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Источник.Наименование);
				
			Иначе
				ТекстОшибки = НСтр("ru = 'Действие недоступно, так как файл ""%1"" занят для редактирования
					|пользователем %2.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Источник.Наименование,
				Строка(Источник.Редактирует));
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписьПодписанногоОбъекта = Ложь;
		Если Источник.ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
			ЗаписьПодписанногоОбъекта = Источник.ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
		КонецЕсли;
		
		Если ЗаписьПодписанногоОбъекта <> Истина Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
				"ПодписанЭП, Зашифрован, Редактирует");
			
			СсылкаПодписан    = СтруктураРеквизитов.ПодписанЭП;
			СсылкаЗашифрован  = СтруктураРеквизитов.Зашифрован;
			СсылкаРедактирует = СтруктураРеквизитов.Редактирует;
			СсылкаЗанят       = ЗначениеЗаполнено(СтруктураРеквизитов.Редактирует);
			Занят = ЗначениеЗаполнено(Источник.Редактирует);
			
			Если Не Источник.ЭтоГруппа И Источник.ПодписанЭП И СсылкаПодписан И Занят И Не СсылкаЗанят Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный файл нельзя редактировать.'");
			КонецЕсли;
			
			Если Не Источник.ЭтоГруппа И Источник.Зашифрован И СсылкаЗашифрован И Источник.ПодписанЭП И НЕ СсылкаПодписан Тогда
				ВызватьИсключение НСтр("ru = 'Зашифрованный файл нельзя подписывать.'");
			КонецЕсли;
			
		КонецЕсли;
		
		СправочникПоддерживаетВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипЗнч(Источник)));
		
		Если Не Источник.ЭтоГруппа И СправочникПоддерживаетВозможностьХранитьВерсии И ЗначениеЗаполнено(Источник.ТекущаяВерсия) Тогда
			
			РеквизитыТекущейВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.ТекущаяВерсия, "Наименование");
			
			// Проверим равенство имени файла и его текущей версии.
			// Если имена отличаются - имя у версии должно стать как у карточки с файлом.
			Если РеквизитыТекущейВерсии.Наименование <> Источник.Наименование
			   И ЗначениеЗаполнено(Источник.ТекущаяВерсия) Тогда
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(
					Метаданные.НайтиПоТипу(ТипЗнч(Источник.ТекущаяВерсия)).ПолноеИмя());
				
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Источник.ТекущаяВерсия);
				БлокировкаДанных.Заблокировать();
				
				Объект = Источник.ТекущаяВерсия.ПолучитьОбъект();
				
				Если Объект <> Неопределено Тогда
					УстановитьПривилегированныйРежим(Истина);
					Объект.Наименование = Источник.Наименование;
					// Чтобы не сработала подписка СкопироватьРеквизитыВерсииФайловВФайл.
					Объект.ДополнительныеСвойства.Вставить("ПереименованиеФайла", Истина);
					Объект.Записать();
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен владелец в файле
			           |""%1"".'"),
			Источник.Наименование);
		
		Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Ошибка записи файла при обновлении ИБ'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Источник.Ссылка,
				ОписаниеОшибки);
		Иначе
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Источник.ИндексКартинки = 2;
	Иначе
		Источник.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Источник.Расширение);
	КонецЕсли;
	
	Если Источник.ЭтоНовый() И Не ЗначениеЗаполнено(Источник.Автор) Тогда
		Источник.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалением для удаления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ПередУдалениемПрисоединенногоФайлаСервер(
		Источник.Ссылка,
		Источник.ВладелецФайла,
		Источник.Том,
		Источник.ТипХраненияФайла,
		Источник.ПутьКФайлу);
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи для обновления данных, связанных с присоединенным файлом.
//
// Параметры:
//  Источник   - СправочникОбъект - объект справочника с именем "*ПрисоединенныеФайлы".
//  Отказ      - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
Процедура ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ПриЗаписиПрисоединенногоФайлаСервер(
		Источник.ВладелецФайла, Источник.Ссылка);
		
	РаботаСФайламиСлужебный.ОбновитьСостояниеОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Знач Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Файл.Использование = Истина;
		НаборЗаписей.Отбор.Файл.Значение = Источник.Ссылка;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Файл = Источник.Ссылка;
		Запись.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);

КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

#КонецОбласти
