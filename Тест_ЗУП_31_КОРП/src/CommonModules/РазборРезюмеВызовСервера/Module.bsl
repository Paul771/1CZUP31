
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет полученную структуру резюме кандидата данными из текста
//
// Параметры:
//  СтруктураРеквизитов - Структура - структура, которую требуется заполнить.
//  ТекстРезюме - Строка - Текст резюме для разбора.
//  ШаблонРезюме - СправочникСсылка.ИсточникиИнформацииОКандидатах - вариант шаблона для разбора резюме.
//
Процедура ПарсингТекста(СтруктураРеквизитов, Знач ТекстРезюме, Знач ШаблонРезюме) Экспорт
	
	СтруктураДанныхКандидата = СтруктураРеквизитов.СтруктураДанныхКандидата;
	СтруктураДанныхКандидата.Вставить("ПолныйТекстРезюме", ТекстРезюме);
	
	
	Если ШаблонРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		СтруктураДанныхРезюме = СтруктураДанныхРезюмеHH(ТекстРезюме);
	ИначеЕсли ШаблонРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		СтруктураДанныхРезюме = СтруктураДанныхРезюмеSJ(ТекстРезюме);
	Иначе
		СтруктураДанныхРезюме = СтруктураДанныхРезюмеОбщая(ТекстРезюме);
		
		ДанныеКандидатаПоВерсииHH = СтруктураДанныхРезюмеHH(ТекстРезюме);
		ДозаполнитьСтруктураДанныхРезюме(СтруктураДанныхРезюме, ДанныеКандидатаПоВерсииHH);
		
		ДанныеКандидатаПоВерсииSJ = СтруктураДанныхРезюмеSJ(ТекстРезюме);
		ДозаполнитьСтруктураДанныхРезюме(СтруктураДанныхРезюме, ДанныеКандидатаПоВерсииSJ);
		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхКандидата, СтруктураДанныхРезюме);
	
	ЗначениеСвойства = Неопределено;
	
	// Коллекция контактной информации
	СтруктураДанныхКандидата.Вставить("КонтактнаяИнформация", Новый Массив);
	Если СтруктураДанныхРезюме.Свойство("Телефон", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураДанныхКандидата.КонтактнаяИнформация.Добавить(
			Новый Структура(
			"Тип,Вид,Представление",
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"),
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица"),
			ЗначениеСвойства));
	КонецЕсли; 
	Если СтруктураДанныхРезюме.Свойство("EMail", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураДанныхКандидата.КонтактнаяИнформация.Добавить(
			Новый Структура(
			"Тип,Вид,Представление",
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"),
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица"),
			ЗначениеСвойства));
	КонецЕсли; 
	Если СтруктураДанныхРезюме.Свойство("Адрес", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураДанныхКандидата.КонтактнаяИнформация.Добавить(
			Новый Структура(
			"Тип,Вид,Представление",
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"),
			ЗначениеСвойства));
	КонецЕсли; 
	
	
	СтруктураДанныхКандидата.Вставить("Гражданство", Новый Массив);
	Если СтруктураДанныхРезюме.Свойство("ТекущееГражданство", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураДанныхКандидата.Гражданство.Добавить(
			Новый Структура("Страна, Дата",Строка(ЗначениеСвойства)));
	КонецЕсли; 
	
	СтруктураДанныхКандидата.Вставить("СостояниеВБраке", Новый Массив);
	Если СтруктураДанныхРезюме.Свойство("СостояниеВБраке", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		СтруктураДанныхКандидата.СостояниеВБраке.Добавить(
			Новый Структура("СостояниеВБраке, Дата", ЗначениеСвойства));
	КонецЕсли; 
	
	СтруктураДанныхКандидата.Вставить("Комментарии", Новый Массив);
	
КонецПроцедуры

// Определение структуры параметра Настройки процедуры ПриОпределенииНастроек отчетов и обработок,
//   включенных в состав подсистемы ПодключаемыеОтчетыИОбработки.
//
// Параметры:
//   ВидыПодключаемыхКоманд - ТаблицаЗначений - Поддерживаемые виды команд.
//       * Имя         - Строка            - Имя вида команд. Может соответствовать имени подсистемы, поставляющей команды.
//                                           Должно удовлетворять требованиям именования переменных.
//                                           Также должно быть уникальным (не совпадать с именами других видов).
//                                           Подсистемами БСП зарезервированы следующие имена:
//                                           "Печать", "Отчеты", "ЗаполнениеОбъектов".
//       * ИмяПодменю  - Строка            - Имя подменю "по умолчанию" для размещения команд этого вида.
//       * Заголовок   - Строка            - Наименование подменю.
//       * Картинка    - Картинка          - Картинка подменю.
//       * Отображение - ОтображениеКнопки - Режим отображения подменю.
//       * Порядок     - Число             - Порядок подменю в командной панели по отношению к другим подменю.
//                                           Используется при автоматическом создании подменю.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя        = "СоздатьКандидата";
	
КонецПроцедуры

// Заполнение списка команд, подключенных к форме.
//   Событие возникает в процессе вызова модуля повторного использования.
//
// Параметры:
//   НастройкиФормы - Структура - Сведения о форме, в которой выводятся команды. Для чтения.
//         * ИмяФормы - Строка - Полное имя формы, в которой выводятся подключаемые команды.
//   
//   Источники - ДеревоЗначений - Сведения об основных поставщиках команд этой формы. Для чтения.
//         * Метаданные - ОбъектМетаданных - Метаданные объекта.
//         * ПолноеИмя  - Строка           - Полное имя объекта. Например: "Документ.ИмяДокумента".
//         * Вид        - Строка           - Вид объекта в верхнем регистре. Например: "СПРАВОЧНИК".
//         * Менеджер   - Произвольный     - Модуль менеджера объекта.
//                      - Неопределено     - Если у объекта нет модуля менеджера или если его не удалось получить.
//         * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных.
//         * ЭтоЖурналДокументов - Булево - Истина если объект является журналом документов.
//         * ТипСсылкиДанных     - Тип, ОписаниеТипов - Тип ссылки элемента.
//         На 2 уровне могут располагаться источники, регистрируемые автоматически при регистрации владельца.
//         Например, документы-регистраторы журналов.
//   
//   ПодключенныеОтчетыИОбработки - ТаблицаЗначений - Настройки отчетов и обработок,
//       подключенных к основным поставщикам команд. Для чтения.
//         * ПолноеИмя - Строка       - Полное имя объекта метаданных.
//         * Менеджер  - Произвольный - Модуль менеджера объекта метаданных.
//       Состав колонок определяется в процедуре ПриОпределенииНастроекПрограммногоИнтерфейсаПодключаемыхОбъектов.
//   
//   Команды - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//       * Вид - Строка - Вид команды.
//           Подробнее см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд().
//       * Идентификатор - Строка - Идентификатор команды.
//       
//     Настройки внешнего вида:
//       * Представление - Строка   - Представление команды в форме.
//       * Важность      - Строка   - Суффикс подгруппы в меню, в которой следует вывести эту команду.
//                                    Допустимо использовать: "Важное", "Обычное" и "СмТакже".
//       * Порядок       - Число    - Порядок размещения команды в группе. Используется для настройки под конкретное
//                                    рабочее место. Допустимо задавать в диапазоне от 1 до 100. По умолчанию порядок 50.
//       * Картинка      - Картинка - Картинка команды. Необязательный.
//       * СочетаниеКлавиш - СочетаниеКлавиш - Сочетание клавиш для быстрого вызова команды. Необязательный.
//     
//     Настройки видимости и доступности:
//       * ТипПараметра - ОписаниеТипов - Типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах    - Строка - Имена форм через запятую, в которых должна отображаться команда.
//                                        Используется когда состав команд отличается для различных форм.
//       * ФункциональныеОпции - Строка - Имена функциональных опций через запятую, определяющих видимость команды.
//       * УсловияВидимости    - Массив - Определяет видимость команды в зависимости от контекста.
//                                        Для регистрации условий следует использовать процедуру
//                                        ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды().
//                                        Условия объединяются по "И".
//       * ИзменяетВыбранныеОбъекты - Булево - Определяет доступность команды в ситуации,
//                                        когда у пользователя нет прав на изменение объекта.
//                                        Если Истина, то в описанной выше ситуации кнопка будет недоступна.
//                                        Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки процесса выполнения:
//       * МножественныйВыбор - Булево - Если Истина, то команда поддерживает множественный выбор.
//             В этом случае в параметре выполнения будет передан список ссылок.
//             Необязательный. Значение по умолчанию: Истина.
//       * РежимЗаписи - Строка - Действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
//             ** "НеЗаписывать"          - Объект не записывается, а в параметрах обработчика вместо ссылок передается
//                                          вся форма. В этом режиме рекомендуется работать напрямую с формой,
//                                          которая передается в структуре 2 параметра обработчика команды.
//             ** "ЗаписыватьТолькоНовые" - Записывать новые объекты.
//             ** "Записывать"            - Записывать новые и модифицированные объекты.
//             ** "Проводить"             - Проводить документы.
//             Перед записью и проведением у пользователя запрашивается подтверждение.
//             Необязательный. Значение по умолчанию: "Записывать".
//       * ТребуетсяРаботаСФайлами - Булево - Если Истина, то в веб-клиенте предлагается
//             установить расширение работы с файлами.
//             Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки обработчика:
//       * Менеджер - Строка - Объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - Имя формы, которую требуется получить для выполнения команды.
//           Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ИмяПараметраФормы - Строка - Имя параметра формы, в который следует передать ссылку или массив ссылок.
//       * ПараметрыФормы - Неопределено, Структура - Необязательный. Параметры формы, указанной в ИмяФормы.
//       * Обработчик - Строка - Описание процедуры, обрабатывающей основное действие команды.
//           Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем модуле.
//           Формат "<ИмяПроцедуры>" используется в следующих случаях:
//             - Если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
//             - Если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - Структура - Необязательный. Параметры обработчика, указанного в Обработчик.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Источники.Строки.Найти(Метаданные.ЖурналыДокументов.Взаимодействия, "Метаданные") <> Неопределено Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "СоздатьКандидата";
		Команда.Представление = НСтр("ru = 'Создать кандидата'");   //КоманднаяПанельВариантаНавигации
		Команда.ВидимостьВФормах = "ФормаСписка";
		Команда.Обработчик = "РазборРезюмеКлиент.СоздатьКандидатаПоВложениюПодключаемый";
	КонецЕсли;	        
	
КонецПроцедуры                     

// Возвращает пустую структуру резюме кандидата.
//
// Параметры:
//    Вложение - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы - файл-вложение, данные которого
//                                                                               необходимо получить.
// 
// Возвращаемое значение:
//   Структура - Структуру с данными переданного вложения, если тип параметра не 
//				"СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы", то пустая структура.
//
Функция ДанныеРезюме(Вложение) Экспорт
	Если ТипЗнч(Вложение) = Тип("СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы") Тогда
		РасширениеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вложение,"Расширение");
		Возврат Новый Структура("Расширение, ДвоичныеДанные", РасширениеФайла, РаботаСФайлами.ДвоичныеДанныеФайла(Вложение));
	Иначе
		Возврат Новый Структура("Расширение, ДвоичныеДанные");
	КонецЕсли; 
КонецФункции
 
// Возвращает список вложений заданных форматов.
//
// Параметры: 
//	ПисьмоВходящее - ДокументСсылка.ЭлектронноеПисьмоВходящее 
//	ФильтрРасширений - Строка - строка со списком доступных форматов. 
// 
// Возвращаемое значение:
//  СписокЗначений - список вложений.
//
Функция СписокВложений(Знач ПисьмоВходящее, Знач ФильтрРасширений = "doc,docx,rtf,txt") Экспорт
	
	ФильтрРасширений = НРег(ФильтрРасширений);
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Вложения.Ссылка КАК Ссылка,
	|	Вложения.Расширение КАК Расширение,
	|	Вложения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК Вложения
	|ГДЕ
	|	Вложения.ВладелецФайла = &ВладелецФайла
	|	И Вложения.Расширение В(&Расширения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Расширение,
	|	Ссылка");
	Запрос.УстановитьПараметр("ВладелецФайла",ПисьмоВходящее);
	Запрос.УстановитьПараметр("Расширения",СтрРазделить(ФильтрРасширений,",",Ложь));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Результат.Добавить();
		СтрокаСписка.Значение = Выборка.Ссылка;
		СтрокаСписка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2",Выборка.Наименование,Выборка.Расширение);
		
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции  

Процедура ДозаполнитьСтруктураДанныхРезюме(СтруктураДанныхРезюме, ДанныеКандидатаПоВерсииHH)
	
	Для каждого КлючИЗначение Из ДанныеКандидатаПоВерсииHH Цикл
		ТекущееЗначениеДанных = Неопределено;
		СтруктураДанныхРезюме.Свойство(КлючИЗначение.Ключ,ТекущееЗначениеДанных);
		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Массив") Тогда
			Если НЕ ЗначениеЗаполнено(ТекущееЗначениеДанных) Тогда
				СтруктураДанныхРезюме.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли; 
		Иначе
			СтруктураДанныхРезюме.Вставить(КлючИЗначение.Ключ, ЗначениеНаиболееПодходящееДаннымРезюме(КлючИЗначение.Ключ, ТекущееЗначениеДанных, КлючИЗначение.Значение));
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначениеНаиболееПодходящееДаннымРезюме(Имя, ТекущееЗначение, НовоеЗначение)
	
	Если НовоеЗначение = Неопределено 
		ИЛИ НовоеЗначение.Количество() = 0 Тогда
		Возврат ТекущееЗначение;
	КонецЕсли;
	
	Если ТекущееЗначение = Неопределено 
		ИЛИ ТекущееЗначение.Количество() = 0 Тогда
		Возврат НовоеЗначение;
	КонецЕсли;
	
	Если Имя = "ТрудоваяДеятельность" Тогда
		КлючевоеПоле = "ДатаНачала";
		
		ВесТекущегоЗначения = 0;
		СуммаЗначения = 0;
		Для Каждого ТекЭлемент Из ТекущееЗначение Цикл
			Если ЗначениеЗаполнено(ТекЭлемент[КлючевоеПоле]) Тогда
				Попытка
					ЗначенияТипаДаты = Дата(СтрЗаменить(ТекЭлемент[КлючевоеПоле], "-", ""));				
					СуммаЗначения = СуммаЗначения + 1;
				Исключение
					// Если не удалось преобразовать в дату ничего не делаем.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ВесТекущегоЗначения = СуммаЗначения/ТекущееЗначение.Количество();
		
		ВесНовогоЗначения = 0;
		СуммаЗначения = 0;
		Для Каждого ТекЭлемент Из НовоеЗначение Цикл
			Если ЗначениеЗаполнено(ТекЭлемент[КлючевоеПоле]) Тогда
				Попытка
					ЗначенияТипаДаты = Дата(СтрЗаменить(ТекЭлемент[КлючевоеПоле], "-", ""));				
					СуммаЗначения = СуммаЗначения + 1;
				Исключение           
					// Если не удалось преобразовать в дату ничего не делаем.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ВесНовогоЗначения = СуммаЗначения/НовоеЗначение.Количество();
		
		Если ВесТекущегоЗначения >= ВесНовогоЗначения Тогда
			Возврат ТекущееЗначение;
		Иначе
			Возврат НовоеЗначение 
		КонецЕсли;
		
	ИначеЕсли Имя = "Образование" Тогда
		КлючевоеПоле = "Окончание";
		
		ВесТекущегоЗначения = 0;
		СуммаЗначения = 0;
		Для Каждого ТекЭлемент Из ТекущееЗначение Цикл
			Если ЗначениеЗаполнено(ТекЭлемент[КлючевоеПоле]) И ТекЭлемент[КлючевоеПоле] > 1900 Тогда
				Попытка
					ЗначенияТипаДаты = Дата(ТекЭлемент[КлючевоеПоле], 1, 1);
					СуммаЗначения = СуммаЗначения + 1;
				Исключение
					// Если не удалось преобразовать в дату ничего не делаем.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ВесТекущегоЗначения = СуммаЗначения/ТекущееЗначение.Количество();
		
		ВесНовогоЗначения = 0;
		СуммаЗначения = 0;
		Для Каждого ТекЭлемент Из НовоеЗначение Цикл
			Если ЗначениеЗаполнено(ТекЭлемент[КлючевоеПоле]) И ТекЭлемент[КлючевоеПоле] > 1900 Тогда
				Попытка
					ЗначенияТипаДаты = Дата(ТекЭлемент[КлючевоеПоле], 1, 1);
					СуммаЗначения = СуммаЗначения + 1;
				Исключение
					// Если не удалось преобразовать в дату ничего не делаем.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ВесНовогоЗначения = СуммаЗначения/НовоеЗначение.Количество();
		
		Если ВесТекущегоЗначения >= ВесНовогоЗначения Тогда
			Возврат ТекущееЗначение;
		Иначе
			Возврат НовоеЗначение 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекущееЗначение;
	
КонецФункции

Функция СтруктураДанныхРезюмеВнутренняя()
	
	СтруктураДанныхКандидата = Новый Структура("
		| Фамилия, 
		| Имя,
		| Отчество,
		| Гражданство,
		| ДатаРождения,
		| ЗнаниеЯзыков, 
		| ИсточникИнформации,
		| КонтактнаяИнформация, 
		| МестоРождения,
		| ОжидаемыйДоход,
		| Образование,
		| Пол,
		| СостояниеВБраке,
		| ТрудоваяДеятельность
		|");
		
	Возврат СтруктураДанныхКандидата;
	
КонецФункции

Функция СтруктураДанныхРезюмеОбщая(Знач ТекстДляРаспознавания)
	
	СобственнаяСтруктураДанных = СтруктураДанныхРезюмеВнутренняя();
	
	ЗаполнитьЗначенияСвойств(СобственнаяСтруктураДанных, ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОИзТекста(ТекстДляРаспознавания)));
	
	СобственнаяСтруктураДанных.Вставить("ОжидаемыйДоход", ОжидаемыйДоходИзТекста(ТекстДляРаспознавания));
	
	СобственнаяСтруктураДанных.Вставить("Пол", Строка(ПолИзТекста(ТекстДляРаспознавания, СобственнаяСтруктураДанных.Отчество)));
	
	СобственнаяСтруктураДанных.Вставить("ДатаРождения",ДатаРожденияИзТекста(ТекстДляРаспознавания));
	
	СобственнаяСтруктураДанных.Вставить("EMail", EMailИзТекста(ТекстДляРаспознавания));
	
	СобственнаяСтруктураДанных.Вставить("Телефон", ТелефонИзТекста(ТекстДляРаспознавания));
	
	СобственнаяСтруктураДанных.Вставить("Адрес", АдресИзТекста(ТекстДляРаспознавания));
	
	СобственнаяСтруктураДанных.Вставить("МестоРождения", МестоРожденияИзТекста(ТекстДляРаспознавания));

	СобственнаяСтруктураДанных.Вставить("ТекущееГражданство", Строка(ГражданствоИзТекста(ТекстДляРаспознавания)));
	
	СобственнаяСтруктураДанных.Вставить("СостояниеВБраке", СостояниеВБракеИзТекста(ТекстДляРаспознавания));
	
	Возврат СобственнаяСтруктураДанных;
	
КонецФункции

Функция СтруктураДанныхРезюмеHH(Знач ТекстДляРаспознавания)
	
	СтруктураДанныхРезюме = СтруктураДанныхРезюмеОбщая(ТекстДляРаспознавания);
	
	ФорматРезюме =  ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter");
	
	СтруктураДанныхРезюме.Вставить("ТрудоваяДеятельность",МассивСтруктурОпытРаботыИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	СтруктураДанныхРезюме.Вставить("Образование", МассивСтруктурОбразованиеИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	СтруктураДанныхРезюме.Вставить("ЗнаниеЯзыков", МассивСтруктурЗнаниеЯзыковИзТекста(ТекстДляРаспознавания, ФорматРезюме)); 
	
	СтруктураДанныхРезюме.Вставить("СодержаниеПрочее", ПрочееИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	Возврат СтруктураДанныхРезюме;
КонецФункции

Функция СтруктураДанныхРезюмеSJ(Знач ТекстДляРаспознавания)
	
	СтруктураДанныхРезюме = СтруктураДанныхРезюмеОбщая(ТекстДляРаспознавания);
	
	ФорматРезюме =  ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob");
	
	СтруктураДанныхРезюме.Вставить("ТрудоваяДеятельность", МассивСтруктурОпытРаботыИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	СтруктураДанныхРезюме.Вставить("Образование", МассивСтруктурОбразованиеИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	СтруктураДанныхРезюме.Вставить("ЗнаниеЯзыков", МассивСтруктурЗнаниеЯзыковИзТекста(ТекстДляРаспознавания, ФорматРезюме)); 
	
	СтруктураДанныхРезюме.Вставить("СодержаниеПрочее", ПрочееИзТекста(ТекстДляРаспознавания, ФорматРезюме));
	
	Возврат СтруктураДанныхРезюме;
	
КонецФункции

Функция ОжидаемыйДоходИзТекста(Знач ТекстДляРаспознавания)
	
	ТекстДляРаспознавания = Нрег(Лев(ТекстДляРаспознавания, 1000));
	
	ПравилоПоиска = ПравилоПоискаПоКлючу("руб.", Ложь, -15, Ложь);
	ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
	
	ЗначениеИзТекста = СтрокаКакЧисло(ЗначениеИзТекста);
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ПолИзТекста(Знач ТекстДляРаспознавания, Знач Отчество)
	
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Мужчина", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ПолПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Женщина", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ПолПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("мужской", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ПолПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("женский", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ПолПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ЗначениеИзТекста = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(Отчество);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ФИОИзТекста(Знач ТекстДляРаспознавания)
	
	ЗначениеИзТекста = "";
	
	ПравилоПоиска = ПравилоПоискаПоКлючу("", Ложь, 100, Ложь);
	
	Для Ид = 1 По 50 Цикл
		
		ЗначениеИзТекстаВременное = СтрПолучитьСтроку(ТекстДляРаспознавания, Ид);
		ЗначениеИзТекстаВременное = ЗначениеИзТекстаПоКлючевомуСлову(ЗначениеИзТекстаВременное, ПравилоПоиска);
		ЗначениеИзТекстаВременное = СтрЗаменить(ЗначениеИзТекстаВременное, "  ", " ");
		
		// Проверим, что ФИО состоит из более чем одного слова.
		СловаЗначенияИзТекста = СтрРазделить(ЗначениеИзТекстаВременное, " ");
		
		Если СловаЗначенияИзТекста.Количество() > 1  Тогда
			ЗначениеИзТекста = ЗначениеИзТекстаВременное;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеИзТекста = ""  Тогда
		
		ПравилоПоиска = ПравилоПоискаПоКлючу("РЕЗЮМЕ", Ложь, 100, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		
	КонецЕсли;
	
	Возврат ТРег(ЗначениеИзТекста);
КонецФункции

Функция ДатаРожденияИзТекста(Знач ТекстДляРаспознавания)
	
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Дата рождения", Ложь, 25, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакДата(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Родился", Ложь, 25, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакДата(ЗначениеИзТекста);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
	
КонецФункции

Функция EMailИзТекста(Знач ТекстДляРаспознавания)
	
	ЗначениеИзТекста = Неопределено;
	
	ПравилоПоиска = ПравилоПоискаПоКлючу("", Ложь, 100, Ложь);
	
	Для Ид = 1 По 50 Цикл
		ЗначениеИзТекстаВременное = СтрПолучитьСтроку(ТекстДляРаспознавания, Ид);
		ЗначениеИзТекстаВременное = ЗначениеИзТекстаПоКлючевомуСлову(ЗначениеИзТекстаВременное, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакEmail(ЗначениеИзТекстаВременное);
		Если ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Эл. почта", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакEmail(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Email", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакEmail(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("E-mail", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакEmail(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("E-mail", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакEmail(ЗначениеИзТекста);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ТелефонИзТекста(Знач ТекстДляРаспознавания)
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("+7", Истина, 18, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакТелефон(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Телефон", Ложь, 20, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакТелефон(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Контактный номер", Ложь, 20, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакТелефон(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Тел.", Ложь, 20, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = СтрокаКакТелефон(ЗначениеИзТекста);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция СтрокаКакТелефон(Знач ЗначениеИзТекста)
	Результат = "";
	
	ДопустимыеСимволы = "+-()0123456789";
	Для НомерСимвола = 1 По СтрДлина(ЗначениеИзТекста) Цикл
		ТекущийСимвол = Сред(ЗначениеИзТекста, НомерСимвола, 1);
		Если Найти(ДопустимыеСимволы, ТекущийСимвол) > 0 Тогда
			Результат = Результат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

Функция АдресИзТекста(Знач ТекстДляРаспознавания)
	
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Проживает:", Ложь, 150, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Город проживания:", Ложь, 150, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция МестоРожденияИзТекста(Знач ТекстДляРаспознавания)
	ЗначениеИзТекста = Неопределено;
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ГражданствоИзТекста(Знач ТекстДляРаспознавания)
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Гражданство:", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ЗначениеДоРазделителя(ЗначениеИзТекста);
		ЗначениеИзТекста = ГражданствоПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Гражданство :", Ложь, 50, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		ЗначениеИзТекста = ЗначениеДоРазделителя(ЗначениеИзТекста);
		ЗначениеИзТекста = ГражданствоПоКлассификатору(ЗначениеИзТекста);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ЗначениеДоРазделителя(Знач ЗначениеИзТекста)
	
	ЧастиЗначения =  СтрРазделить(ЗначениеИзТекста,",.;/" + Символы.ПС + Символы.ВТаб);
	
	Если ЧастиЗначения.Количество() > 0 Тогда
		ЗначениеИзТекста = СокрЛП(ЧастиЗначения[0]);
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
	
КонецФункции

Функция СостояниеВБракеИзТекста(Знач ТекстДляРаспознавания)
	
	ЗначениеИзТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Семейное положение:", Ложь, 25, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		Если ЗначениеИзТекста <> "" Тогда
			ЗначениеИзТекста = ЗначениеДоРазделителя(ЗначениеИзТекста);
			ЗначениеИзТекста = СемейноеПоложениеПоКлассификатору(ЗначениеИзТекста);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Холост", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		Если ЗначениеИзТекста <> "" Тогда
			ЗначениеИзТекста = ЗначениеДоРазделителя(ЗначениеИзТекста);
			ЗначениеИзТекста = СемейноеПоложениеПоКлассификатору(ЗначениеИзТекста);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		ПравилоПоиска = ПравилоПоискаПоКлючу("Замужем", Истина, 0, Ложь);
		ЗначениеИзТекста = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
		Если ЗначениеИзТекста <> "" Тогда
			ЗначениеИзТекста = ЗначениеДоРазделителя(ЗначениеИзТекста);
			ЗначениеИзТекста = СемейноеПоложениеПоКлассификатору(ЗначениеИзТекста);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Функция ПравилоРаспознаванияОпытаРаботы(Знач ФорматРезюме = Неопределено)
	
	СоставБлока = Новый ТаблицаЗначений;
	
	СоставБлока.Колонки.Добавить("ПорядковыйНомер");
	СоставБлока.Колонки.Добавить("Наименование");
	СоставБлока.Колонки.Добавить("ТипДанных");
	СоставБлока.Колонки.Добавить("Обязательный");
	СоставБлока.Колонки.Добавить("БлокРазделитель");
	СоставБлока.Колонки.Добавить("КлючПоиска");
	СоставБлока.Колонки.Добавить("КоличествоСтрок");
	
	Если ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда                              
		ПолучитьСоставБлокаОпытаРаботыДляHH(СоставБлока);
	ИначеЕсли ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда                              
		ПолучитьСоставБлокаОпытаРаботыДляSJ(СоставБлока);
	КонецЕсли;
	
	Возврат СоставБлока;                      
КонецФункции	

Функция ПравилоПоискаПоКлючу(Знач КлючПоиска, Знач ЯвляетсяЗначением, 
									Знач КоличествоСимволовПодЗначение,
									Знач УчитыватьРегистр, Знач ЭтоСписок = Ложь)
	
	ПравилоПоиска = Новый Структура();
	
	ПравилоПоиска.Вставить("КлючПоиска", КлючПоиска);
	ПравилоПоиска.Вставить("ЯвляетсяЗначением", ЯвляетсяЗначением);
	ПравилоПоиска.Вставить("КоличествоСимволовПодЗначение", КоличествоСимволовПодЗначение);
	ПравилоПоиска.Вставить("УчитыватьРегистр", УчитыватьРегистр);
	ПравилоПоиска.Вставить("ЭтоСписок", ЭтоСписок);
	

	Возврат ПравилоПоиска;
	
КонецФункции

Функция ЗначениеИзТекстаПоКлючевомуСлову(Знач ТекстДляРаспознавания, Знач ПравилоПоиска, Знач ФорматРезюме = Неопределено)
	
	ЗначениеИзТекста = "";
	КлючПоиска = ПравилоПоиска.КлючПоиска;
	КоличествоСимволовПодЗначение = ПравилоПоиска.КоличествоСимволовПодЗначение;
	
	ЯвляетсяЗначением = Ложь;
	Если Не ПравилоПоиска.Свойство("ЯвляетсяЗначением", ЯвляетсяЗначением) Тогда
		ЯвляетсяЗначением = Ложь;
	КонецЕсли;
	
	УчитыватьРегистр = Ложь;
	Если Не ПравилоПоиска.Свойство("УчитыватьРегистр", УчитыватьРегистр) Тогда
		УчитыватьРегистр = Ложь;
	КонецЕсли;
	
	Если УчитыватьРегистр Тогда
		ПозНач = СтрНайти(ТекстДляРаспознавания, КлючПоиска);
	Иначе
		ПозНач = СтрНайти(НРег(ТекстДляРаспознавания), НРег(КлючПоиска));
	КонецЕсли;
	
	Если ПозНач > 0 Тогда
		
		Если ПравилоПоиска.ЭтоСписок Тогда
			Если ПравилоПоиска.ЯвляетсяЗначением = Истина Тогда
				Пока ПозНач > 0 Цикл
					ПозКон = СтрНайти(ТекстДляРаспознавания, Символы.ПС,, ПозНач);  
					Если СтрДлина(КлючПоиска) <> (ПозКон-ПозНач) Тогда
						ПозНач = СтрНайти(ТекстДляРаспознавания, КлючПоиска,,ПозКон);
					Иначе
						ЗначениеИзТекста = Сред(ТекстДляРаспознавания, ПозКон + 1);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПозКон = СтрНайти(ТекстДляРаспознавания, Символы.ПС,, ПозНач);  
				ЗначениеИзТекста = Сред(ТекстДляРаспознавания, ПозКон + 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ЯвляетсяЗначением Тогда
			ЗначениеИзТекста = КлючПоиска;
		КонецЕсли;
		
		Если КоличествоСимволовПодЗначение > 0 Тогда
			ЗначениеИзТекста = ЗначениеИзТекста + Сред(ТекстДляРаспознавания, ПозНач + СтрДлина(КлючПоиска), КоличествоСимволовПодЗначение);
		ИначеЕсли КоличествоСимволовПодЗначение < 0 Тогда
			ПозНач = ?((ПозНач + КоличествоСимволовПодЗначение) > 0, ПозНач + КоличествоСимволовПодЗначение, 1);
			ЗначениеИзТекста = Сред(ТекстДляРаспознавания, ПозНач, - КоличествоСимволовПодЗначение) + ЗначениеИзТекста;
		КонецЕсли;
		
		Если Не ЯвляетсяЗначением Тогда
			ЗначениеИзТекста = СтрЗаменить(ЗначениеИзТекста, КлючПоиска, "");
		КонецЕсли;
		
		ЗначениеИзТекста = СтрЗаменить(ЗначениеИзТекста, ":", "");
		ЗначениеИзТекста = СтрЗаменить(ЗначениеИзТекста, ";", "");
		
		ЗначениеИзТекста = СокрЛП(ЗначениеИзТекста);
		КлючПоискаПС = Символы.ПС;
		НаправлениеПоискаЗначение = ?(КоличествоСимволовПодЗначение > 0, НаправлениеПоиска.СНачала, НаправлениеПоиска.СКонца);
		ПозНачПС = СтрНайти(ЗначениеИзТекста, КлючПоискаПС, НаправлениеПоискаЗначение);
		
		Если ПозНачПС > 0 Тогда
			Если КоличествоСимволовПодЗначение > 0 Тогда
				ЗначениеИзТекста = Лев(ЗначениеИзТекста, ПозНачПС);
			ИначеЕсли КоличествоСимволовПодЗначение < 0 Тогда
				ЗначениеИзТекста = Сред(ЗначениеИзТекста, ПозНачПС);
			КонецЕсли;
			
			ЗначениеИзТекста = СокрЛП(ЗначениеИзТекста);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеИзТекста;
	
КонецФункции

Функция СтрокаКакЧисло(Знач ИсходнаяСтрока) 
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Длина = СтрДлина(ИсходнаяСтрока);
	Для НомерСимвола = 1 По Длина Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			Если Результат <> 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			Если Не ЗнакОтрицательный Или Результат = 0 Тогда // Не было открывающей скобки или нет числа.
				Возврат Неопределено;
			КонецЕсли;
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				Возврат Неопределено; // Разделитель уже был, следовательно это не число.
			КонецЕсли;
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолПоКлассификатору(Знач ТекстДляОбработки)
	
	Пол = Неопределено;
	
		СоотвтествиеПола = СписокСоответствийПола();
		ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
		Пол = СоотвтествиеПола.Получить(НРег(ТекстДляОбработки));
		
	Возврат Пол;
КонецФункции

Функция ГражданствоПоКлассификатору(Знач ТекстДляОбработки, Знач ВидРезюме = Неопределено)
	
	Гражданство = Неопределено;
	
	Если ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		Гражданство = ГражданствоПоКлассификатору(ТекстДляОбработки);
	ИначеЕсли ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		Гражданство = ГражданствоПоКлассификатору(ТекстДляОбработки);
	Иначе
		СоотвтествиеГражданства = СписокСоответствийГражданства();
		ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
		Гражданство = СоотвтествиеГражданства.Получить(НРег(ТекстДляОбработки));
	КонецЕсли;		
		
	Возврат Гражданство;
	
КонецФункции

Функция СемейноеПоложениеПоКлассификатору(Знач ТекстДляОбработки, Знач ВидРезюме = Неопределено)
	
	СемейноеПоложение = Неопределено;
	
	Если ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		СемейноеПоложение = СемейноеПоложениеПоКлассификатору(ТекстДляОбработки);
	ИначеЕсли ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		СемейноеПоложение = СемейноеПоложениеПоКлассификатору(ТекстДляОбработки);
	Иначе
		СоотвтествиеСемейногоПоложения = СписокСоответствийСемейноеПоложение();
		ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
		СемейноеПоложение = СоотвтествиеСемейногоПоложения.Получить(НРег(ТекстДляОбработки));
	КонецЕсли;		
		
	Возврат СемейноеПоложение;
	
КонецФункции

Функция МассивСтруктурОпытРаботыИзТекста(Знач ТекстДляРаспознавания, Знач ФорматРезюме = Неопределено)
	
	БазовыйБлок = "";
	ЗначениеИзТекста = "";
	
	Если Не ЗначениеЗаполнено(ЗначениеИзТекста) Тогда
		БазовыйБлок = "Опыт работы";
		ПравилоПоиска = ПравилоПоискаПоКлючу(БазовыйБлок, Ложь, 0, Истина, Истина);
		ТекстДляРаспознавания = ЗначениеИзТекстаПоКлючевомуСлову(ТекстДляРаспознавания, ПравилоПоиска);
	КонецЕсли;
	
	СтруктураСоставаБлока = СтруктураСтрокиОпытаРаботы();
	
	СоставБлокаИсточника = ПравилоРаспознаванияОпытаРаботы(ФорматРезюме);
	
	КоличествоСтрок = СтрЧислоСтрок(ТекстДляРаспознавания);
	КоличествоБлоковИсточника = СоставБлокаИсточника.Количество();
	МассивЭлементовБлока = Новый Массив;
	
	Если КоличествоБлоковИсточника > 0 Тогда
		ИдПравила = 0;
		ПервыйБлок = СоставБлокаИсточника[0];
		
		Для Каждого ТекущийБлок Из СоставБлокаИсточника Цикл
			Если ТекущийБлок.Обязательный Тогда
				ПервыйБлок = ТекущийБлок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Ид = 1 По КоличествоСтрок Цикл
			
			ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(ТекстДляРаспознавания, Ид));
			ТекущийБлок = СоставБлокаИсточника[ИдПравила]; 
			
			Если ТекущаяСтрока = "" Тогда
				Если ТекущийБлок.КоличествоСтрок > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Проверяем, закончился ли блок с опытом работы.
			Если СледующийБлокРезюме(ТекущаяСтрока, БазовыйБлок, ФорматРезюме) Тогда
				Если ТекущийБлок <> ПервыйБлок Тогда
					МассивЭлементовБлока.Добавить(СтруктураСоставаБлока);
				КонецЕсли;
				Прервать;
			КонецЕсли;                                                    
			
			// Проверяем а не перескочил ли подблок (только для блоков с разделителями).
			БлокПоСтроке = СоставБлокаИсточника.Найти(ТекущаяСтрока, "КлючПоиска"); 
			Если БлокПоСтроке <> Неопределено И БлокПоСтроке <> ТекущийБлок Тогда
				ИдПравилаНовый = БлокПоСтроке.ПорядковыйНомер-1;
				Если ИдПравилаНовый < ИдПравила Тогда
					МассивЭлементовБлока.Добавить(СтруктураСоставаБлока);
					СтруктураСоставаБлока = СтруктураСтрокиОпытаРаботы();
				КонецЕсли;
				ИдПравила = ИдПравилаНовый;
				Продолжить;
			КонецЕсли;
			
			// Проверяем, закончился ли подблок с текущей строкой списка блока. 
			// Для блоков без разделителей считаем, что все новые блоки начинаются с даты.
			Если ТекущийБлок <> ПервыйБлок Тогда
				Если ПервыйБлок.КлючПоиска = "" Тогда
					Период = СтрокаКакПериод(ТекущаяСтрока);
					ДатаНачала = Период.ДатаНачала;
					ДатаОкончания = Период.ДатаОкончания;
					Если ДатаНачала <> Дата(1, 1, 1) Тогда
						МассивЭлементовБлока.Добавить(СтруктураСоставаБлока);
						СтруктураСоставаБлока = СтруктураСтрокиОпытаРаботы();
						ИдПравила = ПервыйБлок.ПорядковыйНомер-1;
						ТекущийБлок = СоставБлокаИсточника[ИдПравила]; 
					КонецЕсли;
				КонецЕсли;                          
			КонецЕсли;                          
			
			// Если текущая строка, это заголовок блока, то мы пропускаем такую строку.
			Если ТекущийБлок.КлючПоиска <> "" И СтрНайти(ТекущаяСтрока, ТекущийБлок.КлючПоиска) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляОбработки = ТекущаяСтрока;
			
			Для ИдСтрокПодблока = 1 По ТекущийБлок.КоличествоСтрок-1 Цикл
				Ид = Ид + 1;
				Если Ид <= КоличествоСтрок Тогда
					ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(ТекстДляРаспознавания, Ид));
					ДанныеДляОбработки = ДанныеДляОбработки + Символы.ПС + ТекущаяСтрока;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущийБлок.КоличествоСтрок = 1 И ТекущийБлок.БлокРазделитель <> ""  Тогда
				ПозицияРазделителя = СтрНайти(ДанныеДляОбработки, ТекущийБлок.БлокРазделитель);
				Если ПозицияРазделителя > 0 Тогда
					ДанныеДляОбработки = Лев(ДанныеДляОбработки, ПозицияРазделителя-1);
					ТекстДляРаспознавания = СтрЗаменить(ТекстДляРаспознавания, ДанныеДляОбработки + ТекущийБлок.БлокРазделитель, "");
					ДанныеДляОбработки = СокрЛП(ДанныеДляОбработки);
					Ид = Ид - 1;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураСоставаБлока.Свойство(ТекущийБлок.Наименование) Тогда 
				Если ТекущийБлок.ТипДанных = "Период" Тогда
					
					Период = СтрокаКакПериод(ДанныеДляОбработки);
					СтруктураСоставаБлока.ДатаНачала = Формат(Период.ДатаНачала, "ДФ=yyyy-MM-dd; ДП=' '") ;
					СтруктураСоставаБлока.ДатаОкончания = Формат(Период.ДатаОкончания, "ДФ=yyyy-MM-dd; ДП=' '");
					
				ИначеЕсли ТекущийБлок.ТипДанных = "Дата" Тогда
					
					СтруктураСоставаБлока[ТекущийБлок.Наименование] = СтрокаКакДата(ДанныеДляОбработки);
					
				ИначеЕсли Найти(ТекущийБлок.ТипДанных, "Справочник") Тогда
					
					ЗначениеИзТекста = ЗначениеДоРазделителя(ДанныеДляОбработки);
					
					Если ТекущийБлок.ТипДанных = "Справочник" Тогда
						СтруктураСоставаБлока[ТекущийБлок.Наименование] = СтрокаКакЗначениеВБазе(ЗначениеИзТекста, ТекущийБлок);
					КонецЕсли;
					
				ИначеЕсли ТекущийБлок.ТипДанных = "ПроизвольнаяСтрока" Тогда
					
					СтруктураСоставаБлока[ТекущийБлок.Наименование] = СокрЛП("" + СтруктураСоставаБлока[ТекущийБлок.Наименование] 
																				+ ?(СтруктураСоставаБлока[ТекущийБлок.Наименование] = Неопределено, "", Символы.ПС )
																				+ ДанныеДляОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийБлок.КоличествоСтрок > 0 Тогда
				ИдПравила = ИдПравила + 1;
			КонецЕсли;
			
			// Последний блок может состоять из произвольного количества строчек, и он будет сброшен, только признаком начала
			// нового блока или подблока В противном случае переходим к первому блоку.
			Если ИдПравила >= КоличествоБлоковИсточника Тогда
				Если ТекущийБлок.КоличествоСтрок = 0 Тогда
					ИдПравила = ИдПравила - 1;
				Иначе
					МассивЭлементовБлока.Добавить(СтруктураСоставаБлока);
					СтруктураСоставаБлока = СтруктураСтрокиОпытаРаботы();
					ИдПравила = ПервыйБлок.ПорядковыйНомер-1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивЭлементовБлока;
КонецФункции	

Функция СтрокаКакДата(Знач ИсходнаяСтрока)
	
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"г.","");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"года","");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"год","");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,Символы.НПП,".");
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,Символы.ПС," ");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока," ",".");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,",",".");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"/",".");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"-",".");                    
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока,"..",".");
	ЧастиСтроки = СтрРазделить(ИсходнаяСтрока,".");
	
	ДеньМесяца = 0;  
	НомерМесяца = 0;                                    
	Год = 0;
	
	КоличествоЧастейСтроки = ЧастиСтроки.Количество();
	Если КоличествоЧастейСтроки = 1 Тогда
		Попытка 
	 		Год = Число(ЧастиСтроки[0]); 
			Если Год <= 12 Тогда 
				НомерМесяца = Год;
				Год = Год(ТекущаяДатаСеанса());
			КонецЕсли;
		Исключение
			НомерМесяца = НомерМесяцаПоНаименованиюМесяца(ЧастиСтроки[0]);
			Если НомерМесяца <> 0 Тогда
				Год = Год(ТекущаяДатаСеанса());
			КонецЕсли;
		КонецПопытки;
	ИначеЕсли КоличествоЧастейСтроки = 2 Тогда
		Попытка 
			
			ТекЧасть = ЧастиСтроки[1];
			
			Если СтрДлина(ТекЧасть) > 4 Тогда
				ТекЧасть = Лев(ТекЧасть, 4);
			КонецЕсли;

	 		Год = Число(ТекЧасть); 
			Если Год <= 12 Тогда 
				НомерМесяца = Год;
				Год = Год(ТекущаяДатаСеанса());
			КонецЕсли;
		Исключение
			НомерМесяца = НомерМесяцаПоНаименованиюМесяца(ЧастиСтроки[1]);
			Если НомерМесяца <> 0 Тогда
				Год = Год(ТекущаяДатаСеанса());
			КонецЕсли;
		КонецПопытки;
		
		Если НомерМесяца > 0 Тогда
			Попытка 
				ДеньМесяца = Число(ЧастиСтроки[0]); 
			Исключение
				ДеньМесяца = 1;
			КонецПопытки;
		Иначе
			Попытка 
				НомерМесяца = Число(ЧастиСтроки[0]); 
			Исключение
				НомерМесяца = НомерМесяцаПоНаименованиюМесяца(ЧастиСтроки[0]);
			КонецПопытки;
		КонецЕсли;
		
		Если (ДеньМесяца = 0 И Год = 0) ИЛИ  НомерМесяца = 0 Тогда
			ДеньМесяца = 0;
			НомерМесяца = 0;
			Год = 0;
		КонецЕсли;
		
	ИначеЕсли КоличествоЧастейСтроки > 2 Тогда
		Для Каждого ТекЧасть Из ЧастиСтроки Цикл
			Если ДеньМесяца = 0 Тогда
				Попытка 
					ДеньМесяца = Число(ТекЧасть); 
				Исключение
					НомерМесяца = НомерМесяцаПоНаименованиюМесяца(ТекЧасть);
					ДеньМесяца = 1;
				КонецПопытки;
			ИначеЕсли НомерМесяца = 0 Тогда
				Попытка 
					НомерМесяца = Число(ТекЧасть); 
				Исключение
					НомерМесяца = НомерМесяцаПоНаименованиюМесяца(ТекЧасть);
				КонецПопытки;
			Иначе
				Попытка 
					Если СтрДлина(ТекЧасть) > 4 Тогда
						ТекЧасть = Лев(ТекЧасть, 4);
					КонецЕсли;
					Год = Число(ТекЧасть); 
					Прервать;
				Исключение
					// Если не удалось преобразовать в число ничего не делаем.
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Если ДеньМесяца = 0 ИЛИ НомерМесяца = 0 ИЛИ Год = 0 Тогда
			ДеньМесяца = 0;
			НомерМесяца = 0;
			Год = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ДеньМесяца = 0 Тогда
		ДеньМесяца = 1;
	КонецЕсли;
	
	Если Год = 0 Тогда
		Год = ДеньМесяца;
		ДеньМесяца = 1;
	ИначеЕсли Год > 3000 Тогда
		Год = 1;
	ИначеЕсли Год < 100 Тогда
		Год = 2000 + Год;
	КонецЕсли;
	
	Если НомерМесяца = 0 
		ИЛИ НомерМесяца > 12 Тогда
		НомерМесяца = 1;
	КонецЕсли;
	
	ДатаМесяца = Дата(Год, НомерМесяца, 1);
	
	Если День(КонецМесяца(ДатаМесяца)) < ДеньМесяца Тогда
		ДеньМесяца = 1;
	КонецЕсли;
	
	Возврат Дата(Год, НомерМесяца, ДеньМесяца);
	
КонецФункции

Функция НомерМесяцаПоНаименованиюМесяца(Знач СтрокаМесяца)
	
	МассивМесяцев = МассивМесяцев();
	ИскомыйМесяц = 0;
	НомерМесяца = 0;
	
	Для Каждого ТекЭлемент Из МассивМесяцев Цикл
		
		НомерМесяца = НомерМесяца + 1;
		
		СписокКлючейПоиска = СтрРазделить(ТекЭлемент,",");
		
		Для Каждого КлючПоиска Из СписокКлючейПоиска Цикл
			НачПоз = Найти(НРег(СтрокаМесяца), КлючПоиска);
			Если НачПоз > 0  Тогда
				ИскомыйМесяц = НомерМесяца;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИскомыйМесяц;
	
КонецФункции

Функция МассивМесяцев()
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить("янв");
	МассивМесяцев.Добавить("фев");
	МассивМесяцев.Добавить("мар");
	МассивМесяцев.Добавить("апр");
	МассивМесяцев.Добавить("май,мая");
	МассивМесяцев.Добавить("июн");
	МассивМесяцев.Добавить("июл");
	МассивМесяцев.Добавить("авг");
	МассивМесяцев.Добавить("сен");
	МассивМесяцев.Добавить("окт");
	МассивМесяцев.Добавить("ноя");
	МассивМесяцев.Добавить("дек");
	
	Возврат МассивМесяцев;
КонецФункции

Функция СтрокаКакEmail(Знач ТекстДляРаспознавания)
	ЗначениеИзТекста = Неопределено;
	
	ТекстДляРаспознавания = СтрЗаменить(ТекстДляРаспознавания, Символы.ПС, " ");
	ТекстДляРаспознавания = СтрЗаменить(ТекстДляРаспознавания, "  ", " ");
	ЧастиТекста = СтрРазделить(ТекстДляРаспознавания, " ");
	
	КлючПоиска = "@";
	
	Для Каждого ТекущаяЧасть Из ЧастиТекста Цикл
		
		ПозНач = СтрНайти(ТекущаяЧасть, КлючПоиска);
		Если ПозНач > 0 Тогда
			ЗначениеИзТекста = СокрЛП(ТекущаяЧасть);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеИзТекста;
КонецФункции

Процедура ПолучитьСоставБлокаОпытаРаботыДляHH(СоставБлока)
	
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 1, "Период", 		"Период",				Истина, "", "", 1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 2, "Организация",	"ПроизвольнаяСтрока",	Истина, "", "", 1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 3, "СайтКомпании",	"ПроизвольнаяСтрока", 	Истина, "", "", 1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 4, "Должность", 	"ПроизвольнаяСтрока",	Истина, "", "", 1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 5, "Обязанности", 	"ПроизвольнаяСтрока",	Истина, "", "", 0);
	
КонецПроцедуры

Процедура ПолучитьСоставБлокаОпытаРаботыДляSJ(СоставБлока)
	
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 1, "Период", 						"Период",				Истина, "", "Период работы",	 						1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 2, "Должность", 					"ПроизвольнаяСтрока",	Ложь, 	"", "Должность", 								1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 3, "Организация",					"ПроизвольнаяСтрока",	Ложь, 	"", "В организации", 							1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 4, "СайтКомпании",					"ПроизвольнаяСтрока",	Ложь, 	"", "Сайт компании", 							1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 5, "СфераДеятельностиКомпании", 	"ПроизвольнаяСтрока",	Ложь, 	"", "Деятельность компании", 					1);
	ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, 6, "Обязанности", 					"ПроизвольнаяСтрока",	Ложь, 	"", "Должностные обязанности и достижения", 	0);
	
КонецПроцедуры
 
Функция СписокСоответствийПола()
	
	СоотвтествиеКлассификаторов = Новый Соответствие(); 
	
	СоотвтествиеКлассификаторов.Вставить("мужчина", ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"));
	СоотвтествиеКлассификаторов.Вставить("мужской", ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"));
	
	СоотвтествиеКлассификаторов.Вставить("женщина", ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"));
	СоотвтествиеКлассификаторов.Вставить("женский", ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский"));
	
	Возврат СоотвтествиеКлассификаторов;
	
КонецФункции

Функция СписокСоответствийГражданства()
	СоотвтествиеКлассификаторов = Новый Соответствие(); 
	
	СоотвтествиеКлассификаторов.Вставить("рф", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	СоотвтествиеКлассификаторов.Вставить("россия", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	СоотвтествиеКлассификаторов.Вставить("русский", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	СоотвтествиеКлассификаторов.Вставить("беларусь", Справочники.СтраныМира.НайтиПоКоду(112));
	СоотвтествиеКлассификаторов.Вставить("беларус", Справочники.СтраныМира.НайтиПоКоду(112));
	
	Возврат СоотвтествиеКлассификаторов;
	
КонецФункции

Функция СтруктураСтрокиОпытаРаботы()
	СтруктураСтрокиОпытаРаботы = Новый Структура();
	
	СтруктураСтрокиОпытаРаботы.Вставить("Период");
	СтруктураСтрокиОпытаРаботы.Вставить("ДатаНачала");
	СтруктураСтрокиОпытаРаботы.Вставить("ДатаОкончания");
	СтруктураСтрокиОпытаРаботы.Вставить("Организация");
	СтруктураСтрокиОпытаРаботы.Вставить("Должность");
	СтруктураСтрокиОпытаРаботы.Вставить("Обязанности");
	СтруктураСтрокиОпытаРаботы.Вставить("СфераДеятельностиКомпании");
	                            
	Возврат СтруктураСтрокиОпытаРаботы;
	
КонецФункции

Функция СписокСоответствийСемейноеПоложение()
	
	СоотвтествиеКлассификаторов = Новый Соответствие(); 
	
	СоотвтествиеКлассификаторов.Вставить("холост", Справочники.СостояниеВБраке.НайтиПоКоду(1));
	СоотвтествиеКлассификаторов.Вставить("не замужем", Справочники.СостояниеВБраке.НайтиПоКоду(1));
	СоотвтествиеКлассификаторов.Вставить("женат", Справочники.СостояниеВБраке.НайтиПоКоду(2));
	СоотвтествиеКлассификаторов.Вставить("замужем", Справочники.СостояниеВБраке.НайтиПоКоду(2));
	СоотвтествиеКлассификаторов.Вставить("разведен", Справочники.СостояниеВБраке.НайтиПоКоду(5));
	СоотвтествиеКлассификаторов.Вставить("разведена", Справочники.СостояниеВБраке.НайтиПоКоду(5));
	
	Возврат СоотвтествиеКлассификаторов;
	
КонецФункции

Функция СледующийБлокРезюме(Знач ТекстДляОбработки, Знач ТекущийЭтап, Знач ФорматРезюме)
	
	Результат = Ложь;
	
	ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
	Если ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		СтрокаНазванийБлоков = "Желаемая должность и зарплатаОпыт работыОбразованиеКлючевые навыкиДополнительная информацияПовышение квалификации, курсыТесты, экзаменыЭлектронные сертификатыКлючевые навыкиЗнание языковНавыкиРекомендацииОбо мне";
	ИначеЕсли ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		СтрокаНазванийБлоков = "Курсы и тренингиОпыт работыОбразованиеИностранные языкиДополнительная информацияКлючевые навыки и достиженияДополнительные сведения";
	Иначе
		СтрокаНазванийБлоков = "Желаемая должность и зарплатаОпыт работыОбразованиеКлючевые навыкиДополнительная информацияПовышение квалификации, курсыТесты, экзаменыЭлектронные сертификатыКлючевые навыкиЗнание языковНавыкиРекомендацииОбо мне";
	КонецЕсли;                    
	
	СтрокаНазванийБлоковБезТекущего = СтрЗаменить(СтрокаНазванийБлоков, ТекущийЭтап, "");
	Если ТекстДляОбработки <> "" И СтрНайти(СтрокаНазванийБлоковБезТекущего, ТекстДляОбработки) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаКакПериод(Знач ТекстДляОбработки)
	Период = Новый Структура("ДатаНачала, ДатаОкончания");
	
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, "С ", ""); 
	
	ПозНач = СтрНайти(ТекстДляОбработки, "год");
	Если ПозНач > 0 Тогда
		ТекстДляОбработки = СокрЛП(Лев(ТекстДляОбработки, ПозНач-1));
	КонецЕсли;
	
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки,"—", "-");
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки,"по", "-");
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки,Символы.ПС, "-");
	
	ЧастиПериода = СтрРазделить(ТекстДляОбработки,"-");  
	
	Если ЧастиПериода.Количество() > 1 Тогда
		Период.ДатаНачала = СтрокаКакДата(ЧастиПериода[0]);
		Период.ДатаОкончания = СтрокаКакДата(ЧастиПериода[1]);
	Иначе
		Период.ДатаНачала = СтрокаКакДата(ТекстДляОбработки);
		Период.ДатаОкончания = Дата(1,1,1);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

Функция СтрокаКакЗначениеВБазе(Знач ЗначениеВИсточнике, Знач ПравилоПоиска) 
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствияВнутреннихИВнешнихСправочниковИнформации.ЗначениеВБазе
	               |ИЗ
	               |	РегистрСведений.СоответствияВнутреннихИВнешнихСправочниковИнформации КАК СоответствияВнутреннихИВнешнихСправочниковИнформации
	               |ГДЕ
	               |	СоответствияВнутреннихИВнешнихСправочниковИнформации.БазовыйБлок = &БазовыйБлок
	               |	И СоответствияВнутреннихИВнешнихСправочниковИнформации.ЗначениеВИсточнике = &ЗначениеВИсточнике";
	Запрос.УстановитьПараметр("БазовыйБлок", ПравилоПоиска.Наименование);
	Запрос.УстановитьПараметр("ЗначениеВИсточнике", ЗначениеВИсточнике);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЗначениеВБазе;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуБлокаОпытаРаботы(СоставБлока, Знач ПорядковыйНомер, Знач Наименование, Знач ТипДанных, Знач Обязательный, Знач БлокРазделитель, Знач КлючПоиска, Знач КоличествоСтрок)
	
	ПодБлок = СоставБлока.Добавить();
	ПодБлок.ПорядковыйНомер = ПорядковыйНомер;
	ПодБлок.Наименование = Наименование;
	ПодБлок.ТипДанных = ТипДанных;
	ПодБлок.Обязательный = Обязательный;
	ПодБлок.БлокРазделитель = БлокРазделитель;
	ПодБлок.КлючПоиска = КлючПоиска;
	ПодБлок.КоличествоСтрок = КоличествоСтрок;
	
КонецПроцедуры

Функция МассивСтруктурОбразованиеИзТекста(Знач ТекстДляРаспознаванияИсходный, Знач ФорматРезюме = Неопределено)
	
	ТекущийБлок = "Образование";
	ПозНач = СтрНайти(ТекстДляРаспознаванияИсходный, ТекущийБлок);
	ТекстДляРаспознавания = "";
	
	Пока ПозНач > 0 Цикл
		ПозКон = СтрНайти(ТекстДляРаспознаванияИсходный, Символы.ПС,, ПозНач);  
		Если СтрДлина(ТекущийБлок) <> (ПозКон-ПозНач) Тогда
			ПозНач = СтрНайти(ТекстДляРаспознаванияИсходный, ТекущийБлок,,ПозКон);
		Иначе
			ТекстДляРаспознавания = Сред(ТекстДляРаспознаванияИсходный, ПозКон + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Правила = ПравилоРаспознаванияОбразование(ФорматРезюме);
	КоличествоСтрок = СтрЧислоСтрок(ТекстДляРаспознавания);
	КоличествоПравил = Правила.Количество() - 1;
	ОбразованиеМассив = Новый Массив;
	СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
	
	Если КоличествоПравил > 0 Тогда
		ИдПравила = 1;
		Для Ид = 1 По КоличествоСтрок Цикл
			
			ТекущаяСтрокаПравила = Правила[ИдПравила]; 
			ТекущаяСтрока = СтрПолучитьСтроку(ТекстДляРаспознавания, Ид);
			ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
			
			Если СледующийБлокРезюме(ТекущаяСтрока, "Образование", ФорматРезюме) Тогда
				Если ТекущаяСтрокаПравила = "Конец" Тогда
					ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
					СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			Если ТекущаяСтрока = "" Тогда
				Если ТекущаяСтрокаПравила = "Конец" Тогда
					ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
					СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
					ИдПравила = 1;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяСтрокаПравила <> "УчебноеЗаведение" Тогда
				Если СтрНайти(ТекущаяСтрока, "Учебное заведение:") Тогда
					ИдПравилаНовый = Правила.Найти("УчебноеЗаведение") ;
					Если ИдПравилаНовый < ИдПравила Тогда
						ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
						СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
					КонецЕсли;
					ИдПравила = ИдПравилаНовый;
					Продолжить;
				КонецЕсли;       
			КонецЕсли;
			
			Если ТекущаяСтрокаПравила <> "ВидОбразования" Тогда
				Если СтрНайти(ТекущаяСтрока, "Уровень образования:") Тогда
					ИдПравилаНовый = Правила.Найти("ВидОбразования") ;
					Если ИдПравилаНовый < ИдПравила Тогда
						ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
						СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
					КонецЕсли;
					ИдПравила = ИдПравилаНовый;
					Продолжить;
				КонецЕсли;       
			КонецЕсли;
			
			Если ТекущаяСтрокаПравила <> "Специальность" Тогда
				Если СтрНайти(ТекущаяСтрока, "Специальность:") Тогда
					ИдПравилаНовый = Правила.Найти("Специальность") ;
					Если ИдПравилаНовый < ИдПравила Тогда
						ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
						СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
					КонецЕсли;
					ИдПравила = ИдПравилаНовый;
					Продолжить;
				КонецЕсли;       
			КонецЕсли;
			
			Если ТекущаяСтрокаПравила <> "Окончание" Тогда
				Если СтрНайти(ТекущаяСтрока, "Дата  окончания:") Тогда
					ИдПравилаНовый = Правила.Найти("Окончание") ;
					Если ИдПравилаНовый < ИдПравила Тогда
						ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
						СтруктураСтрокиОбразование = СтруктураСтрокиОбразование();
					КонецЕсли;
					ИдПравила = ИдПравилаНовый;
					Продолжить;
				КонецЕсли;       
			КонецЕсли;
			
			Если ТекущаяСтрокаПравила = "ВидОбразования" Тогда
				Если СтрНайти(ТекущаяСтрока, "Уровень образования:") Тогда
					Продолжить;
				КонецЕсли;
				СтруктураСтрокиОбразование.ВидОбразования = СокрЛП(ВидОбразованияПоКлассификатору(ТекущаяСтрока, ФорматРезюме));
			ИначеЕсли ТекущаяСтрокаПравила = "Окончание" Тогда
				Если СтрНайти(ТекущаяСтрока, "Дата окончания:") Тогда
					Продолжить;
				КонецЕсли;
				СтруктураСтрокиОбразование.Окончание = Год(СтрокаКакДата(ТекущаяСтрока));
			ИначеЕсли ТекущаяСтрокаПравила = "УчебноеЗаведение" Тогда
				Если СтрНайти(ТекущаяСтрока, "Учебное заведение:") Тогда
					Продолжить;
				КонецЕсли;
				СтруктураСтрокиОбразование.УчебноеЗаведение = ТекущаяСтрока;
			ИначеЕсли ТекущаяСтрокаПравила = "Специальность" Тогда
				Если СтрНайти(ТекущаяСтрока, "Специальность:") Тогда
					Продолжить;
				КонецЕсли;
				СтруктураСтрокиОбразование.Специальность = ТекущаяСтрока;
			ИначеЕсли ТекущаяСтрокаПравила = "Факультет" Тогда
				Если СтрНайти(ТекущаяСтрока, "Факультет:") Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТекущаяСтрокаПравила = "ФормаОбучения" Тогда
				Если СтрНайти(ТекущаяСтрока, "Форма обучения:") Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТекущаяСтрокаПравила = "Конец" Тогда
				ОбразованиеМассив.Добавить(СтруктураСтрокиОбразование);
			КонецЕсли;
			
			ИдПравила = ИдПравила + 1;
			Если ИдПравила > КоличествоПравил Тогда
				ИдПравила = 1;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ОбразованиеМассив;
	
КонецФункции	

Функция ПравилоРаспознаванияОбразование(Знач ВидРезюме = Неопределено)
	Если ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		Правило =  ПравилоРаспознаванияОбразованиеHH();
	ИначеЕсли ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		Правило =  ПравилоРаспознаванияОбразованиеSJ();
	Иначе
		Правило =  Новый Массив();
	КонецЕсли;
	Возврат Правило;                      
КонецФункции	

Функция ПравилоРаспознаванияОбразованиеHH()
	Правило = Новый Массив;
	
	Правило.Добавить("Начало");
	Правило.Добавить("ВидОбразования");
	Правило.Добавить("Окончание");
	Правило.Добавить("УчебноеЗаведение");
	Правило.Добавить("Специальность");
	Правило.Добавить("Конец");
	
	Возврат Правило;
КонецФункции

Функция ПравилоРаспознаванияОбразованиеSJ()
	Правило = Новый Массив;
	
	Правило.Добавить("Начало");
	Правило.Добавить("УчебноеЗаведение");
	Правило.Добавить("Окончание");
	Правило.Добавить("ВидОбразования");
	Правило.Добавить("Факультет");
	Правило.Добавить("Специальность");
	Правило.Добавить("ФормаОбучения");
	Правило.Добавить("Конец");
	
	Возврат Правило;
КонецФункции

Функция СтруктураСтрокиОбразование()
	СтруктураСтрокиОбразование = Новый Структура();
	
	СтруктураСтрокиОбразование.Вставить("ВидОбразования");
	СтруктураСтрокиОбразование.Вставить("Окончание");
	СтруктураСтрокиОбразование.Вставить("УчебноеЗаведение");
	СтруктураСтрокиОбразование.Вставить("Специальность"); 
	СтруктураСтрокиОбразование.Вставить("Факультет"); 
	                            
	Возврат СтруктураСтрокиОбразование;
	
КонецФункции

Функция СтруктураСтрокиЗнаниеЯзыков()
	СтруктураСтрокиЗнаниеЯзыков = Новый Структура();
	
	СтруктураСтрокиЗнаниеЯзыков.Вставить("Язык");
	СтруктураСтрокиЗнаниеЯзыков.Вставить("СтепеньЗнанияЯзыка");
	СтруктураСтрокиЗнаниеЯзыков.Вставить("Содержание");
	                            
	Возврат СтруктураСтрокиЗнаниеЯзыков;
	
КонецФункции

Функция ВидОбразованияПоКлассификатору(Знач ТекстДляОбработки, Знач ВидРезюме = Неопределено)
	
	ВидОбразования = Неопределено;
	
	Если ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		ВидОбразования = ВидОбразованияПоКлассификаторуHH(ТекстДляОбработки);
	ИначеЕсли ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		ВидОбразования = ВидОбразованияПоКлассификаторуSJ(ТекстДляОбработки);
	КонецЕсли;		
		
	Возврат ВидОбразования;
КонецФункции

Функция ВидОбразованияПоКлассификаторуHH(Знач ТекстДляОбработки)
	
	СоотвтествиеВидовОбразования = СписокСоответствийВидовОбразованияHH();
	ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
	ВидОбразования = СоотвтествиеВидовОбразования.Получить(ТекстДляОбработки);
	
	Возврат ВидОбразования;
КонецФункции

Функция ВидОбразованияПоКлассификаторуSJ(Знач ТекстДляОбработки)
	
	СоотвтествиеВидовОбразования = СписокСоответствийВидовОбразованияSJ();
	ТекстДляОбработки = СокрЛП(ТекстДляОбработки);
	ВидОбразования = СоотвтествиеВидовОбразования.Получить(ТекстДляОбработки);
	
	Возврат ВидОбразования;
КонецФункции

Функция СписокСоответствийВидовОбразованияHH()
	
	СоотвтествиеВидовОбразованияHH = Новый Соответствие(); 
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее", 				ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Бакалавр", 			ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат"));
	СоотвтествиеВидовОбразованияHH.Вставить("Магистр", 				ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Кандидат наук", 		ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.АспирантураОрдинатураАдъюнктура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Доктор наук", 			ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.Докторантура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Неоконченное высшее", 	ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Среднее специальное", 	ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Среднее", 				ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование"));
	
	Возврат СоотвтествиеВидовОбразованияHH;
	
КонецФункции

Функция СписокСоответствийВидовОбразованияSJ()
	
	СоотвтествиеВидовОбразованияHH = Новый Соответствие(); 
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее", 					ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее (бакалавр)", 		ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат"));
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее (магистр)", 		ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее (кандидат наук)", 	ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.АспирантураОрдинатураАдъюнктура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Высшее (доктор наук)", 	ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.Докторантура"));
	СоотвтествиеВидовОбразованияHH.Вставить("Неполное высшее", 			ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Среднее специальное", 		ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Среднее", 					ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование"));
	СоотвтествиеВидовОбразованияHH.Вставить("Учащийся школы", 			ПредопределенноеЗначение("Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка"));
	
	Возврат СоотвтествиеВидовОбразованияHH;
	
КонецФункции

Функция МассивСтруктурЗнаниеЯзыковИзТекста(Знач ТекстДляРаспознаванияИзначальный, Знач ФорматРезюме = Неопределено)
	
	ТекущийБлок = НазваниеТекущегоБлокаПоФорматуРезюме("ЗнаниеЯзыков", ФорматРезюме);
	
	ПозНач = СтрНайти(ТекстДляРаспознаванияИзначальный, ТекущийБлок);
	
	Если ПозНач > 0 Тогда
		ПозНач = СтрНайти(ТекстДляРаспознаванияИзначальный, Символы.ПС,, ПозНач);  
		ТекстДляРаспознавания = Сред(ТекстДляРаспознаванияИзначальный, ПозНач + 1);
	Иначе
		ТекстДляРаспознавания = "";                        
	КонецЕсли;
	
	КоличествоСтрок = СтрЧислоСтрок(ТекстДляРаспознавания);
	ЗнаниеЯзыковМассив = Новый Массив;
	
	ИдПравила = 1;
	Для Ид = 1 По КоличествоСтрок Цикл
		
		ТекущаяСтрока = СтрПолучитьСтроку(ТекстДляРаспознавания, Ид);
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
		
		Если СледующийБлокРезюме(ТекущаяСтрока, ТекущийБлок, ФорматРезюме) Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущаяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"—", "-");
		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,":", "-");
		
		Если СтрЗаканчиваетсяНа(ТекущаяСтрока, "-") Тогда
			Ид = Ид + 1;
			Если Ид <= КоличествоСтрок Тогда 
				ТекущаяСтрока = ТекущаяСтрока + СтрПолучитьСтроку(ТекстДляРаспознавания, Ид)
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЧастиЗнанияЯзыков = СтрРазделить(ТекущаяСтрока, "-");
			
		СтруктураСтрокиЗнаниеЯзыков = СтруктураСтрокиЗнаниеЯзыков();
		Если ЧастиЗнанияЯзыков.Количество() > 1 Тогда
			СтруктураСтрокиЗнаниеЯзыков.Язык = СокрЛП(ЧастиЗнанияЯзыков[0]);
			СтруктураСтрокиЗнаниеЯзыков.СтепеньЗнанияЯзыка = СокрЛП(СтепеньЗнанияЯзыка(ЧастиЗнанияЯзыков[1]));
			СтруктураСтрокиЗнаниеЯзыков.Содержание = ТекущаяСтрока;
			ЗнаниеЯзыковМассив.Добавить(СтруктураСтрокиЗнаниеЯзыков);
		Иначе
			Продолжить;                    
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ЗнаниеЯзыковМассив;
	
КонецФункции	

Функция НазваниеТекущегоБлокаПоФорматуРезюме(Знач ТипБлока, Знач ВидРезюме)
	
	НазваниеТекущегоБлока = "";
	
	Если ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		Если ТипБлока = "ЗнаниеЯзыков" Тогда
			НазваниеТекущегоБлока = "Знание языков";
		КонецЕсли;
	ИначеЕсли ВидРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		Если ТипБлока = "ЗнаниеЯзыков" Тогда
			НазваниеТекущегоБлока = "Иностранные языки";
		КонецЕсли; 
	Иначе
		
	КонецЕсли;
	
	Возврат НазваниеТекущегоБлока;
	
КонецФункции

Функция СтепеньЗнанияЯзыка(Знач СтепеньЗнанияСтрока)
	Результат = Неопределено;
	СтепеньЗнанияСтрока = СокрЛП(СтепеньЗнанияСтрока);
	СтепеньЗнанияСтрока = НРег(СтепеньЗнанияСтрока);
	
	СтрокаДляПоиска = "базовыйбазовыйбазовые знаниячитаю профессиональную литературутехнический";
	
	Если СтрНайти(СтрокаДляПоиска, СтепеньЗнанияСтрока) Тогда
		Результат = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду(1);
		Возврат Результат;
	КонецЕсли;
	
	СтрокаДляПоиска = "intermediateсреднийразговорный";
	
	Если СтрНайти(СтрокаДляПоиска, СтепеньЗнанияСтрока) Тогда
		Результат = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду(2);
		Возврат Результат;
	КонецЕсли;
	
	СтрокаДляПоиска = "fluencyроднойсвободно владею";
	
	Если СтрНайти(СтрокаДляПоиска,СтепеньЗнанияСтрока) Тогда
		Результат = Справочники.СтепениЗнанияЯзыка.НайтиПоКоду(3);
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочееИзТекста(Знач ТекстДляРаспознавания, Знач ФорматРезюме = Неопределено)
	БлокиПрочее = СписокБлоковПрочее(ФорматРезюме);
	Прочее = "";
	
	Для Каждого ТекущийБлок Из БлокиПрочее Цикл
		ПозНач = СтрНайти(ТекстДляРаспознавания, ТекущийБлок);
		Если ПозНач > 0 Тогда
			ПозКон = СтрНайти(ТекстДляРаспознавания, Символы.ПС,, ПозНач);  
			ЗначениеСтроки = Сред(ТекстДляРаспознавания, ПозНач, ПозКон-ПозНач);
			ЗначениеСтроки = СокрЛП(СтрЗаменить(ЗначениеСтроки, ":", ""));
			ЗначениеСтроки = СокрЛП(СтрЗаменить(ЗначениеСтроки, ";", ""));
			
			Если СтрДлина(ТекущийБлок) <> СтрДлина(ЗначениеСтроки) Тогда
				ТекстДляРаспознаванияИзменененный = "";
			Иначе
				ТекстДляРаспознаванияИзменененный = Сред(ТекстДляРаспознавания, ПозНач);
			КонецЕсли;
		Иначе
			ТекстДляРаспознаванияИзменененный = "";
		КонецЕсли;
		
		КоличествоСтрок = СтрЧислоСтрок(ТекстДляРаспознаванияИзменененный);
		
		Для Ид = 1 По КоличествоСтрок Цикл
			
			ТекущаяСтрока = СтрПолучитьСтроку(ТекстДляРаспознаванияИзменененный, Ид);
			
			Если СледующийБлокРезюме(ТекущаяСтрока, ТекущийБлок, ФорматРезюме) Тогда
				Прервать;
			КонецЕсли;
			
			Прочее = Прочее + ТекущаяСтрока + Символы.ПС;
			
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат	Прочее;
	
КонецФункции

Функция СписокБлоковПрочее(Знач ФорматРезюме)
	МассивБлоковПрочего = Новый Массив();
	
	Если ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.HeadHunter") Тогда
		МассивБлоковПрочего.Добавить("Навыки");
		МассивБлоковПрочего.Добавить("Рекомендации");
		МассивБлоковПрочего.Добавить("Обо мне");
	ИначеЕсли ФорматРезюме = ПредопределенноеЗначение("Справочник.ИсточникиИнформацииОКандидатах.SuperJob") Тогда
		МассивБлоковПрочего.Добавить("Курсы и тренинги");
		МассивБлоковПрочего.Добавить("Дополнительная информация");
	КонецЕсли;
	
	Возврат МассивБлоковПрочего;
	
КонецФункции

#КонецОбласти 
