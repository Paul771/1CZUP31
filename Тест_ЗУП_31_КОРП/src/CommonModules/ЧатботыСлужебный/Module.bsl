
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПолучитьСообщенияЧатбота(Чатбот) Экспорт
	
	ЗапроситьОбновленияЧатбота(Чатбот);
	
	Если ОбработатьПринятыеСообщенияЧатбота(Чатбот) Тогда
		ПолучитьСообщенияЧатбота(Чатбот);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьВходящийHTTPЗапрос(HTTPВходящийЗапрос) Экспорт
	
	СтруктураОтвета = Новый Структура(
		"КодСостояния, 
		|Причина, 
		|Заголовки");
	
	Токен = HTTPВходящийЗапрос.ПараметрыURL["Токен"];
	Если Не ЗначениеЗаполнено(Токен) Тогда
		СтруктураОтвета.КодСостояния = 400;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Чатбот = Справочники.Чатботы.ЧатботПоТокену(Токен);
	УстановитьПривилегированныйРежим(Ложь);
	Если Чатбот.Пустая() Тогда
		СтруктураОтвета.КодСостояния = 403;
		СтруктураОтвета.Причина = НСтр("ru = 'Не обнаружено ни одного чатбота с указанным токеном.'");
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ТелоЗапроса = HTTPВходящийЗапрос.ПолучитьТелоКакСтроку();
	Если ПустаяСтрока(ТелоЗапроса) Тогда
		СтруктураОтвета.КодСостояния = 204;
		СтруктураОтвета.Причина = НСтр("ru = 'Пустой запрос.'");
		Возврат СтруктураОтвета;
	КонецЕсли;
	СтруктураПакета = ЧатботыСлужебный.JSONВДанные(ТелоЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	ПринятьОбновлениеЧатбота(Чатбот, СтруктураПакета);
	ОбработатьПринятыеСообщенияЧатбота(Чатбот);
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураОтвета.КодСостояния = 200;
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИспользуемыеЧатботы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чатботы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Чатботы КАК Чатботы
		|ГДЕ
		|	Чатботы.Используется = ИСТИНА";
	
	Возврат Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

Функция ДанныеЧатботов() Экспорт
	
	ДанныеЧатботов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чатботы.Ссылка КАК Ссылка,
		|	Чатботы.ВерсияДанных КАК ВерсияДанных,
		|	Чатботы.ПометкаУдаления КАК ПометкаУдаления,
		|	Чатботы.Код КАК Код,
		|	Чатботы.Наименование КАК Наименование,
		|	Чатботы.Тип КАК Тип,
		|	Чатботы.АдресПубликацииИнформационнойБазыВИнтернете КАК АдресПубликацииИнформационнойБазыВИнтернете,
		|	Чатботы.СпособПолученияОбновлений КАК СпособПолученияОбновлений,
		|	Чатботы.Используется КАК Используется,
		|	Чатботы.РегламентноеЗаданиеGUID КАК РегламентноеЗаданиеGUID,
		|	Чатботы.ТекстПриветствия КАК ТекстПриветствия,
		|	Чатботы.ВыводитьОписаниеКомпании КАК ВыводитьОписаниеКомпании,
		|	Чатботы.ОписаниеКомпании КАК ОписаниеКомпании,
		|	Чатботы.ЗапрашиватьИмя КАК ЗапрашиватьИмя,
		|	Чатботы.ТекстЗапросаИмени КАК ТекстЗапросаИмени,
		|	Чатботы.ЗапрашиватьВозраст КАК ЗапрашиватьВозраст,
		|	Чатботы.ТекстЗапросаВозраста КАК ТекстЗапросаВозраста,
		|	Чатботы.ЗапрашиватьНомерТелефона КАК ЗапрашиватьНомерТелефона,
		|	Чатботы.ТекстЗапросаНомераТелефона КАК ТекстЗапросаНомераТелефона,
		|	Чатботы.ЗапрашиватьАдресЭлектроннойПочты КАК ЗапрашиватьАдресЭлектроннойПочты,
		|	Чатботы.ТекстЗапросаАдресаЭлектроннойПочты КАК ТекстЗапросаАдресаЭлектроннойПочты,
		|	Чатботы.ЗапрашиватьИнформациюОСебе КАК ЗапрашиватьИнформациюОСебе,
		|	Чатботы.ТекстЗапросаИнформацииОСебе КАК ТекстЗапросаИнформацииОСебе,
		|	Чатботы.ЗапрашиватьФайлРезюме КАК ЗапрашиватьФайлРезюме,
		|	Чатботы.ТекстЗапросаФайлаРезюме КАК ТекстЗапросаФайлаРезюме,
		|	Чатботы.ИсточникИнформации КАК ИсточникИнформации
		|ИЗ
		|	Справочник.Чатботы КАК Чатботы";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеЧатбота = ОписаниеЧатбота();
		ЗаполнитьЗначенияСвойств(ОписаниеЧатбота, Выборка);
		ОписаниеЧатбота.Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Выборка.Ссылка, "Токен");
		ДанныеЧатботов.Вставить(Выборка.Ссылка, Новый ФиксированнаяСтруктура(ОписаниеЧатбота));
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ДанныеЧатботов);
	
КонецФункции

Функция ДанныеЧата(Чат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Чат", Чат);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЧатыЧатботов.Ссылка КАК Ссылка,
		|	ЧатыЧатботов.Код КАК Код,
		|	ЧатыЧатботов.Наименование КАК Наименование,
		|	ЧатыЧатботов.Групповой КАК Групповой
		|ИЗ
		|	Справочник.ЧатыЧатботов КАК ЧатыЧатботов
		|ГДЕ
		|	ЧатыЧатботов.Ссылка = &Чат";
	
	Возврат Новый ФиксированнаяСтруктура(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]));
	
КонецФункции

Функция УстановитьWebhook(Чатбот) Экспорт
	
	Результат = Неопределено;
	ОписаниеОшибки = "";
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	УстановитьWebhookTelegram(Чатбот, ДанныеЧатбота, Результат, ОписаниеОшибки);
	
	Возврат Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
	
КонецФункции

Функция УдалитьWebhook(Чатбот) Экспорт
	
	Результат = Неопределено;
	ОписаниеОшибки = "";
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	УдалитьWebhookTelegram(Чатбот, ДанныеЧатбота, Результат, ОписаниеОшибки);
	
	Возврат Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
	
КонецФункции

Процедура ПроверитьWebhook(Чатбот, РезультатПроверки) Экспорт
	
	РезультатПроверки = Неопределено;
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	ПроверитьWebhookTelegram(Чатбот, ДанныеЧатбота, РезультатПроверки);
	
КонецПроцедуры

Процедура ПроверитьLongPolling(Чатбот, РезультатПроверки) Экспорт
	
	Задание = ЗаданиеПолученияСообщенийЧатботу(ДанныеЧатботов()[Чатбот].РегламентноеЗаданиеGUID);
	
	Если Задание = Неопределено Тогда
		РезультатПроверки = НСтр("ru = 'Регламентное задание не обнаружено.'");
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Регламентное задание «%1» %2. 
              |Идентификатор %3.'"),
		Задание.Наименование,
		Формат(Задание.Использование, "БЛ='не используется'; БИ=используется"),
		Задание.УникальныйИдентификатор);
		
	Если Не Задание.Использование Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '«Длинный» запрос к серверу чатбота начинается по расписанию: %1.'"),
		Задание.Расписание);
		
	Если Задание.ПоследнееЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Последний запуск в %1. Текущее состояние: %2'"),
		Задание.ПоследнееЗадание.Начало, 
		Задание.ПоследнееЗадание.Состояние);
	
	Если ЗначениеЗаполнено(Задание.ПоследнееЗадание.Конец) Тогда
		РезультатПроверки = РезультатПроверки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершено в %1.'"),
			Задание.ПоследнееЗадание.Конец);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаданиеПолученияСообщенийЧатботу(РегламентноеЗаданиеGUID) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.Чатботы) Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав для запуска приема сообщений чатботам.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегламентныеЗаданияСервер.Задание(РегламентноеЗаданиеGUID);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьОбновленияЧатбота(Чатбот, ЕстьОбновления = Ложь)
	
	ЗапроситьОбновленияЧатботаTelegram(Чатбот, ЕстьОбновления);
	
КонецПроцедуры

Процедура ПринятьОбновлениеЧатбота(Чатбот, Обновление)
	
	ПринятьОбновлениеTelegram(Чатбот, Обновление);
	
КонецПроцедуры

Функция ОбработатьПринятыеСообщенияЧатбота(Чатбот)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользуемыеЧатботы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Чатбот));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияЧатботов.Чатбот КАК Чатбот,
		|	СообщенияЧатботов.Чат КАК Чат,
		|	СообщенияЧатботов.Отправитель КАК Отправитель,
		|	СообщенияЧатботов.Сообщение КАК Сообщение,
		|	СообщенияЧатботов.ДатаСообщения КАК ДатаСообщения,
		|	СообщенияЧатботов.ТекстСообщения КАК ТекстСообщения,
		|	СообщенияЧатботов.Файл КАК Файл,
		|	СообщенияЧатботов.ИсходныйПакет КАК ИсходныйПакет,
		|	СообщенияЧатботов.НомерОбновления КАК НомерОбновления,
		|	СообщенияЧатботов.Обработано КАК Обработано
		|ИЗ
		|	РегистрСведений.ПринятыеСообщенияЧатботов КАК СообщенияЧатботов
		|ГДЕ
		|	СообщенияЧатботов.Чатбот В(&ИспользуемыеЧатботы)
		|	И СообщенияЧатботов.Обработано = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбработано = Ложь;
		ПринятоеСообщение = ОписаниеСообщения();
		ЗаполнитьЗначенияСвойств(ПринятоеСообщение, Выборка);
		ПринятоеСообщение.Код = Выборка.Сообщение; 
		ПринятоеСообщение.Дата = Выборка.ДатаСообщения;
		ПринятоеСообщение.Текст = Выборка.ТекстСообщения;
		ОбработатьПринятоеСообщение(Выборка.Чатбот, Выборка.Чат, Выборка.Отправитель, ПринятоеСообщение, СообщениеОбработано);
		Если Не СообщениеОбработано Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.ПринятыеСообщенияЧатботов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Обработано = Истина;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОтправителя()
	
	Возврат Справочники.СобеседникиЧатботов.ОписаниеСобеседника();
	
КонецФункции

Функция ОписаниеЧата()
	
	Возврат Справочники.ЧатыЧатботов.ОписаниеЧата();
	
КонецФункции

Функция ОписаниеСообщения()
	
	Описание = Новый Структура(
		"Код, 
		|Дата,
		|Текст,
		|Файл,
		|ИсходныйПакет,
		|НомерОбновления");
	Описание.Код = 0;
	Описание.Дата = Дата(1, 1, 1);
	Описание.Текст = "";
	Описание.НомерОбновления = 0;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеПринятогоФайла()
	
	Описание = Новый Структура(
		"Идентификатор,
		|Имя");
	
	Описание.Имя = "";
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЧатбота()
	
	ОписаниеЧатбота = Новый Структура(
		"Код,
		|Наименование,
		|Токен,
		|Тип,
		|СпособПолученияОбновлений,
		|АдресПубликацииИнформационнойБазыВИнтернете,
		|РегламентноеЗаданиеGUID,
		|Используется,
		|ИсточникИнформации,
		|ТекстПриветствия,
		|ВыводитьОписаниеКомпании,
		|ОписаниеКомпании,
		|ЗапрашиватьИмя,
		|ТекстЗапросаИмени,
		|ЗапрашиватьВозраст,
		|ТекстЗапросаВозраста,
		|ЗапрашиватьНомерТелефона,
		|ТекстЗапросаНомераТелефона,
		|ЗапрашиватьАдресЭлектроннойПочты,
		|ТекстЗапросаАдресаЭлектроннойПочты,
		|ЗапрашиватьИнформациюОСебе,
		|ТекстЗапросаИнформацииОСебе,
		|ЗапрашиватьФайлРезюме,
		|ТекстЗапросаФайлаРезюме");

	Возврат ОписаниеЧатбота;
	
КонецФункции

Функция ВакансииЧатбота(Чатбот)
	
	Возврат РегистрыСведений.ВакансииЧатботов.ИспользуемыеВакансии(Чатбот);
	
КонецФункции

Функция СохранитьОтправителя(Чатбот, ОписаниеОтправителя)
	
	Возврат Справочники.СобеседникиЧатботов.СоздатьСобеседника(ОписаниеОтправителя.Код, ОписаниеОтправителя);
	
КонецФункции

Функция СохранитьЧат(ОписаниеЧата)
	
	Возврат Справочники.ЧатыЧатботов.СоздатьЧат(ОписаниеЧата.Код, ОписаниеЧата);
	
КонецФункции

Процедура СохранитьСообщениеОтправителя(Чатбот, ОписаниеЧата, ОписаниеСообщения, ОписаниеОтправителя)
	
	Если ОписаниеОтправителя = Неопределено Тогда
		ОписаниеОтправителя = ОписаниеОтправителя();
	КонецЕсли;
	
	ОтправительСсылка = СохранитьОтправителя(Чатбот, ОписаниеОтправителя);
	
	ЧатСсылка = СохранитьЧат(ОписаниеЧата);
	
	СообщениеЗапись = РегистрыСведений.ПринятыеСообщенияЧатботов.СоздатьМенеджерЗаписи();
	СообщениеЗапись.Чатбот = Чатбот;
	СообщениеЗапись.Чат = ЧатСсылка;
	
	СообщениеЗапись.Отправитель = ОтправительСсылка;
	
	СообщениеЗапись.Сообщение = ОписаниеСообщения.Код;
	СообщениеЗапись.ДатаСообщения = ОписаниеСообщения.Дата;
	СообщениеЗапись.ТекстСообщения = ОписаниеСообщения.Текст;
	СообщениеЗапись.Файл = Новый ХранилищеЗначения(ОписаниеСообщения.Файл);
	
	СообщениеЗапись.НомерОбновления = ОписаниеСообщения.НомерОбновления;
	СообщениеЗапись.ИсходныйПакет = ОписаниеСообщения.ИсходныйПакет;
	СообщениеЗапись.Записать();
	
КонецПроцедуры

Процедура ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения = Неопределено, ВариантыОтвета = Неопределено, ЗапрашиватьТелефон = Ложь)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Ответ = Неопределено;
	Если ДанныеЧатбота.Тип = Перечисления.ТипыЧатботов.Telegram Тогда
		Ответ = ОтправитьСообщениеTelegram(ДанныеЧатбота, Чат, ТекстСообщения, ВариантыОтвета, ЗапрашиватьТелефон);
	КонецЕсли;
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеЗапись = РегистрыСведений.ОтправленныеСообщенияЧатботов.СоздатьМенеджерЗаписи();
	СообщениеЗапись.Чатбот = Чатбот;
	СообщениеЗапись.Чат = Чат;
	СообщениеЗапись.Сообщение = Ответ.Код;
	СообщениеЗапись.ДатаСообщения = Ответ.Дата;
	СообщениеЗапись.ТекстСообщения = Ответ.Текст;
	СообщениеЗапись.Записать();
	
КонецПроцедуры

Процедура ПолучитьФайлЧатбота(Чатбот, ОписаниеФайла, ПолученныйФайл)
	
	ИдентификаторФайла = ОписаниеФайла.Идентификатор;
	
	URLФайла = Неопределено;
	ПолучитьФайлTelegram(Чатбот, ИдентификаторФайла, URLФайла);
	
	Если URLФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(URLФайла);
	
	Если Не Результат.Статус Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(Результат.Путь);
	
	ХранениеФайла = Новый Структура("Файл, ИмяФайла");
	ХранениеФайла.Файл = ДанныеФайла;
	ХранениеФайла.ИмяФайла = ОписаниеФайла.Имя;
	Если Не ЗначениеЗаполнено(ХранениеФайла.ИмяФайла) Тогда
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLФайла);
		Если ЗначениеЗаполнено(СтруктураURI.ПутьНаСервере) Тогда
			СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СтруктураURI.ПутьНаСервере);
			ХранениеФайла.ИмяФайла = СтруктураИмениФайла.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныйФайл = Новый ХранилищеЗначения(ХранениеФайла);
	УдалитьИзВременногоХранилища(Результат.Путь);
	
КонецПроцедуры

Функция НомерПоследнегоОбновления(Чатбот)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Чатбот", Чатбот);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СообщенияЧатботов.НомерОбновления) КАК НомерОбновления
		|ИЗ
		|	РегистрСведений.ПринятыеСообщенияЧатботов КАК СообщенияЧатботов
		|ГДЕ
		|	СообщенияЧатботов.Чатбот = &Чатбот";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерОбновления;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ВспомогательныеМетоды

Функция ДанныеВJSON(СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JSONВДанные(СообщениеJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СообщениеJSON);
	СтруктураДанных = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СвойствоСтруктуры(Структура, Ключ)
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Ключ);
КонецФункции

#КонецОбласти

#Область ПоведениеЧатбота

Процедура ОбработатьПринятоеСообщение(Чатбот, Чат, Отправитель, ПринятоеСообщение, СообщениеОбработано)
	
	СостояниеЧатбота = СостояниеЧатбота(Чатбот, Чат);
	
	ПринятыйТекст = ПринятоеСообщение.Текст;
	ПринятыйФайл = ПринятоеСообщение.Файл;
	
	КомандаОбработана = Ложь;
	ОбработатьПринятуюКоманду(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	
	Если КомандаОбработана Тогда
		СообщениеОбработано = Истина;
		Возврат;
	КонецЕсли;
	
	// Введенные сведения не разобраны (не являются командой).
	Если СостояниеЧатбота = Неопределено Тогда
		Поприветствовать(Чатбот, Чат);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросИмени Тогда
		ВопросЗадан = Ложь;
		СохранитьИмяСобеседника(ПринятыйТекст, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьВозрастСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьНомерТелефонаСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросВозраста Тогда
		ВопросЗадан = Ложь;
		СохранитьВозрастСобеседника(ПринятыйТекст, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьНомерТелефонаСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросТелефона Тогда
		ВопросЗадан = Ложь;
		СохранитьНомерТелефонаСобеседника(ПринятыйТекст, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросEMail Тогда
		ВопросЗадан = Ложь;
		СохранитьАдресЭлектроннойПочтыСобеседника(ПринятыйТекст, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросИнформацииОСебе Тогда
		ВопросЗадан = Ложь;
		СохранитьИнформациюОСебеСобеседника(ПринятыйТекст, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	ИначеЕсли СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросФайлаРезюме Тогда
		ВопросЗадан = Ложь;
		СохранитьФайлРезюмеСобеседника(ПринятыйФайл, Чатбот, Чат, Отправитель, ВопросЗадан);
		ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан);
		СообщениеОбработано = Истина;
	КонецЕсли;
	
	Если СообщениеОбработано Тогда
		Возврат;
	КонецЕсли;
	
	// Неопознанная команда.
	ТекстСообщения = НСтр("ru = 'Я, увы, не понимаю вас. Попробуйте нажать одну из доступных кнопок виртуальной клавиатуры.
                           |Или начните все сначала командой /start.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
	СообщениеОбработано = Истина;
	
КонецПроцедуры

Процедура ОбработатьПринятуюКоманду(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	ОбработатьКомандуСтарт(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуОписаниеКомпании(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуВакансии(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуВыбраннойВакансии(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуДа(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуНет(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	ОбработатьКомандуИсправить(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	
КонецПроцедуры

Процедура ОбработатьКомандуСтарт(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаСтарт()) Тогда
		Возврат;
	КонецЕсли;
	
	// Вне зависимости от текущего состояния, сбрасываем бота в состояние приветствия.
	Поприветствовать(Чатбот, Чат);
	КомандаОбработана = Истина;
	
КонецПроцедуры

Процедура ОбработатьКомандуОписаниеКомпании(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаОписаниеКомпании()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.Приветствие 
		Или СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ОписаниеКомпании
		Или СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.СписокВакансий Тогда
		ВывестиОписаниеКомпании(Чатбот, Чат);
		ПредложитьВывестиВакансии(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКомандуВакансии(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаВакансии()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.Приветствие 
		Или СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ОписаниеКомпании Тогда
		ВывестиСписокВакансий(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКомандуВыбраннойВакансии(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	КомандыВакансий = КомандыВыбранныхВакансий(Чатбот);
	Если КомандыВакансий.Найти(ПринятыйТекст) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.СписокВакансий Тогда
		ВыбраннаяВакансия = СохранитьВыбраннуюВакансию(ПринятыйТекст, Чатбот, Чат, Отправитель);
		КомандаОбработана = Истина;
		Если ВыбраннаяВакансия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НачатьПриемОтклика(Чатбот, Чат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКомандуДа(Чатбот, Чат, Отправитель, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаДа()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ОписаниеКомпании Тогда
		ВывестиСписокВакансий(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросСохраненияОтклика Тогда
		СохранитьОтклик(Чатбот, Чат, Отправитель);
		Попрощаться(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКомандуНет(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана)
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаНет()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросСохраненияОтклика 
		Или СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ОписаниеКомпании Тогда
		ТекстСообщения = НСтр("ru = 'ОК, не буду настаивать.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Попрощаться(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьКомандуИсправить(Чатбот, Чат, ПринятыйТекст, СостояниеЧатбота, КомандаОбработана);
	
	Если ВРег(ПринятыйТекст) <> ВРег(КомандаИсправить()) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеЧатбота = Перечисления.СостоянияЧатаЧатбота.ЗапросСохраненияОтклика Тогда
		ТекстСообщения = НСтр("ru = 'ОК, я еще раз уточню у вас все сведения.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		НачатьПриемОтклика(Чатбот, Чат);
		КомандаОбработана = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеЧатбота(Чатбот, Чат)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Чатбот", Чатбот);
	Запрос.УстановитьПараметр("Чат", Чат);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияЧатботов.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.СостоянияЧатовЧатботов КАК СостоянияЧатботов
		|ГДЕ
		|	СостоянияЧатботов.Чатбот = &Чатбот
		|	И СостоянияЧатботов.Чат = &Чат";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние;
	
КонецФункции

Процедура УстановитьСостояниеЧатбота(Чатбот, Чат, Состояние)
	
	СостояниеЗапись = РегистрыСведений.СостоянияЧатовЧатботов.СоздатьМенеджерЗаписи();
	СостояниеЗапись.Чатбот = Чатбот;
	СостояниеЗапись.Чат = Чат;
	
	Если Состояние = Неопределено Тогда
		СостояниеЗапись.Удалить();
		Возврат;
	КонецЕсли;
	
	СостояниеЗапись.Состояние = Состояние;
	СостояниеЗапись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ДействияЧатбота

Процедура Поприветствовать(Чатбот, Чат)
	
	Если СостояниеЧатбота(Чатбот, Чат) = Перечисления.СостоянияЧатаЧатбота.Приветствие Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	ВариантыОтвета = Новый Массив;
	Если ДанныеЧатбота.ВыводитьОписаниеКомпании Тогда
		ВариантыОтвета.Добавить(КомандаОписаниеКомпании());
	КонецЕсли;
	ВариантыОтвета.Добавить(КомандаВакансии());
	
	ТекстСообщения = ДанныеЧатбота.ТекстПриветствия;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, ВариантыОтвета);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.Приветствие);
	
КонецПроцедуры

Процедура ВывестиОписаниеКомпании(Чатбот, Чат)
	
	ТекстСообщения = Чатботы.ДанныеЧатботов()[Чатбот].ОписаниеКомпании;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ОписаниеКомпании);
	
КонецПроцедуры

Процедура ПредложитьВывестиВакансии(Чатбот, Чат)
	
	ТаблицаВакансий = ВакансииЧатбота(Чатбот);
	Если ТаблицаВакансий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = '*Хотите, я расскажу об открытых вакансиях?*'");
	ВариантыОтвета = Новый Массив;
	ВариантыОтвета.Добавить(КомандаДа());
	ВариантыОтвета.Добавить(КомандаНет());
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, ВариантыОтвета);
	
КонецПроцедуры

Процедура ВывестиСписокВакансий(Чатбот, Чат)
	
	ТаблицаВакансий = ВакансииЧатбота(Чатбот);
	
	Если ТаблицаВакансий.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В настоящий момент у нас нет открытых вакансий.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВакансий Цикл
		Шаблон = НСтр("ru = '*%1*
                       |%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон, СтрокаТаблицы.КраткоеНаименование, СтрокаТаблицы.Описание);
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = '*Заинтересовала вакансия?* Нажмите на кнопку, чтобы оставить отклик.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, КомандыВыбранныхВакансий(Чатбот, ТаблицаВакансий));
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.СписокВакансий);
	
КонецПроцедуры

Процедура Попрощаться(Чатбот, Чат)
	
	ТекстСообщения = НСтр("ru = 'До встречи!'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Неопределено);
	
КонецПроцедуры

Функция СохранитьВыбраннуюВакансию(ВыбраннаяВакансия, Чатбот, Чат, Отправитель)
	
	ТаблицаВакансий = ВакансииЧатбота(Чатбот);
	
	ОтборСтрок = Новый Структура("КраткоеНаименование");
	ОтборСтрок.КраткоеНаименование = ВыбраннаяВакансия;
	НайденныеСтроки = ТаблицаВакансий.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Похоже, выбранная вами вакансия уже недоступна. Попробуйте, выбрать другую.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		ВывестиСписокВакансий(Чатбот, Чат);
		Возврат Неопределено;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "Вакансия", НайденныеСтроки[0].Вакансия);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ОК, вы выбрали вакансию *%1*. Сейчас я приму отклик на нее.'"), 
		ВыбраннаяВакансия);
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	Возврат ВыбраннаяВакансия;
	
КонецФункции

Процедура НачатьПриемОтклика(Чатбот, Чат)
	
	ВопросЗадан = Ложь;
	ЗапроситьИмяСобеседника(Чатбот, Чат, ВопросЗадан);
	ЗапроситьВозрастСобеседника(Чатбот, Чат, ВопросЗадан);
	ЗапроситьНомерТелефонаСобеседника(Чатбот, Чат, ВопросЗадан);
	ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан);
	
КонецПроцедуры

Процедура ЗапроситьИмяСобеседника(Чатбот, Чат, ВопросЗадан = Ложь)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьИмя Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаИмени;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросИмени);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура ПроверитьИмяСобеседника(Имя, Чатбот, Чат, Отказ)
	
	ПроверитьНаПустуюСтроку(Имя, Чатбот, Чат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяБезПробеловТире = СокрЛП(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -", Имя, ""));
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ИмяБезПробеловТире) 
		И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ИмяБезПробеловТире) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пожалуйста, введите только кириллические или только латинские символы.'"), 
			Имя);
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьИмяСобеседника(Имя, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Отказ = Ложь;
	ПроверитьИмяСобеседника(Имя, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьИмяСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "Имя", Имя);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отлично, %1! Так и запишем.'"), 
		Имя);
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьВозрастСобеседника(Чатбот, Чат, ВопросЗадан)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьВозраст Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаВозраста;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросВозраста);
	ВопросЗадан = Истина;

КонецПроцедуры

Процедура ПроверитьНаПустуюСтроку(СтрокаДляПроверки, Чатбот, Чат, Отказ)
	
	Если ПустаяСтрока(СокрЛП(СтрокаДляПроверки)) Тогда
		ТекстСообщения = НСтр("ru = 'Вы не ответили. Пожалуйста, попробуйте, еще раз.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозрастСобеседника(Возраст, Чатбот, Чат, Отказ)
	
	ПроверитьНаПустуюСтроку(Возраст, Чатбот, Чат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Возраст) Тогда 
		ТекстСообщения = НСтр("ru = 'Пожалуйста, укажите только цифры.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Число(Возраст) < 10 Или Число(Возраст) > 99 Тогда 
		ТекстСообщения = НСтр("ru = 'Скорее всего, возраст указан неверно. Пожалуйста, попробуйте еще раз.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьВозрастСобеседника(Возраст, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Отказ = Ложь;
	ПроверитьВозрастСобеседника(Возраст, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьВозрастСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "Возраст", Возраст);
	
	ПредставлениеВозраста = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 года'"), Возраст);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Понятно, вам %1. Принято.'"), ПредставлениеВозраста);
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьНомерТелефонаСобеседника(Чатбот, Чат, ВопросЗадан)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьНомерТелефона Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаНомераТелефона;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив, Истина);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросТелефона);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура ПроверитьНомерТелефона(НомерТелефона, Чатбот, Чат, Отказ)
	
	ПроверитьНаПустуюСтроку(НомерТелефона, Чатбот, Чат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НомерТолькоЦифры = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("+()-", НомерТелефона, "");
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТолькоЦифры) Тогда 
		ТекстСообщения = НСтр("ru = 'Пожалуйста, укажите только цифры.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(НомерТолькоЦифры) < 10 Тогда 
		ТекстСообщения = НСтр("ru = 'Скорее всего, номер телефона указан неверно. Пожалуйста, попробуйте еще раз.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНомерТелефонаСобеседника(НомерТелефона, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Отказ = Ложь;
	ПроверитьНомерТелефона(НомерТелефона, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьНомерТелефонаСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "Телефон", НомерТелефона);
	
	ТекстСообщения = НСтр("ru = 'ОК, принято.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьАдресЭлектроннойПочты Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаАдресаЭлектроннойПочты;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросEMail);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура ПроверитьАдресЭлектроннойПочты(EMail, Чатбот, Чат, Отказ)
	
	ПроверитьНаПустуюСтроку(EMail, Чатбот, Чат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СокрЛП(EMail)) Тогда 
		ТекстСообщения = НСтр("ru = 'Скорее всего, адрес электронной почты указан неверно. Пожалуйста, попробуйте еще раз.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьАдресЭлектроннойПочтыСобеседника(EMail, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Отказ = Ложь;
	ПроверитьАдресЭлектроннойПочты(EMail, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьАдресЭлектроннойПочтыСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "EMail", EMail);
	
	ТекстСообщения = НСтр("ru = 'ОК, принято.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьИнформациюОСебе Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаИнформацииОСебе;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросИнформацииОСебе);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура ПроверитьИнформациюОСебе(СообщениеОСебе, Чатбот, Чат, Отказ)
	
	ПроверитьНаПустуюСтроку(СообщениеОСебе, Чатбот, Чат, Отказ);
	
КонецПроцедуры

Процедура СохранитьИнформациюОСебеСобеседника(СообщениеОСебе, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Отказ = Ложь;
	ПроверитьИнформациюОСебе(СообщениеОСебе, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьИнформациюОСебеСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "ОСебе", СообщениеОСебе);
	
	ТекстСообщения = НСтр("ru = 'Спасибо, понятно.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ВопросЗадан Или Не ДанныеЧатбота.ЗапрашиватьФайлРезюме Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ДанныеЧатбота.ТекстЗапросаФайлаРезюме;
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросФайлаРезюме);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура ПроверитьФайлРезюме(ОписаниеФайла, Чатбот, Чат, Отказ)
	
	Если ОписаниеФайла = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если ПустаяСтрока(СокрЛП(ОписаниеФайла.Идентификатор)) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Скорее всего, файл резюме не был загружен. Пожалуйста, попробуйте еще раз.'");
		ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлРезюмеСобеседника(ПринятыйФайл, Чатбот, Чат, Отправитель, ВопросЗадан)
	
	ОписаниеФайла = ПринятыйФайл.Получить();
	
	Отказ = Ложь;
	ПроверитьФайлРезюме(ОписаниеФайла, Чатбот, Чат, Отказ);
	
	Если Отказ Тогда
		ЗапроситьФайлРезюмеСобеседника(Чатбот, Чат, ВопросЗадан);
		Возврат;
	КонецЕсли;
	
	ФайлРезюме = Неопределено;
	ПолучитьФайлЧатбота(Чатбот, ОписаниеФайла, ФайлРезюме);
	
	Если ФайлРезюме = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, "ФайлРезюме", ФайлРезюме);
	
	ТекстСообщения = НСтр("ru = 'Файл резюме принят, спасибо.'");
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, Новый Массив);
	
КонецПроцедуры

Процедура ЗапроситьПодтверждениеСохраненияОтклика(Чатбот, Чат, Отправитель, ВопросЗадан)
	
	Если ВопросЗадан Тогда
		Возврат;
	КонецЕсли;
	
	ПринятыеСведения = ПринятыеСведения(Чатбот, Чат, Отправитель);
	Если ПринятыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПринятыеСведенияПредставление = ПредставлениеПринятыхСведений(ПринятыеСведения, Чатбот);
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ПринятыеСведенияПредставление);
	
	ТекстСообщения = НСтр("ru = '*Отправляем отклик в службу персонала?*'");
	
	ВариантыОтвета = Новый Массив;
	ВариантыОтвета.Добавить(КомандаДа());
	ВариантыОтвета.Добавить(КомандаНет());
	ВариантыОтвета.Добавить(КомандаИсправить());
	
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения, ВариантыОтвета);
	
	УстановитьСостояниеЧатбота(Чатбот, Чат, Перечисления.СостоянияЧатаЧатбота.ЗапросСохраненияОтклика);
	ВопросЗадан = Истина;
	
КонецПроцедуры

Процедура СохранитьОтклик(Чатбот, Чат, Отправитель)
	
	ПринятыеСведения = РегистрыСведений.ПринятыеСведенияЧатботами.СоздатьМенеджерЗаписи();
	ПринятыеСведения.Чатбот = Чатбот;
	ПринятыеСведения.Чат = Чат;
	ПринятыеСведения.Отправитель = Отправитель;
	ПринятыеСведения.Прочитать();
	
	Если Не ПринятыеСведения.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОтклика = ПодборПерсонала.ОписаниеОткликаНаВакансию();
	ОписаниеОтклика.Имя = ПринятыеСведения.Имя;
	ОписаниеОтклика.Телефон = ПринятыеСведения.Телефон;
	ОписаниеОтклика.EMail = ПринятыеСведения.EMail;
	ОписаниеОтклика.ДатаОтклика = ТекущаяДатаСеанса();
	ОписаниеОтклика.Источник = Чатботы.ДанныеЧатботов()[Чатбот].ИсточникИнформации;
	ОписаниеОтклика.ФайлРезюме = ПринятыеСведения.ФайлРезюме;
	ОписаниеОтклика.Сообщение = "";
	Если ЗначениеЗаполнено(ПринятыеСведения.Возраст) Тогда
		ОписаниеОтклика.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Мой возраст %1'"), 
			ПринятыеСведения.Возраст);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПринятыеСведения.ОСебе) Тогда
		ОписаниеОтклика.Сообщение = ОписаниеОтклика.Сообщение + Символы.ПС + ПринятыеСведения.ОСебе;
	КонецЕсли;
	
	ПодборПерсонала.ДобавитьОткликНаВакансию(ПринятыеСведения.Вакансия, ОписаниеОтклика);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Спасибо, %1! Ваш отклик принят и будет рассмотрен службой персонала.'"),
		ПринятыеСведения.Имя);
	ОтправитьСообщениеЧатбота(Чатбот, Чат, ТекстСообщения);
	
КонецПроцедуры

Процедура СохранитьПринятыеСведения(Чатбот, Чат, Отправитель, ИмяСведения, Значение)
	
	Запись = РегистрыСведений.ПринятыеСведенияЧатботами.СоздатьМенеджерЗаписи();
	Запись.Чатбот = Чатбот;
	Запись.Чат = Чат;
	Запись.Отправитель = Отправитель;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Запись.Чатбот = Чатбот;
		Запись.Чат = Чат;
		Запись.Отправитель = Отправитель;
	КонецЕсли;
	
	Запись[ИмяСведения] = Значение;
	Запись.Записать(Истина);
	
КонецПроцедуры

Функция ПринятыеСведения(Чатбот, Чат, Отправитель)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Чатбот", Чатбот);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Чат", Чат);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятыеСведения.Чатбот КАК Чатбот,
		|	ПринятыеСведения.Чат КАК Чат,
		|	ПринятыеСведения.Отправитель КАК Отправитель,
		|	ПринятыеСведения.Вакансия КАК Вакансия,
		|	ПринятыеСведения.Имя КАК Имя,
		|	ПринятыеСведения.Телефон КАК Телефон,
		|	ПринятыеСведения.EMail КАК EMail,
		|	ПринятыеСведения.Возраст КАК Возраст,
		|	ПринятыеСведения.ОСебе КАК ОСебе,
		|	ВЫБОР
		|		КОГДА ПринятыеСведения.Чат = &Чат
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВЭтомЧате
		|ИЗ
		|	РегистрСведений.ПринятыеСведенияЧатботами КАК ПринятыеСведения
		|ГДЕ
		|	ПринятыеСведения.Чатбот = &Чатбот
		|	И ПринятыеСведения.Отправитель = &Отправитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЭтомЧате УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция ПредставлениеПринятыхСведений(ПринятыеСведения, Чатбот)
	
	Представление = "";
	
	Если ПринятыеСведения = Неопределено Тогда
		Возврат Представление;
	КонецЕсли;
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	
	Если ЗначениеЗаполнено(ПринятыеСведения.Имя) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '*%1*, '"), 
			ПринятыеСведения.Имя);
	КонецЕсли;
	
	Если ДанныеЧатбота.ЗапрашиватьВозраст И ЗначениеЗаполнено(ПринятыеСведения.Возраст) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'возраст *%1*, '"), 
			ПринятыеСведения.Возраст);
	КонецЕсли;
	
	Если ДанныеЧатбота.ЗапрашиватьНомерТелефона И ЗначениеЗаполнено(ПринятыеСведения.Телефон) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'телефон *%1*, '"), 
			ПринятыеСведения.Телефон);
	КонецЕсли;
	
	Если ДанныеЧатбота.ЗапрашиватьАдресЭлектроннойПочты И ЗначениеЗаполнено(ПринятыеСведения.EMail) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'e-mail *%1*, '"), 
			ПринятыеСведения.EMail);
	КонецЕсли;
	
	Если ДанныеЧатбота.ЗапрашиватьИнформациюОСебе И ЗначениеЗаполнено(ПринятыеСведения.ОСебе) Тогда
		Представление = Представление + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'о себе: *%1*, '"), 
			ПринятыеСведения.ОСебе);
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Представление, 2);
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область ПринимаемыеКомандыЧатботов

Функция КомандаСтарт()
	
	Возврат "/start";
	
КонецФункции

Функция КомандаОписаниеКомпании()
	
	Возврат НСтр("ru = 'О компании'");
	
КонецФункции

Функция КомандаДа()
	
	Возврат НСтр("ru = 'Да'");
	
КонецФункции

Функция КомандаНет()
	
	Возврат НСтр("ru = 'Нет'");
	
КонецФункции

Функция КомандаВакансии()
	
	Возврат НСтр("ru = 'Вакансии'");
	
КонецФункции

Функция КомандаИсправить()
	
	Возврат НСтр("ru = 'Исправить'");
	
КонецФункции

#КонецОбласти

#Область СостоянияЧатовЧатботов

Функция КомандыВыбранныхВакансий(Чатбот, ТаблицаВакансий = Неопределено)
	
	Если ТаблицаВакансий = Неопределено Тогда
		ТаблицаВакансий = ВакансииЧатбота(Чатбот);
	КонецЕсли;
	
	Команды = ТаблицаВакансий.ВыгрузитьКолонку("КраткоеНаименование");
	
	Возврат Команды;
	
КонецФункции

Функция ЗаголовокКнопкиЗапросаНомераТелефона()
	Возврат НСтр("ru = 'Отправить мой номер телефона'");
КонецФункции

#КонецОбласти

#Область Telegram

Процедура ЗапроситьОбновленияЧатботаTelegram(Чатбот, ЕстьОбновления = Ложь)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	Если ДанныеЧатбота["Тип"] <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("timeout");
	СтруктураДанных["timeout"] = ВремяОжиданияОтветаДлинногоЗапросаTelegram();
	НомерПоследнегоОбновления = НомерПоследнегоОбновления(Чатбот);
	Если ЗначениеЗаполнено(НомерПоследнегоОбновления) Тогда
		СтруктураДанных.Вставить("offset", НомерПоследнегоОбновления + 1);
	КонецЕсли;
	
	СтруктураОтвета = ОтправитьДанныеTelegram(ДанныеЧатбота["Токен"], "getUpdates", СтруктураДанных);
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Обновление Из СтруктураОтвета["result"] Цикл
		ПринятьОбновлениеTelegram(Чатбот, Обновление);
		ЕстьОбновления = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПринятьОбновлениеTelegram(Чатбот, СтруктураОбновления)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	Если ДанныеЧатбота["Тип"] <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСообщения = СвойствоСтруктуры(СтруктураОбновления, "message");
	Если СтруктураСообщения = Неопределено Тогда
		СтруктураСообщения = СвойствоСтруктуры(СтруктураОбновления, "edited_message");
	КонецЕсли;
	
	ЯвляетсяБотом = СтруктураСообщения["from"]["is_bot"];
	Если ЯвляетсяБотом Тогда
		// Пропускаем сообщения от ботом, даже не принимаем их.
		Возврат;
	КонецЕсли;
	
	КодЧата = Формат(СтруктураСообщения["chat"]["id"], "ЧГ=");
	ГрупповойЧат = Ложь;
	Если СтруктураСообщения["chat"]["type"] <> "private" Тогда
		ГрупповойЧат = Истина;
	КонецЕсли;
	НаименованиеЧата = "";
	Если ГрупповойЧат Тогда
		НаименованиеЧата = СтруктураСообщения["chat"]["title"];
	Иначе
		НаименованиеЧата = СтруктураСообщения["chat"]["first_name"];
	КонецЕсли;
	
	НомерСообщения = СтруктураСообщения["message_id"];
	ДатаСообщения = ДатаИзДатыTelegram(СтруктураСообщения["date"]);
	ТекстСообщения = "";
	Если СтруктураСообщения.Свойство("text") Тогда
		ТекстСообщения = СтруктураСообщения["text"];
	Иначе
		Если СтруктураСообщения.Свойство("contact") Тогда
			ТекстСообщения = СвойствоСтруктуры(СтруктураСообщения["contact"], "phone_number");
		КонецЕсли;
	КонецЕсли;
	
	Файл = Неопределено;
	Если СтруктураСообщения.Свойство("document") Тогда
		Файл = ОписаниеПринятогоФайла();
		Файл.Идентификатор = СтруктураСообщения["document"]["file_id"];
		Файл.Имя = СтруктураСообщения["document"]["file_name"];
	КонецЕсли;
	
	Если СтруктураСообщения.Свойство("photo") Тогда
		БольшоеИзображение = Неопределено;
		Для Каждого ОписаниеИзображения Из СтруктураСообщения["photo"] Цикл
			Если БольшоеИзображение = Неопределено Тогда
				БольшоеИзображение = ОписаниеИзображения;
				Продолжить;
			КонецЕсли;
			Если ОписаниеИзображения["file_size"] > БольшоеИзображение["file_size"] Тогда
				БольшоеИзображение = ОписаниеИзображения;
			КонецЕсли;
		КонецЦикла;
		Если БольшоеИзображение <> Неопределено Тогда
			Файл = ОписаниеПринятогоФайла();
			Файл.Идентификатор = БольшоеИзображение["file_id"];
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеЧата = ОписаниеЧата();
	ОписаниеЧата.Код = КодЧата;
	ОписаниеЧата.Наименование = НаименованиеЧата;
	ОписаниеЧата.Групповой = ГрупповойЧат;
	
	ОписаниеСообщения = ОписаниеСообщения();
	ОписаниеСообщения.НомерОбновления = СтруктураОбновления["update_id"];
	ОписаниеСообщения.Код = НомерСообщения;
	ОписаниеСообщения.Дата = ДатаСообщения;
	ОписаниеСообщения.Текст = ТекстСообщения;
	ОписаниеСообщения.Файл = Файл;
	ОписаниеСообщения.ИсходныйПакет = ДанныеВJSON(СтруктураСообщения);
	
	ОписаниеОтправителя = ОписаниеОтправителя();
	ОписаниеОтправителя.Код = СтруктураСообщения["from"]["id"];
	ОписаниеОтправителя.Имя = СтруктураСообщения["from"]["first_name"];
	ОписаниеОтправителя.Фамилия = СвойствоСтруктуры(СтруктураСообщения["from"], "last_name");
	ОписаниеОтправителя.КраткоеИмя = СвойствоСтруктуры(СтруктураСообщения["from"], "username");
	
	СохранитьСообщениеОтправителя(Чатбот, ОписаниеЧата, ОписаниеСообщения, ОписаниеОтправителя);
	
КонецПроцедуры

Функция ОтправитьСообщениеTelegram(ДанныеЧатбота, Чат, ТекстСообщения = Неопределено, ВариантыОтвета = Неопределено, ЗапрашиватьТелефон = Ложь)
	
	Если ДанныеЧатбота.Тип <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Токен = ДанныеЧатбота.Токен;
	
	СтруктураСообщения = Новый Структура("chat_id");
	СтруктураСообщения["chat_id"] = Чатботы.ДанныеЧата(Чат)["Код"];
	
	Если ТекстСообщения <> Неопределено Тогда
		СтруктураСообщения.Вставить("text", ТекстСообщения);
		СтруктураСообщения.Вставить("parse_mode", "Markdown");
	КонецЕсли;
	
	Если ЗапрашиватьТелефон Тогда
		ВариантыОтвета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаголовокКнопкиЗапросаНомераТелефона());
		СтруктураКлавиатуры = СтруктураВариантовОтветаTelegram(ВариантыОтвета, ЗапрашиватьТелефон);
		СтруктураСообщения.Вставить("reply_markup", СтруктураКлавиатуры);
	Иначе	
		Если ВариантыОтвета <> Неопределено Тогда
			Если ВариантыОтвета.Количество() = 0 Тогда
				СтруктураКлавиатуры = Новый Структура("remove_keyboard");
				СтруктураКлавиатуры["remove_keyboard"] = Истина;
			Иначе
				СтруктураКлавиатуры = СтруктураВариантовОтветаTelegram(ВариантыОтвета);
			КонецЕсли;
			СтруктураСообщения.Вставить("reply_markup", СтруктураКлавиатуры);
		КонецЕсли;
	КонецЕсли;
	
	Ответ = ОтправитьДанныеTelegram(Токен, "sendMessage", СтруктураСообщения);

	Если Ответ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета = ОписаниеСообщения();
	СтруктураОтвета.Дата = ДатаИзДатыTelegram(Ответ["result"]["date"]);
	СтруктураОтвета.Код = Ответ["result"]["message_id"];
	СтруктураОтвета.Текст = Ответ["result"]["text"];
	
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура УстановитьWebhookTelegram(Чатбот, ДанныеЧатбота, Результат, ОписаниеОшибки = Неопределено)
	
	Если ДанныеЧатбота["Тип"] <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	URL = СокрЛП(ДанныеЧатбота["АдресПубликацииИнформационнойБазыВИнтернете"]);
	Если Прав(URL, 1) <> "/" Тогда
		URL = URL + "/";
	КонецЕсли;
	URL = URL + "hs/ChatbotsWebhook/" + ДанныеЧатбота["Токен"];
	
	СтруктураДанных = Новый Структура("url");
	СтруктураДанных["url"] = URL;
	СтруктураОтвета = ОтправитьДанныеTelegram(ДанныеЧатбота["Токен"], "setWebhook", СтруктураДанных, ОписаниеОшибки);
	
	Результат = Ложь;
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.Свойство("ok") И СтруктураОтвета["ok"] = Истина Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьWebhookTelegram(Чатбот, ДанныеЧатбота, Результат, ОписаниеОшибки = Неопределено)
	
	Если ДанныеЧатбота["Тип"] <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ОтправитьДанныеTelegram(ДанныеЧатбота["Токен"], "deleteWebhook", , ОписаниеОшибки);
	
	Результат = Ложь;
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.Свойство("ok") И СтруктураОтвета["ok"] = Истина Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьWebhookTelegram(Чатбот, ДанныеЧатбота, РезультатПроверки)
	
	Если ДанныеЧатбота["Тип"] <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ОтправитьДанныеTelegram(ДанныеЧатбота["Токен"], "getWebhookInfo");
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	WebhookUrl = СтруктураОтвета["result"]["url"];
	Если Не ЗначениеЗаполнено(WebhookUrl) Тогда
		РезультатПроверки = НСтр("ru = 'Webhook не установлен.'");
		Возврат;
	КонецЕсли;
	
	// Маскируем токен в url.
	WebhookUrl = СтрЗаменить(WebhookUrl, ДанныеЧатбота.Токен, НСтр("ru = '<Токен>'"));
	
	ТекстСообщения = НСтр("ru = 'Webhook успешно установлен.
                              |url: %1'");
	
	ДатаПоследнейОшибки = Неопределено;
	СообщениеПоследнейОшибки = Неопределено;
	Если СтруктураОтвета["result"].Свойство("last_error_message") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'последняя ошибка случилась: %2
                                                             |с текстом: %3'");
		ДатаПоследнейОшибки = ДатаИзДатыTelegram(СтруктураОтвета["result"]["last_error_date"]);
		СообщениеПоследнейОшибки = СтруктураОтвета["result"]["last_error_message"];
	КонецЕсли;
	
	РезультатПроверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		WebhookUrl,
		ДатаПоследнейОшибки,
		СообщениеПоследнейОшибки);

КонецПроцедуры

Процедура ПолучитьФайлTelegram(Чатбот, ИдентификаторФайла, URLФайла)
	
	ДанныеЧатбота = Чатботы.ДанныеЧатботов()[Чатбот];
	Если ДанныеЧатбота.Тип <> Перечисления.ТипыЧатботов.Telegram Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("file_id");
	СтруктураДанных["file_id"] = ИдентификаторФайла;
	
	Ответ = ОтправитьДанныеTelegram(ДанныеЧатбота.Токен, "getFile", СтруктураДанных);
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	URLФайла = АдресСервераTelegram() + "/file/bot" + ДанныеЧатбота.Токен + "/" + Ответ["result"]["file_path"];
	
КонецПроцедуры

Функция СтруктураВариантовОтветаTelegram(ВариантыОтвета, ЗапрашиватьТелефон = Ложь)
	
	СтруктураКлавиатуры = Новый Структура(
		"keyboard,
		|resize_keyboard,
		|one_time_keyboard");
	
	СтруктураКлавиатуры["one_time_keyboard"] = Истина;
	СтруктураКлавиатуры["resize_keyboard"] = Истина;
	
	СтруктураКлавиатуры["keyboard"] = Новый Массив;
	
	Кнопок = ВариантыОтвета.Количество();
	
	Рядов = Окр(Sqrt(Кнопок));
	Колонок = Цел(Кнопок / Рядов);
	Если Кнопок % Рядов > 0 Тогда
		Рядов = Рядов + 1;
	КонецЕсли;
	
	Индекс = 0;
	Для Ряд = 1 По Рядов Цикл
		РядКнопок = Новый Массив;
		Для Колонка = 1 По Колонок Цикл
			Если Индекс = ВариантыОтвета.Количество() Тогда
				Прервать;
			КонецЕсли;
			ОписаниеКнопки = Новый Структура("text");
			ОписаниеКнопки["text"] = ВариантыОтвета[Индекс];
			Если ЗапрашиватьТелефон Тогда
				ОписаниеКнопки.Вставить("request_contact", Истина);
			КонецЕсли;
			РядКнопок.Добавить(ОписаниеКнопки);
			Индекс = Индекс + 1;
		КонецЦикла;
		СтруктураКлавиатуры["keyboard"].Добавить(РядКнопок);
	КонецЦикла;
	
	Возврат СтруктураКлавиатуры;
	
КонецФункции

Функция ОтправитьДанныеTelegram(Токен, ИмяМетода, СтруктураДанных = Неопределено, ОписаниеОшибки = Неопределено)
	
	ТелоЗапроса = Неопределено;
	Если СтруктураДанных <> Неопределено Тогда
		ТелоЗапроса = ДанныеВJSON(СтруктураДанных);
	КонецЕсли;
	
	Ответ = ОтправитьЗапросTelegram(Токен, ИмяМетода, ТелоЗапроса);
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка с кодом %1. 
                  |Полный текст ответа сервера: 
                  |%2'"), 
			Ответ.КодСостояния,
			ТелоОтвета);
		ИмяСобытия = НСтр("ru = 'Ошибка чатбота Telegram'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
		ОписаниеОшибки = ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат JSONВДанные(ТелоОтвета);
	
КонецФункции

Функция ОтправитьЗапросTelegram(Токен, ИмяМетода, ТелоЗапроса = Неопределено)
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"bot%1/%2",
		Токен, 
		ИмяМетода);
	
	Заголовки = Новый Соответствие;
  	Заголовки.Вставить("User-Agent", "1С:Зарплата и управление персоналом 8 КОРП (v8@1c.ru)");
  	Заголовки.Вставить("Content-type", "application/json");
	Заголовки.Вставить("charset", "UTF-8");	
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	Если ТелоЗапроса <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Соединение = СоединениеTelegram();
	Возврат Соединение.ОтправитьДляОбработки(Запрос);
	
КонецФункции

Функция СоединениеTelegram()
	
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http://" + АдресСервераTelegram());
	
	ТаймаутСоединения = 10;
	Если ВремяОжиданияОтветаДлинногоЗапросаTelegram() > ТаймаутСоединения Тогда
		ТаймаутСоединения = ВремяОжиданияОтветаДлинногоЗапросаTelegram() + 10;
	КонецЕсли;
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	
	Возврат Новый HTTPСоединение(АдресСервераTelegram(), ПортСоединенияTelegram(), , , Прокси, ТаймаутСоединения, ЗащищенноеСоединение);
	
КонецФункции

Функция АдресСервераTelegram()
	Возврат "api.telegram.org";
КонецФункции

Функция ДатаИзДатыTelegram(ДатаTelegram)
	Возврат МестноеВремя(Дата(1970, 1, 1) + Число(ДатаTelegram));
КонецФункции

Функция ВремяОжиданияОтветаДлинногоЗапросаTelegram()
	Возврат 60;
КонецФункции

Функция ПортСоединенияTelegram()
	Возврат 443;
КонецФункции

#КонецОбласти

#КонецОбласти
