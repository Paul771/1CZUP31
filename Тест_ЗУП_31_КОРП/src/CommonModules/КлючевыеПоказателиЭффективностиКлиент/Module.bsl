#Область СлужебныеПрограммныйИнтерфейс

Процедура ПриИзмененииПризнакаОбратнаяШкала(ШкалаЗначений, ОбратнаяШкала) Экспорт

	ИзменитьЗнакПоследнегоПорогаШкалы(ШкалаЗначений, ОбратнаяШкала);
	КлючевыеПоказателиЭффективностиКлиентСервер.ОтсортироватьШкалуЗначений(ШкалаЗначений, ОбратнаяШкала);
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(ШкалаЗначений, ОбратнаяШкала);

КонецПроцедуры

Процедура ШкалаЗначенийПриИзмененииЗначенияШкалы(Форма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, СтруктураПараметров) Экспорт

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВернутьЗначениеШкалы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ВернутьЗначениеШкалы");
	ШкалаЗначенийЗначениеДоПрежнее = Форма["ШкалаЗначенийЗначениеДоПрежнее"];
	
	ШкалаЗначений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ШкалаЗначений");
	ОбратнаяШкала = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбратнаяШкала");
	ОтборСтрок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОтборСтрок");
	ИмяПоляЗначениеДо =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ИмяПоляЗначениеДо");
	ИмяТабличнойЧасти =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ИмяТабличнойЧасти");
	
	Если ОтменаРедактирования Тогда
		Если ВернутьЗначениеШкалы Тогда
			Элемент.ТекущиеДанные.ЗначениеДо = ШкалаЗначенийЗначениеДоПрежнее;
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ВернутьЗначениеШкалы", Ложь);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не НоваяСтрока И Элемент.ТекущийЭлемент.Имя <> ИмяПоляЗначениеДо Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСтрокШкалы = КлючевыеПоказателиЭффективностиКлиентСервер.ШкалаПоказателяПоОтбору(ШкалаЗначений, ОтборСтрок);
	КлючевыеПоказателиЭффективностиКлиентСервер.ПроверитьЗаполнениеШкалы(КоллекцияСтрокШкалы, Отказ);
	
	Если Не Отказ Тогда
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПозициюЭлементаВКоллекции(
			ШкалаЗначений,
			ОтборСтрок,
			ТекущиеДанные,
			ОбратнаяШкала);
			
		КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(
			КлючевыеПоказателиЭффективностиКлиентСервер.ШкалаПоказателяПоОтбору(ШкалаЗначений, ОтборСтрок),
			ОбратнаяШкала);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ВернутьЗначениеШкалы", Истина);
		
		ОчиститьСообщения();
		Если НоваяСтрока Тогда
			ИмяПоляФормы = ИмяТабличнойЧасти + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("[%1]", ШкалаЗначений.Индекс(Элемент.ТекущиеДанные));
		Иначе
			ИмяПоляФормы = ИмяТабличнойЧасти + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("[%1].ЗначениеДо", ШкалаЗначений.Индекс(Элемент.ТекущиеДанные));
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Такое пороговое значение уже присутствует в шкале'"),, ИмяПоляФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаЗначенийПередУдалением(Элемент, Отказ, ОбратнаяШкала) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗначениеДо = КлючевыеПоказателиЭффективностиКлиентСервер.ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ШкалаЗначенийПослеУдаления(ШкалаЗначений, ОбратнаяШкала, ОтборСтрок = Неопределено) Экспорт
	
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаПоНижнейГранице(
		КлючевыеПоказателиЭффективностиКлиентСервер.ШкалаПоказателяПоОтбору(ШкалаЗначений, ОтборСтрок),
		ОбратнаяШкала);
	
КонецПроцедуры

Процедура УстановитьИнтервалыОценки(ШкалаЗначений, ТекущиеДанные, ОтборСтрок = Неопределено) Экспорт

	Если ОтборСтрок = Неопределено Тогда
		ШкалаПоказателя = ШкалаЗначений;
	Иначе
		ШкалаПоказателя = ШкалаЗначений.НайтиСтроки(Новый Структура(ОтборСтрок));
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ОценкаЗадаетсяИнтервалом
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОценкиОт)
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОценкиДо) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ОтборСтрок = Неопределено Тогда
		ИндексСтроки = ШкалаПоказателя.Индекс(ТекущиеДанные);
	Иначе
		ИндексСтроки = ШкалаПоказателя.Найти(ТекущиеДанные);
	КонецЕсли;
	
	Если ИндексСтроки = 0 Тогда
		ТекущиеДанные.ИнтервалОценкиОт = ТекущиеДанные.ЗначениеДо;
		ТекущиеДанные.ИнтервалОценкиДо = ТекущиеДанные.ЗначениеДо;
	ИначеЕсли ИндексСтроки = ШкалаПоказателя.Количество() - 1 Тогда
		ТекущиеДанные.ИнтервалОценкиОт = ШкалаПоказателя[ИндексСтроки - 1].ЗначениеДо;
		ТекущиеДанные.ИнтервалОценкиДо = ШкалаПоказателя[ИндексСтроки - 1].ЗначениеДо;
	Иначе
		ТекущиеДанные.ИнтервалОценкиОт = ШкалаПоказателя[ИндексСтроки - 1].ЗначениеДо;
		ТекущиеДанные.ИнтервалОценкиДо = ТекущиеДанные.ЗначениеДо;
	КонецЕсли;
	
	КлючевыеПоказателиЭффективностиКлиентСервер.УстановитьПредставлениеИнтервалаОценкиВСтроке(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьЗнакПоследнегоПорогаШкалы(ШкалаЗначений, ОбратнаяШкала)

	НайденныеСтроки = ШкалаЗначений.НайтиСтроки(Новый Структура("ЗначениеДо", КлючевыеПоказателиЭффективностиКлиентСервер.ЗначениеПоследнегоПорогаШкалы(Не ОбратнаяШкала)));
	Если НайденныеСтроки.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].ЗначениеДо = КлючевыеПоказателиЭффективностиКлиентСервер.ЗначениеПоследнегоПорогаШкалы(ОбратнаяШкала);

КонецПроцедуры

#КонецОбласти

