////////////////////////////////////////////////////////////////////////////////
// Подсистема "Синхронизация данных".
// Серверные процедуры, обслуживающие правила регистрации объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Определяет список планов обмена, которые используют функционал подсистемы обмена данными.
//
// Параметры:
// ПланыОбменаПодсистемы. Тип: Массив.
// Массив планов обмена конфигурации, которые используют функционал подсистемы обмена данными.
// Элементами массива являются объекты метаданных планов обмена.
//
// Пример тела процедуры:
//
// ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменБезИспользованияПравилКонвертации);
// ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменСБиблиотекойСтандартныхПодсистем);
// ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.РаспределеннаяИнформационнаяБаза);
//
Процедура ПолучитьПланыОбмена(ПланыОбменаПодсистемы) Экспорт
	
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "АвтономнаяРабота");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменВРаспределеннойИнформационнойБазе");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗарплата3Бухгалтерия3");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗГУБГУ1");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "ОбменЗГУБГУ2");
	ДобавитьПланОбмена(ПланыОбменаПодсистемы, "СинхронизацияДанныхЧерезУниверсальныйФормат");
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений сотрудников для получения списка узлов-получателей по организациям,
// в которых установлены трудовые отношения по этим сотрудникам.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  Сотрудники - Ссылка или массив ссылок сотрудников, по которым нужно получить список узлов-получателей.
//  ДатаСведений - дата на которую необходимо получить данные сотрудников, применимо к данным, носящим периодический
//                 характер.
//      Если дату не указывать, будут получены самые последние данные.
Процедура ОграничитьРегистрациюОтборомПоОрганизациямИПодразделениямОбъекта(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Источник) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		ОграниченияРегистрации = Источник.ДополнительныеСвойства.ОграниченияРегистрации;
	Иначе
		ОграниченияРегистрации = Источник.ОграниченияРегистрации();
	КонецЕсли;
	
	ОграничитьРегистрацииОбъектовПоОрганизациямСотрудниковИФизическихЛиц(ОграниченияРегистрации, ИмяПланаОбмена);
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		Отказ = Истина;
	Иначе
		ПрисутствующиеОрганизации = ОграниченияРегистрации.Организации;
		ПрисутствующиеПодразделения = ОграниченияРегистрации.Подразделения;
		
		Если ПрисутствующиеОрганизации.Количество() = 0 И ПрисутствующиеПодразделения.Количество() = 0 И ОграниченияРегистрации.ФизическиеЛицаТолькоСТрудовымиОтношениями Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбменДаннымиЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоОрганизациямИПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, ПрисутствующиеОрганизации, ПрисутствующиеПодразделения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьМассивыУзловДляНабораЗаписейПоРегистрацииОбъектаВладельца(ИмяПланаОбмена, НаборЗаписей, Отказ, ОбъектМетаданных, ПРО, Выгрузка, Получатели, ИмяКолонкиОбъектаВладелец) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектовВладельцев = Новый Массив;
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		Если МассивОбъектовВладельцев.Найти(ЗаписьНабора[ИмяКолонкиОбъектаВладелец]) <> Неопределено Тогда
			// Получатели для этого ОбъектаВладельца уже определены
			Продолжить;
		КонецЕсли;
		МассивОбъектовВладельцев.Добавить(ЗаписьНабора[ИмяКолонкиОбъектаВладелец]);
		
		ОбъектВладелец = ЗаписьНабора[ИмяКолонкиОбъектаВладелец].ПолучитьОбъект();
		Если ОбъектВладелец = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучателиОбъектаВладельца = ОбменДаннымиСобытия.ОпределитьПолучателей(ОбъектВладелец, ИмяПланаОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ПолучателиОбъектаВладельца, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьМассивыУзловДляНабораЗаписейПоОбъекту(ИмяПланаОбмена, НаборЗаписей, Отказ, ОбъектМетаданных, ПРО, Выгрузка, Получатели, ИмяКолонкиВедущегоИзмерения) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		ОграниченияРегистрации = НаборЗаписей.ДополнительныеСвойства.ОграниченияРегистрации;
	Иначе
		ОграниченияРегистрации = НаборЗаписей.ОграниченияРегистрации();
	КонецЕсли;
	
	ОграничитьРегистрацииОбъектовПоОрганизациямСотрудниковИФизическихЛиц(ОграниченияРегистрации, ИмяПланаОбмена);
	
	МассивыУзлов = Новый Соответствие;
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		Отказ = Истина;
	Иначе
		ПрисутствующиеОрганизации = ОграниченияРегистрации.Организации;
		ПрисутствующиеПодразделения = ОграниченияРегистрации.Подразделения;
		
		Если ПрисутствующиеОрганизации.Количество() = 0 И ПрисутствующиеПодразделения.Количество() = 0 И ОграниченияРегистрации.ФизическиеЛицаТолькоСТрудовымиОтношениями Тогда
			Отказ = Истина;
		Иначе
			Запрос = Новый Запрос;
			ИспользоватьКеш = Ложь;
			ОбменДаннымиЗарплатаКадры.ОграничитьРегистрациюОбъектаОтборомПоОрганизациямИПодразделениям(
				ИмяПланаОбмена, Отказ, Запрос.Текст, Запрос.Параметры, ИспользоватьКеш, Выгрузка, ПрисутствующиеОрганизации, ПрисутствующиеПодразделения);
			
			// Тест запроса должен соответствовать установленным параметрам
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СвойствоОбъекта_", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеОтбораПоРеквизитуФлагу]", "");
			Запрос.УстановитьПараметр(ИмяПланаОбмена + "ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
			
			ПолучателиОбъектаВладельца = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			МассивыУзлов.Вставить(ИмяКолонкиВедущегоИзмерения, ПолучателиОбъектаВладельца);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Получатели, ПолучателиОбъектаВладельца, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОграниченияРегистрации", ОграниченияРегистрации);
	
КонецПроцедуры

Процедура ОграничитьРегистрацииОбъектовПоОрганизациямСотрудниковИФизическихЛиц(ОграниченияРегистрации, ИмяПланаОбмена) Экспорт
	
	МассивОрганизацийУзла = МассивДоступныхОрганизаций(ИмяПланаОбмена);
	
	Если МассивОрганизацийУзла.Количество() > 0 И ОграниченияРегистрации.Организации.Количество() = 0 Тогда
		// Организации не указаны, требуется вычислить
		Если ОграниченияРегистрации.Сотрудники.Количество() > 0 Тогда
			ОграничитьРегистрацииОбъектовПоОрганизациямСотрудников(ОграниченияРегистрации);
		КонецЕсли;
		Если ОграниченияРегистрации.ФизическиеЛица.Количество() > 0 Тогда
			Если ОграниченияРегистрации.ОграничиватьПоФизическимЛицамКонтрагентам Тогда
				ОграничитьРегистрациюОбъектовПоОрганизациямФизическихЛицКонтрагентов(ОграниченияРегистрации);
			Иначе
				ОграничитьРегистрациюОбъектовПоОрганизациямФизическихЛиц(ОграниченияРегистрации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятия(ОграниченияРегистрации, ИмяПланаОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по организации.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  Организации - Ссылка или массив ссылок на организации, по которым нужно получить список узлов-получателей.
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоОрганизациямИПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Организации = Неопределено, Подразделения = Неопределено) Экспорт
	
	ОбменДаннымиЗарплатаКадрыБазовый.ОграничитьРегистрациюОбъектаОтборомПоОрганизациямИПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Организации, Подразделения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьОграничениеРегистрацииОбъектаОтборомПоСтруктуреПредприятия(
			ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Подразделения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" независимых регистров сведений для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации.
//  Источник       - НаборЗаписейРегистра - источник события.
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура МеханизмРегистрацииОбъектовПриЗаписиНезависимогоРегистраСведений(ИмяПланаОбмена, Источник, Отказ, Замещение) Экспорт
	
	Если НЕ ОбменДаннымиВызовСервера.ОбменДаннымиВключен(ИмяПланаОбмена, Источник.ОбменДанными.Отправитель)
		Или Источник.Количество() = 0
		Или (Не Источник.ДополнительныеСвойства.Свойство("ОбъектМетаданных")) Тогда
		//Или (Источник.ДополнительныеСвойства.Свойство("Выгрузка") И Источник.ДополнительныеСвойства.Выгрузка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Источник.ДополнительныеСвойства.ОбъектМетаданных;
	ИмяКолонкиВедущегоИзмерения = Источник.ДополнительныеСвойства.ИмяКолонкиВедущегоИзмерения;
	МассивыУзлов = Источник.ДополнительныеСвойства.МассивыУзлов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборЗаписей", Источник.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВТНаборЗаписей
	|	ИЗ &НаборЗаписей КАК НаборЗаписей
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ";
	Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Если Измерение.ОсновнойОтбор Тогда
			Запрос.Текст = Запрос.Текст + "
			|	НаборЗаписей." + Измерение.Имя  + ",";
		КонецЕсли;
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст);
	Запрос.Текст = Запрос.Текст + "
	|ИЗ ВТНаборЗаписей КАК НаборЗаписей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючИзменений = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		Для каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				КлючИзменений.Отбор[Измерение.Имя].Значение = Выборка[Измерение.Имя];
				КлючИзменений.Отбор[Измерение.Имя].Использование = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ИмяКолонкиВедущегоИзмерения = Неопределено Тогда
			МассивУзлов = МассивыУзлов.Получить(Неопределено);
		Иначе
			МассивУзлов = МассивыУзлов.Получить(Выборка[ИмяКолонкиВедущегоИзмерения]);
		КонецЕсли;
		Если МассивУзлов <> Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, КлючИзменений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регистрации изменений для начальной выгрузки данных.
// Используется для переопределения стандартной обработки регистрации изменений.
// При стандартной обработке будут зарегистрированы изменения всех данных из состава плана обмена.
// Если для плана обмена предусмотрены фильтры ограничения миграции данных,
// то использование этого обработчика позволит повысить производительность начальной выгрузки данных.
// В обработчике следует реализовать регистрацию изменений с учетом фильтров ограничения миграции данных.
// Если для плана обмена используются ограничения миграции по дате или по дате и организациям,
// то можно воспользоваться универсальной процедурой
// ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям.
// Обработчик используется только для универсального обмена данными с использованием правил обмена
// и для универсального обмена данными без правил обмена и не используется для обменов в РИБ.
// Использование обработчика позволяет повысить производительность
// начальной выгрузки данных в среднем в 2-4 раза.
//
// Параметры:
//
// Получатель - ПланОбменаСсылка - Узел плана обмена, в который требуется выгрузить данные.
//
// СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки
//                                 события.
//  Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события
//  производиться не будет.
//  Отказ от стандартной обработки не отменяет действие.
//  Значение по умолчанию - Истина.
//
Процедура ОбработкаРегистрацииНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗГУБГУ1") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменЗГУБГУ1");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗГУБГУ2") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменЗГУБГУ2");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
КонецПроцедуры

// Объединяет массивы, возвращая результат объединения
// Возвращаемое значение:
//  Массив - объединенный массив значений.
Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции

Функция МассивДоступныхОрганизаций(ИмяПланаОбмена, УзелПланаОбмена = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат УзелПланаОбмена.Организации.ВыгрузитьКолонку("Организация");
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаОрганизации.Организация КАК Организация
		|ИЗ
		|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
		|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
		|ГДЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|	И ПланОбменаОрганизации.Организация ЕСТЬ НЕ NULL ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланОбменаОрганизации",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1.Организации'"), ИмяПланаОбмена));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланОбмена",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1'"), ИмяПланаОбмена));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПланаОбменаЭтотУзел",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='&%1ЭтотУзел'"), ИмяПланаОбмена));
			
		Запрос.УстановитьПараметр(ИмяПланаОбмена + "ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
	КонецЕсли;
	
КонецФункции

#Область ОграниченияРегистрации

// Возвращает заполненную структуру ограничения регистрации по организации и подразделению.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Организация - Ссылка или массив ссылок организаций Объекта
//		Подразделение - Ссылка или массив ссылок структурных единиц объекта
//		ПозицияШтатногоРасписания - Ссылка или массив ссылок позиции штатного расписания объекта, по ним могут быть получены организации и структурные единицы,
//			к которым принадлежат позиции.
//
// Возвращаемое значение:
//		Структура (см. описание ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации).
//
Функция ОграниченияРегистрацииПоОрганизацииИПодразделению(Объект, Организация = Неопределено, Подразделение = Неопределено, ПозицияШтатногоРасписания = Неопределено) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	Если Организация <> Неопределено Тогда
		Если ТипЗнч(Организация) = Тип("Массив") Тогда
			ОграниченияРегистрации.Организации = Организация;
		Иначе
			ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
		КонецЕсли;
	ИначеЕсли ПозицияШтатногоРасписания <> Неопределено Тогда
		Если ТипЗнч(ПозицияШтатногоРасписания) = Тип("Массив") Тогда
			СоответствиеЗначенийРеквизита = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицияШтатногоРасписания, "Владелец"));
			Для каждого ЭлементСоответствия Из СоответствиеЗначенийРеквизита Цикл
				Если ОграниченияРегистрации.Организации.Найти(ЭлементСоответствия.Значение) = Неопределено Тогда
					ОграниченияРегистрации.Организации.Добавить(ЭлементСоответствия.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПозицияШтатногоРасписания, "Владелец"));
		КонецЕсли;
	КонецЕсли;
	Если Подразделение <> Неопределено Тогда
		Если ТипЗнч(Подразделение) = Тип("Массив") Тогда
			ОграниченияРегистрации.Организации = Подразделение;
		Иначе
			ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
		КонецЕсли;
	ИначеЕсли ПозицияШтатногоРасписания <> Неопределено Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			
			Если ТипЗнч(ПозицияШтатногоРасписания) = Тип("Массив") Тогда
				МассивПозиций = ПозицияШтатногоРасписания;
			Иначе
				МассивПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияШтатногоРасписания);
			КонецЕсли;
			МестаПозиций = Модуль.МестаПозицийВСтруктуреПредприятия(МассивПозиций);
			
			МассивПодразделений = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений, МестаПозиций.ВыгрузитьКолонку("Подразделение"), Истина);
			ОграниченияРегистрации.Подразделения = МассивПодразделений;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает заполненную структуру ограничения регистрации по позициям штатного расписания.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Организация - Ссылка на организацию Объекта
//		Подразделение - Ссылка на структурную единицу объекта
//		ПозицииШтатногоРасписания - Массив позиций штатного расписания, по ним могут быть получены организации и структурные единицы,
//			к которым принадлежат позиции.
//
// Возвращаемое значение:
//		Структура (см. описание ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации).
//
Функция ОграниченияРегистрацииПоПозициямШтатногоРасписания(Объект, ПозицииШтатногоРасписания, Организация = Неопределено, Подразделение = Неопределено) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	Если Организация <> Неопределено Тогда
		ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	ИначеЕсли ПозицииШтатногоРасписания <> Неопределено Тогда
		ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицииШтатногоРасписания, "Владелец");
		МассивОрганизаций = Новый Массив;
		Для каждого ЭлементСоответствия Из ОрганизацииПозиций Цикл
			Если МассивОрганизаций.Найти(ЭлементСоответствия.Значение) = Неопределено Тогда
				МассивОрганизаций.Добавить(ЭлементСоответствия.Значение);
			КонецЕсли;
		КонецЦикла;
		ОграниченияРегистрации.Организации = МассивОрганизаций;
	КонецЕсли;
	Если Подразделение <> Неопределено Тогда
		ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	ИначеЕсли ПозицииШтатногоРасписания <> Неопределено Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			
			МестаПозиций = Модуль.МестаПозицийВСтруктуреПредприятия(ПозицииШтатногоРасписания);
			
			МассивПодразделений = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений, МестаПозиций.ВыгрузитьКолонку("Подразделение"), Истина);
			ОграниченияРегистрации.Подразделения = МассивПодразделений;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает заполненную структуру ограничения регистрации по структурной единице и физическому лицу.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Подразделение - Ссылка на структурную единицу
//		ФизическоеЛицо - Ссылка на физическое лицо объекта
//		ДатаПолученияДанных - Дата, на которую будут получены кадровые сведения.
//
// Возвращаемое значение:
//		Структура (см. описание ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации).
//
Функция ОграниченияРегистрацииПоПодразделениюИФизическомуЛицу(Объект, Подразделение, ФизическоеЛицо, ДатаПолученияДанных) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	ОграниченияРегистрации.ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ОграниченияРегистрации.ДатаПолученияДанных = ДатаПолученияДанных;
	ОграниченияРегистрации.Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает заполненную структуру ограничения регистрации по структурной единице и физическим лицам.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Подразделение - Ссылка на структурную единицу
//		МассивПараметров - Массив структур
//			Ключ - Имя табличной части
//			Значение - Имя реквизита физического лица
//		ДатаПолученияДанных - Дата, на которую будут получены кадровые сведения.
//
// Возвращаемое значение:
//		Структура (см. описание ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации).
//
Функция ОграниченияРегистрацииПоПодразделениюИФизическимЛицам(Объект, Подразделение, МассивПараметров, ДатаПолученияДанных) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	МассивФизическихЛиц = Новый Массив;
	Для каждого ЭлементМассива Из МассивПараметров Цикл
		Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизическихЛиц, Объект[ЭлементСтруктуры.Ключ].ВыгрузитьКолонку(ЭлементСтруктуры.Значение), Истина);
		КонецЦикла;
	КонецЦикла;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	ОграниченияРегистрации.ФизическиеЛица = МассивФизическихЛиц;
	ОграниченияРегистрации.ДатаПолученияДанных = ДатаПолученияДанных;
	ОграниченияРегистрации.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает заполненную структуру ограничения регистрации по структурной единице и сотруднику.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Подразделение - Ссылка на структурную единицу
//		Сотрудник - Ссылка на сотрудника объекта
//		ДатаПолученияДанных - Дата, на которую будут получены кадровые сведения.
//
// Возвращаемое значение:
//		Структура - см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрацииПоПодразделениюИСотруднику(Объект, Подразделение, Сотрудник, ДатаПолученияДанных) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	ОграниченияРегистрации.Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	ОграниченияРегистрации.ДатаПолученияДанных = ДатаПолученияДанных;
	ОграниченияРегистрации.Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает заполненную структуру ограничения регистрации по структурной единице и сотрудникам.
//
// Параметры:
//		Объект - Объект, для которого получаем ограничения регистрации
//		Подразделение - Ссылка на структурную единицу
//		МассивПараметров - Массив структур
//			Ключ - Имя табличной части
//			Значение - Имя реквизита сотрудника
//		ДатаПолученияДанных - Дата, на которую будут получены кадровые сведения.
//
// Возвращаемое значение:
//		Структура (см. описание ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации).
//
Функция ОграниченияРегистрацииПоПодразделениюИСотрудникам(Объект, Подразделение, МассивПараметров, ДатаПолученияДанных) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		// Ограничения регистрации уже были получены
		Возврат Объект.ДополнительныеСвойства.ОграниченияРегистрации;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для каждого ЭлементМассива Из МассивПараметров Цикл
		Для Каждого ЭлементСтруктуры Из ЭлементМассива Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, Объект[ЭлементСтруктуры.Ключ].ВыгрузитьКолонку(ЭлементСтруктуры.Значение), Истина);
		КонецЦикла;
	КонецЦикла;
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации();
	ОграниченияРегистрации.Сотрудники = МассивСотрудников;
	ОграниченияРегистрации.ДатаПолученияДанных = ДатаПолученияДанных;
	ОграниченияРегистрации.Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

// Возвращает структуру ограничения регистрации независимого регистра сведений
//
// Возвращаемое значение:
//		Структура
//			* Организации - Строка, Массив - имена полей организации в наборе сведений
//			* Подразделения - Строка, Массив - имена полей подразделения в наборе сведений
//			* ФизическиеЛица - Строка, Массив - имена полей физического лица в наборе сведений
//			* Сотрудники - Строка, Массив - имена полей сотрудника в наборе сведений
//			* ДатыПолученияДанных - Строка, Массив - имена полей даты получения кадровых сведений.
//
Функция ИменаПолейОграниченияРегистрацииРегистраСведений() Экспорт
	
	СтруктураОграниченияРегистрации = ОбменДаннымиЗарплатаКадрыБазовый.ИменаПолейОграниченияРегистрацииРегистраСведений();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьИменаПолейОграниченияРегистрацииРегистраСведений(СтруктураОграниченияРегистрации);
	КонецЕсли;
	
	Возврат СтруктураОграниченияРегистрации
	
КонецФункции

// Заполняет массивы организаций, подразделений, физических лиц и сотрудников из переданного набора сведений.
//
// Параметры:
//		ОграниченияРегистрации - Структура - см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации
//		НаборСведений - Набор, для которого получаем ограничения регистрации
//		ИменаПолей - Структура - см. ОбменДаннымиЗарплатаКадры.ИменаПолейОграниченияРегистрацииРегистраСведений.
//
Процедура ЗаполнитьОграниченияРегистрацииРегистраСведений(ОграниченияРегистрации, НаборСведений, ИменаПолей) Экспорт
	
	ОбменДаннымиЗарплатаКадрыБазовый.ЗаполнитьОграниченияРегистрацииРегистраСведений(ОграниченияРегистрации, НаборСведений, ИменаПолей);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ДополнитьОграничениеРегистрацииРегистраСведений(НаборСведений, ИменаПолей, ОграниченияРегистрации.Организации, ОграниченияРегистрации.Подразделения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Ограничивает изменение документов, если не все данные в документе доступны пользователю в подчиненном узле
// Вызывается в обработчике "ПриЧтенииНаСервере" всех документов, учавствующих в обмене.
//
// Параметры:
//		Форма - форма документа
//		Источник - Открываемый документ-объект.
//
Процедура ПриЧтенииНаСервереДокумента(Форма, Источник) Экспорт
	
	// Проверку производим только в подчиненных узлах
	Если Не ОбменДаннымиПовтИспЗарплатаКадрыРасширенный.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
		Возврат;
	КонецЕсли;
	
	ОграниченияРегистрации = Источник.ОграниченияРегистрации();
	ПроверитьДоступностьДокумента(ОграниченияРегистрации);
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПланОбмена(ПланыОбменаПодсистемы, ИмяПланаОбмена)
	
	Если ОбменДаннымиВнешнееСоединение.ПланОбменаСуществует(ИмяПланаОбмена) Тогда
		ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена[ИмяПланаОбмена]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьРегистрацииОбъектовПоОрганизациямСотрудников(ОграниченияРегистрации)
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		// Объект ограничен, т.к. не все сотрудники доступны в документе
		Возврат;
	КонецЕсли;
	
	СоздатьВТСотрудники(ОграниченияРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Если ОграниченияРегистрации.МенеджерВременныхТаблиц.Таблицы.Найти("ВТСотрудникиОрганизации") = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
		ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
		ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица = ОграниченияРегистрации.ИмяТаблицыСотрудники;
		ПараметрыПолученияСотрудников.НачалоПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаСотрудников КАК ТаблицаСотрудников
	|		ПО СотрудникиОрганизации.Сотрудник = ТаблицаСотрудников.Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаСотрудников", ОграниченияРегистрации.ИмяТаблицыСотрудники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.Сотрудник", "ТаблицаСотрудников." + ОграниченияРегистрации.ИмяПоляСотрудник);
	
	ПрисутствующиеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если ОграниченияРегистрации.ДополнительныеОрганизации <> Неопределено Тогда
		Если ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) <> Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОграниченияРегистрации.ДополнительныеОрганизации), Истина);
		ИначеЕсли ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) = Тип("Массив") И ОграниченияРегистрации.ДополнительныеОрганизации.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОграниченияРегистрации.ДополнительныеОрганизации, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Организации, ПрисутствующиеОрганизации, Истина);
	
КонецПроцедуры

Процедура ОграничитьРегистрациюОбъектовПоОрганизациямФизическихЛиц(ОграниченияРегистрации)
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		// Объект ограничен, т.к. не все физические лица доступны в документе
		Возврат;
	КонецЕсли;
	
	СоздатьВТФизическиеЛица(ОграниченияРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Если ОграниченияРегистрации.МенеджерВременныхТаблиц.Таблицы.Найти("ВТСотрудникиОрганизации") = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
		ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
		ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица = ОграниченияРегистрации.ИмяТаблицыФизическиеЛица;
		ПараметрыПолученияСотрудников.НачалоПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО Организации.ИндивидуальныйПредприниматель = ТаблицаФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиФизическихЛиц.Организация
	|ИЗ
	|	РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО РолиФизическихЛиц.ФизическоеЛицо = ТаблицаФизическихЛиц.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаФизическихЛиц", ОграниченияРегистрации.ИмяТаблицыФизическиеЛица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.ФизическоеЛицо", "ТаблицаФизическихЛиц." + ОграниченияРегистрации.ИмяПоляФизическоеЛицо);
	
	ПрисутствующиеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если ОграниченияРегистрации.ДополнительныеОрганизации <> Неопределено Тогда
		Если ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) <> Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОграниченияРегистрации.ДополнительныеОрганизации), Истина);
		ИначеЕсли ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) = Тип("Массив") И ОграниченияРегистрации.ДополнительныеОрганизации.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОграниченияРегистрации.ДополнительныеОрганизации, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Организации, ПрисутствующиеОрганизации, Истина);
	
КонецПроцедуры

Процедура ОграничитьРегистрациюОбъектовПоОрганизациямФизическихЛицКонтрагентов(ОграниченияРегистрации)
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		// Объект ограничен, т.к. не все физические лица доступны в документе
		Возврат;
	КонецЕсли;
	
	СоздатьВТФизическиеЛица(ОграниченияРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Если ОграниченияРегистрации.МенеджерВременныхТаблиц.Таблицы.Найти("ВТСотрудникиОрганизации") = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
		ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
		ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица = ОграниченияРегистрации.ИмяТаблицыФизическиеЛица;
		ПараметрыПолученияСотрудников.НачалоПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ОграниченияРегистрации.ДатаПолученияДанных;
		ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО Организации.ИндивидуальныйПредприниматель = ТаблицаФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РолиФизическихЛиц.Организация
	|ИЗ
	|	РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО РолиФизическихЛиц.ФизическоеЛицо = ТаблицаФизическихЛиц.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацииВНалоговомОргане.Владелец
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО РегистрацииВНалоговомОргане.Представитель = ТаблицаФизическихЛиц.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолучателиУдержаний.Организация
	|ИЗ
	|	РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО ПолучателиУдержаний.Контрагент = ТаблицаФизическихЛиц.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияУдержанияПоИсполнительномуДокументу.Организация
	|ИЗ
	|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ПО УсловияУдержанияПоИсполнительномуДокументу.ПлатежныйАгент = ТаблицаФизическихЛиц.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаФизическихЛиц", ОграниченияРегистрации.ИмяТаблицыФизическиеЛица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.ФизическоеЛицо", "ТаблицаФизическихЛиц." + ОграниченияРегистрации.ИмяПоляФизическоеЛицо);
	
	ПрисутствующиеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Если ОграниченияРегистрации.ДополнительныеОрганизации <> Неопределено Тогда
		Если ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) <> Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОграниченияРегистрации.ДополнительныеОрганизации), Истина);
		ИначеЕсли ТипЗнч(ОграниченияРегистрации.ДополнительныеОрганизации) = Тип("Массив") И ОграниченияРегистрации.ДополнительныеОрганизации.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеОрганизации, ОграниченияРегистрации.ДополнительныеОрганизации, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Организации, ПрисутствующиеОрганизации, Истина);
	
КонецПроцедуры

Процедура ПроверитьДоступностьДокумента(ОграниченияРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроверяемаяТаблица.Реквизит КАК Реквизит
	|ИЗ
	|	#ПроверяемаяТаблица КАК ПроверяемаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПроверяемыйСправочник КАК ПроверяемыйСправочник
	|		ПО ПроверяемаяТаблица.Реквизит = ПроверяемыйСправочник.Ссылка
	|ГДЕ
	|	ПроверяемыйСправочник.Ссылка ЕСТЬ NULL";
	
	Если ОграниченияРегистрации.Сотрудники.Количество() > 0 Тогда
		СоздатьВТСотрудники(ОграниченияРегистрации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПроверяемыйСправочник", "Справочник.Сотрудники");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПроверяемаяТаблица", ОграниченияРегистрации.ИмяТаблицыСотрудники);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПроверяемаяТаблица.Реквизит", "ПроверяемаяТаблица." + ОграниченияРегистрации.ИмяПоляСотрудник);
	ИначеЕсли ОграниченияРегистрации.ФизическиеЛица.Количество() > 0 Тогда
		СоздатьВТФизическиеЛица(ОграниченияРегистрации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПроверяемыйСправочник", "Справочник.ФизическиеЛица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПроверяемаяТаблица", ОграниченияРегистрации.ИмяТаблицыФизическиеЛица);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПроверяемаяТаблица.Реквизит", "ПроверяемаяТаблица." + ОграниченияРегистрации.ИмяПоляФизическоеЛицо);
	Иначе
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		// Объект ограничен, т.к. не все доступно в документе
		ОграниченияРегистрации.ОграничитьИзменениеОбъекта = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТСотрудники(ОграниченияРегистрации) Экспорт
	
	// Проверим - существует ли временная таблица в МенеджерВременныхТаблиц
	Если ОграниченияРегистрации.МенеджерВременныхТаблиц.Таблицы.Найти(ОграниченияРегистрации.ИмяТаблицыСотрудники) <> Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним таблицу именно теми сотрудниками, которые были переданы в массиве.
	// В подчиненном узле в массиве могут быть только ссылка на сотрудника, хотя самого сотрудника в базе может не быть.
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить(ОграниченияРегистрации.ИмяПоляСотрудник, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Для каждого СотрудникМассива Из ОграниченияРегистрации.Сотрудники Цикл
		НоваяСтрокаТаблицы = ТаблицаСотрудников.Добавить();
		НоваяСтрокаТаблицы[ОграниченияРегистрации.ИмяПоляСотрудник] = СотрудникМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиВременная
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиВременная КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаСотрудников.Сотрудник = Сотрудники.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиВременная";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудники", ОграниченияРегистрации.ИмяТаблицыСотрудники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.Сотрудник", "ТаблицаСотрудников." + ОграниченияРегистрации.ИмяПоляСотрудник);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(ОграниченияРегистрации) Экспорт
	
	// Проверим - существует ли временная таблица в МенеджерВременныхТаблиц
	Если ОграниченияРегистрации.МенеджерВременныхТаблиц.Таблицы.Найти(ОграниченияРегистрации.ИмяТаблицыФизическиеЛица) <> Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним таблицу именно теми физическими лицами, которые были переданы в массиве.
	// В подчиненном узле в массиве могут быть только ссылка на физическое лицо, хотя самого физического лица в базе может
	// не быть.
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить(ОграниченияРегистрации.ИмяПоляФизическоеЛицо, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Для каждого ФизическоеЛицоМассива Из ОграниченияРегистрации.ФизическиеЛица Цикл
		НоваяСтрокаТаблицы = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрокаТаблицы[ОграниченияРегистрации.ИмяПоляФизическоеЛицо] = ФизическоеЛицоМассива;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ОграниченияРегистрации.ИмяТаблицыФизическиеЛица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.ФизическоеЛицо", "ТаблицаФизическихЛиц." + ОграниченияРегистрации.ИмяПоляФизическоеЛицо);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти