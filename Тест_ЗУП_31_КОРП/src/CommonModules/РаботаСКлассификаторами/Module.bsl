
////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.РаботаСКлассификаторами".
// ОбщийМодуль.РаботаСКлассификаторами.
//
// Серверные процедуры и функции загрузки классификаторов:
//  - получение измененных файлов классификаторов регламентным заданием в тихом режиме (без участия пользователя);
//  - получение актуальных файлов классификаторов и обработка по требования прикладной подсистемы;
//  - получение информации об актуальных версиях классификаторов;
//  - загрузка и обработка версии классификатора;
//  - загрузка файлов классификатора;
//  - изменение настроек загрузки данных классификаторов
//  - обработки событий Библиотеки технологии сервиса;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет загрузку обновления классификатора и обработку данных.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы классификаторов в сервисе,
//                   обновление которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - содержит результат обновления классификатора:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "ОбновлениеНеТребуется" - обновление не обнаружено;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "НеОбработан" - файл классификатора успешно загружен, но не обработан.
//                      Ошибка может возникнуть, если отсутствуют алгоритмы обработки файла
//                      см. процедуру РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестныйКлассификаторИлиПрограмма" - классификатор или программа
//                      в сервисе не обнаружен по переданному идентификатору;
//                    - "ФайлНеЗагружен" - при загрузке файлов классификатора возникли ошибки;
//                    - "ОбновлениеНеТребуется" - загружены актуальные версии классификаторов;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьКлассификаторы(Идентификаторы) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",          "");
	РезультатОбновления.Вставить("СообщениеОбОшибке",  "");
	РезультатОбновления.Вставить("ИнформацияОбОшибке", "");
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Из сервиса загружается информация об актуальных версиях классификаторов,
	// а также ссылки на скачивание файла.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// На момент получения поставляемых данных
		// права уже проверены.
		УстановитьПривилегированныйРежим(Истина);
		
		МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
			"РаботаСКлассификаторамиСлужебныйВМоделиСервиса");
		
		РезультатОперации = МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса.ИнформацияОбАктуальныхВерсияхКлассификаторов(
			Идентификаторы);
		
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РезультатОперации = ИнформацияОбАктуальныхВерсияхКлассификаторов(Идентификаторы);
	КонецЕсли;
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 3. Если номер версии классификатора в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	УдалитьАктуальныеВерсии(РезультатОперации.ДанныеКлассификаторов, Идентификаторы);
	
	Если РезультатОперации.ДанныеКлассификаторов.Количество() = 0 Тогда
		РезультатОбновления.КодОшибки = "ОбновлениеНеТребуется";
		РезультатОбновления.СообщениеОбОшибке  = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия классификатора.'");
		РезультатОбновления.ИнформацияОбОшибке = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия классификатора.'");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 4. Получение файлов классификаторов по ссылкам определенным на этапе 1.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// На момент получения поставляемых данных
		// права уже проверены.
		УстановитьПривилегированныйРежим(Истина);
		
		МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
			"РаботаСКлассификаторамиСлужебныйВМоделиСервиса");
		
		Для Каждого ОписательВерсии Из РезультатОперации.ДанныеКлассификаторов Цикл
			
			РезультатЗагрузки = МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса.ЗагрузитьФайлКлассификатора(
				ОписательВерсии.Идентификатор,
				ОписательВерсии.ИдентификаторФайла);
			
			ОписательВерсии.АдресФайла = РезультатЗагрузки.АдресФайла;
			
			Если РезультатЗагрузки.Ошибка Тогда
				ЗаполнитьЗначенияСвойств(
					РезультатОбновления,
					РезультатЗагрузки,
					"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
				Возврат РезультатОбновления;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РезультатЗагрузки = ЗагрузитьФайлыКлассификаторов(РезультатОперации.ДанныеКлассификаторов);
	КонецЕсли;
	
	Если РезультатЗагрузки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 5. Обработка файлов потребителями подсистемы.
	НеОбработанныеКлассификаторы = Новый Массив;
	Для Каждого ОписательФайла Из РезультатОперации.ДанныеКлассификаторов Цикл
		
		Обработан = Ложь;
		
		РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора(
			ОписательФайла.Идентификатор,
			ОписательФайла.Версия,
			ОписательФайла.АдресФайла,
			Обработан);
		
		Если Обработан Тогда
			УстановитьПривилегированныйРежим(Истина);
			УстановитьВерсиюКлассификатора(ОписательФайла.Идентификатор, ОписательФайла.Версия);
			УстановитьПривилегированныйРежим(Истина);
		Иначе
			НеОбработанныеКлассификаторы.Добавить(ОписательФайла.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеОбработанныеКлассификаторы.Количество() > 0 Тогда
		РезультатОперации.КодОшибки = "НеОбработан";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не удалось обработать обновления классификаторов.'");
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке загруженных обновлений классификаторов %1 возникли ошибки.'"),
			СтрСоединить(НеОбработанныеКлассификаторы, ","));
	КонецЕсли;
	
	Возврат РезультатОбновления;
	
КонецФункции

// Проверяет наличие доступных обновлений классификаторов в Сервисе классификаторов.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы классификаторов в сервисе,
//                   обновление которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - информация о доступных обновлениях:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестныйКлассификаторИлиПрограмма" - классификатор или программа
//                      в сервисе не обнаружен по переданному идентификатору;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//                    - "ОбновлениеНеТребуется" - загружены актуальные версии классификаторов;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *ДоступныеВерсии - Массив - содержит информацию о доступных обновлениях
//      **Идентификатор      - Строка - идентификатор классификатора в сервисе;
//      **Версия             - Строка - номер актуальной версии;
//      **КонтрольнаяСумма   - Число - контрольная сумма файла;
//      **ОписаниеВерсии     - Строка - ссылка на скачивание файла актуальной версии;
//      **ИдентификаторФайла - Строка - идентификатор файла, который будет использован для загрузки;
//      **Размер             - Строка - размер файла;
//      **Наименование       - Строка - наименование классификатора;
//
Функция ДоступныеОбновленияКлассификаторов(Идентификаторы) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("КодОшибки",          "");
	РезультатПроверки.Вставить("СообщениеОбОшибке",  "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	РезультатПроверки.Вставить("ДоступныеВерсии ",   Новый Массив);
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Из сервиса загружается информация об актуальных версиях классификаторов,
	// а также ссылки на файл.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
			"РаботаСКлассификаторамиСлужебныйВМоделиСервиса");
		
		РезультатОперации = МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса.ИнформацияОбАктуальныхВерсияхКлассификаторов(
			Идентификаторы);
		
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РезультатОперации = ИнформацияОбАктуальныхВерсияхКлассификаторов(
			Идентификаторы,
			Истина);
	КонецЕсли;
		
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатПроверки,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатПроверки;
	КонецЕсли;
	
	// 3. Если номер версии классификатора в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	УдалитьАктуальныеВерсии(РезультатОперации.ДанныеКлассификаторов, Идентификаторы);
	
	Для Каждого ОписательВерсии Из РезультатОперации.ДанныеКлассификаторов Цикл
		
		ИдентификаторФайла = Новый Структура;
		ИдентификаторФайла.Вставить("ИдентификаторФайла", ОписательВерсии.ИдентификаторФайла);
		ИдентификаторФайла.Вставить("КонтрольнаяСумма",   ОписательВерсии.КонтрольнаяСумма);
		
		ДанныеВерсии = Новый Структура;
		ДанныеВерсии.Вставить("Идентификатор",      ОписательВерсии.Идентификатор);
		ДанныеВерсии.Вставить("Наименование",       ОписательВерсии.Наименование);
		ДанныеВерсии.Вставить("Версия",             ОписательВерсии.Версия);
		ДанныеВерсии.Вставить("ОписаниеВерсии",     ОписательВерсии.ОписаниеВерсии);
		ДанныеВерсии.Вставить("Размер",             ОписательВерсии.Размер);
		ДанныеВерсии.Вставить("ИдентификаторФайла", ИдентификаторФайла);
		РезультатПроверки.ДоступныеВерсии.Добавить(ДанныеВерсии);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Выполняет загрузку файла обновления классификатора и его обработку.
// Необходимо использовать совместно с функцией РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов.
//
// Параметры:
//  Идентификатор      - Строка - идентификатор классификатора в сервисе;
//  Версия             - Строка - номер актуальной версии;
//  ИдентификаторФайла - Строка - идентификатор файла, который будет использован для загрузки.
//                       см. функцию РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов;
//
// Возвращаемое значение:
//  Структура - результат обновления классификатора:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "НеОбработан" - файл классификатора успешно загружен, но не обработан.
//                      Ошибка может возникнуть, если отсутствуют алгоритмы обработки файла
//                      см. процедуру РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестныйКлассификаторИлиПрограмма" - классификатор или программа
//                      в сервисе не обнаружен по переданному идентификатору;
//                    - "ФайлНеЗагружен" - при загрузке файлов классификатора возникли ошибки;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС.
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
// Пример:
//
//  Идентификаторы = Новый Массив;
//  Идентификаторы.Добавить(Параметры.Идентификатор);
//
//  РезультатПроверки = РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов(Идентификаторы);
//  Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
//    ПоказатьПредупреждение(, РезультатПроверки.СообщениеОбОшибке);
//  ИначеЕсли РезультатПроверки.ДоступныеВерсии.Количество() = 0 Тогда
//    Возврат;
//  Иначе
//   РаботаСКлассификаторами.ОбработатьОбновлениеКлассификатора(
//       РезультатПроверки.ДоступныеВерсии[0].Идентификатор,
//       РезультатПроверки.ДоступныеВерсии[0].Версия,
//       РезультатПроверки.ДоступныеВерсии[0].ИдентификаторФайла)
//  КонецЕсли;
//
Функция ОбработатьОбновлениеКлассификатора(
		Идентификатор,
		Версия,
		ИдентификаторФайла) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",          "");
	РезультатОбновления.Вставить("СообщениеОбОшибке",  "");
	РезультатОбновления.Вставить("ИнформацияОбОшибке", "");
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Получение файлов классификаторов по ссылкам определенным на этапе 1.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль(
			"РаботаСКлассификаторамиСлужебныйВМоделиСервиса");
		
		РезультатОперации = МодульРаботаСКлассификаторамиСлужебныйВМоделиСервиса.ЗагрузитьФайлКлассификатора(
			Идентификатор,
			ИдентификаторФайла.ИдентификаторФайла);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		// Заполнение данных версии.
		ДанныеКлассификаторов = ОписаниеДанныхКлассификаторов();
		
		ОписательВерсии = ДанныеКлассификаторов.Добавить();
		ОписательВерсии.Идентификатор    = Идентификатор;
		ОписательВерсии.Версия           = Версия;
		ОписательВерсии.АдресФайла       = РезультатОперации.АдресФайла;
		
	Иначе
		
		// Заполнение данных запроса файла.
		ДанныеКлассификаторов = ОписаниеДанныхКлассификаторов();
		
		ОписательВерсии = ДанныеКлассификаторов.Добавить();
		ОписательВерсии.Идентификатор      = Идентификатор;
		ОписательВерсии.Версия             = Версия;
		ОписательВерсии.ИдентификаторФайла = ИдентификаторФайла.ИдентификаторФайла;
		ОписательВерсии.КонтрольнаяСумма   = ИдентификаторФайла.КонтрольнаяСумма;
		
		РезультатОперации = ЗагрузитьФайлыКлассификаторов(ДанныеКлассификаторов);
		
	КонецЕсли;
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 3. Обработка файлов потребителями подсистемы.
	НеОбработанныеКлассификаторы = Новый Массив;
	Для Каждого ОписательФайла Из ДанныеКлассификаторов Цикл
		
		Обработан = Ложь;
		
		РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора(
			ОписательФайла.Идентификатор,
			ОписательФайла.Версия,
			ОписательФайла.АдресФайла,
			Обработан);
		
		Если Обработан Тогда
			УстановитьПривилегированныйРежим(Истина);
			УстановитьВерсиюКлассификатора(ОписательФайла.Идентификатор, ОписательФайла.Версия);
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			НеОбработанныеКлассификаторы.Добавить(ОписательФайла.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеОбработанныеКлассификаторы.Количество() > 0 Тогда
		РезультатОперации.КодОшибки = "НеОбработан";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не удалось обработать обновления классификаторов.'");
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке загруженных обновлений классификаторов %1 возникли ошибки.'"),
			СтрСоединить(НеОбработанныеКлассификаторы, ","));
	КонецЕсли;
	
	Возврат РезультатОбновления;

КонецФункции

// Проверяет наличие доступных обновлений классификаторов в Сервисе классификаторов
// и загружает файлы. Получение файлов не доступно при работе в модули сервиса.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы классификаторов в сервисе,
//                   файлы которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - информация о доступных обновлениях:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - обновление выполнено успешно;
//                    - "ОбновлениеНеТребуется" - обновление не обнаружено;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "НеОбработан" - файл классификатора успешно загружен, но не обработан.
//                      Ошибка может возникнуть, если отсутствуют алгоритмы обработки файла
//                      см. процедуру РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестныйКлассификаторИлиПрограмма" - классификатор или программа
//                      в сервисе не обнаружен по переданному идентификатору;
//                    - "ФайлНеЗагружен" - при загрузке файлов классификатора возникли ошибки;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    *ДоступныеВерсии    - Массив - содержит информацию о доступных обновлениях
//      **Идентификатор   - Строка - идентификатор классификатора в сервисе;
//      **Версия          - Строка - номер актуальной версии;
//      **АдресФайла      - Строка - адрес файла во временном хранилище.
//
Функция ПолучитьФайлыКлассификаторов(Идентификаторы) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Получение файла классификатора при работе в модели сервиса не поддерживается.'");
	КонецЕсли;
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки",             "");
	РезультатОбновления.Вставить("СообщениеОбОшибке",     "");
	РезультатОбновления.Вставить("ИнформацияОбОшибке",    "");
	РезультатОбновления.Вставить("ДанныеКлассификаторов", Неопределено);
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Из сервиса загружается информация об актуальных версиях классификаторов,
	// а также ссылки на скачивание файла.
	РезультатОперации = ИнформацияОбАктуальныхВерсияхКлассификаторов(Идентификаторы);
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 3. Получение файлов классификаторов по ссылкам определенным на первом этапе.
	РезультатЗагрузки = ЗагрузитьФайлыКлассификаторов(РезультатОперации.ДанныеКлассификаторов);
	
	Если РезультатЗагрузки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 4. Подготовка таблицы классификаторов.
	РезультатОперации.ДанныеКлассификаторов.Колонки.Удалить("КонтрольнаяСумма");
	РезультатОперации.ДанныеКлассификаторов.Колонки.Удалить("ИдентификаторФайла");
	РезультатОбновления.ДанныеКлассификаторов = РезультатОперации.ДанныеКлассификаторов;
	
	Возврат РезультатОбновления;
	
КонецФункции

// Создает описатель классификатора, который используется в программе.
//
// Возвращаемое значение:
//   Структура - содержит перечень значений необходимых для  подключения тестового периода:
//     *Идентификатор -           Строка - идентификатор классификатора в сервисе классификаторов.
//                                Поле обязательно для заполнения, если передана пустая строка,
//                                при переходе на новую версию будет вызвано исключение. Длина не более
//                                25 символов;
//     *ОбновлятьАвтоматически  - Булево - настройка которая включает/отключает автоматическое
//                                обновления данных из сервиса;
//     *ОбщиеДанные             - Булево - регулирует способ обработки поставляем данных.
//                                Если Ложь, загрузка данных классификатора будет произведена
//                                в каждую область базы данных. Параметр используется только при работе
//                                в модели сервиса, в обычном режиме игнорируется.
//
Функция ОписаниеКлассификатора() Экспорт
	
	Описатель = Новый Структура;
	Описатель.Вставить("Идентификатор",          "");
	Описатель.Вставить("ОбновлятьАвтоматически", Истина);
	Описатель.Вставить("ОбщиеДанные",            Истина);
	
	Возврат Описатель;
	
КонецФункции

// Изменяет номер загруженной версии классификатора. Процедуру следует использовать,
// если выполняется обновления данных не из сервиса классификаторов. При работе в модели
// сервиса будет автоматический определена доступность общих данных. Если общие данные
// не доступны, изменение версии регистрируется для области данных.
//
// Параметры:
//  Идентификатор - Строка - идентификатор классификатора в сервисе классификаторов;
//  Версия        - Число - новый номер версии, который необходимо установить.
//
Процедура УстановитьВерсиюКлассификатора(Идентификатор, Версия) Экспорт
	
	Если ИспользоватьДанныеОбласти() Тогда
		Запись = РегистрыСведений.ВерсииКлассификаторовОбластейДанных.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = Идентификатор;
	Иначе
		Запись = РегистрыСведений.ВерсииКлассификаторов.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = Идентификатор;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			ВызватьИсключение НСтр("ru = 'Классификатор по идентификатору не обнаружен.'");
		КонецЕсли;
	КонецЕсли;
	
	Запись.Версия = Версия;
	Запись.Записать();
	
КонецПроцедуры

// Получает номер версии загруженного из сервиса классификатора. Если номер версии
// по идентификатору не найден, выполняет обновление данных регистра сведений
// ВерсииКлассификаторов.
//
// Параметры:
//  Идентификатор      - Строка - идентификатор классификатора в сервисе классификаторов;
//  ВызыватьИсключение - Булево - если Истина и идентификатор не найден, будет вызвано исключение.
//
// Возвращаемое значение:
//   Число, Неопределено - номер версии классификатора.
//
Функция ВерсияКлассификатора(Идентификатор, ВызыватьИсключение = Ложь) Экспорт
	
	ОбщиеДанные = Не (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
	ИмяРегистра = ?(ОбщиеДанные, "ВерсииКлассификаторов", "ВерсииКлассификаторовОбластейДанных");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегВерсииКлассификаторов.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.%1 КАК РегВерсииКлассификаторов
		|ГДЕ
		|	РегВерсииКлассификаторов.Идентификатор = &Идентификатор";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяРегистра);
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Версия;
	КонецЕсли;
	
	// Возможно, не выполнено обновление настроек классификатора РС ВерсииКлассификаторов.
	// Если классификатор используется в конфигурации, будет выполнено частичное обновление
	// настроек.
	Если ОбщиеДанные Тогда
		
		Классификаторы = Новый Массив;
		РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов(Классификаторы);
		
		Для Каждого Описатель Из Классификаторы Цикл
			Если Описатель.Идентификатор = Идентификатор Тогда
				Запись = РегистрыСведений.ВерсииКлассификаторов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Описатель);
				Запись.Записать();
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВызыватьИсключение Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Классификатор %1 не зарегистрирован.'"),
			Идентификатор);
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаКлассификаторов(0),
		443,
		НСтр("ru = 'Сервис классификаторов (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаКлассификаторов(1),
		443,
		НСтр("ru = 'Сервис классификаторов (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "РаботаСКлассификаторами.ОбновитьНастройкиРаботыСКлассификаторами";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Обновление списка классификаторов.'"),
		ИмяСобытияЖурналаРегистрации());
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "*";
		Обработчик.Процедура           = "РаботаСКлассификаторами.ОбновитьНастройкиРаботыСКлассификаторамиОбластейДанных";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0589c734-f2a8-4af1-97b1-6e8deb4830d6");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Обновление списка классификаторов областей данных.'"),
			ИмяСобытияЖурналаРегистрации());
		КонецЕсли;
		
КонецПроцедуры

// Выполняет обновление данных регистра сведений ВерсииКлассификаторов и
// добавляет регламентное задание проверки обновлений классификаторов.
//
Процедура ОбновитьНастройкиРаботыСКлассификаторами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Работа с классификаторами"". Начало обновления.'"),
		Ложь);
	
	Классификаторы = Новый Массив;
	РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов(Классификаторы);
	
	// Обновление списка классификаторов и настроек обновления.
	УдаленныеКлассификаторы = ОбновитьВерсииКлассификаторов(Классификаторы);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Для автоматического обновления при необходимости создается регламентное
		// задание, которое по расписанию обновляет данные.
		СоздатьЗадание = Ложь;
		Для каждого ОписательКлассификатора Из Классификаторы Цикл
			Если ОписательКлассификатора.ОбновлятьАвтоматически Тогда
				СоздатьЗадание = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Если есть классификаторы, которые необходимо загружать из сервиса
		// по расписанию, будет создано регламентное задание.
		Если СоздатьЗадание Тогда
			ДобавитьРегламентноеЗаданиеОбновленияКлассификаторов();
		Иначе
			УдалитьРегламентноеЗаданиеОбновленияКлассификаторов();
		КонецЕсли;
		
	Иначе
		
		// При работе в модели сервиса файлы классификаторов кэшируются в поставляемых
		// данных, поэтому для удаленных классификаторов необходимо запланировать удаление
		// кэша.
		Если УдаленныеКлассификаторы.Количество() > 0 Тогда
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(УдаленныеКлассификаторы);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "УдалитьКэшПоставляемыхКлассификаторов");
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ПараметрыЗадания.Вставить("ОбластьДанных", -1);
			ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяУниверсальнаяДата());
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Работа с классификаторами"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

// Выполняет обновление данных регистра сведений ВерсииКлассификаторовОбластейДанных.
//
Процедура ОбновитьНастройкиРаботыСКлассификаторамиОбластейДанных(Параметры) Экспорт
	
	// Дозаписываем информацию о классификаторах в регистр
	// отложенном обновлении из областей данных.
	Если Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек областей подсистемы ""Работа с классификаторами"". Начало обновления.'"),
		Ложь);
	
	Классификаторы = Новый Массив;
	РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов(Классификаторы);
	
	ИспользуемыеКлассификаторы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииКлассификаторовОбластейДанных.Идентификатор КАК Идентификатор,
		|	ВерсииКлассификаторовОбластейДанных.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторовОбластейДанных КАК ВерсииКлассификаторовОбластейДанных";
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого Описатель Из Классификаторы Цикл
		
		Если Описатель.ОбщиеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Описатель.Идентификатор);
		
		Если Не ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			Запись = РегистрыСведений.ВерсииКлассификаторовОбластейДанных.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Описатель, "Идентификатор");
			Запись.Записать();
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		ИспользуемыеКлассификаторы.Добавить(Описатель.Идентификатор);
		
	КонецЦикла;
	
	// Идентификаторы классификаторов, которые перестали использоваться необходимо удалить
	// из регистра "Версии классификаторов".
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииКлассификаторовОбластейДанных.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторовОбластейДанных КАК ВерсииКлассификаторовОбластейДанных
		|ГДЕ
		|	НЕ ВерсииКлассификаторовОбластейДанных.Идентификатор В (&ИспользуемыеКлассификаторы)";
	
	Запрос.УстановитьПараметр("ИспользуемыеКлассификаторы", ИспользуемыеКлассификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор = РегистрыСведений.ВерсииКлассификаторовОбластейДанных.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек областей подсистемы ""Работа с классификаторами"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область БСПОчередьЗаданий

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		"УдалитьКэшПоставляемыхКлассификаторов", "РаботаСКлассификаторамиСлужебныйВМоделиСервиса.УдалитьКэшПоставляемыхКлассификаторов");
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. описание этой же процедуры в общем модуле
// ПоставляемыеДанныеПереопределяемый.
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхКлассификаторы();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхКлассификаторы();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторамиСлужебныйВМоделиСервиса");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль) Экспорт
	
	ДобавитьРегламентноеЗаданиеОбновленияКлассификаторов();
	
КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ() Экспорт
	
	Если Не ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки() Тогда
		ВызватьИсключение НСтр("ru = 'Отключение интернет поддержки пользователей не доступно.'");
	КонецЕсли;
	
	УдалитьРегламентноеЗаданиеОбновленияКлассификаторов();
	
КонецПроцедуры

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Определяет вид данных и код обработчика для поставляемых данных.
//
// Возвращаемое значение:
//  Строка - наименование вида данных.
//
Функция ВидПоставляемыхДанныхКлассификаторы() Экспорт
	
	Возврат "Classifiers";
	
КонецФункции

// Создает таблицу с описанием данных актуальных версий.
//
// Параметры:
//  ИнтерактивнаяЗагрузка - Булево - определяет набор возвращаемых атрибутов.
//
// Возвращаемое значение:
//  ТаблицаЗначений      - содержит информацию, которая используется
//                         для обновления данных классификаторов
//   *Идентификатор      - Строка - идентификатор классификатора в сервисе;
//   *Версия             - Строка - номер актуальной версии;
//   *КонтрольнаяСумма   - Число - контрольная сумма файла;
//   *ИдентификаторФайла - Строка - ссылка на скачивание файла актуальной версии;
//   *АдресФайла         - Строка - адрес файла классификатора во временном хранилище;
//   *Размер             - Строка - размер файла;
//   *Наименование       - Строка - наименование классификатора;
//   *ОписаниеВерсии     - Строка - описание версии классификатора.
//
Функция ОписаниеДанныхКлассификаторов(ИнтерактивнаяЗагрузка = Ложь) Экспорт
	
	ДанныеКлассификаторов = Новый ТаблицаЗначений;
	ДанныеКлассификаторов.Колонки.Добавить("Идентификатор",      ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеКлассификаторов.Колонки.Добавить("Версия",             ОбщегоНазначения.ОписаниеТипаЧисло(11));
	ДанныеКлассификаторов.Колонки.Добавить("КонтрольнаяСумма",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеКлассификаторов.Колонки.Добавить("ИдентификаторФайла", ОбщегоНазначения.ОписаниеТипаСтрока(800));
	ДанныеКлассификаторов.Колонки.Добавить("АдресФайла",         ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	Если ИнтерактивнаяЗагрузка Тогда
		ДанныеКлассификаторов.Колонки.Добавить("Размер",         ОбщегоНазначения.ОписаниеТипаЧисло(32));
		ДанныеКлассификаторов.Колонки.Добавить("Наименование",   ОбщегоНазначения.ОписаниеТипаСтрока(100));
		ДанныеКлассификаторов.Колонки.Добавить("ОписаниеВерсии", ОбщегоНазначения.ОписаниеТипаСтрока(800));
	КонецЕсли;
	
	Возврат ДанныеКлассификаторов;
	
КонецФункции

// Определяет настройки обновления классификаторов.
//
// Параметры:
//  Идентификаторы  - Массив - содержит список идентификаторов классификаторов,
//                    для которых необходимо получить настройки;
//
// Возвращаемое значение:
//  Структура - настройки классификатора.
//
Функция НастройкиКлассификатора(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииКлассификаторов.Версия КАК Версия,
		|	ВерсииКлассификаторов.ОбновлятьАвтоматически КАК ОбновлятьАвтоматически,
		|	ВерсииКлассификаторов.ОбщиеДанные КАК ОбщиеДанные
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторов КАК ВерсииКлассификаторов
		|ГДЕ
		|	ВерсииКлассификаторов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Версия",                  ВыборкаДетальныеЗаписи.Версия);
		Настройки.Вставить("ОбновлятьАвтоматически",  ВыборкаДетальныеЗаписи.ОбновлятьАвтоматически);
		Настройки.Вставить("ОбщиеДанные",             ВыборкаДетальныеЗаписи.ОбщиеДанные);
		
		Возврат Настройки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеКлассификаторов"
//
Процедура ОбновлениеКлассификаторов() Экспорт
	
	// Регламентные задания блокируются на время служебных
	// операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииКлассификаторов.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторов КАК ВерсииКлассификаторов
		|ГДЕ
		|	ВерсииКлассификаторов.ОбновлятьАвтоматически";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Идентификаторы         = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Идентификаторы.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Отсутствуют классификаторы для автоматического обновления.'"),
			Ложь);
		Возврат;
	КонецЕсли;
	
	ОбновитьКлассификаторы(Идентификаторы);
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеКлассификаторов" 
// при обновлении ИБ или при подключении Интернет-поддержки пользователей.
//
Процедура ДобавитьРегламентноеЗаданиеОбновленияКлассификаторов()
	
	// При работе в режиме коробки обновление классификаторов производится
	// регламентным заданием.
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 06:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 21600);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление классификаторов'"));
			
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание обновления классификаторов.'"),
				Ложь,
				Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеКлассификаторов" 
// при обновлении ИБ или при отключении от Интернет-поддержки пользователей.
//
Процедура УдалитьРегламентноеЗаданиеОбновленияКлассификаторов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	ТипЗадания = ТипЗнч(ЗаданияОбновления);
	Если ТипЗадания = Тип("Массив") Тогда
		Если ЗаданияОбновления.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ТаблицаЗначений") Тогда
		Если ЗаданияОбновления.Количество() > 0 Тогда
			Если ЗаданияОбновления.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].УникальныйИдентификатор);
			ИначеЕсли ЗаданияОбновления.Колонки.Найти("Идентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(ЗаданияОбновления[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Удалено регламентное задание обновления классификаторов'"),
		Ложь,
		Метаданные.РегламентныеЗадания.ОбновлениеКлассификаторов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Определяет список классификаторов используемых в конфигурации
// основные сведения: идентификатор и настройку обновлять автоматический
// и обновляет данные регистра сведений справочника "ВерсииКлассификаторов".
//
// Параметры:
//  Классификаторы - Массив - содержит описатели классификаторов,
//                   см. функцию ОписаниеКлассификатора().
//
// Возвращаемое значение:
//  Массив - содержит идентификаторы классификаторов, которые были удалены из регистра
//           сведений "ВерсииКлассификаторов".
//
Функция ОбновитьВерсииКлассификаторов(Классификаторы)
	
	УдаленныеКлассификаторы    = Новый Массив;
	ИспользуемыеКлассификаторы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииКлассификаторов.Идентификатор КАК Идентификатор,
		|	ВерсииКлассификаторов.Версия КАК Версия,
		|	ВерсииКлассификаторов.ОбновлятьАвтоматически КАК ОбновлятьАвтоматически,
		|	ВерсииКлассификаторов.ОбщиеДанные КАК ОбщиеДанные
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторов КАК ВерсииКлассификаторов";
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого Описатель Из Классификаторы Цикл
		
		Обновлен = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Описатель.Идентификатор);
		
		// Обновление настроек классификаторов.
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			
			Если ВыборкаДетальныеЗаписи.ОбновлятьАвтоматически <> Описатель.ОбновлятьАвтоматически
				Или ВыборкаДетальныеЗаписи.ОбщиеДанные <> Описатель.ОбщиеДанные Тогда
				
				Запись = РегистрыСведений.ВерсииКлассификаторов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи, "Идентификатор, Версия");
				Запись.ОбновлятьАвтоматически = Описатель.ОбновлятьАвтоматически;
				Запись.ОбщиеДанные            = Описатель.ОбщиеДанные;
				Запись.Записать();
			КонецЕсли;
			
			Обновлен = Истина;
			
		КонецЕсли;
		
		// Добавление новых классификаторов.
		Если Не Обновлен Тогда
			Запись = РегистрыСведений.ВерсииКлассификаторов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Описатель, "Идентификатор, ОбновлятьАвтоматически, ОбщиеДанные");
			Запись.Записать();
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		ИспользуемыеКлассификаторы.Добавить(Описатель.Идентификатор);
		
	КонецЦикла;
	
	// Идентификаторы классификаторов, которые перестали использоваться необходимо удалить
	// из регистра "Версии классификаторов".
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииКлассификаторов.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ВерсииКлассификаторов КАК ВерсииКлассификаторов
		|ГДЕ
		|	НЕ ВерсииКлассификаторов.Идентификатор В (&ИспользуемыеКлассификаторы)";
	
	Запрос.УстановитьПараметр("ИспользуемыеКлассификаторы", ИспользуемыеКлассификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор = РегистрыСведений.ВерсииКлассификаторов.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
		Набор.Записать();
		УдаленныеКлассификаторы.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Возврат УдаленныеКлассификаторы;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /version/latest

// Возвращает список описаний актуальных версий классификаторов, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  Идентификаторы  - Массив - содержит список идентификаторов классификаторов,
//                    для которых необходимо проверить наличие обновлений;
//  ИнтерактивнаяЗагрузка - Булево - определяет набор возвращаемых атрибутов.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    *ДанныеКлассификаторов - ТаблицаЗначений - см. функцию ОписаниеДанныхКлассификаторов().
//
Функция ИнформацияОбАктуальныхВерсияхКлассификаторов(Идентификаторы, ИнтерактивнаяЗагрузка = Ложь)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации об актуальных версиях классификаторов: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	РезультатОперации.Вставить("ДанныеКлассификаторов", ОписаниеДанныхКлассификаторов(ИнтерактивнаяЗагрузка));
	
	ПараметрыПодключения = ИнициализироватьПараметрыОбновленияКлассификаторов();
	
	URLОперации = URLОперацииСервисаКлассификаторов(
		"/version/latest",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "Ошибка, ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	
	ПараметрыЗапросаJSON = versionlatest(
		Идентификаторы,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки         = ПереопределитьКодОшибкиСервиса(РезультатОтправки.КодСостояния);
		РезультатОперации.Ошибка            = Истина;
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователю(РезультатОперации.КодОшибки);
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Не удалось получить актуальные версии классификаторов.'"));
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(РезультатОперации.СообщениеОбОшибке);
		ЧастиСтрок.Добавить(Символы.ПС);
		ЧастиСтрок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '
				|Техническая информация об ошибке:
				|При получении информации об актуальных версиях классификаторов сервис вернул ошибку.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке));
		
		РезультатОперации.ИнформацияОбОшибке = Новый ФорматированнаяСтрока(ЧастиСтрок);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ПрочитатьДанные_versionlatest(
		РезультатОтправки.Содержимое,
		РезультатОперации.ДанныеКлассификаторов,
		ИнтерактивнаяЗагрузка,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение актуальных версий классификаторов: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /classifiers/version/latest.
//
Функция versionlatest(Идентификаторы, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "programNick":"nick",
	//    "classifierNickList":[nick1,nick2],
	//    "authenticationInfo": {
	//            "login": "User",
	//            "password":"Pass",
	//    },
	//    "additionalParams" : {
	//        "key":"value"
	//    }
	// }
	
	ИмяПрограммы = "";
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы(ИмяПрограммы);
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("classifierNickList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /version/latest.
//
Процедура ПрочитатьДанные_versionlatest(
		ТелоJSON,
		ДанныеКлассификаторов,
		ИнтерактивнаяЗагрузка = Ложь,
		ДоменРасположенияСерверовИПП = 1)
	
	// classifierNick - идентификатор классификатора в сервисе;
	// version - номер актуальной версии;
	// fileUrl - ссылка на скачивание файла актуальной версии;
	// hashSum - контрольная сумма файла;
	// versionDescription - описание версии классификатора;
	// fileSize - размер файла;
	// classifierName - наименование классификатора.
	//
	// {
	//  [
	//     {
	//      "classifierNick": "Идентификатор",
	//      "version":1,
	//      "fileUrl": "https://fileUrl",
	//      "hashSum": "Контрольная сумма",
	//      "versionDescription": "Описание",
	//      "fileSize": "Размер в байтах",
	//      "classifierName": "Имя классификатора"
	//     }
	//  ]
	//}
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ Сервиса классификаторов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "classifierNick" Тогда
				ОписательВерсии = ДанныеКлассификаторов.Добавить();
				ОписательВерсии.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "version" Тогда
				ОписательВерсии.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "fileUrl" Тогда
				ОписательВерсии.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "hashSum" Тогда
				ОписательВерсии.КонтрольнаяСумма = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИнтерактивнаяЗагрузка И ЧтениеОтвета.ТекущееЗначение = "versionDescription" Тогда
				ОписательВерсии.ОписаниеВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИнтерактивнаяЗагрузка И ЧтениеОтвета.ТекущееЗначение = "fileSize" Тогда
				ОписательВерсии.Размер = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИнтерактивнаяЗагрузка И ЧтениеОтвета.ТекущееЗначение = "classifierName" Тогда
				ОписательВерсии.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка формата ответа.
	ХостСервиса = ХостСервисаКлассификаторов(ДоменРасположенияСерверовИПП);
	Для Каждого ОписательВерсии Из ДанныеКлассификаторов Цикл
		Если Не ЗначениеЗаполнено(ОписательВерсии.Идентификатор)
			Или Не ЗначениеЗаполнено(ОписательВерсии.Версия)
			Или Не ЗначениеЗаполнено(ОписательВерсии.ИдентификаторФайла) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Не верный формат ответа Сервиса классификаторов.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОписательВерсии.ИдентификаторФайла);
		Если Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6) <> Прав(НРег(СокрЛП(ХостСервиса)), 6) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Не верный адрес файла обновления классификатора.'");
			ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции загрузки файлов /version/download/

// Выполняет загрузку файлов по переданным ранее URL.
//
// Параметры:
//  ДанныеКлассификаторов  - ТаблицаЗначений - см. функцию ОписаниеДанныхКлассификаторов().
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора.
//
Функция ЗагрузитьФайлыКлассификаторов(ДанныеКлассификаторов)
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",          "");
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ДанныеАутентификации = ДанныеАутентификации();
	
	Результат = ДанныеАутентификации();
	Если Результат.Ошибка Тогда
		РезультатОперации.КодОшибки = "НеверныйЛогинИлиПароль";
		ЗаполнитьЗначенияСвойств(РезультатОперации, Результат, "Ошибка, ИнформацияОбОшибке");
		РезультатОперации.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеАутентификации = Результат.ДанныеАутентификации;
	ПараметрыЗапросаJSON = versiondownload(ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "POST");
	ПараметрыОтправки.Вставить("Таймаут",                  1280);
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки",       ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("Заголовки",                Заголовки);
	
	Для Каждого ОписательКлассификатора Из ДанныеКлассификаторов Цикл
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение файла классификатора: %1'"),
				ОписательКлассификатора.ИдентификаторФайла),
			Ложь);
		
		ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURL(ОписательКлассификатора.ИдентификаторФайла);
		
		РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
			ОписательКлассификатора.ИдентификаторФайла,
			,
			,
			ПараметрыОтправки);
		
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки          = "ФайлНеЗагружен";
			РезультатОперации.Ошибка             = Истина;
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла классификатора %1: 
					|%2'"),
				ОписательКлассификатора.Идентификатор,
				РезультатОтправки.СообщениеОбОшибке);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл классификатора %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОписательКлассификатора.Идентификатор,
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				ОписательКлассификатора.ИдентификаторФайла,
				РезультатОтправки.ИнформацияОбОшибке);
			ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		КонтрольнаяСуммаФайл = ИнтернетПоддержкаПользователей.КонтрольнаяСуммаФайла(РезультатОтправки.Содержимое);
		Если ОписательКлассификатора.КонтрольнаяСумма <> КонтрольнаяСуммаФайл Тогда
			РезультатОперации.КодОшибки          = "ФайлНеЗагружен";
			РезультатОперации.Ошибка             = Истина;
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла классификатора %1: 
					|%2'"),
				ОписательКлассификатора.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл классификатора %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОписательКлассификатора.Идентификатор);
			ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Возврат РезультатОперации;
		КонецЕсли;
		
		ОписательКлассификатора.АдресФайла = ПоместитьВоВременноеХранилище(РезультатОтправки.Содержимое);
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /classifiers/version/download/.
//
Функция versiondownload(ДанныеАутентификации)
	
	// {
	//  "programNick":"nick",
	//  "login": "User",
	//  "password":"Pass"
	// }
	
	ИмяПрограммы = "";
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы(ИмяПрограммы);
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет по коду состояния тип ошибку сервиса.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат "НеизвестныйКлассификаторИлиПрограмма";
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат "НетДоступаКПрограмме";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "НеверныйЛогинИлиПароль";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат "ОшибкаПодключения";
	Иначе
		Возврат "НеизвестнаяОшибка";
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. процедуру
//              ПереопределитьКодОшибкиСервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки)
	
	Если КодОшибки = "НеизвестныйКлассификаторИлиПрограмма" Тогда
		Возврат НСтр("ru = 'Классификатор или программа по идентификатору не обнаружены.'");
	ИначеЕсли КодОшибки = "НетДоступаКПрограмме" Тогда
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Доступ к обновлению классификатора невозможен, так как ваша программа не находится на официальной поддержке'"));
		ЧастиСтрок.Добавить(" ");
		ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("https://portal.1c.ru/support/",,,,"https://portal.1c.ru/support/"));
		Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	ИначеЕсли КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		Возврат НСтр("ru = 'Ошибка авторизации на Портале 1С:ИТС.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность данных авторизации и повторите
			|попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису классификаторов. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом классификаторов.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису классификаторов.
			|Подробнее см. в журнале регистрации.'");
	ИначеЕсли КодОшибки = "НеизвестнаяОшибка" Тогда
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.
			|Подробнее см. в журнале регистрации.'");;
	КонецЕсли;
	
КонецФункции

// Производит удаление актуальных версий классификаторов,
// которые определяются на основании данных ИБ.
//
// Параметры:
//  ДанныеКлассификаторов - ТаблицаЗначений - см. функцию
//                          ОписаниеДанныхКлассификаторов()
//  Идентификаторы - Массив - список загруженных список идентификаторов
//                   классификаторов, которые необходимо обновить.
//
Процедура УдалитьАктуальныеВерсии(ДанныеКлассификаторов, Идентификаторы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегВерсииКлассификаторов.Идентификатор КАК Идентификатор,
		|	РегВерсииКлассификаторов.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.%1 КАК РегВерсииКлассификаторов
		|ГДЕ
		|	РегВерсииКлассификаторов.Идентификатор В(&Идентификаторы)";
	
		
	ИмяТаблицы = ?(ИспользоватьДанныеОбласти(),
		"ВерсииКлассификаторовОбластейДанных",
		"ВерсииКлассификаторов");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы);
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	АктуальныеВерсии = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		
		НайденныеСтроки = ДанныеКлассификаторов.НайтиСтроки(Отбор);
		Для каждого ОписательВерсии Из НайденныеСтроки Цикл
			Если ОписательВерсии.Версия <= ВыборкаДетальныеЗаписи.Версия Тогда
				АктуальныеВерсии.Добавить(ОписательВерсии);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ОписательВерсии Из АктуальныеВерсии Цикл
		ДанныеКлассификаторов.Удалить(ОписательВерсии);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет права доступа на обновление данных классификаторов.
// Обновление может быть недоступно если:
//  - у пользователя нет прав на получение обновлений,
//  - при работе в модели сервиса обновления загружаются из поставляемых данных.
//
Процедура ПроверитьДоступностьОбновления()
	
	Если ЗагрузкаКлассификаторовДоступна() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет права доступа на обновление данных классификаторов.
// Обновление может быть недоступно если:
//  - у пользователя нет прав на получение обновлений,
//  - при работе в модели сервиса обновления загружаются из поставляемых данных.
//
// Возвращаемое значение:
//  Булево - Истина, загрузка классификаторов доступна, если ложь
//           прав на загрузку не достаточно.
//
Функция ЗагрузкаКлассификаторовДоступна()
	
	ОбъектМетаданных = ?(ИспользоватьДанныеОбласти(),
		Метаданные.РегистрыСведений.ВерсииКлассификаторовОбластейДанных,
		Метаданные.РегистрыСведений.ВерсииКлассификаторов);
	
	Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Создает структуру настроек подключения к сервису классификаторов
//
Функция ИнициализироватьПараметрыОбновленияКлассификаторов()
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами());
	ПараметрыЗагрузки.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Возвращает логин и пароль Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    *ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    *ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    *Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о классификаторах
			|загружается из поставляемых данных.'");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для обновления классификаторов необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавлен в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Определяет URL для вызова сервиса классификаторов.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//  Домен     - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаКлассификаторов(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаКлассификаторов(Домен)
		+ "/external-api"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса классификаторов.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаКлассификаторов(Домен)
	
	
	Если Домен = 0 Тогда
		Возврат "classifier-repository.1c.ru";
	Иначе
		Возврат "classifier-repository.1c.eu";
	КонецЕсли;
	
КонецФункции

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
		Возврат СокрЛП(ЧтениеОбъектаJSON.ТекущееЗначение);
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1.
				|Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Определяет доступность использования версий классификаторов
// загруженных в область данных.
//
// Возвращаемое значение:
//  Булево - если Истина, для определения версий необходимо использовать
//           регистр сведений ВерсииКлассификаторовОбластейДанных.
//
Функция ИспользоватьДанныеОбласти()
	
	Возврат (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
КонецФункции

#КонецОбласти

#КонецОбласти
