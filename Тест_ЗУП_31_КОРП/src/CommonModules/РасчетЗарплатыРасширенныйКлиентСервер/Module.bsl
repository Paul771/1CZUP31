
#Область СлужебныйПрограммныйИнтерфейс

// Создает описание расчетного документа.
// Структура с полями, которые содержат имена таблиц данных формы документа
//		НачисленияИмя
//		НачисленияПерерасчетИмя
//		НачисленияПоДоговорамИмя
//		УдержанияИмя
//		НДФЛИмя
//		ВзносыИмя
//		ПогашениеЗаймовИмя.
// 
Функция ОписаниеРасчетногоДокумента() Экспорт
	
	ПоляОписания = 
	"МесяцНачисленияИмя,
	|ПериодДействияВШапке,
	|ДатаНачалаИмя,
	|ДатаОкончанияИмя,
	|НачалоБазовогоПериодаИмя,
	|ОкончаниеБазовогоПериодаИмя,
	|Окончание,
	|РежимНачисления,
	|ВидНачисленияВШапке,
	|ВидНачисленияИмя,
	|ВидУдержанияВШапке,
	|ВидУдержанияИмя,
	|НачисленияИмя,
	|НачисленияПерерасчетИмя,
	|НачисленияПоДоговорамИмя,
	|ПособияИмя,
	|ПособияПерерасчетИмя,
	|ЕстьПрочиеНачисления,
	|ПорядокВыплаты,
	|ПорядокВыплатыИмя,
	|ПланируемаяДатаВыплатыИмя,
	|ИсправленныйДокументИмя,
	|РассчитыватьУдержанияИмя,
	|УдержанияИмя,
	|УдержанияПерерасчетИмя,
	|НДФЛИмя,
	|КорректировкиВыплатыИмя,
	|ВзносыИмя,
	|СторноИмя,
	|ПогашениеЗаймовИмя,
	|ЛьготыИмя,
	|ЛьготыПерерасчетИмя,
	|УправленческиеНачисленияИмя,
	|ПримененныеВычетыИмя,
	|РаспределениеПоТерриториямУсловиямТрудаИмя,
	|ИменаПолейНачисления,
	|ИменаПолейУдержания,
	|НачисленияКоманднаяПанельИмя,
	|НачисленияПоДоговорамКоманднаяПанельИмя,
	|НачисленияПерерасчетКоманднаяПанельИмя,
	|ПособияКоманднаяПанельИмя,
	|ПособияПерерасчетКоманднаяПанельИмя,
	|УдержанияКоманднаяПанельИмя,
	|УдержанияПерерасчетКоманднаяПанельИмя,
	|НДФЛКоманднаяПанельИмя,
	|ВзносыКоманднаяПанельИмя,
	|ПогашениеЗаймовКоманднаяПанельИмя,
	|ЛьготыКоманднаяПанельИмя,
	|ЛьготыПерерасчетКоманднаяПанельИмя,
	|ОбязательныеПоля,
	|ПроверяемыеПериоды,
	|БухучетПервичногоДокументаИмяМетода,
	|ЕстьОплатаПоСреднему,
	|ЕстьОплатаПоСреднемуФСС,
	|СпособыРасчетаСреднегоЗаработка,
	|ЭтоСреднеЧасовойЗаработок,
	|ДатаНачалаСобытияИмя,
	|РегистрацияНачисленийДоступна,
	|ОписанияТаблицДляРаспределенияРезультата,
	|РежимДоначисления,
	|ЭтоНачислениеЗарплаты,
	|УстанавливатьФиксРасчет,
	|НеРаспределятьПоСтатьямФинансирования";
	
	Описание = Новый Структура(ПоляОписания);
	Описание.МесяцНачисленияИмя = "МесяцНачисления";
	Описание.ВидНачисленияВШапке = Ложь;
	Описание.ВидУдержанияВШапке = Ложь;
	Описание.ПериодДействияВШапке = Ложь;
	Описание.ЕстьПрочиеНачисления = Ложь;
	Описание.РегистрацияНачисленийДоступна = Истина;
	Описание.РежимДоначисления = Ложь;
	Описание.ЭтоНачислениеЗарплаты = Ложь;
	
	// Обязательные поля описываются в виде массива описаний.
	// Обязательное поле по умолчанию - Организация.
	Описание.ОбязательныеПоля = Новый Массив;
	Описание.ОбязательныеПоля.Добавить(ОписаниеОбязательногоПоляДокумента("Организация", "Объект.Организация"));
	
	// Зависимости периодов(дата начала периода не может быть больше даты окончания).
	Описание.ПроверяемыеПериоды = Новый Массив;
	
	// Если НеРаспределятьПоСтатьямФинансирования = Истина, то форма "Подробнее о расчете удержаний"
	// не будет дополнятся полями распределения по статьям.
	Описание.НеРаспределятьПоСтатьямФинансирования = Ложь;
	
	// Если порядок выплаты - Неопределено, он не будет учитываться.
	Описание.ПорядокВыплаты = Неопределено;
	Описание.ПорядокВыплатыИмя = "ПорядокВыплаты";
	Описание.ПланируемаяДатаВыплатыИмя = "ПланируемаяДатаВыплаты";
	Описание.ИсправленныйДокументИмя = "ИсправленныйДокумент";
	Описание.ЕстьОплатаПоСреднему = Ложь;
	Описание.ЕстьОплатаПоСреднемуФСС = Ложь;
	Описание.ЭтоСреднеЧасовойЗаработок = Ложь;
	Описание.ДатаНачалаСобытияИмя = "ДатаНачалаСобытия";
	Описание.РаспределениеПоТерриториямУсловиямТрудаИмя = "РаспределениеПоТерриториямУсловиямТруда";
	
	Возврат Описание;
	
КонецФункции

// Описание таблицы, участвующей в расчете зарплаты.
//
// Содержит поля 
//		ИмяТаблицы - имя табличной части объекта.
//		ИмяПоляДляВставкиПоказателей - имя поля после которого вставляются поля значений показателей 
//			при дополнении форм документов, редактирующих начисления.
//		ИмяРеквизитаВидРасчета - имя реквизита с видом расчета.
//		ИмяРеквизитаСотрудник - имя реквизита с сотрудником.
//		НомерТаблицы - номер таблицы в объекте. По умолчанию - 0. 
//			Используется в том случае, если у объекта несколько таблиц с начислениями.
//		ОтображатьПоляОписанияВремени - Булево, истина - отображать поля описаний отработанного/оплаченного времени.
//		УправлятьОтображениемПолейОписанияВремени - Булево, позволяет переключать режимы видимости полей отображения
//		                                            времени.
//
Функция ОписаниеТаблицыРасчета() Экспорт
	
	ОписаниеТаблицы = Новый Структура(
	"ИмяТаблицы,
	|ИмяПоляДляВставкиПоказателей,
	|ИмяРеквизитаВидРасчета,
	|СодержитПолеВидРасчета,
	|СодержитПолеКодДохода,
	|СодержитПолеСотрудник,
	|ИмяРеквизитаСотрудник,
	|НомерТаблицы,
	|ПутьКДанным,
	|ПутьКДаннымПоказателей,
	|ИмяРеквизитаПериод,
	|ПроверяемыеРеквизиты,
	|ИмяРеквизитаДатаНачала,
	|ИмяРеквизитаДатаОкончания,
	|ОтображатьПоляОписанияВремени,
	|ОтображатьПоляНормыВремени,
	|УправлятьОтображениемПолейОписанияВремени,
	|ОтменятьВсеИсправления,
	|ИмяПоляРезультат,
	|ЭтоПерерасчеты,
	|ПутьКДаннымРаспределениеРезультатов,
	|ПутьКДаннымАдресРаспределенияРезультатовВХранилище,
	|ИмяПоляДляВставкиРаспределенияРезультатов,
	|ВставлятьПослеПоля,
	|ИмяРеквизитаИдентификаторСтроки,
	|ОтображатьПоляРаспределенияРезультатов,
	|УстанавливатьИдентификаторСтрокиРаспределенияРезультата,
	|РаспределениеРезультатовЗависимыеТаблицы,
	|ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда,
	|СкрыватьПодразделениеВПростомРежиме,
	|ПоказыватьУсловияТруда,
	|СодержитПолеКодВычета,
	|ИмяРеквизитаКодВычета,
	|ЭтоПлановыеНачисленияУдержания,
	|ИспользоватьВилкуЗначений,
	|ИмяРеквизитаФиксРасчет,
	|ИмяРеквизитаДокументОснование,
	|ИмяРеквизитаОтработаноДней,
	|ИмяРеквизитаОтработаноЧасов,
	|ИмяРеквизитаФиксСторно");
	
	ОписаниеТаблицы.ИмяТаблицы 						= "Начисления";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей 	= "";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета 			= "Начисление";
	ОписаниеТаблицы.СодержитПолеВидРасчета 			= Истина;
	ОписаниеТаблицы.СодержитПолеКодДохода 			= Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник 			= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник 			= "Сотрудник";
	ОписаниеТаблицы.НомерТаблицы 					= 0;
	ОписаниеТаблицы.ПутьКДанным 					= "Объект.Начисления";
	ОписаниеТаблицы.ПутьКДаннымПоказателей 			= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала 			= "ДатаНачала";
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания 		= "ДатаОкончания";
	ОписаниеТаблицы.ИмяРеквизитаПериод 				= "МесяцНачисления";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени 	= Ложь;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени	 	= Ложь;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени = Ложь;
	ОписаниеТаблицы.ОтменятьВсеИсправления 			= Ложь;
	ОписаниеТаблицы.ИмяПоляРезультат 				= "Результат";
	ОписаниеТаблицы.ЭтоПерерасчеты 					= Ложь;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовНачислений";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "";
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов = "";
	// Вставлять поле после указанного в ИмяПоляДляВставкиРаспределенияРезультатов.
	ОписаниеТаблицы.ВставлятьПослеПоля = Ложь;
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиВидаРасчета";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Истина;
	ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Ложь;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы = "";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "";
	ОписаниеТаблицы.СкрыватьПодразделениеВПростомРежиме = Ложь;
	ОписаниеТаблицы.ПоказыватьУсловияТруда 			= Истина;
	ОписаниеТаблицы.СодержитПолеКодВычета 			= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаКодВычета 			= "КодВычета";
	ОписаниеТаблицы.ЭтоПлановыеНачисленияУдержания 	= Ложь;
	ОписаниеТаблицы.ИспользоватьВилкуЗначений 		= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаФиксРасчет 			= "НачисленияФиксРасчет";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 	= "";
	ОписаниеТаблицы.ИмяРеквизитаОтработаноДней		= "ОтработаноДней";
	ОписаниеТаблицы.ИмяРеквизитаОтработаноЧасов		= "ОтработаноЧасов";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция ОписаниеТаблицыПлановыхНачисленийДокумента() Экспорт
	
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "Начисления");
	ОписаниеТаблицы.Вставить("СодержитПолеВидРасчета",	Истина);
	ОписаниеТаблицы.Вставить("ИмяРеквизитаВидРасчета",	"Начисление");
	ОписаниеТаблицы.Вставить("СодержитПолеСотрудник",	Ложь);
	ОписаниеТаблицы.Вставить("ИмяРеквизитаСотрудник",	"Сотрудник");
	ОписаниеТаблицы.Вставить("НомерТаблицы",			0);
	ОписаниеТаблицы.Вставить("СодержитПолеРазмер",		Истина);
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

// Дополняет в описание таблицы, полученной с помощью метода ОписаниеТаблицыРасчета.
//
// Параметры:
//		РедактироватьНачисленияВОтдельныхПолях	- Булево, обслуживание плановых начислений,
//													редактируемых в отдельных полях формы (РК,
//													СН, Надбавка за вредность)
//		СодержитПолеДействие					- Булево
//
Функция ОписаниеТаблицыПлановыхНачислений(РедактироватьНачисленияВОтдельныхПолях = Ложь, СодержитПолеДействие = Ложь) Экспорт
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.Вставить("РедактироватьНачисленияВОтдельныхПолях", РедактироватьНачисленияВОтдельныхПолях);
	ОписаниеТаблицыВидовРасчета.Вставить("СодержитПолеДействие", СодержитПолеДействие);
	ОписаниеТаблицыВидовРасчета.Вставить("ОтмечатьНеЗаполненныеПоказатели", Истина);
	ОписаниеТаблицыВидовРасчета.Вставить("СодержитПолеХарактерНачисления", Ложь);
	ОписаниеТаблицыВидовРасчета.Вставить("ДатаРасчетаИтогаФОТ");
	
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование	= "ДокументОснование";
	ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания	= Истина;
	
	ОписаниеТаблицыВидовРасчета.Вставить("ИмяПоляРезультат", "Размер");
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

Функция ОписаниеТабличнойЧастиКорректировкиВыплаты() Экспорт
	
	ОписаниеТабличнойЧасти = РасчетЗарплатыБазовыйКлиентСервер.ОписаниеТабличнойЧастиКорректировкиВыплаты();
	
	ОписаниеТабличнойЧасти.Вставить("ИспользуетсяФиксРасчет", Ложь);
	
	Возврат ОписаниеТабличнойЧасти;
	
КонецФункции

Функция ОписаниеТаблицыКорректировкиВыплаты() Экспорт
	
	ОписаниеТаблицы = ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "КорректировкиВыплаты";
	ОписаниеТаблицы.ПутьКДанным = "Объект.КорректировкиВыплаты";
	ОписаниеТаблицы.ИмяПоляРезультат = "КорректировкаВыплаты";
	ОписаниеТаблицы.НомерТаблицы = РасчетЗарплатыБазовыйКлиентСервер.НомерТаблицыКорректировкиВыплаты();
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыКорректировкиВыплаты() Экспорт
	
	Описание = ОписаниеТаблицыРасчета();
	ЗаполнитьЗначенияСвойств(Описание, РасчетЗарплатыБазовыйКлиентСервер.ФормаПодробнееОРасчетеНДФЛОписаниеТаблицыКорректировкиВыплаты());
	
	Возврат Описание;
	
КонецФункции

Функция ПараметрыПолученияДанныхЗаполненияДокумента() Экспорт
	
	СтруктураПараметров = Новый Структура(
	"Организация, 
	|ДокументСсылка, 
	|Подразделение, 
	|МесяцНачисления, 
	|Сотрудники,
	|ОкончаниеПериода, 
	|РежимНачисления, 
	|ПорядокВыплаты, 
	|ДатаВыплаты, 
	|ОписаниеДокумента, 
	|СодержимоеДокумента, 
	|СохранятьИсправления,
	|КонтролируемыеПоля,
	|РежимПересчетаНДФЛ,
	|РежимПересчетаВзносов,
	|РаспределениеРезультатов,
	|ДанныеРаспределенияПоТерриториямУсловиямТруда,
	|СотрудникиПериодДействияПерерасчет,
	|ИспользоватьВоеннуюСлужбу,
	|НачислениеЗарплатыВоеннослужащим,
	|ОкончательныйРасчетНДФЛ,
	|НачальныеПозицииВставки,
	|ПроверятьРегистрациюПроцентаЕНВД");
	
	СтруктураПараметров.РежимПересчетаНДФЛ = Ложь;
	СтруктураПараметров.РежимПересчетаВзносов = Ложь;
	СтруктураПараметров.ИспользоватьВоеннуюСлужбу = Ложь;
	СтруктураПараметров.НачислениеЗарплатыВоеннослужащим = Ложь;
	СтруктураПараметров.ОкончательныйРасчетНДФЛ = Ложь;
	СтруктураПараметров.НачальныеПозицииВставки = Новый Соответствие;
	СтруктураПараметров.ПроверятьРегистрациюПроцентаЕНВД = Ложь;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура устанавливает планируемую дату выплаты зарплаты в зависимости от выбранного пользователем порядка выплаты.
//
// Параметры:
//  Форма - Форма документа, в котором устанавливается ПланируемаяДатаВыплаты.
//  ОписаниеДокумента - результат функции ОписаниеДокумента().
//
Процедура УстановитьПланируемуюДатуВыплаты(Форма, ОписаниеДокумента) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 
	
	МесяцНачисления = Форма.Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	
	Настройки = Форма.НастройкиДатВыплаты;
	
	ДлинаСуток = 86400;
	Если Форма.Объект[ОписаниеДокумента.ПорядокВыплатыИмя] = Форма.ХарактерВыплатыЗарплата Тогда
		Форма.Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя] = ПланируемаяДатаВыплатыЗарплатыПоНастройкам(МесяцНачисления, Настройки);
	ИначеЕсли Форма.Объект[ОписаниеДокумента.ПорядокВыплатыИмя] = Форма.ХарактерВыплатыАванс Тогда
		Форма.Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя] = НачалоМесяца(МесяцНачисления) + (Настройки.ДатаВыплатыАвансаНеПозжеЧем - 1) * ДлинаСуток;
	Иначе
		Форма.Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя] = НачалоМесяца(МесяцНачисления) + (Настройки.ДатаВыплатыМежрасчетаНеПозжеЧем - 1) * ДлинаСуток;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает планируемую дату выплаты зарплаты.
//
// Параметры:
//	Организация		- СправочникСсылка.Организация
//  МесяцНачисления - Дата - месяц начисления зарплаты.
//
// Возвращаемое значение:
//  ПланируемаяДатаВыплатыЗарплаты - Дата.
//
Функция ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления) Экспорт
	
	Настройки = РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Организация);
	Возврат ПланируемаяДатаВыплатыЗарплатыПоНастройкам(МесяцНачисления, Настройки);
	
КонецФункции

// Возвращает планируемую дату выплаты зарплаты.
//
// Параметры:
//	Организация	- СправочникСсылка.Организация
//  Настройки	- Структура
//					* ВыплачиватьЗарплатуВПоследнийДеньМесяца	- Булево
//					* ДатаВыплатыЗарплатыНеПозжеЧем				- Число
//
// Возвращаемое значение:
//  ПланируемаяДатаВыплатыЗарплаты - Дата.
//
Функция ПланируемаяДатаВыплатыЗарплатыПоНастройкам(МесяцНачисления, Настройки) Экспорт
	
	Если Настройки.ВыплачиватьЗарплатуВПоследнийДеньМесяца Тогда
		ДатаВыплаты = НачалоДня(КонецМесяца(МесяцНачисления));
	Иначе
		СледующийМесяц = ДобавитьМесяц(МесяцНачисления, 1);
		ДатаВыплаты = Дата(Год(СледующийМесяц), Месяц(СледующийМесяц), 
			Мин(Настройки.ДатаВыплатыЗарплатыНеПозжеЧем, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(СледующийМесяц)));
	КонецЕсли;
	
	Возврат ДатаВыплаты;
	
КонецФункции

// Определяет базовый период начисления в зависимости от настройки периода 
// базовых начислений и текущего месяца.
//
// Параметры:
//	МесяцНачисления - дата, день в течение месяца, за который выполняются начисления,
//	ПериодРасчетаБазовыхНачислений - ПеречислениеСсылка.ПериодыРасчетаБазовыхНачислений,
//	КоличествоМесяцевБазовогоПериода - число, необязательный, количество месяцев - длительность базового периода.
//
// Возвращаемое значение - СтандартныйПериод.
//
Функция БазовыйПериодНачисления(МесяцНачисления, ПериодРасчетаБазовыхНачислений, КоличествоМесяцевБазовогоПериода = Неопределено, СдвигБазовогоПериода = Неопределено) Экспорт
	
	БазовыйПериод = Новый СтандартныйПериод;
	
	Если ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц") Тогда
		БазовыйПериод.ДатаНачала = НачалоМесяца(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецМесяца(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц") Тогда
		БазовыйПериод.ДатаНачала = НачалоМесяца(ДобавитьМесяц(МесяцНачисления, -1));
		БазовыйПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(МесяцНачисления, -1));
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал") Тогда
		БазовыйПериод.ДатаНачала = НачалоКвартала(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецКвартала(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал") Тогда
		БазовыйПериод.ДатаНачала = НачалоКвартала(ДобавитьМесяц(МесяцНачисления, -3));
		БазовыйПериод.ДатаОкончания = КонецКвартала(ДобавитьМесяц(МесяцНачисления, -3));
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод") Тогда
		БазовыйПериод.ДатаНачала = НачалоГода(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецГода(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод") Тогда
		БазовыйПериод.ДатаНачала = НачалоГода(ДобавитьМесяц(МесяцНачисления, -12));
		БазовыйПериод.ДатаОкончания = КонецГода(ДобавитьМесяц(МесяцНачисления, -12));
	ИначеЕсли ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев") Тогда
		Если КоличествоМесяцевБазовогоПериода = Неопределено Тогда
			КоличествоМесяцевБазовогоПериода = 1;
		КонецЕсли;
		Если СдвигБазовогоПериода = Неопределено Тогда
			СдвигБазовогоПериода = 1;
		КонецЕсли;
		БазовыйПериод.ДатаНачала = ДобавитьМесяц(НачалоМесяца(МесяцНачисления), - КоличествоМесяцевБазовогоПериода - СдвигБазовогоПериода + 1);
		БазовыйПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(МесяцНачисления, - СдвигБазовогоПериода));
	КонецЕсли;
	
	Возврат БазовыйПериод;
	
КонецФункции

// Выбирает из двух таблиц, ту, которая должна стать причиной последовательного пересчета документа.
// Сравнивает таблицы между собой и возвращает более "влиятельную" с точки зрения последовательности расчета.
// Например, между "Удержания" и "Начисления" будут выбраны начисления, т.к. результат их расчета влияет на удержания.
//
// Параметры:
//	Таблица1, Таблица2 - имена таблиц, из которых нужно выбрать ведущую.
//
Функция ВедущаяТаблицаРасчета(Таблица1, Таблица2) Экспорт
	
	// Приоритет пересчета:
	// НачисленияПерерасчет
	// Начисления, Начисления по договорам, Пособия.
	// Взносы
	// Удержания (ДСВ, НПФ)
	// НДФЛ
	// Удержания (по исп. документам и остальные).
	
	Если Не ЗначениеЗаполнено(Таблица1) Тогда
		Возврат Таблица2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Таблица2) Тогда
		Возврат Таблица1;
	КонецЕсли;
	
	Если Таблица1 = Таблица2 Тогда
		Возврат Таблица1;
	КонецЕсли;
	
	Если Таблица1 = "НачисленияПерерасчет" Или Таблица2 = "НачисленияПерерасчет" Тогда
		// Это самая "влиятельная" таблица, если ее пересчитывать, то остальные зависимые пересчитаются.
		Возврат "НачисленияПерерасчет";
	КонецЕсли;
	
	// Если текущая причина пересчета - одна из ведущих таблиц, то.
	ВедущиеТаблицы = ВедущиеТаблицы();
	Если ВедущиеТаблицы.Найти(Таблица1) <> Неопределено Тогда
		Возврат Таблица1;
	КонецЕсли;
	Если ВедущиеТаблицы.Найти(Таблица2) <> Неопределено Тогда
		Возврат Таблица2;
	КонецЕсли;
	
	// Если текущая причина пересчета не относится к ведущим таблицам, 
	// то возвращаем имя измененной таблицы, только если она "влиятельнее".
	
	ЗависимыеТаблицы = Новый Массив;
	ЗависимыеТаблицы.Добавить("Взносы");
	ЗависимыеТаблицы.Добавить("Удержания");
	ЗависимыеТаблицы.Добавить("НДФЛ");
	ЗависимыеТаблицы.Добавить("ПогашениеЗаймов");
	
	Если ЗависимыеТаблицы.Найти(Таблица2) < ЗависимыеТаблицы.Найти(Таблица1) Тогда
		Возврат Таблица2;
	Иначе
		Возврат Таблица1;
	КонецЕсли;
	
КонецФункции

Функция ВедущиеТаблицы() Экспорт
	
	ВедущиеТаблицы = Новый Массив;
	ВедущиеТаблицы.Добавить("Начисления");
	ВедущиеТаблицы.Добавить("НачисленияПоДоговорам");
	ВедущиеТаблицы.Добавить("Пособия");
	ВедущиеТаблицы.Добавить("Льготы");
	
	Возврат ВедущиеТаблицы;
	
КонецФункции

#Область ОбслуживаниеПолейАванса

Функция РазмерностьАванса(СпособРасчетаАванса) Экспорт
	
	РазмерностьАванса = Неопределено;
	Если СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца") Тогда
		РазмерностьАванса = ""
	Иначе
		РазмерностьАванса = РасчетЗарплатыБазовыйКлиентСервер.РазмерностьАванса(СпособРасчетаАванса);
	КонецЕсли;
	
	Возврат РазмерностьАванса
	
КонецФункции

Функция ПредставлениеСпособаРасчетаАванса(СпособРасчетаАванса, СжатыйФормат) Экспорт
		
	СтрокаПодстановки = "";
	
	Если СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца") Тогда
		СтрокаПодстановки = ?(СжатыйФормат, "", НСтр("ru = 'Ранее получал аванс %1'"));
	Иначе
		СтрокаПодстановки = РасчетЗарплатыБазовыйКлиентСервер.ПредставлениеСпособаРасчетаАванса(СпособРасчетаАванса, СжатыйФормат);
	КонецЕсли;
			
	Возврат СтрокаПодстановки;
		
КонецФункции

Функция ИменаСпособовРасчетаАванса() Экспорт
	
	ИменаСпособовРасчетаАванса = РасчетЗарплатыБазовыйКлиентСервер.ИменаСпособовРасчетаАванса();
	ИменаСпособовРасчетаАванса.Добавить("РасчетомЗаПервуюПоловинуМесяца");
	
	Возврат ИменаСпособовРасчетаАванса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеОбязательногоПоляДокумента(ИмяПоля, ПутьКРеквизиту) Экспорт
	Возврат Новый Структура("ИмяПоля, ПутьКРеквизиту", ИмяПоля, ПутьКРеквизиту);
КонецФункции

Функция ОписаниеПроверяемогоПериода(ИмяПоляНачало, ПутьКРеквизитуНачало, ИмяПоляОкончание, ПутьКРеквизитуОкончание) Экспорт
	Возврат Новый Структура("ИмяПоляНачало, ПутьКРеквизитуНачало, ИмяПоляОкончание, ПутьКРеквизитуОкончание", ИмяПоляНачало, ПутьКРеквизитуНачало, ИмяПоляОкончание, ПутьКРеквизитуОкончание);
КонецФункции

Процедура ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, ВидимостьПолейПодробно, ОписаниеТаблицыВидовРасчета) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Подробно",
		"Пометка",
		ВидимостьПолейПодробно);
	
	ДокументыВыполненияНачисленийУстановитьВидимостьПолейОтображенияВремени(Форма, ОписаниеТаблицыВидовРасчета, ВидимостьПолейПодробно);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьГруппыПоказателей(Форма, ОписаниеТаблицыВидовРасчета.ИмяТаблицы, ВидимостьПолейПодробно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "ПериодДействия",
		"Видимость",
		ВидимостьПолейПодробно);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Задолженность",
		"Видимость",
		ВидимостьПолейПодробно);
	
	Если ОписаниеТаблицыВидовРасчета.СкрыватьПодразделениеВПростомРежиме Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Подразделение",
			"Видимость",
			ВидимостьПолейПодробно);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийУстановитьВидимостьПолейОтображенияВремени(Форма, ОписаниеТаблицы, Видимость = Неопределено) Экспорт
	
	Если Не ОписаниеТаблицы.ОтображатьПоляОписанияВремени Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	
	// Группа Оплачено.
	ВидимостьОплачено = Видимость;
	Если ВидимостьОплачено = Неопределено Тогда
		ВидимостьОплачено = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
			Форма.Элементы, 
			ИмяТаблицы + "ГруппаОтработаноОплачено",
			"Видимость");
	КонецЕсли;
	
	УточнитьВидимостьОплаченногоВремениПоВидуРасчета(ВидимостьОплачено, Форма, ОписаниеТаблицы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяТаблицы + "ГруппаОтработаноОплачено",
		"Видимость",
		ВидимостьОплачено);
	
	// Группа Норма.
	ВидимостьНормы = Видимость;
	Если ВидимостьНормы = Неопределено Тогда
		ВидимостьНормы = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(
			Форма.Элементы, 
			ИмяТаблицы + "ГруппаНормаВремени",
			"Видимость");
	КонецЕсли;
	
	УточнитьВидимостьНормыВремениПоВидуРасчета(ВидимостьНормы, Форма, ОписаниеТаблицы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяТаблицы + "ГруппаНормаВремени",
		"Видимость",
		ВидимостьНормы);
		
КонецПроцедуры

Процедура УточнитьВидимостьОплаченногоВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы) Экспорт
	
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма.Объект, ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
		ВидимостьПолей = Ложь;
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		ИнфоВидРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	#Иначе
		ИнфоВидРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	#КонецЕсли
	
	Если Не ИнфоВидРасчета.ТребуетсяРасчетВремени Тогда
		ВидимостьПолей = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьВидимостьНормыВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы) Экспорт
	
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма.Объект, ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
		ВидимостьПолей = Ложь;
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		ИнфоВидРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	#Иначе
		ИнфоВидРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	#КонецЕсли
	
	Если Не ИнфоВидРасчета.ТребуетсяРасчетНормыВремени Тогда
		ВидимостьПолей = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив видов расчета из коллекции.
//
Функция ВидыРасчетаКоллекции(КоллекцияСтрок, ИмяКолонки = "ВидРасчета") Экспорт 
	
	МассивВидовРасчета = Новый Массив;
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Значение = СтрокаКоллекции[ИмяКолонки];
		МассивВидовРасчета.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивВидовРасчета;
	
КонецФункции

// Определяет признак "разовости" начисления за месяц.
//
Функция НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект, ЕстьПоказателиУчетаВремени, ЕстьПоказательРасчетнаяБаза, ЕстьОперативныеПоказатели, ЕстьПоказательОтработаноСмен = Ложь) Экспорт 
	
	// Для установки флага НачисляетсяВЦеломЗаМесяц применяются следующие правила:
	// - если нет показателей времени
	// - если не зависит от расчетной базы или расчетная база определяется Не за текущий месяц
	// - если способ выполнения зависит от одного конкретного значения в месяце (показателя или вида времени)
	// - если является дополнительно оплачиваемым временем.
	
	Если НачислениеОбъект.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоУправленческогоУчета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СпособыНачисленийВЦеломЗаМесяц = Новый Массив;
	СпособыНачисленийВЦеломЗаМесяц.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете"));
	СпособыНачисленийВЦеломЗаМесяц.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете"));
	СпособыНачисленийВЦеломЗаМесяц.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПустаяСсылка"));
	
	Если Не НачислениеОбъект.Рассчитывается Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачислениеОбъект.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПоказателиУчетаВремени Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьПоказательОтработаноСмен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьОперативныеПоказатели Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьПоказательРасчетнаяБаза Тогда
		Возврат НачислениеОбъект.ПериодРасчетаБазовыхНачислений <> ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц");
	КонецЕсли;
		
	Если СпособыНачисленийВЦеломЗаМесяц.Найти(НачислениеОбъект.СпособВыполненияНачисления) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат НачислениеОбъект.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы");
	
КонецФункции

// Определяет признак "разовости" удержания за месяц.
//
Функция УдержаниеВыполняетсяВЦеломЗаМесяц(УдержаниеОбъект, ЕстьПоказательРасчетнаяБаза, ЕстьОперативныеПоказатели, ЕстьПоказательРасчетнаяБазаСтраховыеВзносы, ЕстьПоказательРасчетнаяБазаИсполнительногоЛиста) Экспорт
	
	Если ЕстьПоказательРасчетнаяБазаСтраховыеВзносы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПоказательРасчетнаяБаза Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьПоказательРасчетнаяБазаИсполнительногоЛиста Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьОперативныеПоказатели Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Если УдержаниеОбъект.КатегорияУдержания = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет возможность заполнения и пересчета формы в зависимости от заполнения обязательных полей.
//
// Параметры:
//	- Форма	- управляемая форма документа.
//	- ОписаниеДокумента - описание документа с перечнем обязательных для заполнения полей.
//	- СообщатьПользователю - Булево - нужно выводить сообщение о невозможности заполнить форму.
//
// Возвращаемое значение - результат проверки формы.
//
Функция ФормаДокументаГотоваДляРасчетаЗарплаты(Форма, ОписаниеДокумента, СообщатьПользователю = Истина) Экспорт
	
	Отказ = Ложь;
	Для Каждого ОписаниеПоля Из ОписаниеДокумента.ОбязательныеПоля Цикл
		ЗначениеРеквизита = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПоля.ПутьКРеквизиту);
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Отказ = Истина;
			Если СообщатьПользователю Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено'"), ОписаниеПоля.ИмяПоля);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ОписаниеПоля.ПутьКРеквизиту);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеПериода Из ОписаниеДокумента.ПроверяемыеПериоды Цикл
		ЗначениеРеквизитаНачало 	= ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПериода.ПутьКРеквизитуНачало);
		ЗначениеРеквизитаОкончание 	= ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПериода.ПутьКРеквизитуОкончание);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаНачало) 
			И ЗначениеЗаполнено(ЗначениеРеквизитаОкончание) 
			И ЗначениеРеквизитаНачало > ЗначениеРеквизитаОкончание Тогда
			Отказ = Истина;
			Если СообщатьПользователю Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" не может быть больше ""%2""'"), ОписаниеПериода.ИмяПоляНачало, ОписаниеПериода.ИмяПоляОкончание);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ОписаниеПериода.ПутьКРеквизитуНачало);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

// Выполняет удаление строк из всех таблиц документа по описанию.
//
Процедура ОчиститьТаблицыДокумента(Форма, ОписаниеДокумента) Экспорт
	
	ИменаПолейИменТаблиц = Новый Массив;
	ИменаПолейИменТаблиц.Добавить("НачисленияИмя");
	ИменаПолейИменТаблиц.Добавить("НачисленияПерерасчетИмя");
	ИменаПолейИменТаблиц.Добавить("НачисленияПоДоговорамИмя");
	ИменаПолейИменТаблиц.Добавить("ПособияИмя");
	ИменаПолейИменТаблиц.Добавить("УдержанияИмя");
	ИменаПолейИменТаблиц.Добавить("НДФЛИмя");
	ИменаПолейИменТаблиц.Добавить("ВзносыИмя");
	ИменаПолейИменТаблиц.Добавить("СторноИмя");
	ИменаПолейИменТаблиц.Добавить("ПогашениеЗаймовИмя");
	ИменаПолейИменТаблиц.Добавить("ПримененныеВычетыИмя");
	ИменаПолейИменТаблиц.Добавить("ЛьготыИмя");
	ИменаПолейИменТаблиц.Добавить("ЛьготыПерерасчетИмя");
	ИменаПолейИменТаблиц.Добавить("УдержанияПерерасчетИмя");
	
	Для Каждого ИмяПоляИмениТаблицы Из ИменаПолейИменТаблиц Цикл
		Если ОписаниеДокумента[ИмяПоляИмениТаблицы] <> Неопределено Тогда
			Форма.Объект[ОписаниеДокумента[ИмяПоляИмениТаблицы]].Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет замену в формуле одного идентификатора показателя на другой.
//
Функция ЗаменитьПоказательФормулыРасчета(ФормулаРасчета, ЗаменяемыйПоказатель, ЗаменяющийПоказатель) Экспорт
	
	НоваяФормула = "";
	РазмерТекста = СтрДлина(ФормулаРасчета);
	
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(ФормулаРасчета, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слово = Сред(ФормулаРасчета, НачалоСлова, Позиция - НачалоСлова);
				Если Слово = ЗаменяемыйПоказатель Тогда
					НоваяФормула = НоваяФормула + ЗаменяющийПоказатель;
				Иначе
					НоваяФормула = НоваяФормула + Слово;
				КонецЕсли;
			КонецЕсли;
			НоваяФормула = НоваяФормула + Сред(ФормулаРасчета, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(ФормулаРасчета, НачалоСлова, Позиция - НачалоСлова);
		Если Слово = ЗаменяемыйПоказатель Тогда
			НоваяФормула = НоваяФормула + ЗаменяющийПоказатель;
		Иначе
			НоваяФормула = НоваяФормула + Слово;
		КонецЕсли;
	КонецЕсли;

	Возврат НоваяФормула;
	
КонецФункции

// Функция позволяет заполнить признак ИспользуетФормулу (вторичные данные) вида расчета.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний.
//
// Возвращаемое значение - булево, Истина - если способ расчета - произвольная формула.
//
Функция СпособРасчетаИспользуетФормулу(СпособРасчета) Экспорт
	
	Возврат СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ПроизвольнаяФормула")
		Или СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаУдержаний.ПроизвольнаяФормула");
	
КонецФункции

Функция ОписаниеТаблицыПоказателей() Экспорт 

	ОписаниеТаблицы = Новый Структура(
	"ИмяТаблицы,
	|СодержитПолеСотрудник,
	|ИмяРеквизитаСотрудник,
	|ПутьКДанным,
	|ИмяРеквизитаИдентификаторСтроки,
	|ИмяРеквизитаПредставлениеРабочегоМеста,
	|ИмяПоляДляВставкиПредставленияРабочегоМеста");
	
	ОписаниеТаблицы.ИмяТаблицы 									= "Показатели";
	ОписаниеТаблицы.СодержитПолеСотрудник 						= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник 						= "РабочееМесто";
	ОписаниеТаблицы.ПутьКДанным 								= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки 			= "ИдентификаторСтрокиВидаРасчета";
	ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста 		= "ПредставлениеРабочегоМеста";
	ОписаниеТаблицы.ИмяПоляДляВставкиПредставленияРабочегоМеста = "ПоказателиПоказатель";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

// Функция проверяет возможность фиксацию строк в таблице.
//
// Параметры:
//	- Форма	- управляемая форма документа.
//	- ОписаниеТаблицы - описание таблицы документа.
//
// Возвращаемое значение - результат проверки таблицы. Если хоть в одной строке есть признак Фикс - возвращается Истина.
//
Функция ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицы, ИсправленныйДокументЗаполнен = Ложь) Экспорт
	ЕстьИсправлениеТабличныхЧастей = Ложь;
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		КонтролируемыеПоляФормы = Форма.ПолучитьКонтролируемыеПоля();
		КонтролируемыеПоляТаблицы = Неопределено;
		
		Если КонтролируемыеПоляФормы.Свойство(ОписаниеТаблицы.ИмяТаблицы, КонтролируемыеПоляТаблицы) Тогда
			ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным); 
			
			ЕстьПризнакСторно = ОписаниеТаблицы.ЭтоПерерасчеты;
			
			Для каждого Строка Из ДанныеТаблицы Цикл
				Для Каждого ЭлементСтруктуры Из КонтролируемыеПоляТаблицы Цикл
					Фиксирован = Ложь;
					
					Если Строка[ЭлементСтруктуры.Ключ] Тогда
						Фиксирован = Истина;
					КонецЕсли;
					
					Если Фиксирован И ЕстьПризнакСторно Тогда
						Фиксирован = НЕ Строка["ФиксСторно"];
					КонецЕсли;
					
					Если Фиксирован Тогда
						ЕстьИсправлениеТабличныхЧастей = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьИсправлениеТабличныхЧастей Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ЕстьИсправлениеТабличныхЧастей;
КонецФункции 

Функция ПараметрыРедактированияФормулыРасчета() Экспорт
	
	Параметры = Новый Структура;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыОткрытияФормыИсправленияСвязейНачислений() Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДобавляемыеНачисленияПриоритетВыше");
	ПараметрыФормы.Вставить("УдаляемыеНачисленияПриоритетВыше");
	ПараметрыФормы.Вставить("ДобавляемыеНачисленияПриоритетНиже");
	ПараметрыФормы.Вставить("УдаляемыеНачисленияПриоритетНиже");
	
	Возврат ПараметрыФормы;
	
КонецФункции

#Область ПроверкаПериодаДействияВКоллекцияхНачисленийИУдержаний

// Определяет правильность заполнения периода действия.
//
// Параметры:
//									
//       ОписаниеВидаРасчета - Структура, описание проверяемого вида расчета.
//
//       ДатаНачала     - Дата, начало периода действия.
//
//       ДатаОкончания     - Дата, окончание периода действия.
//
// Возвращаемое значение:
//
//  Структура(все поля - булево) - ПериодНачисленияЗаполненПравильно, ПериодБольшеМесяца, НачалоБольшеОкончания.
//
Функция ПериодНачисленияЗаполненПравильно(ОписаниеВидаРасчета, ДатаНачала, ДатаОкончания) Экспорт
	
	РезультатПроверки = Новый Структура("ПериодНачисленияЗаполненПравильно, ПериодБольшеМесяца, НачалоБольшеОкончания", Истина, Ложь, Ложь);
	
	Если ОписаниеВидаРасчета.ЭтоНачисление Тогда
		ВидаРасчетаИспользуетПериодДействия = ОписаниеВидаРасчета.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия");
	Иначе
		ВидаРасчетаИспользуетПериодДействия = ОписаниеВидаРасчета.СпособВыполненияУдержания <> ПредопределенноеЗначение("Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете");
	КонецЕсли;
	
	Если ВидаРасчетаИспользуетПериодДействия Тогда
		Если ДатаОкончания > КонецМесяца(ДатаНачала) Тогда
			РезультатПроверки.ПериодНачисленияЗаполненПравильно = Ложь;
			РезультатПроверки.ПериодБольшеМесяца = Истина;
		ИначеЕсли ДатаНачала > ДатаОкончания Тогда
			РезультатПроверки.ПериодНачисленияЗаполненПравильно = Ложь;
			РезультатПроверки.НачалоБольшеОкончания = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции	

// Проверяет корректность заполнения строки с точки зрения возможности выполнения расчета.
//
Функция СтрокаЗаполненаДляРасчета(Форма, ДанныеСтроки, ОписаниеТаблицы) Экспорт
	
	Если ОписаниеТаблицы.ПроверяемыеРеквизиты <> Неопределено Тогда
		
		// Если перечислены проверяемые реквизиты, то проверяем только их.
		МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПроверяемыеРеквизиты);
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			Если Не ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизита]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Сотрудник
	Сотрудник = ?(ОписаниеТаблицы.СодержитПолеСотрудник, 
		ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], 
		Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаСотрудник]);
		
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Вид расчета
	ВидРасчета = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, 
		ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], 
		Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
		
	Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Период 
	Если ОписаниеТаблицы.ИмяРеквизитаДатаНачала = Неопределено Тогда
		Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]) Тогда
				Возврат Ложь;
			КонецЕсли;
			Если ДанныеСтроки.Свойство("ПериодДействия") И Не ЗначениеЗаполнено(ДанныеСтроки.ПериодДействия) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаДатаНачала]) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ОписаниеТаблицы.ИмяРеквизитаДатаОкончания <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания]) Тогда
				Возврат Ложь;
			КонецЕсли;
			#Если Клиент Тогда
				ОписаниеВидаРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			#Иначе
				ОписаниеВидаРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			#КонецЕсли
			РезультатПроверки = РасчетЗарплатыРасширенныйКлиентСервер.ПериодНачисленияЗаполненПравильно(
				ОписаниеВидаРасчета, ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаДатаНачала], ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания]);
			Если Не РезультатПроверки.ПериодНачисленияЗаполненПравильно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Ошибок заполнения не обнаружено.
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
