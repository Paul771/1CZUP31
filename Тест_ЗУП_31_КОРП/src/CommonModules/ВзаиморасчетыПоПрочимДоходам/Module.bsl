#Область ПрограммныйИнтерфейс

// Процедура регистрирует факт начисления и удержания с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений, коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		СпособРасчетов    - ПеречисленияСсылка.СпособыРасчетовСФизическимиЛицами
//		Начисления        - ТаблицаЗначений - соответствует структуре регистра накопления НачисленияУдержанияПоКонтрагентамАкционерам.
//		Удержания         - ТаблицаЗначений - соответствует структуре регистра накопления НачисленияУдержанияПоКонтрагентамАкционерам.
//		ЗаписыватьДвижения- Булево, признак необходимости записи движений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, СпособРасчетов, Начисления = Неопределено, Удержания = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	КолонкиСуммирования = "СуммаВзаиморасчетов";
	КолонкиГруппировок = "ФизическоеЛицо,СтатьяФинансирования,СтатьяРасходов,Сотрудник";
	
	УточнятьСпособРасчетов = (СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды);
	
	Если Начисления <> Неопределено Тогда
		
		ТаблицаНачислений = Начисления.Скопировать();
		ТаблицаНачислений.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
		ТаблицаНачислений.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		
		Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
			НоваяСтрока = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			Если УточнятьСпособРасчетов И ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
				НоваяСтрока.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам;
			Иначе
				НоваяСтрока.СпособРасчетов = СпособРасчетов;
			КонецЕсли;
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ДокументОснование 	= Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Отбор.Регистратор.Значение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		КонецЦикла;
		
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Истина;
		
	КонецЕсли;
	 
	Если Удержания <> Неопределено Тогда
		
		ТаблицаУдержаний = Удержания.Скопировать();
		ТаблицаУдержаний.Колонки.Сумма.Имя = "СуммаВзаиморасчетов";
		ТаблицаУдержаний.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		
		Для каждого СтрокаТЗ Из ТаблицаУдержаний Цикл
			НоваяСтрока = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			Если УточнятьСпособРасчетов И ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
				НоваяСтрока.СпособРасчетов = Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам;
			Иначе
				НоваяСтрока.СпособРасчетов = СпособРасчетов;
			КонецЕсли;
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.СуммаВзаиморасчетов = - НоваяСтрока.СуммаВзаиморасчетов;
			НоваяСтрока.ДокументОснование 	= Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Отбор.Регистратор.Значение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЦикла;
		
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записать();
		Движения.ВзаиморасчетыСКонтрагентамиАкционерами.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает структуру с настройками подсистемы
//
Функция НастройкиВзаиморасчетовПоПрочимДоходам() Экспорт

	Настройки = РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							Настройки, Метаданные.РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам);
							
	Возврат СтруктураНастроек;  

КонецФункции

Функция ИспользуютсяВзаиморасчетыПоПрочимДоходам() Экспорт

	Возврат НастройкиВзаиморасчетовПоПрочимДоходам().ИспользоватьВзаиморасчетыПоПрочимДоходам;	

КонецФункции 

Функция ВедомостьМожноЗаполнитьВыплаты(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не задан период регистрации'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru='Не задана дата документа'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты'"));
	
	Если ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях") Тогда
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ведомость.Метаданные().Реквизиты.СтатьяФинансирования) Тогда
			ПравилаПроверки.Вставить("СтатьяФинансирования", НСтр("ru='Не указана статья финансирования'"));
		КонецЕсли;
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Ведомость.Метаданные().Реквизиты.СтатьяРасходов) Тогда
			ПравилаПроверки.Вставить("СтатьяРасходов",       НСтр("ru='Не указана статья расходов'"));
		КонецЕсли;
	КонецЕсли;	
	
	МожноЗаполнить = ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина);

	Возврат МожноЗаполнить;

КонецФункции

Процедура ВедомостьЗаполнитьВыплаты(Ведомость) Экспорт
	
	Запрос = ЗапросОстатковВыплат(Ведомость);
	
	// удалим отбор по физическим лицам
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Взаиморасчеты.ФизическоеЛицо В(&ФизическиеЛица)","");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ФизическоеЛицо В (&ФизическиеЛица)","");
	
	Ведомость.ЗаполнитьПоТаблицеВыплат(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

Процедура ВедомостьДополнитьВыплаты(Ведомость, ФизическиеЛица) Экспорт
	
	Запрос = ЗапросОстатковВыплат(Ведомость);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	ТаблицаВыплат = Запрос.Выполнить().Выгрузить();
	ФизицескиеЛицаСОстатками = ТаблицаВыплат.ВыгрузитьКолонку("ФизическоеЛицо");
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Если ФизицескиеЛицаСОстатками.Найти(ФизическоеЛицо) = Неопределено Тогда
			НоваяСтрока = ТаблицаВыплат.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	Ведомость.ДополнитьПоТаблицеВыплат(ТаблицаВыплат);
		
КонецПроцедуры

Функция ЗапросОстатковВыплат(Ведомость)

	СпособВыплаты = Ведомость.СпособВыплаты;
	Основания     = Ведомость.Основания.ВыгрузитьКолонку("Документ");
	
	СпособРасчетов = СоответствиеСпособВыплатыСпособРасчетов()[Ведомость.СпособВыплаты];
	ИмяВидаДокумента = ИменаВидовДокументовВзаиморасчетыСКонтрагентамиАкционерами()[Ведомость.СпособВыплаты];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецМесяца(Ведомость.ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Ведомость.Организация);
	Запрос.УстановитьПараметр("СпособРасчетов", СпособРасчетов);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ведомость.Ссылка);
		 
	Запрос.Текст = ТекстЗапросаОстаткиВзаиморасчетовСКонтрагентамиАкционерами();
	
	Если Основания.Количество() > 0 Тогда
		// указаны документы-основания, делаем отбор по ним
		Запрос.УстановитьПараметр("Основания", Основания); 
	Иначе
		// не указаны документы-основания, изменяем на отбор по виду документа
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ДокументОснование В (&Основания)","И ДокументОснование ССЫЛКА Документ." + ИмяВидаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Взаиморасчеты.ДокументОснование В(&Основания)","И Взаиморасчеты.ДокументОснование ССЫЛКА Документ." + ИмяВидаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ведомость.СтатьяФинансирования) Тогда
		Запрос.УстановитьПараметр("СтатьяФинансирования", Ведомость.СтатьяФинансирования);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Остатки.СтатьяФинансирования = &СтатьяФинансирования", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ведомость.СтатьяРасходов) Тогда
		Запрос.УстановитьПараметр("СтатьяРасходов", Ведомость.СтатьяРасходов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Остатки.СтатьяРасходов = &СтатьяРасходов", "");	
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции

Процедура ВедомостьЗаполнитьПоТаблицеВыплат(Ведомость, ТаблицаВыплат) Экспорт
	
	// Группируем строки таблицы зарплат
	ВедомостьСгруппироватьТаблицуВыплат(Ведомость, ТаблицаВыплат);
	
	// Собираем состав
	Состав = ВедомостьСоставПоТаблицеВыплат(Ведомость, ТаблицаВыплат);
	
	// Убираем неположительные строки
	УдаляемыеСтрокиСостава = Новый Массив;
	Для Каждого СтрокаСостава Из Состав Цикл
		Если СтрокаСостава.КВыплате <= 0 Тогда
			УдаляемыеСтрокиСостава.Добавить(СтрокаСостава);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого УдаляемаяСтрокаСостава Из УдаляемыеСтрокиСостава Цикл
		Состав.Удалить(УдаляемаяСтрокаСостава);
	КонецЦикла;
	
	// Заполняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьОчиститьСостав(Ведомость);
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Процедура ВедомостьДополнитьПоТаблицеВыплат(Ведомость, ТаблицаВыплат) Экспорт
	
	// Группируем строки таблицы зарплат
	ВедомостьСгруппироватьТаблицуВыплат(Ведомость, ТаблицаВыплат);
	
	// Собираем состав
	Состав = ВедомостьСоставПоТаблицеВыплат(Ведомость, ТаблицаВыплат);
	
	// Дополняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Процедура ВедомостьСгруппироватьТаблицуВыплат(Ведомость, ТаблицаВыплат)

	ТаблицаВыплат.Колонки.Добавить("ИдентификаторСтроки", Ведомость.Метаданные().ТабличныеЧасти.Состав.Реквизиты.ИдентификаторСтроки.Тип);
	ТаблицаВыплат.Индексы.Добавить("ИдентификаторСтроки");
	
	// колонки группировки - это реквизиты ТЧ Состав, кроме идентификатора строки
	КолонкиГруппировки = ВзаиморасчетыССотрудниками.ВедомостьКолонкиГруппировкиЗарплаты(Ведомость);
	
	// структура для отбора строк зарплаты, попадающих в группу
	ПараметрыОтбораГруппы = Новый Структура(КолонкиГруппировки);
	
	// выделяем группы таблицы зарплат
	Группы = ТаблицаВыплат.Скопировать(, КолонкиГруппировки);
	Группы.Свернуть(КолонкиГруппировки);
	
	// Группируем строки
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		ВыплатыГруппы = ТаблицаВыплат.НайтиСтроки(ПараметрыОтбораГруппы);
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Для Каждого СтрокаВыплаты Из ВыплатыГруппы Цикл
			СтрокаВыплаты.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеВыплат(Ведомость, ТаблицаВыплат) Экспорт
	
	// Получаем ключевые поля группировки зарплаты
	КолонкиГруппировки = ВзаиморасчетыССотрудниками.ВедомостьКолонкиГруппировкиЗарплаты(Ведомость);
	
	// Создаем таблицу состава - ключевые поля и поле с массивом строк таблицы зарплат
	Состав = Ведомость.Состав.ВыгрузитьКолонки(КолонкиГруппировки +", ИдентификаторСтроки");
	Состав.Колонки.Добавить("КВыплате");
	Состав.Колонки.Добавить("СписокВыплат");
	
	// структура для отбора строк зарплаты, попадающих в строку состава
	ПараметрыОтбораГруппы = Новый Структура("ИдентификаторСтроки");
	
	// выделяем группы из таблицы зарплат
	ИдентификаторыГрупп = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаВыплат.ВыгрузитьКолонку("ИдентификаторСтроки"));
	
	// создаем строки состава, помещая в них и строки таблицы зарплат
	Для Каждого ИдентификаторСтроки Из ИдентификаторыГрупп Цикл
		
		ПараметрыОтбораГруппы.ИдентификаторСтроки = ИдентификаторСтроки; 
		ВыплатаГруппы = ТаблицаВыплат.Скопировать(ПараметрыОтбораГруппы);
		
		СтрокаСостава = Состав.Добавить();
		СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
		
		ЗаполнитьЗначенияСвойств(СтрокаСостава, ВыплатаГруппы[0], КолонкиГруппировки);
		СтрокаСостава.СписокВыплат = ВыплатаГруппы;
		СтрокаСостава.КВыплате = ВыплатаГруппы.Итог("КВыплате");
		
	КонецЦикла;
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаВыплат);
	
	// Инициализируем колонку налога в таблице состава 		
	Состав.Колонки.Добавить("НДФЛ"); 
	Для Каждого СтрокаСостава Из Состав Цикл
		СтрокаСостава.НДФЛ = НДФЛ.СкопироватьКолонки()
	КонецЦикла;		
			
	// структура для отбора строк налога, попадающих в строку состава
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	
	// получаем список различных физлиц
	Физлица = ТаблицаВыплат.Скопировать(, "ФизическоеЛицо");
	Физлица.Свернуть("ФизическоеЛицо");
	Физлица = Физлица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	// ищем строки состава для физлиц, помещая в них соответствующий налог
	Для Каждого Физлицо Из Физлица Цикл
		
		СтрокаСостава = Состав.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаСостава = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = Физлицо; 
		СтрокаСостава.НДФЛ = НДФЛ.Скопировать(ПараметрыОтбораНДФЛ);
		
	КонецЦикла;
	
	Возврат Состав;
	
КонецФункции

Процедура ВедомостьОчиститьСостав(Ведомость) Экспорт
	Ведомость.Состав.Очистить();
	Ведомость.Выплаты.Очистить();
	Ведомость.НДФЛ.Очистить();
КонецПроцедуры

Процедура ВедомостьДополнитьСостав(Ведомость, Состав) Экспорт
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		СтрокаТЧСостав = Ведомость.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧСостав, СтрокаСостава);

		Для Каждого СтрокаВыплаты Из СтрокаСостава.СписокВыплат Цикл
			СтрокаТЧСписокВыплат = Ведомость.Выплаты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧСписокВыплат, СтрокаВыплаты);
			СтрокаТЧСписокВыплат.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла;
		
		Для Каждого СтрокаНДФЛ Из СтрокаСостава.НДФЛ Цикл
			СтрокаТЧНДФЛ = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧНДФЛ, СтрокаНДФЛ);
			СтрокаТЧНДФЛ.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях") Тогда
		
		ПоляСтатей = Новый Массив;
		ПоляСтатей.Добавить("СтатьяФинансирования");
		ПоляСтатей.Добавить("СтатьяРасходов");
		КолонкиСтатей = СтрСоединить(ПоляСтатей, ",");
		
		Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
			ВыплатаСтроки = ДокументОбъект.Выплаты.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), КолонкиСтатей);
			ОшибкаФинансированияСтроки = Ложь;
			Для Каждого ПолеСтатьи Из ПоляСтатей Цикл
				Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ДокументОбъект.Метаданные().Реквизиты[ПолеСтатьи]) И ЗначениеЗаполнено(ДокументОбъект[ПолеСтатьи]) Тогда
					СтатьиСтроки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыплатаСтроки.ВыгрузитьКолонку(ПолеСтатьи));
					Если СтатьиСтроки.Количество() > 1 Или СтатьиСтроки[0] <> ДокументОбъект[ПолеСтатьи] Тогда
						ОшибкаФинансированияСтроки = Истина;
						Прервать;
					КонецЕсли	
				КонецЕсли;	
			КонецЦикла;	
			Если ОшибкаФинансированияСтроки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У получателя %1 финансирование не совпадает с ведомостью'"),
							СтрокаСостава.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состав[%1].ФизическоеЛицо", СтрокаСостава.НомерСтроки-1),, Отказ);
			КонецЕсли;	
		КонецЦикла;
		
	Иначе	
		ИсключаемыеРеквизиты = Новый Массив;
		ИсключаемыеРеквизиты.Добавить("СтатьяФинансирования");
		ИсключаемыеРеквизиты.Добавить("СтатьяРасходов");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	КонецЕсли;	
	
	Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
		ЗарплатаСтроки = ДокументОбъект.Выплаты.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), "КВыплате");
		Если ЗарплатаСтроки.Итог("КВыплате") < 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У получателя %1 указана отрицательная сумма к выплате'"),
						СтрокаСостава.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состав[%1].ФизическоеЛицо", СтрокаСостава.НомерСтроки-1),, Отказ);
		КонецЕсли;	
	КонецЦикла;
	
	Если НачалоДня(ДокументОбъект.Дата) > ВзаиморасчетыПоПрочимДоходамКлиентСервер.ВедомостьДатаВыплаты(ДокументОбъект) Тогда
		ТекстОшибки = НСтр("ru = 'Дата выплаты не может быть меньше даты документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "ДатаВыплаты",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьСоздатьВТСписокСотрудниковПоТаблицеВыплат(МенеджерВременныхТаблиц, ТаблицаВыплат, Ведомость)

	КолонкиГруппировокСписка = "ФизическоеЛицо, ДокументОснование, СтатьяФинансирования, СтатьяРасходов";
	
	СписокСотрудников = Ведомость.Выплаты.ВыгрузитьКолонки(КолонкиГруппировокСписка + ", КВыплате");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВыплат, СписокСотрудников);
	СписокСотрудников.Свернуть(КолонкиГруппировокСписка, "КВыплате");
	СписокСотрудников.Колонки.КВыплате.Имя = "СуммаВыплаты";
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Ведомость.Организация, Ведомость.ПериодРегистрации, 
		Ведомость.Ссылка, 
		"ВТСписокСотрудников");
	
КонецПроцедуры

Функция СоответствиеСпособВыплатыСпособРасчетов() Экспорт

	СоответствиеСпособВыплатыСпособРасчетов = Новый Соответствие;
	СоответствиеСпособВыплатыСпособРасчетов.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.Дивиденды,Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды);
	СоответствиеСпособВыплатыСпособРасчетов.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам,Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам);
	СоответствиеСпособВыплатыСпособРасчетов.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатыБывшимСотрудникам,Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами);
	СоответствиеСпособВыплатыСпособРасчетов.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатаПрочихДоходов,Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами);
	
	Возврат СоответствиеСпособВыплатыСпособРасчетов;

КонецФункции 

Функция ИменаВидовДокументовВзаиморасчетыСКонтрагентамиАкционерами() Экспорт

	ИменаВидовДокументовОснований = Новый Соответствие;
	ИменаВидовДокументовОснований.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.Дивиденды, "ДивидендыФизическимЛицам");
	ИменаВидовДокументовОснований.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам, "ДивидендыФизическимЛицам");
	ИменаВидовДокументовОснований.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатыБывшимСотрудникам,"ВыплатаБывшимСотрудникам");
	ИменаВидовДокументовОснований.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатаПрочихДоходов,"РегистрацияПрочихДоходов");
	
	Возврат ИменаВидовДокументовОснований;

КонецФункции

Функция ТекстЗапросаОстаткиВзаиморасчетовСКонтрагентамиАкционерами() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.ДокументОснование КАК ДокументОснование,
	|	Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Остатки.КВыплате) КАК КВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Взаиморасчеты.ДокументОснование КАК ДокументОснование,
	|		Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Взаиморасчеты.СуммаВзаиморасчетов
	|			ИНАЧЕ Взаиморасчеты.СуммаВзаиморасчетов
	|		КОНЕЦ КАК КВыплате
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.Регистратор = &ИсключаемыйРегистратор
	|		И Взаиморасчеты.Организация = &Организация
	|		И Взаиморасчеты.СпособРасчетов = &СпособРасчетов
	|		И Взаиморасчеты.ФизическоеЛицо В(&ФизическиеЛица)
	|		И Взаиморасчеты.ДокументОснование В(&Основания)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.ФизическоеЛицо,
	|		ВзаиморасчетыОстатки.ДокументОснование,
	|		ВзаиморасчетыОстатки.СтатьяФинансирования,
	|		ВзаиморасчетыОстатки.СтатьяРасходов,
	|		ВзаиморасчетыОстатки.СуммаВзаиморасчетовОстаток
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами.Остатки(
	|				&ДатаОстатков,
	|				Организация = &Организация
	|					И СпособРасчетов = &СпособРасчетов
	|					И ФизическоеЛицо В (&ФизическиеЛица)
	|					И ДокументОснование В (&Основания)) КАК ВзаиморасчетыОстатки) КАК Остатки
	|ГДЕ
	|	ИСТИНА
	|	И Остатки.СтатьяФинансирования = &СтатьяФинансирования
	|	И Остатки.СтатьяРасходов = &СтатьяРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ФизическоеЛицо,
	|	Остатки.ДокументОснование,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КВыплате) <> 0";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	Если ВзаиморасчетыССотрудниками.ЕстьОплатаПоВедомости(ДокументОбъект.Ссылка) Тогда
		
		СообщениеОбОшибке = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По ведомости %1 номер %2 от %3 произведены оплаты, изменения запрещены'"), 
				?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьПрочихДоходовВКассу"), НСтр("ru='в кассу'"), НСтр("ru='в банк'")), 
				ДокументОбъект.Номер, 
				Формат(ДокументОбъект.Дата, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, ДокументОбъект);
		
		Отказ = Истина;
		
		Возврат
		
	КонецЕсли;
	
	// Очистка табличной части Зарплата от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и Выплаты.
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из ДокументОбъект.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтрСоединить(ПоляСостава, ", ");
	
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаВыплаты Из ДокументОбъект.Выплаты Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаВыплаты.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаВыплаты);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаВыплаты, СтрокаСостава, СписокСвойств)
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.Выплаты.Удалить(ЛишняяСтрока);
	КонецЦикла;	
	
	// Очистка табличной части НДФЛ от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и НДФЛ.
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаНДФЛ Из ДокументОбъект.НДФЛ Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаНДФЛ.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаНДФЛ);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаСостава, "ФизическоеЛицо")
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.НДФЛ.Удалить(ЛишняяСтрока);
	КонецЦикла;	
	
	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки.
	ДокументОбъект.СуммаПоДокументу = ДокументОбъект.Выплаты.Итог("КВыплате");
	
КонецПроцедуры

Процедура ВедомостьОбновитьНДФЛ(Ведомость, Физлица) Экспорт
	
	ТаблицаВыплат = Ведомость.Выплаты.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, СтатьяФинансирования, СтатьяРасходов, КВыплате");
	Для Каждого СтрокаВыплаты Из Ведомость.Выплаты Цикл
		Если Физлица.Найти(СтрокаВыплаты.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВыплат.Добавить(), СтрокаВыплаты);
		КонецЕсли
	КонецЦикла;	
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаВыплат);
	
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	Для Каждого Физлицо Из Физлица Цикл
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = ФизЛицо;
		
		// Определяем идентификатор строки состава, к которой будет привязан НДФЛ физического лица.
		ИдентификаторСтроки = Неопределено;
		СтрокаНДФЛ = Ведомость.НДФЛ.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаНДФЛ = Неопределено Тогда
			СтрокаСостава = Ведомость.Состав.Найти(Физлицо, "ФизическоеЛицо");
			Если СтрокаСостава <> Неопределено Тогда
				ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки
			КонецЕсли	
		Иначе
			ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки
		КонецЕсли;	
		
		Если ИдентификаторСтроки = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		// Удаляем старый НДФЛ физического лица
		УдаляемыеСтроки = Ведомость.НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Ведомость.НДФЛ.Удалить(УдаляемаяСтрока)
		КонецЦикла;
		
		// Помещаем новый НДФЛ физического лица, привязывая его к строке состава
		НДФЛФизлица = НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого СтрокаНДФЛФизлица Из НДФЛФизлица Цикл
			ДобавляемаяСтрока = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, СтрокаНДФЛФизлица);
			ДобавляемаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла	
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаВыплат) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВедомостьСоздатьВТСписокСотрудниковПоТаблицеВыплат(МенеджерВременныхТаблиц, ТаблицаВыплат, Ведомость);
	
	НДФЛ = 	
		УчетНДФЛ.РассчитатьУдержанныеНалоги(
			Ведомость.Ссылка, 
			Ведомость.Организация, 
			Ведомость.Дата, 
			МенеджерВременныхТаблиц, 
			Ведомость.ПериодРегистрации,
			Ложь);
			
	// При постатейной выплате оставляем только налоги с заказанных статей 
	Если ЗначениеЗаполнено(Ведомость.СтатьяФинансирования) Или ЗначениеЗаполнено(Ведомость.СтатьяРасходов) Тогда
		
		КолонкиОтбораНДФЛ = "ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, ДокументОснование";
		ТаблицаОтбораБухучетаНДФЛ = НДФЛ.Скопировать(, КолонкиОтбораНДФЛ);
		ТаблицаОтбораБухучетаНДФЛ.Свернуть(КолонкиОтбораНДФЛ);
		
		БухучетНДФЛ = ОтражениеЗарплатыВБухучетеРасширенный.БухучетНДФЛФизическихЛицПоДокументамОснованиям(ТаблицаОтбораБухучетаНДФЛ);
		БухучетНДФЛ.Индексы.Добавить(КолонкиОтбораНДФЛ);
		
		УдаляемыеСтрокиНДФЛ = Новый Массив;
		ПараметрыОтбораНДФЛ = Новый Структура(КолонкиОтбораНДФЛ);
		Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораНДФЛ, СтрокаНДФЛ); 
			БухучетПоСтрокеНДФЛ = БухучетНДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
			СуммаИтого = 0;
			СуммаПоИсточнику = 0;
			Для Каждого СтрокаБухучета Из БухучетПоСтрокеНДФЛ Цикл
				СуммаИтого = СуммаИтого + СтрокаБухучета.Сумма;
				Если (Не ЗначениеЗаполнено(Ведомость.СтатьяФинансирования) Или Ведомость.СтатьяФинансирования = СтрокаБухучета.СтатьяФинансирования)
					И (Не ЗначениеЗаполнено(Ведомость.СтатьяРасходов) Или Ведомость.СтатьяРасходов = СтрокаБухучета.СтатьяРасходов) Тогда
					СуммаПоИсточнику = СуммаПоИсточнику + СтрокаБухучета.Сумма
				КонецЕсли;
			КонецЦикла;	
			Если СуммаПоИсточнику <> 0 И СуммаИтого <> 0 Тогда
				СтрокаНДФЛ.Сумма = МИН(СтрокаНДФЛ.НачисленоНалога * СуммаПоИсточнику / СуммаИтого, СтрокаНДФЛ.Сумма);
			Иначе
				УдаляемыеСтрокиНДФЛ.Добавить(СтрокаНДФЛ);
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаНДФЛ Из УдаляемыеСтрокиНДФЛ Цикл
			НДФЛ.Удалить(СтрокаНДФЛ)
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат НДФЛ
	
КонецФункции

Процедура ВедомостьОбработкаПроведения(Ведомость, Отказ) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Ведомость);
	
	ОписаниеКолонокВыплаты = НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченногоДохода();
	ОписаниеКолонокВыплаты.Сумма = "КВыплате";
	
	Выплаты = НоваяТаблицаВыплаченногоДоходаПоТабличнойЧасти(
		Ведомость.Выплаты,
		ОписаниеКолонокВыплаты);
		
	СпособРасчетов = СоответствиеСпособВыплатыСпособРасчетов()[Ведомость.СпособВыплаты];	
	
	ЗарегистрироватьВыплаченнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Выплаты,
		СпособРасчетов);
	
	// Регистрация выдачи зарплаты.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		
		ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ);
		
		Если Ведомость.ПеречислениеНДФЛВыполнено Тогда
			ВедомостьЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ);
		КонецЕсли;
		
	КонецЕсли;

	
	Для Каждого НаборЗаписей Из Ведомость.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Создает новую пустую таблицу значений для данных о выплаченных доходах.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//			* ДокументОснование - ОпределяемыйТип.ДокументОснованиеВыплатыПрочихДоходов
//			* Сумма - Число 	
//
Функция НоваяТаблицаВыплаченногоДохода() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ДокументОснование",    Метаданные.ОпределяемыеТипы.ДокументОснованиеВыплатыПрочихДоходов.Тип);
	Таблица.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Таблица
	
КонецФункции

// Создает новую таблицу значений для данных о выплаченных доходах по переданной табличной части.
//
// Параметры:
//		ТабличнаяЧасть - ТабличнаяЧасть - данные о выплаченных доходах.
//		ОписаниеСоответствияКолонок - Структура - см. НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты.
//
// Возвращаемое значение:
//		ТаблицаЗначений - см. НоваяТаблицаВыплаченногоДохода().
//
Функция НоваяТаблицаВыплаченногоДоходаПоТабличнойЧасти(ТабличнаяЧасть, ОписаниеСоответствияКолонок) Экспорт
	
	КолонкиТаблицыВыплаченногоДохода = КолонкиТаблицыВыплаченногоДохода();
	
	КолонкиВыгружаемые  = Новый Массив;
	КолонкиГруппировок  = Новый Массив;
	КолонкиСуммирования = Новый Массив;
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		Если КолонкиТаблицыВыплаченногоДохода.Все.Найти(ОписаниеКолонки.Ключ) = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'НоваяТаблицаВыплаченногоДоходаПоТабличнойЧасти: недопустимое имя колонки таблицы выплаченной зарплаты в описании соответствия колонок'")
		КонецЕсли;	
		КолонкиВыгружаемые.Добавить(ОписаниеКолонки.Значение);
		Если КолонкиТаблицыВыплаченногоДохода.Группировок.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиГруппировок.Добавить(ОписаниеКолонки.Значение);
		ИначеЕсли КолонкиТаблицыВыплаченногоДохода.Суммирования.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиСуммирования.Добавить(ОписаниеКолонки.Значение);
		КонецЕсли	
	КонецЦикла;	
	
	ТаблицаВыплаченногоДохода = ТабличнаяЧасть.Выгрузить(, СтрСоединить(КолонкиВыгружаемые, ", "));
	ТаблицаВыплаченногоДохода.Свернуть(СтрСоединить(КолонкиГруппировок, ", "), СтрСоединить(КолонкиСуммирования, ", "));
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		ТаблицаВыплаченногоДохода.Колонки[ОписаниеКолонки.Значение].Имя = ОписаниеКолонки.Ключ
	КонецЦикла;
	
	Возврат ТаблицаВыплаченногоДохода
	
КонецФункции

Функция КолонкиТаблицыВыплаченногоДохода()
	
	Колонки = Новый Структура;
	Колонки.Вставить("Все", Новый Массив);
	Колонки.Вставить("Группировок",  Новый Массив);
	Колонки.Вставить("Суммирования", Новый Массив);
	
	Для Каждого Колонка Из НоваяТаблицаВыплаченногоДохода().Колонки Цикл
		Колонки.Все.Добавить(Колонка.Имя);
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Колонки.Суммирования.Добавить(Колонка.Имя)
		Иначе	
			Колонки.Группировок.Добавить(Колонка.Имя)
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Колонки
	
КонецФункции

// Создает описание соответствия колонок входной таблицы колонкам таблицы выплаченного дохода.
// Предназначена для использования в функциях- конструкторах. 
// см. НоваяТаблицаВыплаченногоДохода(), см. НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти().
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя колонки таблицы выплаченной зарплаты, значение - имя колонки входной таблицы.
//
Функция НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченногоДохода() Экспорт
	
	ОписаниеСоответствияКолонок = Новый Структура;
	
	Для Каждого Колонка Из НоваяТаблицаВыплаченногоДохода().Колонки Цикл
		ОписаниеСоответствияКолонок.Вставить(Колонка.Имя, Колонка.Имя)
	КонецЦикла;
	
	Возврат ОписаниеСоответствияКолонок
	
КонецФункции


// Процедура регистрирует факт выплаты зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений ведомости.
//		Отказ             - Булево - признак отказа в проведении.
//		Организация       - СправочникСсылка.Организации
//		ПериодРегистрации - Дата  - первое число месяца периода регистрации.
//		Выплаты          - ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты
//		СпособРасчетов   - ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//
Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Выплаты, СпособРасчетов) Экспорт
	
	Если Выплаты.Количество() = 0	 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаВыплаты Из Выплаты Цикл
		НоваяЗапись = Движения.ВзаиморасчетыСКонтрагентамиАкционерами.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаВыплаты);
		НоваяЗапись.Организация 	= Организация;
		НоваяЗапись.СпособРасчетов 	= СпособРасчетов;
		НоваяЗапись.Период      	= ПериодРегистрации;
		НоваяЗапись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		НоваяЗапись.СуммаВзаиморасчетов	= СтрокаВыплаты.Сумма;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВедомостьСоздатьВТСписокСотрудниковПоТаблицеВыплат(МенеджерВременныхТаблиц, Ведомость.Выплаты, Ведомость);
	
	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
	|	*
	|ИЗ
	|	#ВедомостьНДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка = &Ссылка";
	ЗапросНДФЛ.Текст = СтрЗаменить(ТекстЗапроса, "#ВедомостьНДФЛ", Ведомость.Метаданные().ПолноеИмя() + ".НДФЛ");
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, ЗапросНДФЛ, ВзаиморасчетыПоПрочимДоходамКлиентСервер.ВедомостьДатаВыплаты(Ведомость)); 
	
	ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(Ведомость, Отказ, Ведомость.Организация, Ведомость.Дата, ВзаиморасчетыПоПрочимДоходамКлиентСервер.ВедомостьДатаВыплаты(Ведомость), МенеджерВременныхТаблиц);

КонецПроцедуры

// Выполняет регистрацию удержанного налога
// Параметры:
//		Регистратор - ДокументОбъект
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - должен содержать временные таблицы 
//      	ВТСписокСотрудников и ВТНалогУдержанный, см. УчетНДФЛ.
//
Процедура ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(Регистратор, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц)
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор.Ссылка, Регистратор.Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Истина);
	УчетНДФЛ.ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, Регистратор.Ссылка);	
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(Регистратор.Движения, Отказ, Организация, ДатаВыплаты, МенеджерВременныхТаблиц, , Истина);
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьПеречислениеНДФЛ(Ведомость, Отказ = Ложь)
	
	УчетНДФЛРасширенный.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Ведомость.Движения, Отказ, Ведомость.Организация, ВзаиморасчетыПоПрочимДоходамКлиентСервер.ВедомостьДатаВыплаты(Ведомость), Ведомость.ПеречислениеНДФЛРеквизиты);
	
КонецПроцедуры

Процедура ВедомостьОбработкаЗаполнения(Ведомость, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Тогда
		
		ЗаполнитьЗначенияСвойств(Ведомость, ДанныеЗаполнения.Шапка);
		Ведомость.Выплаты.Загрузить(ДанныеЗаполнения.Выплаты);
		
		ВедомостьЗаполнитьОтветственныеЛица(Ведомость);
		
		Для Каждого Основание Из ДанныеЗаполнения.Основания Цикл
			СтрокаОснования = Ведомость.Основания.Добавить();
			СтрокаОснования.Документ = Основание;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьЗаполнитьОтветственныеЛица(Ведомость) Экспорт
	
	ЗаполняемыеЗначения = Новый Структура;
	ЗаполняемыеЗначения.Вставить("Ответственный");
	ЗаполняемыеЗначения.Вставить("Организация");
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	Для Каждого Реквизит Из МенеджерВедомости.РеквизитыОтветственныхЛиц() Цикл
		ЗаполняемыеЗначения.Вставить(Реквизит);
	КонецЦикла;	
	ЗаполнитьЗначенияСвойств(ЗаполняемыеЗначения, Ведомость);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	ЗаполнитьЗначенияСвойств(Ведомость, ЗаполняемыеЗначения,, "Организация");
	
КонецПроцедуры

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовВКассу
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовПеречислением
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьПрочихДоходовВБанк
	КонецЕсли;
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

// Возвращает структуру, используемую для заполнения ведомостей на выплату прочих доходов.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	
	Шапка = Новый Структура;
	Шапка.Вставить("Дата");
	Шапка.Вставить("Организация");
	Шапка.Вставить("ПериодРегистрации");
	Шапка.Вставить("СпособВыплаты");
	Шапка.Вставить("ЗарплатныйПроект");
	
	Выплаты = Новый ТаблицаЗначений;
	Выплаты.Колонки.Добавить("ФизическоеЛицо");
	Выплаты.Колонки.Добавить("КВыплате");
	
	ДанныеЗаполненияВедомости = Новый Структура;
	
	ДанныеЗаполненияВедомости.Вставить("ЭтоДанныеЗаполненияВедомостиПрочихДоходов");
	ДанныеЗаполненияВедомости.Вставить("Шапка",		Шапка);
	ДанныеЗаполненияВедомости.Вставить("Выплаты",	Выплаты);
	
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛВыполнено", Истина);
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛРеквизиты", "");
	
	ДанныеЗаполненияВедомости.Вставить("Основания", Новый Массив);

	Возврат ДанныеЗаполненияВедомости
	
КонецФункции

// Проверяет, являются ли переданные данные структурой, используемой для заполнения документа
// (см. функцию ДанныеЗаполнения).
//
Функция ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Экспорт
	Возврат ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоДанныеЗаполненияВедомостиПрочихДоходов") 
КонецФункции	

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьПрочихДоходовВКассуДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Функция ВедомостьВКассуВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Ведомость.Кассир КАК Кассир,
	|	Ведомость.ДолжностьКассира КАК КассирДолжность,
	|	Ведомость.Бухгалтер КАК Бухгалтер,
	|	Ведомость.Составил КАК Составил,
	|	Ведомость.ДолжностьСоставившего КАК ДолжностьСоставившего,
	|	Ведомость.Проверил КАК Проверил,
	|	Ведомость.ДолжностьПроверившего КАК ДолжностьПроверившего,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Раздатчик,
	|	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	Возврат ВедомостьВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости)
КонецФункции

Функция ВедомостьВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(Запрос.МенеджерВременныхТаблиц, Истина, ИмяТипа, Ведомости);

	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Выплаты.ВедомостьДата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Ведомость КАК Ведомость,
	|	"""" КАК ТабельныйНомер,
	|	КадровыеДанные.Фамилия КАК Фамилия,
	|	КадровыеДанные.Имя КАК Имя,
	|	КадровыеДанные.Отчество КАК Отчество,
	|	Выплаты.Сумма КАК Сумма
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанные
	|		ПО Выплаты.ФизическоеЛицо = КадровыеДанные.ФизическоеЛицо
	|			И Выплаты.ВедомостьДата = КадровыеДанные.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выплаты.Ведомость,
	|	Выплаты.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru = 'Список перечислений'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати)
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		ТабличныйДокумент = Документы.ВедомостьПрочихДоходовВБанк.ПечатьСпискаПеречисленийПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей'"), ТабличныйДокумент);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);	
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьПрочихДоходовПеречислениемВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Ведомость.Бухгалтер КАК Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокументов.Подразделение КАК Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность КАК РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура СоздатьВТВыплатыВедомостей(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Взаиморасчеты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК Сумма
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиАкционерами КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.Регистратор В(&Ведомости)
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Регистратор,
	|	Взаиморасчеты.ФизическоеЛицо,
	|	Взаиморасчеты.СтатьяФинансирования,
	|	Взаиморасчеты.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Ведомость КАК Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки * 10000 + ВедомостьВыплаты.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрок
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК ВедомостьСостав
	|		ПО Взаиморасчеты.Ведомость = ВедомостьСостав.Ссылка
	|			И (ВедомостьСостав.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСписокВыплат КАК ВедомостьВыплаты
	|		ПО (ВедомостьСостав.Ссылка = ВедомостьВыплаты.Ссылка)
	|			И (ВедомостьСостав.ИдентификаторСтроки = ВедомостьВыплаты.ИдентификаторСтроки)
	|			И Взаиморасчеты.ФизическоеЛицо = ВедомостьВыплаты.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Ведомость,
	|	Взаиморасчеты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьДокумент.Ссылка КАК Ведомость,
	|	ВедомостьДокумент.Дата КАК ВедомостьДата,
	|	НомераСтрок.НомерСтроки КАК НомерСтроки,
	|	Взаиморасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(Взаиморасчеты.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыВедомостей
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьДокумент КАК ВедомостьДокумент
	|		ПО Взаиморасчеты.Ведомость = ВедомостьДокумент.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрок КАК НомераСтрок
	|		ПО Взаиморасчеты.Ведомость = НомераСтрок.Ведомость
	|			И Взаиморасчеты.ФизическоеЛицо = НомераСтрок.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьДокумент.Ссылка,
	|	ВедомостьДокумент.Дата,
	|	НомераСтрок.НомерСтроки,
	|	Взаиморасчеты.ФизическоеЛицо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ИмяТипа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСписокВыплат",	ИмяТипа + ".Выплаты");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВедомостьТекстЗапросаДанныеДляОплаты(ИмяТипа, ИмяПараметраВедомости = "Ведомости", ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьВыплаты.Ссылка КАК Ссылка,
	|	ВедомостьВыплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьВыплаты.КВыплате) КАК КВыплате,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	#ВедомостьВыплаты КАК ВедомостьВыплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьВыплаты.Ссылка,
	|	ВедомостьВыплаты.ФизическоеЛицо";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВедомостьВыплаты",	ИмяТипа + ".Выплаты");
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ИмяПараметраВедомости) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьВыплаты.Ссылка В(&%1)", ИмяПараметраВедомости));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИмяПараметраФизическиеЛица) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьВыплаты.ФизическоеЛицо В (&%1)", ИмяПараметраФизическиеЛица));
	КонецЕсли;	
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции	

#КонецОбласти

