////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рабочий календарь".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.94";
	Обработчик.Процедура = "РаботаСРабочимКалендаремБЗК.ВключитьИспользованиеРабочегоКалендаря";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("867fc7c0-4167-461f-814d-6c897ff2ee57");
	Обработчик.Комментарий = НСтр("ru = 'Включение использования рабочего календаря.'");
	
КонецПроцедуры

Процедура ВключитьИспользованиеРабочегоКалендаря(ПараметрыОбновления) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодборПерсонала") Тогда
		Константы.ИспользоватьРабочийКалендарь.Установить(Истина);
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

// Дополняет передаваемую таблицу занятости сведениями об отсутствиях по кадровым документам.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПолученииТаблицыЗанятости.
//
Процедура ПриПолученииТаблицыЗанятостиПользователей(ТаблицаЗанятости, ПараметрыЗанятости) Экспорт
	
	ДоступностьПользователей = КадровыйУчетКорпоративный.ДоступностьПользователей(
		ПараметрыЗанятости.Пользователи, 
		ПараметрыЗанятости.ДатаНачала, 
		ПараметрыЗанятости.ДатаОкончания);
	
	Для Каждого СтрокаДоступности Из ДоступностьПользователей Цикл
		
		Если СтрокаДоступности.Доступен Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЗанятости = ТаблицаЗанятости.НайтиСтроки(Новый Структура("Пользователь", СтрокаДоступности.Пользователь));
		Если СтрокиЗанятости.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			
			НоваяСтрока.Пользователь = СтрокаДоступности.Пользователь;
			НоваяСтрока.ДатаНачала = СтрокаДоступности.ДатаНачала;
			НоваяСтрока.ДатаОкончания = КонецДня(СтрокаДоступности.ДатаОкончания);
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Отсутствует;
			
		Иначе
			
			Если (СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.Доступен
				Или СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.ПодВопросом) Тогда
				
				СтрокиЗанятости[0].Занят = Перечисления.СостоянияЗанятости.Отсутствует;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переопределяет признак необходимости предупреждения об отсутствии.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии.
//
Процедура ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии(ПредупреждатьОбОтсутствии) Экспорт
	
	ПредупреждатьОбОтсутствии = Истина;
	
КонецПроцедуры

// Переопределяет признак доступности изменения заданной записи рабочего календаря.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииПраваИзмененияЗаписиРабочегоКалендаря.
//
Процедура ПриОпределенииПраваИзмененияЗаписиРабочегоКалендаря(ЗаписьКалендаря, ЕстьПраво) Экспорт
	
	Если ПравоДоступа("Изменение", ЗаписьКалендаря.Метаданные()) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЕстьПраво = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Пользователь") = Пользователь
			Или Пользователи.ЭтоПолноправныйПользователь(Пользователь));
		
	КонецЕсли;
	
КонецПроцедуры

// Подключает напоминание, если связанная запись календаря текущего пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПодключенииНапоминанияАвтоматически.
//
Процедура ПриПодключенииНапоминанияАвтоматически(ЗаписьКалендаря, Напоминание) Экспорт
	
	Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьКалендаря, "Пользователь");
	
	Если Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	УстанавливатьНапоминаниеАвтоматически =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
			
	Если Не УстанавливатьНапоминаниеАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	СрокНапоминанияПоУмолчанию =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминаниеДоВремениПредмета(
		Строка(ЗаписьКалендаря),
		СрокНапоминанияПоУмолчанию * 60,
		ЗаписьКалендаря,
		"ДатаНачала");
		
КонецПроцедуры

// Переопределяет признак доступности изменения рабочего календаря пользователем.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии.
//
Процедура ПриОпределенииПраваИзмененияКалендаря(Пользователь, ЕстьПраво) Экспорт
	
	ЕстьПраво = Пользователи.ЭтоПолноправныйПользователь(Пользователь);
	
КонецПроцедуры

// Переопределяет представление предмета записи рабочего календаря.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриПолученииПредставленияПредмета.
//
Процедура ПриПолученииПредставленияПредмета(Предмет, ПредставлениеПредмета) Экспорт
	
	Если Не ПравоДоступа("Чтение", Предмет.Метаданные()) Тогда
		ПредставлениеПредмета = Строка(Предмет);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Наименование");
	Иначе
		Наименование = Строка(Предмет)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет.Метаданные().ПредставлениеОбъекта) Тогда 
		ПредставлениеОбъекта = Предмет.Метаданные().ПредставлениеОбъекта; 
	Иначе
		ПредставлениеОбъекта = Предмет.Метаданные().Синоним;
	КонецЕсли;
	
	ПредставлениеПредмета = СтрШаблон("%1 (%2)", Наименование, ПредставлениеОбъекта);
	
КонецПроцедуры

// Переопределяет признак заданности графика работы пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииЗаданностиГрафикаРаботыПользователя.
//
Процедура ПриОпределенииЗаданностиГрафикаРаботыПользователя(Пользователь, Знач ПроверяемаяДата, ГрафикЗадан) Экспорт
	
	ГрафикЗадан = Истина;
	
КонецПроцедуры

// Заполняет список рабочих дней текущего пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииРабочихДнейПользователя.
//
Процедура ПриЗаполненииРабочихДнейПользователя(РабочиеДни, Знач ЗаполняемыеГода, Знач ДатаЗаполнения) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	РабочиеДниПользователя = КадровыйУчетКорпоративный.РабочиеДниПользователя(Пользователь, ЗаполняемыеГода, ДатаЗаполнения);
	
	Для Каждого СтрокаДня Из РабочиеДниПользователя Цикл
		РабочиеДни.Добавить(СтрокаДня.Дата, , СтрокаДня.Рабочий);
	КонецЦикла
	
КонецПроцедуры

// Заполняет настройки доступного времени пользователя.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииДоступногоВремениПользователя.
//
Процедура ПриЗаполненииДоступногоВремениПользователя(НастройкиДоступногоВремени) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗанятостьНаНеделе = КадровыйУчетКорпоративный.ЗанятостьПользователяНаНеделе(Пользователь, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаЗанятости Из ЗанятостьНаНеделе Цикл
		
		НастройкаДоступногоВремени = НастройкиДоступногоВремени.Добавить();
		НастройкаДоступногоВремени.Пользователь = Пользователь;
		
		ЗаполнитьЗначенияСвойств(НастройкаДоступногоВремени, СтрокаЗанятости);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты создаваемой или обновляемой записи рабочего календаря по данным предмета.
// Описание см. РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииЗаписиРабочегоКалендаряПоПредмету.
//
Процедура ПриЗаполненииЗаписиРабочегоКалендаряПоПредмету(Предмет, ЗаписьКалендаря) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				Или ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
		РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Дата,Текст,ТекстHTML,Тема");
		
		Если ЗначениеЗаполнено(РеквизитыПредмета.Текст) Тогда
			ТекстПисьма = РеквизитыПредмета.Текст;
		Иначе
			ТекстПисьма = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(РеквизитыПредмета.ТекстHTML);
		КонецЕсли;
		
		ТекстДляАнализа = СокрЛП(РеквизитыПредмета.Тема) + "." + Символы.ПС + ТекстПисьма;
		
		ТекстСобытия = Новый Массив;
		Событие = Обработки.АнализТекста.Событие(ТекстДляАнализа, РеквизитыПредмета.Дата);
		Если Событие <> Неопределено Тогда
			
			ЗаписьКалендаря.ДатаНачала = Событие.Начало;
			ЗаписьКалендаря.ДатаОкончания = Событие.Конец;
			
			ТекстСобытия.Добавить(Событие.Текст);
			
			// Место
			Если ЗначениеЗаполнено(Событие.Место) Тогда
				ТекстСвойства = СтрШаблон("%1: %2", НСтр("ru = 'Место проведения'"), Событие.Место);
				ТекстСобытия.Добавить(ТекстСвойства);
			КонецЕсли;
			
		Иначе
			ТекстСобытия.Добавить(СокрЛП(РеквизитыПредмета.Тема));
		КонецЕсли;
		
		ЗаписьКалендаря.Описание = СтрСоединить(ТекстСобытия, Символы.ПС);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.Бронь") Тогда
		
		ЗаписьКалендаря.Описание = БронированиеПомещений.ПолучитьОписаниеБрони(Предмет);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,"Наименование,Дата,ДатаНачала,ДатаИсполнения,СрокИсполнения");
		
		ЗаписьКалендаря.Описание = РеквизитыПредмета.Наименование;
		
		Если ЗначениеЗаполнено(РеквизитыПредмета.ДатаНачала) Тогда
			ЗаписьКалендаря.ДатаНачала = РеквизитыПредмета.ДатаНачала;
		Иначе
			ЗаписьКалендаря.ДатаНачала = РеквизитыПредмета.Дата;
		КонецЕсли;
		
		ЗаписьКалендаря.ДатаОкончания = РеквизитыПредмета.СрокИсполнения;
		ЗаписьКалендаря.ВесьДень = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет состав участников и записи календаря по этапу работы с кандидатом.
//
// Параметры:
//	Кандидат 	- СправочникСсылка.Кандидаты - кандидат для которого назначен этап.
//	ЭтапРаботы	- СправочникСсылка.ЭтапыРаботыСКандидатами - назначенный этап работы.
//	Участники	- Массив - список пользователей, которые приглашены поучаствовать в событии.
//	ПрежниеДанныеЭтапа	 - Структура - со свойствами:
//		* ПрежнееСостояние	- ПеречислениеСсылка.СостоянияЭтаповРаботыСКандидатами - прежнее состояние этапа.
//		* ПрежнийПериод	 - Дата - прежняя дата начала проведения этапа работы с кандидатом.
//		* ПрежнийПериодОкончание - Дата - прежняя дата окончания проведения этапа работы с кандидатом.
//
Процедура ОбновитьЗаписиКалендаряПоЭтапуРаботыСКандидатом(Кандидат, ЭтапРаботы, Участники, ПрежниеДанныеЭтапа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Этап = ЭтапРаботы.Этап;
	СостояниеЭтапа = ЭтапРаботы.Состояние;
	
	Если Не ЗначениеЗаполнено(СостояниеЭтапа)
		Или СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
		
		Справочники.ЗаписиРабочегоКалендаря.УдалитьСвязанныеЗаписиКалендаря(Кандидат, Этап);
		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда 
		
		ДанныеСвязанныхЗаписей = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Кандидат, Этап);
		Для Каждого ДанныеЗаписи Из ДанныеСвязанныхЗаписей Цикл
			РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(ДанныеЗаписи.Ссылка, Истина);
		КонецЦикла;
		
	ИначеЕсли СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		
		Помещение = ЭтапРаботы.Помещение;
		Участники = ?(Участники = Неопределено, Новый Массив, Участники);
		
		ПрежниеУчастники = РегистрыСведений.УчастникиЭтапаРаботыСКандидатом.УчастникиЭтапа(Кандидат, Этап);
		
		НовыеУчастники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Участники, ПрежниеУчастники);
		ИсключенныеУчастники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрежниеУчастники, Участники);
		
		ИзмененСоставУчастников = (НовыеУчастники.Количество() <> 0
			Или ИсключенныеУчастники.Количество() <> 0);
		
		ИзмениласьДата = (ЗначениеЗаполнено(ПрежниеДанныеЭтапа.Период) 
			И ЭтапРаботы.Период <> ПрежниеДанныеЭтапа.Период)
			Или (ЗначениеЗаполнено(ПрежниеДанныеЭтапа.ПериодОкончание) 
			И ЭтапРаботы.ПериодОкончание <> ПрежниеДанныеЭтапа.ПериодОкончание);
		
		ИзменилосьПомещение = ПрежниеДанныеЭтапа.Помещение <> ЭтапРаботы.Помещение;
		
		Если ИзмененСоставУчастников Тогда
			РегистрыСведений.УчастникиЭтапаРаботыСКандидатом.ЗаписатьУчастниковЭтапа(Кандидат, Этап, Участники);
		КонецЕсли;
		
		ДанныеСвязанныхЗаписей = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(Кандидат, Этап);
		
		РеквизитыЗаписиКалендаря = Новый Структура;
		РеквизитыЗаписиКалендаря.Вставить("ДатаНачала", ЭтапРаботы.Период);
		РеквизитыЗаписиКалендаря.Вставить("ДатаОкончания", ЭтапРаботы.ПериодОкончание);
		
		Если ИзменилосьПомещение Или НовыеУчастники.Количество() <> 0 Тогда
			
			Описание = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидат, Этап, , Помещение);
			РеквизитыЗаписиКалендаря.Вставить("Описание", Описание);
			
		КонецЕсли;
		
		Для Каждого ДанныеЗаписи Из ДанныеСвязанныхЗаписей Цикл
			
			Если ИсключенныеУчастники.Количество() > 0 
				И ИсключенныеУчастники.Найти(Новый Структура("Пользователь", ДанныеЗаписи.Пользователь)) <> 0 Тогда
				
				Справочники.ЗаписиРабочегоКалендаря.УдалитьСвязаннуюЗаписьКалендаря(ДанныеЗаписи.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			Если ИзмениласьДата Или ИзменилосьПомещение Тогда
				Справочники.ЗаписиРабочегоКалендаря.ОбновитьСвязаннуюЗаписьКалендаря(ДанныеЗаписи.Ссылка, Кандидат, РеквизитыЗаписиКалендаря);
			КонецЕсли;
			
			Если РаботаСРабочимКалендарем.ЗаписьКалендаряОтработана(ДанныеЗаписи.Ссылка) Тогда
				РаботаСРабочимКалендарем.УстановитьОтработанаЗаписьКалендаря(ДанныеЗаписи.Ссылка, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеСвязанныхЗаписей.Количество() > 0 Тогда
			
			ПользователиСЗаписями = ДанныеСвязанныхЗаписей.ВыгрузитьКолонку("Пользователь");
			ПользователиБезЗаписей = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрежниеУчастники, ПользователиСЗаписями);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеУчастники, ПользователиБезЗаписей, Истина);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыеУчастники, ПрежниеУчастники, Истина);
		КонецЕсли;
		
		Если НовыеУчастники.Количество() <> 0 Тогда
			
			РеквизитыЗаписиКалендаря.Вставить("Связанная", Истина);
			РеквизитыЗаписиКалендаря.Вставить("СвязанныйПредмет", Этап);
			
			Для Каждого Участник Из НовыеУчастники Цикл
				
				РеквизитыЗаписиКалендаря.Вставить("Пользователь", Участник);
				
				Справочники.ЗаписиРабочегоКалендаря.СоздатьСвязаннуюЗаписьКалендаря(Кандидат, Ложь, Истина, РеквизитыЗаписиКалендаря);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюНастроекПодбораПерсонала(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.Количество() > 0 
		И Не Константы.ИспользоватьРабочийКалендарь.Получить() Тогда
		
		Запись = НаборЗаписей[0];
		
		ТекущаяЗапись = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
		ТекущаяЗапись.Прочитать();
		
		Если Запись.ИспользоватьПодборПерсонала Тогда
			
			Если Не ЗначениеЗаполнено(ТекущаяЗапись.ИспользоватьПодборПерсонала)
				Или Не ТекущаяЗапись.ИспользоватьПодборПерсонала Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ИспользоватьРабочийКалендарь", Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкуИспользоватьРабочийКалендарь(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИспользоватьРабочийКалендарь") Тогда
		Константы.ИспользоватьРабочийКалендарь.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
