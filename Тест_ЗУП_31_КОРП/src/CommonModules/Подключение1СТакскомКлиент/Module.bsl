
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет получение в сервисе 1С-Такском уникального идентификатора абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на получение
//		идентификатора абонента (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат получения идентификатора.
//		Передаваемое значение:
//			Строка - полученный идентификатор абонента;
//			Неопределено - если, идентификатор абонента не был получен.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//		Поля:
//		* ОбработчикСтатусаЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Статус заявки".
//			В обработчик передается параметр Структура с полями:
//			** СтатусЗаявки - Строка - статус текущей заявки:
//				- "Отсутствует" - заявка не создавалась;
//				- "ОжиданиеОбработки" - заявка создана, но еще не обработана;
//				- "Отклонена" - заявка отклонена;
//				- "Обработана" - заявка успешно обработана;
//			** НомерЗаявки - Строка - номер заявки;
//			** КодОшибки - Строка - код ошибки в сервисе Такском;
//			** ОписаниеОшибки - Строка - описание ошибки обработки последней заявки. <Пустая строка>, если ошибки нет;
//			** ДанныеЗаявки - Структура, Неопределено - данные текущей заявки:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван при
//				завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - описание действия, которое необходимо выполнить для продолжения бизнес-процесса.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом (показать форму "Статус заявки");
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "НоваяЗаявка" - создать новую заявку;
//					- "ПроверитьСтатусЗаявки" - проверить статус обработки заявки
//						(только для СтатусЗаявки = "ОжиданиеОбработки");
//		* ОбработчикСозданияЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Заявка на регистрацию участника обмена ЭД".
//			В обработчик передается параметр Структура с полями:
//			** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//			** ДанныеЗаявки - Структура - предзаполненные данные заявки.
//				Структура с полями:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван
//				при завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - действие, которое должно быть выполнено.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом
//						(открыть стандартную форму создания заявки);
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "ОтправитьЗаявку" - отправить данные заявки (необходимо передать данные заявки);
//				*** ДанныеЗаявки - Структура - см. поле ДанныеЗаявки параметра обработчика оповещения.
//
Процедура ПолучитьУникальныйИдентификаторАбонента(
	СертификатЭП,
	Организация,
	ОповещениеОЗавершении = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ОбработчикиСобытийБизнесПроцесса = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбработчикСтатусаЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СтатусЗаявки", ДополнительныеПараметры.ОбработчикСтатусаЗаявки);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработчикСозданияЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СозданиеЗаявки", ДополнительныеПараметры.ОбработчикСозданияЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметрыСценария = Новый Структура(
		"ОбработчикЗавершения, ОбработчикиСобытийБизнесПроцесса",
		ОповещениеОЗавершении,
		ОбработчикиСобытийБизнесПроцесса);
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		ДополнительныеПараметрыСценария);
	
КонецПроцедуры

// Выполняет регистрацию в сервисе 1С-Такском нового сертификата абонента
// электронного документооборота.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи;
//	ИдентификаторАбонента - Строка - уникальный идентификатор абонента,
//		для которого регистрируется сертификат;
//	Организация - Произвольный - организация, с которой связан сертификат,
//		используется для заполнения данных организации в заявке на регистрацию
//		сертификата (см. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации());
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик, в который
//		передается результат регистрации сертификата.
//		Передаваемое значение:
//			Булево - результат регистрации сертификата. Истина - если
//				сертификат зарегистрирован успешно, Ложь - в противном случае.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//		Поля:
//		* ОбработчикСтатусаЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Статус заявки".
//			В обработчик передается параметр Структура с полями:
//			** СтатусЗаявки - Строка - статус текущей заявки:
//				- "Отсутствует" - заявка не создавалась;
//				- "ОжиданиеОбработки" - заявка создана, но еще не обработана;
//				- "Отклонена" - заявка отклонена;
//				- "Обработана" - заявка успешно обработана;
//			** НомерЗаявки - Строка - номер заявки;
//			** КодОшибки - Строка - код ошибки в сервисе Такском;
//			** ОписаниеОшибки - Строка - описание ошибки обработки последней заявки. <Пустая строка>, если ошибки нет;
//			** ДанныеЗаявки - Структура, Неопределено - данные текущей заявки:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван при
//				завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - описание действия, которое необходимо выполнить для продолжения бизнес-процесса.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом (показать форму "Статус заявки");
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "НоваяЗаявка" - создать новую заявку;
//					- "ПроверитьСтатусЗаявки" - проверить статус обработки заявки
//						(только для СтатусЗаявки = "ОжиданиеОбработки");
//		* ОбработчикСозданияЗаявки (не обязательное) - ОписаниеОповещения - вызывается взамен открытия
//			стандартной формы "Заявка на регистрацию участника обмена ЭД".
//			В обработчик передается параметр Структура с полями:
//			** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//			** ДанныеЗаявки - Структура - предзаполненные данные заявки.
//				Структура с полями:
//				*** ИдентификаторАбонента - Строка - идентификатор абонента Такском;
//				*** ОтпечатокСертификата - Строка - отпечаток  сертификата в виде base64-строки,
//					указанного при регистрации заявки;
//				*** Индекс - Строка - почтовый индекс организации;
//				*** КодРегиона - Строка - код региона в адресе организации;
//				*** Район - Строка - Район;
//				*** Город - Строка - Город;
//				*** НаселенныйПункт - Строка - населенный пункт расположения организации;
//				*** Улица - Строка - Улица;
//				*** Дом - Строка - Дом;
//				*** Корпус - Строка - Корпус;
//				*** Квартира - Строка - Квартира;
//				*** Телефон - Строка - телефон организации;
//				*** НаименованиеОрганизации - Строка - наименование организации;
//				*** ИНН - Строка - ИНН организации;
//				*** КПП - Строка - КПП организации;
//				*** ОГРН - Строка - ОГРН организации;
//				*** КодНалоговогоОргана - Строка - код ИМНС организации;
//				*** ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//			** ОбработчикРезультата - ОписаниеОповещения - обработчик, который должен быть вызван
//				при завершении выполнения метода. В обработчик передается результат выполнения метода.
//				Структура с полями:
//				*** Действие - Строка - действие, которое должно быть выполнено.
//					Возможные значения:
//					- "СтандартнаяОбработка" - обработать стандартным способом
//						(открыть стандартную форму создания заявки);
//					- "Завершить" - завершить бизнес-процесс (освободить ресурсы);
//					- "ОтправитьЗаявку" - отправить данные заявки (необходимо передать данные заявки);
//				*** ДанныеЗаявки - Структура - см. поле ДанныеЗаявки параметра обработчика оповещения.
//
Процедура ЗарегистрироватьСертификатАбонента(
	СертификатЭП,
	ИдентификаторАбонента,
	Организация,
	ОповещениеОЗавершении = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	ИначеЕсли ТипЗнч(ИдентификаторАбонента) <> Тип("Строка") Или ПустаяСтрока(ИдентификаторАбонента) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""ИдентификаторАбонента"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	ПараметрыЭДО.Вставить("identifierTaxcomED", ИдентификаторАбонента);
	ПараметрыЭДО.Вставить("ToAddCert"         , "YES");
	
	ОповещениеОЗавершенииБизнесПроцесса = Новый ОписаниеОповещения(
		"ЗарегистрироватьСертификатАбонентаЗавершение",
		ЭтотОбъект,
		ОповещениеОЗавершении);
	
	ОбработчикиСобытийБизнесПроцесса = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбработчикСтатусаЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СтатусЗаявки", ДополнительныеПараметры.ОбработчикСтатусаЗаявки);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработчикСозданияЗаявки") Тогда
			ОбработчикиСобытийБизнесПроцесса.Вставить("СозданиеЗаявки", ДополнительныеПараметры.ОбработчикСозданияЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметрыСценария = Новый Структура(
		"ОбработчикЗавершения, ОбработчикиСобытийБизнесПроцесса",
		ОповещениеОЗавершенииБизнесПроцесса,
		ОбработчикиСобытийБизнесПроцесса);
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий(
		"taxcomGetID",
		ПараметрыЭДО,
		,
		ДополнительныеПараметрыСценария);
	
КонецПроцедуры

// Открывает личный кабинет абонента сервиса 1С-Такском.
//
// Параметры:
//	СертификатЭП - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат
//		электронной подписи, связанный с абонентом;
//
Процедура ОткрытьЛичныйКабинетАбонента(СертификатЭП) Экспорт
	
	Если ТипЗнч(СертификатЭП) <> Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		Или СертификатЭП.Пустая() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра ""СертификатЭП"".'");
	КонецЕсли;
	
	ПараметрыЭДО = Новый Структура;
	ПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭП);
	ПараметрыЭДО.Вставить("IDOrganizationED"  , "");
	ПараметрыЭДО.Вставить("identifierTaxcomED", "");
	ПараметрыЭДО.Вставить("ToAddCert"         , "NO");
	
	ИнтернетПоддержкаПользователейКлиент.ВыполнитьСценарий("taxcomPrivat", ПараметрыЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// Выполнение команды сервиса ИПП на стороне клиента 1С:Предприятия.
// Вызывается из ИнтернетПоддержкаПользователейКлиент.ВыполнитьКомандуСервиса().
//
// Параметры:
//	КонтекстВзаимодействия - см. описание функции
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия();
//	ТекущаяФорма - УправляемаяФорма - форма, из которой выполняется вызов;
//	СтруктураКоманды - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.СтруктурироватьОтветСервера();
//	КонтекстОбработчика - см. описание функции
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
//	ПрерватьОбработкуКоманд - Булево - в параметре возвращается признак
//		необходимости остановки выполнения команд при возникновении асинхронного действия.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд) Экспорт
	
	ИмяКоманды = СтруктураКоманды.ИмяКоманды;
	
	Если ИмяКоманды = "setcodesregion" Тогда
		
		Подключение1СТакскомКлиентСервер.СохранитьВПараметрахКодыРегионов(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "performtheaction.decode" Тогда
		
		ПрерватьОбработкуКоманд = Истина;
		РасшифроватьКонтрольныйМаркерЭПСервера(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТекущаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при формировании параметров открытия формы бизнес-процесса,
// передаваемых в метода ПолучитьФорму().
// Вызывается из ИнтернетПоддержкаПользователейКлиент.СформироватьПараметрыОткрытияФормы().
//
// Параметры:
//	КСКонтекст - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
//	ИмяОткрываемойФормы - Строка - полное имя открываемой формы;
//	Параметры - Структура - заполняемые параметры открытия формы.
//
Процедура ПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы, Параметры) Экспорт
	
	Если ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента" Тогда
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		Параметры.Вставить("IDOrganizationED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDOrganizationED"));
		Параметры.Вставить("ToAddCert",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ToAddCert"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента" Тогда
		Параметры.Вставить("statusApplicationFormED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "statusApplicationFormED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("nameCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "nameCertificateED"));
		Параметры.Вставить("orgindED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		Параметры.Вставить("postindexED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		Параметры.Вставить("addressregionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressregionED"));
		Параметры.Вставить("coderegionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		Параметры.Вставить("addresstownshipED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		Параметры.Вставить("addresscityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		Параметры.Вставить("addresslocalityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		Параметры.Вставить("addressstreetED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		Параметры.Вставить("addressbuildingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		Параметры.Вставить("addresshousingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		Параметры.Вставить("addressapartmentED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		Параметры.Вставить("addressphoneED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		Параметры.Вставить("agencyED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		Параметры.Вставить("innED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		Параметры.Вставить("kppED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		Параметры.Вставить("ogrnED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		Параметры.Вставить("codeimnsED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		Параметры.Вставить("lastnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		Параметры.Вставить("firstnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		Параметры.Вставить("middlenameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		Параметры.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		Параметры.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ИзменениеТарифа" Тогда
		Параметры.Вставить("freePackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "freePackagesED"));
		Параметры.Вставить("unallocatedPackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "unallocatedPackagesED"));
		Параметры.Вставить("begindatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "begindatetarifED"));
		Параметры.Вставить("enddatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "enddatetarifED"));
		Параметры.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		Параметры.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		Параметры.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		Параметры.Вставить("codeErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
		Параметры.Вставить("textErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет событие бизнес-процесса "Перед открытием формы".
//
Процедура ПередОткрытиемФормы(
	ИмяОткрываемойФормы,
	ПараметрыОткрытияФормы,
	КонтекстВзаимодействия,
	КонтекстОбработчика,
	СтруктураКоманды,
	СтандартнаяОбработка) Экспорт
	
	Если ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента" Тогда
		
		ОбработчикСтатусаЗаявки = ИнтернетПоддержкаПользователейКлиент.ОбработчикСобытияБизнесПроцесса(КонтекстВзаимодействия, "СтатусЗаявки");
		
		Если ОбработчикСтатусаЗаявки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСобытия = Новый Структура;
		
		Если ПараметрыОткрытияФормы.applicationStatusED = "obtained" Тогда
			СтатусЗаявки = "Обработана";
		ИначеЕсли ПараметрыОткрытияФормы.applicationStatusED = "rejected" Тогда
			СтатусЗаявки = "Отклонена";
		ИначеЕсли ПараметрыОткрытияФормы.applicationStatusED = "notconsidered" Тогда
			СтатусЗаявки = "ОжиданиеОбработки";
		Иначе
			СтатусЗаявки = "Отсутствует";
		КонецЕсли;
		
		ПараметрыСобытия.Вставить("СтатусЗаявки", СтатусЗаявки);
		Если ПараметрыОткрытияФормы.Свойство("numberRequestED") Тогда
			ПараметрыСобытия.Вставить("НомерЗаявки", ПараметрыОткрытияФормы.numberRequestED);
		Иначе
			ПараметрыСобытия.Вставить("НомерЗаявки", "");
		КонецЕсли;
		
		Если СтатусЗаявки = "Отсутствует" Тогда
			ПараметрыСобытия.Вставить("КодОшибки"     , "");
			ПараметрыСобытия.Вставить("ОписаниеОшибки", "");
			ПараметрыСобытия.Вставить("ДанныеЗаявки"  , Неопределено);
		Иначе
			
			КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
			ПараметрыСобытия.Вставить("КодОшибки",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
			ПараметрыСобытия.Вставить("ОписаниеОшибки",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
			
			ДанныеЗаявки = Новый Структура;
			ДанныеЗаявки.Вставить("ИдентификаторАбонента",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
			ДанныеЗаявки.Вставить("ОтпечатокСертификата",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "certificatefingerprintED"));
			ДанныеЗаявки.Вставить("Индекс",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
			ДанныеЗаявки.Вставить("КодРегиона",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
			ДанныеЗаявки.Вставить("Район",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
			ДанныеЗаявки.Вставить("Город",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
			ДанныеЗаявки.Вставить("НаселенныйПункт",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
			ДанныеЗаявки.Вставить("Улица",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
			ДанныеЗаявки.Вставить("Дом",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
			ДанныеЗаявки.Вставить("Корпус",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
			ДанныеЗаявки.Вставить("Квартира",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
			ДанныеЗаявки.Вставить("Телефон",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
			ДанныеЗаявки.Вставить("НаименованиеОрганизации",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
			ДанныеЗаявки.Вставить("ИНН",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
			ДанныеЗаявки.Вставить("КПП",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
			ДанныеЗаявки.Вставить("ОГРН",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
			ДанныеЗаявки.Вставить("КодНалоговогоОргана",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
			ДанныеЗаявки.Вставить("ЮрФизЛицо",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
			ДанныеЗаявки.Вставить("Фамилия",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
			ДанныеЗаявки.Вставить("Имя",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
			ДанныеЗаявки.Вставить("Отчество",
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
			
			ПараметрыСобытия.Вставить("ДанныеЗаявки", ДанныеЗаявки);
			
		КонецЕсли;
		
		ДополнительныеПараметрыОбработчикаРезультата = Новый Структура;
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтруктураКоманды"      , СтруктураКоманды);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтатусЗаявки"          , СтатусЗаявки);
		
		ОбработчикРезультата = Новый ОписаниеОповещения(
			"ПриПолученииРезультатаСтатусаЗаявки",
			ЭтотОбъект,
			ДополнительныеПараметрыОбработчикаРезультата);
		ПараметрыСобытия.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		
		ВыполнитьОбработкуОповещения(ОбработчикСтатусаЗаявки, ПараметрыСобытия);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента"
		И ПараметрыОткрытияФормы.statusApplicationFormED = "new" Тогда
		
		ОбработчикСозданияЗаявки = ИнтернетПоддержкаПользователейКлиент.ОбработчикСобытияБизнесПроцесса(КонтекстВзаимодействия, "СозданиеЗаявки");
		
		Если ОбработчикСозданияЗаявки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
		
		
		ПараметрыСобытия = Новый Структура;
		Если ПараметрыОткрытияФормы.Свойство("identifierTaxcomED") Тогда
			ПараметрыСобытия.Вставить("ИдентификаторАбонента", ПараметрыОткрытияФормы.identifierTaxcomED);
		Иначе
			ПараметрыСобытия.Вставить("ИдентификаторАбонента", "");
		КонецЕсли;
		
		ДанныеЗаявки = Новый Структура;
		ДанныеЗаявки.Вставить("ИдентификаторАбонента",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ДанныеЗаявки.Вставить("Индекс",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		ДанныеЗаявки.Вставить("КодРегиона",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		ДанныеЗаявки.Вставить("Район",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		ДанныеЗаявки.Вставить("Город",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		ДанныеЗаявки.Вставить("НаселенныйПункт",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		ДанныеЗаявки.Вставить("Улица",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		ДанныеЗаявки.Вставить("Дом",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		ДанныеЗаявки.Вставить("Корпус",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		ДанныеЗаявки.Вставить("Квартира",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		ДанныеЗаявки.Вставить("Телефон",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		ДанныеЗаявки.Вставить("НаименованиеОрганизации",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		ДанныеЗаявки.Вставить("ИНН",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		ДанныеЗаявки.Вставить("КПП",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		ДанныеЗаявки.Вставить("ОГРН",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		ДанныеЗаявки.Вставить("КодНалоговогоОргана",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		ДанныеЗаявки.Вставить("ЮрФизЛицо",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		ДанныеЗаявки.Вставить("Фамилия",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		ДанныеЗаявки.Вставить("Имя",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		ДанныеЗаявки.Вставить("Отчество",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		
		ПараметрыСобытия.Вставить("ДанныеЗаявки", ДанныеЗаявки);
		
		ДополнительныеПараметрыОбработчикаРезультата = Новый Структура;
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтруктураКоманды"      , СтруктураКоманды);
		ДополнительныеПараметрыОбработчикаРезультата.Вставить("СтатусЗаявки"          , СтатусЗаявки);
		
		ОбработчикРезультата = Новый ОписаниеОповещения(
			"ПриПолученииРезультатаСозданияЗаявки",
			ЭтотОбъект,
			ДополнительныеПараметрыОбработчикаРезультата);
		ПараметрыСобытия.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		
		ВыполнитьОбработкуОповещения(ОбработчикСозданияЗаявки, ПараметрыСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработка переопределяемого события статуса заявки.
//
Процедура ПриПолученииРезультатаСтатусаЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимый тип значения параметра Результат (%1).
				|Ожидается тип Структура.'"),
			Строка(ТипЗнч(Результат)));
	КонецЕсли;
	
	КонтекстВзаимодействия = ДополнительныеПараметры.КонтекстВзаимодействия;
	КонтекстОбработчика    = ДополнительныеПараметры.КонтекстОбработчика;
	Если Результат.Действие = "СтандартнаяОбработка" Тогда
		
		КонтекстОбработчика.Команды.Вставить(0, ДополнительныеПараметры.СтруктураКоманды);
		ИнтернетПоддержкаПользователейКлиент.ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			,
			ДополнительныеПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение, ТолькоСтандартнаяОбработка", Истина, Истина));
		
	ИначеЕсли Результат.Действие = "Завершить" Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли Результат.Действие = "НоваяЗаявка" Тогда
		
		Если ДополнительныеПараметры.СтатусЗаявки <> "Отклонена"
			И ДополнительныеПараметры.СтатусЗаявки <> "Отсутствует" Тогда
			
			ТекстИсключения =
				НСтр("ru = 'Недопустимое значение параметра Действие. Новая заявка может быть создана только
					|при текущем состоянии заявки ""Отсутствует"" или ""Отклонена"".'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			Неопределено,
			"newApplicationED");
		
	ИначеЕсли Результат.Действие = "ПроверитьСтатусЗаявки" Тогда
		
		Если ДополнительныеПараметры.СтатусЗаявки <> "ОжиданиеОбработки" Тогда
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимое значение параметра Действие. Состояние выполнения заявки не может быть проверено,
					|т.к. заявка находится в состоянии ""%1"".'"),
				ДополнительныеПараметры.СтатусЗаявки);
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			Неопределено,
			"getApplicationStatus");
		
	Иначе
		
		// Неизвестное действие.
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра Действие: ""%1"".'"),
			Результат.Действие);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка переопределяемого события создания заявки.
//
Процедура ПриПолученииРезультатаСозданияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимый тип значения параметра Результат (%1).
				|Ожидается тип Структура.'"),
			Строка(ТипЗнч(Результат)));
	КонецЕсли;
	
	КонтекстВзаимодействия = ДополнительныеПараметры.КонтекстВзаимодействия;
	КонтекстОбработчика    = ДополнительныеПараметры.КонтекстОбработчика;
	Если Результат.Действие = "СтандартнаяОбработка" Тогда
		
		КонтекстОбработчика.Команды.Вставить(0, ДополнительныеПараметры.СтруктураКоманды);
		ИнтернетПоддержкаПользователейКлиент.ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			,
			ДополнительныеПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение, ТолькоСтандартнаяОбработка", Истина, Истина));
		
	ИначеЕсли Результат.Действие = "Завершить" Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли Результат.Действие = "ОтправитьЗаявку" Тогда
		
		Если Не Результат.Свойство("ДанныеЗаявки") Тогда
			ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра Результат. Отсутствует поле ДанныеЗаявки.'");
		КонецЕсли;
		
		ДанныеЗаявки = Результат.ДанныеЗаявки;
		Если ТипЗнч(ДанныеЗаявки) <> Тип("Структура") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недопустимый тип значения параметра Результат.ДанныеЗаявки (%1).
					|Ожидается тип Структура.'"),
				Строка(ТипЗнч(ДанныеЗаявки)));
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Массив;
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "endForm"           , "send"));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "postindexED"       , ДанныеЗаявки.Индекс));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "codregionED"       , ДанныеЗаявки.КодРегиона));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresstownshipED" , ДанныеЗаявки.Район));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresscityED"     , ДанныеЗаявки.Город));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresslocalityED" , ДанныеЗаявки.НаселенныйПункт));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressstreetED"   , ДанныеЗаявки.Улица));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressbuildingED" , ДанныеЗаявки.Дом));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addresshousingED"  , ДанныеЗаявки.Корпус));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressapartmentED", ДанныеЗаявки.Квартира));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "addressphoneED"    , ДанныеЗаявки.Телефон));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "agencyED"          , ДанныеЗаявки.НаименованиеОрганизации));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "innED"             , ДанныеЗаявки.ИНН));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "kppED"             , ДанныеЗаявки.КПП));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "ogrnED"            , ДанныеЗаявки.ОГРН));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "codeimnsED"        , ДанныеЗаявки.КодНалоговогоОргана));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "lastnameED"        , ДанныеЗаявки.Фамилия));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "firstnameED"       , ДанныеЗаявки.Имя));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "middlenameED"      , ДанныеЗаявки.Отчество));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "identifierTaxcomED", ДанныеЗаявки.ИдентификаторАбонента));
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "orgindED"          , ДанныеЗаявки.ЮрФизЛицо));
		
		СертификатЭП = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"IDCertificateED");
		
		ПредставлениеСертификата  = "";
		ДвоичныеДанныеСертификата = Подключение1СТакскомВызовСервера.ДвоичныеДанныеСертификата(
			СертификатЭП,
			ПредставлениеСертификата);
		
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "nameCertificateED", ПредставлениеСертификата));
		
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда
			
			СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
			ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "certificateED", СтрокаBase64));
			
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиент.ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			Неопределено,
			ПараметрыЗапроса);
		
	Иначе
		
		// Неизвестное действие.
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра ""Действие"": ""%1"".'"),
			Результат.Действие);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует информацию о завершении бизнес-процесса для потребителя
// программного интерфейса.
//
Процедура ЗарегистрироватьСертификатАбонентаЗавершение(Результат, ОбработчикЗавершения) Экспорт
	
	Если ОбработчикЗавершения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Расшифрование маркера, возвращенного сервисом ИПП для подтверждения
// подлинности владельца сертификата. Кодограмма хранится в сессионном параметре
// с именем "markerED".
//
// Параметры:
// КонтекстВзаимодействия - Структура - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
// СтруктураКоманды Структура - данные команды сервиса ИПП.
// КонтекстОбработчика - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
// ТекущаяФорма - УправляемаяФорма - текущая форма ИПП.
//
Процедура РасшифроватьКонтрольныйМаркерЭПСервера(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТекущаяФорма)
	
	СообщениеОбОшибкеДляПользователя = НСтр("ru = 'Ошибка при проверке пароля сертификата.
		|Подробнее см. в журнале регистрации.'");
	
	// Получение необходимых сессионных параметров для выполнения операции расшифрования.
	ПараметрыДляРасшифрования = СессионныеПараметрыДляРасшифрования(КонтекстВзаимодействия.КСКонтекст);
	
	Если ПараметрыДляРасшифрования.markerED = Неопределено Тогда
		// Ошибка бизнес-процесса: отсутствует обязательный параметр "markerED".
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Отсутствует маркер аутентификации (markerED)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеМаркера = Base64Значение(ПараметрыДляРасшифрования.markerED);
	Исключение
		// Ошибка получения двоичных данных маркера из base64-строки
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		СообщениеДляЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не удалось получить двоичные данные маркера (markerED).
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеДляЖурналаРегистрации);
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
	КонецПопытки;
	
	// Получение внутреннего представления ссылки сертификата
	Если ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED_Dop) Тогда
		
		// Ссылка дополнительного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED_Dop;
		
		УдаляемыеПараметры = Новый Массив;
		УдаляемыеПараметры.Добавить(Новый Структура("Имя", "IDCertificateED_Dop"));
		УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			УдаляемыеПараметры,
			КонтекстОбработчика);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыДляРасшифрования.IDCertificateED) Тогда
		
		// Ссылка основного сертификата
		СертификатЭП = ПараметрыДляРасшифрования.IDCertificateED;
		
	Иначе
		
		// Не удалось получить ссылку сертификата - завершение бизнес-процесса
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата. Не указан сертификат (IDCertificateED, IDCertificateED_Dop)'"));
		ПоказатьПредупреждение(, СообщениеОбОшибкеДляПользователя);
		Возврат;
		
	КонецЕсли;
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись.
	// Формирование описания данных для расшифрования.
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Проверка пароля сертификата'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	
	ОписаниеДанных.Вставить("ЭтоАутентификация"        , Истина);
	ОписаниеДанных.Вставить("Данные"                   , ДвоичныеДанныеМаркера);
	ОписаниеДанных.Вставить("СертификатыШифрования"    , Новый Массив);
	ОписаниеДанных.Вставить("БезПодтверждения"         , Истина);
	ОписаниеДанных.Вставить("СообщитьОЗавершении"      , Ложь);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	
	ОтборСертификатов = Новый Массив;
	ОтборСертификатов.Добавить(СертификатЭП);
	ОписаниеДанных.Вставить("ОтборСертификатов", ОтборСертификатов);
	
	// Дополнительные параметры для обработчика оповещения
	ДопПараметрыОбработчика = Новый Структура;
	ДопПараметрыОбработчика.Вставить("СтруктураКоманды"      , СтруктураКоманды);
	ДопПараметрыОбработчика.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
	ДопПараметрыОбработчика.Вставить("ТекущаяФорма"          , ТекущаяФорма);
	ДопПараметрыОбработчика.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
	
	// Вызов программного интерфейса СтандартныеПодсистемы.ЭлектроннаяПодпись
	// для расшифрования контрольного маркера.
	ЭлектроннаяПодписьКлиент.Расшифровать(
		ОписаниеДанных,
		,
		Новый ОписаниеОповещения("РасшифрованиеЗавершение", ЭтотОбъект, ДопПараметрыОбработчика));
	
КонецПроцедуры

// Возвращает сессионные параметры, необходимые для расшифрования
// контрольного маркера ЭП.
//
Функция СессионныеПараметрыДляРасшифрования(КСКонтекст)
	
	Результат = Новый Структура;
	Результат.Вставить("markerED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "markerED"));
	Результат.Вставить("IDCertificateED_Dop",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED_Dop"));
	Результат.Вставить("IDCertificateED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
	
	Возврат Результат;
	
КонецФункции

// Обработка завершения расшифрования контрольного маркера
Процедура РасшифрованиеЗавершение(РезультатРасшифрования, ДопПараметры) Экспорт
	
	Если РезультатРасшифрования.Успех Тогда
		
		РасшифрованныеДанные = РезультатРасшифрования.РасшифрованныеДанные;
		Если ТипЗнч(РасшифрованныеДанные) = Тип("Строка") Тогда
			// Результат - во временном хранилище.
			РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
		КонецЕсли;
		
		// Запись расшифрованного маркера в сессионные параметры.
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(
			ДопПараметры.КонтекстВзаимодействия.КСКонтекст,
			"openMarkerED",
			РасшифрованныеДанные,
			"sessionParameter");
		
		// Продолжение выполнения бизнес-процесса
		ИнтернетПоддержкаПользователейКлиент.ОбработкаКомандСервиса(
			ДопПараметры.КонтекстВзаимодействия,
			ДопПараметры.ТекущаяФорма,
			,
			ДопПараметры.КонтекстОбработчика,
			Новый Структура("ПродолжитьВыполнение", Истина));
		
	Иначе
		
		// Завершить бизнес-процесс, т.к. дальнейшее продолжение
		// бизнес-процесса невозможно.
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(ДопПараметры.КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Просмотр причины отклонения заявки ЭДО в диалоге предупреждения.
//
Процедура ПоказатьПричинуОтклоненияЗаявкиЭДО(КонтекстВзаимодействия) Экспорт
	
	ОписаниеПричины = ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия);
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ОписаниеПричины.КодОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Код ошибки: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеПричины.КодОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ОписаниеПричины.ТекстОшибки;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Неизвестная ошибка. Обратитесь в службу техподдержки.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

// Чтение причины отклонения заявки ЭДО из сессионных параметров.
//
Функция ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"codeErrorED"));
	Результат.Вставить("ТекстОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"textErrorED"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст технических параметров ЭДО для формирования письма в службу
// тех. поддержки.
//
Функция ТекстТехническихПараметровЭДО(КонтекстВзаимодействия, Знач Сертификат = Неопределено) Экспорт
	
	ТехническиеПараметры = НСтр("ru = 'Параметры участника обмена ЭД:
		|
		|- отпечаток сертификата: %1'");
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		Сертификат = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"IDCertificateED");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ОтпечатокСертификата = Подключение1СТакскомВызовСервера.ОтпечатокСертификата(Сертификат);
	Иначе
		ОтпечатокСертификата = "";
	КонецЕсли;
	
	ТехническиеПараметры = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТехническиеПараметры,
		ОтпечатокСертификата);
	
	КодОшибки = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"codeErrorED");
	ТекстОшибки = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"textErrorED");
	
	Если НЕ ПустаяСтрока(КодОшибки) Тогда
		
		СтрДанныхОшибки = Символы.ПС + НСтр("ru = '- код ошибки: %1,
			|- описание ошибки: %2'");
		
		ТехническиеПараметры = ТехническиеПараметры
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрДанныхОшибки,
				КодОшибки,
				ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТехническиеПараметры;
	
КонецФункции

// Удаление параметров контекста. Также удаляются общие стартовые параметры.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрКоманды Из МассивПараметров Цикл

		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти
