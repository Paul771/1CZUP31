////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиСлужебныйКлиент: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму разбора банковской выписки.
//
// Параметры:
//    * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение с выпиской банка.
//
Процедура РазобратьВыпискуБанка(СообщениеОбмена) Экспорт
	
	Если ОбменСБанкамиСлужебныйВызовСервера.УстановленныеПодписиВалидны(СообщениеОбмена) Тогда
		ОбменСБанкамиКлиентПереопределяемый.РазобратьВыпискуБанка(СообщениеОбмена);
	Иначе
		ШаблонТекста = НСтр("ru = 'Разбор документа %1.
							|Документ не обработан, так как содержит невалидные подписи.'");
		Текст = СтрШаблон(ШаблонТекста, СообщениеОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик асинхронного вызова
Процедура ПриОткрытииЭлектронногоДокумента(Результат, Параметры) Экспорт
	
	ОткрытьЭДДляПросмотра(Параметры, , , Истина);
	
КонецПроцедуры

// Возвращает расширение файла.
//
// Параметры:
//  ПутьКФайлу - Строка - полный путь к файлу.
// 
// Возвращаемое значение:
// Строка - расширение файла.
//
Функция РасширениеФайла(ПутьКФайлу) Экспорт
	
	Позиция = СтрНайти(ПутьКФайлу, ".", НаправлениеПоиска.СКонца);
	
	Если Позиция > 0 Тогда
		Возврат Сред(ПутьКФайлу, Позиция + 1);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Удаляет пароль, сохраненный на время сеанса.
//
// Параметры:
//  ОбъектПривязки - Ссылка - ссылка на объект, к которому относится пароль.
//
Процедура УдалитьПарольИзСеанса(ОбъектПривязки) Экспорт
	
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками.ПаролиСеанса"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие")
		И СоответствиеСертификатаИПароля.Получить(ОбъектПривязки) <> Неопределено Тогда
		Соответствие = Новый Соответствие;
		Для Каждого Элемент Из СоответствиеСертификатаИПароля Цикл
			Если Элемент.Ключ <> ОбъектПривязки Тогда
				Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		СоответствиеПаролей = Новый ФиксированноеСоответствие(Соответствие);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками.ПаролиСеанса", СоответствиеПаролей);
	КонецЕсли;
	
КонецПроцедуры

#Область Сбербанк

// Получает большой пакет из банка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//          * Результат - Структура - результат выполнения процедуры, содержит поля:
//                ** Успех - Булево - если Истина, то операция выполнена успешно, иначе Ложь.
//                ** МассивТомов - Массив - полученные данные в виде томов
//                        *** Строка - данные единичного тома.
//          * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ИдентификаторОрганизации - Строка - идентификатор организации в системе банка.
//  ИдентификаторЗапроса - Строка - идентификатор запроса, по которому нужно получить большой пакет.
//  КоличествоТомов - Число - количество томов, которые нужно получить из банка.
//
Процедура ПолучитьМноготомныйДокументЧерезТокенСбербанк(Оповещение, НастройкаОбмена, ИдентификаторОрганизации, ИдентификаторЗапроса, КоличествоТомов) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияБольшогоДокумента", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ДополнительныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	ДополнительныеПараметры.Вставить("КоличествоТомов", КоличествоТомов);
	ДополнительныеПараметры.Вставить("ТекущийТом", 0);
	ДополнительныеПараметры.Вставить("МассивТомов", Новый Массив);
	
	ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры);
	
КонецПроцедуры

// Сохраняет журнал в файл
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  КаталогЖурналирования - Строка - пусть на диске клиента, куда сохраняется журнал.
//
Процедура СохранитьЖурналВФайл(НастройкаОбмена, КаталогЖурналирования) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогЖурналирования);
	ДополнительныеПараметры.Вставить("КаталогЖурналирования", Каталог);
	#Если ВебКлиент Тогда
		Оповещение = Новый ОписаниеОповещения(
			"СохранитьЖурналВФайлПослеПодключенияРасширения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	#Иначе
		СохранитьЖурналВФайлПослеПодключенияРасширения(Истина, ДополнительныеПараметры);
	#КонецЕсли
	
КонецПроцедуры

// Устанавливает соединение с сервером банка и производит процедуру аутентификации.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//          * РезультатВызова - Булево - процедура выполнена успешно(истина) или нет (Ложь).
//          * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  ЭтоТест - Булево - если Истина, то будет недоступно сохранение пароля.
//
Процедура УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, НастройкаОбмена, ЭтоТест = Ложь) Экспорт
	
	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификацииНаСервере", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИмяМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	ОповещениеПослеАутентификацииНаАппаратномУстройстве = Новый ОписаниеОповещения(
		"УстановитьВиртуальныйКаналПослеАутентификацииНаАппаратномУстройствеСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	АутентифицироватьсяНаТокенеСбербанка(
		ОповещениеПослеАутентификацииНаАппаратномУстройстве, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, НастройкаОбмена, , ЭтоТест);
	
КонецПроцедуры

// Открывает канал на токене Сбербанка. Аутентификация на токене уже должна быть выполнена.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//               * РезультатВызова - Булево - Если Истина, то канал создан, иначе Ложь;
//               * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ИмяМодуля - Строка - идентификатор внешней компоненты.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена.
//
Процедура УстановитьКаналНаТокенеСбербанк(Оповещение, ИмяМодуля, НастройкаОбмена = Неопределено) Экспорт
	
	НазваниеБизнесСистемы = ОбменСБанкамиСлужебныйВызовСервера.НазваниеБизнесСистемыСбербанк();
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяМодуля);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеУстановкиВиртуальногоКанала", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);

	Оповещение = Новый ОписаниеОповещения(
		"УстановитьКаналПослеОпределенияНомераБизнесСистемыСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОпределитьНомерБизнесСистемыСбербанк(Оповещение, ПодключаемыйМодуль, НазваниеБизнесСистемы);
	
КонецПроцедуры

// Отправляет тикеты в банк и получает ответы.
//
// Параметры:
//    Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//     * РезультатВызова - Строка - ответ банка по переданному тикету
//     * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//    ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//    Тикет - Строка - тикет, по которым требуется получение ответа;
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена.
//
Процедура ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, Тикет, НастройкаОбмена = Неопределено) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	ПодключаемыйМодуль1С = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСтатусаЗапроса", Оповещение);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСтатусаЗапросаСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияСтатусаЗапросаСбербанк", ЭтотОбъект);
		
	ИдентификаторСессии = ЗначениеИзКэшаСбербанк("ИдентификаторСессии");
	Ответ = "";
	
	ПодключаемыйМодуль1С.НачатьВызовПолучитьСтатусЗапросаSRP(
		Оповещение, Тикет, ИдентификаторОрганизации, ИдентификаторСессии, Ответ);

КонецПроцедуры

// Отправляет запрос новых документов в Сбербанк
//
// Параметры:
//    ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое по результату выполнения:
//       * Результат - Структура - данные подписи:
//            ** Успех - Булево - признак успешности проведенной операции, если Истина - операция выполнена, иначе Ложь;
//            ** Тикет - Строка - ответный тикет банка, присутствует только если Успех = Истина;
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  СертификатПодписи - СправочникСсылка.СертификатыЭлектроннойПодписиИШифрования - ссылка на сертификат подписи;
//  ИдентификаторСертификата - Строка - идентификатор сертификата подписи на токене.
//
Процедура ОтправитьЗапросНовыхДокументовСбербанк(Оповещение, НастройкаОбмена, СертификатПодписи, ИдентификаторСертификата) Экспорт
	
	РеквизитыНастройкиОбмена = Новый Структура("ИдентификаторОрганизации, ИмяВнешнегоМодуля");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	СтрокаПодписи = "ATTRIBUTES" + Символ(10) + "OrgId=" + РеквизитыНастройкиОбмена.ИдентификаторОрганизации + Символ(10)
		+ "RequestId=" + ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаПодписи);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПодписиBase64", СтрокаПодписиBase64);
	ДополнительныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиЗапроса", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиОбмена.ИдентификаторОрганизации);
	ДополнительныеПараметры.Вставить("СертификатПодписи", СертификатПодписи);
	
	Представление = НСтр("ru = 'Запрос новых документов'");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьЗапросНовыхДокументовПослеПодписиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ПодписатьДанныеСбербанк(ОписаниеОповещения, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, СтрокаПодписиBase64,
		ИдентификаторСертификата, Представление);

КонецПроцедуры

// Производит аутентификацию на сервере сбербанка по сертификату. Канал уже должен быть создан.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - вызывается после выполнения процедуры
//      * Результат - Булево - результат аутентификации. Возможные значения:
//          - Истина - аутентификация выполнена
//          - Ложь - при аутентификации произошла ошибка
//  ИмяВнешнегоМодуля - Строка - идентификатор внешней компоненты банка;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
Процедура АутентифицироватьсяПоСертификатуСбербанк(Оповещение, ИмяВнешнегоМодуля, НастройкаОбмена = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
	
	ОповещениеПослеУстановкиКанала = Новый ОписаниеОповещения(
		"ПослеПолученияДанныхСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьСертификатСТокенаСбербанк(ОповещениеПослеУстановкиКанала, ИмяВнешнегоМодуля);

КонецПроцедуры

// Производит процесс аутентификации на токене Сбербанка.
// 
// Параметры:
//    ОповещениеОписание - оповещение после выполнения аутентификации на токене:
//          Результат - Булево - Истина, если аутентификация выполнена успешно, иначе Ложь;
//          ДополнительныеПараметры - Структура - параметры описания оповещения;
//    ИмяМодуля - Строка - идентификатор внешней компоненты;
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком;
//    ПринудительнаяАутентификация - Булево - если Истина, то аутентификация будет производится даже если она была выполнена ранее;
//    ЭтоТест - Булево - если Истина, то будет недоступно сохранение пароля.
//
Процедура АутентифицироватьсяНаТокенеСбербанка(ОповещениеОВыполнении, ИмяМодуля, НастройкаОбмена = Неопределено, ПринудительнаяАутентификация = Ложь, ЭтоТест = Ложь) Экспорт
	
	Если Не ЭтоТест И НЕ ПринудительнаяАутентификация И ЗначениеИзКэшаСбербанк("АутентификацияНаТокенеВыполнена") = Истина
		И ЗначениеЗаполнено(НастройкаОбмена) И ЗначениеИзКэшаСбербанк("ТекущаяНастройкаОбмена") = НастройкаОбмена Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
		Параметры.Вставить("ОповещениеПослеАутентификацииНаТокене", ОповещениеОВыполнении);
		Оповещение = Новый ОписаниеОповещения(
			"ОпределитьНеобходимостьПовторнойАутентификацииНаТокенеПослеПолученияСпискаБизнесСистемСбербанк",
			ЭтотОбъект, Параметры);
		ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяМодуля);
		ПолучитьБизнесСистемыНаТокенеСбербанк(Оповещение, ПодключаемыйМодуль);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификацииНаТокене", ОповещениеОВыполнении);
	ДополнительныеПараметры.Вставить("ПринудительнаяАутентификация", ПринудительнаяАутентификация);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ЭтоТест", ЭтоТест);
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"ТихийСтартПослеПодключенияВКСбербанка", ЭтотОбъект, ДополнительныеПараметры);
		
	ПодключитьВнешнююКомпонентуСбербанка(ОповещениеПослеПодключенияВК, ИмяМодуля);

	
КонецПроцедуры

// Определяет валидность установленных подписей и сохраняет результат в ЭД.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после проверки подписи электронных документов;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена со Сбербанком;
//  Параметры - Структура - содержит данные для обработки.
//
Процедура ОпределитьСтатусыПодписейСбербанк(Оповещение, НастройкаОбмена, МассивСообщенийОбмена) Экспорт

	Если МассивСообщенийОбмена.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
		Возврат;
	КонецЕсли;
	
	КопияМассиваСообщенийОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивСообщенийОбмена);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеПроверкиПодписи", Оповещение);
	Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Параметры.Вставить("МассивСообщенийОбмена", КопияМассиваСообщенийОбмена);
	
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеАутентификацииНаТокенеОпределитьСтатусыПодписейСбербанк", ЭтотОбъект, Параметры);

	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);
		
	АутентифицироватьсяНаТокенеСбербанка(
		ОписаниеОбработчика, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, НастройкаОбмена);
	
КонецПроцедуры

// Возвращает закэшированный параметр обмена со сбербанком.
//
// Параметры:
//  НазваниеПараметра  - Строка - название параметра.
//
// Возвращаемое значение:
// Произвольный - значение параметра.
//
Функция ЗначениеИзКэшаСбербанк(НазваниеПараметра) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие") Тогда
		ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
		Если ПараметрыОбменаСбербанк <> Неопределено И ПараметрыОбменаСбербанк.Свойство(НазваниеПараметра) Тогда
			Возврат ПараметрыОбменаСбербанк[НазваниеПараметра];
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Выполняет очистку закэшированных параметров обмена со Сбербанком
//
Процедура ОчиститьДанныеАвторизацииСбербанк() Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие") Тогда
		ПараметрыПодсистемыОбменСБанками.Удалить("Сбербанк");
	КонецЕсли;
	
КонецПроцедуры

// обработчик асинхронного вызова из ОбменСБанкамиКлиент.ПроверитьПодписьСбербанк
Процедура ЗавершитьТестПодписиСертификатаСбербанк(ПодписьВерна, Параметры) Экспорт
	
	Если ПодписьВерна = Неопределено Тогда
		Параметры.Контекст.ОписаниеОшибки = НСтр("ru = 'При проверке подписи произошла ошибка'");
	ИначеЕсли НЕ ПодписьВерна Тогда
		Параметры.Контекст.ОписаниеОшибки = НСтр("ru = 'Установленная подпись неверна'");
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаПодписиСертификата, Параметры.Контекст);
	
КонецПроцедуры

// Осуществляет проверку подписи на токене сбербанка.
//
// Параметры:
//  Оповещение- ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//       * ПодписьВерна - Булево, Неопределено - признак валидности подписи, Неопределено в случае возникновения ошибки.
//       * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодписанныеДанные - Строка - подписанные данные в формате Base64.
//  Подпись - Строка - двоичные данные подписи в формате Base64.
//  Сертификат - Строка - сертификат в формате Base64;
//  ИмяМодуля - Строка - идентификатор внешней компоненты Сбербанка.
//
Процедура ПроверитьПодписьНаТокенеСбербанк(Оповещение, ПодписанныеДанные, Подпись, Сертификат, ИмяМодуля) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеПроверкиПодписи", Оповещение);
	
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяМодуля);

	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиПодписиНаТокенеСбербанк", ЭтотОбъект, Параметры,
		"ОбработатьОшибкуПослеПроверкиПодписиНаТокенеСбербанк", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовПроверитьПодписьДанныхЧерезVPNKeyTLS(
		Оповещение, ПодписанныеДанные, Подпись, Сертификат);
	
КонецПроцедуры

// Осуществляет подпись данных на токене Сбербанка.
//
// Параметры:
//    ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое по результату выполнения:
//       * Результат - Структура - данные подписи:
//            ** Успех - Булево - признак успешности проведенной операции, если Истина - операция выполнена, иначе Ложь;
//            ** ЭП - Строка - данные подписи в Base64;
//            ** ТекстОшибки - Строка - текст ошибки. Элемент присутствует только если возникла ошибка;
//    ИмяМодуля - Строка - идентификатор внешней компоненты банка;
//    СтрокаПодписи - Строка - подписываемые данные;
//    ИдентификаторСертификата - Строка - идентификатор сертификата на токене банка;
//    Представление - Строка, Ссылка - отображается при подписании на сенсорном или экранном токене.
//
Процедура ПодписатьДанныеСбербанк(ОписаниеОповещения, ИмяМодуля, СтрокаПодписи, ИдентификаторСертификата, Представление) Экспорт
	
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяМодуля);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодписи", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СтрокаПодписи", СтрокаПодписи);
	ДополнительныеПараметры.Вставить("ИдентификаторСертификата", ИдентификаторСертификата);
	ДополнительныеПараметры.Вставить("Представление", Представление);
	ДополнительныеПараметры.Вставить("ИмяМодуля", ИмяМодуля);
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьДанныеПослеПолученияИнформацииОТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьИнформациюОТокенеСбербанк(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

// Осуществляет подбор сертификата подписи на основе установленного соединения.
//
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры:
//       * Результат - возвращаемое значение, возможные значения:
//           - Структура - данные сертификата;
//                ** ИдентификаторСертификата - Строка - идентификатор сертификата на токене;
//                ** СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - найденный сертификат;
//           - Неопределено - произошла ошибка;
//           - КодВозвратаДиалога.Отмена - пользователь отказался от выбора сертификата;
//       * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения;
//    ИмяВнешнегоМодуля - Строка - идентификатор внешней компоненты банка;
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//    ОграничениеПоСертификатам - Массив - сертификаты, которые доступны для использования в текущей операции.
//
Процедура ОпределитьСертификатПодписиСбербанк(Оповещение, ИмяВнешнегоМодуля, НастройкаОбмена, ОграничениеПоСертификатам = Неопределено) Экспорт

	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяВнешнегоМодуля);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОпределенияСертификата", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Если ОграничениеПоСертификатам <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОграничениеПоСертификатам", ОграничениеПоСертификатам);
	КонецЕсли;
	
	ОповещениеПослеПолученияСертификатов = Новый ОписаниеОповещения(
		"ПодобратьСертификатПослеПолученияСпискаСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьДанныеСертификатовСТокенаСбербанк(ОповещениеПослеПолученияСертификатов, ПодключаемыйМодуль);
	
КонецПроцедуры

// Получает идентификаторы сертификатов с токена Сбербанка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры,
//   которая будет вызвана после завершения вызова метода со следующими параметрами:
//      * Результат - Структура - результат выполнения метода:
//           ** Успех - Булево - признак успешности выполнения процедуры;
//           ** ТекстОшибки - Строка - содержит текст ошибки, если Успех = Ложь;
//           ** СоответствиеСертификатов - Соответствие - содержит идентификаторы сертификатов с токена:
//                 *** Ключ - Строка - идентификатор сертификата токена;
//                 *** Значение - ДвоичныеДанные - двоичные данные сертификата;
//  ПодключаемыйМодуль - COMОбъект - внешняя компонента банка.
//
Процедура ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСпискаСертификатов", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ОповещениеПослеПолученияСпискаИдентификаторов = Новый ОписаниеОповещения(
		"ПослеПолученияСпискаСертификатовСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияСпискаИдентификаторовСертификатов", ЭтотОбъект);
		
	ИдентификаторыСертификатов = "";

	ПодключаемыйМодуль.НачатьВызовПолучитьСписокИдентСертификатовVPNKeyTLS(
		ОповещениеПослеПолученияСпискаИдентификаторов, "0", ИдентификаторыСертификатов);
	
КонецПроцедуры

Процедура ПослеПолученияСпискаБизнесСистемСТокенаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении списка бизнес систем.'");
		ТекстОшибки = НСтр("ru = 'Внешняя компонента VpnKey-TLS при получении списка бизнес систем вернула код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ОбработатьОшибку(Операция, ТекстОшибки);
		ОчиститьДанныеАвторизацииСбербанк();
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
	Иначе
		Результат = Новый Структура("Успех, БизнесСистемы", Истина, ПараметрыВызова.Получить(0));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаБизнесСистем, Результат);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСпискаБизнесСистемНаТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Операция = НСтр("ru = 'Получение списка бизнес систем на аппаратном устройстве.'");
	ТекстСообщения = НСтр("ru = 'Не удалось получить список бизнес систем с аппаратного устройства'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОбработатьОшибку(Операция, ТекстОшибки);
	ОчиститьДанныеАвторизацииСбербанк();
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаБизнесСистем, Результат);

КонецПроцедуры

// Обработчик асинхронного метода ОбменСБанкамиКлиент.ПроверитьУстановкуПодписиСбербанк.
//
// Параметры:
//    Успех - Булево - признак аутентификации, если Истина, то аутентификация была успешно выполнена.
//    Параметры - Структура - данные для проверки подписи:
//       * Контекст - Структура - контекст вызова;
//       * ОповещениеПослеПодписания - ОписаниеОповещения - оповещение после проверки подписи;
//       * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат установленной подписи.
//
Процедура ПроверитьУстановкуПодписиПослеАутентификацииНаТокенеСбербанк(Успех, Параметры) Экспорт
	
	Если Не Успех Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось аутентифицироваться на банковском ключе'");
		Параметры.Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Параметры.Контекст);
		Возврат;
	КонецЕсли;

	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(Параметры.ИмяВнешнегоМодуля);

	ОповещениеПослеПолученияСпискаСертификатов = Новый ОписаниеОповещения(
		"ПроверитьУстановкуПодписиПолученияСертификатовСТокенаСбербанк", ЭтотОбъект, Параметры);
		
	ПолучитьДанныеСертификатовСТокенаСбербанк(ОповещениеПослеПолученияСпискаСертификатов, ПодключаемыйМодуль);
	
КонецПроцедуры

// Выполняет подтверждение электронных документов с помощью SMS
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения подтверждения
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  МассивСообщенийОбмена - Массив - сообщения, которые нужно подтвердить
//    * ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с электронным документом.
//
Процедура ВыполнитьПодтверждениеДокументовСбербанк(Оповещение, НастройкаОбмена, МассивСообщенийОбмена) Экспорт
	
	Если Не МассивСообщенийОбмена.Количество() Тогда // подтверждены все документы
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = МассивСообщенийОбмена.Получить(0);
	МассивСообщенийОбмена.Удалить(0);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ДополнительныеПараметры.Вставить("АутентификацияПроизводилась", Ложь);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияГенерацииSMSСбербанк(НастройкаОбмена, СообщениеОбмена);
	
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеГенерацииSMSСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеГенерацииSMSСбербанк(Результат, ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик, вызываемый из ОбменСБанкамиКлиент.ПолучитьВыпискуБанка
//
// Параметры:
//  Результат - Структура - см. описание в ДлительныеОперацииКлиент.ОжидатьЗавершение
//  ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПослеФормированияИОтправкиЗапросовВыпискиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
		
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОперации.ГотовыеВыписки.Количество() Тогда
			ДополнительныеПараметры.Вставить("ГотовыеВыписки", РезультатОперации.ГотовыеВыписки);
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
				"ПолучитьВыпискуСбербанкаПослеВопросаОбИхНаличии", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'В базе уже есть выписки банка за указанный период.
									|Загрузить выписки из базы или получить новые из банка?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(Истина, НСтр("ru = 'Загрузить из базы'"));
			Кнопки.Добавить(Ложь, НСтр("ru = 'Получить из банка'"));
			Заголовок = НСтр("ru = 'Получение выписки'");
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, , Истина, Заголовок);
		ИначеЕсли РезультатОперации.МассивТикетов.Количество() Тогда // запросы были отправлены в банк и получены тикеты
			ВладелецФормы = ДополнительныеПараметры.Владелец;
			ПараметрыФормы = Новый Структура("МассивСообщенийОбмена, НастройкаОбмена, ГотовыеВыписки, ДатаНачала, ДатаОкончания,
											|ПринудительноеПолучениеВыписки, НомерСчета");
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
			ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
			ПараметрыФормы.Вставить("МассивТикетов", РезультатОперации.МассивТикетов);
			ПараметрыФормы.Вставить("МассивСообщенийОбмена", РезультатОперации.МассивСообщенийОбмена);
			ПараметрыФормы.Вставить("ГотовыеВыписки", Новый Массив);
			ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
		ИначеЕсли РезультатОперации.ИспользуетсяТокен Тогда
			ДополнительныеПараметры.Вставить("ГотовыеВыписки", Новый Массив);
			ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", РезультатОперации.МассивСообщенийОбмена);
			ОбработчикПослеПодписания = Новый ОписаниеОповещения(
				"ОтправитьЗапросВыпискиПослеПодписанияСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПодписатьЭДСбербанк(
				ОбработчикПослеПодписания, ДополнительныеПараметры.НастройкаОбмена, РезультатОперации.МассивСообщенийОбмена);
		Иначе //отправка по логину, требуется установка сессии.
			ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", РезультатОперации.МассивСообщенийОбмена);
			Обработчик = Новый ОписаниеОповещения(
				"ПолучитьВыпискиПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ВыполнитьБазовуюАутентификациюСбербанк(Обработчик, ДополнительныеПараметры.РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля,
				ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.НастройкаОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит процесс аутентификации на сервере банка по логину и паролю.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения метода
//   * Результат - Структура - результат аутентификации, содержит поля:
//       * Успех - Булево - результат аутентификации
//       * ТребуетсяТокен - Булево - возвращает Истина, если Успех = Ложь и требуется токен.
//   * ДополнительныеПараметры - Структура - контекст выполнения метода
//  ИмяВнешнегоМодуля - Строка - название внешней компоненты банка
//  КлючСессии - Произвольный - ключ сохранения сессии на сервере
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком
//  ЛогинПароль - Структура - логин и пароль для аутентификации, содержит поля:
//    * Логин - Строка - имя пользователя
//    * Пароль - Строка - пароль пользователя.
//
Процедура ВыполнитьБазовуюАутентификациюСбербанк(Оповещение, ИмяВнешнегоМодуля, КлючСессии, НастройкаОбмена = Неопределено, ЛогинПароль = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, ТребуетсяТокен", Ложь, Ложь);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеБазовойАутентификации", Оповещение);
	ДополнительныеПараметры.Вставить("ЛогинПароль", ЛогинПароль);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("СтруктураВозврата", СтруктураВозврата);
	ДополнительныеПараметры.Вставить("КлючСессии", КлючСессии);
	ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"ПолучитьФродПараметрыПослеПодключенияВКСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ПодключитьВнешнююКомпонентуСбербанка(ОповещениеПослеПодключенияВК, ИмяВнешнегоМодуля);
	
КонецПроцедуры

// Обработчик оповещения из ОбменСБанкамиКлиент
Процедура ОтправитьЗапросВыпискиПослеПодписанияСбербанк(Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ОтправитьЗапросВыпискиПослеУстановленияКаналаСбербанк", ЭтотОбъект, Параметры);
		
	УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(ОписаниеОбработчика, Параметры.НастройкаОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезДополнительнуюОбработку

// Выполняет смс-подтверждение платежей через дополнительную обработку
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры
//  МассивСообщенийОбмена - Массив - сообщения обмена, содержащие неподтвержденные платежи
//      * СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена
//  ВнешнийПодключаемыйМодуль - ВнешняяОбработкаОбъект - подключаемый модуль банка
//  СертификатXML - Строка - сертификат клиента.
//
Процедура ПодтвердитьПлатежиЧерезДополнительнуюОбработку(Оповещение, МассивСообщенийОбмена, ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Если МассивСообщенийОбмена.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = МассивСообщенийОбмена.Получить(0);
	МассивСообщенийОбмена.Удалить(0);
	
	ЗначенияРеквизитовСообщенияОбмена = Новый Структура("ВнешнийИдентификатор");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСообщенияОбмена(СообщениеОбмена, ЗначенияРеквизитовСообщенияОбмена);
	
	ВнешниеИдентификаторы = Новый Массив;
	ВнешниеИдентификаторы.Добавить(ЗначенияРеквизитовСообщенияОбмена.ВнешнийИдентификатор);
	ПараметрыЗапроса = Новый Структура("ИдентификаторыДокументов", ВнешниеИдентификаторы);
	
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 4, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка инициализации сессии подтверждения.
							|Код ошибки: ДО-%1
							|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Инициализация сессии подтверждения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, СообщениеОбмена);
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(
			Оповещение, МассивСообщенийОбмена, ВнешнийПодключаемыйМодуль, СертификатXML);
		Возврат;
	КонецПопытки;
	
	Сессия = Результат.Сессия;
	
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьКодПодтвержденияПоSMS(СертификатXML, Сессия);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки кода подтверждения платежного поручения.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка кода подтверждения платежного поручения'");
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, СообщениеОбмена);
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(
			Оповещение, МассивСообщенийОбмена, ВнешнийПодключаемыйМодуль, СертификатXML);
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторСессии", Сессия.Идентификатор);
	ПараметрыФормы.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сессия", Сессия);
	ДополнительныеПараметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СертификатXML", СертификатXML);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ДополнительныеПараметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодтвердитьПлатежЗавершитьЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ПодтверждениеПлатежныхПорученийПоSMS", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

// Получает данные сертификата через дополнительную обработку
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//      * Результат - Неопределено, если произошла ошибка или пользователь отказался от ввода пароля;
//                  - Структура - данные сертификата. Содержит следующие поля:
//                     * Отпечаток - Строка - отпечаток сертификата
//                     * СертификатXML - Строка - данные сертификата в Base64
//                     * Пароль - Строка - пароль к закрытой части сертификата.
//      * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодключаемыйМодуль - УправляемаяФорма - внешний модуль обмена с банком;
//  ИдентификаторХранилища - Строка - серийный номер аппаратного устройства.
//
Процедура ПолучитьСертификатЧерезДополнительнуюОбработку(Оповещение, ПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Попытка
		СертификатыНаУстройстве = ПодключаемыйМодуль.СертификатыВХранилище(ИдентификаторХранилища);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения банковских сертификатов.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение банковских сертификатов'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		Возврат;
	КонецПопытки;
	
	Если СертификатыНаУстройстве.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'На банковском ключе отсутствуют сертификаты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	ДанныеВыбора = Новый Соответствие;
		
	Для Каждого СертификатXML Из СертификатыНаУстройстве Цикл
		ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ПодключаемыйМодуль, СертификатXML);
		Если ДанныеСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("СертификатBase64", СертификатXML);
		СтруктураСертификата.Вставить("Псевдоним", ДанныеСертификата.Псевдоним);
		ДанныеВыбора.Вставить(ДанныеСертификата.Отпечаток, СтруктураСертификата);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ДанныеВыбора", ДанныеВыбора);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСертификата", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВыбораСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ВыборСертификатаДляДобавления", ПараметрыФормы, , , , , Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПослеВыбораСертификатаЧерезДополнительнуюОбработку(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификата, Неопределено);
		Возврат;
	КонецЕсли;
	
	
	СертификатXML = ДанныеВыбора.СертификатBase64;
	Отпечаток = ДанныеВыбора.Отпечаток;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ДополнительныеПараметры.ПодключаемыйМодуль, СертификатXML, ДанныеВыбора.Пароль);
		
	Если НЕ ПарольУстановлен Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификата, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатXML", СертификатXML);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиСоединенияЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	УстановитьСоединениеЧерезДополнительнуюОбработку(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, СертификатXML);
	
КонецПроцедуры

// Осуществляет проверку валидности подписей
//
// Параметры
//    ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//    Параметры                 - Структура:
//       НастройкаОбмена                        - СправочникСсылка.НастройкиОбменСБанками - настройка обмена, по которой
//                                           выполняется подписание.
//
Процедура НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ОО = Новый ОписаниеОповещения("ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
		РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
			Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(ОО, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	Иначе
		ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Получает внешний интерфейс дополнительной обработки.
//
// Параметры:
//  ИмяВнешнегоМодуля  - Строка - имя подключаемой обработки;
//  АдресКомпоненты - АдресВременногоХранилища - адрес внешней компоненты, которую требуется установить.
//
// Возвращаемое значение:
//  Форма - форма внешней обработки или Неопределено, если не удалось получить внешний интерфейс.
//
Функция ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(ИмяВнешнегоМодуля, АдресКомпоненты = Неопределено) Экспорт

	Перем АдресФайлаВнешнегоМодуля;
	
	ПодключаемыйМодуль = ПодключеннаяВнешняяКомпонентаБанка(ИмяВнешнегоМодуля);

	Если ПодключаемыйМодуль <> Неопределено Тогда
		Возврат ПодключаемыйМодуль;
	КонецЕсли;
	
	ВнешняяОбработкаПодключена = ОбменСБанкамиСлужебныйВызовСервера.ПодключитьАктуальнуюВнешнююОбработку(
		ИмяВнешнегоМодуля, АдресФайлаВнешнегоМодуля);
	
	Если Не ВнешняяОбработкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработкаИнициализирована = ИнициализироватьИнтерфейсДополнительнойОбработки(
		АдресФайлаВнешнегоМодуля, ИмяВнешнегоМодуля, АдресКомпоненты);
	
	Если Не ОбработкаИнициализирована Тогда  // Требуется установка внешней компоненты
		Возврат Неопределено;
	КонецЕсли;
	
	ПодключаемыйМодуль = ПодключеннаяВнешняяКомпонентаБанка(ИмяВнешнегоМодуля);

	Возврат ПодключаемыйМодуль;
	
КонецФункции

// Подключает внешнюю обработку.
//
// Параметры:
//    Оповещение - ОписаниеОповещения - обработчик, который вызывается после получения внешнего модуля:
//        Результат - УправляемаяФорма или Неопределено - подключенный модуль и Неопределено в случае ошибки;
//    ИмяВнешнегоМодуля - Строка - имя модуля, который нужно подключить.
//
Процедура ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(Оповещение, ИмяВнешнегоМодуля) Экспорт
	
	АдресВК = Неопределено;
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(ИмяВнешнегоМодуля, АдресВК);
	Если ВнешнийПодключаемыйМодуль = Неопределено И ЗначениеЗаполнено(АдресВК) Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияВнешнегоМодуля", Оповещение);
		ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
		ОповещениеПослеУстановкиКомпоненты = Новый ОписаниеОповещения(
			"ПослеУстановкиВнешнейКомпонентыДополнительнойОбработки", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуВнешнейКомпоненты(ОповещениеПослеУстановкиКомпоненты, АдресВК);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ВнешнийПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеУстановкиВнешнейКомпонентыДополнительнойОбработки(Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.ИмяВнешнегоМодуля);
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияВнешнегоМодуля, ВнешнийПодключаемыйМодуль);
	
КонецПроцедуры

// Проверяет необходимость установки пин-кода.
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  ИдентификаторХранилища  - Строка - идентификатор хранилища.
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код уже установлен или не требуется, Ложь - требуется установка пин кода,
//                          Неопределено - произошла ошибка при определении необходимости пин-кода.
//
Функция НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Ошибка = Ложь;
	ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, Ошибка);
	
	Если Ошибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТребуетсяПИН Тогда
		
		УстановленPINКодХранилища = УстановленPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, Ошибка);
	
		Если Ошибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат НЕ УстановленPINКодХранилища;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает PIN код для доступа к банковскому ключу.
//
// Параметры
//  ВнешнийПодключаемыйМодуль - УправляемаяФорма - внешний программный интерфейс;
//  ИдентификаторХранилища  - Строка - идентификатор хранилища;
//  ПинКод  - Строка - Пин код.
//
// Возвращаемое значение:
//  Булево -  пин код установлен успешно или нет.
//
Функция УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ПинКод) Экспорт
	
	ПинКодУстановлен = Истина;
	
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьPINКодХранилища(ИдентификаторХранилища, ПинКод);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки PIN-кода.
		                          |Код ошибки: ДО-%1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		ПинКодУстановлен = Ложь;
	КонецПопытки;
	
	Возврат ПинКодУстановлен;
	
КонецФункции

// Получает внешний модуль для подписания ЭД через доп.обработку и переходит к получению выписки банка.
//
// Параметры:
//    ВнешнийПодключаемыйМодуль - Внешний подключаемый модуль.
//    Параметры                 - Структура:
//       НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком
//                    по которой выполняется получение выписки.
//       НомерСчета   - Строка - номер банковского счета организации. Если не указан, то запрос по всем счетам.
//       ДатаНачала    - Дата.
//       ДатаОкончания - Дата.
//       Владелец      - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка.
//
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		НастройкаОбмена = Параметры.НастройкаОбмена;
		ДанныеСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ДанныеСертификатовБанка(НастройкаОбмена);
		
		Устройства = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		
		СписокВыбора = Новый Массив;
		Соответствие = Новый Соответствие;
		Если Устройства <> Неопределено И Устройства.Количество() > 0 Тогда
			Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
				ПроверитьСрокДействияСертификатаБанка(ДанныеСертификата.Сертификат, ДанныеСертификата.ДействителенДО,
					ДанныеСертификата.ПользовательОповещенОСрокеДействия);
				ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
													ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если Устройства.Найти(ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища) <> Неопределено Тогда
					Соответствие.Вставить(ДанныеСертификата.Сертификат, ДанныеСертификата);
				КонецЕсли;
			КонецЦикла
		Иначе
			ТекстСообщения = НСтр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат
		КонецЕсли;
		
		Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		Параметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		
		ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
		Если Соответствие.Количество() > 0 Тогда
			Если ЕстьСертификатССохраненнымПаролем(Соответствие, ВнешнийПодключаемыйМодуль) Тогда
				ВыбранныйСертификат = Неопределено;
				Если НЕ (ДанныеСертификата.Свойство("ВыбранныйСертификат")
					И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
				
					ДанныеСертификата.Вставить("ВыбранныйСертификат", ДанныеСертификата.Сертификат);
				КонецЕсли;
				ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, Параметры)
			Иначе
				Оповещение = Новый ОписаниеОповещения(
					"ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
				ПолучитьПарольКСертификату(Оповещение, Соответствие, ВидОперации);
				Возврат;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'К компьютеру подключен не подходящий банковский ключ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает внешний модуль для подписания ЭД через доп.обработку и переходит к получению выписки банка.
//
// Параметры:
//    Результат - Структура, Неопределено - если структура,
//              то процедура была вызвана после получения пароля к сертификату:
//       ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//       Комментарий         - Строка.
//       ПарольСертификата  - Строка.

//    Параметры - Структура:
//       СоотвСертификатовИИхСтруктур - Соответствие.
//       ДанныеСертификатов           - Структура.
//       ВнешнийПодключаемыйМодуль    - Внешний подключаемый модуль.
//       НастройкаОбмена                 - СправочникСсылка.НастройкиОбменСБанками - настройка обмена
//                                    по которой выполняется получение выписки.
//       НомерСчета                   - Строка - номер банковского счета организации. Если не указан, то запрос по всем счетам.
//       Владелец                     - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка.
//       ДатаНачала                   - Дата.
//       ДатаОкончания                - Дата.
//
Процедура ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
		НастройкаОбмена = Параметры.НастройкаОбмена;
		
		Если СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
			ДанныеСертификатов = Параметры.ДанныеСертификатов;
			ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
			
			Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
				Если ДанныеСертификата.Сертификат = ВыбранныйСертификат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
											ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
			Если ДанныеСертификатаЧерезДополнительнуюОбработку <> Неопределено Тогда
				Параметры.Вставить("ИмяПроцедуры", "ПродолжитьПолучениеВыписки");
				Параметры.Вставить("Модуль", ЭтотОбъект);
				Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
				Параметры.Вставить("ПарольСертификата", Результат.ПарольСертификата);
				Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища);
				Параметры.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
				
				ТребуетсяУстановкаPINКода = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
					ВнешнийПодключаемыйМодуль, ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища);
					
				Если ТребуетсяУстановкаPINКода = Ложь Тогда
					ПродолжитьПолучениеВыпискиЧерезДополнительнуюОбработку(Параметры);
				ИначеЕсли ТребуетсяУстановкаPINКода = Истина Тогда
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьПолучениеВыпискиПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					НачатьУстановкуPINКодаХранилища(НастройкаОбмена,
						ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ВыполнитьДействияПослеОтправкиПЭДЗавершить.
// Рекурсивная обработка (отправка) банковских документов.
//
// Параметры:
//    Результат - Число, Неопределено.
//    Параметры - Структура:
//       ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - описание, которое надо выполнить когда
//                                  будут обработаны все данные для отправки (ДанныеДляОтправки).
//       ДанныеДляОтправки          - Соответствие
//          Ключ     - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком,
//                   по которой требуется отправить документы.
//          Значение - Структура:
//             ДанныеПакетов - Соответствие.
//             Сертификаты   - Массив - структуры данных сертификатов.
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//
Процедура ОтправитьЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + Результат;
	КонецЕсли;
	
	ДанныеДляОтправки = Неопределено;
	Если НЕ Параметры.Свойство("ДанныеДляОтправки", ДанныеДляОтправки) ИЛИ ДанныеДляОтправки.Количество() = 0 Тогда
		
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеОтправкиПЭД, Параметры);
	Иначе
		Для Каждого КлючИЗначение Из ДанныеДляОтправки Цикл
			// СтруктураОтправки будет передана в процедуру
			// НачатьОтправкуПакетовЧерезДополнительнуюОбработку, после получения внешнего модуля.
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("НастройкаОбмена", КлючИЗначение.Ключ);
			СтруктураОтправки.Вставить("ДанныеДляОтправки", КлючИЗначение.Значение);
			СтруктураОтправки.Вставить("ИтогКолОтправленных", 0);
			СтруктураОтправки.Вставить("ИтогКолПодготовленных", 0);
			
			Параметры.ДанныеДляОтправки.Удалить(КлючИЗначение.Ключ);
			// ОбработчикПродолжения - рекурсивный вызов текущей процедуры, для продолжения
			// отправки следующего элемента ДанныеДляОтправки.
			ОбработчикПродолжения = Новый ОписаниеОповещения("ОтправитьЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			СтруктураОтправки.Вставить("ОбработчикПродолжения", ОбработчикПродолжения);
			РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
			ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
				КлючИЗначение.Ключ, РеквизитыНастройкиОбмена);
			ОбработчикПослеПодключения = Новый ОписаниеОповещения(
				"НачатьОтправкуПакетовЧерезДополнительнуюОбработку", ЭтотОбъект, СтруктураОтправки);
			ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(
				ОбработчикПослеПодключения, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуПакетовЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	ПрерватьОбработку = Истина;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		ДанныеОтправки = Параметры.ДанныеДляОтправки;
		
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		Устройства = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		
		СписокВыбораСертификата = Новый Массив;
		
		Если Устройства <> Неопределено И Устройства.Количество() > 0 Тогда
			
			Если ДанныеОтправки.Свойство("Сертификаты") Тогда
				ДанныеСертификатов = ДанныеОтправки.Сертификаты;
			Иначе
				ДанныеСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ДанныеСертификатовПоНастройкеОбмена(
					Параметры.НастройкаОбмена);
				ДанныеОтправки.Вставить("Сертификаты", ДанныеСертификатов);
			КонецЕсли;
			
			Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
				ПарольУстановлен = УстановленПарольСертификатаЧерезДополнительнуюОбработку(
								ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если ПарольУстановлен Тогда
					Соответствие = Новый Соответствие;
					СтруктураСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(
						ДанныеСертификата.СертификатСсылка);
					Соответствие.Вставить(ДанныеСертификата.СертификатСсылка, СтруктураСертификата);
					Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
					Прервать;
				КонецЕсли;
			
				СодержимоеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(
						ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если Устройства.Найти(СодержимоеСертификата.ИдентификаторХранилища) <> Неопределено Тогда
					СписокВыбораСертификата.Добавить(ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
			КонецЦикла;
			
			Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
			
			Если НЕ ПарольУстановлен Тогда
				Если СписокВыбораСертификата.Количество() = 0 Тогда
					Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
						СписокВыбораСертификата.Вставить(ДанныеСертификата.СертификатСсылка);
					КонецЦикла;
				КонецЕсли;
				Соответствие = Новый Соответствие;
				Для Каждого Сертификат Из СписокВыбораСертификата Цикл
					СтруктураСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
					Соответствие.Вставить(Сертификат, СтруктураСертификата);
				КонецЦикла;
				
				Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
				
				Если ЕстьСертификатССохраненнымПаролем(Соответствие, ВнешнийПодключаемыйМодуль) Тогда
					Для Каждого Элемент Из Соответствие Цикл
						ДанныеСертификата = Элемент.Значение;
						Прервать;
					КонецЦикла;
					ПарольУстановлен = Истина;
				Иначе
					ОООЗ = Новый ОписаниеОповещения(
						"ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					ПолучитьПарольКСертификату(ОООЗ, Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"));
					ПрерватьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПарольУстановлен Тогда
				ВыбранныйСертификат = Неопределено;
				Если Не ДанныеСертификата.Свойство("ВыбранныйСертификат")
					Или Не ЗначениеЗаполнено(ДанныеСертификата.ВыбранныйСертификат) Тогда
					
					ДанныеСертификата.Вставить("ВыбранныйСертификат", ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
				ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(ДанныеСертификата, Параметры);
				ПрерватьОбработку = Ложь;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'К компьютеру не подключен банковский ключ для отправки данных по настройке обмена: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Параметры.НастройкаОбмена);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из НачатьОтправкуПакетовЧерезДополнительнуюОбработку и,
// по описанию оповещения, из ПолучитьПарольКСертификату.
//
// Параметры:
//    Результат - Неопределено, Структура - если Неопределено - то пароль к сертификату не был получен.
//    Параметры - Структура:
//       ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//       СоотвСертификатовИИхСтруктур - Структура.
//       ОбработчикПродолжения - ОписаниеОповещения.
//       ДанныеДляОтправки     - Структура:
//          ДанныеПакетов - Соответствие.
//          Сертификаты   - Массив - массив структур сертификатов.
//       НастройкаОбмена          - СправочникСсылка.НастройкиОбменСБанками.
//
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//       ПараметрыАвторизации  - Соответствие.
//       ТребуетсяАвторизация  - Булево.
//
Процедура ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	ПрерватьОбработку = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
		ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
		ПараметрыСертификата.Вставить("ПарольСертификата", Результат.ПарольСертификата);
		ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
		ПараметрыСертификата.Вставить("Комментарий", "");
		Результат.Свойство("Комментарий", ПараметрыСертификата.Комментарий);
		Параметры.Вставить("СтруктураСертификата", ПараметрыСертификата);
		
		ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
		Сертификаты = Параметры.ДанныеДляОтправки.Сертификаты;
		ДанныеСертификата = Неопределено;
		Для Каждого СтруктураСертификата Из Сертификаты Цикл
			Если СтруктураСертификата.СертификатСсылка = ВыбранныйСертификат Тогда
				ДанныеСертификата = СтруктураСертификата;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДанныеСертификата <> Неопределено Тогда
			Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
			ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
			ИдентификаторХранилища = ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища;
			
			Если ДанныеСертификатаЧерезДополнительнуюОбработку <> Неопределено Тогда
				Если Параметры.ДанныеДляОтправки.Свойство("ДанныеПакетов") Тогда
					Параметры.Вставить("ОтправляемыеПакетыЧерезДопОбработку", Параметры.ДанныеДляОтправки.ДанныеПакетов);
				КонецЕсли;
				Параметры.Вставить("ИмяПроцедуры", "ОтправитьПакетыЧерезДополнительнуюОбработку");
				Параметры.Вставить("Модуль", ЭтотОбъект);
				Параметры.Вставить("ПарольУстановлен", Истина);
				Параметры.Вставить("ПарольСертификата", Результат.ПарольСертификата);
				Параметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);

				НеобходимаУстановкаPINКодаХранилища = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
																	ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
				Если НеобходимаУстановкаPINКодаХранилища = Истина Тогда
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьОтправкуПакетаПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					НачатьУстановкуPINКодаХранилища(Параметры.НастройкаОбмена, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
					ПрерватьОбработку = Ложь;
				ИначеЕсли НеобходимаУстановкаPINКодаХранилища = Ложь Тогда
					ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры);
					ПрерватьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

// Дозаполняет недостающие данные, необходимые для подписания ЭД и переходит к подписанию ЭД.
//
// Параметры:
//    ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//    Параметры                 - Структура:
//       НастройкаОбмена - СправочникСсылка.НастройкиОбменаСБанками - настройка обмена с банком.
//       МассивСообщенийОбменаКПодписи - Массив - подписываемые сообщения обмена.
//       СтруктураСертификата  - Структура - параметры сертификата, для которого "выше"
//                             выполнялся запрос пароля.
//       ОбработчикПродолжения - ОписаниеОповещения - описание, которое надо выполнить после завершения
//                             отработки текущих ЭД (МассивСообщенийОбменаКПодписи).
//
Процедура ПроверитьНеобходимостьУстановкиПинКода(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	ПрерватьПодписание = Истина;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		СертификатСсылка = Параметры.СтруктураСертификата.СертификатПодписи;
		Параметры.Вставить("ВыбранныйСертификат", СертификатСсылка);
		РеквизитыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатСсылка);
		
		СертификатXML = РеквизитыСертификата.ДвоичныеДанныеСертификата;
		Параметры.Вставить("СертификатXMLЧерезДопОбработку", СертификатXML);
		
		ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
		
		Если ДанныеСертификата <> Неопределено Тогда
			Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
			
			ТребуетсяУстановкаPINКода = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, ДанныеСертификата.ИдентификаторХранилища);
			
			Если ТребуетсяУстановкаPINКода = Истина Тогда
				ОО = Новый ОписаниеОповещения(
					"ПродолжитьПодписаниеПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
				НачатьУстановкуPINКодаХранилища(Параметры.НастройкаОбмена, ДанныеСертификата.ИдентификаторХранилища, ОО);
				ПрерватьПодписание = Ложь;
			ИначеЕсли ТребуетсяУстановкаPINКода = Ложь Тогда
				ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры);
				ПрерватьПодписание = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

// Предлагает пользователю выбрать хранилище и возвращает результат выбора.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком;
//  ОО - ОписаниеОповещения - описание вызова процедуры программного модуля, который будет осуществлен после выбора хранилища;
//  Параметры  - структура - параметры обработки ЭД.
//
Процедура ВыбратьХранилищеЧерезДополнительнуюОбработку(НастройкаОбмена, ОО, Параметры) Экспорт
	
	ПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	Хранилища = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ПодключаемыйМодуль);
	
	Если Хранилища = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОО);
	ИначеЕсли Хранилища.Количество() = 1
		И НЕ ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ПодключаемыйМодуль, Хранилища[0]) Тогда
		ВыполнитьОбработкуОповещения(ОО, Хранилища[0]);
	ИначеЕсли Хранилища.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("Хранилища, НастройкаОбмена", Хранилища, НастройкаОбмена);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ВыборХранилища", СтруктураПараметров, , , , , ОО);
	Иначе
		ТекстСообщения = НСтр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОО);
	КонецЕсли
	
КонецПроцедуры

// Вызывается из НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку и,
// по обработке оповещения, из ВыбратьХранилищеЧерезДополнительнуюОбработку.
// Осуществляет проверку валидности подписей.
//
// Параметры
//    ДоступноеХранилище - хранилище сертификатов.
//    Параметры                 - Структура:
//       ВнешнийПодключаемыйМодуль           - внешний подключаемый модуль.
//       МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку - Массив - ЭД в которых надо проверить статусы подписей.
//       ОбработчикПродолжения     - ОписаниеОповещения - (необязательный) описание, которое надо выполнить
//                                           после завершения отработки текущих ЭД (МассивСообщенийОбменаКПодписи).
//       ОповеститьОПроверкеЭП               - Строка - (необязательный) признак необходимости выполнить "Оповестить()".
//
Процедура ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ДоступноеХранилище, Параметры) Экспорт
	
	Если ДоступноеХранилище <> Неопределено Тогда
		ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
		МассивСообщенийОбмена = Параметры.МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку;
		Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
			СтруктураСодержимогоСообщенияОбмена = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСодержимогоСообщенияОбмена(
				СообщениеОбмена);
				
			Если СтруктураСодержимогоСообщенияОбмена = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			РезультатПроверки = Новый Массив;
			Для Каждого СтрокаЭП Из СтруктураСодержимогоСообщенияОбмена.Подписи Цикл
				СтруктураЗаписи = Новый Структура();
				Попытка
					ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
					СертификатXML = СтрокаЭП.Сертификат;
					ДопПараметры = Новый Структура("ИдентификаторХранилища", ДоступноеХранилище);
					ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(
						СертификатXML, СтруктураСодержимогоСообщенияОбмена.ДанныеЭД, ДвоичныеДанныеЭП, ДопПараметры);
					СтруктураЗаписи.Вставить("ПодписьВерна", ПодписьВалидна);
					СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
					РезультатПроверки.Добавить(СтруктураЗаписи);
				Исключение
					ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
											|Код ошибки: ДО-%1
											|%2'");
					ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
					ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
					Операция = НСтр("ru = 'Проверка подписи'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, СообщениеОбмена);
				КонецПопытки;
			КонецЦикла;
			Если РезультатПроверки.Количество() Тогда
				ОбменСБанкамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(СообщениеОбмена, РезультатПроверки);
			КонецЕсли;
		КонецЦикла;
		
		Если Параметры.Свойство("ОповеститьОПроверкеЭП") Тогда
			Оповестить("ПроведенаПроверкаЭП", МассивСообщенийОбмена);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		Результат = Неопределено;
		Параметры.Свойство("РезультатПодписания", Результат);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пароль для установки соединения с банком.
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  СертификатXML  - Строка - Содержит данные сертификата;
//  Пароль  - Строка - пароль сертификата.
//  ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - текущий сертификат подписи.
//
// Возвращаемое значение:
//   Булево   - пароль верный или нет.
//
Функция УстановитьПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, Пароль, ВыбранныйСертификат = Неопределено) Экспорт
	
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, Пароль);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки пароля сертификата.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка пароля сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Если ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
			УдалитьПарольИзСеанса(ВыбранныйСертификат);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие уже установленного PIN код для хранилища.
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  ИдентификаторХранилища  - Строка - идентификатор хранилища.
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код установлен установлен ранее, Ложь - пин код не установлен,
//                          Неопределено - произошла ошибка.
//
Функция УстановленPINКодХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ЕстьОшибка = Ложь) Экспорт
	
	Попытка
		УстановленPINКодХранилища = ВнешнийПодключаемыйМодуль.УстановленPINКодХранилища(ИдентификаторХранилища);
	Исключение
		ЕстьОшибка = Истина;
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки установленного PIN-кода.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка наличия установленного PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат УстановленPINКодХранилища;
	
КонецФункции

// Открывает форму ввода пин-кода.
//
// Параметры:
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком;
//  ИдентификаторХранилища  - Строка - идентификатор хранилища;
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - возврат после ввода PIN-кода.
//
Процедура НачатьУстановкуPINКодаХранилища(НастройкаОбмена, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыФормы.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросPINКода", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Отправляет запрос в банк.
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  СертификатXML  - строка - данные сертификата;
//  ТипЗапроса  - Число - тип запроса;
//  ДанныеОтправки  - Структура - данные для отправки.
//
// Возвращаемое значение:
//  Соответствие или Неопределено -  результат выполнения.
//
Функция ОтправитьЗапросЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, ТипЗапроса, ДанныеОтправки) Экспорт

	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, ТипЗапроса, ДанныеОтправки);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки данных.
		                          |Код ошибки: ДО-%1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка данных'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат

КонецФункции 

// Только для внутреннего использования
Процедура НачатьТестНастройкиОбменаЧерезДополнительнуюОбработку(Параметры) Экспорт
	
	ДоступныеСертификаты = Параметры.ДоступныеСертификаты;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	Если ДоступныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Проверка проведена не полностью, т.к. в настройке обмена отсутствуют сертификаты подписи'");
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.ИмяВнешнегоМодуля);
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("УстановленаВнешняяКомпонента") Тогда
		Параметры.Удалить("УстановленаВнешняяКомпонента");
	КонецЕсли;
	
	Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	Соответствие = Новый Соответствие;
	Для Каждого Элемент Из ДоступныеСертификаты Цикл
		Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПродолжитьТестНастройкиОбменаПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
	ПолучитьПарольКСертификату(Оповещение, Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"));

КонецПроцедуры

// Получает массив идентификаторов хранилищ, подключенных к компьютеру.
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма.
//  ВыводитьСообщение - Булево - если Ложь, то при отсутствии подключенного аппаратного устройства будет выведено сообщение.
//
// Возвращаемое значение:
//  Массив - идентификаторы хранилищ или Неопределено в случае ошибки.
//
Функция ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ВыводитьСообщение = Истина) Экспорт
	
	Попытка
		Устройства = ВнешнийПодключаемыйМодуль.ХранилищаСертификатов();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при поиске подключенных аппаратных устройств.
		                          |Код ошибки: ДО-%1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Поиск аппаратных устройств.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Устройства.Количество() = 0 И ВыводитьСообщение Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено ни одного аппаратного устройства.
									|Убедитесь, что устройство подключено к компьютеру и повторите операцию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Устройства;
	
КонецФункции

// Устанавливает соединение с банком.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//                  * Результат - результат вызова метода.
//                  * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  СертификатXML  - Строка - Содержит данные сертификата;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка с банком;
//
Процедура УстановитьСоединениеЧерезДополнительнуюОбработку(Оповещение, ПодключаемыйМодуль, СертификатXML, НастройкаОбмена = Неопределено) Экспорт
	
	Попытка
		
		Если НЕ ПодключаемыйМодуль.УстановитьСоединение(СертификатXML) Тогда
			ПараметрыРасширеннойАутентификации = Неопределено;
			ТребуетсяРасширеннаяАутентификация = ПодключаемыйМодуль.ТребуетсяРасширеннаяАутентификация(
															СертификатXML, ПараметрыРасширеннойАутентификации);
			Если ТребуетсяРасширеннаяАутентификация Тогда
				Если ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Не определены способы расширенной аутентификации.'");
				КонецЕсли;
				Если НЕ ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
					ВызватьИсключение НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
				КонецЕсли;
				ОдноразовыйПароль = Неопределено;
				
				РасширеннаяАутентификацияЧерезДопОбработку(
					ПодключаемыйМодуль, СертификатXML, ПараметрыРасширеннойАутентификации.Сессия, Оповещение);
			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка установки соединения.'");
			КонецЕсли;
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
		КонецЕсли;
		
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка соединения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбмена);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, нужно ли устанавливать пин-код.
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма;
//  ИдентификаторХранилища - Строка - идентификатор хранилища;
//  Ошибка - Булево - признак возникновения ошибки при выполнении функции;
//
// Возвращаемое значение:
//  Булево или Неопределено - нужно установить PIN или Неопределено при возникновении ошибки.
//
Функция ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, Ошибка = Ложь) Экспорт
	
	Ошибка = Ложь;
	Попытка
		ТребуетсяПИН = ВнешнийПодключаемыйМодуль.ТребуетсяУстановкаPINКодаХранилища(ИдентификаторХранилища);
	Исключение
		ОчиститьСообщения();
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки необходимости ввода PIN-кода.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка необходимости ввода PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Ошибка = Истина;
		ТребуетсяПИН = Ложь;
	КонецПопытки;
	
	Возврат ТребуетсяПИН;
	
КонецФункции

Функция ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		ДанныеСертификата = ВнешнийПодключаемыйМодуль.ДанныеСертификата(СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения данных сертификата.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

Функция УстановленПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(СертификатXML);
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;

	Возврат УстановленПарольСертификата;
	
КонецФункции

Процедура ПродолжитьПолучениеВыпискиПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
		
	Если НЕ УстановленPIN Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольСертификата = Параметры.ПарольСертификата;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольСертификата, Параметры.ВыбранныйСертификат);
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьПолучениеВыписки", ЭтотОбъект, Параметры);
	
	УстановитьСоединениеЧерезДополнительнуюОбработку(Оповещение, ВнешнийПодключаемыйМодуль,
		ДанныеСертификата.ДвоичныеДанныеСертификата, НастройкаОбмена);
		
КонецПроцедуры

Процедура ПродолжитьПолучениеВыписки(АутентификацияВыполнена, Параметры) Экспорт
	
	Если Не АутентификацияВыполнена Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
	ПараметрыФормы.Вставить("ДанныеСертификата", Параметры.ДанныеСертификата);
	ПараметрыФормы.Вставить("ДатаНачала", Параметры.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", Параметры.ДатаОкончания);
	ПараметрыФормы.Вставить("НомерСчета", Параметры.НомерСчета);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");

	ОткрытьФорму(
		"Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, Параметры.Владелец);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетаПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	ПрерватьОбработку = Истина;
	Если PINКод <> Неопределено Тогда
		УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
		Если УстановленPIN Тогда
			ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры)
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПакетыЧерезДополнительнуюОбработку(АутентификацияВыполнена, Параметры) Экспорт
	
	Если АутентификацияВыполнена = Истина Тогда
		ДокументыКОтправке = Новый Массив;
		МассивОтправленныхЭД = Новый Массив;
		СообщенияОбменаДляПодтверждения = Новый Массив;
		
		Если Параметры.Свойство("ОтправляемыеПакетыЧерезДопОбработку") Тогда
			Для Каждого Документ Из Параметры.ОтправляемыеПакетыЧерезДопОбработку Цикл
				СтруктураОтправки = Новый Структура;
				СтруктураОтправки.Вставить("Ключ",                Документ.Значение.Ключ);
				СтруктураОтправки.Вставить("ЭлектронныйДокумент", Документ.Значение.ПлатежноеПоручение);
				СтруктураОтправки.Вставить("СхемаДанных",         ПолучитьИзВременногоХранилища(Документ.Значение.СлужебныеДанные));
				СтруктураОтправки.Вставить("Подписи",             Новый Массив);
			
				Для Каждого СтрокаДанныеПодписи Из Документ.Значение.Подписи Цикл
					Подпись = ПолучитьИзВременногоХранилища(СтрокаДанныеПодписи.АдресПодписи);
					ДанныеПодписи = Новый Структура("Сертификат, Подпись", СтрокаДанныеПодписи.Сертификат, Подпись);
					СтруктураОтправки.Подписи.Добавить(ДанныеПодписи);
				КонецЦикла;
				ДокументыКОтправке.Добавить(СтруктураОтправки);
			КонецЦикла;
			
			СтруктураОтправки = Новый Структура();
			СтруктураОтправки.Вставить("Документы",         ДокументыКОтправке);
			СтруктураОтправки.Вставить("ВерсияСхемыДанных", ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена());

			Результат = ОтправитьЗапросЧерезДополнительнуюОбработку(
				Параметры.ВнешнийПодключаемыйМодуль, Параметры.ДанныеСертификата.ДвоичныеДанныеСертификата, 3, СтруктураОтправки);
				
			Если НЕ Результат = Неопределено Тогда
				КоличествоОтправленных = Результат.Количество();
				ОтправленныеДокументы = Новый Массив;
				ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветБанкаПослеОтправкиДокументовЧерезВнешнююОбработку(
					Параметры.ОтправляемыеПакетыЧерезДопОбработку, Результат, ОтправленныеДокументы, СообщенияОбменаДляПодтверждения);
				Если ОтправленныеДокументы.Количество() Тогда
					Оповестить("ОтправленоDirectBank", ОтправленныеДокументы);
				КонецЕсли;
				Параметры.Вставить("КоличествоОтправленных", КоличествоОтправленных);
			КонецЕсли;
		Иначе
			Параметры.Вставить("КоличествоОтправленных", 0);
		КонецЕсли;
		Если Параметры.ДанныеДляОтправки.Свойство("ДокументыДляПодтверждения") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СообщенияОбменаДляПодтверждения, Параметры.ДанныеДляОтправки.ДокументыДляПодтверждения);
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПодтвержденияПлатежейЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(Оповещение, СообщенияОбменаДляПодтверждения,
			Параметры.ВнешнийПодключаемыйМодуль, Параметры.ДанныеСертификата.ДвоичныеДанныеСертификата);
		Возврат;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, КоличествоОтправленных);
		Параметры.Удалить("ОбработчикПродолжения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодтвержденияПлатежейЧерезДополнительнуюОбработку(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработчикПродолжения = Неопределено;
	Если ДополнительныеПараметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, ДополнительныеПараметры.КоличествоОтправленных);
		ДополнительныеПараметры.Удалить("ОбработчикПродолжения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПодписаниеПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ПрерватьПодписание = Истина;
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	Если PINКод <> Неопределено Тогда
		УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
			
		Если УстановленPIN Тогда
			ПрерватьПодписание = Ложь;
			ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры)
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписаниеЭДЧерезДополнительнуюОбработку(АутентификацияВыполнена, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	МассивСообщенийОбменаДляПроверки = Новый Массив;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	СтруктураСертификата = Параметры.СтруктураСертификата;
	МассивСообщенийОбменаКПодписи = Параметры.МассивСообщенийОбменаКПодписи;
	ПрерватьПодписание = Ложь;
	Если АутентификацияВыполнена = Истина Тогда
		СертификатXML = Параметры.СертификатXMLЧерезДопОбработку;
		ДанныеОбработки = ОбменСБанкамиСлужебныйВызовСервера.ДанныеДляФормированияЭПЧерезДопОбработку(
			Параметры.МассивСообщенийОбменаКПодписи);

		Если ДанныеОбработки.МассивТекстовыхДанныхЭД.Количество() > 0 Тогда
			Попытка
				МассивНовыхСхемДанных = ВнешнийПодключаемыйМодуль.СхемаДанных(
						СертификатXML, ДанныеОбработки.МассивТекстовыхДанныхЭД);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка получения схемы данных.
											|Код ошибки: ДО-%1
											|%2'");
				ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Получение схемы данных'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
				// В большинстве случаев требуется исправление реквизитов документов:
				СтатусОтклоненБанком = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.ОтклоненБанком");
				ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусыСообщенийОбмена(
					МассивСообщенийОбменаКПодписи, СтатусОтклоненБанком);
				Если МассивСообщенийОбменаКПодписи.Количество() = 1 Тогда
					РеквизитыИзменения = Новый Структура("ПричинаОтклонения", ДеталиОшибки.Сообщение);
					ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(
						МассивСообщенийОбменаКПодписи.Получить(0), РеквизитыИзменения);
				КонецЕсли;
				ПрерватьПодписание = Истина;
			КонецПопытки;
			Если НЕ ПрерватьПодписание Тогда
				ОбменСБанкамиСлужебныйВызовСервера.СохранитьСхемыДанных(
					НастройкаОбмена, ДанныеОбработки.МассивСообщенийБезСхем, МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивДанныхСхем,  МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ДанныеОбработки.МассивСообщенийСоСхемами, ДанныеОбработки.МассивСообщенийБезСхем);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПрерватьПодписание Тогда
			ДанныеПодписей = Новый Соответствие;
			КоличествоЭД = ДанныеОбработки.МассивСообщенийСоСхемами.Количество();
			Попытка
				МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, ДанныеОбработки.МассивДанныхСхем);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка подписания документов.
											|Код ошибки: ДО-%1
											|%2'");
				ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Подписание документов'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, НастройкаОбмена);
				ПрерватьПодписание = Истина;
			КонецПопытки;
			Если НЕ ПрерватьПодписание Тогда
				ОбменСБанкамиСлужебныйВызовСервера.СохранитьДанныеПодписей(
					МассивСообщенийОбменаКПодписи, МассивПодписей, СтруктураСертификата.СертификатПодписи);
				Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных + МассивПодписей.Количество();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД);
	Если ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ОписаниеОповещения = Неопределено;
		Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеОповещения)
			И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
			
			Результат = Неопределено;
			Параметры.Свойство("РезультатПодписания", Результат);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		ДоступноеХранилище = ДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		Если ЗначениеЗаполнено(ДоступноеХранилище) Тогда
			ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ДоступноеХранилище, Параметры);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			ВыбратьХранилищеЧерезДополнительнуюОбработку(Параметры.НастройкаОбмена, Оповещение, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьТестНастройкиОбменаПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(ПараметрВозврата, Параметры) Экспорт
	
	Если ПараметрВозврата = Неопределено ИЛИ Параметры.СоотвСертификатовИИхСтруктур.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки);
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур.Получить(ПараметрВозврата.ВыбранныйСертификат);
	ПараметрыСертификата.ПарольСертификата = ПараметрВозврата.ПарольСертификата;
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	СертификатXML = ПараметрыСертификата.ДанныеСертификата;
	
	// Блок чтения данных сертификата.
	ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
	Если ДанныеСертификата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
		
	// Блок проверка наличия установленного PIN-кода.
	ЕстьОшибка = Ложь;
	ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ДанныеСертификата.ИдентификаторХранилища, ЕстьОшибка);
	Если ЕстьОшибка Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
		
	Параметры.Вставить("СертификатXML", СертификатXML);
	Параметры.Вставить("ПарольСертификата", ПараметрВозврата.ПарольСертификата);
	Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
	Параметры.Вставить("ИмяПроцедуры", "ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработкуПослеАутентификации");
	Параметры.Вставить("Модуль", ЭтотОбъект);
	Параметры.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
	Параметры.Вставить("ВыбранныйСертификат", ПараметрВозврата.ВыбранныйСертификат);
	
	// Блок проверка установки PIN-кода.
	Если ТребуетсяПИН Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ПараметрыФормы.Вставить("НастройкаОбмена", НастройкаОбмена);
		Параметры.Вставить("УстановленPINКод");
		ОООЗ = Новый ОписаниеОповещения(
			"ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработкуПослеВводаPINКода", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросPINКода", ПараметрыФормы, , , , , ОООЗ);
		Возврат;
	КонецЕсли;
	ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработку(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработкуПослеАутентификации(АутентификацияВыполнена, Параметры) Экспорт
	
	Если Не АутентификацияВыполнена = Истина Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;

	ПараметрыСертификата = Параметры.ПараметрыСертификата;
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = Параметры.СертификатXML;
	ДанныеСертификата = Параметры.ДанныеСертификата;
	
	// Блок проверка установки подписи для данных.
	
	ОтпечатокBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(ПараметрыСертификата.Отпечаток);
	ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
	МассивПодписи = Новый Массив;
	МассивПодписи.Добавить(ДвоичныеДанные);
	Попытка
		МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписи);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	// Блок проверка подписи.
	Попытка
		ДопПараметры = Новый Структура("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(
			СертификатXML, ДвоичныеДанные, МассивПодписей[0], ДопПараметры);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецПопытки;
	Если НЕ ПодписьВалидна Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, НСтр("ru = 'Подпись не валидна'"));
		Возврат;
	КонецЕсли;
	
	// Блок проверки отправки тестового запроса.
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 1);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , Параметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Истина);
	
КонецПроцедуры

Процедура ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработкуПослеВводаPINКода(PINКод, Параметры) Экспорт
	
	Если PINКод = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки);
		Возврат;
	КонецЕсли;
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.ИмяВнешнегоМодуля);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	ПинКодУстановлен = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
	
	Если Не ПинКодУстановлен Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработку(Параметры)
	
КонецПроцедуры

#КонецОбласти

#Область Криптография

// Получает пароль к сертификату для нестандартного подписания.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//   * Результат - Структура - результат вызова метода. Содержит следующие поля:
//                  ** ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - выбранный пользователем сертификат подписи;
//                  ** ПарольСертификата - Строка - пароль к закрытой части сертификата;
//               - Неопределено - Пользователь отказался от ввода и закрыл форму.
//    * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  СоотвСертификатовИИхСтруктур - Соответствие - набор сертификатов для выбора:
//        * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи;
//        * Значение - Структура - параметры сертификат подписи. Содержит следующие поля:
//             * ПарольПолучен - Булево - признак, что пароль сохранен в информационной базе
//  ВидОперации - Строка - выполняемая операция;
//  ОбъектыДляОбработки - Ссылка или Массив - объект, с которым связано событие;
//  ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанков - программа обмена с банком.
//
Процедура ПолучитьПарольКСертификату(Оповещение, СоотвСертификатовИИхСтруктур, ВидОперации, ОбъектыДляОбработки = Неопределено, ПрограммаБанка = Неопределено) Экспорт
	
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		
		СбербанкОнлайн = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
		
		Если СоотвСертификатовИИхСтруктур.Количество() = 1 ИЛИ ПрограммаБанка = СбербанкОнлайн Тогда
			Для Каждого Элемент Из СоотвСертификатовИИхСтруктур Цикл
				Если Элемент.Значение.ПарольПолучен = Истина ИЛИ ПрограммаБанка = СбербанкОнлайн Тогда
					Элемент.Значение.Вставить("ВыбранныйСертификат", Элемент.Ключ);
					ВыполнитьОбработкуОповещения(Оповещение, Элемент.Значение);
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Если СоотвСертификатовИИхСтруктур.Количество() > 1 И ПрограммаБанка = СбербанкОнлайн Тогда
				ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);

			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОперации", ВидОперации);
		МассивСертификатов = Новый Массив;
		Для Каждого КлючЗначение Из СоотвСертификатовИИхСтруктур Цикл
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		ПараметрыФормы.Вставить("МассивСертификатов", МассивСертификатов);
		Если ОбъектыДляОбработки <> Неопределено Тогда
			Если ТипЗнч(ОбъектыДляОбработки) <> Тип("Массив") Тогда
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ОбъектыДляОбработки);
			Иначе
				МассивОбъектов = ОбъектыДляОбработки;
			КонецЕсли;
			ПараметрыФормы.Вставить("ОбъектыДляОбработки", МассивОбъектов);
		КонецЕсли;
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросПароляКСертификату", ПараметрыФормы, , , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет подписи электронного документа.
//
// Параметры:
// Оповещение - ОписаниеОповещения - оповещение после проверки подписей:
//    * Результат - Булево - Истина, если все не было ошибки и все подписи валидны;
//    * ДополнительныеПараметры - Структура - Содержит дополнительные параметры;
// СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена электронного документа.
//
Процедура ПроверитьПодписи(Оповещение, СообщениеОбмена) Экспорт
	
	СтруктураСодержимого = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСодержимогоСообщенияОбмена(СообщениеОбмена);
	
	МассивПодписей = СтруктураСодержимого.Подписи;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиПодписей", Оповещение);
	ДополнительныеПараметры.Вставить("МассивПодписей", МассивПодписей);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеЭД", СтруктураСодержимого.ДанныеЭД);
	ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", -1);
	ДополнительныеПараметры.Вставить("РезультатыПроверкиПодписей", Новый Массив);
	
	ПроверитьОчереднуюПодпись(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаписатьРезультатПослеПроверкиПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СтруктураРезультата.Вставить("ПодписьВерна", Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстОшибки = НСтр("ru = 'Электронная подпись неверна.
								|Причина: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		СтруктураРезультата.Вставить("ПодписьВерна", Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось проверить подписи электронного документа.
									|Проверьте настройки криптографии или обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.РезультатыПроверкиПодписей.Добавить(СтруктураРезультата);
	
	ПроверитьОчереднуюПодпись(ДополнительныеПараметры)
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюКомандЭДО

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд ЭДО

// Команда открытия электронного документа.
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(
		ПараметрКоманды, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// Команда открытия формы списка электронных документов.
Процедура СписокЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОбменСБанкамиКлиент.ОткрытьСписокЭД(ПараметрКоманды, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// Команда создания электронного документа.
Процедура СформироватьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОчиститьСообщения();
	Обработчик = Новый ОписаниеОповещения("СформироватьНовыйЭД", ОбменСБанкамиКлиент, Истина);
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
		ПараметрКоманды, Обработчик, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

// Команда создания, подписания и отправки электронного документа.
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОчиститьСообщения();
	Обработчик = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭД", ОбменСБанкамиКлиент);
	ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
		ПараметрКоманды, Обработчик, ПараметрыВыполненияКоманды.Источник);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОбмена

// Производит тестирование настройки обмена с банком.
//
// Параметры:
//  Обработчик - ОписаниеОповещения - обработчик, вызываемый после тестирования настройки:
//           * Результат - Структура - с полями:
//              ** Успех - Булево - результат тестирования настройки;
//              ** МассивСообщений - Массив - в элементах строки, содержащие текст сообщений об ошибках;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - тестируемая настройка обмена с банком.
//
Процедура ПровестиТестНастройки(Обработчик, НастройкаОбмена) Экспорт
	
	ВидЭДЗапросЗонд = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросЗонд");
	ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(НастройкаОбмена, ВидЭДЗапросЗонд);
	ПрограммаБанка = ПараметрыОбмена.ПрограммаБанка;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
		Параметры.Вставить("РеквизитыНастройкиОбмена", ПараметрыОбмена);
		Параметры.Вставить("ОбработчикПослеТестаНастройки", Обработчик);
		Если ПараметрыОбмена.АутентификацияПоСертификату ИЛИ ПараметрыОбмена.ТребуетсяПодпись Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязь", ЭтотОбъект, Параметры);
			ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);
		Иначе
			ПослеПолученияОтпечатковПроверитьСвязь( , Параметры);
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ПровестиТестНастройкиСбербанк(Обработчик, НастройкаОбмена, ПараметрыОбмена);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ТестНастройкиОбменаВК(Обработчик, НастройкаОбмена);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ТестНастройкиОбменаЧерезДополнительнуюОбработку(Обработчик, НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Прерывает процесс получения документов через ВК.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком.
//
Процедура ПрерватьПроцессыНаКлиенте(НастройкаОбмена) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) <> Тип("Соответствие") Тогда
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	КонецЕсли;

	Если ПараметрыПодсистемыОбменСБанками.Получить("ПрерватьПроцессПоНастройкамОбмена") <> Неопределено Тогда
		МассивНастроекОбмена = ПараметрыПодсистемыОбменСБанками.Получить("ПрерватьПроцессПоНастройкамОбмена");
	Иначе
		МассивНастроекОбмена = Новый Соответствие;
	КонецЕсли;
	
	МассивНастроекОбмена.Вставить(НастройкаОбмена, Истина);
	
	ПараметрыПодсистемыОбменСБанками.Вставить("ПрерватьПроцессПоНастройкамОбмена", МассивНастроекОбмена);
	
КонецПроцедуры

// Определяет, отменил ли пользователь процесс запроса данных. При этом признак прерывания сбрасывается.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка, по который идет процесс получения документов.
// 
// Возвращаемое значение:
// Булево - если Истина, значит пользователь нажал на кнопку Отмена.
//
Функция ПроцессПрерван(НастройкаОбмена) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие")
		И НЕ ПараметрыПодсистемыОбменСБанками.Получить("ПрерватьПроцессПоНастройкамОбмена") = Неопределено Тогда
		НастройкиОбменаДляПрерыванияПроцесса = ПараметрыПодсистемыОбменСБанками.Получить(
			"ПрерватьПроцессПоНастройкамОбмена");
		Если НастройкиОбменаДляПрерыванияПроцесса.Получить(НастройкаОбмена) <> Неопределено Тогда
			НастройкиОбменаДляПрерыванияПроцесса.Удалить(НастройкаОбмена);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Функция получает пароль пользователя к сертификатам ЭП. Если в СоотвСертификатовИИхСтруктур передано несколько
// сертификатов, то в этот параметр вместо списка помещается один найденный сертификат с паролем и его параметры.
//
// Параметры:
//  СоотвСертификатовИИхСтруктур - Соответствие - содержит соответствие сертификатов и их параметров:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//    * Значение - Структура - содержит параметры сертификата.
//  ВнешнийПодключаемыйМодуль - Форма - внешний модуль.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ЕстьСертификатССохраненнымПаролем(СоотвСертификатовИИхСтруктур, ВнешнийПодключаемыйМодуль = Неопределено) Экспорт
	
	ПарольПолучен = Ложь;
	
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		КоличествоСертификатов = СоотвСертификатовИИхСтруктур.Количество();
		Для Каждого КлючИЗначение Из СоотвСертификатовИИхСтруктур Цикл
			Сертификат = КлючИЗначение.Ключ;
			ПараметрыСертификата = КлючИЗначение.Значение;
			ПрограммаБанка = Неопределено;
			Если НЕ ЗначениеЗаполнено(ПараметрыСертификата) Тогда
				ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
			КонецЕсли;
			Если ПараметрыСертификата.Свойство("ПрограммаБанка")
				И ПараметрыСертификата.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			ПарольСертификата = Неопределено;
			Если (КоличествоСертификатов = 1) И (ПараметрыСертификата.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен
													ИЛИ ПарольКСертификатуПолучен(Сертификат, ПарольСертификата)) Тогда
				Если НЕ ПарольПолучен Тогда
					ПарольПолучен = Истина;
					ПараметрыСертификата.Вставить("ПарольПолучен", ПарольПолучен);
					ПараметрыСертификата.Вставить("ПарольСертификата", ПарольСертификата);
					ПараметрыСертификата.Вставить("ВыбранныйСертификат", Сертификат);
				КонецЕсли;
				Прервать;
			ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
					И НЕ ВнешнийПодключаемыйМодуль = Неопределено
					И АктуаленКэшПароляСертификатаЧерезДополнительнуюОбработку(ПараметрыСертификата, ВнешнийПодключаемыйМодуль) Тогда
				ПараметрыСертификата.Вставить("ВыбранныйСертификат", Сертификат);
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПарольПолучен Тогда
			СоотвСертификатовИИхСтруктур = Новый Соответствие;
			СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПарольПолучен;

КонецФункции

// Запускает процесс получения выписки через ВК
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ДатаНачала - Дата - начало периода запроса выписки;
//  ДатаОкончания - Дата - дата окончания периода запроса выписки;
//  НомерСчета - Строка - номер банковского счета;
//  Владелец - Форма или элемент формы - получатель оповещения о выборе элемента - массива выписок банка.
//
Процедура НачатьПроцессПолученияВыпискиЧерезВК(НастройкаОбмена, ДатаНачала, ДатаОкончания, НомерСчета, Владелец) Экспорт

	НастройкиОбмена = Неопределено;
	МассивЗапросов = ОбменСБанкамиСлужебныйВызовСервера.ЗапросыВыписок(
		НастройкаОбмена, ДатаНачала, ДатаОкончания, НомерСчета, Новый Массив, НастройкиОбмена);
	
	Если НЕ МассивЗапросов.Количество() ИЛИ НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("Владелец", Владелец);
	ДополнительныеПараметры.Вставить("МассивСообщенийОбменаКОтправке", МассивЗапросов);
	
	Если НастройкиОбмена.Подписывать Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена.СертификатОрганизацииДляПодписи)
				ИЛИ НЕ НастройкиОбмена.СертификатДоступен Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос выписки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		СоответствиеСертификатов = Новый Соответствие;
		
		Для Каждого СертификатСсылка Из НастройкиОбмена.ДоступныеСертификаты Цикл
			СоответствиеСертификатов.Вставить(СертификатСсылка, Новый Структура("ПарольПолучен", Ложь));
		КонецЦикла;
		Если ЕстьСертификатССохраненнымПаролем(СоответствиеСертификатов) Тогда
			Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
				ДанныеАутентификации = Новый Структура;
				ДанныеАутентификации.Вставить("ВыбранныйСертификат", КлючЗначение.Ключ);
				ДанныеАутентификации.Вставить("ПарольСертификата", КлючЗначение.Значение.ПарольСертификата);
				ПодписатьЗапросыВыписокПослеВводаПароляЧерезВК(ДанныеАутентификации, ДополнительныеПараметры);
			КонецЦикла;
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"ПодписатьЗапросыВыписокПослеВводаПароляЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
			ВидОперации = НСтр("ru = 'Подписание электронных документов'");
			ПолучитьПарольКСертификату(Оповещение, СоответствиеСертификатов, ВидОперации, МассивЗапросов);
		КонецЕсли;
	Иначе
		Оповещение =Новый ОписаниеОповещения("ЗапуститьПроцессПолученияВыпискиЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ДанныеОтправки = Новый Соответствие;
		ОтправляемыеДанные = Новый Структура;
		ОтправляемыеДанные.Вставить("МассивСообщенийОбмена", МассивЗапросов);
		ОтправляемыеДанные.Вставить("МассивСообщенийТребующихПодтверждение", Новый Массив);
		ДанныеОтправки.Вставить(НастройкаОбмена, ОтправляемыеДанные);
		ОтправитьДокументыЧерезВК(Оповещение, ДанныеОтправки, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезВК

// Асинхронный обработчик, вызывается из ОбменСБанкамиКлиент.ПроверитьПодписьЧерезВК.
//
// Параметры:
//  Результат - Строка, Булево - результат проверки подписи
//  ДополнительныеПараметры - Произвольный - контекст выполнения операции.
//
Процедура ЗавершитьТестСертификатаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = Результат;
	ИначеЕсли НЕ Результат Тогда
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = НСтр("ru = 'Установленная подпись неверна.'");
	КонецЕсли;

	ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие.ОбменСБанками.ДанныеПодписиВК");
	ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие.ОбменСБанками.ПодключаемыйМодуль");

	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеТестаПодписиЧерезВК, ДополнительныеПараметры.Контекст);
	
КонецПроцедуры

// Проверяет подпись с использованием внешней компоненты
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после проверки подписи:
//   * Результат - Строка - текст ошибки, возникшей при проверке
//               - Булево - результат проверки подписи, если Истина, то подпись валидна
//  ПодключаемыйМодуль - AddIn - внешняя компонента
//  ДанныеBase64 - Строка - подписанные данные в формате Base64
//  СертификатBase64 - Строка - данные сертификата в формате Base64
//  ПодписьBase64 - Строка - данные подписи в формате Base64.
//
Процедура ПроверитьПодписьЧерезВК(Оповещение, ПодключаемыйМодуль, ДанныеBase64, СертификатBase64, ПодписьBase64) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиПодписи", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ОповещениеПослеВызоваПроверкиПодписи = Новый ОписаниеОповещения("ПослеПроверкиПодписиЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПроверкиПодписиЧерезВК", ЭтотОбъект);
		
	ПодключаемыйМодуль.НачатьВызовПроверитьПодпись(
		ОповещениеПослеВызоваПроверкиПодписи, СертификатBase64, ДанныеBase64, ПодписьBase64);
	
КонецПроцедуры

// Производит инициализацию внешней компоненты банка (асинхронно).
//
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры:
//       * Результат - Булево - Истина при успешной инициализации, в противном случае возвращается строка;
//                   - Строка - Содержит текст ошибки, если операцию не удалось выполнить.
//       * ДополнительныеПараметры - Произвольный - контекст выполнения.
//    ПодключаемыйМодуль - AddIn - внешняя компонента банка;
//
Процедура ИнициализироватьВК(Оповещение, ПодключаемыйМодуль) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеИнициализацииВК", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ОповещениеПослеИнициализацииВК = Новый ОписаниеОповещения(
		"ПослеИнициализацииВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуИнициализацииВК", ЭтотОбъект);

	ИнформацияОПрограмме = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОПрограммеДляВК();
	
	ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	
	Попытка
		ПодключаемыйМодуль.НачатьВызовИнициализировать(ОповещениеПослеИнициализацииВК, ИнформацияОПрограмме, ВерсияФормата);
	Исключение
		ТекстОшибки = НСтр("ru = 'При работе с внешним модулем произошла ошибка.
								|Выберите другой внешний модуль или обратитесь в техническую поддержку.'");
		ВыполнитьОбработкуОповещения(Оповещение, ТекстОшибки);
	КонецПопытки

КонецПроцедуры

// Формирует пакеты и отправляет в банк через внешнюю компоненту
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//    * РезультатВызова - Структура - результат выполнения процедуры. Содержит следующие поля:
//                      - ИтогКолПодготовленных - Число - количество подготовленных пакетов;
//                      - ИтогКолОтправленных - Число - количество отправленных пакетов.
//    * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения
//  ДанныеОтправки - Соответствие - отправляемые данные:
//     * Ключ - СправочникСсылка.НастройкиОбменСБанками - настройка обмена;
//     * Значение - Структура - отправляемые данные. Содержит поля:
//         ** МассивСообщенийОбмена - Массив - электронные документы для отправки в банк
//               *** ДокументСсылка.СообщениеОбменСБанками - электронный документ
//         ** МассивСообщенийТребующихПодтверждение - Массив - электронные документы для подтверждения
//               *** ДокументСсылка.СообщениеОбменСБанками - электронный документ
//         ** ДокументСсылка.СообщениеОбменСБанками - электронный документ.
//  ПолучитьНовыеДокументы - Булево - после отправки получить новые документы из банка.
//
Процедура ОтправитьДокументыЧерезВК(Оповещение, ДанныеОтправки, ПолучитьНовыеДокументы = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиСообщенийОбменаПоНастройкам", Оповещение);
	ДополнительныеПараметры.Вставить("ДанныеОтправки", ДанныеОтправки);
	ДополнительныеПараметры.Вставить("ИтогКолПодготовленных", 0);
	ДополнительныеПараметры.Вставить("ИтогКолОтправленных", 0);
	ДополнительныеПараметры.Вставить("ПолучитьНовыеДокументы", ПолучитьНовыеДокументы);
	
	ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры)
	
КонецПроцедуры

// Подписывает электронный документ с использованием внешней компоненты.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//    * РезультатВызова - Булево - Истина, если документ успешно подписан, Ложь - операция не выполнена.
//                      - Строка - текст ошибки, которая произошла при подписи.
//                      - Неопределено - пользователь отказался от продолжения операции.
//    * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения
//  СообщениеОбмена - ДокументСсылка.СообщенияОбменСБанками - подписываемый электронный документ;
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена;
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписи
//  Пароль - Строка - пароль к закрытой части сертификата;
//  ПодключаемыйМодуль - AddIn - подключенная внешняя компонента банка.
//
Процедура ПодписатьЭДПоСертификатуЧерезВК(Оповещение, СообщениеОбмена, НастройкаОбмена, СертификатСсылка, Пароль, ПодключаемыйМодуль = Неопределено, ЭтоТест = Ложь) Экспорт

	ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодписанияЧерезВК", Оповещение);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ДанныеЭДBase64", Base64Строка(ДвоичныеДанныеЭД));
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("СертификатСсылка", СертификатСсылка);
	ДополнительныеПараметры.Вставить("Пароль", Пароль);
	ДополнительныеПараметры.Вставить("ЭтоТест", ЭтоТест);
	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(СертификатСсылка, РеквизитыСертификата);
	ДополнительныеПараметры.Вставить("СертификатBase64", РеквизитыСертификата.ДанныеСертификата);
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
			"АутентифицироватьсяНаТокенеПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
		
		ПодключитьИИнициализироватьВК(ОповещениеПослеПодключенияВК, НастройкаОбмена);
	Иначе // используется при тесте настроек, когда модуль выбран из файла
		АутентифицироватьсяНаТокенеПослеПодключенияВК(ПодключаемыйМодуль, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает соединение с банком на доступном сертификате.
// Если соединение уже установлено, то повторную установку соединения не инициирует.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//   * Результат - Булево - истина, если соединение успешно установлено.
//               - Строка - текст ошибки выполнения операции. Ее необходимо вывести пользователю.
//               - Неопределено - пользователь отказался от установки соединения.
//   * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//
Процедура УстановитьСоединениеЧерезВК(Оповещение, НастройкаОбмена) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеУстановкиСоединенияВК", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОповещениеПослеПолученияПодключаемогоМодуля = Новый ОписаниеОповещения(
		"ПослеПолученияПодключаемогоМодуляВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключитьИИнициализироватьВК(ОповещениеПослеПолученияПодключаемогоМодуля, НастройкаОбмена);
	
КонецПроцедуры

// Осуществляет подключение и инициализацию внешней компоненты.
//
// Параметры:
//    Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//        * РезультатВызова - AddIn - внешняя компонента банка;
//                          - Строка - текст ошибки;
//                          - Неопределено - внешняя компонента не подключена, текст ошибки выведен пользователю.
//        * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
//
Процедура ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена) Экспорт
	
	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля, ИспользоватьЖурналирование, КаталогДляЖурналирования");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещенияПослеПодключенияИИнициализацииВК", Оповещение);
	ДополнительныеПараметры.Вставить("ИспользоватьЖурналирование", РеквизитыНастройкиОбмена.ИспользоватьЖурналирование);
	ДополнительныеПараметры.Вставить("КаталогДляЖурналирования", РеквизитыНастройкиОбмена.КаталогДляЖурналирования);
	ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"ИнициализироватьПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ДополнительныеВнешниеКомпонентыКлиент.ПодключитьВнешнююКомпонентуПоИдентификатору(
		ОповещениеПослеПодключенияВК, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
		
КонецПроцедуры

Процедура ПослеВключенияЖурналированияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПодключенияИИнициализацииВК, Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОповещенияПослеПодключенияИИнициализацииВК, ДополнительныеПараметры.ПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВключенияЖурналирования(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВключенияЖурналирования, Истина);
	
КонецПроцедуры

Процедура ПослеОшибкиВключенияЖурналированияВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При включении журналирования произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Включение журналирования.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеВключенияЖурналирования,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

// Получает новые документы из банка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//     * РезультатВызова - Структура - результат работы процедуры. Имеет следующие поля
//                            * Результат - Булево - Истина, если метод отработал корректно и новые документы были получены и загружены в базу;
//                                        - Строка - текст ошибки, которую необходимо вывести пользователю.
//                            * ИтогКолПолученных - Число - количество полученных пакетов.
//     * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена.
//
Процедура ПолучитьНовыеДокументыВК(Оповещение, ПодключаемыйМодуль, НастройкаОбмена) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияНовыхДокументов", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИтогКолПолученных", 0);
	
	ОповещениеПослеПолученияИдентификаторовПакетовЧерезВК = Новый ОписаниеОповещения(
		"ПолучитьПакетыПослеПолученияИдентификаторовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВызватьПолучениеИдентификаторовНовыхПакетовЧерезВК(
		ОповещениеПослеПолученияИдентификаторовПакетовЧерезВК, НастройкаОбмена, ПодключаемыйМодуль);
	
КонецПроцедуры

// Получает идентификаторы подключенных ключей через ВК.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//       * РезультатВызова - Массив - содержит идентификаторы подключенных электронных ключей.
//                         - Строка - текст ошибки при исключении
//       * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//
Процедура ПолучитьИдентификаторыПодключенныхКлючейЧерезВК(Оповещение, ПодключаемыйМодуль) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификаторовКлючей", Оповещение);
	ОповещениеПослеПолученияХранилищКлючей = Новый ОписаниеОповещения("ПослеПолученияХранилищКлючейЭПВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПолученияХранилищКлючейЭП", ЭтотОбъект);
	ПодключаемыйМодуль.НачатьВызовХранилищаКлючейЭП(ОповещениеПослеПолученияХранилищКлючей);
	
КонецПроцедуры

// Выполняет тестирование настройки обмена.
//
// Параметры:
//  Оповещение -  ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//                  * Результат - равен Истина, если тест пройден успешно, Ложь - тест не выполнен с выводом сообщения об ошибке.
//                              - Строка - текст ошибки;
//                              - Неопределено - пользователь нажал Отмена.
//                  * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ПараметрыУстановленногоСоединения - Структура - если соединение устанавливалось при получении настроек, то оно и будет использоваться для теста:
//     * ИдентификаторХранилища - Строка - идентификатор электронного ключа, на котором уже установлено соединение;
//     * Отпечаток - Строка - отпечаток сертификата, по которому уже установлено соединение.
//     * СертификатBase64 - Строка - сертификат, на котором установлено соединение в формате Base64.
//
Процедура ТестНастройкиОбменаВК(Оповещение, НастройкаОбмена, ПараметрыУстановленногоСоединения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеТестаНастройки", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ПараметрыУстановленногоСоединения", ПараметрыУстановленногоСоединения);
	
	Если ПараметрыУстановленногоСоединения <> Неопределено Тогда
		ПолучитьСертификатыСКлючаПослеПодключенияВК(
			ПараметрыУстановленногоСоединения.ПодключаемыйМодуль, ДополнительныеПараметры);
	Иначе
		ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
			"ПолучитьСертификатыСКлючаПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
		
		ПодключитьИИнициализироватьВК(ОповещениеПослеПодключенияВК, НастройкаОбмена);
	КонецЕсли;
		
КонецПроцедуры

// Предлагает пользователю аутентифицироваться на токене и получить дополненный сертификат (асинхронно).
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое в результате выполнения процедуры:
//     * Результат - Структура - данные сертификата;
//                 - Неопределено - пользователь отказался от продолжения операции;
//                 - Строка - текст сообщения о возникшей ошибке
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//  ПараметрыСоединения - Структура - параметры соединения. Содержит следующие элементы:
//     * ИдентификаторОрганизации - Строка - идентификатор организации из настройки обмена;
//     * БИК - Строка - БИК банка;
//     * КлючУникальности - идентифицирующая пользователя строка, например “<инн>_<бик>”. Используется для сбора статистики подключений.
//
Процедура ПолучитьДанныеСертификатаСТокенаВК(Оповещение, ПодключаемыйМодуль, ПараметрыСоединения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещенияПослеПолученияДанныхСертификата", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ПараметрыСоединения", ПараметрыСоединения);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПредъявитьДанныеАутентификацииПослеПолучения", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьДанныеАутентификацииНаТокенеВК(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

// Получает подробную информацию об ошибке, возникшей при работе с внешней компонентой (асинхронно).
// Также производит запись в журнал регистрации.
//
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры:
//     * ТекстОшибки - Строка - текст ошибки для вывода пользователю в виде сообщения;
//     * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//    ПодключаемыйМодуль - AddIn - внешняя компонента банка;
//    ВидОперации - Строка - выполняемая операция;
//    ТекстСообщения - Строка - начальный текст сообщения пользователю.
//
Процедура ПолучитьИнформациюОбОшибкеВК(Оповещение, ПодключаемыйМодуль, ВидОперации, ТекстСообщения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидОперации", ВидОперации);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияИнформацииОбОшибкеВК", ЭтотОбъект, ДополнительныеПараметры);
	ПодключаемыйМодуль.НачатьВызовДеталиОшибки(Оповещение);
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииОбОшибкеВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДеталиОшибки = ДеСериализованныеДанные(РезультатВызова);

	Если ДеталиОшибки.Код = 0 Тогда
		ПодробныйТекстОшибки = ДеталиОшибки.Сообщение;
	Иначе
		ШаблонОшибки = ДополнительныеПараметры.ТекстСообщения + Символы.ПС + НСтр("ru = 'Код ошибки: ВК-%1
																					|%2'");
		ПодробныйТекстОшибки = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧГ="), ДеталиОшибки.Сообщение);
	КонецЕсли;
	
	ОбработатьОшибку(ДополнительныеПараметры.ВидОперации, ПодробныйТекстОшибки);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ПодробныйТекстОшибки);
	
КонецПроцедуры

// Получает данные ключа через внешнюю компоненту (асинхронно).
//
// Параметры:
//  Обработчик - ОписаниеОповещения - Обработчик, вызываемый после получения данных ключа:
//     * Результат - Структура - данные сертификата банка с элементами:
//                     ** ИдентификаторХранилища - Строка - идентификатор хранилища (для данных банковского ключа может не заполняться)
//                     ** Псевдоним - Строка - псевдоним ключа ЭП 
//                     ** Отпечаток - Строка - уникальный идентификатор ключа ЭП, уникальность поддерживается в рамках всех сертификатов данного вида (для сертификатов x.509 вернуть отпечаток сертификата)
//                     ** СерийныйНомер - Строка серийный номер ключа в hex (для сертификатов x.509 серийный номер сертификата)
//                     ** ИмяИздателя - Строка - имя издателя сертификата (для сертификатов x.509 поле CN)
//                     ** ВладелецФИО* - Строка - ФИО владельца ключа ЭП 
//                     ** ВладелецДолжность* - Строка, должность владельца ключа ЭП
//                     ** ДатаОкончания* - Дата - указывает последний день, когда можно использовать ключ ЭП
//                     Поля отмеченные символом * заполнены после дополнения данных ключа ЭП
//                - Строка - текст ошибки.
//     * ДополнительныеПараметры - Произвольный - контекст выполнения.
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка;
//  СертификатBase64 - Строка - сертификат в формате Base64.
//
Процедура ПолучитьДанныеКлючаЧерезВК(Обработчик, ПодключаемыйМодуль, СертификатBase64) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияДанныхСертификатаВК", Обработчик);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДанныхСертификатаВК", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияДанныхСертификатаВК", ЭтотОбъект);
	ПодключаемыйМодуль.НачатьВызовДанныеКлючаЭП(Оповещение, СертификатBase64);

КонецПроцедуры

// Проверяет подписи сообщения обмена
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//     * РезультатВызова - результат вызова метода.
//             - Строка - текст ошибки.
//             - Булево - если Истина, то операция выполнена успешно.
//     * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком.
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена, у которого необходимо проверить подписи.
//
Процедура ПроверитьПодписиСообщенияОбменаЧерезВК(Оповещение, НастройкаОбмена, СообщениеОбмена) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиПодписей", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ОповещениеПослеИнициализацииВК = Новый ОписаниеОповещения(
		"ОбеспечитьПодключениеАппаратногоУстройстваПослеИнициализацииВК", ЭтотОбъект, ДополнительныеПараметры);
	ПодключитьИИнициализироватьВК(ОповещениеПослеИнициализацииВК, НастройкаОбмена);
	
КонецПроцедуры

// Осуществляет проверку установки подписи при проверке сертификата
//
// Параметры:
//  РезультатВызова - AddIn - внешняя компонента банка;
//                  - Строка - текст ошибки;
//                  - Неопределено - внешняя компонента не подключена, текст ошибки выведен пользователю.
//  ДополнительныеПараметры - Произвольный - контекст операции.
//
Процедура АутентификацияНаКлючеПослеПодключенияВК(РезультатВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Не удалось подключить внешний модуль'");
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	ИначеЕсли ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = РезультатВызова;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками.ПодключаемыйМодуль", РезультатВызова);
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", РезультатВызова);
	
	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(
		ДополнительныеПараметры.Сертификат, РеквизитыСертификата);
	ДополнительныеПараметры.Вставить("ДанныеСертификата", РеквизитыСертификата.ДанныеСертификата);

	Оповещение = Новый ОписаниеОповещения("ПроверитьУстановкуПодписиПослеАутентификацииНаТокене", ЭтотОбъект, ДополнительныеПараметры);
	АутентифицироватьсяНаЭлектронномКлючеЧерезВК(Оповещение, РезультатВызова, ДополнительныеПараметры.Сертификат,
		РеквизитыСертификата.ДанныеСертификата, ДополнительныеПараметры.Контекст.Пароль, Истина);
	
КонецПроцедуры

// Подтверждает платежные документы через внешний модуль. Внешнее соединение должно быть установлено.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после подтверждения документов
//  МассивСообщенийОбмена - Массив - электронные документы, которые требуется подтвердить:
//    ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком.
//
Процедура ПодтвердитьПлатежныеДокументыЧерезВК(ПодключаемыйМодуль, Оповещение, МассивСообщенийОбмена) Экспорт
	
	Если МассивСообщенийОбмена.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = МассивСообщенийОбмена.Получить(0);
	МассивСообщенийОбмена.Удалить(0);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ИдентификаторСообщенияОбмена = ОбменСБанкамиСлужебныйВызовСервера.ИдентификаторЭлектронногоДокумента(СообщениеОбмена);
	
	ОповещениеВК = Новый ОписаниеОповещения("ПослеНачалаПодтвержденияПлатежногоПорученияЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуНачалаПодтвержденияПлатежногоПорученияЧерезВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовНачатьПодтверждениеПлатежногоПоручения(ОповещениеВК, ИдентификаторСообщенияОбмена);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сбербанк

Процедура ПослеПолученияСтатусаЗапросаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Получение статуса запроса'");
		ШаблонСообщения = НСтр("ru = 'При получении данных с сервера банка произошла ошибка.'");
		ВывестиИнформацияОбОшибкеСбербанк(
			РезультатВызова, ВидОперации, ШаблонСообщения, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСтатусаЗапроса);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСтатусаЗапроса, ПараметрыВызова[3]);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСтатусаЗапросаСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ВидОперации = НСтр("ru = 'Получение статуса запроса'");
	ШаблонОшибки = НСтр("ru = 'При получении данных с сервера банка произошла ошибка.
							|%1'");

	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСтатусаЗапроса);
	
КонецПроцедуры

// Получает параметры фрод мониторинга с использование внешней компоненты банка.
// Внешняя компонента должна быть подключена до вызова метода.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после получения параметров для фрод-мониторинга
//  ИмяВнешнегоМодуля - Строка - Идентификатор внешней компоненты.
//
Процедура ПолучитьПараметрыФродМониторингаСбербанк(Оповещение, ИмяВнешнегоМодуля)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияФродПараметров", Оповещение);
	
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяВнешнегоМодуля);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ОповещениеПослеПолученияАдресаКомпьютера = Новый ОписаниеОповещения(
		"ПолучитьПараметрыПКПослеПолученияАдресаКомпьютераСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	IP = ""; MAC = "";
	ПодключаемыйМодуль.НачатьВызовПолучитьIP_MAC(ОповещениеПослеПолученияАдресаКомпьютера, IP, MAC);
	
КонецПроцедуры

// Добавляет подпись для электронных документов.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Оповещение, вызываемое после подписания:
//      * Результат - Структура - результат выполнения процедуры:
//           * Успех - Булево - если Истина, то все электронные документы были подписаны;
//           * Количество - Число - количество подписанных электронных документов;
//      * ДополнительныеПараметры - Структура - контекст выполнения процедуры;
//  НастройкаОбмена  - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  МассивСообщенийОбмена  - Массив - подписываемые электронные документы:
//     * ДокументСсылка.СообщениеОбменСБанками - сообщения обмена с банками.
//  ОграничениеПоСертификатам  - Массив - сертификаты, которыми можно подписать ЭД:
//     * СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификаты ЭЦП.
//
Процедура ПодписатьЭДСбербанк(Оповещение, НастройкаОбмена, МассивСообщенийОбмена, ОграничениеПоСертификатам = Неопределено)

	
	Параметры = Новый Структура;
	
	СообщенияКПодписи = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивСообщенийОбмена);
	
	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Параметры.Вставить("СообщенияОбменаСбербанк", СообщенияКПодписи);
	Параметры.Вставить("ОповещениеПослеПодписания", Оповещение);
	Параметры.Вставить("ИмяВнешнегоМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	Если ОграничениеПоСертификатам <> Неопределено Тогда
		Параметры.Вставить("ОграничениеПоСертификатам", ОграничениеПоСертификатам);
	КонецЕсли;
	
	ОповещениеПослеАутентификацииНаТокене = Новый ОписаниеОповещения(
		"ОпределитьСертификатПослеАутентификацииНаТокенеСбербанк", ЭтотОбъект, Параметры);
		
	ПринудительнаяАутентификация = ЗначениеИзКэшаСбербанк("ЗапомнитьСессию") <> Истина;
	
	АутентифицироватьсяНаТокенеСбербанка(ОповещениеПослеАутентификацииНаТокене,
		РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, НастройкаОбмена, ПринудительнаяАутентификация);
	
КонецПроцедуры

Процедура СохранитьЖурналВФайлПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьЖурналВФайлПослеПоиска", ЭтотОбъект, ДополнительныеПараметры,
			"ОбработатьОшибкуСохраненияЖурналаВФайле", ЭтотОбъект);
		Маска = "1CSBRFLog_" + Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДЛФ=D") + ".txt";
		ДополнительныеПараметры.Вставить("ИмяФайла", Маска);
		НачатьПоискФайлов(Оповещение, ДополнительныеПараметры.КаталогЖурналирования, Маска);
	Иначе
		Операция = НСтр("ru = 'Журналирование обмена с банком'");
		ТекстОшибки = НСтр("ru = 'Не удалось подключить расширение для работы с файлами.
								|Журнал обмена не выгружен в файл.'");
		ОбработатьОшибку(Операция, ТекстОшибки, , ДополнительныеПараметры.НастройкаОбмена);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьЖурналВФайлПослеПоиска(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	
	Если НайденныеФайлы.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьЖурналВФайлПослеЧтения", ЭтотОбъект, ДополнительныеПараметры,
			"ОбработатьОшибкуСохраненияЖурналаВФайле", ЭтотОбъект);
		ИмяФайла = ДополнительныеПараметры.КаталогЖурналирования + ДополнительныеПараметры.ИмяФайла;
		ТекстовыйДокумент.НачатьЧтение(Оповещение, ИмяФайла);
	Иначе
		СохранитьЖурналВФайлПослеЧтения(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЖурналВФайлПослеЧтения(ДополнительныеПараметры) Экспорт
	
	ТекстВыгрузки = ОбменСБанкамиСлужебныйВызовСервера.ТекстВыгрузкиЖурнала(ДополнительныеПараметры.НастройкаОбмена);
	Если Не ЗначениеЗаполнено(ТекстВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.ТекстовыйДокумент.ДобавитьСтроку(ТекстВыгрузки);
	ИмяФайла = ДополнительныеПараметры.КаталогЖурналирования + ДополнительныеПараметры.ИмяФайла;
	Оповещение = Новый ОписаниеОповещения("ОчиститьЖурналПослеСохраненияВФайл", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуСохраненияЖурналаВФайле", ЭтотОбъект);
	ДополнительныеПараметры.ТекстовыйДокумент.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

Процедура ОчиститьЖурналПослеСохраненияВФайл(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбменСБанкамиСлужебныйВызовСервера.ОчиститьЖурнал(ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуСохраненияЖурналаВФайле(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Сохранение журнала обмена в файле.'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОбработатьОшибку(ВидОперации, ТекстОшибки, , ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

// Осуществляет подключение внешней компоненты для обмена со Сбербанком.
//
// Параметры:
//    ОписаниеОповещения - ОписаниеОповещения - вызывается после выполнения процедуры
//       * Результат - AddIn, Неопределено - подключенная внешняя компонента.
//
Процедура ПодключитьВнешнююКомпоненту1СДляСбербанка(ОписаниеОповещения)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками", Новый Соответствие);
	Иначе
		ВнешняяКомпонентаИзКеша = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	КонецЕсли;

	Если ВнешняяКомпонентаИзКеша = Неопределено Тогда
		ИдентификаторВК = "С" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); //генерация уникального имени
		Параметры = Новый Структура();
		Параметры.Вставить("ОповещениеПослеПодключенияКомпоненты1СДляСбербанка", ОписаниеОповещения);
		Параметры.Вставить("ИдентификаторВК", ИдентификаторВК);
		ОповещениеПослеПодключенияКомпоненты = Новый ОписаниеОповещения(
			"ПослеПопыткиПодключенияВнешнейКомпоненты1СДляСбербанка", ЭтотОбъект, Параметры);
		АдресВнешнейКомпоненты = "Обработка.ОбменСБанками.Макет.SBRFServiceProxy";
		НачатьПодключениеВнешнейКомпоненты(
			ОповещениеПослеПодключенияКомпоненты, АдресВнешнейКомпоненты, ИдентификаторВК, ТипВнешнейКомпоненты.Native);
		Возврат;
	КонецЕсли;
		
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВнешняяКомпонентаИзКеша);
	
КонецПроцедуры

// Возвращает подключенный экземпляр внешней компоненты по имени внешнего модуля.
//
// Параметры:
//   ИмяВК - Строка - название внешнего модуля.
//
// Возвращаемое значение:
//   COMОбъект - подключенный внешний модуль.
//
Функция ПодключеннаяВнешняяКомпонентаБанка(ИмяВК)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
		ПараметрыПодсистемыОбменСБанками.Вставить("ВнешниеКомпоненты");
	Иначе
		ВнешниеКомпонентыИзКеша = ПараметрыПодсистемыОбменСБанками.Получить("ВнешниеКомпоненты");
		Если ЗначениеЗаполнено(ВнешниеКомпонентыИзКеша) Тогда
			Возврат ВнешниеКомпонентыИзКеша.Получить(ИмяВК);
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ПроверитьВерсиюВКСбербанк(Оповещение, ИмяВнешнегоМодуля)
	
	ИнформацияОВК = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(ИмяВнешнегоМодуля);
	
	Если ИнформацияОВК = Неопределено
		ИЛИ НЕ ОбменСБанкамиКлиентСервер.ПоддерживаетсяВерсияКомпонентыСбербанк(ИнформацияОВК.Версия) Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиВерсии", Оповещение);
	ДополнительныеПараметры.Вставить("ОжидаемаяВерсия", ИнформацияОВК.Версия);
	
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"ПолучитьВерсиюВКПослеПодключенияСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	ДополнительныеВнешниеКомпонентыКлиент.ПодключитьВнешнююКомпонентуПоИдентификатору(
		ОповещениеПослеПодключенияВК, ИмяВнешнегоМодуля, Ложь);
	
КонецПроцедуры

// Выполняет кэширование данных авторизации на сервере сбербанка.
//
// Параметры:
//  Название  - Строка - название кэшируемого параметра;
//  Значение  - Произвольный - значение кэшируемого параметра.
//
Процедура ЗакэшироватьПараметрСбербанка(Название, Значение)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) <> Тип("Соответствие") Тогда
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	КонецЕсли;
	
	ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
	
	Если ПараметрыОбменаСбербанк = Неопределено Тогда
		ПараметрыОбменаСбербанк = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбменаСбербанк.Вставить(Название, Значение);
	ПараметрыПодсистемыОбменСБанками.Вставить("Сбербанк", ПараметрыОбменаСбербанк);
	
КонецПроцедуры

Процедура ПослеПопыткиПодключенияВнешнейКомпоненты1СДляСбербанка(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + Параметры.ИдентификаторВК + ".SBRFServiceProxy");
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
			ПараметрыПодсистемыОбменСБанками.Вставить("ВнешняяКомпонента1СДляСбербанка", ПодключаемыйМодуль);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка подключения внешнего модуля 1С для Сбербанка.'");
			Операция = НСтр("ru = 'Подключение внешней компоненты 1С для Сбербанка'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодключенияКомпоненты1СДляСбербанка, ПодключаемыйМодуль);
	Иначе
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуВнешнейКомпоненты1СДляСбербанкаПослеВопроса", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо установить внешний модуль
							|1CSBRFServiceProxy (Версия 11.2).
							|Установить внешний модуль?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Установить и продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		Заголовок = НСтр("ru = 'Установка внешней компоненты'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Истина, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуВнешнейКомпоненты1СДляСбербанкаПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Истина Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодключитьВнешнююКомпоненту1СДляСбербанкаПослеУстановки", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуВнешнейКомпоненты(Оповещение, "Обработка.ОбменСБанками.Макет.SBRFServiceProxy");
	КонецЕсли;

КонецПроцедуры

Процедура ПодключитьВнешнююКомпоненту1СДляСбербанкаПослеУстановки(ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПодключенияКомпоненты = Новый ОписаниеОповещения(
		"ПослеПодключенияВнешнейКомпоненты1СДляСбербанка", ЭтотОбъект, ДополнительныеПараметры);

	НачатьПодключениеВнешнейКомпоненты(ОповещениеПослеПодключенияКомпоненты,
		"Обработка.ОбменСБанками.Макет.SBRFServiceProxy", ДополнительныеПараметры.ИдентификаторВК,
		ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

Процедура ПослеПодключенияВнешнейКомпоненты1СДляСбербанка(Подключено, Параметры) Экспорт

	Если Подключено Тогда
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + Параметры.ИдентификаторВК + ".SBRFServiceProxy");
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
			ПараметрыПодсистемыОбменСБанками.Вставить("ВнешняяКомпонента1СДляСбербанка", ПодключаемыйМодуль);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка подключения внешней компоненты 1С для Сбербанка.'");
			Операция = НСтр("ru = 'Подключение внешнего модуля 1С для Сбербанка'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодключенияКомпоненты1СДляСбербанка, ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура УстановитьВиртуальныйКаналПослеАутентификацииНаАппаратномУстройствеСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаСервере, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"АутентификацияНаСервереПослеУстановкиКаналаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	УстановитьКаналНаТокенеСбербанк(Оповещение, ДополнительныеПараметры.ИмяМодуля, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ПровестиАутентификациюПослеПолученияФродПараметровСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	Кэш = Новый Структура(Результат);
	
	Кэш.Вставить("НомерКонтейнера", ЗначениеИзКэшаСбербанк("НомерКонтейнера"));
	
	СтрокаФрод = ОбменСБанкамиСлужебныйВызовСервера.Фрод(Кэш);
	
	ЗакэшироватьПараметрСбербанка("ФродПараметры", Кэш);
	
	Если НЕ ЗначениеЗаполнено(СтрокаФрод) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	ПодключаемыйМодуль1С = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	
	Оповещение = Новый ОписаниеОповещения("ПослеАутентификацииНаСервереСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуАутентификацииСбербанк", ЭтотОбъект);
	
	ИдентификаторСессии = ""; КодВозврата = "";
	
	ПодключаемыйМодуль1С.НачатьВызовАутентификация(Оповещение, ДополнительныеПараметры.ИдентификаторСессии,
		ДополнительныеПараметры.ПодписьСоли, СтрокаФрод, ИдентификаторСессии, КодВозврата);

КонецПроцедуры

Процедура ОбработатьОшибкуАутентификацииСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ВидОперации = НСтр("ru = 'Аутентификация на сервисе банка'");
	ШаблонОшибки = НСтр("ru = 'При аутентификации на сервисе банка произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
	
КонецПроцедуры

Процедура ПослеАутентификацииНаСервереСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервисе банка'");
		ШаблонСообщения = НСтр("ru = 'При аутентификации на сервисе банка произошла ошибка.
								|Код ошибки: %1'");
		ТекстОшибки = СтрШаблон(ШаблонСообщения, РезультатВызова);
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;

	ИдентификаторСессииДвоичныеДанные = Base64Значение(ПараметрыВызова[3]);
	КодВозврата = ПараметрыВызова[4];

	Если КодВозврата <> "AA==" Тогда
		
		СписокКодовСбербанк = СписокОшибокАутентификацииПоСертификатуСбербанк();
		
		ТекОшибка = СписокКодовСбербанк.Получить(КодВозврата);
		
		Если ТекОшибка = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'Ошибка аутентификации.
									|Код: %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			ШаблонОшибки = НСтр("ru = 'Ошибка аутентификации.
									|Код: %1
									|Описание: %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ТекОшибка.Код, ТекОшибка.Описание);
		КонецЕсли;
			
		ВидОперации = НСтр("ru = 'Аутентификация'");
		
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		ИдентификаторСессииДвоичныеДанные);
	ЗакэшироватьПараметрСбербанка("ИдентификаторСессии", ИдентификаторСессии);
	ЗакэшироватьПараметрСбербанка("КаналУстановлен", Истина);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Истина);
	
КонецПроцедуры

// Получает идентификатор сертификата с токена сбербанка. Если сертификатов несколько, то предлагается выбор сертификата.
// Аутентификация на токене должна быть уже выполнена.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое после определения идентификатора сертификата
//     * Результат - Структура - данные сертификата. Содержит следующие поля:
//                        ** ИдентификаторСертификата - Строка - идентификатор сертификата;
//                        ** ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата.
//                 - Неопределено - идентификатор определить не удалось или пользователь отказался выбрать сертификат;
//     * ДополнительныеПараметры - дополнительные параметры оповещения.
//  ИмяВнешнегоМодуля - Строка - идентификатор внешней компоненты банка.
//
Процедура ПолучитьСертификатСТокенаСбербанк(Оповещение, ИмяВнешнегоМодуля)
	
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(ИмяВнешнегоМодуля);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификатора", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ПолучитьПараметрыФродМониторингаПослеПодписиСолиСбербанк(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ПодписьСоли", Результат.ЭП);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПровестиАутентификациюПослеПолученияФродПараметровСбербанк", ЭтотОбъект, Параметры);
	ПолучитьПараметрыФродМониторингаСбербанк(Оповещение, Параметры.ИмяВнешнегоМодуля);
	
КонецПроцедуры

Процедура ПолучитьПараметрыПКПослеПолученияАдресаКомпьютераСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ПараметрыФродМониторинга = Новый Структура;
	ПараметрыФродМониторинга.Вставить("IP", ПараметрыВызова[0]);
	ПараметрыФродМониторинга.Вставить("MAC", ПараметрыВызова[1]);
	ДополнительныеПараметры.Вставить("ПараметрыФродМониторинга", ПараметрыФродМониторинга);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьПараметрыDevicePrintПослеПолученияПараметровПК", ЭтотОбъект, ДополнительныеПараметры);
	ИдентификаторКомпьютера = ""; ИдентификаторПроцессора = ""; ИдентификаторBIOS = ""; ИдентификаторДиска = "";
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПолучитьПараметрыПК(
		Оповещение, ИдентификаторКомпьютера, ИдентификаторПроцессора, ИдентификаторBIOS, ИдентификаторДиска);
	
КонецПроцедуры

Процедура ПолучитьПараметрыDevicePrintПослеПолученияПараметровПК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ИдентификаторКомпьютера", ПараметрыВызова.Получить(0));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ИдентификаторПроцессора", ПараметрыВызова.Получить(1));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ИдентификаторBIOS", ПараметрыВызова.Получить(2));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ИдентификаторДиска", ПараметрыВызова.Получить(3));
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияПараметровDevicePrint", ЭтотОбъект, ДополнительныеПараметры);
	
	РазрядностьОС = ""; РазрядностьПроцессора = ""; ГлубинаЦвета = ""; ШиринаМонитора = ""; ВысотаМонитора = "";
	ПлотностьПикселяX = ""; ПлотностьПикселяY = ""; ШиринаРабочегоСтола = ""; СмещениеЧасовогоПояса = "";
	УстановленныеКомпоненты = ""; Онлайн = Ложь; СглаживаниеШрифтов = Ложь; ЯзыкСистемы = ""; ЯзыкПользователя = "";
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПолучитьПараметрыDevicePrint(Оповещение, РазрядностьОС,
		РазрядностьПроцессора, ГлубинаЦвета, ШиринаМонитора, ВысотаМонитора, ПлотностьПикселяX, ПлотностьПикселяY,
		ШиринаРабочегоСтола, СмещениеЧасовогоПояса, УстановленныеКомпоненты, Онлайн, СглаживаниеШрифтов, ЯзыкСистемы,
		ЯзыкПользователя);
	
КонецПроцедуры

Процедура ПолучитьНовыеДокументыПоТикетуПослеОтправкиЗапросаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
	ПараметрыФормы.Вставить("ИсходныйТикетСбербанк", Результат.Тикет);
	ПараметрыФормы.Вставить("ВидОперации", "ВыполнениеСинхронизации");
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, , , , ,
		ДополнительныеПараметры.ОбработчикПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОтправитьТестовыйЗапросПослеУстановкиСоединенияСбербанк(Результат, Параметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	Тикет = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиТестовогоЗапросаСбербанк", ЭтотОбъект, Параметры);
	
	ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, Параметры.ТестоваяСтрока, Параметры.НастройкаОбмена);

КонецПроцедуры

Процедура ПослеОтправкиТестовогоЗапросаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, ЗначениеЗаполнено(Результат));
	
КонецПроцедуры

Процедура ОтправитьЗапросНовыхДокументовПослеПодписиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапроса, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = Новый Структура("ЭП, СертификатПодписи", Результат.ЭП, ДополнительныеПараметры.СертификатПодписи);
	
	Попытка
		ТекстЗапроса = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.ИдентификаторЗапроса, ДополнительныеПараметры.ИдентификаторОрганизации, ДанныеПодписи);
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Формирование запроса новых документов'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапроса, Результат);
		Возврат;
	КонецПопытки;
	ДополнительныеПараметры.Вставить("Результат", Результат);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаНовыхДокументовСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ТекстЗапроса, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ПослеОтправкиЗапросаНовыхДокументовСбербанк(Ответ, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Результат.Успех = ЗначениеЗаполнено(Ответ);
	ДополнительныеПараметры.Результат.Вставить("Тикет", Ответ);
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеОтправкиЗапроса, ДополнительныеПараметры.Результат);
	
КонецПроцедуры

Процедура ОтправитьЗапросНовыхДокументовПослеОпределенияСертификатаПодписиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьНовыеДокументыПоТикетуПослеОтправкиЗапросаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОтправитьЗапросНовыхДокументовСбербанк(
		Оповещение, ДополнительныеПараметры.НастройкаОбмена, Результат.СертификатСсылка, Результат.ИдентификаторСертификата);
	
КонецПроцедуры

Процедура ОпределитьСертификатПодписиПослеУстановкиКаналаСбербанк(Результат, Параметры) Экспорт
	
	Если НЕ Результат Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьЗапросНовыхДокументовПослеОпределенияСертификатаПодписиСбербанк", ЭтотОбъект, Параметры);
	
	ОпределитьСертификатПодписиСбербанк(Оповещение, Параметры.ИмяВнешнегоМодуля, Параметры.НастройкаОбмена);

КонецПроцедуры

Процедура ПослеОтправкиЗапросовСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервисе банка'");
		ШаблонСообщения = НСтр("ru = 'При аутентификации на сервисе банка произошла ошибка.'");
		ВывестиИнформацияОбОшибкеСбербанк(
			РезультатВызова, ВидОперации, ШаблонСообщения, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапросов);
		Возврат;
	КонецЕсли;
		
	Ответ = ПараметрыВызова[2];
		
	Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
		ТекстСообщения = ОбменСБанкамиКлиентСервер.ТекстСообщенияСбербанк(Ответ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапросов);
		Возврат;
	Иначе
		Попытка
			ИдентификаторДокумента = Новый УникальныйИдентификатор(Ответ);
		Исключение
			ТекстСообщения = "";
			Попытка
				ОбменСБанкамиСлужебныйВызовСервера.ОбработатьИзвещениеСОшибкойСбербанк(
					Ответ, ТекстСообщения, ДополнительныеПараметры.НастройкаОбмена);
			Исключение
				ВидОперации = НСтр("ru = 'Чтение ответа банка'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьОшибку(ВидОперации, ТекстОшибки, , ДополнительныеПараметры.НастройкаОбмена);
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапросов);
			Возврат;
		КонецПопытки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапросов, Ответ);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиЗапросовСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ВидОперации = НСтр("ru = 'Аутентификация на сервисе банка'");
	ШаблонОшибки = НСтр("ru = 'При аутентификации на сервисе банка произошла ошибка.
						|%1'");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстОшибки);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиЗапросов);
	
КонецПроцедуры

Процедура ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатора);
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	ДополнительныеПараметры.Вставить("СоответствиеСертификатов", СоответствиеСертификатов);
	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
			ДополнительныеПараметры.Вставить("ИдентификаторСертификата", КлючЗначение.Ключ);
			Оповещение = Новый ОписаниеОповещения(
				"ОповеститьПослеПолученияДвоичныхДанныхСертификатаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьДвоичныеДанныеСертификатаСбербанк(
				Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, КлючЗначение.Ключ);
			Возврат;
		КонецЦикла
	ИначеЕсли НЕ СоответствиеСертификатов.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствуют сертификаты на банковском ключе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатора);
		Возврат;
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ШаблонПредставления = НСтр("ru = '%1, до %2'");
			ДатаСтрокой = Формат(СтруктураСертификата.ДействителенДО, "ДФ=MM.yyyy");
			Представление = СтрШаблон(ШаблонПредставления, СтруктураСертификата.КомуВыдан, ДатаСтрокой);
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Представление);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			
			ДополнительныеПараметры.Вставить("ИдентификаторСертификата", КлючЗначение.Ключ);
			Оповещение = Новый ОписаниеОповещения(
				"ОповеститьПослеПолученияДвоичныхДанныхСертификатаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьДвоичныеДанныеСертификатаСбербанк(
				Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, КлючЗначение.Ключ);
			Возврат;
		КонецЦикла
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОповещениеПослеВыбораСертификата = Новый ОписаниеОповещения(
		"ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите сертификат'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораСертификата, ЗаголовокФормыВыбора);
	
КонецПроцедуры

Процедура ПослеПолученияДанныхСертификатаСбербанка(ДанныеСертификата, ДополнительныеПараметры) Экспорт

	Если ДанныеСертификата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ДанныеСертификата", ДанныеСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"АутентификацияПоСертификатуПослеПодключенияВК1СДляСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключитьВнешнююКомпоненту1СДляСбербанка(Оповещение);
	
КонецПроцедуры

Процедура АутентификацияПоСертификатуПослеПодключенияВК1СДляСбербанка(ПодключаемыйМодуль1С, ДополнительныеПараметры) Экспорт
		
	Если ПодключаемыйМодуль1С = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.НастройкаОбмена) Тогда
		
		ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
			ДополнительныеПараметры.НастройкаОбмена);
			
		Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
			Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭтотОбъект);
			ПодключаемыйМодуль1С.НачатьВызовНачатьЖурналирование(Оповещение, ПараметрыЖурналирования.КаталогДляЖурналирования);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОСертификате = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОСертификатеПодписиСбербанк(
			ДополнительныеПараметры.ДанныеСертификата.ДвоичныеДанныеСертификата);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПредварительнойАутентификацииПоСертификатуСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПредварительнойАутентификацииПоСертификатуСбербанк", ЭтотОбъект);
		
	СерийныйНомерСертификата = СтрЗаменить(Строка(ИнформацияОСертификате.SN), " ", "");
	Соль = ""; ИдентификаторСессииBase64 = ""; КодВозврата = "";
		
	ПодключаемыйМодуль1С.НачатьВызовПреАутентификация(
		Оповещение, ИнформацияОСертификате.issuer, СерийныйНомерСертификата, Соль, ИдентификаторСессииBase64, КодВозврата);
	
КонецПроцедуры

Процедура ПустойОбработчик(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбходПроверкиКонфигурации = Истина;
	
КонецПроцедуры

Процедура ПослеПредварительнойАутентификацииПоСертификатуСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Запрос аутентификации'");
		ШаблонСообщения = НСтр("ru = 'При запросе аутентификации произошла ошибка.'");
		ВывестиИнформацияОбОшибкеСбербанк(
			РезультатВызова, ВидОперации, ШаблонСообщения, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	Соль = ПараметрыВызова[2];
	ИдентификаторСессииДвоичныеДанные = Base64Значение(ПараметрыВызова[3]);
	КодВозврата = ПараметрыВызова[4];
	
	Если КодВозврата <> "AA==" Тогда
		
		СписокКодовСбербанк = СписокОшибокАутентификацииПоСертификатуСбербанк();
		ТекОшибка = СписокКодовСбербанк.Получить(КодВозврата);
		
		ШаблонОшибки = НСтр("ru = 'Ошибка при запросе аутентификации.
									|Код: %1'");
		Если ТекОшибка = Неопределено Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КодВозврата);
		Иначе
			ШаблонОшибки = ШаблонОшибки + Символы.ПС + НСтр("ru = 'Описание: %2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ТекОшибка.Код, ТекОшибка.Описание);
		КонецЕсли;
			
		ВидОперации = НСтр("ru = 'Аутентификация'");
		
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
		Возврат;
	КонецЕсли;
	
	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		ИдентификаторСессииДвоичныеДанные);
	ДополнительныеПараметры.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьПараметрыФродМониторингаПослеПодписиСолиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	Представление = НСтр("ru = 'Данные аутентификации'");
	
	ПодписатьДанныеСбербанк(ОписаниеОповещения, ДополнительныеПараметры.ИмяВнешнегоМодуля, Соль,
		ДополнительныеПараметры.ДанныеСертификата.ИдентификаторСертификата, Представление);
	
КонецПроцедуры

Процедура ВывестиИнформацияОбОшибкеСбербанк(КодОшибки, ВидОперации, ШаблонСообщения, НастройкаОбмена = Неопределено)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	ПодключаемыйМодуль1С = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодОшибки", КодОшибки);
	ДополнительныеПараметры.Вставить("ВидОперации", ВидОперации);
	ДополнительныеПараметры.Вставить("ШаблонСообщения", ШаблонСообщения);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияТекстаОшибкиСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ПослеОшибкиПолученияТекстаОшибкиСбербанк", ЭтотОбъект);
	Описание = "";
	ПодключаемыйМодуль1С.НачатьВызовПолучитьОшибку(Оповещение, Описание);
	
КонецПроцедуры

Процедура ПослеПолученияТекстаОшибкиСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ШаблонСообщения = ДополнительныеПараметры.ШаблонСообщения + Символы.ПС
					+ НСтр("ru = 'Код ошибки: %1
								|Текст ошибки: %2'");
	ТекстОшибки = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.КодОшибки, ПараметрыВызова[0]);
	ОбработатьОшибку(
		ДополнительныеПараметры.ВидОперации, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ПослеОшибкиПолученияТекстаОшибкиСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	ШаблонСообщения = ДополнительныеПараметры.ШаблонСообщения + Символы.ПС
					+ НСтр("ru = 'Код ошибки: %1'");
	ТекстОшибки = СтрШаблон(ШаблонСообщения, ДополнительныеПараметры.КодОшибки);
	ОбработатьОшибку(
		ДополнительныеПараметры.ВидОперации, ТекстОшибки, ТекстОшибки, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПредварительнойАутентификацииПоСертификатуСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ВидОперации = НСтр("ru = 'Запрос аутентификации'");
	ШаблонОшибки = НСтр("ru = 'При запросе аутентификации произошла ошибка.
						|%1'");
	
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Отправка запроса в банк.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеАутентификацииПоСертификатуНаСервереСбербанк, Ложь);
	
КонецПроцедуры

Процедура АутентификацияНаСервереПослеУстановкиКаналаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаСервере, Ложь);
		Возврат;
	КонецЕсли;
	
	АутентифицироватьсяПоСертификатуСбербанк(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаСервере,
		ДополнительныеПараметры.ИмяМодуля, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

// Определяет номер бизнес системы на банковском токене
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//        * НомерБизнесСистемы - Строка, Неопределено - номер бизнес системы на токене, или Неопределено в случае ошибки
//        * ДополнительныеПараметры - Произвольный - контекст выполнения
//    ПодключаемыйМодуль - COMОбъект - внешняя компонента банка
//    НазваниеБизнесСистемы - Строка - название бизнес-системы.
//
Процедура ОпределитьНомерБизнесСистемыСбербанк(Оповещение, ПодключаемыйМодуль, НазваниеБизнесСистемы)
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещенияПослеОпределенияНомераБизнесСистемы", Оповещение);
	Параметры.Вставить("НазваниеБизнесСистемы", НазваниеБизнесСистемы);
	ОповещениеПослеПолученияНомераБизнесСистемы = Новый ОписаниеОповещения(
		"НайтиБизнесСистемуПослеПолученияСпискаСТокенаСбербанк", ЭтотОбъект, Параметры);
	
	ПолучитьБизнесСистемыНаТокенеСбербанк(ОповещениеПослеПолученияНомераБизнесСистемы, ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ОпределитьНеобходимостьПовторнойАутентификацииНаТокенеПослеПолученияСпискаБизнесСистемСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
			ДополнительныеПараметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		АутентифицироватьсяНаТокенеСбербанка(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене,
			РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, ДополнительныеПараметры.НастройкаОбмена, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиБизнесСистемуПослеПолученияСпискаСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеОпределенияНомераБизнесСистемы, Неопределено);
		Возврат;
	КонецЕсли;
	
	БизнесСистемы = Результат.БизнесСистемы;
	НазваниеБизнесСистемы = ДополнительныеПараметры.НазваниеБизнесСистемы;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(БизнесСистемы, Символы.ПС);
	Для Каждого Строка Из МассивСтрок Цикл
		Если СтрНайти(ВРег(Строка), ВРег(НазваниеБизнесСистемы)) > 0 Тогда
			ПозПервойКавычки = СтрНайти(Строка, """");
			БизнесСистемаСтрокой = Сред(Строка, ПозПервойКавычки + 1);
			ПозВторойКавычки = СтрНайти(БизнесСистемаСтрокой, """");
			БизнесСистемаСтрокой = Сред(БизнесСистемаСтрокой, 1 , ПозВторойКавычки - 1);
			НомерБизнесСистемы = Число(БизнесСистемаСтрокой);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерБизнесСистемы = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена бизнес система на банковском ключе.
									|Необходимо проверить работу TLS VPN Key.'");
		Операция = НСтр("ru = 'Поиск бизнес системы на электронном ключе.'");
		ШаблонОшибки = НСтр("ru = 'На электронном ключе не найдена бизнес-система %1.
							|Содержимое списка возврата: %2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, НазваниеБизнесСистемы, БизнесСистемы);
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеОпределенияНомераБизнесСистемы, Неопределено);
		Возврат;
	КонецЕсли;
	
	БизнесСистемаСтрокой = Строка(НомерБизнесСистемы);
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещенияПослеОпределенияНомераБизнесСистемы, БизнесСистемаСтрокой);
	
КонецПроцедуры

// Осуществляет отправку запроса выписки после установки виртуального канала с банком.
// 
// Параметры:
//    Успех - Булево - установлен канал со Сбербанком;
//    Параметры - Структура - данные для отправки запроса.
//
Процедура ОтправитьЗапросВыпискиПослеУстановленияКаналаСбербанк(Успех, Параметры) Экспорт
	
	Если НЕ Успех Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФормы = Параметры.Владелец;
	ПараметрыФормы = Новый Структура("МассивСообщенийОбмена, НастройкаОбмена, ГотовыеВыписки, ДатаНачала, ДатаОкончания,
		|ПринудительноеПолучениеВыписки, НомерСчета");

	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");

	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);

КонецПроцедуры

// Производит аутентификацию на токене.
//
// Параметры:
//    ОповещениеПослеАутентификацииНаТокене - ОписаниеОповещения - оповещение после выполнения процедуры:
//       * Результат - Булево - если Истина, то аутентификация успешно выполнена, иначе Ложь;
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком (может быть не заполнена);
//    ПодключаемыйМодуль - COMОбъект - внешняя компонента банка;
//    НомерКонтейнера - Число - номер бизнес системы. Для экранного токена значение не заполнено;
//    ПинКод - Строка - секретный код. Для экранного токена значение не заполнено;
//    ТипУстройства - Строка - тип токена (UNKNOWN - Неизвестно, ORDINARY - Обычный, BTN - Сенсорный(с кнопкой), SCR - Экранный).
//
Процедура ЗарегистрироватьсяНаТокенеСбербанка(ОповещениеПослеАутентификацииНаТокене, НастройкаОбмена, ПодключаемыйМодуль, НомерКонтейнера, ПинКод, ТипУстройства)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификацииНаТокене", ОповещениеПослеАутентификацииНаТокене);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("НомерКонтейнера", НомерКонтейнера);
	ДополнительныеПараметры.Вставить("ПинКод", ПинКод);
	ДополнительныеПараметры.Вставить("ТипУстройства", ТипУстройства);

	Оповещение = Новый ОписаниеОповещения("ПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПослеПредъявленияПинаНаТокенеСбербанк", ЭтотОбъект);
	Если ТипУстройства = "SCR" Тогда // Экранный токен
		ПодключаемыйМодуль.НачатьВызовПредъявитьПинЭкр(Оповещение);
	Иначе
		ПодключаемыйМодуль.НачатьВызовПредъявитьПин(Оповещение, НомерКонтейнера, ПинКод);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПослеПредъявленияПинаНаТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При аутентификации на аппаратном устройстве произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Предъявление кода доступа на аппаратном устройстве'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ОчиститьДанныеАвторизацииСбербанк();
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
	
КонецПроцедуры

Процедура ПослеПодписанияТестовойСтрокиСбербанк(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда // Пользователь отказался подписывать
		Возврат;
	ИначеЕсли Результат.Успех Тогда
		ЗакэшироватьПараметрСбербанка("ТестоваяПодпись", Результат.ЭП);
	Иначе
		Параметры.Контекст.ОписаниеОшибки = Результат.ТекстОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Параметры.Контекст);
	
КонецПроцедуры

Процедура ПолучитьИнформациюОТокенеСбербанк(Оповещение, ПодключаемыйМодуль)
	
	ДополнительныеПараметры = Новый Структура("Оповещение", Оповещение);
	ОповещениеПослеПолученияИнформацииОТокене = Новый ОписаниеОповещения("ПослеПолученияИнформацииОТокенеСбербанк",
		ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПолученияИнформацииОТокенеСбербанк", ЭтотОбъект);
	
	ВерсияПрошивки = 0;
	ТипУстройства = "";

	Попытка
		ПодключаемыйМодуль.НачатьВызовПолучитьПараметрыVPNKeyTLS(
			ОповещениеПослеПолученияИнформацииОТокене, ВерсияПрошивки, ТипУстройства);
	Исключение
		Операция = НСтр("ru = 'Получение информации об аппаратном устройстве.'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'При получении информации об аппаратном устройстве произошла ошибка:
								|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки);
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецПопытки
	
КонецПроцедуры

Процедура ПослеПолученияИнформацииОТокенеСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Получение информации об аппаратном устройстве.'");
		ТекстОшибки = НСтр("ru = 'При получении информации об аппаратном устройстве произошла ошибка.
							|Внешний модуль VpnKey-TLS вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстОшибки);
	Иначе
		Результат = Новый Структура("Успех, ТипУстройства", Истина, ПараметрыВызова.Получить(1));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, Результат);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияИнформацииОТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении информации об аппаратном устройстве произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение информации об аппаратном устройстве.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация);
	ОчиститьДанныеАвторизацииСбербанк();
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, Результат);
	
КонецПроцедуры

Процедура ПодписатьДанныеПослеПолученияИнформацииОТокенеСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписи, Результат);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТипУстройства", Результат.ТипУстройства);
		
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатАсинхроннойПодписиСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПодписиСбербанк", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПодписатьДанныеЧерезVPNKeyTLSАсинхр(
		Оповещение, ДополнительныеПараметры.СтрокаПодписи, ДополнительныеПараметры.ИдентификаторСертификата);
	
КонецПроцедуры

Процедура ОбработатьРезультатАсинхроннойПодписиСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
							|Внешний модуль Сбербанка при подписании вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ДополнительныеПараметры.ПодключаемыйМодуль;
	ТипУстройства = ДополнительныеПараметры.ТипУстройства;
	Представление = ДополнительныеПараметры.Представление;
	
	Если ТипУстройства = "UNKNOWN" ИЛИ ТипУстройства = "ORDINARY" Тогда
		ПолучитьПодписанныеДанныеСбербанк(ДополнительныеПараметры.ОповещениеПослеПодписи, ПодключаемыйМодуль);
	Иначе // сенсорный или экранный
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектПодписи", Представление);
		ПараметрыФормы.Вставить("ТипУстройства", ТипУстройства);
		ПараметрыФормы.Вставить("ИмяМодуля", ДополнительныеПараметры.ИмяМодуля);
		
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ОжиданиеПодписиСбербанк", ПараметрыФормы, , , , ,
			ДополнительныеПараметры.ОповещениеПослеПодписи, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОшибкуПодписиСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При подписи данных произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Подпись данных.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация);
	ОчиститьДанныеАвторизацииСбербанк();
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписи, Результат);
	
КонецПроцедуры

Процедура ПослеПолученияДанныхСертификатаСТокенаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'При получении данных сертификата произошла ошибка.'");
		ТекстОшибки = НСтр("ru = 'Внешний модуль VpnKey-TLS при получении сертификата вернул код ошибки'") + РезультатВызова;
		Операция = НСтр("ru = 'Получение сертификата криптографии.'");
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификата, Неопределено);
		Возврат;
	КонецЕсли;
	
	СертификатBase64 = ПараметрыВызова[1];
	
	СертификатBase64 = СтрЗаменить(СертификатBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
	СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС + "-----END CERTIFICATE-----","");
	
	ДвоичныеДанныеСертификата = Base64Значение(СертификатBase64);
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификата, ДвоичныеДанныеСертификата);

КонецПроцедуры

Процедура ОбработатьОшибкуПослеПолученияДанныхСертификатаСТокенаСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении сертификата с аппаратного устройства произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение данных сертификата с аппаратного устройства.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ОчиститьДанныеАвторизацииСбербанк();
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификата, Неопределено);
	
КонецПроцедуры

Процедура ПроверитьУстановкуПодписиПолученияСертификатовСТокенаСбербанк(Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		Параметры.Контекст.ОписаниеОшибки = Результат.ТекстОшибки;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Параметры.Контекст);
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	
	СписокСертификатов = Новый СписокЗначений;
	
	РеквизитыПроверяемогоСертификата = Новый Структура("Отпечаток");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(
		Параметры.Сертификат, РеквизитыПроверяемогоСертификата);
	
	Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
		Попытка
			СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(КлючЗначение.Значение);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка чтения сертификата.'");
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Параметры.Контекст.ОписаниеОшибки = ТекстСообщения + Символы.ПС + ТекстОшибки;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Параметры.Контекст);
			Возврат;
		КонецПопытки;
		
		Если СтруктураСертификата.Отпечаток = РеквизитыПроверяемогоСертификата.Отпечаток Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияТестовойСтрокиСбербанк", ЭтотОбъект, Параметры);
			СтрокаПодписиBase64 = "JiMxMDU4OyYjMTA3NzsmIzEwODk7JiMxMDkwOw=="; // "Тест" в Base64
			Представление = НСтр("ru = 'Тестовая строка'");
			ПодписатьДанныеСбербанк(
				ОписаниеОповещения, Параметры.ИмяВнешнегоМодуля, СтрокаПодписиBase64, КлючЗначение.Ключ, Представление);
			Возврат
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Сертификат не найден на аппаратном устройстве.'");
	Параметры.Контекст.ОписаниеОшибки = ТекстСообщения;
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Параметры.Контекст);

КонецПроцедуры

Процедура ПослеПолученияСпискаСертификатовСТокенаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова <> 0 Тогда
		ШаблонОшибки = НСтр("ru = 'При получении списка сертификатов на банковском ключе произошла ошибка.
							|Внешний модуль Сбербанка при получении списка доступных сертификатов вернул код ошибки: %1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, РезультатВызова);
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ОбработатьОшибку(Операция, ТекстОшибки);
		ОчиститьДанныеАвторизацииСбербанк();
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаСертификатов, Результат);
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСертификатов = ПараметрыВызова[1];
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если СоответствиеСертификатов.Количество() Тогда
		ДополнительныеПараметры.Вставить("СоответствиеСертификатов", СоответствиеСертификатов);
		КопияСоответствия = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СоответствиеСертификатов);
		ПолучитьДвоичныеДанныеОчередногоСертификатаСбербанк(КопияСоответствия, ДополнительныеПараметры);
		Возврат;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден ни один сертификат на аппаратном устройстве.'");
		Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаСертификатов, Результат);

КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСпискаИдентификаторовСертификатов(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Операция = НСтр("ru = 'Получение списка сертификатов с аппаратного устройства.'");
	ТекстСообщения = НСтр("ru = 'Не удалось получить информацию о сертификатах с аппаратного устройства.'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОбработатьОшибку(Операция, ТекстОшибки);
	ОчиститьДанныеАвторизацииСбербанк();
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаСертификатов, Результат);
	
КонецПроцедуры

Процедура ПолучитьДвоичныеДанныеОчередногоСертификатаСбербанк(СоответствиеСертификатов, ДополнительныеПараметры)
	
	Если СоответствиеСертификатов.Количество() = 0 Тогда
		Результат = Новый Структура();
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("СоответствиеСертификатов", ДополнительныеПараметры.СоответствиеСертификатов);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСпискаСертификатов, Результат);
		Возврат;
	КонецЕсли;

	Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
		ИдентификаторСертификата = КлючЗначение.Ключ;
		Прервать;
	КонецЦикла;
	
	СоответствиеСертификатов.Удалить(ИдентификаторСертификата);
	
	Параметры = Новый Структура;
	Параметры.Вставить("СоответствиеСертификатов", СоответствиеСертификатов);
	Параметры.Вставить("Контекст", ДополнительныеПараметры);
	Параметры.Вставить("ИдентификаторСертификата", ИдентификаторСертификата);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДвоичныхДанныхСертификатаСбербанк", ЭтотОбъект, Параметры);
	
	ПолучитьДвоичныеДанныеСертификатаСбербанк(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ИдентификаторСертификата);
	
КонецПроцедуры

// Получает двоичные данные сертификата подписи с токена.
//
// Параметры:
//  Оповещение - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//     Результат - ДвоичныеДанные - данные сертификата;
//               - Неопределено - произошла ошибка.
//     ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта Оповещение.
//  ПодключаемыйМодуль - ComОбъект - внешняя компонента сбербанка;
//  ИдентификаторСертификата  - Строка - уникальный идентификатор сертификата на токене.
//
Процедура ПолучитьДвоичныеДанныеСертификатаСбербанк(Оповещение, ПодключаемыйМодуль, ИдентификаторСертификата)
	
	СертификатBase64 = "";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияДанныхСертификата", Оповещение);
	
	ОповещениеПослеПолученияДанныхСертификата = Новый ОписаниеОповещения("ПослеПолученияДанныхСертификатаСТокенаСбербанк",
		ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПослеПолученияДанныхСертификатаСТокенаСбербанк", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовПолучитьСертификатVPNKeyTLS(
		ОповещениеПослеПолученияДанныхСертификата, ИдентификаторСертификата, СертификатBase64);
		
КонецПроцедуры

Процедура ПослеПолученияДвоичныхДанныхСертификатаСбербанк(ДвоичныеДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДвоичныеДанныеСертификата =  Неопределено Тогда
		ДополнительныеПараметры.Контекст.СоответствиеСертификатов.Удалить(ДополнительныеПараметры.ИдентификаторСертификата);
	Иначе
		ДополнительныеПараметры.Контекст.СоответствиеСертификатов.Вставить(
			ДополнительныеПараметры.ИдентификаторСертификата, ДвоичныеДанныеСертификата);
	КонецЕсли;
	
	ПолучитьДвоичныеДанныеОчередногоСертификатаСбербанк(
		ДополнительныеПараметры.СоответствиеСертификатов, ДополнительныеПараметры.Контекст);
	
КонецПроцедуры

Процедура ПодобратьСертификатПослеПолученияСпискаСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт

	Если НЕ Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОпределенияСертификата, Неопределено);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	
	СписокСертификатов = Новый СписокЗначений;

	Если ДополнительныеПараметры.Свойство("ОграничениеПоСертификатам") Тогда
		ДоступныеСертификатыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ДанныеСертификатов(
			ДополнительныеПараметры.ОграничениеПоСертификатам);
	Иначе
		ДоступныеСертификатыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ДанныеСертификатовБанка(
			ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
	СоответствиеОтпечатокСертификат = Новый Соответствие;
	Для Каждого Элемент Из ДоступныеСертификатыНастройкиОбмена Цикл
		ПроверитьСрокДействияСертификатаБанка(
			Элемент.Сертификат, Элемент.ДействителенДО, Элемент.ПользовательОповещенОСрокеДействия);
		СоответствиеОтпечатокСертификат.Вставить(Элемент.Отпечаток, Элемент.Сертификат);
	КонецЦикла;

	ВыборкаСертификатов = Новый Соответствие;
	СоответствиеСертификатовСбербанка = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Ошибка чтения сертификата.'");
			ТекстОшибки = ОписаниеОшибки();
			Операция = НСтр("ru = 'Чтение данных сертификата.'");
			ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, ДополнительныеПараметры.НастройкаОбмена);
			Продолжить;
		КонецПопытки;
		Если СтруктураСертификата.ДействителенДо < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйСертификат = СоответствиеОтпечатокСертификат.Получить(СтруктураСертификата.Отпечаток);
		Если НайденныйСертификат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеСертификатовСбербанка.Вставить(ИдентификаторСертификата, НайденныйСертификат);
		
		ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Строка(НайденныйСертификат));
	КонецЦикла;
	
	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			СтруктураВозврата = Новый Структура();
			СтруктураВозврата.Вставить("ИдентификаторСертификата", КлючЗначение.Ключ);
			СертификатСсылка = СоответствиеСертификатовСбербанка.Получить(КлючЗначение.Ключ);
			СтруктураВозврата.Вставить("СертификатСсылка", СертификатСсылка);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОпределенияСертификата, СтруктураВозврата);
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВыборкаСертификатов.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи.
									|Возможные причины:
									|- В настройке обмена через сервис 1С:ДиректБанк указан сертификат другой организации. Загрузите нужный сертификат с аппаратного устройства.
									|- Вставлено другое аппаратное устройство. Проверьте, какое устройство подключено к компьютеру.
									|- Указана неверная учетная запись. Выберите правильную учетную запись при входе на аппаратное устройство.
									|- Выбрана учетная запись, не соответствующая маршруту подписания документа. Проверьте настройки маршрутов подписания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОпределенияСертификата, Неопределено);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите сертификат подписи'");
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеПослеОпределенияСертификата", ДополнительныеПараметры.ОповещениеПослеОпределенияСертификата);
	Параметры.Вставить("СоответствиеСертификатовСбербанка", СоответствиеСертификатовСбербанка);
	ОО = Новый ОписаниеОповещения("ПослеВыбораСертификатаСбербанк", ЭтотОбъект, Параметры);

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

Процедура ПослеАутентификацииНаТокенеОпределитьСтатусыПодписейСбербанк(Успех, Параметры) Экспорт
	
	Если Не Успех Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПроверкиПодписи, Ложь);
		Возврат;
	КонецЕсли;
	
	МассивСообщенийОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.МассивСообщенийОбмена);
	
	ПроверитьСтатусыПодписейСледующегоСообщенияОбменаСбербанк(МассивСообщенийОбмена, Параметры)
	
КонецПроцедуры

Процедура ПроверитьСтатусыПодписейСледующегоСообщенияОбменаСбербанк(МассивСообщенийОбмена, Параметры)
	
	Если МассивСообщенийОбмена.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПроверкиПодписи, Истина);
		Возврат;
	КонецЕсли;
	
	ТекСообщениеОбмена = МассивСообщенийОбмена.Получить(0);
	МассивСообщенийОбмена.Удалить(0);
	
	ИмяМодуля = Неопределено;
	СоответствиеПодписейИСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ДанныеУстановленныхПодписейИСертификатов(
		ТекСообщениеОбмена, ИмяМодуля);
	
	СтрокаФорматBase64 = ОбменСБанкамиСлужебныйВызовСервера.ПодписанныеДанныеBase64(ТекСообщениеОбмена);
	
	РезультатПроверки = Новый Массив();
		
	ОпределитьСтатусСледующейПодписиСбербанк(МассивСообщенийОбмена, ИмяМодуля, ТекСообщениеОбмена, СтрокаФорматBase64,
		СоответствиеПодписейИСертификатов, РезультатПроверки, Параметры);
		
КонецПроцедуры

Процедура ОпределитьСтатусСледующейПодписиСбербанк(МассивСообщенийОбмена, ИмяМодуля, СообщениеОбмена, ПодписанныеДанные, СоответствиеПодписейИСертификатов, РезультатПроверки, Параметры)
	
	Если СоответствиеПодписейИСертификатов.Количество() = 0 Тогда
		Если РезультатПроверки.Количество() Тогда
			ОбменСБанкамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(СообщениеОбмена, РезультатПроверки);
		КонецЕсли;
		ПроверитьСтатусыПодписейСледующегоСообщенияОбменаСбербанк(МассивСообщенийОбмена, Параметры);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствиеПодписейИСертификатов Цикл
		Прервать;
	КонецЦикла;
	
	СтрокаСертификат = КлючЗначение.Значение;
	Подпись = КлючЗначение.Ключ;
	
	СоответствиеПодписейИСертификатов.Удалить(КлючЗначение.Ключ);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ПодписанныеДанные", ПодписанныеДанные);
	ДополнительныеПараметры.Вставить("СоответствиеПодписейИСертификатов", СоответствиеПодписейИСертификатов);
	ДополнительныеПараметры.Вставить("РезультатПроверки", РезультатПроверки);
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	ДополнительныеПараметры.Вставить("ИмяМодуля", ИмяМодуля);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПодписиНаТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПроверитьПодписьНаТокенеСбербанк(Оповещение, ПодписанныеДанные, Подпись, СтрокаСертификат, ИмяМодуля);
	
КонецПроцедуры

Процедура ПослеПроверкиПодписиНаТокенеСбербанк(ПодписьВерна, ДополнительныеПараметры) Экспорт
	
	СтруктураЗаписи = Новый Структура;
	
	Если НЕ ПодписьВерна = Неопределено Тогда
		СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		СтруктураЗаписи.Вставить("ПодписьВерна", ПодписьВерна);
	КонецЕсли;
	
	ДополнительныеПараметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	
	ОпределитьСтатусСледующейПодписиСбербанк(ДополнительныеПараметры.МассивСообщенийОбмена,
		ДополнительныеПараметры.ИмяМодуля, ДополнительныеПараметры.СообщениеОбмена,
		ДополнительныеПараметры.ПодписанныеДанные, ДополнительныеПараметры.СоответствиеПодписейИСертификатов,
		ДополнительныеПараметры.РезультатПроверки, ДополнительныеПараметры.Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиПодписиНаТокенеСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписи, РезультатВызова = 0);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПослеПроверкиПодписиНаТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При аутентификации на аппаратном устройстве произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Предъявление данных аутентификации на аппаратном устройстве.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ОчиститьДанныеАвторизацииСбербанк();
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписи, Неопределено);
	
КонецПроцедуры

// Получает данные подписи с токена
//
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, вызываемое в результате выполнения процедуры
//       * Результат - Структура - данные подписи
//            ** Успех - Булево - признак успешности проведенной операции, если Истина - операция выполнена, иначе Ложь
//            ** ЭП - Строка - данные подписи в Base64
//            ** ТекстОшибки - Строка - текст ошибки. Элемент присутствует только если возникла ошибка
//    ПодключаемыйМодуль - COMОбъект - внешняя компонента банка.
//
Процедура ПолучитьПодписанныеДанныеСбербанк(Оповещение, ПодключаемыйМодуль)
	
	Состояние = 0;
	ЭП = "";
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	Параметры.Вставить("ОповещениеПослеПолученияПодписи", Оповещение);
	
	ОповещениеВызова = Новый ОписаниеОповещения("ПослеПолученияДанныхПодписиСбербанк", ЭтотОбъект, Параметры,
		"ОбработатьОшибкуПолученияДанныхПодписиСбербанк", ЭтотОбъект);

	ПодключаемыйМодуль.НачатьВызовПолучитьДанныеПодписиИзVPNKeyTLS(ОповещениеВызова, Состояние, ЭП);
	
КонецПроцедуры

Процедура ПослеПолученияДанныхПодписиСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
								|Внешний модуль VpnKey-TLS при подписании вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Состояние = ПараметрыВызова.Получить(0);
	
	Если Состояние = "COMPLETE" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("ЭП", ПараметрыВызова.Получить(1));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	ИначеЕсли Состояние = "FAILED" ИЛИ Состояние = "REJECTED" Тогда
		Операция = НСтр("ru = 'Подписание данных'");
		ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка
								|Код состояния: %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Состояние);
		ОбработатьОшибку(Операция, ТекстОшибки);
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	Иначе
		ПолучитьПодписанныеДанныеСбербанк(
			ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, ДополнительныеПараметры.ПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияДанныхПодписиСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении данных подписи произошла ошибка:
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение данных подписи'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация);
	ОчиститьДанныеАвторизацииСбербанк();
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПодписи, Результат);
	
КонецПроцедуры

Процедура ПослеПроверкиВерсииВКСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИспользуетсяКриптография Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ТестНастройкиОбменаСбербанкПослеУстановкиКанала", ЭтотОбъект, ДополнительныеПараметры);
		УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, ДополнительныеПараметры.НастройкаОбмена, Истина);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ТестНастройкиОбменаПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьБазовуюАутентификациюСбербанк(Оповещение, ДополнительныеПараметры.ИмяВнешнегоМодуля,
			ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВерсиюВКПослеПодключенияСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияВерсииВКСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьВерсиюВнешнейКомпонентыСбербанк(Оповещение, Результат);
	
КонецПроцедуры

Процедура ПослеПолученияВерсииВКСбербанк(Версия, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Версия) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Версия <> ДополнительныеПараметры.ОжидаемаяВерсия Тогда
		
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'На компьютере уже установлен внешний модуль другой версии.
										|Удалите программу ""VpnKey-TLS для 1С:Предприятия 8"", перезагрузите компьютер и повторите операцию.'");
		#Иначе
			ТекстСообщения = НСтр("ru = 'Отличаются версии используемого и загруженного внешнего модуля.
										|Загрузите новый внешний модуль или перезапустите программу.'");
		#КонецЕсли
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Ложь);
		
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Истина);
	
КонецПроцедуры

Процедура ТестНастройкиОбменаСбербанкПослеУстановкиКанала(Успех, Параметры) Экспорт
	
	Если Не Успех Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк", ЭтотОбъект, Параметры);
	
	ОпределитьСертификатПодписиСбербанк(Оповещение, Параметры.ИмяВнешнегоМодуля, Параметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ОпределитьСертификатПослеАутентификацииНаТокенеСбербанк(Успех, Параметры) Экспорт

	Если Не Успех Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Результат);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСертификатаПодписатьЭДСбербанк", ЭтотОбъект, Параметры);
	
	ОграничениеПоСертификатам = Неопределено;
	Параметры.Свойство("ОграничениеПоСертификатам", ОграничениеПоСертификатам);
	ОпределитьСертификатПодписиСбербанк(ОписаниеОповещения, Параметры.ИмяВнешнегоМодуля, Параметры.НастройкаОбмена, ОграничениеПоСертификатам);



КонецПроцедуры

Процедура ПослеВыбораСертификатаПодписатьЭДСбербанк(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Результат);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("ИдентификаторСертификата", Результат.ИдентификаторСертификата);
	МассивСообщенийОбменаДляПроверкиЭПСбербанк = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
		Параметры.СообщенияОбменаСбербанк);
	Параметры.Вставить("МассивСообщенийОбменаДляПроверкиЭПСбербанк", МассивСообщенийОбменаДляПроверкиЭПСбербанк);
	
	ЗакэшироватьПараметрСбербанка("СертификатПодписи", Результат.СертификатСсылка);
	
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(
		Результат.СертификатСсылка);
	Параметры.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	Параметры.Вставить("КоличествоПодписано", 0);
	Параметры.Вставить("СертификатСсылка", Результат.СертификатСсылка);

	ПодписатьОчереднойЭДСбербанк(Параметры);

КонецПроцедуры

Процедура ПослеПредъявленияПинаНаТокенеСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ОбработатьРезультатАутентификацииНаТокенеСбербанка(ДополнительныеПараметры.НастройкаОбмена, РезультатВызова,
		ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене);
	
КонецПроцедуры

Процедура ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	РеквизитыНастройкиОбмена = Новый Структура("ИдентификаторОрганизации, ИмяВнешнегоМодуля");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	СтрокаПодписи = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
					+ "RequestId=" + ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаПодписи);
	Параметры.Вставить("СтрокаПодписиBase64", СтрокаПодписиBase64);

	Представление = НСтр("ru = 'Тестовый запрос'");
	Параметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	Параметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Параметры.Вставить("ИдентификаторСертификата", Результат.ИдентификаторСертификата);
	Параметры.Вставить("СертификатСсылка", Результат.СертификатСсылка);
	Параметры.Вставить("ИмяМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодписьПослеУстановкиСбербанк", ЭтотОбъект, Параметры);
	ПодписатьДанныеСбербанк(ОписаниеОповещения, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, СтрокаПодписиBase64,
		Результат.ИдентификаторСертификата, Представление);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеУстановкиСбербанк(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда // Пользователь отказался подписывать
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	ИначеЕсли Результат.Успех Тогда
		ПараметрыСертификата = Новый Структура("СертификатBase64");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(
			Параметры.СертификатСсылка, ПараметрыСертификата);
		
		Параметры.Вставить("ДанныеПодписи", Результат.ЭП);
		Оповещение = Новый ОписаниеОповещения("ОтправитьТестовыйЗапросПослеПроверкиПодписиСбербанк", ЭтотОбъект, Параметры);
		
		ПроверитьПодписьНаТокенеСбербанк(Оповещение, Параметры.СтрокаПодписиBase64, Результат.ЭП,
			ПараметрыСертификата.СертификатBase64, Параметры.ИмяМодуля);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьТестовыйЗапросПослеПроверкиПодписиСбербанк(ПодписьВерна, Параметры) Экспорт
	
	Если ПодписьВерна = Неопределено Тогда
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	Если Не ПодписьВерна Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Установленная подпись неверна.'"));
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = Новый Структура("ЭП, СертификатПодписи", Параметры.ДанныеПодписи, Параметры.СертификатСсылка);
	
	Попытка
		ТестоваяСтрока = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(Параметры.НастройкаОбмена,
			Параметры.ИдентификаторЗапроса, Параметры.ИдентификаторОрганизации, ДанныеПодписи);
	Исключение
		ВидОперации = НСтр("ru = 'Формирование запроса новых документов'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, Параметры.НастройкаОбмена);
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецПопытки;
	
	КодОшибки = ""; ТекстОшибки = "";
	
	Параметры.Вставить("ТестоваяСтрока", ТестоваяСтрока);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьТестовыйЗапросПослеУстановкиСоединенияСбербанк", ЭтотОбъект, Параметры);
	УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, Параметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ОтправитьПлатежныеПорученияПослеУстановкиКаналаСбербанк(Успех, Параметры) Экспорт

	Если Не Успех Тогда
		ОтправитьДокументыВСбербанк(Параметры);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОтправленныеСообщенияОбмена", Новый Массив);
	ОтправитьОчереднойПлатежныйДокументСбербанк(Параметры)

КонецПроцедуры

Процедура ОтправитьОчереднойПлатежныйДокументСбербанк(Параметры)
	
	Если Параметры.МассивСообщенийОбмена.Количество() = 0 Тогда // Все сообщения обмена были отправлены
		
		Если Параметры.ОтправленныеСообщенияОбмена.Количество() Тогда
			ОтправленныеДокументы = ОбменСБанкамиСлужебныйВызовСервера.ВладельцыСообщенийОбмена(
				Параметры.ОтправленныеСообщенияОбмена);
			Оповестить("ОтправленоDirectBank", ОтправленныеДокументы);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуДокументовПослеПолученияСтатусовЗапросовСбербанк", ЭтотОбъект, Параметры);
		Параметры.Вставить("ОповещениеПослеПолученияНовыхДокументов", Оповещение);
		ПолучитьРезультатыОбработкиЗапросовСбербанк(Параметры.НастройкаОбмена, Параметры);
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = Параметры.МассивСообщенийОбмена.Получить(0);
	Параметры.МассивСообщенийОбмена.Удалить(0);
	
	ФродПараметры = ЗначениеИзКэшаСбербанк("ФродПараметры");
	
	ПакетXML = ОбменСБанкамиСлужебныйВызовСервера.ПакетXMLСбербанка(
		СообщениеОбмена, Параметры.НастройкаОбмена, ФродПараметры);
		
	Параметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	Если ПакетXML = Неопределено Тогда
		ПослеОтправкиПлатежногоДокументаСбербанк(Неопределено, Параметры)
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиПлатежногоДокументаСбербанк", ЭтотОбъект, Параметры);
		ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, ПакетXML, Параметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтправкиПлатежногоДокументаСбербанк(Тикет, Параметры) Экспорт
		
	Если НЕ ЗначениеЗаполнено(Тикет) Тогда
		ОтправитьДокументыВСбербанк(Параметры);
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(Тикет);
	
	ВидЭДПлатежноеПоручение = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение");
	ОбменСБанкамиСлужебныйВызовСервера.СохранитьИдентификаторы(
		МассивИдентификаторов, Параметры.НастройкаОбмена, ВидЭДПлатежноеПоручение);
	
	СтатусОтправлен = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Отправлен");
	
	ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусСообщенияОбмена(Параметры.СообщениеОбмена, СтатусОтправлен);
	
	Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + 1;
	
	Параметры.ОтправленныеСообщенияОбмена.Добавить(Параметры.СообщениеОбмена);

	ОтправитьОчереднойПлатежныйДокументСбербанк(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуДокументовПослеПолученияСтатусовЗапросовСбербанк(Результат, Параметры) Экспорт
	
	ОтправитьДокументыВСбербанк(Параметры);
	
КонецПроцедуры

Процедура ПолучитьРезультатыОбработкиЗапросовСбербанк(Знач НастройкаОбмена, Параметры)
	
	ИдентификаторОрганизации = Неопределено;
	МассивИдентификаторов = ОбменСБанкамиСлужебныйВызовСервера.ТикетыЗапросовСтатусовПлатежейСбербанк(
		НастройкаОбмена, ИдентификаторОрганизации);

	МассивСообщенийОбменаДляПроверки = Новый Массив;
	
	Параметры.Вставить("МассивСообщенийОбменаДляПроверки", МассивСообщенийОбменаДляПроверки);
	
	ПолучитьОчереднойДокументИзСбербанка(НастройкаОбмена, ИдентификаторОрганизации, МассивИдентификаторов, Параметры);
	
КонецПроцедуры

Процедура ПолучитьОчереднойДокументИзСбербанка(НастройкаОбмена, ИдентификаторОрганизации, МассивТикетов, Параметры)
	
	Если МассивТикетов.Количество() = 0 Тогда // Все документы получены
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ОпределитьСтатусыПодписейСбербанк(
			Параметры.ОповещениеПослеПолученияНовыхДокументов, НастройкаОбмена, Параметры.МассивСообщенийОбменаДляПроверки);
		Возврат;
	КонецЕсли;
	
	Тикет = МассивТикетов.Получить(0);
	МассивТикетов.Удалить(0);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Контекст", Параметры);
	ДополнительныеПараметры.Вставить("МассивТикетов", МассивТикетов);
	ДополнительныеПараметры.Вставить("Тикет", Тикет);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОбработатьРезультатПолученияДокументаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьСтатусЗапросаСбербанк(Оповещение, ИдентификаторОрганизации, Тикет, НастройкаОбмена);
	
КонецПроцедуры

Процедура ОбработатьРезультатПолученияДокументаСбербанк(Результат, Параметры) Экспорт
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	Если Результат = Неопределено Тогда
		Параметры.Контекст.Вставить("ЕстьОшибка", Истина);
		ОбменСБанкамиСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаОбмена, Параметры.Тикет);
		ПолучитьОчереднойДокументИзСбербанка(НастройкаОбмена, Параметры.ИдентификаторОрганизации, Новый Массив, Параметры.Контекст);
		Возврат;
	КонецЕсли;
	
	Если Результат = "<!--NOT PROCESSED YET-->" ИЛИ Результат = "<!--NOT_PROCESSED_YET-->" Тогда // Запрос еще не был обработан
		ПолучитьОчереднойДокументИзСбербанка(
			Параметры.НастройкаОбмена, Параметры.ИдентификаторОрганизации, Параметры.МассивТикетов, Параметры.Контекст);
		Возврат
	ИначеЕсли Результат = "<!--REQUEST NOT FOUND-->" ИЛИ Результат = "<!--REQUEST_NOT_FOUND-->"
		ИЛИ Результат = "<!--REQUESTID DUBLIC-->" ИЛИ Результат = "<!--REQUESTID_DUBLIC-->" Тогда // Идентификатор не найден в базе банка или не может быть обработан
		ОбменСБанкамиСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаОбмена, Параметры.Тикет);
		ПолучитьОчереднойДокументИзСбербанка(
			Параметры.НастройкаОбмена, Параметры.ИдентификаторОрганизации, Параметры.МассивТикетов, Параметры.Контекст);
		Возврат
	КонецЕсли;

	ЕстьОшибка = Ложь;
	МассивНовыхСообщенийОбмена = Новый Массив;
	Попытка
		КоличествоТомов = 0;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветСбербанка(
			Результат, НастройкаОбмена, МассивНовыхСообщенийОбмена, Параметры.Тикет, КоличествоТомов);
		Если КоличествоТомов > 0 Тогда
			Оповещение = Новый ОписаниеОповещения(
				"СохранитьБольшойПакетПослеПолученияТомовЧерезТокенСбербанк", ЭтотОбъект, Параметры);
			ПолучитьМноготомныйДокументЧерезТокенСбербанк(
				Оповещение, НастройкаОбмена, Параметры.ИдентификаторОрганизации, Параметры.Тикет, КоличествоТомов);
			Возврат;
		КонецЕсли;
	Исключение
		ЕстьОшибка = Истина;
		ВидОперации = НСтр("ru = 'Чтение ответа Сбербанка.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, НастройкаОбмена);
	КонецПопытки;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Параметры.Контекст.МассивСообщенийОбменаДляПроверки, МассивНовыхСообщенийОбмена);

	Если ЕстьОшибка Тогда
		Параметры.Контекст.Вставить("ЕстьОшибка", Истина);
		ПолучитьОчереднойДокументИзСбербанка(
			НастройкаОбмена, Параметры.ИдентификаторОрганизации, Новый Массив, Параметры.Контекст);
	Иначе
		ПолучитьОчереднойДокументИзСбербанка(
			НастройкаОбмена, Параметры.ИдентификаторОрганизации, Параметры.МассивТикетов, Параметры.Контекст);
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьБольшойПакетПослеПолученияТомовЧерезТокенСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		МассивНовыхСообщенийОбмена = Новый Массив;
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьБольшойПакетСбербанк(ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.Тикет, Результат.МассивТомов, МассивНовыхСообщенийОбмена);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ДополнительныеПараметры.Контекст.МассивСообщенийОбменаДляПроверки, МассивНовыхСообщенийОбмена);
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.ИдентификаторОрганизации, ДополнительныеПараметры.МассивТикетов,
			ДополнительныеПараметры.Контекст);
	Иначе
		ДополнительныеПараметры.Контекст.Вставить("ЕстьОшибка", Истина);
		ПолучитьОчереднойДокументИзСбербанка(ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.ИдентификаторОрганизации, Новый Массив, ДополнительныеПараметры.Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ТекущийТом >= ДополнительныеПараметры.КоличествоТомов Тогда
		Результат = Новый Структура;
		Результат.Вставить("Успех", Истина);
		Результат.Вставить("МассивТомов", ДополнительныеПараметры.МассивТомов);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущийТом = ДополнительныеПараметры.ТекущийТом + 1;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	ПодключаемыйМодуль1С = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияТомаДокументаЧерезТокенСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПолученияТомаДокументаЧерезТокенСбербанк", ЭтотОбъект);
		
	ИдентификаторСессии = ЗначениеИзКэшаСбербанк("ИдентификаторСессии");
	Ответ = "";
	
	ПодключаемыйМодуль1С.НачатьВызовПолучитьЧастьЗапросаSRP(Оповещение, ДополнительныеПараметры.ИдентификаторЗапроса,
		Строка(ДополнительныеПараметры.ТекущийТом), ДополнительныеПараметры.ИдентификаторОрганизации, ИдентификаторСессии, Ответ);
	
КонецПроцедуры

Процедура ПослеПолученияТомаДокументаЧерезТокенСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ВидОперации = НСтр("ru = 'Получение части большого документа из банка'");
		ШаблонСообщения = НСтр("ru = 'При получении большого документа с сервера банка произошла ошибка.'");
		ВывестиИнформацияОбОшибкеСбербанк(
			РезультатВызова, ВидОперации, ШаблонСообщения, ДополнительныеПараметры.НастройкаОбмена);
		Результат = Новый Структура;
		Результат.Вставить("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.МассивТомов.Добавить(ПараметрыВызова[4]);
	
	ПолучитьОчереднойТомДокументаЧерезТокенСбербанк(ДополнительныеПараметры)

КонецПроцедуры

Процедура ОбработатьОшибкуПолученияТомаДокументаЧерезТокенСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ВидОперации = НСтр("ru = 'Получение части большого документа'");
	ШаблонОшибки = НСтр("ru = 'При получении части документа с сервера банка произошла ошибка.
							|%1'");

	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияБольшогоДокумента, Результат);
	
КонецПроцедуры
	
Процедура ПослеПолученияКонфигурационнойСтроки(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("КонфигурационнаяСтрока", ПараметрыВызова.Получить(0));
	
	ФродПараметры = Новый ФиксированнаяСтруктура(ДополнительныеПараметры.ПараметрыФродМониторинга);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияФродПараметров, ФродПараметры);
	
КонецПроцедуры

Процедура ПослеПолученияПараметровDevicePrint(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("РазрядностьОС", ПараметрыВызова.Получить(0));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("РазрядностьПроцессора", ПараметрыВызова.Получить(1));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ГлубинаЦвета", ПараметрыВызова.Получить(2));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ШиринаМонитора", ПараметрыВызова.Получить(3));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ВысотаМонитора", ПараметрыВызова.Получить(4));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ПлотностьПикселяX", ПараметрыВызова.Получить(5));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ПлотностьПикселяY", ПараметрыВызова.Получить(6));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ШиринаРабочегоСтола", ПараметрыВызова.Получить(7));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("СмещениеЧасовогоПояса", ПараметрыВызова.Получить(8));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("УстановленныеКомпоненты", ПараметрыВызова.Получить(9));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("Онлайн", ПараметрыВызова.Получить(10));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("СглаживаниеШрифтов", ПараметрыВызова.Получить(11));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ЯзыкСистемы", ПараметрыВызова.Получить(12));
	ДополнительныеПараметры.ПараметрыФродМониторинга.Вставить("ЯзыкПользователя", ПараметрыВызова.Получить(13));
	
	Оповещение =  Новый ОписаниеОповещения("ПослеПолученияКонфигурационнойСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	КонфигурационнаяСтрока = "";
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПолучитьКонфигурационнуюСтроку(
		Оповещение, КонфигурационнаяСтрока);
	
КонецПроцедуры

Процедура ОтправитьДокументыВСбербанк(Параметры)
	
	Для Каждого КлючЗначение Из Параметры.ДанныеДляОтправкиВСбербанк Цикл
		Параметры.Вставить("НастройкаОбмена", КлючЗначение.Ключ);
		Параметры.Вставить("МассивСообщенийОбмена", КлючЗначение.Значение);
		Параметры.ДанныеДляОтправкиВСбербанк.Удалить(КлючЗначение.Ключ);
		Обработчик = Новый ОписаниеОповещения("ОтправитьПлатежныеПорученияПослеУстановкиКаналаСбербанк", ЭтотОбъект, Параметры);
		УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Обработчик, КлючЗначение.Ключ);
		Возврат;
	КонецЦикла;
	
	ЗавершитьОтправкуСообщенийОбмена(Неопределено, Параметры);
	
КонецПроцедуры

Процедура ПодписатьОчереднойЭДСбербанк(Параметры)
	
	Если Параметры.СообщенияОбменаСбербанк.Количество() = 0 Тогда // все ЭД подписаны
		ОбработчикПослеПроверкиПодписи = Новый ОписаниеОповещения(
			"ЗавершитьПроцессПодписанияЭДПослеПроверкиПодписей", ЭтотОбъект, Параметры);
		ОпределитьСтатусыПодписейСбербанк(ОбработчикПослеПроверкиПодписи, Параметры.НастройкаОбмена,
			Параметры.МассивСообщенийОбменаДляПроверкиЭПСбербанк);
		Возврат;
	КонецЕсли;
	
	ПодписываемоеСообщение = Параметры.СообщенияОбменаСбербанк[0];
	Параметры.СообщенияОбменаСбербанк.Удалить(0);
	Параметры.Вставить("СообщениеОбмена", ПодписываемоеСообщение);
	
	УжеПодписано = ОбменСБанкамиСлужебныйВызовСервера.СообщениеСодержитПодписьПоСертификату(
		ПодписываемоеСообщение, Параметры.СертификатСсылка);
	
	Если УжеПодписано Тогда
		ПодписатьОчереднойЭДСбербанк(Параметры);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЭДСбербанк", ЭтотОбъект, Параметры);
	
	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.ПодписанныеДанныеBase64(ПодписываемоеСообщение);

	ПодписатьДанныеСбербанк(ОписаниеОповещения, Параметры.ИмяВнешнегоМодуля, СтрокаПодписиBase64,
		Параметры.ИдентификаторСертификата, ПодписываемоеСообщение);
	
КонецПроцедуры

Процедура ЗавершитьПроцессПодписанияЭДПослеПроверкиПодписей(Успех, Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Успех);
	Результат.Вставить("Количество", Параметры.КоличествоПодписано);
	ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, Результат);
	
КонецПроцедуры

Процедура ПослеПодписанияЭДСбербанк(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		ВозвращаемоеЗначение = Новый Структура("Успех, Количество", Ложь, Параметры.КоличествоПодписано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, ВозвращаемоеЗначение);
	ИначеЕсли Результат.Успех Тогда
		
		ДвоичныеДанныеЭП = Base64Значение(Результат.ЭП);
		
		ДанныеПроверкиПодписи = Новый Структура;
		ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);

		ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(
			Параметры.СообщениеОбмена, ДвоичныеДанныеЭП, Параметры.СертификатСсылка, ДанныеПроверкиПодписи);
			
		Параметры.КоличествоПодписано = Параметры.КоличествоПодписано + 1;
		ПодписатьОчереднойЭДСбербанк(Параметры);
	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВозвращаемоеЗначение = Новый Структура("Успех, Количество", Ложь, Параметры.КоличествоПодписано);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПодписания, ВозвращаемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодписаниеЭДСбербанка(Знач ДанныеПодписи, Параметры)
	
	МассивОбработанныхНастроекОбмена = Параметры.МассивОбработанныхНастроекОбмена;
	СертификатПодписи = Параметры.СтруктураСертификата.ВыбранныйСертификат;
	ТекущийИндекс = 0;
	
	Для Каждого Элемент Из ДанныеПодписи Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ИндексТретьейИтерации Тогда
			Продолжить;
		Иначе
			Параметры.ИндексТретьейИтерации = ТекущийИндекс;
		КонецЕсли;
		
		Если НЕ МассивОбработанныхНастроекОбмена.Найти(Элемент.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОбработанныхНастроекОбмена.Добавить(Элемент.Ключ);
		МассивСообщенийОбменаБанка = Элемент.Значение;
		Если МассивСообщенийОбменаБанка.Количество() > 0 Тогда
			Параметры.Вставить("ТекущиеДанныеПодписи", ДанныеПодписи);
			ОбработчикПослеПодписания = Новый ОписаниеОповещения("ПродолжитьПодписаниеЭДСбербанк", ЭтотОбъект, Параметры);
			ОграничениеПоСертификатам = Неопределено;
			Параметры.Свойство("МассивСертификатов", ОграничениеПоСертификатам);
			ПодписатьЭДСбербанк(ОбработчикПослеПодписания, Элемент.Ключ, МассивСообщенийОбменаБанка, ОграничениеПоСертификатам);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПродолжитьПодписаниеБанковскихЭД(Параметры.РезультатВыбораСертификатаБанка, Параметры);

КонецПроцедуры

Процедура ПродолжитьПодписаниеЭДСбербанк(Результат, Параметры) Экспорт
	
	Если Результат.Успех Тогда
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных + Результат.Количество;
		НачатьПодписаниеЭДСбербанка(Параметры.ТекущиеДанныеПодписи, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораСертификатаСбербанк(ВыбраннаяСтрока, Параметры) Экспорт
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеОпределенияСертификата, КодВозвратаДиалога.Отмена);
	Иначе
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("ИдентификаторСертификата", ВыбраннаяСтрока.Значение);
		СертификатСсылка = Параметры.СоответствиеСертификатовСбербанка.Получить(ВыбраннаяСтрока.Значение);
		СтруктураВозврата.Вставить("СертификатСсылка", СертификатСсылка);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеОпределенияСертификата, СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКаналПослеОпределенияНомераБизнесСистемыСбербанк(НомерБизнесСистемы, Параметры) Экспорт
	
	Если НомерБизнесСистемы = Неопределено Тогда //не удалось определить бизнес систему
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеУстановкиВиртуальногоКанала, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеУстановкиКаналаСбербанк", ЭтотОбъект, Параметры,
		"ОбработатьОшибкуУстановкиКаналаНаТокенеСбербанк", ЭтотОбъект);
	
	Параметры.ПодключаемыйМодуль.НачатьВызовУстановитьTLSКаналСБизнесСистемой(Оповещение, НомерБизнесСистемы);
	
КонецПроцедуры

Процедура ПослеУстановкиКаналаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВызова = 0 Тогда
		Операция = НСтр("ru = 'Установка виртуального канала'");
		ТекстСообщения = НСтр("ru = 'Не удалось установить связь с сервером.
									|Необходимо проверить работу TLS VPN Key.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при установке виртуального канала вернула код ошибки'")
							+ " " + РезультатВызова;
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ОчиститьДанныеАвторизацииСбербанк();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиВиртуальногоКанала, РезультатВызова = 0);
	
КонецПроцедуры

Процедура ОбработатьОшибкуУстановкиКаналаНаТокенеСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При установке канала на аппаратном устройстве произошла ошибка.
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Установка канала на аппаратном устройстве.'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ОчиститьДанныеАвторизацииСбербанк();
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиВиртуальногоКанала, Ложь);
	
КонецПроцедуры

Процедура ОбработкаВыбораСертификатаСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатора);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторСертификата", Результат.Значение);
	Оповещение = Новый ОписаниеОповещения(
		"ОповеститьПослеПолученияДвоичныхДанныхСертификатаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьДвоичныеДанныеСертификатаСбербанк(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, Результат.Значение);

КонецПроцедуры

Процедура ОповеститьПослеПолученияДвоичныхДанныхСертификатаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатора);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИдентификаторСертификата", ДополнительныеПараметры.ИдентификаторСертификата);
	СтруктураВозврата.Вставить("ДвоичныеДанныеСертификата", Результат);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатора, СтруктураВозврата);
	
КонецПроцедуры

Процедура ПослеПолученияВерсииКомпонентыСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Версия = Сред(РезультатВызова, 1, 7);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияВерсии, Версия);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияВерсииКомпонентыСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При получении версии внешнего модуля банка произошла ошибка:
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Получение версии внешней компоненты банка'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияВерсии, Ложь);
	
КонецПроцедуры

Процедура ПолучитьПараметрыТокенаПослеТихогоСтартаСбербанк(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при запуске клиента аппаратного устройства.
									|Убедитесь, что устройство подключено к компьютеру.'");
		ТекстОшибки = НСтр("ru = 'Внешний модуль VpnKey-TLS при запуске Start.exe вернул код ошибки %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатВызова);
		Операция = НСтр("ru = 'Запуск клиента аппаратного устройства.'");
		ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
		ОчиститьДанныеАвторизацииСбербанк();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗарегистрироватьсяНаТокенеПослеПолученияИнформацииОТокенеСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьИнформациюОТокенеСбербанк(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль);

КонецПроцедуры

Процедура ОбработатьОшибкуТихогоСтартаСбербанк(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПодробнаяИнформация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ШаблонОшибки = НСтр("ru = 'При запуске программы банка произошла ошибка:
						|%1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, КраткаяИнформация);
	ВидОперации = НСтр("ru = 'Запуск программы Start.exe'");
	ОбработатьОшибку(ВидОперации, ПодробнаяИнформация, ТекстСообщения);
	ОчиститьДанныеАвторизацииСбербанк();
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьсяНаТокенеПослеПолученияИнформацииОТокенеСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ОчиститьДанныеАвторизацииСбербанк();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
		Возврат
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ПринудительнаяАутентификация") Тогда
		ПринудительнаяАутентификация = ДополнительныеПараметры.ПринудительнаяАутентификация;
	Иначе
		ПринудительнаяАутентификация = Ложь;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ТипУстройства", Результат.ТипУстройства);
		
	НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	
	Если ДополнительныеПараметры.ЭтоТест ИЛИ ПринудительнаяАутентификация
		ИЛИ ЗначениеИзКэшаСбербанк("ЗапомнитьСессию") <> Истина
		ИЛИ Не (ЗначениеЗаполнено(ЗначениеИзКэшаСбербанк("АутентификацияНаТокенеВыполнена"))
				И ЗначениеИзКэшаСбербанк("ТекущаяНастройкаОбмена") = НастройкаОбмена) Тогда
		
		Если ЗначениеЗаполнено(ЗначениеИзКэшаСбербанк("АутентификацияНаТокенеВыполнена")) Тогда
			ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);

		КонецЕсли;
		
		Если Результат.ТипУстройства <> "SCR" Тогда // не экранный токен
			Обработчик = Новый ОписаниеОповещения(
				"ПослеВводаДанныхАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросПинКодаСбербанк", , , , , , Обработчик);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НомерКонтейнера = Строка(ЗначениеИзКэшаСбербанк("НомерКонтейнера"));
	ПинКод = ЗначениеИзКэшаСбербанк("ПинКод");
	
	ЗарегистрироватьсяНаТокенеСбербанка(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, НастройкаОбмена,
		ДополнительныеПараметры.ПодключаемыйМодуль, НомерКонтейнера, ПинКод, Результат.ТипУстройства);
	
КонецПроцедуры

Процедура ПослеВводаДанныхАутентификацииСбербанк(ДанныеАутентификации, ДополнительныеПараметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено ИЛИ ДанныеАутентификации = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
		Возврат;
	КонецЕсли;
	
	НомерКонтейнера = ДанныеАутентификации.НомерКонтейнера;
	ПинКод = ДанныеАутентификации.ПинКод;
	
	ЗакэшироватьПараметрСбербанка("ЗапомнитьСессию", ДанныеАутентификации.ЗапомнитьСессию);
	ЗакэшироватьПараметрСбербанка("НомерКонтейнера", НомерКонтейнера);
	ЗакэшироватьПараметрСбербанка("ПинКод", ПинКод);
	
	ЗарегистрироватьсяНаТокенеСбербанка(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене,
		ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.ПодключаемыйМодуль, НомерКонтейнера, ПинКод,
		ДополнительныеПараметры.ТипУстройства);
	
КонецПроцедуры

Процедура ОбработатьРезультатАутентификацииНаТокенеСбербанка(НастройкаОбмена, РезультатАвторизации, ОповещениеПослеАутентификацииНаТокене)
	
	ЕстьОшибка = Ложь;
	
	Если Не (РезультатАвторизации = 0) Тогда
		Если РезультатАвторизации = 28 Тогда
			ШаблонСообщения = НСтр("ru = 'PIN%1 заблокирован'");
			НомерКонтейнера = ЗначениеИзКэшаСбербанк("НомерКонтейнера");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерКонтейнера);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 27 Тогда
			ШаблонСообщения = НСтр("ru = 'PUK%1 заблокирован'");
			ТекстСообщения = СтрШаблон(
								ШаблонСообщения, ЗначениеИзКэшаСбербанк("НомерКонтейнера"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 25 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Пользователь заблокирован'"));
		ИначеЕсли РезультатАвторизации = 29 ИЛИ РезультатАвторизации = 30 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверные данные аутентификации на токене'"));
		Иначе
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить аутентификацию на аппаратном устройстве.
										|Необходимо выполнить его перезапуск'");
			ТекстОшибки = НСтр("ru = 'Внешний модуль VpnKey-TLS при авторизации на аппаратном устройстве вернул код ошибки: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатАвторизации);
			Операция = НСтр("ru = 'Авторизация на токене'");
			ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, НастройкаОбмена);
		КонецЕсли;
		ЕстьОшибка = Истина;
		ОчиститьДанныеАвторизацииСбербанк();
	КонецЕсли;
	ЗакэшироватьПараметрСбербанка("АутентификацияНаТокенеВыполнена", Не ЕстьОшибка);
	ЗакэшироватьПараметрСбербанка("ТекущаяНастройкаОбмена", НастройкаОбмена);
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеАутентификацииНаТокене, Не ЕстьОшибка);
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковВыполнитьОбмен(ОтпечаткиСертификатов, Параметры) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	ДоступныеСертификаты = ОбменСБанкамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, Параметры.НастройкаОбмена);
			
	Сертификат = Неопределено;
	МассивСертификатов = Новый Массив;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из ДоступныеСертификаты Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			МассивСертификатов.Очистить();
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МассивСертификатов.Количество() Тогда
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
		
		ПараметрыЗапросаИдентификатораСессии = Новый Структура;
		ПараметрыЗапросаИдентификатораСессии.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
		
		ДанныеДляПолученияИдентификатораСессии = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ПараметрыЗапросаИдентификатораСессии);

		ОписаниеДанных.Вставить("Данные", ДанныеДляПолученияИдентификатораСессии);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтправитьИПолучитьДокументыВБанкПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
		
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьБизнесСистемыНаТокенеСбербанк(Оповещение, ПодключаемыйМодуль)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеПолученияСпискаБизнесСистем", Оповещение);
	ОповещениеПослеПолученияНомераБизнесСистемы = Новый ОписаниеОповещения(
		"ПослеПолученияСпискаБизнесСистемСТокенаСбербанк", ЭтотОбъект, Параметры,
		"ОбработатьОшибкуПолученияСпискаБизнесСистемНаТокенеСбербанк", ЭтотОбъект);
	БизнесСистемы = "";
	ПодключаемыйМодуль.НачатьВызовПолучитьСписокБизнесСистемVPNKeyTLS(
		ОповещениеПослеПолученияНомераБизнесСистемы, БизнесСистемы);
	
КонецПроцедуры

Процедура ПровестиТестНастройкиСбербанк(Оповещение, НастройкаОбмена, ПараметрыОбмена)
	
	ОчиститьДанныеАвторизацииСбербанк();
	ДополнительныеВнешниеКомпонентыКлиент.УдалитьВнешнююКомпонентуИзКэш(ПараметрыОбмена.ИмяВнешнегоМодуля);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ОповещениеПослеТестаНастройки", Оповещение);
	ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", ПараметрыОбмена.ИмяВнешнегоМодуля);
	ДополнительныеПараметры.Вставить("ИспользуетсяКриптография", ПараметрыОбмена.ИспользуетсяКриптография);

	ОписаниеОбработчика = Новый ОписаниеОповещения("ПослеПроверкиВерсииВКСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПроверитьВерсиюВКСбербанк(ОписаниеОбработчика, ПараметрыОбмена.ИмяВнешнегоМодуля);
	
КонецПроцедуры

Процедура ПослеГенерацииSMSСбербанк(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗадания.КраткоеПредставлениеОшибки);
		ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.МассивСообщенийОбмена);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
			Иначе
				РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
				ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
					ДополнительныеПараметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
				Обработчик = Новый ОписаниеОповещения(
					"СгенерироватьSMSПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ВыполнитьБазовуюАутентификациюСбербанк(Обработчик, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля,
					ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.НастройкаОбмена);
			КонецЕсли
		Иначе // запрос был отправлен
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
			ПараметрыФормы.Вставить("ВидОперации", "ИнициализацияПодтвержденияПлатежа");
			ПараметрыФормы.Вставить("ИсходныйТикетСбербанк", РезультатОперации.Тикет);
			ПараметрыФормы.Вставить("СообщениеОбмена", ДополнительныеПараметры.СообщениеОбмена);
			Оповещение = Новый ОписаниеОповещения(
				"ПослеИнициализацииПодтвержденияПлатежаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, , , , , Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьSMSПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияГенерацииSMSСбербанк(
			ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.СообщениеОбмена);
		Если Результат.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			ДополнительныеПараметры = Новый Структура("АутентификацияПроизводилась", Истина);
			Оповещение = Новый ОписаниеОповещения("ПослеГенерацииSMSСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
		Иначе
			ПослеГенерацииSMSСбербанк(Результат, ДополнительныеПараметры)
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеИнициализацииПодтвержденияПлатежаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // ошибка
		ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.МассивСообщенийОбмена);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СообщениеОбмена", ДополнительныеПараметры.СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ИдентификаторКриптопрофиля", Результат);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьSMSКодВСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ПодтверждениеПлатежныхПорученийПоSMS", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьSMSКодВСбербанк(Пароль, ДополнительныеПараметры) Экспорт
	
	Если Пароль = Неопределено Тогда // пользователь отказался вводить смс
		ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.МассивСообщенийОбмена);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("SMSКод", Пароль);
	ДополнительныеПараметры.Вставить("АутентификацияПроизводилась", Ложь);
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияОтправкиSMSВСбербанк(ДополнительныеПараметры.НастройкаОбмена,
		ДополнительныеПараметры.СообщениеОбмена, ДополнительныеПараметры.ИдентификаторКриптопрофиля, Пароль);
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеОтправкиSMSВСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеОтправкиSMSВСбербанк(Результат, ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтправкиSMSВСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.МассивСообщенийОбмена);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
			ДополнительныеПараметры.МассивСообщенийОбмена);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
			Иначе
				РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
				ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
					ДополнительныеПараметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
				Обработчик = Новый ОписаниеОповещения(
					"ОтправитьSMSПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ВыполнитьБазовуюАутентификациюСбербанк(Обработчик, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля,
					ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.НастройкаОбмена);
			КонецЕсли
		Иначе // запрос был отправлен
			ТикетСбербанк = РезультатОперации.Тикет;
				ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
			ПараметрыФормы.Вставить("ВидОперации", "ПолучениеРезультатаПодтверждения");
			ПараметрыФормы.Вставить("ИсходныйТикетСбербанк", РезультатОперации.Тикет);
			ПараметрыФормы.Вставить("СообщениеОбмена", ДополнительныеПараметры.СообщениеОбмена);
			Оповещение = Новый ОписаниеОповещения("ПослеПроверкиSMSВСбербанке", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму(
				"Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, , , , , Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьSMSПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияОтправкиSMSВСбербанк(
			ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.СообщениеОбмена,
			ДополнительныеПараметры.ИдентификаторКриптопрофиля, ДополнительныеПараметры.SMSКод);
		Если Результат.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			ДополнительныеПараметры.Вставить("АутентификацияПроизводилась", Истина);
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиSMSВСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
		Иначе
			ПослеОтправкиSMSВСбербанк(Результат, ДополнительныеПараметры)
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиSMSВСбербанке(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПодтверждениеДокументовСбербанк(ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.НастройкаОбмена,
		ДополнительныеПараметры.МассивСообщенийОбмена);
	
КонецПроцедуры

Процедура ПослеСинхронизацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	Если Результат = Неопределено Тогда // задание было отменено пользователем
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОперации.ТребуетсяАутентификация Тогда
			
			Если ДополнительныеПараметры.АутентификацияПроизводилась Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка аутентификации на сервере банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
			Иначе
				Обработчик = Новый ОписаниеОповещения(
					"СинхронизацияПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ВыполнитьБазовуюАутентификациюСбербанк(Обработчик, ДополнительныеПараметры.РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля,
					ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.НастройкаОбмена);
			КонецЕсли
		Иначе
			Структура = Новый Структура("ИтогКолОтправленных, ИтогКолПолученных", 0, РезультатОперации.ИтогКолПолученных);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения, Структура);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизацияПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		ДополнительныеПараметры.Вставить("АутентификацияПроизводилась", Истина);
		РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияСинхронизацииСбербанк(
			ДополнительныеПараметры.НастройкаОбмена);
		Если РезультатОтправки.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			Оповещение = Новый ОписаниеОповещения("ПослеСинхронизацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);
		Иначе
			ПослеСинхронизацииСбербанк(РезультатОтправки, ДополнительныеПараметры)
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", ДополнительныеПараметры.НастройкаОбмена);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
	Иначе // ошибка, переход к следующей настройке обмена
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВыпискуСбербанкаПослеВопросаОбИхНаличии(РезультатВопроса, Параметры) Экспорт
	
	Если НЕ РезультатВопроса Тогда
		РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияФормированияИОтправкиЗапросовВыпискиСбербанк(
			Параметры.НастройкаОбмена, Параметры.ДатаНачала, Параметры.ДатаОкончания, Параметры.НомерСчета, Истина);
			
		Если РезультатОтправки.Статус = "Выполняется" Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			Оповещение = Новый ОписаниеОповещения("ПослеФормированияИОтправкиЗапросовВыпискиСбербанк", ЭтотОбъект, Параметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);
		Иначе
			ПослеФормированияИОтправкиЗапросовВыпискиСбербанк(РезультатОтправки, Параметры);
		КонецЕсли;
	Иначе
		ОтправитьЗапросВыпискиПослеУстановленияКаналаСбербанк(Истина, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьВыпискиПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		ВладелецФормы = ДополнительныеПараметры.Владелец;
		ПараметрыФормы = Новый Структура("МассивСообщенийОбмена, НастройкаОбмена, ГотовыеВыписки, ДатаНачала, ДатаОкончания,
										|ПринудительноеПолучениеВыписки, НомерСчета");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
		ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
		ПараметрыФормы.Вставить("МассивСообщенийОбмена", ДополнительныеПараметры.МассивСообщенийОбмена);
		ПараметрыФормы.Вставить("ГотовыеВыписки", Новый Массив);
		ПараметрыФормы.Вставить("МассивТикетов", Новый Массив);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиДокументовВСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Результат);
	ОтправкаСообщенийОбмена(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПодключитьВнешнююКомпонентуСбербанка(Оповещение, ИмяМодуля)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиВерсии", Оповещение);
	
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"ПроверитьВерсиюВКПослеПодключенияСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
	ДополнительныеВнешниеКомпонентыКлиент.ПодключитьВнешнююКомпонентуПоИдентификатору(
		ОповещениеПослеПодключенияВК, ИмяМодуля, Ложь); // версию не контролируем, т.к есть ошибка в ВК Сбербанка (лишний символ)
	
КонецПроцедуры

Процедура ПроверитьВерсиюВКПослеПодключенияСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьАктуальностьВерсииВКПослеПолученияСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьВерсиюВнешнейКомпонентыСбербанк(Оповещение, Результат);
	
КонецПроцедуры

Процедура ПроверитьАктуальностьВерсииВКПослеПолученияСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Неопределено);
		Возврат;
	КонецЕсли;
	
	Версия = Результат;
	
	Если ОбменСБанкамиКлиентСервер.ПоддерживаетсяВерсияКомпонентыСбербанк(Версия) Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, ДополнительныеПараметры.ПодключаемыйМодуль);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиВерсии, Неопределено);
	КонецЕсли;

КонецПроцедуры

Функция СписокОшибокАутентификацииПоСертификатуСбербанк()
	
	СписокКодовСбербанк = Новый Соответствие;
	
	Описание = НСтр("ru = 'Сертификат не найден или не валидный или учетная запись заблокирована.'");
	СписокКодовСбербанк.Вставить("AQ==", Новый Структура("Код, Описание", "01", Описание));
	
	Описание = НСтр("ru = 'Истек срок действия сертификата.'");
	СписокКодовСбербанк.Вставить("Aw==", Новый Структура("Код, Описание", "03", Описание));
	
	Описание = НСтр("ru = 'Офис организации пользователя заблокирован.'");
	СписокКодовСбербанк.Вставить("BA==", Новый Структура("Код, Описание", "04", Описание));
	
	Описание = НСтр("ru = 'В аутентификации отказано ФРОД-мониторингом.'");
	СписокКодовСбербанк.Вставить("BQ==", Новый Структура("Код, Описание", "05", Описание));
	
	Описание = НСтр("ru = 'IP изменился.'");
	СписокКодовСбербанк.Вставить("Bg==", Новый Структура("Код, Описание", "06", Описание));
	
	Описание = НСтр("ru = 'Финансовый договор заблокирован.'");
	СписокКодовСбербанк.Вставить("Bw==", Новый Структура("Код, Описание", "07", Описание));
	
	Описание = НСтр("ru = 'Ошибка доступа к серверу.'");
	СписокКодовСбербанк.Вставить("CA==", Новый Структура("Код, Описание", "08", Описание));
	
	Описание = НСтр("ru = 'Не специфицированная ошибка.'");
	СписокКодовСбербанк.Вставить("CQ==", Новый Структура("Код, Описание", "09", Описание));
	
	Описание = НСтр("ru = 'Слишком частая ошибка входа в систему.'");
	СписокКодовСбербанк.Вставить("Cg==", Новый Структура("Код, Описание", "0A", Описание));
	
	Описание = НСтр("ru = 'Учетная запись отключена.'");
	СписокКодовСбербанк.Вставить("Cw==", Новый Структура("Код, Описание", "0B", Описание));
	
	Описание = НСтр("ru = 'Точка входа недоступна.'");
	СписокКодовСбербанк.Вставить("DA==", Новый Структура("Код, Описание", "0C", Описание));
	
	Описание = НСтр("ru = 'Ожидается заключение договора.'");
	СписокКодовСбербанк.Вставить("DQ==", Новый Структура("Код, Описание", "0D", Описание));
	
	Описание = НСтр("ru = 'Договор закрыт.'");
	СписокКодовСбербанк.Вставить("Dg==", Новый Структура("Код, Описание", "0E", Описание));
	
	Описание = НСтр("ru = 'Доступ закрыт настройками клиента.'");
	СписокКодовСбербанк.Вставить("Dw==", Новый Структура("Код, Описание", "0F", Описание));
	
	Описание = НСтр("ru = 'У пользователя в настройках отсутствует точка входа УПШ.'");
	СписокКодовСбербанк.Вставить("EA==", Новый Структура("Код, Описание", "10", Описание));

	Описание = НСтр("ru = 'У пользователя в настройках отсутствует точка входа УПШ_Холдинг.'");
	СписокКодовСбербанк.Вставить("EQ==", Новый Структура("Код, Описание", "11", Описание));
	
	Описание = НСтр("ru = 'Пользователь не найден по параметрам сертификата.'");
	СписокКодовСбербанк.Вставить("Eg==", Новый Структура("Код, Описание", "12", Описание));
	
	Возврат СписокКодовСбербанк;
		
КонецФункции

// Отправляет данные на сервер банка и получает ответ в виде тикета.
// 
// Параметры:
//    Оповещение - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//     * Тикет - Строка - полученный ответ банка;
//             - Неопределено - при возникновении ошибки.
//     * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//    Данные - Строка - данные для отправки в банк
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена с банком.
//
Процедура ВыполнитьОтправкуДанныхЧерезТокенСбербанк(Оповещение, Данные, НастройкаОбмена = Неопределено) Экспорт
	
	Тикет = "";
	ИдентификаторСессии = ЗначениеИзКэшаСбербанк("ИдентификаторСессии");
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];

	ПодключаемыйМодуль1С = ПараметрыПодсистемыОбменСБанками.Получить("ВнешняяКомпонента1СДляСбербанка");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиЗапросов", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросовСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуОтправкиЗапросовСбербанк", ЭтотОбъект);
	
	Ответ = "";
	
	ПодключаемыйМодуль1С.НачатьВызовПослатьЗапросыSRP(Оповещение, Данные, ИдентификаторСессии, Ответ);
	
КонецПроцедуры

Процедура ТестНастройкиОбменаПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
	
КонецПроцедуры

Процедура ОтправитьДокументыВСбербанкБазоваяАутентификация(Оповещение, ДанныеДляОтправки, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИтогКолОтправленных", 0);
		ДополнительныеПараметры.Вставить("ИтогКолПолученных", 0);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеДляОтправки Цикл
		ДополнительныеПараметры.Вставить("НастройкаОбмена", КлючЗначение.Ключ);
		ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", КлючЗначение.Значение.МассивСообщенийОбмена);
		ДополнительныеПараметры.Вставить(
			"МассивСообщенийТребующихПодтверждение", КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение);
		ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиДокументов", Оповещение);
		ДополнительныеПараметры.Вставить("ИмяВнешнегоМодуля", КлючЗначение.Значение.ИмяВнешнегоМодуля);
		
		ДанныеДляОтправки.Удалить(КлючЗначение.Ключ);
		ДополнительныеПараметры.Вставить("ДанныеДляОтправки", ДанныеДляОтправки);
		
		РезультатОтправки = Неопределено;
		Если КлючЗначение.Значение.Свойство("РезультатОтправки", РезультатОтправки) Тогда // была попытка отправки на сервере
			ОбработатьРезультатОтправкиДокументовПоНастройкеСбербанк(РезультатОтправки, ДополнительныеПараметры);
		Иначе
			Обработчик = Новый ОписаниеОповещения(
				"ОтправитьДокументыПослеБазовойАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ВыполнитьБазовуюАутентификациюСбербанк(
				Обработчик, КлючЗначение.Значение.ИмяВнешнегоМодуля, КлючЗначение.Ключ, КлючЗначение.Ключ);
		КонецЕсли;
		Возврат;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("ИтогКолОтправленных, ИтогКолПолученных");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ДополнительныеПараметры);
	СтруктураВозврата.Вставить("ИтогКолПодготовленных", СтруктураВозврата.ИтогКолОтправленных);
	
	ВыполнитьОбработкуОповещения(Оповещение, СтруктураВозврата);
	
КонецПроцедуры

Процедура ОтправитьДокументыПослеБазовойАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		
		Если ДополнительныеПараметры.МассивСообщенийОбмена.Количество() Тогда
			ПараметрыОтправки = Новый Структура;
			ПараметрыОтправки.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
			ПараметрыОтправки.Вставить("МассивСообщенийОбмена", ДополнительныеПараметры.МассивСообщенийОбмена);
			ПараметрыОтправки.Вставить("ПолучитьСтатусыДокументов", Истина);
			ПараметрыОтправки.Вставить("ВидЭД", ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ПлатежноеПоручение"));
			РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПоОтправкеДокументовВСбербанк(ПараметрыОтправки);
			
			Если РезультатОтправки.Статус = "Выполняется" Тогда
				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
				ПараметрыОжидания.ВыводитьСообщения = Истина;
				Оповещение = Новый ОписаниеОповещения(
					"ПослеОтправкиПлатежныхДокументовСбербанк", ЭтотОбъект, ДополнительныеПараметры);
				ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);
			Иначе
				ПослеОтправкиПлатежныхДокументовСбербанк(РезультатОтправки, ДополнительныеПараметры)
			КонецЕсли;
		Иначе // требуется подтверждение документов
			Оповещение = Новый ОписаниеОповещения(
				"ПослеПодтвержденияДокументовПоНастройкеОбменаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ВыполнитьПодтверждениеДокументовСбербанк(Оповещение, ДополнительныеПараметры.НастройкаОбмена,
				ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение);
		КонецЕсли;
	ИначеЕсли Результат.ТребуетсяТокен Тогда
		ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
		ОбменСБанкамиКлиентСервер.СообщитьОбОшибкеСбербанк(ВидОперации, "GA==", ДополнительныеПараметры.НастройкаОбмена);
		ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
			ДополнительныеПараметры.ДанныеДляОтправки);
	Иначе // ошибка, переход к следующей настройке обмена
		ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
			ДополнительныеПараметры.ДанныеДляОтправки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтправкиПлатежныхДокументовСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
	
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда // задание было отменено
		ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
			ДополнительныеПараметры.ДанныеДляОтправки, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВидОперации = НСтр("ru = 'Отправка платежных документов в Сбербанк.'");
		ОбработатьОшибку(ВидОперации, Результат.ПодробноеПредставлениеОшибки, Результат.КраткоеПредставлениеОшибки,
			ДополнительныеПараметры.НастройкаОбмена);
		ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
			ДополнительныеПараметры.ДанныеДляОтправки, ДополнительныеПараметры);
	Иначе // выполнено
		РезультатОтправки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатОтправки.ТребуетсяАутентификация Тогда // неверный идентификатор сессии.
			ВидОперации = НСтр("ru = 'Отправка платежных документов в Сбербанк.'");
			ТекстСообщения = НСтр("ru = 'Неверный идентификатора сессии.
										|Обратитесь в техническую поддержку.'");
			ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения, ДополнительныеПараметры.НастройкаОбмена);
			ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
				ДополнительныеПараметры.ДанныеДляОтправки, ДополнительныеПараметры);
		Иначе
			ОбработатьРезультатОтправкиДокументовПоНастройкеСбербанк(РезультатОтправки, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиДокументовПоНастройкеСбербанк(РезультатОтправки, ДополнительныеПараметры)
	
	Оповестить("ОтправленоDirectBank", РезультатОтправки.ОтправленныеДокументы);
	ДополнительныеПараметры.ИтогКолОтправленных =
		ДополнительныеПараметры.ИтогКолОтправленных + ДополнительныеПараметры.МассивСообщенийОбмена.Количество();
	ДополнительныеПараметры.ИтогКолПолученных =
		ДополнительныеПараметры.ИтогКолПолученных + РезультатОтправки.ИтогКолПолученных;
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение, РезультатОтправки.СообщенияТребуютПодтверждения, Истина);
	
	Если ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПодтвержденияДокументовПоНастройкеОбменаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьПодтверждениеДокументовСбербанк(
			Оповещение, ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение);
	Иначе
		ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
			ДополнительныеПараметры.ДанныеДляОтправки, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеПодтвержденияДокументовПоНастройкеОбменаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	ОтправитьДокументыВСбербанкБазоваяАутентификация(ДополнительныеПараметры.ОповещениеПослеОтправкиДокументов,
		ДополнительныеПараметры.ДанныеДляОтправки, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьФродПараметрыПослеПодключенияВКСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьДанныеАутентификацииПослеПолученияФродПараметровСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьПараметрыФродМониторингаСбербанк(Оповещение, ДополнительныеПараметры.ИмяВнешнегоМодуля);
	
КонецПроцедуры

Процедура ПолучитьДанныеАутентификацииПослеПолученияФродПараметровСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ФродПараметры", Результат);
	
	ДанныеАутентификации = Неопределено;
	
	Если ДополнительныеПараметры.ЛогинПароль = Неопределено Или НЕ ЗначениеЗаполнено(ДополнительныеПараметры.ЛогинПароль.Логин) Тогда
		Если ПолученыДанныеАвторизации(ДополнительныеПараметры.НастройкаОбмена, ДанныеАутентификации) Тогда
			АутентификацияНаСервереПослеПолученияДанныхАутентификацииСбербанк(ДанныеАутентификации, ДополнительныеПараметры);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
				"АутентификацияНаСервереПослеПолученияДанныхАутентификацииСбербанк", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьДанныеАутентификации(Оповещение, ДополнительныеПараметры.НастройкаОбмена);
		КонецЕсли;
	Иначе
		АутентификацияНаСервереПослеПолученияДанныхАутентификацииСбербанк(ДополнительныеПараметры.ЛогинПароль, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура АутентификацияНаСервереПослеПолученияДанныхАутентификацииСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Логин", Результат.Логин);
	ДополнительныеПараметры.Вставить("Пароль", Результат.Пароль);
	
	ПараметрыВозврата = Неопределено;
	Попытка
		ОбменСБанкамиСлужебныйВызовСервера.БазоваяАутентификацияСбербанк(ДополнительныеПараметры.НастройкаОбмена,
			Результат.Логин, Результат.Пароль, ДополнительныеПараметры.ФродПараметры, ДополнительныеПараметры.КлючСессии,
			ПараметрыВозврата);
	Исключение
		УдалитьПарольИзСеанса(ДополнительныеПараметры.КлючСессии);
		ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
			ДополнительныеПараметры.НастройкаОбмена);
		Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
			ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(
				ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
		КонецЕсли;

		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТекстСообщения = НСтр("ru = 'Неверный логин/пароль или учетная запись заблокирована.'") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ВидОперации = НСтр("ru = 'Аутентификация на сервере Сбербанка'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецПопытки;
	
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		ОбменСБанкамиСлужебныйКлиент.СохранитьЖурналВФайл(
			ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;

	Если ПараметрыВозврата.ТребуетсяТокен Тогда
		ДополнительныеПараметры.СтруктураВозврата.ТребуетсяТокен = Истина;
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
	ИначеЕсли ПараметрыВозврата.ТребуетсяСМСАутентификация Тогда
		ДополнительныеПараметры.Вставить("B", ПараметрыВозврата.B);
		ДополнительныеПараметры.Вставить("Соль", ПараметрыВозврата.Соль);
		Оповещение = Новый ОписаниеОповещения(
			"ОтправитьОдноразовыйПарольПослеВводаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", , ЭтотОбъект, , , , Оповещение);
	Иначе
		ДополнительныеПараметры.СтруктураВозврата.Успех = Истина;
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьОдноразовыйПарольПослеВводаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Ошибка = Ложь; ТребуетсяСменаПароля = Ложь;
	
	ОбменСБанкамиСлужебныйВызовСервера.ОтправитьОдноразовыйПарольВСбербанк(
		ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.КлючСессии, Результат, Ошибка, ТребуетсяСменаПароля);
		
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
		
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
		
	Если Ошибка Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяСменаПароля Тогда
		Обработчик = Новый ОписаниеОповещения("СменитьПарольПослеВводаНовогоСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.СменаПароля", , ЭтотОбъект, , , , Обработчик);
	Иначе
		ДополнительныеПараметры.СтруктураВозврата.Успех = Истина;
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

Процедура СменитьПарольПослеВводаНовогоСбербанк(НовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(НовыйПароль) Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Ошибка = Ложь;
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("Логин", ДополнительныеПараметры.Логин);
	ДанныеАутентификации.Вставить("Пароль", ДополнительныеПараметры.Пароль);
	ДанныеАутентификации.Вставить("НовыйПароль", НовыйПароль);
	
	ОбменСБанкамиСлужебныйВызовСервера.СменитьПарольСбербанк(ДополнительныеПараметры.НастройкаОбмена,
		ДополнительныеПараметры.КлючСессии, ДанныеАутентификации, ДополнительныеПараметры.Соль, ДополнительныеПараметры.B,
		Ошибка);
		
	ПараметрыЖурналирования = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(
		ДополнительныеПараметры.НастройкаОбмена);
		
	Если ПараметрыЖурналирования.ИспользоватьЖурналирование Тогда
		СохранитьЖурналВФайл(ДополнительныеПараметры.НастройкаОбмена, ПараметрыЖурналирования.КаталогДляЖурналирования);
	КонецЕсли;
		
	Если НЕ Ошибка Тогда
		ДополнительныеПараметры.СтруктураВозврата.Успех = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеБазовойАутентификации, ДополнительныеПараметры.СтруктураВозврата);
	
КонецПроцедуры

Процедура ТихийСтартПослеПодключенияВКСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОчиститьДанныеАвторизацииСбербанк();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииНаТокене, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПараметрыТокенаПослеТихогоСтартаСбербанк", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуТихогоСтартаСбербанк", ЭтотОбъект);
	Результат.НачатьВызовТихийСтарт(Оповещение);
	
КонецПроцедуры

// Получить версию внешней компоненты Сбербанка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//     * Результат - Строка - версия внешней компоненты;
//                 - Булево - содержит Ложь при возникновении ошибки
//  ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//
Процедура ПолучитьВерсиюВнешнейКомпонентыСбербанк(Оповещение, ПодключаемыйМодуль)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияВерсии", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияВерсииКомпонентыСбербанк", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияВерсииКомпонентыСбербанк", ЭтотОбъект);
	ПодключаемыйМодуль.НачатьВызовВерсия(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеВыписки

Процедура ПослеПолученияОтпечатковПолучитьВыпискуБанка(Отпечатки, Параметры) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	РеквизитыНастройкиОбмена = Параметры.РеквизитыНастройкиОбмена;
	НомерСчета = Параметры.НомерСчета;
	
	НастройкиОбмена = Неопределено;
	МассивЗапросов = ОбменСБанкамиСлужебныйВызовСервера.ЗапросыВыписок(
		НастройкаОбмена, ДатаНачала, ДатаОкончания, НомерСчета, МассивОтпечатков, НастройкиОбмена);
		
	Если НЕ МассивЗапросов.Количество() ИЛИ НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("МассивСообщенийОбмена", МассивЗапросов);
	
	Если НастройкиОбмена.Подписывать Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена.ДоступныеСертификаты) Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос выписки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
			
		ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(
				НастройкиОбмена.СертификатОрганизацииДляПодписи);
		Соответствие = Новый Соответствие;
		Для Каждого ДоступныйСертификат Из НастройкиОбмена.ДоступныеСертификаты Цикл
			ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(ДоступныйСертификат);
			Соответствие.Вставить(ДоступныйСертификат, ПараметрыСертификата);
		КонецЦикла;
		Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		ПодписатьЗапросыВыписок(Неопределено, Параметры);
		Возврат;
	КонецЕсли;
		
	ПараметрыАвторизации = Новый Структура;
	
	Если РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		ДанныеДоступныхСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(НастройкаОбмена);
		Если ДанныеДоступныхСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов для аутентификации на сервере банка.
										|Проверьте настройки прямого обмена с банком или обратитесь к администратору'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		МассивСертификатов = Новый Массив;
		
		Для Каждого ДанныеСертификата Из ДанныеДоступныхСертификатов Цикл
			Если МассивОтпечатков.Найти(ДанныеСертификата.Значение.Отпечаток) <> Неопределено Тогда
				МассивСертификатов.Добавить(ДанныеСертификата.Ключ);
			КонецЕсли
		КонецЦикла;
		
		Если МассивСертификатов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'На компьютере не найдены сертификаты для аутентификации на сервере банка.
										|Установите сертификаты в личное хранилище сертификатов операционной системы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
			
		ДополнительныеПараметры = Новый Структура("НастройкаОбмена", НастройкаОбмена);
		ОписаниеПолученияДанных = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ДополнительныеПараметры);
		ОписаниеДанных.Вставить("Данные", ОписаниеПолученияДанных);
				
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуЗапросаВыпискиПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		Если НЕ ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			Оповещение = Новый ОписаниеОповещения("ОткрытьФормуЗапросаВыписки", ЭтотОбъект, Параметры);
			ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
			Возврат;
		Иначе
			ОткрытьФормуЗапросаВыписки(ПараметрыАвторизации, Параметры);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПродолжитьОтправкуЗапросаВыпискиПослеРасшифровкиМаркера(Результат, Параметры) Экспорт

	Если Результат.Успех Тогда
		
		ПараметрыФормы = Новый Структура("ДанныеСертификата, ДатаНачала, ДатаОкончания, МассивСообщенийОбмена,
			|НастройкаОбмена, НомерСчета, Пароль, Пользователь, СообщениеОбмена");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
		ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
																	Результат.РасшифрованныеДанные);
		ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, Параметры.Владелец);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Криптография

Процедура ОбработатьРезультатПодписиЗапросовВыписок(Результат, ПараметрыОбработки) Экспорт
	
	КолПодписанных = 0;
	НаборДанных = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("НаборДанных", НаборДанных)
			И ТипЗнч(НаборДанных) = Тип("Массив") Тогда
			Для Каждого Структура Из НаборДанных Цикл
				СвойстваПодписи = Неопределено;
				Подпись = Неопределено;
				Если Структура.Свойство("СвойстваПодписи", СвойстваПодписи)
					И ТипЗнч(СвойстваПодписи) = Тип("Структура")
					И СвойстваПодписи.Свойство("Подпись", Подпись) Тогда
					КолПодписанных = КолПодписанных + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если КолПодписанных > 0 Тогда
		СтатусПодписан = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Подписан");
		ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусыСообщенийОбмена(ПараметрыОбработки.МассивСообщенийОбмена, СтатусПодписан);
		Оповещение = Новый ОписаниеОповещения("ОтравитьЗапросыВыписокПослеПроверкиПодписей", ЭтотОбъект, ПараметрыОбработки);
		ПроверитьПодписиЭлектронныхДокументов(Оповещение, ПараметрыОбработки.МассивСообщенийОбмена);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
КонецПроцедуры

Процедура ОтравитьЗапросыВыписокПослеПроверкиПодписей(Результат, ПараметрыОбработки) Экспорт
	
	Если Не Результат Тогда //есть невалидные подписи
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = ПараметрыОбработки.РеквизитыНастройкиОбмена;
	
	АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = АсинхронныйОбмен Тогда
		Если РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
			МассивСертификатов = Новый Массив;
			Для Каждого КлючЗначение Из ПараметрыОбработки.СоотвСертификатовИИхСтруктур Цикл
				МассивСертификатов.Добавить(КлючЗначение.Ключ);
			КонецЦикла;
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
			ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
			ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
			ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
			ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
			
			ДополнительныеПараметры = Новый Структура("НастройкаОбмена", ПараметрыОбработки.НастройкаОбмена);
			ОписаниеПолученияДанных = Новый ОписаниеОповещения(
				"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ДополнительныеПараметры);
			ОписаниеДанных.Вставить("Данные", ОписаниеПолученияДанных);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжитьОтправкуЗапросаВыпискиПослеРасшифровкиМаркера", ЭтотОбъект, ПараметрыОбработки);
			ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
		Иначе
			ПараметрыАутентификации = Новый Структура;
			ПолученыДанныеАутентификации = ПолученыДанныеАвторизации(
				ПараметрыОбработки.НастройкаОбмена, ПараметрыАутентификации);
			Если ПолученыДанныеАутентификации Тогда
				ОткрытьФормуЗапросаВыписки(ПараметрыАутентификации, ПараметрыОбработки);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ОткрытьФормуЗапросаВыписки", ЭтотОбъект, ПараметрыОбработки);
				ПолучитьДанныеАутентификации(Оповещение, ПараметрыОбработки.НастройкаОбмена);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВладелецФормы = ПараметрыОбработки.Владелец;
	ПараметрыФормы = Новый Структура("ДанныеСертификата, ДатаНачала, ДатаОкончания, МассивСообщенийОбмена,
		|НастройкаОбмена, НомерСчета, Пароль, Пользователь, СообщениеОбмена, ГотовыеВыписки,
		|ПринудительноеПолучениеВыписки");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыОбработки);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
	
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

Процедура ПроверитьПодписиЭлектронныхДокументов(ОписаниеОповещения, СообщенияОбмена)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиПодписейЭлектронныхДокументов", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("СообщенияОбмена", СообщенияОбмена);
	ДополнительныеПараметры.Вставить("ИндексТекущегоСообщенияОбмена", -1);
	ДополнительныеПараметры.Вставить("ВсеПодписиВалидны", Истина);
	
	ПроверитьПодписиОчередногоЭлектронногоДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьПодписиОчередногоЭлектронногоДокумента(ДополнительныеПараметры)
	
	ДополнительныеПараметры.ИндексТекущегоСообщенияОбмена = ДополнительныеПараметры.ИндексТекущегоСообщенияОбмена + 1;
	
	ВсегоСообщенийОбмена = ДополнительныеПараметры.СообщенияОбмена.Количество();
	
	Если ВсегоСообщенийОбмена <= ДополнительныеПараметры.ИндексТекущегоСообщенияОбмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписейЭлектронныхДокументов,
			ДополнительныеПараметры.ВсеПодписиВалидны);
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПроверкиПодписейЭлектронногоДокумента = Новый ОписаниеОповещения(
		"ПослеПроверкиПодписейЭлектронногоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		
	ПроверитьПодписи(ОповещениеПослеПроверкиПодписейЭлектронногоДокумента,
		ДополнительныеПараметры.СообщенияОбмена[ДополнительныеПараметры.ИндексТекущегоСообщенияОбмена]);
	
КонецПроцедуры

Процедура ПослеПроверкиПодписейЭлектронногоДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		ДополнительныеПараметры.ВсеПодписиВалидны = Ложь;
	КонецЕсли;
	
	ПроверитьПодписиОчередногоЭлектронногоДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверитьОчереднуюПодпись(ДополнительныеПараметры)
	
	ДополнительныеПараметры.ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	
	Если ДополнительныеПараметры.МассивПодписей.Количество() <= ДополнительныеПараметры.ИндексТекущейПодписи Тогда
		
		Если ДополнительныеПараметры.РезультатыПроверкиПодписей.Количество() Тогда
			ОбменСБанкамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(
				ДополнительныеПараметры.СообщениеОбмена, ДополнительныеПараметры.РезультатыПроверкиПодписей);
		КонецЕсли;
		
		ПодписиВалидны = Истина;
		
		Для Каждого Запись Из ДополнительныеПараметры.РезультатыПроверкиПодписей Цикл
			Если НЕ Запись.ПодписьВерна Тогда
				ПодписиВалидны = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, ПодписиВалидны);
		
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеПроверкиПодписи = Новый ОписаниеОповещения(
		"ЗаписатьРезультатПослеПроверкиПодписи", ЭтотОбъект, ДополнительныеПараметры);
		
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(ОповещениеПослеПроверкиПодписи, ДополнительныеПараметры.ДвоичныеДанныеЭД,
		ДополнительныеПараметры.МассивПодписей[ДополнительныеПараметры.ИндексТекущейПодписи].Подпись);
	
КонецПроцедуры

#КонецОбласти

#Область Аутентификация

// Вызывается из ЭлектроннаяПодписьКлиент.Расшифровать.
//
// Параметры:
//  Результат - Структура - содержит поля;
//     * ОписаниеДанных - Структура - значение первого параметра процедуры ЭлектроннаяПодписьКлиент.Расшифровать;
//     * Оповещение - ОписаниеОповещение - оповещение, которое должно быть вызвано после получения зашифрованного идентификатора сессии.
//  ДополнительныеПараметры - Произвольный - Параметры описания оповещения из поля Данные первого параметра процедуры ЭлектроннаяПодписьКлиент.Расшифровать.
//
Процедура ПолучитьЗашифрованныйИдентификаторСессии(Результат, ДополнительныеПараметры) Экспорт
	
	Попытка
		МаркерЗашифрованный = ОбменСБанкамиСлужебныйВызовСервера.ЗашифрованныйИдентификаторСессии(
			ДополнительныеПараметры.НастройкаОбмена, Результат.ОписаниеДанных.ВыбранныйСертификат);
	Исключение
		Результат.ОписаниеДанных.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если НЕ МаркерЗашифрованный = Неопределено Тогда
		Результат.ОписаниеДанных.Вставить("Данные", МаркерЗашифрованный);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Результат.ОписаниеДанных);
	
КонецПроцедуры

Процедура ОтправитьСообщениеВБанкСАутентификациейЛогинПароль(ПараметрыАутентификации, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
		НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль(Параметры.Результат, Параметры);
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	РеквизитыНастройкиОбмена = Новый Структура("ПрограммаБанка, АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(НастройкаОбмена, РеквизитыНастройкиОбмена);
	АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = АсинхронныйОбмен Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьСообщениеВБанкПослеПолученияМаркера", ЭтотОбъект, Параметры);
		ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
			РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ПараметрыАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
			НастройкаОбмена);
	Иначе
		МассивСообщенийОбменаКОтправке = Параметры.МассивСообщенийОбменаКОтправкеВБанкСАвторизациейЛогинПароль;
		СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
		СоотвНастроекОбменаИСтруктурСертификатов.Вставить(Параметры.НастройкаОбмена, ПараметрыАутентификации);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивСообщенийОбменаКОтправке, Ложь, СоотвНастроекОбменаИСтруктурСертификатов, , ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщениеВБанкПослеПолученияМаркера(Маркер, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль(Параметры.Результат, Параметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификации = Новый Структура;
	ПараметрыАутентификации.Вставить("ИдентификаторСессии", Маркер);
	МассивСообщенийОбменаКОтправке = Параметры.МассивСообщенийОбменаКОтправкеВБанкСАвторизациейЛогинПароль;
	СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
	СоотвНастроекОбменаИСтруктурСертификатов.Вставить(Параметры.НастройкаОбмена, ПараметрыАутентификации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль", ЭтотОбъект, Параметры);
	ПодготовитьИОтправитьПЭД(
		МассивСообщенийОбменаКОтправке, Ложь, СоотвНастроекОбменаИСтруктурСертификатов, Параметры, ОписаниеОповещения);
	
КонецПроцедуры

Процедура РасшифроватьМаркерБанка(Результат, ДополнительныеПараметры) Экспорт

	ВозврСоответствие = Новый Соответствие;
	
	// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Успех = Ложь;
		РасшифрованныеДанные = Неопределено;
		НастройкаОбмена = Неопределено;
		Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
			Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
				РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
			КонецЕсли;
			Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
				И ДополнительныеПараметры.Свойство("НастройкаОбмена", НастройкаОбмена) Тогда
				
				ВыбранныйСертификат = Неопределено;
				Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
					И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
					И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
					И ДополнительныеПараметры.СоотвСертификатовИИхСтруктур.Получить(ВыбранныйСертификат) <> Неопределено Тогда
					
					ПараметрыСертификата = ДополнительныеПараметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
					ПараметрыСертификата.Вставить("ИдентификаторСессии", РасшифрованныеДанные);
					ВозврСоответствие.Вставить(НастройкаОбмена, ПараметрыСертификата);
				Иначе
					ВозврСоответствие.Вставить(НастройкаОбмена, Новый Структура("ИдентификаторСессии", РасшифрованныеДанные));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗапуститьФинальныйОбработчикОповещения = Истина;
	ОбработчикОповещения = Неопределено;
	СоответствиеНастроекОбменаИСертификатов = Неопределено;
	Если ДополнительныеПараметры.Свойство("СоответствиеНастроекОбменаИСертификатов", СоответствиеНастроекОбменаИСертификатов)
		И ТипЗнч(СоответствиеНастроекОбменаИСертификатов) = Тип("Соответствие")
		И СоответствиеНастроекОбменаИСертификатов.Количество() > 0 Тогда
		
		Для Каждого Элемент Из СоответствиеНастроекОбменаИСертификатов Цикл
			НастройкаОбмена = Элемент.Ключ;
			Сертификаты = Элемент.Значение;
			
			Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(НастройкаОбмена))Тогда
				Продолжить;
			КонецЕсли;
			
			Маркер = Неопределено;
			МассивСертификатов = Новый Массив;
			Для Каждого Сертификат Из Сертификаты Цикл
				ПараметрыСтруктура = ДополнительныеПараметры.СоотвСертификатовИИхСтруктур.Получить(Сертификат);
				Если ПараметрыСтруктура.Свойство("ИдентификаторСессии", Маркер) Тогда
					ВозврСоответствие.Вставить(НастройкаОбмена, ПараметрыСтруктура);
					Прервать;
				Иначе
					ПараметрыСтруктура.Свойство("МаркерЗашифрованный", Маркер);
					Если ПараметрыСтруктура.ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(Сертификат);
						Прервать;
					Иначе
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Если массив сертификатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
			// в обоих случаях переходим к обработке следующей Настройки ЭДО.
			Если МассивСертификатов.Количество() > 0 Тогда
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
				ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
				ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
				ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
				ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
				Если Маркер = Неопределено Тогда
					ПараметрыЗапросаМаркера = Новый Структура("НастройкаОбмена", НастройкаОбмена);
					Маркер = Новый ОписаниеОповещения(
						"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ПараметрыЗапросаМаркера);
				КонецЕсли;
				
				ОписаниеДанных.Вставить("Данные", Маркер);
				
				ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
				ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
				
				// Удалим из соответствия обработанный элемент:
				СоответствиеНастроекОбменаИСертификатов.Удалить(НастройкаОбмена);
				ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркерБанка", ЭтотОбъект, ДополнительныеПараметры);
				
				ЗапуститьФинальныйОбработчикОповещения = Ложь;
				ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗапуститьФинальныйОбработчикОповещения
		И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
		И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеНастроекОбменаИПараметровСертификатов", ВозврСоответствие);
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодписанияЗапросаЗонда(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат.Успех Тогда
		
		ПараметрыОбработки.Вставить("ВыбранныйСертификат", Результат.ВыбранныйСертификат);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда", ЭтотОбъект, ПараметрыОбработки);
		ПроверитьПодписи(ОписаниеОповещения, ПараметрыОбработки.ЗапросЗонд);
	Иначе
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ПараметрыОбработки.ОбработчикПослеТестаНастройки, СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда(Результат, ПараметрыОбработки) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработки.РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		
		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(ПараметрыОбработки.ВыбранныйСертификат.Ссылка);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
		
		ПараметрыЗапросаМаркера = Новый Структура("НастройкаОбмена", ПараметрыОбработки.НастройкаОбмена);
		ОбработчикПолученияМаркера = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ПараметрыЗапросаМаркера);
			
		ОписаниеДанных.Вставить("Данные", ОбработчикПолученияМаркера);
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера", ЭтотОбъект, ПараметрыОбработки);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьМаркерБанкаПослеВводаДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
		ПолучитьДанныеАутентификации(Оповещение, ПараметрыОбработки.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМаркерБанкаПослеВводаДанныхАутентификации(ДанныеАутентификации, Параметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ТестСвязиСБанкомAsync", ЭтотОбъект, Параметры);
		
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, Параметры.РеквизитыНастройкиОбмена.АдресСервера,
		Параметры.РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации,
		Параметры.РеквизитыНастройкиОбмена.ВерсияФормата, Параметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	Если Результат.Успех Тогда
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
		ПараметрыЗапроса.Вставить("СообщениеОбмена", Параметры.ЗапросЗонд);
		ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
																	Результат.РасшифрованныеДанные);
		ПараметрыЗапроса.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыЗапроса.Вставить("ВидОперации", "Тестирование");
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыЗапроса, , , , ,
			Параметры.ОбработчикПослеТестаНастройки);
	Иначе
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
	КонецЕсли;

КонецПроцедуры

Процедура НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если Результат.Свойство("КолПодготовленных", КолПодготовленных) И ТипЗнч(КолПодготовленных) = Тип("Число") Тогда
			Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		КонецЕсли;
		Если Результат.Свойство("КолОтправленных", КолОтправленных) И ТипЗнч(КолОтправленных) = Тип("Число") Тогда
			Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
		КонецЕсли;
	КонецЕсли;
	СтруктураКОтправке = Параметры.Результат.СтруктураКОтправке;
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке = СтруктураКОтправке.САвторизациейЛогинПароль;
	СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
	
	ТекущийИндекс = 0;
	Для Каждого ТекЭл Из СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке Цикл
		
		ПолностьюПодписанныеСообщенияОбмена = Новый Массив;
		Для Каждого СообщениеОбмена Из ТекЭл.Значение Цикл
			Если ОбменСБанкамиСлужебныйВызовСервера.ЭлектронныйДокументПолностьюПодписан(СообщениеОбмена) Тогда
				ПолностьюПодписанныеСообщенияОбмена.Добавить(СообщениеОбмена);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПолностьюПодписанныеСообщенияОбмена.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ТекущийИндексОтправкиСообщенийВБанкСАвторизациейЛогинПароль Тогда
			Продолжить;
		КонецЕсли;
		Параметры.ТекущийИндексОтправкиСообщенийВБанкСАвторизациейЛогинПароль = ТекущийИндекс;

		НастройкаОбмена = ТекЭл.Ключ;
		
		Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
		Параметры.Вставить("МассивСообщенийОбменаКОтправкеВБанкСАвторизациейЛогинПароль", ТекЭл.Значение);
		ПараметрыАвторизации = Неопределено;
		Если ПолученыДанныеАвторизации(ТекЭл.Ключ, ПараметрыАвторизации) Тогда
			ОтправитьСообщениеВБанкСАутентификациейЛогинПароль(ПараметрыАвторизации, Параметры);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОтправитьСообщениеВБанкСАутентификациейЛогинПароль", ЭтотОбъект, Параметры);
			ПолучитьДанныеАутентификации(Оповещение, ТекЭл.Ключ);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗавершитьОтправкуСообщенийОбмена(Неопределено, Параметры);
		
КонецПроцедуры

Процедура ОтправкаСообщенийОбмена(Параметры)
	
	Результат = Параметры.Результат;
	МассивСообщенийОбменаКУдалениюИзОтправки = Параметры.МассивСообщенийОбменаКУдалениюИзОтправки;
	СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
	СоотвНастроекОбменаИСертификатовАвторизации = Неопределено;
	СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке = Неопределено;
	НастройкиОбменаИСообщенияКОтправке = Неопределено;
	СтруктураКОтправке = Неопределено;
	Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
		Параметры.Вставить("СоотвНастроекОбменаИСтруктурСертификатов", Новый Соответствие);
		Параметры.Вставить("МассивКОтправкеБезПодписи", Новый Массив);
		Параметры.Вставить("МассивКОтправке", Новый Массив);
		СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
		Если СтруктураКОтправке.Свойство("САвторизациейЛогинПароль", СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке)
			И ТипЗнч(СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке) = Тип("Соответствие")
			И СоотвНастроекОбменаИМассивовСообщенийОбменаКОтправке.Количество() > 0 Тогда
			
			Параметры.Вставить("ТекущийИндексОтправкиСообщенийВБанкСАвторизациейЛогинПароль", 0);
			НачатьОтправкуСообщенийВБанкСАвторизациейЛогинПароль(Неопределено, Параметры);
		Иначе
			МассивСообщенийОбмена = Неопределено;
			Если СтруктураКОтправке.Свойство("БезПодписи", МассивСообщенийОбмена) И ТипЗнч(МассивСообщенийОбмена) = Тип("Массив")
				И МассивСообщенийОбмена.Количество() > 0 Тогда
				
				Параметры.Вставить("МассивКОтправкеБезПодписи", МассивСообщенийОбмена);
			КонецЕсли;
			
			Если СтруктураКОтправке.Свойство("СПодписью", МассивСообщенийОбмена) И ТипЗнч(МассивСообщенийОбмена) = Тип("Массив") Тогда
				Если МассивСообщенийОбменаКУдалениюИзОтправки.Количество() > 0 И МассивСообщенийОбмена.Количество() > 0 Тогда
					Для Каждого УдаляемыйЭД Из МассивСообщенийОбменаКУдалениюИзОтправки Цикл
						ТекИндекс = МассивСообщенийОбмена.Найти(УдаляемыйЭД);
						Если ТекИндекс <> Неопределено Тогда
							МассивСообщенийОбмена.Удалить(ТекИндекс);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				МассивСообщенийОбмена = Новый Массив;
			КонецЕсли;
			
			Параметры.Вставить("МассивКОтправке", МассивСообщенийОбмена);
			МассивКОтправке = Параметры.МассивКОтправке;
			
			Если НЕ (Результат.Свойство("СоотвНастроекОбменаИСертификатовАвторизации", СоотвНастроекОбменаИСертификатовАвторизации)
				И ТипЗнч(СоотвНастроекОбменаИСертификатовАвторизации) = Тип("Соответствие")) Тогда
				СоотвНастроекОбменаИСертификатовАвторизации = Новый Соответствие;
			КонецЕсли;
			
			Если СтруктураКОтправке.ЧерезТокенСбербанка.Количество() Тогда
				ДанныеДляОтправкиВСбербанк = ОбменСБанкамиСлужебныйВызовСервера.ДанныеДляОтправкиВСбербанк(
					СтруктураКОтправке.ЧерезТокенСбербанка);
				Параметры.Вставить("ДанныеДляОтправкиВСбербанк", ДанныеДляОтправкиВСбербанк);
				ОтправитьДокументыВСбербанк(Параметры);
				Возврат;
			КонецЕсли;
			
			Если СтруктураКОтправке.БазоваяАутентификацияСбербанка.Количество() Тогда
				РезультатОтправки = Неопределено;
				Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправкиДокументовВСбербанк", ЭтотОбъект, Параметры);
				ОтправитьДокументыВСбербанкБазоваяАутентификация(Оповещение, СтруктураКОтправке.БазоваяАутентификацияСбербанка);
				Возврат;
			КонецЕсли;
			
			Если СтруктураКОтправке.ЧерезВК.Количество() Тогда
				Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправкиПакетовЧерезВК", ЭтотОбъект, Параметры);
				ДанныеКОтправке = ОбменСБанкамиСлужебныйВызовСервера.ДанныеДляОтправкиЧерезВК(СтруктураКОтправке.ЧерезВК);
				ОтправитьДокументыЧерезВК(Оповещение, ДанныеКОтправке);
				Возврат;
			КонецЕсли;
			
			Если СтруктураКОтправке.ЧерезДополнительнуюОбработку.Количество() Тогда
				МассивСообщенийКОтправке = Новый Массив;
				Для Каждого КлючЗначение Из СтруктураКОтправке.ЧерезДополнительнуюОбработку Цикл
					Если КлючЗначение.Значение.МассивСообщенийОбмена.Количество() Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							МассивСообщенийКОтправке, КлючЗначение.Значение.МассивСообщенийОбмена);
					КонецЕсли;
				КонецЦикла;
				Если МассивСообщенийКОтправке.Количество() Тогда
					РезультатОтправкиПЭД = ОбменСБанкамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(
						МассивСообщенийКОтправке, Параметры.СоотвНастроекОбменаИСтруктурСертификатов);
					Если РезультатОтправкиПЭД.Свойство("ДанныеДляОтправкиЧерезДопОбработку")
						И РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
						Параметры.Вставить("ДанныеДляОтправки", РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку);
					КонецЕсли;
				Иначе
					Параметры.Вставить("ДанныеДляОтправки", Новый Соответствие);
				КонецЕсли;
				
				// Добавление документов, которые требуется подтвердить
				Для Каждого КлючЗначение Из СтруктураКОтправке.ЧерезДополнительнуюОбработку Цикл
					Если КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение.Количество() Тогда
						ДанныеДляОтправкиПоНастройке = Параметры.ДанныеДляОтправки.Получить(КлючЗначение.Ключ);
						Если ДанныеДляОтправкиПоНастройке = Неопределено Тогда
							ДанныеДляОтправкиПоНастройке = Новый Структура;
						КонецЕсли;
						ДанныеДляОтправкиПоНастройке.Вставить("ДокументыДляПодтверждения", КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение);
						Параметры.ДанныеДляОтправки.Вставить(КлючЗначение.Ключ, ДанныеДляОтправкиПоНастройке);
					КонецЕсли;
				КонецЦикла;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуСообщенийОбмена", ЭтотОбъект, Параметры);
				Параметры.Вставить("ОбработчикПослеОтправкиПЭД", ОписаниеОповещения);
				ОтправитьЧерезДополнительнуюОбработку(Неопределено, Параметры);
				Возврат;
				
			КонецЕсли;
		
			РасшифроватьМаркерБанка = Ложь;
			Если СтруктураКОтправке.САутентификациейПоСертификату.Количество() Тогда
				Для Каждого ТекЭл Из СтруктураКОтправке.САутентификациейПоСертификату Цикл
					НастройкаОбмена = ТекЭл.Ключ;
					ЕстьСообщениеОбменаКОтправке = Ложь;
					Для Каждого ОтправляемоеСообщениеОбмена Из ТекЭл.Значение Цикл
						Если МассивСообщенийОбменаКУдалениюИзОтправки.Найти(ОтправляемоеСообщениеОбмена) = Неопределено
							И ОбменСБанкамиСлужебныйВызовСервера.ЭлектронныйДокументПолностьюПодписан(ОтправляемоеСообщениеОбмена) Тогда
							МассивКОтправке.Добавить(ОтправляемоеСообщениеОбмена);
							ЕстьСообщениеОбменаКОтправке = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьСообщениеОбменаКОтправке Тогда
						МассивСертификатов = СоотвНастроекОбменаИСертификатовАвторизации.Получить(НастройкаОбмена);
						Если ЗначениеЗаполнено(МассивСертификатов) Тогда
							РасшифроватьМаркерБанка = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если РасшифроватьМаркерБанка Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПродолжитьОтправкуСообщенийОбменаПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
				ДопПараметры.Вставить("СоответствиеНастроекОбменаИСертификатов", СоотвНастроекОбменаИСертификатовАвторизации);
				ДопПараметры.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
				
				РасшифроватьМаркерБанка(, ДопПараметры);
			Иначе
				ЗавершитьОтправкуСообщенийОбмена(Неопределено, Параметры);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуЗапросаВыписки(ПараметрыАутентификации, Параметры) Экспорт
	
	Если ПараметрыАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = Новый Структура("ПрограммаБанка, АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		
	АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = АсинхронныйОбмен Тогда
		Обработчик = Новый ОписаниеОповещения("ЗапроситьВыпискуПослеПолученияМаркераБанка", ЭтотОбъект, Параметры);
		ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
			РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ПараметрыАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
			Параметры.НастройкаОбмена);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыАутентификации.Количество() Тогда
		Параметры.Вставить("Логин", ПараметрыАутентификации.Логин);
		Параметры.Вставить("Пароль", ПараметрыАутентификации.Пароль);
	КонецЕсли;
	
	ВладелецФормы = Параметры.Владелец;
	ПараметрыФормы = Новый Структура("ДанныеСертификата, ДатаНачала, ДатаОкончания, МассивСообщенийОбмена,
		|НастройкаОбмена, НомерСчета, Пароль, Пользователь, СообщениеОбмена, ГотовыеВыписки,
		|ПринудительноеПолучениеВыписки");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");

	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Выполняет синхронизацию данных с банками
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращаются результаты очередной завершившейся итерации
//              отправки банковских ЭД в банк:
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//    Параметры - Структура:
//       НастройкиОбмена - Массив.
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//
Процедура ВыполнитьОбменСБанками(Результат, Параметры) Экспорт
	
	ИтогКолОтправленных = 0;
	ИтогКолПолученных = 0;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
			КолОтправленных = 0;
			Если НЕ (Параметры.Свойство("ИтогКолОтправленных", КолОтправленных)
					И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
				
				КолОтправленных = 0;
			КонецЕсли;
			КолОтправленных = КолОтправленных + ИтогКолОтправленных;
			Параметры.Вставить("ИтогКолОтправленных", КолОтправленных);
		КонецЕсли;
		Если Результат.Свойство("ИтогКолПолученных", ИтогКолПолученных) Тогда
			КолПолученных = 0;
			Если НЕ (Параметры.Свойство("ИтогКолПолученных", КолПолученных)
					И ТипЗнч(КолПолученных) = Тип("Число")) Тогда
				
				КолПолученных = 0;
			КонецЕсли;
			КолПолученных = КолПолученных + ИтогКолПолученных;
			Параметры.Вставить("ИтогКолПолученных", КолПолученных);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиОбмена = Неопределено;
	Если НЕ Параметры.Свойство("НастройкиОбмена", НастройкиОбмена)
		ИЛИ НастройкиОбмена.Количество() = 0 Тогда
		ЗаголовокОповещения = НСтр("ru = 'Обмен с сервисом 1С:ДиректБанк'");
		ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
		ТекстОповещения = СтрШаблон(
			ШаблонОповещения, Параметры.ИтогКолОтправленных, Параметры.ИтогКолПолученных);
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	Иначе
		НастройкаОбмена = НастройкиОбмена[0];
		Параметры.НастройкиОбмена.Удалить(0);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбменСБанками", ЭтотОбъект, Параметры);
		Структура = Новый Структура;
		Структура.Вставить("ОбработчикПродолжения", ОписаниеОповещения);
		Структура.Вставить("НастройкаОбмена", НастройкаОбмена);
		Структура.Вставить("ИтогКолОтправленных", 0);
		Структура.Вставить("ИтогКолПолученных", 0);
		ВыполнитьОбменСБанком(Структура);
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
// Параметры:
//    Параметры - Структура:
//       ОбработчикПродолжения - ОписаниеОповещения.
//       НастройкаОбмена          - СправочникСсылка.НастройкиОбменСБанками
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//
Процедура ВыполнитьОбменСБанком(Параметры)
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Отправка пакетов электронных документов в банк. Подождите...'");
	Состояние(НСтр("ru = 'Отправка.'"), , ТекстСообщения);
		
	ПараметрыАвторизации = Новый Соответствие;
	Параметры.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	
	РеквизитыНастройкиОбмена = Новый Структура;
	РеквизитыНастройкиОбмена.Вставить("ПрограммаБанка");
	РеквизитыНастройкиОбмена.Вставить("АутентификацияПоСертификату");
	РеквизитыНастройкиОбмена.Вставить("ИспользуетсяКриптография");
	РеквизитыНастройкиОбмена.Вставить("Недействительна");
	РеквизитыНастройкиОбмена.Вставить("ИмяВнешнегоМодуля");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		
	Параметры.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
		
	Если РеквизитыНастройкиОбмена.Недействительна Тогда
		ТекстСообщения = НСтр("ru = 'Настройка обмена недействительна.
									|Операция прервана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбменСБанками(Неопределено, Параметры);
	КонецЕсли;
	
	Параметры.Вставить("ТребуетсяАвторизация", Истина);
	ДанныеАвторизации = Неопределено;
	СбербанкОнлайн = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = СбербанкОнлайн Тогда
		Если РеквизитыНастройкиОбмена.ИспользуетсяКриптография Тогда
			Параметры.Вставить("ИмяВнешнегоМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
			Оповещение = Новый ОписаниеОповещения(
				"ОпределитьСертификатПодписиПослеУстановкиКаналаСбербанк", ЭтотОбъект, Параметры);
			УстановитьСоединениеИАутентифицироватьсяНаСервереСбербанк(Оповещение, Параметры.НастройкаОбмена);
		Иначе
			РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияСинхронизацииСбербанк(
				Параметры.НастройкаОбмена);
			Параметры.Вставить("АутентификацияПроизводилась", Ложь);
			Если РезультатОтправки.Статус = "Выполняется" Тогда
				ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
				ПараметрыОжидания.ВыводитьСообщения = Истина;
				Оповещение = Новый ОписаниеОповещения("ПослеСинхронизацииСбербанк", ЭтотОбъект, Параметры);
				ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);
			Иначе
				ПослеСинхронизацииСбербанк(РезультатОтправки, Параметры)
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен")
		И РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковВыполнитьОбмен", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПарольКСертификатуПолучен(Параметры.НастройкаОбмена, ДанныеАвторизации)
		ИЛИ РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
		ИЛИ РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК")
		ИЛИ (РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
				И РеквизитыНастройкиОбмена.ИспользуетсяКриптография) Тогда
			
		Если ДанныеАвторизации = Неопределено Тогда
			Параметры.Вставить("ТребуетсяАвторизация", Ложь);
		КонецЕсли;
		ОтправитьДокументыВБанк(ДанныеАвторизации, Параметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОтправитьДокументыВБанк", ЭтотОбъект, Параметры);
		ПолучитьДанныеАутентификации(Оповещение, Параметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
// Параметры:
//    ДанныеАутентификации - Структура или Неопределено;
//    Параметры         - Структура - контекст выполнения.
//
Процедура ОтправитьДокументыВБанк(ДанныеАутентификации, Параметры) Экспорт
	
	Если НЕ Параметры.ТребуетсяАвторизация ИЛИ ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		РеквизитыНастройкиОбмена = Новый Структура(
			"АдресСервера, ИдентификаторОрганизации, ПрограммаБанка, ИмяВнешнегоМодуля, ВерсияФормата");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
			Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если РеквизитыНастройкиОбмена.ПрограммаБанка = АсинхронныйОбмен Тогда
			// При аутентификации по сертификату отправка выполняется после расшифровки маркера
			// из процедуры ПослеПолученияОтпечатковВыполнитьОбмен.
			Обработчик = Новый ОписаниеОповещения("ОтправитьИПолучитьДокументыВБанкПослеПолученияМаркера", ЭтотОбъект, Параметры);
			
			ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
				РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата, 
				Параметры.НастройкаОбмена);
			Возврат;
		ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			ПодготовленныеПакеты = ОбменСБанкамиСлужебныйВызовСервера.ПодготовленныеКОтправкеПакетыЭДО(
				Параметры.НастройкаОбмена);
			Оповещение = Новый ОписаниеОповещения("ПослеОправкиПакетовЧерезВК", ЭтотОбъект, Параметры);
			ОтправитьПакетыЧерезВК(Оповещение, Параметры.НастройкаОбмена, ПодготовленныеПакеты);
			Возврат;
		Иначе
			ПараметрыАвторизации = Параметры.ПараметрыАвторизации;
			НастройкаОбмена = Параметры.НастройкаОбмена;
			ПараметрыАвторизации.Вставить(НастройкаОбмена, ДанныеАутентификации);
			
			СтруктураВозврата = Новый Структура;
			ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЭДВБанк(НастройкаОбмена, ПараметрыАвторизации, СтруктураВозврата);
			
			Если СтруктураВозврата.Свойство("КолОтправленныхПакетов") Тогда
				Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + СтруктураВозврата.КолОтправленныхПакетов;
			КонецЕсли;
			// Т.к. отправка выполняется по конкретной настройке обмена,  то соответствия в СтруктуреВозврата
			// (ДанныеДляОтправкиЧерезДопОбработку) с ключом НастройкаОбмена, не могут иметь больше
			// одного элемента. Поэтому можно сразу извлечь данные для отправки из соответствия.
			Если СтруктураВозврата.Свойство("ДанныеДляОтправкиЧерезДопОбработку")
				И СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
				
				ДанныеДляОтправки = СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку.Получить(НастройкаОбмена);
				Параметры.Вставить("ДанныеДляОтправки", ДанныеДляОтправки);
				ОбработчикПослеПодключения = Новый ОписаниеОповещения(
					"НачатьОтправкуПакетовЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
				ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(
					ОбработчикПослеПодключения, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	
КонецПроцедуры

#КонецОбласти

#Область ТестНастроек

Процедура ПослеПолученияОтпечатковПроверитьСвязь(ОтпечаткиСертификатов, Параметры) Экспорт
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	РеквизитыНастройкиОбмена = Параметры.РеквизитыНастройкиОбмена;
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	ИначеЕсли РеквизитыНастройкиОбмена.АутентификацияПоСертификату ИЛИ РеквизитыНастройкиОбмена.ТребуетсяПодпись Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = Неопределено;
	СообщениеЗапросЗонд = Неопределено;
	ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд(
		НастройкаОбмена, МассивОтпечатковСертификатов, СообщениеЗапросЗонд, НастройкиОбмена);
	Параметры.Вставить("ЗапросЗонд", СообщениеЗапросЗонд);
	
	Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
		Возврат;
	КонецЕсли;
	Если НастройкиОбмена.Подписывать Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена.СертификатОрганизацииДляПодписи)
			ИЛИ НЕ НастройкиОбмена.СертификатДоступен Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос-зонд'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СтруктураРезультата = Новый Структура("Успех", Ложь);
			ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
			Возврат;
		КонецЕсли;

		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(НастройкиОбмена.СертификатОрганизацииДляПодписи);
		Операция = НСтр("ru = 'Подписание электронного документа'");
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция", Операция);
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		НаборДанных = Новый Массив;
		Данные = Новый Структура;
		ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", СообщениеЗапросЗонд, ОписаниеДанных);
		СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляСообщенияОбмена", ЭтотОбъект, ПараметрыДляПолученияДД);
		Данные.Вставить("Данные", СсылкаНаДД);
		Данные.Вставить("Объект", ОбменСБанкамиСлужебныйВызовСервера.ПрисоединенныйФайл(СообщениеЗапросЗонд));
		Представление = ОбменСБанкамиСлужебныйВызовСервера.ПредставлениеЭлектронногоДокумента(СообщениеЗапросЗонд);
		ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
			"ПриОткрытииЭлектронногоДокумента", ЭтотОбъект, СообщениеЗапросЗонд);
		ДанныеДляПредставления = Новый Структура("Представление, Значение", Представление, ОбработчикОткрытияЭД);
		Данные.Вставить("Представление", ДанныеДляПредставления);
		НаборДанных.Добавить(Данные);
		ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЗапросаЗонда", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	ИначеЕсли РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		ДанныеДоступныхСертификатов = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(НастройкаОбмена);
		МассивСертификатов = Новый Массив;
		Для Каждого ДанныеСертификата Из ДанныеДоступныхСертификатов Цикл
			МассивСертификатов.Добавить(ДанныеСертификата.Ключ);
		КонецЦикла;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
		
		ДополнительныеПараметры = Новый Структура("НастройкаОбмена", НастройкаОбмена);
		
		ОписаниеПолученияДанных = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ЭтотОбъект, ДополнительныеПараметры);
		
		ОписаниеДанных.Вставить("Данные", ОписаниеПолученияДанных);
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПолучитьМаркерБанкаПослеВводаДанныхАутентификации", ЭтотОбъект, Параметры);
		ПолучитьДанныеАутентификации(Оповещение, НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестСвязиСБанкомAsync(Маркер, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", Параметры.ЗапросЗонд);
	ПараметрыЗапроса.Вставить("ИдентификаторСессии", Маркер);
	ПараметрыЗапроса.Вставить("ВидОперации", "Тестирование");

	ОткрытьФорму(
		"Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыЗапроса, , , , , Параметры.ОбработчикПослеТестаНастройки);

КонецПроцедуры

// Выполняет получение идентификатора сессии банка (маркера).
//
// Параметры:
//    Обработчик - ОписаниеОповещения - обработчик, вызываемый после получения маркера;
//        * Результат - Строка - маркер банка;
//        * ДополнительныеПараметры - Произвольный - параметры, указанные при создании оповещения.
//    АдресСервера - Строка - URL адрес сервера банка;
//    ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//    ДанныеАутентификации - Структура - данные аутентификации на сервере банка:
//        * Логин - Строка - логин на сервере банка;
//        * Пароль - Строка - пароль аутентификации на сервере банка.
//    НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//    ПробнаяОперация - Булево - операция пробная, не нужно выводить сообщения об ошибках.
//
Процедура ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, АдресСервера, ИдентификаторОрганизации, ДанныеАутентификации, ВерсияAPI, НастройкаОбмена = Неопределено, ПробнаяОперация = Ложь) Экспорт
	
	ДанныеSMSАвторизации = Неопределено;
	НеверныеДанныеАутентификации = Ложь;
	ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаБазоваяАутентификация(АдресСервера,
		ИдентификаторОрганизации, ДанныеАутентификации, ВерсияAPI, ДанныеSMSАвторизации, НастройкаОбмена,
		НеверныеДанныеАутентификации);
		
	Если НеверныеДанныеАутентификации Тогда
		УдалитьПарольИзСеанса(НастройкаОбмена);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ОбработчикПослеРасширеннойАутентификации", Обработчик);
		Параметры.Вставить("АдресСервера", АдресСервера);
		Параметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
		Параметры.Вставить("НеподтвержденныйИдентификаторСессии", ИдентификаторСессии);
		Параметры.Вставить("ВерсияAPI", ВерсияAPI);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		ПараметрыФормы.Вставить("Телефон", ДанныеSMSАвторизации.МаскаТелефона);
		ОО = Новый ОписаниеОповещения("ОтправитьОдноразовыйПарольSMSВБанк", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, , , , , ОО);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, ИдентификаторСессии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьОдноразовыйПарольSMSВБанк(ОдноразовыйПароль, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ОдноразовыйПароль) Тогда
		ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаПоSMS(Параметры.АдресСервера,
		Параметры.ИдентификаторОрганизации, Параметры.НеподтвержденныйИдентификаторСессии, ОдноразовыйПароль,
		Параметры.ВерсияAPI);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеРасширеннойАутентификации, ИдентификаторСессии);

КонецПроцедуры

Процедура ЗапроситьВыпискуПослеПолученияМаркераБанка(ИдентификаторСессии, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДанныеСертификата, ДатаНачала, ДатаОкончания, МассивСообщенийОбмена,
		|НастройкаОбмена, НомерСчета, Пароль, Пользователь, СообщениеОбмена");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Параметры);
	ВладелецФормы = Параметры.Владелец;
	ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанкПослеПолученияМаркера(Маркер, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("ИдентификаторСессии", Маркер);
	
	ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанкПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокой = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Результат.РасшифрованныеДанные);
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("ИдентификаторСессии", ДанныеСтрокой);

	ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
	ПараметрыАвторизации = Параметры.ПараметрыАвторизации;
		
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	ПараметрыАвторизации.Вставить(НастройкаОбмена, ДанныеАутентификации);
		
	СтруктураВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЭДВБанк(НастройкаОбмена, ПараметрыАвторизации, СтруктураВозврата);
	ВызватьОповещения(СтруктураВозврата);
	Оповестить("ОбновитьСостояниеОбменСБанками", СтруктураВозврата.ПараметрОповещения);
	
	Параметры.Вставить("РезультатОтправки", СтруктураВозврата);
	Обработчик = Новый ОписаниеОповещения("ЗавершитьСинхронизациюПослеПолученияДокументовИзБанка", ЭтотОбъект, Параметры);
	ПолучитьНовыеДокументыИзБанка(Обработчик, НастройкаОбмена, ДанныеАутентификации.ИдентификаторСессии, Истина);
	
КонецПроцедуры

Процедура ЗавершитьСинхронизациюПослеПолученияДокументовИзБанка(РезультатПолучения, Параметры) Экспорт

	Если РезультатПолучения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьОповещения(РезультатПолучения);
	
	Если РезультатПолучения.Свойство("ДанныеЭП") И РезультатПолучения.ДанныеЭП.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		Для Каждого КлючЗначение Из РезультатПолучения.ДанныеЭП Цикл
			ДобавитьПодписиИОпределитьСтатусы(Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = Параметры.РезультатОтправки.КолОтправленныхПакетов;
	КолПолученныхПакетов = РезультатПолучения.КолПолученныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтрШаблон(ШаблонОповещения, КолОтправленныхПакетов, КолПолученныхПакетов);
	
	Оповестить("ОбновитьСостояниеОбменСБанками", РезультатПолучения.ПараметрОповещения);
		
	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Структура = Новый Структура("ИтогКолОтправленных, ИтогКолПолученных", КолОтправленныхПакетов, КолПолученныхПакетов);
	Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + Параметры.РезультатОтправки.КолОтправленныхПакетов;
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Структура);
	
КонецПроцедуры

Процедура ПолучитьДвоичныеДанныеДляСообщенияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	СообщениеОбмена = Неопределено;
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СообщениеОбмена", СообщениеОбмена)
		И ТипЗнч(СообщениеОбмена) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(СообщениеОбмена);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ДвоичныеДанныеЭД);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

// Получает пароль к сертификату, если доступен текущему пользователю.
//
// Параметры:
//  СертификатЭП - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//  ПарольСертификата - Строка - пароль к сертификату ЭП, полученный из глобальной переменной.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольКСертификатуПолучен(СертификатЭП, ПарольСертификата, НаВремяСеанса = Ложь) Экспорт
	
	ПарольСертификата = Неопределено;
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками.ПаролиСеанса"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		ПарольСертификата = СоответствиеСертификатаИПароля.Получить(СертификатЭП);
		НаВремяСеанса = (ПарольСертификата <> Неопределено);
	КонецЕсли;
	
	Если ПарольСертификата = Неопределено Тогда
		ПарольСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(СертификатЭП);
	КонецЕсли;
	
	Возврат (ПарольСертификата <> Неопределено);
	
КонецФункции

Процедура ВыполнитьДействияПослеОтправки(Параметры)
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Показать") Тогда
		Для Каждого ТекЭл Из Параметры.Результат.МассивНовыхСообщенийОбмена Цикл
			ОткрытьЭДДляПросмотра(ТекЭл);
		КонецЦикла;
	ИначеЕсли ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Параметры.Действие, "Подписать") Тогда
		Результат = Параметры.Результат;
		СоотвСообщенийОбменаИОшибокПодписи = Неопределено;
		МассивСсылокНаОбъект = Неопределено;
		Если Параметры.Свойство("МассивСсылокНаОбъект", МассивСсылокНаОбъект)
			И МассивСсылокНаОбъект <> Неопределено
			И МассивСсылокНаОбъект.Количество() = 1
			И Результат.Свойство("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи) 
			И СоотвСообщенийОбменаИОшибокПодписи <> Неопределено Тогда
			Для Каждого КлючИЗначение Из СоотвСообщенийОбменаИОшибокПодписи Цикл
				СообщениеОбОшибке = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ПредставлениеОшибкиПодписания(КлючИЗначение.Значение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = '1С:ДиректБанк'");
	Если Параметры.ИтогКолНовыхЭД + Параметры.ИтогКолПодписанных + Параметры.ИтогКолПодготовленных + Параметры.ИтогКолОтправленных Тогда
		ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка, Параметры.ИтогКолНовыхЭД, Параметры.ИтогКолПодписанных,
			Параметры.ИтогКолПодготовленных, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФорм

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение открываемое для просмотра;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра;
//  ВладелецФормы     - УправляемаяФорма - форма - владелец;
//  ТолькоЧтение - Булево - признак открытия формы в режиме просмотра без команд.
//
Процедура ОткрытьЭДДляПросмотра(СообщениеОбмена, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено, ТолькоЧтение = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	ДополнительныеПараметры.Вставить("ВладелецФормы", ВладелецФормы);
	ДополнительныеПараметры.Вставить("ТолькоЧтение", ТолькоЧтение);
	Описание = Новый ОписаниеОповещения(
		"ОткрытьФормуЭлектронногоДокументаПослеПолученияОтпечатков", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Описание, Истина, Ложь);

КонецПроцедуры

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  СообщенияОбмена - Массив ссылок на сообщения обмена, которые необходимо поместить в пакеты ЭДО;
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП;
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров;
//  Параметры - дополнительные параметры обработки;
//  ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - оповещение, вызываемое после отправки пакетов.
//
Процедура ПодготовитьИОтправитьПЭД(СообщенияОбмена, ПризнакПодписи, СоответствиеНастроекОбменаИПараметровСертификатов = Неопределено, Параметры = Неопределено, ОбработчикПослеОтправкиПЭД = Неопределено)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СообщенияОбмена", СообщенияОбмена);
	ДопПараметры.Вставить("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	Если СоответствиеНастроекОбменаИПараметровСертификатов = Неопределено Тогда
		СоответствиеНастроекОбменаИПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	РезультатОтправкиПЭД = ОбменСБанкамиСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(
		СообщенияОбмена, СоответствиеНастроекОбменаИПараметровСертификатов);
		
	ДопПараметры.Вставить("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Вставить(
		"СоответствиеНастроекОбменаИПараметровСертификатов", СоответствиеНастроекОбменаИПараметровСертификатов);
		
	Если РезультатОтправкиПЭД.ОтправленныеДокументы.Количество() Тогда
		Оповестить("ОтправленоDirectBank", РезультатОтправкиПЭД.ОтправленныеДокументы);
		
		ПолучитьНовыеДокументыИзБанкаРекурсивно(ДопПараметры);
		Возврат;
		
	КонецЕсли;
		
	ВыполнитьДействияПослеОтправкиПЭДЗавершить(Неопределено, ДопПараметры);
	
КонецПроцедуры

Процедура ПолучитьНовыеДокументыИзБанкаРекурсивно(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.СоответствиеНастроекОбменаИПараметровСертификатов.Количество() = 0 Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДанныеАутентификации Из ДополнительныеПараметры.СоответствиеНастроекОбменаИПараметровСертификатов Цикл
		ДополнительныеПараметры.СоответствиеНастроекОбменаИПараметровСертификатов.Удалить(ДанныеАутентификации.Ключ);
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияДокументовПоОчереднойНастройкеОбмена", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьНовыеДокументыИзБанка(
			Оповещение, ДанныеАутентификации.Ключ, ДанныеАутентификации.Значение.ИдентификаторСессии, Истина);
		Прервать;
	КонецЦикла

КонецПроцедуры

Процедура ПослеПолученияДокументовПоОчереднойНастройкеОбмена(СтруктураВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВозврата = Неопределено Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(Неопределено, ДополнительныеПараметры);
		Возврат
	КонецЕсли;
	
	ВызватьОповещения(СтруктураВозврата);
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		Для Каждого КлючЗначение Из СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиИОпределитьСтатусы(Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Оповестить("ОбновитьСостояниеОбменСБанками", СтруктураВозврата.ПараметрОповещения);

	ПолучитьНовыеДокументыИзБанкаРекурсивно(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ОткрытьФормуЭлектронногоДокументаПослеПолученияОтпечатков(Отпечатки, ДополнительныеПараметры) Экспорт
	
	СообщениеОбмена = ДополнительныеПараметры.СообщениеОбмена;
	ПараметрыОткрытия = ДополнительныеПараметры.ПараметрыОткрытия;
	ВладелецФормы = ДополнительныеПараметры.ВладелецФормы;
	ТолькоЧтение = ДополнительныеПараметры.ТолькоЧтение;
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СообщениеОбмена);
	ПараметрыФормы.Вставить("ТолькоЧтение", ТолькоЧтение);
	ПараметрыФормы.Вставить("МассивОтпечатков", МассивОтпечатков);
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.ЭлектронныйДокумент", ПараметрыФормы);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму(
				"Документ.СообщениеОбменСБанками.Форма.ЭлектронныйДокумент", ПараметрыФормы, ВладелецФормы);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.ЭлектронныйДокумент", ПараметрыФормы, ВладелецФормы,
				ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкиОбмена

// Функция проверяет, получен ли ранее пароль для авторизации на сервере банка.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - настройка обмена с банком;
//  ДанныеАвторизации - Структура, содержит следующие записи:
//    * Логин - строка - имя пользователя;
//    * Пароль - Строка - пароль пользователя.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен ранее, иначе - Ложь.
//
Функция ПолученыДанныеАвторизации(НастройкаОбмена, ДанныеАвторизации) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАутентификации = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками.ПаролиСеанса"];
	Если ТипЗнч(ДанныеАутентификации) = Тип("ФиксированноеСоответствие") Тогда
		ДанныеАвторизации = ДанныеАутентификации.Получить(НастройкаОбмена);
		Если ЗначениеЗаполнено(ДанныеАвторизации) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура интерактивно запрашивает логин и пароль у пользователя.
//
// Параметры:
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - обработчик, вызываемый при завершении процедуры со следующими параметрами:
//    * Результат - Структура - данные аутентификации, содержит поля:
//                    * Логин - Строка - логин пользователя
//                    * Пароль - Строка - пароль пользователя.
//              - Неопределено - пользователь отказался вводить данные аутентификации
//    * ДополнительныеПараметры - Произвольный - параметры, указанные при создании оповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - ссылка на настройку обмена;
//
Процедура ПолучитьДанныеАутентификации(ОписаниеОповещенияОЗакрытии, НастройкаОбмена) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидОперации", НСтр("ru = 'Аутентификация на сервере банка'"));
	ПараметрыФормы.Вставить("НастройкаОбмена", НастройкаОбмена);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросПароляКСертификату",
		ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура НачатьПодписаниеБанковскихЭД(Структура)
	
	СоотвСертификатовИИхСтруктур = Неопределено;
	МассивСертификатов = Неопределено;
	ДанныеДляСпецОбработки = Неопределено;
	ОписаниеПодписатьЭД = Неопределено;
	Структура.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД);
	Если Структура.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И Структура.Свойство("МассивСертификатов", МассивСертификатов)
		И ТипЗнч(МассивСертификатов) = Тип("Массив")
		И Структура.Свойство("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки)
		И ТипЗнч(ДанныеДляСпецОбработки) = Тип("Соответствие") Тогда
		
		Соответствие = Новый Соответствие;
		Для Каждого Сертификат Из МассивСертификатов Цикл
			ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если ТипЗнч(ПараметрыСертификата) = Тип("Структура") Тогда
				Соответствие.Вставить(Сертификат, ПараметрыСертификата);
			КонецЕсли;
		КонецЦикла;
		
		МассивСообщенийОбменаКПодписи = Новый Массив;
		ВидОперации = НСтр("ru = 'Подписание электронных документов'");
		// ДанныеДляСпецОбработки - Соответствие:
		//   Ключ     - ПрограммаБанка.
		//   Значение - Соответствие:
		//     Ключ     - НастройкаОбмена.
		//     Значение - МассивСообщенийОбмена.
		// Т.к. это соответствие формируется в разрезе сертификата подписи, то оно однозначно:
		// массив сертификатов подписи по 1 программе банка и 1 настройке обмена (в каждом
		// рассматриваемом соответствии не больше одного элемента):
		Для Каждого КлючИЗначение Из ДанныеДляСпецОбработки Цикл
			Структура.Вставить("ПрограммаБанка", КлючИЗначение.Ключ);
			Для Каждого НастройкаИСообщениеОбмена Из КлючИЗначение.Значение Цикл
				Структура.Вставить("НастройкаОбмена", НастройкаИСообщениеОбмена.Ключ);
				Для Каждого СообщениеОбмена Из НастройкаИСообщениеОбмена.Значение Цикл
					МассивСообщенийОбменаКПодписи.Добавить(СообщениеОбмена);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		Структура.Вставить("МассивСообщенийОбменаКПодписи", МассивСообщенийОбменаКПодписи);
		ВызватьОповещение = Новый ОписаниеОповещения("ПродолжитьПодписаниеБанковскихЭД", ЭтотОбъект, Структура);
		ПолучитьПарольКСертификату(
			ВызватьОповещение, Соответствие, ВидОперации, МассивСообщенийОбменаКПодписи, Структура.ПрограммаБанка);
	ИначеЕсли ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ПолучитьПарольКСертификату по выполнению описания оповещения.
//
// Параметры:
//    Результат - Структура - результат выбора сертификата подписи и ввода пароля к нему:
//       ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//       ПарольСертификата  - Строка - пароль к сертификату.
//    Параметры - Структура:
//       СоотвСертификатовИИхСтруктур - Соответствие.
//       ПрограммаБанка               - ПеречислениеСсылка.ПрограммыБанка.
//       ОбработчикПродолжения        - ОписаниеОповещения - описание, которое надо
//                                    выполнить после завершения обработки текущих ЭД.
//
Процедура ПродолжитьПодписаниеБанковскихЭД(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
		ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
		ПараметрыСертификата.Вставить("ПарольСертификата", Результат.ПарольСертификата);
		ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
		Параметры.Вставить("СтруктураСертификата", ПараметрыСертификата);
		
		Если Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Параметры.Вставить("МассивОбработанныхНастроекОбмена", Новый Массив);
			Параметры.Вставить("ОтправитьНаПодписьПослеОбработки");
			Параметры.Вставить("РезультатВыбораСертификатаБанка", Результат);
			ДанныеСпецОбработки = Параметры.ДанныеДляСпецОбработки;
			Для Каждого ЭлементСоответствия Из ДанныеСпецОбработки Цикл
				ТекущиеДанные = ЭлементСоответствия.Значение;
				Параметры.ДанныеДляСпецОбработки.Удалить(ЭлементСоответствия.Ключ);
				НачатьПодписаниеЭДСбербанка(ТекущиеДанные, Параметры);
				Возврат;
			КонецЦикла;
		ИначеЕсли Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОповещениеПослеПодписания", Параметры.ОбработчикПродолжения);
			ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", Параметры.МассивСообщенийОбменаКПодписи);
			ДополнительныеПараметры.Вставить("СертификатСсылка", Результат.ВыбранныйСертификат);
			ДополнительныеПараметры.Вставить("Пароль", Результат.ПарольСертификата);
			ДополнительныеПараметры.Вставить("НастройкаОбмена", Параметры.НастройкаОбмена);
			ДополнительныеПараметры.Вставить("ИтогКолПодписанных", 0);
			ПодписатьРекурсивноЭДПоСертификатуЧерезВК(ДополнительныеПараметры);
			Возврат;
		ИначеЕсли Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ОбработчикПослеПодключения = Новый ОписаниеОповещения(
				"ПроверитьНеобходимостьУстановкиПинКода", ЭтотОбъект, Параметры);
			РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
			ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
				Параметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
			ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(
				ОбработчикПослеПодключения, РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД) Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результаты очередной итерации отправки ЭД, при необходимости (во входящих параметрах есть
// не отправленные ЭД) начинает следующую итерацию отправки ЭД.
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращается результат прошедшей итерации отправки ЭД:
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//    Параметры - Структура:
//    МассивКОтправке           - Массив.
//    МассивКОтправкеБезПодписи - Массив.
//    Прочие параметры.
//
Процедура ЗавершитьОтправкуСообщенийОбмена(Результат, Параметры) Экспорт
	
	СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
	
	Если Параметры.МассивКОтправке.Количество() > 0 Тогда
		МассивСообщенийОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.МассивКОтправке);
		Параметры.МассивКОтправке.Очистить();
		ПризнакПодписи = Истина;
	ИначеЕсли Параметры.МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		МассивСообщенийОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.МассивКОтправкеБезПодписи);
		Параметры.МассивКОтправкеБезПодписи.Очистить();
		ПризнакПодписи = Ложь;
	КонецЕсли;
	
	Если МассивСообщенийОбмена <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуСообщенийОбмена", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивСообщенийОбмена, ПризнакПодписи, СоотвНастроекОбменаИСтруктурСертификатов, Параметры, ОписаниеОповещения);
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет подписи в электронный документ.
//
// Параметры:
//   Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами:
//      * РезультатВызова - Булево - Истина - подписи добавлены и валидны, Ложь - произошла ошибка или невалидна подпись.
//      * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//   СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена;
//   Подписи - Массив:
//     * ДвоичныеДанные - данные подписей.
//
Процедура ДобавитьПодписиИОпределитьСтатусы(Оповещение, СообщениеОбмена, ДанныеПодписей) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыОбработки.Вставить("ДанныеПодписей", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДанныеПодписей));
	ПараметрыОбработки.Вставить("ОповещениеПослеДобавленияИПроверкиПодписей", Оповещение);
		
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыИзПодписиПослеПолученияМенеджераКриптографии", ЭтотОбъект, ПараметрыОбработки);
		
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
	
КонецПроцедуры

Процедура ПолучитьСертификатыИзПодписиПослеПолученияМенеджераКриптографии(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеДобавленияИПроверкиПодписей, Ложь);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьПодписиВЭДПослеПолученияСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьСертификаты(Обработчик, МенеджерКриптографии, ДополнительныеПараметры.ДанныеПодписей);
	
КонецПроцедуры

Процедура ДобавитьПодписиВЭДПослеПолученияСертификатов(МассивСертификатовИПодписей, ДополнительныеПараметры) Экспорт
	
	Если МассивСертификатовИПодписей = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеДобавленияИПроверкиПодписей, Ложь);
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодписиВСообщениеОбмена(
		ДополнительныеПараметры.СообщениеОбмена, МассивСертификатовИПодписей);

	ОпределитьСтатусыПодписей(
		ДополнительныеПараметры.ОповещениеПослеДобавленияИПроверкиПодписей, ДополнительныеПараметры.СообщениеОбмена);
	
КонецПроцедуры

Процедура ПолучитьСертификаты(Обработчик, МенеджерКриптографии, МассивПодписей)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ПараметрыОбработки.Вставить("ОбработчикПослеПолученияСертификатов", Обработчик);
	ПараметрыОбработки.Вставить("МассивПодписей", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивПодписей));
	ПараметрыОбработки.Вставить("МассивПодписейИСертификатов", Новый Массив);
	
	НачатьПолучениеСертификатов(ПараметрыОбработки);
	
КонецПроцедуры

Процедура НачатьПолучениеСертификатов(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.МассивПодписей.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОбработчикПослеПолученияСертификатов, ДополнительныеПараметры.МассивПодписейИСертификатов);
		Возврат;
	КонецЕсли;
	
	ДанныеПодписи = ДополнительныеПараметры.МассивПодписей.Получить(0);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьОчереднойСертификат", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияСертификатаИзПодписи", ЭтотОбъект);
	ДополнительныеПараметры.МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Оповещение, ДанныеПодписи);
	
КонецПроцедуры

Процедура ПолучитьОчереднойСертификат(Сертификаты, ДополнительныеПараметры) Экспорт
	
	Если Сертификаты.Количество() <> 0 Тогда
		Сертификат = Сертификаты[0];
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеПослеВыгрузкиСертификата", ЭтотОбъект,
			ДополнительныеПараметры, "ОбработатьОшибкуВыгрузкиСертификата", ЭтотОбъект);
		Сертификат.НачатьВыгрузку(Оповещение);
	Иначе
		ДополнительныеПараметры.МассивПодписей.Удалить(0);
		НачатьПолучениеСертификатов(ДополнительныеПараметры);
	КонецЕсли
	
КонецПроцедуры

Процедура ОбработатьДанныеПослеВыгрузкиСертификата(ДанныеСертификата, ДополнительныеПараметры) Экспорт

	ДанныеСертификатаИПодписи = Новый Соответствие;
	ДанныеСертификатаИПодписи.Вставить(ДанныеСертификата, ДополнительныеПараметры.МассивПодписей[0]);
	ДополнительныеПараметры.МассивПодписей.Удалить(0);
	ДополнительныеПараметры.МассивПодписейИСертификатов.Добавить(ДанныеСертификатаИПодписи);
	
	НачатьПолучениеСертификатов(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСертификатаИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Операция = НСтр("ru = 'Получение сертификата из подписи'");
	ТекстСообщения = НСтр("ru = 'Не удалось получить сертификат из подписи'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеПолученияСертификатов, Неопределено);
	
КонецПроцедуры

Процедура ОбработатьОшибкуВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Операция = НСтр("ru = 'Выгрузка сертификата подписи'");
	ТекстСообщения = НСтр("ru = 'Не удалось выгрузить сертификат полученной подписи'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПослеПолученияСертификатов, Неопределено);
	
КонецПроцедуры

Процедура ВключитьЖурналированиеВК(Оповещение, ПодключаемыйМодуль, Каталог)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеВключенияЖурналирования", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);

	ОповещениеПослеВключенияЖурналирования = Новый ОписаниеОповещения("ПослеВключенияЖурналирования", ЭтотОбъект,
		ДополнительныеПараметры, "ПослеОшибкиВключенияЖурналированияВК", ЭтотОбъект);
		
	ПодключаемыйМодуль.НачатьВызовНачатьЖурналирование(ОповещениеПослеВключенияЖурналирования, Каталог);
	
КонецПроцедуры

Процедура ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры)
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	СертификатXML = Параметры.СертификатXMLЧерезДопОбработку;
	СтруктураСертификата = Параметры.СтруктураСертификата;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, СертификатXML, СтруктураСертификата.ПарольСертификата, Параметры.ВыбранныйСертификат);
	
	Если ПарольУстановлен Тогда
		Оповещение = Новый ОписаниеОповещения("ПодписаниеЭДЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
		УстановитьСоединениеЧерезДополнительнуюОбработку(
			Оповещение, ВнешнийПодключаемыйМодуль, СертификатXML, НастройкаОбмена);
		Возврат;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры)
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	ПарольУстановлен = Параметры.ПарольУстановлен;
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольСертификата = Параметры.ПарольСертификата;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	Если ПарольУстановлен Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ОтправитьПакетыЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
		УстановитьСоединениеЧерезДополнительнуюОбработку(
			Оповещение, ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, НастройкаОбмена);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ИнициализироватьИнтерфейсДополнительнойОбработки(АдресФайлаВнешнегоМодуля, ИмяВнешнегоМодуля, АдресКомпоненты)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайлаВнешнегоМодуля);
		ДвоичныеДанныеОбработки.Записать(ВремФайл);
		ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
	#Иначе
		ИмяФормы = "ВнешняяОбработка." + ИмяВнешнегоМодуля + ".Форма";
		ПодключаемыйМодуль = ПолучитьФорму(ИмяФормы, Новый Структура("РежимЭДО", Истина), , Новый УникальныйИдентификатор);
	#КонецЕсли
	
	Попытка
		ОписаниеОбработки = ПодключаемыйМодуль.ОписаниеОбработки();
		ВерсияAPI = ОписаниеОбработки.ВерсияAPI;
	Исключение
		ВерсияAPI = 1;
	КонецПопытки;
		
	Если ВерсияAPI = 1 Тогда
		Попытка
			ПодключаемыйМодуль.Инициализировать();
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации дополнительной обработки.
										|Код ошибки: ДО-%1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Попытка
			ИнициализацияВыполнена = ПодключаемыйМодуль.НачатьИнициализацию(АдресКомпоненты);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации дополнительной обработки.
										|Код ошибки: ДО-%1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		Если НЕ ИнициализацияВыполнена Тогда
			Возврат Ложь;
		Иначе
			Попытка
				ПодключаемыйМодуль.ЗавершитьИнициализацию();
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка завершения инициализации.
											|Код ошибки: ДО-%1
											|%2'");
				ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Завершение инициализации внешней обработки'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
	ЗакэшироватьПодключаемыйМодуль(ИмяВнешнегоМодуля, ПодключаемыйМодуль);
	
	Возврат Истина;
	
КонецФункции

Функция ДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль)
	
	Хранилища = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Ложь);
	
	Если Хранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ИдентификаторХранилища Из Хранилища Цикл
		
		ЕстьОшибка = Ложь;
		НуженПин = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ЕстьОшибка);
			
		Если ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		УстановленPIN = УстановленPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ЕстьОшибка);
			
		Если ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
	
		Если НЕ НуженПин ИЛИ УстановленPIN Тогда
			Возврат ИдентификаторХранилища;

		КонецЕсли;
		
	КонецЦикла
	
КонецФункции

// Сохраняет подключенный внешний модуль в кэше на клиенте.
//
// Параметры:
//    ИмяВК - Строка - название внешнего модуля;
//    ПодключаемыйМодуль - ComОбъект или УправляемаяФорма - подключенный модуль.
//
Процедура ЗакэшироватьПодключаемыйМодуль(ИмяВК, ПодключаемыйМодуль)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
	ВнешниеКомпонентыИзКеша = ПараметрыПодсистемыОбменСБанками.Получить("ВнешниеКомпоненты");
	Если ВнешниеКомпонентыИзКеша = Неопределено Тогда
		ВнешниеКомпонентыИзКеша = Новый Соответствие;
	КонецЕсли;
	ВнешниеКомпонентыИзКеша.Вставить(ИмяВК, ПодключаемыйМодуль);
	ПараметрыПодсистемыОбменСБанками.Вставить("ВнешниеКомпоненты", ВнешниеКомпонентыИзКеша);
	
КонецПроцедуры

#КонецОбласти

#Область Транспорт

// Получает новые документы из банка.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - обработчик, вызываемый после выполнения процедуры
//     Результат - Структура - см описание в ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
//               - Неопределено - процесс завершен пользователем или произошла ошибка.
//     ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками - текущая настройка обмена с банком;
//  ИдентификаторСессии - ДвоичныеДанные - идентификатор установленной сессии;
//  ВыводитьОкноОжидания - Булево - признак отображения формы с колесом.
//
Процедура ПолучитьНовыеДокументыИзБанка(Оповещение, НастройкаОбмена, ИдентификаторСессии, ВыводитьОкноОжидания = Ложь)
	
	Результат = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПоПолучениюНовыхДокументовИзБанка(
		НастройкаОбмена, ИдентификаторСессии);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	Если Результат.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовИзБанка", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПолученияНовыхДокументовИзБанка(Результат, ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияНовыхДокументовИзБанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // задание было отменено пользователем
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	Иначе // выполнено
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, РезультатОперации);
	КонецЕсли;

КонецПроцедуры

Процедура ПродолжитьОтправкуСообщенийОбменаПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	СоотвНастроекОбменаИСтруктурСертификатов = Неопределено;
	Если НЕ (Параметры.Свойство("СоотвНастроекОбменаИСтруктурСертификатов", СоотвНастроекОбменаИСтруктурСертификатов)
			 И ТипЗнч(СоотвНастроекОбменаИСтруктурСертификатов) = Тип("Соответствие")) Тогда
		
		Параметры.Вставить("СоотвНастроекОбменаИСтруктурСертификатов", Новый Соответствие);
		СоотвНастроекОбменаИСтруктурСертификатов = Параметры.СоотвНастроекОбменаИСтруктурСертификатов;
	КонецЕсли;
	
	ВозврСоответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеНастроекОбменаИПараметровСертификатов", ВозврСоответствие)
		И ТипЗнч(ВозврСоответствие) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ВозврСоответствие Цикл
			СоотвНастроекОбменаИСтруктурСертификатов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗавершитьОтправкуСообщенийОбмена(Неопределено, Параметры);
	
КонецПроцедуры

// Вызывается из процедуры ВыполнитьДействияПослеОтправкиПЭД(...).
// Вызывает процедуру НачатьОтправкуПакетовЧерезДополнительнуюОбработку(...),
//   либо выполняет описание оповещения переданное в параметре ОбработчикПослеОтправкиПЭД.
//
// Параметры:
//   ДопПараметры - Структура:
//      РезультатОтправкиПЭД       - Структура:
//         
//      Параметры                  - Структура - необязательный параметр, дополнительные параметры,
//                                     переданные из метода инициировавшего отправку ПЭД.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - необязательный параметр, обработка результата отправки ПЭД.
//
Процедура ВыполнитьДействияПослеОтправкиПЭДЗавершить(Результат, ДопПараметры)
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	Если ДопПараметры.Свойство("СообщенияОбмена") Тогда
		МассивВладельцев = ОбменСБанкамиСлужебныйВызовСервера.ВладельцыСообщенийОбмена(ДопПараметры.СообщенияОбмена);
		Для Каждого Владелец Из МассивВладельцев Цикл
			Оповестить("ОбновитьСостояниеОбменСБанками", , Владелец);
		КонецЦикла;
	КонецЕсли;
	
	ВыполнитьОбработчикПослеОтправки = Истина;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура") Тогда
		Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + РезультатОтправкиПЭД.КолПодготовленных;
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + РезультатОтправкиПЭД.КолОтправленных;
		Если РезультатОтправкиПЭД.Свойство("ДанныеДляОтправкиЧерезДопОбработку")
			И РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
			
			Параметры.Вставить("ДанныеДляОтправки", РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку);
			Параметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
			ОтправитьЧерезДополнительнуюОбработку(Неопределено, Параметры);
			ВыполнитьОбработчикПослеОтправки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьОбработчикПослеОтправки
		И ТипЗнч(ОбработчикПослеОтправкиПЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеОтправкиПЭД, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭД

Процедура ОбработатьОтклонениеЭД(СообщениеОбмена, ОписаниеОповещения) Экспорт
	
	ПродолжитьОбработку = ОбменСБанкамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СообщениеОбмена);
	Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
	
	Если ПродолжитьОбработку Тогда
		ТекстУточнения = "";
		Параметры = Новый Структура("СообщениеОбмена, ОписаниеОповещения", СообщениеОбмена, ОписаниеОповещения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеЭДЗавершить", ЭтотОбъект, Параметры);
		ПоказатьВводСтроки(ОписаниеОповещения, ТекстУточнения, Заголовок, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтклонениеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Отклонен");
		СтруктураПараметров = Новый Структура("Статус, ПричинаОтклонения", НовыйСтатус, Результат);
		СообщениеОбмена = ДополнительныеПараметры.СообщениеОбмена;
		ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(СообщениеОбмена, СтруктураПараметров);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	ИначеЕсли Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСтатусыПодписей(Оповещение, СообщениеОбмена)

	СтруктураСодержимогоСообщенияОбмена = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСодержимогоСообщенияОбмена(
		СообщениеОбмена);
		
	Если СтруктураСодержимогоСообщенияОбмена = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеЭД", СтруктураСодержимогоСообщенияОбмена.ДанныеЭД);
	ДополнительныеПараметры.Вставить("Подписи", СтруктураСодержимогоСообщенияОбмена.Подписи);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("РезультатПроверки", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиПодписей", Оповещение);
	ОпределитьСтатусОчереднойПодписи(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОпределитьСтатусОчереднойПодписи(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Подписи.Количество() = 0 Тогда
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(
			ДополнительныеПараметры.СообщениеОбмена, ДополнительныеПараметры.РезультатПроверки);
		ВсеПодписиВерны = Истина;
		Для Каждого Элемент Из ДополнительныеПараметры.РезультатПроверки Цикл
			Если Не Элемент.ПодписьВерна Тогда
				ВсеПодписиВерны = Ложь;
			КонецЕсли;
		КонецЦикла;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, ВсеПодписиВерны);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОпределенияСтатусаОчереднойПодписи", ЭтотОбъект, ДополнительныеПараметры);
	ДвоичныеДанныеПодписи = ДополнительныеПараметры.Подписи.Получить(0).Подпись;
	ДополнительныеПараметры.Подписи.Удалить(0);
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
		Оповещение, ДополнительныеПараметры.ДвоичныеДанныеЭД, ДвоичныеДанныеПодписи);

КонецПроцедуры

Процедура ПослеОпределенияСтатусаОчереднойПодписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Ложь);
		Возврат; //  Не удалось создать менеджер криптографии, дальнейшая проверка не имеет смысла
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура();
	
	Если Результат = Истина Тогда
		СтруктураЗаписи.Вставить("ПодписьВерна", Истина);
		СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		ДополнительныеПараметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ВидОперации = НСтр("ru = 'Проверка подписи'");
		ТекстСообщения = НСтр("ru = 'При проверке подписи электронного документа произошла ошибка.
									|Электронный документ: %1,
									|Текст ошибки: %2'");
		
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДополнительныеПараметры.СообщениеОбмена, Результат);
		ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения, ДополнительныеПараметры.СообщениеОбмена);
		СтруктураЗаписи.Вставить("ПодписьВерна", Ложь);
		СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		ДополнительныеПараметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	КонецЕсли;

	ОпределитьСтатусОчереднойПодписи(ДополнительныеПараметры)
	
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена, если нужно обработать только один ЭД.
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект, Действие, Знач СообщениеОбмена = Неопределено) Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	Параметры.Вставить("Действие", Действие);
	Параметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	
	Если (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Подписать")
			ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действие, "Отправить")) Тогда
		ТребуетсяКриптография = ОбменСБанкамиСлужебныйВызовСервера.ТребуетсяКриптографияДляОбработкиДокументов(
			МассивСсылокНаОбъект);
		
		Если ТребуетсяКриптография Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковОбработатьЭД", ЭтотОбъект, Параметры);
			ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ПослеПолученияОтпечатковОбработатьЭД(Неопределено, Параметры)
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковОбработатьЭД(ОтпечаткиСертификатов, Параметры) Экспорт
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	Действие = Параметры.Действие;
	СообщениеОбмена = Параметры.СообщениеОбмена;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	ПараметрыОбработки.Вставить("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
	ПараметрыОбработки.Вставить("Действия", Действие);
	ПараметрыОбработки.Вставить("СообщениеОбмена", СообщениеОбмена);
	РезультатОтправки = ОбменСБанкамиСлужебныйВызовСервера.ЗапускЗаданияПоОбработкеЭлектронныхДокументов(
		ПараметрыОбработки);
	
	Если РезультатОтправки.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеОбработкиДокументов", ЭтотОбъект, Параметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатОтправки, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеОбработкиДокументов(РезультатОтправки, Параметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьЭД(РезультатВыполнения, Параметры) Экспорт
	
	СертификатыСообщенийОбмена = Неопределено;
	ВходящаяСтруктура = Параметры.Результат;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных
			+ ЭлектронноеВзаимодействиеСлужебныйКлиент.КоличествоПодписанныхЭД(РезультатВыполнения);
			
		Если РезультатВыполнения.Свойство("ИтогКолПодписанных") Тогда // подписание через внешний модуль
			Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных + РезультатВыполнения.ИтогКолПодписанных;
		КонецЕсли;
		
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие СообщенияОбмена надо добавить в массив "МассивСообщенийОбмена" для обновления их статусов.
			МассивСообщенийОбмена = Неопределено;
			СоответствиеСертификатовПодписаннымЭд = Неопределено;
			
			Если РезультатВыполнения.Свойство("ВыбранныйСертификат") Тогда
				Если НЕ Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд) Тогда
				
					СоответствиеСертификатовПодписаннымЭд = Новый Соответствие;
					Параметры.Вставить("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд);
					
				КонецЕсли;
				
				МассивСообщенийОбмена = СоответствиеСертификатовПодписаннымЭд[РезультатВыполнения.ВыбранныйСертификат.Ссылка];
				Если МассивСообщенийОбмена = Неопределено Тогда
					МассивСообщенийОбмена = Новый Массив;
					СоответствиеСертификатовПодписаннымЭд.Вставить(РезультатВыполнения.ВыбранныйСертификат.Ссылка, МассивСообщенийОбмена);
				КонецЕсли;
			КонецЕсли;

			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				СообщениеОбмена = ОбменСБанкамиСлужебныйВызовСервера.ВладелецФайла(ПодписываемыеДанные.Объект);
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Параметры.МассивСообщенийОбменаКУдалениюИзОтправки.Добавить(СообщениеОбмена);
					Продолжить;
				КонецЕсли;
				МассивСообщенийОбмена.Добавить(СообщениеОбмена);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВходящаяСтруктура.Свойство("СертификатыСообщенийОбмена", СертификатыСообщенийОбмена)
		И СертификатыСообщенийОбмена.Количество() > 0 Тогда
		
		СоответствиеСообщенийОбменаИПодписей = Неопределено;
		Если НЕ (Параметры.Свойство("СоответствиеСообщенийОбменаИПодписей", СоответствиеСообщенийОбменаИПодписей)
			ИЛИ ТипЗнч(СоответствиеСообщенийОбменаИПодписей) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеСообщенийОбменаИПодписей", Новый Соответствие);
		КонецЕсли;
		
		Для Каждого Элемент Из СертификатыСообщенийОбмена Цикл
			
			Структура = Элемент.Значение;
			СертификатыСообщенийОбмена.Удалить(Элемент.Ключ);
			
			МассивСертификатов = Структура.МассивСертификатов;
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьЭД", ЭтотОбъект, Параметры);
			ДанныеДляСпецОбработки = Неопределено;
			СообщенияОбменаИПрисоединенныеФайлы = Неопределено;
			Если Структура.Свойство("СообщенияОбменаИПрисоединенныеФайлы", СообщенияОбменаИПрисоединенныеФайлы) Тогда
				
				Если СообщенияОбменаИПрисоединенныеФайлы.Количество() = 1 Тогда
					Операция = НСтр("ru = 'Подписание электронного документа'");
				Иначе
					Операция = НСтр("ru = 'Подписание электронных документов'");
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("Операция",            Операция);
				ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
				ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
				ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
				ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Документ'"));
				ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
				
				НаборДанных = ОписаниеДанных.НаборДанных;
				МассивСообщенийОбменаДляПредставления = Новый Массив;
				Для Каждого ЭлементДанных Из СообщенияОбменаИПрисоединенныеФайлы Цикл
					СообщениеОбмена = ЭлементДанных.Ключ;
					Данные = Новый Структура;
					ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", СообщениеОбмена, ОписаниеДанных);
					СсылкаНаДД = Новый ОписаниеОповещения(
						"ПолучитьДвоичныеДанныеДляСообщенияОбмена", ЭтотОбъект, ПараметрыДляПолученияДД);
					Данные.Вставить("Данные", СсылкаНаДД);
					Данные.Вставить("Объект", ЭлементДанных.Значение);
					НаборДанных.Добавить(Данные);
					МассивСообщенийОбменаДляПредставления.Добавить(СообщениеОбмена);
				КонецЦикла;
				
				Если МассивСообщенийОбменаДляПредставления.Количество() = 1 Тогда
					ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
						"ПриОткрытииЭлектронногоДокумента", ЭтотОбъект, МассивСообщенийОбменаДляПредставления[0]);
					СтруктураПредставления = Новый Структура(
						"Представление, Значение", МассивСообщенийОбменаДляПредставления[0], ОбработчикОткрытияЭД);
					НаборДанных[0].Вставить("Представление", СтруктураПредставления);
				Иначе
					ПредставлениеСообщенияОбмена = НСтр("ru = 'Электронные документы (%1)'");
					СписокПредставленийСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СписокПредставленийСообщенийОбмена(
						МассивСообщенийОбменаДляПредставления);
					МассивПредставлений = Новый Массив;
					Для Каждого Элемент Из СписокПредставленийСообщенийОбмена Цикл
						ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
							"ПриОткрытииЭлектронногоДокумента", ЭтотОбъект, Элемент.Значение);
						СтруктураПредставления = Новый Структура(
							"Представление, Значение", Элемент.Представление, ОбработчикОткрытияЭД);
						МассивПредставлений.Добавить(СтруктураПредставления);
					КонецЦикла;
					ОписаниеДанных.Вставить("СписокПредставлений", МассивПредставлений);
					ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеСообщенияОбмена);
				КонецЕсли;
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			ИначеЕсли Структура.Свойство("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки)
				И ТипЗнч(ДанныеДляСпецОбработки) = Тип("Соответствие") И ДанныеДляСпецОбработки.Количество() Тогда
				Параметры.Вставить("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки);
				Параметры.Вставить("МассивСертификатов", МассивСертификатов);
				Параметры.Вставить("ОбработчикПродолжения", ОписаниеПодписатьЭД);
				НачатьПодписаниеБанковскихЭД(Параметры);
			Иначе
				ПодписатьЭД(Неопределено, Параметры);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		
		ДействияПослеПодписанияЭД(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПослеПодписанияЭД(Параметры)
	
	СоответствиеСертификатовПодписаннымЭд = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("СоответствиеСертификатовПодписаннымЭд", СоответствиеСертификатовПодписаннымЭд)
		И ТипЗнч(СоответствиеСертификатовПодписаннымЭд) = Тип("Соответствие") Тогда
		
		ОбменСБанкамиСлужебныйВызовСервера.ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд);
		
		МассивСообщенийОбменаДляПроверкиПодписей = Новый Массив;
		Для Каждого СертификатЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбменаДляПроверкиПодписей, СертификатЭД.Значение, Истина);
		КонецЦикла;
			
		Параметры.Вставить("МассивСообщенийОбменаДляПроверкиПодписей", МассивСообщенийОбменаДляПроверкиПодписей);
		
		ПроверитьСтатусыПодписейСообщенийОбменаРекурсивно(Неопределено, Параметры);
		
		Возврат;
		
	КонецЕсли;
	
	ОтправкаСообщенийОбмена(Параметры);
	
КонецПроцедуры

Процедура ПроверитьСтатусыПодписейСообщенийОбменаРекурсивно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.МассивСообщенийОбменаДляПроверкиПодписей.Количество() = 0 Тогда
		ОтправкаСообщенийОбмена(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	СообщениеОбмена = ДополнительныеПараметры.МассивСообщенийОбменаДляПроверкиПодписей.Получить(0);
	ДополнительныеПараметры.МассивСообщенийОбменаДляПроверкиПодписей.Удалить(0);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьСтатусыПодписейСообщенийОбменаРекурсивно", ЭтотОбъект, ДополнительныеПараметры);
	
	ОпределитьСтатусыПодписей(Оповещение, СообщениеОбмена);
	
КонецПроцедуры

Процедура ПроверитьСрокДействияСертификатаБанка(Сертификат, ДействителенДо, ПользовательОповещенОСрокеДействия)
	
	Если ПользовательОповещенОСрокеДействия Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбОкончанииСрокаДействия = ДобавитьМесяц(ОбщегоНазначенияКлиент.ДатаСеанса(), 1) > ДействителенДо;
	
	Если ОповеститьОбОкончанииСрокаДействия Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ОповещениеОбОкончанииСрокаДействия",
			ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестНастройкиОбменаЧерезДополнительнуюОбработку(Обработчик, НастройкаОбмена)
	
	Перем АдресФайла;
	
	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	// Блок проверки наличия внешней обработки для обмена с банком
	ВнешняяОбработкаПодключена = ОбменСБанкамиСлужебныйВызовСервера.ПодключитьАктуальнуюВнешнююОбработку(
		РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, АдресФайла);
	Если Не ЗначениеЗаполнено(АдресФайла) Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе отсутствует внешний модуль обмена с банком.'");
		ВыполнитьОбработкуОповещения(Обработчик, ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если Не ВнешняяОбработкаПодключена Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	// Блок инициализации интерфейса.
	
	ДоступныеСертификаты = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(НастройкаОбмена);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИндексТестаСертификата", 0);
	Параметры.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
	Параметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	Параметры.Вставить("ИмяВнешнегоМодуля", РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля);
	Параметры.Вставить("ОбработчикПослеТестаНастройки", Обработчик);
	
	АдресВК = Неопределено;
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля, АдресВК);
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Если ЗначениеЗаполнено(АдресВК) Тогда
			Параметры.Вставить("ТекущаяНастройкаОбменаЧерезДополнительнуюОбработку", НастройкаОбмена);
			Параметры.Вставить("УстановленаВнешняяКомпонента");
			ОО = Новый ОписаниеОповещения("НачатьТестНастройкиОбменаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			НачатьУстановкуВнешнейКомпоненты(ОО, АдресВК);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НачатьТестНастройкиОбменаЧерезДополнительнуюОбработку(Параметры);
	
КонецПроцедуры

Функция АктуаленКэшПароляСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, ВнешнийПодключаемыйМодуль)
	
	РеквизитыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(
		ДанныеСертификата.СертификатПодписи);
	
	СлужебныеДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль,
		РеквизитыСертификата.ДвоичныеДанныеСертификата);
		
	Если СлужебныеДанныеСертификата = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ЕстьОшибка = Ложь;
	ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, СлужебныеДанныеСертификата.ИдентификаторХранилища, ЕстьОшибка);
	Если  ЕстьОшибка ИЛИ ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(
			РеквизитыСертификата.ДвоичныеДанныеСертификата);
		Возврат УстановленПарольСертификата = Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Процедура ПродолжитьПолучениеВыпискиЧерезДополнительнуюОбработку(Параметры)
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольСертификата = Параметры.ПарольСертификата;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольСертификата, Параметры.ВыбранныйСертификат);
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьПолучениеВыписки", ЭтотОбъект, Параметры);
	УстановитьСоединениеЧерезДополнительнуюОбработку(
		Оповещение, ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, НастройкаОбмена);
	
КонецПроцедуры

Процедура ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработку(Параметры)
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = Параметры.СертификатXML;
	ПарольСертификата = Параметры.ПарольСертификата;
	
	// Блок проверка авторизации на ресурсе банка.
	ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, ПарольСертификата);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка авторизации на ресурсе банка.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Аутентификация на ресурсе банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , НастройкаОбмена);
		УдалитьПарольИзСеанса(Параметры.ВыбранныйСертификат);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецПопытки;
		
	// Блок проверка установки соединения с банком.
	
	Оповещение = Новый ОписаниеОповещения(
		"ПродолжитьТестНастройкиОбменаЧерезДополнительнуюОбработкуПослеАутентификации", ЭтотОбъект, Параметры);
	УстановитьСоединениеЧерезДополнительнуюОбработку(
		Оповещение, ВнешнийПодключаемыйМодуль, СертификатXML, НастройкаОбмена);
		
КонецПроцедуры

Процедура ПодписатьЗапросыВыписок(Результат, ПараметрыОбработки)
	
	СоотвСертификатовИИхСтруктур = ПараметрыОбработки.СоотвСертификатовИИхСтруктур;
	МассивСообщенийОбмена = ПараметрыОбработки.МассивСообщенийОбмена;
	
	МассивСертификатов = Новый Массив;
	Для Каждого КлючИЗначение Из СоотвСертификатовИИхСтруктур Цикл
		МассивСертификатов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если МассивСообщенийОбмена.Количество() = 1 Тогда
		Операция = НСтр("ru = 'Подписание электронного документа'");
	Иначе
		Операция = НСтр("ru = 'Подписание электронных документов'");
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	НаборДанных = Новый Массив;
	Для Каждого СообщениеОбмена Из МассивСообщенийОбмена Цикл
		Данные = Новый Структура;
		ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", СообщениеОбмена, ОписаниеДанных);
		СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляСообщенияОбмена", ЭтотОбъект, ПараметрыДляПолученияДД);
		Данные.Вставить("Данные", СсылкаНаДД);
		
		Данные.Вставить("Объект", ОбменСБанкамиСлужебныйВызовСервера.ПрисоединенныйФайл(СообщениеОбмена));
		
		НаборДанных.Добавить(Данные);
	КонецЦикла;
	
	ПредставлениеНабора = НСтр("ru = 'Запросы выписок (%1)'");
	СписокПредставлений = ОбменСБанкамиСлужебныйВызовСервера.СписокПредставленийСообщенийОбмена(МассивСообщенийОбмена);
	
	МассивПредставлений = Новый Массив;
	Для Каждого Элемент Из СписокПредставлений Цикл
		ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
			"ПриОткрытииЭлектронногоДокумента", ЭтотОбъект, Элемент.Значение);
		СтруктураПредставления = Новый Структура(
			"Представление, Значение", Элемент.Представление, ОбработчикОткрытияЭД);
		МассивПредставлений.Добавить(СтруктураПредставления);
	КонецЦикла;
	ОписаниеДанных.Вставить("СписокПредставлений", МассивПредставлений);
	ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	
	ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	ПараметрыОбработки.Вставить("ОписаниеДанных", ОписаниеДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПодписиЗапросовВыписок", ЭтотОбъект, ПараметрыОбработки);
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	
КонецПроцедуры

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  ТекстЗаголовка - Строка - текст заголовка оповещения пользователя;
//  КолСформированных - Число - количество сформированных электронных документов;
//  КолПодписанных - Число -  количество подписанных электронных документов;
//  КолПодготовленных - Число -  количество подготовленных к отправке электронных документов;
//  КолОтправленных - Число - количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(ТекстЗаголовка, КолСформированных, КолПодписанных, КолПодготовленных, КолОтправленных = 0)
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, НСтр("ru = 'отправлено'"), НСтр("ru = 'подготовлено к отправке'"));
		Количество = ?(КолОтправленных > 0, КолОтправленных, КолПодготовленных);
		Если КолПодписанных > 0 Тогда
			Если КолСформированных > 0 Тогда
				Текст = НСтр("ru = 'Сформировано: (%1), подписано: (%2), %3 пакетов: (%4)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Текст, КолСформированных, КолПодписанных, ДопТекст, Количество);
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, Количество);
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = '%1 пакетов: (%2)'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, Количество);
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолСформированных > 0 Тогда
				Текст = НСтр("ru = 'Сформировано: (%1), подписано: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолПодписанных);
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолСформированных > 0 Тогда
				Текст = НСтр("ru = 'Сформировано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
			Иначе
				Текст = НСтр("ru = 'Обработанных документов нет...'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , Текст);
	
КонецПроцедуры

Процедура ПослеОбработкиДокументов(РезультатЗадания, Параметры) Экспорт
	
	Если РезультатЗадания = Неопределено Тогда // задание было отменено
		// Т.к. задание прервано, то неизвестно по какой настройки обмена происходил обмен.
		// Скидывается лог по всем настройками обмена в файл.
		МассивНастроекОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкиОбменаСЖурналированием();
		Для Каждого КлючЗначение Из МассивНастроекОбмена Цикл
			СохранитьЖурналВФайл(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		// Т.к. задание прервано, то неизвестно по какой настройки обмена происходил обмен.
		// Скидывается лог по всем настройками обмена в файл.
		МассивНастроекОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкиОбменаСЖурналированием();
		Для Каждого КлючЗначение Из МассивНастроекОбмена Цикл
			СохранитьЖурналВФайл(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		ВидОперации = НСтр("ru = 'Обработка электронных документов.'");
		ОбработатьОшибку(
			ВидОперации, РезультатЗадания.ПодробноеПредставлениеОшибки, РезультатЗадания.КраткоеПредставлениеОшибки);
		Возврат;
	Иначе // выполнено
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		Если Результат <> Неопределено Тогда
			
			Для Каждого КлючЗначение Из Результат.НастройкиСЖурналированием Цикл
				СохранитьЖурналВФайл(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
			ИтогКолНовыхЭД = 0; ИтогКолПодписанных = 0; ИтогКолПодготовленных = 0;
			ИтогКолОтправленных = 0;

			Если Результат.ОтправленныеДокументы.Количество() Тогда
				Оповестить("ОтправленоDirectBank", Результат.ОтправленныеДокументы);
			КонецЕсли;
			
			Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
				ИтогКолПодписанных = 0;
			КонецЕсли;
			
			Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
				ИтогКолПодготовленных = 0;
			КонецЕсли;
			
			Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
				ИтогКолОтправленных = 0;
			КонецЕсли;
			
			Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
				ИтогКолНовыхЭД = 0;
			КонецЕсли;
			
			Если ИтогКолНовыхЭД > 0 Тогда
				Оповестить("ОбновитьСостояниеОбменСБанками");
			КонецЕсли;
			
			// Подписание ЭД:
			
			Параметры.Вставить("Результат", Результат);
			Параметры.Вставить("ИтогКолОтправленных", ИтогКолОтправленных);
			Параметры.Вставить("ИтогКолПодготовленных", ИтогКолПодготовленных);
			Параметры.Вставить("ИтогКолНовыхЭД", ИтогКолНовыхЭД);
			Параметры.Вставить("ИтогКолПодписанных", ИтогКолПодписанных);
			Параметры.Вставить("МассивСообщенийОбменаКУдалениюИзОтправки", Новый Массив);
			Параметры.Вставить("СоотвСертификатовИИхСтруктур", Результат.СоотвСертификатовИИхСтруктур);
			
			Если Результат.СоотвСертификатовИИхСтруктур.Количество() И Результат.СертификатыСообщенийОбмена.Количество() Тогда
				
				Параметры.Вставить("СертификатыСообщенийОбмена", Результат.СертификатыСообщенийОбмена);
				Параметры.Вставить("СоотвСертификатовИИхСтруктур", Результат.СоотвСертификатовИИхСтруктур);
				Параметры.Вставить("ИндексПервойИтерации", 0);
				Параметры.Вставить("ИндексВторойИтерации", 0);
				Параметры.Вставить("ИндексТретьейИтерации", 0);
				ВыполнитьОповещение = Ложь;
				ПодписатьЭД(Неопределено, Параметры);
			Иначе
				Параметры.Вставить("СоотвСертификатовИИхСтруктур", Результат.СоотвСертификатовИИхСтруктур);
				// Отправка ЭД:
				ВыполнитьОповещение = Ложь;
				ОтправкаСообщенийОбмена(Параметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗарплатныйПроект

// Вызывает оповещения об изменении объектов, которые были заполнены в переопределяемой части.
//
// Параметры:
//    Структура - данные возврата переопределяемой части:
//      * МассивОповещений - Массив - оповещения, которые необходимо вызвать.
//
Процедура ВызватьОповещения(СтруктураДанных) Экспорт
	
	Если СтруктураДанных.Свойство("МассивОповещений") Тогда
		Для Каждого Элемент Из СтруктураДанных.МассивОповещений Цикл
			Для Каждого КлючЗначение Из Элемент Цикл
				Если КлючЗначение.Значение = Неопределено Тогда
					Оповестить(КлючЗначение.Ключ);
				Иначе
					ОповеститьОбИзменении(КлючЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСИспользованиемДополнительнойОбработки

Процедура ПодтвердитьПлатежЗавершитьЧерезДополнительнуюОбработку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(ДополнительныеПараметры.Оповещение,
			ДополнительныеПараметры.МассивСообщенийОбмена, ДополнительныеПараметры.ВнешнийПодключаемыйМодуль,
			ДополнительныеПараметры.СертификатXML);
		Возврат;
	КонецЕсли;
	
	Сессия = ДополнительныеПараметры.Сессия;
	ВнешнийПодключаемыйМодуль = ДополнительныеПараметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = ДополнительныеПараметры.СертификатXML;
	Пароль = Результат;
	ПараметрыЗапроса = Новый Структура("Способ, Пароль, Сессия");
	ПараметрыЗапроса.Способ = "SMS";
	ПараметрыЗапроса.Пароль = Пароль;
	ПараметрыЗапроса.Сессия = Сессия;
		
	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 5, ПараметрыЗапроса);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка подтверждения платежного поручения.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Подтверждение платежного поручения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, ДополнительныеПараметры.СообщениеОбмена);
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(ДополнительныеПараметры.Оповещение,
			ДополнительныеПараметры.МассивСообщенийОбмена, ДополнительныеПараметры.ВнешнийПодключаемыйМодуль,
			ДополнительныеПараметры.СертификатXML);
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Нет данных для подтверждения'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат[0].ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при подтверждении платежного поручения:'") + " " + Результат[0].ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ПодтвердитьПлатежиЧерезДополнительнуюОбработку(ДополнительныеПараметры.Оповещение,
			ДополнительныеПараметры.МассивСообщенийОбмена, ДополнительныеПараметры.ВнешнийПодключаемыйМодуль,
			ДополнительныеПараметры.СертификатXML);
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Доставлен"));
	ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(
		ДополнительныеПараметры.СообщениеОбмена, СтруктураРеквизитов);

	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж подтвержден'"), , , БиблиотекаКартинок.Успешно32);

	ПодтвердитьПлатежиЧерезДополнительнуюОбработку(ДополнительныеПараметры.Оповещение,
			ДополнительныеПараметры.МассивСообщенийОбмена, ДополнительныеПараметры.ВнешнийПодключаемыйМодуль,
			ДополнительныеПараметры.СертификатXML);

КонецПроцедуры

Процедура РасширеннаяАутентификацияЧерезДопОбработку(ВнешнийПодключаемыйМодуль, Сертификат, Сессия, ОООЗ)

	ИдентификаторСессии = Сессия.Идентификатор;
	
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьОдноразовыйПарольРасширеннойАутентификацииПоSMS(
			Сертификат, Сессия);
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = НСтр("ru = 'Ошибка запуска аутентификации по SMS.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(
			ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка соединения'");
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОООЗ, Ложь);
		Возврат;
	КонецПопытки;

	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеПослеОтправкиОдноразовогоПароля", ОООЗ);
	Параметры.Вставить("Сессия", Сессия);
	Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	Параметры.Вставить("Сертификат", Сертификат);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВводаОдноразовогоПароляСессияЧерезДопОбработку", ЭтотОбъект, Параметры);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторСессии", Сессия.Идентификатор);

	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, , , , , Оповещение);

КонецПроцедуры

Процедура ПослеУстановкиСоединенияЧерезДополнительнуюОбработку(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификата, Неопределено);
		Возврат;
	КонецЕсли;
	
	Попытка
		СертификатXML = ДополнительныеПараметры.ПодключаемыйМодуль.ДополнитьСертификат(
			ДополнительныеПараметры.СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'При загрузке сертификата произошла ошибка.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ДополнительныеПараметры.ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение дополнительных данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификата, Неопределено);
		Возврат;
	КонецПопытки;

	ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ДополнительныеПараметры.ПодключаемыйМодуль, СертификатXML);
	
	Если Не ДанныеСертификата = Неопределено Тогда
		ДанныеСертификата.Вставить("СертификатXML", СертификатXML);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификата, ДанныеСертификата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезВК

// Производит сериализацию данных.
//
// Параметры:
//  Значение - Произвольный - данные для сериализации;
//
// Возвращаемое значение:
//  Строка - сериализованные данные.
//
Функция СериализованныеДанные(Знач Значение)

	#Если НЕ ВебКлиент Тогда

		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

		Возврат ЗаписьXML.Закрыть();
		
	#Иначе
		
		Возврат ОбменСБанкамиСлужебныйВызовСервера.СериализованныеДанные(Значение);

	#КонецЕсли

КонецФункции

// Производит десериализацию данных.
//
// Параметры:
//   ПредставлениеXML - Строка - сериализованные данные;
//
// Возвращаемое значение:
//   Произвольный - десериализованные данные.
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML)

	#Если НЕ ВебКлиент Тогда
	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
		ЧтениеXML.Прочитать();

		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	#Иначе
		
		Возврат ОбменСБанкамиСлужебныйВызовСервера.ДеСериализованныеДанные(ПредставлениеXML);
		
	#КонецЕсли

КонецФункции

Процедура ПроверитьУстановкуПодписиПослеАутентификацииНаТокене(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = Результат;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	ИначеЕсли Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка аутентификации на электронном ключе'");
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеПодписиТестовойСтрокиЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	СтрокаПодписиBase64 = "JiMxMDU4OyYjMTA3NzsmIzEwODk7JiMxMDkwOw=="; // "Тест" в Base64
	
	ПодписатьДанныеЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, СтрокаПодписиBase64,
		ДополнительныеПараметры.ДанныеСертификата);

КонецПроцедуры

Процедура ПослеПодписиТестовойСтрокиЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = Результат;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	ИначеЕсли Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка подписи данных на электронном ключе'");
		ДополнительныеПараметры.Контекст.ОписаниеОшибки = ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками.ДанныеПодписиВК", Результат.ДанныеПодписи);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, ДополнительныеПараметры.Контекст);

КонецПроцедуры

Процедура ПослеОправкиПакетовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Результат);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения , Результат);
		Возврат;
	ИначеЕсли Результат.Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения , Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("РезультатСинхронизацииЧерезВК", Результат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПродолжитьСинхронизациюПослеПолученияНовыхДокументовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьНовыеДокументыВК(Оповещение, Результат.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ПродолжитьСинхронизациюПослеПолученияНовыхДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Результат);
	КонецЕсли;
	ДополнительныеПараметры.РезультатСинхронизацииЧерезВК.Вставить("ИтогКолПолученных", Результат.ИтогКолПолученных);
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОбработчикПродолжения, ДополнительныеПараметры.РезультатСинхронизацииЧерезВК);
	
КонецПроцедуры

Процедура ОтправитьЗапросыВыписокВБанкПослеПодписанияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ИтогКолПодписанных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение =Новый ОписаниеОповещения("ЗапуститьПроцессПолученияВыпискиЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ДанныеОтправки = Новый Соответствие;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("МассивСообщенийОбмена", ДополнительныеПараметры.МассивСообщенийОбменаКОтправке);
	СтруктураДанных.Вставить("МассивСообщенийТребующихПодтверждение", Новый Массив);
	ДанныеОтправки.Вставить(ДополнительныеПараметры.НастройкаОбмена, СтруктураДанных);
	ОтправитьДокументыЧерезВК(Оповещение, ДанныеОтправки, Ложь);
	
КонецПроцедуры

// Асинхронный обработчик после ввода пароля сертификата пользователем.
// Вызывается из модуля ОбменСБанкамиКлиент.
//
// Параметры:
//  Результат - Структура - сертификат и пароль для подписи электронного документа
//  ДополнительныеПараметры - Структура - контекст выполнения.
//
Процедура ПодписатьЗапросыВыписокПослеВводаПароляЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьЗапросыВыписокВБанкПослеПодписанияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодписания", Оповещение);
	ДополнительныеПараметры.Вставить("СертификатСсылка", Результат.ВыбранныйСертификат);
	ДополнительныеПараметры.Вставить("Пароль", Результат.ПарольСертификата);
	ДополнительныеПараметры.Вставить("ИтогКолПодписанных", 0);
	МассивСообщенийОбмена = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивСообщенийОбмена, ДополнительныеПараметры.МассивСообщенийОбменаКОтправке);
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
		
	ПодписатьРекурсивноЭДПоСертификатуЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗапуститьПроцессПолученияВыпискиЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ИтогКолОтправленных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСообщенийОбмена", ДополнительныеПараметры.МассивСообщенийОбменаКОтправке);
	ПараметрыФормы.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
	ПараметрыФормы.Вставить("ВидОперации", "ПолучениеВыписки");
	
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросВБанк", ПараметрыФормы, ДополнительныеПараметры.Владелец);
	
КонецПроцедуры

Процедура ПодписатьРекурсивноЭДПоСертификатуЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.МассивСообщенийОбмена.Количество() = 0 Тогда
		СтруктураВозврата = Новый Структура("ИтогКолПодписанных", ДополнительныеПараметры.ИтогКолПодписанных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	СообщениеОбмена = ДополнительныеПараметры.МассивСообщенийОбмена.Получить(0);
	ДополнительныеПараметры.МассивСообщенийОбмена.Удалить(0);
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьРекурсивноеПодписаниеЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодписатьЭДПоСертификатуЧерезВК(Оповещение, СообщениеОбмена, ДополнительныеПараметры.НастройкаОбмена,
		ДополнительныеПараметры.СертификатСсылка, ДополнительныеПараметры.Пароль);
	
КонецПроцедуры

Процедура ПродолжитьРекурсивноеПодписаниеЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		СтруктураВозврата = Новый Структура("ИтогКолПодписанных", ДополнительныеПараметры.ИтогКолПодписанных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Или Результат = Ложь Тогда
		СтруктураВозврата = Новый Структура("ИтогКолПодписанных", ДополнительныеПараметры.ИтогКолПодписанных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписания, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИтогКолПодписанных = ДополнительныеПараметры.ИтогКолПодписанных + 1;
	
	ПодписатьРекурсивноЭДПоСертификатуЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиПакетовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Результат);
	
	ЗавершитьОтправкуСообщенийОбмена(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Предлагает пользователю выбрать сертификат и ввести пароль (асинхронно).
//
// Параметры:
//    Оповещение - ОписаниеОповещения - оповещение, вызываемое после выполнения процедуры:
//       * Результат - Структура - данные выбора пользователя:
//                       ** СертификатBase64 - Строка - данные сертификата;
//                       ** Пароль - Строка - введенный пароль к сертификату.
//                     Строка - текст ошибки для вывода в виде сообщения;
//                     Неопределено - пользователь отказался продолжать операцию.
//       * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//    ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//
Процедура ПолучитьДанныеАутентификацииНаТокенеВК(Оповещение, ПодключаемыйМодуль)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияДанныхАутентификации", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ОповещениеПослеПолученияКлючей = Новый ОписаниеОповещения(
		"ПоказатьВыборПослеПолученияКлючейВК", ЭтотОбъект, ДополнительныеПараметры);

	ПолучитьСертификатыИзХранилищаВК(ОповещениеПослеПолученияКлючей, ПодключаемыйМодуль);
		
КонецПроцедуры

// Получает свойства сертификатов (асинхронно).
//
// Параметры:
//  Оповещение - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после завершения вызова метода со следующими параметрами: 
//                   * Результат - Массив - результат вызова метода. В элементах структуры со свойствами:
//                                   ** СертификатBase64 - Строка - содержимое сертификата;
//                                   ** ДанныеСертификата - Структура - свойства сертификата:
//                                       *** Псевдоним - Строка - псевдоним ключа ЭП;
//                                       *** Отпечаток - Строка - уникальный идентификатор ключа ЭП;
//                                       *** СерийныйНомер - Строка - серийный номер ключа в hex;
//                                       *** ИмяИздателя - Строка - имя издателя сертификата.
//                               - Строка - текст ошибки.
//                   * ДополнительныеПараметры - значение, которое было указано при создании объекта ОписаниеОповещения.
//  ДанныеСертификатовBase64 - Массив - данные сертификатов в формате Base64, для которых необходимо получить свойства;
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка.
//
Процедура ПолучитьСвойстваСертификатовЧерезВК(Оповещение, ДанныеСертификатовBase64, ПодключаемыйМодуль)
	
	ДанныеСертификатов = Новый Массив;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	ДополнительныеПараметры.Вставить("СертификатыКлюча", ДанныеСертификатовBase64);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияКлючей", Оповещение);
	ПолучитьДанныеСертификатовРекурсивноВК(ДополнительныеПараметры);
	
КонецПроцедуры

// Устанавливает соединение с банком через внешнюю компоненту (асинхронно). Аутентификация на токене должна уже быть выполнена.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - оповещение, вызываемое при выполнении процедуры:
//      Результат - Булево - возвращает Истина, если соединение успешно установлено.
//                - Строка - содержит текст ошибки, если соединение не было установлено.
//                - Неопределено - пользователь не ввел одноразовый пароль.
//  ПодключаемыйМодуль - AddIn - внешняя компонента банка;
//  СертификатBase64 - Строка - данные сертификата аутентификации в формате Base64
//  ПараметрыСоединения - Структура - параметры соединения. Содержит следующие элементы:
//     * ИдентификаторОрганизации - Строка - идентификатор организации из настройки обмена;
//     * БИК - Строка - БИК банка;
//     * КлючУникальности - идентифицирующая пользователя строка, например “<инн>_<бик>”. Используется для сбора статистики подключений.
//
Процедура УстановитьСоединениеВК(Оповещение, ПодключаемыйМодуль, СертификатBase64, ПараметрыСоединения)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеУстановкиСоединения", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ПараметрыСтрокой = СериализованныеДанные(ПараметрыСоединения);
	
	НастройкиПроксиСервера = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
	НастройкиПроксиСтрокой = СериализованныеДанные(НастройкиПроксиСервера);

	ОповещениеПослеУстановкиСоединения = Новый ОписаниеОповещения("ПослеУстановкиСоединенияВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуУстановкиСоединенияВК", ЭтотОбъект);
		
	ПараметрыРасширеннойАутентификации = Неопределено;
	ПодключаемыйМодуль.НачатьВызовУстановитьСоединение(ОповещениеПослеУстановкиСоединения, СертификатBase64,
		НастройкиПроксиСтрокой, ПараметрыСтрокой, ПараметрыРасширеннойАутентификации);
	
КонецПроцедуры

Процедура ПослеПолученияПодключаемогоМодуляВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК, Результат);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ДоступныеСертификаты = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(
		ДополнительныеПараметры.НастройкаОбмена);
		
	ДополнительныеПараметры.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
	
	Для Каждого КлючЗначение Из ДоступныеСертификаты Цикл
		Пароль = Неопределено;
		Если ПарольКСертификатуПолучен(КлючЗначение.Ключ, Пароль) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Пароль = Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьПарольАутентификацииПослеОпределенияСертификата", ЭтотОбъект, ДополнительныеПараметры);
			
		МассивСертификатов = Новый Массив;
		Для Каждого КлючЗначение Из ДоступныеСертификаты Цикл
			МассивСертификатов.Добавить(КлючЗначение.Значение.ДанныеСертификата);
		КонецЦикла;
			
		ОпределитьСертификатСУстановленнымПаролемЧерезВК(Оповещение, ПодключаемыйМодуль, МассивСертификатов);
		
	Иначе
		УстановитьСоединениеПоСертификатуЧерезВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК,
			ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена, КлючЗначение.Ключ, Пароль);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПарольАутентификацииПослеОпределенияСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК, Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат.Успех Тогда
		ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(
			ДополнительныеПараметры.НастройкаОбмена);
		УстановитьСоединениеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК,
			ДополнительныеПараметры.ПодключаемыйМодуль, Результат.СертификатBase64, ПараметрыСоединения);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьПарольПослеВводаПользователемЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ВидОперации = НСтр("ru = 'Аутентификация на сервере банка'") + " "; // Для запроса пароля сертификата
		Параметры = Новый Структура("ВызватьОповещение", Оповещение);
		ПолучитьПарольКСертификату(Оповещение, ДополнительныеПараметры.ДоступныеСертификаты, ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСертификатСУстановленнымПаролемЧерезВК(Оповещение, ПодключаемыйМодуль, МассивСертификатов)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПоискаСертификатаБезПароля", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("МассивСертификатов", МассивСертификатов);
	НайтиСертификатСУстановленнымПаролемРекурсивноЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НайтиСертификатСУстановленнымПаролемРекурсивноЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.МассивСертификатов.Количество() = 0 Тогда // нет сертификата с паролем
		Результат = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПоискаСертификатаБезПароля, Результат);
		Возврат;
	КонецЕсли;
	
	ДанныеСертификата = ДополнительныеПараметры.МассивСертификатов.Получить(0);
	ДополнительныеПараметры.МассивСертификатов.Удалить(0);
	
	ДополнительныеПараметры.Вставить("СертификатBase64", ДанныеСертификата);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьНеобходимостьУстановкиПинПослеПолученияСвойствСертификатаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеКлючаЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДанныеСертификата);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьУстановкиПинПослеПолученияСвойствСертификатаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПоискаСертификатаБезПароля, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьУстановкуПароляСертификатаПослеПроверкиПинЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПроверитьНеобходимостьУстановкиПинЧерезВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, Результат.ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПроверитьУстановкуПароляСертификатаПослеПроверкиПинЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // ошибку не обрабатываем, т.к. это только пробный поиск сертификата с паролем.
		НайтиСертификатСУстановленнымПаролемРекурсивноЧерезВК(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда //требуется установка пин-кода, значит пароль сертификата не сохранен.
		НайтиСертификатСУстановленнымПаролемРекурсивноЧерезВК(ДополнительныеПараметры)
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьУстановкуПароляСледующегоСертификатаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ВызватьПроверкуНеобходимостиУстановкиПароляСертификатаЧерезВК(
			Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.СертификатBase64)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУстановкуПароляСледующегоСертификатаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПоискаСертификатаБезПароля, Результат);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат Тогда  // не требуется установка пароля
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Успех", Истина);
		СтруктураВозврата.Вставить("СертификатBase64", ДополнительныеПараметры.СертификатBase64);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПоискаСертификатаБезПароля, СтруктураВозврата);
	Иначе
		НайтиСертификатСУстановленнымПаролемРекурсивноЧерезВК(ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьПроверкуНеобходимостиУстановкиПароляСертификатаЧерезВК(Оповещение, ПодключаемыйМодуль, СертификатBase64)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиНеобходимостиУстановкиПароля", Оповещение);
	ОповещениеПослеВызоваПроверки = Новый ОписаниеОповещения("ПослеПроверкиНеобходимостиУстановкиПароляВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПроверкиНеобходимостиУстановкиПароляВК", ЭтотОбъект);
	ПодключаемыйМодуль.НачатьВызовТребуетсяПароль(ОповещениеПослеВызоваПроверки, СертификатBase64);
	
КонецПроцедуры

Процедура ПослеПроверкиНеобходимостиУстановкиПароляВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиНеобходимостиУстановкиПароля, РезультатВызова);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПроверкиНеобходимостиУстановкиПароляВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При аутентификации произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Проверка необходимости установки пароля.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПроверкиНеобходимостиУстановкиПароля,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура УстановитьПарольПослеВводаПользователемЧерезВК(ДанныеАутентификации, ДополнительныеПараметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК, Неопределено);
		Возврат;
	КонецЕсли;
	
	УстановитьСоединениеПоСертификатуЧерезВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединенияВК,
		ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена,
		ДанныеАутентификации.ВыбранныйСертификат, ДанныеАутентификации.ПарольСертификата);
	
КонецПроцедуры

Процедура УстановитьСоединениеПоСертификатуЧерезВК(Оповещение, ПодключаемыйМодуль, НастройкаОбмена, СертификатСсылка, Пароль)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеУстановкиСоединения", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	РеквизитыСертификата = Новый Структура("ДанныеСертификата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(СертификатСсылка, РеквизитыСертификата);
	ДополнительныеПараметры.Вставить("СертификатBase64", РеквизитыСертификата.ДанныеСертификата);
	
	ОповещениеПослеАутентификации = Новый ОписаниеОповещения(
		"УстановитьСоединениеПослеАутентификацииЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	АутентифицироватьсяНаЭлектронномКлючеЧерезВК(
		ОповещениеПослеАутентификации, ПодключаемыйМодуль, СертификатСсылка, РеквизитыСертификата.ДанныеСертификата, Пароль);
	
КонецПроцедуры

Процедура УстановитьСоединениеПослеАутентификацииЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено ИЛИ Не Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения, Результат);
		Возврат;
	КонецЕсли;

	ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(
		ДополнительныеПараметры.НастройкаОбмена);
	
	УстановитьСоединениеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения,
		ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.СертификатBase64, ПараметрыСоединения);
	
КонецПроцедуры

Процедура ПослеПолученияХранилищКлючейЭПВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Хранилища = ДеСериализованныеДанные(РезультатВызова);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификаторовКлючей, Хранилища);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияХранилищКлючейЭП(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Получение информации об аппаратных устройствах.'");
	ТекстСообщения = НСтр("ru = 'При поиске аппаратных устройств, подключенных к компьютеру, произошла ошибка.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификаторовКлючей,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДанныеОтправки.Количество() = 0 Тогда // все настройки обмена обработаны
		Результат = Новый Структура("ИтогКолОтправленных, ИтогКолПодготовленных", 0, 0);
		ЗаполнитьЗначенияСвойств(Результат, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиСообщенийОбменаПоНастройкам, Результат);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеОтправки Цикл
		НастройкаОбмена = КлючЗначение.Ключ;
		МассивСообщенийОбмена = КлючЗначение.Значение.МассивСообщенийОбмена;
		МассивСообщенийТребующихПодтверждение = КлючЗначение.Значение.МассивСообщенийТребующихПодтверждение;
		Прервать;
	КонецЦикла;
	
	ДополнительныеПараметры.ДанныеОтправки.Удалить(НастройкаОбмена);
	
	РеквизитыНастройкиОбмена = Новый Структура("ИмяВнешнегоМодуля");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
		НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	ДополнительныеПараметры.Вставить("МассивСообщенийОбмена", МассивСообщенийОбмена);
	ДополнительныеПараметры.Вставить("МассивСообщенийТребующихПодтверждение", МассивСообщенийТребующихПодтверждение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОповещениеПослеПолученияВК = Новый ОписаниеОповещения(
		"ПолучитьСвойстваСертификатовПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключитьИИнициализироватьВК(ОповещениеПослеПолученияВК, НастройкаОбмена);
	
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатовСообщенийОбменаЧерезВК(Оповещение, ПодключаемыйМодуль, МассивСообщенийОбмена)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияДанныхСертификатов", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	СообщенияОбменаИСертификаты = ОбменСБанкамиСлужебныйВызовСервера.ДанныеСертификатовСообщенийОбмена(
		МассивСообщенийОбмена);
		
	ДополнительныеПараметры.Вставить("СообщенияОбменаИСертификаты", СообщенияОбменаИСертификаты);
	ДополнительныеПараметры.Вставить("СообщенияОбменаИСвойстваСертификатов", Новый Соответствие);
		
	ПолучитьДанныеСертификатовРекурсивноЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатовПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
		Возврат
	ИначеЕсли Результат = Неопределено Тогда
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	ПодключаемыйМодуль = Результат;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьПакетыЭДПослеПолученияДанныхСертификатовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьСвойстваСертификатовСообщенийОбменаЧерезВК(
		Оповещение, ПодключаемыйМодуль, ДополнительныеПараметры.МассивСообщенийОбмена);
	
КонецПроцедуры

Процедура ОтправитьПакетыЭДПослеПолученияДанныхСертификатовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	МассивПакетовЭД = Новый Массив;
		
	Для Каждого СообщениеОбменаИСертификаты Из Результат Цикл
		
		СвойстваСертификатов = Новый Соответствие;
		Для Каждого Элемент Из СообщениеОбменаИСертификаты.Значение Цикл
			СвойстваСертификата = Новый Структура("СерийныйНомер, ИмяИздателя");
			ЗаполнитьЗначенияСвойств(СвойстваСертификата, Элемент.ДанныеСертификата);
			СвойстваСертификатов.Вставить(Элемент.ДанныеСертификата.Отпечаток, СвойстваСертификата)
		КонецЦикла;
		
		ПакетОбменСБанками = ОбменСБанкамиСлужебныйВызовСервера.СоздатьПакетВК(
			ДополнительныеПараметры.НастройкаОбмена, СообщениеОбменаИСертификаты.Ключ, СвойстваСертификатов);
			
		ДополнительныеПараметры.ИтогКолПодготовленных = ДополнительныеПараметры.ИтогКолПодготовленных + 1;
			
		Оповестить("ОбновитьСостояниеОбменСБанками");
		МассивПакетовЭД.Добавить(ПакетОбменСБанками);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПродолжитьОтправкуПакетовПоНастройкамОбменаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	Если МассивПакетовЭД.Количество() ИЛИ ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение.Количество() Тогда
		ОтправитьПакетыЧерезВК(Оповещение, ДополнительныеПараметры.НастройкаОбмена, МассивПакетовЭД);
	Иначе
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеСертификатовРекурсивноЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.СообщенияОбменаИСертификаты.Количество() = 0 Тогда // обработаны все сообщения обмена
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификатов,
			ДополнительныеПараметры.СообщенияОбменаИСвойстваСертификатов);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.СообщенияОбменаИСертификаты Цикл
		МассивСертификатовBase64 = КлючЗначение.Значение;
		ДополнительныеПараметры.Вставить("СообщениеОбмена", КлючЗначение.Ключ);
		ДополнительныеПараметры.СообщенияОбменаИСертификаты.Удалить(КлючЗначение.Ключ);
		Прервать;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойстваСертификатовСледующегоСообщенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьСвойстваСертификатовЧерезВК(Оповещение, МассивСертификатовBase64, ДополнительныеПараметры.ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетовПоНастройкамОбменаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ИтогКолОтправленных = ДополнительныеПараметры.ИтогКолОтправленных + Результат.ИтогКолОтправленных;
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Результат);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПолучитьНовыеДокументы Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НачатьПодтверждениеПлатежныхДокументовПоSMSПослеПолученияНовыхДокументовЧерезВК", ЭтотОбъект,
			ДополнительныеПараметры);
		ПолучитьНовыеДокументыВК(
			Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена);
	Иначе
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатовСледующегоСообщенияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификатов, Результат);
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры.СообщенияОбменаИСвойстваСертификатов.Вставить(ДополнительныеПараметры.СообщениеОбмена, Результат);
	
	ПолучитьДанныеСертификатовРекурсивноЧерезВК(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ВызватьАутентификациюНаЭлектронномКлючеВК(Оповещение, ПодключаемыйМодуль, СертификатBase64, Пароль, СертификатСсылка = Неопределено)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификацииВК", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СертификатСсылка", СертификатСсылка);
	
	ОповещениеПослеУстановкиПароляСертификата = Новый ОписаниеОповещения(
		"ПослеУстановкиПароляВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуУстановкиПароляВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовУстановитьПароль(ОповещениеПослеУстановкиПароляСертификата, СертификатBase64, Пароль);
	
КонецПроцедуры

Процедура АутентифицироватьсяНаЭлектронномКлючеЧерезВК(Оповещение, ПодключаемыйМодуль, СертификатСсылка, СертификатBase64, Пароль, ЭтоТест = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СертификатBase64", СертификатBase64);
	ДополнительныеПараметры.Вставить("ОповещениеПослеАутентификации", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СертификатСсылка", СертификатСсылка);
	ДополнительныеПараметры.Вставить("Пароль", Пароль);
	ДополнительныеПараметры.Вставить("ЭтоТест", ЭтоТест);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьНеобходимостьУстановкиПинПослеПолученияДанныхСертификата", ЭтотОбъект, ДополнительныеПараметры);
		
	ПолучитьДанныеКлючаЧерезВК(Оповещение, ПодключаемыйМодуль, СертификатBase64);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьУстановкиПинПослеПолученияДанныхСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификации, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", Результат.ИдентификаторХранилища);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьНаличиеПинТокенаПослеПроверкиПодключенияКлюча", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбеспечитьПодключениеЭлектронногоКлючаЧерезВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, Результат.ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПроверитьНаличиеПинТокенаПослеПроверкиПодключенияКлюча(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Массив") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификации, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьНеобходимостьУстановкиПароляСертификатаПослеУстановкиПин", ЭтотОбъект, ДополнительныеПараметры);
	
	УстановитьПинЕслиТребуетсяВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ОбеспечитьПодключениеЭлектронногоКлючаЧерезВК(Оповещение, ПодключаемыйМодуль, ИдентификаторХранилища = Неопределено)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодключенияЭлектронногоКлюча", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ОповещениеПослеПолученияИдентификаторов = Новый ОписаниеОповещения(
		"ПредложитьПодключитьКлючПослеПолученияИдентификаторовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьИдентификаторыПодключенныхКлючейЧерезВК(ОповещениеПослеПолученияИдентификаторов, ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ПредложитьПодключитьКлючПослеПолученияИдентификаторовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодключенияЭлектронногоКлюча, Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 0
		ИЛИ (ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторХранилища)
				И Результат.Найти(ДополнительныеПараметры.ИдентификаторХранилища) = Неопределено) Тогда
		
		// кэшируем компоненту т.к. она будет нужна на открытой форме
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
		Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) <> Тип("Соответствие") Тогда
			ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ОбменСБанками", Новый Соответствие);
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
		КонецЕсли;

		ПараметрыПодсистемыОбменСБанками.Вставить("ПодключаемыйМодуль", ДополнительныеПараметры.ПодключаемыйМодуль);
		
		Параметры = Новый Структура("ИдентификаторКлюча", ДополнительныеПараметры.ИдентификаторХранилища);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ПослеПодключенияЭлектронногоКлючаВК", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ОжиданиеПодключенияЭлектронногоКлюча", Параметры, , , , ,
			ОписаниеОповещенияОЗакрытии);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодключенияЭлектронногоКлюча, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодключенияЭлектронногоКлючаВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодключенияЭлектронногоКлюча, Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодключенияЭлектронногоКлюча, Неопределено);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодключенияЭлектронногоКлюча, Результат);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьУстановкиПароляСертификатаПослеУстановкиПин(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификации, Результат);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификации, Неопределено);
		Возврат;
	КонецЕсли;
	
	ВызватьАутентификациюНаЭлектронномКлючеВК(ДополнительныеПараметры.ОповещениеПослеАутентификации,
			ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.СертификатBase64,
			ДополнительныеПараметры.Пароль, ДополнительныеПараметры.СертификатСсылка);
	
КонецПроцедуры

Процедура ИнициализироватьПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПодключенияИИнициализацииВК, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатИнициализацииВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнициализироватьВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ОбработатьРезультатИнициализацииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПодключенияИИнициализацииВК, Результат);
	Иначе
		Если ДополнительныеПараметры.ИспользоватьЖурналирование Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеВключенияЖурналированияВК", ЭтотОбъект, ДополнительныеПараметры);
			ВключитьЖурналированиеВК(
				Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.КаталогДляЖурналирования);
		Иначе
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОповещенияПослеПодключенияИИнициализацииВК, ДополнительныеПараметры.ПодключаемыйМодуль);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура АутентифицироватьсяНаТокенеПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьНеобходимостьДополненияЭДПослеАутентификацииЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	АутентифицироватьсяНаЭлектронномКлючеЧерезВК(Оповещение, Результат, ДополнительныеПараметры.СертификатСсылка,
		ДополнительныеПараметры.СертификатBase64, ДополнительныеПараметры.Пароль, ДополнительныеПараметры.ЭтоТест);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьДополненияЭДПослеАутентификацииЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиНеобходимостиДополненияЭДЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПроверкиДополненияЧерезВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовТребуетсяДополнитьЭД(
		Оповещение, ДополнительныеПараметры.ДанныеЭДBase64);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПроверкиДополненияЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При подписании документа произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Проверка дополнения электронного документа.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПослеПроверкиНеобходимостиДополненияЭДЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если РезультатВызова Тогда // требуется дополнить ЭД
		Оповещение = Новый ОписаниеОповещения("ДополнитьЭДПослеУстановкиСоединенияВК", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(ДополнительныеПараметры.НастройкаОбмена);
		УстановитьСоединениеВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль,
			ДополнительныеПараметры.СертификатBase64, ПараметрыСоединения);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"СохранитьДанныеПодписиПослеПодписанияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(
			ДополнительныеПараметры.СообщениеОбмена);

		Если ДвоичныеДанныеЭД = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Неопределено);
			Возврат;
		КонецЕсли;
		
		ДанныеЭДBase64 = Base64Строка(ДвоичныеДанныеЭД);
		
		ПодписатьДанныеЧерезВК(
			Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДанныеЭДBase64, ДополнительныеПараметры.СертификатBase64);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеПодписиПослеПодписанияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодписьBase64", Результат.ДанныеПодписи);
	
	Оповещение = Новый ОписаниеОповещения(
		"СохранитьПодписьПослеПолученияСвойствСертификата", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеКлючаЧерезВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.СертификатBase64);
	
КонецПроцедуры

Процедура ДополнитьЭДПослеУстановкиСоединенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеДополненияЭДЧерезВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуДополненияЭДЧерезВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовДополнитьЭД(Оповещение, ДополнительныеПараметры.ДанныеЭДBase64);
	
КонецПроцедуры

Процедура ПослеДополненияЭДЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДвоичныеДанныеЭД = Base64Значение(РезультатВызова);
	
	ОбменСБанкамиСлужебныйВызовСервера.ОбновитьДанныеЭД(ДополнительныеПараметры.СообщениеОбмена, ДвоичныеДанныеЭД);
	
	Оповещение = Новый ОписаниеОповещения(
			"СохранитьДанныеПодписиПослеПодписанияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(
		ДополнительныеПараметры.СообщениеОбмена);

	Если ДвоичныеДанныеЭД = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Неопределено);
		Возврат;
	КонецЕсли;
		
	ДанныеЭДBase64 = Base64Строка(ДвоичныеДанныеЭД);
		
	ПодписатьДанныеЧерезВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДанныеЭДBase64, ДополнительныеПараметры.СертификатBase64);
	
КонецПроцедуры

Процедура ОбработатьОшибкуДополненияЭДЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При дополнении документа произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Дополнение электронного документа.'");
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияПричиныОтклоненияЭДЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьИнформациюОбОшибкеВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПослеПолученияПричиныОтклоненияЭДЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	СтатусОтклоненБанком = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.ОтклоненБанком");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Статус", СтатусОтклоненБанком);
	СтруктураПараметров.Вставить("ПричинаОтклонения", Результат);
	
	ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(ДополнительныеПараметры.СообщениеОбмена, СтруктураПараметров);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
	
КонецПроцедуры

Процедура ПолучитьСертификатыСКлючаПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // ошибка подключения ВК с выводом сообщения
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // ошибка подключения ВК
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДанныхСертификатовСКлючаВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ИдентификаторХранилища = Неопределено;
	Если ДополнительныеПараметры.ПараметрыУстановленногоСоединения <> Неопределено Тогда
		ИдентификаторХранилища = ДополнительныеПараметры.ПараметрыУстановленногоСоединения.ИдентификаторХранилища;
	КонецЕсли;
	
	ПолучитьСертификатыИзХранилищаВК(Оповещение, Результат, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПослеПолученияДанныхСертификатовСКлючаВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	ДоступныеСертификаты = ОбменСБанкамиСлужебныйВызовСервера.ДоступныеСертификаты(
		ДополнительныеПараметры.НастройкаОбмена);
		
	Если ДоступныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В настройке обмена с сервисом 1С:ДиректБанк нет ни одного доступного сертификата.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	ПараметрыСертификатовНастройкиОбмена = Новый Соответствие;
	Для Каждого КлючЗначение Из ДоступныеСертификаты Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("СсылкаНаСертификат", КлючЗначение.Ключ);
		СтруктураДанных.Вставить("СертификатBase64", КлючЗначение.Значение.ДанныеСертификата);
		СтруктураДанных.Вставить("КомуВыдан", КлючЗначение.Значение.КомуВыдан);
		ПараметрыСертификатовНастройкиОбмена.Вставить(КлючЗначение.Значение.Отпечаток, СтруктураДанных);
	КонецЦикла;
		
	ДанныеВыбора = Новый Соответствие;
	МассивОтпечатков = Новый Массив;
		
	Для Каждого Элемент Из Результат Цикл
		СвойстваСертификата = ПараметрыСертификатовНастройкиОбмена.Получить(Элемент.ДанныеСертификата.Отпечаток);
		Если СвойстваСертификата <> Неопределено Тогда
			СтруктураСертификата = Новый Структура;
			СтруктураСертификата.Вставить("СертификатBase64", СвойстваСертификата.СертификатBase64);
			СтруктураСертификата.Вставить("Псевдоним", Элемент.ДанныеСертификата.Псевдоним);
			СтруктураСертификата.Вставить("КомуВыдан", СвойстваСертификата.КомуВыдан);
			СтруктураСертификата.Вставить("Отпечаток", Элемент.ДанныеСертификата.Отпечаток);
			МассивОтпечатков.Добавить(Элемент.ДанныеСертификата.Отпечаток);
			СтруктураСертификата.Вставить("ПарольПолучен", Ложь);
			ДанныеВыбора.Вставить(СвойстваСертификата.СсылкаНаСертификат, СтруктураСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'На банковском ключе не найдены сертификаты, указанные в настройке обмена с банком.'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ДанныеВыбораСертификатов", ДанныеВыбора);
		
	ВидЭДЗапросЗонд = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросЗонд");
	
	НастройкиОбмена = Неопределено;
	СообщениеЗапросЗонд = Неопределено;
	
	ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд(
		ДополнительныеПараметры.НастройкаОбмена, МассивОтпечатков, СообщениеЗапросЗонд, НастройкиОбмена);
		
	Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеЗапросЗонд);
	
	Если НастройкиОбмена.Подписывать Тогда
		ВидОперации = НСтр("ru = 'Подписание электронного документа.'");
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьЗапросЗондПослеВыбораСертификатаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьПарольКСертификату(Оповещение, ДанныеВыбора, ВидОперации, СообщениеЗапросЗонд);
	Иначе
		МассивСертификатов = Новый Массив;
		Для Каждого КлючЗначение Из ДанныеВыбора Цикл
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОперации", НСтр("ru = 'Аутентификация на сервере банка'"));
		ПараметрыФормы.Вставить("НастройкаОбмена", ДополнительныеПараметры.НастройкаОбмена);
		ПараметрыФормы.Вставить("МассивСертификатов", МассивСертификатов);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("АутентификацияПослеПолученияПароляЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросПароляКСертификату",
			ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура АутентификацияПослеПолученияПароляЧерезВК(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	СвойстваСертификата = ДополнительныеПараметры.ДанныеВыбораСертификатов.Получить(ДанныеВыбора.ВыбранныйСертификат);
	
	ПараметрыУстановленногоСоединения = Новый Структура;
	ПараметрыУстановленногоСоединения.Вставить("Отпечаток", СвойстваСертификата.Отпечаток);
	ПараметрыУстановленногоСоединения.Вставить("КомуВыданСертификат", СвойстваСертификата.КомуВыдан);
	ПараметрыУстановленногоСоединения.Вставить("СертификатBase64", СвойстваСертификата.СертификатBase64);
	ДополнительныеПараметры.Вставить("ПараметрыУстановленногоСоединения", ПараметрыУстановленногоСоединения);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьТестовоеСоединениеПослеАутентификацииНаКлючеВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВызватьАутентификациюНаЭлектронномКлючеВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль,
		СвойстваСертификата.СертификатBase64, ДанныеВыбора.ПарольСертификата, ДанныеВыбора.ВыбранныйСертификат);
	
КонецПроцедуры

Процедура ПодписатьЗапросЗондПослеВыбораСертификатаЧерезВК(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	СвойстваСертификата = ДополнительныеПараметры.ДанныеВыбораСертификатов.Получить(ДанныеВыбора.ВыбранныйСертификат);
	
	ПараметрыУстановленногоСоединения = Новый Структура;
	ПараметрыУстановленногоСоединения.Вставить("Отпечаток", СвойстваСертификата.Отпечаток);
	ПараметрыУстановленногоСоединения.Вставить("КомуВыданСертификат", СвойстваСертификата.КомуВыдан);
	ПараметрыУстановленногоСоединения.Вставить("СертификатBase64", СвойстваСертификата.СертификатBase64);
	ДополнительныеПараметры.Вставить("ПараметрыУстановленногоСоединения", ПараметрыУстановленногоСоединения);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьТестовоеСоединениеПослеАутентификацииНаКлючеВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодписатьЭДПоСертификатуЧерезВК(Оповещение, ДополнительныеПараметры.СообщениеОбмена,
		ДополнительныеПараметры.НастройкаОбмена, ДанныеВыбора.ВыбранныйСертификат, ДанныеВыбора.ПарольСертификата, ,
		Истина);
	
КонецПроцедуры

Процедура УстановитьТестовоеСоединениеПослеАутентификацииНаКлючеВК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьТестовыйЗапросПослеУстановкиСоединенияВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(
		ДополнительныеПараметры.НастройкаОбмена);
		
	УстановитьСоединениеВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.ПараметрыУстановленногоСоединения.СертификатBase64, ПараметрыСоединения);
	
КонецПроцедуры

Процедура ОтправитьТестовыйЗапросПослеУстановкиСоединенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтправитьТестовыйПакетПослеПолученияСвойствСертификатовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);

	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(ДополнительныеПараметры.СообщениеОбмена);
		
	ПолучитьСвойстваСертификатовСообщенийОбменаЧерезВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, МассивСообщенийОбмена);

КонецПроцедуры

Процедура ОтправитьТестовыйПакетПослеПолученияСвойствСертификатовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;

	Для Каждого СообщениеОбменаИСертификаты Из Результат Цикл
		СвойстваСертификатов = Новый Соответствие;
		Для Каждого Элемент Из СообщениеОбменаИСертификаты.Значение Цикл
			СвойстваСертификата = Новый Структура("СерийныйНомер, ИмяИздателя");
			ЗаполнитьЗначенияСвойств(СвойстваСертификата, Элемент.ДанныеСертификата);
			СвойстваСертификатов.Вставить(Элемент.ДанныеСертификата.Отпечаток, СвойстваСертификата)
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	ПакетОбменСБанками = ОбменСБанкамиСлужебныйВызовСервера.СоздатьПакетВК(
		ДополнительныеПараметры.НастройкаОбмена, ДополнительныеПараметры.СообщениеОбмена, СвойстваСертификатов);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьИзвещениеПослеОтправкиЗапросаЗондаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ОтправитьПакетЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена,
		ПакетОбменСБанками, ДополнительныеПараметры.ПараметрыУстановленногоСоединения.СертификатBase64);
	
КонецПроцедуры

Процедура ПолучитьИзвещениеПослеОтправкиЗапросаЗондаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовВК", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьНовыеДокументыВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ОтправитьПакетЧерезВК(Оповещение, ПодключаемыйМодуль, НастройкаОбмена, ПакетЭД, СертификатBase64)
	
	// Аутентификация на токене уже выполнена.
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиПакетаЭД", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ПакетЭД", ПакетЭД);
	ОповещениеПослеУстановкиСоединения = Новый ОписаниеОповещения(
		"ОтправитьПакетЭДПослеУстановкиСоединенияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(НастройкаОбмена);
	
	УстановитьСоединениеВК(ОповещениеПослеУстановкиСоединения, ПодключаемыйМодуль, СертификатBase64, ПараметрыСоединения);
	
КонецПроцедуры

Процедура ОтправитьПакетЭДПослеУстановкиСоединенияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетаЭД, Результат);
		Возврат;
	КонецЕсли;
	
	ВызватьОтправкуПакетаЧерезВК(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетаЭД,
		ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.ПакетЭД);
	
КонецПроцедуры

Процедура ОтправитьПакетыЧерезВК(Оповещение, НастройкаОбмена, ПакетыЭД)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПакетыЭД", ПакетыЭД);
	ДополнительныеПараметры.Вставить("ИтогКолОтправленных", 0);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиПакетов", Оповещение);
	
	ОповещениеПослеПодключенияВК = Новый ОписаниеОповещения(
		"УстановитьСоединениеПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ПодключитьИИнициализироватьВК(ОповещениеПослеПодключенияВК, НастройкаОбмена);
	
КонецПроцедуры

Процедура УстановитьСоединениеПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("Результат", Результат);
		ДанныеВозврата.Вставить("ИтогКолОтправленных", ДополнительныеПараметры.ИтогКолОтправленных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетов, ДанныеВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
		
	ОповещениеПослеУстановкиСоединения = Новый ОписаниеОповещения(
		"ОтправитьПакетыПослеУстановкиСоединенияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	УстановитьСоединениеЧерезВК(ОповещениеПослеУстановкиСоединения, ДополнительныеПараметры.НастройкаОбмена);
	
КонецПроцедуры

Процедура ОтправитьПакетыПослеУстановкиСоединенияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("Результат", Результат);
		ДанныеВозврата.Вставить("ИтогКолОтправленных", ДополнительныеПараметры.ИтогКолОтправленных);
		ДанныеВозврата.Вставить("ИтогКолПолученных", 0);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетов, ДанныеВозврата);
		Возврат;
	КонецЕсли;
	
	ВызватьОтправкуПакетовРекурсивноЧерезВК(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ВызватьОтправкуПакетовРекурсивноЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ПакетыЭД.Количество() = 0 Тогда
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("Результат", Истина);
		ДанныеВозврата.Вставить("ИтогКолОтправленных", ДополнительныеПараметры.ИтогКолОтправленных);
		ДанныеВозврата.Вставить("ПодключаемыйМодуль", ДополнительныеПараметры.ПодключаемыйМодуль); // используется для дальнейшего получения новых документов
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетов, ДанныеВозврата);
		Возврат;
	КонецЕсли;
	
	ПакетЭД = ДополнительныеПараметры.ПакетыЭД.Получить(0);
	ДополнительныеПараметры.Вставить("ПакетЭД", ПакетЭД);
	ДополнительныеПараметры.ПакетыЭД.Удалить(0);
	
	ОповещениеПослеОтправкиПакета = Новый ОписаниеОповещения(
		"ОтправитьСледующийПакетЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВызватьОтправкуПакетаЧерезВК(ОповещениеПослеОтправкиПакета, ДополнительныеПараметры.ПодключаемыйМодуль, ПакетЭД)
	
КонецПроцедуры

Процедура ОтправитьСледующийПакетЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("Результат", Результат);
		ДанныеВозврата.Вставить("ИтогКолОтправленных", ДополнительныеПараметры.ИтогКолОтправленных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакетов, ДанныеВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИтогКолОтправленных = ДополнительныеПараметры.ИтогКолОтправленных + 1;
	
	ВызватьОтправкуПакетовРекурсивноЧерезВК(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ВызватьОтправкуПакетаЧерезВК(Оповещение, ПодключаемыйМодуль, ПакетЭД)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеОтправкиПакета", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ПакетЭД", ПакетЭД);
	ДвоичныеДанныеПакета = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(ПакетЭД);
	Если ДвоичныеДанныеПакета = Неопределено Тогда
		СтатусОтменен = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен");
		ОбменСБанкамиСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД, СтатусОтменен);
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	ДанныеПакетаBase64 = Base64Строка(ДвоичныеДанныеПакета);
	
	ОповещениеПослеОтправкиПакета = Новый ОписаниеОповещения("ПослеОтправкиПакетаЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуОтправкиПакетаЧерезВК", ЭтотОбъект);
				
	ПодключаемыйМодуль.НачатьВызовОтправитьПакет(ОповещениеПослеОтправкиПакета, ДанныеПакетаBase64);
	
КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиПакетаЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При отправке данных в банк произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Отправка пакетов электронных документов.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеОтправкиПакета,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПослеОтправкиПакетаЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	СтруктураЭД = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Отправлен"));
	СтатусПакетаОтправлен = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отправлен");
	ОбменСБанкамиСлужебныйВызовСервера.ОбновитьСтатусыДокументовПакетаЭДО(
		ДополнительныеПараметры.ПакетЭД, СтатусПакетаОтправлен, СтруктураЭД);
		
	Оповестить("ОбновитьСостояниеОбменСБанками");
		
	Попытка
		ОтветБанка = Base64Значение(РезультатВызова);
		ВремФайл = Неопределено;
		ОбменСБанкамиСлужебныйВызовСервера.ОбработатьОтветБанкаНаОтправкуДокументаAsync(
			ОтветБанка, ДополнительныеПараметры.ПакетЭД, ВремФайл);
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиВЖурнале = НСтр("ru = 'При чтении ответа банка возникла ошибка:
										|%1
										|Файл ответа: %2'");
		ТекстОшибкиВЖурнале = СтрШаблон(ТекстОшибкиВЖурнале, ТекстИсключения, ВремФайл);
		ВидОперации = НСтр("ru = 'Чтение ответа, полученного из банка'");
		ОбработатьОшибку(ВидОперации, ТекстОшибкиВЖурнале, , ДополнительныеПараметры.ПакетЭД);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакета, ТекстСообщения);
		Возврат;
	КонецПопытки;
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиПакета, Истина);
	
КонецПроцедуры

Процедура ПослеПолученияНовыхДокументовВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") ИЛИ Результат.Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Результат.Результат);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Результат Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	Извещение = Неопределено;
	ПолученоИзвещение = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(
		ДополнительныеПараметры.СообщениеОбмена, ЕстьОшибка);
		
	Если ЕстьОшибка Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПолученоИзвещение Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Истина);
	Иначе
		Если ПроцессПрерван(ДополнительныеПараметры.НастройкаОбмена) Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеТестаНастройки, Ложь);
			Возврат;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовВК", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьНовыеДокументыВК(
			Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьПолучениеИдентификаторовНовыхПакетовЧерезВК(Оповещение, НастройкаОбмена, ПодключаемыйМодуль)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификаторовПакетов", Оповещение);
	ДополнительныеПараметры.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОповещениеПослеЗапросаСпискаПакетов = Новый ОписаниеОповещения("ПослеПолученияСпискаПакетовВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПолученияСпискаПакетов", ЭтотОбъект);
		
	ПараметрыОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаСБанком(НастройкаОбмена);

	ДатаСтрокой = "";
	
	Если ЗначениеЗаполнено(ПараметрыОбмена.ПоследняяДатаПолученияЭД) Тогда
		ДатаСтрокой = Формат(ПараметрыОбмена.ПоследняяДатаПолученияЭД, "ДФ=yyyy-MM-ddTHH:mm:ss");
	КонецЕсли;
		
	ПодключаемыйМодуль.НачатьВызовПолучитьСписокПакетов(ОповещениеПослеЗапросаСпискаПакетов, ДатаСтрокой);
		
КонецПроцедуры

Процедура ПослеПолученияСпискаПакетовВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	МассивИдентификаторов = Новый Массив;
	ОбменСБанкамиСлужебныйВызовСервера.ПрочитатьИдентификаторыПакетов(
		ДополнительныеПараметры.НастройкаОбмена, РезультатВызова, МассивИдентификаторов, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификаторовПакетов, Неопределено);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияИдентификаторовПакетов, МассивИдентификаторов);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияСпискаПакетов(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'Ошибка получения списка пакетов документов из банка.'");
	ВидОперации = НСтр("ru = 'Получение списка пакетов.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПолученияИдентификаторовПакетов,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПолучитьПакетыПослеПолученияИдентификаторовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Или Результат = Неопределено Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Результат);
		СтруктураВозврата.Вставить("ИтогКолПолученных", 0);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() Тогда
		ПолучитьОчереднойПакетВК(Результат, ДополнительныеПараметры);
	Иначе
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Истина);
		СтруктураВозврата.Вставить("ИтогКолПолученных", 0);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОчереднойПакетВК(МассивИдентификаторов, ДополнительныеПараметры)
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Истина);
		Если ДополнительныеПараметры.Свойство("ТекстОшибки") И ЗначениеЗаполнено(ДополнительныеПараметры.ТекстОшибки) Тогда
			СтруктураВозврата.Вставить("Результат", ДополнительныеПараметры.ТекстОшибки);
		КонецЕсли;
		СтруктураВозврата.Вставить("ИтогКолПолученных", ДополнительныеПараметры.ИтогКолПолученных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ИдентификаторПакета = МассивИдентификаторов.Получить(0);
	МассивИдентификаторов.Удалить(0);
	ДополнительныеПараметры.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьПакетПослеПолученияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВызватьПолучениеПакетаЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ИдентификаторПакета);
	
КонецПроцедуры

Процедура СохранитьПакетПослеПолученияЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Результат);
		СтруктураВозврата.Вставить("ИтогКолПолученных", ДополнительныеПараметры.ИтогКолПолученных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДанныеВозврата = ОбменСБанкамиКлиентСервер.ПараметрыПолученияНовыхДокументовАсинхронныйОбмен();
	
	ОбменСБанкамиСлужебныйВызовСервера.СохранитьПолученныйПакетЧерезВК(
		ДополнительныеПараметры.НастройкаОбмена, Результат.ПакетBase64, ДанныеВозврата);
		
	Оповестить("ОбновитьСостояниеОбменСБанками", ДанныеВозврата.ПараметрОповещения);

	Если ДанныеВозврата.ЕстьОшибка Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Неопределено);
		СтруктураВозврата.Вставить("ИтогКолПолученных", ДополнительныеПараметры.ИтогКолПолученных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ИтогКолПолученных = ДополнительныеПараметры.ИтогКолПолученных + 1;
	
	Если ДанныеВозврата.ДанныеЭП.Количество() Тогда
		
		РеквизитыНастройкиОбмена = Новый Структура("СертификатБанкаBase64");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(
			ДополнительныеПараметры.НастройкаОбмена, РеквизитыНастройкиОбмена);
		
		ДополнительныеПараметры.Вставить("ДанныеЭД", ДанныеВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("СертификатБанкаBase64", РеквизитыНастройкиОбмена.СертификатБанкаBase64);
		
		Оповещение = Новый ОписаниеОповещения(
			"СохранитьДанныеПодписейПослеПолученияСвойствСертификатаБанка", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьДанныеКлючаЧерезВК(
			Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, РеквизитыНастройкиОбмена.СертификатБанкаBase64);
		
	Иначе
		ПолучитьОчереднойПакетВК(ДополнительныеПараметры.МассивИдентификаторов, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьПолучениеПакетаЧерезВК(Оповещение, ПодключаемыйМодуль, ИдентификаторПакета)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияПакета", Оповещение);
	
	ОповещениеВызоваПолученияПакета = Новый ОписаниеОповещения(
		"ПослеПолученияПакетаВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПолученияПакетаВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовПолучитьПакет(ОповещениеВызоваПолученияПакета, ИдентификаторПакета);
	
КонецПроцедуры

Процедура ПослеПолученияПакетаВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура("ПакетBase64", РезультатВызова);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияПакета, Результат);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияПакетаВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'Ошибка получения пакета документов из банка.'");
	ВидОперации = НСтр("ru = 'Получение пакета из банка.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПолученияПакета,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
		
КонецПроцедуры

Процедура СохранитьДанныеПодписейПослеПолученияСвойствСертификатаБанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Результат);
		СтруктураВозврата.Вставить("ИтогКолПолученных", ДополнительныеПараметры.ИтогКолПолученных);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияНовыхДокументов, СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СвойстваСертификатаБанка", Результат);
	
	ПроверитьПодписиПолученныхДокументовЧерезВК(ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ПроверитьПодписиПолученныхДокументовЧерезВК(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДанныеЭД.Количество() = 0 Тогда // Обработаны все сообщения обмена
		ПолучитьОчереднойПакетВК(ДополнительныеПараметры.МассивИдентификаторов, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеЭД Цикл
		СообщениеОбмена = КлючЗначение.Ключ;
		МассивПодписей = КлючЗначение.Значение;
		Прервать;
	КонецЦикла;
	
	ДополнительныеПараметры.ДанныеЭД.Удалить(СообщениеОбмена);
	ДополнительныеПараметры.Вставить("СообщениеОбмена", СообщениеОбмена);
	ДополнительныеПараметры.Вставить("МассивПодписей", МассивПодписей);
	ДвоичныеДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(
		ДополнительныеПараметры.СообщениеОбмена);
	ДополнительныеПараметры.Вставить("ДанныеЭДBase64", Base64Строка(ДвоичныеДанныеЭД));
	ДополнительныеПараметры.Вставить("ДанныеПроверкиПодписи", Новый Массив);
	ДополнительныеПараметры.Вставить("ТекстОшибки");
	
	ПроверитьОчереднуюПодписьСообщенияОбменаЧерезВК(Неопределено, ДополнительныеПараметры)
	
КонецПроцедуры

Процедура ПроверитьОчереднуюПодписьСообщенияОбменаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", Результат);
		// возврат не делаем, т.к. нужно сохранить все подписи
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ДанныеПодписи", ДополнительныеПараметры.ДвоичныеДанныеПодписи);
		СтруктураЗаписи.Вставить("ПодписьВерна");
		СтруктураЗаписи.Вставить("ДатаПроверкиПодписи");
		ДополнительныеПараметры.ДанныеПроверкиПодписи.Добавить(СтруктураЗаписи);
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ДанныеПодписи", ДополнительныеПараметры.ДвоичныеДанныеПодписи);
		СтруктураЗаписи.Вставить("ПодписьВерна", Результат);
		СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
		ДополнительныеПараметры.ДанныеПроверкиПодписи.Добавить(СтруктураЗаписи);
	КонецЕсли;
	
	Если ДополнительныеПараметры.МассивПодписей.Количество() = 0 Тогда // проверены все подписи
		
		СвойстваСертификатаБанка = Новый Структура;
		СвойстваСертификатаБанка.Вставить("ДвоичныеДанные", Base64Значение(ДополнительныеПараметры.СертификатБанкаBase64));
		СвойстваСертификатаБанка.Вставить("КомуВыдан", ДополнительныеПараметры.СвойстваСертификатаБанка.ВладелецФИО);
		СвойстваСертификатаБанка.Вставить("Отпечаток", ДополнительныеПараметры.СвойстваСертификатаБанка.Отпечаток);
		
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьДанныеЭлектронныхПодписей(
			ДополнительныеПараметры.СообщениеОбмена, СвойстваСертификатаБанка, ДополнительныеПараметры.ДанныеПроверкиПодписи);
			
		ПроверитьПодписиПолученныхДокументовЧерезВК(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеПодписи = ДополнительныеПараметры.МассивПодписей.Получить(0);
	ДополнительныеПараметры.МассивПодписей.Удалить(0);
	ДополнительныеПараметры.Вставить("ДвоичныеДанныеПодписи", ДвоичныеДанныеПодписи);
	
	ПодписьBase64 = Base64Строка(ДвоичныеДанныеПодписи);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьОчереднуюПодписьСообщенияОбменаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ПроверитьПодписьЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.ДанныеЭДBase64, ДополнительныеПараметры.СертификатБанкаBase64, ПодписьBase64);
		
КонецПроцедуры

Процедура ПослеПроверкиПодписиЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписи, РезультатВызова);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПроверкиПодписиЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При проверке подписи документа произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Проверка подписи электронного документа.'");

	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписи,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПодписатьДанныеЧерезВК(Оповещение, ПодключаемыйМодуль, ДанныеЭДBase64, СертификатBase64)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПодписанияЭД", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("СертификатBase64", СертификатBase64);
	ДополнительныеПараметры.Вставить("ДанныеЭДBase64", ДанныеЭДBase64);
	
	ОповещениеПослеПодготовкиПодписи = Новый ОписаниеОповещения("ПодписатьЭДПослеПодготовкиПодписиЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПодготовкиПодписиЧерезВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПодготовитьПодпись(
		ОповещениеПослеПодготовкиПодписи, СертификатBase64, ДанныеЭДBase64);

КонецПроцедуры

Процедура ПодписатьЭДПослеПодготовкиПодписиЧерезВК(Результат, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	СтруктураРезультата = ДеСериализованныеДанные(Результат);
	
	Если СтруктураРезультата.Время = -1 Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПодписанияЧерезВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПодписанияЧерезВК", ЭтотОбъект);
		
		ДанныеПодписи = Неопределено;
	
		ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПодписать(
			Оповещение, ДополнительныеПараметры.СертификатBase64, ДополнительныеПараметры.ДанныеЭДBase64, ДанныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПодготовкиПодписиЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При подготовки подписи электронного документа произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Подготовка подписи электронного документа.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПодписанияЭД,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура ПослеПодписанияЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт

	Если Не РезультатВызова Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЭД, Неопределено);
		Возврат;
	КонецЕсли;
	
	РезультатПодписи = Новый Структура("Успех, ДанныеПодписи", Истина, ПараметрыВызова[2]);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЭД, РезультатПодписи);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПодписанияЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'При подписании электронного документа произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Подписание электронного документа.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПодписанияЭД,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
	
КонецПроцедуры

Процедура СохранитьПодписьПослеПолученияСвойствСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Результат);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеПодписи = Base64Значение(ДополнительныеПараметры.ПодписьBase64);
	
	СтруктураСертификата = Новый Структура;
	СтруктураСертификата.Вставить("Отпечаток",     Результат.Отпечаток);
	СтруктураСертификата.Вставить("КомуВыдан",     Результат.ВладелецФИО);
	СтруктураСертификата.Вставить("КемВыдан",      Результат.ИмяИздателя);
	СтруктураСертификата.Вставить("СерийныйНомер", Результат.СерийныйНомер);
	СтруктураСертификата.Вставить("ДатаОкончания", Результат.ДатаОкончания);
	СтруктураСертификата.Вставить("ДвоичныеДанные", Base64Значение(ДополнительныеПараметры.СертификатBase64));
	СтруктураСертификата.Вставить("СертификатСсылка", ДополнительныеПараметры.СертификатСсылка);
	
	ДанныеПроверкиПодписи = Новый Структура;
	ДанныеПроверкиПодписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
	ДанныеПроверкиПодписи.Вставить("ПодписьВерна", Истина);
	ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(
		ДополнительныеПараметры.СообщениеОбмена, ДвоичныеДанныеПодписи, СтруктураСертификата, ДанныеПроверкиПодписи);
		
	Оповестить("ОбновитьСостояниеОбменСБанками");
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПодписанияЧерезВК, Истина);
	
КонецПроцедуры

Процедура ПослеУстановкиСоединенияВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения, Истина);
		Возврат;
	КонецЕсли;
	
	// Необходима расширенная аутентификация.
	
	Сессия = ДеСериализованныеДанные(ПараметрыВызова[3]).Сессия;
	СессияСтрокой = СериализованныеДанные(Сессия);
	ДополнительныеПараметры.Вставить("Сессия", Сессия);
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиПароляПоSMSВК", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуОтправкиПароляПоSMSВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовОтправитьПарольРасширеннойАутентификацииПоSMS(
		Оповещение, СессияСтрокой);
	
КонецПроцедуры

Процедура ПослеОтправкиПароляПоSMSВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаОдноразовогоПароляВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("ИдентификаторСессии", ДополнительныеПараметры.Сессия.Идентификатор);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, ЭтотОбъект, , , , Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПослеВводаОдноразовогоПароляВК(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ОдноразовыйПароль = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения, Неопределено);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеРасширеннойАутентификации", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуРасширеннойАутентификации", ЭтотОбъект);
		
	ПараметрыАутентификации = Новый Структура;
	ПараметрыАутентификации.Вставить("Способ", "SMS");
	ПараметрыАутентификации.Вставить("Сессия", ДополнительныеПараметры.Сессия);
	ПараметрыАутентификации.Вставить("Пароль", ОдноразовыйПароль);
	
	ПараметрыАутентификацииСтрокой = СериализованныеДанные(ПараметрыАутентификации);
		
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовРасширеннаяАутентификация(
		Оповещение, ПараметрыАутентификацииСтрокой);
	
КонецПроцедуры

Процедура ПослеРасширеннойАутентификации(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения, Истина);
	
КонецПроцедуры

Процедура ОбработатьОшибкуРасширеннойАутентификации(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'Ошибка аутентификации по SMS.'");
	ВидОперации = НСтр("ru = 'Отправка одноразового пароля из SMS.'");
	
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиПароляПоSMSВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'Ошибка отправки одноразового пароля по SMS.'");
	ВидОперации = НСтр("ru = 'Отправка одноразового пароля в SMS.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ОбработатьОшибкуУстановкиСоединенияВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При установке соединения с банком произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Установка соединения с банком.'");
	
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиСоединения,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ПредъявитьДанныеАутентификацииПослеПолучения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатBase64", Результат.СертификатBase64);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьСоединениеПослеАутентификацииНаКлючеВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ВызватьАутентификациюНаЭлектронномКлючеВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, Результат.СертификатBase64, Результат.Пароль);
	
КонецПроцедуры

Процедура УстановитьСоединениеПослеАутентификацииНаКлючеВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата, Результат);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"ДополнитьСертификатПослеУстановкиСоединенияВК", ЭтотОбъект, ДополнительныеПараметры);
	
	УстановитьСоединениеВК(Обработчик, ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.СертификатBase64, ДополнительныеПараметры.ПараметрыСоединения);
	
КонецПроцедуры

Процедура ДополнитьСертификатПослеУстановкиСоединенияВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеДополненияКлючаВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуДополненияДанныхКлючаВК", ЭтотОбъект);
		
	// Сертификат необходимо дополнить для проверки подписи при тесте настроек
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовДополнитьДанныеКлючаЭП(
		Оповещение, ДополнительныеПараметры.СертификатBase64)
	
КонецПроцедуры

Процедура ПослеДополненияКлючаВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("СертификатBase64", РезультатВызова);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияДанныхКлючаВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеКлючаЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, РезультатВызова);
	
КонецПроцедуры

Процедура ПослеПолученияДанныхКлючаВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата, Результат);
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("СертификатBase64", ДополнительныеПараметры.СертификатBase64);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата, Результат);
	
КонецПроцедуры

Процедура ОбработатьОшибкуДополненияДанныхКлючаВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При работе с электронным ключем произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Дополнение данных ключа.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещенияПослеПолученияДанныхСертификата,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ПослеУстановкиПароляВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеАутентификацииВК, Истина);
	
КонецПроцедуры

Процедура ОбработатьОшибкуУстановкиПароляВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.СертификатСсылка) Тогда
		УдалитьПарольИзСеанса(ДополнительныеПараметры.СертификатСсылка);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = НСтр("ru = 'Ошибка установки пароля.'");
	ВидОперации = НСтр("ru = 'Установка пароля ключа.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеАутентификацииВК,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстОшибки);
		
КонецПроцедуры

Процедура ВыбратьКлючПослеПолученияХранилищКлючейЭП(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() > 1 Тогда
		СписокВыбора = Новый СписокЗначений;
		Для Каждого Элемент Из Результат Цикл
			СписокВыбора.Добавить(Элемент);
		КонецЦикла;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораКлючаВК", ЭтотОбъект, ДополнительныеПараметры);
		ЗаголовокВыбора = НСтр("ru = 'Выберите электронный ключ:'");
		СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОЗакрытии, ЗаголовокВыбора);
	Иначе
		ИдентификаторХранилища = Результат[0];
		ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
		ОбработчикПродолжения = Новый ОписаниеОповещения(
			"ПолучитьКлючиПослеУстановкиПинВК", ЭтотОбъект, ДополнительныеПараметры);
		УстановитьПинЕслиТребуетсяВК(
			ОбработчикПродолжения, ДополнительныеПараметры.ПодключаемыйМодуль, ИдентификаторХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораКлючаВК(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, Неопределено);
		Возврат;
	КонецЕсли;
	
	ИдентификаторХранилища = ВыбранныйЭлемент.Значение;
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	ОбработчикПродолжения = Новый ОписаниеОповещения(
		"ПолучитьКлючиПослеУстановкиПинВК", ЭтотОбъект, ДополнительныеПараметры);
	УстановитьПинЕслиТребуетсяВК(
		ОбработчикПродолжения, ДополнительныеПараметры.ПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура УстановитьПинЕслиТребуетсяВК(Обработчик, ПодключаемыйМодуль, ИдентификаторХранилища)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеУстановкиПин", Обработчик);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ОповещениеПослеПроверкиНеобходимостиPIN = Новый ОписаниеОповещения(
		"УстановитьПинПослеПроверкиНеобходимостиЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ПроверитьНеобходимостьУстановкиПинЧерезВК(
		ОповещениеПослеПроверкиНеобходимостиPIN, ПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура УстановитьПинПослеПроверкиНеобходимостиЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиПин, Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ОбработчикВводаPIN = Новый ОписаниеОповещения("ОбработатьВводPINВК", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторХранилища", ДополнительныеПараметры.ИдентификаторХранилища);
		ОткрытьФорму(
			"Обработка.ОбменСБанками.Форма.ЗапросPINКода", ПараметрыФормы, ЭтотОбъект, Истина , , , ОбработчикВводаPIN);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиПин, Истина); // не требуется пин
	КонецЕсли
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьУстановкиПинЧерезВК(Оповещение, ПодключаемыйМодуль, ИдентификаторХранилища)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПроверкиНеобходимостиПин", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	ОповещениеПослеПроверкиНеобходимостиPIN = Новый ОписаниеОповещения("ПослеПроверкиНеобходимостиПИНВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПроверкиНеобходимостиПИНВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовТребуетсяПин(ОповещениеПослеПроверкиНеобходимостиPIN, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПослеПроверкиНеобходимостиПИНВК(ТребуетсяПин, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиНеобходимостиПин, ТребуетсяПин);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПроверкиНеобходимостиПИНВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Проверка необходимости установки ПИН-кода.'");
	ТекстСообщения = НСтр("ru = 'При проверке необходимости ПИН-кода произошла ошибка.'");
	
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПроверкиНеобходимостиПин,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ОбработатьВводPINВК(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиПин, Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеУстановкиПинВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуУстановкиПинВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовУстановитьПин(
		Оповещение, ДополнительныеПараметры.ИдентификаторХранилища, Результат);

КонецПроцедуры

Процедура ОбработатьОшибкуУстановкиПинВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Установка PIN кода.'");
	ТекстСообщения = НСтр("ru = 'При установки PIN кода произошла ошибка.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеУстановкиПин,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ПослеУстановкиПинВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеУстановкиПин, Истина);
	
КонецПроцедуры

Процедура ПолучитьКлючиПослеУстановкиПинВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, Результат);
		Возврат;
	КонецЕсли;
	
	Если Не Результат Тогда // Пользователь отказался вводить пин-код
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, Неопределено);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения(
		"ПолучитьДанныеСертификатовПослеПолученияДвоичныхДанныхЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьДанныеСертификатовХранилищаВК(
		Обработчик, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПолучитьДанныеСертификатовПослеПолученияДвоичныхДанныхЧерезВК(СертификатыКлюча, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СертификатыКлюча) = Тип("Строка") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, СертификатыКлюча);
		Возврат;
	КонецЕсли;
	
	ДанныеСертификатов = Новый Массив;
	ДополнительныеПараметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	ДополнительныеПараметры.Вставить("СертификатыКлюча", СертификатыКлюча);
	ПолучитьДанныеСертификатовРекурсивноВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьДанныеСертификатовРекурсивноВК(ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.СертификатыКлюча.Количество() Тогда // закончен перебор массива
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, ДополнительныеПараметры.ДанныеСертификатов);
		Возврат;
	КонецЕсли;
	
	СертификатВК = ДополнительныеПараметры.СертификатыКлюча[0];
	Если ТипЗнч(СертификатВК) = Тип("ДвоичныеДанные") Тогда
		СертификатВК = Base64Строка(СертификатВК);
	КонецЕсли;
	ДополнительныеПараметры.СертификатыКлюча.Удалить(0);
	ДополнительныеПараметры.Вставить("СертификатBase64", СертификатВК);
	
	Обработчик = Новый ОписаниеОповещения(
		"ДобавитьСертификатВМассивПослеПолученияДанныхЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПолучитьДанныеКлючаЧерезВК(Обработчик, ДополнительныеПараметры.ПодключаемыйМодуль, СертификатВК);
	
КонецПроцедуры

Процедура ДобавитьСертификатВМассивПослеПолученияДанныхЧерезВК(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДанныеСертификата) = Тип("Структура") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияКлючей, ДанныеСертификата);
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = Новый Структура;
	СтруктураСертификата.Вставить("СертификатBase64", ДополнительныеПараметры.СертификатBase64);
	СтруктураСертификата.Вставить("ДанныеСертификата", ДанныеСертификата);
	СтруктураСертификата.Вставить("ИдентификаторХранилища",ДанныеСертификата.ИдентификаторХранилища);
	ДополнительныеПараметры.ДанныеСертификатов.Добавить(СтруктураСертификата);
	
	ПолучитьДанныеСертификатовРекурсивноВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПоказатьВыборПослеПолученияКлючейВК(ДанныеСертификатов, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДанныеСертификатов) = Тип("Массив") Тогда // произошла ошибка или пользователь нажал Отмена.
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПослеПолученияДанныхАутентификации, ДанныеСертификатов);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеВыбораСертификатаВК", ЭтотОбъект, ДополнительныеПараметры);
	ВыбратьКлючВК(Обработчик, ДополнительныеПараметры.ПодключаемыйМодуль, ДанныеСертификатов);
	
КонецПроцедуры

Процедура ВыбратьКлючВК(Обработчик, ПодключаемыйМодуль, ДанныеСертификатов)
	
	ДанныеВыбора = Новый Соответствие;
		
	Для Каждого Элемент Из ДанныеСертификатов Цикл
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("СертификатBase64", Элемент.СертификатBase64);
		СтруктураСертификата.Вставить("Псевдоним", Элемент.ДанныеСертификата.Псевдоним);
		ДанныеВыбора.Вставить(Элемент.ДанныеСертификата.Отпечаток, СтруктураСертификата);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ДанныеВыбора", ДанныеВыбора);
	ОткрытьФорму("Обработка.ОбменСБанками.Форма.ВыборСертификатаДляДобавления", ПараметрыФормы, ЭтотОбъект, , , ,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ПослеПолученияДанныхСертификатаВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеСертификата = ДеСериализованныеДанные(РезультатВызова);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификатаВК, ДанныеСертификата);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияДанныхСертификатаВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Получение данных ключа ЭП.'");
	ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении данных ключа ЭП.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхСертификатаВК,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);

КонецПроцедуры

Процедура ПослеВыбораСертификатаВК(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхАутентификации, ДанныеВыбора);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СертификатBase64", ДанныеВыбора.СертификатBase64);
	СтруктураВозврата.Вставить("Пароль", ДанныеВыбора.Пароль);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияДанныхАутентификации, СтруктураВозврата);
	
КонецПроцедуры

Процедура ПолучитьДанныеСертификатовХранилищаВК(Обработчик, ПодключаемыйМодуль, ИдентификаторХранилища)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияСертификатовХранилища", Обработчик);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПолученияКлючейЭПВК", ЭтотОбъект, ДополнительныеПараметры, "ОбработатьОшибкуПолученияКлючейВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовКлючиЭП(Оповещение, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ПослеПолученияКлючейЭПВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	МассивДвоичныхДанныхСертификатов = ДеСериализованныеДанные(РезультатВызова);
	
	Если НЕ МассивДвоичныхДанныхСертификатов.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствуют сертификаты на банковском ключе'");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПолученияСертификатовХранилища, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивСертификатовBase64 = Новый Массив;
	
	Для Каждого Элемент Из МассивДвоичныхДанныхСертификатов Цикл
		МассивСертификатовBase64.Добавить(Base64Строка(Элемент));
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияСертификатовХранилища, МассивСертификатовBase64);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияКлючейВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Получение ключей'");
	ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении ключей.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеПолученияСертификатовХранилища,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ПослеИнициализацииВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииВК, Истина);
	
КонецПроцедуры

Процедура ОбработатьОшибкуИнициализацииВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При инициализации внешнего модуля произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Инициализация внешней компоненты.'");
	ПолучитьИнформациюОбОшибкеВК(ДополнительныеПараметры.ОповещениеПослеИнициализацииВК,
		ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
		
КонецПроцедуры

Процедура ПослеВводаОдноразовогоПароляСессияЧерезДопОбработку(Пароль, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОдноразовогоПароля, Ложь);
		Возврат;
	КонецЕсли;
	
	ДанныеРасширеннойАутентификации = Новый Структура("Способ, Сессия, Пароль");
	ДанныеРасширеннойАутентификации.Способ = "SMS";
	ДанныеРасширеннойАутентификации.Сессия = ДополнительныеПараметры.Сессия;
	ДанныеРасширеннойАутентификации.Пароль = Пароль;

	Попытка
		ДополнительныеПараметры.ВнешнийПодключаемыйМодуль.РасширеннаяАутентификация(
			ДополнительныеПараметры.Сертификат, ДанныеРасширеннойАутентификации);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОдноразовогоПароля, Истина);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка SMS аутентификации.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ДополнительныеПараметры.ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'SMS аутентификация'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеОтправкиОдноразовогоПароля, Ложь);
	КонецПопытки;
	
КонецПроцедуры

// Предлагает пользователю выбрать хранилище и получает список ключей из хранилища (асинхронно).
//
// Параметры:
//  Оповещение - ОписаниеОповещения - вызывается после выполнения метода
//      * Результат - Массив - данные ключей. В элементах содержится структура с элементами:
//                       * СертификатBase64 - Строка - данные сертификата в Base64;
//                       * ДанныеСертификата - Структура - содержит информацию о сертификате:
//                            ** Псевдоним - Строка - псевдоним ключа ЭП;
//                            ** Отпечаток - Строка - уникальный идентификатор ключа ЭП;
//                            ** СерийныйНомер - Строка - серийный номер ключа в hex;
//                            ** ИмяИздателя - Строка - имя издателя сертификата.
//                  - Строка - текст ошибки
//                  - Неопределено - пользователь отказался от продолжать операцию.
//      * ДополнительныеПараметры - контекст вызова.
//  ПодключаемыйМодуль - значение, которое было указано при создании объекта ОписаниеОповещения;
//  ИдентификаторХранилища - Строка - хранилище из которого будут получены сертификаты.
//
Процедура ПолучитьСертификатыИзХранилищаВК(Оповещение, ПодключаемыйМодуль, ИдентификаторХранилища = Неопределено)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияКлючей", Оповещение);
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	ДополнительныеПараметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ОповещениеПослеПолученияХранилищКлючей = Новый ОписаниеОповещения(
		"ВыбратьКлючПослеПолученияХранилищКлючейЭП", ЭтотОбъект, ДополнительныеПараметры);
			
	ОбеспечитьПодключениеЭлектронногоКлючаЧерезВК(ОповещениеПослеПолученияХранилищКлючей, ПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ВойтиНаАппаратноеУстройствоПослеПодключенияЧерезВК(Результат, ДополнительныеПараметры) Экспорт

	Если Не ТипЗнч(Результат) = Тип("Массив") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Результат);
		Возврат;
	КонецЕсли;

	ИдентификаторХранилища = Результат.Получить(0);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьПодписиПослеВходаНаАппаратноеУстройствоЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	УстановитьПинЕслиТребуетсяВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

Процедура ОбеспечитьПодключениеАппаратногоУстройстваПослеИнициализацииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Результат);
		Возврат;
	КонецЕсли;

	ПодключаемыйМодуль = Результат;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения("ВойтиНаАппаратноеУстройствоПослеПодключенияЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбеспечитьПодключениеЭлектронногоКлючаЧерезВК(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

Процедура ПроверитьОчереднуюПодписьЧерезВК(ДополнительныеПараметры)
	
	КоличествоПроверенныхПодписей = ДополнительныеПараметры.РезультатыПроверкиПодписей.Количество();
	Если КоличествоПроверенныхПодписей >= ДополнительныеПараметры.Подписи.Количество() Тогда
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ДополнительныеПараметры.СообщениеОбмена, ДополнительныеПараметры.РезультатыПроверкиПодписей);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Истина);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиПодписиЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ТекущиеДанныеПодписи = ДополнительныеПараметры.Подписи.Получить(КоличествоПроверенныхПодписей);
	
	ПодписьСтрокой = Base64Строка(ТекущиеДанныеПодписи.Подпись);
	Если ТипЗнч(ТекущиеДанныеПодписи.Сертификат) = Тип("Строка") Тогда
		СертификатСтрокой = ТекущиеДанныеПодписи.Сертификат;
	Иначе
		СертификатСтрокой = Base64Строка(ТекущиеДанныеПодписи.Сертификат);
	КонецЕсли;
	ПроверитьПодписьЧерезВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры.ДанныеBase64,
		СертификатСтрокой, ПодписьСтрокой);
	
КонецПроцедуры

Процедура ПроверитьПодписиПослеВходаНаАппаратноеУстройствоЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // произошла ошибка
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Результат);
		Возврат;
	КонецЕсли;
	
	Если Не Результат Тогда // Пользователь отказался вводить пин-код
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроверкиПодписей = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСодержимогоСообщенияОбмена(
		ДополнительныеПараметры.СообщениеОбмена);
	
	Если ДанныеДляПроверкиПодписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ДанныеBase64", Base64Строка(ДанныеДляПроверкиПодписей.ДанныеЭД));
	
	ДополнительныеПараметры.Вставить("РезультатыПроверкиПодписей", Новый Массив);
	ДополнительныеПараметры.Вставить("Подписи", ДанныеДляПроверкиПодписей.Подписи);
	
	ПроверитьОчереднуюПодписьЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиПодписиЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеПроверкиПодписей, Результат);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ДатаПроверкиПодписи", ОбщегоНазначенияКлиент.ДатаСеанса());
	СтруктураЗаписи.Вставить("ПодписьВерна", Результат);
	ДополнительныеПараметры.РезультатыПроверкиПодписей.Добавить(СтруктураЗаписи);
	ПроверитьОчереднуюПодписьЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеНачалаПодтвержденияПлатежногоПорученияЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодтвержденияПлатежа = ДеСериализованныеДанные(РезультатВызова);
	ДополнительныеПараметры.Вставить("ИдентификаторСессии", ПараметрыПодтвержденияПлатежа.Сессия.Идентификатор);
	СессияСтрокой = СериализованныеДанные(ПараметрыПодтвержденияПлатежа.Сессия);
	ДополнительныеПараметры.Вставить("Сессия", СессияСтрокой);
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиКодаПодтвержденияПоSMSЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуОтправкиКодаПодтвержденияЧерезВК", ЭтотОбъект);
	
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовОтправитьКодПодтвержденияПоSMS(Оповещение, СессияСтрокой);
	
КонецПроцедуры

Процедура ОбработатьОшибкуОтправкиКодаПодтвержденияЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При отправке кода подтверждения через SMS произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Отправка кода подтверждения платежного поручения.'");
	Оповещение = Новый ОписаниеОповещения("СообщитьОшибкуПользователюЧерезВК", ЭтотОбъект);
	
	ПолучитьИнформациюОбОшибкеВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
	
КонецПроцедуры

Процедура ПослеОтправкиКодаПодтвержденияПоSMSЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторСессии", ДополнительныеПараметры.ИдентификаторСессии);
	ПараметрыФормы.Вставить("СообщениеОбмена", ДополнительныеПараметры.СообщениеОбмена);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодтвердитьПлатежноеПоручениеПослеВводаПароляЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ОбменСБанками.Форма.ПодтверждениеПлатежныхПорученийПоSMS", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПодтвердитьПлатежноеПоручениеПослеВводаПароляЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПодтвердитьПлатежныеДокументыЧерезВК(ДополнительныеПараметры.ПодключаемыйМодуль,
			ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.МассивСообщенийОбмена);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияПлатежногоПорученияЧерезВК", ЭтотОбъект,
		ДополнительныеПараметры, "ОбработатьОшибкуПодтвержденияПлатежногоПорученияЧерезВК", ЭтотОбъект);
	ДополнительныеПараметры.ПодключаемыйМодуль.НачатьВызовПодтвердитьПлатежноеПоручение(
		Оповещение, ДополнительныеПараметры.Сессия, Результат);
		
КонецПроцедуры

Процедура ОбработатьОшибкуНачалаПодтвержденияПлатежногоПорученияЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При инициализации подтверждения платежного поручения произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Инициализация подтверждения платежного поручения.'");
	Оповещение = Новый ОписаниеОповещения("СообщитьОшибкуПользователюЧерезВК", ЭтотОбъект);
	
	ПолучитьИнформациюОбОшибкеВК(
		Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
		
	ПодтвердитьПлатежныеДокументыЧерезВК(ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.МассивСообщенийОбмена);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПодтвержденияПлатежногоПорученияЧерезВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При подтверждении платежного поручения произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Подтверждение платежного поручения.'");
	Оповещение = Новый ОписаниеОповещения("СообщитьОшибкуПользователюЧерезВК", ЭтотОбъект);
	
	ПолучитьИнформациюОбОшибкеВК(Оповещение, ДополнительныеПараметры.ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
		
	ПодтвердитьПлатежныеДокументыЧерезВК(ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.МассивСообщенийОбмена);
		
КонецПроцедуры

Процедура СообщитьОшибкуПользователюЧерезВК(ТекстСообщения, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Процедура ПослеПодтвержденияПлатежногоПорученияЧерезВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	СтатусПринят = ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Принят");
	СтруктураРеквизитов = Новый Структура("Статус", СтатусПринят);
	ОбменСБанкамиСлужебныйВызовСервера.ИзменитьСообщениеОбмена(
		ДополнительныеПараметры.СообщениеОбмена, СтруктураРеквизитов);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Платеж подтвержден'"), , , БиблиотекаКартинок.Успешно32);
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПодтвердитьПлатежныеДокументыЧерезВК(ДополнительныеПараметры.ПодключаемыйМодуль,
		ДополнительныеПараметры.Оповещение, ДополнительныеПараметры.МассивСообщенийОбмена);
	
КонецПроцедуры

Процедура НачатьПодтверждениеПлатежныхДокументовПоSMSПослеПолученияНовыхДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ВидОперации = НСтр("ru = 'Получение новых документов из банка.'");
		ОбработатьОшибку(ВидОперации, Результат.Результат, Результат.Результат, ДополнительныеПараметры.НастройкаОбмена);
		ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьОтправкуДокументовПоНастройкамиПослеПодтвержденияДокументовЧерезВК",
		ЭтотОбъект, ДополнительныеПараметры);
	МассивСообщенийОбмена = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбменаТребующиеПодтверждения(
		ДополнительныеПараметры.МассивСообщенийОбмена);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбмена, ДополнительныеПараметры.МассивСообщенийТребующихПодтверждение);
		
	ПодтвердитьПлатежныеДокументыЧерезВК(ДополнительныеПараметры.ПодключаемыйМодуль, Оповещение, МассивСообщенийОбмена);

КонецПроцедуры

Процедура ПродолжитьОтправкуДокументовПоНастройкамиПослеПодтвержденияДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	ОтправитьРекурсивноСообщенияОбменаПоНастройкамЧерезВК(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", СсылкаНаОбъект = Неопределено)
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		ВидОперации, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками", СсылкаНаОбъект);
	
КонецПроцедуры


#КонецОбласти
