#Область ПрограммныйИнтерфейс

#Область ЭтапыРаботыСКандидатами

// Возвращает таблицу с данными по этапу работу с кандидатами.
//
// Параметры:
//	Кандидаты				- Массив - ссылки на элементы справочника Кандидаты.
//	ЭтапРаботы				- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, содержащая поля:
//		* Кандидат			- СправочникСсылка.Кандидаты - кандидат, приглашенный на этап.
//		* ЭтапРаботы		- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//		* Бронь				- ДокументСсылка.Бронь - документ бронирующий помещение для проводимого этапа.
//		* Помещение			- СправочникСсылка.ТерриторииИПомещения - помещение, в котором будет проходить этап.
//		* Период			- Дата - дата и время начала проведения этапа.
//		* ПериодОкончание	- Дата - дата и время окончания проведения этапа.
//
Функция ДанныеЭтапаРаботыСКандидатами(Кандидаты, ЭтапРаботы) Экспорт
	
	Запрос = ЗапросДанныеЭтапаРаботыСКандидатами(Новый МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы);
	ДанныеЭтапаРаботы = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеЭтапаРаботы;
	
КонецФункции

// Формирует временную таблицу ВТДанныеЭтапаРаботы содержащую поля:
//		* Кандидат			- СправочникСсылка.Кандидаты - кандидат, приглашенный на этап.
//		* ЭтапРаботы		- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//		* Бронь				- ДокументСсылка.Бронь - документ бронирующий помещение для проводимого этапа.
//		* Помещение			- СправочникСсылка.ТерриторииИПомещения - помещение, в котором будет проходить этап.
//		* Период			- Дата - дата и время начала проведения этапа.
//		* ПериодОкончание	- Дата - дата и время окончания проведения этапа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет сформирована временная таблица.
//	Кандидаты				- Массив - ссылки на элементы справочника Кандидаты.
//	ЭтапРаботы				- СправочникСсылка.ЭтапыРаботыСКандидатами - этап, по которому запрашиваются данные.
//
Процедура СоздатьВТДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы) Экспорт
	
	Запрос = ЗапросДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы);
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТДанныеЭтапаРаботы");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу откликов кандидатов на указанную вакансию.
//
//
Функция ОткликиКандидатов(ОтборВакансий, ТолькоНеРассмотренные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Справочники.Вакансии.СоздатьВТВакансииПоОтбору(Запрос.МенеджерВременныхТаблиц, ОтборВакансий);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОткликиКандидатов.Вакансия КАК Вакансия,
		|	ОткликиКандидатов.НомерОтклика КАК НомерОтклика,
		|	ОткликиКандидатов.Фамилия,
		|	ОткликиКандидатов.Имя,
		|	ОткликиКандидатов.Отчество,
		|	ОткликиКандидатов.ДатаРождения,
		|	ОткликиКандидатов.Адрес,
		|	ОткликиКандидатов.Телефон,
		|	ОткликиКандидатов.EMail,
		|	ОткликиКандидатов.Сообщение,
		|	ОткликиКандидатов.ФайлРезюме,
		|	ОткликиКандидатов.Источник,
		|	ОткликиКандидатов.ДатаОтклика,
		|	ОткликиКандидатов.Рассмотрено
		|ИЗ
		|	РегистрСведений.ОткликиКандидатов КАК ОткликиКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВакансииПоОтбору КАК ВакансииПоОтбору
		|		ПО (ВакансииПоОтбору.Вакансия = ОткликиКандидатов.Вакансия)
		|			И (ОткликиКандидатов.Рассмотрено = ЛОЖЬ
		|				ИЛИ &ТолькоНеРассмотренные <> ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вакансия,
		|	НомерОтклика";
		
	Запрос.УстановитьПараметр("ТолькоНеРассмотренные", ТолькоНеРассмотренные);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Для указанных откликов кандидатов устанавливает отметку о том, что отклик рассмотрен.
//
// Параметры 
//	- ОткликиКандидатов - таблица значений, см. ПустаяТаблицаОткликиКандидатов.
//
Процедура УстановитьОткликамКандидатовОтметкуРассмотрено(ОткликиКандидатов) Экспорт
	
	Для Каждого Отклик Из ОткликиКандидатов Цикл
		МенеджерЗаписи = РегистрыСведений.ОткликиКандидатов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Вакансия = Отклик.Вакансия;
		МенеджерЗаписи.НомерОтклика = Отклик.НомерОтклика;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Рассмотрено Тогда
			МенеджерЗаписи.Рассмотрено = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаОткликиКандидатов() Экспорт
	
	ОткликиКандидатов = Новый ТаблицаЗначений;
	ОткликиКандидатов.Колонки.Добавить("Вакансия", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	ОткликиКандидатов.Колонки.Добавить("НомерОтклика", Новый ОписаниеТипов("Число"));
	
	Возврат ОткликиКандидатов;
	
КонецФункции

// Выбирает причину отклонения кандидата, используемую по умолчанию.
//
Функция ПричинаОтклоненияКандидатаПоУмолчанию() Экспорт
	
	Возврат ПодборПерсоналаПовтИсп.ПричинаОтклоненияКандидатаПоУмолчанию();
	
КонецФункции

Процедура УстановитьРешениеПоКандидатам(Кандидаты, РезультатВыбора) Экспорт
	
	// Все сопряженные действия выполняем целостно.
	НачатьТранзакцию();
	
	ДеталиРешения = РезультатВыбора.Решение;
	
	// Устанавливаем решение выбранным кандидатам.
	ПараметрыРешения = Справочники.Кандидаты.ДополнительныеПараметрыРешенияПоКандидату();
	ПараметрыРешения.КомментарийРешения = ДеталиРешения.Комментарий;
	ПараметрыРешения.ПричинаОтклонения = ДеталиРешения.Причина;
	Для Каждого Кандидат Из Кандидаты Цикл
		Справочники.Кандидаты.УстановитьРешениеПоКандидату(Кандидат, ДеталиРешения.Решение, ДеталиРешения.ДатаРешения, ПараметрыРешения);
	КонецЦикла;
	
	// Если указано — закрываем вакансию.
	Если РезультатВыбора.Вакансия.ЗакрыватьВакансию = Истина Тогда
		Вакансии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатВыбора.Вакансия.Вакансия);
		Справочники.Вакансии.ЗакрытьВакансии(Вакансии, РезультатВыбора.Вакансия.Дата);
	КонецЕсли;
	
	// Если указано — отклоняем других кандидатов.
	Если РезультатВыбора.ДругиеКандидаты.Отклонять = Истина Тогда
		Для Каждого СтрокаКоллекции Из РезультатВыбора.ДругиеКандидаты.Кандидаты Цикл
			ПараметрыРешения = Справочники.Кандидаты.ДополнительныеПараметрыРешенияПоКандидату();
			ПараметрыРешения.ПричинаОтклонения = СтрокаКоллекции.ПричинаОтклонения;
			Справочники.Кандидаты.УстановитьРешениеПоКандидату(
				СтрокаКоллекции.Кандидат, Перечисления.СостоянияСогласования.Отклонено, РезультатВыбора.ДругиеКандидаты.Дата, ПараметрыРешения);
		КонецЦикла;
	КонецЕсли;
	
	Отказ = Ложь;
	Если РезультатВыбора.ПисьмоОдобрение.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.ПисьмоОдобрение.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.ПисьмоОдобрение.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	Если РезультатВыбора.СообщениеSMSОдобрение.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.СообщениеSMSОдобрение.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.СообщениеSMSОдобрение.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	Если РезультатВыбора.ПисьмоОтказ.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.ПисьмоОтказ.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.ПисьмоОтказ.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	Если РезультатВыбора.СообщениеSMSОтказ.Написать = Истина Тогда
		Для Каждого Получатель Из РезультатВыбора.СообщениеSMSОтказ.Получатели Цикл
			СформироватьСообщениеИОтправить(РезультатВыбора.СообщениеSMSОтказ.Шаблон, Получатель, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьВакансииКандидатов(Кандидаты, РезультатВыбора.Вакансии);
	
КонецПроцедуры

// Синхронизирует наименования кандидатов при смене ФИО физического лица.
//
Процедура ИзменитьНаименованиеКандидатов(МенеджерВременныхТаблиц) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	ФИОФизЛицПоследнее.Фамилия,
		|	ФИОФизЛицПоследнее.Имя,
		|	ФИОФизЛицПоследнее.Отчество,
		|	Кандидаты.УточнениеНаименования,
		|	Кандидаты.Наименование КАК НаименованиеКандидата,
		|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименованияФизЛица
		|ИЗ
		|	ВТФИОФизЛицПоследнее КАК ФИОФизЛицПоследнее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО Кандидаты.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|		ПО ФИОФизЛицПоследнее.ФизическоеЛицо = Кандидаты.ФизическоеЛицо";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.НаименованиеКандидата);
		НаименованиеКандидата = СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
		
		ПолноеНаименованиеКандидата = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Выборка.Фамилия,
				Выборка.Имя,
				Выборка.Отчество,
				Выборка.УточнениеНаименованияФизЛица,
				Выборка.УточнениеНаименования);
		
		Если СокрЛП(НаименованиеКандидата) = ПолноеНаименованиеКандидата Тогда
			Продолжить;
		КонецЕсли;
		
		КандидатОбъект = Выборка.Кандидат.ПолучитьОбъект();
		
		Попытка 
			КандидатОбъект.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить имя кандидата %1.
				|Возможно, данные кандидата редактируются другим пользователем'"),
				КандидатОбъект.Наименование);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		КандидатОбъект.Наименование = ПолноеНаименованиеКандидата;
		КандидатОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с параметрами для метода СоздатьВТПричиныОтклонений.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//			Кандидат - ссылка на кандидата
//			ФизическоеЛицо - ссылка на физическое лицо
//			ПричинаОтклонения - Справочника.ПричиныОтклоненияКандидатов - Причина отклонения кандидата по мнению HR
//			ДатаРешения - Дата, на которую зарегистрирована причина отклонения кандидата
//			КомментарийРешения - Строка - комментарий решения к причине отклонения
//			Вакансия - ссылка на вакансию кандидата
//		ИмяВременнойТаблицы - имя временной таблицы - "фильтра".
//		ПоляСвязиТаблиц - Структура с именами полей для связи таблиц, где
//			Ключ - имя поля таблицы "Кандидаты".
//			Значение - имя поля временной таблицы.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицы - имя временной таблицы - "фильтра".
//			ПоляСвязиТаблиц - Структура, см. ПоляСвязиТаблиц.
//			ИмяВТПричиныОтклонений - имя результирующей временной таблицы.
//
Функция ОписательВременныхТаблицДляСоздатьВТПричиныОтклонений(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ПоляСвязиТаблиц = Неопределено) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Если ПоляСвязиТаблиц = Неопределено Тогда
		ПоляСвязиТаблиц = Новый Структура("ФизическоеЛицо", "ФизическоеЛицо");
	КонецЕсли;
	ОписательВременныхТаблиц.Вставить("ПоляСвязиТаблиц", ПоляСвязиТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТПричиныОтклонений", "ВТПричиныОтклонений");
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТПричиныОтклонений, содержащую причины отклонения кандидатов.
//
// Параметры:
//		ОписательВременныхТаблиц - см. описание ОписательВременныхТаблицДляСоздатьВТПричиныОтклонений
//		ТолькоРазрешенные - Истина, если требуется выбрать только разрешенные данные.
//
Процедура СоздатьВТПричиныОтклонений(ОписательВременныхТаблиц, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	МетаданныеСправочника = Метаданные.Справочники.Кандидаты;
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника, ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника);
	КонецЕсли;
	
	Если ЕстьПравоЧтения Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	Кандидаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Кандидаты.ПричинаОтклонения КАК ПричинаОтклонения,
		|	Кандидаты.ДатаРешения КАК ДатаРешения,
		|	Кандидаты.КомментарийРешения КАК КомментарийРешения,
		|	Кандидаты.Вакансия КАК Вакансия
		|ПОМЕСТИТЬ ВТПричиныОтклонений
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПричиныОтклонений", ОписательВременныхТаблиц.ИмяВТПричиныОтклонений);
		
		ПервоеПоле = Истина;
		Для каждого ПолеСвязи Из ОписательВременныхТаблиц.ПоляСвязиТаблиц Цикл
			Если ПервоеПоле Тогда
				ПервоеПоле = Ложь;
				Запрос.Текст = Запрос.Текст + "
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
				|		ПО &Параметр1 = &Параметр2";
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ОписательВременныхТаблиц.ИмяВременнойТаблицы);
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|		И &Параметр1 = &Параметр2";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр1", "Кандидаты." + ПолеСвязи.Ключ);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр2", "ФизическиеЛица" + "." + ПолеСвязи.Значение);
		КонецЦикла;
		Если Не ТолькоРазрешенные Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Кандидаты.ПричинаОтклонения <> ЗНАЧЕНИЕ(Справочник.ПричиныОтклоненияКандидатов.ПустаяСсылка)";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Кандидаты.ПустаяСсылка) КАК Кандидат,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ПричиныОтклоненияКандидатов.ПустаяСсылка) КАК ПричинаОтклонения,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаРешения,
		|	"""" КАК КомментарийРешения,
		|	ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка) КАК Вакансия
		|ПОМЕСТИТЬ ВТПричиныОтклонений";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УстановитьСостояниеЭтапаРаботыКандидата(Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.РаботаСКандидатами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Кандидат = Кандидат;
	
	Если ЗначениеЗаполнено(ПрежниеДанныеЭтапа.Период) Тогда
		МенеджерЗаписи.Период = ПрежниеДанныеЭтапа.Период;
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтапРаботы.Период) Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи.Период = ЭтапРаботы.Период;
	МенеджерЗаписи.ЭтапРаботы = ЭтапРаботы.Этап;
	МенеджерЗаписи.СостояниеЭтапа = ЭтапРаботы.Состояние;
	МенеджерЗаписи.Комментарий = ЭтапРаботы.Комментарий;
	МенеджерЗаписи.ШаблонАнкеты = ЭтапРаботы.ШаблонАнкеты;
	
	Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		
		МенеджерЗаписи.ПериодОкончание = ЭтапРаботы.ПериодОкончание;
		МенеджерЗаписи.Бронь = ЭтапРаботы.Бронь;
		
	Иначе
		
		Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
			МенеджерЗаписи.Бронь = ПрежниеДанныеЭтапа.Бронь;
		Иначе
			МенеджерЗаписи.Бронь = Неопределено;
		КонецЕсли;
		
		МенеджерЗаписи.ПериодОкончание = Неопределено;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	ОбновитьТекущийЭтапРаботыКандидата(Кандидат);
	
КонецПроцедуры

Функция ОписаниеОткликаНаВакансию() Экспорт
	
	Описание = Новый Структура(
		"Фамилия, 
		|Имя, 
		|Отчество, 
		|ДатаРождения, 
		|Адрес, 
		|Телефон, 
		|EMail, 
		|Сообщение, 
		|ФайлРезюме, 
		|Источник, 
		|ДатаОтклика, 
		|ИдентификаторРезюме, 
		|АдресРезюме");
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьОткликНаВакансию(Вакансия, ОписаниеОтклика, НомерОтклика = Неопределено) Экспорт
	
	Если НомерОтклика = Неопределено Тогда
		НомерОтклика = РегистрыСведений.ОткликиКандидатов.НомерПоследнегоОтклика(Вакансия) + 1;
	КонецЕсли;
	
	ОткликЗапись = РегистрыСведений.ОткликиКандидатов.СоздатьМенеджерЗаписи();
	ОткликЗапись.Вакансия = Вакансия;
	ОткликЗапись.НомерОтклика = НомерОтклика;
	ЗаполнитьЗначенияСвойств(ОткликЗапись, ОписаниеОтклика);
	ОткликЗапись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ПодборПерсонала";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("8ff2b10d-ae8f-4065-984f-a3a9113f001e");
	Раздел.Представление = НСтр("ru = 'Подбор персонала'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка.Организации"));

КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаПодборПерсонала", "ПланируемаяДатаЗакрытия", "ПодборПерсонала", "Подразделение.Источник");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РасходыНаИсточникИнформацииОКандидатах", "НачалоПериодаОказанияУслуги", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОплатаПубликацийВакансий", "НачалоПериодаОказанияУслуги", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасходыНаИсточникиИнформацииОКандидатах", "Период", "ПодборПерсонала", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.Кандидаты";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Наименование,ДатаРегистрации,Резюме,Рейтинг,ОжидаемыйДоход,ДатаРешения,КомментарийРешения,ПричинаОтклонения,Состояние";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт 

	ОписаниеПрофиля = ОписаниеПрофиляМенеджерПоНаборуПерсонала();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

	ОписаниеПрофиля = ОписаниеПрофиляСтаршийМенеджерПоНаборуПерсонала();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Функция ОписаниеПрофиляМенеджерПоНаборуПерсонала()
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляМенеджерПоНаборуПерсонала();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер по набору персонала'");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	
	// Роли для доступа к функциональности других подсистем.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОбОбразованииФизическихЛиц");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрейдов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхНачислений");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМероприятийАдаптацииУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРешенийПоКадровымИзменениям", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "КонтрольИсполненияМероприятийАдаптацииУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаписейРабочегоКалендаряСотрудников" ,"ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь");
	
	// Роли на общие объекты КОРП из подсистемы «характеристики персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДействийСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеХарактеристикПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомпетенцийПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "УправлениеМероприятиемОценкиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала");
	
	// Роли подсистемы «Подбор персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрофилейДолжности", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрофилейДолжности", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВакансий", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВакансий", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаПодборПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРасходовНаИсточникиИнформацииОКандидатах", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомментариевКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");	
	
	// Роли подсистемы «Электронное интервью».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	
	// Роли подсистемы «Анализ текучести персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеТекучестиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПричинУвольненияСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	
	// Роли подсистемы «Чатботы».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийЧатовЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВакансийЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Бронирование помещений».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБронированияПомещений", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений");
	
	// Анкетирование.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШаблоновАнкет", "СтандартныеПодсистемы.Анкетирование");
	
	// Взаимодействия.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВзаимодействий", "СтандартныеПодсистемы.Взаимодействия");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	ОписаниеПрофиля.ВидыДоступа.Добавить("СтруктураПредприятия");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ОписаниеПрофиляСтаршийМенеджерПоНаборуПерсонала()
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший менеджер по набору персонала'");
	
	ЗарплатаКадрыРасширенный.ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляМенеджерПоНаборуПерсонала());
	
	// Роли для доступа к функциональности других подсистем.
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШтатногоРасписания");
	
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШаблоновСообщений");
	
	// Роли подсистемы «Подбор персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВакансииКандидата", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПодбораПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРасходовНаИсточникиИнформацииОКандидатах", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Электронное интервью».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаЭлектронногоИнтервью", "ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью");
	
	// Роли подсистемы «Анализ текучести персонала».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСоставаПричинУвольнения", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеТекучестиПерсонала", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПричинУвольненияСотрудников", "ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала");
	
	// Роли подсистемы «Чатботы».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы");
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВакансийЧатботов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	
	// Роли подсистемы «Бронирование помещений».
	ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеТерриторийИПомещений", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	ОписаниеПрофиля.ВидыДоступа.Добавить("СтруктураПредприятия");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляМенеджерПоНаборуПерсонала() Экспорт 
	
	Возврат "31f07ebf-8960-4839-b4f3-36dbab7dc653";
	
КонецФункции

Функция ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала() Экспорт 
	
	Возврат "9ebace86-f46b-4b17-83e7-7ad23d437ec1";
	
КонецФункции

Процедура ДополнитьОписаниеПрофиляДоступомКИнтерфейсу(ОписаниеПрофиля) Экспорт
	
	ИдентификаторыПрофилей = Новый Массив;
	ИдентификаторыПрофилей.Добавить(ИдентификаторПрофиляМенеджерПоНаборуПерсонала());
	ИдентификаторыПрофилей.Добавить(ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала());
	ИдентификаторыПрофилей.Добавить(ИнструментыРуководителя.ИдентификаторПрофиляРуководительПодразделения());
	
	Если ИдентификаторыПрофилей.Найти(ОписаниеПрофиля.Идентификатор) <> Неопределено Тогда
		ОписаниеПрофиля.Роли.Добавить("ПодсистемаПодборПерсонала");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.Вакансии);
	СписокОбъектов.Добавить(Справочники.Кандидаты);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаПодборПерсонала);
	СписокОбъектов.Добавить(Документы.РасходыНаИсточникИнформацииОКандидатах);
	
КонецПроцедуры

Процедура ДополнитьДанныеПозицииШтатногоРасписания(ДанныеПозиции, ПозицияШтатногоРасписания) Экспорт
	
	ДанныеПозиции.Вставить("МестоВСтруктуреПредприятия");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатноеРасписание.Ссылка,
		|	МестоПозиции.Подразделение КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|		ПО (МестоПозиции.Позиция = ШтатноеРасписание.Ссылка)
		|			И (ШтатноеРасписание.Ссылка = &Позиция)");
		
	Запрос.УстановитьПараметр("Позиция", ПозицияШтатногоРасписания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеПозиции.МестоВСтруктуреПредприятия = Выборка.МестоВСтруктуреПредприятия;
	
КонецПроцедуры

Функция СклонениеКандидата(Кандидат, Падеж) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.ФИО КАК ФИО,
		|	ФизическиеЛица.Пол КАК Пол
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
		|		ПО (Кандидаты.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|			И (Кандидаты.Ссылка = &Кандидат)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СклонениеКандидата = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИО, 2, СклонениеКандидата, Выборка.Пол);
	ФамилияИнициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(СклонениеКандидата);
	
	Возврат ФамилияИнициалы;
	
КонецФункции

#Область ЭтапыРаботыСКандидатами

Функция ЗапросДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.УстановитьПараметр("ЭтапРаботы", ЭтапРаботы);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Кандидат,
	|	&ЭтапРаботы КАК ЭтапРаботы,
	|	ЕСТЬNULL(РаботаСКандидатами.Бронь, ЗНАЧЕНИЕ(Документ.Бронь.ПустаяСсылка)) КАК Бронь,
	|	РаботаСКандидатами.ПериодОкончание КАК ПериодОкончание,
	|	РаботаСКандидатами.Период КАК Период
	|ПОМЕСТИТЬ ВТТекущиеДанныеЭтапа
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|		ПО (РаботаСКандидатами.Кандидат = Кандидаты.Ссылка)
	|			И (РаботаСКандидатами.ЭтапРаботы = &ЭтапРаботы)
	|ГДЕ
	|	Кандидаты.Ссылка В(&Кандидаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеДанныеЭтапа.Кандидат КАК Кандидат,
	|	ТекущиеДанныеЭтапа.ЭтапРаботы КАК ЭтапРаботы,
	|	ТекущиеДанныеЭтапа.Бронь КАК Бронь,
	|	ТекущиеДанныеЭтапа.Бронь.Помещение КАК Помещение,
	|	ТекущиеДанныеЭтапа.ПериодОкончание КАК ПериодОкончание,
	|	ТекущиеДанныеЭтапа.Период КАК Период
	|ИЗ
	|	ВТТекущиеДанныеЭтапа КАК ТекущиеДанныеЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТекущиеДанныеЭтапа";
	
	Возврат Запрос;
	
КонецФункции

Функция ТекущийЭтапРаботыКандидатов(Кандидаты) Экспорт
	
	Если Кандидаты.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Кандидаты не выбраны.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)
		|	И Кандидаты.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено))";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем, что все выбранные кандидаты пока рассматриваются.
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'По одному или нескольким кандидатам уже приняты решения (они одобрены или отклонены). 
                               |Планирование этапа для таких кандидатов недоступно.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кандидаты.Ссылка КАК Кандидат,
		|	ТекущиеЭтапы.ЭтапРаботы КАК ЭтапРаботы,
		|	ТекущиеЭтапы.Состояние КАК Состояние,
		|	ТекущиеЭтапы.ДатаВремя КАК ДатаВремя
		|ПОМЕСТИТЬ ВТТекущиеЭтапыРаботы
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапы
		|		ПО (ТекущиеЭтапы.Кандидат = Кандидаты.Ссылка)
		|			И (ТекущиеЭтапы.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован)))
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	Запрос.Выполнить();
	
	// Проверяем что все этапы существуют.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеЭтапы.ЭтапРаботы, ЗНАЧЕНИЕ(Справочник.ЭтапыРаботыСКандидатами.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЭтапыРаботыСКандидатами.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем наличие этапов для планирования у выбранных кандидатов.
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить этап для планирования для кандидата. 
                               |Список этапов отбора для вакансии не определен, или все этапы пройдены.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Проверяем единственность этапа.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеЭтапы.ЭтапРаботы) > 1";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Кандидаты находятся на разных этапах отбора. 
                               |Запланировать следующий этап можно только для кандидатов, находящихся на одинаковом этапе работы.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеЭтапы.ЭтапРаботы КАК ЭтапРаботы
		|ИЗ
		|	ВТТекущиеЭтапыРаботы КАК ТекущиеЭтапы";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЭтапРаботы;
	
КонецФункции

Процедура ПроверитьВозможностьУстановкиЭтапаРаботы(Кандидаты, ЭтапРаботы, Период, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.УстановитьПараметр("ЭтапРаботы", ЭтапРаботы);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК ЭтапНаВыбраннуюДату
		|		ПО (ЭтапНаВыбраннуюДату.Кандидат = Кандидаты.Ссылка)
		|			И (ЭтапНаВыбраннуюДату.Период = &Период)
		|			И (ЭтапНаВыбраннуюДату.ЭтапРаботы <> &ЭтапРаботы)
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		Если Кандидаты.Количество() = 1 Тогда
			ФормулировкаКандидата = НСтр("ru = 'кандидата'");
		Иначе
			ФормулировкаКандидата = НСтр("ru = 'одного или нескольких кандидатов'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для %1 на выбранные дату и время уже зарегистрирован этап работы.
                  |Попробуйте выбрать другие дату или время.'"), 
			ФормулировкаКандидата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеЭтапаРаботыКандидатов(РезультатВыбора) Экспорт
	
	Кандидаты = РезультатВыбора.Кандидаты;
	Участники = РезультатВыбора.Участники;
	ЭтапРаботы = РезультатВыбора.ЭтапРаботы;
	Напоминание = РезультатВыбора.Напоминание;
	Письмо = РезультатВыбора.Письмо;
	СообщениеSMS = РезультатВыбора.СообщениеSMS;
	
	Отказ = Ложь;
	ПроверитьВозможностьУстановкиЭтапаРаботы(Кандидаты, ЭтапРаботы.Этап, ЭтапРаботы.Период, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеЭтапаРаботыСКандидатами(Запрос.МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы.Этап);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрежниеДанныеЭтапа.Кандидат КАК Кандидат,
	|	ПрежниеДанныеЭтапа.Бронь КАК Бронь,
	|	ПрежниеДанныеЭтапа.Помещение КАК Помещение,
	|	ПрежниеДанныеЭтапа.ПериодОкончание КАК ПериодОкончание,
	|	ПрежниеДанныеЭтапа.Период КАК Период
	|ИЗ
	|	ВТДанныеЭтапаРаботы КАК ПрежниеДанныеЭтапа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	БронированиеПомещенийБЗК.ЗадатьБроньПоЭтапу(Запрос.МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы, Отказ);
	
	Пока Выборка.Следующий() Цикл
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		ПрежниеДанныеЭтапа = Справочники.ЭтапыРаботыСКандидатами.СтруктураДанныхПланированияЭтапа();
		ЗаполнитьЗначенияСвойств(ПрежниеДанныеЭтапа, Выборка);
		
		// Записать этап работы с кандидатом.
		УстановитьСостояниеЭтапаРаботыКандидата(Выборка.Кандидат, ЭтапРаботы, ПрежниеДанныеЭтапа);
		
		РаботаСРабочимКалендаремБЗК.ОбновитьЗаписиКалендаряПоЭтапуРаботыСКандидатом(Выборка.Кандидат, ЭтапРаботы, Участники, ПрежниеДанныеЭтапа);
		
		// Установить/снять напоминание.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 в %2 запланирован этап «%3» для кандидата %4.'"),
			Формат(Напоминание.Период, "ДЛФ=D"),
			Формат(Напоминание.Период, "ДФ=ЧЧ:мм"),
			ЭтапРаботы.Этап, 
			Выборка.Кандидат);
		
		УстановитьНапоминание(
			Напоминание.Напоминать, Напоминание.Период, Напоминание.ИнтервалВремени, Выборка.Кандидат, ТекстСообщения, Выборка.Период);
		
		// Написать письма и SMS.
		Если Письмо.Написать Тогда
			СформироватьСообщениеИОтправить(Письмо.Шаблон, Выборка.Кандидат, Отказ);
		КонецЕсли;
		
		Если СообщениеSMS.Написать Тогда
			СформироватьСообщениеИОтправить(СообщениеSMS.Шаблон, Выборка.Кандидат, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ЗаполнитьВакансииКандидатов(Кандидаты, РезультатВыбора.Вакансии);
	
КонецПроцедуры

Процедура ОбъединитьРаботуСКандидатомСЭтапамиРаботыВакансии(ЭтапыВакансии, РаботаСКандидатом)
	
	Для Каждого СтрокаНабора Из РаботаСКандидатом Цикл
		Индекс = 0;
		Пока Индекс < ЭтапыВакансии.Количество() Цикл
			СтрокаТаблицы = ЭтапыВакансии[Индекс];
			Если СтрокаНабора.ДатаВремя < СтрокаТаблицы.ДатаВремя Тогда
				Прервать;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		НоваяСтрока = ЭтапыВакансии.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
	КонецЦикла;
	
КонецПроцедуры

Функция РаботаСКандидатомТаблица(Кандидат, Вакансия = Неопределено) Экспорт
	
	Если Вакансия = Неопределено Тогда
		Вакансия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кандидат, "Вакансия");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидат", Кандидат);
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Кандидат КАК Кандидат,
		|	ЕСТЬNULL(РаботаСКандидатами.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВремя,
		|	ЭтапыРаботыВакансии.НомерСтроки КАК НомерСтроки,
		|	ЭтапыРаботыВакансии.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ЕСТЬNULL(РаботаСКандидатами.ШаблонАнкеты, ЭтапыРаботыВакансии.ШаблонАнкеты) КАК ШаблонАнкеты,
		|	РаботаСКандидатами.ПричинаОтклонения КАК ПричинаОтклонения,
		|	ЕСТЬNULL(РаботаСКандидатами.Комментарий, ЭтапыРаботыВакансии.Комментарий) КАК Комментарий
		|ИЗ
		|	Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыВакансии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ПО (РаботаСКандидатами.ЭтапРаботы = ЭтапыРаботыВакансии.ЭтапРаботы)
		|			И (РаботаСКандидатами.Кандидат = &Кандидат)
		|ГДЕ
		|	ЭтапыРаботыВакансии.Ссылка = &Вакансия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	ЭтапыВакансии = Запрос.Выполнить().Выгрузить();
	
	// Дополняем таблицу записями этапов, которых не было в списке вакансии.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.Период КАК ДатаВремя,
		|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
		|	РаботаСКандидатами.Комментарий КАК Комментарий,
		|	РаботаСКандидатами.ШаблонАнкеты КАК ШаблонАнкеты
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыРаботыВакансии
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК Кандидаты
		|			ПО (Кандидаты.Вакансия = ЭтапыРаботыВакансии.Ссылка)
		|				И (Кандидаты.Ссылка = &Кандидат)
		|		ПО РаботаСКандидатами.ЭтапРаботы = ЭтапыРаботыВакансии.ЭтапРаботы
		|ГДЕ
		|	РаботаСКандидатами.Кандидат = &Кандидат
		|	И ЭтапыРаботыВакансии.ЭтапРаботы ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботаСКандидатами.Период";
	РаботаСКандидатом = Запрос.Выполнить().Выгрузить();
	
	ОбъединитьРаботуСКандидатомСЭтапамиРаботыВакансии(ЭтапыВакансии, РаботаСКандидатом);	
	
	Возврат ЭтапыВакансии;
	
КонецФункции

Функция ТекущийЭтапРаботыСКандидатом(РаботаСКандидатом, СостояниеКандидата) Экспорт
	
	ТекущийЭтап = Неопределено;
	ЗавершенныйЭтап = Неопределено;
	Для Каждого СтрокаТаблицы Из РаботаСКандидатом Цикл
		Если СтрокаТаблицы.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден
			Или СтрокаТаблицы.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
			ЗавершенныйЭтап = СтрокаТаблицы;
			Продолжить;
		КонецЕсли;
		ТекущийЭтап = СтрокаТаблицы;
		Прервать;
	КонецЦикла;
	
	Если ТекущийЭтап = Неопределено Тогда
		ТекущийЭтап = ЗавершенныйЭтап;
	КонецЕсли;
	
	Если СостояниеКандидата = Перечисления.СостоянияСогласования.Согласовано
		Или СостояниеКандидата = Перечисления.СостоянияСогласования.Отклонено Тогда
		ТекущийЭтап = ЗавершенныйЭтап;
	КонецЕсли;
	
	Возврат ТекущийЭтап;
	
КонецФункции

Процедура ОбновитьТекущийЭтапРаботыКандидата(Кандидат, РеквизитыКандидата = Неопределено) Экспорт
	
	Если РеквизитыКандидата = Неопределено Тогда
		РеквизитыКандидата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Кандидат, "Вакансия, Состояние");
	КонецЕсли;
	
	РаботаСКандидатом = РаботаСКандидатомТаблица(Кандидат, РеквизитыКандидата.Вакансия);
	
	// Определяем текущий этап.
	ТекущийЭтап = ТекущийЭтапРаботыСКандидатом(РаботаСКандидатом, РеквизитыКандидата.Состояние);
	
	// Записываем текущий этап работы.
	УстановитьТекущийЭтапРаботыСКандидатом(Кандидат, ТекущийЭтап);
	
КонецПроцедуры

Функция ОписаниеТекущегоЭтапаРаботыСКандидатом() Экспорт
	
	Описание = Новый Структура(
		"ЭтапРаботы, 
		|СостояниеЭтапа, 
		|ДатаВремя");
	
	Возврат Описание;
	
КонецФункции

Процедура УстановитьТекущийЭтапРаботыСКандидатом(Кандидат, ТекущийЭтап) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ТекущиеЭтапыРаботыСКандидатами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Кандидат = Кандидат;
	МенеджерЗаписи.Прочитать();
	
	Если ТекущийЭтап = Неопределено Тогда
		МенеджерЗаписи.Удалить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущийЭтап);
	МенеджерЗаписи.Состояние = ТекущийЭтап.СостояниеЭтапа;
	
	Кандидаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Кандидат);
	ДанныеКандидатов = ОрганизацииПодразделенияКандидатов(Кандидаты);
	ДанныеКандидата = ДанныеКандидатов[Кандидат];
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеКандидата);
	
	МенеджерЗаписи.Кандидат = Кандидат;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УстановитьНапоминание(Напоминать, Период, ИнтервалВремени, Кандидат, ТекстСообщения, ПрежнийПериод = Неопределено)
	
	Если ЗначениеЗаполнено(ПрежнийПериод) Тогда
		// Снимаем возможное напоминание.
		ОписаниеНапоминания = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания();
		ОписаниеНапоминания.Пользователь = Пользователи.ТекущийПользователь();
		ОписаниеНапоминания.ВремяСобытия = ПрежнийПериод;
		ОписаниеНапоминания.Источник = Кандидат;
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(ОписаниеНапоминания);
	КонецЕсли;	
	
	Если Не Напоминать Тогда
		Возврат;
	КонецЕсли;
	
	НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(
		ТекстСообщения, Период, ИнтервалВремени, Кандидат);
	
КонецПроцедуры

Процедура ЗаполнитьВакансииКандидатов(Кандидаты, Вакансии) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Кандидаты, "Вакансия", Истина);
	Вакансии = ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение");
	
КонецПроцедуры

Функция ОрганизацииПодразделенияКандидатов(Кандидаты)
	
	ДанныеКандидатов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Ссылка КАК Ссылка,
		|	Кандидаты.Подразделение КАК Подразделение,
		|	Кандидаты.Позиция.Владелец КАК Организация
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Ссылка В(&Кандидаты)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеКандидата = Новый Структура(
			"Организация, 
			|Подразделение");
		ЗаполнитьЗначенияСвойств(ДанныеКандидата, Выборка);
		ДанныеКандидатов.Вставить(Выборка.Ссылка, ДанныеКандидата);
	КонецЦикла;
	
	Возврат ДанныеКандидатов;
	
КонецФункции

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.ПодборПерсонала) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.ПодборПерсонала, НСтр("ru = 'Отчеты по подбору персонала'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала, "СтатистикаПодбораПерсонала");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьПодборПерсонала");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СтатистикаПодбораПерсонала, "ПоказателиЭффективностиПодбора");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьПодборПерсонала");
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЭффективностьИсточниковИнформацииОКандидатах);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.МассовыйНаборПерсонала);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

Функция ШаблоныСообщенийКандидатов(Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстУсловия = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если Не ПустаяСтрока(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия + " И ";
		КонецЕсли;
		ТекстУсловия = ТекстУсловия + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
	КонецЦикла;
	Если ПустаяСтрока(ТекстУсловия) Тогда
		ТекстУсловия = "ИСТИНА";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяТипаПараметра", "Справочник.Кандидаты");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСообщений.Ссылка КАК Ссылка,
		|	ШаблоныСообщений.Код КАК Код,
		|	ШаблоныСообщений.Наименование КАК Наименование,
		|	ШаблоныСообщений.ПредназначенДляSMS КАК SMS,
		|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем КАК Email
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = &ИмяТипаПараметра
		|	И НЕ ШаблоныСообщений.ПометкаУдаления
		|	И &ТекстУсловия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ТекстУсловия);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьСообщениеИОтправить(Шаблон, Предмет, Отказ, ДополнительныеПараметры = Неопределено)
	
	РезультатОтправки = ШаблоныСообщений.СформироватьСообщениеИОтправить(Шаблон, Предмет, Новый УникальныйИдентификатор, ДополнительныеПараметры);
	
	Если Не РезультатОтправки.Отправлено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки, , , , Отказ);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.7";
	Обработчик.Процедура = "Справочники.ПричиныОткрытияВакансий.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.7";
	Обработчик.Процедура = "Справочники.ПричиныОтклоненияКандидатов.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.7";
	Обработчик.Процедура = "Справочники.ЭтапыРаботыСКандидатами.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.112";
	Обработчик.Процедура = "Справочники.Кандидаты.ИзвлечьТекстДляПолнотекстовогоПоиска";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("55784290-5da2-4da8-aff5-b7b1057b9d30");
	Обработчик.Комментарий = НСтр("ru = 'Извлечение текста резюме кандидатов для полнотекстового поиска.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.17";
	Обработчик.Процедура = "Справочники.ИсточникиИнформацииОКандидатах.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.17";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПодбораПерсонала.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.3";
	Обработчик.Процедура = "РегистрыСведений.СостоянияВакансий.РаспределениеСостоянийВакансийПоЭшелонам";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("515bba46-7680-4c76-8e9c-a0571e511e8f");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение состояний вакансий.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.18";
	Обработчик.Процедура = "ПодборПерсонала.СформироватьШаблоныСообщений";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7f4c100e-3813-44da-b8d5-8ac07245893d");
	Обработчик.Комментарий = НСтр("ru = 'Формирование шаблонов сообщений для подсистемы.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "ПодборПерсонала.УстановитьПараметрыНабораСвойствСправочников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ec2d3c18-6d96-465b-aae6-90d7455d8c10");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников подбора персонала. Дополнительные реквизиты временно недоступны.'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.44";
	Обработчик.Процедура = "ПодборПерсонала.СоздатьШаблоныСообщенийСостоянийСогласованияКандидатов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4fb58834-144b-4605-a461-1b08bb2c9265");
	Обработчик.Комментарий = НСтр("ru = 'Формирование шаблонов сообщений для взаимодействия с кандидатами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.44";
	Обработчик.Процедура = "ПодборПерсонала.СоздатьШаблоныСообщенийЭтаповРаботыСКандидатами";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6807dfd6-062d-42be-81c5-ccfe547d6df6");
	Обработчик.Комментарий = НСтр("ru = 'Формирование шаблонов сообщений для взаимодействия с кандидатами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.44";
	Обработчик.Процедура = "ПодборПерсонала.ЗаполнитьТекущийЭтапРаботыКандидатов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("05be4708-e88c-49ef-8d46-14c6f47334e3");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение текущего этапа работы с кандидатом.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.46";
	Обработчик.Процедура = "ПодборПерсонала.ЗаполнитьСостояниеЭтаповРаботыСКандидатами";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f730513b-4c7d-4d0a-a205-3651c100faa6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение состояния этапов работы с кандидатами.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.47";
	Обработчик.Процедура = "ПодборПерсонала.ЗаполнениеРеквизитовМассовогоНабора";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1bdc24c0-243f-4f8e-a3ca-272652594138");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов вакансий и заявок на подбор для массового набора персонала.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.156";
	Обработчик.Процедура = "ПодборПерсонала.УточнитьТекущийЭтапРаботыДляКандидатовРаботаСКоторымиЗавершена";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3e2deeb0-4e93-44e8-a1f1-0d3cd937ccea");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение текущего этапа работы для кандидатов, работа с которыми завершена.'");
	
КонецПроцедуры

Процедура СформироватьШаблоныСообщений(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Справочник.Вакансии""
	|	И ШаблоныСообщений.ВладелецШаблона = Неопределено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныСообщений.Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Справочник.Кандидаты""
	|	И ШаблоныСообщений.ВладелецШаблона = Неопределено");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Если Взаимодействия.ИспользуетсяПочтовыйКлиент() Тогда
			ФорматПисьма = ?(Взаимодействия.ОтправлятьПисьмаВФорматеHTML(), Перечисления.СпособыРедактированияЭлектронныхПисем.HTML, Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
		Иначе
			ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
		// Создаем шаблон для отправки одной вакансии.
		ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
		ПараметрыШаблона.Вставить("ПолноеИмяТипаНазначения", "Справочник.Вакансии");
		ПараметрыШаблона.Вставить("Служебный", Истина);
		ПараметрыШаблона.Вставить("ФорматПисьма", ФорматПисьма);
		ПараметрыШаблона.Вставить("ФорматВложений", Новый ХранилищеЗначения(ФорматыВложенийПоУмолчанию()));
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиВакансии(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
		// Создаем шаблон для отправки нескольких вакансий.
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиВакансий(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
		// Создаем шаблон для отправки нескольких вакансий с внешними ссылками на них.
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиВакансийПоСсылкам(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
		// Создаем шаблон для отправки одного кандидата.
		ПараметрыШаблона.ПолноеИмяТипаНазначения = "Справочник.Кандидаты";
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиКандидата(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
		// Создаем шаблон для отправки нескольких кандидатов.
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиКандидатов(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
		// Создаем шаблон для отправки нескольких кандидатов с внешними ссылками на них.
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыШаблона, ТекстыШаблонаОтправкиКандидатовПоСсылкам(), Истина);
		Шаблон = ШаблоныСообщений.СоздатьШаблон(ПараметрыШаблона.Наименование, ПараметрыШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураТекстовШаблона()
	Возврат Новый Структура("Наименование, Тема, Текст");
КонецФункции

Функция ТекстыШаблонаОтправкиВакансии()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Описание одной вакансии на ознакомление'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Доступная вакансия'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите вакансию:
	|[Вакансии.Наименование]
	|
	|Требования:
	|[Вакансии.Требования]
	|
	|Обязанности:
	|[Вакансии.Обязанности]
	|
	|Условия:
	|[Вакансии.Условия]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Функция ТекстыШаблонаОтправкиВакансий()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Описания нескольких вакансий на ознакомление'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Доступные вакансии'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите вакансии:
	|[Произвольные.ПредставлениеСпискаПредметов]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Функция ТекстыШаблонаОтправкиВакансийПоСсылкам()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Внутренние ссылки на несколько вакансий'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Доступные вакансии'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите вакансии:
	|[Произвольные.СписокСсылокНаПредметы]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Функция ТекстыШаблонаОтправкиКандидата()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Резюме одного кандидата на ознакомление'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Подобранный кандидат'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите резюме кандидата:
	|[Кандидаты.ФизическоеЛицо.ФИО]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Функция ТекстыШаблонаОтправкиКандидатов()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Резюме нескольких кандидатов на ознакомление'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Подобранные кандидаты'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите резюме кандидатов:
	|[Произвольные.ПредставлениеСпискаПредметов]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Функция ТекстыШаблонаОтправкиКандидатовПоСсылкам()
	
	ТекстыШаблона = СтруктураТекстовШаблона();
	
	ТекстыШаблона.Наименование	= НСтр("ru = 'Внутренние ссылки на резюме нескольких кандидатов'");
	ТекстыШаблона.Тема 	= НСтр("ru = 'Подобранные кандидаты'");
	ТекстыШаблона.Текст	= НСтр("ru = 'Добрый день, [Произвольные.ФИОПолучателя]!
	|
	|Пожалуйста, рассмотрите резюме кандидатов:
	|[Произвольные.СписокСсылокНаПредметы]
	|
	|С уважением,
	|[ОбщиеРеквизиты.ТекущийПользователь.Наименование]'");
	
	Возврат ТекстыШаблона;
	
КонецФункции

Процедура УстановитьПараметрыНабораСвойствСправочников(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала) КАК ИспользоватьПодборПерсонала
	|ИЗ
	|	РегистрСведений.НастройкиПодбораПерсонала КАК НастройкиПодбораПерсонала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьПодборПерсонала;
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Вакансии", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ИсточникиИнформацииОКандидатах", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Кандидаты", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПричиныОтклоненияКандидатов", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПричиныОткрытияВакансий", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ПрофилиДолжностей", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ЭтапыРаботыСКандидатами", ПараметрыНабора);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьШаблоныСообщенийСостоянийСогласованияКандидатов(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Справочник.Кандидаты""
		|	И ШаблоныСообщений.ВладелецШаблона ССЫЛКА Перечисление.СостоянияСогласования";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	// Кандидат одобрен (письмо).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("Письмо");
	ПараметрыШаблона.Тема = НСтр("ru = 'Ваша кандидатура одобрена'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |Мы рады сообщить вам, что ваша кандидатура одобрена руководством на должность «[Кандидаты.Вакансия]».
              |Для оформления документов ждем вас в нашем офисе по адресу [Кандидаты.Организация.ФактическийАдрес]. 
              |
              |С собой необходимо иметь: паспорт, трудовую книжку, СНИЛС, военный билет (если вы военнообязанный).
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.СостоянияСогласования.Согласовано;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат одобрен (письмо)'"), ПараметрыШаблона);
	
	// Кандидат одобрен (SMS).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("SMS");
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! Ваша кандидатура одобрена на должность «[Кандидаты.Вакансия]». Для оформления документов ждем вас по адресу: [Кандидаты.Организация.ФактическийАдрес]. С собой иметь: паспорт, трудовую книжку, СНИЛС, военный билет (если вы военнообязанный). Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.СостоянияСогласования.Согласовано;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат одобрен (SMS)'"), ПараметрыШаблона);
	
	// Кандидат отклонен (письмо).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("Письмо");
	ПараметрыШаблона.Тема = НСтр("ru = 'Ответ по вакансии'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |К сожалению, в конкурсе на вакансию «[Кандидаты.Вакансия]» принято решение в пользу другого кандидата.
              |Благодарим вас за участие.
              |Ваше резюме внесено в базу данных службы персонала. В случае, если у нас возникнет вакансия, подходящая вам по вашим требованиям, мы обязательно вам сообщим.
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.СостоянияСогласования.Отклонено;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат отклонен (письмо)'"), ПараметрыШаблона);
	
	// Кандидат отклонен (SMS).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("SMS");
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! К сожалению, ваша кандидатура была отклонена в конкурсе на вакансию «[Кандидаты.Вакансия]». Благодарим вас за участие. Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = Перечисления.СостоянияСогласования.Отклонено;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Кандидат отклонен (SMS)'"), ПараметрыШаблона);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура СоздатьШаблоныСообщенийЭтаповРаботыСКандидатами(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = ""Справочник.Кандидаты""
		|	И ШаблоныСообщений.ВладелецШаблона ССЫЛКА Справочник.ЭтапыРаботыСКандидатами";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ЭтапСобеседование = Справочники.ЭтапыРаботыСКандидатами.НайтиПоНаименованию(НСтр("ru = 'Собеседование'"), Истина);
	Если Не ЗначениеЗаполнено(ЭтапСобеседование) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	// Приглашение на собеседование (письмо).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("Письмо");
	ПараметрыШаблона.Тема = НСтр("ru = 'Приглашение на собеседование'");
	ПараметрыШаблона.Текст = 
		НСтр("ru = 'Добрый день, [Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]!
              |
              |Наша компания [Кандидаты.Организация.Наименование] получила ваш отклик на вакансию «[Кандидаты.Вакансия]».
              |Мы внимательно ознакомились с вашим резюме. Считаем, что ваши знания и навыки соответствуют заявленным требованиям. 
              |
              |Приглашаем вас пройти собеседование со специалистом по подбору персонала [ЭтапРаботы.Дата] в [ЭтапРаботы.Время] в нашем офисе по адресу [Кандидаты.Организация.ФактическийАдрес].
              |
              |Просим взять с собой паспорт.
              |
              |С уважением, служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = ЭтапСобеседование;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Приглашение на собеседование (письмо)'"), ПараметрыШаблона);
	
	// Приглашение на собеседование (SMS).
	ПараметрыШаблона = ОписаниеПараметровШаблонаСообщенийВзаимодействия("SMS");
	ПараметрыШаблона.Текст = 
		НСтр("ru = '[Кандидаты.ФизическоеЛицо.Имя] [Кандидаты.ФизическоеЛицо.Отчество]! Мы ознакомились с вашим резюме на вакансию «[Кандидаты.Вакансия]». Приглашаем вас пройти собеседование [ЭтапРаботы.Дата] в [ЭтапРаботы.Время] по адресу [Кандидаты.Организация.ФактическийАдрес]. Просим взять с собой паспорт. Служба персонала [Кандидаты.Организация.Наименование].'");
	ПараметрыШаблона.ВладелецШаблона = ЭтапСобеседование;
	ШаблоныСообщений.СоздатьШаблон(НСтр("ru = 'Приглашение на собеседование (SMS)'"), ПараметрыШаблона);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Функция ОписаниеПараметровШаблонаСообщенийВзаимодействия(ТипШаблона = "Письмо")
	
	ПараметрыШаблона = ШаблоныСообщений.ОписаниеПараметровШаблона();
	
	Если Не Взаимодействия.ОтправлятьПисьмаВФорматеHTML() Тогда
		ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	КонецЕсли;
	
	ПараметрыШаблона.ТипШаблона = ТипШаблона;
	ПараметрыШаблона.ПолноеИмяТипаНазначения = Метаданные.Справочники.Кандидаты.ПолноеИмя();
	ПараметрыШаблона.Назначение = Метаданные.Справочники.Кандидаты.Синоним;
	
	Возврат ПараметрыШаблона;
	
КонецФункции

Процедура ЗаполнитьТекущийЭтапРаботыКандидатов(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВакансииЭтапыРаботыСКандидатами.Ссылка КАК Вакансия
		|ПОМЕСТИТЬ ВТВакансииСЭтапами
		|ИЗ
		|	Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ВакансииЭтапыРаботыСКандидатами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботаСКандидатами.Кандидат КАК Кандидат
		|ПОМЕСТИТЬ ВТКандидатыСЭтапами
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Кандидаты.Ссылка КАК Кандидат
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущиеЭтапыРаботы
		|		ПО (ТекущиеЭтапыРаботы.Кандидат = Кандидаты.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВакансииСЭтапами КАК ВакансииСЭтапами
		|		ПО (ВакансииСЭтапами.Вакансия = Кандидаты.Вакансия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКандидатыСЭтапами КАК КандидатыСЭтапами
		|		ПО (КандидатыСЭтапами.Кандидат = Кандидаты.Ссылка)
		|ГДЕ
		|	НЕ Кандидаты.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено))
		|	И ТекущиеЭтапыРаботы.ЭтапРаботы ЕСТЬ NULL
		|	И (ВакансииСЭтапами.Вакансия ЕСТЬ НЕ NULL 
		|			ИЛИ КандидатыСЭтапами.Кандидат ЕСТЬ НЕ NULL )";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьТекущийЭтапРаботыКандидата(Выборка.Кандидат);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеЭтаповРаботыСКандидатами(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.ЕстьЗаполненныеЭтапы КАК ЕстьЗаполненныеЭтапы
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботаСКандидатами.Кандидат КАК Кандидат,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА РаботаСКандидатами.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ЕстьЗаполненныеЭтапы
		|	ИЗ
		|		РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РаботаСКандидатами.Кандидат) КАК РаботаСКандидатами
		|ГДЕ
		|	РаботаСКандидатами.ЕстьЗаполненныеЭтапы = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Кандидаты = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Кандидаты.Добавить(Выборка.Кандидат);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", Кандидаты);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботаСКандидатами.Период КАК Период,
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.Комментарий КАК Комментарий,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа,
		|	РаботаСКандидатами.ШаблонАнкеты КАК ШаблонАнкеты,
		|	РаботаСКандидатами.ПричинаОтклонения КАК ПричинаОтклонения
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|ГДЕ
		|	РаботаСКандидатами.Кандидат В(&Кандидаты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботаСКандидатами.Кандидат";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Кандидат") Цикл
		НаборЗаписей = РегистрыСведений.РаботаСКандидатами.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден;
			Если СтрокаНабора.Период > ТекущаяДатаСеанса() Тогда
				СтрокаНабора.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Отбор.Кандидат.Установить(Выборка.Кандидат);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновитьТекущийЭтапРаботыКандидата(Выборка.Кандидат);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовМассовогоНабора(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Вакансии.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор) КАК СпособНабора,
		|	ЗНАЧЕНИЕ(Перечисление.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания) КАК НазначениеНабора,
		|	СправочникШтатноеРасписание.Должность КАК Должность
		|ИЗ
		|	Справочник.Вакансии КАК Вакансии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК СправочникШтатноеРасписание
		|		ПО (СправочникШтатноеРасписание.Ссылка = Вакансии.Позиция)
		|ГДЕ
		|	Вакансии.СпособНабора = ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаПодборПерсонала.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.ЕдиничныйНабор),
		|	ЗНАЧЕНИЕ(Перечисление.НазначениеНабораПерсоналаНаВакансию.ПозицияШтатногоРасписания),
		|	СправочникШтатноеРасписание.Должность
		|ИЗ
		|	Документ.ЗаявкаНаПодборПерсонала КАК ЗаявкаНаПодборПерсонала
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК СправочникШтатноеРасписание
		|		ПО (СправочникШтатноеРасписание.Ссылка = ЗаявкаНаПодборПерсонала.Позиция)
		|ГДЕ
		|	ЗаявкаНаПодборПерсонала.СпособНабора = ЗНАЧЕНИЕ(Перечисление.СпособНабораПерсоналаНаВакансию.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьТекущийЭтапРаботыДляКандидатовРаботаСКоторымиЗавершена(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Кандидаты.Ссылка КАК Кандидат
		|ПОМЕСТИТЬ ВТКандидаты
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущийЭтап
		|		ПО (ТекущийЭтап.Кандидат = Кандидаты.Ссылка)
		|			И (Кандидаты.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.Период КАК Период,
		|	РаботаСКандидатами.СостояниеЭтапа КАК СостояниеЭтапа
		|ПОМЕСТИТЬ ВТРаботаСКандидатами
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКандидаты КАК Кандидаты
		|		ПО (Кандидаты.Кандидат = РаботаСКандидатами.Кандидат)
		|			И (РаботаСКандидатами.СостояниеЭтапа В (ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.Пройден), ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповРаботыСКандидатами.Пропущен)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	МАКСИМУМ(РаботаСКандидатами.Период) КАК Период
		|ПОМЕСТИТЬ ВТПоследнийЭтапРаботы
		|ИЗ
		|	ВТРаботаСКандидатами КАК РаботаСКандидатами
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботаСКандидатами.Кандидат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботаСКандидатами.Кандидат КАК Кандидат,
		|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
		|	РаботаСКандидатами.СостояниеЭтапа КАК Состояние,
		|	РаботаСКандидатами.Период КАК ДатаВремя,
		|	РаботаСКандидатами.Кандидат.Подразделение КАК Подразделение,
		|	РаботаСКандидатами.Кандидат.Позиция.Владелец КАК Организация
		|ИЗ
		|	ВТРаботаСКандидатами КАК РаботаСКандидатами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийЭтапРаботы КАК ПоследнийЭтап
		|		ПО РаботаСКандидатами.Кандидат = ПоследнийЭтап.Кандидат
		|			И (ПоследнийЭтап.Период = РаботаСКандидатами.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущийЭтап
		|		ПО (ТекущийЭтап.Кандидат = РаботаСКандидатами.Кандидат)
		|			И РаботаСКандидатами.ЭтапРаботы = ТекущийЭтап.ЭтапРаботы
		|ГДЕ
		|	ТекущийЭтап.ЭтапРаботы ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеЭтапыРаботыСКандидатами.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Отбор.Кандидат.Установить(Выборка.Кандидат);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиПодбораПерсонала);
	НастройкиПрограммы.Вставить("НастройкиПодбораПерсонала", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиПодбораПерсонала.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиПодбораПерсонала);
	Настройки.Записать();
	
КонецПроцедуры

#Область ИнформацияОКандидате

// Возвращает ссылку на приоритетного кандидата.
// Используется для страницы "О кандидате" справочника "Сотрудники".
//
Функция КандидатСотрудника(ФизическоеЛицо, Позиция) Экспорт
	
	МетаданныеСправочника = Метаданные.Справочники.Кандидаты;
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника, ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		ЕстьПравоЧтения = ПравоДоступа("Чтение", МетаданныеСправочника);
	КонецЕсли;
	
	Если Не ЕстьПравоЧтения Тогда
		Возврат Справочники.Кандидаты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	Кандидаты.Ссылка КАК Кандидат
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО (Кандидаты.ФизическоеЛицо = &ФизическоеЛицо)
		|			И Кандидаты.Позиция = ПозицияКандидата.Ссылка
		|			И (ПозицияКандидата.Ссылка = &Позиция)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность = ПозицияСотрудника.Должность
		|			ТОГДА 2
		|		КОГДА ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность <> ПозицияСотрудника.Должность
		|			ТОГДА 3
		|		КОГДА ПозицияКандидата.Подразделение <> ПозицияСотрудника.Подразделение
		|				И ПозицияКандидата.Должность = ПозицияСотрудника.Должность
		|			ТОГДА 4
		|	КОНЕЦ,
		|	Кандидаты.Ссылка
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО (ПозицияСотрудника.Ссылка = &Позиция)
		|			И (Кандидаты.ФизическоеЛицо = &ФизическоеЛицо)
		|			И Кандидаты.Позиция <> ПозицияСотрудника.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО Кандидаты.Позиция = ПозицияКандидата.Ссылка
		|			И (ПозицияКандидата.Ссылка <> ПозицияСотрудника.Ссылка)
		|			И (ПозицияКандидата.Подразделение = ПозицияСотрудника.Подразделение
		|				ИЛИ ПозицияКандидата.Должность = ПозицияСотрудника.Должность)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	Кандидаты.Ссылка
		|ИЗ
		|	Справочник.Кандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КандидатСсылка = Неопределено;
	Если Выборка.Следующий() Тогда
		КандидатСсылка = Выборка.Кандидат;
	КонецЕсли;
	
	Возврат КандидатСсылка;
	
КонецФункции

Функция СотрудникКандидата(ФизическоеЛицо, Позиция, ДатаРегистрацииКандидата) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТФизическиеЛица";
	Запрос.Выполнить();
	
	СоздатьВТСотрудникиКандидатов(МенеджерВременныхТаблиц, ДатаРегистрацииКандидата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиКандидатов.Сотрудник КАК Сотрудник,
		|	СотрудникиКандидатов.Позиция КАК Позиция,
		|	СотрудникиКандидатов.Организация КАК Организация,
		|	СотрудникиКандидатов.ДатаПриема КАК ДатаПриема
		|ИЗ
		|	ВТСотрудникиКандидатов КАК СотрудникиКандидатов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеСотрудника = Новый Структура(
		"Сотрудник, 
		|Позиция, 
		|Организация, 
		|ДатаПриема");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеСотрудника, Выборка);
	КонецЕсли;
	
	Возврат ОписаниеСотрудника;
	
КонецФункции

Процедура СоздатьВТСотрудникиКандидатов(МенеджерВременныхТаблиц, ДатаАктуальности, ИмяВТФизическиеЛица = "ВТФизическиеЛица")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, ИмяВТФизическиеЛица) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка) КАК ПозицияКандидата,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка) КАК Позиция,
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриема
			|ПОМЕСТИТЬ ВТСотрудникиКандидатов";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	ИменаВТ = Новый Массив;
	
	КадровыеДанные = Новый Массив;
	КадровыеДанные.Добавить("ДолжностьПоШтатномуРасписанию");
	КадровыеДанные.Добавить("ДатаПриема");
	КадровыеДанные.Добавить("Организация");
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыСотрудников.ИмяВТФизическиеЛица = ИмяВТФизическиеЛица;
	ПараметрыСотрудников.КадровыеДанные = КадровыеДанные;
	ПараметрыСотрудников.НачалоПериода = ДатаАктуальности;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаВТ.Добавить("ВТСотрудникиОрганизации");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.Позиция КАК ПозицияКандидата,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТПриоритетыСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию = ПозицияСотрудника.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ФизическиеЛица.Позиция = ПозицияСотрудника.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность = ПозицияКандидата.Должность
		|			ТОГДА 2
		|		КОГДА ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность <> ПозицияКандидата.Должность
		|			ТОГДА 3
		|		КОГДА ПозицияСотрудника.Подразделение <> ПозицияКандидата.Подразделение
		|				И ПозицияСотрудника.Должность = ПозицияКандидата.Должность
		|			ТОГДА 4
		|	КОНЕЦ,
		|	ФизическиеЛица.ФизическоеЛицо,
		|	ФизическиеЛица.Позиция,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаПриема
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияКандидата
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию <> ПозицияКандидата.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ПозицияСотрудника
		|		ПО Сотрудники.ДолжностьПоШтатномуРасписанию = ПозицияСотрудника.Ссылка
		|			И (ПозицияСотрудника.Ссылка <> ПозицияКандидата.Ссылка)
		|			И (ПозицияСотрудника.Подразделение = ПозицияКандидата.Подразделение
		|				ИЛИ ПозицияСотрудника.Должность = ПозицияКандидата.Должность)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|			И (ФизическиеЛица.Позиция = ПозицияКандидата.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5,
		|	ФизическиеЛица.ФизическоеЛицо,
		|	ФизическиеЛица.Позиция,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаПриема
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриоритетыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата КАК ПозицияКандидата,
		|	МИНИМУМ(ПриоритетыСотрудников.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТМинимальныеПриоритеты
		|ИЗ
		|	ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриоритетыСотрудников.ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриоритетыСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриоритетыСотрудников.ПозицияКандидата КАК ПозицияКандидата,
		|	ПриоритетыСотрудников.Сотрудник КАК Сотрудник,
		|	ПриоритетыСотрудников.Позиция КАК Позиция,
		|	ПриоритетыСотрудников.Организация КАК Организация,
		|	ПриоритетыСотрудников.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТСотрудникиКандидатов
		|ИЗ
		|	ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныеПриоритеты КАК МинимальныеПриоритеты
		|		ПО (МинимальныеПриоритеты.ФизическоеЛицо = ПриоритетыСотрудников.ФизическоеЛицо)
		|			И (МинимальныеПриоритеты.ПозицияКандидата = ПриоритетыСотрудников.ПозицияКандидата)
		|			И (МинимальныеПриоритеты.Приоритет = ПриоритетыСотрудников.Приоритет)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТПриоритетыСотрудников");
	ИменаВТ.Добавить("ВТМинимальныеПриоритеты");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

Процедура СоздатьВТСостоянияКандидатов(МенеджерВременныхТаблиц, ДатаАктуальности, ИмяВТКандидаты = "ВТКандидаты") Экспорт
	
	ИменаВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Кандидаты.Позиция КАК Позиция,
		|	СправочникКандидаты.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК СправочникКандидаты
		|		ПО (СправочникКандидаты.Ссылка = Кандидаты.Кандидат)
		|			И (СправочникКандидаты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано))";
	Запрос.Выполнить();
	ИменаВТ.Добавить("ВТФизическиеЛица");
	
	СоздатьВТСотрудникиКандидатов(МенеджерВременныхТаблиц, ДатаАктуальности);
	ИменаВТ.Добавить("ВТСотрудникиКандидатов");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кандидаты.Кандидат КАК Кандидат,
		|	1 КАК Приоритет,
		|	0 КАК НомерЭтапа,
		|	Кандидаты.Состояние КАК ТекущееСостояние,
		|	СотрудникиКандидатов.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСостоянияКандидатов
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кандидаты КАК СправочникКандидаты
		|		ПО (СправочникКандидаты.Ссылка = Кандидаты.Кандидат)
		|			И (Кандидаты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Согласовано))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКандидатов КАК СотрудникиКандидатов
		|		ПО (СотрудникиКандидатов.ФизическоеЛицо = СправочникКандидаты.ФизическоеЛицо)
		|			И Кандидаты.Позиция = СотрудникиКандидатов.ПозицияКандидата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Кандидаты.Кандидат,
		|	2,
		|	0,
		|	Кандидаты.Состояние,
		|	NULL
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|ГДЕ
		|	Кандидаты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Отклонено)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Кандидаты.Кандидат,
		|	3,
		|	ЕСТЬNULL(ЭтапыВакансии.НомерСтроки, 0),
		|	ТекущийЭтап.ЭтапРаботы,
		|	NULL
		|ИЗ
		|	ВТКандидаты КАК Кандидаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеЭтапыРаботыСКандидатами КАК ТекущийЭтап
		|		ПО (ТекущийЭтап.Кандидат = Кандидаты.Кандидат)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыВакансии
		|		ПО (ЭтапыВакансии.Ссылка = Кандидаты.Вакансия)
		|			И (ЭтапыВакансии.ЭтапРаботы = ТекущийЭтап.ЭтапРаботы)";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

Процедура ЗаполнитьФормуКандидатом(Форма, ИмяГруппы, ФизическоеЛицо, Позиция) Экспорт
	
	Кандидат = КандидатСотрудника(ФизическоеЛицо, Позиция);
	ДобавитьЭлементыФормыКандидата(Форма, Кандидат, ИмяГруппы);
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыКандидата(Форма, Кандидат, ИмяГруппы)
	
	МассивРеквизитов = Новый Массив;
	
	РеквизитДатаРегистрации = Новый РеквизитФормы("ДатаРегистрации", Новый ОписаниеТипов("Дата"));
	МассивРеквизитов.Добавить(РеквизитДатаРегистрации);
	
	РеквизитВакансия = Новый РеквизитФормы("ВакансияКандидата", Новый ОписаниеТипов("СправочникСсылка.Вакансии"));
	РеквизитВакансия.Заголовок = НСтр("ru = 'Вакансия'");
	МассивРеквизитов.Добавить(РеквизитВакансия);
	
	РеквизитПозиция = Новый РеквизитФормы("ПозицияСотрудника", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	РеквизитПозиция.Заголовок = НСтр("ru = 'Позиция'");
	МассивРеквизитов.Добавить(РеквизитПозиция);
	
	РеквизитПодразделение = Новый РеквизитФормы("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	МассивРеквизитов.Добавить(РеквизитПодразделение);
	
	РеквизитКандидат = Новый РеквизитФормы("КандидатСсылка", Новый ОписаниеТипов("СправочникСсылка.Кандидаты"));
	МассивРеквизитов.Добавить(РеквизитКандидат);
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Если Не ЗначениеЗаполнено(Кандидат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКандидата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Кандидат, "Вакансия, Позиция, Подразделение, ДатаРегистрации", Истина);
	Форма.КандидатСсылка = Кандидат;
	Форма.ВакансияКандидата = РеквизитыКандидата.Вакансия;
	Форма.ПозицияСотрудника = РеквизитыКандидата.Позиция;
	Форма.Подразделение = РеквизитыКандидата.Подразделение;
	Форма.ДатаРегистрации = РеквизитыКандидата.ДатаРегистрации;
	
	Команда = Форма.Команды.Добавить("ОткрытьФормуКандидата");
	Команда.Действие  = "Подключаемый_ОткрытьФормуКандидата";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	
	ГруппаФормыДанныеОКандидате = Форма.Элементы.Найти("ГруппаДанныеОКандидате");
	Если ГруппаФормыДанныеОКандидате = Неопределено Тогда
		ГруппаФормыДанныеОКандидате = Форма.Элементы.Вставить("ГруппаДанныеОКандидате", Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
	КонецЕсли;
	
	ГруппаФормыДанныеОКандидате.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОКандидате.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормыДанныеОКандидате.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОКандидате.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьВакансия", Тип("ПолеФормы"), ГруппаФормыДанныеОКандидате);
	ПолеНадписи.ПутьКДанным = РеквизитВакансия.Имя;
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьПозиция", Тип("ПолеФормы"), ГруппаФормыДанныеОКандидате);
	ПолеНадписи.ПутьКДанным = РеквизитПозиция.Имя;
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьПодразделение", Тип("ПолеФормы"), ГруппаФормыДанныеОКандидате);
	ПолеНадписи.ПутьКДанным = РеквизитПодразделение.Имя;
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормыДанныеОКандидате);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Заголовок = НСтр("ru = 'Подробнее...'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтправкаСообщений

Функция ФорматыВложенийПоУмолчанию() Экспорт
	
	СписокФорматов = Новый СписокЗначений;
	
	// Документ PDF (.pdf)
	ФорматВложений = СписокФорматов.Добавить();
	ФорматВложений.Значение = ТипФайлаТабличногоДокумента.PDF;
	ФорматВложений.Картинка = БиблиотекаКартинок.ФорматPDF;
	ФорматВложений.Пометка = Истина;
	ФорматВложений.Представление = Строка(Перечисления.ФорматыСохраненияОтчетов.PDF);
	
	Возврат СписокФорматов;
	
КонецФункции

Процедура ЗаполнитьШаблоныСообщенийПодбораПерсонала(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Источник.Значение Тогда
		СформироватьШаблоныСообщений();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстВHTML(Текст) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		ЭлементТекст = ДокументHTML.СоздатьТекстовыйУзел(Строка);
		ЭлементБлок.ДобавитьДочерний(ЭлементТекст);
		
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Результат = ЗаписьHTML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма, ПараметрыШаблоны, УникальныйИдентификатор) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АдресВоВременномХранилище");
	Результат.Колонки.Добавить("ИмяФайла");
	Результат.Колонки.Добавить("Размер");
	
	Если ПараметрыШаблоны.УпаковатьВАрхив Тогда
		ИмяАрхива      = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	ТаблицаФорматов = УправлениеПечатью.ФорматыСохраненияТабличногоДокумента();
	
	Если ПараметрыШаблоны.ФорматыВложений <> Неопределено Тогда
		Для Каждого ЭлементСписка Из ПараметрыШаблоны.ФорматыВложений Цикл
			
			НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ЭлементСписка.Значение))[0];
			ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			
			ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПечатнаяФорма.СинонимМакета, НастройкиФормата.Расширение, ИспользованныеИменаФайлов, ПараметрыШаблоны.ТранслитерироватьИменаФайлов);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
			
			ТабличныйДокумент.Записать(ПолноеИмяФайла, ЭлементСписка.Значение);
			
			Если ЗаписьZipФайла <> Неопределено Тогда 
				ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				НоваяСтрока                           = Результат.Добавить();
				НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
				НоваяСтрока.ИмяФайла                  = ИмяФайла;
				НоваяСтрока.Размер                    = ДвоичныеДанные.Размер();
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		НоваяСтрока                           = Результат.Добавить();
		НоваяСтрока.ИмяФайла                  = ИмяФайлаДляАрхива(ИмяФайла);
		НоваяСтрока.Размер                    = ДвоичныеДанные.Размер();
		НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	Если ЗначениеЗаполнено(ИмяАрхива) Тогда
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов, ТранслитерироватьИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
	
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
		ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
		1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счетчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонИмениФайла,
		ИмяМакета,
		" (" + НомерИспользования + ")",
		Расширение));
	КонецЕсли;
	
	Если ТранслитерироватьИменаФайлов Тогда
		ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция ИмяФайлаДляАрхива(ИмяФайла)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если МассивСтрок.Количество() = 2 Тогда
		Возврат  МассивСтрок[0] +".zip";
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		Возврат ИмяФайла + ".zip";
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПрисоединенныеФайлыВоВложения(Сообщение) Экспорт
	
	Если Не Сообщение.ДополнительныеПараметры.Свойство("Предметы") Тогда
		Возврат;
	КонецЕсли;
	
	Предметы = Сообщение.ДополнительныеПараметры.Предметы;
	УникальныйИдентификатор = Сообщение.ДополнительныеПараметры.УникальныйИдентификатор;
	Вложения = Сообщение.Вложения;
	ТипКоллекцииСписокЗначений = (ТипЗнч(Вложения) = Тип("СписокЗначений"));
	
	СписокПрисоединенныхФайлов = Новый Массив;
	
	Для Каждого Предмет Из Предметы Цикл
		
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Предмет, СписокПрисоединенныхФайлов);
		
		Для Каждого ПрисоединенныйФайл Из СписокПрисоединенныхФайлов Цикл
			
			ОписаниеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка, УникальныйИдентификатор);
			Если Прав(ОписаниеФайла.ИмяФайла, 1) = "." Тогда
				ОписаниеФайлаИмяФайла = Лев(ОписаниеФайла.ИмяФайла, СтрДлина(ОписаниеФайла.ИмяФайла) - 1);
			Иначе
				ОписаниеФайлаИмяФайла = ОписаниеФайла.ИмяФайла;
			КонецЕсли;
			
			Если ТипКоллекцииСписокЗначений Тогда
				Если ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Вложения, ОписаниеФайлаИмяФайла) = Неопределено Тогда
					Вложения.Добавить(ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла, ОписаниеФайлаИмяФайла);
				КонецЕсли;
			Иначе
				Если Вложения.Получить(ОписаниеФайлаИмяФайла) = Неопределено Тогда
					Вложения.Вставить(ОписаниеФайлаИмяФайла, ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СписокПрисоединенныхФайлов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПодготовкеШаблонаСообщения(НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если (НазначениеШаблона <> "Справочник.Вакансии" 
		И НазначениеШаблона <> "Справочник.Кандидаты") 
		Или ЗначениеЗаполнено(ДополнительныеПараметры.ВладелецШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если НазначениеШаблона = "Справочник.Вакансии" Тогда 
		ТекстПредставленияСписка =  НСтр("ru = 'Представление списка вакансий'");
	ИначеЕсли НазначениеШаблона = "Справочник.Кандидаты" Тогда 
		ТекстПредставленияСписка =  НСтр("ru = 'Представление списка кандидатов'");
	КонецЕсли;
	
	Описание = Новый Структура("ОписаниеТипа, Представление");
	Описание.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Описание.Представление = ТекстПредставленияСписка;
	
	ДополнительныеПараметры.Параметры.Вставить("ПредставлениеСпискаПредметов", Описание);
	
	Если НазначениеШаблона = "Справочник.Вакансии" Тогда 
		ТекстПредставленияСписка =  НСтр("ru = 'Список ссылок на вакансии'");
	ИначеЕсли НазначениеШаблона = "Справочник.Кандидаты" Тогда 
		ТекстПредставленияСписка =  НСтр("ru = 'Список ссылок на кандидатов'");
	КонецЕсли;
	
	Описание = Новый Структура("ОписаниеТипа, Представление");
	Описание.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Описание.Представление = ТекстПредставленияСписка;
	
	ДополнительныеПараметры.Параметры.Вставить("СписокСсылокНаПредметы", Описание);
	
	Описание = Новый Структура("ОписаниеТипа, Представление");
	Описание.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Описание.Представление = НСтр("ru = 'ФИО получателя'");
	
	ДополнительныеПараметры.Параметры.Вставить("ФИОПолучателя", Описание);
	
КонецПроцедуры

Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если (НазначениеШаблона <> "Справочник.Вакансии" 
		И НазначениеШаблона <> "Справочник.Кандидаты") 
		Или ЗначениеЗаполнено(ПараметрыШаблона.ВладелецШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	УточнитьСоставВложенийСообщения(Сообщение);
	
КонецПроцедуры

Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения) Экспорт
	
	Если НазначениеШаблона = "Справочник.Вакансии" 
		Или НазначениеШаблона = "Справочник.Кандидаты" Тогда
		
		УточнитьПочтуПолучателейСообщения(ПолучателиПисьма, ПредметСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьСоставВложенийСообщения(Сообщение)
	
	Вложения = Сообщение.Вложения;
	
	ДополнительныеВложения = Неопределено;
	
	Если Не Сообщение.ДополнительныеПараметры.Свойство("ДополнительныеВложения", ДополнительныеВложения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеВложения <> Неопределено Тогда
		Для Каждого ФайлДанных Из ДополнительныеВложения Цикл
			Вложения.Вставить(ФайлДанных.ИмяФайла, ФайлДанных.АдресВоВременномХранилище);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьПрисоединенныеФайлыВоВложения(Сообщение);
	
КонецПроцедуры

Процедура УточнитьПочтуПолучателейСообщения(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	Если Не ПредметСообщения.Свойство("ПроизвольныеПараметры") Тогда
		Возврат;
	КонецЕсли;
	
	ТипКоллекцииСписокЗначений = (ТипЗнч(ПолучателиПисьма) = Тип("СписокЗначений"));
	
	Получатель = ПредметСообщения.ПроизвольныеПараметры.Получить("Получатель");
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат;
	Иначе
		ПолучателиПисьма.Очистить();
	КонецЕсли;
	
	ПолучательПользователь = Справочники.Пользователи.ПустаяСсылка();
	ПолучательФизическоеЛицо =  Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
		ПолучательФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ФизическоеЛицо");
		ПолучательПользователь = Получатель;
	Иначе
		ПолучательФизическоеЛицо = Получатель;
	КонецЕсли;
	
	ЭлектронныеАдресаФизическогоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПолучательФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, , Ложь);
	ЭлектронныеАдресаПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПолучательПользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя, , Ложь);
	
	ЭлектронныеАдреса = Неопределено;
	Если ЭлектронныеАдресаФизическогоЛица.Количество() > 0 Тогда
		ЭлектронныеАдреса = ЭлектронныеАдресаФизическогоЛица;
	ИначеЕсли ЭлектронныеАдресаПользователя.Количество() > 0 Тогда
		ЭлектронныеАдреса = ЭлектронныеАдресаПользователя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронныеАдреса) И ЭлектронныеАдреса.Количество() > 0 Тогда
		
		Для Каждого АдресЭлектроннойПочты Из ЭлектронныеАдреса Цикл
			
			Адрес = АдресЭлектроннойПочты.Представление;
			Представление = СтрЗаменить(Строка(АдресЭлектроннойПочты.Объект), ",", "");
			
			Если ТипКоллекцииСписокЗначений Тогда
				ПолучателиПисьма.Добавить(Адрес, Представление);
			Иначе
				НоваяСтрока = ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес = Адрес;
				НоваяСтрока.Представление = Представление;
				НоваяСтрока.Контакт = Получатель;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонСоСпискомСсылок(ПолноеИмяТипаНазначения) Экспорт
	
	Шаблон = Справочники.ШаблоныСообщений.ПустаяСсылка();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПолноеИмяТипаНазначения", ПолноеИмяТипаНазначения);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(ШаблоныСообщений.Ссылка) КАК Шаблон,
		|	КОЛИЧЕСТВО(ШаблоныСообщений.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = &ПолноеИмяТипаНазначения
		|	И НЕ ШаблоныСообщений.ПометкаУдаления
		|	И (ШаблоныСообщений.ТекстШаблонаПисьма ПОДОБНО ""%СписокСсылокНаПредметы%""
		|			ИЛИ ШаблоныСообщений.ТекстШаблонаПисьмаHTML ПОДОБНО ""%СписокСсылокНаПредметы%"")";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И Выборка.Количество = 1 Тогда
			Шаблон = Выборка.Шаблон;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Процедура ОбновитьСоставКомандОтправкиВакансии(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	ЭлементПодменю = Элементы.Найти("ПодменюОтправить");
	ЭлементПодменюСтраницы = Элементы.Найти("ПодменюОтправитьКандидатам");
	
	Вакансия = Форма.Объект.Ссылка;
	Выборка = ВыборкаСоставаОписанийВакансий(Вакансия, Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ЗаголовокКоманды = Выборка.МестоПубликации;
		
		ИмяКоманды = СтрШаблон("Отправить_%1", Выборка.ИдентификаторОписания);
		КомандаОтправки = Команды.Найти(ИмяКоманды);
		
		Если КомандаОтправки = Неопределено Тогда
			
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "ОтправитьВакансию";
			
			ЭлементКнопкаПодменю = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменю);
			ЭлементКнопкаПодменю.Заголовок	= ЗаголовокКоманды;
			ЭлементКнопкаПодменю.Вид		= ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКнопкаПодменю.ИмяКоманды	= ИмяКоманды;
			
		КонецЕсли;
		
		ИмяКоманды = СтрШаблон("ОтправитьКандидатам_%1", Выборка.ИдентификаторОписания);
		КомандаОтправки = Команды.Найти(ИмяКоманды);
		
		Если КомандаОтправки = Неопределено Тогда
			
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "ОтправитьВакансиюКандидатам";
			
			ЭлементКнопкаПодменю = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменюСтраницы);
			ЭлементКнопкаПодменю.Заголовок	= ЗаголовокКоманды;
			ЭлементКнопкаПодменю.Вид		= ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКнопкаПодменю.ИмяКоманды	= ИмяКоманды;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСоставКомандОтправкиВакансий(Форма) Экспорт
	
	ВладельцыКомандОтправки = Новый Соответствие;
	
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	ЭлементПодменю = Элементы.Найти("ПодменюОтправить");
	
	Выборка = ВыборкаСоставаОписанийВакансий(, Истина);
	
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторОписания") Цикл
		
		ИмяКоманды = СтрШаблон("Отправить_%1", Выборка.ИдентификаторОписания);
		ЗаголовокКоманды = Выборка.МестоПубликации;
		
		КомандаОтправки = Команды.Найти(ИмяКоманды);
		
		Если КомандаОтправки = Неопределено Тогда
			
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "ОтправитьВакансию";
			
			ЭлементКнопкаПодменю = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменю);
			ЭлементКнопкаПодменю.Заголовок	= ЗаголовокКоманды;
			ЭлементКнопкаПодменю.Вид		= ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементКнопкаПодменю.ИмяКоманды	= ИмяКоманды;
			
		КонецЕсли;
		
		Владельцы = Новый Массив();
		Пока Выборка.Следующий() Цикл
			Владельцы.Добавить(Выборка.Вакансия);
		КонецЦикла;
		
		ВладельцыКомандОтправки.Вставить(ИмяКоманды, Владельцы);
		
	КонецЦикла;
	
	Форма.ВладельцыКомандОтправки = Новый ФиксированноеСоответствие(ВладельцыКомандОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область ОписанияВакансий

Функция ОписанияВакансийПоУмолчанию(Вакансии) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Вакансии.Ссылка КАК Ссылка,
	|	Вакансии.Наименование КАК НаименованиеВакансии,
	|	Вакансии.ДатаОткрытия КАК ДатаОткрытия,
	|	Вакансии.Ответственный КАК Ответственный,
	|	Вакансии.Ответственный.Наименование КАК КонтактноеЛицо,
	|	Вакансии.Позиция КАК Позиция,
	|	ВЫБОР
	|		КОГДА Вакансии.ПредполагаемыйДоход = 0
	|			ТОГДА """"
	|		ИНАЧЕ Вакансии.ПредполагаемыйДоход
	|	КОНЕЦ КАК ПредполагаемыйДоход,
	|	Вакансии.Условия КАК Условия,
	|	Вакансии.Требования КАК Требования,
	|	Вакансии.Обязанности КАК Обязанности,
	|	ЕСТЬNULL(ШтатноеРасписание.Владелец.Наименование, """") КАК Организация,
	|	ЕСТЬNULL(ШтатноеРасписание.Владелец, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияСсылка,
	|	ЕСТЬNULL(ФизическиеЛица.Ссылка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Вакансии КАК Вакансии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО Вакансии.Позиция = ШтатноеРасписание.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Вакансии.Ответственный.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Вакансии.Ссылка В(&Вакансии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеВакансии";
	
	ТаблицаОписаний = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОписаний.Колонки.Добавить("ЭлектроннаяПочтаКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаОписаний.Колонки.Добавить("ТелефонКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ТаблицаОписаний.Колонки.Добавить("АдресКонтактногоЛица", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Если ТаблицаОписаний.Количество() > 0 Тогда
		
		СписокФизическихЛиц = ТаблицаОписаний.ВыгрузитьКолонку("ФизическоеЛицо");
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокФизическихЛиц);
		
		СписокПользователей = ТаблицаОписаний.ВыгрузитьКолонку("Ответственный");
		СписокПользователей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПользователей);
		
		ЭлектронныеАдресаФизическихЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		ТелефоныФизическихЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
		ЭлектронныеАдресаПользователей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокПользователей, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ТелефоныПользователей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокПользователей, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОписаний Цикл
			
			ЭлектронныеАдресаТекФизическогоЛица = ЭлектронныеАдресаФизическихЛиц.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.ФизическоеЛицо));
			ТелефоныТекФизическогоЛица = ТелефоныФизическихЛиц.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.ФизическоеЛицо));
			
			ЭлектронныеАдресаТекПользователя = ЭлектронныеАдресаПользователей.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.Ответственный));
			ТелефоныТекПользователя = ТелефоныПользователей.НайтиСтроки(ПараметрыОтбора(СтрокаТаблицы.Ответственный));
			
			Если ЭлектронныеАдресаТекФизическогоЛица.Количество() > 0 Тогда
				СтрокаТаблицы.ЭлектроннаяПочтаКонтактногоЛица = ЭлектронныеАдресаТекФизическогоЛица[0].Представление;
			ИначеЕсли ЭлектронныеАдресаТекПользователя.Количество() > 0 Тогда
				СтрокаТаблицы.ЭлектроннаяПочтаКонтактногоЛица = ЭлектронныеАдресаТекПользователя[0].Представление;
			КонецЕсли;
			
			Если ТелефоныТекФизическогоЛица.Количество() > 0 Тогда
				СтрокаТаблицы.ТелефонКонтактногоЛица = ТелефоныТекФизическогоЛица[0].Представление;
			ИначеЕсли ТелефоныТекПользователя.Количество() > 0 Тогда
				СтрокаТаблицы.ТелефонКонтактногоЛица = ТелефоныТекПользователя[0].Представление;
			КонецЕсли;
			
			СтрокаТаблицы.АдресКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				СтрокаТаблицы.ОрганизацияСсылка,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
				СтрокаТаблицы.ДатаОткрытия,
				Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаОписаний;
	
КонецФункции

Процедура УдалитьОписанияВакансии(Вакансия, НаименованияОписаний) Экспорт
	
	Для Каждого НаименованиеОписания Из НаименованияОписаний Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
			НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
			НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОписаниеВакансии(Вакансия, ИдентификаторОписания, ДанныеОписания) Экспорт
	
	НаименованиеОписания = ДанныеОписания.Наименование;
	РеквизитыОписания = ДанныеОписания.Реквизиты;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОписания) Тогда
		ИдентификаторОписания = ИдентификаторОписанияВакансииИзНаименования(НаименованиеОписания);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Делаем запись о новом описании.
		НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Вакансия = Вакансия;
		НоваяЗапись.МестоПубликации = НаименованиеОписания;
		НоваяЗапись.ИдентификаторВакансии = ИдентификаторОписания;
		
		НаборЗаписей.Записать();
		
		// Записываем реквизиты описания.
		НаборЗаписей = РегистрыСведений.ДанныеПубликацииВакансий.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
		НаборЗаписей.Отбор.МестоПубликации.Установить(НаименованиеОписания);
		
		Для Каждого КлючИЗначение Из РеквизитыОписания Цикл
			
			НаборЗаписей.Отбор.ПолеДанных.Установить(КлючИЗначение.Ключ);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Вакансия = Вакансия;
			НоваяЗапись.МестоПубликации = НаименованиеОписания;
			НоваяЗапись.ПолеДанных = КлючИЗначение.Ключ;
			НоваяЗапись.Значение = КлючИЗначение.Значение;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Функция ВыборкаСоставаОписанийВакансий(Вакансии = Неопределено, ТолькоАктуальные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	
	Если ОписанияВакансийДоступны() Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПубликацияВакансий.Вакансия КАК Вакансия,
		|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации,
		|	ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА (100)) КАК ИдентификаторОписания
		|ИЗ
		|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПубликацияВакансий.МестоПубликации) = ТИП(СТРОКА)
		|	#УсловиеОтбораВакансии
		|	#УсловиеОтбораСостоянияВакансии
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторОписания,
		|	Вакансия";
		
		ТекстУсловияОтбораВакансии = ?(Вакансии = Неопределено, "", "И ПубликацияВакансий.Вакансия В (&Вакансии)");
		
		Если ТолькоАктуальные Тогда
			ТекстУсловияОтбораСостоянияВакансии = "И (НЕ ПубликацияВакансий.Вакансия.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Закрыта), ЗНАЧЕНИЕ(Перечисление.СостоянияВакансии.Отменена)))";
		Иначе
			ТекстУсловияОтбораСостоянияВакансии = "";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбораВакансии", ТекстУсловияОтбораВакансии);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеОтбораСостоянияВакансии", ТекстУсловияОтбораСостоянияВакансии);
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка) КАК Вакансия,
		|	"""" КАК МестоПубликации,
		|	"""" КАК ИдентификаторОписания";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДанныхОписанияВакансии(ИдентификаторОписания, Вакансии) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Вакансии", Вакансии);
	Запрос.УстановитьПараметр("ИдентификаторОписания", ИдентификаторОписания);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПубликацияВакансий.Вакансия КАК Вакансия,
	|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации
	|ПОМЕСТИТЬ ОписаниеВакансииДляПечати
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.Вакансия В(&Вакансии)
	|	И (ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА(100))) = &ИдентификаторОписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПубликацииВакансий.Вакансия КАК Вакансия,
	|	ДанныеПубликацииВакансий.ПолеДанных КАК ПолеДанных,
	|	ДанныеПубликацииВакансий.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДанныеПубликацииВакансий КАК ДанныеПубликацииВакансий
	|ГДЕ
	|	(ДанныеПубликацииВакансий.Вакансия, ДанныеПубликацииВакансий.МестоПубликации) В
	|			(ВЫБРАТЬ
	|				ОписаниеВакансииДляПечати.Вакансия КАК Вакансия,
	|				ОписаниеВакансииДляПечати.МестоПубликации КАК МестоПубликации
	|			ИЗ
	|				ОписаниеВакансииДляПечати КАК ОписаниеВакансииДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вакансия";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ОписанияВакансийДоступны() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПубликацияВакансий);
	
КонецФункции

Функция ПараметрыОтбора(Объект)
	
	Возврат Новый Структура("Объект", Объект);
	
КонецФункции

Функция ИдентификаторОписанияВакансииИзНаименования(Знач НаименованиеОписания)
	
	ИдентификаторОписания = "";
	Цифры = "1234567890";
	Буквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ ";
	
	НомерСимвола = 1;
	
	Пока НомерСимвола <= СтрДлина(НаименованиеОписания) Цикл
		
		ТекущийСимвол = Сред(НаименованиеОписания, НомерСимвола, 1);
		Если Найти(Буквы, ВРег(ТекущийСимвол)) = 0 И Найти(Цифры, ТекущийСимвол) = 0 Тогда
			ТекущийСимвол = " ";
		КонецЕсли;
		
		ИдентификаторОписания = ИдентификаторОписания + ТекущийСимвол;
		НомерСимвола = НомерСимвола + 1;
		
	КонецЦикла;
	
	Строки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторОписания, " ");
	
	КоличествоСтрок = Строки.Количество();
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < КоличествоСтрок Цикл
		Строки[ИндексСтроки] = ТРег(Строки[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат СтрСоединить(Строки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

