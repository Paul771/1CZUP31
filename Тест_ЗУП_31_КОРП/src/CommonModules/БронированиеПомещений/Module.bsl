////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру настройки отбора броней.
//
// Параметры:
//  ПараметрПомещение		 - Массив, СправочникСсылка.ТерриторииИПомещения - помещение, по которому необходимы брони.
//  ДатаНачала				 - Дата											 - дата, с которой отбираются брони.
//  ДатаОкончания			 - Дата											 - дата, по которую отбираются брони.
//  ПоказыватьУдаленные		 - Булево										 - показывать помеченные на удаление брони.
//  Пользователь			 - СправочникСсылка.Пользователь				 - пользователь, брони которого отбирать.
//  ПользовательИсключение	 - СправочникСсылка.Пользователь				 - пользователь, брони которого не будут отобраны.
// 
// Возвращаемое значение:
//  Структура - Настройка отбора броней.
//   * ПараметрПомещение - Массив, СправочникСсылка.ТерриторииИПомещения - помещение, по которому необходимы брони.
//   * ДатаНачала - Дата - дата, с которой отбираются брони.
//   * ДатаОкончания - Дата - дата, по которую отбираются брони.
//   * ПоказыватьУдаленные - Булево - показывать помеченные на удаление брони.
//   * Пользователь - СправочникСсылка.Пользователь - пользователь, брони которого отбирать.
//   * ПользовательИсключение - СправочникСсылка.Пользователь - пользователь, брони которого не будут отобраны.
//
Функция ПолучитьНастройкуОтбораБроней(ПараметрПомещение, ДатаНачала, ДатаОкончания,
	ПоказыватьУдаленные = Ложь, Пользователь = Неопределено, ПользовательИсключение = Неопределено) Экспорт
	
	ТипЗнчПользователь = ТипЗнч(Пользователь);
	Если ТипЗнчПользователь = Тип("СправочникСсылка.Пользователи") Тогда
		ПараметрПользователь = Новый Массив;
		ПараметрПользователь.Добавить(Пользователь);
	ИначеЕсли ТипЗнчПользователь = Тип("Массив") Тогда
		ПараметрПользователь = Пользователь;
	Иначе
		ПараметрПользователь = Новый Массив;
	КонецЕсли;
	
	ТипЗнчПользовательИсключение = ТипЗнч(ПользовательИсключение);
	Если ТипЗнчПользовательИсключение = Тип("СправочникСсылка.Пользователи") Тогда
		ПараметрПользовательИсключение = Новый Массив;
		ПараметрПользовательИсключение.Добавить(ПользовательИсключение);
	ИначеЕсли ТипЗнчПользовательИсключение = Тип("Массив") Тогда
		ПараметрПользовательИсключение = ПользовательИсключение;
	Иначе
		ПараметрПользовательИсключение = Новый Массив;
	КонецЕсли;
	
	НастройкаОтбораБроней = Новый Структура;
	НастройкаОтбораБроней.Вставить("Помещения", Помещения(ПараметрПомещение));
	НастройкаОтбораБроней.Вставить("ДатаНачала", ДатаНачала);
	НастройкаОтбораБроней.Вставить("ДатаОкончания", ДатаОкончания);
	НастройкаОтбораБроней.Вставить("ПоказыватьУдаленные", ПоказыватьУдаленные);
	НастройкаОтбораБроней.Вставить("Пользователь", ПараметрПользователь);
	НастройкаОтбораБроней.Вставить("ПользовательИсключение", ПараметрПользовательИсключение);
	
	Возврат НастройкаОтбораБроней;
	
КонецФункции

// Возвращает брони по переданным параметрам.
//
// Параметры:
//  НастройкаОтбораБроней	 - Структура - настройки отбора броней.
//   Описание - см. параметры возвращаемые функцией БронированиеПомещений.ПолучитьНастройкуОтбораБроней().
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица броней.
//
Функция ПолучитьБрони(НастройкаОтбораБроней) Экспорт
	
	ТаблицаБроней = СформироватьТаблицуБроней();
	ЗаполнитьТаблицуБронями(ТаблицаБроней, НастройкаОтбораБроней);
	ЗаполнитьТаблицуПовторяющимисяБронями(ТаблицаБроней, НастройкаОтбораБроней);
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Проверяет наличие пересекающихся броней по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДокументОбъект.Бронь	 - бронь.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - дата исключения брони.
// 
// Возвращаемое значение:
//  Булево - признак наличия пересечений с другими бронями.
//
Функция ЕстьПересекающиесяБрони(Бронь, БроньИсключение = Неопределено, ДатаИсключения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаБроней = ПолучитьПересекающиесяБрони(Бронь, БроньИсключение, ДатаИсключения);
	Возврат ТаблицаБроней.Количество() > 0;
	
КонецФункции

// Возвращает пересекающиеся брони по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДанныеФормыСтруктура	 - бронь.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - дата исключения брони.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица броней.
//
Функция ПолучитьПересекающиесяБрони(Бронь, БроньИсключение = Неопределено, ДатаИсключения = Неопределено) Экспорт
	
	Если Бронь.ТипЗаписи <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.Помещение, Бронь.ДатаНачала, Бронь.ДатаОкончания);
		ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
		
	Иначе
		
		ТаблицаБроней = СформироватьТаблицуБроней();
		
		// Проверка пересечения повторяющейся брони с обычной бронью.
		ТаблицаВозможныхПересечений = СформироватьТаблицуБроней();
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.Помещение, Бронь.ДатаНачалаПовторения, Бронь.ДатаОкончанияПовторения);
		ЗаполнитьТаблицуБронями(ТаблицаВозможныхПересечений, НастройкаОтбораБроней);
		Для Каждого СтрокаПересечение Из ТаблицаВозможныхПересечений Цикл
			
			Если Не БрониПересекаются(Бронь, СтрокаПересечение) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБроней.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПересечение);
			
		КонецЦикла;
		
		// Проверка пересечения повторяющейся брони с повторяющимися бронями.
		НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
			Бронь.Помещение, Бронь.ДатаНачалаПовторения, Бронь.ДатаОкончанияПовторения);
		РезультатЗапроса = ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не БрониПересекаются(Бронь, Выборка) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБроней.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаНачала = Выборка.ДатаНачалаПовторения;
			НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончанияПовторения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ссылка", Бронь.Ссылка);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
	УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения);
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Возвращает таблицу рекомендаций по переданным параметрам.
//
// Параметры:
//  Бронь			 - ДанныеФормыСтруктура	 - бронь, по времени которой формируется таблица.
//  БроньИсключение	 - ДокументСсылка.Бронь	 - бронь, которую следует исключать из проверке.
//  ДатаИсключения	 - Дата					 - дата исключения брони.
//  ВесьДень		 - Булево				 - признак того что таблица формируется за весь день, а не за точное время.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица броней.
//
Функция ПолучитьТаблицуРекомендаций(Бронь,
	БроньИсключение = Неопределено, ДатаИсключения = Неопределено, ВесьДень = Истина) Экспорт
	
	// Формирование данных о бронях.
	Помещение = Бронь.Помещение;
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно получить таблицу рекомендаций - не указано помещение.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Формирование таблицы рекомендаций.
	ТаблицаРекомендаций = Новый ТаблицаЗначений;
	ТаблицаРекомендаций.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"Занят", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗанятости"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"Отклонение", Новый ОписаниеТипов("Число"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"ОтклонениеСтрокой", Новый ОписаниеТипов("Строка"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"РекомендацияСтрокой", Новый ОписаниеТипов("Строка"));
	
	// Для повторяющихся событий рекомендации не рассчитываются.
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Возврат ТаблицаРекомендаций;
	КонецЕсли;
	
	ДатаНачала = Бронь.ДатаНачала;
	Если ВесьДень Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		ДатаНачала = НачалоДня(ДатаНачала);
	Иначе
		ОтображатьВремяС = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
		ДатаНачала = НачалоДня(ДатаНачала) + ОтображатьВремяС * 3600;
	КонецЕсли;
	
	ДатаОкончания = Бронь.ДатаОкончания;
	Если ВесьДень Тогда
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = КонецДня(ДатаНачала);
		КонецЕсли;
		ДатаОкончания = КонецДня(ДатаОкончания);
	Иначе
		ОтображатьВремяПо = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
		ДатаОкончания = НачалоДня(ДатаНачала) + (24 - ОтображатьВремяПо) * 3600;
	КонецЕсли;
	
	Длительность = Бронь.ДатаОкончания - Бронь.ДатаНачала;
	Если Не ЗначениеЗаполнено(Длительность) Тогда
		Длительность = 3600;
	КонецЕсли;
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		Помещение, ДатаНачала, ДатаОкончания);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	
	ПараметрыОтбора = Новый Структура("Ссылка", Бронь.Ссылка);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
	УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения);
	
	// Формирование таблицы занятости.
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗанятости.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗанятости.Колонки.Добавить(
		"Занят", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗанятости"));
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
	
	Для Каждого СтрокаБрони Из ТаблицаБроней Цикл
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Перечисления.СостоянияЗанятости.Занят,
			СтрокаБрони.ДатаНачала, СтрокаБрони.ДатаОкончания,
			ДатаНачала, ДатаОкончания);
	КонецЦикла;
	
	// Заполнение таблицы рекомендаций.
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаРекомендаций, Перечисления.СостоянияЗанятости.Доступен,
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Для Каждого СтрокаРекомендации Из ТаблицаРекомендаций Цикл
		
		СтрокаРекомендации.РекомендацияСтрокой =
			ПолучитьРекомендациюСтрокой(СтрокаРекомендации.ДатаНачала, СтрокаРекомендации.ДатаОкончания);
		ДлительностьРекомендации = СтрокаРекомендации.ДатаОкончания - СтрокаРекомендации.ДатаНачала;
		
		Если ДлительностьРекомендации >= Длительность Тогда
			СтрокаРекомендации.Отклонение = 0;
			СтрокаРекомендации.ОтклонениеСтрокой = "";
			Продолжить;
		КонецЕсли;
		
		Отклонение = Длительность - ДлительностьРекомендации;
		
		Часов = Цел((Отклонение) / 3600);
		ПодписьЧасов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 час;;%1 часа;%1 часов;'"), Часов);
		
		Минут = Цел((Отклонение - Часов * 3600) / 60);
		ПодписьМинут = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;'"), Минут);
		
		Если Часов + Минут = 0 Тогда
			СтрокаРекомендации.Отклонение = 0;
			СтрокаРекомендации.ОтклонениеСтрокой = "";
			Продолжить;
		КонецЕсли;
		
		ПодписьЧасовМинут = "";
		Если Часов <> 0 Тогда
			ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЧасовМинут, " ", ПодписьЧасов);
		КонецЕсли;
		
		Если Минут <> 0 Тогда
			ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьЧасовМинут, " ", ПодписьМинут);
		КонецЕсли;
		
		СтрокаРекомендации.Отклонение = Отклонение;
		СтрокаРекомендации.ОтклонениеСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Меньше нужного на %1'"), ПодписьЧасовМинут);
		
	КонецЦикла;
	
	ТаблицаРекомендаций.Сортировать("Отклонение, ДатаНачала");
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Формирует список рекомендаций других помещений для брони.
//
// Параметры:
//  Бронь - ДанныеФормыСтруктура - бронь, по которой формируются рекомендации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - рекомендации помещений.
//
Функция РекомендацииПомещений(Бронь) Экспорт
	
	// Формирование данных о брони.
	Если Не ЗначениеЗаполнено(Бронь.ДатаНачала) Или Не ЗначениеЗаполнено(Бронь.ДатаОкончания) Тогда
		ТекстОшибки = НСтр("ru = 'Невозможно получить рекомендации помещений - не указано время брони.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Формирование таблицы рекомендаций.
	ТаблицаРекомендаций = Новый ТаблицаЗначений;
	ТаблицаРекомендаций.Колонки.Добавить(
		"Помещение", Новый ОписаниеТипов("СправочникСсылка.ТерриторииИПомещения"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаРекомендаций.Колонки.Добавить(
		"ДоступнаСхема", Новый ОписаниеТипов("Булево"));
	
	// Для повторяющихся событий рекомендации не рассчитываются.
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Возврат ТаблицаРекомендаций;
	КонецЕсли;
	
	// Подбор рекомендации на отображаемых территориях.
	ОтображаемыеТерритории = БронированиеПомещений.ПолучитьПерсональнуюНастройку("ОтображаемыеТерритории");
	
	ОтображаемыеПомещения = ПолучитьОтображаемыеПомещения(ОтображаемыеТерритории);
	ИндексИсходногоПомещения = ОтображаемыеПомещения.Найти(Бронь.Помещение);
	Если ИндексИсходногоПомещения <> Неопределено Тогда
		ОтображаемыеПомещения.Удалить(ИндексИсходногоПомещения);
	КонецЕсли;
	
	ОтображаемыеБрони = ПолучитьОтображаемыеБрони(
		Бронь.ДатаНачала, Бронь.ДатаОкончания, ОтображаемыеПомещения);
	
	Для Каждого ОтображаемаяБронь Из ОтображаемыеБрони Цикл
		
		ИндексПомещения = ОтображаемыеПомещения.Найти(ОтображаемаяБронь.Помещение);
		Если ИндексПомещения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтображаемаяБронь.ДатаНачала < Бронь.ДатаОкончания
			И ОтображаемаяБронь.ДатаОкончания > Бронь.ДатаНачала Тогда
			ОтображаемыеПомещения.Удалить(ИндексПомещения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображаемыеПомещения.Количество() = 0 Тогда
		Возврат ТаблицаРекомендаций;
	КонецЕсли;
	
	// Сортировка по удаленности.
	РодительИсходногоПомещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Бронь.Помещение, "Родитель");
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТерриторииИПомещения.Ссылка КАК Ссылка,
		|	ТерриторииИПомещения.Наименование КАК Наименование,
		|	ТерриторииИПомещения.Родитель КАК Родитель,
		|	ПРЕДСТАВЛЕНИЕ(ТерриторииИПомещения.Родитель) КАК РодительПредставление,
		|	ТерриторииИПомещения.Вместимость КАК Вместимость,
		|	ТерриторииИПомещения.ДоступнаСхема
		|ИЗ
		|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
		|ГДЕ
		|	ТерриторииИПомещения.Ссылка В(&ОтображаемыеПомещения)
		|	И ТерриторииИПомещения.Родитель = &РодительИсходногоПомещения
		|	И ТерриторииИПомещения.ДоступноБронирование = ИСТИНА
		|	И ТерриторииИПомещения.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТерриторииИПомещения.Ссылка КАК Ссылка,
		|	ТерриторииИПомещения.Наименование КАК Наименование,
		|	ТерриторииИПомещения.Родитель КАК Родитель,
		|	ТерриторииИПомещенияРодители.Представление КАК РодительПредставление,
		|	ТерриторииИПомещения.Вместимость КАК Вместимость,
		|	ТерриторииИПомещения.ДоступнаСхема
		|ИЗ
		|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриторииИПомещения КАК ТерриторииИПомещенияРодители
		|		ПО ТерриторииИПомещения.Родитель = ТерриторииИПомещенияРодители.Ссылка
		|ГДЕ
		|	ТерриторииИПомещения.Ссылка В(&ОтображаемыеПомещения)
		|	И ТерриторииИПомещения.Родитель <> &РодительИсходногоПомещения
		|	И ТерриторииИПомещения.ДоступноБронирование = ИСТИНА
		|	И ТерриторииИПомещения.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	РодительПредставление,
		|	Наименование";
	Запрос.УстановитьПараметр("ОтображаемыеПомещения", ОтображаемыеПомещения);
	Запрос.УстановитьПараметр("РодительИсходногоПомещения", РодительИсходногоПомещения);
	Результат = Запрос.ВыполнитьПакет();
	
	// Помещения с тем же родителем.
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеПомещения = ФорматированноеПредставлениеПомещения(
			Выборка.Наименование, Выборка.Вместимость, Выборка.РодительПредставление);
		НоваяСтрока = ТаблицаРекомендаций.Добавить();
		НоваяСтрока.Помещение = Выборка.Ссылка;
		НоваяСтрока.Представление = Строка(ПредставлениеПомещения);
		НоваяСтрока.ДоступнаСхема = Выборка.ДоступнаСхема;
	КонецЦикла;
	
	// Остальные помещения.
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеПомещения = ФорматированноеПредставлениеПомещения(
			Выборка.Наименование, Выборка.Вместимость, Выборка.РодительПредставление);
		НоваяСтрока = ТаблицаРекомендаций.Добавить();
		НоваяСтрока.Помещение = Выборка.Ссылка;
		НоваяСтрока.Представление = Строка(ПредставлениеПомещения);
		НоваяСтрока.ДоступнаСхема = Выборка.ДоступнаСхема;
	КонецЦикла;
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Возвращает текстовое описание брони.
//
// Параметры:
//  Бронь			 - ДокументСсылка.Бронь	 - бронь.
//  ПолноеОписание	 - Булево				 - признак того что требуется формировать полное описание.
// 
// Возвращаемое значение:
//  Строка - описание брони.
//
Функция ПолучитьОписаниеБрони(Бронь, ПолноеОписание = Истина) Экспорт
	
	ОписаниеБрони = "";
	Если Не ЗначениеЗаполнено(Бронь) Тогда
		Возврат ОписаниеБрони;
	КонецЕсли;
	
	ДанныеБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Бронь,
		"Ссылка, Помещение, ДатаНачала, ДатаОкончания, ВесьДень, Комментарий, Пользователь");
	
	ОписаниеПомещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бронь помещения %1'"), ДанныеБрони.Помещение);
	ОписаниеКогда = БронированиеПомещенийКлиентСервер.СформироватьДатыБрони(
		ДанныеБрони.ДатаНачала,
		ДанныеБрони.ДатаОкончания,
		ДанныеБрони.ВесьДень);
	
	ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ОписаниеПомещения);
	ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ОписаниеКогда);
	
	Если ПолноеОписание Тогда
		ОписаниеБрони = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 забронировал помещение %2 %3.'"),
			ДанныеБрони.Пользователь,
			ДанныеБрони.Помещение,
			ОписаниеКогда);
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеБрони, Символы.ПС, ДанныеБрони.Комментарий);
	Иначе
		ОписаниеКогда = БронированиеПомещенийКлиентСервер.СформироватьТекстовоеОписаниеДаты(
			ДанныеБрони.ДатаНачала, Истина);
		ОписаниеБрони = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Забронировано помещение %1 %2'"),
			ДанныеБрони.Помещение,
			ОписаниеКогда);
	КонецЕсли;
	
	Возврат ОписаниеБрони;
	
КонецФункции

// Возвращает персональную настройку текущего пользователя по ключу.
//
// Параметры:
//  Настройка	 - Строка	 - ключ настройки.
// 
// Возвращаемое значение:
//  Любой - значение настройки.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ОтображатьВремяС" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ОтображатьВремяС",
			9);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ОтображатьВремяПо",
			5);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"РазмерЯчейкиВремени",
			15);
		
	ИначеЕсли Настройка = "ПоказыватьУдаленные" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ПоказыватьУдаленные",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображаемыеТерритории" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"БронированиеПомещений",
			"ОтображаемыеТерритории",
			Неопределено);
		Если Значение = Неопределено Тогда
			Значение = ОтображаемыеТерриторииПользователяПоУмолчанию();
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка	 - Строка	 - ключ настройки.
//  Значение	 - Любой	 - значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ОтображатьВремяС" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображатьВремяС",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображатьВремяПо",
			Значение);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"РазмерЯчейкиВремени",
			Значение);
		
	ИначеЕсли Настройка = "ПоказыватьУдаленные" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ПоказыватьУдаленные",
			Значение);
		
	ИначеЕсли Настройка = "ОтображаемыеТерритории" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"БронированиеПомещений",
			"ОтображаемыеТерритории",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Отображает планировщик броней.
//
// Параметры:
//  Планировщик	 - Планировщик	 - планировщик.
//  Параметры	 - Структура	 - параметры броней.
// 
// Возвращаемое значение:
//  Булево - признак того что в планировщике есть данные для отображения.
//
Функция ОтобразитьПланировщикБроней(Планировщик, Параметры) Экспорт
	
	// Установка настроек отображения планировщика.
	УстановитьНастройкиОтображения(Планировщик);
	
	// Установка шкалы времени планировщика.
	РазмерЯчейкиВремени = ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени");
	УстановитьШкалуВремени(Планировщик, РазмерЯчейкиВремени);
	
	// Установка периодов отображения планировщика.
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	ОтображаемаяДатаНачала = НачалоДня(Параметры.Дата);
	ОтображаемаяДатаОкончания = КонецДня(Параметры.Дата);
	Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
	ФонПланировщика = Планировщик.ИнтервалыФона.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
	ФонПланировщика.Цвет = WebЦвета.Белый;
	
	// Отбор помещений по расположению и вместимости.
	ОтображаемыеПомещения = ПолучитьОтображаемыеПомещения(Параметры.Расположение, Параметры.Вместимость);
	
	// Получение отображаемых броней.
	ОтображаемыеБрони = ПолучитьОтображаемыеБрони(
		ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтображаемыеПомещения);
	
	// Отбор помещений по доступности в нужное время.
	Если ЗначениеЗаполнено(Параметры.ВремяНачала) Или ЗначениеЗаполнено(Параметры.ВремяОкончания) Тогда
		
		ВариантОтбора = "";
		
		Если ЗначениеЗаполнено(Параметры.ВремяНачала) Тогда
			НужнаяДатаНачала = ОтображаемаяДатаНачала + (Параметры.ВремяНачала - НачалоДня(Параметры.ВремяНачала));
			ВариантОтбора = "ПоДатеНачала";
		Иначе
			НужнаяДатаНачала = Неопределено;
		КонецЕсли;
		
		Если Параметры.ВремяОкончания <> Параметры.ВремяНачала Тогда
			НужнаяДатаОкончания = ОтображаемаяДатаНачала + (Параметры.ВремяОкончания - НачалоДня(Параметры.ВремяОкончания));
			ВариантОтбора = "ПоДатеНачалаИОкончания";
		Иначе
			НужнаяДатаОкончания = Неопределено;
		КонецЕсли;
		
		Для Каждого Бронь Из ОтображаемыеБрони Цикл
			
			ИндексПомещения = ОтображаемыеПомещения.Найти(Бронь.Помещение);
			Если ИндексПомещения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВариантОтбора = "ПоДатеНачала"
				И Бронь.ДатаНачала <= НужнаяДатаНачала
				И Бронь.ДатаОкончания > НужнаяДатаНачала Тогда
				ОтображаемыеПомещения.Удалить(ИндексПомещения);
			ИначеЕсли ВариантОтбора = "ПоДатеНачалаИОкончания"
				И Бронь.ДатаНачала < НужнаяДатаОкончания
				И Бронь.ДатаОкончания > НужнаяДатаНачала Тогда
				ОтображаемыеПомещения.Удалить(ИндексПомещения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка измерений планировщика.
	УстановитьИзмеренияПланировщика(Планировщик, ОтображаемыеПомещения);
	
	Если ОтображаемыеПомещения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполнение элементов планировщика
	Планировщик.Элементы.Очистить();
	Для Каждого Бронь Из ОтображаемыеБрони Цикл
		
		Если ОтображаемыеПомещения.Найти(Бронь.Помещение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся;
		Иначе
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.Событие;
		КонецЕсли;
		
		Элемент = Планировщик.Элементы.Добавить(Бронь.ДатаНачала, Бронь.ДатаОкончания);
		ПредставлениеЭлемента = Строка(Бронь.Пользователь);
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПредставлениеЭлемента, ", ", Бронь.Комментарий);
		Элемент.Текст = ПредставлениеЭлемента;
		Элемент.ЦветФона = ЦветаСтиля.ЦветКалендаряПоУмолчанию;
		УстановитьЗначениеИзмерения(Элемент, "Помещение", Бронь.Помещение);
		
		Элемент.Значение = Новый Структура(
			"Ссылка, Автор, Пользователь, ДатаНачала, ДатаОкончания, ВесьДень, ПометкаУдаления,
			|ТипЗаписи, Помещение, Комментарий, ДатаНачалаИсходная, ВидЭлемента");
		ЗаполнитьЗначенияСвойств(Элемент.Значение, Бронь);
		Элемент.Значение.ВидЭлемента = ВидЭлемента;
		Элемент.Значение.ДатаНачалаИсходная = Бронь.ДатаНачала;
		
		Если Бронь.ПометкаУдаления Тогда
			Элемент.Картинка = БиблиотекаКартинок.ЗаписьКалендаряУдалена;
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьОтображаемыеЧасы(Планировщик);
	
	Возврат Истина;
	
КонецФункции

// Обработчик подписки БронированиеПередЗаписьюПредмета.
//
Процедура БронированиеПередЗаписьюПредмета(Источник, Отказ) Экспорт
	
	// Подписка ничего не делает при обмене данными.
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подписка ничего не делает, если отключено бронирование помещений.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем предыдущие значения реквизитов для проверки на изменении в подписке ПриЗаписи.
	УстановитьДополнительноеСвойствоЭтоНовый(Источник);
	УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Источник);
	
КонецПроцедуры

// Обработчик подписки БронированиеПриЗаписиПредмета.
//
Процедура БронированиеПриЗаписиПредмета(Источник, Отказ) Экспорт
	
	// Подписка ничего не делает при обмене данными.
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подписка ничего не делает, если отключено бронирование помещений.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем изменение реквизитов предмета.
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
		ОбработатьИзменениеРеквизитовПредмета(Источник,
			Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов);
	КонецЕсли;
	
	// Если предмет помечен на удаление, то бронировать помещение не нужно.
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Выполняем попытку забронировать помещение.
	БронированиеПомещенийПереопределяемый.ПриЗаписиПредметаБронирования(Источник, Отказ);
	
КонецПроцедуры

// Проверяет доступно ли бронирование помещения текущему пользователю.
//
// Параметры:
//  Помещение	 - СправочникСсылка.ТерриторииИПомещения - помещение.
// 
// Возвращаемое значение:
//  Булево - возможно бронирование.
//
Функция ДоступноБронированиеПомещения(Помещение) Экспорт
	
	БрониВводитОтветственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Помещение, "БрониВводитОтветственный");
	Если Не БрониВводитОтветственный Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Ложь;
	БронированиеПомещенийПереопределяемый.ПриОпределенииПраваБронирования(Помещение, ЕстьПраво);
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность брони помещения.
//
// Параметры:
//  Помещение		 - СправочникСсылка.ТерриторииИПомещения - помещение.
//  ДатаНачала		 - Дата									 - дата, с которой отбираются брони.
//  ДатаОкончания	 - Дата									 - дата, по которую отбираются брони.
//  ДопустимыеПользователи - Массив - пользователи, брони которых можно использовать.
//  Предмет			 - ЛюбаяСсылка			 				 - ссылка на объект, на основании которого создается бронь.
//  ТекстОшибки		 - Строка								 - текст ошибки брони помещения.
//  ВременаБезБрони	 - Массив								 - возвращаемый массив времен без брони.
//  БрониБезСвязи	 - Массив								 - возвращаемый массив броней без связи.
// 
// Возвращаемое значение:
//  Булево - бронирование помещения возможно.
//
Функция ВозможнаБроньПомещения(Помещение, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
	ТекстОшибки, ВременаБезБрони = Неопределено, БрониБезСвязи = Неопределено) Экспорт
	
	Если ВременаБезБрони = Неопределено Тогда
		ВременаБезБрони = Новый Массив;
	КонецЕсли;
	
	Если БрониБезСвязи = Неопределено Тогда
		БрониБезСвязи = Новый Массив;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Помещение)
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыПомещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Помещение, "ДоступноБронирование, Ответственный");
	Если Не РеквизитыПомещения.ДоступноБронирование Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьБрони(Помещение, ДатаНачала, ДатаОкончания, ДопустимыеПользователи) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Помещение %1 уже забронировано другим пользователем.'"),
			Помещение);
		Возврат Ложь;
	КонецЕсли;
	
	ВременаБезБрони = Новый Массив;
	БрониБезСвязи = Новый Массив;
	Если ПроверитьНаличиеБрони(Помещение, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
		ВременаБезБрони, БрониБезСвязи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВременаБезБрони.Количество() <> 0 И Не ДоступноБронированиеПомещения(Помещение) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Помещение %1 разрешено бронировать только ответственному за него (%2).'"),
			Помещение,
			РеквизитыПомещения.Ответственный);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Бронь Из БрониБезСвязи Цикл
		Если ЗначениеЗаполнено(Бронь.Предмет) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Помещение %1 уже забронировано для %2.'"),
				Помещение,
				Бронь.Предмет);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заполняет дерево территорий в соответствии с настройками пользователя.
//
// Параметры:
//  Дерево - ДеревоЗначений - заполняемое дерево территорий.
//  ОтображатьУдаленные - Булево - включать помеченные на удаление территории в дерево.
//  ТолькоДоступныеДляБронирования - Булево - отображать территории, недоступные для бронирования.
//
Процедура ЗаполнитьДеревоТерриторий(Дерево, ОтображатьУдаленные, ТолькоДоступныеДляБронирования = Истина) Экспорт
	
	Дерево.Строки.Очистить();
	
	ЗаполнятьОтображаемыеТерритории = (Дерево.Колонки.Найти("ОтображатьТерриторию") <> Неопределено);
	Если ЗаполнятьОтображаемыеТерритории Тогда
		ОтображаемыеТерритории = БронированиеПомещений.ПолучитьПерсональнуюНастройку("ОтображаемыеТерритории");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТерриторииИПомещения.Ссылка,
		|	ТерриторииИПомещения.Родитель,
		|	ТерриторииИПомещения.ПометкаУдаления,
		|	ТерриторииИПомещения.Наименование,
		|	ТерриторииИПомещения.ДоступноБронирование,
		|	ТерриторииИПомещения.Вместимость,
		|	ТерриторииИПомещения.Ответственный,
		|	ТерриторииИПомещения.Описание,
		|	ТерриторииИПомещения.БрониВводитОтветственный,
		|	ТерриторииИПомещения.ДоступнаСхема
		|ИЗ
		|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения";
	Если Не ОтображатьУдаленные Тогда
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Не ТерриторииИПомещения.ПометкаУдаления";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование ИЕРАРХИЯ";
	
	ДоступныеТерритории = Запрос.Выполнить().Выгрузить();
	
	Если ТолькоДоступныеДляБронирования Тогда
		
		// Территории, на которых нет доступных для бронирования помещений не отображаются.
		ДоступныеТерритории.Колонки.Добавить("УчаствуетВБронировании", Новый ОписаниеТипов("Булево"));
		ПараметрыОтбора = Новый Структура("ДоступноБронирование", Истина);
		ДоступныеДляБронированияПомещения = ДоступныеТерритории.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ДоступноеДляБронированиеПомещения Из ДоступныеДляБронированияПомещения Цикл
			
			ДоступноеДляБронированиеПомещения.УчаствуетВБронировании = Истина;
			
			РодительДоступнойТерритории = ДоступныеТерритории.Найти(ДоступноеДляБронированиеПомещения.Родитель, "Ссылка");
			Пока РодительДоступнойТерритории <> Неопределено Цикл
				Если РодительДоступнойТерритории.УчаствуетВБронировании Тогда
					Прервать;
				КонецЕсли;
				РодительДоступнойТерритории.УчаствуетВБронировании = Истина;
				РодительДоступнойТерритории = ДоступныеТерритории.Найти(РодительДоступнойТерритории.Родитель, "Ссылка");
			КонецЦикла;
			
		КонецЦикла;
		ПараметрыОтбора = Новый Структура("УчаствуетВБронировании", Ложь);
		НеУчаствующиеВБронированииТерритории = ДоступныеТерритории.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НеУчаствующиеВБронированииТерритория Из НеУчаствующиеВБронированииТерритории Цикл
			ДоступныеТерритории.Удалить(НеУчаствующиеВБронированииТерритория);
		КонецЦикла;
		
		// Если доступна только одна территория первого уровня и она не доступна для бронирования - не отображаем ее.
		ПараметрыОтбора = Новый Структура("Родитель", Справочники.ТерриторииИПомещения.ПустаяСсылка());
		КорневыеТерритории = ДоступныеТерритории.НайтиСтроки(ПараметрыОтбора);
		Если КорневыеТерритории.Количество() = 1 Тогда
			КорневаяТерритория = КорневыеТерритории[0];
			Если Не КорневаяТерритория.ДоступноБронирование Тогда
				ДоступныеТерритории.Удалить(КорневаяТерритория);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение дерева территорий.
	Для Каждого Территория Из ДоступныеТерритории Цикл
		
		Родитель = Территория.Родитель;
		Если Не ЗначениеЗаполнено(Родитель) Тогда 
			НоваяСтрока = Дерево.Строки.Добавить();
		Иначе	
			НайденнаяСтрока = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
			Иначе
				НоваяСтрока = Дерево.Строки.Добавить();
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Территория);
		Если ЗначениеЗаполнено(Территория.Вместимость) Тогда
			НоваяСтрока.Наименование = СтрШаблон(НСтр("ru = '%1, %2 чел.'"),
				Территория.Наименование,
				Территория.Вместимость);
		КонецЕсли;
		
		Если Не ЗаполнятьОтображаемыеТерритории Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтображаемыеТерритории.Найти(НоваяСтрока.Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.ОтображатьТерриторию = Истина;
		РодительОтображаемойТерритории = НоваяСтрока.Родитель;
		Пока РодительОтображаемойТерритории <> Неопределено Цикл
			Если РодительОтображаемойТерритории.ОтображатьТерриторию Тогда
				Прервать;
			КонецЕсли;
			РодительОтображаемойТерритории.ОтображатьТерриторию = Истина;
			РодительОтображаемойТерритории = РодительОтображаемойТерритории.Родитель;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает отображаемые территории, получая данные из дерева территорий.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево территорий, из которого берутся данные об отображаемых территориях.
//
// Возвращаемое значение:
//  Массив - отображаемые территории.
//
Функция ОтображаемыеТерриторииИзДереваТерриторий(Дерево) Экспорт
	
	ОтображаемыеТерритории = Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтображатьТерриторию", Истина);
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина); 
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОтображаемыеТерритории.Добавить(НайденнаяСтрока.Ссылка);
	КонецЦикла;
	
	Возврат ОтображаемыеТерритории;
	
КонецФункции

// Устанавливает условное оформление территорий на форме.
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных	 - содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеТерритории(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Доступные для бронирования территории.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступноБронирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));

	// Помеченные на удаление доступные для бронирования территории.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииНаименование");
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступноБронирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, , , Истина));
	
	// Гиперссылка схемы территории.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТерриторииДоступнаСхема");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Территории.ДоступнаСхема");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Формирует форматированное представление помещения.
//
// Параметры:
//  Наименование - Строка - наименование помещения.
//  Вместимость - Число - вместимость помещения.
//  Родитель - Строка - представление территории верхнего уровня.
//  СловаПоиска - Массив - слова поиска, которые необходимо выделить.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - форматированное представление помещения.
//
Функция ФорматированноеПредставлениеПомещения(Наименование, Вместимость, Родитель, СловаПоиска = Неопределено) Экспорт
	
	Если СловаПоиска = Неопределено Тогда
		СловаПоиска = Новый Массив;
	КонецЕсли;
	
	ПредставлениеПомещения = Новый Массив;
	ПредставлениеПомещения.Добавить(Наименование);
	
	// Выделяем найденные слова поиска.
	Для Каждого СловоПоиска Из СловаПоиска Цикл
		
		ДлинаСловаПоиска = СтрДлина(СловоПоиска);
		
		НовоеПредставлениеПомещения = Новый Массив;
		НайденоСловоПоиска = Ложь;
		Для Каждого СловоПредставления Из ПредставлениеПомещения Цикл
			
			Если НайденоСловоПоиска Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СловоПредставления) = Тип("ФорматированнаяСтрока") Тогда
				НовоеПредставлениеПомещения.Добавить(СловоПредставления);
				Продолжить;
			КонецЕсли;
			
			ПозицияСловаПоиска = СтрНайти(СловоПредставления, СловоПоиска);
			Если ПозицияСловаПоиска = 0 Тогда
				НовоеПредставлениеПомещения.Добавить(СловоПредставления);
				Продолжить;
			КонецЕсли;
			
			НовоеПредставлениеПомещения.Добавить(Лев(СловоПредставления, ПозицияСловаПоиска - 1));
			НовоеПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(СловоПоиска,
				ШрифтыСтиля.ВыделениеТекстаВСпискеВыбораШрифт,
				ЦветаСтиля.ВыделениеТекстаВСпискеВыбораЦвет));
			НовоеПредставлениеПомещения.Добавить(Сред(СловоПредставления, ПозицияСловаПоиска + ДлинаСловаПоиска));
			
		КонецЦикла;
		ПредставлениеПомещения = НовоеПредставлениеПомещения;
		
	КонецЦикла;
	
	// Добавляем описание вместимости.
	Если ЗначениеЗаполнено(Вместимость) Тогда
		ПодписьЧеловек = НСтр("ru = 'чел.'");
		ПредставлениеВместимости = СтрШаблон(", %1 %2", Вместимость, ПодписьЧеловек);
		ПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВместимости, ,
			ЦветаСтиля.ВспомогательныйТекстТерриторий));
	КонецЕсли;
	
	// Добавление описание территории верхнего уровня.
	Если ЗначениеЗаполнено(Родитель) Тогда
		ПредставлениеРодитель = СтрШаблон(", %1", Родитель);
		ПредставлениеПомещения.Добавить(Новый ФорматированнаяСтрока(ПредставлениеРодитель, ,
			ЦветаСтиля.ВспомогательныйТекстТерриторий));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПомещения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает пустую таблицу броней.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица броней.
//
Функция СформироватьТаблицуБроней()
	
	ТаблицаБроней = Новый ТаблицаЗначений;
	
	ТаблицаБроней.Колонки.Добавить(
		"Ссылка", Новый ОписаниеТипов("ДокументСсылка.Бронь"));
	ТаблицаБроней.Колонки.Добавить(
		"ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаБроней.Колонки.Добавить(
		"ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаБроней.Колонки.Добавить(
		"ВесьДень", Новый ОписаниеТипов("Булево"));
	ТаблицаБроней.Колонки.Добавить(
		"Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаБроней.Колонки.Добавить(
		"Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаБроней.Колонки.Добавить(
		"Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаБроней.Колонки.Добавить(
		"ТипЗаписи", Новый ОписаниеТипов("ПеречислениеСсылка.ТипЗаписиКалендаря"));
	ТаблицаБроней.Колонки.Добавить(
		"Помещение", Новый ОписаниеТипов("СправочникСсылка.ТерриторииИПомещения"));
	ТаблицаБроней.Колонки.Добавить(
		"ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ТаблицаБроней.Колонки.Добавить(
		"Предмет", Справочники.ТипВсеСсылки());
	
	Возврат ТаблицаБроней;
	
КонецФункции

// Заполняет таблицу броней данными о бронях.
//
// Параметры:
//  ТаблицаБроней			 - ТаблицаЗначений	 - таблица броней.
//  НастройкаОтбораБроней	 - Структура		 - настройки отбора броней.
//
Процедура ЗаполнитьТаблицуБронями(ТаблицаБроней, НастройкаОтбораБроней)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Бронь.Ссылка,
		|	Бронь.ДатаНачала,
		|	Бронь.ДатаОкончания,
		|	Бронь.ВесьДень,
		|	Бронь.Автор,
		|	Бронь.Пользователь,
		|	Бронь.Комментарий,
		|	Бронь.ТипЗаписи,
		|	Бронь.Помещение,
		|	Бронь.ПометкаУдаления,
		|	Бронь.Предмет
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Помещение В(&МассивПомещений)
		|	И Бронь.ДатаНачала < &ДатаОкончания
		|	И Бронь.ДатаОкончания > &ДатаНачала
		|	И Бронь.ТипЗаписи <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И Бронь.ПометкаУдаления = ЛОЖЬ
		|	И Бронь.Пользователь В (&Пользователь)
		|	И НЕ (Бронь.Пользователь В (&ПользовательИсключение))";
	
	Если Не ЗначениеЗаполнено(НастройкаОтбораБроней.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Бронь.ДатаНачала < &ДатаОкончания", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПоказыватьУдаленные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Бронь.ПометкаУдаления = ЛОЖЬ", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.Пользователь.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("Пользователь", НастройкаОтбораБроней.Пользователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Бронь.Пользователь В (&Пользователь)", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПользовательИсключение.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("ПользовательИсключение", НастройкаОтбораБроней.ПользовательИсключение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ (Бронь.Пользователь В (&ПользовательИсключение))", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПомещений", НастройкаОтбораБроней.Помещения);
	Запрос.УстановитьПараметр("ДатаНачала", НастройкаОтбораБроней.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", НастройкаОтбораБроней.ДатаОкончания);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаБроней.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу броней данными о повторяющихся бронях.
//
// Параметры:
//  ТаблицаБроней - ТаблицаЗначений - возвращаемый параметр. Таблица броней.
//  НастройкаОтбораБроней - Структура - настройки отбора броней.
//
Процедура ЗаполнитьТаблицуПовторяющимисяБронями(ТаблицаБроней, НастройкаОтбораБроней)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней);
	Выборка = РезультатЗапроса.Выбрать();
	
	РаботаСРабочимКалендарем.ЗаполнитьТаблицуПовторяющимисяСобытиями(ТаблицаБроней,
		Выборка, НастройкаОтбораБроней.ДатаНачала, НастройкаОтбораБроней.ДатаОкончания);
	
КонецПроцедуры

// Возвращает результат запроса повторяющихся событий.
//
// Параметры:
//  НастройкаОтбораБроней	 - Структура - настройки отбора броней.
// 
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса повторяющихся событий.
//
Функция ПолучитьРезультатЗапросаПовторяющихсяСобытий(НастройкаОтбораБроней)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Бронь.Ссылка,
		|	Бронь.ДатаНачала,
		|	Бронь.ДатаОкончания,
		|	Бронь.ВесьДень,
		|	Бронь.Автор,
		|	Бронь.Пользователь,
		|	Бронь.Комментарий,
		|	Бронь.ТипЗаписи,
		|	Бронь.Помещение,
		|	Бронь.ПометкаУдаления,
		|	Бронь.Предмет,
		|	Бронь.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	Бронь.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	) КАК ПовторениеПоДням,
		|	Бронь.ДатаНачалаПовторения,
		|	Бронь.ДатаОкончанияПовторения,
		|	Бронь.ИнтервалПовторения,
		|	Бронь.КоличествоПовторов,
		|	Бронь.ПовторениеПоДнямМесяца,
		|	Бронь.ПовторениеПоМесяцам,
		|	Бронь.ЧастотаПовторения
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Помещение В(&МассивПомещений)
		|	И Бронь.ДатаНачалаПовторения < &ДатаОкончания
		|	И Бронь.ДатаОкончанияПовторения >= &ДатаНачала
		|	И Бронь.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И Бронь.ПометкаУдаления = ЛОЖЬ
		|	И Бронь.Пользователь В (&Пользователь)
		|	И НЕ (Бронь.Пользователь В (&ПользовательИсключение))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Бронь.Ссылка,
		|	Бронь.ДатаНачала,
		|	Бронь.ДатаОкончания,
		|	Бронь.ВесьДень,
		|	Бронь.Автор,
		|	Бронь.Пользователь,
		|	Бронь.Комментарий,
		|	Бронь.ТипЗаписи,
		|	Бронь.Помещение,
		|	Бронь.ПометкаУдаления,
		|	Бронь.Предмет,
		|	Бронь.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	Бронь.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	Бронь.ДатаНачалаПовторения,
		|	Бронь.ДатаОкончанияПовторения,
		|	Бронь.ИнтервалПовторения,
		|	Бронь.КоличествоПовторов,
		|	Бронь.ПовторениеПоДнямМесяца,
		|	Бронь.ПовторениеПоМесяцам,
		|	Бронь.ЧастотаПовторения
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Помещение В(&МассивПомещений)
		|	И Бронь.ДатаНачалаПовторения < &ДатаОкончания
		|	И Бронь.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И Бронь.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И Бронь.ПометкаУдаления = ЛОЖЬ
		|	И Бронь.Пользователь В (&Пользователь)
		|	И НЕ (Бронь.Пользователь В (&ПользовательИсключение))";
	
	Если Не ЗначениеЗаполнено(НастройкаОтбораБроней.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И Бронь.ДатаНачалаПовторения < &ДатаОкончания", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПоказыватьУдаленные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Бронь.ПометкаУдаления = ЛОЖЬ", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.Пользователь.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("Пользователь", НастройкаОтбораБроней.Пользователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Бронь.Пользователь В (&Пользователь)", "");
	КонецЕсли;
	
	Если НастройкаОтбораБроней.ПользовательИсключение.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("ПользовательИсключение", НастройкаОтбораБроней.ПользовательИсключение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ (Бронь.Пользователь В (&ПользовательИсключение))", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПомещений", НастройкаОтбораБроней.Помещения);
	Запрос.УстановитьПараметр("ДатаНачала", НастройкаОтбораБроней.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", НастройкаОтбораБроней.ДатаОкончания);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет пересечение с повторяющимся событием.
//
// Параметры:
//  ДанныеПовторяющейсяБрони - ДанныеФормыСтруктура	 - данные повторяющейся брони.
//  ДанныеБрони				 - СтрокаТаблицыЗначений - данные брони.
// 
// Возвращаемое значение:
//  Булево - признак того что брони пересекаются.
//
Функция БрониПересекаются(ДанныеПовторяющейсяБрони, ДанныеБрони)
	
	ПравилоПовторения = РаботаСРабочимКалендарем.НовоеПравилоПовторения();
	ЗаполнитьЗначенияСвойств(ПравилоПовторения, ДанныеПовторяющейсяБрони);
	ПравилоПовторения.ИсключенияПовторения = ДанныеПовторяющейсяБрони.ИсключенияПовторения.Выгрузить();
	ПравилоПовторения.ПовторениеПоДням = ДанныеПовторяющейсяБрони.ПовторениеПоДням.Выгрузить();
	
	Если ДанныеБрони.ТипЗаписи <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		// Бронь
		ДатаНачала = ДанныеБрони.ДатаНачала;
		ДатаОкончания = ДанныеБрони.ДатаОкончания;
		
		ПроверяемаяДата = НачалоДня(ДатаНачала);
		Пока ПроверяемаяДата < ДатаОкончания Цикл
			
			Если РаботаСРабочимКалендарем.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, ПравилоПовторения) Тогда
				
				ДатаНачалаЭлементаПовторения = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаОкончанияЭлементаПовторения = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				
				Если ДатаНачала < ДатаОкончанияЭлементаПовторения И ДатаОкончания > ДатаНачалаЭлементаПовторения Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	Иначе
		
		// Повторяющаяся бронь
		
		// Пересечение дат повторения
		Если Не ((ДанныеБрони.ДатаНачалаПовторения < ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения
				Или Не ЗначениеЗаполнено(ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения))
			И (ДанныеБрони.ДатаОкончанияПовторения > ДанныеПовторяющейсяБрони.ДатаНачалаПовторения)
				Или Не ЗначениеЗаполнено(ДанныеБрони.ДатаОкончанияПовторения)) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Пересечение времен
		ВремяНачалаПовторяющегося =
			ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала);
		ВремяОкончанияПовторяющегося =
			ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала);
		ВремяНачалаПроверяемого =
			ДанныеБрони.ДатаНачала - НачалоДня(ДанныеБрони.ДатаНачала);
		ВремяОкончанияПроверяемого =
			ДанныеБрони.ДатаОкончания - НачалоДня(ДанныеБрони.ДатаНачала);
		ЗанимаютВесьДень =
			((ВремяОкончанияПовторяющегося - ВремяНачалаПовторяющегося) >= 86400)
			Или ((ВремяОкончанияПроверяемого - ВремяНачалаПроверяемого) >= 86400);
		ПересекаютсяВремена = (ВремяНачалаПроверяемого < ВремяОкончанияПовторяющегося
			И ВремяОкончанияПроверяемого > ВремяНачалаПовторяющегося);
		Если Не (ЗанимаютВесьДень Или ПересекаютсяВремена) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Пересечение по конкретным датам
		ГоризонтПланирования = 94608000; // 3 года - 3*365*86400
		ДатаНачала = Макс(ДанныеПовторяющейсяБрони.ДатаНачалаПовторения, ДанныеБрони.ДатаНачалаПовторения);
		ДатаОкончания = Мин(ДанныеПовторяющейсяБрони.ДатаОкончанияПовторения, ДанныеБрони.ДатаОкончанияПовторения);
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = ДатаНачала + ГоризонтПланирования;
		КонецЕсли;
		ПроверяемаяДата = НачалоДня(ДатаНачала);
		Пока ПроверяемаяДата < ДатаОкончания Цикл
			
			ПравилоПроверяемого = РаботаСРабочимКалендарем.НовоеПравилоПовторения();
			ЗаполнитьЗначенияСвойств(ПравилоПроверяемого, ДанныеБрони);
			ПравилоПроверяемого.ИсключенияПовторения = ДанныеБрони.ИсключенияПовторения.Выгрузить();
			ПравилоПроверяемого.ПовторениеПоДням = ДанныеБрони.ПовторениеПоДням.Выгрузить();
			
			Если РаботаСРабочимКалендарем.ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, ПравилоПовторения)
				И РаботаСРабочимКалендарем.ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, ПравилоПроверяемого) Тогда
				
				ДатаНачалаПовторяющегося = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаНачала - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаОкончанияПовторяющегося = НачалоДня(ПроверяемаяДата)
					+ (ДанныеПовторяющейсяБрони.ДатаОкончания - НачалоДня(ДанныеПовторяющейсяБрони.ДатаНачала));
				ДатаНачалаПроверяемого = НачалоДня(ПроверяемаяДата)
					+ (ДанныеБрони.ДатаНачала - НачалоДня(ДанныеБрони.ДатаНачала));
				ДатаОкончанияПроверяемого = НачалоДня(ПроверяемаяДата)
					+ (ДанныеБрони.ДатаОкончания - НачалоДня(ДанныеБрони.ДатаНачала));
				
				Если ДатаНачалаПроверяемого < ДатаОкончанияПовторяющегося И ДатаОкончанияПроверяемого > ДатаНачалаПовторяющегося Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает массив помещений из параметра помещения.
//
// Параметры:
//  ПараметрПомещение	 - Массив, СправочникСсылка.ТерриторииИПомещения - помещение, по которому необходимы брони.
// 
// Возвращаемое значение:
//  Массив - массив помещений.
//
Функция Помещения(ПараметрПомещение)
	
	Если ТипЗнч(ПараметрПомещение) = Тип("Массив") Тогда
		МассивПомещений = ПараметрПомещение;
	ИначеЕсли ТипЗнч(ПараметрПомещение) = Тип("СправочникСсылка.ТерриторииИПомещения") Тогда
		МассивПомещений = Новый Массив;
		МассивПомещений.Добавить(ПараметрПомещение);
	Иначе
		МассивПомещений = Новый Массив;
	КонецЕсли;
	
	Возврат МассивПомещений;
	
КонецФункции

// Устанавливает настройки отображения планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик	 - Планировщик	 - планировщик.
//
Процедура УстановитьНастройкиОтображения(Планировщик)
	
	Планировщик.ОтображатьТекущуюДату = Истина;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	Планировщик.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	Планировщик.Шрифт = ШрифтыСтиля.ЗаголовокКалендаряБроньШрифт;
	
КонецПроцедуры

// Устанавливает измерения планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик				 - Планировщик	 - планировщик.
//  ОтображаемыеПомещения	 - Массив		 - отображаемые в планировщике помещения.
//
Процедура УстановитьИзмеренияПланировщика(Планировщик, ОтображаемыеПомещения)
	
	Планировщик.Измерения.Очистить();
	ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Помещение");
	
	Для Каждого Помещение Из ОтображаемыеПомещения Цикл
		
		ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Помещение);
		ЭлементИзмеренияПомещение.Текст = ПолучитьПредставлениеПомещения(Помещение);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает шкалу времени планировщика в соответствии с персональными настройками.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  РазмерЯчейкиВремени	 - Число		 - периодичность при перетаскивании.
//
Процедура УстановитьШкалуВремени(Планировщик, РазмерЯчейкиВремени)
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
		Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
	КонецЦикла;
	
	ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
	ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
	ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
	ШкалаВремениЧас.Кратность = 1;
	ШкалаВремениЧас.Формат = "ДФ=HH:mm";
	ШкалаВремениЧас.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	ШкалаВремениЧас.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	
	ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
	ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
	ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
	ШкалаВремениМинута.Кратность = РазмерЯчейкиВремени;
	ШкалаВремениМинута.Формат = "";
	ШкалаВремениМинута.ЦветФона = ЦветаСтиля.ЗаголовокКалендаряБроньФон;
	ШкалаВремениМинута.ЦветТекста = ЦветаСтиля.ЗаголовокКалендаряБроньЦветТекста;
	
КонецПроцедуры

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент				 - ЭлементПланировщика	 - элемент планировщика.
//  Измерение			 - Любой				 - измерение планировщика.
//  ЗначениеИзмерения	 - Любой				 - значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Удаляет бронь исключение из таблицы броней.
//
Процедура УдалитьБроньИсключение(ТаблицаБроней, БроньИсключение, ДатаИсключения)
	
	Если Не ЗначениеЗаполнено(БроньИсключение) Или Не ЗначениеЗаполнено(ДатаИсключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Ссылка", БроньИсключение);
	СтрокиБроней = ТаблицаБроней.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаБрони Из СтрокиБроней Цикл
		Если НачалоДня(СтрокаБрони.ДатаНачала) <> НачалоДня(ДатаИсключения) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаБроней.Удалить(СтрокаБрони);
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости.
//
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Занят,
	Знач ДатаНачала, Знач ДатаОкончания, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	
	ЗаписьВнесенаВТаблице = Ложь;
	Для Каждого СтрокаЗанятости Из ТаблицаЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Корректирует дубли и пересечение в таблице занятости.
//
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(
						ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(
						ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости.
//
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

// Формирует текстовое представление рекомендации
//
Функция ПолучитьРекомендациюСтрокой(РекомендацияДатаНачала, РекомендацияДатаОкончания)
	
	РекомендацияСтрокой = Формат(РекомендацияДатаНачала, "ДФ='ддд, д ММММ ЧЧ:мм'");
	
	Если НачалоДня(РекомендацияДатаНачала) - НачалоДня(РекомендацияДатаОкончания) <> 0 Тогда
		ФорматДатыОкончания = "ДФ='ддд, дд ММММ гггг ЧЧ:мм'";
	Иначе
		ФорматДатыОкончания = "ДФ=ЧЧ:мм";
	КонецЕсли;
	ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
		РекомендацияСтрокой, " - ", Формат(РекомендацияДатаОкончания, ФорматДатыОкончания));
	
	Возврат РекомендацияСтрокой;
	
КонецФункции

// Возвращает массив помещений на переданных территориях.
//
// Параметры:
//  Территории - Массив - территории.
//
// Возвращаемое значение:
//  Массив - помещения территорий.
//
Функция ПолучитьПомещенияТерриторий(Территории)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Помещения.Ссылка КАК Ссылка,
		|	Помещения.Вместимость КАК Вместимость
		|ИЗ
		|	Справочник.ТерриторииИПомещения КАК Помещения
		|ГДЕ
		|	Помещения.Ссылка В(&Территории)
		|	И Помещения.ДоступноБронирование = ИСТИНА";
	
	Запрос.УстановитьПараметр("Территории", Территории);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает отображаемые помещения. Отображаемыми помещениями являются помещения на переданной
// территории. Если территории не переданы, или на них нет помещений - будут отображаться последние помещения.
//
// Параметры:
//  Расположение - Массив - необходимое расположение.
//  Вместимость - Число - необходимая вместимость.
//
// Возвращаемое значение:
//  Массив - отображаемые помещения.
//
Функция ПолучитьОтображаемыеПомещения(Расположение, Вместимость = 0)
	
	ОтображаемыеПомещения = Новый Массив;
	
	ТаблицаПомещений = ПолучитьПомещенияТерриторий(Расположение);
	
	// Отбор по вместимости.
	Для Каждого Помещение Из ТаблицаПомещений Цикл
		Если Помещение.Вместимость < Вместимость Тогда
			Продолжить;
		КонецЕсли;
		ОтображаемыеПомещения.Добавить(Помещение.Ссылка);
	КонецЦикла;
	
	Возврат ОтображаемыеПомещения;
	
КонецФункции

// Возвращает отображаемые брони.
//
// Параметры:
//  ОтображаемаяДатаНачала - Дата -дата начала отображения.
//  ОтображаемаяДатаОкончания - Дата - дата окончания отображения.
//  ОтображаемыеПомещения - Массив - отображаемые брони.
//
// Возвращаемое значение:
//  Массив - отображаемые брони.
//
Функция ПолучитьОтображаемыеБрони(
	ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтображаемыеПомещения)
	
	ПоказыватьУдаленные = ПолучитьПерсональнуюНастройку("ПоказыватьУдаленные");
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		ОтображаемыеПомещения, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПоказыватьУдаленные);
	
	Возврат ПолучитьБрони(НастройкаОтбораБроней);
	
КонецФункции

// Возвращает текстовое представление помещения.
//
// Параметры:
//  Помещение - СправочникСсылка.ТерриторииИПомещения - помещение.
//
// Возвращаемое значение:
//  Строка - представление помещения.
//
Функция ПолучитьПредставлениеПомещения(Помещение)
	
	ПредставлениеПомещения = Строка(Помещение);
	
	Вместимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Помещение, "Вместимость");
	Если Не ЗначениеЗаполнено(Вместимость) Тогда
		Возврат ПредставлениеПомещения;
	КонецЕсли;
	
	ПредставлениеПомещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1, %2 чел.'"), Помещение, Вместимость);
	
	Возврат ПредставлениеПомещения;
	
КонецФункции

// Проверяет наличие броней на указанное время.
//
// Параметры:
//  Помещение - СправочникСсылка.ТерриторииИПомещения - помещение.
//  ДатаНачала - Дата - дата, с которой отбираются брони.
//  ДатаОкончания - Дата - дата, по которую отбираются брони.
//  ПользователиИсключение - Массив - пользователи, брони которых не учитываются.
//
// Возвращаемое значение:
//  Булево - наличие броней.
//
Функция ЕстьБрони(Помещение, ДатаНачала, ДатаОкончания, ПользователиИсключение)
	
	Если Не ЗначениеЗаполнено(Помещение)
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		Помещение, ДатаНачала, ДатаОкончания, Ложь, Неопределено, ПользователиИсключение);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	
	Возврат ТаблицаБроней.Количество() <> 0;
	
КонецФункции

// Бронирует помещение. При ошибке выполнения бронирования вызывает исключение.
//
// Параметры:
//  Помещение - СправочникСсылка.ТерриторииИПомещения - помещение.
//  ДатаНачала - Дата - дата, с которой отбираются брони.
//  ДатаОкончания - Дата - дата, по которую отбираются брони.
//  Пользователь - СправочникСсылка.Пользователь - пользователь, для которого выполняется бронь.
//  Источник - СправочникОбъект.Мероприятие - предмет, на основании которого создается бронь.
//  ДопустимыеПользователи - Массив - пользователи, брони которых можно использовать.
//
Процедура ЗабронироватьПомещение(Помещение, ДатаНачала, ДатаОкончания, Пользователь, Источник, ДопустимыеПользователи) Экспорт
	
	ТекстОшибки = "";
	ВременаБезБрони = Новый Массив;
	БрониБезСвязи = Новый Массив;
	Если Не ВозможнаБроньПомещения(Помещение, ДатаНачала, ДатаОкончания, ДопустимыеПользователи,
		Источник.Ссылка, ТекстОшибки, ВременаБезБрони, БрониБезСвязи) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для Каждого Бронь Из БрониБезСвязи Цикл
		УстановитьПредметАвтоматическойБрони(Бронь, Источник.Ссылка);
	КонецЦикла;
	
	Для Каждого Время Из ВременаБезБрони Цикл
		СоздатьАвтоматическуюБронь(Помещение, Время.ДатаНачала, Время.ДатаОкончания, Пользователь, Источник);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие брони на данное помещение у указанного пользователя. Если брони нет,
// то заполняются массивы времен без брони и броней без связи.
//
// Параметры:
//  Помещение - СправочникСсылка.ТерриторииИПомещения - помещение.
//  ДатаНачала - Дата - дата, с которой отбираются брони.
//  ДатаОкончания - Дата - дата, по которую отбираются брони.
//  ДопустимыеПользователи - Массив - пользователи, брони которых можно использовать.
//  Предмет - СправочникСсылка.Мероприятие - предмет, для которого проверяются связи.
//  ВременаБезБрони - Массив - возвращаемый массив времен без брони.
//  БрониБезСвязи - СправочникСсылка.Мероприятие - возвращаемый массив броней без связи.
//
// Возвращаемое значение:
//  Булево - наличие брони.
//
Функция ПроверитьНаличиеБрони(Помещение, ДатаНачала, ДатаОкончания, ДопустимыеПользователи, Предмет,
	ВременаБезБрони, БрониБезСвязи)
	
	НастройкаОтбораБроней = ПолучитьНастройкуОтбораБроней(
		Помещение, ДатаНачала, ДатаОкончания, Ложь, ДопустимыеПользователи);
	ТаблицаБроней = ПолучитьБрони(НастройкаОтбораБроней);
	ТаблицаБроней.Сортировать("ДатаНачала");
	
	ЕстьБронь = ТаблицаБроней.Количество() <> 0;
	ТекущаяДатаНачала = ДатаНачала;
	Для Каждого Бронь Из ТаблицаБроней Цикл
		
		ДатаНачалаБрони = Макс(ДатаНачала, Бронь.ДатаНачала);
		ДатаОкончанияБрони = Мин(ДатаОкончания, Бронь.ДатаОкончания);
		
		Если ДатаНачалаБрони <> ТекущаяДатаНачала Тогда
			ЕстьБронь = Ложь;
			Время = Новый Структура("ДатаНачала, ДатаОкончания", ТекущаяДатаНачала, ДатаНачалаБрони);
			ВременаБезБрони.Добавить(Время);
		КонецЕсли;
		
		Если Бронь.Предмет <> Предмет Тогда
			ЕстьБронь = Ложь;
			БрониБезСвязи.Добавить(Бронь);
		КонецЕсли;
		
		ТекущаяДатаНачала = ДатаОкончанияБрони;
		
	КонецЦикла;
	
	Если ТекущаяДатаНачала < ДатаОкончания Тогда
		ЕстьБронь = Ложь;
		Время = Новый Структура("ДатаНачала, ДатаОкончания", ТекущаяДатаНачала, ДатаОкончания);
		ВременаБезБрони.Добавить(Время);
	КонецЕсли;
	
	Возврат ЕстьБронь;
	
КонецФункции

// Создает документ бронь и записывает его в базу.
//
// Параметры:
//  Помещение - СправочникСсылка.ТерриторииИПомещения - помещение.
//  ДатаНачала - Дата - дата начала брони.
//  ДатаОкончания - Дата - дата окончания брони.
//  Пользователь - СправочникСсылка.Пользователь - пользователь, для которого предназначена бронь.
//  Источник - СправочникОбъект.Мероприятие - предмет брони.
//
Процедура СоздатьАвтоматическуюБронь(Помещение, ДатаНачала, ДатаОкончания, Пользователь, Источник)
	
	НоваяБронь = Документы.Бронь.СоздатьДокумент();
	НоваяБронь.Предмет = Источник.Ссылка;
	НоваяБронь.Помещение = Помещение;
	НоваяБронь.Пользователь = Пользователь;
	НоваяБронь.ДатаНачала = ДатаНачала;
	НоваяБронь.ДатаОкончания = ДатаОкончания;
	НоваяБронь.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бронь для мероприятия %1'"), Источник.Наименование);
	НоваяБронь.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Автоматически;
	НоваяБронь.Записать();
	
КонецПроцедуры

// Устанавливает предмет брони.
//
// Параметры:
//  Бронь - ДокументОбъект.Бронь - бронь.
//  Предмет - СправочникСсылка.Мероприятие - предмет брони.
//
Процедура УстановитьПредметАвтоматическойБрони(Бронь, Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		БроньОбъект = Документы.Бронь.СоздатьДокумент();
		БроньОбъект.Заполнить(Бронь.Ссылка);
		БроньОбъект.ДополнительныеСвойства.Вставить("ПовторяющаясяБронь", Бронь.Ссылка);
		БроньОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", Бронь.ДатаНачала);
		ЗаполнитьЗначенияСвойств(БроньОбъект, Бронь, "ДатаНачала, ДатаОкончания");
	Иначе
		БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
		БроньОбъект.Заблокировать();
	КонецЕсли;
	
	БроньОбъект.Предмет = Предмет;
	БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.АвтоматическиУказанПредмет;
	БроньОбъект.ДополнительныеСвойства.Вставить("ЭтоУстановкаПредметаАвтоматическойБрони");
	БроньОбъект.Записать();
	
КонецПроцедуры

// Рассчитывает отображаемое время планировщика.
//
Процедура РассчитатьОтображаемыеЧасы(Планировщик)
	
	ОтображатьВремяС = ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
	ОтображатьВремяПо = ПолучитьПерсональнуюНастройку("ОтображатьВремяПо");
	Для Каждого Бронь Из Планировщик.Элементы Цикл
		
		Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если Бронь.Значение.ВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		// Час окончания будет -1 для случая когда на следующий день конец приходится ровно на час, а начало в другом дне.
		ЧасНачала = Цел((Бронь.Начало - НачалоДня(Бронь.Начало)) / 3600);
		ЧасОкончания = Цел((Бронь.Конец - НачалоДня(Бронь.Конец) - 1) / 3600);
		МинВремя = Мин(ЧасНачала, ЧасОкончания);
		Если МинВремя < ОтображатьВремяС Тогда
			ОтображатьВремяС = МинВремя;
		КонецЕсли;
		
		// Час начала 1 для случая когда в этот день время приходится ровно на час, а конец в другом дне.
		ЧасНачала = Окр((Бронь.Начало - НачалоДня(Бронь.Начало) + 1) / 3600);
		ЧасОкончания = Окр((Бронь.Конец - НачалоДня(Бронь.Конец)) / 3600);
		МаксВремя = Макс(ЧасНачала, ЧасОкончания);
		ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
		Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
			ОтображатьВремяПо = 24 - МаксВремя;
		КонецЕсли;
		
	КонецЦикла;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;

КонецПроцедуры

// Обрабатывает изменение реквизитов предмета в подписке.
// При установке пометки удаления, очистке даты и очистке помещения удаляет брони по предмету.
// При изменение помещения или даты корректирует существующие брони по предмету.
//
Процедура ОбработатьИзменениеРеквизитовПредмета(Предмет, ПредыдущиеЗначенияРеквизитов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка изменения реквизитов - Помещение.
	ИзменилосьПомещение = ПредыдущиеЗначенияРеквизитов.Помещение <> Предмет.Помещение;
	
	// Проверка изменения реквизитов - Дата.
	ИзмениласьДата = ПредыдущиеЗначенияРеквизитов.ДатаНачала <> Предмет.ДатаНачала
		Или ПредыдущиеЗначенияРеквизитов.ДатаОкончания <> Предмет.ДатаОкончания;
	УказанаДата = ЗначениеЗаполнено(Предмет.ДатаНачала) И ЗначениеЗаполнено(Предмет.ДатаОкончания);
	ОчистилиДату = ИзмениласьДата И Не УказанаДата;
	ИзменилиДату = ИзмениласьДата И УказанаДата;
	
	// Проверка изменения реквизитов - Пометка удаления.
	ИзмениласьПометкаУдаления =
		ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Предмет.ПометкаУдаления;
	УстановилиПометкуУдаления = ИзмениласьПометкаУдаления И Предмет.ПометкаУдаления;
	
	Если УстановилиПометкуУдаления Или ОчистилиДату Или ИзменилосьПомещение Тогда
		УдалитьАвтоматическиеБрониПоПредмету(Предмет);
	ИначеЕсли ИзменилиДату Тогда
		СкорректироватьАвтоматическиеБрониПоПредмету(Предмет);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет брони по предмету в подписке при изменении предмета.
//
Процедура УдалитьАвтоматическиеБрониПоПредмету(Предмет)
	
	Брони = ПолучитьАвтоматическиеБрониПоПредмету(Предмет.Ссылка);
	Для Каждого Бронь Из Брони Цикл
		УдалитьАвтоматическуюБронь(Бронь.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Корректирует брони по предмету в подписке при изменении предмета.
//
Процедура СкорректироватьАвтоматическиеБрониПоПредмету(Предмет)
	
	Брони = ПолучитьАвтоматическиеБрониПоПредмету(Предмет.Ссылка);
	Для Каждого Бронь Из Брони Цикл
		
		ДатаНачалаБрониКорректна = Бронь.ДатаНачала >= Предмет.ДатаНачала
			И Бронь.ДатаНачала < Предмет.ДатаОкончания;
		ДатаОкончанияБрониКорректна = Бронь.ДатаОкончания > Предмет.ДатаНачала
			И Бронь.ДатаОкончания <= Предмет.ДатаОкончания;
		Если ДатаНачалаБрониКорректна И ДатаОкончанияБрониКорректна Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьАвтоматическуюБронь(Бронь.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу броней по предмету, которые ведутся в автоматическом режиме.
//
Функция ПолучитьАвтоматическиеБрониПоПредмету(Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Бронь.Ссылка,
		|	Бронь.ДатаНачала,
		|	Бронь.ДатаОкончания
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Предмет = &Предмет
		|	И Бронь.СпособСозданияБрони = ЗНАЧЕНИЕ(Перечисление.СпособыСозданияБрони.Автоматически)
		|	И Бронь.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Бронь.Ссылка,
		|	Бронь.ДатаНачала,
		|	Бронь.ДатаОкончания
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Предмет = &Предмет
		|	И Бронь.СпособСозданияБрони = ЗНАЧЕНИЕ(Перечисление.СпособыСозданияБрони.АвтоматическиУказанПредмет)
		|	И Бронь.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Удаляет автоматическую бронь.
//
Процедура УдалитьАвтоматическуюБронь(Бронь)
	
	БроньОбъект = Бронь.ПолучитьОбъект();
	БроньОбъект.Заблокировать();
	Если БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Автоматически Тогда
		БроньОбъект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.АвтоматическиУказанПредмет Тогда
		БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Вручную;
		БроньОбъект.Предмет = Неопределено;
		БроньОбъект.Записать();
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно удалить бронь ""%1"", так как она не была создана автоматически.'"),
			Бронь);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Формирует отображаемые по умолчанию помещения пользователя.
//
// Возвращаемое значение:
//  Массив - отображаемые по умолчанию территории для пользователя.
//
Функция ОтображаемыеТерриторииПользователяПоУмолчанию()
	
	ОтображаемыеТерритории = Новый Массив;
	БронированиеПомещенийПереопределяемый.ПриОпределенииОтображаемыхТерриторийПользователяПоУмолчанию(ОтображаемыеТерритории);
	
	Возврат ОтображаемыеТерритории;
	
КонецФункции

// Проверяет наличие права редактирования брони текущим пользователем.
//
Функция ДоступноИзменениеБрони(Бронь) Экспорт
	
	ЕстьПраво = Ложь;
	БронированиеПомещенийПереопределяемый.ПриОпределенииПраваИзмененияБрони(Бронь, ЕстьПраво);
	
	Возврат ЕстьПраво;
	
КонецФункции

// Устанавливает дополнительное свойство ЭтоНовый.
//
// Параметры:
//  Объект - Любой объект - объект.
//
Процедура УстановитьДополнительноеСвойствоЭтоНовый(Объект)
	
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	
КонецПроцедуры

// Устанавливает дополнительное свойство ПредыдущиеЗначенияРеквизитов.
//
// Параметры:
//  Объект - Любой объект - объект.
//
Процедура УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Объект)
	
	УстановитьДополнительноеСвойствоЭтоНовый(Объект);
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый
		Или Объект.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОтслеживаемыеРеквизиты = МенеджерОбъекта.ОтслеживаемыеРеквизиты();
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Ссылка,
		ОтслеживаемыеРеквизиты);
	Объект.ДополнительныеСвойства.Вставить(
		"ПредыдущиеЗначенияРеквизитов",
		ПредыдущиеЗначенияРеквизитов);
	
КонецПроцедуры

#Область РаботаСФотографиями

// Прочитать фото из реквизита ФайлФотографии и поместить во временное хранилище
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - истина, если в объекте есть картинка.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище - или "", если нет картинки.
Функция ПолучитьНавигационнуюСсылкуРеквизита(Помещение, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	ЕстьКартинка = Истина;
	АдресКартинки = ПолучитьНавигационнуюСсылку(Помещение, "ФайлФотографии");
	
	ФайлФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Помещение, "ФайлФотографии");
	Попытка
		ДвоичныеДанные = ФайлФотографии.Получить();
		ЕстьКартинка = ЗначениеЗаполнено(ДвоичныеДанные);
	Исключение
		ЕстьКартинка = Ложь;
	КонецПопытки;
	
	Если Не ЕстьКартинка Тогда
		АдресКартинки = "";
	КонецЕсли;
	
	Возврат АдресКартинки;
	
КонецФункции

// Записывает изображение в реквизит справочника территория
//
// Параметры:
//  ТерриторияПомещениеСсылка     - СправочникСсылка.ТерриторииИПомещения - ссылка на справочник, для которого надо
//                                                                          записать фото
//  АдресВременногоХранилищаФайла - Хранилище значений - адрес хранилища значений, в котором хранится изображение
//  УникальныйИдентификатор       - уникальный идентификатор формы, откуда идет вызов процедуры.
//
Процедура ЗаписатьИзображениеТерритории(ТерриторияПомещениеСсылка,	АдресВременногоХранилищаФайла, УникальныйИдентификатор) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ТерриторияПомещениеСсылка, , УникальныйИдентификатор);
	ТерриторияПомещениеОбъект = ТерриторияПомещениеСсылка.ПолучитьОбъект();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	ТерриторияПомещениеОбъект.ФайлФотографии = Новый ХранилищеЗначения(ДвоичныеДанные);
	ТерриторияПомещениеОбъект.ДоступнаСхема = Истина;
	ТерриторияПомещениеОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ТерриторияПомещениеСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Очищает изображение для указанной территории
//
// Параметры:
//  ТерриторияПомещениеСсылка - СправочникСсылка.ТерриторииИПомещения - ссылка на справочник, для которого надо
//                                                                      очистить изображение
//  УникальныйИдентификатор   - уникальный идентификатор формы, откуда идет вызов процедуры.
//
Процедура ОчиститьИзображениеТерритории(ТерриторияПомещениеСсылка, УникальныйИдентификатор) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ТерриторияПомещениеСсылка, , УникальныйИдентификатор);
	ТерриторияПомещениеСсылкаОбъект = ТерриторияПомещениеСсылка.ПолучитьОбъект();
	ТерриторияПомещениеСсылкаОбъект.ФайлФотографии = Новый ХранилищеЗначения(Неопределено);
	ТерриторияПомещениеСсылкаОбъект.ДоступнаСхема = Ложь;
	ТерриторияПомещениеСсылкаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ТерриторияПомещениеСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти