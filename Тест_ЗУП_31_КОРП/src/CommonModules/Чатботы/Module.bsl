
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПолучитьСообщенияЧатботаПоРегламентномуЗаданию(Чатбот) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСообщенийЧатбота);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЧатботов") Тогда
		Возврат;
	КонецЕсли;
	
	ЧатботыСлужебный.ПолучитьСообщенияЧатбота(Чатбот);
	
КонецПроцедуры

Функция ОбработатьВходящийHTTPЗапрос(HTTPВходящийЗапрос) Экспорт
	Возврат ЧатботыСлужебный.ОбработатьВходящийHTTPЗапрос(HTTPВходящийЗапрос);
КонецФункции

Функция ДанныеЧатботов() Экспорт
	Возврат ЧатботыПовтИсп.ДанныеЧатботов();
КонецФункции

Функция ИспользуемыеЧатботы() Экспорт
	Возврат ЧатботыПовтИсп.ИспользуемыеЧатботы();
КонецФункции

Функция ДанныеЧата(Чат) Экспорт
	Возврат ЧатботыПовтИсп.ДанныеЧата(Чат);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗащитаПерсональныхДанных

Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ПринятыеСведенияЧатботами";
	НовыеСведения.ПоляРегистрации	= "Отправитель";
	НовыеСведения.ПоляДоступа		= "Имя,Телефон,EMail,Возраст,ОСебе,ФайлРезюме";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";

КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДиалогиЧатботов);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПолучениеСообщенийЧатбота.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеСообщенийЧатбота.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.13";
	Обработчик.Процедура = "Чатботы.ВключитьИспользованиеЧатботов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("53c2e8af-2d19-4349-baca-af2ca644f604");
	Обработчик.Комментарий = НСтр("ru = 'Включение использования чатботов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.45";
	Обработчик.Процедура = "Чатботы.ПеренестиТокеныВБезопасноеХранилище";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("01d8d6ed-9c2a-44ec-b322-bc93525065d6");
	Обработчик.Комментарий = НСтр("ru = 'Перенос токена в безопасное хранилище.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.46";
	Обработчик.Процедура = "Чатботы.УстановкаНовыхРеквизитовПоУмолчанию";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("14807c26-4aa0-4e65-9adb-c819224893d7");
	Обработчик.Комментарий = НСтр("ru = 'Установка признака запрашивать имя по умолчанию.'");
	
КонецПроцедуры

Процедура ВключитьИспользованиеЧатботов(ПараметрыОбновления) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодборПерсонала") Тогда
		Константы.ИспользоватьЧатботов.Установить(Истина);
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ПеренестиТокеныВБезопасноеХранилище(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Чатботы.Ссылка КАК Ссылка,
		|	Чатботы.УдалитьТокен КАК Токен
		|ИЗ
		|	Справочник.Чатботы КАК Чатботы
		|ГДЕ
		|	Чатботы.УдалитьТокен <> &ПустаяСтрока";
	РезультатыЗапроса = Запрос.Выполнить();
	Если РезультатыЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;

	Выборка = РезультатыЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЧатботОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЧатботОбъект.УдалитьТокен = Неопределено;
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Выборка.Ссылка, Выборка.Токен, "Токен");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЧатботОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Перенос токена в безопасное хранилище'"), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановкаНовыхРеквизитовПоУмолчанию(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Чатботы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Чатботы КАК Чатботы
		|ГДЕ
		|	Чатботы.ЗапрашиватьИмя = ЛОЖЬ";
	РезультатыЗапроса = Запрос.Выполнить();
	Если РезультатыЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;

	Выборка = РезультатыЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЧатботОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЧатботОбъект.ЗапрашиватьИмя = Истина;
		ЧатботОбъект.ТекстЗапросаИмени = НСтр("ru = 'Как я могу к вам обращаться?'");
		ЧатботОбъект.ВыводитьОписаниеКомпании = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЧатботОбъект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти