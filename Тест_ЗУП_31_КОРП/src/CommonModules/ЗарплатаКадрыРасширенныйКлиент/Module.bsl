
#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму редактирования составов начислений и удержаний. В Параметрах
// должен содержаться параметр АдресВХранилище (адрес во временном хранилище) на структуру формируемую 
// в методе ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыФормыРедактированияСоставаНачисленийИУдержаний.
//
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Параметры, Форма) Экспорт
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыРедактированиеСоставаНачисленийИУдержаний");		
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСоставаНачисленийИУдержаний", Параметры, Форма);
	
КонецПроцедуры

// Открывает в качестве расшифровки переданной ячейки предварительно подготовленный вариант отчета.
// Параметры:
//	ИДОтчета - Строка - идентификатор отчета (совпадает с именем объекта метаданных).
// 	ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета (совпадает с именем формы объекта метаданных).
//  ИДИменПоказателей - Массив - массив идентификаторов имен показателей, по которым формируется расшифровка.
//  ПараметрыОтчета - Структура - структура параметров отчета, необходимых для формирования расшифровки.
// 
Процедура ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	ЗарплатаКадрыКлиентБазовый.ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
	
	ФормаРасшифровки = Неопределено;
	
	Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" 
			Или ИДРедакцииОтчета = "ФормаОтчета2014Кв1"
			Или ИДРедакцииОтчета = "ФормаОтчета2017Кв1"
			Или ИДРедакцииОтчета = "ФормаОтчета2018Кв1" Тогда
			ФормаРасшифровки = СтатистикаПерсоналаРасширенныйКлиент.ФормаРасшифровкиРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета)
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4НЗ" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" 
			Или ИДРедакцииОтчета = "ФормаОтчета2017Кв1"
			Или ИДРедакцииОтчета = "ФормаОтчета2018Кв1" Тогда
			ФормаРасшифровки = СтатистикаПерсоналаРасширенныйКлиент.ФормаРасшифровкиРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета)
		КонецЕсли;
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПЗдрав"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПКультура"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПНаука"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПОбразование"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаЗПСоц" Тогда
		ФормаРасшифровки = СтатистикаПерсоналаРасширенныйКлиент.ФормаРасшифровкиРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета)
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГМС" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2013Кв1" 
			Или ИДРедакцииОтчета = "ФормаОтчета2015Кв1"
			Или ИДРедакцииОтчета = "ФормаОтчета2016Кв1"
			Или ИДРедакцииОтчета = "ФормаОтчета2017Кв1" Тогда
			ФормаРасшифровки = СтатистикаПерсоналаРасширенныйКлиент.ФормаРасшифровкиРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета)
		КонецЕсли;
	Иначе
		Возврат
	КонецЕсли;
	
	Если ФормаРасшифровки = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Для выбранной ячейки расшифровка не существует.'"),,
			НСтр("ru = 'Расшифровка регламентированных отчетов'"));
		
	Иначе
		
		ФормаРасшифровки.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Подключает обработчик ожидания перед запуском автоматического расчета.
Процедура ПодключитьОбработчикОжиданияАвтоматическогоРасчета(Форма, ИмяОбработчикаОжидания, ИмяКнопкиРассчитать = "Рассчитать") Экспорт
	
	ПериодОжидания = ПериодОжиданияЗапускаАвтоматическогоРасчета();
	Если Форма.РассчитыватьДокументыПриРедактировании И ПериодОжидания > 0 Тогда
		Форма.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПериодОжидания, Истина);
	КонецЕсли; 
	
	Форма.РасчетНеобходимоВыполнить = Истина;
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьСостояниеКнопкиФормыРассчитать(Форма, Форма.РасчетНеобходимоВыполнить, ИмяКнопкиРассчитать);
	
КонецПроцедуры

Функция ПроверитьУволенныхОтветственныхЛиц(ФизическиеЛица, Оповещение) Экспорт
	
	ЖдатьЗакрытияФормыУведомления = Ложь;
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	СведенияОбОтветственных = ЗарплатаКадрыРасширенныйВызовСервера.СведенияОбОтветственныхЛицах(СписокФизическихЛиц);
	Если СведенияОбОтветственных.Количество() > 0  Тогда
		
		ЖдатьЗакрытияФормыУведомления = Истина;
		
		ПараметрыОткрытия = Новый Структура("СведенияОбОтветственных", СведенияОбОтветственных);
		ОткрытьФорму("ОбщаяФорма.УведомлениеОбУвольненииОтветственныхЛиц", ПараметрыОткрытия, , , , , Оповещение);
		
	КонецЕсли; 
	
	Возврат ЖдатьЗакрытияФормыУведомления;
		
КонецФункции

Процедура ОткрытьФормуНастройкиОтветственныхЛиц(СтруктурнаяЕдиница) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЗарплатаКадрыРасширенныйКлиентПереопределяемый.ОткрытьФормуНастройкиОтветственныхЛиц(СтруктурнаяЕдиница, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ПоказатьЗначение(, СтруктурнаяЕдиница);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание редактирования РК и СН в отдельных полях форм, редактирующих
// плановые начисления.

// Открывает форму редактирования процента северной надбавки.
//
// Параметры:
//			Форма - Форма из который инициируется открытие.
//			Сотрудник
//			ДатаСведений
//
Процедура ОткрытьФормуРедактированияПроцентаСевернойНадбавки(Форма, Сотрудник, ДатаСведений) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", Сотрудник);
	ПараметрыОткрытия.Вставить("ДатаСведений", ДатаСведений);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаРедактированияПроцентаСевернойНадбавки", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для отображения начислений в документах, редактирующих 
// состав начислений или выполняющих расчет.

Процедура УстановитьОграничениеТипаПоТочностиПоказателя(ДанныеСтроки, Форма, ИмяТаблицы, РежимРаботы) Экспорт
		
	ФиксированнаяСумма = Ложь;
	Если ДанныеСтроки.Свойство("ФиксированнаяСумма") Тогда 
		ФиксированнаяСумма = ДанныеСтроки.ФиксированнаяСумма;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы,, РежимРаботы) Цикл
		
		Показатель = ДанныеСтроки["Показатель" + СчетчикПоказателей];
		
		Если Показатель.Пустая() И Не (ФиксированнаяСумма И СчетчикПоказателей = 1) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФиксированнаяСумма Тогда 
			ТипПоказателя = ТипЧисло;
			ТипПоказателяПриРасчете = ТипЧисло;
		Иначе 	
			ПоказательИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.СведенияОПоказателеРасчетаЗарплаты(Показатель);
			ТипПоказателя = ПоказательИнфо.ТипПоказателя;
			ТипПоказателяПриРасчете = ПоказательИнфо.ТипПоказателяПриРасчете;
		КонецЕсли;	
			
		Если РежимРаботы = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "МинимальноеЗначение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "МаксимальноеЗначение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицы + "Значение" + СчетчикПоказателей,
				"ОграничениеТипа",
				ТипПоказателя);
			
		Иначе
				
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = 
				?(РежимРаботы = 2, ТипПоказателяПриРасчете, ТипПоказателя);
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при изменении вида расчета в таблице, редактирующей начисления.
// Параметры:
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. ОписаниеТаблицыРасчета().
//		РежимРаботы - число. 0 - режим штатного расписания, 1 - режим плановых начислений, 2 - режим начислений в расчетном
//		              документе.
//		Сотрудник - СправочникСсылка.Сотрудники, используется для режима работы = 1 при получении сведений о стаже.
//		ДатаСведений - Дата, используется для режима работы = 1 при получении сведений о стаже.
//
Процедура ВводНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицы, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	СтрокаНачислений = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиНачислений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений);
	ЗарплатаКадрыРасширенныйКлиентСервер.ВводНачисленийИнициализироватьСтрокиНачислений(Форма, СтрокиНачислений, ОписаниеТаблицы, РежимРаботы, Сотрудник, ДатаСведений);
	
КонецПроцедуры

Процедура ВводПлановыхНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Сотрудник = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыЗаполненияЗначенийПоказателейТарифныхСеток();
	КонецЕсли;
	
	ДатаСведений = ДополнительныеПараметры.ДатаСведений;
	ВводНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Сотрудник, ДатаСведений);
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		
		ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
		СтрокаНачислений = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
		
		ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияПоказателейТарифныхСетокВСтрокеНачислений(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВводНачисленийВШапкеПриНачалеРедактирования(Форма, ИмяТаблицы, НоваяСтрока) Экспорт
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем показатели (только показатели без значений).
	
	ДанныеТекущейСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоказателя = 1;
	Для Каждого ОписаниеПоказателя Из Форма.Показатели Цикл
		ДанныеТекущейСтроки["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель;
		НомерПоказателя = НомерПоказателя + 1;
	КонецЦикла;	
	
КонецПроцедуры	

// Устанавливает элементу ограничение типа документа удержания по переданной категории.
// Если категорию подобрать не удалось, то СтандартнаяОбработка устанавливается в Ложь и выбора не производится.
//
// Параметры:
//		Категория - ПеречислениеСсылка.КатегорииУдержаний
//
// Возвращаемое значение:
//		ОписаниеТипов - тип документа, которому соответствует категория удержания.
//
Процедура УстановитьОграничениеТипаДокументаУдержанияПоКатегории(Элемент, ТекущиеДанные, СтандартнаяОбработка) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СоответствиеДокументов = Новый Соответствие;
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы"),
		Новый ОписаниеТипов("ДокументСсылка.УдержаниеПрофсоюзныхВзносов"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ИсполнительныйЛист"),
		Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента"),
		Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ДСВ"),
		Новый ОписаниеТипов("ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ"),
		Новый ОписаниеТипов("ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц"),
		Новый ОписаниеТипов("ДокументСсылка.ПостоянноеУдержаниеВПользуТретьихЛиц"));
	СоответствиеДокументов.Вставить(
		ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям"),
		Новый ОписаниеТипов("ДокументСсылка.УдержаниеВСчетРасчетовПоПрочимОперациям"));
	
	ОграничениеТипа = СоответствиеДокументов.Получить(ТекущиеДанные.КатегорияУдержания);
	
	Если ОграничениеТипа = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элемент.ОграничениеТипа = ОграничениеТипа;
	
КонецПроцедуры

// Определяет необходимость перерасчета ФОТ в форме.
//
// Параметры:
//		Форма		- УправляемаяФорма
//		Элемент		- ТаблицаФормы
//		РежимРаботы	- Число, 1 - редактирование плановых начислений кадрового приказа, о редактирование
//						начислений позиции штатного расписания.
//
// ВозвращаемоеЗначение:
//		Булево
Функция ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактирования(Форма, Элемент, РежимРаботы, ОписаниеТаблицыВидовРасчета) Экспорт
	
	ВыполнитьРасчетФОТ = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяПоляФиксРасчет = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаФиксРасчет;
		
		Если Форма[ИмяПоляФиксРасчет] = Неопределено Тогда
			СтрокиФиксРасчет = Новый Соответствие;
		Иначе
			СтрокиФиксРасчет = Новый Соответствие(Форма[ИмяПоляФиксРасчет]);
		КонецЕсли;
		
		ПроверятьМинИМаксРазмеры = Ложь;
		Если РежимРаботы = 0 И Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
			ПроверятьМинИМаксРазмеры = Истина;
		КонецЕсли; 
		
		ИмяПоляНачисление = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета;
		
		Если ЗначениеЗаполнено(ТекущиеДанные[ИмяПоляНачисление]) Тогда
			
			Если Не ПроверятьМинИМаксРазмеры И ТекущиеДанные.Размер <> ТекущиеДанные.РазмерДоРедактирования
				Или ПроверятьМинИМаксРазмеры
					И (ТекущиеДанные.РазмерМин <> ТекущиеДанные.РазмерМинДоРедактирования
						Или ТекущиеДанные.РазмерМакс <> ТекущиеДанные.РазмерМаксДоРедактирования) Тогда
						
				СтрокиФиксРасчет.Вставить(ТекущиеДанные[ИмяПоляНачисление], Истина);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Форма[ИмяПоляФиксРасчет] = Новый ФиксированноеСоответствие(СтрокиФиксРасчет);
		
		ВыполнитьРасчетФОТ = Истина;
		
	КонецЕсли; 
	
	Возврат ВыполнитьРасчетФОТ;
	
КонецФункции

Функция ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактированияВФормеСНесколькимиСотрудниками(Форма, Элемент, ОписаниеТаблицыНачислений) Экспорт
	
	ВыполнитьРасчетФОТ = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяПоляФиксРасчет = ОписаниеТаблицыНачислений.ИмяРеквизитаФиксРасчет;
		
		Сотрудник = ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник];
		Если Форма[ИмяПоляФиксРасчет] = Неопределено Тогда
			СтрокиФиксРасчет = Новый Соответствие;
		Иначе
			СтрокиФиксРасчет = Новый Соответствие(Форма[ИмяПоляФиксРасчет]);
		КонецЕсли;
		
		СоответствиеНачисленийСотрудника = СтрокиФиксРасчет.Получить(Сотрудник);
		Если СоответствиеНачисленийСотрудника = Неопределено Тогда
			СоответствиеНачисленийСотрудника = Новый Соответствие;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета]) Тогда
			Если ТекущиеДанные.Размер <> ТекущиеДанные.РазмерДоРедактирования Тогда
				СоответствиеНачисленийСотрудника.Вставить(ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета], Истина);
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокиФиксРасчет.Вставить(Сотрудник, СоответствиеНачисленийСотрудника);
		Форма[ИмяПоляФиксРасчет] = Новый ФиксированноеСоответствие(СтрокиФиксРасчет);
		
		ВыполнитьРасчетФОТ = Истина;
		
	КонецЕсли; 
	
	Возврат ВыполнитьРасчетФОТ;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для отображения начислений в документах, редактирующих 
// состав начислений (начисления в строках таблицы).

Процедура РедактированиеСоставаНачисленийОтменитьНачисление(Форма, ИмяТаблицы, РежимРаботы, ОписаниеКоманднойПанелиНачислений = Неопределено, ТаблицаВОбъекте = Истина, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ПутьКТаблице = ?(ТаблицаВОбъекте, "Объект.", "") + ИмяТаблицы;
	Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКТаблице);
	
	ДанныеТекущейСтрокиНачисления = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеТекущейСтрокиНачисления <> Неопределено Тогда
		
		Форма.Модифицированность = Истина;
		
		Если ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить")
			Или (Не ДанныеТекущейСтрокиНачисления.ДействующийВидРасчета) Тогда
			
			Если Не ДанныеТекущейСтрокиНачисления.Свойство("ДатаОкончанияНачисления")
				Или Не ЗначениеЗаполнено(ДанныеТекущейСтрокиНачисления.ДатаОкончанияНачисления) Тогда
				
				Начисления.Удалить(Начисления.Индекс(ДанныеТекущейСтрокиНачисления));
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
			
			Если ДанныеТекущейСтрокиНачисления.ДействующийВидРасчета Тогда
				ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка");
			Иначе
				ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
			КонецЕсли;
			
		Иначе
			ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеКоманднойПанелиНачислений) = Тип("Структура") Тогда
			УстановитьТекущуюСтраницуКоманднойПанелиНачислений(Форма, ДанныеТекущейСтрокиНачисления, ОписаниеКоманднойПанелиНачислений);
		КонецЕсли;
		
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы,, РежимРаботы);
		Если ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
			
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				
				Если Не ДанныеТекущейСтрокиНачисления.Свойство("Показатель" + НомерПоказателя)
					Или Не ЗначениеЗаполнено(ДанныеТекущейСтрокиНачисления["Показатель" + НомерПоказателя]) Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если ДанныеТекущейСтрокиНачисления.Свойство("ОтменяемыйПоказатель" + НомерПоказателя) И ДанныеТекущейСтрокиНачисления["ОтменяемыйПоказатель" + НомерПоказателя] Тогда
					
					ДанныеТекущейСтрокиНачисления["Значение" + НомерПоказателя] = 0;
					
				ИначеЕсли ДанныеТекущейСтрокиНачисления.Свойство("ТекущееЗначение" + НомерПоказателя) Тогда
					
					ДанныеТекущейСтрокиНачисления["Значение" + НомерПоказателя] = ДанныеТекущейСтрокиНачисления["ТекущееЗначение" + НомерПоказателя];
					
				ИначеЕсли ДанныеТекущейСтрокиНачисления.Свойство("ТекущееМинимальноеЗначение" + НомерПоказателя)
					И ДанныеТекущейСтрокиНачисления.Свойство("МинимальноеЗначение" + НомерПоказателя) Тогда
				
					ДанныеТекущейСтрокиНачисления["МинимальноеЗначение" + НомерПоказателя] = ДанныеТекущейСтрокиНачисления["ТекущееМинимальноеЗначение" + НомерПоказателя];
					ДанныеТекущейСтрокиНачисления["МаксимальноеЗначение" + НомерПоказателя] = ДанныеТекущейСтрокиНачисления["ТекущееМаксимальноеЗначение" + НомерПоказателя];
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(
			ДанныеТекущейСтрокиНачисления, КоличествоПоказателей, РежимРаботы, , ДатаСобытия, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Сотрудник = Неопределено, ТарифнаяСетка = Неопределено, РазрядКатегория = Неопределено, ДатаСведений = Неопределено, ТарифнаяСеткаНадбавки = Неопределено, РазрядКатегорияНадбавки = Неопределено, СчитатьПоказателиПоДолжности = Ложь) Экспорт
	
	ДополнительныеПараметры = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыЗаполненияЗначенийПоказателейТарифныхСеток();
	ДополнительныеПараметры.ДатаСведений = ДатаСведений;
	ДополнительныеПараметры.ТарифнаяСетка = ТарифнаяСетка;
	ДополнительныеПараметры.ТарифнаяСеткаНадбавки = ТарифнаяСеткаНадбавки;
	ДополнительныеПараметры.РазрядКатегория = РазрядКатегория;
	ДополнительныеПараметры.РазрядКатегорияНадбавки = РазрядКатегорияНадбавки;
	ДополнительныеПараметры.СчитатьПоказателиПоДолжности = СчитатьПоказателиПоДолжности;
	
	ВводПлановыхНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Сотрудник, ДополнительныеПараметры);
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	СтрокаНачислений = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		Если РежимРаботы = 0 Тогда
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании 
				И СтрокаНачислений.Свойство("ТекущееМинимальноеЗначение" + НомерПоказателя) Тогда
				СтрокаНачислений["ТекущееМинимальноеЗначение" + НомерПоказателя] = Неопределено;
				СтрокаНачислений["ТекущееМаксимальноеЗначение" + НомерПоказателя] = Неопределено;
			ИначеЕсли СтрокаНачислений.Свойство("ТекущееЗначение" + НомерПоказателя) Тогда
				СтрокаНачислений["ТекущееЗначение" + НомерПоказателя] = Неопределено;
			КонецЕсли;
			
		Иначе 
			СтрокаНачислений["ТекущееЗначение" + НомерПоказателя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(
		СтрокаНачислений,
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы),
		РежимРаботы,
		ОписаниеТаблицыВидовРасчета,
		ДатаСведений);
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийПриАктивизацииСтроки(Форма, ИмяТаблицы, ИмяПоляВидРасчета, РежимРаботы, ОписаниеКоманднойПанелиНачислений = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") 
		Или (Не ДанныеСтроки.ДействующийВидРасчета) Тогда
		Форма.Элементы[ИмяПоляВидРасчета].ТолькоПросмотр = Ложь;
	Иначе
		Форма.Элементы[ИмяПоляВидРасчета].ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеКоманднойПанелиНачислений) = Тип("Структура") Тогда
		УстановитьТекущуюСтраницуКоманднойПанелиНачислений(Форма, ДанныеСтроки, ОписаниеКоманднойПанелиНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийПриНачалеРедактирования(Форма, ИмяТаблицы, РежимРаботы, ЗапоминатьРазмерФОТ = Истина, УстановитьДействиеНовогоНачисления = Ложь) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановитьДействиеНовогоНачисления Тогда
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
	КонецЕсли;
	
	Если ЗапоминатьРазмерФОТ И РежимРаботы <> 2 Тогда
		
		Если РежимРаботы = 0 И Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
			ДанныеСтроки.РазмерМинДоРедактирования = ДанныеСтроки.РазмерМин;
			ДанныеСтроки.РазмерМаксДоРедактирования = ДанныеСтроки.РазмерМакс;
		Иначе
			ДанныеСтроки.РазмерДоРедактирования = ДанныеСтроки.Размер;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаПоТочностиПоказателя(ДанныеСтроки, Форма, ИмяТаблицы, РежимРаботы);
	
КонецПроцедуры

// Используется для открытия формы редактирования стажей в документах, редактирующих
// составы плановых начислений.
//
Процедура РедактированиеСоставаНачисленийВыбор(Форма, Элемент, Поле, СтандартнаяОбработка, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	Если РежимРаботы = 1 Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
			И СтрНайти(Поле.Имя, "ОписаниеСтажевыхПоказателей") > 0 Тогда
			
			Если ТекущиеДанные.ВидыСтажаПоказателей <> Неопределено Тогда
				
				Если ЗарплатаКадрыРасширенныйКлиентПовтИсп.ЭтоСеверныйСтаж(ТекущиеДанные.ВидыСтажаПоказателей[0]) Тогда
					ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияПроцентаСевернойНадбавки(Форма, Сотрудник, ДатаСведений);
				Иначе
					КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажейСотрудника(Форма, Сотрудник, ДатаСведений, ТекущиеДанные.ВидыСтажаПоказателей);
				КонецЕсли;
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает структуру с описанием страниц командной панели для таблиц редактирующих состав плановых начислений.
Функция ОписаниеКоманднойПанелиНачислений() Экспорт
	ОписаниеКоманднойПанелиНачислений = Новый Структура("СтраницыКоманднойПанелиНачислений,СтраницаДобавитьОтменить,СтраницаДобавитьПродолжить,СтраницаДобавитьУдалить");
	ОписаниеКоманднойПанелиНачислений.СтраницыКоманднойПанелиНачислений = "СтраницыКоманднойПанелиНачислений";
	ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьОтменить 			= "СтраницаДобавитьОтменить";
	ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьПродолжить 		= "СтраницаДобавитьПродолжить";
	ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьУдалить 			= "СтраницаДобавитьУдалить";
	Возврат ОписаниеКоманднойПанелиНачислений
КонецФункции 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для отображения дополнительных ставок, коэффициентов.

Процедура РедактированиеСоставаДополнительныхПоказателейОтменитьПоказатель(Форма, ИмяТаблицы, ОписаниеКоманднойПанелиПоказателей, Отказ) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Показатели = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ИмяТаблицы);
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") Или (Не ДанныеСтроки.ДействующийПоказатель)  Тогда
		Показатели.Удалить(Показатели.Индекс(ДанныеСтроки));
		Возврат;
	ИначеЕсли ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда 
		Если ДанныеСтроки.ДействующийПоказатель Тогда
			ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка");	
		Иначе	
			ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");	
		КонецЕсли; 
	Иначе
		ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
	КонецЕсли;	
	
	Форма.Модифицированность = Истина;
	
	Если ТипЗнч(ОписаниеКоманднойПанелиПоказателей) = Тип("Структура") Тогда
		УстановитьТекущуюСтраницуКоманднойПанелиПоказателей(Форма, ДанныеСтроки, ОписаниеКоманднойПанелиПоказателей);			
	КонецЕсли;	
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(ДанныеСтроки);
	
КонецПроцедуры

Процедура РедактированиеСоставаДополнительныхПоказателейПриАктивизацииСтроки(Форма, ИмяТаблицы, ИмяПоляПоказатель, ОписаниеКоманднойПанелиПоказателей = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") 
		Или (Не ДанныеСтроки.ДействующийПоказатель) Тогда
		Форма.Элементы[ИмяПоляПоказатель].ТолькоПросмотр = Ложь;
	Иначе
		Форма.Элементы[ИмяПоляПоказатель].ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Если ТипЗнч(ОписаниеКоманднойПанелиПоказателей) = Тип("Структура") Тогда
		УстановитьТекущуюСтраницуКоманднойПанелиПоказателей(Форма, ДанныеСтроки, ОписаниеКоманднойПанелиПоказателей);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура РедактированиеСоставаДополнительныхПоказателейПриНачалеРедактирования(Форма, ИмяТаблицы) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.Показатель) Тогда
		Возврат;
	КонецЕсли;

	ПоказательИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.СведенияОПоказателеРасчетаЗарплаты(ДанныеСтроки.Показатель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяТаблицы + "Значение", "ОграничениеТипа", ПоказательИнфо.ТипПоказателя);
	
КонецПроцедуры

Процедура РедактированиеСоставаДополнительныхПоказателейПриВводеНового(Форма, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(ДанныеСтроки);	
	
КонецПроцедуры

Процедура УстановитьТекущуюСтраницуКоманднойПанелиПоказателей(Форма, ДанныеСтроки, ОписаниеКоманднойПанелиПоказателей)
	
	Если ДанныеСтроки.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
		Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницыКоманднойПанели].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьПродолжить]; 	
	Иначе
		Если ДанныеСтроки.ДействующийПоказатель Тогда
			Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницыКоманднойПанели].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьОтменить];
		Иначе
			Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницыКоманднойПанели].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьУдалить]; 	
		КонецЕсли;
	КонецЕсли;;	
	
КонецПроцедуры

// Возвращает структуру с описанием страниц командной панели для таблиц редактирующих состав дополнительных показателей.
Функция ОписаниеКоманднойПанелиПоказателей() Экспорт
	
	ОписаниеКоманднойПанелиПоказателей = Новый Структура("СтраницыКоманднойПанели, СтраницаДобавитьОтменить, СтраницаДобавитьПродолжить, СтраницаДобавитьУдалить");
	ОписаниеКоманднойПанелиПоказателей.СтраницыКоманднойПанели 		= "СтраницыКоманднойПанелиДопПоказателей";
	ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьОтменить 	= "СтраницаДобавитьОтменитьДП";
	ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьПродолжить 	= "СтраницаДобавитьПродолжитьДП";
	ОписаниеКоманднойПанелиПоказателей.СтраницаДобавитьУдалить 		= "СтраницаДобавитьУдалитьДП";
	
	Возврат ОписаниеКоманднойПанелиПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с несколькими рабочими местами физического лица.

Процедура НесколькоРабочихМестОбработкаВыбораРабочегоМеста(Форма, ВыбранноеЗначение, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыНачислений) Экспорт
	ВыбранноеРабочееМесто = Форма.РабочиеМестаФизическогоЛица.Получить(ВыбранноеЗначение);
	ТекущиеДанные = Форма.Элементы[ОписаниеТаблицыНачислений.ИмяТаблицы].ТекущиеДанные;
	ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник] = ВыбранноеРабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник];
	ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста] = ВыбранноеРабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста];
	Если ОписаниеТаблицыНачислений.Свойство("ИмяРеквизитаПодразделение") Тогда 
		ТекущиеДанные[ОписаниеТаблицыНачислений.ИмяРеквизитаПодразделение] = ВыбранноеРабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПодразделение];
	КонецЕсли;
КонецПроцедуры

Процедура НесколькоРабочихМестНачалоВыбораРабочегоМеста(Форма, ДанныеВыбора, ОписаниеТаблицыРабочихМест) Экспорт
	ДанныеВыбора = НесколькоРабочихМестПолучитьСписокРабочихМестФизическогоЛица(Форма[ОписаниеТаблицыРабочихМест.ИмяТаблицы]);
КонецПроцедуры

Процедура НесколькоРабочихМестНачисленияПриАктивизацииСтроки(Форма, ИмяТаблицы, ИмяПоляСотрудник) Экспорт
	ДанныеТекущейСтрокиНачисления = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ДанныеТекущейСтрокиНачисления <> Неопределено Тогда
		Если ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") Или (Не ДанныеТекущейСтрокиНачисления.ДействующийВидРасчета) Тогда
			Форма.Элементы[ИмяПоляСотрудник].ТолькоПросмотр = Ложь;
		Иначе
			Форма.Элементы[ИмяПоляСотрудник].ТолькоПросмотр = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура НесколькоРабочихМестПриАктивизацииСтроки(Форма, ОписаниеТаблицы) Экспорт
	ДанныеТекущейСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	ИмяЭлемента = ОписаниеТаблицы.ИмяТаблицы+ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура НесколькоРабочихМестПриВводеНового(Форма, ТекущиеДанные, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы) Экспорт
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	Если ТаблицаРабочихМест.Количество() > 0 Тогда
		РабочееМестоПоУмолчанию = ТаблицаРабочихМест[0][ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник];
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) Тогда
			ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаСотрудник] = РабочееМестоПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НесколькоРабочихМестПриИзмененииРеквизитаФормыСвязанногоСТабличнойЧастью(Форма, ИмяРеквизитаФормы, ИмяТабличнойЧасти, ИмяРеквизитаТабличнойЧасти) Экспорт
	ТабличнаяЧасть = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТабличнойЧасти);
	ТабличнаяЧасть[0][ИмяРеквизитаТабличнойЧасти] = Форма[ИмяРеквизитаФормы];
КонецПроцедуры

Процедура ПроверитьВозможностьОчисткиТабличныхЧастей(Форма, ТабличныеЧасти, ОповещениеЗавершения = Неопределено) Экспорт
	
	СписокТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТабличныеЧасти);
	
	НеобходимоОчистить = Ложь;
	Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		
		Если Форма.Объект[ТабличнаяЧасть].Количество() > 0 Тогда
			НеобходимоОчистить = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если НеобходимоОчистить Тогда
		
		Если СписокТабличныхЧастей.Количество() > 1 Тогда
			ТекстВопроса = НСтр("ru = 'Табличные части документа будут очищены. Продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьВозможностьОчисткиТабличныхЧастейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе 
		
		ПроверитьВозможностьОчисткиТабличныхЧастейЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВозможностьОчисткиТабличныхЧастейЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Отказ = Ответ <> КодВозвратаДиалога.Да;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с рабочими местами удержаний.

// Заполняет реквизит формы представлением рабочего места.
Процедура РабочиеМестаУдержанийОбработкаВыбораРабочегоМеста(Форма, ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ФизическоеЛицо) 
		И ТекущиеДанные.РабочееМесто <> ВыбранноеЗначение Тогда 
		
		Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			ПредставлениеРабочегоМеста = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста();
			
		Иначе
			
			ЗначениеСпискаВыбора = Форма.СписокВыбораРабочихМест.НайтиПоЗначению(ВыбранноеЗначение);
			
			Если ЗначениеСпискаВыбора = Неопределено Тогда
				ПредставлениеРабочегоМеста = "";
			Иначе
				ПредставлениеРабочегоМеста = ЗначениеСпискаВыбора.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыСтруктура") Тогда
			ТекущиеДанные.РабочееМесто = ВыбранноеЗначение; 
			Форма.ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста;
		Иначе
			ТекущиеДанные.РабочееМесто = ВыбранноеЗначение;		
			ТекущиеДанные.ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста;
		КонецЕсли;
			
		Форма.Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с многофункциональными документами.

Процедура УтвердитьВыделенныеМногофункциональныеДокументы(Форма, ОповещениеЗавершения = Неопределено) Экспорт 
	
	МассивСсылок = ЗарплатаКадрыРасширенныйКлиентСервер.ВыделенныеВДинамическомСпискеСсылки(Форма.Элементы.Список);
	
	КоличествоСсылок = МассивСсылок.Количество();
	
	Если КоличествоСсылок = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если КоличествоСсылок > 1 Тогда 
		
		ТекстВопроса = НСтр("ru='Выделенные в списке документы будут приняты к учету. Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("УтвердитьВыделенныеМногофункциональныеДокументыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	Иначе 
		
		УтвердитьВыделенныеМногофункциональныеДокументыЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УтвердитьВыделенныеМногофункциональныеДокументыЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	
	ЗарплатаКадрыРасширенныйВызовСервера.УтвердитьМногофункциональныеДокументы(МассивСсылок);
	
	Форма.Элементы.Список.Обновить();
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьДоступностьКомандыУтвердитьВМногофункциональныхДокументах(Форма);
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр результатов расчета страховых взносов из документов расчетов с контрагентами.

Процедура ВыполнитьКомандуПросмотрСтраховыхВзносов(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт

	Если СтрНайти(Поле.Имя, "КомандаПросмотрВзносов") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФизическоеЛицо", Элемент.ТекущиеДанные.ФизическоеЛицо);
	ПараметрыОткрытия.Вставить("Период", Объект.ПланируемаяДатаВыплаты);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("ИтогВзносы", Элемент.ТекущиеДанные.ИтогВзносыСтрока);
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь)) Цикл
		ПараметрыОткрытия.Вставить(ИмяПоля, Элемент.ТекущиеДанные[ИмяПоля]);
	КонецЦикла;
	
	ОткрытьФорму("ОбщаяФорма.ПросмотрРезультатовРасчетаСтраховыхВзносов", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Редактирование результатов распределения.

Функция ОписаниеСтрокиРаспределенияПоИсточникамФинансирования()
	
	Возврат Новый Структура("Представление,Результат,ВидРасчета", "", 0);
	
КонецФункции

Функция ПараметрыОткрытияФормыРедактированияРезультатовРаспределенияПоИсточникамФинансирования(Форма, ОписаниеТаблицы, ТекущиеДанные, Период, Организация)
	
	ПараметрыОткрытия = Новый Структура("
	|ТолькоПросмотр,
	|Организация,
	|Период,
	|ИдентификаторСтроки,
	|Сотрудник,
	|ОписаниеТаблицы,
	|ВидРасчета,
	|ДатаНачала");
	
	ФиксСторно = ?(ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаФиксСторно),ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаФиксСторно],Ложь);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр Или ФиксСторно);
	Если Организация = Неопределено Тогда
		ПараметрыОткрытия.Вставить("Организация", Форма.Объект.Организация);
	Иначе
		ПараметрыОткрытия.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Период", Период);
	
	ПараметрыОткрытия.Вставить("ИдентификаторСтроки", ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки]);
	ПараметрыОткрытия.Вставить("Сотрудник", ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаСотрудник]);
	ПараметрыОткрытия.Вставить("ОписаниеТаблицы", Новый ФиксированнаяСтруктура(ОписаниеТаблицы));
	
	Подразделение = Неопределено;
	Если ТекущиеДанные.Свойство("Подразделение", Подразделение) Тогда
		ПараметрыОткрытия.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РезультатРаспределения) <> Тип("ФиксированныйМассив") Тогда
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище) Тогда
			ПараметрыОткрытия.Вставить("АдресРаспределенияРезультатовВХранилище", Форма[ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище]);
		Иначе 
			ТекущиеДанные.РезультатРаспределения = Новый ФиксированныйМассив(Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РаспределениеРезультатов", ТекущиеДанные.РезультатРаспределения);
	
	РаспределяемыйРезультат = Новый Массив;
	
	Если ОписаниеТаблицы.ИмяТаблицы = "НДФЛ" Тогда
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные[ОписаниеТаблицы.ИмяПоляРезультат] - ТекущиеДанные.ЗачтеноАвансовыхПлатежей;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
	ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = "КорректировкиВыплаты" Тогда
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ?(ТекущиеДанные.КорректировкаВыплаты>0,ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено"),ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету"));
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.КорректировкаВыплаты;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
	ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов" Тогда
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.ПогашениеЗайма;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.ПогашениеПроцентов;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.НачисленоПроцентов;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.МатериальнаяВыгода;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ");
		РаспределяемаяСтрока.Представление = Строка(РаспределяемаяСтрока.ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные.НалогНаМатериальнуюВыгоду;
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
	ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = "НачисленияПоДоговорам" Тогда
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги");
		РаспределяемаяСтрока.Представление = Строка(ТекущиеДанные.ДокументОснование);
		РаспределяемаяСтрока.Результат = ТекущиеДанные[ОписаниеТаблицы.ИмяПоляРезультат];
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
		ПараметрыОткрытия.Вставить("ВидРасчета", ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги"));
		ПараметрыОткрытия.Вставить("ДатаНачала", Период);
		
	Иначе
		
		ВидРасчета = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
		ПараметрыОткрытия.Вставить("ВидРасчета", ВидРасчета);
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДатаНачала) Тогда
			ПараметрыОткрытия.Вставить("ДатаНачала", ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаДатаНачала]);
		Иначе
			ПараметрыОткрытия.Вставить("ДатаНачала", Период);
		КонецЕсли;
		
		РаспределяемаяСтрока = ОписаниеСтрокиРаспределенияПоИсточникамФинансирования();
		РаспределяемаяСтрока.ВидРасчета = ВидРасчета;
		
		РаспределяемаяСтрока.Представление = Строка(ВидРасчета);
		РаспределяемаяСтрока.Результат = ТекущиеДанные[ОписаниеТаблицы.ИмяПоляРезультат];
		
		РаспределяемыйРезультат.Добавить(РаспределяемаяСтрока);
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РаспределяемыйРезультат", РаспределяемыйРезультат);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(Форма, ОписаниеТаблицы, ВыбраннаяСтрока, Период, Организация = Неопределено, ОбработчикПослеЗакрытия = Неопределено) Экспорт

	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТекущиеДанные = ТаблицаСДанными.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыРедактированияРезультатовРаспределенияПоИсточникамФинансирования(Форма, ОписаниеТаблицы, ТекущиеДанные, Период, Организация);
	
	ДополнительныеПараметры = Новый Структура(
		"Форма, 
		|ВыбраннаяСтрока,
		|ОписаниеТаблицы,
		|ОбработчикПослеЗакрытия");
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.ВыбраннаяСтрока = ВыбраннаяСтрока;
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.ОбработчикПослеЗакрытия = ОбработчикПослеЗакрытия;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФормаРедактированияРезультатовРаспределенияПоИсточникамФинансированиПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.РедактированиеРезультатовРаспределенияНачисленийИУдержаний", ПараметрыОткрытия, Форма,,,,ОбработчикЗавершения);
	

КонецПроцедуры

Процедура ФормаРедактированияРезультатовРаспределенияПоИсточникамФинансированиПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник				         = РезультатЗакрытия.СотрудникФизическоеЛицо;
	НовоеРаспределениеРезультатов 	 = РезультатЗакрытия.РаспределениеРезультатов;
	ИсходноеРаспределениеРезультатов = РезультатЗакрытия.ИсходноеРаспределениеРезультатов;
	ПрименяетсяЕНВД                  = РезультатЗакрытия.ПрименяетсяЕНВД;
	СтатьиФинансированияГранта		 = РезультатЗакрытия.СтатьиФинансированияГранта;
	
	Форма = ДополнительныеПараметры.Форма;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	ОбработчикПослеЗакрытия = ДополнительныеПараметры.ОбработчикПослеЗакрытия;
	
	Форма.Модифицированность = Истина;
	
	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТекущиеДанные = ТаблицаСДанными.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	НомерСтрокиИсходнойТаблицы = 0;
	Если ТекущиеДанные.Свойство("НомерСтроки") Тогда
		НомерСтрокиИсходнойТаблицы = ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
	ТекущиеДанные.РезультатРаспределения = НовоеРаспределениеРезультатов;
	
	ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ЗаполнитьПредставлениеРаспределенияВСтроке(ТекущиеДанные, Ложь, ОписаниеТаблицы.ИмяТаблицы, Форма.РаботаВБюджетномУчреждении);
	
	ПроверитьНовоеРаспределение = Ложь;
	Для каждого СтрокаРаспределения Из НовоеРаспределениеРезультатов Цикл
		Если СтрокаРаспределения.Результат <> 0 Тогда
			ПроверитьНовоеРаспределение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьНовоеРаспределение Тогда
		
		ИзмениласьДоляЕНВД 			 = Ложь;
		РаспределятьЗависимыеТаблицы = Ложь;
		ТребуетсяПересчетНДФЛ 		 = Ложь;
		
		Если СтатьиФинансированияГранта.Количество()>0 Тогда
			
			БылаДоляГранта = 0;
			Для каждого СтрокаРаспределения Из ИсходноеРаспределениеРезультатов Цикл
				Если СтатьиФинансированияГранта.Найти(СтрокаРаспределения.СтатьяФинансирования)<>Неопределено Тогда
					БылаДоляГранта = БылаДоляГранта + СтрокаРаспределения.Результат;
				КонецЕсли;
			КонецЦикла;
			
			СталаДоляГранта = 0;
			Для каждого СтрокаРаспределения Из НовоеРаспределениеРезультатов Цикл
				Если СтатьиФинансированияГранта.Найти(СтрокаРаспределения.СтатьяФинансирования)<>Неопределено Тогда
					СталаДоляГранта = СталаДоляГранта + СтрокаРаспределения.Результат;
				КонецЕсли;
			КонецЦикла;
			
			ТребуетсяПересчетНДФЛ =  БылаДоляГранта <> СталаДоляГранта;
			
		КонецЕсли;	
		
		Если ПрименяетсяЕНВД Тогда
			
			БылаДоляЕНВД = 0;
			Для каждого СтрокаРаспределения Из ИсходноеРаспределениеРезультатов Цикл
				Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
					БылаДоляЕНВД = БылаДоляЕНВД + СтрокаРаспределения.Результат;
				КонецЕсли;
			КонецЦикла;
			
			СталаДоляЕНВД = 0;
			Для каждого СтрокаРаспределения Из НовоеРаспределениеРезультатов Цикл
				Если СтрокаРаспределения.ОблагаетсяЕНВД Тогда
					СталаДоляЕНВД = СталаДоляЕНВД + СтрокаРаспределения.Результат;
				КонецЕсли;
			КонецЦикла;
			
			ИзмениласьДоляЕНВД =  БылаДоляЕНВД <> СталаДоляЕНВД;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы) Тогда
			
			Если ИзмениласьДоляЕНВД Тогда
				РаспределятьЗависимыеТаблицы = Истина;
			Иначе	
				РаспределятьЗависимыеТаблицы = Не ЗарплатаКадрыРасширенныйВызовСервера.СравнитьРезультатыРаспределения(НовоеРаспределениеРезультатов,ИсходноеРаспределениеРезультатов,ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РаспределятьЗависимыеТаблицы Или ИзмениласьДоляЕНВД Или ТребуетсяПересчетНДФЛ Тогда
			
			Сотрудник = ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
			Если ОписаниеТаблицы.ИмяТаблицы = "НачисленияПоДоговорам" Тогда
				ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги");
			Иначе
				ВидРасчета = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
			КонецЕсли;
			
			ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ОписаниеИсходныхДанныхДляОбновленияЗависимыхТаблиц();
			ПараметрыДляРаспределения.Вставить("ИмяИсходнойТаблицы", 			ОписаниеТаблицы.ИмяТаблицы);
			ПараметрыДляРаспределения.Вставить("НомерСтрокиИсходнойТаблицы", 	НомерСтрокиИсходнойТаблицы);
			ПараметрыДляРаспределения.Вставить("РаспределятьЗависимыеТаблицы",  РаспределятьЗависимыеТаблицы);
			ПараметрыДляРаспределения.Вставить("ИзмениласьДоляЕНВД", 			ИзмениласьДоляЕНВД);
			ПараметрыДляРаспределения.Вставить("ТребуетсяПересчетНДФЛ", 		ТребуетсяПересчетНДФЛ);
			ПараметрыДляРаспределения.Вставить("Сотрудник", 					Сотрудник);
			ПараметрыДляРаспределения.Вставить("ВидРасчета", 					ВидРасчета);
			ПараметрыДляРаспределения.Вставить("ИменаТаблицДляОбновления", 		ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы);
			
			Форма.РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбработчикПослеЗакрытия <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ВыполнитьОбработкуОповещения(ОбработчикПослеЗакрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	// устаревший метод 
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура очищает таблицы формы подключенные к механизму.
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма) Экспорт
	МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать).
//	 
Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентБазовый.ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);		
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить).
//	 
Процедура ВыгрузитьДокументОтчетности(Ссылка) Экспорт
	ЗарплатаКадрыКлиентБазовый.ВыгрузитьДокументОтчетности(Ссылка);	
	УчетПособийСоциальногоСтрахованияРасширенныйКлиент.ВыгрузитьДокументОтчетности(Ссылка);	
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект).
//	 
Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентБазовый.СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка);	
КонецПроцедуры	

// Открывает форму ОтветственныхЛиц
// 
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, форму ответственныхлиц которой нужно открыть.
//
Процедура ОткрытьФормуСведенийОтветственныхЛиц(Организация) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СведенияОбОтветственныхЛицахКлиент");
		Модуль.ОткрытьФормуСведенийОтветственныхЛиц(Организация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования наименований организаций.

Процедура ЗаполнитьНаименованияПоСокращенному(ЮридическоеФизическоеЛицо, НаименованиеСокращенное, Наименование, НаименованиеПолное, НаименованиеСокращенноеПредыдущее, ФИОИндивидуальногоПредпринимателя) Экспорт
	
	Перем АвтоНаименованиеПолное;
	
	СтруктураНаименования = РазложитьСтрокуНаименования(НаименованиеСокращенное, ЮридическоеФизическоеЛицо);
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		НаименованиеПолное = СформироватьНаименованиеПолное(ЮридическоеФизическоеЛицо, СтруктураНаименования, ФИОИндивидуальногоПредпринимателя);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(ЮридическоеФизическоеЛицо, РазложитьСтрокуНаименования(НаименованиеСокращенноеПредыдущее, ЮридическоеФизическоеЛицо), ФИОИндивидуальногоПредпринимателя);
		
		Если СокрЛП(НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			НаименованиеПолное = СформироватьНаименованиеПолное(ЮридическоеФизическоеЛицо, СтруктураНаименования, ФИОИндивидуальногоПредпринимателя);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенноеПредыдущее, ЮридическоеФизическоеЛицо));
		
		Если СокрЛП(Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенноеПредыдущее	= НаименованиеСокращенное;
	
КонецПроцедуры

Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

Функция СформироватьНаименованиеПолное(ЮридическоеФизическоеЛицо, СтруктураНаименования, ФИОИндивидуальногоПредпринимателя)
	Перем НаименованиеПолное;
	
	Если ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ФИОИндивидуальногоПредпринимателя);
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

Функция РазложитьСтрокуНаименования(Знач Наименование, ЮридическоеФизическоеЛицо)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек.
			ПозицияПервойКавычки	= СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Поддержка отказа от модальности в формах.

Процедура ПоказатьДиалогЗаписиОбъектаДляВыполненияПодключаемойКоманды(Форма, Команда, Обработчик) Экспорт
	
	Если Не Форма.Параметры.Свойство("Ключ") Или Форма.Параметры.Ключ.Пустая() Тогда
		ИмяКоманды = Команда.Имя;
		АдресНастроек = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(ИмяКоманды, АдресНастроек);
		
		Если Форма.Объект.Ссылка.Пустая()
			Или (ОписаниеКоманды.РежимЗаписи <> "ЗаписыватьТолькоНовые" И Форма.Модифицированность) Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данные еще не записаны.
					|Выполнение действия ""%1"" возможно только после записи данных.
					|Данные будут записаны.'"),
				ОписаниеКоманды.Представление);
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Обработчик, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает период ожидания формы, перед запуском процедур расчета.
//
Функция ПериодОжиданияЗапускаАвтоматическогоРасчета() Экспорт 
	
	ПериодОжидания = 0;
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПериодОжидания = 1;
	Иначе
		ПериодОжидания = 0.1;
	КонецЕсли;
	
	Возврат ПериодОжидания;
	
КонецФункции

Функция НесколькоРабочихМестПолучитьСписокРабочихМестФизическогоЛица(РабочиеМестаФизическогоЛица)
	СписокРабочихМест = Новый СписокЗначений;
	Для каждого РабочееМесто Из РабочиеМестаФизическогоЛица Цикл
		СписокРабочихМест.Добавить(РабочиеМестаФизическогоЛица.Индекс(РабочееМесто), РабочееМесто.ПредставлениеРабочегоМеста);
	КонецЦикла;
	Возврат СписокРабочихМест
КонецФункции

Процедура УстановитьТекущуюСтраницуКоманднойПанелиНачислений(Форма, ДанныеТекущейСтрокиНачисления, ОписаниеКоманднойПанелиНачислений) Экспорт
	
	Если ДанныеТекущейСтрокиНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
		Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницыКоманднойПанелиНачислений].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьПродолжить];
	Иначе
		
		Если ДанныеТекущейСтрокиНачисления.ДействующийВидРасчета Тогда
			Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницыКоманднойПанелиНачислений].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьОтменить];
		Иначе
			Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницыКоманднойПанелиНачислений].ТекущаяСтраница = Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницаДобавитьУдалить];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиНачисления.Свойство("ДатаОкончанияНачисления") Тогда
		
		Если Не ДанныеТекущейСтрокиНачисления.ДействующийВидРасчета
			И ЗначениеЗаполнено(ДанныеТекущейСтрокиНачисления.ДатаОкончанияНачисления) Тогда
			
			ДоступностьПанели = Ложь;
		Иначе
			ДоступностьПанели = Истина;
		КонецЕсли;
		
		Форма.Элементы[ОписаниеКоманднойПанелиНачислений.СтраницыКоманднойПанелиНачислений].Доступность = ДоступностьПанели;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьВведенныеНаДатуДокументы(СписокДокументов) Экспорт
	
	Если СписокДокументов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("МассивДокументов, ЗаголовокФормы", СписокДокументов.ВыгрузитьЗначения(), НСтр("ru = 'Список документов'"));
		ОткрытьФорму("ОбщаяФорма.СписокПроизвольныхОбъектов", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СписокДокументов.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокДокументов[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьСтрокуСписочногоДокумента(ВладелецФормы, ПолноеИмяОбъектаМетаданных, Оповещение, ПараметрыОткрытия) Экспорт
	
	Если ТипЗнч(Оповещение.ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Для каждого ОписаниеДополнительногоПараметра Из Оповещение.ДополнительныеПараметры Цикл
			ПараметрыОткрытия.Вставить(ОписаниеДополнительногоПараметра.Ключ, ОписаниеДополнительногоПараметра.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ВладелецФормы.ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВладелецФормы", ВладелецФормы);
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьСтрокуСписочногоДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ПолноеИмяФормыОбъектаМетаданных = ПолноеИмяОбъектаМетаданных + ".ФормаОбъекта";
	Иначе
		ПолноеИмяФормыОбъектаМетаданных = ПолноеИмяОбъектаМетаданных + "Списком.Форма.ФормаСтроки";
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормыОбъектаМетаданных, ПараметрыОткрытия, ВладелецФормы, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура РедактироватьСтрокуСписочногоДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВладелецФормы = ДополнительныеПараметры.ВладелецФормы;
		ВладелецФормы.Модифицированность = Истина;
		ВладелецФормы.ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат);
		
		Если ДополнительныеПараметры.Свойство("Оповещение") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, Результат);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаПоТочностиДополнительногоПоказателя(Форма, ИмяТаблицы, РежимРаботы) Экспорт 
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.Показатель) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.СведенияОПоказателеРасчетаЗарплаты(ДанныеСтроки.Показатель);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, ИмяТаблицы + "Значение", "ОграничениеТипа", ПоказательИнфо.ТипПоказателя);
		
	Если РежимРаботы = 0 Тогда
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, ИмяТаблицы + "ЗначениеМин", "ОграничениеТипа", ПоказательИнфо.ТипПоказателя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, ИмяТаблицы + "ЗначениеМакс", "ОграничениеТипа", ПоказательИнфо.ТипПоказателя);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДокументПоОписанию(Форма, ИмяКоманды, ДополнительныеЗначенияЗаполнения = Неопределено) Экспорт
	
	ОписаниеКоманды = Форма.КомандыСозданияДокументов.Получить(ИмяКоманды);
	
	ПараметрыОткрытия = ОписаниеКоманды.Параметры;
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли; 
	
	Если Не ПараметрыОткрытия.Свойство("ЗначенияЗаполнения") Тогда
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	КонецЕсли; 
	
	Если ДополнительныеЗначенияЗаполнения <> Неопределено Тогда
		Для каждого ДополнительноеЗначение Из ДополнительныеЗначенияЗаполнения Цикл
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить(ДополнительноеЗначение.Ключ, ДополнительноеЗначение.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого НастройкаКомпоновщика Из Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			Для каждого ЭлементОтбора Из НастройкаКомпоновщика.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					КлючОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
					Если Врег(Лев(КлючОтбора, 7)) = Врег("Ссылка.") Тогда
						КлючОтбора = Сред(КлючОтбора, 8);
					КонецЕсли;
					КлючОтбора = СтрЗаменить(КлючОтбора, ".", "");
					ПараметрыОткрытия.ЗначенияЗаполнения.Вставить(КлючОтбора, ЭлементОтбора.ПравоеЗначение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			КлючОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если Врег(Лев(КлючОтбора, 7)) = Врег("Ссылка.") Тогда
				КлючОтбора = Сред(КлючОтбора, 8);
			КонецЕсли;
			КлючОтбора = СтрЗаменить(КлючОтбора, ".", "");
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить(КлючОтбора, ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФорму(ОписаниеКоманды.ПолноеИмя + "." + ОписаниеКоманды.ИмяФормы, ПараметрыОткрытия, Форма);
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СамообслуживаниеСотрудниковКлиент");
		Модуль.ПередНачаломРаботыСистемы(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	КадровыйУчетРасширенныйКлиент.ПриНачалеРаботыСистемы(Параметры);
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьНастройкиЗаполненияОтчета.
Процедура ПроверитьНастройкиЗаполненияОтчета(ПараметрыОтчета, ВыполняемоеОповещение, СтандартнаяОбработка) Экспорт
	
	Если СтандартнаяОбработка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьОбработкуРедактированиеЗаконодательныхЗначений() Экспорт
	ОткрытьФорму("Обработка.РедактированиеЗаконодательныхЗначений.Форма.Форма");
КонецПроцедуры

#КонецОбласти
