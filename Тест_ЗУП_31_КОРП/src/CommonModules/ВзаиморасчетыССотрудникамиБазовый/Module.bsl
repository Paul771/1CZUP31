
#Область СлужебныеПроцедурыИФункции

#Область УчетНачисленнойИВыплаченнойЗарплаты

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	НачисленнаяЗарплата = ТаблицаНачисленнойЗарплатыДляРегистрации(Начисления, Удержания); 
	
	ЗарегистрироватьНачисленнуюЗарплатуВЗарплатеКВыплате(Движения.ЗарплатаКВыплате, Организация, ПериодРегистрации, НачисленнаяЗарплата);
	ЗарегистрироватьНачисленнуюЗарплатуВоВзаиморасчетах(Движения.ВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, НачисленнаяЗарплата);		
	
	// зарплату, выдаваемую с авансом, помещаем еще и в зарплату к выплате авансом
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		ЗарегистрироватьНачисленнуюЗарплатуВЗарплатеКВыплате(Движения.ЗарплатаКВыплатеАвансом, Организация, ПериодРегистрации, НачисленнаяЗарплата);
	КонецЕсли;
	
	// бухгалтерское сальдо
	ЗарегистрироватьНачисленнуюЗарплатуВоВзаиморасчетах(Движения.БухгалтерскиеВзаиморасчетыССотрудниками, Организация, КонецМесяца(ПериодРегистрации), НачисленнаяЗарплата);		
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	НачисленнаяЗарплата = ТаблицаНачисленнойЗарплатыДляРегистрации(Начисления, Удержания); 
	
	ЗарегистрироватьНачисленнуюЗарплатуВЗарплатеКВыплате(Движения.ЗарплатаКВыплатеАвансом, Организация, ПериодРегистрации, НачисленнаяЗарплата);
	
КонецПроцедуры

Функция ТаблицаНачисленнойЗарплатыДляРегистрации(Начисления, Удержания)
	
	Таблица = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	
	Таблица.Колонки.Удалить("Сумма");
	Таблица.Колонки.Удалить("СуммаКорректировкиВыплаты");
	Таблица.Колонки.Добавить(
		"СуммаКВыплате",
		Метаданные.РегистрыНакопления.ЗарплатаКВыплате.Ресурсы.СуммаКВыплате.Тип);
	Таблица.Колонки.Добавить(
		"СуммаВзаиморасчетов",
		Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками.Ресурсы.СуммаВзаиморасчетов.Тип);
	Таблица.Колонки.Добавить(
		"ГруппаНачисленияУдержанияВыплаты",
		Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками.Реквизиты.ГруппаНачисленияУдержанияВыплаты.Тип);
	
	// Перенос исходных данных в результирующую таблицу
	Если Начисления <> НеОпределено Тогда
		Для Каждого Начисление Из Начисления Цикл
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Начисление);
			СтрокаТаблицы.СуммаКВыплате = Начисление.Сумма + Начисление.СуммаКорректировкиВыплаты;
			СтрокаТаблицы.СуммаВзаиморасчетов = Начисление.Сумма;
			СтрокаТаблицы.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		КонецЦикла;
	КонецЕсли;
	Если Удержания <> НеОпределено Тогда
		Для Каждого Удержание Из Удержания Цикл
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Удержание);
			СтрокаТаблицы.СуммаКВыплате = -(Удержание.Сумма - Удержание.СуммаКорректировкиВыплаты);
			СтрокаТаблицы.СуммаВзаиморасчетов = - Удержание.Сумма;
			СтрокаТаблицы.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЦикла;
	КонецЕсли;
	
	// Приведение к основным сотрудникам
	Сотрудники = Таблица.ВыгрузитьКолонку("Сотрудник");
	ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ГоловнойСотрудник");
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Сотрудник = ГоловныеСотрудники[СтрокаТаблицы.Сотрудник]
	КонецЦикла;
	
	// Свертка результирующей таблицы  
	КолонкиСуммирования = Новый Массив;
	КолонкиСуммирования.Добавить("СуммаКВыплате");
	КолонкиСуммирования.Добавить("СуммаВзаиморасчетов");
	КолонкиГруппировок = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если КолонкиСуммирования.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(Колонка.Имя)
		КонецЕсли	
	КонецЦикла;
	Таблица.Свернуть(
		СтрСоединить(КолонкиГруппировок, ", "),
		СтрСоединить(КолонкиСуммирования, ", "));

	Возврат Таблица
	
КонецФункции

Процедура ЗарегистрироватьНачисленнуюЗарплатуВЗарплатеКВыплате(НаборЗаписей, Организация, ПериодРегистрации, НачисленнаяЗарплата)
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;	
	Если НаборЗаписей.Метаданные().Измерения.ДокументОснование.Тип.СодержитТип(ТипЗнч(Регистратор)) Тогда
		ДокументОснование = Регистратор
	Иначе
		ДокументОснование = Неопределено;
	КонецЕсли;	
	
	Для Каждого Начисление Из НачисленнаяЗарплата Цикл
		Если Начисление.СуммаКВыплате <> 0 Тогда
			ЗарплатаКВыплате = НаборЗаписей.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, Начисление);
			ЗарплатаКВыплате.Период               = ПериодРегистрации;
			ЗарплатаКВыплате.Организация          = Организация;
			ЗарплатаКВыплате.ПериодВзаиморасчетов = ПериодРегистрации;
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				ЗарплатаКВыплате.ДокументОснование = ДокументОснование
			КонецЕсли;	
			
			НаборЗаписей.Записывать = Истина;
		КонецЕсли	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленнуюЗарплатуВоВзаиморасчетах(НаборЗаписей, Организация, ПериодРегистрации, НачисленнаяЗарплата)
	
	Для Каждого Начисление Из НачисленнаяЗарплата Цикл
		Если Начисление.СуммаВзаиморасчетов <> 0 Тогда
			Взаиморасчеты = НаборЗаписей.ДобавитьПриход();
					
			ЗаполнитьЗначенияСвойств(Взаиморасчеты, Начисление);
			Взаиморасчеты.Период            = ПериодРегистрации;
			Взаиморасчеты.Организация       = Организация;
			Взаиморасчеты.ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ПустаяСсылка();
			
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата) Экспорт
	
	ЗарегистрироватьВыплаченнуюЗарплатуВЗарплатаКВыплате(Движения.ЗарплатаКВыплате, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата);
	ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетах(Движения.ВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата);

	// авансовую выплату помещаем еще и в зарплату к выплате авансом
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		ЗарегистрироватьВыплаченнуюЗарплатуВЗарплатаКВыплате(Движения.ЗарплатаКВыплатеАвансом, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплатуВЗарплатаКВыплате(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата)
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Запись = НаборЗаписей.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
		Запись.Организация	= Организация;
		Запись.Период		= ПериодРегистрации;
		Запись.СуммаКВыплате= СтрокаЗарплаты.Сумма;
		
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетах(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата)
	
	// Получение переносов задолженности по строкам зарплаты
	ПереносимыеСуммы = ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахПереносимыеСуммы(Зарплата);
	
	// Регистрация выплаты (с учетом переноса задолженности)
	ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахДобавитьВыплату(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата, ПереносимыеСуммы);

	// Регистрация переносов задолженности
	ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахДобавитьПеренос(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата, ПереносимыеСуммы)

КонецПроцедуры

Функция ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахПереносимыеСуммы(Зарплата)
	
	ПереносимыеСуммы = Новый Соответствие;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		ПереносимыеСуммы.Вставить(СтрокаЗарплаты, 0)
	КонецЦикла;	
	
	КолонкаИндексСтроки = Зарплата.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7));
	Для ИндексСтроки = 0 По Зарплата.Количество() - 1 Цикл
		Зарплата[ИндексСтроки].ИндексСтроки = ИндексСтроки
	КонецЦикла;
	
	// Сопоставление отрицательных сумм с кандидатами на "доноров" для переноса задолженности,
	// с упорядочиванием положительных строк по степени сходства с реципиентом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Зарплата", Зарплата);
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	Зарплата.ИндексСтроки,
    |	Зарплата.ФизическоеЛицо,
    |	Зарплата.СтатьяФинансирования,
    |	Зарплата.СтатьяРасходов,
    |	Зарплата.Сотрудник,
    |	Зарплата.Подразделение,
    |	Зарплата.ПериодВзаиморасчетов,
    |	Зарплата.Сумма
    |ПОМЕСТИТЬ ВТЗарплата
    |ИЗ
    |	&Зарплата КАК Зарплата
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ЗарплатаОтрицательная.ИндексСтроки КАК ИндексОтрицательнойСтроки,
    |	ЗарплатаПоложительная.ИндексСтроки КАК ИндексПоложительнойСтроки
    |ИЗ
    |	ВТЗарплата КАК ЗарплатаОтрицательная
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарплата КАК ЗарплатаПоложительная
    |		ПО ЗарплатаОтрицательная.ФизическоеЛицо = ЗарплатаПоложительная.ФизическоеЛицо
    |			И ЗарплатаОтрицательная.СтатьяФинансирования = ЗарплатаПоложительная.СтатьяФинансирования
    |			И ЗарплатаОтрицательная.СтатьяРасходов = ЗарплатаПоложительная.СтатьяРасходов
    |			И (ЗарплатаОтрицательная.Сумма < 0)
    |			И (ЗарплатаПоложительная.Сумма > 0)
    |
    |УПОРЯДОЧИТЬ ПО
    |	ЗарплатаОтрицательная.ФизическоеЛицо,
    |	ИндексОтрицательнойСтроки,
    |	ВЫБОР
    |		КОГДА ЗарплатаОтрицательная.Сотрудник = ЗарплатаПоложительная.Сотрудник
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ УБЫВ,
    |	ВЫБОР
    |		КОГДА ЗарплатаОтрицательная.Подразделение = ЗарплатаПоложительная.Подразделение
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ УБЫВ,
    |	ЗарплатаОтрицательная.Сумма УБЫВ,
    |	ЗарплатаПоложительная.Сумма,
    |	ЗарплатаПоложительная.ИндексСтроки";
	
    Выборка = Запрос.Выполнить().Выбрать();
	
	// формирование переносимых сумм
	
	Пока Выборка.СледующийПоЗначениюПоля("ИндексОтрицательнойСтроки") Цикл
		ОтрицательнаяСтрока = Зарплата[Выборка.ИндексОтрицательнойСтроки];
		Пока Выборка.Следующий() Цикл
			ПоложительнаяСтрока = Зарплата[Выборка.ИндексПоложительнойСтроки];
			ПереносимаяСумма = 
				МИН(
					-ОтрицательнаяСтрока.Сумма + ПереносимыеСуммы[ОтрицательнаяСтрока], 
					 ПоложительнаяСтрока.Сумма - ПереносимыеСуммы[ПоложительнаяСтрока]);
			ПереносимыеСуммы[ОтрицательнаяСтрока] = ПереносимыеСуммы[ОтрицательнаяСтрока] - ПереносимаяСумма;
			ПереносимыеСуммы[ПоложительнаяСтрока] = ПереносимыеСуммы[ПоложительнаяСтрока] + ПереносимаяСумма ;
			Если ОтрицательнаяСтрока.Сумма = ПереносимыеСуммы[ОтрицательнаяСтрока] Тогда 
				Прервать
			КонецЕсли;
		КонецЦикла;    
	КонецЦикла;    
	
	Зарплата.Колонки.Удалить(КолонкаИндексСтроки);
	
	Возврат ПереносимыеСуммы
	
КонецФункции	

Процедура ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахДобавитьВыплату(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата, ПереносимыеСуммы)
	
	ВидВзаиморасчетов = ВзаиморасчетыССотрудниками.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты);
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Запись = НаборЗаписей.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
		Запись.Организация = Организация;
		Запись.Период      = ПериодРегистрации;
		Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		Запись.СуммаВзаиморасчетов	= СтрокаЗарплаты.Сумма - ПереносимыеСуммы[СтрокаЗарплаты];
		Запись.ВидВзаиморасчетов	= ВидВзаиморасчетов;
		
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплатуВоВзаиморасчетахДобавитьПеренос(НаборЗаписей, Организация, ПериодРегистрации, ХарактерВыплаты, Зарплата, ПереносимыеСуммы)
	
	// Сворачивание переносов задолженности для исключения дублирования строк с противоположными знаками.
	КолонкиГруппировокПереносов = "ФизическоеЛицо, СтатьяФинансирования, СтатьяРасходов, Сотрудник, Подразделение";
	ПереносыЗадолженности = НаборЗаписей.ВыгрузитьКолонки(КолонкиГруппировокПереносов + ", СуммаВзаиморасчетов");
	Для Каждого ПереносимаяСумма Из ПереносимыеСуммы Цикл
		ПереносЗадолженности = ПереносыЗадолженности.Добавить();
		ЗаполнитьЗначенияСвойств(ПереносЗадолженности, ПереносимаяСумма.Ключ);
		ПереносЗадолженности.СуммаВзаиморасчетов = ПереносимаяСумма.Значение;
	КонецЦикла;	
	ПереносыЗадолженности.Свернуть(КолонкиГруппировокПереносов, "СуммаВзаиморасчетов");
	
	// Регистрация переносов задолженности
	Для Каждого СтрокаЗарплаты Из ПереносыЗадолженности Цикл
		Запись = НаборЗаписей.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
		Запись.Организация = Организация;
		Запись.Период = ПериодРегистрации;
		Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		Запись.ВидВзаиморасчетов	= Перечисления.ВидыВзаиморасчетовССотрудниками.ПереносЗадолженности;
		
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	
	ЕстьКолонкаСуммаПоБухучету = Остатки.Колонки.Найти("СуммаПоБухучету")<>Неопределено;
	ЕстьКолонкаВыплатыЗаПрошлыеПериоды = Остатки.Колонки.Найти("ВыплатыЗаПрошлыеПериоды")<>Неопределено;

	Если Не ЕстьКолонкаСуммаПоБухучету Тогда 
		Остатки.Колонки.Добавить("СуммаПоБухучету", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	КонецЕсли;
	Если Не ЕстьКолонкаВыплатыЗаПрошлыеПериоды Тогда 
		Остатки.Колонки.Добавить("ВыплатыЗаПрошлыеПериоды", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	КонецЕсли;
	
	Если Не (ЕстьКолонкаСуммаПоБухучету И ЕстьКолонкаВыплатыЗаПрошлыеПериоды) Тогда 
		Для Каждого СтрокаОстатка Из Остатки Цикл
			Если Не ЕстьКолонкаСуммаПоБухучету Тогда 
				СтрокаОстатка.СуммаПоБухучету = СтрокаОстатка.Сумма;
			КонецЕсли;
			Если Не ЕстьКолонкаВыплатыЗаПрошлыеПериоды Тогда 
				СтрокаОстатка.ВыплатыЗаПрошлыеПериоды = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаОстатка Из Остатки Цикл
		
		Если СтрокаОстатка.Сумма <> 0 Тогда
				
			ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, СтрокаОстатка);
			
			ЗарплатаКВыплате.Период			= ПериодРегистрации;
			ЗарплатаКВыплате.Организация	= Организация;
			ЗарплатаКВыплате.СуммаКВыплате	= СтрокаОстатка.Сумма;
			
			Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Взаиморасчеты, СтрокаОстатка);
			
			Взаиморасчеты.Период				= ПериодРегистрации;
			Взаиморасчеты.Организация			= Организация;
			Взаиморасчеты.СуммаВзаиморасчетов	= СтрокаОстатка.Сумма;
			Взаиморасчеты.ВидВзаиморасчетов	= Перечисления.ВидыВзаиморасчетовССотрудниками.НачальнаяЗадолженность;
			Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.ПустаяСсылка();
			
			Движения.ЗарплатаКВыплате.Записывать = Истина;
			Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;		
			
		КонецЕсли;	
		
		Если СтрокаОстатка.СуммаПоБухучету <> 0 Тогда
				
			БухВзаиморасчеты = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(БухВзаиморасчеты, СтрокаОстатка);
			
			БухВзаиморасчеты.Период					= НачалоМесяца(ПериодРегистрации) - 1;
			БухВзаиморасчеты.Организация			= Организация;
			БухВзаиморасчеты.СуммаВзаиморасчетов	= СтрокаОстатка.СуммаПоБухучету;
			БухВзаиморасчеты.ВидВзаиморасчетов		= Перечисления.ВидыВзаиморасчетовССотрудниками.НачальнаяЗадолженность;
			БухВзаиморасчеты.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.ПустаяСсылка();
			
			Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать = Истина;
			
		КонецЕсли;	
		
		Если СтрокаОстатка.ВыплатыЗаПрошлыеПериоды <> 0 Тогда
				
			БухВзаиморасчеты = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(БухВзаиморасчеты, СтрокаОстатка);
			
			БухВзаиморасчеты.Период					= НачалоМесяца(ПериодРегистрации) + 60*60*12;
			БухВзаиморасчеты.Организация			= Организация;
			БухВзаиморасчеты.СуммаВзаиморасчетов	= СтрокаОстатка.ВыплатыЗаПрошлыеПериоды;
			БухВзаиморасчеты.ВидВзаиморасчетов		= Перечисления.ВидыВзаиморасчетовССотрудниками.НачальнаяЗадолженность;
			БухВзаиморасчеты.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.ПустаяСсылка();
			
			Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать = Истина;
			
		КонецЕсли;	
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ХарактерВыплаты) Экспорт
	
	ВидВзаиморасчетов = ВзаиморасчетыССотрудниками.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты);
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Запись = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
		Запись.Организация = Организация;
		Запись.Период      = ДатаОперации;
		Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
		Запись.СуммаВзаиморасчетов = СтрокаЗарплаты.Сумма;
		Запись.ВидВзаиморасчетов   = ВидВзаиморасчетов;
		
		Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура СпособыВыплатыЗарплатыНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	               |ГДЕ
	               |	СпособыВыплатыЗарплаты.Предопределенный = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	
	Если СпособВыплатыСсылка <> Неопределено Тогда
		
		СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
		СпособВыплатыОбъект.Наименование	= НСтр("ru = 'Зарплата за месяц'");
		СпособВыплатыОбъект.Поставляемый	= Истина;
		СпособВыплатыОбъект.ХарактерВыплаты	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли;
	
	СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
	
	СпособВыплатыОбъект.Наименование	= НСтр("ru = 'Аванс'");
	СпособВыплатыОбъект.Поставляемый	= Истина;
	СпособВыплатыОбъект.ХарактерВыплаты	= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	СпособВыплатыОбъект.Записать();
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыЗаполнитьПризнакПоставляемый() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	               |ГДЕ
	               |	СпособыВыплатыЗарплаты.Поставляемый = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СпособВыплатыОбъект.Предопределенный ИЛИ СпособВыплатыОбъект.Наименование = "Аванс" Тогда
			СпособВыплатыОбъект.Поставляемый = Истина;
			СпособВыплатыОбъект.Записать();
		КонецЕсли	
	КонецЦикла	
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВедомостей

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	
	Шапка = Новый Структура;
	Шапка.Вставить("Дата");
	Шапка.Вставить("Организация");
	Шапка.Вставить("Подразделение");
	Шапка.Вставить("ПериодРегистрации");
	Шапка.Вставить("СпособВыплаты");
	Шапка.Вставить("МестоВыплаты");
	Шапка.Вставить("Округление");
	
	Зарплата = Новый ТаблицаЗначений;
	Зарплата.Колонки.Добавить("Сотрудник");
	Зарплата.Колонки.Добавить("Подразделение");
	Зарплата.Колонки.Добавить("КВыплате");
	
	ДанныеЗаполненияВедомости = Новый Структура;
	
	ДанныеЗаполненияВедомости.Вставить("ЭтоДанныеЗаполненияВедомостиНаВыплатуЗарплаты");
	ДанныеЗаполненияВедомости.Вставить("Шапка",		Шапка);
	ДанныеЗаполненияВедомости.Вставить("Зарплата",	Зарплата);

	Возврат ДанныеЗаполненияВедомости
	
КонецФункции	

#КонецОбласти

#Область ОплатаВедомостей

Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Период КАК Период,
	|	ЗарплатаКВыплате.ВидДвижения КАК ВидДвижения,
	|	ЗарплатаКВыплате.Организация КАК Организация,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СуммаКВыплате КАК СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &Ведомость
	|	И ЗарплатаКВыплате.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период КАК Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения КАК ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация КАК Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов КАК ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период КАК Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения КАК ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация КАК Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов КАК ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаЗарплатаКВыплате  = РезультатыЗапроса[0].Выбрать();
	ВыборкаВзаиморасчетов    = РезультатыЗапроса[1].Выбрать();
	ВыборкаВзаиморасчетовБух = РезультатыЗапроса[2].Выбрать();
	
	Пока ВыборкаЗарплатаКВыплате.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплате);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплате.СуммаКВыплате;
		Движения.ЗарплатаКВыплате.Записывать = Истина;
	КонецЦикла;
	
	Пока ВыборкаВзаиморасчетов.Следующий() Цикл
		НоваяЗапись = Движения.ВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетов);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетов.СуммаВзаиморасчетов;
		Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	КонецЦикла;
	
	Пока ВыборкаВзаиморасчетовБух.Следующий() Цикл
		НоваяЗапись = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетовБух);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетовБух.СуммаВзаиморасчетов;
		Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать	= Истина
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВзаимосвязиМеждуОбъектами

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		Возврат Справочники.СпособыВыплатыЗарплаты.Зарплата
	Иначе
		Возврат Справочники.СпособыВыплатыЗарплаты.ПустаяСсылка()
	КонецЕсли	
КонецФункции

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыВКассу
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыВБанк
	Иначе
		МенеджерДокументаПоМестуВыплаты = Неопределено
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда 	
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты
	КонецЕсли;	
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

#КонецОбласти

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = Новый Структура;
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ХарактерВыплаты",			Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ПериодРегистрации",		Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Дата",						Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ИгнорируемыеРегистраторы",	Новый Массив);
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплате();
	
	ПараметрыПолученияЗарплатыКВыплате.ХарактерВыплаты			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	ПараметрыПолученияЗарплатыКВыплате.Организация				= Ведомость.Организация;
	ПараметрыПолученияЗарплатыКВыплате.ПериодРегистрации		= Ведомость.ПериодРегистрации;
	ПараметрыПолученияЗарплатыКВыплате.Дата						= Ведомость.Дата;
	ПараметрыПолученияЗарплатыКВыплате.ИгнорируемыеРегистраторы	= Ведомость.Ссылка;
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	ИначеЕсли Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда 	
		СоздатьВТЗарплатаКВыплатеЗарплата(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Получаем размеры плановых авансов сотрудников
	ВзаиморасчетыССотрудниками.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, Истина, Параметры, ИмяВТСотрудники);

	// Определяем суммы авансов к выплате
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	&ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановыйАванс.Сотрудник КАК Сотрудник,
	|		ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ПлановыйАванс.Подразделение КАК Подразделение,
	|		ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|		ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|	ИЗ
	|		ВТПлановыйАванс КАК ПлановыйАванс
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплатеАвансом.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Организация = &Организация
	|					И ПериодВзаиморасчетов = &ПериодРегистрации
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодРегистрации
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеЗарплата(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",     КонецМесяца(Параметры.ПериодРегистрации));
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по указанным сотрудникам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				,
	|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|					И Организация = &Организация
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
	|		И ЗарплатаКВыплате.Организация = &Организация
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
	Запрос.Выполнить();
	
	// Получаем кадровые данные сотрудников.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТСотрудникиИПериод");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ, ТолькоРазрешенные, "Подразделение, ФОТ, СпособРасчетаАванса, Аванс" + ?(ПустаяСтрока(КадровыеДанные), "", "," + КадровыеДанные));
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ФиксированнойСуммой)
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.Аванс, 0)
	|		КОГДА КадровыеДанныеСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа)
	|				И ЕСТЬNULL(КадровыеДанныеСотрудников.Аванс, 0) <> 0
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ФОТ, 0) * КадровыеДанныеСотрудников.Аванс / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Сотрудники.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиИПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	Если Не ПустаяСтрока(КадровыеДанные) Тогда
		
		ТекстПолейКадровыхДанных = "КадровыеДанныеСотрудников.Подразделение,";
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", Истина, Истина);
		Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
			
			ТекстПолейКадровыхДанных = ТекстПолейКадровыхДанных + "
				|	КадровыеДанныеСотрудников." + ИмяКадровыхДанных + ",";
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.Подразделение,", ТекстПолейКадровыхДанных);
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "") Экспорт
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", Ведомость.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники) 

	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
		ОкончаниеПериода	= МИН(Дата(Год(Ведомость.ПериодРегистрации), Месяц(Ведомость.ПериодРегистрации), 15), Ведомость.Дата);
	Иначе
		НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
		ОкончаниеПериода	= МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);
	КонецЕсли;	
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация 					= Ведомость.Организация;
	ПараметрыПолученияСотрудников.Подразделение 					= Ведомость.Подразделение;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудников.НачалоПериода 		= НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= ОкончаниеПериода;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Если ЗначениеЗаполнено(Ведомость.Подразделение) Тогда
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыПоШапкеВедомости");
		
	Иначе
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		КадровыйУчет.СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(МенеджерВременныхТаблиц, Истина, Ведомость.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботыПоШапкеВедомости
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Сотрудник.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиНеОформленныеПоТрудовомуДоговору КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиНеОформленныеПоТрудовомуДоговору";
		
		Запрос.Выполнить();
		
	КонецЕсли;	
	
	ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыПоШапкеВедомости";
	
	// аванс не работающим на дату ведомости не выплачиваем
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		
		ПараметрыПолученияСотрудников.НачалоПериода 	= НачалоДня(Ведомость.Дата);
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= КонецДня(Ведомость.Дата);
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыНаДатуВедомости");
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТРаботающиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуРаботыНаДатуВедомости КАК РаботающиеСотрудники
		|		ПО Сотрудники.Сотрудник = РаботающиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыНаДатуВедомости";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТРаботающиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВходящиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудники";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТВходящиеСотрудникиПоМестуРаботы";

	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
	|ИЗ
	|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МестоВыплаты = Ведомость.МестоВыплаты();
	
	Если МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		
		ОписательВременныхТаблиц = ОбменСБанкамиПоЗарплатнымПроектам.ОписаниеВременнойТаблицыДляСоздатьВТЛицевыеСчетаСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, , , Ведомость.Дата);
		
		ОбменСБанкамиПоЗарплатнымПроектам.СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
			ОписательВременныхТаблиц, Истина, Ведомость.Организация, МестоВыплаты.Значение);
		
		Если ЗначениеЗаполнено(МестоВыплаты.Значение) Тогда
			// При указанном зарплатном проекте отбираем сотрудников с л/с в этом проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|			И (ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ НЕ NULL )";
		Иначе
			// При не указанном зарплатном проекте отбираем тех сотрудников, у которых нет л/с ни в одном проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|ГДЕ
			|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ NULL ";
		КонецЕсли	
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	#ВТСотрудники КАК Сотрудники";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) Экспорт
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Ведомость.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Ведомость.Подразделение;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

#Область ПроцедурыИФункцииВедомостейНаВыплатуЗарплаты

// Заполнение и расчет документа.

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Неопределено;
	
	Возврат МестоВыплаты
	
КонецФункции

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	
КонецПроцедуры	

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не задан период регистрации'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru='Не задана дата документа'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты'"));
	
	ПравилаПроверки.Вставить("Округление",			НСтр("ru='Не указан способ округления'"));
	
	Возврат	ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)

КонецФункции

/// Заполнение ведомостей

Процедура ВедомостьРассчитатьСуммыТаблицыЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Получаем способ округления
	Если ЗначениеЗаполнено(Ведомость.Округление) Тогда
		СпособОкругленияСсылка = Ведомость.Округление;
	Иначе
		СпособОкругленияСсылка = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли;
	СпособОкругления = СпособОкругленияСсылка.ПолучитьОбъект();
	
	// структура для отбора строк зарплаты, попадающих в группу
	ПараметрыОтбораГруппы = Новый Структура("ИдентификаторСтроки");
	
	// выделяем группы из таблицы зарплат
	ИдентификаторыГрупп = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗарплат.ВыгрузитьКолонку("ИдентификаторСтроки"));
	
	// Округляем сумму по группе
	Для Каждого ИдентификаторСтроки Из ИдентификаторыГрупп Цикл
		
		ПараметрыОтбораГруппы.ИдентификаторСтроки = ИдентификаторСтроки; 
		ЗарплатаГруппы = ТаблицаЗарплат.НайтиСтроки(ПараметрыОтбораГруппы);
		
		СуммаГруппы = 0;
		Для Каждого СтрокаЗарплатыГруппы Из ЗарплатаГруппы Цикл
			СуммаГруппы = СуммаГруппы + СтрокаЗарплатыГруппы.КВыплате
		КонецЦикла;
		
		СуммаГруппы = СпособОкругления.Округлить(СуммаГруппы);
		
		ЗарплатаКадры.РазнестиСуммуПоБазе(СуммаГруппы, ЗарплатаГруппы, "КВыплате");
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Получаем ключевые поля группировки зарплаты
	КолонкиГруппировки = ВзаиморасчетыССотрудниками.ВедомостьКолонкиГруппировкиЗарплаты(Ведомость);
	
	// Создаем таблицу состава - ключевые поля и поле с массивом строк таблицы зарплат
	Состав = Ведомость.Состав.ВыгрузитьКолонки(КолонкиГруппировки +", ИдентификаторСтроки");
	Состав.Колонки.Добавить("КВыплате"); 		
	Состав.Колонки.Добавить("Зарплата"); 		
	
	// структура для отбора строк зарплаты, попадающих в строку состава
	ПараметрыОтбораГруппы = Новый Структура("ИдентификаторСтроки");
	
	// выделяем группы из таблицы зарплат
	ИдентификаторыГрупп = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаЗарплат.ВыгрузитьКолонку("ИдентификаторСтроки"));
	
	// создаем строки состава, помещая в них и строки таблицы зарплат
	Для Каждого ИдентификаторСтроки Из ИдентификаторыГрупп Цикл
		
		ПараметрыОтбораГруппы.ИдентификаторСтроки = ИдентификаторСтроки; 
		ЗарплатаГруппы = ТаблицаЗарплат.Скопировать(ПараметрыОтбораГруппы);
		
		СтрокаСостава = Состав.Добавить();
		СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
		
		ЗаполнитьЗначенияСвойств(СтрокаСостава, ЗарплатаГруппы[0], КолонкиГруппировки);
		СтрокаСостава.Зарплата = ЗарплатаГруппы;
		СтрокаСостава.КВыплате = ЗарплатаГруппы.Итог("КВыплате");
		
	КонецЦикла;
	
	Возврат Состав;
	
КонецФункции	

Процедура ВедомостьОчиститьСостав(Ведомость) Экспорт
	Ведомость.Состав.Очистить();
	Ведомость.Зарплата.Очистить();
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав) Экспорт
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		СтрокаТЧСостав = Ведомость.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧСостав, СтрокаСостава);

		Для Каждого СтрокаЗарплаты Из СтрокаСостава.Зарплата Цикл
			СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
			СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла
		
	КонецЦикла
	
КонецПроцедуры	

/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(Ведомость, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ВзаиморасчетыССотрудниками.ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Тогда
		
		ЗаполнитьЗначенияСвойств(Ведомость, ДанныеЗаполнения.Шапка);
		Ведомость.УстановитьМестоВыплаты(ДанныеЗаполнения.Шапка.МестоВыплаты);
		Ведомость.Зарплата.Загрузить(ДанныеЗаполнения.Зарплата);
		
		ВедомостьЗаполнитьОтветственныеЛица(Ведомость);
		
		СтандартнаяОбработка = Ложь
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ДокументОбъект.ВводНачальныхДанных Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплаты");
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
		ЗарплатаСтроки = ДокументОбъект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), "КВыплате");
		Если ЗарплатаСтроки.Итог("КВыплате") < 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У сотрудника %1 указана отрицательная сумма к выплате'"),
						СтрокаСостава.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Состав[%1].ФизическоеЛицо", СтрокаСостава.НомерСтроки-1),, Отказ);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	Если ВзаиморасчетыССотрудниками.ЕстьОплатаПоВедомости(ДокументОбъект.Ссылка) Тогда
		
		СообщениеОбОшибке = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По ведомости %1 номер %2 от %3 произведены оплаты, изменения запрещены'"), 
				?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу"), НСтр("ru='в кассу'"), НСтр("ru='в банк'")), 
				ДокументОбъект.Номер, 
				Формат(ДокументОбъект.Дата, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, ДокументОбъект);
		
		Отказ = Истина;
		
		Возврат
		
	КонецЕсли;
	
	// Очистка табличной части Зарплата от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и Зарплата.
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из ДокументОбъект.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтрСоединить(ПоляСостава, ", ");
	
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из ДокументОбъект.Зарплата Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаЗарплаты.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаЗарплаты);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СписокСвойств)
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.Зарплата.Удалить(ЛишняяСтрока);
	КонецЦикла;	
	
	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки.
	ДокументОбъект.СуммаПоДокументу = ДокументОбъект.Зарплата.Итог("КВыплате");
	
КонецПроцедуры

Процедура ВедомостьЗаполнитьОтветственныеЛица(Ведомость)
	
	ЗаполняемыеЗначения = Новый Структура;
	ЗаполняемыеЗначения.Вставить("Ответственный");
	ЗаполняемыеЗначения.Вставить("Организация");
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	Для Каждого Реквизит Из МенеджерВедомости.РеквизитыОтветственныхЛиц() Цикл
		ЗаполняемыеЗначения.Вставить(Реквизит);
	КонецЦикла;	
	ЗаполнитьЗначенияСвойств(ЗаполняемыеЗначения, Ведомость);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	ЗаполнитьЗначенияСвойств(Ведомость, ЗаполняемыеЗначения,, "Организация");
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ) Экспорт
	
	ОписаниеКолонокЗарплаты = ВзаиморасчетыССотрудниками.НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты();
	ОписаниеКолонокЗарплаты.Сумма = "КВыплате";
	
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(
		Ведомость.Зарплата,
		ОписаниеКолонокЗарплаты);
	
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплаченнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Зарплата,
		ХарактерВыплаты)
	
КонецПроцедуры

/// Методы доступа к ведомостям.

/// Печать

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список перечислений
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru = 'Список перечислений'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		ТабличныйДокумент = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПечатьСпискаПеречисленийПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей'"), ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьВБанкВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДанныеДокументов.Ссылка,
	|	ВТДанныеДокументов.Номер КАК Номер,
	|	ВТДанныеДокументов.Дата КАК Дата,
	|	ВТДанныеДокументов.ПериодРегистрации,
	|	ВТДанныеДокументов.Организация,
	|	ВТДанныеДокументов.НазваниеОрганизации,
	|	ВТДанныеДокументов.КодПоОКПО,
	|	ВТДанныеДокументов.Подразделение,
	|	ВТДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ВТДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ВТДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ВТДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ВТДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДанныеДокументов.Дата,
	|	ВТДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
	
Функция ВедомостьВБанкВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	Возврат ВедомостьВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости);
КонецФункции

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчетно-платежная ведомость (Т-49).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)'");
	КомандаПечати.Порядок = 11;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т53") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т53", НСтр("ru = 'Платежная ведомость (Т-53)'"), ПечатьТ53(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т49") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т49", НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'"), ПечатьТ49(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		ПечатнаяФормаДокумента = Отчеты.АнализНачисленийИУдержаний.ПечатьТ49(ДокументСсылка);
		
		Если ПервыйДокумент Тогда
			ДокументРезультат = ПечатнаяФормаДокумента;
			НомерСтрокиНачало = 1;
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			// Добавим очередную ведомость к результирующему табличному документу
			ДокументРезультат.Вывести(ПечатнаяФормаДокумента);
		КонецЕсли;
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатьТ53(МассивОбъектов, ОбъектыПечати)
	
	Менеджер = Документы[МассивОбъектов[0].Метаданные().Имя];
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьНаВыплатуЗарплатыВКассу_Т53";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т53");
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	// получаем данные для печати
	ВыборкаШапок = Менеджер.ВыборкаДляПечатиШапки(МассивОбъектов);
	ВыборкаСтрок = Менеджер.ВыборкаДляПечатиТаблицы(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаШапок.Следующий() Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ВыборкаСтрок.Количество();
		
		ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		// выводим данные о документе
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаШапок);
		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаШапок.Подразделение) Тогда
			ОбластьМакетаШапкаДокумента.Параметры.Подразделение = ВыборкаШапок.Подразделение.ПолноеНаименование();
		КонецЕсли;
		ОбластьМакетаШапкаДокумента.Параметры.Номер					= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапок.Номер, Истина, Истина);
		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодС		= НачалоМесяца(ВыборкаШапок.ПериодРегистрации);
		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодПо		= ?(НЕ ЗначениеЗаполнено(ВыборкаШапок.ПериодРегистрации), ВыборкаШапок.ПериодРегистрации, КонецМесяца(ВыборкаШапок.ПериодРегистрации));
		
	    ОбластьМакетаШапкаДокумента.Параметры.СообщениеОНеприменимостиПечатнойФормы = 
			ЗарплатаКадры.СообщениеОНеприменимостиПечатнойФормы(
				ОбластьМакетаШапкаДокумента.Параметры.Дата,
				'20150619',
				НСтр("ru='Приказа Минфина РФ'"),
				'20150330',
				"52н");
		
		Если ВыборкаШапок.СуммаПоДокументу <> 0 Тогда
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаШапок.СуммаПоДокументу, ВалютаУчета);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокРублей = Цел(ВыборкаШапок.СуммаПоДокументу);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокКопеек = (ВыборкаШапок.СуммаПоДокументу - Цел(ВыборкаШапок.СуммаПоДокументу)) * 100
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаШапок); // Подвал документа.
		// Строка не локализуется т.к. является частью регламентированной формы, применяемой в РФ.
		ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		
		// Выводим данные по строкам документа.
		НомерСтроки = 0;
		ВыборкаСтрок.Сбросить();
		Пока ВыборкаСтрок.НайтиСледующий(ВыборкаШапок.Ссылка, "Ведомость") Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТабельныйНомер = 
				ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ВыборкаСтрок.ТабельныйНомер, Истина, Истина);
				
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
					
				ОбластьМакетаСтрока.Параметры.Физлицо = СокрЛП(ВыборкаСтрок.Фамилия)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Имя), "", " " + ВыборкаСтрок.Имя)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Отчество), "", " " + ВыборкаСтрок.Отчество);
					
			Иначе
				ФИО = Новый Структура("Фамилия, Имя, Отчество");
				ФИО.Фамилия = ВыборкаСтрок.Фамилия;
				ФИО.Имя = ВыборкаСтрок.Имя;
				ФИО.Отчество = ВыборкаСтрок.Отчество;
				ОбластьМакетаСтрока.Параметры.Физлицо = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				ИтогоНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаСтрок.Сумма;
			Итого = Итого + ВыборкаСтрок.Сумма;
			
		КонецЦикла; // по строкам документа
		
		Если ВыведеноСтрок > 0 Тогда 
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.КоличествоЛистов = ?(ВыведеноСтрок = 0,"",ВыведеноСтраниц + 1);
		
		// дополняем пустыми строками до конца страницы
		ОбщегоНазначенияБЗК.ОчиститьПараметрыТабличногоДокумента(ОбластьМакетаСтрока);
		ОбластиКонцаСтраницы = Новый Массив();
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаИтогПоСтранице);
		ОбластиКонцаСтраницы.Добавить(ОбластьМакетаПодвал);
		ОбщегоНазначенияБЗК.ДополнитьСтраницуТабличногоДокумента(ТабличныйДокумент, ОбластьМакетаСтрока, ОбластиКонцаСтраницы);  
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапок.Ссылка);
		
	КонецЦикла; // по документам
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Кассир,
	|	Ведомость.ДолжностьКассира КАК КассирДолжность,
	|	Ведомость.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДанныеДокументов.Ссылка,
	|	ВТДанныеДокументов.Номер КАК Номер,
	|	ВТДанныеДокументов.Дата КАК Дата,
	|	ВТДанныеДокументов.ПериодРегистрации,
	|	ВТДанныеДокументов.Организация,
	|	ВТДанныеДокументов.НазваниеОрганизации,
	|	ВТДанныеДокументов.КодПоОКПО,
	|	ВТДанныеДокументов.Подразделение,
	|	ВТДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ВТДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОКассирПоследние.РасшифровкаПодписи, """") КАК Кассир,
	|	ВТДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ВТДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ВТДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОКассирПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОКассирПоследние.Ссылка
	|			И ВТДанныеДокументов.Кассир = ВТФИОКассирПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ВТДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДанныеДокументов.Дата,
	|	ВТДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	Возврат ВедомостьВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости);
КонецФункции	

Функция ВедомостьВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВзаиморасчетыССотрудниками.СоздатьВТВыплатыВедомостей(Запрос.МенеджерВременныхТаблиц, Истина, ИмяТипа, Ведомости);

	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ВедомостьДата КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ТабельныйНомер, Фамилия, Имя, Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Ведомость КАК Ведомость,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	Выплаты.Сумма КАК Сумма
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Выплаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Выплаты.ВедомостьДата = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выплаты.Ведомость,
	|	Выплаты.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

#КонецОбласти

#Область СпособыВыплатыЗарплаты

Процедура СпособыВыплатыЗарплатыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
КонецПроцедуры

/// Ограничение документа

Функция ВедомостьВБанкОперацияОграниченияДокумента() Экспорт
	Возврат "";
КонецФункции

Функция ВедомостьВКассуОперацияОграниченияДокумента() Экспорт
	Возврат "";
КонецФункции

#КонецОбласти

#КонецОбласти
