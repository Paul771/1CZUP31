#Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение включенности режима автоматического управления ростом стажей
//
// Возвращаемое значение:
//	Булево	- Истина, автоматическое управление.
//
Функция УчитыватьПрерываниеСтажейАвтоматически() Экспорт
	
	Возврат Константы.УчитыватьПрерываниеСтажейАвтоматически.Получить();
	
КонецФункции

// Устанавливает значение настройки УчитыватьПрерываниеСтажейАвтоматически
//
Процедура УстановитьЗначениеУчитыватьПрерываниеСтажейАвтоматически(ЗначениеНастройки) Экспорт
	
	Константы.УчитыватьПрерываниеСтажейАвтоматически.Установить(ЗначениеНастройки);
	
КонецПроцедуры

// Возвращает массив видов стажа, автоматическим управлением ростом
//
// Возвращаемое значение:
//	Массив	- СправочникСсылка.ВидыСтажей
//
Функция СтажиСУправляемымРостом() Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ЗависимыеСтажи();
	
КонецФункции

// Запускает принудительное обновление стажей физических лиц, переданных сотрудников.
//
// Параметры:
//	Сотрудники	- Массив, СправочникСсылка.Сотрудники.
//
Процедура ОбновитьСтажиСотрудников(Сотрудники) Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНастроек = Новый Структура("Сотрудники", Сотрудники);
	
	ДлительныеОперации.ВыполнитьВФоне(
		"АвтоматическийРасчетСтажейФизическихЛиц.ОбновитьСтажиСотрудниковВФоновомЗадании",
		ПараметрыНастроек,
		ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор));
	
КонецПроцедуры

// Регистрирует необходимость обновления списка стажей при ручном изменении стажа
//
// Параметры:
//	ОбновляемыеВидыСтажей	- ТаблицаЗначений с колонками:
//								* Период			- Дата
//								* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//	СтандартнаяОбработка	- Булево, устанавливается в Ложь, если регистрация выполнена.
//
Процедура ЗарегистрироватьСписокФизическихЛицКПересчетуСтажей(ОбновляемыеВидыСтажей, СтандартнаяОбработка) Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеВидыСтажей", ОбновляемыеВидыСтажей);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.Период КАК Период,
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
		|ИЗ
		|	&ОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей";
	
	Запрос.Выполнить();
	ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц)
	
КонецПроцедуры

// Заполняет табличную часть ЗависимыеСтажи объекта в обработчике формы ПередЗаписьюНаСервере, заполняет
// структуру ДополнительныеСвойства, передаваемую в методы записи периодических сведений для отключения
// обновления табличной части ЗависимыеСтажи объекта в обработчиках при записи регистра сведений.
//
// Параметры:
//	Форма					- УправляемаяФорма
//	ТекущийОбъект			- Объект с табличной частью ЗависимыеСтажи
//	ДополнительныеСвойства	- Структура
//
Процедура ЗаполнитьЗависимыеСтажиТерриторииПоДаннымФормы(Форма, ТекущийОбъект, ДополнительныеСвойства) Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ТерриториальныеУсловияПФРНаборЗаписейПрочитан") Тогда
		
		НаборЗаписей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ТерриториальныеУсловияПФРНаборЗаписей");
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[НаборЗаписей.Количество() - 1];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запись = Неопределено Тогда
		Запись = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ТерриториальныеУсловияПФР");
	КонецЕсли;
	
	СеверныеВидыСтажей = Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.Северный);
	Если СеверныеВидыСтажей.Количество() > 1 Тогда
		СеверныеВидыСтажей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СеверныеВидыСтажей[0]);
	КонецЕсли;
	
	Если Справочники.ТерриториальныеУсловияПФР.СписокСеверныхТерриториальныхУсловий().НайтиПоЗначению(Запись.ТерриториальныеУсловияПФР) = Неопределено Тогда
		ВидыСтажейОбъекта = Новый Массив;
	Иначе
		ВидыСтажейОбъекта = СеверныеВидыСтажей;
	КонецЕсли;
	
	ОбновитьЗависимыеВидыСтажейОбъекта(ТекущийОбъект, СеверныеВидыСтажей, ВидыСтажейОбъекта);
	
	УстановитьДополнительноеСвойствоПропуститьОбновлениеЗависимыхСтажей(ДополнительныеСвойства);
	
КонецПроцедуры

// Заполняет табличную часть ЗависимыеСтажи объекта в обработчике формы ПередЗаписьюНаСервере.
//
// Параметры:
//	Форма					- УправляемаяФорма
//	ТекущийОбъект			- Объект с табличной частью ЗависимыеСтажи
//	ДополнительныеСвойства	- Структура
//
Процедура ЗаполнитьЗависимыеСтажиДолжностиПоДаннымФормы(Форма, ТекущийОбъект) Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		ВидыСтажейДолжности = МодульГосударственнаяСлужба.ВидыСтажейПоСвойствамДолжностиФормы(Форма);
		ВсеВидыСтажейДолжности = МодульГосударственнаяСлужба.ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста();
		
	Иначе
		
		ВидыСтажейДолжности = Новый Массив;
		ВсеВидыСтажейДолжности = Новый Массив;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажейДолжности, МодульОбразовательныеУчреждения.ВидыСтажейПоСвойствамДолжностиФормы(Форма));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеВидыСтажейДолжности, МодульОбразовательныеУчреждения.ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста());
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСтажейДолжности, МодульМедицина.ВидыСтажейПоСвойствамДолжностиФормы(Форма));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеВидыСтажейДолжности, МодульМедицина.ВидыСтажейДолжностейСАвтоматическимПрерываниемРоста());
		
	КонецЕсли;
	
	ОбновитьЗависимыеВидыСтажейОбъекта(ТекущийОбъект, ВсеВидыСтажейДолжности, ВидыСтажейДолжности);
	
КонецПроцедуры

// Устанавливает дополнительное свойство ПропуститьОбновлениеЗависимыхСтажей
//
// Параметры:
//	ДополнительныеСвойства	- Структура
//
Процедура УстановитьДополнительноеСвойствоПропуститьОбновлениеЗависимыхСтажей(ДополнительныеСвойства) Экспорт
	
	ДополнительныеСвойства.Вставить("ПропуститьОбновлениеЗависимыхСтажей", Истина);
	
КонецПроцедуры

// Запускает пересчет стажей, физических лиц перед получением стажей
//
// Параметры:
//	МенеджерВременныхТаблиц				- МенеджерВременныхТаблиц
//	ОписательВременнойТаблицыОтборов	- Структура, см. КадровыйУчетРасширенный.ОписательВременнойТаблицыОтборовДляВТСтажиФизическихЛиц.
//
Процедура ПроверитьСтажиФизическихЛиц(МенеджерВременныхТаблиц, ОписательВременнойТаблицыОтборов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажиФизическихЛицКПересчету.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету
		|		ПО ТаблицаОтборов.ФизическоеЛицо = СтажиФизическихЛицКПересчету.ФизическоеЛицо
		|			И ТаблицаОтборов.Период >= СтажиФизическихЛицКПересчету.НачалоПериода";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
		"ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновитьСтажиФизическихЛиц(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"));
	КонецЕсли;
	
КонецПроцедуры

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеСтажейФизическихЛиц.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСтажейФизическихЛиц.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик фонового задания, запускаемого в обработчике ПослеЗаписиНаСервере форм
// документов, регистрирующих изменения роста стажей сотрудников.
//
// Параметры:
//	Параметры		- Структура
//	АдресРезультата	- Строка
//
Процедура ОбновитьСтажиСотрудниковВФоновомЗадании(Параметры, АдресРезультата) Экспорт
	
	ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(Параметры.Сотрудники);
	ОбновитьСтажиФизическихЛиц(ФизическиеЛицаСотрудников);
	
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ЗапомнитьТерриторииВыполненияРаботСАвтоматическимРасчетомСтажей(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьОбновлениеЗависимыхСтажей") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТерриториальныеУсловияПФР", Источник.Выгрузить());
	Запрос.УстановитьПараметр("СписокСеверныхТерриториальныхУсловий", Справочники.ТерриториальныеУсловияПФР.СписокСеверныхТерриториальныхУсловий());
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТерриториальныеУсловия.Период КАК Период,
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	&ТерриториальныеУсловияПФР КАК ТерриториальныеУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТерриториальныеУсловия.Период КАК Период,
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
		|ПОМЕСТИТЬ ВТПредыдущийНабор
		|ИЗ
		|	РегистрСведений.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловия");
	
	СчетчикОтборов = 0;
	ДобавитьИ = Ложь;
	Для Каждого ОписаниеОтбора Из Источник.Отбор Цикл
		
		Если Не ОписаниеОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавитьИ Тогда
			ТекстыЗапроса.Добавить("И");
		Иначе
			ТекстыЗапроса.Добавить("ГДЕ");
			ДобавитьИ = Истина;
		КонецЕсли;
		
		ИмяПараметра = "Значение" + Формат(СчетчикОтборов, "ЧДЦ=; ЧН=; ЧГ=");
		Запрос.УстановитьПараметр(ИмяПараметра, ОписаниеОтбора.Значение);
		
		ТекстыЗапроса.Добавить(ОписаниеОтбора.ПутьКДанным + " = &" + ИмяПараметра);
		СчетчикОтборов = СчетчикОтборов + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.СтруктурнаяЕдиница, ПредыдущийНабор.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПредыдущийНабор КАК ПредыдущийНабор
		|		ПО ТекущийНабор.Период = ПредыдущийНабор.Период
		|			И ТекущийНабор.СтруктурнаяЕдиница = ПредыдущийНабор.СтруктурнаяЕдиница
		|			И ТекущийНабор.ТерриториальныеУсловияПФР = ПредыдущийНабор.ТерриториальныеУсловияПФР
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.ТерриториальныеУсловияПФР, ПредыдущийНабор.ТерриториальныеУсловияПФР) В (&СписокСеверныхТерриториальныхУсловий)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Источник.ДополнительныеСвойства.Вставить("СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеСтажиТерриторийВыполненияРабот(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа") Тогда
		
		СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа = Источник.ДополнительныеСвойства.СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа;
		
		ОбновитьЗависимыеСеверныеСтажи(СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа", СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Подразделение В(&СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.ФизическоеЛицо
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	МИНИМУМ(ТерриторииСотрудников.Период),
			|	ТерриторииСотрудников.ФизическоеЛицо
			|ИЗ
			|	РегистрСведений.ТерриторииСотрудников КАК ТерриторииСотрудников
			|ГДЕ
			|	ТерриторииСотрудников.Территория В(&СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТерриторииСотрудников.ФизическоеЛицо";
		
		Запрос.Выполнить();
		ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПересчетСтажейФизическихЛиц(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Источник.ДополнительныеСвойства.МенеджерВременныхТаблицИзмененияРегистра;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ИзмененияРегистра.Период) КАК Период,
		|	ИзмененияРегистра.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
		|ИЗ
		|	ВТИмяРегистраИзменения КАК ИзмененияРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененияРегистра.ФизическоеЛицо";
	
	ИмяРегистра = Источник.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяРегистраИзменения", "ВТ" + ИмяРегистра + "Изменения");
	
	Запрос.Выполнить();
	ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ОбновлениеСтажейФизическихЛиц() Экспорт
	
	ОбновитьСтажиФизическихЛиц();
	
КонецПроцедуры

Процедура ПриПереключенииАвтоматическогоУчетаПрерыванияСтажей(ЗначениеНастройки) Экспорт
	
	СтруктурныеЕдиницы = ТерриторииСАвтоматическимУчетомПрерыванияСтажей();
	Должности = ДолжностиСАвтоматическимУчетомПрерыванияСтажей();
	
	Если ЗначениеНастройки Тогда
		ОбновитьЗависимыеСеверныеСтажи(СтруктурныеЕдиницы);
		ОбновитьЗависимыеСтажиДолжностей(Должности);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	Запрос.УстановитьПараметр("Должности", Должности);
	Запрос.УстановитьПараметр("СтажиСУправляемымРостом", ЗависимыеСтажи());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
		|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажейПредварительно
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Подразделение В(&СтруктурныеЕдиницы)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	МИНИМУМ(КадроваяИсторияСотрудников.Период)
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Должность В(&Должности)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	МИНИМУМ(КадроваяИсторияСотрудников.Период)
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию В(&Должности)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТерриторииСотрудников.ФизическоеЛицо,
		|	МИНИМУМ(ТерриторииСотрудников.Период)
		|ИЗ
		|	РегистрСведений.ТерриторииСотрудников КАК ТерриторииСотрудников
		|ГДЕ
		|	ТерриторииСотрудников.Территория В(&СтруктурныеЕдиницы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТерриторииСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыФизическихЛицКПересчетуСтажейПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(ПериодыФизическихЛицКПересчетуСтажейПредварительно.Период) КАК Период
		|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
		|ИЗ
		|	ВТПериодыФизическихЛицКПересчетуСтажейПредварительно КАК ПериодыФизическихЛицКПересчетуСтажейПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО ПериодыФизическихЛицКПересчетуСтажейПредварительно.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И ПериодыФизическихЛицКПересчетуСтажейПредварительно.Период >= СтажиФизическихЛиц.Период
		|ГДЕ
		|	СтажиФизическихЛиц.ВидСтажа В(&СтажиСУправляемымРостом)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыФизическихЛицКПересчетуСтажейПредварительно.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗапомнитьСвойстваДолжностейСАвтоматическимРасчетомСтажей(Источник, Отказ, ИменаРесурсовСтрокой) Экспорт
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьОбновлениеЗависимыхСтажей") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРесурсов = СтрРазделить(ИменаРесурсовСтрокой, ",");
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить("ВЫБРАТЬ ТаблицаСвойств.Должность КАК Должность");
	
	Для Каждого ИмяРесурса Из ИменаРесурсов Цикл
		ТекстыЗапросов.Добавить(",");
		ТекстыЗапросов.Добавить("ТаблицаСвойств." + ИмяРесурса + " КАК " + ИмяРесурса);
	КонецЦикла;
	
	ТекстыЗапросов.Добавить("ПОМЕСТИТЬ ВТПредыдущиеЗначения");
	ТекстыЗапросов.Добавить("ИЗ ВТТаблицаСвойств КАК ТаблицаСвойств");
	
	ТекстЗапросаТаблицы = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСвойств", Источник.Выгрузить());
	Запрос.Текст = СтрЗаменить(ТекстЗапросаТаблицы, "ВТТаблицаСвойств", "&ТаблицаСвойств");
	Запрос.Выполнить();
	
	Запрос.Текст = СтрЗаменить(ТекстЗапросаТаблицы, "ВТТаблицаСвойств", Источник.Метаданные().ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПредыдущиеЗначения", "ВТТекущиеЗначения");
	Запрос.Выполнить();
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить("ВЫБРАТЬ ЕСТЬNULL(ПредыдущиеЗначения.Должность, ТекущиеЗначения.Должность) КАК Должность");
	ТекстыЗапросов.Добавить("ИЗ ВТПредыдущиеЗначения КАК ПредыдущиеЗначения");
	ТекстыЗапросов.Добавить("	ПОЛНОЕ СОЕДИНЕНИЕ ВТТекущиеЗначения КАК ТекущиеЗначения");
	ТекстыЗапросов.Добавить("	ПО ПредыдущиеЗначения.Должность = ТекущиеЗначения.Должность");
	ТекстыЗапросов.Добавить("ГДЕ");
	
	ДобавитьИ = Ложь;
	Для Каждого ИмяРесурса Из ИменаРесурсов Цикл
		
		Если ДобавитьИ Тогда
			ТекстыЗапросов.Добавить("И");
		Иначе
			ДобавитьИ = Истина;
		КонецЕсли;
		
		ТекстыЗапросов.Добавить("ЕСТЬNULL(ПредыдущиеЗначения." + ИмяРесурса + ", ЛОЖЬ) <> ЕСТЬNULL(ТекущиеЗначения." + ИмяРесурса + ", ЛОЖЬ)");
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Источник.ДополнительныеСвойства.Вставить("ДолжностиКОбновлениюЗависимыхВидовСтажа", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Должность"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеСтажиДолжностей(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ДолжностиКОбновлениюЗависимыхВидовСтажа") Тогда
		
		ДолжностиКОбновлениюЗависимыхВидовСтажа = Источник.ДополнительныеСвойства.ДолжностиКОбновлениюЗависимыхВидовСтажа;
		
		ОбновитьЗависимыеСтажиДолжностей(ДолжностиКОбновлениюЗависимыхВидовСтажа);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДолжностиКОбновлениюЗависимыхВидовСтажа", ДолжностиКОбновлениюЗависимыхВидовСтажа);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Должность В(&ДолжностиКОбновлениюЗависимыхВидовСтажа)
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.ФизическоеЛицо";
		
		Запрос.Выполнить();
		ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменениеЗависимыхСтажей(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьЗависимыеСтажиФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникСсылка", Источник.Ссылка);
	Запрос.УстановитьПараметр("ЗависимыеСтажи", Источник.ЗависимыеСтажи.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗависимыеСтажи.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	&ЗависимыеСтажи КАК ЗависимыеСтажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗависимыеСтажи.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТПредыдущийНабор
		|ИЗ
		|	Справочник.Должности.ЗависимыеСтажи КАК ЗависимыеСтажи
		|ГДЕ
		|	ЗависимыеСтажи.Ссылка = &ИсточникСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ТекущийНабор.ВидСтажа, ПредыдущийНабор.ВидСтажа) КАК ВидСтажа
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПредыдущийНабор КАК ПредыдущийНабор
		|		ПО ТекущийНабор.ВидСтажа = ПредыдущийНабор.ВидСтажа
		|ГДЕ
		|	(ТекущийНабор.ВидСтажа ЕСТЬ NULL
		|			ИЛИ ПредыдущийНабор.ВидСтажа ЕСТЬ NULL)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Должности", Источник.Метаданные().ПолноеИмя());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Источник.ДополнительныеСвойства.Вставить("ОбновитьЗависимыеСтажиФизическихЛиц", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПересчетЗависимыхСтажей(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьПрерываниеСтажейАвтоматически() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ОбновитьЗависимыеСтажиФизическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СсылкаСЗависимымиСтажами", Источник.Ссылка);
	
	Если Источник.Метаданные().ПолноеИмя() = "Справочник.Должности" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Должность = &СсылкаСЗависимымиСтажами
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.ФизическоеЛицо";
		
	ИначеЕсли Источник.Метаданные().ПолноеИмя() = "Справочник.ШтатноеРасписание"  Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = &СсылкаСЗависимымиСтажами
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.ФизическоеЛицо";
		
	ИначеЕсли Источник.Метаданные().ПолноеИмя() = "Справочник.ПодразделенияОрганизаций"  Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Подразделение = &СсылкаСЗависимымиСтажами
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.ФизическоеЛицо";
		
	ИначеЕсли Источник.Метаданные().ПолноеИмя() = "Справочник.ТерриторииВыполненияРабот"  Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТерриторииСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТерриторииСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПериодыФизическихЛицКПересчетуСтажей
			|ИЗ
			|	РегистрСведений.ТерриторииСотрудников КАК ТерриторииСотрудников
			|ГДЕ
			|	ТерриторииСотрудников.Территория = &СсылкаСЗависимымиСтажами
			|
			|СГРУППИРОВАТЬ ПО
			|	ТерриторииСотрудников.ФизическоеЛицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизическихЛицКПересчетуСтажей.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТПериодыФизическихЛицКПересчетуСтажей КАК ПериодыФизическихЛицКПересчетуСтажей";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьФизическихЛицКПересчетуСтажей(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает массив видов зависимых стажей должности или позиции штатного расписания.
//
// Параметры:
//	Должность	 - СправочникСсылка.Должность, СправочникСсылка.ШтатноеРасписание.
//
// Возвращаемое значение:
//	Массив	- СправочникСсылка.ВидыСтажей
//
Функция ВидыСтажаДолжности(Должность)
	
	ВидыСтажа = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажа);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажа);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ДополнитьВидамиСтажаДолжностей(Должность, ВидыСтажа);
	КонецЕсли;
	
	Возврат ВидыСтажа;
	
КонецФункции

Функция ТерриторииСАвтоматическимУчетомПрерыванияСтажей()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТерриториальныеУсловия", Справочники.ТерриториальныеУсловияПФР.СписокСеверныхТерриториальныхУсловий());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних КАК ТерриториальныеУсловия
		|ГДЕ
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР В(&ТерриториальныеУсловия)
		|	И ТИПЗНАЧЕНИЯ(ТерриториальныеУсловия.СтруктурнаяЕдиница) В (ТИП(Справочник.ПодразделенияОрганизаций), ТИП(Справочник.ТерриторииВыполненияРабот))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница");
	
КонецФункции

Функция ДолжностиСАвтоматическимУчетомПрерыванияСтажей()
	
	СписокДолжностей = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДолжностей,
			МодульГосударственнаяСлужба.ДолжностиСАвтоматическимУчетомПрерыванияСтажей());
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДолжностей,
			МодульОбразовательныеУчреждения.ДолжностиСАвтоматическимУчетомПрерыванияСтажей(), Истина);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДолжностей,
			МодульМедицина.ДолжностиСАвтоматическимУчетомПрерыванияСтажей(), Истина);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДолжностей", СписокДолжностей);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтатноеРасписание.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|ГДЕ
		|	ШтатноеРасписание.Должность В(&СписокДолжностей)";
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокДолжностей,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
	
	Возврат СписокДолжностей;
	
КонецФункции

Процедура ОбновитьЗависимыеВидыСтажейОбъекта(ТекущийОбъект, ВсеВидыСтажейСУправляемымРостом, ВидыСтажейОбъекта)
	
	Если ВсеВидыСтажейСУправляемымРостом.Количество() = 0 И ВидыСтажейОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоставСтажейМенялся = Ложь;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаЗависимогоСтажа Из ТекущийОбъект.ЗависимыеСтажи Цикл
		
		Если ВсеВидыСтажейСУправляемымРостом.Найти(СтрокаЗависимогоСтажа.ВидСтажа) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексВидаСтажа = ВидыСтажейОбъекта.Найти(СтрокаЗависимогоСтажа.ВидСтажа);
		Если ИндексВидаСтажа = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаЗависимогоСтажа);
		Иначе
			ВидыСтажейОбъекта.Удалить(ИндексВидаСтажа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗависимогоСтажа Из УдаляемыеСтроки Цикл
		
		СоставСтажейМенялся = Истина;
		
		ТекущийОбъект.ЗависимыеСтажи.Удалить(СтрокаЗависимогоСтажа);
		
	КонецЦикла;
	
	Для Каждого ВидСтажа Из ВидыСтажейОбъекта Цикл
		
		СоставСтажейМенялся = Истина;
		
		НоваяСтрокаЗависимогоСтажа = ТекущийОбъект.ЗависимыеСтажи.Добавить();
		НоваяСтрокаЗависимогоСтажа.ВидСтажа = ВидСтажа;
		
	КонецЦикла;
	
	Если СоставСтажейМенялся Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьЗависимыеСтажиФизическихЛиц", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтажиФизическихЛиц(ФизическиеЛица = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сведения о стажах, заданные пользователями
	
	Запрос.УстановитьПараметр("СтажиСУправляемымРостом", СтажиСУправляемымРостом());
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтажиФизическихЛицКПересчету.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛицКПересчету.НачалоПериода КАК НачалоПериода
		|ПОМЕСТИТЬ ВТСтажиФизическихЛицКПересчету
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету";
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ОбновляемыеФизическиеЛица", ФизическиеЛица);
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	СтажиФизическихЛицКПересчету.ФизическоеЛицо В (&ОбновляемыеФизическиеЛица)";;
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтажиФизическихЛицКПересчету.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТСтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Если УчитыватьПрерываниеСтажейАвтоматически() Тогда
			ОбновитьНакопленныеСтажиФизическихЛицПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
		Иначе
			
			КадровыйУчетРасширенный.ОбновитьНакопленныеСтажиФизическихЛицПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
			
			Если ФизическиеЛица = Неопределено Тогда
				
				НаборЗаписей = РегистрыСведений.СтажиФизическихЛицКПересчету.СоздатьНаборЗаписей();
				НаборЗаписей.Записать();
				
			Иначе
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СтажиФизическихЛицКПересчету.ФизическоеЛицо КАК ФизическоеЛицо
					|ИЗ
					|	ВТСтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НаборЗаписей = РегистрыСведений.СтажиФизическихЛицКПересчету.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьНакопленныеСтажиФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтажиСУправляемымРостом", СтажиСУправляемымРостом());
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	// Подготовка стартовых данных для пересчета стажей.
	// В качестве стартовых данных берутся предыдущие записи накопленных стажей.
	// Если записей накопленных стажей нет - берутся первые записи стажей, указанные пользователями.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	МАКСИМУМ(НакопленныеСтажиФизическихЛиц.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТДатыНачалаНакопленныхСтажей
		|ИЗ
		|	ВТСтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ПО СтажиФизическихЛицКПересчету.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛицКПересчету.НачалоПериода > НакопленныеСтажиФизическихЛиц.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	МАКСИМУМ(СтажиФизическихЛиц.Период) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТДатыНачалаСтажейФизическихЛиц
		|ИЗ
		|	ВТСтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СтажиФизическихЛицКПересчету.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛицКПересчету.НачалоПериода >= СтажиФизическихЛиц.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Период < СтажиФизическихЛиц.ДатаОтсчета
		|			ТОГДА СтажиФизическихЛиц.ДатаОтсчета
		|		ИНАЧЕ СтажиФизическихЛиц.Период
		|	КОНЕЦ КАК ДатаНачала,
		|	СтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	СтажиФизическихЛиц.Прерван КАК Прерван,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета
		|ПОМЕСТИТЬ ВТСтажиФизическихЛиц
		|ИЗ
		|	ВТДатыНачалаСтажейФизическихЛиц КАК СтажиФизическихЛицКПересчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СтажиФизическихЛицКПересчету.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛицКПересчету.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И СтажиФизическихЛицКПересчету.ДатаНачала <= СтажиФизическихЛиц.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерМесяцев, НакопленныеСтажиФизическихЛиц.РазмерМесяцев) КАК РазмерМесяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерДней, НакопленныеСтажиФизическихЛиц.РазмерДней) КАК РазмерДней,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Прерван, НакопленныеСтажиФизическихЛиц.Прерван) КАК Прерван,
		|	ЕСТЬNULL(СтажиФизическихЛиц.ДатаОтсчета, НакопленныеСтажиФизическихЛиц.ДатаНачала) КАК ДатаОтсчета,
		|	ИСТИНА КАК РучныеКорректировки
		|ПОМЕСТИТЬ ВТНакопленныеСтажиФизическихЛицБезСледующих
		|ИЗ
		|	ВТДатыНачалаНакопленныхСтажей КАК ДатыНачалаНакопленныхСтажей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|			ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|				И НакопленныеСтажиФизическихЛиц.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|				И НакопленныеСтажиФизическихЛиц.ДатаНачала = СтажиФизическихЛиц.ДатаНачала
		|		ПО ДатыНачалаНакопленныхСтажей.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ДатыНачалаНакопленныхСтажей.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|			И ДатыНачалаНакопленныхСтажей.ДатаНачала = НакопленныеСтажиФизическихЛиц.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ДатаНачала,
		|	СтажиФизическихЛиц.РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней,
		|	СтажиФизическихЛиц.Прерван,
		|	СтажиФизическихЛиц.ДатаОтсчета,
		|	ИСТИНА
		|ИЗ
		|	ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачалаНакопленныхСтажей КАК ДатыНачалаНакопленныхСтажей
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = ДатыНачалаНакопленныхСтажей.ФизическоеЛицо
		|			И СтажиФизическихЛиц.ВидСтажа = ДатыНачалаНакопленныхСтажей.ВидСтажа
		|			И СтажиФизическихЛиц.ДатаНачала = ДатыНачалаНакопленныхСтажей.ДатаНачала
		|ГДЕ
		|	ДатыНачалаНакопленныхСтажей.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван,
		|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета КАК ДатаОтсчета,
		|	НакопленныеСтажиФизическихЛиц.РучныеКорректировки КАК РучныеКорректировки,
		|	ЕСТЬNULL(МАКСИМУМ(НакопленныеСтажиФизическихЛицСледующие.ДатаНачала), &МаксимальнаяДата) КАК СледующаяДатаНачала
		|ПОМЕСТИТЬ ВТНакопленныеСтажиФизическихЛицСтартовые
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛицБезСледующих КАК НакопленныеСтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛицБезСледующих КАК НакопленныеСтажиФизическихЛицСледующие
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = НакопленныеСтажиФизическихЛицСледующие.ФизическоеЛицо
		|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = НакопленныеСтажиФизическихЛицСледующие.ВидСтажа
		|			И НакопленныеСтажиФизическихЛиц.ДатаНачала < НакопленныеСтажиФизическихЛицСледующие.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.Прерван,
		|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета,
		|	НакопленныеСтажиФизическихЛиц.РучныеКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(НакопленныеСтажиФизическихЛицСтартовые.ДатаНачала) КАК ДатаНачала,
		|	НакопленныеСтажиФизическихЛицСтартовые.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛицСтартовые.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТНачальныеПериодыСтажейФизическихЛиц
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛицСтартовые
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛицСтартовые.ВидСтажа,
		|	НакопленныеСтажиФизическихЛицСтартовые.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеПериодыСтажейФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(НачальныеПериодыСтажейФизическихЛиц.ДатаНачала) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПересчитываемыеФизическиеЛица
		|ИЗ
		|	ВТНачальныеПериодыСтажейФизическихЛиц КАК НачальныеПериодыСтажейФизическихЛиц
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеПериодыСтажейФизическихЛиц.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТПересчитываемыеФизическиеЛица", "ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	// Кадровая история
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	// Территории сотрудников
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ТерриторииСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.Период, ТерриторииСотрудников.Период) КАК Период,
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.ФизическоеЛицо, ТерриторииСотрудников.ФизическоеЛицо) КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПериодыИзменений
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудников КАК ТерриторииСотрудников
		|		ПО КадроваяИсторияСотрудников.Период = ТерриторииСотрудников.Период
		|			И КадроваяИсторияСотрудников.ФизическоеЛицо = ТерриторииСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзменений.Период КАК Период,
		|	ПериодыИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК ПериодКадровойИстории,
		|	МАКСИМУМ(ТерриторииСотрудников.Период) КАК ПериодТерриторийСотрудников
		|ПОМЕСТИТЬ ВТПериодыСведений
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПериодыИзменений.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
		|			И ПериодыИзменений.Период >= КадроваяИсторияСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудников КАК ТерриторииСотрудников
		|		ПО ПериодыИзменений.ФизическоеЛицо = ТерриторииСотрудников.ФизическоеЛицо
		|			И ПериодыИзменений.Период >= ТерриторииСотрудников.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыСведений.Период КАК Период,
		|	ПериодыСведений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА КадроваяИсторияСотрудников.Должность
		|		ИНАЧЕ КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
		|	КОНЕЦ КАК ИсточникВидовСтажаПоДолжности,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТерриторииСотрудников.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|			ТОГДА КадроваяИсторияСотрудников.Подразделение
		|		ИНАЧЕ ТерриторииСотрудников.Территория
		|	КОНЕЦ КАК ИсточникВидовСтажаПоТерриторииВыполненияРабот
		|ПОМЕСТИТЬ ВТИсточникиВидовСтажа
		|ИЗ
		|	ВТПериодыСведений КАК ПериодыСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПериодыСведений.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
		|			И ПериодыСведений.ПериодКадровойИстории = КадроваяИсторияСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудников КАК ТерриторииСотрудников
		|		ПО ПериодыСведений.ФизическоеЛицо = ТерриторииСотрудников.ФизическоеЛицо
		|			И ПериодыСведений.ПериодТерриторийСотрудников = ТерриторииСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиВидовСтажа.Период КАК Период,
		|	ИсточникиВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДолжностиЗависимыеСтажи.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТПериодыВидовСтажей
		|ИЗ
		|	ВТИсточникиВидовСтажа КАК ИсточникиВидовСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности.ЗависимыеСтажи КАК ДолжностиЗависимыеСтажи
		|		ПО ИсточникиВидовСтажа.ИсточникВидовСтажаПоДолжности = ДолжностиЗависимыеСтажи.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиВидовСтажа.Период,
		|	ИсточникиВидовСтажа.ФизическоеЛицо,
		|	ШтатноеРасписаниеЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	ВТИсточникиВидовСтажа КАК ИсточникиВидовСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.ЗависимыеСтажи КАК ШтатноеРасписаниеЗависимыеСтажи
		|		ПО ИсточникиВидовСтажа.ИсточникВидовСтажаПоДолжности = ШтатноеРасписаниеЗависимыеСтажи.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиВидовСтажа.Период,
		|	ИсточникиВидовСтажа.ФизическоеЛицо,
		|	ПодразделенияОрганизацийЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	ВТИсточникиВидовСтажа КАК ИсточникиВидовСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций.ЗависимыеСтажи КАК ПодразделенияОрганизацийЗависимыеСтажи
		|		ПО ИсточникиВидовСтажа.ИсточникВидовСтажаПоТерриторииВыполненияРабот = ПодразделенияОрганизацийЗависимыеСтажи.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиВидовСтажа.Период,
		|	ИсточникиВидовСтажа.ФизическоеЛицо,
		|	ТерриторииВыполненияРаботЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	ВТИсточникиВидовСтажа КАК ИсточникиВидовСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТерриторииВыполненияРабот.ЗависимыеСтажи КАК ТерриторииВыполненияРаботЗависимыеСтажи
		|		ПО ИсточникиВидовСтажа.ИсточникВидовСтажаПоТерриторииВыполненияРабот = ТерриторииВыполненияРаботЗависимыеСтажи.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период КАК Период,
		|	ПериодыИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзменений.Период КАК ПериодСведений,
		|	ВЫБОР
		|		КОГДА ПериодыИзменений.Период = НакопленныеСтажиФизическихЛиц.ДатаНачала
		|			ТОГДА НакопленныеСтажиФизическихЛиц.РучныеКорректировки
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РучныеКорректировки,
		|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван
		|ПОМЕСТИТЬ ВТПериодыИзмененияВидовСтажаСУправляемымРостом
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛиц
		|		ПО ПериодыИзменений.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ПериодыИзменений.Период >= НакопленныеСтажиФизическихЛиц.ДатаНачала
		|			И ПериодыИзменений.Период < НакопленныеСтажиФизическихЛиц.СледующаяДатаНачала
		|ГДЕ
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа В(&СтажиСУправляемымРостом)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
		|	МАКСИМУМ(ПериодыВидовСтажей.Период),
		|	НакопленныеСтажиФизическихЛиц.РучныеКорректировки,
		|	НакопленныеСтажиФизическихЛиц.Прерван
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзменений КАК ПериодыИзменений
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = ПериодыИзменений.ФизическоеЛицо
		|			И НакопленныеСтажиФизическихЛиц.ДатаНачала = ПериодыИзменений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыВидовСтажей КАК ПериодыВидовСтажей
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = ПериодыВидовСтажей.ФизическоеЛицо
		|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = ПериодыВидовСтажей.ВидСтажа
		|			И НакопленныеСтажиФизическихЛиц.ДатаНачала >= ПериодыВидовСтажей.Период
		|ГДЕ
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа В(&СтажиСУправляемымРостом)
		|	И ПериодыИзменений.Период ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.РучныеКорректировки,
		|	НакопленныеСтажиФизическихЛиц.Прерван
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзмененияВидовСтажа.Период КАК Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа КАК ВидСтажа,
		|	ВЫБОР
		|		КОГДА ПериодыИзмененияВидовСтажа.РучныеКорректировки
		|			ТОГДА ПериодыИзмененияВидовСтажа.Прерван
		|		КОГДА ПериодыВидовСтажей.ВидСтажа ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Прерван,
		|	ПериодыИзмененияВидовСтажа.РучныеКорректировки КАК РучныеКорректировки
		|ПОМЕСТИТЬ ВТПериодыДействияВидовСтажаСУправляемымРостомПредварительно
		|ИЗ
		|	ВТПериодыИзмененияВидовСтажаСУправляемымРостом КАК ПериодыИзмененияВидовСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыВидовСтажей КАК ПериодыВидовСтажей
		|		ПО ПериодыИзмененияВидовСтажа.ФизическоеЛицо = ПериодыВидовСтажей.ФизическоеЛицо
		|			И ПериодыИзмененияВидовСтажа.ВидСтажа = ПериодыВидовСтажей.ВидСтажа
		|			И ПериодыИзмененияВидовСтажа.ПериодСведений = ПериодыВидовСтажей.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзмененияВидовСтажа.Период КАК Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван КАК Прерван,
		|	МИНИМУМ(ПериодыИзмененияВидовСтажаСледующие.Период) КАК ПериодИзменения
		|ПОМЕСТИТЬ ВТПериодыДействияВидовСтажаСУправляемымРостомИПериодомИзменения
		|ИЗ
		|	ВТПериодыДействияВидовСтажаСУправляемымРостомПредварительно КАК ПериодыИзмененияВидовСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовСтажаСУправляемымРостомПредварительно КАК ПериодыИзмененияВидовСтажаСледующие
		|		ПО ПериодыИзмененияВидовСтажа.ФизическоеЛицо = ПериодыИзмененияВидовСтажаСледующие.ФизическоеЛицо
		|			И ПериодыИзмененияВидовСтажа.ВидСтажа = ПериодыИзмененияВидовСтажаСледующие.ВидСтажа
		|			И (ПериодыИзмененияВидовСтажа.Прерван <> ПериодыИзмененияВидовСтажаСледующие.Прерван
		|				ИЛИ ПериодыИзмененияВидовСтажаСледующие.РучныеКорректировки)
		|			И ПериодыИзмененияВидовСтажа.Период < ПериодыИзмененияВидовСтажаСледующие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияВидовСтажа.Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПериодыИзмененияВидовСтажа.Период) КАК Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван КАК Прерван,
		|	ПериодыИзмененияВидовСтажа.ПериодИзменения КАК ПериодИзменения
		|ПОМЕСТИТЬ ВТПериодыДействияВидовСтажаСУправляемымРостом
		|ИЗ
		|	ВТПериодыДействияВидовСтажаСУправляемымРостомИПериодомИзменения КАК ПериодыИзмененияВидовСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван,
		|	ПериодыИзмененияВидовСтажа.ПериодИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзмененияВидовСтажа.Период КАК Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван КАК Прерван,
		|	МАКСИМУМ(НакопленныеСтажиФизическихЛиц.ДатаНачала) КАК ДатаСведений
		|ПОМЕСТИТЬ ВТПериодыДействияВидовСтажаСУправляемымРостомИДатойСведений
		|ИЗ
		|	ВТПериодыДействияВидовСтажаСУправляемымРостом КАК ПериодыИзмененияВидовСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛиц
		|		ПО ПериодыИзмененияВидовСтажа.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ПериодыИзмененияВидовСтажа.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|			И ПериодыИзмененияВидовСтажа.Период >= НакопленныеСтажиФизическихЛиц.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияВидовСтажа.Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзмененияВидовСтажа.Период КАК Период,
		|	ПериодыИзмененияВидовСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовСтажа.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияВидовСтажа.Прерван КАК Прерван,
		|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета КАК ДатаСведений,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней
		|ПОМЕСТИТЬ ВТНакопленныеСтажиКОбновлениюПредварительно
		|ИЗ
		|	ВТПериодыДействияВидовСтажаСУправляемымРостомИДатойСведений КАК ПериодыИзмененияВидовСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛиц
		|		ПО ПериодыИзмененияВидовСтажа.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ПериодыИзмененияВидовСтажа.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|			И ПериодыИзмененияВидовСтажа.ДатаСведений = НакопленныеСтажиФизическихЛиц.ДатаНачала
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.Прерван,
		|	НакопленныеСтажиФизическихЛиц.ДатаОтсчета,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛицСтартовые КАК НакопленныеСтажиФизическихЛиц
		|ГДЕ
		|	НЕ НакопленныеСтажиФизическихЛиц.ВидСтажа В (&СтажиСУправляемымРостом)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеСтажиКОбновлению.Период КАК Период,
		|	НакопленныеСтажиКОбновлению.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиКОбновлению.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиКОбновлению.Прерван КАК Прерван,
		|	НакопленныеСтажиКОбновлению.ДатаСведений КАК ДатаСведений,
		|	НакопленныеСтажиКОбновлению.РазмерМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиКОбновлению.РазмерДней КАК РазмерДней,
		|	МАКСИМУМ(НакопленныеСтажиКОбновлениюПредыдущие.Период) КАК ПериодПредыдущий,
		|	МИНИМУМ(НакопленныеСтажиКОбновлениюСледующие.Период) КАК ПериодСледующий
		|ПОМЕСТИТЬ ВТНакопленныеСтажиКОбновлению
		|ИЗ
		|	ВТНакопленныеСтажиКОбновлениюПредварительно КАК НакопленныеСтажиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиКОбновлениюПредварительно КАК НакопленныеСтажиКОбновлениюПредыдущие
		|		ПО НакопленныеСтажиКОбновлению.ФизическоеЛицо = НакопленныеСтажиКОбновлениюПредыдущие.ФизическоеЛицо
		|			И НакопленныеСтажиКОбновлению.ВидСтажа = НакопленныеСтажиКОбновлениюПредыдущие.ВидСтажа
		|			И НакопленныеСтажиКОбновлению.Период > НакопленныеСтажиКОбновлениюПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиКОбновлениюПредварительно КАК НакопленныеСтажиКОбновлениюСледующие
		|		ПО НакопленныеСтажиКОбновлению.ФизическоеЛицо = НакопленныеСтажиКОбновлениюСледующие.ФизическоеЛицо
		|			И НакопленныеСтажиКОбновлению.ВидСтажа = НакопленныеСтажиКОбновлениюСледующие.ВидСтажа
		|			И НакопленныеСтажиКОбновлению.Период < НакопленныеСтажиКОбновлениюСледующие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиКОбновлению.Период,
		|	НакопленныеСтажиКОбновлению.ФизическоеЛицо,
		|	НакопленныеСтажиКОбновлению.ВидСтажа,
		|	НакопленныеСтажиКОбновлению.Прерван,
		|	НакопленныеСтажиКОбновлению.ДатаСведений,
		|	НакопленныеСтажиКОбновлению.РазмерМесяцев,
		|	НакопленныеСтажиКОбновлению.РазмерДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеСтажиКОбновлению.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиКОбновлению.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиКОбновлению.Период КАК ДатаНачала,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(НакопленныеСтажиКОбновлению.ПериодСледующий, ДЕНЬ, -1), &МаксимальнаяДата) КАК ДатаОкончания,
		|	НакопленныеСтажиКОбновлению.РазмерМесяцев КАК РазмерМесяцев,
		|	НакопленныеСтажиКОбновлению.РазмерДней КАК РазмерДней,
		|	НакопленныеСтажиКОбновлению.Прерван КАК Прерван,
		|	ВЫБОР
		|		КОГДА НакопленныеСтажиКОбновлению.Период > НакопленныеСтажиКОбновлению.ДатаСведений
		|			ТОГДА НакопленныеСтажиКОбновлениюПредыдущие.Период
		|		ИНАЧЕ НакопленныеСтажиКОбновлению.ДатаСведений
		|	КОНЕЦ КАК ДатаСведений,
		|	ВЫБОР
		|		КОГДА НакопленныеСтажиКОбновлению.Период > НакопленныеСтажиКОбновлению.ДатаСведений
		|				И НЕ ЕСТЬNULL(НакопленныеСтажиКОбновлениюПредыдущие.Прерван, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Рассчитать
		|ПОМЕСТИТЬ ВТНакопленныеСтажиФизическихЛиц
		|ИЗ
		|	ВТНакопленныеСтажиКОбновлению КАК НакопленныеСтажиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиКОбновлению КАК НакопленныеСтажиКОбновлениюПредыдущие
		|		ПО НакопленныеСтажиКОбновлению.ФизическоеЛицо = НакопленныеСтажиКОбновлениюПредыдущие.ФизическоеЛицо
		|			И НакопленныеСтажиКОбновлению.ВидСтажа = НакопленныеСтажиКОбновлениюПредыдущие.ВидСтажа
		|			И НакопленныеСтажиКОбновлению.ПериодПредыдущий = НакопленныеСтажиКОбновлениюПредыдущие.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	МИНИМУМ(НакопленныеСтажиФизическихЛиц.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ ВТПервыеДатыКРасчету
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|ГДЕ
		|	НакопленныеСтажиФизическихЛиц.Рассчитать = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПервыеДатыКРасчету.ДатаНачала КАК ДатаРасчетаСтажа,
		|	ПервыеДатыКРасчету.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПервыеДатыКРасчету.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаСведений КАК ДатаОтсчета,
		|	НакопленныеСтажиФизическихЛиц.РазмерДней КАК РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.РазмерМесяцев КАК РазмерМесяцев,
		|	ЛОЖЬ КАК Прерван
		|ПОМЕСТИТЬ ВТИсходныеДанныеПервыхРассчитываемыхЗаписей
		|ИЗ
		|	ВТПервыеДатыКРасчету КАК ПервыеДатыКРасчету
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ПО ПервыеДатыКРасчету.ФизическоеЛицо = НакопленныеСтажиФизическихЛиц.ФизическоеЛицо
		|			И ПервыеДатыКРасчету.ВидСтажа = НакопленныеСтажиФизическихЛиц.ВидСтажа
		|			И ПервыеДатыКРасчету.ДатаНачала = НакопленныеСтажиФизическихЛиц.ДатаНачала";
	
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчетРасширенный.ОписательВТИсходныеДанныеДляРасчетаСтажа();
	ОписательВТ.ИмяВТИсходныеДанные = "ВТИсходныеДанныеПервыхРассчитываемыхЗаписей";
	
	КадровыйУчетРасширенный.СоздатьВТРасчетСтажа(Запрос.МенеджерВременныхТаблиц, ОписательВТ, "ВТРасчетСтажаПервыхРассчитываемыхЗаписей");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
		|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	НакопленныеСтажиФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
		|	НакопленныеСтажиФизическихЛиц.ДатаСведений КАК ДатаСведений,
		|	ЕСТЬNULL(РасчетСтажа.ВсегоМесяцев, НакопленныеСтажиФизическихЛиц.РазмерМесяцев) КАК РазмерМесяцев,
		|	ЕСТЬNULL(РасчетСтажа.Дней, НакопленныеСтажиФизическихЛиц.РазмерДней) КАК РазмерДней,
		|	НакопленныеСтажиФизическихЛиц.Прерван КАК Прерван,
		|	ВЫБОР
		|		КОГДА РасчетСтажа.ФизическоеЛицо ЕСТЬ NULL
		|			ТОГДА НакопленныеСтажиФизическихЛиц.Рассчитать
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Рассчитать
		|ИЗ
		|	ВТНакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетСтажаПервыхРассчитываемыхЗаписей КАК РасчетСтажа
		|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = РасчетСтажа.ФизическоеЛицо
		|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = РасчетСтажа.ВидСтажа
		|			И НакопленныеСтажиФизическихЛиц.ДатаНачала = РасчетСтажа.ДатаРасчетаСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ДатаНачала";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НакопленныеСтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НакопленныеСтажиФизическихЛиц.ВидСтажа КАК ВидСтажа,
			|	НакопленныеСтажиФизическихЛиц.ДатаНачала КАК ДатаНачала
			|ИЗ
			|	РегистрСведений.НакопленныеСтажиФизическихЛиц КАК НакопленныеСтажиФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачальныеПериодыСтажейФизическихЛиц КАК НачальныеПериодыСтажейФизическихЛиц
			|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = НачальныеПериодыСтажейФизическихЛиц.ФизическоеЛицо
			|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = НачальныеПериодыСтажейФизическихЛиц.ВидСтажа
			|			И НакопленныеСтажиФизическихЛиц.ДатаНачала >= НачальныеПериодыСтажейФизическихЛиц.ДатаНачала
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеСтажиКОбновлению КАК НакопленныеСтажиКОбновлению
			|		ПО НакопленныеСтажиФизическихЛиц.ФизическоеЛицо = НакопленныеСтажиКОбновлению.ФизическоеЛицо
			|			И НакопленныеСтажиФизическихЛиц.ВидСтажа = НакопленныеСтажиКОбновлению.ВидСтажа
			|			И НакопленныеСтажиФизическихЛиц.ДатаНачала = НакопленныеСтажиКОбновлению.Период
			|ГДЕ
			|	НакопленныеСтажиКОбновлению.Период ЕСТЬ NULL";
		
		УдаляемыеЗаписиНакопленныхСтажей = Запрос.Выполнить().Выгрузить();
		УдаляемыеЗаписиНакопленныхСтажей.Индексы.Добавить("ФизическоеЛицо");
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтажиФизическихЛицКПересчету");
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НакопленныеСтажиФизическихЛиц");
			ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Выборка.ФизическоеЛицо);
			
			Попытка
				Блокировка.Заблокировать();
			Исключение
				
				Инфо = ИнформацияОбОшибке();
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить накопленные стажи %1.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), Выборка.ФизическоеЛицо);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение, , Выборка.ФизическоеЛицо, "РегистрСведений.НакопленныеСтажиФизическихЛиц");
				
				Продолжить;
				
			КонецПопытки;
			
			ДанныеСтажейФизическогоЛица = Новый Соответствие;
			
			// Удаление записей, которых нет в новом наборе
			УдаляемыеЗаписи = УдаляемыеЗаписиНакопленныхСтажей.НайтиСтроки(Новый Структура("ФизическоеЛицо", Выборка.ФизическоеЛицо));
			Для Каждого УдаляемаяЗапись Из УдаляемыеЗаписи Цикл
				
				НаборЗаписей = РегистрыСведений.НакопленныеСтажиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(УдаляемаяЗапись.ФизическоеЛицо);
				НаборЗаписей.Отбор.ВидСтажа.Установить(УдаляемаяЗапись.ВидСтажа);
				НаборЗаписей.Отбор.ДатаНачала.Установить(УдаляемаяЗапись.ДатаНачала);
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
			// Обновление наборов записей накопленных стажей
			Пока Выборка.СледующийПоЗначениюПоля("ДатаНачала") Цикл
				
				Пока Выборка.Следующий() Цикл
					
					СведенияОПредыдущемСтаже = Неопределено;
					
					СведенияПоВидуСтажа = ДанныеСтажейФизическогоЛица.Получить(Выборка.ВидСтажа);
					Если СведенияПоВидуСтажа <> Неопределено Тогда
						СведенияОПредыдущемСтаже = СведенияПоВидуСтажа.Получить(Выборка.ДатаСведений);
					КонецЕсли;
					
					Если СведенияОПредыдущемСтаже = Неопределено Тогда
						СведенияОПредыдущемСтаже = СтруктураЗаписиОСтаже();
					КонецЕсли;
					
					НаборЗаписей = РегистрыСведений.НакопленныеСтажиФизическихЛиц.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Отбор.ВидСтажа.Установить(Выборка.ВидСтажа);
					НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
					
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					
					Если Выборка.Рассчитать И Не СведенияОПредыдущемСтаже.Прерван Тогда
						
						ОписаниеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
						
						ОписаниеСтажа.ДатаОтсчета = Выборка.ДатаСведений;
						ОписаниеСтажа.Месяцев = СведенияОПредыдущемСтаже.РазмерМесяцев;
						ОписаниеСтажа.Дней = СведенияОПредыдущемСтаже.РазмерДней;
						ОписаниеСтажа.Прерван = Ложь;
						
						ПродолжительностьСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(ОписаниеСтажа, Выборка.ДатаНачала);
						
						Запись.РазмерМесяцев = ПродолжительностьСтажа.Месяцев + ПродолжительностьСтажа.Лет * 12;
						Запись.РазмерДней = ПродолжительностьСтажа.Дней;
						
					ИначеЕсли СведенияОПредыдущемСтаже.Прерван Тогда
						
						Запись.РазмерМесяцев = СведенияОПредыдущемСтаже.РазмерМесяцев;
						Запись.РазмерДней = СведенияОПредыдущемСтаже.РазмерДней;
						
					КонецЕсли;
					
					ЗапомнитьДанныеСтажа(Запись, ДанныеСтажейФизическогоЛица);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей = РегистрыСведений.СтажиФизическихЛицКПересчету.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗапомнитьДанныеСтажа(Запись, ДанныеСтажейФизическогоЛица)
	
	ДанныеСтажа = ДанныеСтажейФизическогоЛица.Получить(Запись.ВидСтажа);
	Если ДанныеСтажа = Неопределено Тогда
		ДанныеСтажа = Новый Соответствие;
		ДанныеСтажейФизическогоЛица.Вставить(Запись.ВидСтажа, ДанныеСтажа);
	КонецЕсли;
	
	СтруктураЗаписи = СтруктураЗаписиОСтаже();
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Запись);
	
	ДанныеСтажа.Вставить(Запись.ДатаНачала, СтруктураЗаписи);
	
КонецПроцедуры

Функция СтруктураЗаписиОСтаже()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("РазмерМесяцев", 0);
	СтруктураЗаписи.Вставить("РазмерДней", 0);
	СтруктураЗаписи.Вставить("Прерван", Ложь);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Процедура ОбновитьЗависимыеСеверныеСтажи(СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
	
	ОбновитьЗависимыеСеверныеСтажиПоПолномуИмениОбъектаМетаданных(СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа, "Справочник.ПодразделенияОрганизаций");
	ОбновитьЗависимыеСеверныеСтажиПоПолномуИмениОбъектаМетаданных(СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа, "Справочник.ТерриторииВыполненияРабот");
	
КонецПроцедуры

Процедура ОбновитьЗависимыеСеверныеСтажиПоПолномуИмениОбъектаМетаданных(СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа, ПолноеИмяОбъектаМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СеверныеВидыСтажа = Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.Северный);
	
	Запрос.УстановитьПараметр("СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа", СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа);
	Запрос.УстановитьПараметр("СеверныеТерриториальныеУсловия", Справочники.ТерриториальныеУсловияПФР.СписокСеверныхТерриториальныхУсловий());
	Запрос.УстановитьПараметр("СеверныеВидыСтажа", СеверныеВидыСтажа);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТСеверныеТерритории
		|ИЗ
		|	РегистрСведений.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловия
		|ГДЕ
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница В(&СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
		|	И ТерриториальныеУсловия.ТерриториальныеУсловияПФР В(&СеверныеТерриториальныеУсловия)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗависимыеСтажи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТерриторииССевернымСтажем
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций.ЗависимыеСтажи КАК ЗависимыеСтажи
		|ГДЕ
		|	ЗависимыеСтажи.Ссылка В(&СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
		|	И ЗависимыеСтажи.ВидСтажа В(&СеверныеВидыСтажа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТерриторииССевернымСтажем.Ссылка КАК Ссылка
		|ИЗ
		|	ВТТерриторииССевернымСтажем КАК ТерриторииССевернымСтажем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСеверныеТерритории КАК СеверныеТерритории
		|		ПО ТерриторииССевернымСтажем.Ссылка = СеверныеТерритории.СтруктурнаяЕдиница
		|ГДЕ
		|	СеверныеТерритории.СтруктурнаяЕдиница ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ПодразделенияОрганизаций", ПолноеИмяОбъектаМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокиСтажаКУдалению = Новый Массив;
		
		ОбъектСЗависимымСтажем = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаЗависимогоСтажа Из ОбъектСЗависимымСтажем.ЗависимыеСтажи Цикл
			
			Если СеверныеВидыСтажа.Найти(СтрокаЗависимогоСтажа.ВидСтажа) <> Неопределено Тогда
				СтрокиСтажаКУдалению.Добавить(СтрокаЗависимогоСтажа);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиСтажаКУдалению Цикл
			ОбъектСЗависимымСтажем.ЗависимыеСтажи.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		ОбъектСЗависимымСтажем.Записать();
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Территории.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Территории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииССевернымСтажем КАК ТерриторииССевернымСтажем
		|		ПО Территории.Ссылка = ТерриторииССевернымСтажем.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСеверныеТерритории КАК СеверныеТерритории
		|		ПО Территории.Ссылка = СеверныеТерритории.СтруктурнаяЕдиница
		|ГДЕ
		|	Территории.Ссылка В(&СтруктурныеЕдиницыКОбновлениюЗависимыхВидовСтажа)
		|	И ТерриторииССевернымСтажем.Ссылка ЕСТЬ NULL";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ПодразделенияОрганизаций", ПолноеИмяОбъектаМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокиСтажаКУдалению = Новый Массив;
		
		ОбъектСЗависимымСтажем = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрокаЗависимогоСтажа = ОбъектСЗависимымСтажем.ЗависимыеСтажи.Добавить();
		НоваяСтрокаЗависимогоСтажа.ВидСтажа = СеверныеВидыСтажа[0];
		
		ОбъектСЗависимымСтажем.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеСтажиДолжностей(Должности)
	
	Запрос = Новый Запрос;
	Для Каждого Должность Из Должности Цикл
		
		Запрос.УстановитьПараметр("Должность", Должность);
		Запрос.УстановитьПараметр("ЗависимыеВидыСтажа", ВидыСтажаДолжности(Должность));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДолжностиЗависимыеСтажи.ВидСтажа КАК ВидСтажа
			|ПОМЕСТИТЬ ЗависимыеСтажиДолжностей
			|ИЗ
			|	Справочник.Должности.ЗависимыеСтажи КАК ДолжностиЗависимыеСтажи
			|ГДЕ
			|	ДолжностиЗависимыеСтажи.Ссылка = &Должность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыСтажа.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТВидыСтажа
			|ИЗ
			|	Справочник.ВидыСтажа КАК ВидыСтажа
			|ГДЕ
			|	ВидыСтажа.Ссылка В(&ЗависимыеВидыСтажа)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ЗависимыеСтажиДолжностей.ВидСтажа, ВидыСтажа.Ссылка) КАК ВидСтажа,
			|	ВЫБОР
			|		КОГДА ВидыСтажа.Ссылка ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Удалить
			|ИЗ
			|	ЗависимыеСтажиДолжностей КАК ЗависимыеСтажиДолжностей
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТВидыСтажа КАК ВидыСтажа
			|		ПО ЗависимыеСтажиДолжностей.ВидСтажа = ВидыСтажа.Ссылка
			|ГДЕ
			|	(ВидыСтажа.Ссылка ЕСТЬ NULL
			|			ИЛИ ЗависимыеСтажиДолжностей.ВидСтажа ЕСТЬ NULL)";
		
		Если ТипЗнч(Должность) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Должности", "Справочник.ШтатноеРасписание");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ОбъектСЗависимымСтажем = Должность.ПолучитьОбъект();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Удалить Тогда
					
					СтрокаЗависимогоСтажа = ОбъектСЗависимымСтажем.ЗависимыеСтажи.Найти(Выборка.ВидСтажа, "ВидСтажа");
					Если СтрокаЗависимогоСтажа <> Неопределено Тогда
						ОбъектСЗависимымСтажем.ЗависимыеСтажи.Удалить(СтрокаЗависимогоСтажа);
					КонецЕсли;
					
				Иначе
					НоваяСтрокаЗависимогоСтажа = ОбъектСЗависимымСтажем.ЗависимыеСтажи.Добавить();
					НоваяСтрокаЗависимогоСтажа.ВидСтажа = Выборка.ВидСтажа;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипЗнч(Должность) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
				УправлениеШтатнымРасписанием.ОтключитьОбновлениеСтруктурыШтатногоРасписания(ОбъектСЗависимымСтажем);
			КонецЕсли;
			
			ОбъектСЗависимымСтажем.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьФизическихЛицКПересчетуСтажей(МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыФизическихЛиц.Период КАК НачалоПериода,
		|	ПериодыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТПериодыФизическихЛицКПересчетуСтажей КАК ПериодыФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтажиФизическихЛицКПересчету КАК СтажиФизическихЛицКПересчету
		|		ПО ПериодыФизическихЛиц.ФизическоеЛицо = СтажиФизическихЛицКПересчету.ФизическоеЛицо
		|			И ПериодыФизическихЛиц.Период >= СтажиФизическихЛицКПересчету.НачалоПериода
		|ГДЕ
		|	СтажиФизическихЛицКПересчету.ФизическоеЛицо ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СтажиФизическихЛицКПересчету.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗависимыеСтажи()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДолжностиЗависимыеСтажи.ВидСтажа КАК ВидСтажа
		|ИЗ
		|	Справочник.Должности.ЗависимыеСтажи КАК ДолжностиЗависимыеСтажи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтатноеРасписаниеЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	Справочник.ШтатноеРасписание.ЗависимыеСтажи КАК ШтатноеРасписаниеЗависимыеСтажи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодразделенияОрганизацийЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций.ЗависимыеСтажи КАК ПодразделенияОрганизацийЗависимыеСтажи
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТерриторииВыполненияРаботЗависимыеСтажи.ВидСтажа
		|ИЗ
		|	Справочник.ТерриторииВыполненияРабот.ЗависимыеСтажи КАК ТерриторииВыполненияРаботЗависимыеСтажи";
	
	УстановитьПривилегированныйРежим(Истина);
	ВидыСтажа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидСтажа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВидыСтажа;
	
КонецФункции

#КонецОбласти
