////////////////////////////////////////////////////////////////////////////////
// Подсистема "Синхронизация данных".
// Серверные процедуры и функции, обслуживающие подписки на события.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Обмен РИБ Зарплата и управление персоналом 3.0.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации
// объектов на узлах.
//
// Параметры:
//		Источник	- источник события, кроме типа ДокументОбъект.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиСОтборомРегистрация(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" констант для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- источник события, кроме типа ДокументОбъект.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиСОтборомРегистрацияКонстанты(Источник, Отказ) Экспорт

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- ДокументОбъект - источник события.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиСОтборомРегистрацияДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- НаборЗаписейРегистра - источник события.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//		Замещение	- Булево - признак замещения существующего набора записей.
//
Процедура ОбменДаннымиСОтборомРегистрацияНабора(Источник, Отказ, Замещение) Экспорт

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ, Замещение);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров расчета для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- НаборЗаписейРегистра - источник события.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//		Замещение	- Булево - признак замещения существующего набора записей.
//
Процедура ОбменДаннымиСОтборомРегистрацияНабораРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ, Замещение);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- источник события.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//
Процедура ОбменДаннымиСОтборомРегистрацияУдаления(Источник, Отказ) Экспорт

	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//		Источник	- НаборЗаписейРегистра - источник события.
//		Отказ		- Булево - флаг отказа от выполнения обработчика.
//		Замещение	- Булево - признак замещения существующего набора записей.
//
Процедура ОбменДаннымиСОтборомРегистрацияНезависимогоНабора(Источник, Отказ, Замещение) Экспорт

	ОбменДаннымиЗарплатаКадрыРасширенный.МеханизмРегистрацииОбъектовПриЗаписиНезависимогоРегистраСведений("ОбменВРаспределеннойИнформационнойБазе", Источник, Отказ, Замещение);
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" для контроля проведения документов
// c неполными движениями на узлах распределенной информационной базы с отборами.
//
// Параметры:
//  Источник        - источник события
//  Отказ           - Булево - флаг отказа от выполнения обработчика
//  РежимЗаписи     - РежимЗаписиДокумента - текущий режим записи документа
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ОбменДаннымиСОтборомКонтрольИзменения(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	// Если это главный узел или включен режим обмена данными загрузка, то необходимости в его контроле нет!!!
	Если Не ОбменДаннымиПовтИспЗарплатаКадрыРасширенный.ЭтоПодчиненныйУзелРИБСОтбором()
		Или Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Если объект не новый, то инициализируем объект уже записанный в ИБ.
	// Тем самым отсекая возможные ситуации при которых пользователь может изменить 
	// открытый объект, под условия прохождения фильтра.
	
	Если Не Источник.ЭтоНовый() Тогда
		ОбъектИБ = Источник.Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектИБ = Источник;
	КонецЕсли;
	
	СообщениеПользователю = "";
	Отказ = ОбъектНеПроходитФильтр(ОбъектИБ, "ОбменВРаспределеннойИнформационнойБазе",, СообщениеПользователю);
	
	Если Отказ Тогда
		
		Сообщение = Новый СообщениеПользователю();
		
		ТекстСообщения = НСтр("ru = 'Документ не может быть изменен в подчиненном узле распределенной информационной базы. %1'");
		Сообщение.Текст = СтрШаблон(ТекстСообщения, СообщениеПользователю);
		
		Если Не Источник.ЭтоНовый() Тогда
			Сообщение.КлючДанных = ОбъектИБ.Ссылка;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ОбъектИБ);
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает признак того, что объект не проходит установленный фильтр
//
// Возвращаемое значение:
//  Булево - Отказ от действий с объектом.
//
Функция ОбъектНеПроходитФильтр(ЭлементДанных,
	                           ИмяПланаОбмена,
	                           ЗагрузкаОбъекта = Ложь,
	                           СообщениеПользователю = "")
	
	Отказ = Ложь;
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ЭлементДанных.ДополнительныеСвойства.Свойство("ОграниченияРегистрации") Тогда
		ОграниченияРегистрации = ЭлементДанных.ДополнительныеСвойства.ОграниченияРегистрации;
	Иначе
		ОграниченияРегистрации = ЭлементДанных.ОграниченияРегистрации();
	КонецЕсли;
	
	ОбменДаннымиЗарплатаКадрыРасширенный.ОграничитьРегистрацииОбъектовПоОрганизациямСотрудниковИФизическихЛиц(ОграниченияРегистрации, ИмяПланаОбмена);
	
	ЭлементДанных.ДополнительныеСвойства.Вставить("ОграниченияРегистрации", ОграниченияРегистрации);
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		Отказ = Истина;
	Иначе
		ПроверитьДанныеОбъектаНаСоответствиеНастройкамУзла(ОграниченияРегистрации, ЗагрузкаОбъекта, Отказ, ИмяПланаОбмена);
	КонецЕсли;
	
	Если Отказ Тогда
		СообщениеПользователю = ОграниченияРегистрации.СообщениеПользователю;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ПроверитьДанныеОбъектаНаСоответствиеНастройкамУзла(ОграниченияРегистрации, ЗагрузкаОбъекта, Отказ, ИмяПланаОбмена)
	
	УзелПланаОбмена = Неопределено;
	ОбъектПроходитФильтрПоПодразделению = Истина;
	Если ОграниченияРегистрации.Свойство("Подразделения") Тогда
		
		МассивПодразделенийУзла = Новый Массив;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			МассивПодразделенийУзла = Модуль.МассивДоступныхПодразделений(ИмяПланаОбмена, УзелПланаОбмена);
		КонецЕсли;
		Если УзелПланаОбмена.ИспользоватьОтборПоПодразделениям
			И Не ПолноеСоответствиеДанныхОбъектаНастройкамУзла(ОграниченияРегистрации.Подразделения, МассивПодразделенийУзла) Тогда
			Если Не ПустаяСтрока(ОграниченияРегистрации.СообщениеПользователю) Тогда
				ОграниченияРегистрации.СообщениеПользователю = ОграниченияРегистрации.СообщениеПользователю + Символы.ПС;
			КонецЕсли;
			ОграниченияРегистрации.СообщениеПользователю = ОграниченияРегистрации.СообщениеПользователю
				+ НСтр("ru = 'Подразделения объекта не соответствуют настройкам узла распределенной информационной базы.'");
			ОбъектПроходитФильтрПоПодразделению = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектПроходитФильтрПоОрганизации = Истина;
	Если ОграниченияРегистрации.Свойство("Организация") Тогда
		МассивОрганизацийУзла = ОбменДаннымиЗарплатаКадрыРасширенный.МассивДоступныхОрганизаций(ИмяПланаОбмена, УзелПланаОбмена);
		Если УзелПланаОбмена.ИспользоватьОтборПоОрганизациям
			И Не ПолноеСоответствиеДанныхОбъектаНастройкамУзла(ОграниченияРегистрации.Организации, МассивОрганизацийУзла) Тогда
			Если Не ПустаяСтрока(ОграниченияРегистрации.СообщениеПользователю) Тогда
				ОграниченияРегистрации.СообщениеПользователю = ОграниченияРегистрации.СообщениеПользователю + Символы.ПС;
			КонецЕсли;
			ОграниченияРегистрации.СообщениеПользователю = ОграниченияРегистрации.СообщениеПользователю
				+ НСтр("ru = 'Организации объекта не соответствуют настройкам узла распределенной информационной базы.'");
			ОбъектПроходитФильтрПоОрганизации = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектПроходитФильтр = ОбъектПроходитФильтрПоПодразделению Или ОбъектПроходитФильтрПоОрганизации;
	
	Если Не ОбъектПроходитФильтр Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеСоответствиеДанныхОбъектаНастройкамУзла(МассивОбъекта, МассивДоступных)
	
	Если МассивОбъекта.Количество() = 0 И МассивДоступных.Количество() = 0 Тогда
		Возврат Истина;
	ИначеЕсли МассивОбъекта.Количество() > 0 Тогда
		Результат = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивОбъекта, МассивДоступных);
		Возврат Результат.Количество() = 0;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
