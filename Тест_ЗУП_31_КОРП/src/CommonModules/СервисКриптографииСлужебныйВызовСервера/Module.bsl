////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис криптографии (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

Функция Зашифровать(Знач Данные, Знач Получатели, Знач ТипШифрования, Знач ПараметрыШифрования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Получатели", Получатели);
	ПараметрыПроцедуры.Вставить("ТипШифрования", ТипШифрования);
	ПараметрыПроцедуры.Вставить("ПараметрыШифрования", ПараметрыШифрования);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", ВернутьРезультатКакАдресВоВременномХранилище(Данные));
	Данные = ИзвлечьДвоичныеДанныеПриНеобходимости(Данные);
	ПараметрыПроцедуры.Вставить("Данные", Данные);
			
	АдресаФайловРезультата = Новый Массив;
	Если ПараметрыПроцедуры.ВернутьРезультатКакАдресВоВременномХранилище Тогда
		Если ТипЗнч(Данные) = Тип("Массив") Тогда 
			ВсегоЭлементов = Данные;
		Иначе
			ВсегоЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные);
		КонецЕсли;		
		Для Каждого Элемент Из ВсегоЭлементов Цикл
			АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
		КонецЦикла;
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
		
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Зашифровать", ПараметрыПроцедуры);
	
КонецФункции

Функция Расшифровать(Знач ЗашифрованныеДанные, Знач Сертификат, Знач ТипШифрования, Знач ПараметрыШифрования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗашифрованныеДанные", ИзвлечьДвоичныеДанныеПриНеобходимости(ЗашифрованныеДанные));
	ПараметрыПроцедуры.Вставить("Сертификат", Сертификат);
	ПараметрыПроцедуры.Вставить("ТипШифрования", ТипШифрования);
	ПараметрыПроцедуры.Вставить("ПараметрыШифрования", ПараметрыШифрования);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", ВернутьРезультатКакАдресВоВременномХранилище(ЗашифрованныеДанные));
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПроцедуры.Вставить("МаркерыБезопасности", ПараметрыСеанса.МаркерыБезопасности);
	УстановитьПривилегированныйРежим(Ложь);
	
	АдресаФайловРезультата = Новый Массив;
	АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Расшифровать", ПараметрыПроцедуры);
	
КонецФункции

Функция Подписать(Знач Данные, Знач Подписант, Знач ТипПодписи, Знач ПараметрыПодписания) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Подписант", Подписант);
	ПараметрыПроцедуры.Вставить("ТипПодписи", ТипПодписи);
	ПараметрыПроцедуры.Вставить("ПараметрыПодписания", ПараметрыПодписания);
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", ВернутьРезультатКакАдресВоВременномХранилище(Данные));
	Данные = ИзвлечьДвоичныеДанныеПриНеобходимости(Данные);
	ПараметрыПроцедуры.Вставить("Данные", Данные);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПроцедуры.Вставить("МаркерыБезопасности", ПараметрыСеанса.МаркерыБезопасности);
	УстановитьПривилегированныйРежим(Ложь);
	
	АдресаФайловРезультата = Новый Массив;
	Если ПараметрыПроцедуры.ВернутьРезультатКакАдресВоВременномХранилище Тогда
		Если ТипЗнч(Данные) = Тип("Массив") Тогда 
			ВсегоЭлементов = Данные;
		Иначе
			ВсегоЭлементов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные);
		КонецЕсли;		
		Для Каждого Элемент Из ВсегоЭлементов Цикл
			АдресаФайловРезультата.Добавить(ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
		КонецЦикла;
	КонецЕсли;
	ПараметрыПроцедуры.Вставить("АдресаФайловРезультата", АдресаФайловРезультата);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.Подписать", ПараметрыПроцедуры);	
	
КонецФункции

Функция ПроверитьПодпись(Знач Подпись, Знач Данные, Знач ТипПодписи, Знач ПараметрыПодписания) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Данные", ИзвлечьДвоичныеДанныеПриНеобходимости(Данные));
	ПараметрыПроцедуры.Вставить("Подпись", ИзвлечьДвоичныеДанныеПриНеобходимости(Подпись));
	ПараметрыПроцедуры.Вставить("ТипПодписи", ТипПодписи);
	ПараметрыПроцедуры.Вставить("ПараметрыПодписания", ПараметрыПодписания);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПроверитьПодпись", ПараметрыПроцедуры);	
	
КонецФункции

Функция ПроверитьСертификат(Знач Сертификат) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сертификат", ИзвлечьДвоичныеДанныеПриНеобходимости(Сертификат));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПроверитьСертификат", ПараметрыПроцедуры);	

КонецФункции

Функция ПолучитьСвойстваСертификата(Знач Сертификат) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Сертификат", ИзвлечьДвоичныеДанныеПриНеобходимости(Сертификат));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСвойстваСертификата", ПараметрыПроцедуры);	
	
КонецФункции

Функция ПолучитьСертификатыИзПодписи(Знач Подпись) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Подпись", ИзвлечьДвоичныеДанныеПриНеобходимости(Подпись));
	ПараметрыПроцедуры.Вставить("ВернутьРезультатКакАдресВоВременномХранилище", ВернутьРезультатКакАдресВоВременномХранилище(Подпись));
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСертификатыИзПодписи", ПараметрыПроцедуры);	
	
КонецФункции

Функция ПолучитьСвойстваКриптосообщения(Знач Криптосообщение, Знач ТолькоКлючевыеСвойства) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Криптосообщение", ИзвлечьДвоичныеДанныеПриНеобходимости(Криптосообщение));
	ПараметрыПроцедуры.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ПолучитьСвойстваКриптосообщения", ПараметрыПроцедуры);
	
КонецФункции

Функция ХешированиеДанных(Знач Данные, Знач АлгоритмХеширования, Знач ПараметрыХеширования) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Данные", ИзвлечьДвоичныеДанныеПриНеобходимости(Данные));
	ПараметрыПроцедуры.Вставить("АлгоритмХеширования", АлгоритмХеширования);
	ПараметрыПроцедуры.Вставить("ПараметрыХеширования", ПараметрыХеширования);
	
	Возврат СервисКриптографииСлужебный.ВыполнитьВФоне("СервисКриптографииСлужебный.ХешированиеДанных", ПараметрыПроцедуры);	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьДвоичныеДанныеПриНеобходимости(Параметр)
	
	ИзвлеченныеДанные = Новый Массив;
	Если ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ФиксированныйМассив") Тогда
		Для Индекс = 0 По Параметр.ВГраница() Цикл
			ИзвлеченныеДанные.Добавить(ИзвлечьДвоичныеДанныеИзВременногоХранилищаПриНеобходимости(Параметр[Индекс]));
		КонецЦикла;
	Иначе
		ИзвлеченныеДанные = ИзвлечьДвоичныеДанныеИзВременногоХранилищаПриНеобходимости(Параметр);
	КонецЕсли;
	
	Возврат ИзвлеченныеДанные;
	
КонецФункции

Функция ИзвлечьДвоичныеДанныеИзВременногоХранилищаПриНеобходимости(Параметр)
	
	Если ТипЗнч(Параметр) = Тип("Строка") И ЭтоАдресВременногоХранилища(Параметр) Тогда
		Возврат ПолучитьИзВременногоХранилища(Параметр);
	Иначе
		Возврат Параметр;
	КонецЕсли;
	
КонецФункции

Функция ВернутьРезультатКакАдресВоВременномХранилище(Знач Параметр)
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		Параметр = Параметр[0];
	КонецЕсли;
	
	ВернутьКакАдрес = Ложь;
	Если ТипЗнч(Параметр) = Тип("Строка") И ЭтоАдресВременногоХранилища(Параметр) Тогда
		ВернутьКакАдрес = Истина;
	КонецЕсли;
	
	Возврат ВернутьКакАдрес;
	
КонецФункции

#КонецОбласти