
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияГрейдовСотрудников(Движения, ГрейдыСотрудников) Экспорт

	Если Не ЗначениеЗаполнено(ГрейдыСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ГрейдыСотрудников.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ГрейдыСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ГрейдыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ГрейдыСотрудников);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЕстьПериодыВозвратныхСобытий = Ложь;
	Для Каждого СтрокаДвижений Из ГрейдыСотрудников Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
		Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий И ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ЕстьПериодыВозвратныхСобытий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий Тогда
		ИспользуютсяВозвратныеСобытия = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяВозвратныеСобытия Тогда 
	
		ИзмеренияДаты.Свернуть("Сотрудник, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ГрейдыСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ГрейдыСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
		|	ГрейдыСотрудников.Сотрудник,
		|	ГрейдыСотрудников.Грейд КАК ТекущееЗначение
		|ИЗ
		|	ВТГрейдыСотрудниковСрезПоследних КАК ГрейдыСотрудников";
		
		Выборка = Запрос.Выполнить().Выбрать();

		ГрейдыСотрудников.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.Грейды"));
		СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Строка = ГрейдыСотрудников.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из ГрейдыСотрудников Цикл
		
		Движения.ГрейдыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ГрейдыСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.Грейд = Строка.Грейд;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ГрейдПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляПроведенияГрейдыСотрудников(Ссылка, ИмяПоляДатаСобытия, ИмяПоляДействуетДо = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыйПриказ.#ДатаСобытия КАК ДатаСобытия,
	               |	КадровыйПриказ.Сотрудник КАК Сотрудник,
	               |	КадровыйПриказ.Грейд КАК Грейд,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	               |ИЗ
	               |	#КадровыйПриказ КАК КадровыйПриказ
	               |ГДЕ
	               |	КадровыйПриказ.Ссылка = &Ссылка";
				   
	ИмяТаблицыКадровогоПриказа = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);			   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КадровыйПриказ", ИмяТаблицыКадровогоПриказа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДатаСобытия", ИмяПоляДатаСобытия);
	Если ИмяПоляДействуетДо <> Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДАТАВРЕМЯ(1, 1, 1)", ИмяПоляДействуетДо);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляПроведенияНачальнойШтатнойРасстановкиГрейдыСотрудников(Ссылка) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачальнаяШтатнаяРасстановка.Ссылка.Месяц КАК ДатаСобытия,
	               |	НачальнаяШтатнаяРасстановка.Сотрудник,
	               |	НачальнаяШтатнаяРасстановка.Грейд,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	               |ИЗ
	               |	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановка
	               |ГДЕ
	               |	НачальнаяШтатнаяРасстановка.Ссылка = &Ссылка";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляПроведенияСписочногоКадровогоПриказа(Ссылка, ИмяДокумента, ИмяРеквизитаДатаСобытия, ИмяПоляДействуетДо = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаПриема КАК ДатаСобытия,
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.Грейд,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботуСписком", "Документ." + ИмяДокумента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента.ДатаПриема", "ТаблицаДокумента." + ИмяРеквизитаДатаСобытия);
	Если ИмяПоляДействуетДо <> Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДАТАВРЕМЯ(1, 1, 1)", ИмяПоляДействуетДо);
	КонецЕсли;
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ГруппаГрейдДополнитьФорму(Форма, ДобавлятьПустуюСтроку = Ложь) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ГруппаГрейд = Элементы.ГруппаГрейд;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Грейд", Новый ОписаниеТипов("СправочникСсылка.Грейды"), , , Истина));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Грейды) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьПустуюСтроку И Элементы.Найти("ГрейдПустаяСтрока") = Неопределено Тогда
		ПолеГрейдПустаяСтрока = Элементы.Добавить("ГрейдПустаяСтрока", Тип("ДекорацияФормы"), ГруппаГрейд);
		ПолеГрейдПустаяСтрока.Вид = ВидДекорацииФормы.Надпись;
		ПолеГрейдПустаяСтрока.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	
	Если Элементы.Найти("Грейд") = Неопределено Тогда
		ПолеГрейд = Элементы.Добавить("Грейд", Тип("ПолеФормы"), ГруппаГрейд);
		ПолеГрейд.Вид = ВидПоляФормы.ПолеВвода;
		ПолеГрейд.РастягиватьПоГоризонтали = Ложь;
		ПолеГрейд.ПутьКДанным = "Грейд";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗначениеГрейда(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ГрейдыПозиций) Тогда
		Возврат;
	КонецЕсли;

	Форма.Грейд = ГрейдПозиции(Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ГруппаГрейдДополнитьФормуКадровогоПриказа(Форма, ПутьКДанным = "Объект.Грейд") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Грейды) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ГруппаГрейд = Элементы.ГруппаГрейд;
	
	Если Элементы.Найти("Грейд") = Неопределено Тогда
		ПолеГрейд = Элементы.Добавить("Грейд", Тип("ПолеФормы"), ГруппаГрейд);
		ПолеГрейд.Вид = ВидПоляФормы.ПолеВвода;
		ПолеГрейд.ПутьКДанным = ПутьКДанным;
		ПолеГрейд.ТолькоПросмотр = Не ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеГрейды");
		ПолеГрейд.УстановитьДействие("ПриИзменении", "Подключаемый_ГрейдПриИзменении");
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьОтображениеГрейдаВФормеСписка(Форма, ИмяОсновнойТаблицы, ИмяРеквизитаСписок = "Список") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Грейды) Тогда
		Возврат;
	КонецЕсли;
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """Грейд"" КАК Грейд", "ГрейдыПозиций.Грейд КАК Грейд");
	Список.ТекстЗапроса = Список.ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрейдыПозиций КАК ГрейдыПозиций
	|	ПО " + ИмяОсновнойТаблицы + ".Ссылка = ГрейдыПозиций.Позиция";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Грейд", "Видимость", Истина);
	
	Элементы = Форма.Элементы;
	ГруппаГрейд = Элементы.ГруппаГрейд;
	
	Если Элементы.Найти("Грейд") = Неопределено Тогда
		ПолеГрейд = Элементы.Добавить("Грейд", Тип("ПолеФормы"), ГруппаГрейд);
		ПолеГрейд.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеГрейд.Ширина = 12;
		ПолеГрейд.ПутьКДанным = ИмяРеквизитаСписок + ".Грейд";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗначениеГрейда(Форма, Ссылка) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ГрейдыПозиций) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ГрейдыПозиций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Позиция.Установить(Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Позиция = Ссылка;
	НоваяЗапись.Грейд = Форма.Грейд;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ГрейдыПозиций(СписокПозиций) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПозиций", СписокПозиций);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрейдыПозиций.Позиция КАК Позиция,
		|	ГрейдыПозиций.Грейд КАК Грейд
		|ИЗ
		|	РегистрСведений.ГрейдыПозиций КАК ГрейдыПозиций
		|ГДЕ
		|	ГрейдыПозиций.Позиция В(&СписокПозиций)";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ГрейдыПозиций = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ГрейдыПозиций.Вставить(Выборка.Позиция, Выборка.Грейд);
	КонецЦикла;
	
	Возврат ГрейдыПозиций;
	
КонецФункции

Функция ГрейдПозиции(Позиция) Экспорт 
	
	СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Позиция);
	ГрейдыПозиций = ГрейдыПозиций(СписокПозиций);
	 
	Возврат ГрейдыПозиций[Позиция];
	
КонецФункции

Функция ГрейдыСотрудников(ИзмеренияДаты, Регистратор = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрейдыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрейдыСотрудников.Период,
	               |	ГрейдыСотрудников.Сотрудник,
	               |	ГрейдыСотрудников.Грейд
	               |ИЗ
	               |	ВТГрейдыСотрудниковСрезПоследних КАК ГрейдыСотрудников";
				   
	ГрейдыСотрудников = Запрос.Выполнить().Выгрузить();			   
	
	Возврат ГрейдыСотрудников;
	
КонецФункции

Функция ГрейдСотрудника(Сотрудник, ДатаСобытия, Регистратор = Неопределено) Экспорт 
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаСобытия;
	
	ГрейдыСотрудников = ГрейдыСотрудников(ИзмеренияДаты, Регистратор);
	
	ГрейдСотрудника = ?(ГрейдыСотрудников.Количество() > 0, ГрейдыСотрудников[0].Грейд, Неопределено);
	
	Возврат ГрейдСотрудника;
	
КонецФункции

Процедура УстановитьЗначениеПодсказкиГрейда(Форма, Грейд, ИмяЭлемента = "Грейд") Экспорт 
	
	ТекстПодсказки = "";
	Если ЗначениеЗаполнено(Грейд) Тогда 
		ТекстПодсказки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Грейд, "Описание");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Подсказка", ТекстПодсказки);
	
КонецПроцедуры

Функция ПроверкаНаСоответствиеГрейдамПередЗаписьюДокумента(РезультатПроверки, ДанныеСотрудников, ПроблемыТекущегоДокумента, Регистратор) Экспорт 
	
	ПроверитьНачисленияНаСоответствиеГрейдам(ДанныеСотрудников, ПроблемыТекущегоДокумента, Регистратор);
	
	Если ПроблемыТекущегоДокумента.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		
		ДанныеПроверки = Новый Структура("ПроблемыТекущегоДокумента", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыТекущегоДокумента));
		РезультатПроверки = ПоместитьВоВременноеХранилище(ДанныеПроверки, Новый УникальныйИдентификатор);
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНачисленияНаСоответствиеГрейдам(ДанныеСотрудников, ПроблемыТекущегоДокумента, Регистратор) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПозиций = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ПозицияШтатногоРасписания", Истина);
	ГрейдыПозиций = ГрейдыПозиций(СписокПозиций);
	
	ГрейдыСотрудников = Новый Соответствие;
	ФОТСотрудников = Новый Соответствие;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Если ДанныеСотрудника.ДанныеОНачислениях = Неопределено Или ДанныеСотрудника.ДанныеОНачислениях.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ГрейдыСотрудников.Вставить(ДанныеСотрудника.Сотрудник, ГрейдыПозиций[ДанныеСотрудника.ПозицияШтатногоРасписания]);
		ФОТСотрудников.Вставить(ДанныеСотрудника.Сотрудник, ДанныеСотрудника.ФОТ);
		
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = ДанныеСотрудника.Сотрудник;
		НоваяСтрока.Период = ДанныеСотрудника.Период;
		
	КонецЦикла;
	
	ИспользуютсяИндивидуальныеГрейды = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеГрейды");
	Если ИспользуютсяИндивидуальныеГрейды Тогда
		ИндивидуальныеГрейдыСотрудников = ГрейдыСотрудников(ИзмеренияДаты, Регистратор);
	КонецЕсли;
	
	// Проверка ограничения ФОТ
	ОграничениеФОТГрейдов = ОграничениеФОТГрейдов();
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Сотрудник = ДанныеСотрудника.Сотрудник;
		Грейд = ГрейдыСотрудников[Сотрудник];
		
		Если ИспользуютсяИндивидуальныеГрейды Тогда 
			ГрейдСотрудника = ДанныеСотрудника.Грейд;
			Если ГрейдСотрудника = Неопределено Тогда
				СтруктураОтбора = Новый Структура("Период, Сотрудник", ДанныеСотрудника.Период, Сотрудник);
				МассивСтрок = ИндивидуальныеГрейдыСотрудников.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество() > 0 Тогда 
					ГрейдСотрудника = МассивСтрок[0].Грейд;
				КонецЕсли;
			КонецЕсли;
			Грейд = ?(ГрейдСотрудника = Неопределено, Грейд, ГрейдСотрудника);
			ДанныеСотрудника.Грейд = Грейд; 
		КонецЕсли;
		
		Если Грейд = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОграничениеФОТ = ОграничениеФОТГрейдов[Грейд];
		Если ОграничениеФОТ = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = "";
		ФОТСотрудника = ФОТСотрудников[Сотрудник];
		Если ФОТСотрудника <> Неопределено И (ФОТСотрудника > ОграничениеФОТ.ФОТМакс Или ФОТСотрудника < ОграничениеФОТ.ФОТМин) Тогда 
			ТекстСообщения = НСтр("ru = 'размер ФОТ выходит за границы допустимого для грейда диапазона'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Сотрудник);
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда 
			ЗаполнитьПредставлениеПроблемыСГрейдом(ПроблемыТекущегоДокумента, ДанныеСотрудника, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Использование начислений и показателей.
	ЗапрещенныеНачисленияПоказатели = ЗапрещенныеНачисленияПоказателиГрейдов();
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		ДанныеОНачислениях = ДанныеСотрудника.ДанныеОНачислениях;
		Если ДанныеОНачислениях = Неопределено Или ДанныеОНачислениях.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Грейд = ДанныеСотрудника.Грейд;
		ЗапрещенныеНачисленияПоказателиГрейда = ЗапрещенныеНачисленияПоказатели[Грейд];
		Если ЗапрещенныеНачисленияПоказателиГрейда = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОшибки = "";
		Для Каждого ДанныеНачисления Из ДанныеОНачислениях Цикл 
			Если ЗапрещенныеНачисленияПоказателиГрейда[ДанныеНачисления.Начисление] <> Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'для грейда запрещено использование начисления %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеНачисления.Начисление);
				ПредставлениеОшибки = ПредставлениеОшибки + ?(ПредставлениеОшибки = "", "", ", ") + ТекстСообщения;
			КонецЕсли;
			Если ЗапрещенныеНачисленияПоказателиГрейда[ДанныеНачисления.Показатель] <> Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'для грейда запрещено использование показателя %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеНачисления.Показатель);
				ПредставлениеОшибки = ПредставлениеОшибки + ?(ПредставлениеОшибки = "", "", ", ") + ТекстСообщения;
			КонецЕсли;
		КонецЦикла;
		
		Если ПредставлениеОшибки <> "" Тогда 
			ЗаполнитьПредставлениеПроблемыСГрейдом(ПроблемыТекущегоДокумента, ДанныеСотрудника, ПредставлениеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Размер начислений и показателей.
	РазмерНачислений = РазмерНачисленийГрейдов();
	ЗначенияПоказателей = ЗначенияПоказателейГрейдов();
	
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		ДанныеОНачислениях = ДанныеСотрудника.ДанныеОНачислениях;
		Если ДанныеОНачислениях = Неопределено Или ДанныеОНачислениях.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Грейд = ДанныеСотрудника.Грейд;
		РазмерНачисленийГрейда = РазмерНачислений[Грейд];
		ЗначенияПоказателейГрейда = ЗначенияПоказателей[Грейд];
		
		Если РазмерНачисленийГрейда = Неопределено И ЗначенияПоказателейГрейда = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОшибки = "";
		Для Каждого ДанныеНачисления Из ДанныеОНачислениях Цикл 
			Если ДанныеНачисления.Значение = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если РазмерНачисленийГрейда <> Неопределено Тогда
				РазмерНачисления = РазмерНачисленийГрейда[ДанныеНачисления.Начисление];
				Если РазмерНачисления <> Неопределено И Не (РазмерНачисления.РазмерМакс = 0 И РазмерНачисления.РазмерМин = 0) Тогда
					Если ДанныеНачисления.Значение > РазмерНачисления.РазмерМакс Или ДанныеНачисления.Значение < РазмерНачисления.РазмерМин Тогда 
						ТекстСообщения = НСтр("ru = 'размер начисления %1 выходит за границы допустимого для грейда диапазона'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеНачисления.Начисление);
						ПредставлениеОшибки = ПредставлениеОшибки + ?(ПредставлениеОшибки = "", "", ", ") + ТекстСообщения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначенияПоказателейГрейда <> Неопределено Тогда
				ЗначенияПоказателя = ЗначенияПоказателейГрейда[ДанныеНачисления.Показатель];
				Если ЗначенияПоказателя <> Неопределено И Не (ЗначенияПоказателя.ЗначениеМакс = 0 И ЗначенияПоказателя.ЗначениеМин = 0) Тогда
					Если ДанныеНачисления.Значение > ЗначенияПоказателя.ЗначениеМакс Или ДанныеНачисления.Значение < ЗначенияПоказателя.ЗначениеМин Тогда 
						ТекстСообщения = НСтр("ru = 'значение показателя %1 выходит за границы допустимого для грейда диапазона'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеНачисления.Показатель);
						ПредставлениеОшибки = ПредставлениеОшибки + ?(ПредставлениеОшибки = "", "", ", ") + ТекстСообщения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПредставлениеОшибки <> "" Тогда 
			ЗаполнитьПредставлениеПроблемыСГрейдом(ПроблемыТекущегоДокумента, ДанныеСотрудника, ПредставлениеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОграничениеФОТГрейдов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	         |	ОграничениеФОТГрейдов.Грейд,
	         |	ОграничениеФОТГрейдов.ФОТМин,
	         |	ОграничениеФОТГрейдов.ФОТМакс
	         |ИЗ
	         |	РегистрСведений.ОграничениеФОТГрейдов КАК ОграничениеФОТГрейдов
	         |ГДЕ
	         |	ОграничениеФОТГрейдов.ОграничиватьФОТ";
			 
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОграничениеФОТГрейдов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ОграничениеФОТГрейдов.Вставить(Выборка.Грейд, Новый Структура("ФОТМин, ФОТМакс", Выборка.ФОТМин, Выборка.ФОТМакс));
	КонецЦикла;
	
	Возврат ОграничениеФОТГрейдов;
	
КонецФункции

Функция НачисленияГрейдов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд,
	               |	ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель КАК Начисление,
	               |	ИспользованиеНачисленийПоказателейГрейдов.ИспользованиеРазрешено КАК ИспользованиеРазрешено,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМин,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМакс,
	               |	Начисления.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.ИспользованиеНачисленийПоказателейГрейдов КАК ИспользованиеНачисленийПоказателейГрейдов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	               |		ПО ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель = Начисления.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд,
	               |	ИспользованиеРазрешено,
	               |	Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Начисления = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Грейд") Цикл
		НачисленияГрейда = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ДанныеНачисления = Новый Структура("Начисление, Наименование, ИспользованиеРазрешено, РазмерМин, РазмерМакс");
			ЗаполнитьЗначенияСвойств(ДанныеНачисления, Выборка);
			НачисленияГрейда.Добавить(ДанныеНачисления);
		КонецЦикла;
		Начисления.Вставить(Выборка.Грейд, НачисленияГрейда);
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

Функция ПоказателиГрейдов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд,
	               |	ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель КАК Показатель,
	               |	ИспользованиеНачисленийПоказателейГрейдов.ИспользованиеРазрешено КАК ИспользованиеРазрешено,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМин,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМакс,
	               |	ПоказателиРасчетаЗарплаты.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.ИспользованиеНачисленийПоказателейГрейдов КАК ИспользованиеНачисленийПоказателейГрейдов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ПО ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель = ПоказателиРасчетаЗарплаты.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд,
	               |	ИспользованиеРазрешено,
	               |	Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Показатели = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Грейд") Цикл
		ПоказателиГрейда = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ДанныеПоказателя = Новый Структура("Показатель, Наименование, ИспользованиеРазрешено");
			ЗаполнитьЗначенияСвойств(ДанныеПоказателя, Выборка);
			ПоказателиГрейда.Добавить(ДанныеПоказателя);
		КонецЦикла;
		Показатели.Вставить(Выборка.Грейд, ПоказателиГрейда);
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

Функция ЗапрещенныеНачисленияПоказателиГрейдов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИспользованиеНачисленийПоказателейГрейдов.Грейд КАК Грейд,
		|	ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель КАК НачислениеПоказатель
		|ИЗ
		|	РегистрСведений.ИспользованиеНачисленийПоказателейГрейдов КАК ИспользованиеНачисленийПоказателейГрейдов
		|ГДЕ
		|	НЕ ИспользованиеНачисленийПоказателейГрейдов.ИспользованиеРазрешено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Грейд";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗапрещенныеНачисленияПоказатели = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Грейд") Цикл
		ЗапрещенныеНачисленияПоказателиГрейда = Новый Соответствие;
		Пока Выборка.Следующий() Цикл 
			ЗапрещенныеНачисленияПоказателиГрейда.Вставить(Выборка.НачислениеПоказатель, Истина);
		КонецЦикла;
		ЗапрещенныеНачисленияПоказатели.Вставить(Выборка.Грейд, ЗапрещенныеНачисленияПоказателиГрейда);
	КонецЦикла;
	
	Возврат ЗапрещенныеНачисленияПоказатели;
	
КонецФункции	

Функция РазмерНачисленийГрейдов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИспользованиеНачисленийПоказателейГрейдов.Грейд КАК Грейд,
	               |	ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель КАК Начисление,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМин,
	               |	ИспользованиеНачисленийПоказателейГрейдов.РазмерМакс
	               |ИЗ
	               |	РегистрСведений.ИспользованиеНачисленийПоказателейГрейдов КАК ИспользованиеНачисленийПоказателейГрейдов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	               |		ПО ИспользованиеНачисленийПоказателейГрейдов.НачислениеПоказатель = Начисления.Ссылка
	               |			И (НЕ Начисления.Рассчитывается)
	               |			И (ИспользованиеНачисленийПоказателейГрейдов.ИспользованиеРазрешено)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Грейд";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерНачислений = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Грейд") Цикл
		РазмерНачисленийГрейда = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			РазмерНачисления = Новый Структура("РазмерМин, РазмерМакс", Выборка.РазмерМин, Выборка.РазмерМакс);
			РазмерНачисленийГрейда.Вставить(Выборка.Начисление, РазмерНачисления);
		КонецЦикла;
		РазмерНачислений.Вставить(Выборка.Грейд, РазмерНачисленийГрейда);
	КонецЦикла;
	
	Возврат РазмерНачислений;
	
КонецФункции

Функция ЗначенияПоказателейГрейдов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.Грейд КАК Грейд,
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.Показатель,
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.ЗначениеМин,
	               |	ЗначенияПоказателейРасчетаЗарплатыГрейдов.ЗначениеМакс
	               |ИЗ
	               |	РегистрСведений.ЗначенияПоказателейРасчетаЗарплатыГрейдов КАК ЗначенияПоказателейРасчетаЗарплатыГрейдов
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Грейд";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияПоказателей = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Грейд") Цикл
		ЗначенияПоказателейГрейда = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ЗначенияПоказателя = Новый Структура("ЗначениеМин, ЗначениеМакс", Выборка.ЗначениеМин, Выборка.ЗначениеМакс);
			ЗначенияПоказателейГрейда.Вставить(Выборка.Показатель, ЗначенияПоказателя);
		КонецЦикла;
		ЗначенияПоказателей.Вставить(Выборка.Грейд, ЗначенияПоказателейГрейда);
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

Процедура ЗаполнитьПредставлениеПроблемыСГрейдом(ПроблемыТекущегоДокумента, ДанныеСотрудника, ПредставлениеОшибки)
	
	СтруктураПоиска = Новый Структура("Сотрудник, ПозицияШтатногоРасписания");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСотрудника);
	МассивСтрокПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрокПроблемыТекущегоДокумента.Количество() = 0 Тогда 
		НоваяСтрока = ПроблемыТекущегоДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСотрудника);
		НоваяСтрока.ПроблемыСГрейдом = Истина;
		ПредставлениеОшибки = Строка(ДанныеСотрудника.Сотрудник) + ": " + ПредставлениеОшибки;
		НоваяСтрока.ПроблемыСГрейдомПредставление = ПредставлениеОшибки;
	Иначе 
		Для Каждого СтрокаПроблемыТекущегоДокумента Из МассивСтрокПроблемыТекущегоДокумента Цикл 
			СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдом = Истина;
			Если Не ЗначениеЗаполнено(СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдомПредставление) Тогда
				ПредставлениеОшибки = Строка(ДанныеСотрудника.Сотрудник) + ": " + ПредставлениеОшибки;
			Иначе 
				ПредставлениеОшибки = СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдомПредставление + ", " + ПредставлениеОшибки;
			КонецЕсли;
			СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдомПредставление = ПредставлениеОшибки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСоответствияШтатномуРасписаниюДополнитьФорму(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ГруппаСоответствиеГрейду = Элементы.ГруппаСоответствиеГрейду;
	ГруппаСоответствиеГрейдуСписокПроблем = Элементы.ГруппаСоответствиеГрейдуСписокПроблем;
	
	Если Элементы.Найти("СоответствиеГрейдуНадпись") = Неопределено Тогда
		ПолеСоответствиеГрейдуНадпись = Элементы.Добавить("СоответствиеГрейдуНадпись", Тип("ДекорацияФормы"), ГруппаСоответствиеГрейду);
		ПолеСоответствиеГрейдуНадпись.Вид = ВидДекорацииФормы.Надпись;
	КонецЕсли;
	
	ИмяКоманды = "РаботаСГрейдами";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Работа с грейдами'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаСоответствиеГрейду);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	Если Элементы.Найти(ИмяКоманды + "СписокПроблем") = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды + "СписокПроблем", Тип("КнопкаФормы"), ГруппаСоответствиеГрейдуСписокПроблем);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьРезультатПроверкиНаСоответствиеГрейдуДокумента(Форма, СтрокаПроблемыТекущегоДокумента) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрейды") Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоответствиеГрейдуНадпись", "Заголовок", СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдомПредставление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоответствиеГрейдуНадпись", "Видимость", СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдом);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РаботаСГрейдами", "Видимость", СтрокаПроблемыТекущегоДокумента.ПроблемыСГрейдом);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт 
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГрейдыСотрудников", "Период", "Зарплата", "Сотрудник.ГоловнаяОрганизация");
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюПоляСведенийОГрейдах(КадровыеДанные, ИмяПоля) Экспорт
	
	Если НеобходимыСведенияОГрейдах(ИмяПоля) Тогда
		
		Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
			КадровыеДанные = ?(ПустаяСтрока(КадровыеДанные), "", КадровыеДанные + ",") + ИмяПоля;
		Иначе
			КадровыеДанные.Добавить(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельНастроекУправлениеПерсоналом

Процедура ПанельУправлениеПерсоналомПрочитатьНастройкиГрейдов(Форма) Экспорт
	
	Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Форма.ЗначениеВРеквизитФормы(Настройки, "НастройкиГрейдов");
	Форма.ИндивидуальныеГрейдыЧисло = ?(Форма.НастройкиГрейдов.ИспользоватьИндивидуальныеГрейды, 1, 0);
	
КонецПроцедуры

Процедура ПанельУправлениеПерсоналомЗаполнитьНастройкиГрейдов(Форма, ПараметрыНастроек) Экспорт 
	
	Форма.НастройкиГрейдов.ИспользоватьИндивидуальныеГрейды = ?(Форма.ИндивидуальныеГрейдыЧисло = 1, Истина, Ложь);
	ПараметрыНастроек.НастройкиГрейдов = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Форма.НастройкиГрейдов, Метаданные.РегистрыСведений.НастройкиГрейдов);
	
КонецПроцедуры

Процедура ПанельУправлениеПерсоналомЗаписатьНастройкиГрейдов(Параметры, ПараметрыНастроек) Экспорт
	
	Если ПараметрыНастроек.НастройкиГрейдов Тогда
		
		Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиГрейдов);
		Настройки.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ЗапросВТСведенияОГрейдах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТВТСведенияОГрейдах = "ВТСведенияОГрейдах")
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГрейдыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрейдыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТВТСведенияОГрейдах);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ДобавитьПолеСведенийОГрейдах(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГрейдах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрейдах", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГрейдах(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОГрейдах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ГрейдПериодРегистрации")
		Или ИмяПоля = ВРег("ГрейдРегистратор")
		Или ИмяПоля = ВРег("Грейд");
	
КонецФункции

Функция ПутьКДаннымСведенийОГрейдах(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ГрейдПериодРегистрации") Тогда
		ПутьКДанным = "	ГрейдыСотрудников.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрейдРегистратор") Тогда
		ПутьКДанным = "	ГрейдыСотрудников.Регистратор";
	Иначе
		ПутьКДанным = "	ГрейдыСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОГрейдах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОГрейдах");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОГрейдах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОГрейдах КАК ГрейдыСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ГрейдыСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ГрейдыСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОГрейдах");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных).
//
// Описание:
//   В Разделы необходимо добавить метаданные тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Если Разделы.НайтиПоЗначению(Метаданные.Подсистемы.Мотивация) = Неопределено Тогда
		Разделы.Добавить(Метаданные.Подсистемы.Мотивация, НСтр("ru = 'Отчеты по мотивации'"));
	КонецЕсли;
	
КонецПроцедуры

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КонтрольГрейдов);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.КонтрольГрейдов, "КонтрольГрейдов");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьГрейды");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.КонтрольГрейдов, "МатрицаГрейдов");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьГрейды");
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.21";
	Обработчик.Процедура = "Грейды.НачальноеЗаполнениеКритериевОценкиПозицийШтатногоРасписания";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "Грейды.УстановитьПараметрыНабораСвойствСправочников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1c4a9461-699f-45a1-ad81-cae952e0d354");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников грейдов. Дополнительные реквизиты в грейдах временно недоступны.'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодключаемыеХарактеристики") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.4.22";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("300e462b-56be-49fa-a564-97beab4bc3a7");
		Обработчик.Процедура = "Грейды.ЗаполнитьПодключаемыеХарактеристики";
		Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	КонецЕсли;

КонецПроцедуры

Процедура НачальноеЗаполнениеКритериевОценкиПозицийШтатногоРасписания() Экспорт 
	
	Справочники.КритерииОценкиПозицийШтатногоРасписания.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочников(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиГрейдов.ИспользоватьГрейды) КАК ИспользоватьГрейды,
	|	МАКСИМУМ(НастройкиГрейдов.ИспользоватьСозданиеГрейдов) КАК ИспользоватьСозданиеГрейдов
	|ИЗ
	|	РегистрСведений.НастройкиГрейдов КАК НастройкиГрейдов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьГрейды;
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Грейды", ПараметрыНабора);
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьСозданиеГрейдов;
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КритерииОценкиПозицийШтатногоРасписания", ПараметрыНабора);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	РегистрыСведений.ГрейдыПозиций.ОбновитьПодключаемыеХарактеристики(Настройки.ИспользоватьГрейды, ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("НастройкиГрейдов", ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			Форма.НастройкиГрейдов, Метаданные.РегистрыСведений.НастройкиГрейдов));
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("НастройкиГрейдов") Тогда
		ЗаполнитьЗначенияСвойств(Форма["НастройкиГрейдов"], СохраненныеНастройки["НастройкиГрейдов"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиГрейдов);
	ЗаполнитьЗначенияСвойств(Форма.НастройкиГрейдов, НастройкиСтруктура);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	НастройкиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиГрейдов);
	НастройкиПрограммы.Вставить("НастройкиГрейдов", НастройкиСтруктура);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиГрейдов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиГрейдов);
	Настройки.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
