////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура обновляет отображение текущей записи календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - настройки отображения.
//
Процедура ОбновитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	ТекущаяЗаписьВПериодеОтображения = ВПериодеОтображенияПланировщика(
		Планировщик,
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	
	Если Не ТекущаяЗаписьВПериодеОтображения Тогда
		РаботаСРабочимКалендаремВызовСервера.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	Иначе
		ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения);
		ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает текущую запись календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - настройки отображения.
//
Процедура ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Формирует структуру элемента текущей записи календаря.
//
// Параметры:
//  ДатаНачала - Дата - дата начала элемента.
//  ДатаОкончания - Дата - дата окончания элемента.
// 
// Возвращаемое значение:
//  Структура - структура данных записи календаря.
//
Функция СформироватьЭлементТекущейЗаписиКалендаря(ДатаНачала, ДатаОкончания) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЭлементЗаписиКалендаря.ДатаНачала = ДатаНачала;
	ЭлементЗаписиКалендаря.ДатаОкончания = ДатаОкончания;
	ЭлементЗаписиКалендаря.ЭтоТекущаяЗапись = Истина;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Применяет настройки отображения планировщика.
//
Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо = НастройкиОтображения.ОтображатьВремяПо;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	// Расчет отображаемых часов
	Если НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
		Для Каждого Событие Из Планировщик.Элементы Цикл
			
			Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Событие.Значение.ВесьДень Тогда
				Продолжить;
			КонецЕсли;
			
			// Определяем час начала и окончания.
			// Если окончание приходится на начало дня - то час окончания 24.
			ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
			ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
			
			// Определяем минимальное время для отображения.
			// Час начала берем как есть.
			// Час окончания берем предыдущий.
			МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
			Если МинВремя < ОтображатьВремяС Тогда
				ОтображатьВремяС = МинВремя;
			КонецЕсли;
			
			// Определяем максимальное время для отображения.
			// Час начала берем следующий.
			// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
			СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
			МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
			ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
			Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
				ОтображатьВремяПо = 24 - МаксВремя;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Настройки общие для всех периодов отображения
	Планировщик.ОтображениеВремениЭлементов = НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
	
	// Фон календаря.
	ДобавитьФонКалендаря(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
	// Настройки специфичные для периода отображения
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		// Планировщик по часам
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ЦветФона = Новый Цвет();
		
		// Планировщик по дням
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		
	КонецЕсли;
	
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения);
	
	// Измерение Пользователь
	Планировщик.Измерения.Очистить();
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		Если НастройкиОтображения.Пользователи.Количество() > 1 Тогда
			ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Пользователь");
			Для Каждого Пользователь Из НастройкиОтображения.Пользователи Цикл
				ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Пользователь);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НастройкиОтображения.ОтображатьЗанятость Тогда
		ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Пользователь");
		Для Каждого Пользователь Из НастройкиОтображения.Пользователи Цикл
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Пользователь);
		КонецЦикла;
		Если НастройкиОтображения.ОтображатьОбщуюЗанятость Тогда
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить("Общее");
		КонецЕсли;
	КонецЕсли;
	
	// Выделение текущего дня.
	ДобавитьФонТекущегоДня(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
КонецПроцедуры

// Корректирует дату начала и окончания события с учетом настройки "Весь день" и пустых дат.
Процедура СкорректироватьДатуНачалаИОкончания(
	ДатаНачала,
	ДатаОкончания,
	ВесьДень,
	НачальноеЗначениеДатаНачала = Неопределено,
	НачальноеЗначениеДатаОкончания = Неопределено,
	СохранятьДлительностьПриПереносеДатыОкончания = Ложь,
	ИзменилсяВесьДень = Ложь,
	СохранятьДлительностьПриПереносеДатыНачалаВПределахДня = Истина,
	ДлительностьСобытияПоУмолчанию = 3600,
	ИзменятьДатуНачалаИОкончания = Истина) Экспорт
	
	// Очистка времени
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени начала
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
		И ДатаНачала <> НачальноеЗначениеДатаНачала
		И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени окончания
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
		И ДатаОкончания <> НачальноеЗначениеДатаОкончания
		И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	Если ИзменятьДатуНачалаИОкончания Тогда
		
		// Сохранение длительность при переносе дата начала.
		Если СохранятьДлительностьПриПереносеДатыНачалаВПределахДня Тогда
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И ДатаНачала <> НачальноеЗначениеДатаНачала
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
				И НачалоДня(ДатаНачала) <> НачалоДня(НачальноеЗначениеДатаНачала)
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаОкончания = ДатаНачала + НачальнаяДлительность;
			КонецЕсли;
		КонецЕсли;
		
		Если ВесьДень Тогда
			
			Если ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаНачала);
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаНачала = НачалоДня(ДатаОкончания);
			КонецЕсли;
			
			Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
				ДатаНачала = НачалоДня(ДатаНачала);
			КонецЕсли;
			
			Если ДатаОкончания <> КонецДня(ДатаОкончания) Тогда
				ДатаОкончания = КонецДня(ДатаОкончания);
			КонецЕсли;
			
		Иначе
			
			Если ИзменилсяВесьДень Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
			ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				Если ДатаОкончания = НачалоДня(ДатаОкончания) Тогда
					ДатаНачала = НачалоДня(ДатаОкончания);
					ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
				Иначе
					ДатаНачала = ДатаОкончания - ДлительностьСобытияПоУмолчанию;
				КонецЕсли;
			ИначеЕсли СохранятьДлительностьПриПереносеДатыОкончания
				И ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
				И ДатаОкончания <> НачальноеЗначениеДатаОкончания
				И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
				
				НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
				ДатаНачала = ДатаОкончания - НачальнаяДлительность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = ДатаНачала;
	НачальноеЗначениеДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

// Возвращает дату приведенную к началу периода отображения календаря.
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
			ДатаНачалаПериода = НачалоДня(Дата) - 2 * 86400; // 86400 - число секунд в сутках
		Иначе
			ДатаНачалаПериода = НачалоДня(Дата);
		КонецЕсли;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату приведенную к концу периода отображения календаря.
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата) + 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 6 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняРабочийСтол") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 2 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(Дата) - 1) + 604800; // 604800 - число секунд в неделе
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

// Возвращает дату приведенную к началу следующего периода отображения календаря.
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = КонецНедели(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = КонецМесяца(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции

// Возвращает дату приведенную к началу предыдущего периода отображения календаря.
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(НачалоНедели(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(НачалоМесяца(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата) - 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции

// Приводит переданную дату к началу получаса.
Функция НачалоПолучаса(Дата) Экспорт
	
	НачалоПолучаса = НачалоЧаса(Дата);
	
	Если Дата - НачалоПолучаса >= 1800 Тогда
		
		НачалоПолучаса = НачалоПолучаса + 1800;
		
	КонецЕсли;
	
	Возврат НачалоПолучаса;
	
КонецФункции

// Приводит переданную дату к концу получаса.
Функция КонецПолучаса(Дата) Экспорт
	
	Если Дата = НачалоЧаса(Дата) ИЛИ Дата = (НачалоЧаса(Дата) + 1800) Тогда
		Возврат Дата;
	КонецЕсли;
	
	КонецПолучаса = КонецЧаса(Дата) + 1;
	
	Если КонецПолучаса - Дата > 1800 Тогда
		
		КонецПолучаса = КонецПолучаса - 1800;
		
	КонецЕсли;
	
	Возврат КонецПолучаса;
	
КонецФункции

// Преобразует переданную к дате и время текстом к дате и времени.
Функция ПреобразоватьТекстКДате(Дата, Знач ТекстВремя) Экспорт
	
	ТекстВремя = СтрЗаменить(ТекстВремя, " ", "0");
	ДлинаТекстаВремени = СтрДлина(ТекстВремя);
	
	Если ДлинаТекстаВремени = 0 ИЛИ ДлинаТекстаВремени > 5 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	ТекстВремяВФормате = Неопределено;
	
	Если КодСимвола(ПервыйСимвол) = КодСимвола("0") ИЛИ КодСимвола(ПервыйСимвол) = КодСимвола("1") Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ложь);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола("2")Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Истина);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) >= КодСимвола("3") И КодСимвола(ПервыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = "0" + ПервыйСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "00";
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервыйСимвол) Тогда
		
		ТекстВремяВФормате = "0000";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВремя) Тогда
		ТекстВремяВФормате = Неопределено;
	КонецЕсли;
	
	Если ТекстВремяВФормате = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстВремяВФормате = "00010101" + ТекстВремяВФормате + "00";
	Время = Дата(ТекстВремяВФормате);
	Результат = НачалоДня(Дата) + Час(Время) * 3600 + Минута(Время) * 60;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает развернутость событий весь день в календаре.
Процедура УстановитьРазвернутостьСобытийВесьДень(Календарь, СвернутьСобытияВесьДеньВКалендаре) Экспорт
	
	Попытка
		
		Если СвернутьСобытияВесьДеньВКалендаре Тогда
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Истина;
			Календарь.Область("СобытияВсегоДня").Видимость = Ложь;
		Иначе
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Ложь;
			Календарь.Область("СобытияВсегоДня").Видимость = Истина;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Возвращает текстовое представление повторения.
Функция ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Не повторять'");
		Возврат ПредставлениеПовторения;
		
	ИначеЕсли НастройкиПовторения.ИнтервалПовторения > 1 Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения);
		ПредставлениеПовторения = СтрШаблон(НСтр("ru = 'Каждые %1 %2'"),
				НастройкиПовторения.ИнтервалПовторения,
				ПредставлениеЕдиницыИзмеренияИнтервалаПовторения);
				
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый день'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждую неделю'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый месяц'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый год'");
		
	КонецЕсли;
	
	СимволТире = Символ(32) + Символ(8211) + Символ(32);
	Если НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		Если НастройкиПовторения.ПовторениеПоДнямНедели[1]
			И НастройкиПовторения.ПовторениеПоДнямНедели[2]
			И НастройкиПовторения.ПовторениеПоДнямНедели[3]
			И НастройкиПовторения.ПовторениеПоДнямНедели[4]
			И НастройкиПовторения.ПовторениеПоДнямНедели[5]
			И НастройкиПовторения.ПовторениеПоДнямНедели[6]
			И НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + НСтр("ru = 'во все дни'");
			
		ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНедели[1]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[2]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[3]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[4]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[5]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[6]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеДнейНедели = "";
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[1] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в понедельник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[2] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'во вторник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[3] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в среду'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[4] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в четверг'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[5] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в пятницу'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[6] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в субботу'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
				ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в воскресенье'"));
			КонецЕсли;
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДнейНедели;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		Если ЗначениеЗаполнено(НастройкиПовторения.ПовторениеПоДнямМесяца) Тогда
			
			ПредставлениеДняМесяца = СтрШаблон(НСтр("ru = '%1-го числа'"),
				НастройкиПовторения.ПовторениеПоДнямМесяца);
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняМесяца;
			
		Иначе
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 1 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'понедельник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 2 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'вторник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 3 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'среда'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 4 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'четверг'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 5 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'пятница'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 6 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'суббота'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 7 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'воскресенье'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последнее'");
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения <> -1 Тогда
				ПредставлениеПорядкаДняНеделиМесяца =
					Строка(НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения);
			КонецЕсли;
			
			ПредставлениеДняНеделиМесяца = СтрШаблон(НСтр("ru = '%1 %2'"),
				ПредставлениеПорядкаДняНеделиМесяца,
				ПредставлениеДняНедели);
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняНеделиМесяца;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		МесяцДень = Дата(1,НастройкиПовторения.ПовторениеПоМесяцам, НастройкиПовторения.ПовторениеПоДнямМесяца);
		ПредставлениеДняГода = Формат(МесяцДень, "ДФ='d MMMM'");
		
		ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняГода;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПовторения.КоличествоПовторов) 
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ПослеЧислаПовторов") Тогда
		
		ПредставлениеКоличестваПовторов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 раз;;%1 раза;%1 раз;'"), НастройкиПовторения.КоличествоПовторов);
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеКоличестваПовторов;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиПовторения.ДатаОкончанияПовторения)
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ДоДаты") Тогда
		
		ПредставлениеДо = СтрШаблон(НСтр("ru = 'до %1'"),
			Формат(НастройкиПовторения.ДатаОкончанияПовторения, "ДЛФ=DD"));
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеДо;
		
	КонецЕсли;
	
	Возврат ПредставлениеПовторения;
	
КонецФункции

// Возвращает текстовое представление единицы измерения интервала повторения.
Функция ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения 
			= СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';день;;дня;дней;'"), НастройкиПовторения.ИнтервалПовторения);
				
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';неделя;;недели;недель;'"), НастройкиПовторения.ИнтервалПовторения);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';месяц;;месяца;месяцев;'"), НастройкиПовторения.ИнтервалПовторения);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';год;;года;лет;'"), НастройкиПовторения.ИнтервалПовторения);
		
	КонецЕсли;
	
	Возврат ПредставлениеЕдиницыИзмеренияИнтервалаПовторения;
	
КонецФункции

// Возвращает структуру настройки повторения.
Функция НовыеНастройкиПовторения(
	ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
	КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
	ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам) Экспорт
	
	НастройкиПовторения = Новый Структура;
	НастройкиПовторения.Вставить("ЧастотаПовторения", ЧастотаПовторения);
	НастройкиПовторения.Вставить("ИнтервалПовторения", ИнтервалПовторения);
	НастройкиПовторения.Вставить("ПравилоОкончанияПовторения", ПравилоОкончанияПовторения);
	НастройкиПовторения.Вставить("КоличествоПовторов", КоличествоПовторов);
	НастройкиПовторения.Вставить("ДатаОкончанияПовторения", ДатаОкончанияПовторения);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНедели", ПовторениеПоДнямНедели);
	НастройкиПовторения.Вставить("ПовторениеПоДнямМесяца", ПовторениеПоДнямМесяца);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНеделиВМесяце", ПовторениеПоДнямНеделиВМесяце);
	НастройкиПовторения.Вставить("ПовторениеПоМесяцам", ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

// Возвращает день недели в месяце.
Функция ПолучитьДеньНеделиВМесяце(Дата, СУчетомПоследнего = Истина) Экспорт
	
	ДеньНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
	
	ДеньНеделиВМесяце.ДеньНедели = ДеньНедели(Дата);
	
	НомерНеделиСНачалаМесяца = Цел((Дата - (НачалоМесяца(Дата))) / 604800) + 1; // 604800 - число секунд в неделе
	ДеньНеделиВМесяце.НомерВхождения = НомерНеделиСНачалаМесяца;
	
	Если СУчетомПоследнего Тогда
		НомерНеделиСКонцаМесяца = Цел((КонецМесяца(Дата) - Дата) / 604800) + 1; // 604800 - число секунд в неделе
		Если НомерНеделиСКонцаМесяца = 1 Тогда
			ДеньНеделиВМесяце.НомерВхождения = -1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДеньНеделиВМесяце;
	
КонецФункции

// Возвращает пустое HTML представление.
Функция ПолучитьПустоеHTMLПредставление() Экспорт
	
	Возврат "<html><body scroll=auto></body></html>";
	
КонецФункции

// Возвращает первую непустую строку.
Функция ВыделитьПервуюСтрокуОписания(Описание) Экспорт
	
	Результат = СокрЛ(Описание);
	Результат = СтрПолучитьСтроку(Результат, 1);
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание без первой строки.
//
// Параметры:
//  Описание - Строка - обрабатываемое описание.
//
// Возвращаемое значение:
//  Строка - описание без первой строки.
//
Функция ВыделитьОписаниеБезПервойСтроки(Описание) Экспорт
	
	Результат = СокрЛП(Описание);
	Результат = СтрРазделить(Результат, Символы.ПС);
	Если Результат.Количество() <> 0 Тогда
		Результат.Удалить(0);
	КонецЕсли;
	Результат = СтрСоединить(Результат, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

// Возвращает промежуток времени строкой.
Функция ПолучитьПромежутокВремениСтрокой(ВремяНачала, ВремяОкончания, ДеньНедели = Неопределено) Экспорт
	
	ПромежутокВремениСтрокой = "";
	
	Если ДеньНедели <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
			ТРег(ПолучитьДеньНеделиСтрокой(ДеньНедели)));
	КонецЕсли;
	
	ВремяНачалаСтрокой = Формат(ВремяНачала, "ДФ=ЧЧ:мм; ДП=00:00");
	Если ВремяОкончания <> Дата("00010101235959") Тогда
		ВремяОкончанияСтрокой = Формат(ВремяОкончания, "ДФ=ЧЧ:мм; ДП=00:00");
	Иначе
		ВремяОкончанияСтрокой = "00:00";
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
		ВремяНачалаСтрокой + " - " + ВремяОкончанияСтрокой);
	
	Возврат ПромежутокВремениСтрокой;
	
КонецФункции

// Возвращает день недели строкой.
Функция ПолучитьДеньНеделиСтрокой(ДеньНедели) Экспорт
	
	ДатаДняНедели = Дата(1,1,2 + ДеньНедели); // Дата(1,1,3) - понедельник
	Возврат Формат(ДатаДняНедели,"ДФ=дддд");
	
КонецФункции

// Заменяет повторное вхождение символа на одиночное.
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт
	
	ВременныйТекст = Текст;
	
	ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	Пока ПозицияДвойногоСимвола <> 0 Цикл
		ВременныйТекст = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	КонецЦикла;
	
	Возврат ВременныйТекст;
	
КонецФункции

// Проверяет образуют ли переданные даты корректный период календаря.
Функция ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Экспорт
	
	Возврат ЗначениеЗаполнено(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания)
		И ДатаНачала < ДатаОкончания;
	
КонецФункции

// Формирует представление даты записи календаря.
Функция ПолучитьПредставлениеДаты(ДатаНачала, ДатаОкончания, ВесьДень) Экспорт
	
	ПредставлениеДаты = "";
	
	ТекстВремя = Формат(ДатаНачала, "ДФ=ЧЧ:мм") + " - " + Формат(ДатаОкончания, "ДФ=ЧЧ:мм");
	ТекстДата = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	
	Если ВесьДень Тогда
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг'");
	Иначе
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) - НачалоДня(ДатаОкончания) <> 0 Тогда
		ПредставлениеДаты = ТекстДатаНачала + " - " + ТекстДатаОкончания;
	ИначеЕсли ВесьДень Тогда
		ПредставлениеДаты = ТекстДата;
	Иначе
		ПредставлениеДаты = ТекстДата + ", " + ТекстВремя;
	КонецЕсли;
	
	Возврат ТРег(ПредставлениеДаты);
	
КонецФункции

// Формирует структуру времени.
Функция СформироватьВремя(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВесьДень = Неопределено) Экспорт
	
	Время = Новый Структура("ДатаНачала, ДатаОкончания, ВесьДень");
	Время.ДатаНачала = ДатаНачала;
	Время.ДатаОкончания = ДатаОкончания;
	Время.ВесьДень = ВесьДень;
	
	Возврат Время;
	
КонецФункции

// Получает индекс цвета в коллекции КоллекцияЦветов.
//
// Параметры:
//  Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря - цвет, индекс которого необходимо получить.
//
// Возвращаемое значение:
//  Число - индекс цвета в коллекции.
//
Функция ПолучитьИндексЦвета(Цвет) Экспорт
	
	ИндексЦвета = 0;
	
	Если Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет") Тогда
		ИндексЦвета = 0;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ИндексЦвета = 1;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ИндексЦвета = 2;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ИндексЦвета = 3;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ИндексЦвета = 4;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ИндексЦвета = 5;
	КонецЕсли;
	
	Возврат ИндексЦвета;
	
КонецФункции

// Возвращает период отображения с учетом настроек отображения.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - период отображения.
//
Функция ПолучитьПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда
		Если НастройкиОтображения.ПериодОтображения =
			ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДняДень");
		Иначе
			ПериодОтображения =
				ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
		КонецЕсли;
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	
	Возврат ПериодОтображения;
	
КонецФункции

// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - выделенные даты.
//
Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

// Возвращает необходимость отображения занятости в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Булево - необходимость отображения занятости в планировщике.
//
Функция ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	
	ОтобразитьЗанятостьВДне =
		(НастройкиОтображения.ОтображатьЗанятость
			И ((ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя"))
				Или (ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели"))))
		Или НастройкиОтображения.ОтображатьОбщуюЗанятость;
	
	Возврат ОтобразитьЗанятостьВДне;
	
КонецФункции

// Возвращает общую дату начала.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаНачалаОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаНачалаОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаНачалаОбщая = Неопределено Тогда
			ДатаНачалаОбщая = ОтображаемаяДатаНачала;
		Иначе
			ДатаНачалаОбщая = Мин(ДатаНачалаОбщая, ОтображаемаяДатаНачала);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачалаОбщая;
	
КонецФункции

// Возвращает общую дату окончания.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - общая дата начала.
//
Функция ПолучитьДатаОкончанияОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаОкончанияОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаОкончанияОбщая = Неопределено Тогда
			ДатаОкончанияОбщая = ОтображаемаяДатаОкончания;
		Иначе
			ДатаОкончанияОбщая = Макс(ДатаОкончанияОбщая, ОтображаемаяДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОкончанияОбщая;
	
КонецФункции

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЗаполнитьЗначенияСвойств(ЭлементЗаписиКалендаря, ЗаписьКалендаря);
	
	Если ЗаписьКалендаря.ТипЗаписиКалендаря
			= ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
		ЭлементЗаписиКалендаря.ВидЭлемента =
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся");
	КонецЕсли;
	ЭлементЗаписиКалендаря.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачала;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Проверяет что переданное значение является элементов записи календаря.
//
// Параметры:
//  ЭлементЗаписиКалендаря - Структура - проверяемое значение.
//
// Возвращаемое значение:
//  Булево - переданное значение является элементом записи календаря.
//
Функция ЭтоЭлементЗаписиКалендаря(ЭлементЗаписиКалендаря) Экспорт
	
	Если ТипЗнч(ЭлементЗаписиКалендаря) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементЗаписиКалендаря.Свойство("Ссылка")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачала")
		И ЭлементЗаписиКалендаря.Свойство("ДатаОкончания")
		И ЭлементЗаписиКалендаря.Свойство("ВесьДень")
		И ЭлементЗаписиКалендаря.Свойство("ТипЗаписиКалендаря")
		И ЭлементЗаписиКалендаря.Свойство("ПометкаУдаления")
		И ЭлементЗаписиКалендаря.Свойство("Пользователь")
		И ЭлементЗаписиКалендаря.Свойство("ВидЭлемента")
		И ЭлементЗаписиКалендаря.Свойство("ДатаНачалаИсходная")
		И ЭлементЗаписиКалендаря.Свойство("УникальныйИдентификатор");
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует отказаться от использования.
// Возвращает структуру правила повторения.
//
// Возвращает массив времен по часам внутри дня
Функция ПолучитьМассивВремен() Экспорт
	
	МассивВремен = Новый Массив;
	
	Дата = Дата(1,1,2);
	
	Для Итератор = 1 По 24 Цикл
		МассивВремен.Добавить(Формат(Дата, "ДФ = 'HH:mm'"));
		Дата = Дата + 3600;
	КонецЦикла;
	
	Возврат МассивВремен;
	
КонецФункции

// Устарела. Следует использовать новую (см. РаботаСРабочимКалендаремКлиентСервер.НовыеНастройкиПовторения).
// Возвращает структуру настройки повторения.
Функция ПолучитьСтруктуруНастройкиПовторения(
	ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
	КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
	ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам) Экспорт
	
	Возврат НовыеНастройкиПовторения(ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
		КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает второй символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ограничение)
	
	ВторойСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("9") И НЕ Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("3") И Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "0" + ТекстВремяВФормате;
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВторойСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "000";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает третий символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ТретийСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ТретийСимвол) >= КодСимвола("0") И КодСимвола(ТретийСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ТретийСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ТретийСимвол) >= КодСимвола("6") И КодСимвола(ТретийСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ТретийСимвол;
		
	ИначеЕсли КодСимвола(ТретийСимвол) = КодСимвола(":") Тогда
		
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТретийСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает четвертый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ЧетвертыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ЧетвертыйСимвол) >= КодСимвола("0") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ЧетвертыйСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ЧетвертыйСимвол) >= КодСимвола("6") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ЧетвертыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ЧетвертыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает пятый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ПятыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ПятыйСимвол) >= КодСимвола("0") И КодСимвола(ПятыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ПятыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПятыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляем в интервалы фона фон текущего дня.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
Процедура ДобавитьФонТекущегоДня(ИнтервалыФона, НастройкиОтображения)
	
	ИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня.Добавить(
		СформироватьВремяИнтервалаФона(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())));
	
	Пока ВозможныеИнтервалыФонаТекущегоДня.Количество() <> 0 Цикл
		
		ВозможныйИнтервалФона = ВозможныеИнтервалыФонаТекущегоДня[0];
		
		ЕстьПересечения = Ложь;
		Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
			
			// Интервал фона пустой.
			Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона до текущего дня.
			Если ИнтервалФона.Конец <= ВозможныйИнтервалФона.Начало Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона после текущего дня.
			Если ИнтервалФона.Начало >= ВозможныйИнтервалФона.Конец Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПересечения = Истина;
			
			// Интервал фона покрывает текущий день.
			Если ИнтервалФона.Начало <= ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Конец >= ВозможныйИнтервалФона.Конец Тогда
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает начало текущего дня.
			Если ИнтервалФона.Начало <= ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Конец > ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможныйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможныйИнтервалФона.Конец));
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает конец текущего дня.
			Если ИнтервалФона.Начало > ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможныйИнтервалФона.Конец
				И ИнтервалФона.Конец >= ВозможныйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможныйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
			// Интервал фона входит в текущий день.
			Если ИнтервалФона.Начало > ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможныйИнтервалФона.Конец
				И ИнтервалФона.Конец > ВозможныйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможныйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможныйИнтервалФона.Конец));
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможныйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьПересечения Тогда
			ИнтервалыФонаТекущегоДня.Добавить(ВозможныйИнтервалФона);
		КонецЕсли;
		
		ВозможныеИнтервалыФонаТекущегоДня.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого ИнтервалФона Из ИнтервалыФонаТекущегоДня Цикл
		ФонТекущегоДня = ИнтервалыФона.Добавить(
			ИнтервалФона.Начало, ИнтервалФона.Конец);
		ФонТекущегоДня.Цвет = НастройкиОтображения.ЦветФонаТекущегоДня;
	КонецЦикла;
	
КонецПроцедуры

// Добавляем в интервалы фона фон календаря.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
Процедура ДобавитьФонКалендаря(ИнтервалыФона, НастройкиОтображения)
	
	Если НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаОбщая = ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	Если ДатаНачалаОбщая = Неопределено Или ДатаОкончанияОбщая = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
		
		// Интервал фона пустой.
		Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя
			И ИнтервалФона.Начало = ДатаНачалаОбщая
			И ИнтервалФона.Конец = ДатаОкончанияОбщая Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ФонПланировщика = ИнтервалыФона.Добавить(ДатаНачалаОбщая, ДатаОкончанияОбщая);
	ФонПланировщика.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя;
	
КонецПроцедуры

// Формирует структуру времени интервала фона.
//
// Параметры:
//  Начало	 - Дата	 - начало времени интервала фона.
//  Конец	 - Дата	 - конец времени интервала фона.
// 
// Возвращаемое значение:
//  Структура - структура времени интервала фона.
//
Функция СформироватьВремяИнтервалаФона(Начало, Конец)
	
	Время = Новый Структура("Начало, Конец");
	Время.Начало = Начало;
	Время.Конец = Конец;
	
	Возврат Время;
	
КонецФункции

// Проверяет, что переданный период находится в периоде отображения планировщика.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  ДатаНачала - Дата - дата начала.
//  ДатаОкончания - Дата - дата окончания.
//
// Возвращаемое значение:
//  Булево - период в периоде отображения планировщика.
//
Функция ВПериодеОтображенияПланировщика(Планировщик, ДатаНачала, ДатаОкончания)
	
	ВПериодеОтображенияПланировщика = ДатаНачала >= Планировщик.НачалоПериодаОтображения
		И ДатаОкончания <= Планировщик.КонецПериодаОтображения;
	
	Возврат ВПериодеОтображенияПланировщика;
	
КонецФункции

// Добавляет элемент текущей записи в планировщик.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - настройки отображения.
//
Процедура ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	Если НастройкиОтображения.ТекущаяЗаписьВесьДень Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.Значение = СформироватьЭлементТекущейЗаписиКалендаря(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.ЦветФона = НастройкиОтображения.ЦветКалендаряТекущаяЗапись;
	ЭлементПланировщика.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = НастройкиОтображения.ЦветРамкиТекущаяЗапись;
	ЭлементПланировщика.Текст = НСтр("ru = 'Текущая запись календаря'");
	
КонецПроцедуры

// Формирует структуру элемента записи календаря.
// 
// Возвращаемое значение:
//  Структура - элемент записи календаря.
//
Функция НовыйЭлементЗаписиКалендаря()
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("Ссылка",
		ПредопределенноеЗначение("Справочник.ЗаписиРабочегоКалендаря.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачала", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ДатаОкончания", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ВесьДень", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ТипЗаписиКалендаря",
		ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.Событие"));
	ЭлементЗаписиКалендаря.Вставить("ПометкаУдаления", Ложь);
	ЭлементЗаписиКалендаря.Вставить("Пользователь",
		ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("Предмет", Неопределено);
	ЭлементЗаписиКалендаря.Вставить("Связанная", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ЭтоТекущаяЗапись", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ВидЭлемента",
		ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Удаляет элемент текущей записи из планировщика.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - настройки отображения.
//
Процедура УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ЭлементПланировщика = Планировщик.Элементы[КоличествоЭлементов - Индекс];
		Если ЭлементПланировщика.Значение.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка 
			Или ЭлементПланировщика.Значение.ЭтоТекущаяЗапись Тогда
			Планировщик.Элементы.Удалить(ЭлементПланировщика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает шкалу времени планировщика в соответствии с персональными настройками.
//
Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текстовое представление интервала времени, заданного в секундах.
//
// Параметры:
//	Время - Число - интервал времени в минутах.
//
// Возвращаемое значение:
//	Строка - представление интервала времени.
//
Функция ПредставлениеВремени(Время) Экспорт
	
	Если Время = 0 Тогда
		Возврат НСтр("ru = 'при наступлении события'");
	Иначе
		ПредставлениеВремени = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Время);
		ПредставлениеПредлога = НСтр("ru = 'за'");
		Возврат СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеПредлога, ПредставлениеВремени);
	КонецЕсли;
	
КонецФункции

#Область РаботаСHTML

// Возвращает соответствие для замены спецсимволов
Функция ПолучитьСоответствиеСпецСимволов()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(193, "Aacute");
	Результат.Вставить(225, "aacute");
	Результат.Вставить(226, "acirc");
	Результат.Вставить(194, "Acirc");
	Результат.Вставить(180, "acute");
	Результат.Вставить(230, "aelig");
	Результат.Вставить(198, "AElig");
	Результат.Вставить(192, "Agrave");
	Результат.Вставить(224, "agrave");
	Результат.Вставить(8501, "alefsym");
	Результат.Вставить(913, "Alpha");
	Результат.Вставить(945, "alpha");
	Результат.Вставить(8743, "and");
	Результат.Вставить(8736, "ang");
	Результат.Вставить(229, "aring");
	Результат.Вставить(197, "Aring");
	Результат.Вставить(8776, "asymp");
	Результат.Вставить(195, "Atilde");
	Результат.Вставить(227, "atilde");
	Результат.Вставить(196, "Auml");
	Результат.Вставить(228, "auml");
	Результат.Вставить(8222, "bdquo");
	Результат.Вставить(914, "Beta");
	Результат.Вставить(946, "beta");
	Результат.Вставить(166, "brvbar");
	Результат.Вставить(8226, "bull");
	Результат.Вставить(8745, "cap");
	Результат.Вставить(199, "Ccedil");
	Результат.Вставить(231, "ccedil");
	Результат.Вставить(184, "cedil");
	Результат.Вставить(162, "cent");
	Результат.Вставить(967, "chi");
	Результат.Вставить(935, "Chi");
	Результат.Вставить(710, "circ");
	Результат.Вставить(9827, "clubs");
	Результат.Вставить(8773, "cong");
	Результат.Вставить(169, "copy");
	Результат.Вставить(8629, "crarr");
	Результат.Вставить(8746, "cup");
	Результат.Вставить(164, "curren");
	Результат.Вставить(8224, "dagger");
	Результат.Вставить(8225, "Dagger");
	Результат.Вставить(8659, "dArr");
	Результат.Вставить(8595, "darr");
	Результат.Вставить(176, "deg");
	Результат.Вставить(916, "Delta");
	Результат.Вставить(948, "delta");
	Результат.Вставить(9830, "diams");
	Результат.Вставить(247, "divide");
	Результат.Вставить(233, "eacute");
	Результат.Вставить(201, "Eacute");
	Результат.Вставить(202, "Ecirc");
	Результат.Вставить(234, "ecirc");
	Результат.Вставить(232, "egrave");
	Результат.Вставить(200, "Egrave");
	Результат.Вставить(8709, "empty");
	Результат.Вставить(8195, "emsp");
	Результат.Вставить(8194, "ensp");
	Результат.Вставить(949, "epsilon");
	Результат.Вставить(917, "Epsilon");
	Результат.Вставить(8801, "equiv");
	Результат.Вставить(919, "Eta");
	Результат.Вставить(951, "eta");
	Результат.Вставить(240, "eth");
	Результат.Вставить(208, "ETH");
	Результат.Вставить(235, "euml");
	Результат.Вставить(203, "Euml");
	Результат.Вставить(8364, "euro");
	Результат.Вставить(8707, "exist");
	Результат.Вставить(402, "fnof");
	Результат.Вставить(8704, "forall");
	Результат.Вставить(189, "frac12");
	Результат.Вставить(188, "frac14");
	Результат.Вставить(190, "frac34");
	Результат.Вставить(8260, "frasl");
	Результат.Вставить(915, "Gamma");
	Результат.Вставить(947, "gamma");
	Результат.Вставить(8805, "ge");
	Результат.Вставить(62, "gt");
	Результат.Вставить(8660, "hArr");
	Результат.Вставить(8596, "harr");
	Результат.Вставить(9829, "hearts");
	Результат.Вставить(8230, "hellip");
	Результат.Вставить(237, "iacute");
	Результат.Вставить(205, "Iacute");
	Результат.Вставить(238, "icirc");
	Результат.Вставить(206, "Icirc");
	Результат.Вставить(161, "iexcl");
	Результат.Вставить(204, "Igrave");
	Результат.Вставить(236, "igrave");
	Результат.Вставить(8465, "image");
	Результат.Вставить(8734, "infin");
	Результат.Вставить(8747, "int");
	Результат.Вставить(921, "Iota");
	Результат.Вставить(953, "iota");
	Результат.Вставить(191, "iquest");
	Результат.Вставить(8712, "isin");
	Результат.Вставить(207, "Iuml");
	Результат.Вставить(239, "iuml");
	Результат.Вставить(922, "Kappa");
	Результат.Вставить(954, "kappa");
	Результат.Вставить(955, "lambda");
	Результат.Вставить(923, "Lambda");
	Результат.Вставить(9001, "lang");
	Результат.Вставить(171, "laquo");
	Результат.Вставить(8592, "larr");
	Результат.Вставить(8656, "lArr");
	Результат.Вставить(8968, "lceil");
	Результат.Вставить(8220, "ldquo");
	Результат.Вставить(8804, "le");
	Результат.Вставить(8970, "lfloor");
	Результат.Вставить(8727, "lowast");
	Результат.Вставить(9674, "loz");
	Результат.Вставить(8206, "lrm");
	Результат.Вставить(8249, "lsaquo");
	Результат.Вставить(8216, "lsquo");
	Результат.Вставить(60, "lt");
	Результат.Вставить(175, "macr");
	Результат.Вставить(8212, "mdash");
	Результат.Вставить(181, "micro");
	Результат.Вставить(183, "middot");
	Результат.Вставить(8722, "minus");
	Результат.Вставить(924, "Mu");
	Результат.Вставить(956, "mu");
	Результат.Вставить(8711, "nabla");
	Результат.Вставить(160, "nbsp");
	Результат.Вставить(8211, "ndash");
	Результат.Вставить(8800, "ne");
	Результат.Вставить(8715, "ni");
	Результат.Вставить(172, "not");
	Результат.Вставить(8713, "notin");
	Результат.Вставить(8836, "nsub");
	Результат.Вставить(241, "ntilde");
	Результат.Вставить(209, "Ntilde");
	Результат.Вставить(925, "Nu");
	Результат.Вставить(957, "nu");
	Результат.Вставить(243, "oacute");
	Результат.Вставить(211, "Oacute");
	Результат.Вставить(212, "Ocirc");
	Результат.Вставить(244, "ocirc");
	Результат.Вставить(338, "OElig");
	Результат.Вставить(339, "oelig");
	Результат.Вставить(242, "ograve");
	Результат.Вставить(210, "Ograve");
	Результат.Вставить(8254, "oline");
	Результат.Вставить(969, "omega");
	Результат.Вставить(937, "Omega");
	Результат.Вставить(927, "Omicron");
	Результат.Вставить(959, "omicron");
	Результат.Вставить(8853, "oplus");
	Результат.Вставить(8744, "or");
	Результат.Вставить(170, "ordf");
	Результат.Вставить(186, "ordm");
	Результат.Вставить(216, "Oslash");
	Результат.Вставить(248, "oslash");
	Результат.Вставить(213, "Otilde");
	Результат.Вставить(245, "otilde");
	Результат.Вставить(8855, "otimes");
	Результат.Вставить(214, "Ouml");
	Результат.Вставить(246, "ouml");
	Результат.Вставить(182, "para");
	Результат.Вставить(8706, "part");
	Результат.Вставить(8240, "permil");
	Результат.Вставить(8869, "perp");
	Результат.Вставить(966, "phi");
	Результат.Вставить(934, "Phi");
	Результат.Вставить(928, "Pi");
	Результат.Вставить(960, "pi");
	Результат.Вставить(982, "piv");
	Результат.Вставить(177, "plusmn");
	Результат.Вставить(163, "pound");
	Результат.Вставить(8243, "Prime");
	Результат.Вставить(8242, "prime");
	Результат.Вставить(8719, "prod");
	Результат.Вставить(8733, "prop");
	Результат.Вставить(968, "psi");
	Результат.Вставить(936, "Psi");
	Результат.Вставить(34, "quot");
	Результат.Вставить(8730, "radic");
	Результат.Вставить(9002, "rang");
	Результат.Вставить(187, "raquo");
	Результат.Вставить(8658, "rArr");
	Результат.Вставить(8594, "rarr");
	Результат.Вставить(8969, "rceil");
	Результат.Вставить(8221, "rdquo");
	Результат.Вставить(8476, "real");
	Результат.Вставить(174, "reg");
	Результат.Вставить(8971, "rfloor");
	Результат.Вставить(929, "Rho");
	Результат.Вставить(961, "rho");
	Результат.Вставить(8207, "rlm");
	Результат.Вставить(8250, "rsaquo");
	Результат.Вставить(8217, "rsquo");
	Результат.Вставить(8218, "sbquo");
	Результат.Вставить(352, "Scaron");
	Результат.Вставить(353, "scaron");
	Результат.Вставить(8901, "sdot");
	Результат.Вставить(167, "sect");
	Результат.Вставить(173, "shy");
	Результат.Вставить(931, "Sigma");
	Результат.Вставить(963, "sigma");
	Результат.Вставить(962, "sigmaf");
	Результат.Вставить(8764, "sim");
	Результат.Вставить(9824, "spades");
	Результат.Вставить(8834, "sub");
	Результат.Вставить(8838, "sube");
	Результат.Вставить(8721, "sum");
	Результат.Вставить(8835, "sup");
	Результат.Вставить(185, "sup1");
	Результат.Вставить(178, "sup2");
	Результат.Вставить(179, "sup3");
	Результат.Вставить(8839, "supe");
	Результат.Вставить(223, "szlig");
	Результат.Вставить(932, "Tau");
	Результат.Вставить(964, "tau");
	Результат.Вставить(8756, "there4");
	Результат.Вставить(920, "Theta");
	Результат.Вставить(952, "theta");
	Результат.Вставить(977, "thetasym");
	Результат.Вставить(8201, "thinsp");
	Результат.Вставить(222, "THORN");
	Результат.Вставить(254, "thorn");
	Результат.Вставить(732, "tilde");
	Результат.Вставить(215, "times");
	Результат.Вставить(8482, "trade");
	Результат.Вставить(250, "uacute");
	Результат.Вставить(218, "Uacute");
	Результат.Вставить(8657, "uArr");
	Результат.Вставить(8593, "uarr");
	Результат.Вставить(251, "ucirc");
	Результат.Вставить(219, "Ucirc");
	Результат.Вставить(217, "Ugrave");
	Результат.Вставить(249, "ugrave");
	Результат.Вставить(168, "uml");
	Результат.Вставить(978, "upsih");
	Результат.Вставить(965, "upsilon");
	Результат.Вставить(933, "Upsilon");
	Результат.Вставить(252, "uuml");
	Результат.Вставить(220, "Uuml");
	Результат.Вставить(8472, "weierp");
	Результат.Вставить(958, "xi");
	Результат.Вставить(926, "Xi");
	Результат.Вставить(253, "yacute");
	Результат.Вставить(221, "Yacute");
	Результат.Вставить(165, "yen");
	Результат.Вставить(255, "yuml");
	Результат.Вставить(376, "Yuml");
	Результат.Вставить(918, "Zeta");
	Результат.Вставить(950, "zeta");
	Результат.Вставить(8205, "zwj");
	Результат.Вставить(8204, "zwnj");
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие для обратной замены спецсимволов
Функция ПолучитьОбратноеСоответствиеСпецСимволов()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Aacute", 193);
	Результат.Вставить("aacute", 225);
	Результат.Вставить("acirc", 226);
	Результат.Вставить("Acirc", 194);
	Результат.Вставить("acute", 180);
	Результат.Вставить("aelig", 230);
	Результат.Вставить("AElig", 198);
	Результат.Вставить("Agrave", 192);
	Результат.Вставить("agrave", 224);
	Результат.Вставить("alefsym", 8501);
	Результат.Вставить("Alpha", 913);
	Результат.Вставить("alpha", 945);
	Результат.Вставить("and", 8743);
	Результат.Вставить("ang", 8736);
	Результат.Вставить("aring", 229);
	Результат.Вставить("Aring", 197);
	Результат.Вставить("asymp", 8776);
	Результат.Вставить("Atilde", 195);
	Результат.Вставить("atilde", 227);
	Результат.Вставить("Auml", 196);
	Результат.Вставить("auml", 228);
	Результат.Вставить("bdquo", 8222);
	Результат.Вставить("Beta", 914);
	Результат.Вставить("beta", 946);
	Результат.Вставить("brvbar", 166);
	Результат.Вставить("bull", 8226);
	Результат.Вставить("cap", 8745);
	Результат.Вставить("Ccedil", 199);
	Результат.Вставить("ccedil", 231);
	Результат.Вставить("cedil", 184);
	Результат.Вставить("cent", 162);
	Результат.Вставить("chi", 967);
	Результат.Вставить("Chi", 935);
	Результат.Вставить("circ", 710);
	Результат.Вставить("clubs", 9827);
	Результат.Вставить("cong", 8773);
	Результат.Вставить("copy", 169);
	Результат.Вставить("crarr", 8629);
	Результат.Вставить("cup", 8746);
	Результат.Вставить("curren", 164);
	Результат.Вставить("dagger", 8224);
	Результат.Вставить("Dagger", 8225);
	Результат.Вставить("dArr", 8659);
	Результат.Вставить("darr", 8595);
	Результат.Вставить("deg", 176);
	Результат.Вставить("Delta", 916);
	Результат.Вставить("delta", 948);
	Результат.Вставить("diams", 9830);
	Результат.Вставить("divide", 247);
	Результат.Вставить("eacute", 233);
	Результат.Вставить("Eacute", 201);
	Результат.Вставить("Ecirc", 202);
	Результат.Вставить("ecirc", 234);
	Результат.Вставить("egrave", 232);
	Результат.Вставить("Egrave", 200);
	Результат.Вставить("empty", 8709);
	Результат.Вставить("emsp", 8195);
	Результат.Вставить("ensp", 8194);
	Результат.Вставить("epsilon", 949);
	Результат.Вставить("Epsilon", 917);
	Результат.Вставить("equiv", 8801);
	Результат.Вставить("Eta", 919);
	Результат.Вставить("eta", 951);
	Результат.Вставить("eth", 240);
	Результат.Вставить("ETH", 208);
	Результат.Вставить("euml", 235);
	Результат.Вставить("Euml", 203);
	Результат.Вставить("euro", 8364);
	Результат.Вставить("exist", 8707);
	Результат.Вставить("fnof", 402);
	Результат.Вставить("forall", 8704);
	Результат.Вставить("frac12", 189);
	Результат.Вставить("frac14", 188);
	Результат.Вставить("frac34", 190);
	Результат.Вставить("frasl", 8260);
	Результат.Вставить("Gamma", 915);
	Результат.Вставить("gamma", 947);
	Результат.Вставить("ge", 8805);
	Результат.Вставить("gt", 62);
	Результат.Вставить("hArr", 8660);
	Результат.Вставить("harr", 8596);
	Результат.Вставить("hearts", 9829);
	Результат.Вставить("hellip", 8230);
	Результат.Вставить("iacute", 237);
	Результат.Вставить("Iacute", 205);
	Результат.Вставить("icirc", 238);
	Результат.Вставить("Icirc", 206);
	Результат.Вставить("iexcl", 161);
	Результат.Вставить("Igrave", 204);
	Результат.Вставить("igrave", 236);
	Результат.Вставить("image", 8465);
	Результат.Вставить("infin", 8734);
	Результат.Вставить("int", 8747);
	Результат.Вставить("Iota", 921);
	Результат.Вставить("iota", 953);
	Результат.Вставить("iquest", 191);
	Результат.Вставить("isin", 8712);
	Результат.Вставить("Iuml", 207);
	Результат.Вставить("iuml", 239);
	Результат.Вставить("Kappa", 922);
	Результат.Вставить("kappa", 954);
	Результат.Вставить("lambda", 955);
	Результат.Вставить("Lambda", 923);
	Результат.Вставить("lang", 9001);
	Результат.Вставить("laquo", 171);
	Результат.Вставить("larr", 8592);
	Результат.Вставить("lArr", 8656);
	Результат.Вставить("lceil", 8968);
	Результат.Вставить("ldquo", 8220);
	Результат.Вставить("le", 8804);
	Результат.Вставить("lfloor", 8970);
	Результат.Вставить("lowast", 8727);
	Результат.Вставить("loz", 9674);
	Результат.Вставить("lrm", 8206);
	Результат.Вставить("lsaquo", 8249);
	Результат.Вставить("lsquo", 8216);
	Результат.Вставить("lt", 60);
	Результат.Вставить("macr", 175);
	Результат.Вставить("mdash", 8212);
	Результат.Вставить("micro", 181);
	Результат.Вставить("middot", 183);
	Результат.Вставить("minus", 8722);
	Результат.Вставить("Mu", 924);
	Результат.Вставить("mu", 956);
	Результат.Вставить("nabla", 8711);
	Результат.Вставить("nbsp", 160);
	Результат.Вставить("ndash", 8211);
	Результат.Вставить("ne", 8800);
	Результат.Вставить("ni", 8715);
	Результат.Вставить("not", 172);
	Результат.Вставить("notin", 8713);
	Результат.Вставить("nsub", 8836);
	Результат.Вставить("ntilde", 241);
	Результат.Вставить("Ntilde", 209);
	Результат.Вставить("Nu", 925);
	Результат.Вставить("nu", 957);
	Результат.Вставить("oacute", 243);
	Результат.Вставить("Oacute", 211);
	Результат.Вставить("Ocirc", 212);
	Результат.Вставить("ocirc", 244);
	Результат.Вставить("OElig", 338);
	Результат.Вставить("oelig", 339);
	Результат.Вставить("ograve", 242);
	Результат.Вставить("Ograve", 210);
	Результат.Вставить("oline", 8254);
	Результат.Вставить("omega", 969);
	Результат.Вставить("Omega", 937);
	Результат.Вставить("Omicron", 927);
	Результат.Вставить("omicron", 959);
	Результат.Вставить("oplus", 8853);
	Результат.Вставить("or", 8744);
	Результат.Вставить("ordf", 170);
	Результат.Вставить("ordm", 186);
	Результат.Вставить("Oslash", 216);
	Результат.Вставить("oslash", 248);
	Результат.Вставить("Otilde", 213);
	Результат.Вставить("otilde", 245);
	Результат.Вставить("otimes", 8855);
	Результат.Вставить("Ouml", 214);
	Результат.Вставить("ouml", 246);
	Результат.Вставить("para", 182);
	Результат.Вставить("part", 8706);
	Результат.Вставить("permil", 8240);
	Результат.Вставить("perp", 8869);
	Результат.Вставить("phi", 966);
	Результат.Вставить("Phi", 934);
	Результат.Вставить("Pi", 928);
	Результат.Вставить("pi", 960);
	Результат.Вставить("piv", 982);
	Результат.Вставить("plusmn", 177);
	Результат.Вставить("pound", 163);
	Результат.Вставить("Prime", 8243);
	Результат.Вставить("prime", 8242);
	Результат.Вставить("prod", 8719);
	Результат.Вставить("prop", 8733);
	Результат.Вставить("psi", 968);
	Результат.Вставить("Psi", 936);
	Результат.Вставить("quot", 34);
	Результат.Вставить("radic", 8730);
	Результат.Вставить("rang", 9002);
	Результат.Вставить("raquo", 187);
	Результат.Вставить("rArr", 8658);
	Результат.Вставить("rarr", 8594);
	Результат.Вставить("rceil", 8969);
	Результат.Вставить("rdquo", 8221);
	Результат.Вставить("real", 8476);
	Результат.Вставить("reg", 174);
	Результат.Вставить("rfloor", 8971);
	Результат.Вставить("Rho", 929);
	Результат.Вставить("rho", 961);
	Результат.Вставить("rlm", 8207);
	Результат.Вставить("rsaquo", 8250);
	Результат.Вставить("rsquo", 8217);
	Результат.Вставить("sbquo", 8218);
	Результат.Вставить("Scaron", 352);
	Результат.Вставить("scaron", 353);
	Результат.Вставить("sdot", 8901);
	Результат.Вставить("sect", 167);
	Результат.Вставить("shy", 173);
	Результат.Вставить("Sigma", 931);
	Результат.Вставить("sigma", 963);
	Результат.Вставить("sigmaf", 962);
	Результат.Вставить("sim", 8764);
	Результат.Вставить("spades", 9824);
	Результат.Вставить("sub", 8834);
	Результат.Вставить("sube", 8838);
	Результат.Вставить("sum", 8721);
	Результат.Вставить("sup", 8835);
	Результат.Вставить("sup1", 185);
	Результат.Вставить("sup2", 178);
	Результат.Вставить("sup3", 179);
	Результат.Вставить("supe", 8839);
	Результат.Вставить("szlig", 223);
	Результат.Вставить("Tau", 932);
	Результат.Вставить("tau", 964);
	Результат.Вставить("there4", 8756);
	Результат.Вставить("Theta", 920);
	Результат.Вставить("theta", 952);
	Результат.Вставить("thetasym", 977);
	Результат.Вставить("thinsp", 8201);
	Результат.Вставить("THORN", 222);
	Результат.Вставить("thorn", 254);
	Результат.Вставить("tilde", 732);
	Результат.Вставить("times", 215);
	Результат.Вставить("trade", 8482);
	Результат.Вставить("uacute", 250);
	Результат.Вставить("Uacute", 218);
	Результат.Вставить("uArr", 8657);
	Результат.Вставить("uarr", 8593);
	Результат.Вставить("ucirc", 251);
	Результат.Вставить("Ucirc", 219);
	Результат.Вставить("Ugrave", 217);
	Результат.Вставить("ugrave", 249);
	Результат.Вставить("uml", 168);
	Результат.Вставить("upsih", 978);
	Результат.Вставить("upsilon", 965);
	Результат.Вставить("Upsilon", 933);
	Результат.Вставить("uuml", 252);
	Результат.Вставить("Uuml", 220);
	Результат.Вставить("weierp", 8472);
	Результат.Вставить("xi", 958);
	Результат.Вставить("Xi", 926);
	Результат.Вставить("yacute", 253);
	Результат.Вставить("Yacute", 221);
	Результат.Вставить("yen", 165);
	Результат.Вставить("yuml", 255);
	Результат.Вставить("Yuml", 376);
	Результат.Вставить("Zeta", 918);
	Результат.Вставить("zeta", 950);
	Результат.Вставить("zwj", 8205);
	Результат.Вставить("zwnj", 8204);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список допустимых в URI спецсимволов
Функция ДопустимыеВURIСпецСимволы()
	
	СписокДопустимыхСпецСимволов = Новый СписокЗначений;
	
	СписокДопустимыхСпецСимволов.Добавить("amp");
	СписокДопустимыхСпецСимволов.Добавить("quot");
	СписокДопустимыхСпецСимволов.Добавить("gt");
	СписокДопустимыхСпецСимволов.Добавить("lt");
	
	Возврат СписокДопустимыхСпецСимволов;
	
КонецФункции

// Возвращает список значимых в URI спецсимволов
Функция ЗначимыеВURIСпецСимволы()
	
	СписокДопустимыхСпецСимволов = Новый СписокЗначений;
	
	СписокДопустимыхСпецСимволов.Добавить("quot");
	
	Возврат СписокДопустимыхСпецСимволов;
	
КонецФункции

// Возвращает список ограничителей, используемых в URI
Функция СписокОграничителейURI()
	
	СписокОграничителейURI = Новый СписокЗначений;
	
	// Основные разделители
	СписокОграничителейURI.Добавить(":");
	СписокОграничителейURI.Добавить("?");
	СписокОграничителейURI.Добавить("#");
	СписокОграничителейURI.Добавить("[");
	СписокОграничителейURI.Добавить("]");
	СписокОграничителейURI.Добавить("@");
	
	// Побочные разделители
	СписокОграничителейURI.Добавить("!");
	СписокОграничителейURI.Добавить("$");
	СписокОграничителейURI.Добавить("&");
	СписокОграничителейURI.Добавить("'");
	СписокОграничителейURI.Добавить("(");
	СписокОграничителейURI.Добавить(")");
	СписокОграничителейURI.Добавить("*");
	СписокОграничителейURI.Добавить("+");
	СписокОграничителейURI.Добавить(",");
	СписокОграничителейURI.Добавить(";");
	СписокОграничителейURI.Добавить("=");
	
	// Не зарезервированные символы
	СписокОграничителейURI.Добавить("-");
	СписокОграничителейURI.Добавить(".");
	СписокОграничителейURI.Добавить("_");
	СписокОграничителейURI.Добавить("~");
	
	// Кодирующий символ
	СписокОграничителейURI.Добавить("%");
	
	// Дополнительный символ
	СписокОграничителейURI.Добавить("|");
	СписокОграничителейURI.Добавить("^");
	
	Возврат СписокОграничителейURI;
	
КонецФункции

// Список ограничителей HTML, которые могут стоять перед ссылкой
// > - закрытие какого-либо тега перед ссылкой.
Функция СписокДопустимыхВСсылкеТегов()
	
	СписокДопустимыхВСсылкеТегов = Новый СписокЗначений;
	
	СписокДопустимыхВСсылкеТегов.Добавить("FONT");
	СписокДопустимыхВСсылкеТегов.Добавить("SPAN");
	СписокДопустимыхВСсылкеТегов.Добавить("STRONG");
	СписокДопустимыхВСсылкеТегов.Добавить("EM");
	СписокДопустимыхВСсылкеТегов.Добавить("B");
	СписокДопустимыхВСсылкеТегов.Добавить("I");
	СписокДопустимыхВСсылкеТегов.Добавить("U");
	
	
	Возврат СписокДопустимыхВСсылкеТегов;
	
КонецФункции

// Возвращает соответствие открывающих скобок
Функция СоответствиеОткрывающихСкобок()
	
	СоответствиеОткрывающихСкобок = Новый Соответствие;
	
	СоответствиеОткрывающихСкобок.Вставить(")", "(");
	СоответствиеОткрывающихСкобок.Вставить("]", "[");
	СоответствиеОткрывающихСкобок.Вставить("}", "{");
	СоответствиеОткрывающихСкобок.Вставить("gt", "lt");
	
	Возврат СоответствиеОткрывающихСкобок;
	
КонецФункции

// Возвращает список закрывающих скобок
Функция СписокЗакрывающихСкобок()
	
	СписокСкобок = Новый СписокЗначений;
	
	СписокСкобок.Добавить(")");
	СписокСкобок.Добавить("]");
	СписокСкобок.Добавить("}");
	СписокСкобок.Добавить("gt");
	
	Возврат СписокСкобок;
	
КонецФункции

// Возвращает список открывающих скобок
Функция СписокОткрывающихСкобок()
	
	СписокСкобок = Новый СписокЗначений;
	
	СписокСкобок.Добавить("(");
	СписокСкобок.Добавить("[");
	СписокСкобок.Добавить("{");
	СписокСкобок.Добавить("lt");
	
	Возврат СписокСкобок;
	
КонецФункции

// Добавляет теги ко всем ссылкам, находящимся в строке.
// Обрабатываются следующие схемы обращения к ресурсу:
// http://, https://, ftp://, mailto:, file://, file:, e1c://, e1cib/
// Кроме того обрабатываются с использованием схемы http:// ссылки начинающиеся с www. без схемы.
// Строки размером 250000 больше  не обрабатываются.
Процедура ДобавитьТегиКСсылкам(ТекстHTML) Экспорт
	
	Если СтрДлина(ТекстHTML) > 250000 Тогда
		Возврат;
	КонецЕсли;
	
	// Ссылки со схемой
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "http://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "https://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "ftp://");
	
	// Ссылки без схемы
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "www.", "http://www.");
	
	// Навигационные ссылки
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1c://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1cib/", "v8doc:e1cib/");
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "file://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "\\", "file://\\");
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "mailto:");
	
	// Скорректировать ссылки со схемами e1c:// и v8doc:e1cib/
	СкорректироватьСсылки(ТекстHTML, "e1c://");
	СкорректироватьСсылки(ТекстHTML, "e1cib/", "v8doc:e1cib/");
	
	// Заполнить title у ссылок
	ЗаполнитьСвойствоTitleУСсылок(ТекстHTML);
	
КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке.
//
Процедура ДобавитьТегиКСсылкамСоСхемой(
	ТекстHTML,
	Схема,
	НовоеЗначениеСхемы = "")
	
	СхемаПоиска = НРег(Схема);
	ТекстHTMLПоиска = НРег(ТекстHTML);
	Длина = СтрДлина(ТекстHTML);
	
	НоваяСтрока = "";
	НазваниеЭлементаСсылки = "a";
	Смещение = 0;
	
	ЯвляетсяТегомЯкоря = Ложь;
	КонецТега = ">";
	ДлинаКонцаТега = СтрДлина(КонецТега);
	
	ЗакрывающийТегЯкоря = "</a>";
	ДлинаЗакрывающегоТегаЯкоря = СтрДлина(ЗакрывающийТегЯкоря);
	
	НачалоСсылки = НайтиПосле(ТекстHTMLПоиска, СхемаПоиска);
	СписокОграничителейURI = СписокОграничителейURI();
	
	Пока НачалоСсылки <> 0 Цикл
		
		// Проверять что позиция не в параметрах какого-либо тега
		Если ПозицияНаходитсяВПараметреТега(ТекстHTMLПоиска, НачалоСсылки, НазваниеЭлементаСсылки, ЯвляетсяТегомЯкоря) Тогда
			
			ПозицияОкончанияОткрывающегоТега = 0;
			
			Если ЯвляетсяТегомЯкоря Тогда
				
				// Если тег является якорем - ищем 
				ПозицияОкончанияОткрывающегоТега = НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаЗакрывающегоТегаЯкоря;
				ДлинаСмещения = ДлинаЗакрывающегоТегаЯкоря;
				
			КонецЕсли;
			
			Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
				
				ПозицияОкончанияОткрывающегоТега = НайтиПосле(ТекстHTMLПоиска, КонецТега, НачалоСсылки);
				
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					
					// Если нет окончания тега - не выделяем больше ссылок
					Прервать;
					
				КонецЕсли;
				
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаКонцаТега;
				ДлинаСмещения = ДлинаКонцаТега;
				
			КонецЕсли;
			
			// Если есть окончание тега - выделяем ссылки после тега
			Смещение = Смещение + (ПозицияОкончанияОткрывающегоТега - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияОкончанияОткрывающегоТега);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПозицияНаходитсяВТеге(ТекстHTMLПоиска, НазваниеЭлементаСсылки, НачалоСсылки) Тогда
			
			ПозицияЗакрывающегоТегаЯкоря = НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
			Если ПозицияЗакрывающегоТегаЯкоря = 0 Тогда
				
				// Если нет закрывающего "якорь" тега - не выделяем больше ссылок
				Прервать;
				
			КонецЕсли;
			
			ПозицияЗакрывающегоТегаЯкоря = ПозицияЗакрывающегоТегаЯкоря + ДлинаЗакрывающегоТегаЯкоря;
			// Если есть закрывающий "якорь" тег - выделяем ссылки после закрывающего тега
			Смещение = Смещение + (ПозицияЗакрывающегоТегаЯкоря - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияЗакрывающегоТегаЯкоря);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоСсылки = 1 Тогда
			
			СимволПередСсылкой = "";
			
		Иначе
			
			СимволПередСсылкой = Сред(ТекстHTMLПоиска, НачалоСсылки - 1, 1);
			
			Если СимволПередСсылкой = ";" Тогда
				ЗакодированныеКавычки = "&quot;";
				ДлинаКавычек = СтрДлина(ЗакодированныеКавычки);
				Если НачалоСсылки - ДлинаКавычек > 0 Тогда
					ВозможныеКавычки = Сред(ТекстHTMLПоиска, НачалоСсылки - ДлинаКавычек, ДлинаКавычек);
					Если ВозможныеКавычки = ЗакодированныеКавычки Тогда
						СимволПередСсылкой = ЗакодированныеКавычки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокОграничителейURI.НайтиПоЗначению(СимволПередСсылкой) <> Неопределено Тогда
				
				СимволПередСсылкой = "";
				
			ИначеЕсли СимволПередСсылкой = ">" Тогда
				
				// Тег перед ссылкой
				СимволПередСсылкой = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СимволПередСсылкой) Тогда
			
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки,
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		ИначеЕсли СимволПередСсылкой = """" ИЛИ СимволПередСсылкой = "&quot;" Тогда
			
			СимволКонцаСсылки = """";
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI, Истина, СимволКонцаСсылки);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки - СтрДлина(СимволПередСсылкой), // Включаем открывающие кавычки в ссылку
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение,
				Истина,
				СимволПередСсылкой,
				СимволКонцаСсылки);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Смещение = Смещение + НачалоСсылки;
		ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, НачалоСсылки + 1);
		НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает позицию конца ссылки в строке - первый незначащий символ
Функция НайтиКонецСсылки(ТекстHTML, НачальнаяПозиция, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, СимволКонцаСсылки = Неопределено)
	
	ДопустимыеВURIСпецСимволы = ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = ЗначимыеВURIСпецСимволы();
	ОбратноеСоответствиеСпецСимволов = ПолучитьОбратноеСоответствиеСпецСимволов();
	СписокДопустимыхВСсылкеТегов = СписокДопустимыхВСсылкеТегов();
	СписокОткрывающихСкобок = СписокОткрывающихСкобок();
	СписокЗакрывающихСкобок = СписокЗакрывающихСкобок();
	СоответствиеОткрывающихСкобок = СоответствиеОткрывающихСкобок();
	
	ОткрытыеСкобки = Новый Соответствие;
	Для Каждого ОткрывающаяСкобка Из СписокОткрывающихСкобок Цикл
		ОткрытыеСкобки[ОткрывающаяСкобка.Значение] = 0;
	КонецЦикла;
	
	НайденНезначащийСимвол = Ложь;
	ОбрабатываемаяСтрока = Сред(ТекстHTML, НачальнаяПозиция);
	ПоложениеПервогоНеЗначащегоСимвола = 0;
	
	Пока Не НайденНезначащийСимвол Цикл
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = СимволКонцаСсылки Тогда
			
			НайденНезначащийСимвол = Истина;
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Прервать;
			
		ИначеЕсли ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			СпецСимвол = ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол);
			Если СпецСимвол <> Неопределено И Символ(СпецСимвол) = СимволКонцаСсылки Тогда
				НайденНезначащийСимвол = Истина;
				СимволКонцаСсылки = "&" + ВозможныйСпецСимвол + ";";
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтрДлина(СимволКонцаСсылки);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если СписокЗакрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ВозможныйСпецСимвол];
				Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
					ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
					ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
				КонецЕсли;
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
				Продолжить;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ЕстьЗначимыйСимволДоКонцаСсылки = ЕстьЗначимыйСимволДоКонцаСсылки(
					ОбрабатываемаяСтрока,
					СписокНезначащихСимволов,
					РазрешитьПробелВСсылке,
					ДлинаВозможногоСпецСимвола + 2);
				
				Если ЕстьЗначимыйСимволДоКонцаСсылки Тогда
					
					Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
						ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
					КонецЕсли;
					
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			ИначеЕсли ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтруктураТега.ПозицияОкончанияОткрывающегоТега;
						Продолжить;
						
					Иначе
						
						ПервыйСимвол = "";
						
					КонецЕсли;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			Иначе
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СписокЗакрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ПервыйСимвол];
			Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
				ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено 
			И Не ЕстьЗначимыйСимволДоКонцаСсылки(ОбрабатываемаяСтрока, СписокНезначащихСимволов, РазрешитьПробелВСсылке) Тогда
			
			ПервыйСимвол = "";
			
		КонецЕсли;
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПервыйСимвол) Тогда
			
			НайденНезначащийСимвол = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СписокОткрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрытыеСкобки[ПервыйСимвол] = ОткрытыеСкобки[ПервыйСимвол] + 1;
		КонецЕсли;
		
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
		ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
		
	КонецЦикла;
	
	// Если не был найден не значащий символ - все равно возвращаем позицию конца строки.
	Возврат НачальнаяПозиция + ПоложениеПервогоНеЗначащегоСимвола;
	
КонецФункции

// Добавляет тег в конкретную позицию. Меняет значение Строка и Смещение.
Процедура ДобавитьТегСсылки(
	Строка,
	НачальнаяПозиция,
	КонечнаяПозиция,
	Схема,
	НовоеЗначениеСхемы,
	Смещение,
	ОбрезатьГраничныеСимволыСсылки = Ложь,
	СимволПередСсылкой = "",
	СимволКонцаСсылки = "")
	
	НачалоСтроки = Лев(Строка, Смещение + НачальнаяПозиция - 1);
	
	// Обрезание граничных символов
	Если ОбрезатьГраничныеСимволыСсылки Тогда
		Ссылка = Сред(Строка,
			Смещение + НачальнаяПозиция + СтрДлина(СимволПередСсылкой),
			КонечнаяПозиция - НачальнаяПозиция - СтрДлина(СимволПередСсылкой) - СтрДлина(СимволКонцаСсылки));
	Иначе
		Ссылка = Сред(Строка, Смещение + НачальнаяПозиция, КонечнаяПозиция - НачальнаяПозиция);
	КонецЕсли;
	
	КонецСтроки = Прав(Строка, СтрДлина(Строка) - (Смещение + КонечнаяПозиция - 1));
	
	СсылкаСТегом = СформироватьСсылкуСТегом(Ссылка, Схема, НовоеЗначениеСхемы);
	
	Строка = НачалоСтроки + СсылкаСТегом + КонецСтроки;
	Смещение = СтрДлина(НачалоСтроки + СсылкаСТегом) + 1;
	
КонецПроцедуры

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

// Возвращает HTML код внутренней ссылки на предмет
Функция ПолучитьСсылкуНаПредмет(Предмет) Экспорт
	
	СсылкаНаПредмет = "";
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат СсылкаНаПредмет;
	КонецЕсли;
	
	ПредставлениеСсылки = РаботаСРабочимКалендаремВызовСервера.ПолучитьПредставлениеПредмета(Предмет);
	
	Если ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
		НавигационнаяСсылка = "v8doc:" + ПолучитьНавигационнуюСсылку(Предмет);
		СсылкаНаПредмет =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=""%1"">%2</a>",
				НавигационнаяСсылка, ПредставлениеСсылки);
	КонецЕсли;
	
	Возврат СсылкаНаПредмет;
	
КонецФункции

// Ищет подстроку в строке, после указанной позиции
//
Функция НайтиПосле(Строка, Подстрока, НачальнаяПозиция = 0)
	
	Если СтрДлина(Строка) <= НачальнаяПозиция Тогда
		Возврат 0;
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, Подстрока, НаправлениеПоиска.СНачала, НачальнаяПозиция + 1);
	Возврат Позиция;
	
КонецФункции

// Заменяет в строке все спецсимволы на соответствующие им имена,
// возвращает измененную строку.
//
Функция ЗаменитьСпецСимволыHTML(Строка, СпецСимволыСоотв = Неопределено) Экспорт
	
	СоответствиеСпецСимволов = ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	НоваяСтрока = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, Поз);
		ИмяСимвола = СоответствиеСпецСимволов.Получить(Код);
		
		Если ИмяСимвола = Неопределено Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код);
		Иначе
			НоваяСтрока = НоваяСтрока + "&" + ИмяСимвола + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Строка = НоваяСтрока;
	
	Возврат Строка;
	
КонецФункции

// Корректирует ссылки по схеме - если ссылка и ее представление не совпадает,
// то выполняет пересоздание ссылки только в параметром href.
Процедура СкорректироватьСсылки(ТекстHTML, Схема, НовоеЗначениеСхемы = "")
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Href = ПолучитьЗначениеПараметраТега(Тег, "href");
		
		Если ЗначениеЗаполнено(НовоеЗначениеСхемы) Тогда
			
			// Проверка соответствует ли href новой схеме
			Если Не СсылкаСоответствуетСхеме(Href, НовоеЗначениеСхемы)
				Или Не СсылкаСоответствуетСхеме(Тег.Содержание, Схема) Тогда
				Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
				Продолжить;
			КонецЕсли;
			
			// Проверка совпадает ли содержание ссылки с href
			МодификацияСхемы = СтрЗаменить(НовоеЗначениеСхемы, Схема, "");
			Если Href = МодификацияСхемы + Тег.Содержание Тогда
				Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			// Проверка соответствует ли href и содержание схеме
			Если Не СсылкаСоответствуетСхеме(Href, Схема)
				Или Не СсылкаСоответствуетСхеме(Тег.Содержание, Схема) Тогда
				Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
				Продолжить;
			КонецЕсли;
			
			// Проверка совпадает ли содержание ссылки с href
			Если Href = Тег.Содержание Тогда
				Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НачалоСтроки = Лев(ТекстHTML, Тег.ПозицияНачалаТега - 1);
		КонецСтроки = Сред(ТекстHTML, Тег.ПозицияОкончанияТега + 1);
		СсылкаСТегом = СформироватьСсылкуСТегом(Тег.Содержание, Схема, НовоеЗначениеСхемы);
		
		ТекстHTML = НачалоСтроки + СсылкаСТегом + КонецСтроки;
		
		ДобавленныйТег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияНачалаТега);
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", ДобавленныйТег.ПозицияОкончанияОткрывающегоТега + 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Дописывать значение из href в свойство title ссылок и картинок.
Процедура ЗаполнитьСвойствоTitleУСсылок(ТекстHTML)
	
	ТекстBase = ОпределитьBase(ТекстHTML);
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		
		// Считаем ссылку относительной, если в ней нет символа ":"
		Если ТекстBase <> "" И СтрНайти(ТекстHref, ":") = 0 Тогда
			
			Если (Лев(ТекстHref, 1) <> "\" И Лев(ТекстHref, 1) <> "/")
				И (Прав(ТекстBase, 1) <> "\" И Прав(ТекстBase, 1) <> "/") Тогда
				
				// Нет "/" в тексте ссылки и Base
				ТекстHref = "/" + ТекстHref;
				
			ИначеЕсли (Лев(ТекстHref, 1) = "\" ИЛИ Лев(ТекстHref, 1) = "/")
				И (Прав(ТекстBase, 1) = "\" ИЛИ Прав(ТекстBase, 1) = "/") Тогда
				
				// Есть "/" в тексте ссылки и Base
				ТекстHref = Сред(ТекстHref, 2);
				
			КонецЕсли;
			
			ТекстHref = ТекстBase + ТекстHref;
			
		КонецЕсли;
		
		
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				КонецЕсли;
			КонецЕсли;
			
			Если СимволОграниченияTitle = "" Тогда
				ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
				ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				СимволОграниченияTitle = """";
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		ВнешнийТегСсылки = Неопределено;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		Если НЕ ПозицияНаходитсяВТеге(ТекстHTML, "a", Тег.ПозицияНачалаТега, ВнешнийТегСсылки) Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(ВнешнийТегСсылки, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстHref, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли СтрНайти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияОткрывающегоТега + Смещение + 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет нахождение внутри параметров открывающего тега (возможно, который не закрыт).
Функция ПозицияНаходитсяВПараметреТега(ТекстHTML, Позиция, НужныйТег = "", ЯвляетсяНужнымТегом = Ложь)
	
	НачалоТега = "<";
	КонецТега = ">";
	ОткрытТег = Ложь;
	ЯвляетсяНужнымТегом = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		ПервыйСимволНазванияТега = Сред(НачалоТекстаHTML, 1, 1);
		
		Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
			
			ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, КонецТега);
			Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
				
				// Пропускаем содержимое открытых тегов для корректного определения является ли тег нужным
				// Например: "<a <test " - открыт тег a; "<test <a " - открыт тег test.
				НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
				
			Иначе
				
				ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + " ");
				Если ПозицияНужногоТега = 0 Тогда
					ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + ">");
				КонецЕсли;
				
				Если ПозицияНужногоТега = 1 Тогда
					ЯвляетсяНужнымТегом = Истина;
				КонецЕсли;
				
				ОткрытТег = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
		
	КонецЦикла;
	
	Возврат ОткрытТег;
	
КонецФункции

// Возвращает спецсимвол HTML (&СпецСимвол;), если он присутствует.
// Возвращает Неопределено, если нет возможных спецсимволов.
Функция ПолучитьВозможныйСпецСимвол(Строка, ПозицияСпецСимвола = 0)
	
	ОбрабатываемаяСтрока = Сред(Строка, ПозицияСпецСимвола + 1);
	ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
	
	Если ПервыйСимвол = "&" Тогда
		
		КонецСпецСимвола = СтрНайти(ОбрабатываемаяСтрока, ";");
		
		Если КонецСпецСимвола <> 0 Тогда
			
			СпецСимвол = Сред(ОбрабатываемаяСтрока, 2, КонецСпецСимвола - 2);
			
			Возврат СпецСимвол;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру первого тега данного элемента в тексте HTML.
// Если не указано название элемента то возвращает первый встреченный тег.
// Поиск тега ведется с переданной начальной позиции
//  Структура тега: 
//		НазваниеЭлемента - название элемента найденного тега
//		ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега
//		Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом
//		ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега
//		ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега
//		ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега
//		ПозицияНачалаТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега
//							   если нет закрывающего тега, то позиция символа ">" открывающего тега.
//
Функция ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1)
	
	// Определение первого тега
	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда
		
		НачалоОткрывающегоТега = "<";
		НазваниеТега = "";
		
		ОбрабатываемыйТекстHTML = ТекстHTML;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
			
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
			
			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;
				
				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл
					
					НазваниеТега = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
					
				КонецЦикла;
				
				ПозицияНачалаОткрывающегоТега = 0;
				
			Иначе
				
				ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НазваниеТега) Тогда
			
			НазваниеЭлемента = НазваниеТега;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазваниеЭлемента = "blockquote" Тогда
		РазрешитьВложенныеТеги = Истина;
	Иначе
		РазрешитьВложенныеТеги = Ложь;
	КонецЕсли;
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега = ">";
	ЗакрывающийТег = "</" + НРег(НазваниеЭлемента) + ">";
	ОбрабатываемыйТекстHTML = НРег(Сред(ТекстHTML, НачальнаяПозиция));
	Смещение = НачальнаяПозиция - 1;
	
	СтруктураТега = СформироватьСтруктуруТега();
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	ПозицияНачалаОткрывающегоТега = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	Если ПозицияНачалаОткрывающегоТега = 0 Тогда
		// Если нет начала открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
	Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;
	
	ПозицияОкончанияОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
	Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
		// Если нет окончания открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
	Смещение = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
	
	Если РазрешитьВложенныеТеги Тогда
		
		ПозицияНачалаЗакрывающегоТега = 0;
		КоличествоОткрытыхТегов = 1;
		Пока КоличествоОткрытыхТегов > 0 Цикл
			
			БлижайшийЗакрывающийТег = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
			Если БлижайшийЗакрывающийТег = 0 Тогда
				// Нет больше тегов.
				Прервать;
			КонецЕсли;
			
			БлижайшийОткрывающийТег = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
			Если БлижайшийОткрывающийТег = 0 Или БлижайшийЗакрывающийТег < БлижайшийОткрывающийТег Тогда
				
				// Найден закрывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов - 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег) - 1;
				
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег));
				
			Иначе
				
				// Найден открывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов + 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега));
				
				БлижайшееОкончаниеОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					// Если нет окончания открывающего тега, то тега нет
					Прервать;
				КонецЕсли;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОткрытыхТегов <> 0 Тогда
			ПозицияНачалаЗакрывающегоТега = 0;
		Иначе
			ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега - СтрДлина(ЗакрывающийТег) + 1;
		КонецЕсли;
		
	Иначе
		
		ПозицияНачалаЗакрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		
	КонецЕсли;
	
	// Заполнение позиций в тексте HTML и содержания.
	ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
	ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	Иначе
		Содержание = "";
		ПозицияОкончанияЗакрывающегоТега = 0;
	КонецЕсли;
	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	Иначе
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;
	
	// Заполнение структуры тега
	СтруктураТега.ПараметрыОткрывающегоТега = ПараметрыОткрывающегоТега;
	СтруктураТега.Содержание = Содержание;
	СтруктураТега.ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега;
	СтруктураТега.ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега;
	СтруктураТега.ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега;
	СтруктураТега.ПозицияОкончанияЗакрывающегоТега = ПозицияОкончанияЗакрывающегоТега;
	СтруктураТега.ПозицияНачалаТега = ПозицияНачалаТега;
	СтруктураТега.ПозицияОкончанияТега = ПозицияОкончанияТега;
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	Возврат СтруктураТега;
	
КонецФункции

// Проверяет нахождение переданной позиции внутри тега (в параметрах или содержании)
// Если тег не закрыт, то проверяет только в параметрах тега.
Функция ПозицияНаходитсяВТеге(ТекстHTML, НазваниеЭлемента, Позиция, Тег = Неопределено)
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	ДлинаОткрывающегоТега = СтрДлина(НачалоОткрывающегоТега);
	
	ПозицияНаходитсяВТеге = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		НайденнаяПозицияНачалаОткрывающегоТега =
			НайденнаяПозицияНачалаОткрывающегоТега
			+ ПозицияОкончанияОткрывающегоТега
			+ ПозицияНачалаОткрывающегоТега;
		
		ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, ">");
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			
			НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
		
	КонецЦикла;
	
	Если НайденнаяПозицияНачалаОткрывающегоТега <> 0 Тогда
		
		// Если есть незакрытый открывающий тег до искомой позиции, ищем тег в исходном тексте HTML.
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента, НайденнаяПозицияНачалаОткрывающегоТега);
		
		Если ЗаполненаСтруктураТега(Тег) Тогда
			
			Если Позиция > Тег.ПозицияНачалаТега И Позиция < Тег.ПозицияОкончанияТега Тогда
				
				ПозицияНаходитсяВТеге = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПозицияНаходитсяВТеге;
	
КонецФункции

// Проверяет наличие значащего символа до конца ссылки. 
// Концом ссылки считаются стандартные незначащие символы.
Функция ЕстьЗначимыйСимволДоКонцаСсылки(Строка, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, НачальнаяПозиция = 0)
	
	ОбратноеСоответствиеСпецСимволов = ПолучитьОбратноеСоответствиеСпецСимволов();
	ДопустимыеВURIСпецСимволы = ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = ЗначимыеВURIСпецСимволы();
	СписокДопустимыхВСсылкеТегов = СписокДопустимыхВСсылкеТегов();
	
	ОбрабатываемаяСтрока = Сред(Строка, НачальнаяПозиция + 1);
	НайденЗначащийСимвол = Ложь;
	
	Итерация = 0;
	ГлубинаАнализа = 50;
	Пока Не НайденЗначащийСимвол Цикл
		
		Итерация = Итерация + 1;
		Если Итерация > ГлубинаАнализа Тогда
			Прервать;
		КонецЕсли;
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		ИначеЕсли ПустаяСтрока(ПервыйСимвол) Тогда
			
			Прервать;
			
		ИначеЕсли ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				НайденЗначащийСимвол = Истина;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено
				ИЛИ ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				
			Иначе
				
				НайденЗначащийСимвол = Истина;
				
			КонецЕсли;
			
			
		ИначеЕсли ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						Продолжить;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		Иначе
			
			НайденЗначащийСимвол = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденЗначащийСимвол;
	
КонецФункции

// Проверяет заполненность структуры тега: 
// - наличие всех необходимых тегу свойств в структуре;
// - заполненность позиции начала и окончания тега.
Функция ЗаполненаСтруктураТега(СтруктураТега)
	
	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		ИЛИ (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("Содержание"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие название элемента тега в списке значений
Функция ТегСодержитсяВСписке(СтруктураТега, СписокЗначений)
	
	Если Не ЗаполненаСтруктураТега(СтруктураТега) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НазваниеЭлемента = НРег(СтруктураТега.НазваниеЭлемента);
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		
		ЗначениеЭлементаСписка = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлементаСписка) = Тип("Строка") Тогда
			
			ЗначениеЭлементаСписка = НРег(ЗначениеЭлементаСписка);
			ЗначениеЗакрывающегоЭлементаСписка = "/" + ЗначениеЭлементаСписка;
			
			Если НазваниеЭлемента = ЗначениеЭлементаСписка
				ИЛИ НазваниеЭлемента = ЗначениеЗакрывающегоЭлементаСписка Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Формирует текстовое представление ссылки с тегом
Функция СформироватьСсылкуСТегом(Ссылка, Схема, НовоеЗначениеСхемы)
	
	ПредставлениеСсылки = Ссылка;
	// Если ссылка совпадает со схемой, то выделять ссылку нет необходимости.
	Если Ссылка = Схема Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Замены схемы в ссылке при необходимости, например "www." => "http://www."
	Если ЗначениеЗаполнено(НовоеЗначениеСхемы) И СсылкаСоответствуетСхеме(Ссылка, Схема) Тогда
		Ссылка = НовоеЗначениеСхемы + Сред(Ссылка, СтрДлина(Схема) + 1);
	КонецЕсли;
	
	// Удаление тегов из ссылки
	ПозицияНачалаОткрывающегоТега = НайтиПосле(Ссылка, "<");
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		СтруктураТега = ПолучитьТегВТекстеHTML(Ссылка, , ПозицияНачалаОткрывающегоТега);
		Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
			
			Ссылка = Лев(Ссылка, СтруктураТега.ПозицияНачалаОткрывающегоТега - 1) + Сред(Ссылка, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега - 1;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = НайтиПосле(Ссылка, "<", ПозицияНачалаОткрывающегоТега);
		
	КонецЦикла;
	
	Если Не СтрНайти(Ссылка, """") Тогда
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	ИначеЕсли Не СтрНайти(Ссылка, "'") Тогда
		СсылкаСТегом = "<a href='" + Ссылка + "'>" + ПредставлениеСсылки + "</a>";
	Иначе
		ЗаменитьСпецСимволыHTMLОбратно(Ссылка);
		ЗаменитьСпецСимволыHTML(Ссылка);
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	КонецЕсли;
	
	Возврат СсылкаСТегом;
	
КонецФункции

// Возвращает значение свойства параметра тега
Функция ПолучитьЗначениеПараметраТега(Тег, Параметр,
	СимволОграничения = Неопределено, НачалоПараметра = Неопределено, КонецПараметра = Неопределено)
	
	Если НЕ ЗаполненаСтруктураТега(Тег) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДляПоиска = НРег(Тег.ПараметрыОткрывающегоТега);
	ПараметрДляПоиска = НРег(" " + Параметр);
	
	ПозицияПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска);
	Если ПозицияПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=""");
	Если НачалоПараметра <> 0 Тогда
		СимволОграничения = """";
	Иначе
		НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "='");
		Если НачалоПараметра <> 0 Тогда
			СимволОграничения = "'";
		Иначе
			НачалоПараметра = СтрНайти(ПараметрыДляПоиска, ПараметрДляПоиска + "=");
			Если НачалоПараметра <> 0 Тогда
				СимволОграничения = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НачалоПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	НачалоПараметра = НачалоПараметра + 1;
	
	Если СимволОграничения = "" Тогда
		ЗакрывающийСимволОграничения = " ";
		КонецПараметра = НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			ЗакрывающийСимволОграничения = Символы.ПС;
			КонецПараметра = НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
				НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
			Если КонецПараметра = 0 Тогда
				КонецПараметра = СтрДлина(ПараметрыДляПоиска) + 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонецПараметра = НайтиПосле(ПараметрыДляПоиска, СимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если КонецПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПараметраТега = Сред(Тег.ПараметрыОткрывающегоТега, НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения),
		КонецПараметра - (НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения)));
	
	Возврат ЗначениеПараметраТега;
	
КонецФункции

// Проверяет соответствие ссылки схеме.
Функция СсылкаСоответствуетСхеме(Ссылка, Схема)
	
	ДлинаСхемы = СтрДлина(Схема);
	СхемаВСсылке = Лев(Ссылка, ДлинаСхемы);
	
	Возврат НРег(Схема) = НРег(СхемаВСсылке);
	
КонецФункции

// Для отображения подсказки к относительным ссылкам используется упрощенный
// метод определения относительной ссылки и работы с тегом BASE, для самых частотных случаев.
// Ссылка считается относительной, если в ней не присутствует ":".
// К представлению относительных ссылок дописывается текст тега Base.
Функция ОпределитьBase(ТекстHTML)
	
	ТегBody = ПолучитьТегВТекстеHTML(ТекстHTML, "body");
	ТегBase = ПолучитьТегВТекстеHTML(ТекстHTML, "base");
	ТекстBase = ПолучитьЗначениеПараметраТега(ТегBase, "href");
	Если ТекстBase = Неопределено
		ИЛИ (ЗаполненаСтруктураТега(ТегBody) И ТегBase.ПозицияОкончанияТега > ТегBody.ПозицияНачалаТега) Тогда
		ТекстBase = "";
	КонецЕсли;
	
	Возврат ТекстBase;
	
КонецФункции

// Формирует пустую структуру тега
//
// Возвращаемое значение:
//  Структура - НазваниеЭлемента - Строка - имя тега
//            - ПараметрыОткрывающегоТега - Строка - параметры тега
//            - Содержание - Строка - текстовое содержимое тега
//            - ПозицияНачалаОткрывающегоТега - Число - позиция символа "<" открывающего тега
//            - ПозицияНачалаОткрывающегоТега - Число - позиция символа ">" открывающего тега
//            - ПозицияНачалаЗакрывающегоТега - Число - позиция символа "<" закрывающего тега.
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияОкончанияЗакрывающегоТега - Число - Позиция символа ">" открывающего тега
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияНачалаТега - Число - позиция символа "<" открывающего тега
//            - ПозицияОкончанияТега - Число - позиция символа ">" закрывающего тега. Если нет 
//                                             закрывающего тега, то содержит позицию символа ">"
//                                             открывающего тега.
//
Функция СформироватьСтруктуруТега()
	
	Тег = Новый Структура;
	Тег.Вставить("НазваниеЭлемента", "");
	Тег.Вставить("ПараметрыОткрывающегоТега", "");
	Тег.Вставить("Содержание", "");
	Тег.Вставить("ПозицияНачалаОткрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияОткрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаТега", 0);
	Тег.Вставить("ПозицияОкончанияТега", 0);
	
	Возврат Тег;
	
КонецФункции

// Определяет позицию открывающего тега в переданном тексте
Функция ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега)
	
	ПозицияНачалаОткрывающегоТега = 0;
	
	ВозможнаяПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	СледующийСимвол = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 1);
	
	Если СледующийСимвол = " " Или СледующийСимвол = Символы.ПС Или СледующийСимвол = ">" Тогда
		ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
	ИначеЕсли СледующийСимвол = "/" Тогда
		СледующиеДваСимвола = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 2);
		Если СледующиеДваСимвола = "/>" Тогда
			ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПозицияНачалаОткрывающегоТега;
	
КонецФункции

// Заменяет в строке все имена спецсимволов на соответствующие им спецсимволы,
// возвращает измененную строку.
Функция ЗаменитьСпецСимволыHTMLОбратно(Строка, СпецСимволыСоотв = Неопределено)
	
	ОбратноеСоответствиеСпецСимволов = ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTMLОбратно(Строка, 38, "amp");
	
	Для Каждого СпецСимвол Из ОбратноеСоответствиеСпецСимволов Цикл
		ЗаменитьСпецСимволHTMLОбратно(Строка, СпецСимвол.Ключ, СпецСимвол.Значение);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTMLОбратно(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, "&" + ИмяСимвола + ";", Символ(КодСимвола));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти