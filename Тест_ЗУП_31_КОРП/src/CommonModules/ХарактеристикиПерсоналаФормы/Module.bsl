
#Область ПрограммныйИнтерфейс

// Заполняет из таблицы характеристик персонала две связанные таблицы с характеристиками персонала и их значениями.
//
// Параметры:
//  ХарактеристикиПерсоналаОбъект - ДанныеФормыКоллекция - таблица характеристик персонала, по которой заполняются другие
//                                                         таблицы.
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица, которая заполняется характеристиками персонала.
//  ТаблицаЗначений - ДанныеФормыКоллекция - таблица, которая заполняется значениями характеристик персонала.
//
Процедура ПрочитатьХарактеристикиВТаблицы(ХарактеристикиПерсоналаОбъект, ТаблицаХарактеристик, ТаблицаЗначений) Экспорт
	
	ТаблицаХарактеристик.Очистить();
	ТаблицаЗначений.Очистить();
	
	ТЗХарактеристик = ХарактеристикиПерсоналаОбъект.Выгрузить();
	СвернутьТаблицуЗначенийХарактеристик(ТЗХарактеристик);
	
	Для Каждого ТекущаяСтрока Из ТЗХарактеристик Цикл
		
		НоваяСтрока = ТаблицаХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		// Заполним значения характеристики.
		СтрокиЗначений = ХарактеристикиПерсоналаОбъект.НайтиСтроки(Новый Структура("Характеристика", ТекущаяСтрока.Характеристика));
		Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
			НоваяСтрокаЗначения = ТаблицаЗначений.Добавить();
			НоваяСтрокаЗначения.Характеристика = ТекущаяСтрока.Характеристика;
			УстановитьСвойствоРеквизита(НоваяСтрокаЗначения, СтрокаЗначения, "Значение");
			УстановитьСвойствоРеквизита(НоваяСтрокаЗначения, СтрокаЗначения, "ВесЗначения");
		КонецЦикла;
		
		// Заполним ЗначенияСтрокой
		Если НоваяСтрока.Свойство("ЗначенияСтрокой") Тогда
			НоваяСтрока.ЗначенияСтрокой = ХарактеристикиПерсоналаКлиентСервер.ЗначенияСтрокой(ТаблицаЗначений, ТекущаяСтрока.Характеристика);
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(ТаблицаХарактеристик);
	
КонецПроцедуры

// Переносит характеристики персонала и их значения из таблиц форм в табличную часть объектов.
//
// Параметры:
//  - ТабличнаяЧастьОбъекта - Табличная часть - табличная часть ХарактеристикиПерсонала справочника или документа.
//  - Характеристики - ДанныеФормыКоллекция - таблица с характеристиками персонала.
//  - ЗначенияХарактеристики - ДанныеФормыКоллекция - таблица со значениями характеристик персонала.
//
Процедура ПеренестиХарактеристикиВТабличнуюЧасть(ТабличнаяЧастьОбъекта, Характеристики, ЗначенияХарактеристики) Экспорт
	
	ТабличнаяЧастьОбъекта.Очистить();
	Для Каждого СтрокаХарактеристик Из Характеристики Цикл
		СтрокиЗначений = ЗначенияХарактеристики.НайтиСтроки(Новый Структура("Характеристика", СтрокаХарактеристик.Характеристика));
		Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
			НоваяСтрока = ТабличнаяЧастьОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХарактеристик);
			УстановитьСвойствоРеквизита(НоваяСтрока, СтрокаЗначения, "Значение");
			УстановитьСвойствоРеквизита(НоваяСтрока, СтрокаЗначения, "ВесЗначения");
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

// Заполняет реквизиты "КартинкаВида" и "ВидХарактеристики" в строках переданной таблицы.
//
// Параметры:
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица с характеристиками персонала.
//  ТаблицаЗначений - ДанныеФормыКоллекция - таблица со значениями характеристик персонала.
//
Процедура ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(ТаблицаХарактеристик, ТаблицаЗначений = Неопределено) Экспорт

	ЗаполнитьВторичныеРеквизитыТаблицыХарактеристик("ВидХарактеристики,КартинкаВида", ТаблицаХарактеристик, ТаблицаЗначений);

КонецПроцедуры

// Заполняет вторичные реквизиты в строках переданной таблицы
//
// Параметры:
//	СтрокаПолей - Строка - содержит имена реквизитов, которые необходимо заполнить.
// 		Пример - "ВидХарактеристики,КартинкаВида"
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица с характеристиками персонала.
//  ТаблицаЗначений - ДанныеФормыКоллекция - таблица со значениями характеристик персонала.
//
Процедура ЗаполнитьВторичныеРеквизитыТаблицыХарактеристик(СтрокаПолей, ТаблицаХарактеристик, ТаблицаЗначений = Неопределено) Экспорт

	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаПолей, ",");
	
	Если МассивПолей.Найти("ВидХарактеристики") <> Неопределено  Тогда
		МассивХарактеристик = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаХарактеристик, "Характеристика");
		СоответствиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивХарактеристик, "ВидХарактеристики");
	КонецЕсли;
	
	Для каждого СтрокаХарактеристики Из ТаблицаХарактеристик Цикл
		Если МассивПолей.Найти("ВидХарактеристики") <> Неопределено Тогда
			СтрокаХарактеристики.ВидХарактеристики = СоответствиеХарактеристик[СтрокаХарактеристики.Характеристика];
			Если МассивПолей.Найти("КартинкаВида") <> Неопределено Тогда
				СтрокаХарактеристики.КартинкаВида = ХарактеристикиПерсонала.КартинкаВидаХарактеристики(СтрокаХарактеристики.ВидХарактеристики);
			КонецЕсли;
		КонецЕсли;
		Если МассивПолей.Найти("ЗначенияСтрокой") <> Неопределено Тогда
			СтрокаХарактеристики.ЗначенияСтрокой = ХарактеристикиПерсоналаКлиентСервер.ЗначенияСтрокой(ТаблицаЗначений, СтрокаХарактеристики.Характеристика);
		КонецЕсли;
	КонецЦикла; 	

КонецПроцедуры

// Добавляет выбранные характеристики в табличные части.
// Вызывается после завершения добавления или подбора характеристик.
//
// Параметры:
//	- Форма - Форма - форма, в которую добавляются характеристики.
//  - НовыеХарактеристики - Массив структур - добавляемые характеристики со значениями.
//  - ДополнительныеПараметры - Структура.
//	- ИмяРеквизитаТаблицыХарактеристик - Строка - имя реквизита формы, содержащего таблицу характеристик.
//	- ИмяРеквизитаТаблицыЗначений - Строка - имя реквизита формы, содержащего таблицу значений характеристик.
//	- СтруктураЗначенийПоУмолчанию - Структура - значения заполнения для новой строки характеристик.
//
Процедура ДобавитьХарактеристикиВТабличнуюЧасть(Форма, НовыеХарактеристики, ДополнительныеПараметры, ИмяРеквизитаТаблицыХарактеристик = "Характеристики", ИмяРеквизитаТаблицыЗначений = "ЗначенияХарактеристики", СтруктураЗначенийПоУмолчанию = Неопределено) Экспорт 

	ДобавлятьЗначенияХарактеристик = ДополнительныеПараметры.ДобавлятьЗначенияХарактеристик;
	СтруктураЗначенийПоУмолчанию = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СтруктураЗначенийПоУмолчанию");
	
	ТаблицаХарактеристик = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаТаблицыХарактеристик);
	
	Если ДобавлятьЗначенияХарактеристик Тогда
		ТаблицаЗначений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаТаблицыЗначений);
		ДобавитьХарактеристикиСоЗначениями(ТаблицаХарактеристик, ТаблицаЗначений, НовыеХарактеристики);
	Иначе
		ДобавитьХарактеристики(ТаблицаХарактеристик, НовыеХарактеристики, СтруктураЗначенийПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

// Добавляет характеристики персонала и их значения в таблицы.
//
// Параметры:
//  - ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица, в которую добавляются характеристики персонала.
//  - НовыеХарактеристики - Массив,
//		- либо массив характеристик персонала.
//		- либо массив структур со свойствами добавляемых строк характеристик персонала.
//  - СтруктураЗначенийПоУмолчанию - Структура - структура со значениями реквизитов строки по умолчанию.
//
Процедура ДобавитьХарактеристики(ТаблицаХарактеристик, НовыеХарактеристики, СтруктураЗначенийПоУмолчанию) Экспорт
	
	Для каждого ТекущаяСтрока Из НовыеХарактеристики Цикл
		Если ТипЗнч(ТекущаяСтрока) = Тип("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала") Тогда
			Характеристика = ТекущаяСтрока;
		Иначе
			Характеристика = ТекущаяСтрока.Характеристика
		КонецЕсли;
		НайденныеСтроки = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("Характеристика", Характеристика));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаХарактеристик.Добавить();
		Если СтруктураЗначенийПоУмолчанию <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗначенийПоУмолчанию);
		КонецЕсли;
		НоваяСтрока.Характеристика = Характеристика;
	КонецЦикла;
	
	ЗаполнитьКартинкуИВидХарактеристикиТаблицыХарактеристик(ТаблицаХарактеристик);
	
КонецПроцедуры

// Добавляет характеристики персонала и их значения в таблицы.
//
// Параметры:
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица, в которую добавляются характеристики персонала.
//  ТаблицаЗначений - ДанныеФормыКоллекция - таблица, в которую добавляются значения характеристик персонала.
//  НовыеХарактеристики - Массив - массив структур со свойствами добавляемых строк характеристик персонала.
//
Процедура ДобавитьХарактеристикиСоЗначениями(ТаблицаХарактеристик, ТаблицаЗначений, НовыеХарактеристики) Экспорт
	
	ТЗТаблицыХарактеристик = ТаблицаХарактеристик.Выгрузить().СкопироватьКолонки();
	ТЗТаблицыЗначений = ТаблицаЗначений.Выгрузить().СкопироватьКолонки();
	
	ЕстьВесЗначения = (ТЗТаблицыЗначений.Колонки.Найти("ВесЗначения") <> Неопределено);
	ЕстьВес = (ТЗТаблицыХарактеристик.Колонки.Найти("Вес") <> Неопределено);
	ЕстьТребуетсяПроверка = (ТЗТаблицыХарактеристик.Колонки.Найти("ТребуетсяПроверка") <> Неопределено);
	ЕстьТребуетсяОбучение = (ТЗТаблицыХарактеристик.Колонки.Найти("ТребуетсяОбучение") <> Неопределено);
	
	// Заполняем промежуточную ТЗТаблицыХарактеристик и ТаблицаЗначений.
	Для каждого ТекущаяСтрока Из НовыеХарактеристики Цикл
		НоваяСтрока = ТЗТаблицыХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока); 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		СтруктураПоиска.Вставить("Значение", ТекущаяСтрока.Значение);
		НайденныеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Добавляем значение.
			ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), ТекущаяСтрока);
		Иначе
			// Инкрементируем вес, в случае его наличия в строке.
			Если ЕстьВесЗначения Тогда
				НайденныеСтроки[0].ВесЗначения = НайденныеСтроки[0].ВесЗначения + ТекущаяСтрока.ВесЗначения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СвернутьТаблицуЗначенийХарактеристик(ТЗТаблицыХарактеристик);
	
	Для Каждого ТекущаяСтрока Из ТЗТаблицыХарактеристик Цикл
		НайденныеСтроки = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("Характеристика", ТекущаяСтрока.Характеристика));
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Добавляем характеристику.
			ЗаполнитьЗначенияСвойств(ТаблицаХарактеристик.Добавить(), ТекущаяСтрока);
		Иначе
			Если ЕстьВес Тогда
				НайденныеСтроки[0].Вес = НайденныеСтроки[0].Вес + ТекущаяСтрока.Вес;
			КонецЕсли;
			Если ЕстьТребуетсяПроверка Тогда
				НайденныеСтроки[0].ТребуетсяПроверка = НайденныеСтроки[0].ТребуетсяПроверка ИЛИ ТекущаяСтрока.ТребуетсяПроверка;
			КонецЕсли;
			Если ЕстьТребуетсяОбучение Тогда
				НайденныеСтроки[0].ТребуетсяОбучение = НайденныеСтроки[0].ТребуетсяОбучение ИЛИ ТекущаяСтрока.ТребуетсяОбучение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьВторичныеРеквизитыТаблицыХарактеристик("ВидХарактеристики,КартинкаВида,ЗначенияСтрокой", ТаблицаХарактеристик, ТаблицаЗначений);
	
КонецПроцедуры

// Заполняет дерево характеристик.
//
// Параметры:
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица, содержащая характеристики.
//  ДеревоХарактеристик - ДанныеФормыКоллекция - формируемое дерево значений.
//  СоЗначениями - Булево - признак необходимости учитывать значения характеристик.
//
Процедура ЗаполнитьДеревоХарактеристик(ТаблицаХарактеристик, ДеревоХарактеристик, СоЗначениями = Ложь) Экспорт

	ДеревоХарактеристик.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаХарактеристик.Характеристика КАК Характеристика,
		|	ТаблицаХарактеристик.ВидХарактеристики КАК ВидХарактеристики,
		|	&ЗначенияСтрокой КАК ЗначенияСтрокой,
		|	ТаблицаХарактеристик.КартинкаВида КАК КартинкаВида
		|ПОМЕСТИТЬ ВТХарактеристики
		|ИЗ
		|	&ТаблицаХарактеристик КАК ТаблицаХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Ссылка КАК Компетенция,
		|	КомпетенцииПерсоналаХарактеристикиПерсонала.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТКомпетенции
		|ИЗ
		|	Справочник.КомпетенцииПерсонала.ХарактеристикиПерсонала КАК КомпетенцииПерсоналаХарактеристикиПерсонала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТХарактеристики КАК ВТХарактеристики
		|		ПО КомпетенцииПерсоналаХарактеристикиПерсонала.Характеристика = ВТХарактеристики.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТКомпетенции.Компетенция КАК Компетенция,
		|	ВТХарактеристики.Характеристика КАК Характеристика,
		|	ВТХарактеристики.ВидХарактеристики КАК ВидХарактеристики,
		|	ВТХарактеристики.ЗначенияСтрокой КАК ЗначенияСтрокой,
		|	ВТХарактеристики.КартинкаВида КАК КартинкаВида
		|ИЗ
		|	ВТХарактеристики КАК ВТХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКомпетенции КАК ВТКомпетенции
		|		ПО ВТХарактеристики.Характеристика = ВТКомпетенции.Характеристика
		|ИТОГИ ПО
		|	Компетенция";
	Запрос.УстановитьПараметр("ТаблицаХарактеристик", ТаблицаХарактеристик.Выгрузить());
	
	Если СоЗначениями Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗначенияСтрокой", "ТаблицаХарактеристик.ЗначенияСтрокой");
	Иначе
		Запрос.УстановитьПараметр("ЗначенияСтрокой", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКомпетенций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаКомпетенций.Следующий() Цикл
		Если ВыборкаКомпетенций.Компетенция = Null Тогда
			СтрокаКомпетенций = ДеревоХарактеристик;
		Иначе
		    СтрокаКомпетенций = ДеревоХарактеристик.Строки.Добавить();
			СтрокаКомпетенций.Характеристика = ВыборкаКомпетенций.Компетенция;
			СтрокаКомпетенций.ЭтоКомпетенция = Истина;
			СтрокаКомпетенций.КартинкаВида = 5;
		КонецЕсли;
		
		ВыборкаХарактеристик = ВыборкаКомпетенций.Выбрать();
		Пока ВыборкаХарактеристик.Следующий() Цикл
			СтрокаХарактеристик = СтрокаКомпетенций.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаХарактеристик, ВыборкаХарактеристик);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Проверяет заполненность значений характеристик в табличных частях форм.
//	Форма должна иметь реквизиты "Характеристики" и "ЗначенияХарактеристики" с типом "табличная часть".
//
// Параметры:
//  - Форма - Управляемая форма.
//  - Отказ - Булево - отказ от записи.
//  - ПроверяемыеРеквизиты - Массив - массив проверяемых реквизитов.
//
Процедура ОбработкаПроверкиЗаполненияТабличныхЧастейХарактеристик(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт

	Ошибки = Неопределено;
	
	Если Форма.Характеристики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаХарактеристик Из Форма.Характеристики Цикл
		СтрокиЗначений = Форма.ЗначенияХарактеристики.НайтиСтроки(Новый Структура("Характеристика", СтрокаХарактеристик.Характеристика));
		Если СтрокиЗначений.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Укажите требуемые значения для характеристики ""%1""'"), 
				Строка(СтрокаХарактеристик.Характеристика));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Характеристики[%1].ЗначенияСтрокой",
				ТекстСообщения,
				"",
				Форма.Характеристики.Индекс(СтрокаХарактеристик));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);

КонецПроцедуры

// Заполняет вторичную таблицу характеристик характеристиками, содержащимися в мероприятии обучения и развития.
//
// Параметры:
//  ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица с характеристиками персонала.
//  МероприятиеСсылка - МероприятияОбученияРазвитияСсылка - мероприятие обучения и развития.
//
Процедура ЗаполнитьВторичнуюТаблицуХарактеристикИзМероприятия(ТаблицаХарактеристик, МероприятиеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МероприятияОбученияРазвитияХарактеристикиПерсонала.Характеристика КАК Характеристика
		|ИЗ
		|	Справочник.МероприятияОбученияРазвития.ХарактеристикиПерсонала КАК МероприятияОбученияРазвитияХарактеристикиПерсонала
		|ГДЕ
		|	МероприятияОбученияРазвитияХарактеристикиПерсонала.Ссылка = &МероприятиеСсылка";
	Запрос.УстановитьПараметр("МероприятиеСсылка", МероприятиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаХарактеристик.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сохраняет в настройках пользователя нажатость кнопки "По компетенциям"
//
Процедура СохранитьРежимОтображенияПоКомпетенциям(ИмяНастроек, ЭлементКнопка) Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", ИмяНастроек, ЭлементКнопка.Пометка);
КонецПроцедуры

// Загружает из настроек пользователя нажатость кнопки "По компетенциям"
//
Процедура ЗагрузитьРежимОтображенияПоКомпетенциям(ИмяНастроек, ЭлементКнопка) Экспорт
	ЭлементКнопка.Пометка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", ИмяНастроек, Ложь);
КонецПроцедуры

#Область ШтатноеРасписание

Процедура ДополнитьФормуШтатногоРасписания(Форма) Экспорт

	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДействияПозицийШтатногоРасписания)
		ИЛИ Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания)  Тогда
		
		Возврат;
	КонецЕсли;
	
	ДополнитьФормуШтатногоРасписанияДействиямиИХарактеристиками(Форма);

	ПрочитатьДанныеДействийХарактеристикШтатногоРасписания(Форма);
	
	ПрочитатьХарактеристикиВТаблицы(Форма.ХарактеристикиПерсонала, Форма.Характеристики, Форма.ЗначенияХарактеристики);
	
	ХарактеристикиПерсоналаКлиентСервер.ШтатноеРасписаниеУстановитьДоступностьЭлементовДействийХарактеристик(Форма);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеДобавитьХарактеристикиИзДействийНаСервере(Форма, МассивДобавленныхДействий) Экспорт
	
	ДобавляемыеХарактеристики = ХарактеристикиПерсонала.МассивСтруктурХарактеристикСоЗначениямиИзДействий(МассивДобавленныхДействий);
	ДобавитьХарактеристикиСоЗначениями(Форма.Характеристики, Форма.ЗначенияХарактеристики, ДобавляемыеХарактеристики);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеЗаполнитьДействияХарактеристикиИзПрофиляНаСервере(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.ПрофильДолжности) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПрофиляДолжности = Справочники.ПрофилиДолжностей.ДанныеПрофиляДолжности(Форма.ПрофильДолжности);
	
	ТаблицаДействий = Форма.ДействияСотрудников;
	ТаблицаДействий.Очистить();
	Для каждого СтрокаДействий Из ДанныеПрофиляДолжности.ДействияСотрудников Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДействий.Добавить(), СтрокаДействий);
	КонецЦикла; 
	
	ТаблицаХарактеристик = Форма.ХарактеристикиПерсонала;
	ТаблицаХарактеристик.Очистить();
	Для каждого СтрокаХарактеристик Из ДанныеПрофиляДолжности.ХарактеристикиПерсонала Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаХарактеристик.Добавить(), СтрокаХарактеристик);
	КонецЦикла; 
	
	ХарактеристикиПерсоналаФормы.ПрочитатьХарактеристикиВТаблицы(
		ТаблицаХарактеристик, Форма.Характеристики, Форма.ЗначенияХарактеристики);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеДобавитьХарактеристикиВТабличнуюЧасть(Форма, НовыеХарактеристики, ДополнительныеПараметры) Экспорт
	ДобавитьХарактеристикиВТабличнуюЧасть(Форма, НовыеХарактеристики, ДополнительныеПараметры);
КонецПроцедуры

Процедура ПроверитьЗаполнениеПозицииШтатногоРасписания(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Характеристики") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполненияТабличныхЧастейХарактеристик(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПередЗаписьюНаСервере(Форма) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Характеристики") Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиПерсоналаФормы.ПеренестиХарактеристикиВТабличнуюЧасть(
		Форма.ХарактеристикиПерсонала, Форма.Характеристики, Форма.ЗначенияХарактеристики);
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЗаписиНаСервере(Форма) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Характеристики") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДанныеДействийХарактеристикШтатногоРасписания(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСвойствоРеквизита(Приемник, Источник, ИмяРеквизита)

	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Приемник, ИмяРеквизита)
		ИЛИ НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник, ИмяРеквизита);
	
КонецПроцедуры

Процедура СвернутьТаблицуЗначенийХарактеристик(ТЗХарактеристик)

	СтрокаПолей = "Характеристика";
	
	Если ТЗХарактеристик.Колонки.Найти("Вес") <> Неопределено Тогда
		СтрокаПолей = СтрокаПолей + ", Вес";
	КонецЕсли;
	Если ТЗХарактеристик.Колонки.Найти("ТребуетсяПроверка") <> Неопределено Тогда
		СтрокаПолей = СтрокаПолей + ", ТребуетсяПроверка";
	КонецЕсли;
	Если ТЗХарактеристик.Колонки.Найти("ТребуетсяОбучение") <> Неопределено Тогда
		СтрокаПолей = СтрокаПолей + ", ТребуетсяОбучение";
	КонецЕсли;
	
	ТЗХарактеристик.Свернуть(СтрокаПолей);

КонецПроцедуры

#Область ШтатноеРасписание

Процедура ДополнитьФормуШтатногоРасписанияДействиямиИХарактеристиками(Форма)

	СоздатьРеквизитПрофиляДолжности(Форма);
	
	СоздатьРеквизитыДействий(Форма);
	СоздатьРеквизитыХарактеристикПерсонала(Форма);
	СоздатьКомандыХарактеристикПерсонала(Форма);
	
	СоздатьЭлементПрофильДолжности(Форма);
	СоздатьЭлементыФормыДействийИХарактеристикПерсонала(Форма);
	
КонецПроцедуры

Процедура СоздатьРеквизитПрофиляДолжности(Форма)

	ДобавляемыеРеквизиты = Новый Массив;
	
	// ПрофильДолжности
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПрофильДолжности", Новый ОписаниеТипов("СправочникСсылка.ПрофилиДолжностей"),, НСтр("ru = 'Профиль должности'")));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);

КонецПроцедуры

Процедура СоздатьРеквизитыХарактеристикПерсонала(Форма)

	ДобавляемыеРеквизиты = Новый Массив;
	
	// ХарактеристикиПерсонала
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ХарактеристикиПерсонала",	Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала"), "ХарактеристикиПерсонала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("СправочникСсылка.ЗначенияХарактеристикПерсонала"), "ХарактеристикиПерсонала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(5,0), "ХарактеристикиПерсонала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВесЗначения", ОбщегоНазначения.ОписаниеТипаЧисло(5,0), "ХарактеристикиПерсонала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетсяПроверка", Новый ОписаниеТипов("Булево"), "ХарактеристикиПерсонала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетсяОбучение", Новый ОписаниеТипов("Булево"), "ХарактеристикиПерсонала"));
	
	// Характеристики
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристики",	Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала"), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(5,0), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетсяПроверка", Новый ОписаниеТипов("Булево"), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТребуетсяОбучение", Новый ОписаниеТипов("Булево"), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидХарактеристики", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыХарактеристикПерсонала"), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначенияСтрокой", ОбщегоНазначения.ОписаниеТипаСтрока(0), "Характеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КартинкаВида", ОбщегоНазначения.ОписаниеТипаЧисло(5,0), "Характеристики"));
	
	// ЗначенияХарактеристики
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначенияХарактеристики",	Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала"), "ЗначенияХарактеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("СправочникСсылка.ЗначенияХарактеристикПерсонала"), "ЗначенияХарактеристики"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВесЗначения", ОбщегоНазначения.ОписаниеТипаЧисло(5,0), "ЗначенияХарактеристики"));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);

КонецПроцедуры

Процедура СоздатьКомандыХарактеристикПерсонала(Форма)

	Если Форма.Команды.Найти("ПодобратьХарактеристики") = Неопределено Тогда
		// Добавляем команду формы
		КомандаПодбораХарактеристик = Форма.Команды.Добавить("ПодобратьХарактеристики");
		КомандаПодбораХарактеристик.Действие = "Подключаемый_ПодобратьХарактеристики";
		КомандаПодбораХарактеристик.Заголовок = НСтр("ru = 'Подбор'");
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьРеквизитыДействий(Форма)

	ДобавляемыеРеквизиты = Новый Массив;
	
	// Тумблер
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло", ОбщегоНазначения.ОписаниеТипаЧисло(1,0),,, Истина));
	
	// Действия
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействияСотрудников",	Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействиеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ДействияСотрудников"), "ДействияСотрудников"));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);

КонецПроцедуры

Процедура СоздатьЭлементПрофильДолжности(Форма)

	Элементы = Форма.Элементы;
	
	ГруппаФормы = Элементы.Найти("ПрофильДолжностиГруппа");
	Если ГруппаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло
	Если Элементы.Найти("ПрофильДолжности") = Неопределено Тогда
		ПолеФормы = Элементы.Добавить("ПрофильДолжности", Тип("ПолеФормы"), ГруппаФормы);
		ПолеФормы.ПутьКДанным = "ПрофильДолжности";
		ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Должность", "Объект.Должность", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивСвязей = Новый Массив();
		МассивСвязей.Добавить(НоваяСвязь); 
		ПолеФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		
		ПолеФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПрофильДолжностиПриИзменении");
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыДействийИХарактеристикПерсонала(Форма)

	Элементы = Форма.Элементы;
	
	ГруппаФормы = Элементы.Найти("ТребованияКХарактеристикамГруппа");
	Если ГруппаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло
	ЭлементТумблер = Элементы.Найти("ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло");
	Если ЭлементТумблер = Неопределено Тогда
		ЭлементТумблер = Элементы.Добавить("ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло", Тип("ПолеФормы"), ГруппаФормы);
		ЭлементТумблер.ПутьКДанным = "ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло";
		ЭлементТумблер.Вид = ВидПоляФормы.ПолеПереключателя;
		ЭлементТумблер.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТумблер.ВидПереключателя = ВидПереключателя.Тумблер;
		ЭлементТумблер.СписокВыбора.Добавить(0, НСтр("ru = 'Произвольные'"));
		ЭлементТумблер.СписокВыбора.Добавить(1, НСтр("ru = 'Из профиля'"));
		ЭлементТумблер.УстановитьДействие("ПриИзменении", "Подключаемый_ДействияХарактеристикиСоответствуютПрофилюДолжностиЧислоПриИзменении");
	КонецЕсли;
	
	// ДействияХарактеристикиГруппа
	ДействияХарактеристикиГруппа = Элементы.Найти("ДействияХарактеристикиГруппа");
	Если ДействияХарактеристикиГруппа = Неопределено Тогда
		ДействияХарактеристикиГруппа = Элементы.Добавить("ДействияХарактеристикиГруппа", Тип("ГруппаФормы"), ГруппаФормы);
		ДействияХарактеристикиГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ДействияХарактеристикиГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ДействияХарактеристикиГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ДействияХарактеристикиГруппа.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// ДействияСотрудниковГруппа
	ДействияСотрудниковГруппа = Элементы.Найти("ДействияСотрудниковГруппа");
	Если ДействияСотрудниковГруппа = Неопределено Тогда
		ДействияСотрудниковГруппа = Элементы.Добавить("ДействияСотрудниковГруппа", Тип("ГруппаФормы"), ДействияХарактеристикиГруппа);
		ДействияСотрудниковГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ДействияСотрудниковГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ДействияСотрудниковГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ДействияСотрудниковГруппа.Заголовок = НСтр("ru = 'Функции'");
		ДействияСотрудниковГруппа.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	// ХарактеристикиГруппа
	ХарактеристикиГруппа = Элементы.Найти("ХарактеристикиГруппа");
	Если ХарактеристикиГруппа = Неопределено Тогда
		ХарактеристикиГруппа = Элементы.Добавить("ХарактеристикиГруппа", Тип("ГруппаФормы"), ДействияХарактеристикиГруппа);
		ХарактеристикиГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ХарактеристикиГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ХарактеристикиГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ХарактеристикиГруппа.Заголовок = НСтр("ru = 'Характеристики'");
		ХарактеристикиГруппа.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	
	//ДействияСотрудников
	ДействияСотрудников = Элементы.Найти("ДействияСотрудников");
	Если ДействияСотрудников = Неопределено Тогда
		ДействияСотрудников = Элементы.Добавить("ДействияСотрудников", Тип("ТаблицаФормы"), ДействияСотрудниковГруппа);
		ДействияСотрудников.ПутьКДанным = "ДействияСотрудников";
		ДействияСотрудников.Отображение = ОтображениеТаблицы.Список;
		ДействияСотрудников.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Функции, которые должны выполнять сотрудники, работающие на этой позиции.'");
		ДействияСотрудников.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ДействияСотрудников.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		ДействияСотрудников.Шапка = Ложь;
		// Обработчики
		ДействияСотрудников.УстановитьДействие("Выбор", "Подключаемый_ДействияВыбор");
		ДействияСотрудников.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ДействияПередНачаломДобавления");
		ДействияСотрудников.УстановитьДействие("ПередУдалением", "Подключаемый_ДействияПередУдалением");
	КонецЕсли;
	Если Элементы.Найти("ДействияСотрудниковДействиеСотрудника") = Неопределено Тогда
		ПолеДействиеСотрудника = Элементы.Добавить("ДействияСотрудниковДействиеСотрудника", Тип("ПолеФормы"), ДействияСотрудников);
		ПолеДействиеСотрудника.ПутьКДанным = "ДействияСотрудников.ДействиеСотрудника";
	КонецЕсли;
	
	// Характеристики
	ТаблицаХарактеристики = Элементы.Найти("Характеристики");
	Если ТаблицаХарактеристики = Неопределено Тогда
		ТаблицаХарактеристики = Элементы.Добавить("Характеристики", Тип("ТаблицаФормы"), ХарактеристикиГруппа);
		ТаблицаХарактеристики.ПутьКДанным = "Характеристики";
		ТаблицаХарактеристики.Отображение = ОтображениеТаблицы.Список;
		ТаблицаХарактеристики.ПутьКДаннымКартинкиСтроки = "Характеристики.КартинкаВида";
		ТаблицаХарактеристики.КартинкаСтрок = БиблиотекаКартинок.КоллекцияВидыХарактеристик;
		ТаблицаХарактеристики.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Требования к характеристикам сотрудников, работающих на этой позиции.'");
		ТаблицаХарактеристики.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ТаблицаХарактеристики.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		// Обработчики
		ТаблицаХарактеристики.УстановитьДействие("Выбор", "Подключаемый_ХарактеристикиВыбор");
		ТаблицаХарактеристики.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ХарактеристикиПередНачаломДобавления");
		ТаблицаХарактеристики.УстановитьДействие("ПередУдалением", "Подключаемый_ХарактеристикиПередУдалением");
	КонецЕсли;
	Если Элементы.Найти("ХарактеристикиХарактеристика") = Неопределено Тогда
		ПолеТаблицы = Элементы.Добавить("ХарактеристикиХарактеристика", Тип("ПолеФормы"), ТаблицаХарактеристики);
		ПолеТаблицы.ПутьКДанным = "Характеристики.Характеристика";
	КонецЕсли;
	Если Элементы.Найти("ХарактеристикиЗначение") = Неопределено Тогда
		ПолеТаблицы = Элементы.Добавить("ХарактеристикиЗначение", Тип("ПолеФормы"), ТаблицаХарактеристики);
		ПолеТаблицы.ПутьКДанным = "Характеристики.ЗначенияСтрокой";
		ПолеТаблицы.Заголовок = НСтр("ru = 'Значение'");
	КонецЕсли;
	Если Элементы.Найти("ХарактеристикиВес") = Неопределено Тогда
		ПолеТаблицы = Элементы.Добавить("ХарактеристикиВес", Тип("ПолеФормы"), ТаблицаХарактеристики);
		ПолеТаблицы.ПутьКДанным = "Характеристики.Вес";
	КонецЕсли;
	Если Элементы.Найти("ХарактеристикиТребуетсяПроверка") = Неопределено Тогда
		ПолеТаблицы = Элементы.Добавить("ХарактеристикиТребуетсяПроверка", Тип("ПолеФормы"), ТаблицаХарактеристики);
		ПолеТаблицы.Заголовок = НСтр("ru = 'Проверка'");
		ПолеТаблицы.ПутьКДанным = "Характеристики.ТребуетсяПроверка";
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеФлажка;
	КонецЕсли;
	Если Элементы.Найти("ХарактеристикиТребуетсяОбучение") = Неопределено Тогда
		ПолеТаблицы = Элементы.Добавить("ХарактеристикиТребуетсяОбучение", Тип("ПолеФормы"), ТаблицаХарактеристики);
		ПолеТаблицы.Заголовок = НСтр("ru = 'Обучение'");
		ПолеТаблицы.ПутьКДанным = "Характеристики.ТребуетсяОбучение";
		ПолеТаблицы.Вид = ВидПоляФормы.ПолеФлажка;
	КонецЕсли;
	
	// Команда подбора
	Если Форма.Элементы.Найти("ХарактеристикиПерсоналаПодобратьХарактеристики") = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("ХарактеристикиПерсоналаПодобратьХарактеристики", Тип("КнопкаФормы"), ТаблицаХарактеристики.КоманднаяПанель);
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ИмяКоманды = "ПодобратьХарактеристики"; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеДействийХарактеристикШтатногоРасписания(Форма)

	ПрочитатьНастройкиНастройкиДействийХарактеристикШтатногоРасписания(Форма);
	ПрочитатьДействияПозицииШтатногоРасписания(Форма);
	ПрочитатьХарактеристикиПозицииШтатногоРасписания(Форма);

КонецПроцедуры

Процедура ЗаписатьДанныеДействийХарактеристикШтатногоРасписания(Форма)

	ЗаписатьНастройкиНастройкиДействийХарактеристикШтатногоРасписания(Форма);
	ЗаписатьДействияПозицииШтатногоРасписания(Форма);
	ЗаписатьХарактеристикиПозицииШтатногоРасписания(Форма);

КонецПроцедуры

Процедура ПрочитатьНастройкиНастройкиДействийХарактеристикШтатногоРасписания(Форма)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиДействийХарактеристикШтатногоРасписания.ПрофильДолжности КАК ПрофильДолжности,
		|	ВЫБОР
		|		КОГДА НастройкиДействийХарактеристикШтатногоРасписания.СоответствуютПрофилюДолжности = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло
		|ИЗ
		|	РегистрСведений.НастройкиДействийХарактеристикШтатногоРасписания КАК НастройкиДействийХарактеристикШтатногоРасписания
		|ГДЕ
		|	НастройкиДействийХарактеристикШтатногоРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания";
	
	Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Форма.Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Форма, Выборка);

КонецПроцедуры

Процедура ПрочитатьДействияПозицииШтатногоРасписания(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияПозицийШтатногоРасписания.ДействиеСотрудника КАК ДействиеСотрудника
		|ИЗ
		|	РегистрСведений.ДействияПозицийШтатногоРасписания КАК ДействияПозицийШтатногоРасписания
		|ГДЕ
		|	ДействияПозицийШтатногоРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания";
	
	Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Форма.Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.ДействияСотрудников.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура ПрочитатьХарактеристикиПозицииШтатногоРасписания(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ХарактеристикаПерсонала КАК Характеристика,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.Значение КАК Значение,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.Вес КАК Вес,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ТребуетсяПроверка КАК ТребуетсяПроверка,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ТребуетсяОбучение КАК ТребуетсяОбучение,
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ВесЗначения КАК ВесЗначения
		|ИЗ
		|	РегистрСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания КАК ХарактеристикиПерсоналаПозицийШтатногоРасписания
		|ГДЕ
		|	ХарактеристикиПерсоналаПозицийШтатногоРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания";
	
	Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Форма.Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.ХарактеристикиПерсонала.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНастройкиДействийХарактеристикШтатногоРасписания(Форма)

	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиДействийХарактеристикШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияШтатногоРасписания.Установить(Форма.Объект.Ссылка);
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.ПозицияШтатногоРасписания = Форма.Объект.Ссылка;
	НоваяСтрока.ПрофильДолжности = Форма.ПрофильДолжности;
	НоваяСтрока.СоответствуютПрофилюДолжности = (Форма.ДействияХарактеристикиСоответствуютПрофилюДолжностиЧисло = 1);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьДействияПозицииШтатногоРасписания(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДействияПозицийШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияШтатногоРасписания.Установить(Форма.Объект.Ссылка);
	
	Для каждого СтрокаДействий Из Форма.ДействияСотрудников Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ПозицияШтатногоРасписания = Форма.Объект.Ссылка;
		НоваяСтрока.ДействиеСотрудника = СтрокаДействий.ДействиеСотрудника;
	КонецЦикла; 
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Процедура ЗаписатьХарактеристикиПозицииШтатногоРасписания(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ХарактеристикиПерсоналаПозицийШтатногоРасписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияШтатногоРасписания.Установить(Форма.Объект.Ссылка);
	
	Для каждого СтрокаХарактеристик Из Форма.ХарактеристикиПерсонала Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХарактеристик);
		НоваяСтрока.ХарактеристикаПерсонала = СтрокаХарактеристик.Характеристика;
		НоваяСтрока.ПозицияШтатногоРасписания = Форма.Объект.Ссылка;
	КонецЦикла; 
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти