
#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает строку - сообщение пользователю о результатах проверки адреса.
//
Функция СообщениеОРезультатахПроверкиАдреса(Адрес) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		СообщениеПроверки = СообщениеОПустомАдресе();
	Иначе
		РезультатПроверки = РезультатПроверкиАдреса(Адрес);
		Если РезультатПроверкиАдресаСодержитОшибки(РезультатПроверки) Тогда			
			Ошибки = ПредставленияОшибокПроверкиАдреса(РезультатПроверки);
			СообщениеПроверки = СообщениеОбОшибкахПроверкиАдреса(Ошибки);
		Иначе
			СообщениеПроверки = СообщениеОбУспешнойПроверкеАдреса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СообщениеПроверки;	
	
КонецФункции 

// Функция возвращает ФиксированноеСоответствие с кодами регионов.
//
Функция КодыРегионовПилотногоПроекта() Экспорт
	
	СоответствиеПилотногоПроекта = Новый Соответствие;
	
	СоответствиеПилотногоПроекта.Вставить("09",'20110701'); // Карачаево-Черкесская респ.
	СоответствиеПилотногоПроекта.Вставить("52",'20110701'); // Нижегородская обл.
	
	СоответствиеПилотногоПроекта.Вставить("30",'20120701'); // Астраханская обл.
	СоответствиеПилотногоПроекта.Вставить("45",'20120701'); // Курганская обл.
	СоответствиеПилотногоПроекта.Вставить("53",'20120701'); // Новгородская обл.
	СоответствиеПилотногоПроекта.Вставить("54",'20120701'); // Новосибирская обл.
	СоответствиеПилотногоПроекта.Вставить("68",'20120701'); // Тамбовская обл.
	СоответствиеПилотногоПроекта.Вставить("27",'20120701'); // Хабаровский край
	
	СоответствиеПилотногоПроекта.Вставить("91",'20150101'); // Республика Крым
	СоответствиеПилотногоПроекта.Вставить("92",'20150101'); // город федерального значения Севастополь
	
	СоответствиеПилотногоПроекта.Вставить("16",'20150701'); // Республика Татарстан
	СоответствиеПилотногоПроекта.Вставить("31",'20150701'); // Белгородская обл.
	СоответствиеПилотногоПроекта.Вставить("61",'20150701'); // Ростовская обл.
	СоответствиеПилотногоПроекта.Вставить("63",'20150701'); // Самарская обл.
	
	СоответствиеПилотногоПроекта.Вставить("13",'20160701'); // Республика Мордовия
	СоответствиеПилотногоПроекта.Вставить("32",'20160701'); // Брянская обл.
	СоответствиеПилотногоПроекта.Вставить("39",'20160701'); // Калининградская обл.
	СоответствиеПилотногоПроекта.Вставить("40",'20160701'); // Калужская обл.
	СоответствиеПилотногоПроекта.Вставить("48",'20160701'); // Липецкая обл.
	СоответствиеПилотногоПроекта.Вставить("73",'20160701'); // Ульяновская обл.
	
	СоответствиеПилотногоПроекта.Вставить("01",'20170701'); // Республика Адыгея (Адыгея)
	СоответствиеПилотногоПроекта.Вставить("04",'20170701'); // Республика Алтай
	СоответствиеПилотногоПроекта.Вставить("03",'20170701'); // Республика Бурятия
	СоответствиеПилотногоПроекта.Вставить("08",'20170701'); // Республика Калмыкия
	СоответствиеПилотногоПроекта.Вставить("22",'20170701'); // Алтайский край
	СоответствиеПилотногоПроекта.Вставить("25",'20170701'); // Приморский край
	СоответствиеПилотногоПроекта.Вставить("28",'20170701'); // Амурская обл.
	СоответствиеПилотногоПроекта.Вставить("35",'20170701'); // Вологодская обл.
	СоответствиеПилотногоПроекта.Вставить("49",'20170701'); // Магаданская обл.
	СоответствиеПилотногоПроекта.Вставить("55",'20170701'); // Омская обл.
	СоответствиеПилотногоПроекта.Вставить("57",'20170701'); // Орловская обл.
	СоответствиеПилотногоПроекта.Вставить("70",'20170701'); // Томская обл.
	СоответствиеПилотногоПроекта.Вставить("79",'20170701'); // Еврейская автономная обл.
	
	// отменено Постановлением Правительства РФ от 11 декабря 2017 № 1514

	//СоответствиеПилотногоПроекта.Вставить("14",'20180701'); // Республика Саха (Якутия)
	//СоответствиеПилотногоПроекта.Вставить("75",'20180701'); // Забайкальский край
	//СоответствиеПилотногоПроекта.Вставить("33",'20180701'); // Владимирская обл.
	//СоответствиеПилотногоПроекта.Вставить("34",'20180701'); // Волгоградская обл.
	//СоответствиеПилотногоПроекта.Вставить("36",'20180701'); // Воронежская обл.
	//СоответствиеПилотногоПроекта.Вставить("37",'20180701'); // Ивановская обл.
	//СоответствиеПилотногоПроекта.Вставить("42",'20180701'); // Кемеровская обл.
	//СоответствиеПилотногоПроекта.Вставить("43",'20180701'); // Кировская обл.
	//СоответствиеПилотногоПроекта.Вставить("44",'20180701'); // Костромская обл.
	//СоответствиеПилотногоПроекта.Вставить("46",'20180701'); // Курская обл.
	//СоответствиеПилотногоПроекта.Вставить("62",'20180701'); // Рязанская обл.
	//СоответствиеПилотногоПроекта.Вставить("67",'20180701'); // Смоленская обл.
	//СоответствиеПилотногоПроекта.Вставить("69",'20180701'); // Тверская обл.
	//
	//СоответствиеПилотногоПроекта.Вставить("05",'20190701'); // Республика Дагестан
	//СоответствиеПилотногоПроекта.Вставить("06",'20190701'); // Республика Ингушетия
	//СоответствиеПилотногоПроекта.Вставить("10",'20190701'); // Республика Карелия
	//СоответствиеПилотногоПроекта.Вставить("11",'20190701'); // Республика Коми
	//СоответствиеПилотногоПроекта.Вставить("15",'20190701'); // Республика Северная Осетия - Алания
	//СоответствиеПилотногоПроекта.Вставить("19",'20190701'); // Республика Хакасия
	//СоответствиеПилотногоПроекта.Вставить("07",'20190701'); // Кабардино-Балкарская Республика 
	//СоответствиеПилотногоПроекта.Вставить("18",'20190701'); // Удмуртская Республика 
	//СоответствиеПилотногоПроекта.Вставить("20",'20190701'); // Чеченская Республика 
	//СоответствиеПилотногоПроекта.Вставить("21",'20190701'); // Чувашская Республика - Чувашия 
	//СоответствиеПилотногоПроекта.Вставить("29",'20190701'); // Архангельская обл.
	//СоответствиеПилотногоПроекта.Вставить("71",'20190701'); // Тульская обл.
	//СоответствиеПилотногоПроекта.Вставить("76",'20190701'); // Ярославская обл.
	
	Возврат СоответствиеПилотногоПроекта
	
КонецФункции

// Функция возвращает массив дат вступления в пилотный проект
//
Функция ДатыВступленияВПилотныйПроект() Экспорт
	
	МассивДат = Новый Массив;
	МассивДат.Добавить('20110701');
	МассивДат.Добавить('20120701');
	МассивДат.Добавить('20150101');
	МассивДат.Добавить('20150701');
	МассивДат.Добавить('20160701');
	МассивДат.Добавить('20170701');
	МассивДат.Добавить('20180701');
	МассивДат.Добавить('20190701');
	
	Возврат МассивДат
	
КонецФункции 

// Заполняет список значений датами вступления в пилотный проект.
//
// Параметры:
//   СписокВыбора - СписокЗначений - Список выбора элемента управления формы.
//
Процедура ЗаполнитьСписокВыбораДатамиВступленияВПилотныйПроект(СписокВыбора) Экспорт
	СписокВыбора.ЗагрузитьЗначения(ДатыВступленияВПилотныйПроект());
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		ЭлементСписка.Представление = Формат(ЭлементСписка.Значение, "ДЛФ=D");
	КонецЦикла;
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать процедуру ЗаполнитьСписокВыбораДатамиВступленияВПилотныйПроект.
Процедура ЗаполнитьСписокВыбораДатыВступленияВПилотныйПроект(СписокВыбора) Экспорт
	МассивДат = ДатыВступленияВПилотныйПроект();
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Дата('00010101'), НСтр("ru = 'выполняется страхователем (организацией)'")); 
	Для каждого ОчереднаяДата Из МассивДат Цикл
		ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'передана в ФСС с %1 г.'"),Формат(ОчереднаяДата, "ДФ=dd.MM.yyyy"));
		СписокВыбора.Добавить(ОчереднаяДата, ПредставлениеЗначения);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАдреса

Функция РезультатПроверкиАдреса(Адрес)
	Возврат ЗарплатаКадрыВызовСервера.ПроверитьАдрес(Адрес);
КонецФункции

Функция РезультатПроверкиАдресаСодержитОшибки(РезультатПроверки)
	Возврат НЕ РезультатПроверки.Результат = "Корректный";
КонецФункции

Функция СообщениеОбУспешнойПроверкеАдреса()
	
	Возврат НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями'");
	
КонецФункции

Функция СообщениеОПустомАдресе()
	
	Возврат НСтр("ru = 'Адрес не заполнен'");
	
КонецФункции

Функция СообщениеОбОшибкахПроверкиАдреса(ОшибкиПроверкиАдреса)
	
	СообщенияПроверки = "";
	
	Для каждого Ошибка Из ОшибкиПроверкиАдреса Цикл
		СообщенияПроверки = СообщенияПроверки + Ошибка + Символы.ПС;
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
	
	СообщенияПроверки = НСтр("ru = 'Адрес не соответствует адресному классификатору:'") + Символы.ПС + СообщенияПроверки;
	
	Возврат СообщенияПроверки
	
КонецФункции

Функция ПредставленияОшибокПроверкиАдреса(РезультатПроверки)
	
	ОшибкиПроверки = Новый Массив;	
	
	Для каждого СтруктураОшибки Из РезультатПроверки.СписокОшибок Цикл
		ОшибкиПроверки.Добавить(СтруктураОшибки.Представление);
	КонецЦикла;

	Возврат	ОшибкиПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
