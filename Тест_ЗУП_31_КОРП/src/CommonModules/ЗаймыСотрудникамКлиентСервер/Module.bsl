////////////////////////////////////////////////////////////////////////////////
// Подсистема "Займы сотрудникам".
// Внутренние процедуры и функции, 
// предназначенные для документов подсистемы.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Функция имитирует погашение займа за весь срок с указанными параметрами.
// Используется как при собственно построении графика погашения, 
// так и методами интерполирующего поиска оптимального значения размера платежа 
// и срока погашения.
// 
// Параметры:
//	- ПараметрыПостроения - структура, см. ПараметрыПостроенияГрафикаПогашенияЗайма.
//
// Возвращаемое значение - массив структур, каждая из которых является значениями, 
// описывающими погашение займа за конкретный месяц.
//
Функция ГрафикПогашенияЗайма(ПараметрыПостроения) Экспорт
	
	ГрафикПогашения = Новый Массив;
	
	// Определяем некоторые часто используемые параметры.
	ДатаПредоставления = ПараметрыПостроения.ДатаПредоставления;
	МесяцНачала = ПараметрыПостроения.МесяцНачала;
	МесяцОкончания = ПараметрыПостроения.МесяцОкончания;
	РазмерПлатежа = ПараметрыПостроения.РазмерПлатежа;
	РазмерПогашения = ПараметрыПостроения.РазмерПогашения;
	ВидПлатежей = ПараметрыПостроения.ВидПлатежей;
	ОграничениеПлатежа = ПараметрыПостроения.ОграничениеПлатежа;
	РасчетРазмераПлатежа = ПараметрыПостроения.РасчетРазмераПлатежа;
	
	// Заполняем массив структур, 
	// по полю Остаток долга в последнем элементе массива будем определять результат функции для интерполирующего поиска.
	ОстатокДолга			= ?(ПараметрыПостроения.ТраншиЗайма.Количество() = 0, ПараметрыПостроения.СуммаЗайма, 0);
	НакопленоПроцентов		= 0;
	НакопленоОсновногоДолга	= 0;
	СальдоВзаиморасчетов	= ОстатокДолга;
	НомерМесяца				= 1;
	
	// Виды платежей, когда размер платежа определяется, 
	// отталкиваясь от размера погашения основного долга, а не задается фиксированным.
	ВидыПлатежейРазмерПогашения = Новый Массив;
	ВидыПлатежейРазмерПогашения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи"));
	ВидыПлатежейРазмерПогашения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем"));
	
	Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи") Тогда
		// Если мы платим аннуитетными платежами, то размер платежа и будет ограничением.
		ОграничениеПлатежа = РазмерПлатежа;
	КонецЕсли;
	
	ТекущийМесяц = МесяцНачала;
	Пока ТекущийМесяц <= МесяцОкончания Цикл
		
		Если ПараметрыПостроения.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияЗаймаСотруднику.Траншами")
			И ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
			// Размер погашения долга в каждый конкретный месяц 
			// складывается из размеров погашения траншей, выплачиваемых на данном интервале.
			РазмерПогашения = 0;
		КонецЕсли;
		// Увеличиваем остаток долга на сумму транша.
		Для Каждого Транш Из ПараметрыПостроения.ТраншиЗайма Цикл
			Если Транш.ДатаПредоставления = ТекущийМесяц Тогда
				ОстатокДолга = ОстатокДолга + Транш.Сумма;
				СальдоВзаиморасчетов = СальдоВзаиморасчетов + Транш.Сумма;
			КонецЕсли;
			Если ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
				Если ТекущийМесяц >= Транш.ДатаПредоставления
					И ТекущийМесяц <= Транш.ДатаПогашения  Тогда
					РазмерПогашения = РазмерПогашения + Транш.РазмерПогашения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Рассчитываем проценты за месяц.
		ДнейВГоду = КоличествоДнейВГоду(Год(ТекущийМесяц));
		Если ТекущийМесяц = НачалоМесяца(ДатаПредоставления) Тогда
			// В первый месяц количество дней определяем от даты фактической выдачи займа (т.к. проценты начисляются на
			// следующий день).
			ДнейВМесяце	= День(КонецМесяца(ТекущийМесяц)) - День(ДатаПредоставления);
		Иначе
			ДнейВМесяце	= День(КонецМесяца(ТекущийМесяц));
		КонецЕсли;
		НачислениеПроцентов	= Макс(ОстатокДолга, 0) * ПараметрыПостроения.ГодоваяСтавка * 0.01 * ДнейВМесяце / ДнейВГоду;
		Если ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
			НачисленоОсновногоДолга	= РазмерПогашения;
		Иначе
			НачисленоОсновногоДолга	= РазмерПлатежа - НачислениеПроцентов;
		КонецЕсли;
		
		// рассчитываем погашение
		ПогашениеПроцентов	= 0;
		ПогашениеДолга		= 0;
		ЕжемесячныйПлатеж	= 0;
		Если ПараметрыПостроения.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗаймаСотруднику.ВТечениеСрока") Тогда
			// Погашение производится в течение срока.
			Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи") Тогда
				ЕжемесячныйПлатеж	= РазмерПлатежа;
				ПогашениеПроцентов	= НачислениеПроцентов;
				ПогашениеДолга		= ?(РасчетРазмераПлатежа, ЕжемесячныйПлатеж - ПогашениеПроцентов, Мин(ЕжемесячныйПлатеж - ПогашениеПроцентов, ОстатокДолга));
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи") Тогда
				ПогашениеПроцентов	= НачислениеПроцентов;
				ПогашениеДолга		= НачисленоОсновногоДолга;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем") Тогда
				Если ТекущийМесяц = МесяцОкончания Тогда
					// В последний месяц включаем весь платеж.
					ПогашениеПроцентов = НакопленоПроцентов;
				КонецЕсли;
				ПогашениеДолга = РазмерПогашения;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты") Тогда
				Если ТекущийМесяц = МесяцОкончания Тогда
					// В последний месяц включаем весь платеж.
					ПогашениеДолга = НакопленоОсновногоДолга;
				КонецЕсли;
				ПогашениеПроцентов = НачислениеПроцентов;
			КонецЕсли;
		
			// Отсрочка платежа
			Если ЗначениеЗаполнено(ПараметрыПостроения.МесяцНачалаПогашения) Тогда
				Если ПараметрыПостроения.МесяцНачалаПогашения > ТекущийМесяц Тогда
					// До наступления отсрочки
					ПогашениеПроцентов = 0;
					ПогашениеДолга = 0;
				Иначе
					// После наступления даты отсрочки, учитываем ограничение платежа
					// непогашенные проценты включаем к погашению процентов.
					ПогашениеПроцентов = НачислениеПроцентов + НакопленоПроцентов;
					ПогашениеДолга	= НачисленоОсновногоДолга + НакопленоОсновногоДолга;
					Если ЗначениеЗаполнено(ОграничениеПлатежа) Тогда
						Если ОграничениеПлатежа < ПогашениеПроцентов Тогда
							ПогашениеПроцентов = ОграничениеПлатежа;
							ПогашениеДолга = 0;
						Иначе
							Если ОграничениеПлатежа < ПогашениеПроцентов + ПогашениеДолга Тогда
								ПогашениеДолга = ОграничениеПлатежа - ПогашениеПроцентов;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// В последний месяц включаем остатки сумм.
		Если ТекущийМесяц = МесяцОкончания Тогда
			// В последний месяц включаем весь платеж.
			ПогашениеПроцентов = НакопленоПроцентов + НачислениеПроцентов;
			Если ПараметрыПостроения.ВключатьОстатокДолгаВПоследнийМесяц Тогда
				ПогашениеДолга = ОстатокДолга;
			Иначе
				ПогашениеДолга = НакопленоОсновногоДолга + НачисленоОсновногоДолга;
			КонецЕсли;
		КонецЕсли;
		
		// Ежемесячный платеж сумма займа и проценты.
		ЕжемесячныйПлатеж = ПогашениеДолга + ПогашениеПроцентов;
		
		СальдоВзаиморасчетов = СальдоВзаиморасчетов + НачислениеПроцентов - ЕжемесячныйПлатеж;
		
		СтрокаГрафика = ОписаниеСтрокиГрафикаПогашенияЗайма();
		СтрокаГрафика.НомерМесяца			= НомерМесяца;
		СтрокаГрафика.Месяц					= ТекущийМесяц; 
		СтрокаГрафика.ОстатокДолга			= ОстатокДолга; 
		СтрокаГрафика.НачислениеПроцентов	= НачислениеПроцентов; 
		СтрокаГрафика.ПогашениеПроцентов	= ПогашениеПроцентов; 
		СтрокаГрафика.ПогашениеДолга		= ПогашениеДолга; 
		СтрокаГрафика.ЕжемесячныйПлатеж		= ЕжемесячныйПлатеж;
		СтрокаГрафика.СальдоВзаиморасчетов	= СальдоВзаиморасчетов;
		
		ГрафикПогашения.Добавить(СтрокаГрафика);
		
		// обновляем счетчики
		ОстатокДолга			= ОстатокДолга - ПогашениеДолга;
		НакопленоПроцентов		= НакопленоПроцентов + НачислениеПроцентов - ПогашениеПроцентов;
		НакопленоОсновногоДолга	= НакопленоОсновногоДолга + НачисленоОсновногоДолга - ПогашениеДолга;
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		НомерМесяца = НомерМесяца + 1;
		
		Если Не РасчетРазмераПлатежа И ОстатокДолга = 0 И НакопленоПроцентов = 0 Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГрафикПогашения;
	
КонецФункции

// Функция определяет разность дат в месяцах.
//
Функция СрокПоДатеОкончания(ДатаОкончания, ДатаНачала) Экспорт
	
	Если ДатаОкончания < ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;
	
	ГодНачала = Год(ДатаНачала);
	ГодОкончания = Год(ДатаОкончания);
	
	МесяцНачала = Месяц(ДатаНачала);
	МесяцОкончания = Месяц(ДатаОкончания);
	
	ДеньНачала = День(ДатаНачала);
	ДеньОкончания = День(ДатаОкончания);
	
	Возврат Макс(((ГодОкончания - ГодНачала) - ?(МесяцОкончания < МесяцНачала, 1, 0)), 0) * 12
		+ (МесяцОкончания - МесяцНачала + 1 + ?(МесяцОкончания < МесяцНачала, 12, 0) - ?(ДеньОкончания < ДеньНачала, 1, 0));
	
КонецФункции

// Функция определяет дату окончания договора займа 
// по сроку в месяцах и дате начала.
//
Функция ДатаОкончанияПоСроку(ДатаНачала, Срок) Экспорт
	
	Если Срок = 0 Тогда
		Возврат ДатаНачала;
	Иначе 
		Возврат КонецМесяца(ДобавитьМесяц(ДатаНачала, Срок - 1));
	КонецЕсли;
	
КонецФункции

// Метод подбирает размер аннуитетного платежа 
// (фиксированного на весь срок период погашения займа).
//
// Параметры:
//	- ДанныеЗайма - структура
//
Функция РазмерАннуитетногоПлатежа(ДанныеЗайма) Экспорт
	
	// Поиск подходящего размера платежа выполняем интерполяционным поиском:
	// - в первом приближении считаем, что размер платежа равен аннуитентному платежу 
	// при единовременной выдаче всех траншей
	// - получаем остаток долга после выполнения всех платежей с таким размером
	// - во втором приближении считаем, что размер платежа на 20% меньше, чем аннуитентный платеж
	// при единовременной выдаче
	// - далее уменьшаем размер платежа пропорционально изменению остатка долга.
	
	// Делаем первое предположение.
	Сумма = ?(ДанныеЗайма.ТраншиЗайма.Количество() > 0, ДанныеЗайма.ТраншиЗайма.Итог("Сумма"), ДанныеЗайма.СуммаЗайма);
	ПредыдущийРазмерПлатежа = Сумма * КоэффициентАннуитета(ДанныеЗайма.ГодоваяСтавка * 0.01 / 12, СрокПоДатеОкончания(ДанныеЗайма.МесяцОкончания, ДанныеЗайма.МесяцПредоставления));
	ПредыдущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ПредыдущийРазмерПлатежа, ДанныеЗайма.МесяцОкончания, ДанныеЗайма);
	
	// Нет необходимости в расчетах, если ПредыдущийРазмерПлатежа полностью покрывает долго.
	Если Не ЗначениеЗаполнено(ПредыдущийОстатокДолга) Тогда
		Возврат ПредыдущийРазмерПлатежа;
	КонецЕсли;

	// Делаем второе предположение.
	ТекущийРазмерПлатежа = ПредыдущийРазмерПлатежа * 0.8;
	ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ТекущийРазмерПлатежа, ДанныеЗайма.МесяцОкончания, ДанныеЗайма);
	
	// Подбираем размер платежа, пока подобранный размер не будет приводить к нулевому остатку после всех платежей.
	Пока Окр(ТекущийОстатокДолга, 2) <> 0 
		И ТекущийРазмерПлатежа <> ПредыдущийРазмерПлатежа 
		И ТекущийОстатокДолга <> ПредыдущийОстатокДолга Цикл
		ИзменениеРазмераПлатежа = ТекущийРазмерПлатежа - ПредыдущийРазмерПлатежа;
		ПредыдущийРазмерПлатежа = ТекущийРазмерПлатежа;
		ТекущийРазмерПлатежа = ТекущийРазмерПлатежа - ИзменениеРазмераПлатежа - (ПредыдущийОстатокДолга / (ТекущийОстатокДолга - ПредыдущийОстатокДолга)) * ИзменениеРазмераПлатежа;
		ПредыдущийОстатокДолга = ТекущийОстатокДолга;
		ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ТекущийРазмерПлатежа, ДанныеЗайма.МесяцОкончания, ДанныеЗайма);
	КонецЦикла;
	
	Возврат ТекущийРазмерПлатежа;
	
КонецФункции

// Метод подбирает срок погашения займа.
//
// Параметры:
//	- ДанныеЗайма - структура
//
Функция СрокПогашенияЗайма(ДанныеЗайма) Экспорт
	
	Если ДанныеЗайма.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи")
		Или ДанныеЗайма.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем") Тогда 
		Если ДанныеЗайма.РазмерПогашения > 0 И Не ЗначениеЗаполнено(ДанныеЗайма.МесяцНачалаПогашения) 
			И ДанныеЗайма.СуммаЗайма / ДанныеЗайма.РазмерПогашения = Цел(ДанныеЗайма.СуммаЗайма / ДанныеЗайма.РазмерПогашения) Тогда
			Возврат ДанныеЗайма.СуммаЗайма / ДанныеЗайма.РазмерПогашения;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск срока выполняем также как и размер платежа интерполяционным поиском:
	// - в первом приближении считаем, что срок равен сроку при аннуитетных платежах 
	// и при единовременной выдаче всех траншей
	// - получаем остаток долга после выполнения всех платежей за такой срок
	// - во втором приближении если сальдо взаиморасчетов в первом приближении:
	//	* положительное - увеличиваем срок на 20%
	//	* отрицательное - уменьшаем срок на 20%
	// - далее уменьшаем (или увеличиваем) срок пропорционально изменению сальдо.
	
	КорректировкаСрока = Неопределено;
	
	// Делаем первое предположение.
	ПредыдущийСрок = ПримерныйСрокПогашенияЗайма(ДанныеЗайма);
	ПредыдущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ДанныеЗайма.РазмерПлатежа, 
		ДатаОкончанияПоСроку(ДанныеЗайма.МесяцПредоставления, Окр(ПредыдущийСрок)), ДанныеЗайма, КорректировкаСрока);
	
	// Делаем второе предположение.
	ТекущийСрок = ПредыдущийСрок * 0.8;
	ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ДанныеЗайма.РазмерПлатежа, 
		ДатаОкончанияПоСроку(ДанныеЗайма.МесяцПредоставления, Окр(ТекущийСрок)), ДанныеЗайма, КорректировкаСрока);
	
	// Подбираем срок, пока подобранный срок не будет приводить к нулевому остатку после всех платежей.
	Пока Окр(ТекущийОстатокДолга, 2) <> 0 
		И ТекущийСрок <> ПредыдущийСрок
		И Окр(ТекущийСрок - ПредыдущийСрок, 2) <> 0
		И ТекущийОстатокДолга <> ПредыдущийОстатокДолга Цикл
		ИзменениеСрока = ТекущийСрок - ПредыдущийСрок;
		ПредыдущийСрок = ТекущийСрок;
		ТекущийСрок = ПредыдущийСрок - ИзменениеСрока - (ПредыдущийОстатокДолга / (ТекущийОстатокДолга - ПредыдущийОстатокДолга)) * ИзменениеСрока;
		ПредыдущийОстатокДолга = ТекущийОстатокДолга;
		ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ДанныеЗайма.РазмерПлатежа, 
			ДатаОкончанияПоСроку(ДанныеЗайма.МесяцПредоставления, Окр(ТекущийСрок)), ДанныеЗайма, КорректировкаСрока);
	КонецЦикла;
	
	Возврат ?(КорректировкаСрока = Неопределено, ЦелоеВБольшуюСторону(ТекущийСрок), КорректировкаСрока);
	
КонецФункции

// Функция определяет количество дней в году.
//
// Параметры:
//	- Год - число 
//
Функция КоличествоДнейВГоду(Год) Экспорт
	
	// Если в феврале 29 дней - то 366, иначе 365.
	Если День(КонецМесяца(Дата(Год, 2, 1))) = 29 Тогда
		Возврат 366;
	Иначе
		Возврат 365;
	КонецЕсли;
	
КонецФункции

// Определяет приблизительный срок погашения займа.
//
Функция ПримерныйСрокПогашенияЗайма(ДанныеЗайма)
	
	Если ДанныеЗайма.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи") Тогда
		Возврат СрокПогашенияАннуитетнымиПлатежами(ДанныеЗайма.СуммаЗайма, ДанныеЗайма.ГодоваяСтавка * 0.01, ДанныеЗайма.РазмерПлатежа);
	Иначе
		Если ДанныеЗайма.РазмерПогашения > 0 Тогда
			Возврат ДанныеЗайма.СуммаЗайма / ДанныеЗайма.РазмерПогашения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// По фиксированному размеру платежа функция определяет 
// конечное сальдо после всех выполненных платежей такого размера.
// Используется для интерполирующего поиска размера платежа и срока погашения.
//
// Параметры:
// - РазмерПлатежа - размер фиксированного платежа.
// - МесяцОкончания - месяц окончания всех платежей.
// - ДанныеЗайма - настройки, условия договора займа.
// - КорректировкаСрока - параметр, который заполняется конкретным значением срока, 
// если заем будет погашен полностью раньше указанного месяца окончания.
//
Функция СальдоВзаиморасчетовПоЗавершению(РазмерПлатежа, МесяцОкончания, ДанныеЗайма, КорректировкаСрока = Неопределено)
	
	ПараметрыГрафика = ПараметрыПостроенияГрафикаПогашенияЗайма();
	ПараметрыГрафика.ДатаПредоставления = ДанныеЗайма.МесяцПредоставления;
	ПараметрыГрафика.МесяцНачала = ДанныеЗайма.МесяцПредоставления;
	ПараметрыГрафика.МесяцОкончания = МесяцОкончания;
	ПараметрыГрафика.ГодоваяСтавка = ДанныеЗайма.ГодоваяСтавка;
	ПараметрыГрафика.СуммаЗайма = ДанныеЗайма.СуммаЗайма;
	ПараметрыГрафика.СпособПредоставления = ДанныеЗайма.СпособПредоставления;
	ПараметрыГрафика.ТраншиЗайма = ДанныеЗайма.ТраншиЗайма;
	ПараметрыГрафика.СпособПогашения = ДанныеЗайма.СпособПогашения;
	ПараметрыГрафика.ВидПлатежей = ДанныеЗайма.ВидПлатежей;
	ПараметрыГрафика.РазмерПлатежа = РазмерПлатежа;
	ПараметрыГрафика.РазмерПогашения = ДанныеЗайма.РазмерПогашения;
	ПараметрыГрафика.МесяцНачалаПогашения = ДанныеЗайма.МесяцНачалаПогашения;
	ПараметрыГрафика.ОграничениеПлатежа = ДанныеЗайма.ОграничениеПлатежа; 
	ПараметрыГрафика.РасчетРазмераПлатежа = КорректировкаСрока = Неопределено;
	ПараметрыГрафика.ВключатьОстатокДолгаВПоследнийМесяц = Ложь;
	
	ГрафикПогашения = ГрафикПогашенияЗайма(ПараметрыГрафика);
				
	Если ГрафикПогашения.Количество() = 0 Тогда
		Возврат ДанныеЗайма.СуммаЗайма;
	КонецЕсли;
	
	СальдоПоЗавершению = ГрафикПогашения[ГрафикПогашения.ВГраница()].СальдоВзаиморасчетов;
	Если СальдоПоЗавершению <> 0 Тогда
		Возврат СальдоПоЗавершению;
	КонецЕсли;
	
	// Сальдо равно нулю, это значит, что займ был погашен полностью вместе с процентами, 
	// увеличение срока в данном случае приводит к одному и тому же результату, 
	// т.к. размер погашения - 0 и остаток долга также 0 (возможно при отсрочке)
	// в таком случае найдем последний месяц погашения, и уточним срок.
	
	Если ГрафикПогашения.Количество() = 1 Тогда
		Возврат 0;
	КонецЕсли;
	
	Индекс = ГрафикПогашения.ВГраница() - 1;
	Пока Индекс >= 0 Цикл
		Если ГрафикПогашения[Индекс].ОстатокДолга <> 0 Тогда
			КорректировкаСрока = Индекс + 1;
			Возврат ГрафикПогашения[Индекс].СальдоВзаиморасчетов;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецФункции

// Функция определяет срок погашения заданной суммы по размеру фиксированного 
// платежа.
//
// Параметры:
//	- Сумма - число, сумма займа.
//	- ГодоваяСтавка - процентная ставка.
//	- РазмерПлатежа - размер аннуитетного платежа.
//
Функция СрокПогашенияАннуитетнымиПлатежами(Сумма, ГодоваяСтавка, РазмерПлатежа)
	
	Если ГодоваяСтавка = 0 Тогда
		Если РазмерПлатежа = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Возврат Сумма / РазмерПлатежа;
	КонецЕсли;
		
	МесячнаяСтавка = ГодоваяСтавка / 12;
	
	КоэффициентАннуитета = РазмерПлатежа / Сумма;
	
	Возврат Log10(КоэффициентАннуитета / (КоэффициентАннуитета - МесячнаяСтавка)) / Log10(1 + МесячнаяСтавка);
	
КонецФункции

// Выполняет расчет коэффициента для аннуитетных платежей.
//
// Параметры:
//	- Ставка, тип число - процентная ставка за период погашения (месяц).
//	- Срок, тип Число - количество периодов погашения (месяцев).
//
Функция КоэффициентАннуитета(Ставка, Срок)
	
	Если Срок = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Ставка = 0 Тогда
		Возврат 1 / Срок;
	КонецЕсли;
	
	Возврат Ставка / (1 - Pow(1 + Ставка, - Срок));
	
КонецФункции

// Функция округляет число до большего.
//
// ЦелоеВБольшуюСторону(1.0) = 1
// ЦелоеВБольшуюСторону(1.1) = 2
//
Функция ЦелоеВБольшуюСторону(Число)
	
	Если Цел(Число) <> Число Тогда
		Возврат Цел(Число) + 1;
	КонецЕсли;
	
	Возврат Число;
	
КонецФункции

// Конструирует структуру для описания строки графика погашения займа.
//
Функция ОписаниеСтрокиГрафикаПогашенияЗайма() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("НомерМесяца", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Месяц", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("ОстатокДолга", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("НачислениеПроцентов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ПогашениеПроцентов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ПогашениеДолга", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ЕжемесячныйПлатеж", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("СальдоВзаиморасчетов", Новый ОписаниеТипов("Число"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Конструирует структуру, используемую в качестве параметров функции построения графика погашения займа.
//
Функция ПараметрыПостроенияГрафикаПогашенияЗайма() Экспорт
	
	// Используются следующие параметры построения графика платежей
	//	- ДатаПредоставления 
	//	- МесяцНачала - месяц начала построения графика
	//	- МесяцОкончания
	//	- ГодоваяСтавка 
	//	- СуммаЗайма 
	//	- СпособПредоставления 
	//	- ТраншиЗайма - коллекция траншей
	//	- СпособПогашения 
	//	- ВидПлатежей 
	//	- РазмерПлатежа - (необязательный) не задается в случае погашения дифференцированными платежами, например.
	//	- РазмерПогашения - (необязательный) не задается в случае погашения аннуитетными платежами,
	//	- МесяцНачалаПогашения - (необязательный) задается в случае отсрочки платежей, 
	//	- ОграничениеПлатежа - (необязательный), 
	//	- ВключатьОстатокДолгаВПоследнийМесяц - (необязательный), если Истина, 
	//		то остаток займа как есть будет включен в платеж последнего месяца, то есть сальдо всегда будет 0, 
	//		если Ложь - платеж последнего месяца формируется на общих основаниях.
	
	СтруктураПараметров = Новый Структура(
		"ДатаПредоставления,
		|МесяцНачала,
		|МесяцОкончания,
		|ГодоваяСтавка,
		|СуммаЗайма,
		|СпособПредоставления,
		|ТраншиЗайма,
		|СпособПогашения,
		|ВидПлатежей, 
		|РазмерПлатежа, 
		|РазмерПогашения, 
		|МесяцНачалаПогашения, 
		|ОграничениеПлатежа,
		|РасчетРазмераПлатежа, 
		|ВключатьОстатокДолгаВПоследнийМесяц");
		
	СтруктураПараметров.ДатаПредоставления = Дата(1, 1, 1);
	СтруктураПараметров.МесяцНачала = Дата(1, 1, 1);
	СтруктураПараметров.МесяцОкончания = Дата(1, 1, 1);
	СтруктураПараметров.ГодоваяСтавка = 0;
	СтруктураПараметров.СуммаЗайма = 0;
	СтруктураПараметров.ТраншиЗайма = Новый Массив;
	
	СтруктураПараметров.РасчетРазмераПлатежа = Ложь;
	СтруктураПараметров.ВключатьОстатокДолгаВПоследнийМесяц = Истина;
	
	Возврат СтруктураПараметров;
	
КонецФункции

#Область ПроцедурыФормДокументовДоговорыЗаймаСотрудникуИИзменениеУсловийДоговораЗаймаСотруднику

Процедура ЗаполнитьСрокПоДатеОкончания(Срок, ДатаОкончания, ДатаНачала) Экспорт
	
	Срок = ЗаймыСотрудникамКлиентСервер.СрокПоДатеОкончания(ДатаОкончания, ДатаНачала);
	
КонецПроцедуры

Процедура УстановитьЭлементыВводаТраншей(Форма, СпособПредоставления) Экспорт
	
	Перем СтраницаПредоставления;
	Перем СтраницаПогашения;
	
	Если СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияЗаймаСотруднику.Траншами") Тогда
		СтраницаПредоставления = Форма.Элементы.ПредоставлениеТраншамиСтраница;
		СтраницаПогашения = Форма.Элементы.ПогашениеПриВыдачиТраншамиСтраница;
	Иначе
		СтраницаПредоставления = Форма.Элементы.ПредоставлениеЕдиновременноСтраница;
		СтраницаПогашения = Форма.Элементы.ПогашениеЕдиновременноСтраница;
	КонецЕсли;
	
	Форма.Элементы.ПредоставляемаяСуммаСтраницы.ТекущаяСтраница = СтраницаПредоставления;
	Форма.Элементы.РазмерПогашенияСтраницы.ТекущаяСтраница = СтраницаПогашения;
	
КонецПроцедуры

Процедура УстановитьЭлементыВводаРазмераПогашения(Форма, ВидПлатежей) Экспорт
	
	Перем СтраницаРазмераПогашения;
	
	Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи") Тогда
		СтраницаРазмераПогашения = Форма.Элементы.РазмерПлатежаСтраница;
	ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты") Тогда
		СтраницаРазмераПогашения = Форма.Элементы.РазмерПроцентовСтраница;
	Иначе
		СтраницаРазмераПогашения = Форма.Элементы.РазмерПогашенияСтраница;
	КонецЕсли;
	
	Форма.Элементы.СуммыПогашенияСтраницы.ТекущаяСтраница = СтраницаРазмераПогашения;
	
КонецПроцедуры

Процедура УстановитьДоступностьНастройкиПогашения(Форма, СпособПогашения, ВидПлатежей, ДатаНачалаПогашенияПоУмолчанию) Экспорт
	
	НастройкаПлатежейДоступна = СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗаймаСотруднику.ВТечениеСрока");
	
	Форма.Элементы.ВидПлатежей.Доступность = НастройкаПлатежейДоступна;
	Форма.Элементы.РазмерПогашения.Доступность = НастройкаПлатежейДоступна;
	Форма.Элементы.РазмерПлатежа.Доступность = НастройкаПлатежейДоступна;
	Форма.Элементы.ТраншиЗайма.Доступность = НастройкаПлатежейДоступна;
	Форма.Элементы.ПредоставляетсяОтсрочкаПлатежа.Доступность = НастройкаПлатежейДоступна;
	
	УстановитьЭлементыВводаОтсрочки(Форма, ДатаНачалаПогашенияПоУмолчанию);
	УстановитьДоступностьОграниченияПлатежа(Форма, ВидПлатежей);
	
КонецПроцедуры

Процедура УстановитьЭлементыВводаОтсрочки(Форма, ДатаНачалаПогашенияПоУмолчанию) Экспорт
	
	Форма.Элементы.МесяцНачалаПогашения.Доступность = Форма.ПредоставляетсяОтсрочкаПлатежа И Форма.Элементы.ПредоставляетсяОтсрочкаПлатежа.Доступность;
	Форма.Элементы.ОграничениеПлатежа.Доступность = Форма.ПредоставляетсяОтсрочкаПлатежа И Форма.Элементы.ПредоставляетсяОтсрочкаПлатежа.Доступность;
	Если Не Форма.ПредоставляетсяОтсрочкаПлатежа Тогда
		Форма.Объект.ДатаНачалаПогашения = Неопределено;
		Форма.Объект.ОграничениеПлатежа = Неопределено;
	Иначе
		Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаПогашения) Тогда
			Форма.Объект.ДатаНачалаПогашения = ДатаНачалаПогашенияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ДатаНачалаПогашения", "МесяцНачалаПогашения");
	
КонецПроцедуры

Процедура УстановитьДоступностьОграниченияПлатежа(Форма, ВидПлатежей) Экспорт
	
	ДоступностьОграниченияПлатежа = Форма.ПредоставляетсяОтсрочкаПлатежа 
		И ВидПлатежей <> ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи");
	
	Форма.Элементы.ОграничениеПлатежа.Доступность = ДоступностьОграниченияПлатежа;
	Если Не ДоступностьОграниченияПлатежа Тогда
		Форма.Объект.ОграничениеПлатежа = Форма.Объект.РазмерПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЭлементыВыдачиЗаймаДокументомДоговора(Форма) Экспорт 
	
	Если Не Форма.ВыдачаЗаймаДокументомДоговораДоступна Тогда 
		Возврат;
	КонецЕсли;
	
	ВыдачаТраншами = Форма.Объект.СпособПредоставления = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияЗаймаСотруднику.Траншами");
	КоличествоДокументовВыдачи = Форма.ДокументыВыдачиЗайма.Количество();
	
	Если ВыдачаТраншами Тогда 
		Если Форма.Объект.ТраншиЗайма.НайтиСтроки(Новый Структура("ДатаПредоставления", Форма.Объект.ДатаПредоставления)).Количество() = 0 Тогда 
			Форма.Элементы.ВыдачаЗаймаДокументомДоговораСтраницы.ТекущаяСтраница = Форма.Элементы.ВыдачаЗаймаДокументомДоговораПустаяСтраница;
			Форма.Объект.ЗаемПоДоговоруВыданПолностью = Ложь;
			Форма.Объект.ДатаВыдачи = '00010101';
			Возврат;
		Иначе
			Форма.Элементы.ВыдачаЗаймаДокументомДоговораСтраницы.ТекущаяСтраница = Форма.Элементы.ЗаемВыданПолностьюСтраница;
			Форма.Элементы.ЗаемПоДоговоруВыданПолностью.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Транш за %1 выдан в полном объеме'"), НРег(Формат(Форма.Объект.ДатаПредоставления, "ДФ=""ММММ гггг""")));
		КонецЕсли;
	Иначе
		Форма.Элементы.ВыдачаЗаймаДокументомДоговораСтраницы.ТекущаяСтраница = Форма.Элементы.ЗаемВыданПолностьюСтраница;
		Форма.Элементы.ЗаемПоДоговоруВыданПолностью.Заголовок = НСтр("ru='Заем по договору выдан полностью'");
	КонецЕсли;
	
	Если КоличествоДокументовВыдачи > 0 И Не ВыдачаТраншами Тогда
		Форма.Объект.ДатаВыдачи = '00010101';
		Если КоличествоДокументовВыдачи = 1 Тогда
			Форма.Элементы.ДатаВыдачиЗаймаСтраницы.ТекущаяСтраница = Форма.Элементы.ДокументВыдачиСтраница;
			Форма.Элементы.ОткрытьДокументВыдачиЗайма.Заголовок = Строка(Форма.ДокументыВыдачиЗайма[0]);
		Иначе 
			Форма.Элементы.ДатаВыдачиЗаймаСтраницы.ТекущаяСтраница = Форма.Элементы.СписокДокументовВыдачиСтраница;
		КонецЕсли;
	ИначеЕсли Форма.Объект.ЗаемПоДоговоруВыданПолностью Тогда
		Форма.Элементы.ДатаВыдачиЗаймаСтраницы.ТекущаяСтраница = Форма.Элементы.ДатаВыдачиСтраница; 
		Форма.Объект.ДатаВыдачи = ?(ЗначениеЗаполнено(Форма.Объект.ДатаВыдачи), Форма.Объект.ДатаВыдачи, Форма.Объект.ДатаПредоставления);
		Если КоличествоДокументовВыдачи > 0 И ВыдачаТраншами Тогда 
			Форма.Элементы.ДатаВыдачиСписокДокументовСтраницы.ТекущаяСтраница = Форма.Элементы.ДатаВыдачиДокументыСтраница;
		Иначе 
			Форма.Элементы.ДатаВыдачиСписокДокументовСтраницы.ТекущаяСтраница = Форма.Элементы.ДатаВыдачиДокументыПустаяСтраница;
		КонецЕсли;
	ИначеЕсли КоличествоДокументовВыдачи > 0 И ВыдачаТраншами Тогда 
		Форма.Элементы.ДатаВыдачиЗаймаСтраницы.ТекущаяСтраница = Форма.Элементы.СписокДокументовВыдачиСтраница;
		Форма.Объект.ДатаВыдачи = '00010101';
	Иначе 
		Форма.Элементы.ДатаВыдачиЗаймаСтраницы.ТекущаяСтраница = Форма.Элементы.ВыдатьЗаемСтраница; 
		Форма.Объект.ДатаВыдачи = '00010101';
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьВыдачиЗаймаДокументомДоговора(Форма) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СпособПредоставления", "ТолькоПросмотр", Форма.Объект.ЗаемЧастичноПогашен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ЗаемПоДоговоруВыданПолностью", "ТолькоПросмотр", Форма.Объект.ЗаемЧастичноПогашен);
	
КонецПроцедуры

Процедура УстановитьЭлементыВводаЧастичногоПогашенияЗайма(Форма) Экспорт 

	Если Форма.Объект.ЗаемЧастичноПогашен Тогда
		Форма.Объект.ЗаемПоДоговоруВыданПолностью = Истина;
		ЕдиновременнаяВыдача = ПредопределенноеЗначение("Перечисление.СпособыПредоставленияЗаймаСотруднику.Единовременно");
		Если Форма.Объект.СпособПредоставления <> ЕдиновременнаяВыдача Тогда
			Форма.Объект.СпособПредоставления = ЕдиновременнаяВыдача;
			ЗаймыСотрудникамКлиентСервер.УстановитьЭлементыВводаТраншей(Форма, Форма.Объект.СпособПредоставления);
        КонецЕсли;
		Форма.Элементы.ПогашенныеСуммыСтраницы.ТекущаяСтраница = Форма.Элементы.СуммаИПроцентыСтраница;
		Если Форма.Объект.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗаймаСотруднику.ПоОкончанииСрока") Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашеннаяСуммаЗайма", "Доступность", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "Доступность", Истина);
		ИначеЕсли Форма.Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем") Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашеннаяСуммаЗайма", "Доступность", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "Доступность", Ложь);
			Форма.Объект.ПогашенныеПроценты = 0;
		ИначеЕсли Форма.Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты") Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашеннаяСуммаЗайма", "Доступность", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "Доступность", Истина);
			Форма.Объект.ПогашеннаяСуммаЗайма = 0;
		Иначе 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашеннаяСуммаЗайма", "Доступность", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "Доступность", Истина);
		КонецЕсли;	
	Иначе
		Если Не Форма.ВыдачаЗаймаДокументомДоговораДоступна Тогда 
			Форма.Объект.ЗаемПоДоговоруВыданПолностью = Ложь;
			Форма.Объект.ДатаВыдачи = '00010101';
		КонецЕсли;
		Форма.Элементы.ПогашенныеСуммыСтраницы.ТекущаяСтраница = Форма.Элементы.ПогашенныеСуммыПустаяСтраница;
		Форма.Объект.ПогашенныеПроценты = 0;
		Форма.Объект.ПогашеннаяСуммаЗайма = 0;
		Форма.Объект.ДатаПогашения = '00010101';
	КонецЕсли;	
	
	ЗаймыСотрудникамКлиентСервер.УстановитьЭлементыВыдачиЗаймаДокументомДоговора(Форма);
	УстановитьДоступностьВыдачиЗаймаДокументомДоговора(Форма);

КонецПроцедуры

Процедура УстановитьОтметкуНезаполненногоПогашенныхПроцентов(Форма) Экспорт 
	
	АвтоОтметкаНезаполненного = Форма.Объект.ПроцентнаяСтавка <> 0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	ОтметкаНезаполненного = Форма.Объект.ПроцентнаяСтавка <> 0 И Не ЗначениеЗаполнено(Форма.Объект.ПогашенныеПроценты); 
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПогашенныеПроценты", "ОтметкаНезаполненного", ОтметкаНезаполненного); 
	
КонецПроцедуры	

Процедура ЗаполнитьРазмерПроцентов(РазмерПроцентов, ВидПлатежей, Сумма, ПроцентнаяСтавка) Экспорт
	
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты"));
	
	Если ВидыПлатежей.Найти(ВидПлатежей) = Неопределено Тогда
		РазмерПроцентов = 0;
		Возврат;
	КонецЕсли;
	
	РазмерПроцентов = Сумма * ПроцентнаяСтавка * 0.01 / 12;
	
КонецПроцедуры

Процедура ЗаполнитьСрокиПогашенияТраншей(Форма) Экспорт
	
	Для Каждого СтрокаТранша Из Форма.Объект.ТраншиЗайма Цикл
		ЗаполнитьСрокПоДатеОкончания(СтрокаТранша.Срок, СтрокаТранша.ДатаПогашения, СтрокаТранша.ДатаПредоставления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияТраншей(Форма) Экспорт
	
	Для Каждого СтрокаТранша Из Форма.Объект.ТраншиЗайма Цикл
		ЗаполнитьПредставлениеТранша(Форма, СтрокаТранша);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеТранша(Форма, СтрокаТранша) Экспорт
	
	СтрокаТранша.ПредставлениеТранша = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2 (%3)'"), СтрокаТранша.Сумма, Форма.Валюта, СтрокаТранша.МесяцПредоставленияСтрокой);
	
КонецПроцедуры

Процедура ЗаполнитьРазмерПогашения(РазмерПогашения, Сумма, Срок, ВидПлатежей, ОграничениеПлатежа) Экспорт
	
	// Виды платежей, для которых рассчитывается размер погашения основного долга.
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи"));
	ВидыПлатежей.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем"));
	
	Если Срок = 0 
		Или ВидыПлатежей.Найти(ВидПлатежей) = Неопределено Тогда
		РазмерПогашения = 0;
		Возврат;
	КонецЕсли;
	
	РазмерПогашения = ?(ОграничениеПлатежа = 0, Сумма / Срок, Мин(Сумма / Срок, ОграничениеПлатежа));
	
КонецПроцедуры

Процедура ЗаполнитьРазмерПлатежа(РазмерПлатежа, Срок, ВидПлатежей, ДанныеЗайма) Экспорт
	
	// Виды платежей, для которых рассчитывается размер аннуитетного платежа.
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи"));
	
	Если Срок = 0 
		Или ВидыПлатежей.Найти(ВидПлатежей) = Неопределено Тогда
		РазмерПлатежа = 0;
		Возврат;
	КонецЕсли;
	
	РазмерПлатежа = ЗаймыСотрудникамКлиентСервер.РазмерАннуитетногоПлатежа(ДанныеЗайма);
	
КонецПроцедуры

Процедура ЗаполнитьДатуОкончанияПоСроку(РедактируемыйОбъект, ПутьКДатеНачала, ПутьКДатеОкончания, ПутьКПредставлениюДатыОкончания, Срок) Экспорт
	
	ДатаНачала = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьКДатеНачала);
	
	ДатаОкончания = ЗаймыСотрудникамКлиентСервер.ДатаОкончанияПоСроку(ДатаНачала, Срок);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьКДатеОкончания, ДатаОкончания);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьКДатеОкончания, ПутьКПредставлениюДатыОкончания);
	
КонецПроцедуры

Процедура ЗаполнитьСрокПолногоПогашенияЗайма(Форма, СпособПогашения, ВидПлатежей, Срок, ДанныеЗайма) Экспорт
	
	Если СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗаймаСотруднику.ПоОкончанииСрока") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты") Тогда 
		Возврат;
	КонецЕсли;
	
	РасчетСрокаВозможен = Истина;
	Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи") Тогда
		МесячнаяСтавка = ДанныеЗайма.ГодоваяСтавка / 12;
		МинимальныйРазмерПлатежа = ДанныеЗайма.СуммаЗайма * МесячнаяСтавка / 100;
		МаксимальныйРазмерПлатежа = ДанныеЗайма.СуммаЗайма;
		Если ДанныеЗайма.РазмерПлатежа <= МинимальныйРазмерПлатежа 
			Или ДанныеЗайма.РазмерПлатежа > МаксимальныйРазмерПлатежа Тогда
			РасчетСрокаВозможен = Ложь;
		КонецЕсли;
	ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи") 
		Или ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем") Тогда
		РасчетСрокаВозможен = ДанныеЗайма.РазмерПогашения > 0;
	КонецЕсли;
	
	Срок = 0;
	Если РасчетСрокаВозможен Тогда
		Срок = ЗаймыСотрудникамКлиентСервер.СрокПогашенияЗайма(ДанныеЗайма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСрокПоРазмеруПогашения(РазмерПогашения, Сумма, Срок) Экспорт
	
	Если РазмерПогашения = 0 Тогда
		Срок = 0;
		Возврат;
	КонецЕсли;
	
	Срок = Сумма / РазмерПогашения;
	
КонецПроцедуры

Процедура ГрафикПредоставленияЗаймаВосстановитьПорядокСтрок(КоллекцияСтрок, ИмяПоляУпорядочивания, ДанныеТекущейСтроки) Экспорт
	
	Если КоллекцияСтрок.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки[ИмяПоляУпорядочивания]) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексИсходный = КоллекцияСтрок.Индекс(ДанныеТекущейСтроки);
	ИндексРезультат = ИндексИсходный;
	
	// Выбираем направление, в котором нужно сдвинуть.
	Направление = 0;
	Если ИндексИсходный = 0 Тогда
		// вниз
		Направление = 1;
	КонецЕсли;
	Если ИндексИсходный = КоллекцияСтрок.Количество() - 1 Тогда
		// вверх
		Направление = -1;
	КонецЕсли;
	
	Если Направление = 0 Тогда
		Если КоллекцияСтрок[ИндексИсходный][ИмяПоляУпорядочивания] > КоллекцияСтрок[ИндексРезультат + 1][ИмяПоляУпорядочивания] Тогда
			// вниз
			Направление = 1;
		КонецЕсли;
		Если КоллекцияСтрок[ИндексИсходный][ИмяПоляУпорядочивания] < КоллекцияСтрок[ИндексРезультат - 1][ИмяПоляУпорядочивания] Тогда
			// вверх
			Направление = -1;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Направление = 1 Тогда
		// Сдвигать нужно пока значение в текущей строке больше, чем в следующей.
		Пока ИндексРезультат < КоллекцияСтрок.Количество() - 1 
			И КоллекцияСтрок[ИндексИсходный][ИмяПоляУпорядочивания] > КоллекцияСтрок[ИндексРезультат + 1][ИмяПоляУпорядочивания] Цикл
			ИндексРезультат = ИндексРезультат + 1;
		КонецЦикла;
	Иначе
		// Сдвигать нужно пока значение в текущей строке меньше, чем в предыдущей.
		Пока ИндексРезультат > 0 
			И КоллекцияСтрок[ИндексИсходный][ИмяПоляУпорядочивания] < КоллекцияСтрок[ИндексРезультат - 1][ИмяПоляУпорядочивания] Цикл
			ИндексРезультат = ИндексРезультат - 1;
		КонецЦикла;
	КонецЕсли;
	
	КоллекцияСтрок.Сдвинуть(ИндексИсходный, ИндексРезультат - ИндексИсходный);
	
КонецПроцедуры

Процедура ЗаполнитьДатуТраншаПоУмолчанию(ДанныеТекущейСтроки, КоллекцияТраншей, ДатаПредоставления, ДатаОкончания) Экспорт
	
	Если КоллекцияТраншей.Количество() = 1 Тогда
		ДатаТранша = ДатаПредоставления;
	Иначе
		ДатаТранша = КоллекцияТраншей[КоллекцияТраншей.Количество() - 2].ДатаПредоставления;
	КонецЕсли;
	
	ДанныеТекущейСтроки.ДатаПредоставления = ДатаТранша;
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ДанныеТекущейСтроки, "ДатаПредоставления", "МесяцПредоставленияСтрокой");
	
	ДанныеТекущейСтроки.ДатаПогашения = ДатаОкончания;
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ДанныеТекущейСтроки, "ДатаПогашения", "МесяцПогашенияСтрокой");
	
КонецПроцедуры

Процедура РассчитатьПогашеннуюСуммуЗайма(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Если Не Объект.ЗаемЧастичноПогашен Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыГрафика = ЗаймыСотрудникамКлиентСервер.ПараметрыПостроенияГрафикаПогашенияЗайма();
	
	ПараметрыГрафика.ДатаПредоставления = ?(Объект.ЗаемПоДоговоруВыданПолностью, Объект.ДатаВыдачи, Объект.ДатаПредоставления);
	ПараметрыГрафика.МесяцНачала = Объект.ДатаПредоставления;
	ПараметрыГрафика.МесяцОкончания = Объект.ДатаОкончания;
	ПараметрыГрафика.ГодоваяСтавка = Объект.ПроцентнаяСтавка;
	ПараметрыГрафика.СуммаЗайма = Объект.Сумма;
	ПараметрыГрафика.СпособПредоставления = Объект.СпособПредоставления;
	ПараметрыГрафика.ТраншиЗайма = Объект.ТраншиЗайма;
	ПараметрыГрафика.СпособПогашения = Объект.СпособПогашения;
	ПараметрыГрафика.ВидПлатежей = Объект.ВидПлатежей;
	ПараметрыГрафика.РазмерПлатежа = Объект.РазмерПлатежа;
	ПараметрыГрафика.РазмерПогашения = Объект.РазмерПогашения;
	ПараметрыГрафика.МесяцНачалаПогашения = Объект.ДатаНачалаПогашения;
	ПараметрыГрафика.ОграничениеПлатежа = Объект.ОграничениеПлатежа; 
	ПараметрыГрафика.ВключатьОстатокДолгаВПоследнийМесяц = Истина;
	
	ГрафикПогашения = ЗаймыСотрудникамКлиентСервер.ГрафикПогашенияЗайма(ПараметрыГрафика);
	
	Объект.ПогашеннаяСуммаЗайма = 0;
	Объект.ПогашенныеПроценты = 0;
	
	Для Каждого СтрокаГрафика Из ГрафикПогашения Цикл 
		Если НачалоМесяца(Объект.ДатаПогашения) > СтрокаГрафика.Месяц Тогда 
			Объект.ПогашеннаяСуммаЗайма = Мин(Объект.ПогашеннаяСуммаЗайма + СтрокаГрафика.ПогашениеДолга, Объект.Сумма);
			Объект.ПогашенныеПроценты = Объект.ПогашенныеПроценты + СтрокаГрафика.ПогашениеПроцентов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
