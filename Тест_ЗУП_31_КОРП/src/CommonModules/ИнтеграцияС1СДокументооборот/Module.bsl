////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль РаботаС1СДокументооборот: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Выполняет запрос к сервису, превращая сообщения об ошибках в вид, понятный пользователю.
//
// Параметры:
//   Прокси - WSПрокси - прокси сервиса ДО.
//   Запрос - ОбъектXDTO - выполняемый запрос.
//
// Возвращаемое значение:
//   ОбъектXDTO - результат выполнения запроса.
//
Функция ВыполнитьЗапрос(Прокси, Запрос) Экспорт
	
	Попытка
		Результат = Прокси.execute(Запрос);
		Возврат Результат;
	Исключение
		Инфо = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
		// По известным видам ошибок изменим текст сообщения.
		Если Найти(КраткоеПредставлениеОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'")) <> 0 Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			КраткоеПредставлениеОшибки = НСтр("ru = 'Неверное имя пользователя или пароль. Проверьте имя
				|и пароль в настройках авторизации в 1С:Документообороте.'");
		// По неизвестным видам ошибок превратим HTML в простой текст.
		ИначеЕсли Найти(КраткоеПредставлениеОшибки, "<html>") <> 0 Тогда
			HTMLДокумент = Новый ФорматированныйДокумент;
			HTMLДокумент.УстановитьHTML(КраткоеПредставлениеОшибки, Новый Структура);
			КраткоеПредставлениеОшибки = HTMLДокумент.ПолучитьТекст();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение КраткоеПредставлениеОшибки;
	КонецПопытки;
	
КонецФункции

// Устанавливает параметры сеанса по массиву имен.
//
// Параметры:
//   ИменаПараметров - Массив - массив строк с именами параметров сеанса к установке.
//
Процедура УстановитьПараметрыСеансаПоМассивуИмен(ИменаПараметров) Экспорт
	
	Если ТипЗнч(ИменаПараметров) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		УстановитьПараметрыСеанса(ИмяПараметра, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой "Интеграция с 1С:Документооборотом".
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПарольИзвестен" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПарольИзвестен");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПароль" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПароль");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИмяПользователя" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИмяПользователя");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотВерсияСервиса" Тогда
		
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
			Или ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			
		Иначе
			
			#Если ВнешнееСоединение Тогда
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			#Иначе
			Если ЭтоЗадание() Тогда
			#КонецЕсли
				УстановитьВерсиюСервиса(Неопределено,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			Иначе // получим версию сервиса асинхронно, в фоновом задании
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Информация,,,
					НСтр("ru = 'Начато получение версии сервиса'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор));
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
				ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = МассивПараметров[0];
				ФоновыеЗадания.Выполнить("ИнтеграцияС1СДокументооборот.УстановитьВерсиюСервиса", МассивПараметров);
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотВерсияСервиса");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Получает версию сервиса, обратившись к нему напрямую.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Функция ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС)
	
	Прокси = ПолучитьПрокси(Ложь, // не вызывать исключение
		ИмяПользователя,
		Пароль,
		ИспользуетсяАутентификацияОС);
	
	Если Прокси = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Сервис недоступен'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат "0.0.0.0";
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetVersionRequest");
		Ответ = Прокси.execute(Запрос);
		Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
			ТекстОшибки = Ответ.description;
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			Возврат "0.0.0.0";
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Подключен сервис версии %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Ответ.versionNumber);
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			Возврат Ответ.versionNumber;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Получает версию сервиса из параметров сеанса, возможно, инициируя ее получение в фоновом задании.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, установленный для прокси таймаут в секундах,
//     в течение которого клиент может ожидать успешного подключения или ответа о недоступности
//     сервиса.
//
Функция ВерсияСервиса(Таймаут = Неопределено) Экспорт
	
	Таймаут = ТаймаутСервиса();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат "0.0.0.0";
	КонецЕсли;
	
	ВерсияСервиса = ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса;
	Если ЭтоАдресВременногоХранилища(ВерсияСервиса) Тогда
		ВерсияСервиса = ПолучитьИзВременногоХранилища(ВерсияСервиса);
	КонецЕсли;
	
	Возврат ВерсияСервиса;
	
КонецФункции

// Устанавливает версию сервиса в параметрах сеанса. Вызвается напрямую или как фоновое задание.
//
// Параметры:
//   АдресВХранилище - Строка - адрес во временном хранилище для помещения версии сервиса (для ФЗ).
//                   - Неопределено - версию сервиса следует установить сразу в параметры сеанса.
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Процедура УстановитьВерсиюСервиса(АдресВХранилище, ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС) Экспорт
	
	ВерсияСервиса = ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	
	Если АдресВХранилище = Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияСервиса;
	Иначе
		ПоместитьВоВременноеХранилище(ВерсияСервиса, АдресВХранилище);
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершено получение версии сервиса'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавляет команды Документооборота на форму объекта при создании на сервере.
// 
// Параметры:
//   Форма - УправляемаяФорма - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотПереопределяемый.ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо")
			<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотСоздатьПисьмо,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
		И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] = 
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] = 
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
		
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание") 
		и ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
		Основание = Форма.Параметры.Основание;
		Если Основание.Свойство("Объект1СДокументооборота") Тогда
			КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДокументооборота");
			КомандаФормы.Действие = Основание.Объект1СДокументооборота.ID;
		КонецЕсли;
	КонецЕсли;
	
	// Исключения не должны делать невозможным открытие форм интегрируемых объектов.
	Попытка
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота") Тогда
			// Хронометраж.
			Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP", Истина) Тогда
				ДобавитьКомандуПереключитьХронометраж(Форма, МестоРазмещенияКоманд);
				ДобавитьКомандуУказатьТрудозатраты(Форма, МестоРазмещенияКоманд);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщенияОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Вызвается при создании форм интеграции, размещаемых на рабочем столе. Позволяет отказаться от их создания при работе
// в неразделенном сеансе или при выполнении обновления ИБ.
//
Процедура ПриСозданииНаСервереФормРазмещаемыхНаРабочемСтоле(Отказ) Экспорт
	
	// Проверим необходимость показа формы на рабочем столе.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	Если ПараметрыКлиента.Получить("СкрытьРабочийСтолПриНачалеРаботыСистемы") <> Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Помещает в дополнительные свойства идентификатор объекта-основания. Вызывается перед записью объекта.
//
// Параметры:
//   Форма - УправляемаяФорма - форма записываемого объекта.
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект.
//   ПараметрыЗаписи - Структура - см. описание события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	// Команда используется для передачи идентификатора объекта ДО при создании на основании.
	КомандаИдентификатор = Форма.Команды.Найти("ИдентификаторОбъектаДокументооборота");
	Если КомандаИдентификатор <> Неопределено Тогда
		Объект.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаДокументооборота", 
			КомандаИдентификатор.Действие);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMError вызывает исключение.
//
// Параметры:
//   Прокси - WSПрокси - прокси сервиса ДО.
//   Ответ - ОбъектXDTO - проверяемый результат вызова сервиса.
//
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		
		ТекстОшибки = Ответ.description;
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		// Очистим его от лишних сведений.
		Пока Найти(ТекстОшибки,"}") > 0 Цикл
			ТекстОшибки = Сред(ТекстОшибки,Найти(ТекстОшибки,"}") + 3);
		КонецЦикла;
		ПозицияТекстаПоПричине = СтрНайти(ТекстОшибки,
			Символы.ПС + НСтр("ru='по причине:'"),
			НаправлениеПоиска.СКонца);
		Если ПозицияТекстаПоПричине <> 0 Тогда
			ТекстОшибки = Сред(ТекстОшибки, ПозицияТекстаПоПричине + 13);
		КонецЕсли;
		Если Найти(ТекстОшибки, "ВызватьИсключение") Тогда
			ТекстОшибки = Сред(ТекстОшибки,1, Найти(ТекстОшибки, "ВызватьИсключение") - 1);
		КонецЕсли;
		
		ВызватьИсключение
			Ответ.subject + ":" + Символы.ПС + ТекстОшибки;
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит объекта XDTO по объекту ИС.
//
// Параметры:
//   Прокси - WSПрокси - прокси сервиса ДО.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   ОбъектИС - ЛюбаяСсылка - источник заполнения.
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС) Экспорт 
	
	ОбъектXDTO.name = Строка(ОбъектИС);
	ОбъектXDTO.objectId = СоздатьObjectID(Прокси, "", "");
	
	ВнешнийОбъект = СоздатьОбъект(Прокси, "ExternalObject");
	ПолноеИмя = ОбъектИС.Метаданные().ПолноеИмя();
	Если Найти(ПолноеИмя, "Перечисление.") > 0 Тогда 
		ВнешнийОбъект.id = ИмяЗначенияПеречисления(ОбъектИС);
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(ОбъектИС);
	Иначе
		ВнешнийОбъект.id = Строка(ОбъектИС.УникальныйИдентификатор());
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(ОбъектИС);
	КонецЕсли;
	ОбъектXDTO.externalObject = ВнешнийОбъект;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС);
	
КонецПроцедуры

// Заполняет свойства объекта-приемника по объекту-источнику.
//
// Параметры:
//   Прокси - WSПрокси - прокси сервиса ДО.
//   Приемник - ОбъектXDTO - заполняемый объект.
//   Источник - ОбъектXDTO - источник данных заполнения.
//
Процедура ЗаполнитьЗначенияСвойствXDTO(Прокси, Приемник, Источник) Экспорт
	
	Для каждого Свойство из Источник.Свойства() Цикл
		СвойствоПриемника = Приемник.Свойства().Получить(Свойство.Имя);
		Если СвойствоПриемника <> Неопределено Тогда
			Если Источник.Установлено(Свойство.Имя) ИЛИ СвойствоПриемника.НижняяГраница <> 0 Тогда
				Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда 
					ОбъектноеСвойство = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Свойство.Тип.Имя);
					ЗаполнитьЗначенияСвойствXDTO(Прокси, ОбъектноеСвойство, Источник[Свойство.Имя]);
					Приемник[Свойство.Имя] = ОбъектноеСвойство;
				ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
					Для каждого Элемент из Источник[Свойство.Имя] Цикл
						НовыйЭлемент = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,Свойство.Тип.Имя);
						ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйЭлемент, Элемент);  
						Приемник[Свойство.Имя].Добавить(НовыйЭлемент);
					КонецЦикла;
				Иначе
					Приемник[Свойство.Имя] = Источник[Свойство.Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает объект XDTO исходящего письма, заполненный по умолчанию.
//
// Параметры:
//   Прокси - WSПрокси - прокси сервиса ДО.
//   Предмет - Структура - описание предмета (id, type).
//
// Возвращаемое значение:
//   ОбъектXDTO - новое исходящее письмо.
//
Функция НовоеИсходящееПисьмо(Прокси, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewEMailRequest");
		
	Запрос.type = "DMOutgoingEMail";
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.id = Предмет.id;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Если ПроверитьТип(Прокси, Ответ, "DMGetNewEMailResponse") Тогда
		Возврат Ответ.object;
	Иначе
		ВызватьИсключение НСтр("ru = 'Эта версия 1С:Документооборота не поддерживает создание исходящих писем'");
	КонецЕсли;
	
КонецФункции

//Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
//Параметры:
//	Строка                 - Строка - текст с разделителями;
//	Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//	ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
// Возвращаемое значение:
//	Массив - массив строк.
//
//Примеры:
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//	РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//	РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Создает прокси веб-сервиса Документооборота с настройками авторизации из параметров сеанса или, если это
// невозможно, например, при создании прокси в фоновом задании, с настройками, переданными напрямую.
//
// Параметры:
//   ВызватьИсключение - Булево - Истина, если при невозможности получения следует вызвать исключение.
//   ИмяПользователя - Строка - имя пользователя ДО, или
//                   - Неопределено - признак необходимости получить имя, сохраненное в параметрах сеанса.
//   Пароль - Строка - пароль пользователя ДО, или
//          - Неопределено - признак необходимости получить пароль, сохраненное в параметрах сеанса.
//   ИспользуетсяАутентификацияОС - Булево - признак необходимости использовать аутентификацию ОС (8.3.7 и выше), или
//                                - Неопределено - признак необходимости получить этот признак из параметров сеанса.
//
// Возвращаемое значение:
//    Прокси веб-сервиса WSПрокси или Неопределено.
//
Функция ПолучитьПрокси(ВызыватьИсключение = Истина, ИмяПользователя = Неопределено, Пароль = Неопределено,
	ИспользуетсяАутентификацияОС = Неопределено) Экспорт
	
	// Получим настройки авторизации из параметров сеанса, если они не переданы параметрами функции.
	Если ИспользуетсяАутентификацияОС = Неопределено Тогда 
		ИспользуетсяАутентификацияОС = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПользователя)
		И Не ИспользуетсяАутентификацияОС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		Если Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен
			И Не ИспользуетсяАутентификацияОС Тогда
			Возврат Неопределено;
		КонецЕсли;
		Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
	КонецЕсли;
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЭтоСоединениеSSL Тогда
		Если СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
		КонецЕсли;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dm.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			ТаймаутСервиса(),
			ЗащищенноеСоединение,
			ИспользуетсяАутентификацияОС);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				ТаймаутСервиса(),
				ЗащищенноеСоединение,
				ИспользуетсяАутентификацияОС);
		Исключение
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap",
			ИнтернетПрокси,
			ТаймаутСервиса(),
			ЗащищенноеСоединение,,
			ИспользуетсяАутентификацияОС);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(Инфо));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
		
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

// Возвращает таймаут прокси веб-сервиса Документооборота, возможно, переопределенный в настройках.
//
// Возвращаемое значение:
//   Число - таймаут в секундах.
//
Функция ТаймаутСервиса() Экспорт
	
	Таймаут = 15;
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииТаймаутаСервиса(Таймаут);
	
	Возврат Таймаут;
	
КонецФункции

//Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm".
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ТипОбъекта - тип объекта XDTO
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Если Прокси = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Интеграция с 1С:Документооборотом не настроена, или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'");
	КонецЕсли;
	
	НовыйОбъект = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта));
	Если СвойствоСуществует(НовыйОбъект, "dataBaseId") Тогда
		НовыйОбъект.dataBaseId = ИнтеграцияС1СДокументооборотПовтИсп.ИдентификаторБазыДанных();
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

//Создает объект DMObjectID.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	id - идентификатор объекта XDTO
//	type - тип объекта XDTO
Функция СоздатьObjectID(Прокси, id, type) Экспорт 
	
	objectID = СоздатьОбъект(Прокси, "DMObjectID");
	objectID.id = id;
	objectID.type = type;
	
	Возврат objectId;
	
КонецФункции

//Проверяет тип объекта XDTO.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - проверяемый объект
//	Тип - имя типа для проверки
//Возвращает:
//	Истина если объект является объектом указанного типа и Ложь в противном случае
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт 
	
	Если ОбъектXDTO.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает имя значения перечисления.
//Параметры:
//	Значение - значение перечисления
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
КонецФункции 

//Проверяет значение на объектный тип, содержащий уникальный идентификатор.
//Параметры:
//	Значение - проверяемое значение
//Возвращает: 
//	Признак наличия у объекта уникального идентификатора
Функция ЕстьУникальныйИдентификатор(Значение) Экспорт
	
	Тип = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

//Проверяет, является ли свойство объектным, т.е. наследуется от типа DMObject.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - объект, содержащий проверяемое свойство
//	ИмяСвойстваXDTO - имя проверяемого свойства
//Возвращает:
//	Истина, в случае, если свойство является потомком типа DMObject, иначе Ложь
Функция ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
	ТипРодитель = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	
	Если ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") И ТипРодитель.ЭтоПотомок(ТипСвойства) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает ссылки на объекты этой конфигурации по информации о них в объекте ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - потомок DMObject, объект ДО. 
//
// Возвращаемое значение:
//   Массив - массив ссылок на связанные объекты этой конфигурации.
//
Функция СсылкиПоВнешнимОбъектам(ОбъектXDTO) Экспорт
	
	Результат = Новый Массив;
	
	Если ОбъектXDTO.Свойства().Получить("externalObjects") <> Неопределено Тогда
		ВнешниеОбъекты = ОбъектXDTO.externalObjects;
	ИначеЕсли ОбъектXDTO.Свойства().Получить("externalObject") <> Неопределено
		И ОбъектXDTO.Установлено("externalObject") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO.externalObject);
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ВнешнийОбъект Из ВнешниеОбъекты Цикл
	
		Попытка
			Ссылка = СсылкаИзUUID(ВнешнийОбъект.type, ВнешнийОбъект.id);
		Исключение
			// Тип объекта не найден в текущей конфигурации.
			Продолжить;
		КонецПопытки;
		
		Если Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ " + ВнешнийОбъект.type + "
			|ГДЕ
			|	Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Устарела. Рекомендуется использовать СсылкиПоВнешнимОбъектам.
// Возвращает ссылку на объект базы данных по информации во внешнем объекте.
//
// Параметры:
//   ВнешнийОбъект - ОбъектXDTO, Структура - структура данных о внешнем объекте, 
//      * id - идентификатор объекта по данным 1С:Документооборота;
//      * type - тип объекта по данным 1С:Документооборота.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на связанный объект ИС.
//
Функция СсылкаПоВнешнемуОбъекту(ВнешнийОбъект) Экспорт
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		Ссылка = Неопределено;
		Если ВнешнийОбъект <> Неопределено Тогда
			Ссылка = СсылкаИзUUID(ВнешнийОбъект.type, ВнешнийОбъект.id);
			Если Ссылка <> Неопределено И Ссылка.ПолучитьОбъект() = Неопределено Тогда
				Ссылка = Неопределено;
			КонецЕсли; 
		КонецЕсли;
		
		Возврат Ссылка;
		
	Исключение
		// Тип объекта не найден в текущей конфигурации.
		Возврат Неопределено;
	КонецПопытки

КонецФункции

// Получает доступность функционала версии сервиса Документооборота.
//
// Параметры:
//	 ВерсияСервиса - Строка - версия сервиса, содержащая требуемый функционал
//   Оптимистично - Булево - признак необходимости вернуть Истина, 
//   если версия сервиса пока неизвестна
//
// Возвращает:
//	 Булево - Истина, если сервис указанной версии доступен
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Если Оптимистично И НЕ ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяВерсия = ИнтеграцияС1СДокументооборот.ВерсияСервиса();
	Если ТекущаяВерсия = "0.0.0.0" Тогда // ошибка подключения
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекущаяВерсия) Тогда // в процессе получения
		Если Оптимистично Тогда 
			Возврат Истина; // пока не знаем, но, скорее всего, доступна
		Иначе
			Возврат Ложь; // пока не знаем, но, скорее всего, недоступна
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ВерсияСервиса) Тогда // нужна хоть какая-нибудь
		Возврат Истина;
	КонецЕсли;
	ОписаниеТекущейВерсии = РазложитьСтрокуВМассивПодстрок(ТекущаяВерсия, ".");
	Если ОписаниеТекущейВерсии.Количество() <> 5 Тогда
		// старые версии не сообщают редакцию, а для этих версий она важна.
		// оптимистично предположим КОРП.
		Если ТекущаяВерсия = "1.2.7.3" или ТекущаяВерсия = "1.2.8.1" Тогда
			ОписаниеТекущейВерсии.Добавить("CORP");
		Иначе
			ОписаниеТекущейВерсии.Добавить("PROF");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияНеМеньше(ОписаниеТекущейВерсии, ВерсияСервиса);
		
КонецФункции

//Получает объект из Документооборота.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Тип - Строка - имя типа XDTO
//	Ид - Строка - уникальный идентификатор объекта в Документообороте
//	Колонки - Массив - необязательно, состав заполняемых колонок
//Возвращаемое значение:
//	XDTO Объект типа DMRetrieveResponse
Функция ПолучитьОбъект(Прокси, Тип, Ид, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	objectId = СоздатьObjectID(Прокси, Ид, Тип);
	Запрос.objectIds.Добавить(objectId);
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			Запрос.columnSet.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Получает объекты из документооборота.
//Параметры:
//	Объекты - массив структур с полями "id" и "type"
//Возвращает:
//	XDTO Объект типа DMRetrieveResponse
Функция ПолучитьОбъекты(Прокси, Объекты, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	Для каждого Объект из Объекты Цикл
		objectId = СоздатьObjectID(Прокси, Объект.id, Объект.type);
		Запрос.objectIds.Добавить(objectId);
	КонецЦикла;
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			Запрос.columnSet.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Записывает изменения объекта в Документообороте.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект с сохраняемыми данными
//Возвращает:
//	XDTO Объект типа DMUpdateResponse
Функция ЗаписатьОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	Запрос.objects.Добавить(Объект);
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Записывает изменения объектов в Документообороте.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект с сохраняемыми данными
//Возвращает:
//	XDTO Объект типа DMUpdateResponse
Функция ЗаписатьОбъекты(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	
	Для Каждого Объект Из Объекты Цикл
		Запрос.objects.Добавить(Объект);
	КонецЦикла;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   Прокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип помечаемого на удаление объекта.
//   Идентификатор - Строка - идентификатор помечаемого на удаление объекта.
//
// Возвращает:
//   XDTO Объект типа DMDeleteResponse.
//
Функция ПометитьНаУдалениеСнятьПометку(Прокси, Идентификатор, Тип) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMDeleteRequest");
	ObjectId = СоздатьObjectID(Прокси, Идентификатор, Тип);
	Запрос.objectIds.Добавить(ObjectId);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

// Создает новый объект в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - прокси для подключения к сервису Документооборота.
//   Объект - ОбъектXDTO - описание создаваемого объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMCreateResponse или DMError.
//
Функция СоздатьНовыйОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

//Получает заполненный по умолчанию объект из Документооборота.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Тип - имя типа XDTO объекта
//	ПредметБизнесПроцесса - Структура. Используется для получения бизнес-процессов.
//		id - уникальный идентификатор объекта в Документооборот
//		type - имя типа XDTO 
//Возвращает:
//	XDTO Объект типа DMGetNewObjectResponse
Функция ПолучитьНовыйОбъект(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Если Предмет <> Неопределено Тогда
		Если Найти(Тип,"BusinessProcess") <> 0 Тогда
			Возврат НовыйБизнесПроцесс(Прокси, Тип, Предмет);
		ИначеЕсли Тип = "DMOutgoingEMail" Тогда
			Возврат НовоеИсходящееПисьмо(Прокси, Предмет);
		Иначе
			Возврат Неопределено
		КонецЕсли;
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = "DMBusinessProcess";
		
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		Если ПроверитьТип(Прокси, Ответ, "DMGetNewObjectResponse") Тогда
			Возврат Ответ.object;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

//Получает ссылку на объект по имени объекта конфигурации и ID.
//Параметры:
//	РеквизитТип - строка типа объекта конфигурации
//	РеквизитID - строка идентификатора объекта конфигурации
Функция СсылкаИзUUID(Тип, UUID) Экспорт
	
	СсылкаНаПотребителя = Неопределено;
	
	Если СтрНачинаетсяС(Тип, "Справочник.") Тогда
		СсылкаНаПотребителя = Справочники[СтрЗаменить(Тип, 
			"Справочник.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Документ.")Тогда
		СсылкаНаПотребителя = Документы[СтрЗаменить(Тип, 
			"Документ.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланСчетов.") Тогда
		СсылкаНаПотребителя = ПланыСчетов[СтрЗаменить(Тип,
			"ПланСчетов.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовРасчета.") Тогда
		СсылкаНаПотребителя = ПланыВидовРасчета[СтрЗаменить(Тип, 
			"ПланВидовРасчета.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовХарактеристик.") Тогда
		СсылкаНаПотребителя = ПланыВидовХарактеристик[СтрЗаменить(Тип, 
			"ПланВидовХарактеристик.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "БизнесПроцесс.") Тогда
		СсылкаНаПотребителя = БизнесПроцессы[СтрЗаменить(Тип, 
			"БизнесПроцесс.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Задача.") Тогда
		СсылкаНаПотребителя = Задачи[СтрЗаменить(Тип, 
			"Задача.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Перечисление.")
		И ЗначениеЗаполнено(UUID) Тогда
		СсылкаНаПотребителя = Перечисления[СтрЗаменить(Тип, 
			"Перечисление.", "")][UUID];
		
	КонецЕсли;
	
	Возврат СсылкаНаПотребителя;
	
КонецФункции

// Возвращает значение реквизита объекта ИС по значению реквизита объекта ДО.
// 
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения - свойство-владелец.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный или созданный объект.
//
Функция ЗначениеРеквизитаПоОбъектуXDTO(ОбъектXDTO, ТипРеквизита, ИмяРеквизита, ТипОбъекта, Объект,
	ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
		Результат,
		ОбъектXDTO,
		ТипРеквизита,
		ИмяРеквизита,
		ТипОбъекта,
		Объект,
		ЭтоДополнительноеСвойство,
		Свойство);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("Строка") Тогда
		Возврат ОбъектXDTO.name;
		
	ИначеЕсли ТипРеквизита = Тип("Число")
		Или ТипРеквизита = Тип("Дата")
		Или ТипРеквизита = Тип("Булево") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		Возврат ОписаниеТипов.ПривестиЗначение(ОбъектXDTO.name);
		
	КонецЕсли;
	
	Если ОбъектXDTO.externalObject <> Неопределено Тогда
		Результат = СсылкаИзUUID(ОбъектXDTO.externalObject.type, ОбъектXDTO.externalObject.id);
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.
			СсылкаНаОбъектПоДаннымДокументооборота(ОбъектXDTO.objectId.id, ОбъектXDTO.objectId.type, ТипРеквизита);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			
			// возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			УникальныйИдентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.objectId.id);
			ВидСправочника = МетаданныеОбъекта.Имя;
			СсылкаПоИдентификатору = Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1 
				|	Ссылка
				|ИЗ
				|	Справочник." + ВидСправочника + "
				|ГДЕ
				|	Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Ошибка = Неопределено;
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка);
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,
					СсылкаПоИдентификатору,
					ПредставлениеОшибки);
			КонецПопытки;
				
			Если Ошибка <> Неопределено Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Результат = Строка(Выборка.Ссылка);
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Недостаточно прав для доступа к этому объекту (%1).
						|Обратитесь к администратору.'"),
						Результат);
					ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
				КонецЕсли;
				
			КонецЕсли;
				
			Если Выборка.Следующий() Тогда // объект найден
				
				Результат = Выборка.Ссылка;
				
			Иначе // продолжим поиск по другим реквизитам
				
				Если Не ЭтоДополнительноеСвойство Тогда
					Результат = МенеджерОбъекта.НайтиПоНаименованию(ОбъектXDTO.name, Истина);
				Иначе
					Результат = МенеджерОбъекта.НайтиПоНаименованию(ОбъектXDTO.name, Истина,, Свойство);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Если ПравоДоступа("Добавление", МетаданныеОбъекта) Тогда
						Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
						НовыйОбъект = Менеджер.СоздатьЭлемент();
						НовыйОбъект.Наименование = ОбъектXDTO.name;
						НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
						Если ЭтоДополнительноеСвойство
							И (ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
							 Или ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
							НовыйОбъект.Владелец = Свойство;
						КонецЕсли;
						ИнтеграцияС1СДокументооборотПереопределяемый.ПриСозданииПоСсылке(НовыйОбъект, ОбъектXDTO, Объект);
						НовыйОбъект.Записать();
						Результат = НовыйОбъект.Ссылка;
						РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
							ОбъектXDTO.objectId.id,
							ОбъектXDTO.objectId.type,
							Результат);
					Иначе
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Недостаточно прав для создания новых элементов (%1).
							|Обратитесь к администратору.'"),
							МетаданныеОбъекта.Представление());
						ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
			МетаданныеЗначения = МетаданныеОбъекта.ЗначенияПеречисления.Найти(ОбъектXDTO.objectId.id);
			Если МетаданныеЗначения = Неопределено Тогда
				Для каждого ЗначениеПеречисления Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
					Если ЗначениеПеречисления.Синоним = ОбъектXDTO.name Тогда
						МетаданныеЗначения = ЗначениеПеречисления;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
			Если МетаданныеЗначения <> Неопределено Тогда
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
			    Результат = Менеджер[МетаданныеЗначения.Имя];
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект XDTO, содержащий обновляемые изменения объекта.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса 1С:Документооборота.
//   ДанныеОбъекта - Структура - описание интегрированного объекта.
//
Функция ПолучитьXDTOИзмененийИзОбъекта(Прокси, ДанныеОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторОбъектаДокументооборота) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектXDTO = СоздатьОбъект(Прокси, ДанныеОбъекта.ТипОбъектаДокументооборота);
	ОбъектXDTO.name = Строка(ДанныеОбъекта.Объект);
	
	ОбъектXDTO.objectId = СоздатьObjectID(Прокси, 
		ДанныеОбъекта.ИдентификаторОбъектаДокументооборота,
		ДанныеОбъекта.ТипОбъектаДокументооборота);
	
	СтруктураРеквизитов = СтруктураРеквизитовЗаполняемогоОбъектаДО(ДанныеОбъекта.ТипОбъектаДокументооборота);
	
	СоответствиеРеквизитов = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ДанныеОбъекта.ТипОбъектаДокументооборота);
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(
		Прокси,
		ДанныеОбъекта.Объект,
		ДанныеОбъекта.ПравилоЗаполнения,
		СтруктураРеквизитов,
		СоответствиеРеквизитов,
		Истина);
	
	Для Каждого СтрокаСоответствия Из СоответствиеРеквизитов Цикл
			
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			СтруктураРеквизитов,
			СтрокаСоответствия.Значение);
			
	КонецЦикла;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ОбъектXDTO, СтруктураРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("Файлы") 
		И СтруктураРеквизитов.Файлы.Количество() > 0 Тогда
		
		Для каждого СтрокаФайла из СтруктураРеквизитов.Файлы Цикл
			
			ФайлXDTO = СоздатьОбъект(Прокси,"DMFile");
			ФайлXDTO.objectId = СоздатьObjectID(Прокси, "", "DMFile");
			ФайлXDTO.name = "";
			
			ФайлXDTO.binaryData = СтрокаФайла.ДвоичныеДанные;
			ФайлXDTO.extension = СтрокаФайла.Расширение;
			ФайлXDTO.modificationDate = СтрокаФайла.ДатаСоздания;
			ФайлXDTO.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
			ФайлXDTO.name = СтрокаФайла.Наименование;
			ФайлXDTO.size = СтрокаФайла.Размер;
			
			ОбъектXDTO.files.Добавить(ФайлXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ExternalObject = СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(ДанныеОбъекта.Объект.УникальныйИдентификатор());
	ExternalObject.type = ДанныеОбъекта.Объект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(ДанныеОбъекта.Объект);
	ОбъектXDTO.externalObject = ExternalObject;
	
	Возврат ОбъектXDTO;
	
КонецФункции

//Обработчик подписки на событие ОбработкаЗаполнения для справочников.
//
Процедура ОбработкаЗаполненияСправочники(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		Для каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Источник.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

//Обработчик подписки на событие ОбработкаЗаполнения для документов.
//
Процедура ОбработкаЗаполненияДокументы(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		Для каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Источник.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

//Возвращает Истина, если у ОбъектаXDTO существует искомое свойство с именем ИмяСвойства.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Если ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//Проверяет наличие связанных объектов, если их не оказывается, получает сведения о них из Документооборота.
//
Процедура ПроверитьОбновитьДанныеСвязанныхОбъектов() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект
	|ИЗ
	|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = СоздатьОбъект(Прокси, "DMGetLinkedObjectsRequest");
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	НаборЗаписей = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СоздатьНаборЗаписей();
	
	Для каждого ОбъектXDTO Из Ответ.objects Цикл
		Объект = СсылкаПоВнешнемуОбъекту(ОбъектXDTO.externalObject);
		Если Объект <> Неопределено Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.ИдентификаторОбъектаДокументооборота = ОбъектXDTO.objectId.id;
			Запись.ТипОбъектаДокументооборота = ОбъектXDTO.objectId.type;
			Запись.Объект = Объект;
		КонецЕсли; 
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Назначает новому документу идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ
//   Отказ - Булево - признак необходимости отказаться от записи
//   РежимЗаписи - РежимЗаписиДокумента - режим записи документа
//   РежимПроведения - РежимПроведенияДокумента - режим проведения документа
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

//Назначает новому элементу справочника идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ
//   Отказ - Булево - признак необходимости отказаться от записи
//   РежимЗаписи - РежимЗаписиДокумента - режим записи документа
//   РежимПроведения - РежимПроведенияДокумента - режим проведения документа
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Получает текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMUser или Неопределено.
//
Функция ТекущийПользовательДокументооборота() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = СоздатьОбъект(Прокси, "DMGetCurrentUserRequest");
	Ответ = Прокси.execute(Запрос);
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		Возврат Неопределено;
	Иначе
		Возврат Ответ.user;
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
Функция СокращенноеНаименованиеКонфигурации() Экспорт
	
	СокращенноеНаименование = НСтр("ru = 'БИД (демо)'");

	ИнтеграцияС1СДокументооборотПереопределяемый.
		ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование);
		
	Возврат СокращенноеНаименование;
	
КонецФункции

// Определяет зависимости регламентных заданий и их дополнительные свойства. Параметры см. в
// РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюС1СДокументооборот;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Определяет возможность использования аутентификации ОС платформой 1С:Предприятия.
// Возвращает Истина для версий 8.3.7 и старше под MS Windows, и Ложь в остальных случаях.
//
Функция ПоддерживаетсяАутентификацияОС() Экспорт
	
	Если Не СерверРаботаетПодWindows() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Версия = СтрРазделить(СисИнфо.ВерсияПриложения, ".");
	
	Возврат (Число(Версия[0]) >= 8)
		И (Число(Версия[1]) >= 3)
		И (Число(Версия[2]) >= 7);
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows, и Ложь в противном случае.
//
Функция СерверРаботаетПодWindows() Экспорт
	
	СисИнфо  = Новый СистемнаяИнформация;
	
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для интеграции с ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Интеграция с 1С:Документооборотом
//        или Интеграция с 1С:Документооборотом.<ИмяСобытияВторгоУровня>
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборотом'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с 1С:Документооборотом'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Начинает получение файлов связанных документов.
//
// Параметры:
//   СвязанныеДокументы - массив документов, файлы которых нужно получить.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище, куда будет помещен результат.
//
Функция ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы) Экспорт
	
	КлючЗадания = Новый УникальныйИдентификатор;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, КлючЗадания);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(АдресВоВременномХранилище);
	МассивПараметров.Добавить(СвязанныеДокументы);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
	МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
	
	ФоновыеЗадания.Выполнить(
		"ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументовАсинхронно",
		МассивПараметров, КлючЗадания, НСтр("ru = 'Получение файлов связанных документов'"));
		
	Возврат АдресВоВременномХранилище;
	
КонецФункции

// Асинхронно, в фоновом задании, получает файлы связанных документов.
//
// Параметры:
//   Адрес - Строка - адрес для результата выполнения во временном хранилище.
//   Имя - Строка - имя вызываемой функции.
//   СвязанныеДокументы - массив документов, файлы которых нужно получить.
//   ИмяПользователя - Строка - имя пользователя ДО, сохраненного в настройках пользователя,
//     из сеанса которого инициирован асинхронный вызов.
//   Пароль - Строка - пароль этого пользователя.
//
Процедура ПолучитьФайлыСвязанныхДокументовАсинхронно(Адрес,  СвязанныеДокументы, ИмяПользователя, Пароль) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = ИмяПользователя;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = Пароль;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Истина;
	
	Результат = Обработки.ИнтеграцияС1СДокументооборот.ПолучитьФайлыСвязанныхДокументов(СвязанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, Адрес);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыИЗадачи

//Получает объект XDTO бизнес-процесса, заполненный по данным переданных предмета и шаблона.
//Параметры:
//	Тип - тип бизнес-процесса
//	Шаблон - Структура - данные о шаблоне бизнес-процесса
//		* id - Строка - идентификатор шаблона
//		* type - Строка - тип шаблона
//	Предмет - Структура - данные о предмете бизнес-процесса 
//		* id - Строка - идентификатор предмета
//		* type - Строка - тип предмета
//Возвращает:
//	XDTO объект с типом бизнес-процесса
Функция НовыйБизнесПроцессПоШаблону(Прокси, Тип, Шаблон, Предмет = Неопределено) Экспорт
	
	//создание бизнес-процесса
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Тип;
	
	ШаблонБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ШаблонБизнесПроцессаИд.id = Шаблон.id;
	ШаблонБизнесПроцессаИд.type = Шаблон.type;
	
	Запрос.businessProcessTemplateId = ШаблонБизнесПроцессаИд;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = Предмет.id;
		ПредметБизнесПроцессаИд.type = Предмет.type;
		
		Запрос.targetId = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.Object;
	
КонецФункции

//Получает объект XDTO бизнес-процесса.
//Параметры:
//	Тип - тип бизнес-процесса
//	Предмет - структура с данными о предмете бизнес-процесса 
//Возвращает:
//	XDTO объект с типом бизнес-процесса
Функция НовыйБизнесПроцесс(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewBusinessProcessRequest");

	Запрос.type = Тип;
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.id = Предмет.id;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;

	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Если ПроверитьТип(Прокси, Ответ, "DMGetNewBusinessProcessResponse") Тогда
		Возврат Ответ.object;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//Выполняет сохранение и запуск бизнес-процесса.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект, хранящий данные бизнес-процесса
//Возвращает:
//	XDTO Объект типа DMLaunchBusinessProcessResponse
Функция ЗапуститьБизнесПроцесс(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMLaunchBusinessProcessRequest");
	Запрос.businessProcess = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает индекс картики пометки завершения процесса или задачи по значению пометки.
//
Функция ИндексКартинкиПометкиЗавершения(Значение) Экспорт
	
	Если Значение = "NotExecuted" Тогда
		Возврат 0;
	ИначеЕсли Значение = "ExecutedNeutral" Тогда
		Возврат 1;
	ИначеЕсли Значение = "ExecutedNegative" Тогда
		Возврат 2;
	ИначеЕсли Значение = "ExecutedPositive" Тогда
		Возврат 3;
	ИначеЕсли Значение = "ExecutedAlmostPositive" Тогда
		Возврат 4;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

// Возвращает объект XDTO бизнес процесса, заполненный в соответствие с параметрами.
//
Функция ПолучитьОбъектXDTOПроцесса(ТипПроцессаXDTO, Параметры) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	// Если открывается новая карточка по заполненному шаблону.
	Если ЗначениеЗаполнено(Параметры.id) И ЗначениеЗаполнено(Параметры.type) Тогда
		ДанныеБП = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id);
		ОбъектXDTO = ДанныеБП.objects[0];
	ИначеЕсли Параметры.Свойство("Шаблон") Тогда
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон, Параметры.Предмет);
		Иначе
			ОбъектXDTO = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцессаXDTO, Параметры.Шаблон);
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("Предмет") Тогда
			ОбъектXDTO = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцесс(Прокси, ТипПроцессаXDTO, Параметры.Предмет);
		Иначе
			ОбъектXDTO = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцесс(Прокси, ТипПроцессаXDTO);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

//Выполняет принятие задач к исполнению.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Задачи - массив идентификаторов задач Документооборота, которые нужно принять к исполнению
//Возвращает:
//	Признак успеха принятия задач к исполнению
Функция ПринятьЗадачуКИсполнению(Прокси, Задачи) Экспорт
	
	Если Прокси = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAcceptTasksRequest");
	
	Для каждого ID из Задачи Цикл
		ЗадачаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
		ОбъектИД = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ОбъектИД.id = ID;
		ОбъектИД.type = "DMBusinessProcessTask";
		ЗадачаXDTO.objectID = ОбъектИД;
		ЗадачаXDTO.name = "";
		Запрос.tasks.Добавить(ЗадачаXDTO);
	КонецЦикла;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	
	Попытка 
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область Документы

// Устарела. Следует использовать ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов.
//
Процедура ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ОбъектXDTO, ИмяСвойстваXDTO, ИмяРеквизитаСтруктуры, СтруктураДокумента) Экспорт
	
	ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
		Прокси,
		ОбъектXDTO,
		ИмяСвойстваXDTO,
		СтруктураДокумента,
		ИмяРеквизитаСтруктуры);
	
КонецПроцедуры

// Заполняет свойство объекта XDTO из структуры реквизитов исходного объекта ИС.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса DMService.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект ДО.
//   ИмяСвойства - Строка - имя заполняемого свойства объекта XDTO.
//   ИмяРеквизита - Строка - имя исходного реквизита в:
//   СтруктураРеквизитов - Структура, ДанныеФормыСтруктура - предварительно заполненная структура
//     с данными объекта.
//
Процедура ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси, ОбъектXDTO, ИмяСвойства, СтруктураРеквизитов, ИмяРеквизита) Экспорт
	
	Если СтруктураРеквизитов[ИмяРеквизита] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойства) Тогда 
		
		Реквизит    = СтруктураРеквизитов[ИмяРеквизита];
		РеквизитID  = СтруктураРеквизитов[ИмяРеквизита + "ID"];
		РеквизитТип = СтруктураРеквизитов[ИмяРеквизита + "Тип"];
		
		ЗначениеСвойства = СоздатьОбъект(Прокси, ОбъектXDTO.Свойства().Получить(ИмяСвойства).Тип.Имя);
		
		// заполнить из потребителя.
		Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда
			
			СсылкаНаПотребителя = СсылкаИзUUID(РеквизитТип, РеквизитID);
			
			ЗаполнитьРеквизитыИзПотребителя(Прокси, ЗначениеСвойства, СсылкаНаПотребителя);
			
			Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
				Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Контрагент");
				КонецЕсли;
			ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
				Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Получатель");
				КонецЕсли;
			ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
				Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Отправитель");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли РеквизитТип = "Строка" Тогда 
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "");
			ЗначениеСвойства.name = Реквизит;
			
			ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
			ExternalObject.id = "";
			ExternalObject.type = "";
			ExternalObject.name = "";
			
			ЗначениеСвойства.externalObject = ExternalObject;
			
			Если СтруктураРеквизитов.Тип = "DMInternalDocument" Тогда
				Если ИмяСвойства = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Контрагент");
				КонецЕсли;
			ИначеЕсли СтруктураРеквизитов.Тип = "DMOutgoingDocument" Тогда
				Если ИмяСвойства = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Получатель");
				КонецЕсли;
			ИначеЕсли СтруктураРеквизитов.Тип = "DMIncomingDocument" Тогда
				Если ИмяСвойства = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
						ЗначениеСвойства,
						"correspondent",
						СтруктураРеквизитов,
						"Отправитель");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизит) Тогда 
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, РеквизитID, РеквизитТип); 
			ЗначениеСвойства.name = Реквизит;
			
		Иначе
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", ""); 
			ЗначениеСвойства.name = "";
			
		КонецЕсли;
		
		ОбъектXDTO.Установить(ИмяСвойства, ЗначениеСвойства);
		
	Иначе
		ОбъектXDTO.Установить(ИмяСвойства, СтруктураРеквизитов[ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизтов.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект XDTO.
//   Форма - УправляемаяФорма - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//   
Процедура ЗаполнитьОбъектXDTOИзФормы(ОбъектXDTO, Форма, РеквизитыИСвойства) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(Прокси,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ,
			Форма,
			РеквизитИСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит формы из свойства объекта XDTO.
//
// Параметры:
//   Форма - УправляемаяФорма - заполняемая форма.
//   ИмяРеквизитаФормы - Строка - имя заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   ИмяСвойстваXDTO - Строка - имя исходного свойства XDTO.
//
Процедура ЗаполнитьРеквизитФормыИзСвойстваXDTO(Форма, ИмяРеквизитаФормы, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойстваXDTO) <> Неопределено
		И ОбъектXDTO.Установлено(ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда 
			Форма[ИмяРеквизитаФормы + "Тип"] = ЗначениеСвойстваXDTO.objectId.type;
			Форма[ИмяРеквизитаФормы + "ID"] = ЗначениеСвойстваXDTO.objectId.id;
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO.name;
		Иначе	
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты формы из свойств объекта XDTO по соответствию свойств и реквизтов.
//
// Параметры:
//   Форма - УправляемаяФорма - заполняемая форма.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   РеквизитыИСвойства - Соответствие - ключ - свойство XDTO, значение - реквизит.
//   
Процедура ЗаполнитьФормуИзОбъектаXDTO(Форма, ОбъектXDTO, РеквизитыИСвойства) Экспорт
	
	Для Каждого РеквизитИСвойство Из РеквизитыИСвойства Цикл
		ЗаполнитьРеквизитФормыИзСвойстваXDTO(Форма,
			РеквизитИСвойство.Значение,
			ОбъектXDTO,
			РеквизитИСвойство.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса DMService.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект, или
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	ТипОбъектаДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ТипОбъектаДокументооборота");
	
	СтруктураРеквизитов = СтруктураРеквизитовЗаполняемогоОбъектаДО(ТипОбъектаДО);
	
	СоответствиеСвойствXDTOиРеквизитов = Справочники.ПравилаИнтеграцииС1СДокументооборотом.
		СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ТипОбъектаДО);
	
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(
		Прокси, ОбъектИС, Правило, СтруктураРеквизитов, СоответствиеСвойствXDTOиРеквизитов);
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Правило, "НеСоздаватьСвязиПоСсылкам, Шаблон, ШаблонID, ШаблонТип");
		
	Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	Запрос.type = ТипОбъектаДО;
	
	// Заполнение документов по шаблонам.
	Шаблон = Неопределено;
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПравила.ШаблонID) Тогда
				
			Шаблон = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,
				РеквизитыПравила.ШаблонТип);
			Шаблон.name = РеквизитыПравила.Шаблон;
			Шаблон.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
				РеквизитыПравила.ШаблонID,
				РеквизитыПравила.ШаблонТип);
				
			Запрос.dataSource = Шаблон;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ;
	
	Для Каждого СтрокаСоответствия Из СоответствиеСвойствXDTOиРеквизитов Цикл
		ЗаполнитьСвойствоXDTOизСтруктурыРеквизитов(
			Прокси,
			ОбъектXDTO,
			СтрокаСоответствия.Ключ,
			СтруктураРеквизитов,
			СтрокаСоответствия.Значение);
	КонецЦикла;
		
	// Сохраним файлы шаблона для отдельного заполнения.
	Если ОбъектXDTO.Свойства().Получить("files") <> Неопределено
		И СтруктураРеквизитов.Свойство("Файлы") Тогда
		
		НомерФайла = 0;
		Пока НомерФайла <= ОбъектXDTO.files.Количество() - 1 Цикл
			ФайлXDTO = ОбъектXDTO.files[НомерФайла];
			
			Если ФайлXDTO.Свойства().Получить("template") <> Неопределено
				И ФайлXDTO.Установлено("template")
				И ЗначениеЗаполнено(ФайлXDTO.template.objectID.id) Тогда
				
				Файл = СтруктураРеквизитов.Файлы.Добавить();
				
				Файл.Наименование = ФайлXDTO.name;
				Файл.Расширение = ФайлXDTO.extension;
				Файл.Тип = "DMFile";
				Файл.ШаблонID = ФайлXDTO.template.objectID.id;
				
				ОбъектXDTO.files.Удалить(НомерФайла);
				
			Иначе
				
				НомерФайла = НомерФайла + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Обработки.ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(
		Прокси,
		ОбъектXDTO,
		СтруктураРеквизитов);
	
	ОбъектXDTO.objectId = СоздатьObjectID(Прокси, "", "");
	ОбъектXDTO.name = Строка(ОбъектИС);
		
	Если ЗначениеЗаполнено(ОбъектИС) Тогда 
		ExternalObject = СоздатьОбъект(Прокси, "ExternalObject");
		ExternalObject.id = Строка(ОбъектИС.УникальныйИдентификатор());
		ExternalObject.type = ОбъектИС.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(ОбъектИС);
		ОбъектXDTO.externalObject = ExternalObject;
	КонецЕсли;
	
	Если Шаблон <> Неопределено Тогда
		ОбъектXDTO.template = Шаблон;
	КонецЕсли;
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		Возврат Ответ.description;
	КонецЕсли;
	
	ОбъектXDTO = Ответ.object;
	
	РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
		ОбъектXDTO.objectId.id,
		ОбъектXDTO.objectId.type,
		ОбъектИС);
	
	ДоступенФункционалПакетныеЗапросы = ИнтеграцияС1СДокументооборотПовтИсп.
		ДоступенФункционалВерсииСервиса("1.3.2.3");
	
	Если СтруктураРеквизитов.Свойство("Файлы") 
		И СтруктураРеквизитов.Файлы.Количество() > 0 Тогда
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			Пакет = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		КонецЕсли;
		
		Для каждого СтрокаФайла из СтруктураРеквизитов.Файлы Цикл
		
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
			
			ОбъектВладелец = СоздатьОбъект(Прокси, "DMObject");
			ОбъектВладелец.objectId = СоздатьObjectID(Прокси,
				ОбъектXDTO.objectId.id, ОбъектXDTO.objectId.type);
			ОбъектВладелец.name = ОбъектXDTO.name;
			
			Запрос.owner = ОбъектВладелец;
			
			Запрос.file = СоздатьОбъект(Прокси,"DMFile");
			Запрос.file.objectId = СоздатьObjectID(Прокси, "", "DMFile");
			Запрос.file.name = СтрокаФайла.Наименование;
			Запрос.file.extension = СтрокаФайла.Расширение;
			
			Если ЗначениеЗаполнено(СтрокаФайла.ШаблонID) Тогда
				ФайлШаблон = СоздатьОбъект(Прокси, "DMFile");
				ФайлШаблон.objectId = СоздатьObjectID(Прокси,
					СтрокаФайла.ШаблонID, "DMFile");
				ФайлШаблон.name = СтрокаФайла.Наименование;
				Запрос.file.template = ФайлШаблон;
			Иначе // из двоичных данных
				Запрос.file.binaryData = СтрокаФайла.ДвоичныеДанные;
				Запрос.file.modificationDate = СтрокаФайла.ДатаСоздания;
				Запрос.file.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
				Запрос.file.size = СтрокаФайла.Размер;
			КонецЕсли;
			
			Если ДоступенФункционалПакетныеЗапросы Тогда
				Пакет.requests.Добавить(Запрос);
			Иначе
				Ответ = ВыполнитьЗапрос(Прокси, Запрос);
				Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
					Возврат Ответ.description;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступенФункционалПакетныеЗапросы Тогда
			Ответ = ВыполнитьЗапрос(Прокси, Пакет);
			Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
				Возврат Ответ.description;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ШтрихкодОбъектаИС = ИнтеграцияС1СДокументооборотПереопределяемый.
		ШтрихкодДокумента(ОбъектИС);
	Если ЗначениеЗаполнено(ШтрихкодОбъектаИС) 
		и ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
		
		Запрос.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.objectId.id = ОбъектXDTO.objectId.id;
		Запрос.objectId.type = ОбъектXDTO.objectId.type;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
		
		Запрос.objectBarcodes = Результат.objectBarcodes;
		
		Штрихкод = СоздатьОбъект(Прокси, "DMBarcode");
		Штрихкод.internal = Ложь;
		Штрихкод.barcodeData = ШтрихкодОбъектаИС;
		Запрос.objectBarcodes.barcodes.Добавить(Штрихкод);
			
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
	КонецЕсли;
	
	// Автоматически добавим связи по ссылкам из объекта ИС.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСвязанныеДокументы1СДокументооборота")
		И ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1")
		И Не РеквизитыПравила.НеСоздаватьСвязиПоСсылкам Тогда
	
		ПодходящиеОбъекты = ПолучитьПодходящиеОбъектыДляДобавленияСвязей(ОбъектИС);
		
		Если ПодходящиеОбъекты.Количество() = 0 Тогда
			Возврат ОбъектXDTO;
		КонецЕсли;
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
		Для Каждого ПодходящийОбъект Из ПодходящиеОбъекты Цикл
			
			ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотВызовСервера.
				ДанныеОбъектаДОПоВнешнемуОбъекту(ПодходящийОбъект);
				
			Если ДанныеОбъектаДО = Неопределено Тогда
				
				Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПодходящийОбъект);
				Если Правила.Количество() <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(Правила[0].ТипОбъектаДО) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеОбъектаДО = Неопределено Тогда // создадим документ в ДО
					
				НовыйОбъектДО = СоздатьОбъектДОПоПравилу(Прокси,
					ПодходящийОбъект,
					Правила[0].Ссылка);
				
				Если ТипЗнч(НовыйОбъектДО) = Тип("ОбъектXDTO") Тогда
					СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
						НовыйОбъектДО.objectId.id,
						НовыйОбъектДО.objectId.type,
						НовыйОбъектДО.name);
				Иначе // сообщение об ошибке
					ИмяСобытия = НСтр("ru = 'Автосоздание связанного объекта'");
					ЗаписьЖурналаРегистрации(
						ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(ИмяСобытия), 
						УровеньЖурналаРегистрации.Ошибка,,,
						НовыйОбъектДО);
					ТекстИсключения = СтрШаблон(НСтр("ru = 'Не удалось создать связанный документ для ""%1"":
						|%2'"),
						ПодходящийОбъект,
						НовыйОбъектДО);
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе // добавим связь к существующему документу ДО
				
				Если Не ИнтеграцияС1СДокументооборотКлиентСервер.ЭтоДокумент(ДанныеОбъектаДО.type) Тогда
					Продолжить;
				КонецЕсли;
				
				СвязываемыйДокумент = Новый Структура("ID, Тип, Представление",
					ДанныеОбъектаДО.id,
					ДанныеОбъектаДО.type,
					ДанныеОбъектаДО.name);
				
			КонецЕсли;
			
			ИсходныйДокумент = Новый Структура("ID, Тип, Представление",
				ОбъектXDTO.objectId.id,
				ОбъектXDTO.objectId.type,
				ОбъектXDTO.name);
			
			ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
				ИсходныйДокумент,
				СвязываемыйДокумент);
			
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

//Возвращает таблицу значений с информацией о менеджерах печати объекта.
//Параметры:
//	МенеджерОбъекта - полное имя метаданных менеджера объекта
Функция МенеджерыПечати(МенеджерОбъекта) Экспорт
	
	ПечатныеФормы = Новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("МенеджерПечати");
	ПечатныеФормы.Колонки.Добавить("ИмяКоманды");
	ПечатныеФормы.Колонки.Добавить("ПредставлениеКоманды");
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Возвращает команды печати формы.
//
Функция КомандыПечатиФормы(ИмяФормы) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МенеджерыОбъектов = Новый Массив;
	УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати(МенеджерыОбъектов);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Если МенеджерыОбъектов.Найти(МенеджерОбъекта) = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат УправлениеПечатью.КомандыПечатиФормы(ИмяФормы);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//Создает XDTO объект Документооборота типа Файл (DMFile).
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	МассивПодписей - массив структур данных о подписях файла
//	Файл - структура данных файла
//Возвращает:
//	Объект XDTO типа DMFile
Функция СоздатьXDTOФайл(Прокси, МассивПодписей, Файл) Экспорт
	
	Объект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMFile");
	Объект.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Файл.ID, "DMFile");
	
	// только 2 поля - Имя и Описание передаем при записи.
	Объект.name = Файл.Наименование;
	Объект.description = Файл.Описание;
	
	// добавление ЭП.
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Возврат Объект;
	
КонецФункции

//Заполняет XDTO объект подписи по структуре подписи.
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ПодписьXDTO - объект XDTO подписи
//	ДанныеПодписи - структура с данными подписи
Процедура ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи) Экспорт
	
	ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
	ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
	ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
	ПодписьXDTO.date = ?(ЗначениеЗаполнено(ДанныеПодписи.ДатаПодписи), ДанныеПодписи.ДатаПодписи, ТекущаяДатаСеанса());
	ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
	ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
	ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;

	Если ДанныеПодписи.Свойство("УстановившийПодпись") Тогда
		
		ПодписьXDTO.signer =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUser");
		ПодписьXDTO.signer.name = ДанныеПодписи.УстановившийПодпись;
		
		ПодписьXDTO.signer.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
			ДанныеПодписи.УстановившийПодписьИд, "DMUser");
			
	КонецЕсли;
	
КонецПроцедуры

// Получает список объектов по ссылкам из указанного объекта ИС, подходящих для автоматического 
// добавления связей (имеющих настроенные правила интеграции). Учитывает табличные части.
//
// Параметры:
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, связи к которому добавляются.
//
// Возвращаемое значение:
//   Массив - ссылки на подходящие объекты ИС.
//
Функция ПолучитьПодходящиеОбъектыДляДобавленияСвязей(СсылкаНаОбъектИС) Экспорт
	
	ПодходящиеОбъекты = Новый Массив;
	
	ТипыОбъектовСПравилами = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьТипыОбъектовСПравиламиИнтеграции(
		"DMInternalDocument, DMIncomingDocument, DMOutgoingDocument");
	Если ТипыОбъектовСПравилами.Количество() = 0 Тогда
		Возврат ПодходящиеОбъекты;
	КонецЕсли;
	
	МетаданныеОбъекта = СсылкаНаОбъектИС.Метаданные();
	
	ОбъектИС = Неопределено; // получим объект ниже при необходимости
	
	// Проверим реквизиты шапки.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ПодходитПоТипу = Ложь;
		Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
			Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
				ПодходитПоТипу = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПодходитПоТипу Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектИС = Неопределено Тогда
			ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
		КонецЕсли;
		
		ЗначениеРеквизита = ОбъектИС[Реквизит.Имя];
		ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
		
		Если ТипыОбъектовСПравилами.Найти(ТипЗначенияРеквизита) <> Неопределено
			И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ПодходящиеОбъекты.Добавить(ЗначениеРеквизита);
		КонецЕсли;
				
	КонецЦикла;
	
	// Проверим табличные части.
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			
			ПодходитПоТипу = Ложь;
			Для Каждого ТипОбъектаСПравилами Из ТипыОбъектовСПравилами Цикл
				Если Реквизит.Тип.СодержитТип(ТипОбъектаСПравилами) Тогда
					ПодходитПоТипу = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПодходитПоТипу Тогда
				Продолжить;
			КонецЕсли;
			
					
			Если ОбъектИС = Неопределено Тогда
				ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого СтрокаТабличнойЧасти Из ОбъектИС[ТабличнаяЧасть.Имя] Цикл
				
				ЗначениеРеквизита = СтрокаТабличнойЧасти[Реквизит.Имя];
				ТипЗначенияРеквизита = ТипЗнч(ЗначениеРеквизита);
				
				Если ТипыОбъектовСПравилами.Найти(ТипЗначенияРеквизита) <> Неопределено
					И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ПодходящиеОбъекты.Добавить(ЗначениеРеквизита);
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Ссылки на подходящие документы могут храниться где-то еще, например, в регистрах сведений.
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(
		ОбъектИС,
		ПодходящиеОбъекты);
		
	ПодходящиеОбъекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеОбъекты);
		
	Возврат ПодходящиеОбъекты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКомандуПереключитьХронометраж(Форма, Знач МестоРазмещенияКоманд)
	
	ЭтаФормаМетаданные = Метаданные.НайтиПоПолномуИмени(Форма.ИмяФормы);
	РодительМетаданные = ЭтаФормаМетаданные.Родитель();
	
	Если ТипЗнч(РодительМетаданные) = Тип("ОбъектМетаданныхКонфигурация") 
		Или Метаданные.ЖурналыДокументов.Содержит(РодительМетаданные)
		Или Метаданные.Обработки.Содержит(РодительМетаданные)
		Или Не РодительМетаданные.ОсновнаяФормаОбъекта = ЭтаФормаМетаданные Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Форма.Объект.Ссылка;
		
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ИмяТипа = ИнтеграцияС1СДокументооборотВызовСервера.ИмяТипаОбъектаДОИзНастроекЗаполнения(Ссылка);
		Если Найти(ИмяТипа, "Document") = 0 И Найти(ИмяТипа, "Task") = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПараметрыХронометражаОбъекта(Ссылка);
		Исключение
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.Подсказка = НСтр("ru='Переключить хронометраж'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.УстановитьВремя;
	КонецЕсли;
	
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			НовыйЭлемент.Пометка = Истина;
		КонецЕсли;
	Иначе
		НовыйЭлемент.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуУказатьТрудозатраты(Форма, Знач МестоРазмещенияКоманд)
	
	Если МестоРазмещенияКоманд = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
	КонецЕсли;
	
	ИмяКоманды = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуИнтеграции";
		КомандаФормы.Заголовок = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.Подсказка = НСтр("ru='Указать трудозатраты'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Авто;
		КомандаФормы.Картинка = БиблиотекаКартинок.ДобавитьВЕжедневныйОтчет;
	КонецЕсли;
		
	ИсходноеИмяЭлемента = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
	
	ИмяЭлемента = ИсходноеИмяЭлемента;
	Пока Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Цикл
		ИмяЭлемента = Форма.Элементы.Найти(ИмяЭлемента).Имя;
		Итератор = СтрЗаменить(ИмяЭлемента, ИсходноеИмяЭлемента, "");
		Итератор = Число(?(ПустаяСтрока(Итератор),"0",Итератор));
		Итератор = Итератор + ?(Итератор = 0, 2, 1);
		ИмяЭлемента = ИсходноеИмяЭлемента + Формат(Итератор,"ЧГ=0");
	КонецЦикла;
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры	

// Возвращает структуру объекта ДО для заполнения по переданному имени типа.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта, например, DMInternalDocument или DMCorrespondent.
//
// Возвращаемое значение:
//   Структура - реквизиты объекта указанного типа, подлежащие заполнению.
//
Функция СтруктураРеквизитовЗаполняемогоОбъектаДО(ТипОбъектаДО) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	РеквизитыСсылочногоТипа = Новый Структура;
	
	// Реквизиты, общие для всех типов.
	СтруктураРеквизитов.Вставить("ID");
	СтруктураРеквизитов.Вставить("Тип", ТипОбъектаДО);
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("Комментарий");
	
	Если ТипОбъектаДО = "DMCorrespondent" Тогда
		
		СтруктураРеквизитов.Вставить("ИНН");
		СтруктураРеквизитов.Вставить("КПП");
		СтруктураРеквизитов.Вставить("КодПоОКПО");
		СтруктураРеквизитов.Вставить("ПолноеНаименование");
		
	Иначе // документы
		
		СтруктураРеквизитов.Вставить("Описание");
		СтруктураРеквизитов.Вставить("РегистрационныйНомер");
		СтруктураРеквизитов.Вставить("ДатаРегистрации");
		СтруктураРеквизитов.Вставить("СрокИсполнения");
		СтруктураРеквизитов.Вставить("Сумма");
		
		РеквизитыСсылочногоТипа.Вставить("Подписал");
		РеквизитыСсылочногоТипа.Вставить("Подразделение");
		РеквизитыСсылочногоТипа.Вставить("ГрифДоступа");
		РеквизитыСсылочногоТипа.Вставить("ВидДокумента");
		РеквизитыСсылочногоТипа.Вставить("ВопросДеятельности");
		РеквизитыСсылочногоТипа.Вставить("Организация");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("Состояние");
		РеквизитыСсылочногоТипа.Вставить("СостояниеСогласование");
		РеквизитыСсылочногоТипа.Вставить("СостояниеУтверждение");
		РеквизитыСсылочногоТипа.Вставить("СостояниеРассмотрение");
		РеквизитыСсылочногоТипа.Вставить("СостояниеРегистрация");
		РеквизитыСсылочногоТипа.Вставить("СостояниеИсполнение");
		РеквизитыСсылочногоТипа.Вставить("Валюта");
		
		// Шаблоны.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
			РеквизитыСсылочногоТипа.Вставить("Шаблон");
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			РеквизитыСсылочногоТипа.Вставить("Проект");
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипОбъектаДО = "DMInternalDocument" Тогда 
		
		СтруктураРеквизитов.Вставить("ДатаНачалаДействия");
		СтруктураРеквизитов.Вставить("ДатаОкончанияДействия");
		СтруктураРеквизитов.Вставить("Бессрочный");
		
		РеквизитыСсылочногоТипа.Вставить("Папка");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("Контрагент");
		РеквизитыСсылочногоТипа.Вставить("КонтактноеЛицо");
		РеквизитыСсылочногоТипа.Вставить("ПорядокПродления");
		
	ИначеЕсли ТипОбъектаДО = "DMIncomingDocument" Тогда
		
		СтруктураРеквизитов.Вставить("НомерОтправителя");
		СтруктураРеквизитов.Вставить("ДатаОтправителя");
		
		РеквизитыСсылочногоТипа.Вставить("Отправитель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("СпособПолучения");
		
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocument" Тогда 
		
		СтруктураРеквизитов.Вставить("НомерПолучателя");
		СтруктураРеквизитов.Вставить("ДатаПолучателя");
		СтруктураРеквизитов.Вставить("Отправлен");
		СтруктураРеквизитов.Вставить("ДатаОтправки");
		
		РеквизитыСсылочногоТипа.Вставить("Получатель");
		РеквизитыСсылочногоТипа.Вставить("Адресат");
		РеквизитыСсылочногоТипа.Вставить("Подготовил");
		РеквизитыСсылочногоТипа.Вставить("СпособОтправки");
		
	ИначеЕсли ТипОбъектаДО = "DMCorrespondent" Тогда
		
		РеквизитыСсылочногоТипа.Вставить("ФизЛицо");
		РеквизитыСсылочногоТипа.Вставить("Ответственный");
		РеквизитыСсылочногоТипа.Вставить("ЮрФизЛицо");
		
	КонецЕсли;
	
	// Развернем реквизиты ссылочного типа, дополнив их ID и типом.
	Для каждого Реквизит из РеквизитыСсылочногоТипа Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Ключ, Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "ID", Реквизит.Значение);
		СтруктураРеквизитов.Вставить(Реквизит.Ключ + "Тип", Реквизит.Значение);
		
	КонецЦикла;
	
	// Пометка удаления.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
		СтруктураРеквизитов.Вставить("ПометкаУдаления");
	КонецЕсли;
	
	// Заполним дополнительные свойства.
	ДополнительныеСвойства = Новый ТаблицаЗначений;
	ДополнительныеСвойства.Колонки.Добавить("Свойство");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоТип");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоID");
	ДополнительныеСвойства.Колонки.Добавить("Значение");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеТип");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеID");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	
	ДополнительныеСвойства.Колонки.Добавить("СписокДоступныхТипов", Новый ОписаниеТипов(МассивТипов));
	
	СтруктураРеквизитов.Вставить("Свойства", ДополнительныеСвойства);
	
	// Заполним файлы документов.
	Если ТипОбъектаДО <> "DMCorrespondent" Тогда
		
		Файлы = новый ТаблицаЗначений;
		Файлы.Колонки.Добавить("Тип");
		Файлы.Колонки.Добавить("Наименование");
		Файлы.Колонки.Добавить("Описание");
		Файлы.Колонки.Добавить("Автор");
		Файлы.Колонки.Добавить("ID");
		Файлы.Колонки.Добавить("Размер");
		Файлы.Колонки.Добавить("Расширение");
		Файлы.Колонки.Добавить("ДатаСоздания");
		Файлы.Колонки.Добавить("ДатаМодификацииУниверсальная");
		Файлы.Колонки.Добавить("ДвоичныеДанные");
		Файлы.Колонки.Добавить("ШаблонID");
		
		СтруктураРеквизитов.Вставить("Файлы", Файлы);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Определяет, является ли текущий сеанс сеансом фонового или регламентного задания..
//
Функция ЭтоЗадание()
	
	УстановитьПривилегированныйРежим(Истина);
	НомерСеанса = НомерСеансаИнформационнойБазы();
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Если Сеансы <> Неопределено Тогда
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				Возврат Сеанс.ИмяПриложения = "BackgroundJob" или Сеанс.ИмяПриложения = "JobScheduler";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, является ли версия сервиса более свежей или такой же, как требуемая версия.
// 
// Параметры:
//   ОписаниеВерсииСервиса - Массив - массив из 4-5 элементов, составляющий полный номер версии
//   ТребуемаяВерсия - Строка - строка с номером требуемой версии
//
// Возвращаемое значение:
//   Булево - Истина, если описание версии - не меньше требуемой версии
//
Функция ВерсияНеМеньше(ОписаниеВерсииСервиса, ТребуемаяВерсия)
	
	ОписаниеТребуемойВерсии = РазложитьСтрокуВМассивПодстрок(ТребуемаяВерсия, ".");
	Если ОписаниеТребуемойВерсии.Количество() <> 5 Тогда
		ОписаниеТребуемойВерсии.Добавить("PROF");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ОписаниеВерсииСервиса0 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[0]);
	ОписаниеТребуемойВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[0]);
	ОписаниеВерсииСервиса1 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[1]);
	ОписаниеТребуемойВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[1]);
	ОписаниеВерсииСервиса2 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[2]);
	ОписаниеТребуемойВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[2]);
	ОписаниеВерсииСервиса3 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[3]);
	ОписаниеТребуемойВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[3]);
	
	НомерНеМеньше = Ложь;
	Если ОписаниеВерсииСервиса0 > ОписаниеТребуемойВерсии0 Тогда
		НомерНеМеньше = Истина;
	ИначеЕсли ОписаниеВерсииСервиса0 = ОписаниеТребуемойВерсии0 Тогда
		Если ОписаниеВерсииСервиса1 > ОписаниеТребуемойВерсии1 Тогда
			НомерНеМеньше = Истина;
		ИначеЕсли ОписаниеВерсииСервиса1 = ОписаниеТребуемойВерсии1 Тогда
			Если ОписаниеВерсииСервиса2 > ОписаниеТребуемойВерсии2 Тогда
				НомерНеМеньше = Истина;
			ИначеЕсли ОписаниеВерсииСервиса2 = ОписаниеТребуемойВерсии2 Тогда
				Если ОписаниеВерсииСервиса3 >= ОписаниеТребуемойВерсии3 Тогда
					НомерНеМеньше = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерНеМеньше И (
		(ОписаниеВерсииСервиса[4] = ОписаниеТребуемойВерсии[4]) или ОписаниеВерсииСервиса[4] = "CORP");
	
КонецФункции

// Устанавливает ссылку нового объекта согласно идентификатору в дополнительных свойствах.
//
// Параметры:
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект
//
Процедура УстановитьСсылкуНовогоПередЗаписьюОбъекта(Объект)
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаДокументооборота")
		ИЛИ НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъектаДокументооборота = Объект.ДополнительныеСвойства.ИдентификаторОбъектаДокументооборота;
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторОбъектаДокументооборота);
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 
		|	Ссылка
		|ИЗ 
		|	" + ПолноеИмя + "
		|ГДЕ
		|	Ссылка = &СсылкаПоИдентификатору");
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Объект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПодсистемБсп

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотВерсияСервиса", "ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИмяПользователя", "ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПароль", "ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПарольИзвестен", "ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС", "ИнтеграцияС1СДокументооборот.УстановитьПараметрыСеанса");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
