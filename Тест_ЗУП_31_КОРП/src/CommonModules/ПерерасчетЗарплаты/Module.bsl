#Область СлужебныйПрограммныйИнтерфейс

// Осуществляет проверку могут ли возникнуть перерасчеты по сотрудникам и периодам
// документа, в случае если перерасчеты могут возникнуть запоминает предыдущие
// движения регистратора во временных таблицах с именами вида ВТПерерасчет<ИмяРегистра>,
// имена регистров из числа, движения по которым могут оказывать влияние на процесс
// начисления зарплаты (см. функцию ИменаРегистровИнициирующихПерерасчеты) регистратором
// которых может быть переданная в параметре Регистратор ссылка на документ.
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицу
//												ВТДанныеДокументов с полями:
//													* Организация
//													* Сотрудник
//													* ПериодДействия
//		Организация							- СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Булево	- Истина, если перерасчеты могут возникнуть.
//
Функция СборДанныхДляРегистрацииПерерасчетов(Регистратор, ДанныеДляРегистрацииПерерасчетов, Организация, СборДанныхДляРегистрации = Ложь, ИсключатьНеИзмененные = Ложь, РегистрацияНачалаИлиОкончанияУчета = Ложь, РегистрацияПерерасчетаУдержаний = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	СоздатьВТКонтролируемыеНачисления(Запрос.МенеджерВременныхТаблиц, Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДокументов.Сотрудник
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО Начисления.Организация = ДанныеДокументов.Организация
		|			И Начисления.Сотрудник = ДанныеДокументов.Сотрудник
		|			И Начисления.ПериодДействия >= НАЧАЛОПЕРИОДА(ДанныеДокументов.ПериодДействия, МЕСЯЦ)
		|			И Начисления.ПериодДействияКонец >= ДанныеДокументов.ПериодДействия
		|			И Начисления.ВидРасчета В
		|				(ВЫБРАТЬ
		|					Начисления.Начисление
		|				ИЗ
		|					ВТКонтролируемыеНачисления КАК Начисления)";
	
	Если РегистрацияНачалаИлиОкончанияУчета Тогда
		
		ЗапросПоДокументамНачисленияЗарплаты = Новый Запрос;
		ЗапросПоДокументамНачисленияЗарплаты.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
		
		ЗапросПоДокументамНачисленияЗарплаты.Текст =
			"ВЫБРАТЬ
			|	НачислениеЗарплаты.Ссылка
			|ИЗ
			|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
			|		ПО НачислениеЗарплаты.Организация = ДанныеДокументов.Организация
			|			И НачислениеЗарплаты.МесяцНачисления >= НАЧАЛОПЕРИОДА(ДанныеДокументов.ПериодДействия, МЕСЯЦ)
			|ГДЕ
			|	НачислениеЗарплаты.Проведен";
		
		НачисленияЗарплаты = ЗапросПоДокументамНачисленияЗарплаты.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Запрос.УстановитьПараметр("НачисленияЗарплаты", НачисленияЗарплаты);
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеДокументов.Сотрудник
			|ИЗ
			|	ВТДанныеДокументов КАК ДанныеДокументов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО Начисления.Организация = ДанныеДокументов.Организация
			|			И Начисления.Регистратор В (&НачисленияЗарплаты)
			|			И Начисления.ПериодДействия >= НАЧАЛОПЕРИОДА(ДанныеДокументов.ПериодДействия, МЕСЯЦ)
			|			И Начисления.ПериодДействияКонец >= ДанныеДокументов.ПериодДействия
			|			И Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					Начисления.Начисление
			|				ИЗ
			|					ВТКонтролируемыеНачисления КАК Начисления)";
		
	КонецЕсли;
	
	Если РегистрацияПерерасчетаУдержаний Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.Сотрудник = ДанныеДокументов.Сотрудник",
			"И Начисления.ФизическоеЛицо = ДанныеДокументов.ФизическоеЛицо");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокументов.Сотрудник", "ДанныеДокументов.ФизическоеЛицо");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СборДанныхДляРегистрации = Истина;
	КонецЕсли;
	
	ИменаРегистровИнициаторов = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор);
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
		
		ИмяВТПерерасчет = "ВТПерерасчет" + ИмяРегистра;
		СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТПерерасчет, ИсключатьНеИзмененные);
		Если Не СборДанныхДляРегистрации Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблицаРегистра.Регистратор
				|ИЗ
				|	" + ИмяВТПерерасчет + " КАК ТаблицаРегистра";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Если РегистрацияНачалаИлиОкончанияУчета Тогда
					
					Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	МИНИМУМ(ДанныеРегистра.Период) КАК Период,
						|	ДанныеРегистра.Организация
						|ПОМЕСТИТЬ ВТПерерасчетПериоды
						|ИЗ
						|	ВТПерерасчет КАК ДанныеРегистра
						|
						|СГРУППИРОВАТЬ ПО
						|	ДанныеРегистра.Организация
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	ПерерасчетПериоды.Организация
						|ИЗ
						|	ВТПерерасчетПериоды КАК ПерерасчетПериоды
						|ГДЕ
						|	1 В
						|			(ВЫБРАТЬ ПЕРВЫЕ 1
						|				1
						|			ИЗ
						|				РегистрРасчета.Начисления КАК Начисления
						|			ГДЕ
						|				Начисления.Организация = ПерерасчетПериоды.Организация
						|				И Начисления.ПериодДействия >= НАЧАЛОПЕРИОДА(ПерерасчетПериоды.Период, МЕСЯЦ)
						|				И Начисления.ПериодДействияКонец >= ПерерасчетПериоды.Период
						|				И Начисления.Регистратор В (&НачисленияЗарплаты)
						|				И Начисления.ВидРасчета В
						|					(ВЫБРАТЬ
						|						Начисления.Начисление
						|					ИЗ
						|						ВТКонтролируемыеНачисления КАК Начисления))";
					
				Иначе
					
					Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	МИНИМУМ(ДанныеРегистра.Период) КАК Период,
						|	ДанныеРегистра.Сотрудник,
						|	ДанныеРегистра.Организация
						|ПОМЕСТИТЬ ВТПерерасчетПериоды
						|ИЗ
						|	ВТПерерасчет КАК ДанныеРегистра
						|
						|СГРУППИРОВАТЬ ПО
						|	ДанныеРегистра.Сотрудник,
						|	ДанныеРегистра.Организация
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	ДанныеРегистра.Сотрудник
						|ИЗ
						|	ВТПерерасчетПериоды КАК ДанныеРегистра
						|ГДЕ
						|	1 В
						|			(ВЫБРАТЬ ПЕРВЫЕ 1
						|				1
						|			ИЗ
						|				РегистрРасчета.Начисления КАК Начисления
						|			ГДЕ
						|				Начисления.Сотрудник = ДанныеРегистра.Сотрудник
						|				И Начисления.Организация = ДанныеРегистра.Организация
						|				И Начисления.ПериодДействия >= НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ)
						|				И Начисления.ПериодДействияКонец >= ДанныеРегистра.Период
						|				И Начисления.ВидРасчета В
						|					(ВЫБРАТЬ
						|						Начисления.Начисление
						|					ИЗ
						|						ВТКонтролируемыеНачисления КАК Начисления))";
					
					Если ИменаРегистровИнициирующихПерерасчетыУдержаний().Найти(ИмяРегистра) <> Неопределено Тогда
						
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеРегистра.Сотрудник", "ДанныеРегистра.ФизическоеЛицо");
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Сотрудник", "Начисления.ФизическоеЛицо");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет", ИмяВТПерерасчет);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					СборДанныхДляРегистрации = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СборДанныхДляРегистрации;
	
КонецФункции

// Осуществляет регистрацию необходимости проведения перерасчета заработной платы в случае
// если найдены изменения в движениях регистратора, осуществленные "задним" числом относительно
// движений начисления зарплаты.
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицы
//												с предыдущими движениями ключевых регистров, собранные
//												методом СборДанныхДляРегистрацииПерерасчетов
//		Организация							- СправочникСсылка.Организации
//
Процедура РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация, ИсключатьНеИзмененные = Ложь, РегистрацияНачалаУчета = Ложь) Экспорт
	
	Регистратор = Движения[0].Отбор.Регистратор.Значение;
	
	РегистрыРегистратора = ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения);
	Если РегистрыРегистратора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
		
		Запрос.УстановитьПараметр("Регистратор",  Регистратор);

		#Область ВыявлениеПерерасчетовНачисленийИЛьгот
		
		// Подготовка временных таблиц к выявлению перерасчетов по регистрам инициирующим перерасчеты начислений и льгот.
		
		ВТСотрудникиПериодыНачисленийИЛьготСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения, ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			ЧастиТекстаЗапроса = Новый Массив;
			Запрос.Текст = "";
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьготПредварительно";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
				
				СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТТекущиеДвижения, ИсключатьНеИзмененные, Движения[ИмяРегистра].Выгрузить());
				ЧастиЗапросаСравнения = ЧастиЗапросаСравненияДвижений(ИмяРегистра);
				
				Если ДобавитьОбъединить Тогда
					ЧастиТекстаЗапроса.Добавить("ОБЪЕДИНИТЬ");
				КонецЕсли;
				
				ЧастиТекстаЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ");
				
				ОписаниеПолей = ЧастиЗапросаСравнения.Поля;
				Если ИмяРегистра = "ПлановыеНачисления" Тогда
					
					ОписаниеПолей = ОписаниеПолей + ",
						|	ВЫБОР КОГДА ЕстьNULL(ОбъединенныйЗапрос.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
						|		ТОГДА НЕ ВЫРАЗИТЬ(ОбъединенныйЗапрос.Начисление КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК ПерерасчетНачислений,
						|	ВЫБОР КОГДА ЕстьNULL(ОбъединенныйЗапрос.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
						|		ТОГДА ВЫРАЗИТЬ(ОбъединенныйЗапрос.Начисление КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК ПерерасчетЛьгот,
						|	ВЫБОР КОГДА ЕстьNULL(ОбъединенныйЗапрос.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
						|		И ВЫРАЗИТЬ(ОбъединенныйЗапрос.Начисление КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой
						|		ТОГДА ОбъединенныйЗапрос.Начисление
						|		ИНАЧЕ НЕОПРЕДЕЛЕНО
						|	КОНЕЦ КАК ВидРасчета";
					
				Иначе
					
					ОписаниеПолей = ОписаниеПолей + ",
						|	ИСТИНА КАК ПерерасчетНачислений,
						|	ЛОЖЬ КАК ПерерасчетЛьгот,
						|	НЕОПРЕДЕЛЕНО КАК ВидРасчета";
					
				КонецЕсли;
				
				ЧастиТекстаЗапроса.Добавить(ОписаниеПолей);
				
				Если Не ПустаяСтрока(ТекстПоместить) Тогда
					ЧастиТекстаЗапроса.Добавить(ТекстПоместить);
				КонецЕсли;
				
				ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Источники);
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Условия) Тогда
					ЧастиТекстаЗапроса.Добавить("ГДЕ");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Условия);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.СгруппироватьПо) Тогда
					ЧастиТекстаЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.СгруппироватьПо);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Имеющие) Тогда
					ЧастиТекстаЗапроса.Добавить("ИМЕЮЩИЕ");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Имеющие);
				КонецЕсли;
				
				ТекстПоместить = "";
				ДобавитьОбъединить = Истина;
				
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
			
			Запрос.Выполнить();
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	МИНИМУМ(СотрудникиПериоды.Период) КАК Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	СотрудникиПериоды.ДокументОснование,
				|	СотрудникиПериоды.Основание,
				|	СотрудникиПериоды.ВидРасчета,
				|	МАКСИМУМ(СотрудникиПериоды.ПерерасчетНачислений) КАК ПерерасчетНачислений,
				|	МАКСИМУМ(СотрудникиПериоды.ПерерасчетЛьгот) КАК ПерерасчетЛьгот
				|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьгот
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийИЛьготПредварительно КАК СотрудникиПериоды
				|ГДЕ
				|	(СотрудникиПериоды.ПерерасчетНачислений
				|			ИЛИ СотрудникиПериоды.ПерерасчетЛьгот)
				|
				|СГРУППИРОВАТЬ ПО
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	СотрудникиПериоды.ДокументОснование,
				|	СотрудникиПериоды.Основание,
				|	СотрудникиПериоды.ВидРасчета
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТСотрудникиПериодыНачисленийИЛьготПредварительно
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	СотрудникиПериодыНачисленийИЛьгот.Сотрудник
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийИЛьгот КАК СотрудникиПериодыНачисленийИЛьгот";
			
			ВТСотрудникиПериодыНачисленийИЛьготСоздана = Не Запрос.Выполнить().Пустой();
			
		КонецЕсли;
		
		#КонецОбласти


		#Область ВыявлениеПерерасчетовНачисленийЛьготУдержаний
		
		// Подготовка временных таблиц к выявлению перерасчетов по регистрам инициирующим перерасчеты начислений, льгот или удержаний.
		
		ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения, ИменаРегистровИнициирующихПерерасчетыНачисленийЛьготУдержаний());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			// Когда в движениях есть регистры с показателями
			
			ЧастиТекстаЗапроса = Новый Массив;
			Запрос.Текст = "";
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийЛьготУдержанийПредварительно";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
				
				СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТТекущиеДвижения, ИсключатьНеИзмененные, Движения[ИмяРегистра].Выгрузить());
				ЧастиЗапросаСравнения = ЧастиЗапросаСравненияДвижений(ИмяРегистра);
				
				Если ДобавитьОбъединить Тогда
					ЧастиТекстаЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
				КонецЕсли;
				
				ЧастиТекстаЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ");
				
				ОписаниеПолей = ЧастиЗапросаСравнения.Поля;
				ОписаниеПолей = ОписаниеПолей + ",
					|	ОбъединенныйЗапрос.Показатель";
				
				ЧастиТекстаЗапроса.Добавить(ОписаниеПолей);
				
				Если Не ПустаяСтрока(ТекстПоместить) Тогда
					ЧастиТекстаЗапроса.Добавить(ТекстПоместить);
				КонецЕсли;
				
				ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Источники);
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Условия) Тогда
					ЧастиТекстаЗапроса.Добавить("ГДЕ");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Условия);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.СгруппироватьПо) Тогда
					ЧастиТекстаЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.СгруппироватьПо);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Имеющие) Тогда
					ЧастиТекстаЗапроса.Добавить("ИМЕЮЩИЕ");
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Имеющие);
				КонецЕсли;
				
				ТекстПоместить = "";
				ДобавитьОбъединить = Истина;
				
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
			Запрос.Выполнить();
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
				|	СотрудникиПериоды.ДокументОснование,
				|	СотрудникиПериоды.Показатель,
				|	СотрудникиПериоды.Основание
				|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийЛьготУдержаний
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержанийПредварительно КАК СотрудникиПериоды
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТСотрудникиПериодыНачисленийЛьготУдержанийПредварительно";
			
			Запрос.Выполнить();
			
			ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана = Истина;
			
		КонецЕсли;
		
		#КонецОбласти


		#Область ВыявлениеПерерасчетовУдержаний
		
		// Перерасчет удержаний
		
		ВТСотрудникиПериодыУдержанийСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения, ИменаРегистровИнициирующихПерерасчетыУдержаний());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			ЧастиТекстаЗапроса = Новый Массив;
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыУдержаний";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
				
				СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТТекущиеДвижения, ИсключатьНеИзмененные, Движения[ИмяРегистра].Выгрузить());
				ЧастиЗапросаСравнения = ЧастиЗапросаСравненияДвиженийУдержаний(ИмяРегистра);
				
				Если ИмяРегистра = "ПлановыеУдержания" Тогда
					
					Если ДобавитьОбъединить Тогда
						ЧастиТекстаЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
					КонецЕсли;
					
					ЧастиТекстаЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ");
					
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Поля);
					
					Если Не ПустаяСтрока(ТекстПоместить) Тогда
						ЧастиТекстаЗапроса.Добавить(ТекстПоместить);
					КонецЕсли;
					
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Источники);
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Условия) Тогда
						ЧастиТекстаЗапроса.Добавить("ГДЕ");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Условия);
					КонецЕсли;
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.СгруппироватьПо) Тогда
						ЧастиТекстаЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.СгруппироватьПо);
					КонецЕсли;
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Имеющие) Тогда
						ЧастиТекстаЗапроса.Добавить("ИМЕЮЩИЕ");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Имеющие);
					КонецЕсли;
					
					ТекстПоместить = "";
					ДобавитьОбъединить = Истина;
					
				ИначеЕсли ИмяРегистра = "УсловияУдержанияПоИсполнительномуДокументу" Тогда
					
					Если ДобавитьОбъединить Тогда
						ЧастиТекстаЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
					КонецЕсли;
					
					ЧастиТекстаЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ");
					
					ЧастиЗапросаСравнения.Поля = СтрЗаменить(ЧастиЗапросаСравнения.Поля, "ОбъединенныйЗапрос.Удержание КАК Удержание,",
						"ПлановыеУдержания.Удержание КАК Удержание,");
					
					ЧастиЗапросаСравнения.СгруппироватьПо = ЧастиЗапросаСравнения.СгруппироватьПо + ",
						|		ПлановыеУдержания.Удержание";

					ЧастиЗапросаСравнения.Поля = СтрЗаменить(ЧастиЗапросаСравнения.Поля, "ОбъединенныйЗапрос.ДокументОснование КАК ДокументОснование,",
						"ОбъединенныйЗапрос.ИсполнительныйДокумент КАК ДокументОснование,");
					
					ЧастиЗапросаСравнения.Имеющие = СтрЗаменить(ЧастиЗапросаСравнения.Имеющие, "ОбъединенныйЗапрос.ДокументОснование,",
						"ОбъединенныйЗапрос.ИсполнительныйДокумент,");
					
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Поля);
					
					Если Не ПустаяСтрока(ТекстПоместить) Тогда
						ЧастиТекстаЗапроса.Добавить(ТекстПоместить);
					КонецЕсли;
					
					ЧастиЗапросаСравнения.Источники = ЧастиЗапросаСравнения.Источники + "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
						|		ПО &Регистратор = ПлановыеУдержания.Регистратор
						|			И ОбъединенныйЗапрос.Организация = ПлановыеУдержания.Организация
						|			И ОбъединенныйЗапрос.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо
						|			И ОбъединенныйЗапрос.ИсполнительныйДокумент = ПлановыеУдержания.ДокументОснование";
					
					ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Источники);
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Условия) Тогда
						ЧастиЗапросаСравнения.Условия = ЧастиЗапросаСравнения.Условия + Символы.ПС + "И"
					КонецЕсли;
					
					ЧастиЗапросаСравнения.Условия = ЧастиЗапросаСравнения.Условия
						+ " НЕ ПлановыеУдержания.Удержание ЕСТЬ NULL";
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Условия) Тогда
						ЧастиТекстаЗапроса.Добавить("ГДЕ");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Условия);
					КонецЕсли;
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.СгруппироватьПо) Тогда
						ЧастиТекстаЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.СгруппироватьПо);
					КонецЕсли;
					
					Если Не ПустаяСтрока(ЧастиЗапросаСравнения.Имеющие) Тогда
						ЧастиТекстаЗапроса.Добавить("ИМЕЮЩИЕ");
						ЧастиТекстаЗапроса.Добавить(ЧастиЗапросаСравнения.Имеющие);
					КонецЕсли;
					
					ТекстПоместить = "";
					ДобавитьОбъединить = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
			Запрос.Выполнить();
			
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИзмененияУдержаний.ФизическоеЛицо
				|ИЗ
				|	ВТСотрудникиПериодыУдержаний КАК ИзмененияУдержаний";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				
				Запрос.Текст = "Уничтожить ВТСотрудникиПериодыУдержаний";
				Запрос.Выполнить();
				
			Иначе
				ВТСотрудникиПериодыУдержанийСоздана = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти

		РегистрацияПерерасчетовНачисленийИЛьгот(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийИЛьготСоздана, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, РегистрацияНачалаУчета);
		РегистрацияПерерасчетовУдержаний(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, ВТСотрудникиПериодыУдержанийСоздана);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет регистрацию необходимости проведения перерасчета заработной платы в случае
// если отменяется проведение и удаляются движениях регистратора, осуществленные "задним" числом
// относительно движений начисления зарплаты.
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицы
//												с предыдущими движениями ключевых регистров, собранные
//												методом СборДанныхДляРегистрацииПерерасчетов
//		Организация							- СправочникСсылка.Организации
//
Процедура РегистрацияПерерасчетовПриОтменеПроведения(Регистратор, ДанныеДляРегистрацииПерерасчетов, Организация, РегистрацияОкончанияУчета = Ложь) Экспорт
	
	РегистрыРегистратора = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор);
	Если РегистрыРегистратора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;

		#Область ВыявлениеПерерасчетовНачисленийИЛьгот
		
		ВТСотрудникиПериодыНачисленийИЛьготСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор, ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			Запрос.Текст = "";
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьгот";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				ИмяВТРегистра = "ВТДвижения" + ИмяРегистра;
				СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТРегистра);
				
				Если ДобавитьОбъединить Тогда
					
					Запрос.Текст = Запрос.Текст
						+ Символы.ПС
						+ "ОБЪЕДИНИТЬ ВСЕ"
						+ Символы.ПС;
					
				КонецЕсли;
				
				ТекстЗапросаПоРегистру =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НАЧАЛОПЕРИОДА(Движения.Период, МЕСЯЦ) КАК ПериодДействия,
					|	Движения.Период,
					|	Движения.Организация КАК Организация,
					|	Движения.Сотрудник КАК Сотрудник,
					|	Движения.Регистратор КАК Основание,
					|	НЕОПРЕДЕЛЕНО КАК ВидРасчета,
					|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
					|	ИСТИНА КАК ПерерасчетНачислений,
					|	ЛОЖЬ КАК ПерерасчетЛьгот"
					+ Символы.ПС
					+ ТекстПоместить
					+ Символы.ПС
					+ "ИЗ " + ИмяВТРегистра + " КАК Движения";
				
				Если ИмяРегистра = "ПлановыеНачисления" Тогда
					
					ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "НЕОПРЕДЕЛЕНО КАК ВидРасчета",
						"ВЫБОР КОГДА Движения.Начисление.ЯвляетсяЛьготой ТОГДА Движения.Начисление ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ВидРасчета");
					
					ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "НЕОПРЕДЕЛЕНО КАК ДокументОснование",
						"ВЫБОР КОГДА Движения.Начисление.ЯвляетсяЛьготой ТОГДА Движения.ДокументОснование ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ДокументОснование");
					
					ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "ИСТИНА КАК ПерерасчетНачислений",
						"НЕ Движения.Начисление.ЯвляетсяЛьготой КАК ПерерасчетНачислений");
					
					ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "ЛОЖЬ КАК ПерерасчетЛьгот",
						"Движения.Начисление.ЯвляетсяЛьготой КАК ПерерасчетЛьгот");
					
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРегистру;
				
				ТекстПоместить = "";
				ДобавитьОбъединить = Истина;
				
			КонецЦикла;
			
			Запрос.Выполнить();
			ВТСотрудникиПериодыНачисленийИЛьготСоздана = Истина;
			
		КонецЕсли;
		
		#КонецОбласти


		#Область ВыявлениеПерерасчетовНачисленийЛьготУдержаний
		
		ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор, ИменаРегистровИнициирующихПерерасчетыНачисленийЛьготУдержаний());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			Запрос.Текст = "";
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийЛьготУдержаний";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				ИмяВТРегистра = "ВТДвижения" + ИмяРегистра;
				СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТРегистра);
				
				Если ДобавитьОбъединить Тогда
					
					Запрос.Текст = Запрос.Текст
						+ Символы.ПС
						+ "ОБЪЕДИНИТЬ ВСЕ"
						+ Символы.ПС;
					
				КонецЕсли;
				
				ТекстЗапросаПоРегистру =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НАЧАЛОПЕРИОДА(Движения.Период, МЕСЯЦ) КАК ПериодДействия,
					|	Движения.Период,
					|	Движения.Организация КАК Организация,
					|	Движения.Сотрудник КАК Сотрудник,
					|	Движения.ФизическоеЛицо КАК ФизическоеЛицо,
					|	Движения.Регистратор КАК Основание,
					|	Движения.Показатель КАК Показатель,
					|	НЕОПРЕДЕЛЕНО КАК ДокументОснование"
					+ Символы.ПС
					+ ТекстПоместить
					+ Символы.ПС
					+ "ИЗ " + ИмяВТРегистра + " КАК Движения";
				
				Если ИмяРегистра = "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников" Тогда
					
					ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "НЕОПРЕДЕЛЕНО КАК Основание",
						"Движения.ДокументОснование КАК ДокументОснование");
					
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРегистру;
				
				ТекстПоместить = "";
				ДобавитьОбъединить = Истина;
				
			КонецЦикла;
			
			Запрос.Выполнить();
			ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана = Истина;
			
		КонецЕсли;
		
		#КонецОбласти


		#Область ВыявлениеПерерасчетовУдержаний
		
		ВТСотрудникиПериодыУдержанийСоздана = Ложь;
		
		ИменаРегистров = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор, ИменаРегистровИнициирующихПерерасчетыУдержаний());
		Если ИменаРегистров.Количество() > 0 Тогда
			
			Запрос.Текст = "";
			ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериодыУдержаний";
			ДобавитьОбъединить = Ложь;
			
			Для каждого ИмяРегистра Из ИменаРегистров Цикл
				
				Если ИмяРегистра = "ПлановыеУдержания"
					Или ИмяРегистра = "УсловияУдержанияПоИсполнительномуДокументу" Тогда
					
					ИмяВТРегистра = "ВТДвижения" + ИмяРегистра;
					СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТРегистра);
					
					Если ДобавитьОбъединить Тогда
						
						Запрос.Текст = Запрос.Текст
							+ Символы.ПС
							+ "ОБЪЕДИНИТЬ"
							+ Символы.ПС;
						
					КонецЕсли;
					
					ТекстЗапросаПоРегистру =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	НАЧАЛОПЕРИОДА(Движения.Период, МЕСЯЦ) КАК ПериодДействия,
						|	Движения.Период,
						|	Движения.Организация КАК Организация,
						|	Движения.ФизическоеЛицо КАК ФизическоеЛицо,
						|	Движения.Удержание КАК Удержание,
						|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
						|	Движения.Регистратор КАК Основание"
						+ Символы.ПС
						+ ТекстПоместить
						+ Символы.ПС
						+ "ИЗ " + ИмяВТРегистра + " КАК Движения";
					
					Если ИмяРегистра = "УсловияУдержанияПоИсполнительномуДокументу" Тогда
						
						ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "Движения.Удержание КАК Удержание,",
							"ПлановыеУдержания.Удержание КАК Удержание,");
						
						ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "НЕОПРЕДЕЛЕНО КАК ДокументОснование",
							"Движения.ИсполнительныйДокумент КАК ДокументОснование");
						
						ТекстЗапросаПоРегистру = ТекстЗапросаПоРегистру + "
							|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
							|		ПО Движения.Регистратор = ПлановыеУдержания.Регистратор
							|			И Движения.Организация = ПлановыеУдержания.Организация
							|			И Движения.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо
							|			И Движения.ИсполнительныйДокумент = ПлановыеУдержания.ДокументОснование
							|ГДЕ
							|	НЕ ПлановыеУдержания.Удержание ЕСТЬ NULL";
						
					Иначе
						
						ТекстЗапросаПоРегистру = СтрЗаменить(ТекстЗапросаПоРегистру, "НЕОПРЕДЕЛЕНО КАК ДокументОснование",
							"Движения.ДокументОснование КАК ДокументОснование");
						
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРегистру;
					
					ТекстПоместить = "";
					ДобавитьОбъединить = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Выполнить();
			
			ВТСотрудникиПериодыУдержанийСоздана = Истина;
			
		КонецЕсли;
		
		#КонецОбласти

		РегистрацияПерерасчетовНачисленийИЛьгот(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийИЛьготСоздана, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, РегистрацияОкончанияУчета);
		РегистрацияПерерасчетовУдержаний(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, ВТСотрудникиПериодыУдержанийСоздана);
		
	Иначе
		УдалениеПерерасчетаПоРегистратору(Регистратор);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет, по окончании проведения документа
// начисление зарплаты.
//
// Параметры:
//		Регистратор							- ДокументСсылка.НачислениеЗарплаты
//		УдалитьПерерасчетыТекущегоПериода	- Булево, Истина если было произведено перезаполнение
//												формы документа и перерасчеты текущего месяца начисления
//												учтены в таблице начислений
//		ПериодыРасчетаСотрудников			- ТаблицаЗначений, с перерасчетами сотрудников проведенных до перепроведения документа,
//													если в ходе работы с документами были удалены записи перерасчетов, информация
//													о необходимости проведения перерасчетов будет восстановлена
//												* Организация
//												* Сотрудник
//												* ПериодДействия
//
Процедура УдалениеПерерасчетов(Регистратор, УдалитьПерерасчетыТекущегоПериода, ПериодыРасчетаСотрудников) Экспорт
	
	Запрос = ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПерерасчетНачислений Тогда
				
				Если ПериодыРасчетаСотрудников <> Неопределено Тогда
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Организация", Выборка.Организация);
					СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
					СтруктураПоиска.Вставить("ПериодДействия", Выборка.ПериодДействия);
					СтруктураПоиска.Вставить("ПерерасчетНачислений", Истина);
					
					СтрокиПерерасчетов = ПериодыРасчетаСотрудников.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаРасчетов Из СтрокиПерерасчетов Цикл
						ПериодыРасчетаСотрудников.Удалить(СтрокаРасчетов);
					КонецЦикла;
					
				КонецЕсли; 
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			Если Выборка.ПерерасчетУдержаний Тогда
				
				Если ПериодыРасчетаСотрудников <> Неопределено Тогда
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Организация", Выборка.Организация);
					СтруктураПоиска.Вставить("Сотрудник", Выборка.Сотрудник);
					СтруктураПоиска.Вставить("ПериодДействия", Выборка.ПериодДействия);
					СтруктураПоиска.Вставить("ВидРасчета", Выборка.ВидРасчета);
					СтруктураПоиска.Вставить("ДокументОснование", Выборка.ДокументОснование);
					СтруктураПоиска.Вставить("ПерерасчетУдержаний", Истина);
					
					СтрокиПерерасчетов = ПериодыРасчетаСотрудников.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаРасчетов Из СтрокиПерерасчетов Цикл
						ПериодыРасчетаСотрудников.Удалить(СтрокаРасчетов);
					КонецЦикла;
					
				КонецЕсли; 
				
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Удержание.Установить(Выборка.ВидРасчета);
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПериодыРасчетаСотрудников <> Неопределено Тогда
		
		Для каждого СтрокаПериодовПерерасчета Из ПериодыРасчетаСотрудников Цикл
			
			Если СтрокаПериодовПерерасчета.ПерерасчетНачислений Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(СтрокаПериодовПерерасчета.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаПериодовПерерасчета.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(СтрокаПериодовПерерасчета.ПериодДействия);
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаПериодовПерерасчета);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			Если СтрокаПериодовПерерасчета.ПерерасчетУдержаний Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(СтрокаПериодовПерерасчета.Организация);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(СтрокаПериодовПерерасчета.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(СтрокаПериодовПерерасчета.ПериодДействия);
				НаборЗаписей.Отбор.Удержание.Установить(СтрокаПериодовПерерасчета.ВидРасчета);
				НаборЗаписей.Отбор.ДокументОснование.Установить(СтрокаПериодовПерерасчета.ДокументОснование);
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаПериодовПерерасчета);
				Запись.ФизическоеЛицо = СтрокаПериодовПерерасчета.Сотрудник;
				Запись.Удержание = СтрокаПериодовПерерасчета.ВидРасчета;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.УдалениеПерерасчетов(РезультатЗапроса, ПериодыРасчетаСотрудников);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, по окончании проведения документа
// начислятеля зарплаты не являющемся документом "Начисление зарплаты".
//
// Параметры:
//		Регистратор		- ДокументСсылка
//		Сотрудники		- Массив, ссылки на сотрудников, по которым нужно удалить сведения
//		ФизическиеЛица	- Массив, ссылки на физических лиц, по которым нужно удалить сведения об удержаниях.
//
Процедура УдалениеПерерасчетаПоРегистратору(Регистратор, Сотрудники = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Регистратор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетЗарплаты.Сотрудник,
			|	ПерерасчетЗарплаты.ДокументНачисления КАК ДокументНачисления
			|ИЗ
			|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
			|ГДЕ
			|	ПерерасчетЗарплаты.ДокументНачисления = &ДокументНачисления
			|	И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументНачисления";
		
		Запрос.УстановитьПараметр("ДокументНачисления", Регистратор);
		
		Если ЗначениеЗаполнено(Сотрудники) Тогда
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПерерасчетЗарплаты.Сотрудник,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Если ЗначениеЗаполнено(Сотрудники) Тогда
					НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетУдержаний.ФизическоеЛицо,
			|	ПерерасчетУдержаний.ДокументНачисления КАК ДокументНачисления
			|ИЗ
			|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ГДЕ
			|	ПерерасчетУдержаний.ДокументНачисления = &ДокументНачисления
			|	И ПерерасчетУдержаний.ФизическоеЛицо В(&ФизическиеЛица)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументНачисления";
		
		Запрос.УстановитьПараметр("ДокументНачисления", Регистратор);
		
		Если ЗначениеЗаполнено(Сотрудники) Тогда
			Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПерерасчетУдержаний.ФизическоеЛицо,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетУдержаний.ФизическоеЛицо В(&ФизическиеЛица)", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, в зависимости от значений
// параметров, переданных в ДополнительныеПараметры.
//
// Параметры:
//		Регистратор				- ДокументСсылка
//		ДополнительныеПараметры	- Структура с ключами
//									* УдалитьПерерасчетыЗарплаты		- Булево
//									* СотрудникиПерерасчетаЗаработка	- Массив
//
Процедура УдалениеПерерасчетовПоДополнительнымПараметрам(Регистратор, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПерерасчетыЗарплаты = Неопределено;
	ДополнительныеПараметры.Свойство("УдалитьПерерасчетыЗарплаты", УдалитьПерерасчетыЗарплаты);
	Если УдалитьПерерасчетыЗарплаты <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Неопределено;
	ДополнительныеПараметры.Свойство("СотрудникиПерерасчетаЗаработка", Сотрудники);
	
	ФизическиеЛица = Неопределено;
	ДополнительныеПараметры.Свойство("СотрудникиПерерасчетаЗаработка", ФизическиеЛица);
	
	УдалениеПерерасчетаПоРегистратору(Регистратор, Сотрудники, ФизическиеЛица);
	
КонецПроцедуры

// Собирает информацию о регистрируемых перерасчетах перед записью начисления зарплаты,
// результат работы (ТаблицаЗначений) помещается в состав дополнительных свойств регистратора.
//
// Параметры:
//		РегистраторОбъект - ДокументОбъект.НачислениеЗарплаты
//
Функция ПериодыРасчетаСотрудников(РегистраторОбъект) Экспорт
	
	Запрос = ЗапросВТПериодыРасчетаСотрудников(РегистраторОбъект.Ссылка, Ложь);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		РегистраторОбъект.ДополнительныеСвойства.Вставить("ПериодыРасчетаСотрудников", РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецФункции

// Восстанавливает записи о необходимости проведения перерасчета, при отмене проведения
// документа начисления зарплаты, с заполненной табличной частью начисления перерасчеты.
//
// Параметры:
//		Регистратор	- ДокументСсылка.НачислениеЗарплаты
//		Организация	- СотрудникСсылка.Организации
//
Процедура ВосстановлениеПерерасчетов(Регистратор, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Регистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала КАК Период,
		|	НЕОПРЕДЕЛЕНО КАК Основание,
		|	ИСТИНА КАК ПерерасчетНачислений
		|ПОМЕСТИТЬ ВТЗаписываемыйПерерасчетЗарплаты
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачислениеЗарплатыНачисленияПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка = &Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.НачислениеЗарплаты", "Документ." + Регистратор.Метаданные().Имя);
	
	Запрос.Выполнить();
	
	ЗарегистрироватьПерерасчетыСотрудников(Запрос.МенеджерВременныхТаблиц, Организация, "ВТЗаписываемыйПерерасчетЗарплаты", Регистратор);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ВосстановлениеПерерасчетов(Регистратор, Организация);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, требуется ли произвести перерасчет зарплаты по сотрудникам организации
// за указанный месяц.
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок.
//
// Возвращаемое значение:
//		Число - Количество сотрудников, для которых требуется выполнить доначисление (перерасчет).
//
Функция ТребуетсяПерерасчетПериода(Организация, Месяц, Сотрудники = Неопределено) Экспорт
		
	МассивСотрудников = СотрудникиКПерерасчету(Организация, Месяц, Сотрудники);
	Возврат МассивСотрудников.Количество();
	
КонецФункции

// Возвращает массив сотрудников по которым необходимо выполнить доначисления (перерасчет)
// в указанной организации и за указанный месяц.
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок.
//
// Возвращаемое значение:
//		Массив
//
Функция СотрудникиКПерерасчету(Организация, Месяц, Сотрудники = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Месяц));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплаты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПерерасчетЗарплаты
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия = &Месяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОсновныеСотрудникиФизическихЛиц.Сотрудник
		|ИЗ
		|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ПерерасчетУдержаний.Организация.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И ПерерасчетУдержаний.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|			И (КОНЕЦПЕРИОДА(&Месяц, МЕСЯЦ) МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания)
		|ГДЕ
		|	ПерерасчетУдержаний.Организация = &Организация
		|	И ПерерасчетУдержаний.ПериодДействия = &Месяц";
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЗапросСотрудниковПересчетаПериода(Запрос);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетЗарплаты.Сотрудник
			|ИЗ
			|	ВТПерерасчетЗарплаты КАК ПерерасчетЗарплаты";
	
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.УстановитьПараметр("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
		Иначе
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в форме документа начисление зарплаты.
//
// Параметры:
//		Форма			- УправляемаяФорма
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчетаВФормеДокумента(Форма, Документ) Экспорт
	
	Если Форма.Объект.РежимДоначисления Тогда
		ОтображениеСообщения = Ложь;
	Иначе
		ОтображениеСообщения = Не Форма.ЗаполнениеВыполнено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Подразделение) Тогда
		СписокСотрудников = Форма.Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Иначе
		СписокСотрудников = Неопределено;
	КонецЕсли;
	
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(
		Форма, Форма.Объект.Организация, Форма.Объект.МесяцНачисления, Не ОтображениеСообщения, СписокСотрудников, Документ);
	
КонецПроцедуры

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в указанном месяце.
//
// Параметры:
//		Форма			- УправляемаяФорма
//		Организация		- СправочникСсылка.Организации
//		Месяц			- Дата
//		СкрытьСообщение - Булево
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(Форма, Организация, Месяц, СкрытьСообщение = Ложь, СписокСотрудников = Неопределено, Документ = Неопределено) Экспорт
	
	ТекстСообщения = "";
	ДоступноПерезаполнениеСотрудников = Ложь;
	
	Если Не СкрытьСообщение Тогда
		
		КоличествоСотрудниковКПерерасчету = ТребуетсяПерерасчетПериода(Организация, Месяц, СписокСотрудников);
		Если КоличествоСотрудниковКПерерасчету > 0 Тогда
			
			КоличествоСотрудниковПредставление = "";
			Если КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
				КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='и'") + " " + НСтр("ru='сотрудников'");
			Иначе
				
				Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
				Если Единицы = 1 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='го'") + " " + НСтр("ru='сотрудника'");
				ИначеЕсли Единицы > 1 И Единицы < 5 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='х'") + " " + НСтр("ru='сотрудников'");
				Иначе
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='и'") + " " + НСтр("ru='сотрудников'");
				КонецЕсли; 
				
			КонецЕсли;
			
			ТекстСообщения = Новый ФорматированнаяСтрока(
				НСтр("ru='Требуется доначисление (перерасчет) для'") + " " + КоличествоСотрудниковПредставление + " " + НСтр("ru='за'") + " ",
				Формат(Месяц, "ДФ='ММММ гггг'") + " (",
				Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'") + "...", , , , "Подробнее"),
				"). ");
			
			Если Документ <> Неопределено И Не ПериодНачисленияЗарплатыЗакрыт(Организация, Месяц, Документ) Тогда
				
				ДоступноПерезаполнениеСотрудников = Истина;
				Если КоличествоСотрудниковКПерерасчету = 1 Тогда
					ЗаголовокКоманды = НСтр("ru='Пересчитать'") + " " + НСтр("ru='сотрудника'");
				ИначеЕсли КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
					ЗаголовокКоманды = НСтр("ru='Пересчитать'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудников'");
				Иначе
					
					Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
					Если Единицы > 0 И Единицы < 5 Тогда
						ЗаголовокКоманды = НСтр("ru='Пересчитать'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудника'");
					Иначе
						ЗаголовокКоманды = НСтр("ru='Пересчитать'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудников'");
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					"ПересчитатьСотрудников",
					"Заголовок",
					ЗаголовокКоманды);
				
			КонецЕсли;
			
		Иначе
			СкрытьСообщение = Истина;
			ТекстСообщения = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПересчитатьСотрудников",
		"Видимость",
		Не СкрытьСообщение И ДоступноПерезаполнениеСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДоначислитьСейчас",
		"Видимость",
		Не СкрытьСообщение И Не ДоступноПерезаполнениеСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаКартинка",
		"Видимость",
		Не СкрытьСообщение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаНадпись",
		"Видимость",
		Не СкрытьСообщение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаНадпись",
		"Заголовок",
		ТекстСообщения);
	
КонецПроцедуры

// Процедура предназначена для добавления строк перерасчета удержаний сотрудникам.
// Выполняется при выявлении удержаний.
//
// Параметры
//	- МенеджерВременныхТаблиц, содержащий ВТСотрудникиПериоды с полями Сотрудник, Организация, ДатаНачала, ДатаОкончания.
//	- Удержания - таблица значений с полями
//	* ФизическоеЛицо
//	* Организация
//	* Удержание
//	* ДатаНачала
//	* ДатаОкончания
//	- ДополнительныеСвойства - Структура, дополнительные свойства менеджера расчета.
//
Процедура ЗаполнитьПерерассчитываемыеУдержания(МенеджерВременныхТаблиц, Удержания, ДополнительныеСвойства) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ТаблицаПерерассчитываемыхУдержаний") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура(
		"ГоловнаяОрганизация,
		|ФизическоеЛицо,
		|Удержание,
		|ДокументОснование");
		
	Для Каждого СтрокаПерерасчетовУдержаний Из ДополнительныеСвойства.ТаблицаПерерассчитываемыхУдержаний Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаПерерасчетовУдержаний);
		СтрокиУдержаний = Удержания.НайтиСтроки(СтруктураСтроки);
		
		ДобавлятьСторноУдержаний = Истина;
		Для Каждого СтрокаУдержаний Из СтрокиУдержаний Цикл
			
			Если НачалоМесяца(СтрокаУдержаний.ДатаНачала) = СтрокаПерерасчетовУдержаний.ДатаНачала Тогда
				
				ДобавлятьСторноУдержаний = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавлятьСторноУдержаний Тогда
			
			НоваяСтрокаУдержания = Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУдержания, СтрокаПерерасчетовУдержаний);
			НоваяСтрокаУдержания.ФиксСторно = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет суммы перерассчитываемых удержаний, которых совсем не осталось в составе плановых.
//
// Параметры
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, содержащий ВТСотрудникиПериоды с полями Сотрудник, Организация, ДатаНачала, ДатаОкончания.
//		ОчередностьРасчета	- очередность расчета удержаний, рассчитываемых в данный момент.
//		СтрокиПоИдентификатору	- Соответствие, где Ключ - идентификатор строки, значение строка удержаний.
//
Процедура ЗаполнитьРезультатыФиксСторноУдержаний(МенеджерВременныхТаблиц, ОчередностьРасчета, СтрокиПоИдентификатору) Экспорт
	
	Если СтрокиПоИдентификатору.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрРасчета_Удержания")
		Или Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУдержанныеСуммы") Тогда
		
		Возврат
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	СУММА(ЕСТЬNULL(УдержанныеСуммы.Сумма, 0)) КАК Сумма
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанныеСуммы КАК УдержанныеСуммы
		|		ПО (УдержанныеСуммы.ФизическоеЛицо = Удержания.ФизическоеЛицо)
		|			И (УдержанныеСуммы.Организация = Удержания.Организация)
		|			И (УдержанныеСуммы.ВидРасчета = Удержания.ВидРасчета)
		|			И (УдержанныеСуммы.ДокументОснование = Удержания.ДокументОснование)
		|			И (УдержанныеСуммы.Месяц = НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ))
		|ГДЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|	И Удержания.ФиксСторно
		|	И НЕ Удержания.ФиксРасчет
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		Строка.Результат = - Выборка.Сумма;
		Строка.ЗаписьРасчета.Результат = Строка.Результат;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПерерасчетНачисленийПоОтдельномуДокументу

Функция ДопустимыеВидыДокументовНачисления()
	
	ДопустимыеВидыДокументов = Новый Массив;
	
	ДопустимыеВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Командировка);
	ДопустимыеВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку);
	
	Возврат ДопустимыеВидыДокументов;
	
КонецФункции

Процедура СоздатьВТТипыРегистраторовПоОтдельномуДокументу(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка) КАК ВидДокументаНачисления,
		|	ТИП(Документ.Командировка) КАК ТипРегистратора
		|ПОМЕСТИТЬ ВТТипыРегистраторовПоОтдельномуДокументу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку),
		|	ТИП(Документ.ОплатаПоСреднемуЗаработку)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Функция КраткоеПредставлениеДокумента(СсылкаНаДокумент) Экспорт
	
	КраткоеПредставление = "";
	ИмяМетаданныхДокумента = СсылкаНаДокумент.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Номер КАК Номер,
		|	ТаблицаДокумента.Дата КАК Дата
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокумента", "Документ." + ИмяМетаданныхДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ИмяМетаданныхДокумента = "ИзменениеОплатыТруда" Тогда
			КраткоеПредставление = НСтр("ru='Изменение оплаты'");
		ИначеЕсли ИмяМетаданныхДокумента = "КадровыйПеревод" Тогда
			КраткоеПредставление = НСтр("ru='Перевод'");
		ИначеЕсли ИмяМетаданныхДокумента = "КадровыйПереводСписком" Тогда
			КраткоеПредставление = НСтр("ru='Перевод списком'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПриемНаРаботу" Тогда
			КраткоеПредставление = НСтр("ru='Прием'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПриемНаРаботуСписком" Тогда
			КраткоеПредставление = НСтр("ru='Прием списком'");
		ИначеЕсли ИмяМетаданныхДокумента = "СторнированиеНачислений" Тогда
			КраткоеПредставление = НСтр("ru='Сторно'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПростойСотрудников" Тогда
			КраткоеПредставление = НСтр("ru='Простой'");
		ИначеЕсли ИмяМетаданныхДокумента = "Отпуск" Тогда
			КраткоеПредставление = НСтр("ru='Отпуск'");
		ИначеЕсли ИмяМетаданныхДокумента = "ВходящаяСправкаОЗаработкеДляРасчетаПособий" Тогда
			КраткоеПредставление = НСтр("ru='Справка о зарплате'");
		ИначеЕсли ИмяМетаданныхДокумента = "БольничныйЛист" Тогда
			КраткоеПредставление = НСтр("ru='Больничный'");
		ИначеЕсли ИмяМетаданныхДокумента = "ОплатаПоСреднемуЗаработку" Тогда
			КраткоеПредставление = НСтр("ru='Оплата по среднему'");
		ИначеЕсли ИмяМетаданныхДокумента = "ОплатаПоСреднемуЗаработку" Тогда
			КраткоеПредставление = НСтр("ru='Премия'");
		ИначеЕсли ИмяМетаданныхДокумента = "ОплатаДнейУходаЗаДетьмиИнвалидами" Тогда
			КраткоеПредставление = НСтр("ru='Оплата дней ухода'");
		ИначеЕсли ИмяМетаданныхДокумента = "НачислениеЗарплаты" Тогда
			КраткоеПредставление = НСтр("ru='Зарплата'");
		ИначеЕсли ИмяМетаданныхДокумента = "РазовоеНачисление" Тогда
			КраткоеПредставление = НСтр("ru='Разовое начисление'");
		ИначеЕсли ИмяМетаданныхДокумента = "Увольнение" Тогда
			КраткоеПредставление = НСтр("ru='Увольнение'");
		ИначеЕсли ИмяМетаданныхДокумента = "УвольнениеСписком" Тогда
			КраткоеПредставление = НСтр("ru='Увольнение списком'");
		ИначеЕсли ИмяМетаданныхДокумента = "ОтпускБезСохраненияОплаты" Тогда
			КраткоеПредставление = НСтр("ru='Отпуск без оплаты'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПрогулНеявка" Тогда
			КраткоеПредставление = НСтр("ru='Прогул'");
		ИначеЕсли ИмяМетаданныхДокумента = "ДоходВНатуральнойФорме" Тогда
			КраткоеПредставление = НСтр("ru='Натуральный доход'");
		ИначеЕсли ИмяМетаданныхДокумента = "Командировка" Тогда
			КраткоеПредставление = НСтр("ru='Командировка'");
		ИначеЕсли ИмяМетаданныхДокумента = "МатериальнаяПомощь" Тогда
			КраткоеПредставление = НСтр("ru='Мат. помощь'");
		ИначеЕсли ИмяМетаданныхДокумента = "ОтпускПоУходуЗаРебенком" Тогда
			КраткоеПредставление = НСтр("ru='Отпуск по уходу'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПереносДанных" Тогда
			КраткоеПредставление = НСтр("ru='Перенос'");
		ИначеЕсли ИмяМетаданныхДокумента = "ТабельУчетаРабочегоВремени" Тогда
			КраткоеПредставление = НСтр("ru='Табель'");
		ИначеЕсли ИмяМетаданныхДокумента = "ПостоянноеУдержаниеВПользуТретьихЛиц" Тогда
			КраткоеПредставление = НСтр("ru='Удержание'");
		ИначеЕсли ИмяМетаданныхДокумента = "ИсполнительныйЛист" Тогда
			КраткоеПредставление = НСтр("ru='Исп. лист'");
		ИначеЕсли ИмяМетаданныхДокумента = "ИзменениеУсловийИсполнительногоЛиста" Тогда
			КраткоеПредставление = НСтр("ru='Изм. исп. листа'");
		ИначеЕсли ИмяМетаданныхДокумента = "УдержаниеВСчетРасчетовПоПрочимОперациям" Тогда
			КраткоеПредставление = НСтр("ru='Удержание проч.'");
		ИначеЕсли ИмяМетаданныхДокумента = "УдержаниеДобровольныхВзносовВНПФ" Тогда
			КраткоеПредставление = НСтр("ru='НПФ'");
		ИначеЕсли ИмяМетаданныхДокумента = "УдержаниеДобровольныхСтраховыхВзносов" Тогда
			КраткоеПредставление = НСтр("ru='ДСВ'");
		ИначеЕсли ИмяМетаданныхДокумента = "УдержаниеПрофсоюзныхВзносов" Тогда
			КраткоеПредставление = НСтр("ru='Профвзносы'");
		Иначе
			КраткоеПредставление = СсылкаНаДокумент.Метаданные().Синоним;
		КонецЕсли;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, "Номер,Дата");
		
		КраткоеПредставление = КраткоеПредставление + " №" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		КраткоеПредставление = КраткоеПредставление + " " + НСтр("ru='от'") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yy");
		
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ДобавитьПричинуПерерасчета(Список, СсылкаНаДокумент) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		
		КраткоеПредставление = КраткоеПредставлениеДокумента(СсылкаНаДокумент);
		Если Не ПустаяСтрока(КраткоеПредставление) Тогда
			Список.Добавить(СсылкаНаДокумент, КраткоеПредставление);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЧастиЗапросаСравненияДвижений(ИмяРегистра)
	
	ЧастиЗапроса = Новый Структура;
	ЧастиЗапроса.Вставить("Поля", "");
	ЧастиЗапроса.Вставить("Источники", "");
	ЧастиЗапроса.Вставить("Условия", "");
	ЧастиЗапроса.Вставить("СгруппироватьПо", "");
	ЧастиЗапроса.Вставить("Имеющие", "");
	
	ИмяВТПерерасчет = "ВТПерерасчет" + ИмяРегистра;
	ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
	
	ЧастиЗапроса.Поля =
		"	НАЧАЛОПЕРИОДА(ОбъединенныйЗапрос.Период, МЕСЯЦ) КАК ПериодДействия,
		|	ОбъединенныйЗапрос.Период,
		|	ОбъединенныйЗапрос.Организация,
		|	ОбъединенныйЗапрос.Сотрудник,
		|	&Регистратор КАК Основание";
	
	Если ИмяРегистра = "ПлановыеНачисления"
		Или ИмяРегистра = "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников" Тогда
		
		ЧастиЗапроса.Поля = ЧастиЗапроса.Поля + ",
			|	ОбъединенныйЗапрос.ДокументОснование";
		
	Иначе
		
		ЧастиЗапроса.Поля = ЧастиЗапроса.Поля + ",
			|	НЕОПРЕДЕЛЕНО КАК ДокументОснование";
		
	КонецЕсли;
	
	ЕстьПолеФизическоеЛицо = Ложь;
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	
	ПоляРегистра =
		"		НАЧАЛОПЕРИОДА(Движения.Период, ДЕНЬ) КАК Период,
		|		Движения.Организация";
		
	ЧастиЗапроса.СгруппироватьПо =
		"		ОбъединенныйЗапрос.Период,
		|		ОбъединенныйЗапрос.Организация";
		
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ПоляРегистра = ПоляРегистра + ",
			|		Движения.ДействуетДо";
			
		ЧастиЗапроса.СгруппироватьПо = ЧастиЗапроса.СгруппироватьПо + ",
			|		ОбъединенныйЗапрос.ДействуетДо";
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
		
		ПоляРегистра = ПоляРегистра + ",
			|		Движения." + ИмяПоля;
		
		ЧастиЗапроса.СгруппироватьПо = ЧастиЗапроса.СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
		Если Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
			ЕстьПолеФизическоеЛицо = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаПроверяемыхРесурсов = ИменаПроверяемыхРесурсовРегистровИнициирующихПерерасчеты(ИмяРегистра);
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
		
		Если ИменаПроверяемыхРесурсов <> Неопределено
			И ИменаПроверяемыхРесурсов.Получить(ИмяПоля) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяРегистра = "ПлановыеНачисления" И ИмяПоля = "Размер" Тогда
			
			ПоляРегистра = ПоляРегистра + ",
				|		ВЫБОР
				|			КОГДА НЕ Движения.Начисление.Рассчитывается
				|				ТОГДА Движения.Размер
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Размер";
			
		Иначе
			
			ПоляРегистра = ПоляРегистра + ",
				|		Движения." + ИмяПоля;
			
			Если Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
				ЕстьПолеФизическоеЛицо = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЧастиЗапроса.СгруппироватьПо = ЧастиЗапроса.СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
	КонецЦикла;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			Если ИменаПроверяемыхРесурсов <> Неопределено
				И ИменаПроверяемыхРесурсов.Получить(ИмяПоля) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПоляРегистра = ПоляРегистра + ",
				|		Движения." + ИмяПоля;
			
			ЧастиЗапроса.СгруппироватьПо = ЧастиЗапроса.СгруппироватьПо + ",
				|		ОбъединенныйЗапрос." + ИмяПоля;
			
			Если Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
				ЕстьПолеФизическоеЛицо = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
		
		ПоляРегистра = ПоляРегистра + ",
			|		Движения." + ИмяПоля;
		
		ЧастиЗапроса.СгруппироватьПо = ЧастиЗапроса.СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
		Если Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
			ЕстьПолеФизическоеЛицо = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьПолеФизическоеЛицо Тогда
		
		ЧастиЗапроса.Поля = ЧастиЗапроса.Поля + ",
			|	ОбъединенныйЗапрос.ФизическоеЛицо";
		
	Иначе
		
		ЧастиЗапроса.Поля = ЧастиЗапроса.Поля + ",
			|	ОбъединенныйЗапрос.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо";
		
	КонецЕсли;
	
	ЧастиЗапроса.Источники =
		"ИЗ
		|	(ВЫБРАТЬ
		|		" + ПоляРегистра + ",
		|		1 КАК ФлагИзменения
		|	ИЗ
		|		" + ИмяВТПерерасчет + " КАК Движения
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		" + ПоляРегистра + ",
		|		-1
		|	ИЗ
		|		" + ИмяВТТекущиеДвижения + " КАК Движения) КАК ОбъединенныйЗапрос";
	
	ЧастиЗапроса.Имеющие = "СУММА(ОбъединенныйЗапрос.ФлагИзменения) <> 0";
	
	Возврат ЧастиЗапроса;
	
КонецФункции

Функция ЧастиЗапросаСравненияДвиженийУдержаний(ИмяРегистра)
	
	ЧастиЗапроса = Новый Структура;
	ЧастиЗапроса.Вставить("Поля", "");
	ЧастиЗапроса.Вставить("Источники", "");
	ЧастиЗапроса.Вставить("Условия", "");
	ЧастиЗапроса.Вставить("СгруппироватьПо", "");
	ЧастиЗапроса.Вставить("Имеющие", "");
	
	ИмяВТПерерасчет = "ВТПерерасчет" + ИмяРегистра;
	ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
	
	ЧастиЗапроса.Поля =
		"	НАЧАЛОПЕРИОДА(ОбъединенныйЗапрос.Период, МЕСЯЦ) КАК ПериодДействия,
		|	ОбъединенныйЗапрос.Период,
		|	ОбъединенныйЗапрос.Организация КАК Организация,
		|	ОбъединенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбъединенныйЗапрос.Удержание КАК Удержание,
		|	ОбъединенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	&Регистратор КАК Основание";
	
	ПоляРегистра =
		"		НАЧАЛОПЕРИОДА(Движения.Период, ДЕНЬ) КАК Период";
	
	СгруппироватьПо =
		"		ОбъединенныйЗапрос.Период";
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
		
		ПоляРегистра = ПоляРегистра + ",
			|		Движения." + ИмяПоля;
		
		СгруппироватьПо = СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
	КонецЦикла;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
		
		ПоляРегистра = ПоляРегистра + ",
			|		Движения." + ИмяПоля;
		
		СгруппироватьПо = СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
	КонецЦикла;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ПоляРегистра = ПоляРегистра + ",
				|		Движения." + ИмяПоля;
			
			СгруппироватьПо = СгруппироватьПо + ",
				|		ОбъединенныйЗапрос." + ИмяПоля;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
		
		ПоляРегистра = ПоляРегистра + ",
			|		Движения." + ИмяПоля;
		
		СгруппироватьПо = СгруппироватьПо + ",
			|		ОбъединенныйЗапрос." + ИмяПоля;
		
	КонецЦикла;
	
	ЧастиЗапроса.Источники =
		"ИЗ
		|	(ВЫБРАТЬ
		|		" + ПоляРегистра + ",
		|		1 КАК ФлагИзменения
		|	ИЗ
		|		" + ИмяВТПерерасчет + " КАК Движения
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		" + ПоляРегистра + ",
		|		-1
		|	ИЗ
		|		" + ИмяВТТекущиеДвижения + " КАК Движения) КАК ОбъединенныйЗапрос";
	
	ЧастиЗапроса.СгруппироватьПо = СгруппироватьПо;
	
	ЧастиЗапроса.Имеющие = "СУММА(ОбъединенныйЗапрос.ФлагИзменения) <> 0";
	
	Возврат ЧастиЗапроса;
	
КонецФункции

Процедура РегистрацияПерерасчетовНачисленийИЛьгот(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийИЛьготСоздана, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, РегистрацияНачалаИлиОкончанияУчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Если ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана Тогда
		
		// Выявление начислений сотрудников у которых изменились показатели
		
		ЧастиТекстаЗапроса = Новый Массив;
		ЧастиТекстаЗапроса.Добавить(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.ПериодДействия КАК Период,
			|	СотрудникиПериоды.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ДокументОснование,
			|	НачисленияПоказатели.Ссылка КАК Начисление
			|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаПлановыхНачислений
			|ИЗ
			|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО СотрудникиПериоды.Показатель = НачисленияПоказатели.Показатель");
		
		// Удаление из числа определяемых начислений сотрудников, тех по которым уже выявлена необходимость перерасчетов.
		Если ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
			
			ЧастиТекстаЗапроса.Добавить(
				"	ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыНачисленийИЛьгот КАК СотрудникиПериодыНачислений
				|	ПО СотрудникиПериоды.ПериодДействия = СотрудникиПериодыНачислений.ПериодДействия
				|		И СотрудникиПериоды.Организация = СотрудникиПериодыНачислений.Организация
				|		И СотрудникиПериоды.Сотрудник = СотрудникиПериодыНачислений.Сотрудник
				|		И СотрудникиПериоды.ДокументОснование = СотрудникиПериодыНачислений.ДокументОснование
				|		И НачисленияПоказатели.Ссылка = СотрудникиПериодыНачислений.ВидРасчета
				|
				|ГДЕ
				|	СотрудникиПериодыНачислений.ПериодДействия ЕСТЬ NULL");
			
		КонецЕсли;
		
		ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		ЧастиТекстаЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИзмеренияДаты.Период
			|ИЗ
			|	ВТИзмеренияДатыДляСрезаПлановыхНачислений КАК ИзмеренияДаты");
		
		Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, СИмволы.ПС);
		РезультатЗапроса = Запрос.Выполнить();
		
		// Проверка того, что начисления показателей присутствуют в составах действующих плановых начислений сотрудников.
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"ПлановыеНачисления",
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
					"ВТИзмеренияДатыДляСрезаПлановыхНачислений",
					"ГоловнаяОрганизация,Сотрудник,Начисление,ДокументОснование"));
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия КАК ПериодДействия,
				|	СотрудникиПериоды.Период КАК Период,
				|	СотрудникиПериоды.Организация КАК Организация,
				|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
				|	ЕСТЬNULL(ПлановыеНачисления.Начисление, НачисленияПоказатели.Ссылка) КАК Начисление,
				|	СотрудникиПериоды.ДокументОснование КАК ДокументОснование,
				|	СотрудникиПериоды.Основание КАК Основание
				|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийЛьготУдержанийНормированная
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
				|		ПО СотрудникиПериоды.Показатель = НачисленияПоказатели.Показатель
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
				|		ПО СотрудникиПериоды.ПериодДействия = ПлановыеНачисления.Период
				|			И СотрудникиПериоды.Организация.ГоловнаяОрганизация = ПлановыеНачисления.ГоловнаяОрганизация
				|			И СотрудникиПериоды.Сотрудник = ПлановыеНачисления.Сотрудник
				|			И (НачисленияПоказатели.Ссылка = ПлановыеНачисления.Начисление)
				|			И СотрудникиПериоды.ДокументОснование = ПлановыеНачисления.ДокументОснование
				|			И (ПлановыеНачисления.Используется)
				|ГДЕ
				|	НЕ ПлановыеНачисления.Период ЕСТЬ NULL
				|		ИЛИ НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТПлановыеНачисленияСрезПоследних";
			
			Запрос.Выполнить();
			
			// Подготовка предварительной таблицы для регистрации перерасчетов
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	ВЫБОР
				|		КОГДА СотрудникиПериоды.Начисление.ЯвляетсяЛьготой
				|			ТОГДА СотрудникиПериоды.Начисление
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ВидРасчета,
				|	СотрудникиПериоды.Основание,
				|	НЕ СотрудникиПериоды.Начисление.ЯвляетсяЛьготой КАК ПерерасчетНачислений,
				|	СотрудникиПериоды.Начисление.ЯвляетсяЛьготой КАК ПерерасчетЛьгот
				|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьготСПоказателямиПредварительно
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержанийНормированная КАК СотрудникиПериоды";
		
			Если ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
				
				ЧастиТекстаЗапроса.Добавить(
					"	ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыНачисленийИЛьгот КАК СотрудникиПериодыНачислений
					|	ПО СотрудникиПериоды.ПериодДействия = СотрудникиПериодыНачислений.ПериодДействия
					|		И СотрудникиПериоды.Организация = СотрудникиПериодыНачислений.Организация
					|		И СотрудникиПериоды.Сотрудник = СотрудникиПериодыНачислений.Сотрудник
					|		И СотрудникиПериоды.ДокументОснование = СотрудникиПериодыНачислений.ДокументОснование
					|		И СотрудникиПериоды.Начисление = СотрудникиПериодыНачислений.ВидРасчета
					|
					|ГДЕ
					|	СотрудникиПериодыНачислений.ПериодДействия ЕСТЬ NULL");
				
			КонецЕсли;
			
		Иначе
			
			// Подготовка предварительной таблицы для регистрации перерасчетов
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	ВЫБОР
				|		КОГДА НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой
				|			ТОГДА НачисленияПоказатели.Ссылка
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ВидРасчета,
				|	СотрудникиПериоды.Основание,
				|	НЕ НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой КАК ПерерасчетНачислений,
				|	НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой КАК ПерерасчетЛьгот
				|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьготСПоказателямиПредварительно
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
				|		ПО СотрудникиПериоды.Показатель = НачисленияПоказатели.Показатель";
			
			Если ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
				
				ЧастиТекстаЗапроса.Добавить(
					"	ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыНачисленийИЛьгот КАК СотрудникиПериодыНачислений
					|	ПО СотрудникиПериоды.ПериодДействия = СотрудникиПериодыНачислений.ПериодДействия
					|		И СотрудникиПериоды.Организация = СотрудникиПериодыНачислений.Организация
					|		И СотрудникиПериоды.Сотрудник = СотрудникиПериодыНачислений.Сотрудник
					|		И СотрудникиПериоды.ДокументОснование = СотрудникиПериодыНачислений.ДокументОснование
					|		И НачисленияПоказатели.Ссылка = СотрудникиПериодыНачислений.ВидРасчета
					|
					|ГДЕ
					|	СотрудникиПериодыНачислений.ПериодДействия ЕСТЬ NULL");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЧастиТекстаЗапроса = Новый Массив;
		ЧастиТекстаЗапроса.Добавить("УНИЧТОЖИТЬ ВТИзмеренияДатыДляСрезаПлановыхНачислений");
		ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		ЧастиТекстаЗапроса.Добавить(ТекстЗапроса);
		
		// Присоединение начислений по которым выявлена необходимость переасчетов
		Если ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
			
			ЧастиТекстаЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			
			ЧастиТекстаЗапроса.Добавить(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.Сотрудник,
				|	ВЫБОР
				|		КОГДА Начисления.ЯвляетсяЛьготой
				|			ТОГДА Начисления.Ссылка
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ВидРасчета,
				|	СотрудникиПериоды.Основание,
				|	СотрудникиПериоды.ПерерасчетНачислений,
				|	СотрудникиПериоды.ПерерасчетЛьгот
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийИЛьгот КАК СотрудникиПериоды
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
				|		ПО СотрудникиПериоды.ВидРасчета = Начисления.Ссылка");
			
		КонецЕсли;
		
		ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
		// Формирование таблицы для регистрации перерасчетов
		ЧастиТекстаЗапроса.Добавить(
			"ВЫБРАТЬ
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.ПериодДействия,
			|	МИНИМУМ(СотрудникиПериодыНачисленийИЛьготСПоказателями.Период) КАК Период,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Организация,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Сотрудник,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Основание,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.ВидРасчета,
			|	МАКСИМУМ(СотрудникиПериодыНачисленийИЛьготСПоказателями.ПерерасчетНачислений) КАК ПерерасчетНачислений,
			|	МАКСИМУМ(СотрудникиПериодыНачисленийИЛьготСПоказателями.ПерерасчетЛьгот) КАК ПерерасчетЛьгот
			|ПОМЕСТИТЬ ВТСотрудникиПериодыНачисленийИЛьготСПоказателями
			|ИЗ
			|	ВТСотрудникиПериодыНачисленийИЛьготСПоказателямиПредварительно КАК СотрудникиПериодыНачисленийИЛьготСПоказателями
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.ПериодДействия,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Организация,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Сотрудник,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.Основание,
			|	СотрудникиПериодыНачисленийИЛьготСПоказателями.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодыНачисленийИЛьготСПоказателямиПредварительно");
			
		Если ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
			
			ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			ЧастиТекстаЗапроса.Добавить("УНИЧТОЖИТЬ ВТСотрудникиПериодыНачисленийИЛьгот");
			
		КонецЕсли;
		
		Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
		Запрос.Выполнить();
		
		// Регистрация перерасчетов начислений
		ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, "ВТСотрудникиПериодыНачисленийИЛьготСПоказателями", , РегистрацияНачалаИлиОкончанияУчета);
		
		// Регистрация перерасчетов льгот
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, "ВТСотрудникиПериодыНачисленийИЛьготСПоказателями", , РегистрацияНачалаИлиОкончанияУчета);
		КонецЕсли;
		
	ИначеЕсли ВТСотрудникиПериодыНачисленийИЛьготСоздана Тогда
		
		// Когда в движениях нет регистров с показателями
		
		// Регистрация перерасчетов начислений
		ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, "ВТСотрудникиПериодыНачисленийИЛьгот", , РегистрацияНачалаИлиОкончанияУчета);
		
		// Регистрация перерасчетов льгот
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, "ВТСотрудникиПериодыНачисленийИЛьгот", , РегистрацияНачалаИлиОкончанияУчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияПерерасчетовУдержаний(ДанныеДляРегистрацииПерерасчетов, Организация, ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана, ВТСотрудникиПериодыУдержанийСоздана)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Если ВТСотрудникиПериодыУдержанийСоздана Тогда
		
		Если ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.Период КАК Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
				|	УдержанияПоказатели.Ссылка КАК Удержание,
				|	СотрудникиПериоды.ДокументОснование
				|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаПлановыхУдержаний
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
				|		ПО СотрудникиПериоды.Показатель = УдержанияПоказатели.Показатель
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыУдержаний КАК ИзмененияУдержаний
				|		ПО СотрудникиПериоды.ПериодДействия = ИзмененияУдержаний.ПериодДействия
				|			И СотрудникиПериоды.Организация = ИзмененияУдержаний.Организация
				|			И СотрудникиПериоды.ФизическоеЛицо = ИзмененияУдержаний.ФизическоеЛицо
				|			И СотрудникиПериоды.ДокументОснование = ИзмененияУдержаний.ДокументОснование
				|			И (УдержанияПоказатели.Ссылка = ИзмененияУдержаний.Удержание)
				|ГДЕ
				|	ИзмененияУдержаний.ПериодДействия ЕСТЬ NULL 
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИзмеренияДаты.Период
				|ИЗ
				|	ВТИзмеренияДатыДляСрезаПлановыхУдержаний КАК ИзмеренияДаты";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
					"ПлановыеУдержания",
					Запрос.МенеджерВременныхТаблиц,
					Ложь,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
						"ВТИзмеренияДатыДляСрезаПлановыхУдержаний", "Организация,ФизическоеЛицо,Удержание,ДокументОснование"));
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПлановыеУдержания.Период КАК ПериодДействия,
					|	ПлановыеУдержания.Период,
					|	ПлановыеУдержания.Организация,
					|	ПлановыеУдержания.ФизическоеЛицо,
					|	ПлановыеУдержания.Удержание,
					|	ПлановыеУдержания.ДокументОснование,
					|	СотрудникиПериоды.Основание
					|ПОМЕСТИТЬ ВТСотрудникиПериодыУдержанийСПериодамиПоказателей
					|ИЗ
					|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
					|			ПО СотрудникиПериоды.Показатель = УдержанияПоказатели.Показатель
					|		ПО ПлановыеУдержания.Период = СотрудникиПериоды.Период
					|			И ПлановыеУдержания.Организация = СотрудникиПериоды.Организация
					|			И ПлановыеУдержания.ФизическоеЛицо = СотрудникиПериоды.Сотрудник.ФизическоеЛицо
					|			И ПлановыеУдержания.ДокументОснование = СотрудникиПериоды.ДокументОснование
					|			И (ПлановыеУдержания.Удержание = УдержанияПоказатели.Ссылка)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ИзмененияУдержаний.ПериодДействия,
					|	ИзмененияУдержаний.Период,
					|	ИзмененияУдержаний.Организация,
					|	ИзмененияУдержаний.ФизическоеЛицо,
					|	ИзмененияУдержаний.Удержание,
					|	ИзмененияУдержаний.ДокументОснование,
					|	ИзмененияУдержаний.Основание
					|ИЗ
					|	ВТСотрудникиПериодыУдержаний КАК ИзмененияУдержаний
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	СотрудникиПериодыПоказателейУдержаний.ФизическоеЛицо
					|ИЗ
					|	ВТСотрудникиПериодыУдержаний КАК СотрудникиПериодыПоказателейУдержаний";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					ЗарегистрироватьПерерасчетыУдержанийСотрудников(Запрос.МенеджерВременныхТаблиц, Организация, "ВТСотрудникиПериодыУдержанийСПериодамиПоказателей");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьПерерасчетыУдержанийСотрудников(Запрос.МенеджерВременныхТаблиц, Организация, "ВТСотрудникиПериодыУдержаний");
			КонецЕсли;
			
		Иначе
			ЗарегистрироватьПерерасчетыУдержанийСотрудников(Запрос.МенеджерВременныхТаблиц, Организация, "ВТСотрудникиПериодыУдержаний");
		КонецЕсли;
		
	ИначеЕсли ВТСотрудникиПериодыНачисленийЛьготУдержанийСоздана Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Период КАК Период,
			|	СотрудникиПериоды.Организация,
			|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
			|	УдержанияПоказатели.Ссылка КАК Удержание,
			|	СотрудникиПериоды.ДокументОснование
			|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаПлановыхУдержаний
			|ИЗ
			|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
			|		ПО СотрудникиПериоды.Показатель = УдержанияПоказатели.Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИзмеренияДаты.Период
			|ИЗ
			|	ВТИзмеренияДатыДляСрезаПлановыхУдержаний КАК ИзмеренияДаты";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"ПлановыеУдержания",
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
					"ВТИзмеренияДатыДляСрезаПлановыхУдержаний", "Организация,ФизическоеЛицо,Удержание,ДокументОснование"));
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПлановыеУдержания.Период КАК ПериодДействия,
				|	ПлановыеУдержания.Период,
				|	ПлановыеУдержания.Организация,
				|	ПлановыеУдержания.ФизическоеЛицо,
				|	ПлановыеУдержания.Удержание,
				|	ПлановыеУдержания.ДокументОснование,
				|	СотрудникиПериоды.Основание
				|ПОМЕСТИТЬ ВТСотрудникиПериодыПоказателейУдержаний
				|ИЗ
				|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
				|			ПО СотрудникиПериоды.Показатель = УдержанияПоказатели.Показатель
				|		ПО ПлановыеУдержания.Период = СотрудникиПериоды.Период
				|			И ПлановыеУдержания.Организация = СотрудникиПериоды.Организация
				|			И ПлановыеУдержания.ФизическоеЛицо = СотрудникиПериоды.ФизическоеЛицо
				|			И ПлановыеУдержания.ДокументОснование = СотрудникиПериоды.ДокументОснование
				|			И (ПлановыеУдержания.Удержание = УдержанияПоказатели.Ссылка)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПериоды.ПериодДействия,
				|	СотрудникиПериоды.Период,
				|	СотрудникиПериоды.Организация,
				|	СотрудникиПериоды.ФизическоеЛицо,
				|	УдержанияПоказатели.Ссылка,
				|	СотрудникиПериоды.ДокументОснование,
				|	СотрудникиПериоды.Основание
				|ИЗ
				|	ВТСотрудникиПериодыНачисленийЛьготУдержаний КАК СотрудникиПериоды
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
				|		ПО СотрудникиПериоды.Показатель = УдержанияПоказатели.Показатель
				|			И (УдержанияПоказатели.Ссылка.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	СотрудникиПериодыПоказателейУдержаний.ФизическоеЛицо
				|ИЗ
				|	ВТСотрудникиПериодыПоказателейУдержаний КАК СотрудникиПериодыПоказателейУдержаний";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ЗарегистрироватьПерерасчетыУдержанийСотрудников(Запрос.МенеджерВременныхТаблиц, Организация, "ВТСотрудникиПериодыПоказателейУдержаний");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПерерассчитыватьПособия(Организация) Экспорт
	
	ВыполнятьПерерасчеты = Истина;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ДатаВступленияВПроект = ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(Организация);
		Если ЗначениеЗаполнено(ДатаВступленияВПроект) И ДатаВступленияВПроект < '30000101' Тогда
			ВыполнятьПерерасчеты = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыполнятьПерерасчеты;
	
КонецФункции

Процедура СоздатьВТКонтролируемыеНачисления(МенеджерВременныхТаблиц, Организация = Неопределено, ИмяВТКонтролируемыеНачисления = "ВТКонтролируемыеНачисления") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТКонтролируемыеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	(Начисления.ЗачетНормыВремени
		|			ИЛИ Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете)))";
	
	Если Не ПерерассчитыватьПособия(Организация) Тогда
		
		КатегорииНачисленийПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.КатегорииНачисленийПособийПоПрямымВыплатамФСС();
		Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
		
		Запрос.Текст =
			Запрос.Текст
			+ "
			|	И НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий)";
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКонтролируемыеНачисления", ИмяВТКонтролируемыеНачисления);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода, ИмяВТПериодыРасчетаСотрудников = "")
	
	Запрос = Новый Запрос;
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасчета,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	ЛОЖЬ КАК ПерерасчетУдержаний
		|ПОМЕСТИТЬ ВТОчищаемыеСотрудникПериоды
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачислениеЗарплатыНачисленияПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисления.Ссылка.Организация,
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.ДатаНачала, МЕСЯЦ),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Регистратор
		|	И НЕ НачислениеЗарплатыНачисления.Ссылка.РежимДоначисления
		|	И &УдалитьПерерасчетыТекущегоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Ссылка.Организация,
		|	НачислениеЗарплатыУдержания.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыУдержания.ДатаНачала, МЕСЯЦ),
		|	НачислениеЗарплатыУдержания.Удержание,
		|	НачислениеЗарплатыУдержания.ДокументОснование,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|ГДЕ
		|	НачислениеЗарплатыУдержания.Ссылка = &Регистратор
		|	И НЕ НачислениеЗарплатыУдержания.Ссылка.РежимДоначисления
		|	И &УдалитьПерерасчетыТекущегоПериода");
	
	Если МетаданныеРегистратора.ТабличныеЧасти.Найти("УдержанияПерерасчет") <> Неопределено Тогда
		
		ТекстыЗапросов.Добавить("ОБЪЕДИНИТЬ ВСЕ");
		ТекстыЗапросов.Добавить(
			"ВЫБРАТЬ
			|	НачислениеЗарплатыУдержанияПерерасчет.Ссылка.Организация,
			|	НачислениеЗарплатыУдержанияПерерасчет.ФизическоеЛицо,
			|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыУдержанияПерерасчет.ДатаНачала, МЕСЯЦ),
			|	НачислениеЗарплатыУдержанияПерерасчет.Удержание,
			|	НачислениеЗарплатыУдержанияПерерасчет.ДокументОснование,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ИСТИНА
			|ИЗ
			|	Документ.НачислениеЗарплаты.УдержанияПерерасчет КАК НачислениеЗарплатыУдержанияПерерасчет
			|ГДЕ
			|	НачислениеЗарплатыУдержанияПерерасчет.Ссылка = &Регистратор");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЛьготамиЗапросВТПериодыРасчетаСотрудников(ТекстыЗапросов, МетаданныеРегистратора);
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчищаемыеСотрудникПериоды.Организация,
		|	ОчищаемыеСотрудникПериоды.Сотрудник,
		|	ВЫРАЗИТЬ(ОчищаемыеСотрудникПериоды.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОчищаемыеСотрудникПериоды.ПериодДействия,
		|	ОчищаемыеСотрудникПериоды.ВидРасчета,
		|	ОчищаемыеСотрудникПериоды.ДокументОснование,
		|	ОчищаемыеСотрудникПериоды.ПерерасчетНачислений,
		|	ОчищаемыеСотрудникПериоды.ПерерасчетЛьгот,
		|	ОчищаемыеСотрудникПериоды.ПерерасчетУдержаний
		|ПОМЕСТИТЬ ВТПериодыРасчетаСотрудников
		|ИЗ
		|	ВТОчищаемыеСотрудникПериоды КАК ОчищаемыеСотрудникПериоды");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	Если МетаданныеРегистратора.Имя <> "НачислениеЗарплаты" Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.НачислениеЗарплаты", "Документ." + МетаданныеРегистратора.Имя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НачислениеЗарплатыНачисления.Ссылка.РежимДоначисления", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НачислениеЗарплатыУдержания.Ссылка.РежимДоначисления", "");
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПериодыРасчетаСотрудников", ИмяВТПериодыРасчетаСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Функция ПериодНачисленияЗарплатыЗакрыт(Организация, МесяцНачисления, ДокументОснование)
	
	// Проверяется наличие выплаты в периоде.
	БылаВыплатаВПериоде = ИсправлениеДокументовЗарплатаКадры.ВыплатаПроизводилась(Организация, ДокументОснование, МесяцНачисления);
	// Проверим наличие документа отражение зарплаты в бухгалтерском учете.
	БылоОтражениеЗарплатыВБухучете = ИсправлениеДокументовЗарплатаКадры.ОтражениеВУчетеПроизводилось(Организация, МесяцНачисления);
	
	ПериодЗакрыт = (БылаВыплатаВПериоде ИЛИ БылоОтражениеЗарплатыВБухучете);
	
	Возврат ПериодЗакрыт;
	
КонецФункции

Функция ОткрытыйПериодНачисленияЗарплаты(Организация, МесяцНачисления) Экспорт
	
	ОткрытыйПериод = МесяцНачисления;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Организация = &Организация
		|	И НачислениеЗарплаты.МесяцНачисления >= &МесяцНачисления
		|	И НЕ НачислениеЗарплаты.РежимДоначисления
		|	И НачислениеЗарплаты.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцНачисления УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОткрытыйПериод = КонецМесяца(Выборка.МесяцНачисления) + 1;
	Иначе
		ОткрытыйПериод = КонецМесяца(ОткрытыйПериод) + 1;
	КонецЕсли;
	
	Возврат ОткрытыйПериод;
	
КонецФункции

Функция ПустаяТаблицаСотрудникиПериодДействияПерерасчет() Экспорт
	
	СотрудникиПериодДействияПерерасчет = Новый ТаблицаЗначений;
	
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления, ПланВидовРасчетаСсылка.Удержания"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетНачислений", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетЛьгот", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ПерерасчетУдержаний", Новый ОписаниеТипов("Булево"));
	СотрудникиПериодДействияПерерасчет.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	
	Возврат СотрудникиПериодДействияПерерасчет;
	
КонецФункции

Процедура СоздатьВТПерерассчитываемыеСотрудники(МенеджерВременныхТаблиц, Организация, Подразделение, МесяцНачисления, СотрудникиПериодДействияПерерасчет, РежимДоначисления, Сотрудники = Неопределено, ИмяВТПерерассчитываемыеСотрудники = "ВТПерерассчитываемыеСотрудники")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодДействия", МесяцНачисления);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетЗарплаты.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
		|	КОНЕЦПЕРИОДА(ПерерасчетЗарплаты.ПериодДействия, МЕСЯЦ) КАК ОкончаниеПериода,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ПерерасчетЗарплаты.ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ВидРасчета,
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот
		|ПОМЕСТИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия < &ПериодДействия";
	
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Текст = Запрос.Текст + "
			|	И ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьЗапросВТПерерасчетЗарплатыСОбластямиПерерасчетов(Запрос.Текст, РежимДоначисления);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.НачалоПериода,
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.ОкончаниеПериода,
		|	ПерерасчетЗарплатыСОбластямиПерерасчетов.Сотрудник
		|ПОМЕСТИТЬ ВТПерерасчетЗарплаты
		|ИЗ
		|	ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластямиПерерасчетов";
	
	Запрос.Выполнить();
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице("ВТПерерасчетЗарплаты");
	
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.Подразделение = Подразделение;
	ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(
		Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолучения, "ВТСотрудникиПериодовПерерасчетов");
	
	Если СотрудникиПериодДействияПерерасчет = Неопределено
		Или СотрудникиПериодДействияПерерасчет.Количество() = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) КАК ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ФизическоеЛицо,
			|	ПерерасчетЗарплатыСОбластями.ВидРасчета,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетНачислений,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетЛьгот
			|ПОМЕСТИТЬ ВТПерерассчитываемыеСотрудники
			|ИЗ
			|	ВТСотрудникиПериодовПерерасчетов КАК СотрудникиПериодовПерерасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластями
			|		ПО СотрудникиПериодовПерерасчетов.Сотрудник = ПерерасчетЗарплатыСОбластями.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) = ПерерасчетЗарплатыСОбластями.НачалоПериода)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодовПерерасчетов";
		
	Иначе
		
		Запрос.УстановитьПараметр("СотрудникиПериодДействияПерерасчет", СотрудникиПериодДействияПерерасчет);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Организация КАК Организация,
			|	ПерерассчитываемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПерерассчитываемыеСотрудники.ВидРасчета КАК ВидРасчета,
			|	ПерерассчитываемыеСотрудники.ПериодДействия КАК ПериодДействия,
			|	ПерерассчитываемыеСотрудники.ПерерасчетНачислений КАК ПерерасчетНачислений,
			|	ПерерассчитываемыеСотрудники.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
			|	ПерерассчитываемыеСотрудники.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ПОМЕСТИТЬ ВТСотрудникиПериодДействияПерерасчет
			|ИЗ
			|	&СотрудникиПериодДействияПерерасчет КАК ПерерассчитываемыеСотрудники
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) КАК ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация КАК Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник КАК Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПерерасчетЗарплатыСОбластями.ВидРасчета КАК ВидРасчета,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетНачислений КАК ПерерасчетНачислений,
			|	ПерерасчетЗарплатыСОбластями.ПерерасчетЛьгот КАК ПерерасчетЛьгот
			|ПОМЕСТИТЬ ВТПерерассчитываемыеСотрудники
			|ИЗ
			|	ВТСотрудникиПериодовПерерасчетов КАК СотрудникиПериодовПерерасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПерерасчетЗарплатыСОбластямиПерерасчетов КАК ПерерасчетЗарплатыСОбластями
			|		ПО СотрудникиПериодовПерерасчетов.Сотрудник = ПерерасчетЗарплатыСОбластями.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(СотрудникиПериодовПерерасчетов.Период, МЕСЯЦ) = ПерерасчетЗарплатыСОбластями.НачалоПериода)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериодовПерерасчетов.ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	ВЫРАЗИТЬ(СотрудникиПериодовПерерасчетов.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	СотрудникиПериодовПерерасчетов.ВидРасчета,
			|	МАКСИМУМ(СотрудникиПериодовПерерасчетов.ПерерасчетНачислений),
			|	МАКСИМУМ(СотрудникиПериодовПерерасчетов.ПерерасчетЛьгот)
			|ИЗ
			|	ВТСотрудникиПериодДействияПерерасчет КАК СотрудникиПериодовПерерасчетов
			|ГДЕ
			|	(СотрудникиПериодовПерерасчетов.ПерерасчетНачислений
			|			ИЛИ СотрудникиПериодовПерерасчетов.ПерерасчетЛьгот)
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиПериодовПерерасчетов.ПериодДействия,
			|	СотрудникиПериодовПерерасчетов.Организация,
			|	СотрудникиПериодовПерерасчетов.Сотрудник,
			|	СотрудникиПериодовПерерасчетов.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплатыСОбластямиПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерасчетЗарплаты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодовПерерасчетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиПериодДействияПерерасчет";
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПерерассчитываемыеСотрудники", ИмяВТПерерассчитываемыеСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПерерассчитываемыеУдержанияСотрудников(МенеджерВременныхТаблиц, Организация, Подразделение, Сотрудники, СотрудникиПериодДействияПерерасчет, МесяцНачисления, РежимДоначисления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодДействия", МесяцНачисления);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	КонецПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(Сотрудники) Тогда
		
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		
		Для каждого Сотрудник Из Сотрудники Цикл
			
			НоваяСтрокиИзмерений = ИзмеренияДаты.Добавить();
			НоваяСтрокиИзмерений.Период = КонецПериода;
			НоваяСтрокиИзмерений.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрокиИзмерений.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрокиИзмерений = ИзмеренияДаты.Добавить();
		НоваяСтрокиИзмерений.Период = КонецПериода;
		НоваяСтрокиИзмерений.ГоловнаяОрганизация = ГоловнаяОрганизация;
		
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Организация", "=", Организация);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Подразделение", "В ИЕРАРХИИ", Подразделение);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТСотрудникиОрганизации");
	
	ДобавитьСотрудникиПериодДействияПерерасчет = Ложь;
	
	Если СотрудникиПериодДействияПерерасчет <> Неопределено
		И СотрудникиПериодДействияПерерасчет.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СотрудникиПериодДействияПерерасчет", СотрудникиПериодДействияПерерасчет);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СотрудникиПериодДействияПерерасчет.ПериодДействия КАК ПериодДействия,
			|	СотрудникиПериодДействияПерерасчет.Сотрудник КАК ФизическоеЛицо,
			|	СотрудникиПериодДействияПерерасчет.ВидРасчета КАК Удержание,
			|	СотрудникиПериодДействияПерерасчет.ДокументОснование КАК ДокументОснование,
			|	СотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний КАК ПерерасчетУдержаний
			|ПОМЕСТИТЬ ВТСотрудникиПериодДействияПерерасчетУдержаний
			|ИЗ
			|	&СотрудникиПериодДействияПерерасчет КАК СотрудникиПериодДействияПерерасчет";
		
		Запрос.Выполнить();
		
		ДобавитьСотрудникиПериодДействияПерерасчет = Истина;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетУдержаний.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
		|	СотрудникиОрганизации.Сотрудник,
		|	ПерерасчетУдержаний.ФизическоеЛицо,
		|	ПерерасчетУдержаний.Удержание,
		|	ПерерасчетУдержаний.ДокументОснование
		|ПОМЕСТИТЬ ВТПерерассчитываемыеУдержанияСотрудников
		|ИЗ
		|	РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО ПерерасчетУдержаний.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
		|ГДЕ
		|	ПерерасчетУдержаний.Организация = &Организация
		|	И ПерерасчетУдержаний.ПериодДействия <= &ПериодДействия";
	
	Если Не РежимДоначисления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетУдержаний.ПериодДействия <= &ПериодДействия", "И ПерерасчетУдержаний.ПериодДействия < &ПериодДействия");
	КонецЕсли;
	
	Если ДобавитьСотрудникиПериодДействияПерерасчет Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|"
			+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |	НАЧАЛОПЕРИОДА(СотрудникиПериодДействияПерерасчет.ПериодДействия, МЕСЯЦ) КАК НачалоПериода,
			  |	СотрудникиОрганизации.Сотрудник,
			  |	СотрудникиПериодДействияПерерасчет.ФизическоеЛицо,
			  |	СотрудникиПериодДействияПерерасчет.Удержание,
			  |	СотрудникиПериодДействияПерерасчет.ДокументОснование
			  |ИЗ
			  |	ВТСотрудникиПериодДействияПерерасчетУдержаний КАК СотрудникиПериодДействияПерерасчет
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			  |		ПО СотрудникиПериодДействияПерерасчет.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
			  |ГДЕ
			  |	СотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Если ДобавитьСотрудникиПериодДействияПерерасчет Тогда
		
		Запрос.Текст = Запрос.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "УНИЧТОЖИТЬ ВТСотрудникиПериодДействияПерерасчетУдержаний";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиОрганизацииКРасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, РежимДоначисления, ИмяВТСотрудникиОрганизацииКПерерасчету) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТПерерассчитываемыеСотрудники(
		МенеджерВременныхТаблиц,
		ПараметрыПолученияСотрудников.Организация,
		ПараметрыПолученияСотрудников.Подразделение,
		НачалоМесяца(ПараметрыПолученияСотрудников.НачалоПериода),
		СотрудникиПериодДействияПерерасчет,
		РежимДоначисления);
		
	СоздатьВТПерерассчитываемыеУдержанияСотрудников(
		МенеджерВременныхТаблиц,
		ПараметрыПолученияСотрудников.Организация,
		ПараметрыПолученияСотрудников.Подразделение,
		,
		СотрудникиПериодДействияПерерасчет,
		НачалоМесяца(ПараметрыПолученияСотрудников.НачалоПериода),
		РежимДоначисления);
		
	Если РежимДоначисления Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.ПериодДействия КАК Период,
			|	СотрудникиОрганизации.ПериодДействия КАК ПериодЗаписи,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизацииКПерерасчету
			|ИЗ
			|	ВТПерерассчитываемыеСотрудники КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеУдержанияСотрудников КАК СотрудникиОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерассчитываемыеСотрудники";
		
	Иначе
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТСотрудникиОрганизацииОсновнойТаблицы");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Период,
			|	СотрудникиОрганизации.ПериодЗаписи,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизацииКПерерасчету
			|ИЗ
			|	ВТСотрудникиОрганизацииОсновнойТаблицы КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.ПериодДействия,
			|	СотрудникиОрганизации.ПериодДействия,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.Сотрудник.ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеСотрудники КАК СотрудникиОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.НачалоПериода,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	ВТПерерассчитываемыеУдержанияСотрудников КАК СотрудникиОрганизации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиОрганизацииОсновнойТаблицы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПерерассчитываемыеСотрудники";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизацииКПерерасчету", ИмяВТСотрудникиОрганизацииКПерерасчету);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПерерасчета(ДанныеПерерасчета, Организация, Подразделение = Неопределено, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, РежимДоначисления, МенеджерРасчета) Экспорт
	
	ЗаполнитьДанныеПерерасчетаНачислений(
		ДанныеПерерасчета,
		Организация,
		Подразделение,
		МесяцНачисления,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		ИсключаемыеРегистраторы,
		РежимДоначисления,
		МенеджерРасчета);
	
	УстановитьОтборыПерерасчетовУдержаний(
		ДанныеПерерасчета,
		МенеджерРасчета,
		Организация,
		Подразделение,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		МесяцНачисления,
		РежимДоначисления);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПерерасчетаНачислений(ДанныеПерерасчета, Организация, Подразделение = Неопределено, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, РежимДоначисления, МенеджерРасчета)
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПерерасчетПособий = ПерерассчитыватьПособия(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	Запрос.УстановитьПараметр("ПервоначальноеЗаполнениеНачисленияЗарплаты", ИсключаемыеРегистраторы = Документы.НачислениеЗарплаты.ПустаяСсылка());
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПерерассчитываемыеСотрудники(
		Запрос.МенеджерВременныхТаблиц,
		Организация,
		Подразделение,
		МесяцНачисления,
		СотрудникиПериодДействияПерерасчет,
		РежимДоначисления,
		Сотрудники);
		
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТПерерассчитываемыеСотрудники") Тогда
		Возврат;
	КонецЕсли;
		
	СоздатьВТТипыРегистраторовПоОтдельномуДокументу(Запрос.МенеджерВременныхТаблиц);
	
	ДопустимыеВидыДокументов = ДопустимыеВидыДокументовНачисления();
	Запрос.УстановитьПараметр("ДопустимыеВидыДокументовНачисления", ДопустимыеВидыДокументов);
	
	// Получение списка сторнируемых регистраторов
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерассчитываемыеСотрудники.Организация КАК Организация,
		|	ПерерассчитываемыеСотрудники.Сотрудник КАК Сотрудник,
		|	ПерерассчитываемыеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерассчитываемыеСотрудники.ПериодДействия КАК ПериодДействия,
		|	ПерерассчитываемыеСотрудники.ПерерасчетНачислений КАК ПерерасчетНачислений,
		|	ПерерассчитываемыеСотрудники.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
		|	ПерерассчитываемыеСотрудники.ВидРасчета КАК ВидРасчета,
		|	ЕСТЬNULL(Начисления.Сторно, ЛОЖЬ) КАК Сторно,
		|	ЕСТЬNULL(Начисления.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
		|	ЕСТЬNULL(Начисления.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) КАК Регистратор,
		|	ЕСТЬNULL(Начисления.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(Начисления.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТПерерассчитываемыеРегистраторыПредварительно
		|ИЗ
		|	ВТПерерассчитываемыеСотрудники КАК ПерерассчитываемыеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО ПерерассчитываемыеСотрудники.Организация = Начисления.Организация
		|			И ПерерассчитываемыеСотрудники.Сотрудник = Начисления.Сотрудник
		|			И ПерерассчитываемыеСотрудники.ПериодДействия = Начисления.ПериодДействия
		|			И (НЕ ЕСТЬNULL(Начисления.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) В (&ИсключаемыеРегистраторы))
		|			И (ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|					ТОГДА ИСТИНА
		|				КОГДА ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|					ТОГДА Начисления.ВидРасчета.ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипыРегистраторовПоОтдельномуДокументу КАК ТипыРегистраторовПоОтдельномуДокументу
		|		ПО (ТИПЗНАЧЕНИЯ(Начисления.Регистратор) = ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора)
		|			И (ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).ВидДокументаНачисления = ТипыРегистраторовПоОтдельномуДокументу.ВидДокументаНачисления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ ЕСТЬNULL(Начисления.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) В (&ИсключаемыеРегистраторы)
		|				ТОГДА ИСТИНА
		|			КОГДА &ПервоначальноеЗаполнениеНачисленияЗарплаты
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА Начисления.ВидРасчета ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			КОГДА Начисления.ВидРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА Начисления.ВидРасчета.ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|					И ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора ЕСТЬ NULL
		|					И ЕСТЬNULL(Начисления.Сторно, ЛОЖЬ) = ЛОЖЬ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерассчитываемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	ПерерассчитываемыеРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерассчитываемыеРегистраторы.ПериодДействия КАК ПериодДействия,
		|	ПерерассчитываемыеРегистраторы.Регистратор КАК Регистратор,
		|	ПерерассчитываемыеРегистраторы.ПерерасчетНачислений КАК ПерерасчетНачислений,
		|	ПерерассчитываемыеРегистраторы.ПерерасчетЛьгот КАК ПерерасчетЛьгот,
		|	ПерерассчитываемыеРегистраторы.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТСторнируемыеРегистраторыНачисленийИЛьгот
		|ИЗ
		|	ВТПерерассчитываемыеРегистраторыПредварительно КАК ПерерассчитываемыеРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерерассчитываемыеРегистраторыПредварительно КАК ПерерассчитываемыеРегистраторыСторно
		|		ПО ПерерассчитываемыеРегистраторы.Организация = ПерерассчитываемыеРегистраторыСторно.Организация
		|			И ПерерассчитываемыеРегистраторы.Сотрудник = ПерерассчитываемыеРегистраторыСторно.Сотрудник
		|			И ПерерассчитываемыеРегистраторы.ПериодДействия = ПерерассчитываемыеРегистраторыСторно.ПериодДействия
		|			И ПерерассчитываемыеРегистраторы.ПериодДействияНачало >= ПерерассчитываемыеРегистраторыСторно.ПериодДействияНачало
		|			И ПерерассчитываемыеРегистраторы.ПериодДействияКонец <= ПерерассчитываемыеРегистраторыСторно.ПериодДействияКонец
		|			И ПерерассчитываемыеРегистраторы.ПериодРегистрации < ПерерассчитываемыеРегистраторыСторно.ПериодРегистрации
		|			И (ПерерассчитываемыеРегистраторыСторно.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
		|			И (ПерерассчитываемыеРегистраторыСторно.Сторно)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПерерассчитываемыеРегистраторыСторно.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
		|				ТОГДА НЕ ПерерассчитываемыеРегистраторы.Сторно
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ПерерассчитываемыеРегистраторыСторно.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия,
		|	СторнируемыеРегистраторы.Регистратор КАК Регистратор,
		|	МАКСИМУМ(СторнируемыеРегистраторы.ПерерасчетНачислений) КАК ПерерасчетНачислений
		|ПОМЕСТИТЬ ВТСторнируемыеРегистраторы
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|
		|СГРУППИРОВАТЬ ПО
		|	СторнируемыеРегистраторы.Сотрудник,
		|	СторнируемыеРегистраторы.ФизическоеЛицо,
		|	СторнируемыеРегистраторы.ПериодДействия,
		|	СторнируемыеРегистраторы.Регистратор
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(СторнируемыеРегистраторы.ПерерасчетНачислений) = ИСТИНА";
	
	Запрос.Выполнить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.СоздатьВТСторнируемыеРегистраторыЛьгот(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Сбор сведений о сторнированных строках начислений
	ТекстЗапросаНачисленийПерерасчет =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	НачисленияПерерасчет.Ссылка,
		|	НачисленияПерерасчет.НомерСтроки,
		|	НачисленияПерерасчет.Подразделение,
		|	НачисленияПерерасчет.ДатаНачала,
		|	НачисленияПерерасчет.ДатаОкончания,
		|	НачисленияПерерасчет.ПериодДействия,
		|	НачисленияПерерасчет.Начисление,
		|	НачисленияПерерасчет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	НачисленияПерерасчет.Результат,
		|	НачисленияПерерасчет.ОтработаноДней,
		|	НачисленияПерерасчет.ОтработаноЧасов,
		|	НачисленияПерерасчет.НормаДней,
		|	НачисленияПерерасчет.НормаЧасов,
		|	НачисленияПерерасчет.Сотрудник,
		|	НачисленияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	НачисленияПерерасчет.КодВычета,
		|	НачисленияПерерасчет.СуммаВычета,
		|	НачисленияПерерасчет.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПерерасчет.ГрафикРаботы,
		|	НачисленияПерерасчет.ГрафикРаботыНорма,
		|	НачисленияПерерасчет.ОбщийГрафик,
		|	НачисленияПерерасчет.ПериодРегистрацииВремени,
		|	НачисленияПерерасчет.ПериодРегистрацииНормыВремени,
		|	НачисленияПерерасчет.ВремяВЧасах,
		|	НачисленияПерерасчет.ВидУчетаВремени,
		|	НачисленияПерерасчет.ОплаченоДней,
		|	НачисленияПерерасчет.ОплаченоЧасов,
		|	НачисленияПерерасчет.ДокументОснование,
		|	НачисленияПерерасчет.Сторно КАК Сторно,
		|	НачисленияПерерасчет.ФиксСторно КАК ФиксСторно,
		|	НачисленияПерерасчет.СторнируемыйДокумент КАК СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТСторнируемыеНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачисленияПерерасчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО НачисленияПерерасчет.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И НачисленияПерерасчет.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (НЕ ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И НачисленияПерерасчет.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (НачисленияПерерасчет.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))
		|			И (НЕ НачисленияПерерасчет.Сторно)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипыРегистраторовПоОтдельномуДокументу КАК ТипыРегистраторовПоОтдельномуДокументу
		|		ПО (ТИПЗНАЧЕНИЯ(НачисленияПерерасчет.Ссылка) = ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора)
		|			И (ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).ВидДокументаНачисления = ТипыРегистраторовПоОтдельномуДокументу.ВидДокументаНачисления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|					И ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	ТекстЗапросаНачислений =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	Начисления.Ссылка,
		|	Начисления.НомерСтроки,
		|	Начисления.Подразделение,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Начисления.Начисление,
		|	Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	Начисления.Результат,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.НормаДней,
		|	Начисления.НормаЧасов,
		|	Начисления.Сотрудник,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Начисления.КодВычета,
		|	Начисления.СуммаВычета,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.ОбщийГрафик,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ПериодРегистрацииНормыВремени,
		|	Начисления.ВремяВЧасах,
		|	Начисления.ВидУчетаВремени,
		|	Начисления.ОплаченоДней,
		|	Начисления.ОплаченоЧасов,
		|	Начисления.ДокументОснование,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК ФиксСторно,
		|	NULL КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (НЕ ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО Начисления.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И Начисления.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И Начисления.ПериодДействия = СторнируемыеРегистраторы.ПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТипыРегистраторовПоОтдельномуДокументу КАК ТипыРегистраторовПоОтдельномуДокументу
		|		ПО (ТИПЗНАЧЕНИЯ(Начисления.Ссылка) = ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора)
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ВидДокументаНачисления = ТипыРегистраторовПоОтдельномуДокументу.ВидДокументаНачисления)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
		|				ТОГДА ИСТИНА
		|			КОГДА ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ВидДокументаНачисления В (&ДопустимыеВидыДокументовНачисления)
		|					И ТипыРегистраторовПоОтдельномуДокументу.ТипРегистратора ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	// Сбор сведений о сторнированных строках пособий
	ТекстЗапросаПособияПерерасчет =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	ПособияПерерасчет.Ссылка,
		|	ПособияПерерасчет.НомерСтроки,
		|	ПособияПерерасчет.Сотрудник,
		|	ПособияПерерасчет.Подразделение,
		|	ПособияПерерасчет.ВидЗанятости,
		|	ВЫБОР
		|		КОГДА ПособияПерерасчет.Начисление.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(ПособияПерерасчет.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ ПособияПерерасчет.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	ПособияПерерасчет.ДатаНачала,
		|	ПособияПерерасчет.ДатаОкончания,
		|	ПособияПерерасчет.Начисление,
		|	ПособияПерерасчет.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	ПособияПерерасчет.Результат,
		|	ПособияПерерасчет.РезультатВТомЧислеЗаСчетФБ,
		|	ПособияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ПособияПерерасчет.ИдентификаторСтрокиВидаРасчета,
		|	ПособияПерерасчет.ОплаченоДней,
		|	ПособияПерерасчет.ОплаченоЧасов,
		|	ПособияПерерасчет.СуммаВсегоПоУходуЗаПервымРебенком,
		|	ПособияПерерасчет.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	ПособияПерерасчет.СуммаВсегоПоУходуЗаВторымРебенком,
		|	ПособияПерерасчет.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	ПособияПерерасчет.ФинансированиеФедеральнымБюджетом,
		|	ПособияПерерасчет.СтраховойСлучай,
		|	ПособияПерерасчет.КоличествоДетей,
		|	ПособияПерерасчет.КоличествоПервыхДетей,
		|	ПособияПерерасчет.ГрафикРаботы,
		|	ПособияПерерасчет.ГрафикРаботыНорма,
		|	ПособияПерерасчет.ОбщийГрафик,
		|	ПособияПерерасчет.ПериодРегистрацииВремени,
		|	ПособияПерерасчет.ПериодРегистрацииНормыВремени,
		|	ПособияПерерасчет.ФиксСторно,
		|	ПособияПерерасчет.Сторно,
		|	ПособияПерерасчет.СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТСторнируемыеПособия
		|ИЗ
		|	Документ.НачислениеЗарплаты.ПособияПерерасчет КАК ПособияПерерасчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО ПособияПерерасчет.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И ПособияПерерасчет.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (ВЫРАЗИТЬ(ПособияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И ПособияПерерасчет.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (ПособияПерерасчет.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))
		|			И (НЕ ПособияПерерасчет.Сторно)";
	
	ТекстЗапросаПособия =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ПерерасчетНачислений,
		|	ЛОЖЬ КАК ПерерасчетЛьгот,
		|	Пособия.Ссылка,
		|	Пособия.НомерСтроки,
		|	Пособия.Сотрудник,
		|	Пособия.Подразделение,
		|	Пособия.ВидЗанятости,
		|	ВЫБОР
		|		КОГДА Пособия.Начисление.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Пособия.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Пособия.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Пособия.ДатаНачала,
		|	Пособия.ДатаОкончания,
		|	Пособия.Начисление,
		|	Пособия.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория,
		|	Пособия.Результат,
		|	Пособия.РезультатВТомЧислеЗаСчетФБ,
		|	Пособия.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Пособия.ИдентификаторСтрокиВидаРасчета,
		|	Пособия.ОплаченоДней,
		|	Пособия.ОплаченоЧасов,
		|	Пособия.СуммаВсегоПоУходуЗаПервымРебенком,
		|	Пособия.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	Пособия.СуммаВсегоПоУходуЗаВторымРебенком,
		|	Пособия.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	Пособия.ФинансированиеФедеральнымБюджетом,
		|	Пособия.СтраховойСлучай,
		|	Пособия.КоличествоДетей,
		|	Пособия.КоличествоПервыхДетей,
		|	Пособия.ГрафикРаботы,
		|	Пособия.ГрафикРаботыНорма,
		|	Пособия.ОбщийГрафик,
		|	Пособия.ПериодРегистрацииВремени,
		|	Пособия.ПериодРегистрацииНормыВремени,
		|	ЛОЖЬ КАК ФиксСторно,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.НачислениеЗарплаты.Пособия КАК Пособия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО Пособия.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И Пособия.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (ВЫРАЗИТЬ(Пособия.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И (НАЧАЛОПЕРИОДА(Пособия.ДатаНачала, МЕСЯЦ) >= СторнируемыеРегистраторы.ПериодДействия)
		|			И (Пособия.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))";
	
	// Сбор сведений о распределениях
	ТекстЗапросаРаспределениеРезультатовНачислений =
		"ВЫБРАТЬ
		|	РаспределениеРезультатовНачислений.Ссылка,
		|	РаспределениеРезультатовНачислений.НомерСтроки,
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования,
		|	РаспределениеРезультатовНачислений.СтатьяРасходов,
		|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
		|	РаспределениеРезультатовНачислений.Результат
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
		|		ПО РаспределениеРезультатовНачислений.Ссылка = СторнируемыеНачисления.Ссылка
		|			И РаспределениеРезультатовНачислений.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
	
	ЧастиТекстаЗапросаНачислений = Новый Массив;
	ЧастиТекстаЗапросаПособий = Новый Массив;
	ЧастиТекстаЗапросаРаспределениеРезультатовНачислений = Новый Массив;
	
	МетаданныеРегистрыРасчетаНачисления = Метаданные.РегистрыРасчета.Начисления;
	Для каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если Не МетаданныеДокумента.Движения.Содержит(МетаданныеРегистрыРасчетаНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготовка текста запроса по начислениям
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("НачисленияПерерасчет") <> Неопределено Тогда
			
			ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийПерерасчет, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если МетаданныеДокумента.ТабличныеЧасти["НачисленияПерерасчет"].Реквизиты.Найти("ПериодДействия") = Неопределено Тогда
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "НачисленияПерерасчет.ПериодДействия", "НачисленияПерерасчет.ДатаНачала КАК ПериодДействия");
			КонецЕсли;
			
			Если МетаданныеДокумента.Имя <> "НачислениеЗарплаты" Тогда
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
			КонецЕсли;
			
			ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
				|	И СторнируемыеРегистраторы.ПерерасчетНачислений";
			
			Если ЧастиТекстаЗапросаНачислений.Количество() > 0 Тогда
				ЧастиТекстаЗапросаНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеНачисления", "");
			КонецЕсли;
			ЧастиТекстаЗапросаНачислений.Добавить(ТекстЗапросаНачисленийДокумента);
			
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("Начисления") <> Неопределено
				И МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("Начисление") <> Неопределено Тогда
				
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачислений, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
				
				Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
					ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Начисления.ДокументОснование", "Неопределено КАК ДокументОснование");
				КонецЕсли;
				
				Если МетаданныеДокумента.Реквизиты.Найти("МесяцНачисления") = Неопределено Тогда
					ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Ссылка.МесяцНачисления", "Ссылка.ПериодРегистрации");
				КонецЕсли;
				
				ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
					|	И СторнируемыеРегистраторы.ПерерасчетНачислений";
				
				ЧастиТекстаЗапросаНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
				ЧастиТекстаЗапросаНачислений.Добавить(ТекстЗапросаНачисленийДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Льготы и ЛьготыПерерасчет
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДобавитьТекстЗапросаПерерассчитываемыхЛьгот(ЧастиТекстаЗапросаНачислений, МетаданныеДокумента, ТекстЗапросаНачисленийПерерасчет, ТекстЗапросаНачислений);
		КонецЕсли;
		
		// Документ ОтпускПоУходуЗаРебенком
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ОплатаТруда") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти.ОплатаТруда.Реквизиты.Найти("Начисление") <> Неопределено Тогда
			
			ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачислений, "Документ.НачислениеЗарплаты.Начисления", "Документ." + МетаданныеДокумента.Имя + ".ОплатаТруда");
			
			Если МетаданныеДокумента.Реквизиты.Найти("МесяцНачисления") = Неопределено Тогда
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Ссылка.МесяцНачисления", "Ссылка.ПериодРегистрации");
			КонецЕсли;
			
			ЧастиТекстаЗапросаНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			ЧастиТекстаЗапросаНачислений.Добавить(ТекстЗапросаНачисленийДокумента);
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РаспределениеРезультатовНачислений") <> Неопределено Тогда
		
			ТекстЗапросаРаспределениеРезультатовНачисленийДокумента = СтрЗаменить(ТекстЗапросаРаспределениеРезультатовНачислений, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если ЧастиТекстаЗапросаРаспределениеРезультатовНачислений.Количество() > 0 Тогда
				ЧастиТекстаЗапросаРаспределениеРезультатовНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			ЧастиТекстаЗапросаРаспределениеРезультатовНачислений.Добавить(ТекстЗапросаРаспределениеРезультатовНачисленийДокумента);
			
		КонецЕсли;
		
		// Подготовка текста запроса по пособиям
		Если ПерерасчетПособий Тогда
			
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("ПособияПерерасчет") <> Неопределено Тогда
				
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособияПерерасчет, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
				
				Если МетаданныеДокумента.Имя <> "НачислениеЗарплаты" Тогда
					ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "И (НЕ ПособияПерерасчет.Сторно)", "");
				КонецЕсли; 
				
				ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
					|ГДЕ
					|	СторнируемыеРегистраторы.ПерерасчетНачислений";
				
				Если ЧастиТекстаЗапросаПособий.Количество() > 0 Тогда
					ЧастиТекстаЗапросаПособий.Добавить("ОБЪЕДИНИТЬ ВСЕ");
					ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеПособия", "");
				КонецЕсли;
				
				ЧастиТекстаЗапросаПособий.Добавить(ТекстЗапросаПособийДокумента);
				
			КонецЕсли;
			
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("Пособия") <> Неопределено Тогда
				
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособия, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
				
				ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
					|ГДЕ
					|	СторнируемыеРегистраторы.ПерерасчетНачислений";
				
				Если ЧастиТекстаЗапросаПособий.Количество() > 0 Тогда
					ЧастиТекстаЗапросаПособий.Добавить("ОБЪЕДИНИТЬ ВСЕ");
				КонецЕсли;
				
				ЧастиТекстаЗапросаПособий.Добавить(ТекстЗапросаПособийДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Документ СторнированиеНачислений
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийПерерасчет, "Документ.НачислениеЗарплаты.НачисленияПерерасчет", "Документ.СторнированиеНачислений.Сторнировано");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеНачисления", "");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "НачисленияПерерасчет.СторнируемыйДокумент", "НачисленияПерерасчет.ДокументОснование");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
	
	ЧастиТекстаЗапросаНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
	ЧастиТекстаЗапросаНачислений.Добавить(ТекстЗапросаНачисленийДокумента);
	
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачислений, "Документ.НачислениеЗарплаты.Начисления", "Документ.СторнированиеНачислений.ДоначисленияИПерерасчеты");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Ссылка.МесяцНачисления", "Ссылка.ПериодРегистрации");
	ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
		|			И Начисления.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (Начисления.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))";
	
	ЧастиТекстаЗапросаНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
	ЧастиТекстаЗапросаНачислений.Добавить(ТекстЗапросаНачисленийДокумента);
	
	// Формирование данных по начислениям
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапросаНачислений, Символы.ПС);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	НачисленияПерерасчет = ДанныеПерерасчета.НачисленияПерерасчет;
	ДобавитьКолонкиПоказателей(НачисленияПерерасчет);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СторнируемыеНачисления.*
		|ИЗ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(СторнируемыеНачисления.ДатаНачала, МЕСЯЦ),
		|	СторнируемыеНачисления.Сотрудник,
		|	СторнируемыеНачисления.Начисление,
		|	СторнируемыеНачисления.КодВычета,
		|	СторнируемыеНачисления.Ссылка,
		|	СторнируемыеНачисления.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапросаПоНачислениям = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Формирование данных по пособиям
	ПособияПерерасчет = ДанныеПерерасчета.ПособияПерерасчет;
	ДобавитьКолонкиПоказателей(ПособияПерерасчет);
	
	Если ПерерасчетПособий Тогда
		
		Запрос.Текст = СтрСоединить(ЧастиТекстаЗапросаПособий, Символы.ПС);
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СторнируемыеПособия.*
			|ИЗ ВТСторнируемыеПособия КАК СторнируемыеПособия
			|
			|УПОРЯДОЧИТЬ ПО
			|	НАЧАЛОПЕРИОДА(СторнируемыеПособия.ДатаНачала, МЕСЯЦ),
			|	СторнируемыеПособия.Сотрудник,
			|	СторнируемыеПособия.Начисление,
			|	СторнируемыеПособия.Ссылка,
			|	СторнируемыеПособия.НомерСтроки";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапросаПоПособиям = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если Не РезультатЗапросаПоНачислениям.Пустой() Или ПерерасчетПособий И Не РезультатЗапросаПоПособиям.Пустой() Тогда
		
		// Сбор сведений о распределении начислений
		ТекстЗапросаРаспределениеРезультатовНачисленийДокумента = 
			СтрЗаменить(ТекстЗапросаРаспределениеРезультатовНачислений, "Документ.НачислениеЗарплаты.", "Документ.СторнированиеНачислений.");
		
		ЧастиТекстаЗапросаРаспределениеРезультатовНачислений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
		ЧастиТекстаЗапросаРаспределениеРезультатовНачислений.Добавить(ТекстЗапросаРаспределениеРезультатовНачисленийДокумента);
		
		Запрос.Текст = СтрСоединить(ЧастиТекстаЗапросаРаспределениеРезультатовНачислений, Символы.ПС);
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаРаспределенияНачислений = Запрос.Выполнить().Выгрузить();
		ТаблицаРаспределенияНачислений.Индексы.Добавить("Ссылка,ИдентификаторСтроки");
		УстановитьПривилегированныйРежим(Ложь);
		
		// Сбор сведений о распределении по территориям и условиям труда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СторнируемыеНачисления.Ссылка,
			|	РаспределениеПоТерриториямУсловиямТруда.*
			|ИЗ
			|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
			|		ПО РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение = СторнируемыеНачисления.Ссылка
			|			И РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = Запрос.Выполнить().Выгрузить();
		ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.Индексы.Добавить("Ссылка,ИдентификаторСтроки");
		УстановитьПривилегированныйРежим(Ложь);
		
		// Сбор сведений о показателях
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СторнируемыеНачисления.Ссылка,
			|	ЗначенияПоказателейНачислений.*
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
			|		ПО ЗначенияПоказателейНачислений.РегистраторИзмерение = СторнируемыеНачисления.Ссылка
			|			И ЗначенияПоказателейНачислений.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
		ТаблицаПоказателей.Индексы.Добавить("Ссылка,ИдентификаторСтроки,Показатель");
		УстановитьПривилегированныйРежим(Ложь);
		
		Выборка = РезультатЗапросаПоНачислениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПериодДействия = Выборка.ПериодДействия;
			
			НоваСтрокаСторноНачисленийПерерасчет = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(НачисленияПерерасчет);
			ЗаполнитьЗначенияСвойств(НоваСтрокаСторноНачисленийПерерасчет, Выборка);
			
			НоваСтрокаСторноНачисленийПерерасчет.Результат = - НоваСтрокаСторноНачисленийПерерасчет.Результат;
			НоваСтрокаСторноНачисленийПерерасчет.ОтработаноДней = - НоваСтрокаСторноНачисленийПерерасчет.ОтработаноДней;
			НоваСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов = - НоваСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов;
			НоваСтрокаСторноНачисленийПерерасчет.ОплаченоДней = - НоваСтрокаСторноНачисленийПерерасчет.ОплаченоДней;
			НоваСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов = - НоваСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов;
			
			НоваСтрокаСторноНачисленийПерерасчет.Сторно = Истина;
			НоваСтрокаСторноНачисленийПерерасчет.ФиксСторно = Истина;
			НоваСтрокаСторноНачисленийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
			
			ЗаполнитьБазовыйПериод(НоваСтрокаСторноНачисленийПерерасчет, Выборка);
			ЗаполнитьРезультатРаспределения(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьРезультатРаспределенияПоТерриториям(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьПоказатели(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			
		КонецЦикла;
		
		Если ПерерасчетПособий Тогда
			
			Выборка = РезультатЗапросаПоПособиям.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПериодДействия = Выборка.ПериодДействия;
				
				НоваСтрокаСторноПособийПерерасчет = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(ПособияПерерасчет);
				ЗаполнитьЗначенияСвойств(НоваСтрокаСторноПособийПерерасчет, Выборка);
				
				НоваСтрокаСторноПособийПерерасчет.Результат = - НоваСтрокаСторноПособийПерерасчет.Результат;
				Дополнительно = НоваСтрокаСторноПособийПерерасчет.Дополнительно;
				Дополнительно.Вставить("РезультатВТомЧислеЗаСчетФБ", -Выборка.РезультатВТомЧислеЗаСчетФБ);
				Дополнительно.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", -Выборка.СуммаВсегоПоУходуЗаПервымРебенком);
				Дополнительно.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", -Выборка.СуммаСверхНормПоУходуЗаПервымРебенком);
				Дополнительно.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", -Выборка.СуммаВсегоПоУходуЗаВторымРебенком);
				Дополнительно.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", -Выборка.СуммаСверхНормПоУходуЗаВторымРебенком);
				Дополнительно.Вставить("ФинансированиеФедеральнымБюджетом", Выборка.ФинансированиеФедеральнымБюджетом);
				Дополнительно.Вставить("СтраховойСлучай", Выборка.СтраховойСлучай);
				Дополнительно.Вставить("КоличествоДетей", Выборка.КоличествоДетей);
				Дополнительно.Вставить("КоличествоПервыхДетей", Выборка.КоличествоПервыхДетей);
				
				НоваСтрокаСторноПособийПерерасчет.ОплаченоДней = - НоваСтрокаСторноПособийПерерасчет.ОплаченоДней;
				НоваСтрокаСторноПособийПерерасчет.ОплаченоЧасов = - НоваСтрокаСторноПособийПерерасчет.ОплаченоЧасов;
				
				НоваСтрокаСторноПособийПерерасчет.ФиксРасчет = Ложь;
				НоваСтрокаСторноПособийПерерасчет.ФиксСтрока = Ложь;
				НоваСтрокаСторноПособийПерерасчет.ФиксЗаполнение = Ложь;
				
				НоваСтрокаСторноПособийПерерасчет.Сторно = Истина;
				НоваСтрокаСторноПособийПерерасчет.ФиксСторно = Истина;
				НоваСтрокаСторноПособийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
				
				ЗаполнитьБазовыйПериод(НоваСтрокаСторноПособийПерерасчет, Выборка);
				ЗаполнитьРезультатРаспределения(НоваСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
				ЗаполнитьРезультатРаспределенияПоТерриториям(НоваСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
				ЗаполнитьПоказатели(НоваСтрокаСторноПособийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СвернутьНачисленияПерерасчет(НачисленияПерерасчет);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания,
		|	ИСТИНА КАК ПериодПерерасчета
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.ПериодДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеПерерасчета.ТаблицаСотрудников.Добавить(), Выборка);
		КонецЦикла;
		
		// Установка отборов перерасчетов начислений и удержаний
		УстановитьОтборыПерерасчетовНачислений(МенеджерРасчета, Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПерерасчетаПриУвольненииСотрудника(ДокументУвольнения, ИсправленныйДокумент, Сотрудник, Организация, ДатаУвольнения, ПериодПерерасчетов, ИсключаемыеРегистраторы, МенеджерРасчета) Экспорт
	
	ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
	ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
	ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
	ДанныеПерерасчета.ТаблицаСотрудников = МенеджерРасчета.ТаблицаСотрудников();
	ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
	СотрудникиПериодДействияПерерасчет = ПерерасчетЗарплаты.ПустаяТаблицаСотрудникиПериодДействияПерерасчет();
	
	// Включаются ранее перерасчитанные в документе периоды
	Если ЗначениеЗаполнено(ДокументУвольнения) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУвольнения, "Проведен") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументУвольнения);
		Запрос.УстановитьПараметр("ПериодДействия", ПериодПерерасчетов.ДатаНачала);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УвольнениеНачисления.Сотрудник КАК Сотрудник,
			|	УвольнениеНачисления.ПериодДействия КАК ПериодДействия,
			|	ИСТИНА КАК ПерерасчетНачислений
			|ИЗ
			|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
			|ГДЕ
			|	УвольнениеНачисления.Ссылка = &Ссылка
			|	И УвольнениеНачисления.ПериодДействия < &ПериодДействия
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УвольнениеНачисленияПерерасчет.Сотрудник,
			|	УвольнениеНачисленияПерерасчет.ПериодДействия,
			|	ИСТИНА
			|ИЗ
			|	Документ.Увольнение.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
			|ГДЕ
			|	УвольнениеНачисленияПерерасчет.Ссылка = &Ссылка
			|	И УвольнениеНачисленияПерерасчет.ПериодДействия < &ПериодДействия";
		
		Если ТипЗнч(ДокументУвольнения) <> Тип("ДокументСсылка.Увольнение") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ." + ДокументУвольнения.Метаданные().Имя);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаСотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудникиПериодДействияПерерасчет, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Принудительный переасчет месяцев периода регистрации и даты увольнения
	МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
	Пока МесяцПерерасчетов <= ПериодПерерасчетов.ДатаОкончания Цикл
		
		СтрокаСотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет.Добавить();
		СтрокаСотрудникиПериодДействияПерерасчет.Сотрудник = Сотрудник;
		СтрокаСотрудникиПериодДействияПерерасчет.ПериодДействия = МесяцПерерасчетов;
		СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетНачислений = Истина;
		СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетЛьгот = Ложь;
		СтрокаСотрудникиПериодДействияПерерасчет.ПерерасчетУдержаний = Ложь;
		
		МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
		
	КонецЦикла;
	
	МесяцНачисления = ПериодПерерасчетов.ДатаНачала;
	ЗаполнитьДанныеПерерасчета(ДанныеПерерасчета, Организация, , МесяцНачисления,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), СотрудникиПериодДействияПерерасчет, ИсключаемыеРегистраторы, Истина, МенеджерРасчета);
	
	Если ДанныеПерерасчета.ТаблицаСотрудников.Количество() > 0 Тогда
		
		МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
		Пока МесяцПерерасчетов <= ПериодПерерасчетов.ДатаОкончания Цикл
			
			СтрокиТаблицаСотрудников = ДанныеПерерасчета.ТаблицаСотрудников.НайтиСтроки(Новый Структура("Сотрудник,ДатаНачала", Сотрудник, МесяцПерерасчетов));
			Для Каждого СтрокаТаблицаСотрудников Из СтрокиТаблицаСотрудников Цикл
				
				// Сброс флага перерасчитываемого периода для периодов расчета увольнения
				СтрокаТаблицаСотрудников.ПериодПерерасчета = Ложь;
				
				// Ограничение периода расчета датой увольнения
				Если СтрокаТаблицаСотрудников.ДатаНачала = НачалоМесяца(ДатаУвольнения) Тогда
					СтрокаТаблицаСотрудников.ДатаОкончания = Мин(КонецМесяца(СтрокаТаблицаСотрудников.ДатаОкончания), КонецДня(ДатаУвольнения));
				КонецЕсли;
				
			КонецЦикла;
			
			МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ИсправленныйДокумент);
		Запрос.УстановитьПараметр("ПериодДействия", ПериодПерерасчетов.ДатаНачала);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УвольнениеНачисления.Сотрудник КАК Сотрудник,
			|	НАЧАЛОПЕРИОДА(УвольнениеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
			|	КОНЕЦПЕРИОДА(УвольнениеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания,
			|	ИСТИНА КАК ПериодПерерасчета
			|ИЗ
			|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
			|ГДЕ
			|	УвольнениеНачисления.Ссылка = &Ссылка
			|	И УвольнениеНачисления.ПериодДействия < &ПериодДействия
			|	И ВЫРАЗИТЬ(УвольнениеНачисления.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УвольнениеНачисленияПерерасчет.Сотрудник,
			|	НАЧАЛОПЕРИОДА(УвольнениеНачисленияПерерасчет.ПериодДействия, МЕСЯЦ),
			|	КОНЕЦПЕРИОДА(УвольнениеНачисленияПерерасчет.ПериодДействия, МЕСЯЦ),
			|	ИСТИНА
			|ИЗ
			|	Документ.Увольнение.НачисленияПерерасчет КАК УвольнениеНачисленияПерерасчет
			|ГДЕ
			|	УвольнениеНачисленияПерерасчет.Ссылка = &Ссылка
			|	И УвольнениеНачисленияПерерасчет.ПериодДействия < &ПериодДействия
			|	И ВЫРАЗИТЬ(УвольнениеНачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))";
		
		Если ТипЗнч(ИсправленныйДокумент) <> Тип("ДокументСсылка.Увольнение") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ." + ИсправленныйДокумент.Метаданные().Имя);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиПериода = ДанныеПерерасчета.ТаблицаСотрудников.НайтиСтроки(Новый Структура("Сотрудник,ДатаНачала", Выборка.Сотрудник, Выборка.ДатаНачала));
			Если СтрокиПериода.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПерерасчета.ТаблицаСотрудников.Добавить(), Выборка);
			КонецЕсли;
			
		КонецЦикла;
		
		МесяцПерерасчетов = НачалоМесяца(ПериодПерерасчетов.ДатаНачала);
		Пока МесяцПерерасчетов <= ПериодПерерасчетов.ДатаОкончания Цикл
			СтрокиПерерасчетов = ДанныеПерерасчета.НачисленияПерерасчет.НайтиСтроки(Новый Структура("Сотрудник,ПериодДействия", Сотрудник, МесяцПерерасчетов));
			Для Каждого СтрокаПерерасчетов Из СтрокиПерерасчетов Цикл
				ДанныеПерерасчета.НачисленияПерерасчет.Удалить(СтрокаПерерасчетов);
			КонецЦикла;
			
			МесяцПерерасчетов = КонецМесяца(МесяцПерерасчетов) + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПерерасчета;
	
КонецФункции

Процедура ДобавитьКолонкиПоказателей(Таблица)
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Таблица.Колонки.Добавить("Показатель" + Счетчик);
		Таблица.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПерерасчетаПустаяСтруктура() Экспорт
	
	ДанныеПерерасчета = Новый Структура(
		"НачисленияПерерасчет,
		|ПособияПерерасчет,
		|ТаблицаСотрудников,
		|ТаблицаУдержаний");
	
	ДанныеПерерасчета.НачисленияПерерасчет = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	ДанныеПерерасчета.ПособияПерерасчет = РасчетЗарплатыРасширенный.ПустаяТаблицаПособия(Истина);
	
	ДанныеПерерасчета.ТаблицаСотрудников = Новый ТаблицаЗначений;
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеПерерасчета.ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ДанныеПерерасчета.ТаблицаУдержаний = ДанныеПерерасчета.ТаблицаСотрудников.Скопировать();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета);
	КонецЕсли;
	
	Возврат ДанныеПерерасчета;
	
КонецФункции

Процедура УстановитьОтборыПерерасчетовУдержаний(ДанныеПерерасчета, МенеджерРасчета, Организация, Подразделение, Сотрудники, СотрудникиПериодДействияПерерасчет, МесяцНачисления, РежимДоначисления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	ТаблицаПерерассчитываемыхУдержаний = Новый ТаблицаЗначений;
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаПерерассчитываемыхУдержаний.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	СоздатьВТПерерассчитываемыеУдержанияСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		Организация,
		Подразделение,
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		МесяцНачисления,
		РежимДоначисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетУдержаний.НачалоПериода КАК НачалоПериода,
		|	ПерерасчетУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерасчетУдержаний.Удержание КАК Удержание,
		|	ПерерасчетУдержаний.ДокументОснование КАК ДокументОснование,
		|	ПерерасчетУдержаний.Сотрудник
		|ИЗ
		|	ВТПерерассчитываемыеУдержанияСотрудников КАК ПерерасчетУдержаний
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода,
		|	ФизическоеЛицо,
		|	Удержание,
		|	ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НачалоПериода") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Удержание") Цикл
				
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					
					НоваяСтрока = ТаблицаПерерассчитываемыхУдержаний.Добавить();
					НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
					НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					НоваяСтрока.Удержание = Выборка.Удержание;
					НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
					НоваяСтрока.ДатаНачала = Выборка.НачалоПериода;
					НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаНачала);
					
					МенеджерРасчета.ДобавитьОтборПерерасчетовУдержаний(Выборка.ФизическоеЛицо, Выборка.НачалоПериода, Выборка.Удержание, Выборка.ДокументОснование);
					
					Пока Выборка.Следующий() Цикл
						
						НоваяСтрока = ДанныеПерерасчета.ТаблицаУдержаний.Добавить();
						НоваяСтрока.Сотрудник = Выборка.Сотрудник;
						НоваяСтрока.ДатаНачала = Выборка.НачалоПериода;
						НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаНачала);
						НоваяСтрока.ПериодПерерасчета = Истина;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаПерерассчитываемыхУдержаний.Количество() > 0 Тогда
		МенеджерРасчета.ДополнительныеСвойства.Вставить("ТаблицаПерерассчитываемыхУдержаний", ТаблицаПерерассчитываемыхУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборыПерерасчетовНачислений(МенеджерРасчета, МенеджерВременныхТаблиц)
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтборов.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаОтборов.Колонки.Добавить("Начисления", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	ВТСторнируемыеРегистраторыНачисленийИЛьгот КАК СторнируемыеРегистраторы
		|ГДЕ
		|	СторнируемыеРегистраторы.ПерерасчетНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ИсключаемыеКатегорииНачислений = Новый Массив;
		ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьИсключаемыеКатегорииКатегориямиЛьгот(ИсключаемыеКатегорииНачислений);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИсключаемыеКатегорииНачислений", ИсключаемыеКатегорииНачислений);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Ссылка
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК Начисления
			|ГДЕ
			|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ИсключаемыеКатегорииНачислений)";
		
		СписокНачислений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если СписокНачислений.Количество() > 0 Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаОтборов.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ПериодДействия = Выборка.ПериодДействия;
				НоваяСтрока.Начисления = СписокНачислений;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьОтборПерерасчетовНачисленийЛьготами(ТаблицаОтборов, МенеджерРасчета, Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Для каждого СтрокаТаблицыОтборов Из ТаблицаОтборов Цикл
		МенеджерРасчета.ДобавитьОтборПерерасчетовНачислений(СтрокаТаблицыОтборов.Сотрудник, СтрокаТаблицыОтборов.ПериодДействия, СтрокаТаблицыОтборов.Начисления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБазовыйПериод(СтрокаПриемник, СтрокаИсточник)
	
	ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаИсточник.Начисление);
	Если ИнформацияОНачислении.ТребуетсяРасчетБазы
		И ИнформацияОНачислении.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
		
		СтрокаПриемник.НачалоБазовогоПериода = СтрокаИсточник.ДатаНачала;
		СтрокаПриемник.ОкончаниеБазовогоПериода = СтрокаИсточник.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределения(СтрокаСторноПерерасчет, ТаблицаРаспределения, Ссылка, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределения = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределения.Количество() > 0 Тогда
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			НоваяСтрока = СтрокаСторноПерерасчет.РаспределениеПоСтатьям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			НоваяСтрока.Результат = -НоваяСтрока.Результат;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаСторноПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета);
	
	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
			
			НоваяСтрока = СтрокаСторноПерерасчет.ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
			НоваяСтрока.Результат = -НоваяСтрока.Результат;
			НоваяСтрока.Показатели = Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
			
			Если ЗначениеЗаполнено(СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей) Тогда
				
				Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
				Для ИндексПоказателя = 1 По Показатели.Количество() - 1 Цикл
					
					СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель",
						Ссылка, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей,
						Показатели[ИндексПоказателя]);
					
					СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоказателей.Количество() > 0  Тогда
						
						НоваяСтрокаПоказателей = НоваяСтрока.Показатели.Добавить();
						НоваяСтрокаПоказателей.Показатель = СтрокиПоказателей[0].Показатель;
						НоваяСтрокаПоказателей.Значение = СтрокиПоказателей[0].Значение;
						
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказатели(СтрокаСторноПерерасчет, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета)
	
	НомерПоказателя = 1;
	ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаСторноПерерасчет.Начисление);
	Для каждого ОписаниеПоказателя Из ИнформацияОНачислении.Показатели Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель", Ссылка, ИдентификаторСтрокиВидаРасчета, ОписаниеПоказателя.Показатель);
		СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПоказателей.Количество() > 0  Тогда
			
			НоваяСтрока = СтрокаСторноПерерасчет.Показатели.Добавить();
			НоваяСтрока.Показатель = ОписаниеПоказателя.Показатель;
			НоваяСтрока.Значение = СтрокиПоказателей[0].Значение;
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтрокиВидаРасчета;
			
			СтрокаСторноПерерасчет["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель;
			СтрокаСторноПерерасчет["Значение" + НомерПоказателя] = СтрокиПоказателей[0].Значение;
			
		КонецЕсли;
		
		НомерПоказателя = НомерПоказателя + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот()
	
	ИменаРегистров = Новый Массив;
	
	ИменаРегистров.Добавить("ПлановыеНачисления");
	ИменаРегистров.Добавить("ПрименениеПлановыхНачислений");
	ИменаРегистров.Добавить("ВытесняемоеПлановоеВремяСотрудников");
	ИменаРегистров.Добавить("ДанныеИндивидуальныхГрафиковСотрудников");
	ИменаРегистров.Добавить("ДанныеОперативногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ДанныеТабельногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ДанныеСводногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ВыполненныеРаботыСотрудников");
	ИменаРегистров.Добавить("УсловияОплатыОтпускаПоУходуЗаРебенком");
	ИменаРегистров.Добавить("ГрафикРаботыСотрудников");
	ИменаРегистров.Добавить("КадроваяИсторияСотрудников");
	
	Возврат ИменаРегистров;
	
КонецФункции

Функция ИменаРегистровИнициирующихПерерасчетыНачисленийЛьготУдержаний()
	
	ИменаРегистров = Новый Массив;
	
	ИменаРегистров.Добавить("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
	ИменаРегистров.Добавить("ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников");
	ИменаРегистров.Добавить("ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников");
	
	Возврат ИменаРегистров;
	
КонецФункции

Функция ИменаРегистровИнициирующихПерерасчетыУдержаний()
	
	ИменаРегистров = Новый Массив;
	
	ИменаРегистров.Добавить("ПлановыеУдержания");
	ИменаРегистров.Добавить("УсловияУдержанияПоИсполнительномуДокументу");
	
	Возврат ИменаРегистров;
	
КонецФункции

Функция ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор, ИменаРегистровИнициаторов = Неопределено)
	
	РегистрыРегистратора = Новый Массив;
	
	Если ИменаРегистровИнициаторов = Неопределено Тогда
		
		ИменаРегистровИнициаторов = ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаРегистровИнициаторов, ИменаРегистровИнициирующихПерерасчетыНачисленийЛьготУдержаний());
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаРегистровИнициаторов, ИменаРегистровИнициирующихПерерасчетыУдержаний());
		
	КонецЕсли;
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если МетаданныеРегистратора.Движения.Содержит(МетаданныеРегистра) Тогда
			РегистрыРегистратора.Добавить(ИмяРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РегистрыРегистратора;
	
КонецФункции

Функция ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения, ИменаРегистровИнициаторов = Неопределено)
	
	РегистрыРегистратора = Новый Массив;
	
	Если ИменаРегистровИнициаторов = Неопределено Тогда
		
		ИменаРегистровИнициаторов = ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаРегистровИнициаторов, ИменаРегистровИнициирующихПерерасчетыНачисленийИЛьгот());
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаРегистровИнициаторов, ИменаРегистровИнициирующихПерерасчетыУдержаний());
		
	КонецЕсли;
	
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
		Если ТипЗнч(Движения) = Тип("Структура") Тогда
			Если Движения.Свойство(ИмяРегистра) Тогда
				РегистрыРегистратора.Добавить(ИмяРегистра);
			КонецЕсли;
		Иначе
			Если Движения.Найти(ИмяРегистра) <> Неопределено Тогда
				РегистрыРегистратора.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрыРегистратора;
	
КонецФункции

Функция ИменаПроверяемыхРесурсовРегистровИнициирующихПерерасчеты(Знач ИмяРегистра)
	
	ИменаРесурсов = Неопределено;
	Если ВРег(ИмяРегистра) = "КадроваяИсторияСотрудников" Тогда
		
		ИменаРесурсов = Новый Соответствие;
		ИменаРесурсов.Вставить("КоличествоСтавок", Истина);
		
	КонецЕсли;
	
	Возврат ИменаРесурсов;
	
КонецФункции

Процедура СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТДвиженияРегистратора = Неопределено, ИсключатьНеИзмененные = Ложь, НаборЗаписей = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ЕстьПолеОрганизация = Ложь;
	ЕстьПолеФизическоеЛицо = Ложь;
	
	Если ИсключатьНеИзмененные
		И (ИмяРегистра = "ПлановыеНачисления"
			ИЛИ ИмяРегистра = "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников") Тогда
			
		ИсключатьНеИзмененныеЗаписи = Истина;
		
	Иначе
		ИсключатьНеИзмененныеЗаписи = Ложь;
	КонецЕсли;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений"
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.ПериодДействия КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
		
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда 
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр.ДействуетДо КАК ДействуетДо";
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		ИначеЕсли Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
			ЕстьПолеФизическоеЛицо = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		ИначеЕсли Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
			ЕстьПолеФизическоеЛицо = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			Если ИмяРегистра = "ПлановыеНачисления" И ИмяПоля = "Размер" Тогда
				
				Запрос.Текст = Запрос.Текст + ",
					|	ВЫБОР
					|		КОГДА Регистр.Начисление.Рассчитывается
					|			ТОГДА 0
					|		ИНАЧЕ Регистр.Размер
					|	КОНЕЦ КАК Размер";
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + ",
					|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			КонецЕсли;
			
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			ИначеЕсли Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
				ЕстьПолеФизическоеЛицо = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		ИначеЕсли Не ЕстьПолеФизическоеЛицо И ИмяПоля = "ФизическоеЛицо" Тогда
			ЕстьПолеФизическоеЛицо = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПолеОрганизация Тогда
		
		Запрос.Текст = Запрос.Текст + ",
			|	&Организация КАК Организация";
		
	КонецЕсли;
	
	Если Не ЕстьПолеФизическоеЛицо Тогда
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ВТПерерасчет" + ИмяРегистра + "
		|	ИЗ " + ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра + " КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &Регистратор";
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений"
		И ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Регистр.ДействуетДо КАК Период,
			|	Регистр.Регистратор КАК Регистратор,
			|	Регистр.ДействуетДо КАК ДействуетДо";
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			
			Если ИмяРегистра = "ПлановыеНачисления" И ИмяПоля = "Размер" Тогда
				
				Запрос.Текст = Запрос.Текст + ",
					|	ВЫБОР
					|		КОГДА Регистр.Начисление.Рассчитывается
					|			ТОГДА 0
					|		ИНАЧЕ Регистр.Размер
					|	КОНЕЦ КАК Размер";
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + ",
					|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + "ПоОкончании КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Если Не ЕстьПолеОрганизация Тогда
			
			Запрос.Текст = Запрос.Текст + ",
				|	&Организация КАК Организация";
			
		КонецЕсли;
		
		Если Не ЕстьПолеФизическоеЛицо Тогда
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
			|	ИЗ " + ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра + " КАК Регистр
			|ГДЕ
			|	Регистр.Регистратор = &Регистратор
			|	И Регистр.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)";
		
	КонецЕсли;
	
	Если НаборЗаписей <> Неопределено Тогда
		
		ИмяПараметра = ОписаниеРегистра.ТипРегистра + ИмяРегистра;
		
		Если ОписаниеРегистра.ТипРегистра = "РегистрСведений"
			И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			
			ТекстЗапросаНабораЗаписей =
				"ВЫБРАТЬ
				|	НаборЗаписей.Регистратор КАК Регистратор";
			
		Иначе
			
			ТекстЗапросаНабораЗаписей =
				"ВЫБРАТЬ
				|	НаборЗаписей.Период КАК Период,
				|	&Регистратор КАК Регистратор";
			
		КонецЕсли;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
			ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + ",
				|	НаборЗаписей." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + ",
				|	НаборЗаписей." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
			
			Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
				ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + ",
					|	НаборЗаписей.ДействуетДо КАК ДействуетДо";	
			КонецЕсли;
				
			Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
				
				Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
					ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + ",
						|	НаборЗаписей." + ИмяПоля + " КАК " + ИмяПоля + ",
						|	НаборЗаписей." + ИмяПоля + "ПоОкончании КАК " + ИмяПоля + "ПоОкончании";
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
			ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + ",
				|	НаборЗаписей." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		ТекстЗапросаНабораЗаписей = ТекстЗапросаНабораЗаписей + "
			|ПОМЕСТИТЬ ВТНаборЗаписей" + ИмяПараметра + " ИЗ &" + ИмяПараметра + " КАК НаборЗаписей";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистр.Регистратор = &Регистратор", "(ИСТИНА)");
		
		Запрос.Текст =
			ТекстЗапросаНабораЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "" + ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра, "ВТНаборЗаписей" + ИмяПараметра);
		Запрос.УстановитьПараметр(ИмяПараметра, НаборЗаписей);
		
	КонецЕсли;
	
	Если ИмяВТДвиженияРегистратора <> Неопределено Тогда
		ИмяВременнойТаблицы = ИмяВТДвиженияРегистратора;
	Иначе
		ИмяВременнойТаблицы = "ВТПерерасчет" + ИмяРегистра;
	КонецЕсли;
	
	Если ИсключатьНеИзмененныеЗаписи Тогда
		ИмяВТДвиженийРегистратора = ИмяВременнойТаблицы + "Предварительно";
	Иначе
		ИмяВТДвиженийРегистратора = ИмяВременнойТаблицы;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет" + ИмяРегистра, ИмяВТДвиженийРегистратора);
	Запрос.Выполнить();
	
	Если ИсключатьНеИзмененныеЗаписи Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период";
		
		ИзмеренияФильтра = "";
		ДобавитьЗапятую = Ложь;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
			Если ДобавитьЗапятую Тогда
				ИзмеренияФильтра = ИзмеренияФильтра + ","
			Иначе
				ДобавитьЗапятую = Истина;
			КонецЕсли;
			
			ИзмеренияФильтра = ИзмеренияФильтра + ИмяПоля;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ ВТИзмеренияДаты" + ИмяВТДвиженийРегистратора + "
			|ИЗ " + ИмяВТДвиженийРегистратора + " КАК Регистр";
		
		Запрос.Выполнить();
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты" + ИмяВТДвиженийРегистратора, ИзмеренияФильтра);
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			ИмяРегистра,
			ДанныеДляРегистрацииПерерасчетов,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения,
			ИмяВТДвиженийРегистратора + "СрезПоследних");
		
		УсловияСоединения = "";
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
		
		Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр.ДействуетДо КАК ДействуетДо";
		КонецЕсли;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
				
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
			
			Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
				
				Запрос.Текст = Запрос.Текст + ",
					|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
				Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
					ЕстьПолеОрганизация = Истина;
				КонецЕсли;
				
				УсловияСоединения = УсловияСоединения + Символы.ПС + "
					|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли;
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Если Не ЕстьПолеОрганизация Тогда
			
			Запрос.Текст = Запрос.Текст + ",
				|	&Организация КАК Организация";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ ВТПерерасчет" + ИмяРегистра + "
			|	ИЗ " + ИмяВТДвиженийРегистратора + " КАК Регистр
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТДвиженийРегистратора + "СрезПоследних КАК СрезПоследних
			|		ПО Регистр.Период = СрезПоследних.Период"
			+ УсловияСоединения
			+ "
			|ГДЕ
			|	СрезПоследних.Регистратор ЕСТЬ NULL";
		
		Если ИмяВТДвиженияРегистратора <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет" + ИмяРегистра, ИмяВТДвиженияРегистратора);
		КонецЕсли;
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, ИмяВТСотрудникиПериоды, ИсключаемыйРегистратор = Неопределено, РегистрацияНачалаИлиОкончанияУчета = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПериоды.Сотрудник
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|ГДЕ
		|	СотрудникиПериоды.ПерерасчетНачислений";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	СоздатьВТКонтролируемыеНачисления(Запрос.МенеджерВременныхТаблиц, Организация, "ВТОтобранныеНачисления");
	
	Если РегистрацияНачалаИлиОкончанияУчета Тогда
		
		ТаблицаПоследнихПериодов = Новый ТаблицаЗначений;
		ТаблицаПоследнихПериодов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаПоследнихПериодов.Колонки.Добавить("ПоследнийПериодДействия", Новый ОписаниеТипов("Дата"));
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|ГДЕ
			|	СотрудникиПериоды.ПерерасчетНачислений";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
			
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Начисления.Организация,
				|	Начисления.ПериодДействия КАК ПоследнийПериодДействия
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|ГДЕ
				|	Начисления.Организация = &Организация
				|	И Начисления.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
				|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
				|	И Начисления.ВидРасчета В
				|			(ВЫБРАТЬ
				|				ОтобранныеНачисления.Начисление
				|			ИЗ
				|				ВТОтобранныеНачисления КАК ОтобранныеНачисления)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПоследнийПериодДействия УБЫВ";
			
			ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
			Если ВыборкаПоОрганизации.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПоследнихПериодов.Добавить(), ВыборкаПоОрганизации);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаПоследнихПериодов", ТаблицаПоследнихПериодов);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПоследнихПериодов.Организация,
			|	ТаблицаПоследнихПериодов.ПоследнийПериодДействия
			|ПОМЕСТИТЬ ВТПоследниеПериодыНачислений
			|ИЗ
			|	&ТаблицаПоследнихПериодов КАК ТаблицаПоследнихПериодов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация,
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ПериодДействия,
			|	СотрудникиПериоды.Период,
			|	СотрудникиПериоды.Основание,
			|	СотрудникиПериоды.ПерерасчетНачислений
			|ПОМЕСТИТЬ ВТСотрудникиСПоследнимиПериодами
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеПериодыНачислений КАК ПоследниеПериодыНачислений
			|		ПО СотрудникиПериоды.Организация = ПоследниеПериодыНачислений.Организация
			|ГДЕ
			|	СотрудникиПериоды.ПерерасчетНачислений
			|	И СотрудникиПериоды.ПериодДействия <= ПоследниеПериодыНачислений.ПоследнийПериодДействия
			|	И РАЗНОСТЬДАТ(СотрудникиПериоды.ПериодДействия, ПоследниеПериодыНачислений.ПоследнийПериодДействия, МЕСЯЦ) < 12
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПоследниеПериодыНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация КАК Организация,
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодРегистрации КАК ПериодДействия,
			|	СотрудникиПериоды.Основание КАК Основание,
			|	МАКСИМУМ(Начисления.Регистратор) КАК ДокументНачисления,
			|	СотрудникиПериоды.ПерерасчетНачислений
			|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
			|ИЗ
			|	ВТСотрудникиСПоследнимиПериодами КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО СотрудникиПериоды.Организация = Начисления.Организация
			|			И СотрудникиПериоды.Период <= Начисления.ПериодДействияКонец
			|			И (Начисления.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
			|			И (Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					ОтобранныеНачисления.Начисление
			|				ИЗ
			|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиПериоды.Организация,
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.Основание,
			|	Начисления.ПериодРегистрации,
			|	СотрудникиПериоды.ПерерасчетНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСотрудникиСПоследнимиПериодами";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация КАК Организация,
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодРегистрации КАК ПериодДействия,
			|	СотрудникиПериоды.Основание КАК Основание,
			|	Начисления.Регистратор КАК ДокументНачисления,
			|	СотрудникиПериоды.ПерерасчетНачислений
			|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО СотрудникиПериоды.Организация = Начисления.Организация
			|			И СотрудникиПериоды.Сотрудник = Начисления.Сотрудник
			|			И СотрудникиПериоды.Период <= Начисления.ПериодДействияКонец
			|			И (НЕ Начисления.Регистратор ССЫЛКА Документ.ПереносДанных)
			|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
			|			И (Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					ОтобранныеНачисления.Начисление
			|				ИЗ
			|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
			|ГДЕ
			|	СотрудникиПериоды.ПерерасчетНачислений";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеобходимыеПерерасчеты.Организация,
		|	НеобходимыеПерерасчеты.Сотрудник,
		|	ВЫРАЗИТЬ(НеобходимыеПерерасчеты.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия,
		|	НеобходимыеПерерасчеты.Основание,
		|	НеобходимыеПерерасчеты.ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетЗарплаты.Организация ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетЗарплаты.Организация
		|			И НеобходимыеПерерасчеты.Сотрудник = ПерерасчетЗарплаты.Сотрудник
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетЗарплаты.ПериодДействия
		|			И НеобходимыеПерерасчеты.Основание = ПерерасчетЗарплаты.Основание
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетЗарплаты.ДокументНачисления
		|ГДЕ
		|	НеобходимыеПерерасчеты.Основание <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.СуществующаяЗапись Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"УНИЧТОЖИТЬ ВТОтобранныеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНеобходимыеПерерасчеты";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗарегистрироватьПерерасчетыУдержанийСотрудников(ДанныеДляРегистрацииПерерасчетов, Организация, ИмяВТСотрудникиПериоды, ИсключаемыйРегистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	СоздатьВТКонтролируемыеНачисления(Запрос.МенеджерВременныхТаблиц, Организация, "ВТОтобранныеНачисления");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.ПериодРегистрации КАК ПериодДействия,
		|	СотрудникиПериоды.Удержание КАК Удержание,
		|	СотрудникиПериоды.ДокументОснование КАК ДокументОснование,
		|	СотрудникиПериоды.Основание КАК Основание,
		|	Начисления.Регистратор КАК ДокументНачисления
		|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО СотрудникиПериоды.Организация = Начисления.Организация
		|			И СотрудникиПериоды.ФизическоеЛицо = Начисления.ФизическоеЛицо
		|			И СотрудникиПериоды.Период <= Начисления.ПериодДействияКонец
		|			И (НЕ Начисления.Регистратор ССЫЛКА Документ.ПереносДанных)
		|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|			И (Начисления.ВидРасчета В
		|				(ВЫБРАТЬ
		|					ОтобранныеНачисления.Начисление
		|				ИЗ
		|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеобходимыеПерерасчеты.Организация,
		|	НеобходимыеПерерасчеты.ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия,
		|	НеобходимыеПерерасчеты.Удержание,
		|	НеобходимыеПерерасчеты.ДокументОснование,
		|	НеобходимыеПерерасчеты.Основание,
		|	НеобходимыеПерерасчеты.ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетЗарплаты.Организация ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетУдержаний КАК ПерерасчетЗарплаты
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетЗарплаты.Организация
		|			И НеобходимыеПерерасчеты.ФизическоеЛицо = ПерерасчетЗарплаты.ФизическоеЛицо
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетЗарплаты.ПериодДействия
		|			И НеобходимыеПерерасчеты.Удержание = ПерерасчетЗарплаты.Удержание
		|			И НеобходимыеПерерасчеты.ДокументОснование = ПерерасчетЗарплаты.ДокументОснование
		|			И НеобходимыеПерерасчеты.Основание = ПерерасчетЗарплаты.Основание
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетЗарплаты.ДокументНачисления
		|ГДЕ
		|	НеобходимыеПерерасчеты.ДокументОснование <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.СуществующаяЗапись Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.Удержание.Установить(Выборка.Удержание);
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"УНИЧТОЖИТЬ ВТОтобранныеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНеобходимыеПерерасчеты";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СвернутьНачисленияПерерасчет(НачисленияПерерасчет)
	
	СтрокиКУдалению = Новый Массив;
	КлючТекущейЗаписи = Новый Структура("Сотрудник,Начисление,ДокументОснование,Подразделение,КодВычета,ПериодДействия");
	Для Каждого Колонка Из НачисленияПерерасчет.Колонки Цикл
		Если Лев(Колонка.Имя, 8) = "Значение" Тогда 
			КлючТекущейЗаписи.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из НачисленияПерерасчет Цикл
		Если КлючСтрокиИзменился(КлючТекущейЗаписи, Строка) Тогда
			ТекущаяЗапись = Строка;
			ЗаполнитьЗначенияСвойств(КлючТекущейЗаписи, Строка);
		Иначе
			
			ТекущаяЗапись.Результат = ТекущаяЗапись.Результат + Строка.Результат;
			ТекущаяЗапись.ОтработаноДней = ТекущаяЗапись.ОтработаноДней + Строка.ОтработаноДней;
			ТекущаяЗапись.ОтработаноЧасов = ТекущаяЗапись.ОтработаноЧасов + Строка.ОтработаноЧасов;
			ТекущаяЗапись.ОплаченоДней = ТекущаяЗапись.ОплаченоДней + Строка.ОплаченоДней;
			ТекущаяЗапись.ОплаченоЧасов = ТекущаяЗапись.ОплаченоЧасов + Строка.ОплаченоЧасов;
			ТекущаяЗапись.СуммаВычета = ТекущаяЗапись.СуммаВычета + Строка.СуммаВычета;
			ТекущаяЗапись.ДатаНачала = Мин(ТекущаяЗапись.ДатаНачала, Строка.ДатаНачала);
			ТекущаяЗапись.ДатаОкончания = Макс(ТекущаяЗапись.ДатаОкончания, Строка.ДатаОкончания);
			
			Для Каждого СтрокаРаспределения Из Строка.РаспределениеПоСтатьям Цикл
				
				СтруктураПоиска = Новый Структура("КодСтатьиФинансирования,ОблагаетсяЕНВД,СпособОтраженияЗарплатыВБухучете,СтатьяРасходов,СтатьяФинансирования,Территория");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспределения);
				
				СтрокиРаспределения = ТекущаяЗапись.РаспределениеПоСтатьям.НайтиСтроки(СтруктураПоиска);
				Если СтрокиРаспределения.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяЗапись.РаспределениеПоСтатьям.Добавить(), СтрокаРаспределения);
				Иначе
					СтрокиРаспределения[0].Результат = СтрокиРаспределения[0].Результат + СтрокаРаспределения.Результат;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаРаспределения Из Строка.ТерриторииУсловияТруда Цикл
				
				СтруктураПоиска = Новый Структура("ДоляРаспределения,Территория,УсловияТруда");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспределения);
				
				СтрокиРаспределения = ТекущаяЗапись.ТерриторииУсловияТруда.НайтиСтроки(СтруктураПоиска);
				Если СтрокиРаспределения.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяЗапись.ТерриторииУсловияТруда.Добавить(), СтрокаРаспределения);
				Иначе
					СтрокиРаспределения[0].Результат = СтрокиРаспределения[0].Результат + СтрокаРаспределения.Результат;
					СтрокиРаспределения[0].СуммаВычета = СтрокиРаспределения[0].СуммаВычета + СтрокаРаспределения.СуммаВычета;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиКУдалению.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из НачисленияПерерасчет Цикл
		
		Если СтрокиКУдалению.Найти(Строка) = Неопределено Тогда
			
			Если Строка.Результат = 0
				И Строка.ОтработаноДней = 0
				И Строка.ОтработаноЧасов = 0
				И Строка.ОплаченоДней = 0
				И Строка.ОплаченоЧасов = 0
				И Строка.СуммаВычета = 0 Тогда
				
				СтрокиКУдалению.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НачисленияПерерасчет.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСтрокиИзменился(ЭталонныйКлюч, Строка)
	Для Каждого ЭлементСтруктуры Из ЭталонныйКлюч Цикл
		Если ЭлементСтруктуры.Значение <> Строка[ЭлементСтруктуры.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции


#Область РегистрацияДоначисленийНеПолныхПериодов

Процедура РассчитатьПериодыДоначисленийНеПолныхПериодов(Выборка) Экспорт
	
	ТекущийСотрудник = Неопределено;
	ТекущийПериодДействия = Неопределено;
	ОрганизацияТекущегоСотрудника = Неопределено;
	
	ПериодыДействия = Новый ТаблицаЗначений;
	ПериодыДействия.Колонки.Добавить("ПериодРегистрации");
	ПериодыДействия.Колонки.Добавить("Погашение");
	ПериодыДействия.Колонки.Добавить("ДатаНачала");
	ПериодыДействия.Колонки.Добавить("ДатаОкончания");
	ПериодыДействия.Колонки.Добавить("Регистратор");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сотрудник <> ТекущийСотрудник 
			Или Выборка.ПериодДействия <> ТекущийПериодДействия 
			Или Выборка.Организация <> ОрганизацияТекущегоСотрудника Тогда
			
			Если ТекущийСотрудник <> Неопределено Тогда 
				ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
			КонецЕсли;
			
			ТекущийСотрудник = Выборка.Сотрудник;
			ТекущийПериодДействия = Выборка.ПериодДействия;
			ОрганизацияТекущегоСотрудника = Выборка.Организация;
			
		КонецЕсли;
		
		Период = ПериодыДействия.Добавить();
		Период.Погашение 			= Ложь;
		Период.ПериодРегистрации 	= Выборка.ПериодРегистрации;
		Период.ДатаНачала 			= Выборка.ДатаНачала;
		Период.ДатаОкончания 		= Выборка.ДатаОкончания;
		Период.Регистратор 			= Выборка.Регистратор;
		
		Если Выборка.ДатаНачалаПогашения <> Null Тогда
			
			Период = ПериодыДействия.Добавить();
			Период.Погашение 			= Истина;
			Период.ПериодРегистрации 	= Выборка.ПериодРегистрацииПогашения;
			Период.ДатаНачала 			= Выборка.ДатаНачалаПогашения;
			Период.ДатаОкончания 		= Выборка.ДатаОкончанияПогашения;
			Период.Регистратор 			= Выборка.РегистраторПогашения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийСотрудник <> Неопределено Тогда
		ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДоначисленияНеПолныхПериодов(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия)
	
	ПериодыДоначисления = Новый ТаблицаЗначений;
	ПериодыДоначисления.Колонки.Добавить("Регистратор");
	ПериодыДоначисления.Колонки.Добавить("РегистраторПредставление");
	ПериодыДоначисления.Колонки.Добавить("ВидРасчета");
	ПериодыДоначисления.Колонки.Добавить("ДатаНачала");
	ПериодыДоначисления.Колонки.Добавить("ДатаОкончания");
	
	ПериодыДействия.Сортировать("ПериодРегистрации, Погашение");
	Для Каждого Период Из ПериодыДействия Цикл
		
		Если Период.Погашение Тогда
			УдалитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ДобавитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания, Период.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПериодыДоначисления.Количество() > 0 Тогда
		
		РегистраторыПериодовДоначисления = ОбщегоНазначения.ВыгрузитьКолонку(ПериодыДоначисления, "Регистратор", Истина);
		
		НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(ТекущийСотрудник);
		НаборЗаписей.Отбор.ПериодДействия.Установить(ТекущийПериодДействия);
		НаборЗаписей.Отбор.Организация.Установить(ОрганизацияТекущегоСотрудника);
		НаборЗаписей.Отбор.Доначисление.Установить(Истина);
		НаборЗаписей.Прочитать();
		
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		
		Для Каждого Регистратор Из РегистраторыПериодовДоначисления Цикл
			
			СтрокиРегистратора = ТаблицаНабора.НайтиСтроки(Новый Структура("Основание", Регистратор));
			Для Каждого СтрокаРегистратора Из СтрокиРегистратора Цикл
				ТаблицаНабора.Удалить(СтрокаРегистратора);
			КонецЦикла;
			
			Строка = ТаблицаНабора.Добавить();
			Строка.Организация		= ОрганизацияТекущегоСотрудника;
			Строка.Сотрудник		= ТекущийСотрудник;
			Строка.ФизическоеЛицо	= ТекущийСотрудник.ФизическоеЛицо;
			Строка.ПериодДействия	= ТекущийПериодДействия;
			Строка.Основание		= Регистратор;
			Строка.Доначисление		= Истина;
			
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаНабора);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПериодыДействия.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПериод(Периоды, Начало, Окончание, Регистратор)
	
	НоваяСтрока = Периоды.Добавить();
	НоваяСтрока.Регистратор = Регистратор;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	// обработаем полученные периоды
	Периоды.Сортировать("ДатаНачала");
	ПрошлаяДатаНачала = '0001-01-01';
	ПрошлаяДатаОкончания = '0001-01-01';
	ПрошлыйРегистратор = Неопределено;
	ПрошлаяСтрока = Неопределено;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПериода Из Периоды Цикл
		
		Если СтрокаПериода.ДатаНачала <= ПрошлаяДатаОкончания + 1 И ПрошлыйРегистратор = СтрокаПериода.Регистратор Тогда
			// склеим периоды
			СтрокаПериода.ДатаНачала = Мин(СтрокаПериода.ДатаНачала, ПрошлаяДатаНачала);
			СтрокаПериода.ДатаОкончания = Макс(СтрокаПериода.ДатаОкончания, ПрошлаяДатаОкончания);
			СтрокиКУдалению.Добавить(ПрошлаяСтрока);
		КонецЕсли;
		
		ПрошлаяДатаНачала = СтрокаПериода.ДатаНачала;
		ПрошлаяДатаОкончания = СтрокаПериода.ДатаОкончания;
		ПрошлыйРегистратор = СтрокаПериода.Регистратор;
		ПрошлаяСтрока = СтрокаПериода;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Периоды.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПериод(ПериодыДоначисления, ДатаНачала, ДатаОкончания)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаПериода Из ПериодыДоначисления Цикл
		
		Если ДатаНачала <= СтрокаПериода.ДатаНачала 
			И ДатаОкончания > СтрокаПериода.ДатаНачала 
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			СтрокаПериода.ДатаНачала = ДатаОкончания + 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала 
			И ДатаНачала < СтрокаПериода.ДатаОкончания 
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда 
			
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			// добавим новый период
			НоваяСтрока = ПериодыДоначисления.Добавить();
			НоваяСтрока.ДатаНачала = ДатаОкончания + 1;
			НоваяСтрока.ДатаОкончания = СтрокаПериода.ДатаОкончания;
			НоваяСтрока.Регистратор = СтрокаПериода.Регистратор;
			
			// сократим прежний
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала <= СтрокаПериода.ДатаНачала
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда
			
			СтрокиКУдалению.Добавить(СтрокаПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПериодыДоначисления.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбновленияИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.19";
	Обработчик.Процедура = "РегистрыСведений.ПерерасчетЗарплаты.ПеренестиПериодДействияПерерасчетовНаНачалоМесяца";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.27";
	Обработчик.Процедура = "РегистрыСведений.ПерерасчетЗарплаты.ЗаполнитьДокументыНачисленияПерерасчетовЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.64";
	Обработчик.Процедура = "РегистрыСведений.ПерерасчетЗарплаты.ЗаполнитьФизическоеЛицоВРегистреПерерасчетЗарплаты";
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
