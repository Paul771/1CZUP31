
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
	КонецЕсли;    	
	
	СтруктураВидовУчета.ПроведениеПоВсемУчетам = ВидыУчетов = Неопределено;
			
	Если СтруктураВидовУчета.ПроведениеПоВсемУчетам Тогда
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	Иначе
		МассивВидовУчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВидыУчетов, ",");
		Для Каждого ЭлементМассива Из МассивВидовУчета Цикл
			СтруктураВидовУчета[ЭлементМассива] = Истина;
		КонецЦикла;	
	КонецЕсли;
		
	Если Движения = Неопределено Тогда
		
		Движения = Новый Структура;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			
			СтруктураВидовУчета.МассивРегистров = УчетСреднегоЗаработка.РегистрыСреднегоЗаработка();
								
		КонецЕсли;
					
		ДвиженияМетаданные = ДокументСсылка.Метаданные().Движения;
		
		Для Каждого Движение Из ДвиженияМетаданные Цикл
			
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Движение.ПолноеИмя());
			РегистрНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			РегистрНаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			Если СтруктураВидовУчета.ПроведениеПоВсемУчетам Тогда
				Движения.Вставить(Движение.Имя, РегистрНаборЗаписей);
			Иначе	
				Если СтруктураВидовУчета.МассивРегистров.Найти(Движение) <> Неопределено Тогда 
					Движения.Вставить(Движение.Имя, РегистрНаборЗаписей);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета) Экспорт 
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		
		Для Каждого Движение Из Движения Цикл
			
			Если СтруктураВидовУчета.ПроведениеПоВсемУчетам Тогда
				Движение.Значение.Записать();	
			Иначе
				Если СтруктураВидовУчета.МассивРегистров.Найти(Движение.Значение.Метаданные()) <> Неопределено Тогда 
					Движение.Значение.Записать();			
				КонецЕсли;
			КонецЕсли;
					
		КонецЦикла;   
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗапланированныеКорректировкиДвижений(Движения) Экспорт
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	
	Для Каждого Движение Из Движения Цикл
		
		Набор = ?(ДвиженияВСтруктуре, Движение.Значение, Движение);
		
		Если Набор.ДополнительныеСвойства.Свойство("КорректировкиПоУчетам") Тогда
			Для Каждого ПараметрыКорректировки Из Набор.ДополнительныеСвойства.КорректировкиПоУчетам Цикл
				Модуль = ОбщегоНазначения.ОбщийМодуль(ПараметрыКорректировки.ИмяМодуля);
				Модуль.ВыполнитьКорректировкуДвижений(Набор, ПараметрыКорректировки);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураВидовУчета() Экспорт
	
	СтруктураВидовУчета = Новый Структура;
	СтруктураВидовУчета.Вставить("ДанныеДляРасчетаСреднего", Ложь);
	СтруктураВидовУчета.Вставить("Начисления", Ложь);
	СтруктураВидовУчета.Вставить("УчетНачисленнойЗарплаты", Ложь);
	СтруктураВидовУчета.Вставить("ИсчисленныеСтраховыеВзносы", Ложь);
	СтруктураВидовУчета.Вставить("ОстальныеВидыУчета", Ложь);
	СтруктураВидовУчета.Вставить("ПроведениеПоВсемУчетам", Ложь);
	СтруктураВидовУчета.Вставить("МассивРегистров", Новый Массив);
	                                     
	Возврат СтруктураВидовУчета;
	
КонецФункции

#КонецОбласти

