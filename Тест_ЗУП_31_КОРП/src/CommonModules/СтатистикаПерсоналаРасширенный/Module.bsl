////////////////////////////////////////////////////////////////////////////////
// Подсистема "Статистика персонала".
// Процедуры и функции, предназначенные для обслуживания форм статистической отчетности.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Должности

Процедура ГруппаКатегорииДополнитьФорму(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Видимость",
			Ложь);
		Возврат;
	КонецЕсли;
	
	НастройкиСтатистики = НастройкиСтатистикиПерсонала();
	Если НастройкиСтатистики.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы 
		И ЗначениеЗаполнено(НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Заголовок",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка отчетности %1'"), 
				НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Подсказка",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сведения по численности и оплате труда работников этой должности будут включены в указанную строку отчета по статистическому наблюдению по форме %1'"), 
				НастройкиСтатистики.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы));
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"ТолькоПросмотр",
			Форма.ТолькоПросмотр ИЛИ ТолькоПросмотр);
				
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы",
			"Видимость",
			Ложь);
	КонецЕсли;
	
	ИспользоватьГосударственнуюСлужбу 	= ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу");
	ИспользоватьМуниципальнуюСлужбу		= ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу");
	Если ИспользоватьГосударственнуюСлужбу Или  ИспользоватьМуниципальнуюСлужбу Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов",
			"Видимость",
			Истина);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов",
			"Заголовок",
			?(ИспользоватьГосударственнуюСлужбу,НСтр("ru = 'Строка отчетности работников государственных органов'"),НСтр("ru = 'Строка отчетности работников муниципальных образований'")));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов",
			"Подсказка",
			НСтр("ru = 'Сведения о расходах и численности работников этой должности будут включены в указанную строку отчета по форме 14'")+?(ИспользоватьГосударственнуюСлужбу,"",НСтр("ru = ' МО'")));

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов",
			"ТолькоПросмотр",
			Форма.ТолькоПросмотр ИЛИ ТолькоПросмотр);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов",
			"Видимость",
			Ложь);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжности(Форма, Должность, ЗначениеКопирования = Неопределено) Экспорт	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Должность = Должность;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			Выборка = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Выбрать(Новый Структура("Должность", ЗначениеКопирования));
			Если Выборка.Следующий() Тогда 
				МенеджерЗаписи.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = Выборка.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
	КонецЕсли;

	Если ТипЗнч(Должность) = Тип("СправочникСсылка.Должности") 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Должность = Должность;
		МенеджерЗаписи.Прочитать();
		
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			Выборка = РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.Выбрать(Новый Структура("Должность", ЗначениеКопирования));
			Если Выборка.Следующий() Тогда 
				МенеджерЗаписи.СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов = Выборка.СтрокаОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеДолжности(Форма, Ссылка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу") Тогда
		Возврат;
	КонецЕсли;

	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
		МенеджерЗаписи.Должность = Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Должности") 
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов) Тогда
		МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Форма.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов);
		МенеджерЗаписи.Должность = Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ПриПолученииВнешнихДанныхПозицииШтатногоРасписания(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = ДанныеПозиции.ПозицияШтатногоРасписания; 
	МенеджерЗаписи.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = ДанныеПозиции.КатегорияПерсонала; 

	ЗначениеВДанныеФормы(МенеджерЗаписи, Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
	
КонецПроцедуры

Процедура ПоместитьКатегориюПерсоналаВОписаниеПозиции(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.Вставить("КатегорияПерсонала", Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы);
		
КонецПроцедуры

Функция ТекстЗапросаВТКатегорииПерсоналаПоПозициям(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Позиция,
		|	NULL КАК КатегорияПерсонала
		|ПОМЕСТИТЬ ВТКатегорииПерсоналаПоПозициям";
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КатегорииПерсоналаПоПозициям.Должность КАК Позиция,
			|	КатегорииПерсоналаПоПозициям.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК КатегорияПерсонала
			|ПОМЕСТИТЬ ВТКатегорииПерсоналаПоПозициям
			|ИЗ
			|	РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК КатегорииПерсоналаПоПозициям
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
			|		ПО (КатегорииПерсоналаПоПозициям.Должность = &ИмяПоляПозиция)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляПозиция", "ВсеПозицииНаДатуАктуальности." + ИмяПоляПозиция);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеПозицииНаДатуАктуальности", ИмяВТ);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПередЗаписьюДокументовИзмененияШтатногоРасписания(Объект) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		
		НаборЗаписей = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Должность.Установить(СтрокаПозиции.Позиция);
		НаборЗаписей.Прочитать();
		
		Если ЗначениеЗаполнено(СтрокаПозиции.КатегорияПерсонала) Тогда
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
			Иначе
				Если СтрокаПозиции.КатегорияПерсонала = НаборЗаписей[0].СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы Тогда
					Продолжить;
				КонецЕсли;
				Запись = НаборЗаписей[0];
			КонецЕсли;
			
			Запись.Должность = СтрокаПозиции.Позиция;
			Запись.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = СтрокаПозиции.КатегорияПерсонала;
			
		Иначе
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НаборЗаписей.Удалить(НаборЗаписей[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКатегориюПерсоналаПоДолжности(Форма, Должность) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Должность = Должность;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Должность = Форма.Объект.Ссылка;
		ЗаполнитьЗначенияСвойств(Форма.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы, МенеджерЗаписи, "СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Функции для регламентированной отчетности.

// Функция заполняет выходной параметр ДанныеЧисленности значениями численности сотрудников для 
// переданной организации за переданный период
// Функция рассчитывает численность всех работников, женщин и инвалидов.
// При этом за переданный период считается среднесписочаня численность, 
// а на конец заданного периода - списочная численность.
// см. также КадровыйУчет.СреднесписочнаяЧисленностьРаботающих
// Параметры:
//		Организация		- СправочникСсылка.Организации
//		НачалоПериода	- Дата
//		КонецПериода	- Дата
//		ДанныеЧисленности - структура с численностью (см. СтатистикаПерсонала.ДанныеЧисленности()).
//
Процедура СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ДанныеЧисленности) Экспорт

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", НачалоПериода);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", КонецПериода);
	
	// Получение данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4",
		ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(Организация, "Организация");
	
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЧисленности.ЧисленностьЖенщин = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаЖенщинСписочногоСостава), 0, Окр(Окр(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаЖенщинСписочногоСостава, 5)));
	ДанныеЧисленности.ЧисленностьИнвалидов = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаИнвалидовСписочногоСостава), 0,Окр(Окр(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаИнвалидовСписочногоСостава, 5)));
	ДанныеЧисленности.ЧисленностьРаботников = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава), 0, Окр(Окр(СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава, 5)));
	ДанныеЧисленности.СреднесписочнаяЧисленностьЖенщин = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СредняяЧисленностьЗаПериодЖенщинСписочногоСостава), 0, Окр(Окр(СтрокаОрганизации.СредняяЧисленностьЗаПериодЖенщинСписочногоСостава, 5)));
	ДанныеЧисленности.СреднесписочнаяЧисленностьИнвалидов = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СредняяЧисленностьЗаПериодИнвалидовСписочногоСостава), 0,Окр(Окр(СтрокаОрганизации.СредняяЧисленностьЗаПериодИнвалидовСписочногоСостава, 5)));
	ДанныеЧисленности.СреднесписочнаяЧисленностьРаботников = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СредняяЧисленностьЗаПериодСписочногоСостава), 0, Окр(Окр(СтрокаОрганизации.СредняяЧисленностьЗаПериодСписочногоСостава, 5)));
	
КонецПроцедуры

// П-4

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаП4_2013Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П0001001В1", Истина, Ложь);
	
	ИндексТекущейСтроки = 2;
	
	Пока ИндексТекущейСтроки < 12 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11", Истина, Истина);
		
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_СтатистикаФормаП4_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт

	// Сведения для отчета берутся за последний месяц.
	ПараметрыОтчетаДляЗаполненияЗарплата = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ПараметрыОтчетаДляЗаполненияКадры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	
	// Получение зарплатных данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		ВыводитьКвартальныеПоказатели = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Если ПараметрыОтчетаДляЗаполненияЗарплата.Свойство("СНачалаГода") И ПараметрыОтчетаДляЗаполненияЗарплата.СНачалаГода Тогда
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				
				ЗаполнитьЗначенияПоказателейЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭД, ВыводитьКвартальныеПоказатели);
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				Если ИндексТекущейСтроки = 12 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
					
					Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияПоказателейЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели);
					
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
					
					Если ИндексТекущейСтроки > КоличествоСтрок Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ПустаяСтруктура = Новый Структура();
		ПустаяСтруктура.Вставить("ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("ОтработаноЧасовСНачалаГодаВнешнимиСовместителями", 0);
		ПустаяСтруктура.Вставить("НаименованиеОКВЭД", "");
		ПустаяСтруктура.Вставить("КодОКВЭД", "");
		ПустаяСтруктура.Вставить("НачисленоРаботникамСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("НачисленоВнешнимСовместителям", 0);
		ПустаяСтруктура.Вставить("НачисленоРаботникамПоДоговорамГПХ", 0);
		ПустаяСтруктура.Вставить("НачисленияСоциальногоХарактера", 0);
		Пока ИндексТекущейСтроки <= КоличествоСтрок Цикл
			ЗаполнитьЗначенияПоказателейЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, ПустаяСтруктура, ПустаяСтруктура, Ложь);
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Контейнер.ПолеТабличногоДокументаФормаОтчета.П0001001В1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчетаДляЗаполненияКадры.Организация, "КодОКВЭД");
		
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Если ПараметрыОтчетаДляЗаполненияКадры.Свойство("СНачалаГода") И ПараметрыОтчетаДляЗаполненияКадры.СНачалаГода Тогда
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				
				ЗаполнитьЗначенияПоказателейКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭД, ВыводитьКвартальныеПоказатели);
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				
				Если ИндексТекущейСтроки = 12 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
				Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
					
					Если СтрокаОКВЭДПериод.Месяц <> ПараметрыОтчетаДляЗаполненияКадры.ДатаНачалаПериодаОтчета Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияПоказателейКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели);
					
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
					
					Если ИндексТекущейСтроки > КоличествоСтрок Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ПустаяСтруктура = Новый Структура();
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодСписочногоСостава", 0);
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодВнешнихСовместителей", 0);
		ПустаяСтруктура.Вставить("СредняяЧисленностьЗаПериодДоговорников", 0);
		ПустаяСтруктура.Вставить("НаименованиеОКВЭД", "");
		ПустаяСтруктура.Вставить("КодОКВЭД", "");
		Пока ИндексТекущейСтроки <= КоличествоСтрок Цикл
			ЗаполнитьЗначенияПоказателейКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, ПустаяСтруктура, ПустаяСтруктура, Ложь);
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_СтатистикаФормаП4_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	// Подготовка настроек вывода данных отчета.
	ОписаниеПоказателейОтчета = ОписаниеПоказателейОтчета_СтатистикаФормаП4_2017Кв1();
	
	// Получение данных отчета.
	ДанныеОтчета = ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета);
	
	// Вывод данных отчета.
	СтруктураПоказателей = Контейнер.ПолеТабличногоДокументаФормаОтчета;
	Количество = ДанныеОтчета.Количество();
	Для Номер = 1 По 10 Цикл // Выводится 10 строк.
		Если Номер > Количество Тогда
			СтрокаТаблицы = ДанныеОтчета.Добавить(); // Если данных нет, то заполняются пустые значения.
		Иначе
			СтрокаТаблицы = ДанныеОтчета[Номер-1];
		КонецЕсли;
		ПредставлениеНомера = Формат(Номер+1, "ЧЦ=2; ЧВН="); // Нумерация начинается с "02".
		
		Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
			Значение = СтрокаТаблицы[ОписаниеПоказателя.ИмяКолоноки];
			ПутьКДанным  = СтрЗаменить(ОписаниеПоказателя.ПутьКДанным,  "##", ПредставлениеНомера);
			ПутьКФормату = СтрЗаменить(ОписаниеПоказателя.ПутьКФормату, "##", ПредставлениеНомера);
			СтруктураПоказателей[ПутьКДанным] = Значение;
			Если ЗначениеЗаполнено(ПутьКФормату) И Значение = 0 И СтруктураПоказателей.Свойство(ПутьКФормату) Тогда
				СтруктураПоказателей[ПутьКФормату] = "ЧН=-";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// П-4 (НЗ)

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаП4НЗ_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКод4", Истина, Ложь);
	
	Для ИндексТекущейСтроки = 1 По 22 Цикл
		Если СтрНайти("4,11,18,19", Строка(ИндексТекущейСтроки)) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти("1,14,21,22", Строка(ИндексТекущейСтроки)) > 0 Тогда
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Ложь);
		Иначе
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01", Истина, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_СтатистикаФормаП4НЗ_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Очистим ячейки
	Для ИндексТекущейСтроки = 1 По 22 Цикл
		Если ИндексТекущейСтроки = 4 Или ИндексТекущейСтроки = 11 Или ИндексТекущейСтроки = 18 Или ИндексТекущейСтроки = 19 Тогда
			Продолжить;
		КонецЕсли;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "01"] = 0;
	КонецЦикла;
	
	ПараметрыОтчетаДляЗаполнения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ("РегламентированныйОтчетСтатистикаФормаП4НЗ", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	КоличествоСтавокНаКонецПериода = 0;
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000201"] = СтрокаОрганизации.ЧисленностьРаботавшихНеполноеРабочееВремя;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000301"] = СтрокаОрганизации.ЧисленностьСотрудниковВПростое;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000501"] = СтрокаОрганизации.ЧисленностьСотрудниковВОтпускеБезОплаты;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000701"] = СтрокаОрганизации.ЧисленностьПринятыхВПериодеНаНовуюПозицию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000901"] = СтрокаОрганизации.ЧисленностьУволенныхПоСоглашениюСторон;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001001"] = СтрокаОрганизации.ЧисленностьУволенныхВСвязиССокращением;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001201"] = СтрокаОрганизации.ЧисленностьУволенныхПоСобственномуЖеланию;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001601"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоПолутораЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001701"] = СтрокаОрганизации.ЧисленностьЖенщинВОтпускеДоТрехЛет;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001002001"] = СтрокаОрганизации.ЧисленностьРаботавшихВахтовымМетодом;
		КоличествоСтавокНаКонецПериода = СтрокаОрганизации.КоличествоСтавок;
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ПараметрыОтчета.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000601"] = СтрокаОрганизации.ПринятоСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001000801"] = СтрокаОрганизации.УволеноСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001301"] = СтрокаОрганизации.ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001401"] = КоличествоСтавокНаКонецПериода - Контейнер.ПолеТабличногоДокументаФормаОтчета["П0001001301"];
	КонецЕсли;
	
КонецПроцедуры

//1-Т (ГМС)

Процедура ОписаниеПоказателей_СтатистикаФорма1ТГМС_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	
	Для ИндексТекущейСтроки = 1 По 4 Цикл
	
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Истина, Истина);	
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "07", Истина, Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗначенияПоказателей_СтатистикаФорма1ТГМС_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Сведения для отчета берутся за последний месяц.
	ПараметрыОтчетаДляЗаполнения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("НомерСтроки1ТГМС", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ЧисленностьНаКонецПериодаСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("НачисленияСоциальногоХарактера", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("НачисленоРаботникамСписочногоСостава", Новый ОписаниеТипов("Число"));
	
	ВсегоСтрок = КоличествоЗаполняемыхСтрок("РегламентированныйОтчетСтатистикаФорма1ТГМС");
	// Формируем пустую таблицу чтобы очистить данные предыдущего заполнения
	Для Сч = 1 По ВсегоСтрок Цикл
		НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		НоваяСтрока.НомерСтроки1ТГМС = Сч;
	КонецЦикла;
	
	СоответствиеПользовательскихПолей = Новый Соответствие;
		
	// Получение зарплатных данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФорма1ТГМС", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета, СоответствиеПользовательскихПолей);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета
		Для Каждого СтрокаКатегории Из СтрокаОрганизации.Строки Цикл				
			НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]], "НомерСтроки1ТГМС");
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
				НоваяСтрока.НомерСтроки1ТГМС = СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКатегории);				
		КонецЦикла;
	КонецЕсли;
		
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФорма1ТГМС", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета, СоответствиеПользовательскихПолей);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета		
		Для Каждого СтрокаКатегории Из СтрокаОрганизации.Строки Цикл			
			НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]], "НомерСтроки1ТГМС");
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
				НоваяСтрока.НомерСтроки1ТГМС = СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКатегории);			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС("РегламентированныйОтчетСтатистикаФорма1ТГМС", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета, СоответствиеПользовательскихПолей);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		// Заполнение отчета		
		Для Каждого СтрокаКатегории Из СтрокаОрганизации.Строки Цикл			
			НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]], "НомерСтроки1ТГМС");
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
				НоваяСтрока.НомерСтроки1ТГМС = СтрокаКатегории[СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"]];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКатегории);			
		КонецЦикла;
	КонецЕсли;	
	
	Для Каждого СтрокаКатегории Из ТаблицаДанныхОтчета Цикл
		ЗаполнитьЗначенияПоказателей_СтатистикаФорма1ТГМС_2015Кв1(Контейнер, СтрокаКатегории.НомерСтроки1ТГМС, СтрокаКатегории);
	КонецЦикла;
		

КонецПроцедуры

// ЗП-хх

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаЗПЗдрав_2013Кв1(ПоказателиОтчета) Экспорт
	
	ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПЗдрав_2013")	
	
КонецПроцедуры 

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаЗПКультура_2013Кв1(ПоказателиОтчета) Экспорт
	
	ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПКультура_2013")	
	
КонецПроцедуры 

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаЗПНаука_2013Кв1(ПоказателиОтчета) Экспорт
	
	ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПНаука_2013")	
	
КонецПроцедуры 

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаЗПОбразование_2013Кв1(ПоказателиОтчета) Экспорт
	
	ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПОбразование_2013")	
	
КонецПроцедуры 

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФормаЗПСоц_2013Кв1(ПоказателиОтчета) Экспорт
	
	ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, "РегламентированныйОтчетЗПСоц_2013")	
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПЗдрав_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПЗдрав_2013", 2013);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПКультура_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПКультура_2013", 2013);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПНаука_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПНаука_2013", 2013);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПОбразование_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПОбразование_2013", 2013);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПСоц_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПСоц_2013", 2013);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПЗдрав_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПЗдрав_2013", 2015);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПКультура_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПКультура_2013", 2015);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПНаука_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПНаука_2013", 2015);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПОбразование_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПОбразование_2013", 2015);
	
КонецПроцедуры 

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_ЗПСоц_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, "РегламентированныйОтчетЗПСоц_2013", 2015);
	
КонецПроцедуры 

// 57-Т

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФорма57Т_2017Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010203", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010204", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П010304", Истина, Ложь);
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030503", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030603", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030703", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П030803", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 64 Цикл
		
		Для НомерКолонки = 2 По 13 Цикл
			
			Если НомерКолонки = 8 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П02"
				 + Формат(НомерКолонки, "ЧЦ=2; ЧВН=")
				 + "_" + Формат(НомерСтрокиОтчета, "ЧЦ=2"), Истина, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_СтатистикаФорма57Т_2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	СоответствиеПользовательскихПолей = Новый Соответствие;
	
	ПараметрыОтчетаДляЗаполненияКадры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.ДатаНачалаПериодаОтчета = '20171001000000';
	ПараметрыОтчетаДляЗаполненияКадры.ДатаКонцаПериодаОтчета = '20171031235959';
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета, СоответствиеПользовательскихПолей);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010203"] = СтрокаОрганизации.СредняяЧисленностьМужчинСписочногоСостава;
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П010303"] = СтрокаОрганизации.СредняяЧисленностьЖенщинСписочногоСостава;
		
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), СтрокаОрганизации);
		
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П030503"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "1")).Количество();
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П030603"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "2")).Количество();
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П030703"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "3")).Количество();
		Контейнер.ПолеТабличногоДокументаФормаОтчета["П030803"] = ВсеСотрудникиПоКатегориям.НайтиСтроки(Новый Структура("Колонка13", "4")).Количество();
		
		Форма57ТРаздел2Сотрудники = СотрудникиДляЗаполненияРаздела2Формы57Т(ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета), ВсеСотрудникиПоКатегориям);
		
		// Получение зарплатных данных
		ДанныеОтчета = Новый ДеревоЗначений;
		
		СоответствиеПользовательскихПолей = Новый Соответствие;
		
		ПараметрыОтчетаДляЗаполненияЗарплата = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = '20171001000000';
		ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = '20171031235959';
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
		ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета, СоответствиеПользовательскихПолей);
		
		Если ДанныеОтчета.Строки.Количество() > 0 Тогда
			
			СтрокаОрганизации = ДанныеОтчета.Строки[0];
			
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П010204"] = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("Зарплата мужчин")];
			Контейнер.ПолеТабличногоДокументаФормаОтчета["П010304"] = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("Зарплата женщин")];
			
			УчтенаКвартальнаяПремия = Ложь;
			ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, СтрокаОрганизации, УчтенаКвартальнаяПремия);
			
			Если Не УчтенаКвартальнаяПремия Тогда
			
				ДанныеОтчета = Новый ДеревоЗначений;
				
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета - 1;
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета, -3);
				ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета, СоответствиеПользовательскихПолей);
				
				Если ДанныеОтчета.Строки.Количество() > 0 Тогда
					
					СтрокаОрганизации = ДанныеОтчета.Строки[0];
					ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, СтрокаОрганизации, УчтенаКвартальнаяПремия, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиОтчета = 1;
		Для Каждого СтрокаФормы Из Форма57ТРаздел2Сотрудники Цикл
			
			Для НомерКолонки = 2 По 13 Цикл
				
				ИмяКолонки = "Колонка" + НомерКолонки;
				Если НомерКолонки = 8 Тогда
					Продолжить;
				ИначеЕсли Форма57ТРаздел2Сотрудники.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
					ЗначениеЯчейки = Неопределено;
				Иначе
					ЗначениеЯчейки = СтрокаФормы[ИмяКолонки];
				КонецЕсли;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П02"
					 + Формат(НомерКолонки, "ЧЦ=2; ЧВН=")
					 + "_" + Формат(НомерСтрокиОтчета, "ЧЦ=2")] = ЗначениеЯчейки;
				
			КонецЦикла;
			
			НомерСтрокиОтчета = НомерСтрокиОтчета + 1;
			
		КонецЦикла;
		
		Для НомерОчищаемойСтроки = НомерСтрокиОтчета По 64 Цикл
			
			Для НомерКолонки = 2 По 13 Цикл
				
				Если НомерКолонки = 8 Тогда
					Продолжить;
				КонецЕсли;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П02"
					 + Формат(НомерКолонки, "ЧЦ=2; ЧВН=")
					 + "_" + Формат(НомерОчищаемойСтроки, "ЧЦ=2")] = Неопределено;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Форма 1

// Получает показатели, которые могут быть заполнены при заполнении отчета.
// 
// Параметры:
//  ПоказателиОтчета - структура
//
Процедура ОписаниеПоказателей_СтатистикаФорма1_2016Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "ОргКодОКПО", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач1", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач2", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач3", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "КодЗнач4", Истина, Ложь);
	
	Для НомерСтрокиОтчета = 1 По 21 Цикл
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03", Истина, Ложь);
		
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П01"
			 + Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04", Истина, Ложь);
		
	КонецЦикла;
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012303", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012403", Истина, Ложь);
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П012503", Истина, Ложь);
	
КонецПроцедуры

// Заполняет показатели отчета.
// 
// Параметры:
//  ПараметрыОтчета - структура.
//  Контейнер - структура - содержит все показатели отчета и их значения.
//
Процедура ЗначенияПоказателей_СтатистикаФорма1_2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	// Получение Кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	
	СоответствиеПользовательскихПолей = Новый Соответствие;
	
	ПараметрыОтчетаДляЗаполненияКадры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаОтчета", ПараметрыОтчетаДляЗаполненияКадры.мДатаНачалаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", ПараметрыОтчетаДляЗаполненияКадры.мДатаКонцаПериодаОтчета);
	ПараметрыОтчетаДляЗаполненияКадры.Вставить("ТолькоОсновноеМестоРаботы", Истина);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета, СоответствиеПользовательскихПолей);
	
	Если ДанныеОтчета.Строки.Количество() > 0 Тогда
		
		СтрокаОрганизации = ДанныеОтчета.Строки[0];
		ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(
			ПараметрыОтчета.Организация, НачалоМесяца(ПараметрыОтчетаДляЗаполненияКадры.ДатаКонцаПериодаОтчета), СтрокаОрганизации, Ложь);
		
		// Получение зарплатных данных
		ДанныеОтчета = Новый ДеревоЗначений;
		
		СоответствиеПользовательскихПолей = Новый Соответствие;
		
		ПараметрыОтчетаДляЗаполненияЗарплата = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", ПараметрыОтчетаДляЗаполненияЗарплата.мДатаНачалаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", ПараметрыОтчетаДляЗаполненияЗарплата.мДатаКонцаПериодаОтчета);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ТолькоОсновноеМестоРаботы", Истина);
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ОтборСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(ВсеСотрудникиПоКатегориям, "Сотрудник"));
		ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ИсключатьГодовыеПремии", Истина);
		ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета, СоответствиеПользовательскихПолей);
		
		Если ДанныеОтчета.Строки.Количество() > 0 Тогда
			
			ТаблицаСотрудников = Новый ТаблицаЗначений;
			ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСотрудников.Колонки.Добавить("Начислено", Новый ОписаниеТипов("Число"));
			
			СтрокаОрганизации = ДанныеОтчета.Строки[0];
			
			УчтенаКвартальнаяПремия = Ложь;
			ДополнитьТаблицуСотрудникамиСЗаработокомФорма1(ТаблицаСотрудников, СтрокаОрганизации, УчтенаКвартальнаяПремия);
			
			Если Не УчтенаКвартальнаяПремия Тогда
				
				ДанныеОтчета = Новый ДеревоЗначений;
				
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаКонцаПериодаОтчета = ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета - 1;
				ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета = ДобавитьМесяц(ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета, -3);
				ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета, СоответствиеПользовательскихПолей);
				
				Если ДанныеОтчета.Строки.Количество() > 0 Тогда
					
					СтрокаОрганизации = ДанныеОтчета.Строки[0];
					ДополнитьТаблицуСотрудникамиСЗаработокомФорма1(ТаблицаСотрудников, СтрокаОрганизации, УчтенаКвартальнаяПремия, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТаблицаСотрудников.Количество() > 0 Тогда
				
				ТаблицаСотрудников.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("Число"));
				ТаблицаСотрудников.Колонки.Добавить("НомерСтрокиОтчета", Новый ОписаниеТипов("Число"));
				
				П012303 = 0;
				
				ВесаСтрок = Новый Массив;
				ВесаСтрок.Добавить(7500);
				ВесаСтрок.Добавить(9000);
				ВесаСтрок.Добавить(10600);
				ВесаСтрок.Добавить(12200);
				ВесаСтрок.Добавить(13800);
				ВесаСтрок.Добавить(15400);
				ВесаСтрок.Добавить(17000);
				ВесаСтрок.Добавить(18600);
				ВесаСтрок.Добавить(21800);
				ВесаСтрок.Добавить(25000);
				ВесаСтрок.Добавить(30000);
				ВесаСтрок.Добавить(35000);
				ВесаСтрок.Добавить(40000);
				ВесаСтрок.Добавить(50000);
				ВесаСтрок.Добавить(60000);
				ВесаСтрок.Добавить(75000);
				ВесаСтрок.Добавить(100000);
				ВесаСтрок.Добавить(250000);
				ВесаСтрок.Добавить(500000);
				ВесаСтрок.Добавить(1000000);
				
				Для Каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
					
					СтрокаСотрудника.Счетчик = 1;
					Начислено = Цел(СтрокаСотрудника.Начислено);
					
					Для НомерСтроки = 1 По ВесаСтрок.Количество() Цикл
						
						Если Начислено <= ВесаСтрок[НомерСтроки - 1] Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаСотрудника.НомерСтрокиОтчета = НомерСтроки;
					
					Если Начислено = 7500 Тогда
						П012303 = П012303 + 1;
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаСотрудников.Свернуть("НомерСтрокиОтчета","Счетчик,Начислено");
				Для НомерСтрокиОтчета = 1 По 21 Цикл
					
					СтрокаОтчета = ТаблицаСотрудников.Найти(НомерСтрокиОтчета, "НомерСтрокиОтчета");
					Если СтрокаОтчета = Неопределено Тогда
						Счетчик = 0;
						Начислено = 0;
					Иначе
						Счетчик = СтрокаОтчета.Счетчик;
						Начислено = СтрокаОтчета.Начислено;
					КонецЕсли;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "03"] = Счетчик;
					
					Контейнер.ПолеТабличногоДокументаФормаОтчета["П01"
						+ Формат(НомерСтрокиОтчета, "ЧЦ=2; ЧВН=") + "04"] = Начислено;
					
				КонецЦикла;
				
				Контейнер.ПолеТабличногоДокументаФормаОтчета["П012303"] = П012303;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	П012403 = 0;
	П012503 = 0;
	
	ПараметрыОтчетаДляЗаполненияЗарплата = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаНачалаПериодаОтчета", '20170401000000');
	ПараметрыОтчетаДляЗаполненияЗарплата.Вставить("ДатаКонцаПериодаОтчета", '20170430235959');
	ПараметрыОтчетаДляЗаполненияКадры = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчетаДляЗаполненияЗарплата);
	
	// Получение зарплатных данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияЗарплата, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияЗарплата.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОКВЭДПериод Из СтрокаОКВЭД.Строки Цикл
				
				Если СтрокаОКВЭДПериод.МесяцНачисления <> ПараметрыОтчетаДляЗаполненияЗарплата.ДатаНачалаПериодаОтчета Тогда
					Продолжить;
				КонецЕсли;
				
				П012503 = П012503 + СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава;
				
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				Если ИндексТекущейСтроки > КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получение кадровых данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполненияКадры.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		
		ИндексТекущейСтроки = 2;
		КоличествоСтрок = 11;
		Для Каждого СтрокаОКВЭД Из СтрокаОрганизации.Строки Цикл
			
			П012403 = П012403 + СтрокаОКВЭД.СредняяЧисленностьЗаПериодСписочногоСостава;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			Если ИндексТекущейСтроки > КоличествоСтрок Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П012403"] = П012403;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П012503"] = П012503;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Чтение настроек подсистемы статистики персонала.
// Если формирование отчетных форм статистики отключено, функция возвращает
// структуру с единственным реквизитом ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
// установленным в значение ЛОЖЬ.
//
// ВозвращаемоеЗначение:
//  Структура настроек
//
Функция НастройкиСтатистикиПерсонала() Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы", Ложь);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
		|	НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы
		|ИЗ
		|	РегистрСведений.НастройкиСтатистикиПерсонала КАК НастройкиСтатистикиПерсонала";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() > 0 Тогда
		СтруктураНастроек = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

Процедура УстановитьПустоеЗначение(Значение, ИмяЯчейки, Контейнер) Экспорт
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = 0 Или Значение = Null) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;		
КонецПроцедуры

Процедура УстановитьПустоеЗначениеЧисленности(Значение, ИмяЯчейки, Контейнер) Экспорт
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = Null Или Значение < 0.1) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;
КонецПроцедуры

// Заполнение отбора компоновщика настроек СКД в зависимости от формы отчета.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных
//  ПараметрыОтчета - Структура
//  ИмяСтроки - Строка.
//
Процедура ЗаполнитьОтборДляОтчетаРасшифровки(Отбор, ПараметрыОтчета, ИмяСтроки) Экспорт
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПКультура_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПНаука_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		
		// Отбор по категориям
		КатегорииОтчета = МассивКатегорийОтчета(ВидОтчета);
		СоответствиеВключаемыхСтрок = СоответствиеВключаемыхСтрок(ВидОтчета);
		
		ЗначениеОтбора = Новый Массив;
		Категория = КатегорииОтчета[Число(ИмяСтроки) - 2];
		Если ЗначениеЗаполнено(Категория) Тогда
			ЗначениеОтбора.Добавить(Категория);
		КонецЕсли;
		
		ВключенныеКатегории = СоответствиеВключаемыхСтрок.НайтиСтроки(Новый Структура("РодительскаяСтрока", Прав(ИмяСтроки, 2)));
		Для Каждого СтрокаКатегории Из ВключенныеКатегории Цикл
			Категория = КатегорииОтчета[Число(СтрокаКатегории.ПодСтрока) - 2];
			Если ЗначениеЗаполнено(Категория) Тогда
				ЗначениеОтбора.Добавить(Категория);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы", ВидСравненияКомпоновкиДанных.ВСписке, ЗначениеОтбора);
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4_2013" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"КодОКВЭД", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.КодПоОКВЭД);
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4_2017" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
			"КодОКВЭД2", ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.КодПоОКВЭД);
		
	КонецЕсли;
	
КонецПроцедуры

// Получения значений параметров СКД. Используется когда, значением параметра является предопределенный
// 	элемент справочника.
//
// Параметры:
//  ИмяПараметра - строка
//
//	Возвращаемое значение - значение параметра.
//	
Функция ЗначениеПараметраОтчетаПоУмолчанию(ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "ОтпускБезОплатыУчебный" Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаБезОплаты") Тогда
			Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ИмяПараметра = "РабочееВремя" Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	ИначеЕсли ИмяПараметра = "ГосударственныеОбязанности" Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	КонецЕсли;
	
КонецФункции

// Формирование расшифровки отчетов статистики.
//
Процедура СформироватьОтчетРасшифровку(Параметры, ДокументРезультат) Экспорт
	
	ВидСКД = "";
	ВнешниеНаборыДанных = Неопределено;
	ОпределитьВидСКД(Параметры, , ВидСКД, Ложь, ВнешниеНаборыДанных);
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет(ВидСКД);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Параметры.ИмяСКД, Параметры, СхемаКомпоновки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных <> Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, , Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
КонецПроцедуры

// Формирование расшифровки отчетов статистики.
//
Процедура СформироватьОтчетРасшифровкуШтатноеРасписание(Параметры, ДокументРезультат) Экспорт
	
	ВидСКД = "";
	ВнешниеНаборыДанных = Неопределено;
	ОпределитьВидСКД(Параметры, , ВидСКД, Ложь, ВнешниеНаборыДанных);
	
	СхемаКомпоновки = Отчеты.ШтатноеРасписание.ПолучитьМакет(ВидСКД);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Параметры.ИмяСКД, Параметры, СхемаКомпоновки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных <> Неопределено Тогда
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, , Истина);
	Иначе
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
КонецПроцедуры

// Поиск удаляемой категории "Научные сотрудники" формы ЗП-Наука и ее замены.
//
Функция ДанныеДляУдаленияКатегорииНаучныеСотрудники() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка КАК Категория,
	|	ИСТИНА КАК НужноУдалить
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = ЗНАЧЕНИЕ(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука)
	|	И СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала = ""311""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = ЗНАЧЕНИЕ(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука)
	|	И СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала = ""313""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокиЗамены = Новый Структура("КатегорияДляУдаления,КатегорияЗамещения");
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НужноУдалить Тогда
			СтрокиЗамены.КатегорияДляУдаления = Выборка.Категория;
		Иначе
			СтрокиЗамены.КатегорияЗамещения = Выборка.Категория;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СтрокиЗамены;
	
КонецФункции

// Замена категории "Научные сотрудники" формы ЗП-Наука в элементах справочника Должности.
//
Процедура ЗаменаКатегорииНаучныеСотрудникиВДолжностях() Экспорт
	
	СтрокиЗамены = ДанныеДляУдаленияКатегорииНаучныеСотрудники();
	
	Если СтрокиЗамены.КатегорияДляУдаления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Замена удаляемого элемента.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = &Категория
	|	И Должности.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Категория", СтрокиЗамены.КатегорияДляУдаления);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Должность = Выборка.Должность.ПолучитьОбъект();
		Должность.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы = СтрокиЗамены.КатегорияЗамещения;
		Должность.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Формирование таблицы с данными для заполнения статистически отчетов:
// 		ЗП-Здрав (Сфера здравоохранения).
// 		ЗП-Культура (Сфера культуры).
// 		ЗП-Наука (Научные исследования и разработки).
// 		ЗП-Образование (Сфера образования).
// 		ЗП-Соц (Сфера социального обслуживания).
//
// Параметры:
//  ПараметрыОтчета - структура с полями.
//		Организация
//		ДатаНачалаПериодаОтчета
//		ДатаКонцаПериодаОтчета
//		ИсключитьПодразделения, необязательный, содержит массив подразделений для исключения из отчета
//		ВключитьПодразделения, необязательный, содержит массив подразделений для включения в отчет.
//
//	Возвращаемое значение - таблица значений с данными для заполнения отчетов. Таблица содержит сведения:
//		КатегорияПерсонала
//		СредняяЧисленностьЗаПериодСписочногоСостава (без внешних совместителей)
//		СредняяЧисленностьЗаПериодВнешнихСовместителей
//		ФОТВнутреннихСовместителей
//		ФОТСписочногоСоставаБюджет (за счет средств бюджета без внешних совместителей)
//		ФОТСписочногоСоставаОМС (за счет средств ОМС без внешних совместителей)
//		ФОТСписочногоСоставаДоход (за счет средств от приносящей доход деятельности без внешних совместителей)
//		ФОТВнешнихСовместителейБюджет (за счет средств бюджета)
//		ФОТВнешнихСовместителейОМС (за счет средств ОМС)
//		ФОТВнешнихСовместителейДоход (за счет средств от приносящей доход деятельности).
//	
Функция ДанныеДляЗаполнениеОтчетовМониторинга(ПараметрыОтчета, ВариантРасчетаПоказателей)
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	ТаблицаДанныхОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхОтчета.Колонки.Добавить("КатегорияПерсонала", Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодСписочногоСостава", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("СредняяЧисленностьЗаПериодВнешнихСовместителей", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнутреннихСовместителей", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаБюджет", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаОМС", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТСписочногоСоставаДоход", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейБюджет", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейОМС", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОтчета.Колонки.Добавить("ФОТВнешнихСовместителейДоход", Новый ОписаниеТипов("Число"));
	// Расширение структуры настроек.
	ПараметрыОтчетаДляЗаполнения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаЗП", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;
	
	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		
		НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		
		НоваяСтрока.КатегорияПерсонала = СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
		
		Если ВариантРасчетаПоказателей = 2015 Тогда
			НоваяСтрока.ФОТВнутреннихСовместителей = Окр((СтрокаОтчета.НачисленоВнутреннимСовместителям + СтрокаОтчета.НачисленоРаботникамСписочногоСоставаПоСовмещению) / 1000, 1);
		Иначе
			НоваяСтрока.ФОТВнутреннихСовместителей = Окр(СтрокаОтчета.НачисленоВнутреннимСовместителям / 1000, 1);
		КонецЕсли;
		
		НоваяСтрока.ФОТСписочногоСоставаБюджет = Окр(СтрокаОтчета.ФОТСписочногоСоставаБюджет / 1000, 1);
		НоваяСтрока.ФОТСписочногоСоставаОМС = Окр(СтрокаОтчета.ФОТСписочногоСоставаОМС / 1000, 1);
		НоваяСтрока.ФОТСписочногоСоставаДоход = Окр(СтрокаОтчета.ФОТСписочногоСоставаДоход / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейБюджет = Окр(СтрокаОтчета.ФОТВнешнихСовместителейБюджет / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейОМС = Окр(СтрокаОтчета.ФОТВнешнихСовместителейОМС / 1000, 1);
		НоваяСтрока.ФОТВнешнихСовместителейДоход = Окр(СтрокаОтчета.ФОТВнешнихСовместителейДоход / 1000, 1);
	
	КонецЦикла;
	
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаЗП", ПараметрыОтчетаДляЗаполнения, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(ПараметрыОтчетаДляЗаполнения.Организация, "Организация");
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат ТаблицаДанныхОтчета;
	КонецЕсли;
	
	// Заполнение таблицы данных отчета.
	Для Каждого СтрокаОтчета Из СтрокаОрганизации.Строки Цикл
		
		НоваяСтрока = ТаблицаДанныхОтчета.Найти(СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы, "КатегорияПерсонала");
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаДанныхОтчета.Добавить();
		КонецЕсли;
		НоваяСтрока.КатегорияПерсонала = СтрокаОтчета.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы;
		НоваяСтрока.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(СтрокаОтчета.СредняяЧисленностьЗаПериодСписочногоСостава, 1);
		НоваяСтрока.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(СтрокаОтчета.СредняяЧисленностьЗаПериодВнешнихСовместителей, 1);
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхОтчета;
	
КонецФункции

Функция МассивКатегорийОтчета(ВидОтчета)

	ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ПустаяСсылка();
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПЗдрав	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПКультура	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПОбразование	
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПСоц	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = &ФормаМониторинга
	|	И НЕ(СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга = ЗНАЧЕНИЕ(Перечисление.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука)
	|				И СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала = ""311"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код";
	Запрос.УстановитьПараметр("ФормаМониторинга", ФормаМониторинга);
	
	КатегорииОтчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		КатегорииОтчета.Вставить(0, Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка());
		КатегорииОтчета.Вставить(3, Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка());
	КонецЕсли;
	
	Возврат КатегорииОтчета
	
КонецФункции 

Функция КоличествоЗаполняемыхСтрок(ВидОтчета)
	
	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		Возврат 13;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		Возврат 13;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		Возврат 14;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		Возврат 28;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетСтатистикаФорма1ТГМС" Тогда
		Возврат 4;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

Процедура ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, ПодСтрока,РодительскаяСтрока)

	НоваяСтрока = СоответствиеВключаемыхСтрок.Добавить();
	НоваяСтрока.ПодСтрока = ПодСтрока;
	НоваяСтрока.РодительскаяСтрока = РодительскаяСтрока;

КонецПроцедуры

Функция СоответствиеВключаемыхСтрок(ВидОтчета)

	СоответствиеВключаемыхСтрок = Новый ТаблицаЗначений;
	СоответствиеВключаемыхСтрок.Колонки.Добавить("ПодСтрока", Новый ОписаниеТипов("Строка"));
	СоответствиеВключаемыхСтрок.Колонки.Добавить("РодительскаяСтрока", Новый ОписаниеТипов("Строка"));

	Если ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013" Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "05","04");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","08");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "08","07");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "07","06");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","06");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "10","06");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "06","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "07","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "03","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "04","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "05","02");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "08","02");
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" Тогда
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "06","05");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "09","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "10","08");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "12","11");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "13","11");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "15","14");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "16","14");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "20","19");
		ДобавитьСтрокуСоответствия(СоответствиеВключаемыхСтрок, "22","21");
	КонецЕсли;
	
	Возврат СоответствиеВключаемыхСтрок
	
КонецФункции 

Функция МассивСтрокИсключений(ВидОтчета)

	МассивСтрок = Новый Массив();
	
	Если ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" Тогда
		МассивСтрок.Добавить(2);
		МассивСтрок.Добавить(5);
	КонецЕсли;
	
	Возврат МассивСтрок
	
КонецФункции 

Процедура ОписаниеПоказателейФормыФинмониторинга(ПоказателиОтчета, ВидОтчета)

	ВсегоСтрок = КоличествоЗаполняемыхСтрок(ВидОтчета);
	Для Сч = 2 По ВсегоСтрок Цикл
		
		ТекстСтроки = Формат(Сч,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "01", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "02", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "04", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "06", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "07", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "08", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "09", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "10", Истина, Истина);
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П00000000" + ТекстСтроки + "11", Истина, Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗначенияПоказателейФормыФинмониторинга(ПараметрыОтчета, Контейнер, ВидОтчета, ВариантРасчетаПоказателей)
	
	ТаблицаДанныхОтчета = ДанныеДляЗаполнениеОтчетовМониторинга(ПараметрыОтчета, ВариантРасчетаПоказателей);
	
	МассивКатегорий = МассивКатегорийОтчета(ВидОтчета);
	ВсегоСтрок = КоличествоЗаполняемыхСтрок(ВидОтчета);
	СтруктураДанных = Новый Структура;
	Для Сч = 2 По ВсегоСтрок Цикл
		
		ТекстСтроки = Формат(Сч,"ЧЦ=2; ЧДЦ=0; ЧВН=");
		
		КатегорияПерсонала = МассивКатегорий[Сч - 2];
		СтрокиИсключения = МассивСтрокИсключений(ВидОтчета);
		
		СтрокаДанных = ?(СтрокиИсключения.Найти(Сч) <> Неопределено, Неопределено, ТаблицаДанныхОтчета.Найти(КатегорияПерсонала,"КатегорияПерсонала"));
		Если СтрокаДанных = Неопределено Тогда
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "01", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "02", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "04", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "06", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "07", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "08", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "09", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "10", 0);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "11", 0);
		Иначе	
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "01", СтрокаДанных.СредняяЧисленностьЗаПериодСписочногоСостава);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "02", СтрокаДанных.СредняяЧисленностьЗаПериодВнешнихСовместителей);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "04", СтрокаДанных.ФОТВнутреннихСовместителей);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "06", СтрокаДанных.ФОТСписочногоСоставаБюджет);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "07", СтрокаДанных.ФОТСписочногоСоставаОМС);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "08", СтрокаДанных.ФОТСписочногоСоставаДоход);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "09", СтрокаДанных.ФОТВнешнихСовместителейБюджет);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "10", СтрокаДанных.ФОТВнешнихСовместителейОМС);
			СтруктураДанных.Вставить("П00000000" + ТекстСтроки + "11", СтрокаДанных.ФОТВнешнихСовместителейДоход);
		КонецЕсли;
	
	КонецЦикла;
	
	СоответствиеВключаемыхСтрок = СоответствиеВключаемыхСтрок(ВидОтчета);
	Для каждого СтрокаСоответствия Из СоответствиеВключаемыхСтрок Цикл
		ПодСтрока = СтрокаСоответствия.ПодСтрока;
		РодительскаяСтрока = СтрокаСоответствия.РодительскаяСтрока;
		Для НомерКолонки = 1 По 11 Цикл
			Если НомерКолонки = 3 Или НомерКолонки = 5 Тогда
				Продолжить;
			КонецЕсли;
			ТекстКолонки = Формат(НомерКолонки,"ЧЦ=2; ЧДЦ=0; ЧВН=");
			СтруктураДанных["П00000000" + РодительскаяСтрока + ТекстКолонки] = СтруктураДанных["П00000000" + РодительскаяСтрока + ТекстКолонки] + СтруктураДанных["П00000000" + ПодСтрока + ТекстКолонки];
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураДанных);

КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейЗарплата_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели)
	
	Если Не ВыводитьКвартальныеПоказатели Тогда
		СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава = 0;
		СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями = 0;
		СтрокаОКВЭД.НачисленияСоциальногоХарактера = 0;
	КонецЕсли;
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1"] = СтрокаОКВЭДПериод.НаименованиеОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1"] = СтрокаОКВЭДПериод.КодОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05"] = СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06"] = СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08"] = Окр(СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09"] = Окр(СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10"] = Окр(СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ / 1000, 1);
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11"] = Окр(СтрокаОКВЭД.НачисленияСоциальногоХарактера / 1000, 1);
	
	УстановитьПустоеЗначение(СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭД.ОтработаноЧасовСНачалаГодаВнешнимиСовместителями, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06", Контейнер);
	
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоРаботникамСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "08", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоВнешнимСовместителям, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "09", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭДПериод.НачисленоРаботникамПоДоговорамГПХ, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "10", Контейнер);
	УстановитьПустоеЗначение(СтрокаОКВЭД.НачисленияСоциальногоХарактера, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "11", Контейнер);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейКадры_СтатистикаФормаП4_2013Кв1(Контейнер, ИндексТекущейСтроки, СтрокаОКВЭД, СтрокаОКВЭДПериод, ВыводитьКвартальныеПоказатели)
	
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава);
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей, 1);
	СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников = Окр(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников);
	
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "А1"] = СтрокаОКВЭДПериод.НаименованиеОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00010" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "В1"] = СтрокаОКВЭДПериод.КодОКВЭД;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей;
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04"] = СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников;
	
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодСписочногоСостава, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "02", Контейнер);
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодВнешнихСовместителей, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03", Контейнер);
	УстановитьПустоеЗначениеЧисленности(СтрокаОКВЭДПериод.СредняяЧисленностьЗаПериодДоговорников, "ЧНП01000" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04", Контейнер);
	
КонецПроцедуры

Функция ОписаниеПоказателейОтчета_СтатистикаФормаП4_2017Кв1()
	ОписаниеПоказателейОтчета = Новый ТаблицаЗначений;
	ОписаниеПоказателейОтчета.Колонки.Добавить("ИмяКолоноки", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ТипКолонки", Новый ОписаниеТипов("ОписаниеТипов"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка"));
	ОписаниеПоказателейОтчета.Колонки.Добавить("ПутьКФормату", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПоказателейОтчета.Индексы.Добавить("ИмяКолоноки");
	
	// Колонки для общих данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки = "НаименованиеОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##А1";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки = "КодОКВЭД2";
	ОписаниеПоказателя.ТипКолонки = Новый ОписаниеТипов("Строка");
	ОписаниеПоказателя.ПутьКДанным = "П00010##В1";
	
	// Колонки для кадровых данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "СредняяЧисленностьЗаПериодСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##02";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##02";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##03";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##03";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "СредняяЧисленностьЗаПериодДоговорников";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##04";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##04";
	
	// Колонки для зарплатных данных за отчетный период.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##05";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##05";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "ОтработаноЧасовСНачалаГодаВнешнимиСовместителями";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##06";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##06";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "НачисленияСоциальногоХарактера";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##11";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##11";
	
	// Колонки для зарплатных данных за месяц начисления.
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "НачисленоРаботникамСписочногоСостава";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##08";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##08";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "НачисленоВнешнимСовместителям";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##09";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##09";
	
	ОписаниеПоказателя = ОписаниеПоказателейОтчета.Добавить();
	ОписаниеПоказателя.ИмяКолоноки  = "НачисленоРаботникамПоДоговорамГПХ";
	ОписаниеПоказателя.ТипКолонки   = Новый ОписаниеТипов("Число");
	ОписаниеПоказателя.ПутьКДанным  = "П01000##10";
	ОписаниеПоказателя.ПутьКФормату = "ЧНП01000##10";
	
	Возврат ОписаниеПоказателейОтчета;
КонецФункции

Функция ДанныеОтчета_СтатистикаФормаП4_2017Кв1(ОписаниеПоказателейОтчета, ПараметрыОтчета)
	ДанныеОтчета = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоказателя Из ОписаниеПоказателейОтчета Цикл
		ДанныеОтчета.Колонки.Добавить(ОписаниеПоказателя.ИмяКолоноки, ОписаниеПоказателя.ТипКолонки);
	КонецЦикла;
	
	// Получение зарплатных данных отчета.
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияЗарплатныхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ПараметрыПолученияЗарплатныхДанных.Вставить("ДатаНачалаПериодаВыборки", НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияЗарплатныхДанных, ДеревоЗначений);
	
	СНачалаГода = ПараметрыПолученияЗарплатныхДанных.Свойство("СНачалаГода") И ПараметрыПолученияЗарплатныхДанных.СНачалаГода;
	ВыводитьКвартальныеПоказатели = КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = КонецКвартала(ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	ДелительСумм = 1;
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность") Тогда
		ВерсияБРО = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам["РегламентированнаяОтчетность"].Версия;
		Если ВерсияЧислом(ВерсияБРО) < ВерсияЧислом("1.1.12.0") Тогда
			ДелительСумм = 1000;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаЗарплаты_ОКВЭД Из СтрокаОрганизации.Строки Цикл
			Если СНачалаГода Тогда
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД;
			Иначе
				СтрокаЗарплаты_МесяцНачисления = СтрокаЗарплаты_ОКВЭД.Строки.Найти(ПараметрыПолученияЗарплатныхДанных.ДатаНачалаПериодаОтчета, "МесяцНачисления", Ложь);
			КонецЕсли;
			
			СтрокаОтчета = ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаЗарплаты_ОКВЭД, "КодОКВЭД2, НаименованиеОКВЭД2");
			
			Если СтрокаЗарплаты_МесяцНачисления <> Неопределено Тогда
				СтрокаОтчета.НачисленоРаботникамСписочногоСостава = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамСписочногоСостава / ДелительСумм, 1);
				СтрокаОтчета.НачисленоВнешнимСовместителям        = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоВнешнимСовместителям / ДелительСумм, 1);
				СтрокаОтчета.НачисленоРаботникамПоДоговорамГПХ    = Окр(СтрокаЗарплаты_МесяцНачисления.НачисленоРаботникамПоДоговорамГПХ / ДелительСумм, 1);
			КонецЕсли;
			
			Если ВыводитьКвартальныеПоказатели Тогда
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаЗарплаты_ОКВЭД, "ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава, ОтработаноЧасовСНачалаГодаВнешнимиСовместителями");
				СтрокаОтчета.НачисленияСоциальногоХарактера = Окр(СтрокаЗарплаты_ОКВЭД.НачисленияСоциальногоХарактера / ДелительСумм, 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Получение кадровых данных отчета и объединение с зарплатными данными по кодам ОКВЭД.
	ДанныеОтчета.Колонки.Добавить("КадровыеДанныеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПараметрыПолученияКадровыхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтчета);
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФормаП4", ПараметрыПолученияКадровыхДанных, ДеревоЗначений);
	
	СтрокаОрганизации = ДеревоЗначений.Строки.Найти(ПараметрыОтчета.Организация, "Организация");
	Если СтрокаОрганизации <> Неопределено Тогда
		Для Каждого СтрокаКадров Из СтрокаОрганизации.Строки Цикл
			Найденные = ДанныеОтчета.НайтиСтроки(Новый Структура("КодОКВЭД2, КадровыеДанныеЗаполнены", СтрокаКадров.КодОКВЭД2, Ложь));
			Если Найденные.Количество() > 0 Тогда
				СтрокаОтчета = Найденные[0];
			Иначе
				СтрокаОтчета = ДанныеОтчета.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, СтрокаКадров, "КодОКВЭД2, НаименованиеОКВЭД2");
			КонецЕсли;
			СтрокаОтчета.КадровыеДанныеЗаполнены = Истина;
			СтрокаОтчета.СредняяЧисленностьЗаПериодСписочногоСостава    = Окр(СтрокаКадров.СредняяЧисленностьЗаПериодСписочногоСостава);
			СтрокаОтчета.СредняяЧисленностьЗаПериодВнешнихСовместителей = Окр(СтрокаКадров.СредняяЧисленностьЗаПериодВнешнихСовместителей, 1);
			СтрокаОтчета.СредняяЧисленностьЗаПериодДоговорников         = Окр(СтрокаКадров.СредняяЧисленностьЗаПериодДоговорников);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОтчета.Колонки.Удалить("КадровыеДанныеЗаполнены");
	
	Возврат ДанныеОтчета;
КонецФункции

Процедура ЗаполнитьЗначенияПоказателей_СтатистикаФорма1ТГМС_2015Кв1(Контейнер, ИндексТекущейСтроки, СтрокаКатегории)
	
	СтрокаКатегории.СредняяЧисленностьЗаПериодСписочногоСостава = Окр(СтрокаКатегории.СредняяЧисленностьЗаПериодСписочногоСостава,1);

	// Утверждено штатных единиц на конец отчетного периода
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "03"] = СтрокаКатегории.КоличествоСтавок;
	// Численность работников (без внешних совместителей), человек фактически на конец отчетного периода.
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "04"] = СтрокаКатегории.ЧисленностьНаКонецПериодаСписочногоСостава;
	// Численность работников (без внешних совместителей), средне-списочная за отчетный период.
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "05"] = СтрокаКатегории.СредняяЧисленностьЗаПериодСписочногоСостава;	
	// Начислено средств на оплату труда работников в отчетном периоде, тыс руб (нарастающим итогом с начала года).
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "06"] = Окр(СтрокаКатегории.НачисленоРаботникамСписочногоСостава / 1000, 1);
	// Сумма выплат социального характера, начисленных в отчетном периоде, тыс руб (нарастающим итогом с начала года).
	Контейнер.ПолеТабличногоДокументаФормаОтчета["П00000100" + Формат(ИндексТекущейСтроки, "ЧЦ=2; ЧВН=") + "07"] = Окр(СтрокаКатегории.НачисленияСоциальногоХарактера / 1000, 1);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок получения данных для регламентированной отчетности.

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиЗарплата(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено)
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет("СхемаКомпоновкиДанныхЗарплата");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	Если Вариант = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		Если НачалоМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета) <> ПараметрыОтчета.ДатаНачалаПериодаОтчета Тогда
			ПараметрыОтчета.Вставить("СНачалаГода", Истина);
		КонецЕсли;
		ПараметрыОтчета.Вставить("ТолькоГражданские", Истина);
	ИначеЕсли Вариант = "РегламентированныйОтчетСтатистикаФормаЗП" Тогда
		ПараметрыОтчета.Вставить("СНачалаГода", Истина);
	ИначеЕсли Вариант = "СхемаКомпоновкиДанныхЗарплата1ТГМС" Тогда
		ПараметрыОтчета.Вставить("СНачалаГода", Истина);
	ИначеЕсли Вариант = "РегламентированныйОтчетСтатистикаФорма57Т" Тогда
		ПараметрыОтчета.Вставить("ИсключаяПерерасчеты", Истина);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиП4НЗ(Вариант, ПараметрыОтчета, ДанныеОтчета)
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет("СхемаКомпоновкиДанныхФормаП4НЗ");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных, , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Функция ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	Если Не ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений) Тогда
		ИсключитьДанныеОбособленныхПодразделений = Ложь
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если Не ПараметрыОтчета.Свойство("ОбособленноеПодразделение", Подразделение) Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	МассивПодразделений = ПодразделенияИсключения(ПараметрыОтчета.Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений);
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	// Сотрудники по организации
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = ПараметрыОтчета.Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	Если МассивПодразделений.Количество() > 0 Тогда
		Отборы = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
		ПараметрыПолученияСотрудников.Отборы = Отборы;
	КонецЕсли;
	ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииДляСтатистикиФормыП4НЗ";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников, ИмяВТСотрудникиОрганизации);
	
	// Рабочие места сотрудников
	// Уволенные в последний день периода должны включаться в отчет, поэтому увеличим период на 1 день.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	&НачалоПериода КАК НачалоПериода,
	|	ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1) КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТСотрудникиРабочиеМеста
	|ИЗ
	|	#СотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
	Запрос.Выполнить();
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице("ВТСотрудникиРабочиеМеста", "Сотрудник", "НачалоПериода", "ОкончаниеПериода");
	ПараметрыПолученияРабочихМест.Организация = ПараметрыОтчета.Организация;
	Если МассивПодразделений.Количество() > 0 Тогда
		Отборы = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
		ПараметрыПолученияРабочихМест.Отборы = Отборы;
	КонецЕсли;
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияРабочихМест);
	
	// Из увеличенного периода нужно оставить только уволенных, также нужно убрать уволенных на первый день периода,
	// т.к. они должны войти в предыдущий период.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМестаСотрудников.Сотрудник,
	|	РабочиеМестаСотрудников.Период
	|ПОМЕСТИТЬ ВТСотрудникиКадровыеДанные
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|ГДЕ
	|	(РабочиеМестаСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|				И РабочиеМестаСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ИЛИ РабочиеМестаСотрудников.Период МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 1) И ДОБАВИТЬКДАТЕ(&КонецПериода, ДЕНЬ, 1)
	|				И РабочиеМестаСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	Запрос.Выполнить();
	
	// Кадровые данные по рабочим местам сотрудников
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКадровыеДанные");
	КадровыеДанные = "Организация, ВидСобытия, ВидЗанятости, ПриказОбУвольненииСтатьяТКРФ, ГрафикРаботы, КоличествоСтавок, ДолжностьПоШтатномуРасписанию, Пол, ДатаПриема, ДатаУвольнения";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	Если ИспользоватьШтатноеРасписание Тогда
		
		// Сведения по позициям штатного расписания
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТКадровыеДанныеСотрудников");
		ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания = "ДолжностьПоШтатномуРасписанию";
		
		УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
			Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "КоличествоСтавок", "ВТПозицииШтатногоРасписания");
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(
			ПараметрыОтчета.ДатаКонцаПериодаОтчета, ПараметрыОтчета.Организация);
			
		Если МассивПодразделений.Количество() > 0 Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы, "Подразделение", ?(ИсключитьДанныеОбособленныхПодразделений, "НЕ В", "В"), МассивПодразделений);
			
			КонецЕсли;
			
		УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
			Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "КоличествоСтавок", "ВТПозицииШтатногоРасписанияНаКонецПериода");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ПозицияШтатногоРасписания,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата
		|ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ПозицияШтатногоРасписания,
		|	0 КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТПозицииШтатногоРасписанияНаКонецПериода";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Состояния сотрудников
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	&НачалоПериода КАК ДатаНачала,
	|	&КонецПериода КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериодыСостояний
	|ИЗ
	|	#СотрудникиОрганизации КАК СотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
	Запрос.Выполнить();
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыСостояний");
	
	// Сотрудники, работавшие не полное рабочее время
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета, "День");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(КадровыеДанныеСотрудниковВспом.Период), &КонецПериода) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиРаботавшиеНеполноеРабочееВремяВременно
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковВспом
	|		ПО КадровыеДанныеСотрудников.Сотрудник = КадровыеДанныеСотрудниковВспом.Сотрудник
	|			И КадровыеДанныеСотрудников.Период < КадровыеДанныеСотрудниковВспом.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО КадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|ГДЕ
	|	(КадровыеДанныеСотрудников.КоличествоСтавок < 1
	|			ИЛИ ГрафикиРаботыСотрудников.НеполноеРабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	КадровыеДанныеСотрудников.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСостоянийСотрудников.Сотрудник,
	|	ПериодыСостоянийСотрудников.Начало КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|		ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиВОтпускеПоУходу
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|ГДЕ
	|	ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник КАК Сотрудник,
	|	Периоды.Период КАК Дата
	|ПОМЕСТИТЬ ВТДниНеполногоРабочегоВремени
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиРаботавшиеНеполноеРабочееВремяВременно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ПО (Периоды.Период МЕЖДУ СотрудникиРаботавшиеНеполноеРабочееВремя.ДатаНачала И СотрудникиРаботавшиеНеполноеРабочееВремя.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО (СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник)
	|			И (ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
	|			И (Периоды.Период МЕЖДУ ПериодыСостоянийСотрудников.Начало И ВЫБОР
	|				КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|			КОНЕЦ)
	|ГДЕ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник ЕСТЬ НЕ NULL 
	|	И ПериодыСостоянийСотрудников.Сотрудник ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник,
	|	Периоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниНеполногоРабочегоВремени.Сотрудник,
	|	КОЛИЧЕСТВО(ДниНеполногоРабочегоВремени.Дата) КАК КоличествоДней
	|ПОМЕСТИТЬ ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно
	|ИЗ
	|	ВТДниНеполногоРабочегоВремени КАК ДниНеполногоРабочегоВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДниНеполногоРабочегоВремени.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериоды";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&КонецПериода КАК Период,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТОтбораСотрудников
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиВОтпускеПоУходу КАК СотрудникиВОтпускеПоУходу
	|		ПО КадровыеДанныеСотрудников.Сотрудник = СотрудникиВОтпускеПоУходу.Сотрудник
	|			И (КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский))
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеДанныеСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	// Отпуска по уходу за ребенком
	Отборы = Новый Массив;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
	
	Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Начисление", "В", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление")));
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Отборы));
	
	ЗапросВТПлановыеНачисления = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(
		Истина, "ВТПлановыеНачисленияСотрудниковДоПолутораЛетПредварительно", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений);
	
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Отборы = Новый Массив;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)";
	
	Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Начисление", "В", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление")));
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Отборы));
	
	ЗапросВТПлановыеНачисления = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(
		Истина, "ВТПлановыеНачисленияСотрудниковДоТрехЛетПредварительно", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений);
	
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник
	|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковДоПолутораЛет
	|ИЗ
	|	ВТПлановыеНачисленияСотрудниковДоПолутораЛетПредварительно КАК ПлановыеНачисленияСотрудниковДоПолутораЛет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник
	|ИЗ
	|	ВТПлановыеНачисленияСотрудниковДоПолутораЛет КАК ПлановыеНачисленияСотрудниковДоПолутораЛет";
	
	ВТПлановыеНачисленияСотрудниковДоПолутораЛет = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияСотрудниковДоТрехЛет.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТПлановыеНачисленияСотрудниковДоТрехЛетПредварительно КАК ПлановыеНачисленияСотрудниковДоТрехЛет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПлановыеНачисленияСотрудниковДоТрехЛет.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудниковДоПолутораЛет КАК ПлановыеНачисленияСотрудниковДоПолутораЛет
	|		ПО ПлановыеНачисленияСотрудниковДоТрехЛет.Сотрудник = ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И ПлановыеНачисленияСотрудниковДоПолутораЛет.Сотрудник ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияСотрудниковДоТрехЛет.Сотрудник";
	
	ВТПлановыеНачисленияСотрудниковДоТрехЛет = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, находившиеся в простое
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыСостоянийСотрудников.Сотрудник
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПериодыСостоянийСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|			ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя))";
	
	ВТСотрудникиВПростое = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, находившиеся в отпуске без оплаты
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыСостоянийСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ПериодыСостоянийСотрудников.Начало, ВЫБОР
	|				КОГДА ПериодыСостоянийСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ПериодыСостоянийСотрудников.ОкончаниеПредположительно
	|				ИНАЧЕ ПериодыСостоянийСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК КоличествоДней
	|ПОМЕСТИТЬ ВТСотрудникиВОтпускеБезОплатыПредварительно
	|ИЗ
	|	ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|ГДЕ
	|	(ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя)
	|			ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыСостоянийСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	// Сотрудник показывается один раз по строке 02 или 05, исходя из причины его работы неполное рабочее время
	// или нахождения в отпуске без сохранения заработной платы большую часть времени в квартале.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник
	|ИЗ
	|	ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиВОтпускеБезОплатыПредварительно КАК СотрудникиВОтпускеБезОплаты
	|		ПО СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник = СотрудникиВОтпускеБезОплаты.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (СотрудникиРаботавшиеНеполноеРабочееВремя.КоличествоДней >= СотрудникиВОтпускеБезОплаты.КоличествоДней
	|			ИЛИ СотрудникиВОтпускеБезОплаты.Сотрудник ЕСТЬ NULL )";
	
	ВТСотрудникиРаботавшиеНеполноеРабочееВремя = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиВОтпускеБезОплаты.Сотрудник
	|ИЗ
	|	ВТСотрудникиВОтпускеБезОплатыПредварительно КАК СотрудникиВОтпускеБезОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО СотрудникиВОтпускеБезОплаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиРаботавшиеНеполноеРабочееВремяПредварительно КАК СотрудникиРаботавшиеНеполноеРабочееВремя
	|		ПО СотрудникиВОтпускеБезОплаты.Сотрудник = СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И (СотрудникиВОтпускеБезОплаты.КоличествоДней > СотрудникиРаботавшиеНеполноеРабочееВремя.КоличествоДней
	|			ИЛИ СотрудникиРаботавшиеНеполноеРабочееВремя.Сотрудник ЕСТЬ NULL )";
	
	ВТСотрудникиВОтпускеБезОплаты = Запрос.Выполнить().Выгрузить();
	
	// Сотрудники, работавшие вахтовым методом
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета, "Месяц");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Сотрудник,
	|	&КонецПериода КАК ДатаАктуальности,
	|	Периоды.Период КАК Месяц,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
	|ИЗ
	|	ВТСотрудникиПериодыСостояний КАК СотрудникиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ СотрудникиПериоды.ДатаНачала И СотрудникиПериоды.ДатаОкончания)";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	ПараметрыПолученияДанныхОВремени.ДатаНачала = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	ПараметрыПолученияДанныхОВремени.ДатаОкончания = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник
	|ИЗ
	|	ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|ГДЕ
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Вахта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник";
	
	ВТСотрудникиВахта = Запрос.Выполнить().Выгрузить();
	
	// Данные сотрудников
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Организация КАК Организация,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|				И (КадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьПринятыхВПериоде,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	|				И (КадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (ШтатноеРасписание.ДатаУтверждения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьПринятыхВПериодеНаНовуюПозицию,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхВПериоде,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья77п1)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхПоСоглашениюСторон,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья81п2)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхВСвязиССокращением,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|				И КадровыеДанныеСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				И КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.Статья77п3)
	|				И (КадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ТОГДА КадровыеДанныеСотрудников.Сотрудник
	|	КОНЕЦ КАК ЧисленностьУволенныхПоСобственномуЖеланию,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.ВидСобытия КАК ВидСобытия,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
	|	КадровыеДанныеСотрудников.ПриказОбУвольненииСтатьяТКРФ КАК ПриказОбУвольненииСтатьяТКРФ,
	|	&НачалоПериода КАК НачалоПериода,
	|	&КонецПериода КАК КонецПериода
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка";
	
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПозицииШтатногоРасписанияНаКонецПериода.ПозицияШтатногоРасписания,
	|	ПозицииШтатногоРасписанияНаКонецПериода.КоличествоСтавок
	|ИЗ
	|	ВТПозицииШтатногоРасписанияНаКонецПериода КАК ПозицииШтатногоРасписанияНаКонецПериода";
	
	ВТПозицииШтатногоРасписанияНаКонецПериода = Запрос.Выполнить().Выгрузить();
	
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеСотрудников", ДанныеСотрудников);
	ВнешниеНаборыДанных.Вставить("ПозицииШтатногоРасписанияНаКонецПериода",		ВТПозицииШтатногоРасписанияНаКонецПериода);
	ВнешниеНаборыДанных.Вставить("СотрудникиРаботавшиеНеполноеРабочееВремя",	ВТСотрудникиРаботавшиеНеполноеРабочееВремя);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеБезОплаты",					ВТСотрудникиВОтпускеБезОплаты);
	ВнешниеНаборыДанных.Вставить("СотрудникиВПростое",							ВТСотрудникиВПростое);
	ВнешниеНаборыДанных.Вставить("СотрудникиВахта",								ВТСотрудникиВахта);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеДоПолутораЛет",				ВТПлановыеНачисленияСотрудниковДоПолутораЛет);
	ВнешниеНаборыДанных.Вставить("СотрудникиВОтпускеДоТрехЛет",		ВТПлановыеНачисленияСотрудниковДоТрехЛет);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Функция ЗаполнитьКомпоновщикНастроек(КлючВарианта, ПараметрыОтчета, СхемаКД)
	
	Организация = ПараметрыОтчета.Организация;
	Если ПараметрыОтчета.Свойство("ДатаНачалаПериодаВыборки") Тогда
		ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаВыборки;
	Иначе
		ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	КонецЕсли;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	// Настройка отборов
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	Если Не ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений) Тогда
		ИсключитьДанныеОбособленныхПодразделений = Ложь
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если Не ПараметрыОтчета.Свойство("ОбособленноеПодразделение", Подразделение) Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	МассивПодразделений = ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКД.ВариантыНастроек[КлючВарианта].Настройки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	
	ПараметрПериод = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	КонецЕсли;
	Если ПараметрПериод <> Неопределено Тогда
		ПараметрПериод.Значение.ДатаНачала = ДатаНачалаПериодаОтчета;
		ПараметрПериод.Значение.ДатаОкончания = ДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("СНачалаГода") Тогда
		ПараметрСНачалаГода = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СНачалаГода");
		Если ПараметрСНачалаГода <> Неопределено Тогда
			ПараметрСНачалаГода.Значение = ПараметрыОтчета.СНачалаГода;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ДатаАктуальности") Тогда
		ПараметрДатаАктуальности = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаАктуальности");
		Если ПараметрДатаАктуальности <> Неопределено Тогда
			ПараметрДатаАктуальности.Значение = ДатаКонцаПериодаОтчета;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрИспользоватьШтатноеРасписание = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ИспользоватьШтатноеРасписание");
	Если ПараметрИспользоватьШтатноеРасписание <> Неопределено Тогда
		ПараметрИспользоватьШтатноеРасписание.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	КонецЕсли;
	
	ПараметрКД = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидыВыплатНаПериодТрудоустройства");
	Если ПараметрКД <> Неопределено Тогда
		ПараметрКД.Значение = МассивВСписокЗначений(Справочники.ВидыВыплатБывшимСотрудникам.ВидыВыплатНаПериодТрудоустройства());
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Отбор = Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, Организация);
	
	ТолькоГражданские = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ТолькоГражданские");
	Если ТолькоГражданские = Истина
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидДоговора")) <> Неопределено Тогда
		ИсключаемыеВидыДоговоров = Новый Массив;
		ИсключаемыеВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.ВоеннослужащийПоПризыву);
		ИсключаемыеВидыДоговоров.Добавить(Перечисления.ВидыДоговоровССотрудниками.КонтрактВоеннослужащего);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ВидДоговора", ИсключаемыеВидыДоговоров, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	ТолькоОсновноеМестоРаботы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ТолькоОсновноеМестоРаботы");
	Если ТолькоОсновноеМестоРаботы = Истина
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидЗанятости")) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ВидЗанятости", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	КонецЕсли;
	
	ИсключатьГодовыеПремии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ИсключатьГодовыеПремии");
	Если ИсключатьГодовыеПремии = Истина
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ВидРасчета")) <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ВидРасчета", ПланыВидовРасчета.Начисления.ГодовыеПремии(), ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	ОтборСотрудников = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ОтборСотрудников");
	Если ОтборСотрудников <> Неопределено
		И Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Сотрудник")) <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Сотрудник", ОтборСотрудников, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.ВСписке, МассивПодразделений);
	КонецЕсли;
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.НеВСписке, МассивПодразделений);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ИсключаяПерерасчеты") Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ПериодДействия", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("МесяцНачисления"));
	КонецЕсли;
	
	// Далее следует настройка варианта расшифровки.
	Если КлючВарианта <> "Расшифровка" Тогда
		Возврат КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	// Включение полей отчета, по которым выводится расшифровка.
	ВключитьВычисляемоеПоле(Настройки.Выбор, "Сотрудник");
	
	ОпределитьВидСКД(ПараметрыОтчета, Настройки);
	
	// Добавление отборов
	СтатистикаПерсоналаРасширенный.ЗаполнитьОтборДляОтчетаРасшифровки(Отбор, ПараметрыОтчета, ПараметрыОтчета.НомерСтроки);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

Процедура ОпределитьВидСКД(ПараметрыОтчета, Настройки = Неопределено, ВидСКД = "", ДополнитьКомпоновщикНастроек = Истина, ВнешниеНаборыДанных = Неопределено)
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	НомерСтроки = ПараметрыОтчета.НомерСтроки;
	НомерКолонки = ПараметрыОтчета.НомерКолонки;
	ВариантРасчетаПоказателей = ?(ПараметрыОтчета.Свойство("ВариантРасчетаПоказателей"), ПараметрыОтчета.ВариантРасчетаПоказателей, 0);
	
	Если Настройки = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Настройки = КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Отбор = Настройки.Отбор;
	Если ВидОтчета = "РегламентированныйОтчетП4_2013" Или ВидОтчета = "РегламентированныйОтчетП4_2017" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "02"
			Или НомерКолонки = "03"
			Или НомерКолонки = "04"
			Или НомерКолонки = "05"
			Или НомерКолонки = "06" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "02" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "03" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "04" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодДоговорников";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "ОтработаноЧасовСНачалаГодаРаботникамиСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "ОтработаноЧасовСНачалаГодаВнешнимиСовместителями";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "08" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "09" Тогда
			ПолеРесурса = "НачисленоВнешнимСовместителям";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "10" Тогда
			ПолеРесурса = "НачисленоРаботникамПоДоговорамГПХ";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "11" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
	ИначеЕсли ВидОтчета = "РегламентированныйОтчет1ТГМС" Тогда
				
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "04"
			Или НомерКолонки = "05" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерКолонки = "03" Тогда
			ПолеРесурса = "КоличествоСтавок";
			ВидСКД = "ОсновнаяСхемаКомпоновкиДанных";
		ИначеЕсли НомерКолонки = "04" Тогда
			ПолеРесурса = "ЧисленностьНаКонецПериодаСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "05" Тогда
			ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерКолонки = "06" Тогда
			ПолеРесурса = "НачисленоРаботникамСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		ИначеЕсли НомерКолонки = "07" Тогда
			ПолеРесурса = "НачисленияСоциальногоХарактера";
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
		КонецЕсли;
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
			
			// Отбор по номеру строки 1-Т(ГМС)
			ИмяПоляНомерСтроки1ТГМС = "НомерСтроки1ТГМС";
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(Настройки);
			Если НЕ СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"] = Неопределено Тогда
				
				ИмяПоляНомерСтроки1ТГМС = СтрЗаменить(СоответствиеПользовательскихПолей["НомерСтроки1ТГМС"], "ПользовательскиеПоля", "ПользовательскиеПоля.");
								
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,ИмяПоляНомерСтроки1ТГМС, ВидСравненияКомпоновкиДанных.Равно, ПараметрыОтчета.НомерСтроки1ТГМС);
			
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетП4НЗ_2015" Тогда
		
		// Включение полей отчета, по которым выводится расшифровка.
		ПолеРесурса = "";
		Если НомерСтроки = "02" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихНеполноеРабочееВремя";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "03" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВПростое";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "05" Тогда
			ПолеРесурса = "ЧисленностьСотрудниковВОтпускеБезОплаты";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "06" Тогда
			ПолеРесурса = "ПринятоСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "07" Тогда
			ПолеРесурса = "ЧисленностьПринятыхВПериодеНаНовуюПозицию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "08" Тогда
			ПолеРесурса = "УволеноСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		ИначеЕсли НомерСтроки = "09" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСоглашениюСторон";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "10" Тогда
			ПолеРесурса = "ЧисленностьУволенныхВСвязиССокращением";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "12" Тогда
			ПолеРесурса = "ЧисленностьУволенныхПоСобственномуЖеланию";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "16" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоПолутораЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "17" Тогда
			ПолеРесурса = "ЧисленностьЖенщинВОтпускеДоТрехЛет";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "20" Тогда
			ПолеРесурса = "ЧисленностьРаботавшихВахтовымМетодом";
			ВидСКД = "СхемаКомпоновкиДанныхФормаП4НЗ";
		ИначеЕсли НомерСтроки = "13" Тогда
			ПолеРесурса = "ЧисленностьНаНачалоСледующегоПериодаСписочногоСостава";
			ВидСКД = "СхемаКомпоновкиДанныхКадры";
		КонецЕсли;
		ВнешниеНаборыДанных = ВнешнийИсточникСтатистикиФормыП4НЗ(ПараметрыОтчета);
		
		Если ДополнитьКомпоновщикНастроек Тогда
			ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
			
			// Отбор на пустые строки
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
		КонецЕсли;
		
	ИначеЕсли ВидОтчета = "РегламентированныйОтчетЗПЗдрав_2013"
		Или ВидОтчета = "РегламентированныйОтчетЗПКультура_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПНаука_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПОбразование_2013" 
		Или ВидОтчета = "РегламентированныйОтчетЗПСоц_2013" Тогда
		
		// Отключение группировки по виду расчета для расшифровки численности.
		Если НомерКолонки = "01" Или НомерКолонки = "02" Тогда
			Если ДополнитьКомпоновщикНастроек Тогда
				Настройки.Структура[0].Колонки[0].Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Включение полей отчета, по которым выводится расшифровка.
		Если НомерКолонки = "04" И ВариантРасчетаПоказателей = 2015 Тогда
			
			ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			Если ДополнитьКомпоновщикНастроек Тогда
				ВключитьВычисляемоеПоле(Настройки.Выбор, "НачисленоВнутреннимСовместителям");
				ВключитьВычисляемоеПоле(Настройки.Выбор, "НачисленоРаботникамСписочногоСоставаПоСовмещению");
				
				ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "ГруппаИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "НачисленоВнутреннимСовместителям", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИЛИ, "НачисленоРаботникамСписочногоСоставаПоСовмещению", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
			
		Иначе
			
			ПолеРесурса = "";
			Если НомерКолонки = "01" Тогда
				ПолеРесурса = "СредняяЧисленностьЗаПериодСписочногоСостава";
				ВидСКД = "СхемаКомпоновкиДанныхКадры";
			ИначеЕсли НомерКолонки = "02" Тогда
				ПолеРесурса = "СредняяЧисленностьЗаПериодВнешнихСовместителей";
				ВидСКД = "СхемаКомпоновкиДанныхКадры";
			ИначеЕсли НомерКолонки = "04" Тогда
				ПолеРесурса = "НачисленоВнутреннимСовместителям";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "06" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаБюджет";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "07" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаОМС";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "08" Тогда
				ПолеРесурса = "ФОТСписочногоСоставаДоход";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "09" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейБюджет";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "10" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейОМС";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			ИначеЕсли НомерКолонки = "11" Тогда
				ПолеРесурса = "ФОТВнешнихСовместителейДоход";
				ВидСКД = "СхемаКомпоновкиДанныхЗарплата";
			КонецЕсли;
			
			Если ДополнитьКомпоновщикНастроек Тогда
				ВключитьВычисляемоеПоле(Настройки.Выбор, ПолеРесурса);
				
				// Отбор на пустые строки
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, ПолеРесурса, ВидСравненияКомпоновкиДанных.НеРавно, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений)
	
	// Пока подразделения с точки зрения статистики не выделяются.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ИсключитьДанныеОбособленныхПодразделений  Тогда
		
		// Отбираем подразделения с непустым кодом для статистики, эти подразделения не войдут в отчет.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ПОМЕСТИТЬ ВТПодразделенияВерхнегоУровня
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата В (&ПустыеКоды)
		|	И ПодразделенияОрганизаций.Владелец = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодразделенияВерхнегоУровня.Ссылка
		|			ИЗ
		|				ВТПодразделенияВерхнегоУровня КАК ПодразделенияВерхнегоУровня)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		ПустыеКоды = Новый Массив;
		ПустыеКоды.Добавить("");
		ПустыеКоды.Добавить("              ");
		Запрос.УстановитьПараметр("ПустыеКоды", ПустыеКоды);
		
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделение)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
	Иначе
		
		Возврат Новый Массив
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции 

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено)
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет("СхемаКомпоновкиДанныхКадры");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	Если Вариант = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		ПараметрыОтчета.Вставить("ТолькоГражданские", Истина);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	// Запрос данных
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС(Вариант, ПараметрыОтчета, ДанныеОтчета, СоответствиеПользовательскихПолей = Неопределено) 
	
	СхемаКомпоновки = Отчеты.ШтатноеРасписание.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	ПараметрыОтчета.Вставить("ДатаАктуальности", ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки);
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	// Запрос данных
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
КонецПроцедуры

Функция СведенияОДолжностяхИЧисленностиРегламентированнойОтчетности(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СтруктураРезультат = Новый Структура("ДанныеШтатногоРасписания,ДанныеСреднесписочнойЧисленности");
	
	Вариант = "РегламентированныйОтчетСтатистикаФорма14";
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("СНачалаГода", Истина);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", ДатаОкончания);
	
	ДанныеШтатногоРасписания = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиШР1ТГМС(Вариант, ПараметрыОтчета, ДанныеШтатногоРасписания);
	СтруктураРезультат.ДанныеШтатногоРасписания = ДанныеШтатногоРасписания;
	
	ДанныеСреднесписочнойЧисленности = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(Вариант, ПараметрыОтчета, ДанныеСреднесписочнойЧисленности);
	СтруктураРезультат.ДанныеСреднесписочнойЧисленности = ДанныеСреднесписочнойЧисленности;	
	
	Возврат СтруктураРезультат;
		
КонецФункции

Процедура ВключитьВычисляемоеПоле(ВыбранныеПоля, ИмяПоля)
	
	Если Лев(ИмяПоля, 20) = "ПользовательскиеПоля" Тогда
		ИмяПоля = СтрЗаменить(ИмяПоля, "ПользовательскиеПоля", "ПользовательскиеПоля.");
	КонецЕсли;
	
	ИскомоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого НастройкаПоля Из ВыбранныеПоля.Элементы Цикл
		Если НастройкаПоля.Поле = ИскомоеПоле Тогда
			НастройкаПоля.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСхемуКомпоновкиРегламентированногоОтчета(СхемаКомпоновки)
	
	// Заполнение регламентированного отчета бессмысленно по разрешенным данным
	Для Каждого НаборДанных Из СхемаКомпоновки.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "РАЗРЕШЕННЫЕ", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// 57-Т

Функция СотрудникиДляЗаполненияРаздела1Формы57Т(Организация, ПериодОтчета, ДанныеОрганизации = Неопределено, ТолькоДолжностиСОКПДТРКатегорией = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеОрганизации = Неопределено Тогда
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		ПараметрыОтчетаДляЗаполненияКадры = Новый Структура;
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("Организация", Организация);
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаНачалаПериодаВыборки", НачалоМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("ДатаКонцаПериодаОтчета", КонецМесяца(ПериодОтчета));
		ПараметрыОтчетаДляЗаполненияКадры.Вставить("НомерСтроки", 0);
		
		ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("РегламентированныйОтчетСтатистикаФорма57Т", ПараметрыОтчетаДляЗаполненияКадры, ДанныеОтчета);
		
		Если ДанныеОтчета.Строки.Количество() = 0 Тогда
			ДанныеОрганизации = ДанныеОтчета; // Пустое дерево значений.
		Иначе
			ДанныеОрганизации = ДанныеОтчета.Строки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСотрудников = ДанныеОрганизации.Строки.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтчета", НачалоМесяца(ПериодОтчета));
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецМесяца(ПериодОтчета));
	
	// Отбор полностью отработавших сотрудников
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериодаОтчета КАК ДатаНачала,
		|	&КонецПериодаОтчета КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
	ПараметрыЗаполнения.ДатаАктуальности  = КонецМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(ПериодОтчета);
	ПараметрыЗаполнения.ДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ПериодОтчета);;
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни
		|ПОМЕСТИТЬ ВТСотрудникиСОтклонениями
		|ИЗ
		|	ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	И ДанныеУчетаВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни)
		|	И НЕ ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник,
		|	ДанныеУчетаВремени.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(Сотрудники.ДатаОкончания, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСОтклонениями КАК СотрудникиСОтклонениями
		|		ПО Сотрудники.Сотрудник = СотрудникиСОтклонениями.Сотрудник
		|ГДЕ
		|	СотрудникиСОтклонениями.Сотрудник ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	// Получение кадровых данных полностью отработавших сотрудников
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ,
		Ложь,
		"Пол,
		|ДатаРождения,
		|Должность,
		|Образование1ВидОбразования,
		|СтажРаботыНаПредприятииЛет,
		|СтажРаботыНаПредприятииМесяцев,
		|ДоляНеполногоРабочегоВремени,
		|ДатаПриема,
		|ДатаУвольнения");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Сотрудник.Наименование КАК Наименование,
		|	КадровыеДанныеСотрудников.Должность КАК Колонка2,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности).ОКПДТРКод КАК Колонка3,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Колонка4,
		|	ГОД(КадровыеДанныеСотрудников.ДатаРождения) КАК Колонка5,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
		|			ТОГДА 1
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование))
		|			ТОГДА 2
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование))
		|			ТОГДА 3
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
		|			ТОГДА 4
		|		КОГДА КадровыеДанныеСотрудников.Образование1ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование))
		|			ТОГДА 5
		|		ИНАЧЕ 6
		|	КОНЕЦ КАК Колонка6,
		|	КадровыеДанныеСотрудников.СтажРаботыНаПредприятииЛет + КадровыеДанныеСотрудников.СтажРаботыНаПредприятииМесяцев / 12 КАК Колонка7,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности).ОКПДТРКатегория КАК Колонка13
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени >= 1
		|	И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
		|	И КадровыеДанныеСотрудников.ДатаПриема <= &НачалоПериодаОтчета
		|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ) >= &КонецПериодаОтчета)
		|	И ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности).ОКПДТРКатегория <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	КадровыеДанныеСотрудников.Сотрудник.Наименование";
	
	Если Не  ТолькоДолжностиСОКПДТРКатегорией Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности).ОКПДТРКатегория <> """"", "");
	КонецЕсли;
	
	ВсеСотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВсеСотрудникиОрганизации;
	
КонецФункции

Функция СотрудникиДляЗаполненияРаздела2Формы57Т(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ранее отобранных сотрудников
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Форма57ТРаздел2Сотрудники.Сотрудник КАК Сотрудник,
		|	Форма57ТРаздел2Сотрудники.НомерСтрокиОтчета КАК НомерСтрокиОтчета
		|ИЗ
		|	РегистрСведений.Форма57ТРаздел2Сотрудники КАК Форма57ТРаздел2Сотрудники
		|ГДЕ
		|	Форма57ТРаздел2Сотрудники.Организация = &Организация
		|	И Форма57ТРаздел2Сотрудники.ПериодОтчета = &ПериодОтчета";
	
	ОтобранныеСотрудникиРегистра = Запрос.Выполнить().Выгрузить();
	ОтобранныеСотрудникиРегистра.Индексы.Добавить("Сотрудник");
	
	ОбщееЧислоРаботников = ВсеСотрудникиПоКатегориям.Количество();
	
	Если ОбщееЧислоРаботников < 50 Тогда
		ЧислоОбследуемых = 8;
	ИначеЕсли ОбщееЧислоРаботников < 100 Тогда
		ЧислоОбследуемых = 12;
	ИначеЕсли ОбщееЧислоРаботников < 250 Тогда
		ЧислоОбследуемых = 16;
	ИначеЕсли ОбщееЧислоРаботников < 500 Тогда
		ЧислоОбследуемых = 20;
	ИначеЕсли ОбщееЧислоРаботников < 700 Тогда
		ЧислоОбследуемых = 24;
	ИначеЕсли ОбщееЧислоРаботников < 1000 Тогда
		ЧислоОбследуемых = 32;
	ИначеЕсли ОбщееЧислоРаботников < 1500 Тогда
		ЧислоОбследуемых = 40;
	ИначеЕсли ОбщееЧислоРаботников < 2000 Тогда
		ЧислоОбследуемых = 48;
	ИначеЕсли ОбщееЧислоРаботников < 4000 Тогда
		ЧислоОбследуемых = 56;
	Иначе
		ЧислоОбследуемых = 64;
	КонецЕсли;
	
	ИнтервалОтбора = ОбщееЧислоРаботников / ЧислоОбследуемых;
	
	ВсеСотрудникиПоКатегориям1Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "1"));
	ВсеСотрудникиПоКатегориям2Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "2"));
	ВсеСотрудникиПоКатегориям3Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "3"));
	ВсеСотрудникиПоКатегориям4Категории = ВсеСотрудникиПоКатегориям.Скопировать(Новый Структура("Колонка13", "4"));
	
	Форма57ТРаздел2Сотрудники = ВсеСотрудникиПоКатегориям.СкопироватьКолонки();
	ВсеОтобранныеСотрудникиРегистраНайдены = Не ОтобранныеСотрудникиРегистра.Количество() > 0;
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	НачалоОтбора = Генератор.СлучайноеЧисло(1, ИнтервалОтбора);
	
	Для НомерСтрокиОтчета = 1 По ЧислоОбследуемых Цикл
		
		НомерСтрокиОтбора = НачалоОтбора + ИнтервалОтбора * (НомерСтрокиОтчета - 1);
		
		Если Не ВсеОтобранныеСотрудникиРегистраНайдены Тогда
			
			СотрудникНайден = Ложь;
			Для Каждого СтрокаОтобранныеСотрудникиРегистра Из ОтобранныеСотрудникиРегистра Цикл
				
				НайденнаяСтрока = ВсеСотрудникиПоКатегориям.Найти(СтрокаОтобранныеСотрудникиРегистра.Сотрудник, "Сотрудник");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					СотрудникНайден = Истина;
					ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), НайденнаяСтрока);
					
					ОтобранныеСотрудникиРегистра.Удалить(СтрокаОтобранныеСотрудникиРегистра);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СотрудникНайден Тогда
				Продолжить;
			Иначе
				ВсеОтобранныеСотрудникиРегистраНайдены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиДляПоиска = Цел(НомерСтрокиОтбора);
		НайденнаяСтрокаСотрудника = Неопределено;
		ПоискСНачалаКоллекции = Ложь;
		
		Пока НайденнаяСтрокаСотрудника = Неопределено Цикл
			
			СтрокаСотрудника = Неопределено;
			Если НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям1Категории[НомерСтрокиДляПоиска - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям2Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям3Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() - 1];
			ИначеЕсли НомерСтрокиДляПоиска <= ВсеСотрудникиПоКатегориям1Категории.Количество() + ВсеСотрудникиПоКатегориям2Категории.Количество() + ВсеСотрудникиПоКатегориям3Категории.Количество() +  + ВсеСотрудникиПоКатегориям4Категории.Количество() Тогда
				СтрокаСотрудника = ВсеСотрудникиПоКатегориям4Категории[НомерСтрокиДляПоиска - ВсеСотрудникиПоКатегориям1Категории.Количество() - ВсеСотрудникиПоКатегориям2Категории.Количество() -  + ВсеСотрудникиПоКатегориям3Категории.Количество() - 1];
			КонецЕсли;
			
			Если СтрокаСотрудника <> Неопределено
				И Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") = Неопределено Тогда
				
				НайденнаяСтрокаСотрудника = СтрокаСотрудника;
				
			Иначе
				
				НомерСтрокиДляПоиска = НомерСтрокиДляПоиска + 1;
				Если НомерСтрокиДляПоиска > ВсеСотрудникиПоКатегориям.Количество() Тогда
					
					Если ПоискСНачалаКоллекции Тогда
						Прервать;
					Иначе
						
						НомерСтрокиДляПоиска = 1;
						ПоискСНачалаКоллекции = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденнаяСтрокаСотрудника = Неопределено Тогда
			Прервать;
		Иначе
			ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), НайденнаяСтрокаСотрудника);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям1Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям2Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям3Категории);
	ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, ВсеСотрудникиПоКатегориям4Категории);
	
	Если Форма57ТРаздел2Сотрудники.Количество() > 0 Тогда
		
		Форма57ТРаздел2Сотрудники.Сортировать("Колонка13,Наименование");
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("НомерСтрокиОтчета");
		
		НаборЗаписей = РегистрыСведений.Форма57ТРаздел2Сотрудники.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.ПериодОтчета.Установить(ПериодОтчета);
		
		Для НомерСтрокиОтчета = 1 По Форма57ТРаздел2Сотрудники.Количество() Цикл
			
			СтрокаФормы57ТРаздел2Сотрудники = Форма57ТРаздел2Сотрудники[НомерСтрокиОтчета - 1];
			
			Запись = НаборЗаписей.Добавить();
			Запись.Организация = Организация;
			Запись.ПериодОтчета = ПериодОтчета;
			Запись.Сотрудник = СтрокаФормы57ТРаздел2Сотрудники.Сотрудник;
			Запись.НомерСтрокиОтчета = НомерСтрокиОтчета;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Форма57ТРаздел2Сотрудники;
	
КонецФункции

Процедура ЗаполнитьСотрудниковРаздела2Формы57Т(Организация, ПериодОтчета) Экспорт
	
	ВсеСотрудникиПоКатегориям = СотрудникиДляЗаполненияРаздела1Формы57Т(Организация, ПериодОтчета);
	СотрудникиДляЗаполненияРаздела2Формы57Т(Организация, ПериодОтчета, ВсеСотрудникиПоКатегориям);
	
КонецПроцедуры

Процедура ДобавитьСотрудниковКатегорииВФорме57Т(Форма57ТРаздел2Сотрудники, СотрудникиКатегории)
	
	Если СотрудникиКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма57ТРаздел2Сотрудники.НайтиСтроки(Новый Структура("Колонка13", СотрудникиКатегории[0].Колонка13)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДобавленных = 0;
	Для Каждого СтрокаСотрудника Из СотрудникиКатегории Цикл
		
		Если Форма57ТРаздел2Сотрудники.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма57ТРаздел2Сотрудники.Добавить(), СтрокаСотрудника);
		
		КоличествоДобавленных = КоличествоДобавленных + 1;
		Если КоличествоДобавленных > 1 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФорма57ТРаздел2СотрудникиДаннымиОНачислениях(Форма57ТРаздел2Сотрудники, ДанныеОрганизации, УчтенаКвартальнаяПремия, УчестьТолькоКваратальнуюПремию = Ложь)
	
	Если Форма57ТРаздел2Сотрудники.Колонки.Найти("Колонка9") = Неопределено Тогда
		
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка9", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка10", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка11", Новый ОписаниеТипов("Число"));
		Форма57ТРаздел2Сотрудники.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из Форма57ТРаздел2Сотрудники Цикл
		
		СтрокиНачислений = ДанныеОрганизации.Строки.НайтиСтроки(Новый Структура("Сотрудник", СтрокаФормы.Сотрудник));
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			
			НачисленоРаботникам = СтрокаНачислений.НачисленоРаботникамСписочногоСостава;
			
			Если СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия Тогда
				
				УчтенаКвартальнаяПремия = Истина;
				НачисленоРаботникам = НачисленоРаботникам / 3;
				
			ИначеЕсли УчестьТолькоКваратальнуюПремию Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ТарифныйЗаработок Тогда
				
				СтрокаФормы.Колонка9 = СтрокаФормы.Колонка9 + НачисленоРаботникам;
				СтрокаФормы.Колонка12 = СтрокаФормы.Колонка12 + СтрокаНачислений.ОтработаноЧасов;
				
			ИначеЕсли СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ВыплатыПоРайонномуРегулированию Тогда
				
				СтрокаФормы.Колонка10 = СтрокаФормы.Колонка10 + НачисленоРаботникам;
				
			ИначеЕсли СтрокаНачислений.ВидРасчетаКатегорияСтатистическогоНаблюдения57Т = Перечисления.КатегорииСтатистическогоНаблюдения57Т.ДругиеВыплаты Тогда
				
				СтрокаФормы.Колонка11 = СтрокаФормы.Колонка11 + НачисленоРаботникам;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Форма 1

Процедура ДополнитьТаблицуСотрудникамиСЗаработокомФорма1(ТаблицаСотрудников, СтрокаОрганизации, УчтенаКвартальнаяПремия, УчестьТолькоКваратальнуюПремию = Ложь)
	
	Для Каждого СтрокаНачислений Из СтрокаОрганизации.Строки Цикл
		
		НачисленоРаботникам = СтрокаНачислений.НачисленоРаботникамСписочногоСостава;
		
		Если СтрокаНачислений.ВидРасчетаКатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КвартальнаяПремия Тогда
			
			УчтенаКвартальнаяПремия = Истина;
			НачисленоРаботникам = НачисленоРаботникам / 3;
			
		ИначеЕсли УчестьТолькоКваратальнуюПремию Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСотрудника = ТаблицаСотрудников.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
		Если СтрокаСотрудника = Неопределено Тогда
			СтрокаСотрудника = ТаблицаСотрудников.Добавить();
			СтрокаСотрудника.Сотрудник = СтрокаНачислений.Сотрудник;
		КонецЕсли;
		
		СтрокаСотрудника.Начислено = СтрокаСотрудника.Начислено + НачисленоРаботникам;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.7.27";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.10.7";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ОбновлениеПояснений";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.11.9";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.УдалениеЭлементаНаучныеСотрудники";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.9";
	Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ЗаменаКатегорииНаучныеСотрудникиВДолжностях";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.14.9";
		Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ЗаполнитьКодыСтрокОтчетностиМониторингаРаботниковСоциальнойСферы";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.17.9";
		Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ДополнитьСоставСправочникаСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.25";
	Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ЗаполнитьРегистрСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.22.16";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПометитьНаУдалениеДублиЭлементов";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.16";
	Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ЗаменитьСсылкиНаДублиЭлементов";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.22.17";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.УдалитьДублиЭлементов";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.11";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b1a289f4-7a99-4974-bab2-b85e77207191");
	Обработчик.Процедура = "РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ДобавитьЗаписи";
	Обработчик.Комментарий = НСтр("ru = 'Добавление записей в регистр ""Строки отчетности мониторинга работников социальной сферы"".
	| До завершения обработки рекомендуется воздержаться от редактирования элементов ""Штатного расписания"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.11";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4e5b0453-849f-4ea3-aee5-fe547816edc7");
	Обработчик.Процедура = "СтатистикаПерсоналаРасширенный.ЗаполнитьКатегориюПерсоналаВСтрокахПозицийШР";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение нового реквизита ""Категория персонала"" в документах ввода позиций ШР.
	| До завершения обработки рекомендуется воздержаться от редактирования этих документов, а также формирования отчетов
	| ""Статистика персонала"" и ""Тарификационные списки работников учреждений ФМБА"".'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.107";
		Обработчик.Процедура = "Справочники.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодключаемыеХарактеристики") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.4.22";
		Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("922a9667-fb94-4901-a20a-e539fa3b9678");
		Обработчик.Процедура = " СтатистикаПерсоналаРасширенный.ЗаполнитьПодключаемыеХарактеристики";
		Обработчик.Комментарий = НСтр("ru = 'Обновление подключаемых характеристик'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодыСтрокОтчетностиМониторингаРаботниковСоциальнойСферы() Экспорт
	
	// При загрузке строк из макета коды не контролировались, присваивались автоматически.
	// Необходимо установить коды в соответствиями со значениями из макета. 
	// Для этого синхронизироваться будем по полям КодКатегорииПерсонала, ФормаМониторинга.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Code КАК СТРОКА(11)) КАК Код,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Name КАК СТРОКА(150)) КАК Наименование,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.CategoryCode КАК СТРОКА(3)) КАК КодКатегорииПерсонала,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.ReportForm КАК СТРОКА(50)) КАК ФормаМониторинга,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Comment КАК СТРОКА(300)) КАК Пояснение
	|ПОМЕСТИТЬ ВТСтрокиОтчетностиТаблица
	|ИЗ
	|	&СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеКодовФорм.ФормаСтрока,
	|	СоответствиеКодовФорм.ФормаСсылка
	|ПОМЕСТИТЬ ВТСоответствиеКодовФорм
	|ИЗ
	|	&СоответствиеКодовФорм КАК СоответствиеКодовФорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка,
	|	СтрокиОтчетностиТаблица.Код
	|ИЗ
	|	ВТСтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеКодовФорм КАК СоответствиеКодовФорм
	|		ПО (СоответствиеКодовФорм.ФормаСтрока = СтрокиОтчетностиТаблица.ФормаМониторинга)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО СтрокиОтчетностиТаблица.КодКатегорииПерсонала = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.КодКатегорииПерсонала
	|			И (СоответствиеКодовФорм.ФормаСсылка = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ФормаМониторинга)
	|			И СтрокиОтчетностиТаблица.Наименование = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Наименование
	|			И СтрокиОтчетностиТаблица.Код <> СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код");
	
	ТекстовыйДокумент = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПолучитьМакет("СтрокиОтчетностиМониторинга");
	Таблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	// Заполняем таблицу соответствия кодов форм и ссылкам на перечисление.
	СоответствиеКодовФорм = Новый ТаблицаЗначений;
	СоответствиеКодовФорм.Колонки.Добавить("ФормаСтрока", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	СоответствиеКодовФорм.Колонки.Добавить("ФормаСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыФормМониторингаРаботниковСоциальнойСферы"));
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗначенияПеречисления Цикл
		НоваяСтрока = СоответствиеКодовФорм.Добавить();
		НоваяСтрока.ФормаСтрока = МетаданныеЗначения.Имя;
		НоваяСтрока.ФормаСсылка = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы[МетаданныеЗначения.Имя];
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокиОтчетностиТаблица", Таблица);
	Запрос.УстановитьПараметр("СоответствиеКодовФорм", СоответствиеКодовФорм);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Код = СокрЛП(Выборка.Код);
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСоставСправочникаСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Code КАК СТРОКА(11)) КАК Код,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Name КАК СТРОКА(150)) КАК Наименование,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.CategoryCode КАК СТРОКА(3)) КАК КодКатегорииПерсонала,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.ReportForm КАК СТРОКА(50)) КАК ФормаМониторинга,
	|	ВЫРАЗИТЬ(СтрокиОтчетностиТаблица.Comment КАК СТРОКА(300)) КАК Пояснение
	|ПОМЕСТИТЬ СтрокиОтчетностиТаблица
	|ИЗ
	|	&СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиОтчетностиТаблица.Код,
	|	СтрокиОтчетностиТаблица.Наименование,
	|	СтрокиОтчетностиТаблица.КодКатегорииПерсонала,
	|	СтрокиОтчетностиТаблица.ФормаМониторинга,
	|	СтрокиОтчетностиТаблица.Пояснение
	|ИЗ
	|	СтрокиОтчетностиТаблица КАК СтрокиОтчетностиТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО СтрокиОтчетностиТаблица.Код = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Код
	|ГДЕ
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Ссылка ЕСТЬ NULL ");
	
	ТекстовыйДокумент = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПолучитьМакет("СтрокиОтчетностиМониторинга");
	Таблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстовыйДокумент.ПолучитьТекст()).Данные;
	
	Запрос.УстановитьПараметр("СтрокиОтчетностиТаблица", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьЭлемент();
		СправочникОбъект.Код = СокрЛП(Выборка.Код);
		СправочникОбъект.Наименование = СокрЛП(Выборка.Наименование);
		СправочникОбъект.КодКатегорииПерсонала = СокрЛП(Выборка.КодКатегорииПерсонала);
		СправочникОбъект.Пояснение = СокрЛП(Выборка.Пояснение);
		
		Если СокрЛП(Выборка.ФормаМониторинга) = "ЗПЗдрав" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПЗдрав;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПКультура" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПКультура;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПНаука" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПНаука;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПОбразование" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПОбразование;
		ИначеЕсли СокрЛП(Выборка.ФормаМониторинга) = "ЗПСоц" Тогда
			СправочникОбъект.ФормаМониторинга = Перечисления.ВидыФормМониторингаРаботниковСоциальнойСферы.ЗПСоц;
		КонецЕсли;
		
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьРегистрСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО Должности.Ссылка = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность
	|ГДЕ
	|	Должности.УдалитьСтрокаОтчетностиМониторингаРаботниковСоциальнойСферы <> ЗНАЧЕНИЕ(Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка)
	|	И СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы ЕСТЬ NULL ";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Набор = РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла;
		Набор.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКатегориюПерсоналаВСтрокахПозицийШР(ПараметрыОбновления = НеОпределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы
	|ПОМЕСТИТЬ ВТКатегорииПерсонала
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО Должности.Ссылка = СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Должность,
	|	ЕСТЬNULL(СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы, КатегорииПерсонала.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы) КАК СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы
	|ПОМЕСТИТЬ ВТКатегорииПерсоналаПозиций
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииПерсонала КАК КатегорииПерсонала
	|		ПО ШтатноеРасписание.Должность = КатегорииПерсонала.Должность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
	|		ПО (СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность = ШтатноеРасписание.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УтверждениеШтатногоРасписанияПозиции.Ссылка,
	|	УтверждениеШтатногоРасписанияПозиции.НомерСтроки,
	|	УтверждениеШтатногоРасписанияПозиции.Позиция,
	|	КатегорииПерсоналаПозиций.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы КАК КатегорияПерсонала,
	|	УтверждениеШтатногоРасписанияПозиции.Ссылка.МесяцВступленияВСилу КАК ДатаВступленияВСилу
	|ПОМЕСТИТЬ ВТИзмененияШтатногоРасписания
	|ИЗ
	|	Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииПерсоналаПозиций КАК КатегорииПерсоналаПозиций
	|		ПО УтверждениеШтатногоРасписанияПозиции.Позиция = КатегорииПерсоналаПозиций.Должность
	|ГДЕ
	|	НЕ УтверждениеШтатногоРасписанияПозиции.Ссылка.ПометкаУдаления
	|	И УтверждениеШтатногоРасписанияПозиции.КатегорияПерсонала = ЗНАЧЕНИЕ(Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзменениеШтатногоРасписанияПозиции.Ссылка,
	|	ИзменениеШтатногоРасписанияПозиции.НомерСтроки,
	|	ИзменениеШтатногоРасписанияПозиции.Позиция,
	|	КатегорииПерсоналаПозиций.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы,
	|	ИзменениеШтатногоРасписанияПозиции.Ссылка.ДатаВступленияВСилу
	|ИЗ
	|	Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииПерсоналаПозиций КАК КатегорииПерсоналаПозиций
	|		ПО ИзменениеШтатногоРасписанияПозиции.Позиция = КатегорииПерсоналаПозиций.Должность
	|ГДЕ
	|	НЕ ИзменениеШтатногоРасписанияПозиции.Ссылка.ПометкаУдаления
	|	И ИзменениеШтатногоРасписанияПозиции.КатегорияПерсонала = ЗНАЧЕНИЕ(Справочник.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ИзмененияШтатногоРасписания.Ссылка КАК Ссылка,
	|	ИзмененияШтатногоРасписания.ДатаВступленияВСилу
	|ИЗ
	|	ВТИзмененияШтатногоРасписания КАК ИзмененияШтатногоРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИзмененияШтатногоРасписания.ДатаВступленияВСилу УБЫВ";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 100", "");
	КонецЕсли;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивДокументов.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ИзмененияШтатногоРасписания.НомерСтроки КАК НомерСтроки,
		|	ИзмененияШтатногоРасписания.Ссылка КАК Ссылка,
		|	ИзмененияШтатногоРасписания.КатегорияПерсонала КАК КатегорияПерсонала,
		|	ИзмененияШтатногоРасписания.ДатаВступленияВСилу КАК ДатаВступленияВСилу
		|ИЗ
		|	ВТИзмененияШтатногоРасписания КАК ИзмененияШтатногоРасписания
		|ГДЕ
		|	ИзмененияШтатногоРасписания.Ссылка В (&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВступленияВСилу УБЫВ,
		|	Ссылка,
		|	НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			Ссылка = Выборка.Ссылка;
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ." + Ссылка.Метаданные().Имя, "Ссылка", Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.Позиции[Выборка.НомерСтроки - 1].КатегорияПерсонала) Тогда
					ДокументОбъект.Позиции[Выборка.НомерСтроки - 1].КатегорияПерсонала = Выборка.КатегорияПерсонала;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПодключаемыеХарактеристики(ПараметрыОбновления = Неопределено) Экспорт
	
	Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	РегистрыСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.ОбновитьПодключаемыеХарактеристики(
		Настройки.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы, ПараметрыОбновления);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

Функция МассивВСписокЗначений(Массив)
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Массив);
	Возврат Результат;
КонецФункции

// Преобразует строковое представление версии в числовое.
Функция ВерсияЧислом(СтрокаВерсии, МножительРазрядов = 1000)
	Результат = 0;
	Фрагменты = СтрРазделить(СтрокаВерсии, ".");
	Для Каждого ФрагментВерсии Из Фрагменты Цикл
		Результат = Результат * МножительРазрядов + Число(ФрагментВерсии);
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ИсточникСведенийОШтатномРасписании

Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	ДобавитьОписаниеСведенийКатегорииПерсонала(ОписаниеИсточников);
	
КонецПроцедуры


Процедура ДобавитьОписаниеСведенийКатегорииПерсонала(ОписаниеИсточников)
	
	ИдентификаторИсточника = "РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы";
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "КатегорияПерсонала";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		
		УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.СтрокаОтчетностиМониторингаРаботниковСоциальнойСферы");
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
				|		ПО РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность}";
			
		Иначе
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы КАК РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы
				|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийСтрокиОтчетностиМониторингаРаботниковСоциальнойСферы.Должность}";
			
		КонецЕсли;
		
	Иначе
		УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника, "NULL");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

