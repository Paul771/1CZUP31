
#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьДокументДляОтраженияВУчетеСтраховыхВзносов(Движения, Организация, МесяцНачисления, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведениеПоВзносам") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		Регистратор = Движения.ОтражениеДокументовВУчетеСтраховыхВзносов.Отбор.Регистратор.Значение;
		
	    ВидОперации = Модуль.ВидОперацииДокумента(Регистратор);
		ДанныеВидаОперации = Модуль.ДанныеВидаОперации(ВидОперации);
		
		Если Не ДанныеВидаОперации.ИспользоватьВзносы Тогда 
			Возврат;
		КонецЕсли;
		
		ТолькоВзносы = Истина;
		Для Каждого КлючИЗначение Из ДанныеВидаОперации Цикл 
			Если КлючИЗначение.Ключ <> "ИспользоватьВзносы" И КлючИЗначение.Значение Тогда 
				ТолькоВзносы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТолькоВзносы Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Движения.ОтражениеДокументовВУчетеСтраховыхВзносов.Записывать = Истина;
	
	НоваяЗапись = Движения.ОтражениеДокументовВУчетеСтраховыхВзносов.Добавить();
	НоваяЗапись.Период = МесяцНачисления;
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.ПроведениеВыполнено = Ложь;
	
КонецПроцедуры

Процедура ОтразитьДокументыВУчетеСтраховыхВзносов(Организация = Неопределено, Документ = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведениеПоВзносам") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеДокументовВУчетеСтраховыхВзносов.Регистратор,
	               |	ОтражениеДокументовВУчетеСтраховыхВзносов.Организация,
	               |	ОтражениеДокументовВУчетеСтраховыхВзносов.Период
	               |ИЗ
	               |	РегистрСведений.ОтражениеДокументовВУчетеСтраховыхВзносов КАК ОтражениеДокументовВУчетеСтраховыхВзносов
	               |ГДЕ
	               |	НЕ ОтражениеДокументовВУчетеСтраховыхВзносов.ПроведениеВыполнено
	               |	И ОтражениеДокументовВУчетеСтраховыхВзносов.Регистратор = &Документ
	               |	И ОтражениеДокументовВУчетеСтраховыхВзносов.Организация = &Организация";
				   
	Если Документ = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОтражениеДокументовВУчетеСтраховыхВзносов.Регистратор = &Документ", "");
	КонецЕсли;
	
	Если Организация = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОтражениеДокументовВУчетеСтраховыхВзносов.Организация = &Организация", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОтражениеДокументовВУчетеСтраховыхВзносов.Регистратор
		               |ИЗ
		               |	РегистрСведений.ОтражениеДокументовВУчетеСтраховыхВзносов КАК ОтражениеДокументовВУчетеСтраховыхВзносов
		               |ГДЕ
		               |	НЕ ОтражениеДокументовВУчетеСтраховыхВзносов.ПроведениеВыполнено
		               |	И ОтражениеДокументовВУчетеСтраховыхВзносов.Регистратор = &Регистратор";
					   
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтражениеДокументовВУчетеСтраховыхВзносов.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			БлокировкаДанных.Заблокировать();
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.СтраховыеВзносыПоФизическимЛицам.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВУчетеСтраховыхВзносов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = Выборка.Период;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.ПроведениеВыполнено = Истина;
			
			НаборЗаписей.Записать();
			
			ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
			РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, Выборка.Регистратор);
			
			Движения = Новый Структура;
			
			СтраховыеВзносыПоФизическимЛицам = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
			СтраховыеВзносыПоФизическимЛицам.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Движения.Вставить("СтраховыеВзносыПоФизическимЛицам", СтраховыеВзносыПоФизическимЛицам);
			
			РасчетыСФондамиПоСтраховымВзносам = РегистрыНакопления.РасчетыСФондамиПоСтраховымВзносам.СоздатьНаборЗаписей();
			РасчетыСФондамиПоСтраховымВзносам.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Движения.Вставить("РасчетыСФондамиПоСтраховымВзносам", РасчетыСФондамиПоСтраховымВзносам);
			
			ПособияПоСоциальномуСтрахованию = РегистрыНакопления.ПособияПоСоциальномуСтрахованию.СоздатьНаборЗаписей();
			ПособияПоСоциальномуСтрахованию.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Движения.Вставить("ПособияПоСоциальномуСтрахованию", ПособияПоСоциальномуСтрахованию);
			
			Отказ = Ложь;
			УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, Выборка.Организация, Выборка.Период, Выборка.Регистратор, ДанныеДляПроведения.СтраховыеВзносы);
			
			Если Отказ Тогда 
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Движения.СтраховыеВзносыПоФизическимЛицам.Записывать Тогда 
				Движения.СтраховыеВзносыПоФизическимЛицам.Записать();
			КонецЕсли;
			
			Если Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать Тогда 
				Движения.РасчетыСФондамиПоСтраховымВзносам.Записать(Ложь);
			КонецЕсли;
			
			Если Движения.ПособияПоСоциальномуСтрахованию.Записывать Тогда 
				Движения.ПособияПоСоциальномуСтрахованию.Записать(Ложь);
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДокументыВУчетеСтраховыхВзносовВДлительнойОперации(Организация = Неопределено, Документ = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведениеПоВзносам") Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(Организация);
	Параметры.Добавить(Документ);
	
	ФоновыеЗадания.Выполнить("ОтражениеДокументовВУчетеСтраховыхВзносов.ОтразитьДокументыВУчетеСтраховыхВзносов", Параметры);
	
КонецПроцедуры

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОтражениеДокументовВУчетеСтраховыхВзносов.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтражениеДокументовВУчетеСтраховыхВзносов.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
