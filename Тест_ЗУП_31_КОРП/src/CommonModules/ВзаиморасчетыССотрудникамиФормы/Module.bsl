////////////////////////////////////////////////////////////////////////////////
// Взаиморасчеты с сотрудниками.
// Серверные процедуры и функции форм документов.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормСписковВедомостейНаВыплатуЗаработнойПлаты

// Устанавливает условное оформление формы списка ведомостей.
//
// Параметры:
// 	Форма - УправляемаяФорма - форма, которая создается.
//
Процедура УстановитьУсловноеОформлениеФормыСписка(Форма) Экспорт
	
	Если Форма.Элементы.Список.РежимВыбора Тогда
		Возврат
	КонецЕсли;	

	ЭлементОформления = Форма.Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЕстьОплаты");
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыФормВедомостейНаВыплатуЗаработнойПлаты

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере.
// 	Устанавливает первоначальные значения реквизитов объекта.
//	Инициализирует реквизиты формы.
//
// Параметры:
// 	Форма - УправляемаяФорма - форма, которая создается.
// 	Отказ - Булево - признак отказа от создания формы.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
// 	ЗначенияДляЗаполнения - структура с дополнительными заполняемыми реквизитами.
//		Имя элемента структуры идентифицирует значение, которое необходимо заполнить.
//		Значение элемента структуры - путь к реквизиту формы, значение которого необходимо заполнить.
//		Необязательный параметр.
//		По умолчанию заполняются:
//			ПериодРегистрации
//			Организация
//			Подразделение
//			Ответственный
//			ГлавныйБухгалтер
//			Руководитель
//			ДолжностьРуководителя
//
Процедура ВедомостьПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Первоначальное заполнение объекта.
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Форма.ЗаполнитьПервоначальныеЗначения();
		Форма.ПриПолученииДанныхНаСервере(Форма.РеквизитФормыВЗначение("Объект"));
		
	КонецЕсли;
	
	// Для ведомостей из "старого" учета скрываем часть полей.
	Если Форма.Объект.ВводНачальныхДанных Тогда
		Форма.Элементы.ПодразделениеОрганизации.Видимость	= Ложь;
		Форма.Элементы.Ответственный.Видимость 				= Ложь;
		Форма.Элементы.СпособВыплаты.Видимость 				= Ложь;
		Форма.Элементы.ЗаполнениеГруппа.Видимость			= Ложь;
		Форма.Элементы.ПодписиГруппа.Видимость				= Ложь;
		Форма.Элементы.ДекорацияВводНачальныхДанных.Видимость= Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере.
//
// Параметры:
// 	Форма - УправляемаяФорма - форма, которая создается.
// 	ТекущийОбъект - читаемый объект.
//
Процедура ВедомостьПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере.
// 	Инициирует проверку заполнения объекта.
//
// Параметры:
// 	Форма - УправляемаяФорма - форма, в которой произошло событие.
//	Отказ - булево - признак отказа от записи 
//	ПроверяемыеРеквизиты - массив - пути к реквизитам, для которых будет выполнена проверка заполнения.
//	
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Форма.ОбработатьСообщенияПользователю();
		Отказ = Истина
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере.
//
// Параметры:
// 	Форма - УправляемаяФорма - форма, в которой произошло событие.
// 	ТекущийОбъект - ДокументОбъект - записываемый объект.
//	ПараметрыЗаписи - структура - параметры записи.
//
Процедура ВедомостьПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Серверная часть обработчика события изменения организации.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьОрганизацияПриИзмененииНаСервере(Форма) Экспорт
	
		ЗначенияДляЗаполнения = ВедомостьЗначенияДляЗаполненияОтветственныхЛиц(Форма);
		Для Каждого ЗначениеДляЗаполнения Из ЗначенияДляЗаполнения Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ЗначениеДляЗаполнения.Значение, Неопределено);
		КонецЦикла;
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Форма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"))
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

Процедура ВедомостьСоставОбработкаВыбораНаСервере(Форма, Знач ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		ВыбранныеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ВыбранныеСотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыбранноеЗначение)
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Для Каждого Сотрудник Из ВыбранныеСотрудники Цикл
		
		СтрокиСотрудника = Форма.Объект.Состав.НайтиСтроки(Новый Структура("ФизическоеЛицо", Сотрудник));
		
		Если СтрокиСотрудника.Количество() = 0 Тогда
			Сотрудники.Добавить(Сотрудник)
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сотрудники.Количество() > 0 Тогда
		ВедомостьДополнитьНаСервере(Форма, Сотрудники);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВедомостьСоставПриИзмененииНаСервере(Форма) Экспорт
	
	СтрокаСостава = Форма.Объект.Состав.НайтиПоИдентификатору(Форма.Элементы.Состав.ТекущаяСтрока);
	
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтрСоединить(ПоляСостава, ", ");
	
	ИзменяемыеСтроки = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	Для Каждого СтрокаЗарплаты Из ИзменяемыеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СписокСвойств)
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВедомостьСоставПослеУдаленияНаСервере(Форма) Экспорт
	
	Для Каждого ИдентификаторСтроки Из Форма.ИдентификаторыСтрок Цикл
		
		УдаляемыеСтроки = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.Объект.Зарплата.Удалить(УдаляемаяСтрока);
		КонецЦикла;	
		
	КонецЦикла
	
КонецПроцедуры	

Процедура ВедомостьСоставКВыплатеПриИзмененииНаСервере(Форма) Экспорт
	
	СтрокаСостава = Форма.Объект.Состав.НайтиПоИдентификатору(Форма.Элементы.Состав.ТекущаяСтрока);
	ЗарплатаСтрокиСостава = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаСостава.КВыплате, ЗарплатаСтрокиСостава, "КВыплате");
	
КонецПроцедуры	

#КонецОбласти

// Вызывается при создании формы новой ведомости.
// Выполняет заполнение первоначальных значений реквизитов ведомости в форме.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ЗначенияДляЗаполнения = Новый Структура;
	Для Каждого ЗначениеДляЗаполнения Из ВедомостьЗначенияДляЗаполненияОтветственныхЛиц(Форма) Цикл
		ЗначенияДляЗаполнения.Вставить(ЗначениеДляЗаполнения.Ключ, ЗначениеДляЗаполнения.Значение);
	КонецЦикла;	
	ЗначенияДляЗаполнения.Вставить("ПредыдущийМесяц",	"Объект.ПериодРегистрации");
	ЗначенияДляЗаполнения.Вставить("Организация",		"Объект.Организация");
	ЗначенияДляЗаполнения.Вставить("Подразделение",		"Объект.Подразделение");
	ЗначенияДляЗаполнения.Вставить("Ответственный",		"Объект.Ответственный");
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.СпособВыплаты) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.СпособВыплаты", Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию(), Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Округление) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.Округление", Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию(), Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении формой данных объекта.
// 	Приспосабливаем форму к редактируемым данным.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//	ТекущийОбъект - Объект, который будет прочитан, ДокументОбъект. 
//
Процедура ВедомостьПриПолученииДанныхНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	Для Каждого СтрокаСостава Из Форма.Объект.Состав Цикл
		Форма.ПриПолученииДанныхСтрокиСостава(СтрокаСостава);
	КонецЦикла;
	
	Форма.УстановитьДоступностьЭлементов();
	Форма.НастроитьОтображениеГруппыПодписей();
	Форма.УстановитьПредставлениеОплаты();
	
КонецПроцедуры

Процедура ВедомостьПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава) Экспорт
	
	ПериодРегистрацииВедомости = Форма.Объект.ПериодРегистрации;
	
	СтрокиЗарплатыРаботника = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	СтрокаСостава.КВыплате = Форма.Объект.Зарплата.Выгрузить(СтрокиЗарплатыРаботника, "КВыплате").Итог("КВыплате");;
	
	РабочиеМеста = Форма.Объект.Зарплата.Выгрузить(СтрокиЗарплатыРаботника, "Сотрудник, Подразделение");
	РабочиеМеста.Свернуть("Сотрудник, Подразделение");
	РасшифровкаРабочихМест = "";
	Если РабочиеМеста.Количество() > 1 Тогда
		РасшифровкаРабочихМест = НРег(ЧислоПрописью(РабочиеМеста.Количество(),,НСтр("ru = 'рабочее место, рабочих места, рабочих мест, с, ,,,,0'")));;
	КонецЕсли;
	
	ПериодыВзаиморасчетов = Форма.Объект.Зарплата.Выгрузить(СтрокиЗарплатыРаботника, "ПериодВзаиморасчетов");
	ПериодыВзаиморасчетов.Свернуть("ПериодВзаиморасчетов");
	РасшифровкаПериодов = "";
	Если ПериодыВзаиморасчетов.Количество() = 1 И ПериодыВзаиморасчетов.Найти(ПериодРегистрацииВедомости) <> Неопределено Тогда
		// Единственный период, совпадающий с периодом ведомости - комментировать нечего
	ИначеЕсли ПериодыВзаиморасчетов.Количество() = 1 Тогда
		// Единственный период, не совпадающий с периодом ведомости
		ПредставлениеПериода = НРег(ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыВзаиморасчетов[0].ПериодВзаиморасчетов));
		РасшифровкаПериодов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1'"), ПредставлениеПериода);
	Иначе
		// Периодов несколько, есть отличающиеся от периода ведомости
		ПериодыВзаиморасчетов.Сортировать("ПериодВзаиморасчетов");
		ПредставлениеПериодов = "";
		Для Индекс = 0 По ПериодыВзаиморасчетов.Количество()-1 Цикл
			
			// период ведомости в комментарий не включаем
			Если ПериодыВзаиморасчетов[Индекс].ПериодВзаиморасчетов = ПериодРегистрацииВедомости Тогда
				Продолжить
			КонецЕсли;
			
			Если Индекс = 3 Тогда
				ПредставлениеПериодов = ПредставлениеПериодов + "...";
				Прервать
			ИначеЕсли Индекс > 0 Тогда
				ПредставлениеПериодов = ПредставлениеПериодов + ", ";
			КонецЕсли;

			ПредставлениеПериодов = ПредставлениеПериодов + НРег(ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыВзаиморасчетов[Индекс].ПериодВзаиморасчетов));
			
		КонецЦикла;	
		
		РасшифровкаПериодов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в т.ч. за %1'"), ПредставлениеПериодов);
		
	КонецЕсли;	
	
	СтрокаСостава.Расшифровка = "";
	Если ЗначениеЗаполнено(РасшифровкаПериодов) Тогда
		СтрокаСостава.Расшифровка = СтрокаСостава.Расшифровка + РасшифровкаПериодов
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасшифровкаРабочихМест) Тогда
		СтрокаСостава.Расшифровка = 
			СтрокаСостава.Расшифровка
			+ ?(ЗначениеЗаполнено(СтрокаСостава.Расшифровка), "; "+Символы.ПС, "")
			+ РасшифровкаРабочихМест;
	КонецЕсли;

КонецПроцедуры	

// Обработка сообщений пользователю для форм ведомостей.
// 	Привязывает сообщения объекта к полям формы.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьОбработатьСообщенияПользователю(Форма) Экспорт
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если СтрНайти(Сообщение.Поле, "ПериодРегистрации") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ПериодРегистрацииСтрокой";
		КонецЕсли;
		Если СтрНайти(Сообщение.Поле, "Округление") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ПараметрыРасчетаИнфо";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доступность элементов формы ведомости.
// 	Документ ввода начальных остатков, или по ведомость, по которой есть выплаты
//	доступны только для просмотра.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьУстановитьДоступностьЭлементов(Форма) Экспорт
	
	Форма.ТолькоПросмотр = 
		ЗначениеЗаполнено(Форма.Объект.Ссылка) 
		И (ДатыЗапретаИзменения.ИзменениеЗапрещено(Форма.Объект.Ссылка.Метаданные().ПолноеИмя(), Форма.Объект.Ссылка) 
			ИЛИ Форма.Объект.ВводНачальныхДанных 
			ИЛИ ВзаиморасчетыССотрудниками.ЕстьОплатаПоВедомости(Форма.Объект.Ссылка)
			ИЛИ Не ОбменСБанкамиПоЗарплатнымПроектам.ДоступностьПлатежногоДокумента(Форма.Объект.Ссылка));
	
КонецПроцедуры

Процедура ВедомостьУстановитьПредставлениеОплаты(Форма) Экспорт
	
	СписокОплат = СписокОплат(Форма);
	
	Форма.ОплатыСписок			= СписокОплат;
	Форма.ОплатыПредставление	= ПредставлениеОплаты(СписокОплат)
	
КонецПроцедуры

Функция ВедомостьЗначенияДляЗаполненияОтветственныхЛиц(Форма)
	
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	РеквизитыОтветственныхЛиц = МенеджерВедомости.РеквизитыОтветственныхЛиц();
	
	ЗначенияДляЗаполнения = Новый Структура;
	Для Каждого Реквизит Из РеквизитыОтветственныхЛиц Цикл
		ПутьРеквизита = "Объект."+Реквизит;
		ЗначенияДляЗаполнения.Вставить(Реквизит, ПутьРеквизита);
	КонецЦикла;
	
	Возврат ЗначенияДляЗаполнения
	
КонецФункции	
	
Процедура ВедомостьЗаполнитьНаСервере(Форма) Экспорт
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьЗарплату() Тогда
		ТекущийОбъект.ЗаполнитьЗарплату();
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);	
	
КонецПроцедуры

Процедура ВедомостьДополнитьНаСервере(Форма, Сотрудники) Экспорт
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьЗарплату() Тогда
		ТекущийОбъект.ДополнитьЗарплату(Сотрудники);
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);	
	
КонецПроцедуры

Процедура ВедомостьОчиститьНаСервере(Форма) Экспорт
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ОчиститьЗарплату();
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);	
	
КонецПроцедуры

Функция ВедомостьАдресСпискаПодобранныхСотрудников(Форма) Экспорт
	Возврат ПоместитьВоВременноеХранилище(Форма.Объект.Состав.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо"), Форма.УникальныйИдентификатор);
КонецФункции

Процедура ВедомостьРедактироватьЗарплатуСтрокиЗавершениеНаСервере(Форма, РезультатыРедактирования) Экспорт
	
	ИдентификаторСтроки	= РезультатыРедактирования.ИдентификаторСтроки;
	
	СтрокиСостава = Форма.Объект.Состав.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Если СтрокиСостава.Количество() <> 0 Тогда
		СтрокаСостава  = СтрокиСостава[0]
	Иначе
		Возврат
	КонецЕсли;	

	ЗарплатаСтроки	= ПолучитьИзВременногоХранилища(РезультатыРедактирования.АдресВХранилищеЗарплатыПоСтроке);
	
	УдаляемыеСтроки = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Зарплата.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
	
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		Если ЗарплатаСтроки.Колонки.Найти(РеквизитСостава.Имя) = Неопределено Тогда
			ЗарплатаСтроки.Колонки.Добавить(РеквизитСостава.Имя, РеквизитСостава.Тип);
		КонецЕсли;	
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтрСоединить(ПоляСостава, ", ");
	
	Для Каждого СтрокаЗарплаты Из ЗарплатаСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СписокСвойств)
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗарплатаСтроки, Форма.Объект.Зарплата);

	Форма.ПриПолученииДанныхСтрокиСостава(СтрокаСостава);
		
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция ВедомостьАдресВХранилищеЗарплатыПоСтроке(Форма, ИдентификаторСтроки) Экспорт
	Возврат ПоместитьВоВременноеХранилище(Форма.Объект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)), Форма.УникальныйИдентификатор);
КонецФункции	

Процедура ВедомостьПодписантПриИзмененииНаСервере(Форма) Экспорт
	Форма.НастроитьОтображениеГруппыПодписей();
КонецПроцедуры

#Область ПоказСостоянияОплаты

Функция СписокОплат(Форма)
	
	СписокОплат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Форма.Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Регистратор КАК Ссылка,
	|	ОплатаВедомостей.Регистратор.Номер КАК Номер,
	|	ОплатаВедомостей.Регистратор.Дата КАК Дата,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПредставления = НСтр("ru = '%1 №%2 от %3 - %4'");
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ФизЛица = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ФизЛица.Добавить(Выборка.ФизЛицо);
		КонецЦикла;
		
		Представление = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставления,
				Выборка.Ссылка.Метаданные().Представление(),
				Выборка.Номер, 
				Формат(Выборка.Дата, "ДЛФ=Д"),
				ЗарплатаКадры.КраткийСоставФизЛиц(ФизЛица, Выборка.Дата));
		
		СписокОплат.Добавить(Выборка.Ссылка, Представление);
		
	КонецЦикла;	
	
	Возврат СписокОплат
	
КонецФункции	

Функция ПредставлениеОплаты(СписокОплат)  
	
	Если СписокОплат.Количество() = 0 Тогда
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(НСтр("ru = 'Выплаты по ведомости не выполнялись'"));
		
	ИначеЕсли СписокОплат.Количество() = 1 Тогда	
		
		ПредставлениеДокумента = 
			НРег(Лев(СписокОплат[0].Представление, 1))
			+ Сред(СписокОплат[0].Представление, 2, СтрНайти(СписокОплат[0].Представление, " - ") - 2);
			
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Выплата по ведомости выполнена документом'"),
			" ",
			Новый ФорматированнаяСтрока(ПредставлениеДокумента, , , , "ссылка"));
		
	Иначе
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Выплаты по ведомости:'"),
			" ",
			Новый ФорматированнаяСтрока(
				НРег(ЧислоПрописью(СписокОплат.Количество(),,НСтр("ru = 'документ, документа, документов, м, ,,,,0'"))),
				, , , "ссылка"));
				
			КонецЕсли;	
	
	Возврат ПредставлениеОплаты
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыФормыРедактированияЗарплатыСтрокиВедомости

Процедура РедактированиеЗарплатыСтрокиВедомостиНастроитьЭлементы(Форма) Экспорт
	ВзаиморасчетыССотрудникамиФормыВнутренний.РедактированиеЗарплатыСтрокиВедомостиНастроитьЭлементы(Форма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
