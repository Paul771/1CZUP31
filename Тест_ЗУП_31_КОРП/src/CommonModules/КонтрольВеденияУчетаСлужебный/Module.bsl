
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ЕстьИзмененияПараметровСистемныхПроверок() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия          = "*";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Комментарий     = НСтр("ru = 'Обновляются правила проверки учета в соответствие с изменениями в новой версии программы.
		|До завершения обработки часть проверок ведения учета будет недоступна.'");
		Обработчик.Процедура       = "КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации";
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия                              = "2.4.5.2";
	Обработчик.Идентификатор                       = Новый УникальныйИдентификатор("4a240e04-87df-4c10-9f7f-97969c61e84f");
	Обработчик.Процедура                           = "РегистрыСведений.РезультатыПроверкиУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.РежимВыполнения                     = "Отложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РезультатыПроверкиУчета.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки          = 1;
	Обработчик.ЧитаемыеОбъекты                     = "РегистрСведений.РезультатыПроверкиУчета";
	Обработчик.ИзменяемыеОбъекты                   = "РегистрСведений.РезультатыПроверкиУчета";
	Обработчик.БлокируемыеОбъекты                  = "РегистрСведений.РезультатыПроверкиУчета";
	Обработчик.ПриоритетыВыполнения                = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Обработчик.ПроцедураПроверки                   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение измерения ИгнорироватьПроблему регистра сведений РезультатыПроверкиУчета
		|по значению одноименного ресурса предыдущей версии.'");
	
КонецПроцедуры

Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПроверки = ВидПроверки(ПараметрыВыполненияПроверки("СистемныеПроверки"));
	Проблемы    = КонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок(ВидПроверки);
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Разделы                 = МодульТекущиеДелаСервер.РазделыДляОбъекта("Отчет.РезультатыПроверкиУчета");
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "КонтрольВеденияУчета" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = Проблемы.Количество > 0;
		Дело.Важное         = Проблемы.ЕстьОшибки;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Некорректные данные'");
		Дело.Количество     = Проблемы.Количество;
		Дело.ПараметрыФормы = Проблемы;
		Дело.Форма          = "Отчет.РезультатыПроверкиУчета.Форма";
	КонецЦикла;
	
КонецПроцедуры

#Область СинхронизацияСправочникаВидовПроверок

// см. КонтрольВеденияУчета.ПолучитьВидыПроверок.
Функция ПолучитьВидыПроверок(ВидПроверок, ПоискПоТочномуСоответствию = Истина) Экспорт
	
	ВидПроверкиМассив      = Новый Массив;
	ПараметрыСинхронизации = Новый Структура;
	
	Если ТипЗнч(ВидПроверок) = Тип("СправочникСсылка.ВидыПроверок") Тогда
		
		ВидПроверкиМассив.Добавить(ВидПроверок);
	
	ИначеЕсли ТипЗнч(ВидПроверок) = Тип("Строка") Тогда
		
		ПараметрыСинхронизации.Вставить("Наименование", "");
		ПараметрыСинхронизации.Вставить("Свойство1", ВидПроверок);
		ВидПроверкиМассив = ОбычныйПоискВидаПроверки(ПараметрыСинхронизации, ПоискПоТочномуСоответствию);
		
	ИначеЕсли ТипЗнч(ВидПроверок) = Тип("Массив") Тогда
		
		ПараметрыСинхронизации = Новый Структура;
		КоличествоЭлементов    = ВидПроверок.Количество();
		Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
			ПараметрыСинхронизации.Вставить("Свойство" + Формат(Индекс + 1, "ЧГ=0"), ВидПроверок.Получить(Индекс));
		КонецЦикла;
		
		Если ПараметрыСинхронизации.Количество() > КоличествоСвойств() Тогда
			ВидПроверкиМассив = РасширенныйПоискВидаПроверки(ПараметрыСинхронизации, ВидПроверок.Количество());
		Иначе
			ПараметрыСинхронизации.Вставить("Наименование", "");
			ВидПроверкиМассив = ОбычныйПоискВидаПроверки(ПараметрыСинхронизации, ПоискПоТочномуСоответствию);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидПроверкиМассив;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочникаПроверок

// Обновляет вспомогательные данные, которые зависят от конфигурации частично.
//
// Обновляется при наличии изменений конфигурации, записанных в параметры
// ограничения доступа при обновлении базы данных на текущую версию конфигурации.
//
Процедура ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации(Параметры = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Справочник.ПравилаПроверкиУчета");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		ОбновитьВспомогательныеДанныеСправочникаПоИзменениямКонфигурации();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура Обновляет состав системных проверок ведения учета
// при изменении конфигурации.
// 
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьПараметрыСистемныхПроверок(ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХэшированиеСистемныхПроверок = ХэшированиеСистемныхПроверок();
	
	НачатьТранзакцию();
	Попытка
		ЕстьТекущиеИзменения = Ложь;
		
		СтандартныеПодсистемыСервер.ОбновитьПараметрРаботыПрограммы(
			"СтандартныеПодсистемы.КонтрольВеденияУчета.СистемныеПроверки",
			ХэшированиеСистемныхПроверок, ЕстьТекущиеИзменения);
		
		СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.КонтрольВеденияУчета.СистемныеПроверки",
			?(ЕстьТекущиеИзменения, Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина), Новый ФиксированнаяСтруктура()));
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЕстьТекущиеИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьИзмененияПараметровСистемныхПроверок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы("СтандартныеПодсистемы.КонтрольВеденияУчета.СистемныеПроверки");
	Возврат ПоследниеИзменения = Неопределено Или ПоследниеИзменения.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОписанияАлгоритмовПоставляемыхПроверок

// Исполняет проверку ссылочной целостности.
//
Процедура ПроверитьСсылочнуюЦелостность(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	КэшБитыхСсылок = Новый Соответствие;
	
	Для Каждого ВидМетаданных Из СсылочныеВидыОбъектовМетаданных() Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			НайтиБитыеСсылки(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВидМетаданных Из РегистрыКакОбъектыМетаданных() Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			НайтиБитыеСсылкиВРегистрах(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Исполняет проверку заполненности обязательных реквизитов.
//
Процедура ПроверитьНезаполненныеОбязательныеРеквизиты(Проверка, ПараметрыПроверки) Экспорт
	
	Для Каждого ВидМетаданных Из СсылочныеВидыОбъектовМетаданных() Цикл
		
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			Если ЭтоНеразделенныйОбъектМетаданных(ОбъектМетаданных.ПолноеИмя()) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			НайтиНезаполненныеОбязательныеРеквизиты(ОбъектМетаданных, ПараметрыПроверки);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ВидМетаданных Из РегистрыКакОбъектыМетаданных() Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			Если ЭтоНеразделенныйОбъектМетаданных(ОбъектМетаданных.ПолноеИмя()) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			НайтиНезаполненныеОбязательныеРеквизитыВРегистрах(ОбъектМетаданных, ПараметрыПроверки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Исполняет проверку наличия циклических ссылок.
//
Процедура ПроверитьЦиклическиеСсылки(Проверка, ПараметрыПроверки) Экспорт
	
	Для Каждого ВидМетаданных Из СсылочныеВидыОбъектовМетаданных() Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			Если ЭтоНеразделенныйОбъектМетаданных(ОбъектМетаданных.ПолноеИмя()) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЕстьИерархия(ОбъектМетаданных.СтандартныеРеквизиты) Тогда
				Продолжить;
			КонецЕсли;
			НайтиЦиклическиеСсылки(ОбъектМетаданных, ПараметрыПроверки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Исполняет проверку наличия отсутствующих предопределенных элементов.
//
Процедура ПроверитьОтсутствующиеПредопределенныеЭлементы(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Сброс кэша перед вызовом функции ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент.
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВидыОбъектовМетаданных = Новый Массив;
	ВидыОбъектовМетаданных.Добавить(Метаданные.Справочники);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	
	Для Каждого ВидМетаданных Из ВидыОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			Если ОбъектМетаданных.ОбновлениеПредопределенныхДанных = Метаданные.СвойстваОбъектов.ОбновлениеПредопределенныхДанных.НеОбновлятьАвтоматически Тогда
				Продолжить;
			КонецЕсли;
			НайтиОтсутствующиеПредопределенныеЭлементы(ОбъектМетаданных, ПараметрыПроверки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Исполняет проверку наличия дублирующихся предопределенных элементов.
//
Процедура ПроверитьДублированиеПредопределенныхЭлементов(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОбъектовМетаданных = Новый Массив;
	ВидыОбъектовМетаданных.Добавить(Метаданные.Справочники);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	ВидыОбъектовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	
	Для Каждого ВидМетаданных Из ВидыОбъектовМетаданных Цикл
		
		Если ВидМетаданных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайтиДублиПредопределенныхЭлементов(ВидМетаданных, ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Исполняет проверку отсутствующих предопределенных узлов плана обмена.
//
Процедура ПроверитьНаличиеПредопределенныхУзловПлановОбмена(Проверка, ПараметрыПроверки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеПланыОбмена = Метаданные.ПланыОбмена;
	Для Каждого МетаданныеПланОбмена Из МетаданныеПланыОбмена Цикл
		
		Если ПланыОбмена[МетаданныеПланОбмена.Имя].ЭтотУзел() <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеПланОбмена.ПолноеИмя()), ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В плане обмена ""%1"" отсутствует предопределенный узел (ЭтотУзел() = Неопределено).'"), МетаданныеПланОбмена.Имя);
		ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеАлгоритмовИсправленияПроблем

Процедура ИсправитьПроблемуЦиклическихСсылокВФоновомЗадании(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	
	Проверка = ПроверкаПоИдентификатору(ПараметрыПроверки.ИдентификаторПроверки);
	Если Не ЗначениеЗаполнено(Проверка) Тогда
		Возврат;
	КонецЕсли;
	
	ИсправитьПроблемуЦиклическихСсылок(Проверка);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаРегламентныхЗаданий

// См. КонтрольВеденияУчетаПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить("ПроверкаВеденияУчета");
	
КонецПроцедуры

// Возвращает параметры проверки по переданному идентификатору регламентного задания.
//
//  Параметры
//    ИдентификаторРегламентногоЗадания - Строка - Поле для связки с текущим фоновым заданием.
//
//  Возвращаемое значение - Структура со свойствами, Неопределено:
//       * Идентификатор - Строка - Строковый идентификатор проверки.
//
Функция ПараметрыПроверкиПоИдентификаторуРегламентногоЗадания(ИдентификаторРегламентногоЗадания) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПроверкиУчета.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	ПравилаПроверкиУчета.ИдентификаторРегламентногоЗадания = &ИдентификаторРегламентногоЗадания
	|	И ПравилаПроверкиУчета.Использование");
	
	Запрос.УстановитьПараметр("ИдентификаторРегламентногоЗадания", Строка(ИдентификаторРегламентногоЗадания));
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Не Результат.Следующий() Тогда
		Возврат Неопределено;
	Иначе
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Идентификатор", Результат.Идентификатор);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПользовательскаяИндикацияОшибок

// Размещает группу индикатора ошибок на управляемой форме.
//
// Параметры:
//  УправляемаяФорма     - УправляемаяФорма - Форма объекта на которой нужно разместить группу индикатора.
//  КлючУникальностиИмен - Строка - Строковый ключ уникальности добавляемых элементов на форму. Нужен для
//                         минимизации рисков пересечения с уже существующими элементами.
//  ИмяРодителяГруппы    - Строка, Неопределено - Строковое имя группы формы в контексте которой
//                         требуется разместить группу индикатора. Если неопределено, то в качестве
//                         контекста выступает управляемая форма. Если на форме не находится такого
//                         элемента генерируется исключение.
//  ВыводитьСнизу        - Булево - Определяет местоположение добавляемой группы,
//                         сигнализирующей об ошибке Если принимает значение "Истина",
//                         то группа будет добавлена в конец коллекции подчиненных
//                         элементов группы родителя. В противном случае группа будет
//                         расположена сразу за основной командной панелью формы объекта.
//
Функция РазместитьГруппуИндикатораОшибки(УправляемаяФорма, КлючУникальностиИмен, ИмяРодителяГруппы = Неопределено, ВыводитьСнизу = Ложь) Экспорт
	
	ВсеЭлементыФормы = УправляемаяФорма.Элементы;
	
	Если ИмяРодителяГруппы = Неопределено Тогда
		КонтекстРазмещения = УправляемаяФорма;
	Иначе
		РодительГруппы = ВсеЭлементыФормы.Найти(ИмяРодителяГруппы);
		Если РодительГруппы = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдена группа формы: ""%1""'"), ИмяРодителяГруппы);
		Иначе
			КонтекстРазмещения = РодительГруппы;
		КонецЕсли;
	КонецЕсли;
	
	ГруппаИндикатораОшибки = ВсеЭлементыФормы.Добавить("ГруппаИндикатораОшибки_" + КлючУникальностиИмен, Тип("ГруппаФормы"), КонтекстРазмещения);
	ГруппаИндикатораОшибки.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИндикатораОшибки.ОтображатьЗаголовок      = Ложь;
	ГруппаИндикатораОшибки.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаИндикатораОшибки.РастягиватьПоГоризонтали = Истина;
	ГруппаИндикатораОшибки.ЦветФона                 = ЦветаСтиля.ФонУправляющегоПоля;
	
	ПодчиненныеЭлементыКонтекста = КонтекстРазмещения.ПодчиненныеЭлементы;
	Если ВыводитьСнизу Тогда
		ВсеЭлементыФормы.Переместить(ГруппаИндикатораОшибки, КонтекстРазмещения);
	Иначе
		Если ПодчиненныеЭлементыКонтекста.Количество() > 0 Тогда
			ВсеЭлементыФормы.Переместить(ГруппаИндикатораОшибки, КонтекстРазмещения, ПодчиненныеЭлементыКонтекста.Получить(0));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГруппаИндикатораОшибки;
	
КонецФункции

// Заполняет размещенную ранее группу индикатора ошибок элементами
//   идентифицирующими наличие ошибок и позволяющими перейти к отчету по этим ошибкам.
//
// Параметры
//  УправляемаяФорма             - УправляемаяФорма - Форма объекта на которой расположена группа индикатора.
//  ГруппаИндикатораОшибки       - ГруппаФормы - Группа управляемой формы на которой будут располагаться
//                                 элементы-декорации, которые будут идентифицировать наличие ошибок с возможностью
//                                 перехода к отчету.
//  КлючУникальностиИмен         - Строка - Строковый ключ уникальности добавляемых элементов на форму. Нужен для
//                                 минимизации рисков пересечения с уже существующими элементами.
//  КартинкаИндикатораПроблем    - Картинка, Неопределено - Картинка идентифицирующая наличие проблем у текущего объекта.
//                                 Может быть переопределена конечным разработчиком - достаточно добавить параметр при вызове.
//  ОбщаяСтрокаИндикатор         - ФорматированнаяСтрока - Общая строка-индикатор наличия ошибок. Состоит из
//                                 поясняющего текста и гиперссылки открывающей отчет по проблемам объекта..
//
Процедура ЗаполнитьГруппуИндикатораОшибки(УправляемаяФорма, ГруппаИндикатораОшибки, КлючУникальностиИмен,
	ОбщаяСтрокаИндикатор, КартинкаИндикатораПроблем = Неопределено) Экспорт
	
	ЭлементыУправляемойФормы = УправляемаяФорма.Элементы;
	
	КартинкаИндикаторОшибки = ЭлементыУправляемойФормы.Добавить("ДекорацияКартинка_" + КлючУникальностиИмен, Тип("ДекорацияФормы"), ГруппаИндикатораОшибки);
	КартинкаИндикаторОшибки.Вид            = ВидДекорацииФормы.Картинка;
	КартинкаИндикаторОшибки.Картинка       = ?(КартинкаИндикатораПроблем = Неопределено, БиблиотекаКартинок.Предупреждение, КартинкаИндикатораПроблем);
	КартинкаИндикаторОшибки.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
	
	ДекорацияНадпись = ЭлементыУправляемойФормы.Добавить("ДекорацияНадпись_" + КлючУникальностиИмен, Тип("ДекорацияФормы"), ГруппаИндикатораОшибки);
	ДекорацияНадпись.Вид                   = ВидДекорацииФормы.Надпись;
	ДекорацияНадпись.Заголовок             = ОбщаяСтрокаИндикатор;
	ДекорацияНадпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	ДекорацияНадпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьОтчетПоПроблемам");
	
КонецПроцедуры

// Формирует общую строку-индикатор наличия ошибок. Состоит из поясняющего текста и
// гиперссылки открывающей отчет по проблемам объекта.
//
// Параметры
//  УправляемаяФорма             - УправляемаяФорма - Форма объекта на которой расположена группа индикатора.
//  СсылкаНаОбъект               - ЛюбаяСсылка - Ссылка на объект по которому найдены ошибки.
//  КоличествоПроблемПоОбъекту   - Число - Найденное количество проблем по объекту.
//  ПояснениеИндикатораПроблем   - Строка, Неопределено - Строка идентифицирующая  наличие проблем у текущего объекта.
//                                 Может быть переопределена конечным разработчиком - достаточно добавить параметр при вызове.
//  ГиперссылкаИндикатораПроблем - Строка, Неопределено - Строка представляющая гиперссылку, при нажатии 
//                                 на которую будет открыт и сформирован отчет по проблемам текущего объекта.
//
Функция СформироватьОбщуюСтрокуИндикатор(УправляемаяФорма, СсылкаНаОбъект, КоличествоПроблемПоОбъекту,
	ПояснениеИндикатораПроблем = Неопределено, ГиперссылкаИндикатораПроблем = Неопределено) Экспорт
	
	ТекстоваяСсылка = "Основной";
	
	Если ПояснениеИндикатораПроблем <> Неопределено Тогда
		ПоясняющаяНадпись = ПояснениеИндикатораПроблем
	Иначе
		ПоясняющаяНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'С этим %1'"), ПредставлениеОбъектаПоТипу(СсылкаНаОбъект));
	КонецЕсли;
	
	Если ГиперссылкаИндикатораПроблем <> Неопределено Тогда
		Гиперссылка = ГиперссылкаИндикатораПроблем;
	Иначе
		Гиперссылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='есть проблемы (%1)'"), Формат(КоличествоПроблемПоОбъекту, "ЧГ=0"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПоясняющаяНадпись + " ", Новый ФорматированнаяСтрока(Гиперссылка, , , , ТекстоваяСсылка));
	
КонецФункции

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровГруппыИндикации.
Процедура ПриОпределенииПараметровГруппыИндикации(ПараметрыГруппыИндикации, ТипСсылки) Экспорт
	
	ПараметрыГруппыИндикации.Вставить("ИмяРодителяГруппы", Неопределено);
	ПараметрыГруппыИндикации.Вставить("ВыводитьСнизу",     Ложь);
	
КонецПроцедуры

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПараметровКолонкиИндикации.
Процедура ПриОпределенииПараметровКолонкиИндикации(ПараметрыКолонкиИндикации, ПолноеИмя) Экспорт
	
	ПараметрыКолонкиИндикации.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ПараметрыКолонкиИндикации.Вставить("Ширина",             2);
	ПараметрыКолонкиИндикации.Вставить("ВыводитьПоследней",  Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеПроверок

// См. КонтрольВеденияУчета.ВыполнитьПроверку.
Процедура ВыполнитьПроверку(Проверка, ПараметрыВыполненияПроверки = Неопределено) Экспорт
	
	Если ТипЗнч(Проверка) = Тип("Строка") Тогда
		ВыполняемаяПроверка = КонтрольВеденияУчета.ПроверкаПоИдентификатору(Проверка);
	Иначе
		ВыполняемаяПроверка = Проверка;
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазы.ОбъектОбработан(ВыполняемаяПроверка).Обработан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = ПодготовитьПараметрыПроверки(ВыполняемаяПроверка, ПараметрыВыполненияПроверки);
	Если ПроверкаОтложена(ПараметрыПроверки.ИдентификаторРегламентногоЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкиВеденияУчета = КонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета();
	Проверки             = ПроверкиВеденияУчета.Проверки;
	СтрокаПроверки       = Проверки.Найти(ПараметрыПроверки.Идентификатор, "Идентификатор");
	Если СтрокаПроверки = Неопределено Тогда 
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка ведения учета с идентификатором ""%1"" не существует (см. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок)'"), 
				ПараметрыПроверки.Идентификатор);
	КонецЕсли;
		
	Если СтрокаПроверки.БезОбработчикаПроверки Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьРезультатыПредыдущихПроверок(ВыполняемаяПроверка, ПараметрыПроверки.ПараметрыВыполненияПроверки);
	
	ПараметрыОбработчика = Новый Массив;
	ПараметрыОбработчика.Добавить(ВыполняемаяПроверка);
	ПараметрыОбработчика.Добавить(ПараметрыПроверки);
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(СтрокаПроверки.ОбработчикПроверки, ПараметрыОбработчика);
	
КонецПроцедуры

// Обработчик регламентного задания "ПроверкаВеденияУчета". Предназначен для обработки
// фонового запуска проверок системы.
//
//   Параметры:
//       ИдентификаторРегламентногоЗадания - Строка, Неопределено - Строковый идентификатор регламентного задания.
//
Процедура ПроверитьВедениеУчета(ИдентификаторРегламентногоЗадания = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаВеденияУчета);
	
	Если ИдентификаторРегламентногоЗадания <> Неопределено Тогда
		
		ПараметрыПроверки = ПараметрыПроверкиПоИдентификаторуРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
		Если ПараметрыПроверки <> Неопределено Тогда
			ВыполнитьПроверку(ПараметрыПроверки.Идентификатор);
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаПроверкиУчета.Идентификатор КАК Идентификатор
		|ИЗ
		|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
		|ГДЕ
		|	ПравилаПроверкиУчета.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.СпособВыполненияПроверки.ПоОбщемуРасписанию)
		|	И ПравилаПроверкиУчета.Использование");
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ВыполнитьПроверку(Результат.Идентификатор);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение массива проверок по переданным параметрам.
// Параметры:
//   ПараметрыПроверки - Массив - Массив, состоящий из структур вида:
//     Элемент массива - Структура Параметры проверки которую необходимо выполнить, либо массив
//                       аналогичных структур (если нужно пакетное исполнение):
//       * Идентификатор                     - Строка - Строковый идентификатор проверки.
//       * Представление                     - Строка - Пользовательское представление проверки.
//       * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                             соответствующего проверке.
//       * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                             объектов (только для объектов с датой). Объекты, дата которых
//                                             меньше указанной, не следует проверять. По умолчанию не 
//                                             заполнено (т.е. проверять все).
//       * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                             По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//   АдресХранилища - Строка - Адрес во временном хранилище для размещения результата.
//
Процедура ВыполнитьПроверкиВФоновомЗадании(Знач ПараметрыПроверки, АдресХранилища = Неопределено) Экспорт
	
	МассивПараметров = ПараметрыПроверки.МассивПараметров;
	Для Каждого ПараметрыПроверки Из МассивПараметров Цикл
		ВыполнитьПроверку(ПараметрыПроверки.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// См. КонтрольВеденияУчетаПереопределяемый.ПроверкаПоИдентификатору.
Функция ПроверкаПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПроверкиУчета.Ссылка КАК Проверка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	ПравилаПроверкиУчета.Идентификатор = &Идентификатор
	|	И НЕ ПравилаПроверкиУчета.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Не Результат.Следующий() Тогда
		Возврат Справочники.ПравилаПроверкиУчета.ПустаяСсылка();
	Иначе
		Возврат Результат.Проверка;
	КонецЕсли;
	
КонецФункции

// См. КонтрольВеденияУчетаПереопределяемый.ВыполнитьПроверкиВКонтексте.
Функция ПроверкиПоКонтексту(КонтекстПроверокВеденияУчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""ВыборкаЭлементовБезРодителейСУчетомКонтекста"" КАК НазначениеЗапроса,
	|	ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиУчета.ПустаяСсылка) КАК Родитель,
	|	ПравилаПроверкиУчета.Ссылка КАК Проверка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	НЕ ПравилаПроверкиУчета.ЭтоГруппа
	|	И ПравилаПроверкиУчета.Использование
	|	И ПравилаПроверкиУчета.Родитель = ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиУчета.ПустаяСсылка)
	|	И ПравилаПроверкиУчета.КонтекстПроверокВеденияУчета = &КонтекстПроверокВеденияУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыборкаГруппСУчетомКонтекста"",
	|	ПравилаПроверкиУчета.Родитель,
	|	ПравилаПроверкиУчета.Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	ПравилаПроверкиУчета.ЭтоГруппа
	|	И ПравилаПроверкиУчета.КонтекстПроверокВеденияУчета = &КонтекстПроверокВеденияУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВыборкаЭлементовСРодителямиБезУчетаКонтекста"",
	|	ПравилаПроверкиУчета.Родитель,
	|	ПравилаПроверкиУчета.Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|ГДЕ
	|	НЕ ПравилаПроверкиУчета.ЭтоГруппа
	|	И ПравилаПроверкиУчета.Использование
	|	И ПравилаПроверкиУчета.Родитель <> ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиУчета.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("КонтекстПроверокВеденияУчета", КонтекстПроверокВеденияУчета);
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивПроверок  = Новый Массив;
	ЦелевыеРодители = Результат.Скопировать(Результат.НайтиСтроки(Новый Структура("НазначениеЗапроса", "ВыборкаГруппСУчетомКонтекста")), "Родитель, Проверка");
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если СтрокаРезультата.НазначениеЗапроса = "ВыборкаЭлементовБезРодителейСУчетомКонтекста"
			Или (СтрокаРезультата.НазначениеЗапроса = "ВыборкаЭлементовСРодителямиБезУчетаКонтекста"
			И ЦелевыеРодители.Найти(СтрокаРезультата.Родитель) <> Неопределено) Тогда
			МассивПроверок.Добавить(СтрокаРезультата.Проверка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроверок);
	
КонецФункции

// См. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
Функция ПараметрыВыполненияПроверки(Знач Свойство1, Знач Свойство2 = Неопределено, Знач Свойство3 = Неопределено,
	Знач Свойство4 = Неопределено, Знач Свойство5 = Неопределено, Знач МассивСвойств = Неопределено) Экспорт
	
	КоличествоСвойств             = КоличествоСвойств();
	НайденКрайнийЗначащийПараметр = Ложь;
	
	Для Индекс = 2 По КоличествоСвойств Цикл
		ЗначениеПараметра = Вычислить("Свойство" + Формат(Индекс, "ЧГ=0"));
		Если ЗначениеПараметра = Неопределено Тогда
			Если Не НайденКрайнийЗначащийПараметр Тогда
				НайденКрайнийЗначащийПараметр = Истина;
			КонецЕсли;
		Иначе
			Если НайденКрайнийЗначащийПараметр Тогда
				ВызватьИсключение НСтр("ru = 'Параметры выполнения проверки заданы не по порядку в КонтрольВеденияУчета.ПараметрыВыполненияПроверки.'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСвойств <> Неопределено И Свойство5 = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Параметры выполнения проверки заданы не по порядку в КонтрольВеденияУчета.ПараметрыВыполненияПроверки.'");
	КонецЕсли;
	
	ВсеПараметры = Новый Массив;
	ВсеПараметры.Добавить(Свойство1);
	Для Индекс = 2 По КоличествоСвойств Цикл
		
		ИмяСвойства      = "Свойство" + Формат(Индекс, "ЧГ=0");
		ЗначениеСвойства = Вычислить(ИмяСвойства);
		
		Если ЗначениеСвойства = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.ПараметрыВыполненияПроверки", ИмяСвойства, ЗначениеСвойства, ОжидаемыеТипыСвойствВидовПроверок());
		ВсеПараметры.Добавить(ЗначениеСвойства);
		
	КонецЦикла;
	
	Если МассивСвойств <> Неопределено Тогда
		Для Каждого ЭлементМассива Из МассивСвойств Цикл
			
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчета.ПараметрыВыполненияПроверки", ИмяСвойства, ЗначениеСвойства, ОжидаемыеТипыСвойствВидовПроверок());
			ВсеПараметры.Добавить(ЭлементМассива);
			
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеВидаПроверки   = "";
	ПараметрыВыполненияПроверки = Новый Структура;
	
	Для Каждого ТекущийПараметр Из ВсеПараметры Цикл
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийПараметр)) Тогда
			ЗначениеПредставления     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийПараметр, Новый Структура("Представление", "ПредставлениеСсылки(Ссылка)"));
			ПредставлениеВидаПроверки = ПредставлениеВидаПроверки + ?(ЗначениеЗаполнено(ПредставлениеВидаПроверки), ", ", "") + ЗначениеПредставления["Представление"];
		Иначе
			ПредставлениеВидаПроверки = ПредставлениеВидаПроверки + ?(ЗначениеЗаполнено(ПредставлениеВидаПроверки), ", ", "") + Формат(ТекущийПараметр, "ДЛФ=Д; ЧГ=0");
		КонецЕсли;
		ПараметрыВыполненияПроверки.Вставить("Свойство" + Формат(ВсеПараметры.Найти(ТекущийПараметр) + 1, "ЧГ=0"), ТекущийПараметр);
		
	КонецЦикла;
	
	ПараметрыВыполненияПроверки.Вставить("Наименование", ПредставлениеВидаПроверки);
	
	Возврат ПараметрыВыполненияПроверки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииНастроек.
Функция ГлобальныеНастройки() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("КартинкаИндикатораПроблем",    БиблиотекаКартинок.Предупреждение);
	Настройки.Вставить("ПояснениеИндикатораПроблем",   Неопределено);
	Настройки.Вставить("ГиперссылкаИндикатораПроблем", Неопределено);
	
	КонтрольВеденияУчетаПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает массив проблемных объектов. Максимально "облегчена" для прироста производительности.
//
//  Параметры:
//    КлючиСтрок - Массив - Массив, содержащий все ключи строк динамического списка.
//
//  Возвращаемое значение - Массив из ЛюбаяСсылка - массив проблемных объектов.
//
Функция ПроблемныеОбъекты(КлючиСтрок) Экспорт
	
	ТекущийПользовательПолноправный = Пользователи.ЭтоПолноправныйПользователь();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект В(&СписокОбъектов)
	|	И НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему");
	Запрос.УстановитьПараметр("СписокОбъектов", КлючиСтрок);
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПроблемныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроблемныйОбъект");
	
	Если Не ТекущийПользовательПолноправный Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ПроблемныеОбъекты;
	
КонецФункции

// См. КонтрольВеденияУчета.ОписаниеПроблемы.
Функция ОписаниеПроблемы(ПроблемныйОбъект, ПараметрыПроверки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроблемныйОбъект",         ПроблемныйОбъект);
	Результат.Вставить("ПравилоПроверки",          ПараметрыПроверки.Проверка);
	Результат.Вставить("ВажностьПроблемы",         ПараметрыПроверки.ВажностьПроблемы);
	Результат.Вставить("УточнениеПроблемы",        "");
	Результат.Вставить("КлючУникальности",         Новый УникальныйИдентификатор);
	Результат.Вставить("Выявлено",                 ТекущаяДатаСеанса());
	Результат.Вставить("ДополнительнаяИнформация", Новый ХранилищеЗначения(Неопределено));
	Результат.Вставить("Ответственный",            Неопределено);
	Результат.Вставить("ВидПроверки",              ?(ПараметрыПроверки.ПараметрыВыполненияПроверки.Количество() = 1,
		ВидПроверки(ПараметрыПроверки.ПараметрыВыполненияПроверки[0]), Неопределено));
	Возврат Результат;
	
КонецФункции

// См. КонтрольВеденияУчета.ЗаписатьПроблему.
Процедура ЗаписатьПроблему(ОшибкаПроверки, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки <> Неопределено И ЭтоПоследняяИтерацияПроверки(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОшибкаПроверки.ВидПроверки) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи проблемы по проверке ""%1"" не указан вид проверки.'"), 
				ОшибкаПроверки.ПравилоПроверки);
	КонецЕсли;
	
	ПроблемныйОбъект    = ОшибкаПроверки.ПроблемныйОбъект;
	КоллекцияРеквизитов = ОшибкаПроверки.ПроблемныйОбъект.Метаданные().Реквизиты;
	
	КонтрольВеденияУчетаПереопределяемый.ПередЗаписьюПроблемы(ОшибкаПроверки, ПроблемныйОбъект, КоллекцияРеквизитов);
	
	НаборЗаписей = РегистрыСведений.РезультатыПроверкиУчета.СоздатьНаборЗаписей();
	
	Отбор        = НаборЗаписей.Отбор;
	Отбор.ВидПроверки.Установить(ОшибкаПроверки.ВидПроверки);
	Отбор.ПравилоПроверки.Установить(ОшибкаПроверки.ПравилоПроверки);
	Отбор.ПроблемныйОбъект.Установить(ПроблемныйОбъект);
	Отбор.КлючУникальности.Установить(ОшибкаПроверки.КлючУникальности);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ОшибкаПроверки);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СинхронизацияСправочникаВидовПроверокСлужебная

// См. КонтрольВеденияУчета.ВидПроверки.
Функция ВидПроверки(ПараметрыВыполненияПроверки, ТолькоПоиск = Ложь) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Блокировка = БлокировкаВидовПроверок(ПараметрыВыполненияПроверки);
		Блокировка.Заблокировать();
		
		Если ПараметрыВыполненияПроверки.Количество() - 1 > КоличествоСвойств() Тогда
			ВидПроверкиМассив = РасширенныйПоискВидаПроверки(ПараметрыВыполненияПроверки, КоличествоСвойств());
		Иначе
			ВидПроверкиМассив = ОбычныйПоискВидаПроверки(ПараметрыВыполненияПроверки);
		КонецЕсли;
		
		Если ВидПроверкиМассив.Количество() = 0 Тогда
			Если ТолькоПоиск Тогда
				ВидПроверки = Справочники.ВидыПроверок.ПустаяСсылка();
			Иначе
				ВидПроверки = НовыйВидПроверки(ПараметрыВыполненияПроверки);
			КонецЕсли;
		Иначе
			ВидПроверки = ВидПроверкиМассив.Получить(0);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВидПроверки;
	
КонецФункции

// Производит поиск вида проверки по переданным параметрам. 
//
// Параметры:
//   ПараметрыВыполненияПроверки - Структура - см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//   КоличествоСвойств           - Число - Количество свойств, по которым нужно вести поиск.
//
// Возвращаемое значение: 
//   СправочникСсылка.ВидыПроверок - элемент справочника, либо пустая ссылка, в случае если поиск не дал результата.
//
Функция РасширенныйПоискВидаПроверки(ПараметрыВыполненияПроверки, КоличествоСвойств)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыПроверок.Ссылка КАК ВидПроверки
	|ПОМЕСТИТЬ ВТ_ВидыПроверок
	|ИЗ
	|	Справочник.ВидыПроверок КАК ВидыПроверок
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыПроверок.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВидыПроверок.СвойстваОбъекта.Ссылка) = &ПороговоеКоличество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыПроверокСвойстваОбъекта.Ссылка КАК ВидПроверки,
	|	ВидыПроверокСвойстваОбъекта.ЗначениеСвойства КАК ЗначениеСвойства,
	|	ВидыПроверокСвойстваОбъекта.ИмяСвойства КАК ИмяСвойства
	|ИЗ
	|	ВТ_ВидыПроверок КАК ВТ_ВидыПроверок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПроверок.СвойстваОбъекта КАК ВидыПроверокСвойстваОбъекта
	|		ПО ВТ_ВидыПроверок.ВидПроверки = ВидыПроверокСвойстваОбъекта.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПроверки");
	
	ТекстУсловий           = " Истина ";
	КоличествоПараметров   = ПараметрыВыполненияПроверки.Количество() - 1;
	Запрос.УстановитьПараметр("ПороговоеКоличество", КоличествоПараметров - КоличествоСвойств);
	
	Для Индекс = 1 По КоличествоСвойств Цикл
		
		Свойство  = "Свойство" + Формат(Индекс, "ЧГ=0");
		Значение  = ПараметрыВыполненияПроверки[Свойство];
		
		ТекстУсловий = ТекстУсловий + " И " + Свойство + " = &" + Свойство;
		Запрос.УстановитьПараметр(Свойство, Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловий);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТранспонированнаяТаблица = Новый ТаблицаЗначений;
	КолонкиТаблицы           = ТранспонированнаяТаблица.Колонки;
	КолонкиТаблицы.Добавить("ВидПроверки", Новый ОписаниеТипов("СправочникСсылка.ВидыПроверок"));
	
	СтруктураПоиска = Новый Структура;
	ИндексПоиска    = "";
	
	Для ПороговыйИндекс = КоличествоСвойств + 1 По КоличествоПараметров Цикл
		
		ИмяКолонки   = "Свойство" + Формат(ПороговыйИндекс, "ЧГ=0");
		ИндексПоиска = ИндексПоиска + ?(ЗначениеЗаполнено(ИндексПоиска), ", ", "") + ИмяКолонки;
		КолонкиТаблицы.Добавить(ИмяКолонки);
		
		СтруктураПоиска.Вставить(ИмяКолонки, ПараметрыВыполненияПроверки[ИмяКолонки]);
		
	КонецЦикла;
	
	ТекущийВидПроверки = Неопределено;
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если ТекущийВидПроверки <> СтрокаРезультата.ВидПроверки Тогда
			
			ТекущийВидПроверки = СтрокаРезультата.ВидПроверки;
			НоваяСтрока = ТранспонированнаяТаблица.Добавить();
			НоваяСтрока.ВидПроверки = ТекущийВидПроверки;
			
		КонецЕсли;
		
		НоваяСтрока[СтрокаРезультата.ИмяСвойства] = СтрокаРезультата.ЗначениеСвойства;
		
	КонецЦикла;
	
	Если ТранспонированнаяТаблица.Количество() > 1000 Тогда
		ТранспонированнаяТаблица.Индексы.Добавить(ИндексПоиска);
	КонецЕсли;
	
	НайденныеСтроки     = ТранспонированнаяТаблица.НайтиСтроки(СтруктураПоиска);
	МассивВидовПроверок = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		МассивВидовПроверок.Добавить(НайденнаяСтрока.ВидПроверки);
	КонецЦикла;
	
	Возврат МассивВидовПроверок;
	
КонецФункции

// Во избежание конфликтов при выполнении разными регламентными заданиями, производит блокировку 
// справочника ВидыПроверки по переданным параметрам выполнения проверки.
//
// Параметры:
//   ПараметрыВыполненияПроверки - Структура - см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//
// Возвращаемое значение:
//   БлокировкаДанных  - объект блокировки справочника ВидыПроверки.
//
Функция БлокировкаВидовПроверок(ПараметрыВыполненияПроверки)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ВидыПроверок");
	
	Если ПараметрыВыполненияПроверки.Количество() - 1 > КоличествоСвойств() Тогда
		Индекс = 1;
		Для Каждого ПараметрПоиска Из ПараметрыВыполненияПроверки Цикл
			ЭлементБлокировкиДанных.УстановитьЗначение("Свойство" + Формат(Индекс, "ЧГ=0"), ПараметрПоиска.Значение);
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат БлокировкаДанных;
	
КонецФункции

// Производит поиск вида проверки по переданным параметрам. 
//
// Параметры:
//   ПараметрыВыполненияПроверки - Структура - см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//   ПоискПоТочномуСоответствию - Булево - Если Истина, то поиск ведется
//                                по переданным свойствам на равенство, остальные свойства должны быть равны
//                                Неопределено (табличная часть дополнительных свойств должна быть пуста).
//                                Если Ложь, то значения остальных свойств могут быть произвольными, главное
//                                чтобы соответствующие свойства были равны свойствам структуры. По умолчанию Истина.
//
// Возвращаемое значение: 
//   СправочникСсылка.ВидыПроверок - элемент справочника, либо пустая ссылка, если поиск не дал результата.
//
Функция ОбычныйПоискВидаПроверки(ПараметрыВыполненияПроверки, ПоискПоТочномуСоответствию = Истина)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыПроверок.Ссылка КАК ВидПроверки
	|ИЗ
	|	Справочник.ВидыПроверок КАК ВидыПроверок
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыПроверок.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВидыПроверок.СвойстваОбъекта.Ссылка) = 0");
	
	ТекстУсловий         = " Истина ";
	КоличествоПараметров = ПараметрыВыполненияПроверки.Количество() - 1;
	КоличествоСвойств    = КоличествоСвойств();
	
	Для Индекс = 1 По КоличествоСвойств Цикл
		
		Свойство = "Свойство" + Формат(Индекс, "ЧГ=0");
		Если Индекс > КоличествоПараметров Тогда
			Если ПоискПоТочномуСоответствию Тогда
				ТекстУсловий = ТекстУсловий + " И " + Свойство + " = Неопределено";
			КонецЕсли;
		Иначе
			Значение     = ПараметрыВыполненияПроверки[Свойство];
			
			ТекстУсловий = ТекстУсловий + " И " + Свойство + " = &" + Свойство;
			Запрос.УстановитьПараметр(Свойство, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловий);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("ВидПроверки");
	
КонецФункции

// Создает элемент справочника ВидыПроверок по переданным параметрам.
//
// Параметры:
//   ПараметрыВыполненияПроверки - Структура - см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//
// Возвращаемое значение: 
//    СправочникСсылка.ВидыПроверок - созданный элемент справочника.
//
Функция НовыйВидПроверки(ПараметрыВыполненияПроверки)
	
	НовыйВидПроверки = Справочники.ВидыПроверок.СоздатьЭлемент();
	НовыйВидПроверки.Наименование = ПараметрыВыполненияПроверки.Наименование;
	КоличествоСвойств    = КоличествоСвойств();
	КоличествоПараметров = ПараметрыВыполненияПроверки.Количество() - 1;
	
	Если КоличествоСвойств > КоличествоПараметров Тогда
		Для Индекс = 1 По КоличествоПараметров Цикл
			ИмяСвойства = "Свойство" + Формат(Индекс, "ЧГ=0");
			НовыйВидПроверки[ИмяСвойства] = ПараметрыВыполненияПроверки[ИмяСвойства];
		КонецЦикла;
	Иначе
		Для Индекс = 1 По КоличествоПараметров Цикл
			ИмяСвойства = "Свойство" + Формат(Индекс, "ЧГ=0");
			Если Индекс <= КоличествоСвойств Тогда
				НовыйВидПроверки[ИмяСвойства] = ПараметрыВыполненияПроверки[ИмяСвойства];
			Иначе
				ЗаполнитьЗначенияСвойств(НовыйВидПроверки.СвойстваОбъекта.Добавить(),
					Новый Структура("ИмяСвойства, ЗначениеСвойства", ИмяСвойства, ПараметрыВыполненияПроверки[ИмяСвойства]));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НовыйВидПроверки.Записать();
	
	Возврат НовыйВидПроверки.Ссылка;
	
КонецФункции

// Количество свойств в шапке справочника ВидыПроверок.
// 
// Возвращаемое значение: 
//   Число - значение 5.
//
Функция КоличествоСвойств()
	
	Возврат 5;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочникаПроверокСлужебная

Процедура ОбновлениеСправочникаПроверок(ГруппыПроверок, Проверки)
	
	ПроверкаУникальностиЗаданныхЭлементов(ГруппыПроверок, Проверки);
	
	ДобавитьГруппыПроверок(ГруппыПроверок);
	ДобавитьПроверки(Проверки);
	
КонецПроцедуры

Процедура ДобавитьГруппыПроверок(ГруппыПроверок)
	
	Для Каждого ГруппаПроверок Из ГруппыПроверок Цикл
		
		ГруппаПроверокПоИдентификатору = КонтрольВеденияУчета.ПроверкаПоИдентификатору(ГруппаПроверок.Идентификатор);
		
		Если Не ЗначениеЗаполнено(ГруппаПроверокПоИдентификатору) Тогда
			ГруппаПроверокОбъект = Справочники.ПравилаПроверкиУчета.СоздатьГруппу();
		Иначе
			
			Если ГруппаПроверокПоИдентификатору.ПроверкаВеденияУчетаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаПроверокОбъект = ГруппаПроверокПоИдентификатору.ПолучитьОбъект();
			Если ГруппаПроверокПоИдентификатору.ПометкаУдаления Тогда
				ГруппаПроверокОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ГруппаПроверокОбъект, ГруппаПроверок);
		
		РодительГруппыПроверки        = КонтрольВеденияУчета.ПроверкаПоИдентификатору(ГруппаПроверок.ИдентификаторГруппы);
		ГруппаПроверокОбъект.Родитель = РодительГруппыПроверки;
		
		Если ЗначениеЗаполнено(РодительГруппыПроверки) Тогда
			ГруппаПроверокОбъект.КонтекстПроверокВеденияУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РодительГруппыПроверки, "КонтекстПроверокВеденияУчета");
		Иначе
			ГруппаПроверокОбъект.КонтекстПроверокВеденияУчета = ГруппаПроверок.КонтекстПроверокВеденияУчета;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаПроверокОбъект);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыПроверок.Идентификатор КАК Идентификатор,
	|	ГруппыПроверок.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_ГруппыПроверок
	|ИЗ
	|	&ГруппыПроверок КАК ГруппыПроверок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПроверкиУчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыПроверок КАК ВТ_ГруппыПроверок
	|		ПО ПравилаПроверкиУчета.Идентификатор = ВТ_ГруппыПроверок.Идентификатор
	|ГДЕ
	|	ВТ_ГруппыПроверок.Наименование ЕСТЬ NULL
	|	И ПравилаПроверкиУчета.ЭтоГруппа
	|	И НЕ ПравилаПроверкиУчета.Предопределенный
	|	И НЕ ПравилаПроверкиУчета.ПроверкаВеденияУчетаИзменена");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГруппыПроверок", ГруппыПроверок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ГруппаПроверокОбъект = Результат.Ссылка.ПолучитьОбъект();
		ГруппаПроверокОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ДобавитьПроверки(Проверки)
	
	Для Каждого Проверка Из Проверки Цикл
		
		ПроверкаПоИдентификатору = КонтрольВеденияУчета.ПроверкаПоИдентификатору(Проверка.Идентификатор);
		Если Не ЗначениеЗаполнено(ПроверкаПоИдентификатору) Тогда
			
			ПроверкаОбъект = Справочники.ПравилаПроверкиУчета.СоздатьЭлемент();
			ПроверкаОбъект.СпособВыполнения = Перечисления.СпособВыполненияПроверки.ПоОбщемуРасписанию;
			ПроверкаОбъект.ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.Ошибка;
			
		Иначе
			
			Если ПроверкаПоИдентификатору.ПроверкаВеденияУчетаИзменена Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверкаОбъект = ПроверкаПоИдентификатору.ПолучитьОбъект();
			Если ПроверкаПоИдентификатору.ПометкаУдаления Тогда
				ПроверкаОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПроверкаОбъект, Проверка);
		
		РодительПроверки        = КонтрольВеденияУчета.ПроверкаПоИдентификатору(Проверка.ИдентификаторГруппы);
		ПроверкаОбъект.Родитель = РодительПроверки;
		
		Если ЗначениеЗаполнено(РодительПроверки) Тогда
			ПроверкаОбъект.КонтекстПроверокВеденияУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РодительПроверки, "КонтекстПроверокВеденияУчета");
		Иначе
			ПроверкаОбъект.КонтекстПроверокВеденияУчета = Проверка.КонтекстПроверокВеденияУчета;
		КонецЕсли;
		
		ПроверкаОбъект.Использование = Истина;
		
		Если ЗначениеЗаполнено(Проверка.ЛимитПроблем) Тогда
			ПроверкаОбъект.ЛимитПроблем = Проверка.ЛимитПроблем;
		Иначе
			ПроверкаОбъект.ЛимитПроблем = 1000;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Проверка.ДатаНачалаПроверки) Тогда
			ПроверкаОбъект.ДатаНачалаПроверки = Проверка.ДатаНачалаПроверки;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроверкаОбъект);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Проверки.Идентификатор КАК Идентификатор,
	|	Проверки.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_Проверки
	|ИЗ
	|	&Проверки КАК Проверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПроверкиУчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК ПравилаПроверкиУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Проверки КАК ВТ_Проверки
	|		ПО ПравилаПроверкиУчета.Идентификатор = ВТ_Проверки.Идентификатор
	|ГДЕ
	|	ВТ_Проверки.Наименование ЕСТЬ NULL
	|	И НЕ ПравилаПроверкиУчета.ЭтоГруппа
	|	И НЕ ПравилаПроверкиУчета.Предопределенный
	|	И НЕ ПравилаПроверкиУчета.ПроверкаВеденияУчетаИзменена");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Проверки", Проверки);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ПроверкаОбъект = Результат.Ссылка.ПолучитьОбъект();
		ПроверкаОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбновитьВспомогательныеДанныеСправочникаПоИзменениямКонфигурации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверкиВеденияУчета = КонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета();
	ОбновлениеСправочникаПроверок(ПроверкиВеденияУчета.ГруппыПроверок, ПроверкиВеденияУчета.Проверки);
	
КонецПроцедуры

Процедура ПроверкаУникальностиЗаданныхЭлементов(ГруппыПроверок, Проверки)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Наименование КАК Наименование,
	|	Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ГруппыПроверок
	|ИЗ
	|	&ГруппыПроверок КАК ГруппыПроверок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Наименование КАК Наименование,
	|	Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_Проверки
	|ИЗ
	|	&Проверки КАК Проверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ГруппыПроверок.Наименование КАК Наименование,
	|	ВТ_ГруппыПроверок.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ОбщаяТаблица
	|ИЗ
	|	ВТ_ГруппыПроверок КАК ВТ_ГруппыПроверок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Проверки.Наименование,
	|	ВТ_Проверки.Идентификатор
	|ИЗ
	|	ВТ_Проверки КАК ВТ_Проверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщаяТаблица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ГруппировкаПоИдентификатору
	|ИЗ
	|	ВТ_ОбщаяТаблица КАК ВТ_ОбщаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОбщаяТаблица.Идентификатор
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ОбщаяТаблица.Идентификатор) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОбщаяТаблица.Наименование КАК Наименование,
	|	ВТ_ОбщаяТаблица.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТ_ГруппировкаПоИдентификатору КАК ВТ_ГруппировкаПоИдентификатору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбщаяТаблица КАК ВТ_ОбщаяТаблица
	|		ПО ВТ_ГруппировкаПоИдентификатору.Идентификатор = ВТ_ОбщаяТаблица.Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор
	|ИТОГИ ПО
	|	Идентификатор");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГруппыПроверок", ГруппыПроверок);
	Запрос.УстановитьПараметр("Проверки",       Проверки);
	
	ТекстИсключения = "";
	Результат       = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Результат.Следующий() Цикл
		
		ТекстИсключения = ТекстИсключения + ?(ЗначениеЗаполнено(ТекстИсключения), Символы.ПС, "")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дублирующийся идентификатор: ""%1""'"), Результат.Идентификатор);
			
		ДетальныйРезультат = Результат.Выбрать();
		Пока ДетальныйРезультат.Следующий() Цикл
			ТекстИсключения = ТекстИсключения + Символы.ПС + "- " + ДетальныйРезультат.Наименование;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Если ЗначениеЗаполнено(ТекстИсключения) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок у следующих проверок совпадают идентификаторы:
		|%1'"), ТекстИсключения);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует хэш таблицы проверок, для сравнения с предыдущим хешем,
// хранящимся в информационной базе (РегистрСведений.ПараметрыРаботыПрограммы).
// Хэш формируется следующим образом: Формируются таблицы проверок (будущие элементы справочника
// ПравилаПроверкиУчета)  и групп проверок (будущие группы указанного справочника) на текущий 
// момент (момент обновления информационной базы). Далее формируется массив структур, на основании
// которого рассчитывается фиксированное соответствие, от которого, в свою очередь, рассчитывается хэш-сумма.
//
// Возвращаемое значение:
//     ФиксированноеСоответствие - Фиксированное соответствие, содержащее указанную хэш-сумму.
//
Функция ХэшированиеСистемныхПроверок()
	
	ДанныеСистемныхПроверок = Новый Соответствие;
	
	ПроверкиВеденияУчета = КонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета();
	МассивХэша           = Новый Массив;
	
	Для Каждого ЭлементПроверокУчета Из ПроверкиВеденияУчета Цикл
		
		ЗначениеЭлементаПроверок = ЭлементПроверокУчета.Значение;
		КолонкиЭлементаПроверок  = ЗначениеЭлементаПроверок.Колонки;
		
		Для Каждого СтрокаЭлементаПроверок Из ЗначениеЭлементаПроверок Цикл
			
			СтруктураСтроки = Новый Структура;
			
			Для Каждого КолонкаЭлементаПроверок Из КолонкиЭлементаПроверок Цикл
				СтруктураСтроки.Вставить(КолонкаЭлементаПроверок.Имя, СтрокаЭлементаПроверок[КолонкаЭлементаПроверок.Имя]);
			КонецЦикла;
			
			Если СтруктураСтроки.Количество() > 0 Тогда
				МассивХэша.Добавить(СтруктураСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеСистемныхПроверок.Вставить(ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Новый ФиксированныйМассив(МассивХэша)));
	
	Возврат Новый ФиксированноеСоответствие(ДанныеСистемныхПроверок);
	
КонецФункции

#КонецОбласти

#Область КонтрольСсылочнойЦелостности

Процедура НайтиБитыеСсылки(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Реквизиты        = ОбъектМетаданных.Реквизиты;
	РеквизитыОбъекта = СсылочныеРеквизитыОбъекта(ОбъектМетаданных);
	РеквизитыТабличныхЧастейОбъекта = СсылочныеРеквизитыТабличныхЧастейОбъекта(ОбъектМетаданных);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Ссылка КАК ПроблемныйОбъект
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Ссылка > &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", "");
	
	Результат         = Запрос.Выполнить().Выгрузить();
	ОграничениеПоДате = ПараметрыПроверки.ДатаНачалаПроверки;
	
	Пока Результат.Количество() > 0 Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			СсылкаНаОбъект = СтрокаРезультата.ПроблемныйОбъект;
			
			Если ЗначениеЗаполнено(ОграничениеПоДате)
				И ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Дата") < ОграничениеПоДате Тогда
				Продолжить;
			КонецЕсли;
			
			УточнениеПроблемы = "";
			
			Ссылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, РеквизитыОбъекта);
			Для Каждого СсылочныйРеквизит Из Ссылки Цикл
				
				ТекущаяСсылка = СсылочныйРеквизит.Значение;
				Если Не ЗначениеЗаполнено(ТекущаяСсылка) Или Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				ОбнаруженаБитаяСсылка = КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено;
				Если Не ОбнаруженаБитаяСсылка И Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
					КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
					ОбнаруженаБитаяСсылка = Истина;
				КонецЕсли;
				
				Если ОбнаруженаБитаяСсылка Тогда
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='У объекта ""%1"" в реквизите ""%2"" указан несуществующий элемент: ""%3"".'"), 
							СсылкаНаОбъект, СсылочныйРеквизит.Ключ, ТекущаяСсылка);
				КонецЕсли;
					
			КонецЦикла;
					
			Если РеквизитыТабличныхЧастейОбъекта.Количество() <> 0 Тогда
				
				РезультатыЗапросовПоРеквизитамТЧ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, РеквизитыТабличныхЧастейОбъекта);
				Для Каждого РезультатЗапросаПоРеквизитамТЧ Из РезультатыЗапросовПоРеквизитамТЧ Цикл
					
					ТекущийРезультатЗапросаПоРеквизитамТЧ = РезультатЗапросаПоРеквизитамТЧ.Значение.Выгрузить();
					КолонкиТекущегоРезультата             = ТекущийРезультатЗапросаПоРеквизитамТЧ.Колонки;
					ТекущийНомерСтроки                    = 1;
					
					Для Каждого СтрокаТЧ Из ТекущийРезультатЗапросаПоРеквизитамТЧ Цикл
						
						Для Каждого ТекущаяКолонка Из КолонкиТекущегоРезультата Цикл
							
							ИмяРеквизитаТЧ = ТекущаяКолонка.Имя;
							ТекущаяСсылка = СтрокаТЧ[ИмяРеквизитаТЧ];
							Если Не ЗначениеЗаполнено(ТекущаяСсылка) Или Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Тогда
								Продолжить;
							КонецЕсли;
							
							ОбнаруженаБитаяСсылка = КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено;
							Если Не ОбнаруженаБитаяСсылка И Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
								КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
								ОбнаруженаБитаяСсылка = Истина;
							КонецЕсли;
							
							Если ОбнаруженаБитаяСсылка Тогда
								УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
									+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'У объекта ""%1"" в реквизите ""%2"" табличной части ""%3"" (строка № %4) указан несуществующий элемент: ""%5"".'"),
										СсылкаНаОбъект, ИмяРеквизитаТЧ, СтрЗаменить(РезультатЗапросаПоРеквизитамТЧ.Ключ, ИмяРеквизитаТЧ, ""), 
										ТекущийНомерСтроки, ТекущаяСсылка);
							КонецЕсли;
							
						КонецЦикла;
						
						ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПустаяСтрока(УточнениеПроблемы) Тогда
				Продолжить;
			КонецЕсли;
			
			Проблема = ОписаниеПроблемы(СсылкаНаОбъект, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = НСтр("ru = 'Нарушена ссылочная целостность:'") + Символы.ПС + УточнениеПроблемы;
			
			Если Реквизиты.Найти("Ответственный") <> Неопределено Тогда
				Проблема.Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Ответственный");
			КонецЕсли;
			
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаРезультата.ПроблемныйОбъект);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылочныеРеквизитыОбъекта(ОбъектМетаданных)
	
	Реквизиты      = ОбъектМетаданных.Реквизиты;
	ТабличныеЧасти = ОбъектМетаданных.ТабличныеЧасти;
	
	Результат = Новый Массив;
	
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если СодержитСсылочныйТип(СтандартныйРеквизит) Тогда
			Если СтандартныйРеквизит.Имя = "ТочкаМаршрута" Тогда
				Продолжить;
			КонецЕсли;
			Результат.Добавить(СтандартныйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если СодержитСсылочныйТип(Реквизит) Тогда
			Результат.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
		
		РеквизитыАдресации = ОбъектМетаданных.РеквизитыАдресации;
		Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл
			Если СодержитСсылочныйТип(РеквизитАдресации) Тогда
				Результат.Добавить(РеквизитАдресации.Имя);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылочныеРеквизитыТабличныхЧастейОбъекта(ОбъектМетаданных)
	
	Результат = Новый Массив;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
			Если СодержитСсылочныйТип(РеквизитТабличнойЧасти) Тогда
				Результат.Добавить(ТабличнаяЧасть.Имя + "." + РеквизитТабличнойЧасти.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СодержитСсылочныйТип(Реквизит)
	
	ТипыРеквизита = Реквизит.Тип.Типы();
	Для Каждого ТекущийТип Из ТипыРеквизита Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область КонтрольСсылочнойЦелостностиВРегистрах

Процедура НайтиБитыеСсылкиВРегистрах(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Если ОбъектМетаданных.Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных) Тогда
		НайтиБитыеСсылкиВРегистрахНакопления(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		НайтиБитыеСсылкиВРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		НайтиБитыеСсылкиВРегистрахБухгалтерии(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		НайтиБитыеСсылкиВРегистрахРасчета(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
	КонецЕсли;
	
КонецПроцедуры

#Область КонтрольСсылочнойЦелостностиВРегистрахНакопления

Процедура НайтиБитыеСсылкиВРегистрахНакопления(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Измерения = ОбъектМетаданных.Измерения;
	Реквизиты = ОбъектМетаданных.Реквизиты;
	
	ИнформацияОМетаданных = Новый ТаблицаЗначений;
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВИменительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВТворительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОМетаданных.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	
	ПоляВыборки = "НомерСтроки Как НомерСтроки, Регистратор Как РегистраторРеквизитСсылка, ПредставлениеСсылки(Регистратор) Как РегистраторРеквизитПредставление";
	ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
		Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), "Регистратор"));
	Для Каждого Измерение Из Измерения Цикл
		ИмяИзмерения = Измерение.Имя;
		ПоляВыборки = ПоляВыборки + "," + ИмяИзмерения + " Как " + ИмяИзмерения
			+ "ИзмерениеСсылка,ПредставлениеСсылки(" + ИмяИзмерения + ") Как " + ИмяИзмерения + "ИзмерениеПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Измерение", НСтр("ru = 'измерении'"), ИмяИзмерения));
	КонецЦикла;
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ПоляВыборки = ПоляВыборки + "," + ИмяРеквизита + " Как " + ИмяРеквизита
			+ "РеквизитСсылка,ПредставлениеСсылки(" + ИмяРеквизита + ") Как " + ИмяРеквизита + "РеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), ИмяРеквизита));
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОбъектМетаданных.Регистратор = &Регистратор
	|				ТОГДА ОбъектМетаданных.НомерСтроки > &НомерСтроки
	|			ИНАЧЕ ОбъектМетаданных.Регистратор > &Регистратор
	|		КОНЕЦ
	|	И ОбъектМетаданных.Период > &ДатаНачалаПроверки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Регистратор,
	|	ОбъектМетаданных.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ПолноеИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ПоляВыборки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НомерСтроки",        0);
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	Запрос.УстановитьПараметр("Регистратор",        "");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра накопления ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
							СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра накопления ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
								СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				СтруктураНабораЗаписей.Вставить("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаРезультата["НомерСтроки"]);
		Запрос.УстановитьПараметр("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область КонтрольСсылочнойЦелостностиВРегистрахСведений

Процедура НайтиБитыеСсылкиВРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Измерения = ОбъектМетаданных.Измерения;
	Ресурсы   = ОбъектМетаданных.Ресурсы;
	Реквизиты = ОбъектМетаданных.Реквизиты;
	
	ИнформацияОМетаданных = Новый ТаблицаЗначений;
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВИменительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВТворительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОМетаданных.Колонки.Добавить("ИмяМетаданных",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	
	ПоляВыборки = "";
	Для Каждого Измерение Из Измерения Цикл
		ИмяИзмерения = Измерение.Имя;
		ПоляВыборки  = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяИзмерения + " Как " + ИмяИзмерения
			+ "ИзмерениеСсылка,ПредставлениеСсылки(" + ИмяИзмерения + ") Как " + ИмяИзмерения + "ИзмерениеПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Измерение", НСтр("ru = 'измерении'"), ИмяИзмерения));
		КонецЦикла;
		
	Для Каждого Ресурс Из Ресурсы Цикл
		ИмяРесурса  = Ресурс.Имя;
		ПоляВыборки = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяРесурса + " Как " + ИмяРесурса
			+ "РесурсСсылка,ПредставлениеСсылки(" + ИмяРесурса + ") Как " + ИмяРесурса + "РесурсПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Ресурс", НСтр("ru = 'ресурсе'"), ИмяРесурса));
	КонецЦикла;
		
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ПоляВыборки = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяРеквизита + " Как " + ИмяРеквизита
			+ "РеквизитСсылка,ПредставлениеСсылки(" + ИмяРеквизита + ") Как " + ИмяРеквизита + "РеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), ИмяРеквизита));
	КонецЦикла;
	
	Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		НайтиБитыеСсылкиВПодчиненныхРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
	Иначе
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НайтиБитыеСсылкиВНеПодчиненныхПериодическихРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
		Иначе
			НайтиБитыеСсылкиВНеПодчиненныхНеПериодическихРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиБитыеСсылкиВПодчиненныхРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	ПоляВыборки = ПоляВыборки + ", НомерСтроки Как НомерСтроки, Регистратор Как РегистраторРеквизитСсылка, ПредставлениеСсылки(Регистратор) Как РегистраторРеквизитПредставление";
	ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
		Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), "Регистратор"));
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОбъектМетаданных.Регистратор = &Регистратор
	|				ТОГДА ОбъектМетаданных.НомерСтроки > &НомерСтроки
	|			ИНАЧЕ ОбъектМетаданных.Регистратор > &Регистратор
	|		КОНЕЦ
	|	И &Периодичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Регистратор,
	|	ОбъектМетаданных.НомерСтроки");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ПоляВыборки", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", ПоляВыборки);
	
	Запрос.УстановитьПараметр("НомерСтроки", 0);
	Запрос.УстановитьПараметр("Регистратор", "");
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Периодичность", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Периодичность", "ОбъектМетаданных.Период > &ДатаНачалаПроверки");
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
							СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
								СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				СтруктураНабораЗаписей.Вставить("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаРезультата["НомерСтроки"]);
		Запрос.УстановитьПараметр("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиБитыеСсылкиВНеПодчиненныхПериодическихРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Условие            = "Период >= &Период";
	ПоляУпорядочивания = "Период";
	Измерения          = ОбъектМетаданных.Измерения;
	
	Для Каждого Измерение Из Измерения Цикл
		Условие            = Условие + ?(ЗначениеЗаполнено(Условие), " И ", "") + Измерение.Имя + " >= &" + Измерение.Имя;
		ПоляУпорядочивания = ПоляУпорядочивания + ?(ЗначениеЗаполнено(ПоляУпорядочивания), ", ", "") + Измерение.Имя;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Период КАК Период,
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Период > &ДатаНачалаПроверки
	|	И &Условие";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "Истина И Истина И Истина Упорядочить По " + ПоляУпорядочивания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ПоляВыборки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	
	Результат       = Запрос.Выполнить().Выгрузить();
	УсловиеАбсолюта = "Истина И Истина И Истина";
	
	Пока Истина Цикл
		
		ЭтоПервыйПроход = СтрНайти(Запрос.Текст, УсловиеАбсолюта) <> 0;
		
		Если Результат.Количество() = 0 Или (Не ЭтоПервыйПроход И Результат.Количество() = 1) Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Если Не ЭтоПервыйПроход И Результат.Индекс(СтрокаРезультата) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, по комбинации измерений ""%3"" указан несуществующий элемент: ""%4"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							ПоляУпорядочивания, СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
					
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, по комбинации измерений ""%3"" указан несуществующий элемент: ""%4"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								ПоляУпорядочивания, СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				СтруктураНабораЗаписей.Вставить("Период", СтрокаРезультата["Период"]);
				Для Каждого Измерение Из Измерения Цикл
					ИзмерениеСсылка = СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"];
					Если КэшБитыхСсылок.Получить(ИзмерениеСсылка) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНабораЗаписей.Вставить(Измерение.Имя, ИзмерениеСсылка);
				КонецЦикла;
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЭтоПервыйПроход Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеАбсолюта, Условие);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", СтрокаРезультата["Период"]);
		Для Каждого Измерение Из Измерения Цикл
			Запрос.УстановитьПараметр(Измерение.Имя, СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"]);
		КонецЦикла;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиБитыеСсылкиВНеПодчиненныхНеПериодическихРегистрахСведений(ОбъектМетаданных, ПоляВыборки, ИнформацияОМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Условие            = "";
	ПоляУпорядочивания = "";
	Измерения          = ОбъектМетаданных.Измерения;
	
	Для Каждого Измерение Из Измерения Цикл
		Условие            = Условие + ?(ЗначениеЗаполнено(Условие), " И ", "") + Измерение.Имя + " >= &" + Измерение.Имя;
		ПоляУпорядочивания = ПоляУпорядочивания + ?(ЗначениеЗаполнено(ПоляУпорядочивания), ", ", "") + Измерение.Имя;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	&Условие";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие",          "ИСТИНА УПОРЯДОЧИТЬ ПО " + ПоляУпорядочивания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки",   "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки",      ПоляВыборки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат       = Запрос.Выполнить().Выгрузить();
	УсловиеАбсолюта = "ГДЕ" + Символы.ПС + Символы.Таб + "ИСТИНА";
	
	Пока Истина Цикл
		
		ЭтоПервыйПроход = СтрНайти(Запрос.Текст, УсловиеАбсолюта) <> 0;
		
		Если Результат.Количество() = 0 Или (Не ЭтоПервыйПроход И Результат.Количество() = 1) Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Если Не ЭтоПервыйПроход И Результат.Индекс(СтрокаРезультата) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, по комбинации измерений ""%3"" указан несуществующий элемент: ""%4"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							ПоляУпорядочивания, СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра сведений ""%1"" в %2, по комбинации измерений ""%3"" указан несуществующий элемент: ""%4"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								ПоляУпорядочивания, СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				Для Каждого Измерение Из Измерения Цикл
					ИзмерениеСсылка = СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"];
					Если КэшБитыхСсылок.Получить(ИзмерениеСсылка) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНабораЗаписей.Вставить(Измерение.Имя, ИзмерениеСсылка);
				КонецЦикла;
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЭтоПервыйПроход Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеАбсолюта, "Где " + Условие);
		КонецЕсли;
		
		Для Каждого Измерение Из Измерения Цикл
			Запрос.УстановитьПараметр(Измерение.Имя, СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"]);
		КонецЦикла;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольСсылочнойЦелостностиВРегистрахБухгалтерии

Процедура НайтиБитыеСсылкиВРегистрахБухгалтерии(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	Измерения            = ОбъектМетаданных.Измерения;
	Реквизиты            = ОбъектМетаданных.Реквизиты;
	СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
	
	МаксимальноеКоличествоСубконто = ОбъектМетаданных.ПланСчетов.МаксКоличествоСубконто;
	КорреспонденцияОбъекта         = ОбъектМетаданных.Корреспонденция;
	
	ИнформацияОМетаданных = Новый ТаблицаЗначений;
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВИменительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(64)));
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВТворительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(64)));
	ИнформацияОМетаданных.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	
	ПоляВыборки = "НомерСтроки Как НомерСтроки, Регистратор Как РегистраторРеквизитСсылка, ПредставлениеСсылки(Регистратор) Как РегистраторРеквизитПредставление";
	ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
		Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), "Регистратор"));
		
	Для ИндексСубконто = 1 По МаксимальноеКоличествоСубконто Цикл
	
		Если КорреспонденцияОбъекта Тогда
	
			ИндексСтрокой = Формат(ИндексСубконто, "ЧГ=0");
			
			ИмяСубконтоДт = "СубконтоДт" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяСубконтоДт + " Как " + ИмяСубконтоДт
				+ "СубконтоДтСсылка,ПредставлениеСсылки(" + ИмяСубконтоДт + ") Как " + ИмяСубконтоДт + "СубконтоДтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СубконтоДт",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'субконто дт %1'"), ИндексСтрокой), ИмяСубконтоДт));
				
			ИмяСубконтоКт = "СубконтоКт" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяСубконтоКт + " Как " + ИмяСубконтоКт
				+ "СубконтоКтСсылка,ПредставлениеСсылки(" + ИмяСубконтоКт + ") Как " + ИмяСубконтоКт + "СубконтоКтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СубконтоКт",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'субконто кт %1'"), ИндексСтрокой), ИмяСубконтоКт));
				
			ИмяВидаСубконтоДт = "ВидСубконтоДт" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяВидаСубконтоДт + " Как " + ИмяВидаСубконтоДт
				+ "ВидСубконтоДтСсылка,ПредставлениеСсылки(" + ИмяВидаСубконтоДт + ") Как " + ИмяВидаСубконтоДт + "ВидСубконтоДтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "ВидСубконтоДт",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'виде субконто дт %1'"), ИндексСтрокой), ИмяВидаСубконтоДт));
				
			ИмяВидаСубконтоКт = "ВидСубконтоКт" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяВидаСубконтоКт + " Как " + ИмяВидаСубконтоКт
				+ "ВидСубконтоКтСсылка,ПредставлениеСсылки(" + ИмяВидаСубконтоКт + ") Как " + ИмяВидаСубконтоКт + "ВидСубконтоКтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "ВидСубконтоКт",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'виде субконто кт %1'"), ИндексСтрокой), ИмяВидаСубконтоКт));
	
		Иначе
	
			ИмяСубконто = "Субконто" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяСубконто + " Как " + ИмяСубконто
				+ "СубконтоСсылка,ПредставлениеСсылки(" + ИмяСубконто + ") Как " + ИмяСубконто + "СубконтоПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Субконто",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'субконто %1'"), ИндексСтрокой), ИмяСубконто));
				
			ИмяВидаСубконто = "ВидСубконто" + ИндексСтрокой;
			ПоляВыборки = ПоляВыборки + "," + ИмяВидаСубконто + " Как " + ИмяВидаСубконто
				+ "ВидСубконтоСсылка,ПредставлениеСсылки(" + ИмяВидаСубконто + ") Как " + ИмяВидаСубконто + "ВидСубконтоПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "ВидСубконто",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'виде субконто %1'"), ИндексСтрокой), ИмяВидаСубконто));
	
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорреспонденцияОбъекта Тогда
		
		ИмяСчетаДт = "СчетДт";
		ПоляВыборки = ПоляВыборки + "," + ИмяСчетаДт + " Как " + ИмяСчетаДт
			+ "СчетДтСсылка,ПредставлениеСсылки(" + ИмяСчетаДт + ") Как " + ИмяСчетаДт + "СчетДтПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СчетДт",
			НСтр("ru = 'счете дт'"), ИмяСчетаДт));
			
		ИмяСчетаКт = "СчетКт";
		ПоляВыборки = ПоляВыборки + "," + ИмяСчетаКт + " Как " + ИмяСчетаКт
			+ "СчетКтСсылка,ПредставлениеСсылки(" + ИмяСчетаКт + ") Как " + ИмяСчетаКт + "СчетКтПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СчетКт",
			НСтр("ru = 'счете кт'"), ИмяСчетаКт));
		
	Иначе
		
		ИмяСчета = "Счет";
		ПоляВыборки = ПоляВыборки + "," + ИмяСчета + " Как " + ИмяСчета
			+ "ИмяСчетаСсылка,ПредставлениеСсылки(" + ИмяСчета + ") Как " + ИмяСчета + "ИмяСчетаПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Счет",
			НСтр("ru = 'счете'"), ИмяСчета));
		
	КонецЕсли;
		
	Для Каждого Измерение Из Измерения Цикл
		
		Если Не (Измерение.Балансовый Или Не КорреспонденцияОбъекта) Тогда
			
			ИмяИзмеренияДт = Измерение.Имя + "Дт";
			ПоляВыборки = ПоляВыборки + "," + ИмяИзмеренияДт + " Как " + ИмяИзмеренияДт
				+ "ИзмерениеДтСсылка,ПредставлениеСсылки(" + ИмяИзмеренияДт + ") Как " + ИмяИзмеренияДт + "ИзмерениеДтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "ИзмерениеДт", НСтр("ru = 'измерении дт'"), ИмяИзмеренияДт));
				
			ИмяИзмеренияКт = Измерение.Имя + "Кт";
			ПоляВыборки = ПоляВыборки + "," + ИмяИзмеренияКт + " Как " + ИмяИзмеренияКт
				+ "ИзмерениеКтСсылка,ПредставлениеСсылки(" + ИмяИзмеренияКт + ") Как " + ИмяИзмеренияКт + "ИзмерениеКтПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "ИзмерениеКт", НСтр("ru = 'измерении кт'"), ИмяИзмеренияКт));
				
		Иначе
				
			ИмяИзмерения = Измерение.Имя;
			ПоляВыборки = ПоляВыборки + "," + ИмяИзмерения + " Как " + ИмяИзмерения
				+ "ИзмерениеСсылка,ПредставлениеСсылки(" + ИмяИзмерения + ") Как " + ИмяИзмерения + "ИзмерениеПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Измерение", НСтр("ru = 'измерении'"), ИмяИзмерения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ПоляВыборки = ПоляВыборки + "," + ИмяРеквизита + " Как " + ИмяРеквизита
			+ "РеквизитСсылка,ПредставлениеСсылки(" + ИмяРеквизита + ") Как " + ИмяРеквизита + "РеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), ИмяРеквизита));
		КонецЦикла;
		
	Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
			
		ИмяСтандартногоРеквизита = СтандартныйРеквизит.Имя;
		Если ИмяСтандартногоРеквизита = "Регистратор" Или ИмяСтандартногоРеквизита = "НомерСтроки" Или СтрНайти(ИмяСтандартногоРеквизита, "Субконто") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляВыборки = ПоляВыборки + "," + ИмяСтандартногоРеквизита + " Как " + ИмяСтандартногоРеквизита
			+ "СтандартныйРеквизитСсылка,ПредставлениеСсылки(" + ИмяСтандартногоРеквизита + ") Как " + ИмяСтандартногоРеквизита + "СтандартныйРеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СтандартныйРеквизит", НСтр("ru = 'стандартном реквизите'"), ИмяСтандартногоРеквизита));
			
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Регистратор,
	|	ОбъектМетаданных.НомерСтроки");
	
	Условие =
	"Период > &ДатаНачалаПроверки
	|И ВЫБОР
	|		КОГДА Регистратор = &Регистратор
	|				ТОГДА НомерСтроки > &НомерСтроки
	|			ИНАЧЕ Регистратор > &Регистратор
	|		КОНЕЦ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ПоляВыборки", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя() + ".ДвиженияССубконто(, , " + Условие + ", , )");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", ПоляВыборки);
	
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	Запрос.УстановитьПараметр("НомерСтроки",        0);
	Запрос.УстановитьПараметр("Регистратор",        "");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра бухгалтерии ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
							СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
					
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра бухгалтерии ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
								СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				СтруктураНабораЗаписей.Вставить("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаРезультата["НомерСтроки"]);
		Запрос.УстановитьПараметр("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольСсылочнойЦелостностиВРегистрахРасчета

Процедура НайтиБитыеСсылкиВРегистрахРасчета(ОбъектМетаданных, ПараметрыПроверки, КэшБитыхСсылок)
	
	ПолноеИмя            = ОбъектМетаданных.ПолноеИмя();
	Измерения            = ОбъектМетаданных.Измерения;
	Реквизиты            = ОбъектМетаданных.Реквизиты;
	СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
	
	ИнформацияОМетаданных = Новый ТаблицаЗначений;
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВИменительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(64)));
	ИнформацияОМетаданных.Колонки.Добавить("ТипМетаданныхВТворительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(64)));
	ИнформацияОМетаданных.Колонки.Добавить("ИмяМетаданных", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	
	ПоляВыборки = "НомерСтроки Как НомерСтроки, Регистратор Как РегистраторРеквизитСсылка, ПредставлениеСсылки(Регистратор) Как РегистраторРеквизитПредставление";
	ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
		Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), "Регистратор"));
	Для Каждого Измерение Из Измерения Цикл
		ИмяИзмерения = Измерение.Имя;
		ПоляВыборки = ПоляВыборки + "," + ИмяИзмерения + " Как " + ИмяИзмерения
			+ "ИзмерениеСсылка,ПредставлениеСсылки(" + ИмяИзмерения + ") Как " + ИмяИзмерения + "ИзмерениеПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Измерение", НСтр("ru = 'измерении'"), ИмяИзмерения));
	КонецЦикла;
		
	Для Каждого Реквизит Из Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ПоляВыборки = ПоляВыборки + "," + ИмяРеквизита + " Как " + ИмяРеквизита
			+ "РеквизитСсылка,ПредставлениеСсылки(" + ИмяРеквизита + ") Как " + ИмяРеквизита + "РеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "Реквизит", НСтр("ru = 'реквизите'"), ИмяРеквизита));
	КонецЦикла;
		
	Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		
		ИмяСтандартногоРеквизита = СтандартныйРеквизит.Имя;
		
		Если ИмяСтандартногоРеквизита = "Регистратор" Или ИмяСтандартногоРеквизита = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляВыборки = ПоляВыборки + "," + ИмяСтандартногоРеквизита + " Как " + ИмяСтандартногоРеквизита
			+ "СтандартныйРеквизитСсылка,ПредставлениеСсылки(" + ИмяСтандартногоРеквизита + ") Как " + ИмяСтандартногоРеквизита + "СтандартныйРеквизитПредставление";
		ЗаполнитьЗначенияСвойств(ИнформацияОМетаданных.Добавить(),
			Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", "СтандартныйРеквизит", НСтр("ru = 'стандартном реквизите'"), ИмяСтандартногоРеквизита));
			
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОбъектМетаданных.Регистратор = &Регистратор
	|				ТОГДА ОбъектМетаданных.НомерСтроки > &НомерСтроки
	|			ИНАЧЕ ОбъектМетаданных.Регистратор > &Регистратор
	|		КОНЕЦ
	|	И ОбъектМетаданных.ПериодРегистрации > &ДатаНачалаПроверки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Регистратор,
	|	ОбъектМетаданных.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ПолноеИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ПоляВыборки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НомерСтроки",        0);
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	Запрос.УстановитьПараметр("Регистратор",        "");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Для Каждого ПодчиненныйОбъект Из ИнформацияОМетаданных Цикл
				
				ТекущаяСсылка     = СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Ссылка"];
				УточнениеПроблемы = "";
				
				Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ТекущаяСсылка) Или Не ЗначениеЗаполнено(ТекущаяСсылка) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшБитыхСсылок.Получить(ТекущаяСсылка) <> Неопределено Тогда
					
					УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра расчета ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
							ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
							Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
							СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
					
				Иначе
					
					Если Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСсылка) Тогда
						
						УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У регистра расчета ""%1"" в %2, записи №%3 по регистратору ""%4"" указан несуществующий элемент: ""%5"".'"),
								ОбъектМетаданных.Представление(), ПодчиненныйОбъект.ТипМетаданныхВТворительномПадеже,
								Формат(СтрокаРезультата.НомерСтроки, "ЧГ=0"), СтрокаРезультата["РегистраторРеквизитПредставление"],
								СтрокаРезультата[ПодчиненныйОбъект.ИмяМетаданных + ПодчиненныйОбъект.ТипМетаданныхВИменительномПадеже + "Представление"]);
						КэшБитыхСсылок.Вставить(ТекущаяСсылка, "");
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураНабораЗаписей = Новый Структура;
				СтруктураНабораЗаписей.Вставить("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
				
				Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы        = НСтр("ru = 'Обнаружено нарушение ссылочной целостности:'") + Символы.ПС + УточнениеПроблемы;
				Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаРезультата["НомерСтроки"]);
		Запрос.УстановитьПараметр("Регистратор", СтрокаРезультата["РегистраторРеквизитСсылка"]);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПроверкаЗаполненностиОбязательныхРеквизитов

Процедура НайтиНезаполненныеОбязательныеРеквизиты(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Реквизиты = ОбъектМетаданных.Реквизиты;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Ссылка КАК ПроблемныйОбъект
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Ссылка > &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ПолноеИмя);
	Запрос       = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", "");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОграничениеПоДате = ПараметрыПроверки.ДатаНачалаПроверки;
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			СсылкаНаОбъект = СтрокаРезультата.ПроблемныйОбъект;
			
			Если ЗначениеЗаполнено(ОграничениеПоДате)
				И ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Дата") < ОграничениеПоДате Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Проведен") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) И СсылкаНаОбъект.ЭтотУзел Тогда
				Продолжить;
			КонецЕсли;
			
			УточнениеПроблемы = "";
			ПроверяемыйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Не ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда
				УточнениеПроблемы = УточнениеПроблемы(ПолучитьСообщенияПользователю(Истина));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
				Продолжить;
			КонецЕсли;
			
			Проблема = ОписаниеПроблемы(СсылкаНаОбъект, ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы = НСтр("ru = 'Не заполнены реквизиты, обязательные к заполнению:'") + Символы.ПС + УточнениеПроблемы;
			Если Реквизиты.Найти("Ответственный") <> Неопределено Тогда
				Проблема.Вставить("Ответственный", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Ответственный"));
			КонецЕсли;
			
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаРезультата.ПроблемныйОбъект);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиНезаполненныеОбязательныеРеквизитыВРегистрах(ОбъектМетаданных, ПараметрыПроверки)
	
	Если ОбъектМетаданных.Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НайтиНезаполненныеОбязательныеРеквизитыВПодчиненныхПериодическихРегистрах(ОбъектМетаданных, ПараметрыПроверки);
			Иначе
				НайтиНезаполненныеОбязательныеРеквизитыВПодчиненныхНепериодическихРегистрах(ОбъектМетаданных, ПараметрыПроверки);
			КонецЕсли;
		Иначе	
			Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НайтиНезаполненныеОбязательныеРеквизитыВНезависимыхПериодическихРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки);
			Иначе
				НайтиНезаполненныеОбязательныеРеквизитыВНезависимыхНепериодическихРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных)
		Или ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		
		НайтиНезаполненныеОбязательныеРеквизитыВПодчиненныхНепериодическихРегистрах(ОбъектМетаданных, ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиНезаполненныеОбязательныеРеквизитыВПодчиненныхПериодическихРегистрах(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Если ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектМетаданных.Регистратор КАК РегистраторРеквизитСсылка,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Регистратор) КАК РегистраторПредставление,
		|	ОбъектМетаданных.ПериодРегистрации КАК Период
		|ИЗ
		|	&ОбъектМетаданных КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.ПериодРегистрации > &ДатаНачалаПроверки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектМетаданных.ПериодРегистрации,
		|	ОбъектМетаданных.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектМетаданных.ПериодРегистрации");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", ПолноеИмя);
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
		
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектМетаданных.Регистратор КАК РегистраторРеквизитСсылка,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Регистратор) КАК РегистраторПредставление,
		|	ОбъектМетаданных.Период КАК Период
		|ИЗ
		|	&ОбъектМетаданных КАК ОбъектМетаданных
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектМетаданных.Период,
		|	ОбъектМетаданных.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектМетаданных.Период");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", 
			ПолноеИмя + ".ДвиженияССубконто(, , Период > &ДатаНачалаПроверки И Регистратор > &Регистратор, , )");
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ОбъектМетаданных.Регистратор КАК РегистраторРеквизитСсылка,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Регистратор) КАК РегистраторПредставление,
		|	ОбъектМетаданных.Период КАК Период
		|ИЗ
		|	&ОбъектМетаданных КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Период > &ДатаНачалаПроверки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектМетаданных.Период,
		|	ОбъектМетаданных.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектМетаданных.Период");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", ПолноеИмя);
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
		
	КонецЕсли;
	
	Результат        = Запрос.Выполнить().Выгрузить();
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	Пока Результат.Количество() > 0 Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			ТекущийНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			ТекущийНаборЗаписей.Отбор.Регистратор.Установить(СтрокаРезультата.РегистраторРеквизитСсылка);
			ТекущийНаборЗаписей.Прочитать();
			
			УточнениеПроблемы = "";
			Если ТекущийНаборЗаписей.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
				
			ДополнительнаяИнформация = Новый Структура;
			ДополнительнаяИнформация.Вставить("Регистратор", СтрокаРезультата.РегистраторРеквизитСсылка);
			
			Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У записи с полями:
				|%1,
				|обнаружены незаполненные данные, обязательные к заполнению: %2'"),
				" • " + НСтр("ru = 'Регистратор:'") + " = """ + СтрокаРезультата.РегистраторПредставление, Символы.ПС + ОшибкиЗаполненияОбъекта());
			Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(ДополнительнаяИнформация);
			
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДатаНачалаПроверки", СтрокаРезультата.Период);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиНезаполненныеОбязательныеРеквизитыВПодчиненныхНепериодическихРегистрах(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Регистратор КАК РегистраторРеквизитСсылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Регистратор) КАК РегистраторПредставление
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Регистратор > &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектМетаданных.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Регистратор");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОбъектМетаданных", ПолноеИмя);
	Запрос.УстановитьПараметр("Регистратор", "");
	
	Результат        = Запрос.Выполнить().Выгрузить();
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	Пока Результат.Количество() > 0 Цикл
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			ТекущийНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			ТекущийНаборЗаписей.Отбор.Регистратор.Установить(СтрокаРезультата.РегистраторРеквизитСсылка);
			ТекущийНаборЗаписей.Прочитать();
			
			Если ТекущийНаборЗаписей.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			
			ДополнительнаяИнформация = Новый Структура;
			ДополнительнаяИнформация.Вставить("Регистратор", СтрокаРезультата.РегистраторРеквизитСсылка);
			
			Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У записи с полями:
				|%1,
				|обнаружены незаполненные данные, обязательные к заполнению: %2'"),
				" • " + НСтр("ru = 'Регистратор:'") + " = """ + СтрокаРезультата.РегистраторПредставление, Символы.ПС + ОшибкиЗаполненияОбъекта());
			Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(ДополнительнаяИнформация);
			
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Регистратор", СтрокаРезультата.РегистраторРеквизитСсылка);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиНезаполненныеОбязательныеРеквизитыВНезависимыхНепериодическихРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
	МенеджерРегистра    = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Условие            = "";
	ПоляУпорядочивания = "";
	Измерения          = ОбъектМетаданных.Измерения;
	
	Для Каждого Измерение Из Измерения Цикл
		Условие            = Условие + ?(ЗначениеЗаполнено(Условие), " И ", "") + Измерение.Имя + " >= &" + Измерение.Имя;
		ПоляУпорядочивания = ПоляУпорядочивания + ?(ЗначениеЗаполнено(ПоляУпорядочивания), ", ", "") + Измерение.Имя;
	КонецЦикла;
	
	ПоляВыборки = ИнформацияОНезависимомРегистре(ОбъектМетаданных, Истина, Ложь, Ложь).ПоляВыборки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	&Условие";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие",          "ИСТИНА УПОРЯДОЧИТЬ ПО " + ПоляУпорядочивания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки",   "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки",      ПоляВыборки);
	
	Запрос    = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить().Выгрузить();
	
	УсловиеПервогоПрохода = "ГДЕ" + Символы.ПС + Символы.Таб + "ИСТИНА";
	Пока Результат.Количество() > 0 Цикл
		
		ЭтоПервыйПроход = СтрНайти(Запрос.Текст, УсловиеПервогоПрохода) <> 0;
		Если Не ЭтоПервыйПроход И Результат.Количество() = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			Если Не ЭтоПервыйПроход И Результат.Индекс(СтрокаРезультата) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			ОтборТекущегоНабора = ТекущийНаборЗаписей.Отбор;
			
			ПредставлениеОтбораНабораЗаписей = "";
			Для Каждого Измерение Из Измерения Цикл
				
				ИмяИзмерения      = Измерение.Имя;
				ЗначениеИзмерения = СтрокаРезультата[ИмяИзмерения + "ИзмерениеСсылка"];
				Если Не ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборТекущегоНабора[ИмяИзмерения].Установить(ЗначениеИзмерения);
				
				ПредставлениеОтбораНабораЗаписей = ПредставлениеОтбораНабораЗаписей + ?(ЗначениеЗаполнено(ПредставлениеОтбораНабораЗаписей), Символы.ПС, "")
					+ " • " + ИмяИзмерения + " = """ + СтрокаРезультата[ИмяИзмерения + "ИзмерениеПредставление"] + """";
				
			КонецЦикла;
			ТекущийНаборЗаписей.Прочитать();
			
			Если ТекущийНаборЗаписей.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			
			ДополнительнаяИнформация = Новый Структура;
			Для Каждого Измерение Из Измерения Цикл
				ИзмерениеСсылка = СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"];
				ДополнительнаяИнформация.Вставить(Измерение.Имя, ИзмерениеСсылка);
			КонецЦикла;
			
			Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У записи с полями:
				|%1,
				|обнаружены незаполненные данные, обязательные к заполнению: %2'"), ПредставлениеОтбораНабораЗаписей, Символы.ПС + ОшибкиЗаполненияОбъекта());
			Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(ДополнительнаяИнформация);
			
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Если ЭтоПервыйПроход Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеПервогоПрохода, "Где " + Условие);
		КонецЕсли;
		
		Для Каждого Измерение Из Измерения Цикл
			Запрос.УстановитьПараметр(Измерение.Имя, СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"]);
		КонецЦикла;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиНезаполненныеОбязательныеРеквизитыВНезависимыхПериодическихРегистрахСведений(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя          = ОбъектМетаданных.ПолноеИмя();
	МенеджерРегистра   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Условие            = "Период >= &Период";
	ПоляУпорядочивания = "Период";
	Измерения          = ОбъектМетаданных.Измерения;
	
	Для Каждого Измерение Из Измерения Цикл
		Условие            = Условие + ?(ЗначениеЗаполнено(Условие), " И ", "") + Измерение.Имя + " >= &" + Измерение.Имя;
		ПоляУпорядочивания = ПоляУпорядочивания + ?(ЗначениеЗаполнено(ПоляУпорядочивания), ", ", "") + Измерение.Имя;
	КонецЦикла;
	
	ПоляВыборки = ИнформацияОНезависимомРегистре(ОбъектМетаданных, Истина, Ложь, Ложь).ПоляВыборки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Период КАК Период,
	|	&ПоляВыборки КАК ПоляВыборки
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Период > &ДатаНачалаПроверки
	|	И &Условие";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие",          "Истина И Истина И Истина Упорядочить По " + ПоляУпорядочивания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ПоляВыборки",   "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ОбъектМетаданных.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки",      ПоляВыборки);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	УсловиеПервогоПрохода = "Истина И Истина И Истина";
	Пока Результат.Количество() > 0 Цикл
		
		ЭтоПервыйПроход = СтрНайти(Запрос.Текст, УсловиеПервогоПрохода) <> 0;
		Если Не ЭтоПервыйПроход И Результат.Количество() = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			ТекущийНаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			ОтборТекущегоНабора = ТекущийНаборЗаписей.Отбор;
			
			ПредставлениеОтбораНабораЗаписей = " • Период = """ + СтрокаРезультата.Период + """";
			Для Каждого Измерение Из Измерения Цикл
				
				ИмяИзмерения      = Измерение.Имя;
				ЗначениеИзмерения = СтрокаРезультата[ИмяИзмерения + "ИзмерениеСсылка"];
				Если Не ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					Продолжить;
				КонецЕсли;
				
				ОтборТекущегоНабора[ИмяИзмерения].Установить(ЗначениеИзмерения);
				
				ПредставлениеОтбораНабораЗаписей = ПредставлениеОтбораНабораЗаписей + Символы.ПС
					+ " • " + ИмяИзмерения + " = """ + СтрокаРезультата[ИмяИзмерения + "ИзмерениеПредставление"] + """";
				
			КонецЦикла;
			ТекущийНаборЗаписей.Прочитать();
			
			УточнениеПроблемы = "";
			Если Не ТекущийНаборЗаписей.ПроверитьЗаполнение() Тогда
				УточнениеПроблемы = ОшибкиЗаполненияОбъекта();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураНабораЗаписей = Новый Структура;
			СтруктураНабораЗаписей.Вставить("Период", СтрокаРезультата["Период"]);
			Для Каждого Измерение Из Измерения Цикл
				ИзмерениеСсылка = СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"];
				СтруктураНабораЗаписей.Вставить(Измерение.Имя, ИзмерениеСсылка);
			КонецЦикла;
			
			Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
			
			Проблема.УточнениеПроблемы        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У записи с полями:
				|%1,
				|обнаружены незаполненные данные, обязательные к заполнению: %2'"), ПредставлениеОтбораНабораЗаписей, Символы.ПС + УточнениеПроблемы);
			Проблема.ДополнительнаяИнформация = Новый ХранилищеЗначения(СтруктураНабораЗаписей);
			ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
		Если ЭтоПервыйПроход Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, УсловиеПервогоПрохода, Условие);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", СтрокаРезультата["Период"]);
		Для Каждого Измерение Из Измерения Цикл
			Запрос.УстановитьПараметр(Измерение.Имя, СтрокаРезультата[Измерение.Имя + "ИзмерениеСсылка"]);
		КонецЦикла;
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОшибкиЗаполненияОбъекта()
	
	УточнениеПроблемы = "";
	Для Каждого ПользовательскоеСообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "") + ПользовательскоеСообщение.Текст;
	КонецЦикла;
	
	Возврат ?(ПустаяСтрока(УточнениеПроблемы), НСтр("ru = 'Для подробной информации необходимо открыть форму объекта.'"), УточнениеПроблемы);
	
КонецФункции

Функция ИнформацияОНезависимомРегистре(ОбъектМетаданных, ПолучитьИзмерения = Истина, ПолучитьРесурсы = Истина, ПолучитьРеквизиты = Истина)
	
	ИнформацияОРегистре = Новый ТаблицаЗначений;
	ИнформацияОРегистре.Колонки.Добавить("ТипМетаданныхВИменительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОРегистре.Колонки.Добавить("ТипМетаданныхВТворительномПадеже", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(16)));
	ИнформацияОРегистре.Колонки.Добавить("ИмяМетаданных",                    Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	
	ПоляВыборки = "";
	
	Если ПолучитьИзмерения Тогда
		Измерения = ОбъектМетаданных.Измерения;
		Для Каждого Измерение Из Измерения Цикл
			ИмяИзмерения = Измерение.Имя;
			ПоляВыборки  = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяИзмерения + " Как " + ИмяИзмерения
				+ "ИзмерениеСсылка,ПредставлениеСсылки(" + ИмяИзмерения + ") Как " + ИмяИзмерения + "ИзмерениеПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОРегистре.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", 
					"Измерение", НСтр("ru = 'измерении'"), ИмяИзмерения));
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьРесурсы Тогда
		Ресурсы = ОбъектМетаданных.Ресурсы;
		Для Каждого Ресурс Из Ресурсы Цикл
			ИмяРесурса  = Ресурс.Имя;
			ПоляВыборки = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяРесурса + " Как " + ИмяРесурса
				+ "РесурсСсылка,ПредставлениеСсылки(" + ИмяРесурса + ") Как " + ИмяРесурса + "РесурсПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОРегистре.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", 
					"Ресурс", НСтр("ru = 'ресурсе'"), ИмяРесурса));
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьРеквизиты Тогда
		Реквизиты = ОбъектМетаданных.Реквизиты;
		Для Каждого Реквизит Из Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			ПоляВыборки = ПоляВыборки + ?(ЗначениеЗаполнено(ПоляВыборки), ",", "") + ИмяРеквизита + " Как " + ИмяРеквизита
				+ "РеквизитСсылка,ПредставлениеСсылки(" + ИмяРеквизита + ") Как " + ИмяРеквизита + "РеквизитПредставление";
			ЗаполнитьЗначенияСвойств(ИнформацияОРегистре.Добавить(),
				Новый Структура("ТипМетаданныхВИменительномПадеже, ТипМетаданныхВТворительномПадеже, ИмяМетаданных", 
					"Реквизит", НСтр("ru = 'реквизите'"), ИмяРеквизита));
		КонецЦикла;
	КонецЕсли;
		
	Возврат Новый Структура("ИнформацияОРегистре, ПоляВыборки", ИнформацияОРегистре, ПоляВыборки);
	
КонецФункции


#КонецОбласти

#Область ПроверкаЦиклическихСсылок

Процедура НайтиЦиклическиеСсылки(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Реквизиты = ОбъектМетаданных.Реквизиты;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОбъектМетаданных.Ссылка КАК ПроблемныйОбъект,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОбъектМетаданных.Ссылка) КАК Представление,
	|	ОбъектМетаданных.Родитель КАК Родитель
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Ссылка > &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", ПолноеИмя);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", "");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивИсключений = Новый Массив;
	Пока Истина Цикл
		
		Если Результат.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрокаРезультата Из Результат Цикл
			
			СсылкаНаОбъект = СтрокаРезультата.ПроблемныйОбъект;
			Если МассивИсключений.Найти(СсылкаНаОбъект) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеОбъекта = СтрокаРезультата.Представление;
			
			НайденЦикл   = Ложь;
			ЦиклВМассиве = Новый Массив;
			ПроверитьЗацикливаниеУровней(СсылкаНаОбъект, СтрокаРезультата.Родитель, НайденЦикл, ЦиклВМассиве);
			Если НайденЦикл Тогда
				
				Путь = "";
				
				Для Каждого ЭлементЦикла Из ЦиклВМассиве Цикл
					ЗначениеПредставления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементЦикла, Новый Структура("Представление", "ПредставлениеСсылки(Ссылка)"));
					Путь = Путь + ?(ЗначениеЗаполнено(Путь), " -> ", "") + ЗначениеПредставления["Представление"];
					МассивИсключений.Добавить(ЭлементЦикла);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Путь) Тогда
					УточнениеПроблемы = ПредставлениеОбъекта + " -> " + Путь + " -> " + ПредставлениеОбъекта;
				Иначе
					УточнениеПроблемы = ПредставлениеОбъекта + " -> " + ПредставлениеОбъекта;
				КонецЕсли;
				
				Проблема = ОписаниеПроблемы(СсылкаНаОбъект, ПараметрыПроверки);
				
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				Если Реквизиты.Найти("Ответственный") <> Неопределено Тогда
					Проблема.Вставить("Ответственный", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Ответственный"));
				КонецЕсли;
				
				ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаРезультата.ПроблемныйОбъект);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗацикливаниеУровней(СсылкаНаОбъект, ТекущийРодитель, НайденЦикл, ЦиклВМассиве)
	
	Если СсылкаНаОбъект = ТекущийРодитель Тогда
		НайденЦикл = Истина;
	ИначеЕсли ЗначениеЗаполнено(ТекущийРодитель) И ЦиклВМассиве.Найти(ТекущийРодитель) = Неопределено Тогда
		ЦиклВМассиве.Добавить(ТекущийРодитель);
		ПроверитьЗацикливаниеУровней(СсылкаНаОбъект, ТекущийРодитель.Родитель, НайденЦикл, ЦиклВМассиве)
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьИерархия(СтандартныеРеквизиты)
	
	ЕстьИерархия = Ложь;
	Для Каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "Родитель" Тогда
			ЕстьИерархия = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИерархия;
	
КонецФункции

#КонецОбласти

#Область ПроверкаОтсутствующихПредопределенныхЭлементов

Процедура НайтиОтсутствующиеПредопределенныеЭлементы(ОбъектМетаданных, ПараметрыПроверки)
	
	ПолноеИмя                = ОбъектМетаданных.ПолноеИмя();
	ПредопределенныеЭлементы = ОбъектМетаданных.ПолучитьИменаПредопределенных();
	Для Каждого ПредопределенныйЭлемент Из ПредопределенныеЭлементы Цикл
		
		Если СтрНачинаетсяС(ВРег(ПредопределенныйЭлемент), "УДАЛИТЬ") Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ПолноеИмя + "." + ПредопределенныйЭлемент);
		Если НайденныйЭлемент <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Проблема = ОписаниеПроблемы(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных), ПараметрыПроверки);
		Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предопределенный элемент ""%1"" отсутствует в информационной базе.'"), ПредопределенныйЭлемент);
		ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДублированияПредопределенныхЭлементов

Процедура НайтиДублиПредопределенныхЭлементов(ВидМетаданных, ПараметрыПроверки)
	
	Пакеты        = "";
	ШаблонПакетов =
	"ВЫБРАТЬ
	|	""&Таблица"" КАК ПолноеИмя,
	|	&ПрочиеПоля
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ Таблица.Предопределенный
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ИмяПредопределенныхДанных
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.Ссылка) > 1";
	
	Выборки       = "";
	ШаблонВыборки =
	"ВЫБРАТЬ
	|	&ПоляВременнойТаблицы,
	|	ПредставлениеСсылки(Таблица.Ссылка) КАК СсылкаНаДублирующийсяЭлемент
	|ИЗ
	|	&Таблица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (Выбрать ""&ВременнаяТаблица"") КАК ВременнаяТаблица
	|		ПО &УсловияСоединения";
	
	ПараметрыЗапроса = Новый Структура;
	
	Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
		
		Если ОбъектМетаданных.ОбновлениеПредопределенныхДанных = Метаданные.СвойстваОбъектов.ОбновлениеПредопределенныхДанных.НеОбновлятьАвтоматически Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя           = ОбъектМетаданных.ПолноеИмя();
		ИмяВременнойТаблицы = "ВТ_" + СтрЗаменить(ПолноеИмя, ".", "");
		
		ЭлементШаблонаПакетов = СтрЗаменить(ШаблонПакетов, "&ПрочиеПоля",
			"Таблица.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных Поместить " + ИмяВременнойТаблицы);
		ЭлементШаблонаПакетов = СтрЗаменить(ЭлементШаблонаПакетов, "&Таблица", ПолноеИмя);
		
		Пакеты = Пакеты + ?(ЗначениеЗаполнено(Пакеты), ";", "") + ЭлементШаблонаПакетов;
		
		СуффиксПараметра      = СтрЗаменить(ПолноеИмя, ".", "_");
		ЭлементШаблонаВыборки = СтрЗаменить(ШаблонВыборки, "&ПоляВременнойТаблицы",
			"&ПроблемныйОбъект" + СуффиксПараметра + " КАК ПроблемныйОбъект, ВременнаяТаблица.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных");
		
		ПараметрыЗапроса.Вставить("ПроблемныйОбъект" + СуффиксПараметра, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя));
		
		ЭлементШаблонаВыборки = СтрЗаменить(ЭлементШаблонаВыборки, "&Таблица", ПолноеИмя);
		ЭлементШаблонаВыборки = СтрЗаменить(ЭлементШаблонаВыборки, "(Выбрать ""&ВременнаяТаблица"")", ИмяВременнойТаблицы);
		ЭлементШаблонаВыборки = СтрЗаменить(ЭлементШаблонаВыборки, "&УсловияСоединения",
			"Таблица.ИмяПредопределенныхДанных = ВременнаяТаблица.ИмяПредопределенныхДанных");
		
		Выборки = Выборки + ?(ЗначениеЗаполнено(Выборки), " ОБЪЕДИНИТЬ ВСЕ ", "") + ЭлементШаблонаВыборки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(Пакеты + ";" + Выборки + " ИТОГИ ПО ПроблемныйОбъект, ИмяПредопределенныхДанных");
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	ОбщийРезультат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбщийРезультат.Следующий() Цикл
		
		УточнениеПроблемы                 = "";
		РезультатПоИмениПредопределенного = ОбщийРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока РезультатПоИмениПредопределенного.Следующий() Цикл
			
			ИмяПредопределенныхДанных = РезультатПоИмениПредопределенного.ИмяПредопределенныхДанных;
			
			Если СтрНачинаетсяС(ВРег(ИмяПредопределенныхДанных), "УДАЛИТЬ") Тогда
				Продолжить;
			КонецЕсли;
			
			УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
				+ НСтр("ru = 'Имя предопределенного элемента:'") + " """ + ИмяПредопределенныхДанных + """"
				+ Символы.ПС + НСтр("ru = 'Ссылки на предопределенный элемент:'");
				
			ДетальныеЗаписи = РезультатПоИмениПредопределенного.Выбрать();
			Пока ДетальныеЗаписи.Следующий() Цикл
				УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "")
					+ " • """ + ДетальныеЗаписи.СсылкаНаДублирующийсяЭлемент + """";
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(УточнениеПроблемы) Тогда
			Продолжить;
		КонецЕсли;
		
		Проблема = ОписаниеПроблемы(ОбщийРезультат.ПроблемныйОбъект, ПараметрыПроверки);
		Проблема.УточнениеПроблемы = УточнениеПроблемы;
		ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеПроблемЦиклическиеСсылки

// Исправляет проблему циклических ссылок по принципу, у кого больше терминальных элементов
// в подчинении, тот и остается родителем.
//
// Параметры:
//   Проверка - СправочникСсылка.ПравилаПроверкиУчета - Проверка, найденные проблемы которой
//              исправляются данным методом.
//
Процедура ИсправитьПроблемуЦиклическихСсылок(Проверка)
	
	ТаблицаПотомства = Новый ТаблицаЗначений;
	ТаблицаПотомства.Колонки.Добавить("ЭлементЦикла");
	ТаблицаПотомства.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РезультатыПроверкиУчета.ПроблемныйОбъект КАК ПроблемныйОбъект
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиУчета КАК РезультатыПроверкиУчета
	|ГДЕ
	|	НЕ РезультатыПроверкиУчета.ИгнорироватьПроблему
	|	И РезультатыПроверкиУчета.ПравилоПроверки = &ПравилоПроверки");
	
	Запрос.УстановитьПараметр("ПравилоПроверки", Проверка);
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПроблемныйОбъектСсылка = Результат.ПроблемныйОбъект;
		Родитель         = ПроблемныйОбъектСсылка.Родитель;
		
		НайденЦикл   = Ложь;
		ЦиклВМассиве = Новый Массив;
		ПроверитьЗацикливаниеУровней(ПроблемныйОбъектСсылка, Родитель, НайденЦикл, ЦиклВМассиве);
		Если Не НайденЦикл Тогда
			Продолжить;
		КонецЕсли;
			
		ПоследнийОбъектЦикла = ЦиклВМассиве.Получить(ЦиклВМассиве.Количество() - 1);
		
		КоличествоДетейПервого = КоличествоДочернихЭлементов(ПроблемныйОбъектСсылка, Родитель);
		КоличествоДетейВторого = КоличествоДочернихЭлементов(ПоследнийОбъектЦикла, Родитель);
		
		Если КоличествоДетейПервого > КоличествоДетейВторого Тогда
			ПроблемныйОбъект = ПроблемныйОбъектСсылка.ПолучитьОбъект();
		Иначе
			ПроблемныйОбъект = ПоследнийОбъектЦикла.ПолучитьОбъект();
		КонецЕсли;
		
		ПроблемныйОбъект.Родитель              = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроблемныйОбъектСсылка.Метаданные().ПолноеИмя()).ПустаяСсылка();
		ПроблемныйОбъект.ОбменДанными.Загрузка = Истина;
		ПроблемныйОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоДочернихЭлементов(СсылкаНаОбъект, ИсключениеВыборки, Знач НачальноеЗначение = 0)
	
	КоличествоДетей = НачальноеЗначение;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	&ОбъектМетаданных КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Родитель = &Родитель
	|	И ОбъектМетаданных.Ссылка <> &ИсключениеВыборки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектМетаданных", СсылкаНаОбъект.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Родитель",          СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ИсключениеВыборки", ИсключениеВыборки);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выгрузка        = Результат.Выгрузить();
		КоличествоДетей = КоличествоДетей + Выгрузка.Количество();
		Для Каждого ЭлементПотомства Из Выгрузка Цикл
			КоличествоДетей = КоличествоДочернихЭлементов(ЭлементПотомства.Ссылка, ИсключениеВыборки, КоличествоДетей);
		КонецЦикла;
	КонецЕсли;
	Возврат КоличествоДетей;
	
КонецФункции

#КонецОбласти

#Область ДополнительнаяФункциональностьДляРаботыВСКД

Функция ОформитьПредставлениеПроблемногоОбъекта(ПроблемныйОбъект, ПроблемныйОбъектПредставление, ДополнительнаяИнформация) Экспорт
	
	ОформленноеПредставлениеОбъекта = ПроблемныйОбъектПредставление + " (" + ПроблемныйОбъект.Метаданные().Представление() + ")";
	
	Если ТипЗнч(ПроблемныйОбъект) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат ОформленноеПредставлениеОбъекта;
	Иначе
		ПолноеИмя = ПроблемныйОбъект.ПолноеИмя;
		Если Не ОбщегоНазначения.ЭтоРегистр(Метаданные.НайтиПоПолномуИмени(ПолноеИмя)) Тогда
			Возврат ПроблемныйОбъектПредставление;
		Иначе
			
			СтруктураНабора  = ДополнительнаяИнформация.Получить();
			
			Если ТипЗнч(СтруктураНабора) <> Тип("Структура") Тогда
				Возврат ОформленноеПредставлениеОбъекта;
			КонецЕсли;
			
			СтрокаРазмещения = Строка(ПроблемныйОбъект) + "<РазмещениеСтруктурыНабораЗаписейДляПоследующейРасшифровки>" + Символы.ПС + ПолноеИмя;
			Для Каждого ЭлементНабора Из СтруктураНабора Цикл
				
				ЗначениеОтбора    = ЭлементНабора.Значение;
				ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
				ИнформацияОТипе   = "";
				
				Если ТипЗначенияОтбора = Тип("Число") Тогда
					ИнформацияОТипе = "Число";
				ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
					ИнформацияОТипе = "Строка";
				ИначеЕсли ТипЗначенияОтбора = Тип("Булево") Тогда
					ИнформацияОТипе = "Булево";
				ИначеЕсли ТипЗначенияОтбора = Тип("Дата") Тогда
					ИнформацияОТипе = "Дата";
				ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) Тогда
					ИнформацияОТипе = ЗначениеОтбора.Метаданные().ПолноеИмя();
				КонецЕсли;
				
				СтрокаРазмещения = СтрокаРазмещения + Символы.ПС + Строка(ЭлементНабора.Ключ) + "~~~" + ИнформацияОТипе + "~~~" + Строка(XMLСтрока(ЗначениеОтбора));
				
			КонецЦикла;
			
			Возврат СтрокаРазмещения;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияСлужебная

// Проверяет доступность регистра, содержащего обнаруженные проблемы, по правам.
// Используется при формировании индикации проблемных объектов.
//
// Возвращаемое значение:
//   Булево - Признак доступности регистра согласно настройкам прав.
//
Функция ПодсистемаДоступна() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РезультатыПроверкиУчета);
	
КонецФункции

Функция ЭтоНеразделенныйОбъектМетаданных(ПолноеИмя)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Возврат Не МодульРаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(ПолноеИмя);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УточнениеПроблемы(МассивСообщений)
	
	УточнениеПроблемы = "";
	Для Каждого ПользовательскоеСообщение Из МассивСообщений Цикл
		УточнениеПроблемы = УточнениеПроблемы + ?(ЗначениеЗаполнено(УточнениеПроблемы), Символы.ПС, "") + ПользовательскоеСообщение.Текст;
	КонецЦикла;
	
	Возврат УточнениеПроблемы;
	
КонецФункции

Функция ПроверкаОтложена(ИдентификаторРегламентногоЗадания)
	
	ПроверкаОтложена = Ложь;
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗадания));
		Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ПроверкаОтложена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроверкаОтложена;
	
КонецФункции

// Подготавливает данные, необходимые для выполнения проверки ведения учета.
//
// Параметры:
//     Проверка - СправочникСсылка.ПравилаПроверкиУчета - проверка, параметры которой
//                необходимо подготовить.
//     ПараметрыВыполненияПроверки - Структура, Массив - произвольные дополнительные параметры проверки,
//                                   которые уточняют, что и как именно проверять. 
//       - Структура - один параметр проверки. Состав свойств см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//       - Массив - несколько параметров проверки (элементы массива типа Структура, как описано выше).
//
// Возвращаемое значение:
//   Структура - параметры проверки:
//      * ДатаНачалаПроверки                - Дата - левая граница временного интервала, с которого нужно
//                                            проверять данные информационной базы. Актуальна только для
//                                            проверок, которые работают с данными зависящими от времени.
//                                            По умолчанию это пустая дата.
//      * Идентификатор                     - Строка - строковый идентификатор проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - строковый идентификатор регламентного задания,
//                                            осуществляющего указанную проверку.
//      * ЛимитПроблем                      - Число - лимит проблем по указанной проверке. При его достижении
//                                            итерации проверки ходят вхолостую. По умолчанию равен 1000.
//      * Наименование                      - Строка - наименование проверки.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            Информация, Предупреждение, Ошибка, ПолезныйСовет и ВажнаяИнформация.
//      * ПроверкаБылаОстановлена           - Булево - признак того была ли остановлена проверка.
//      * РучнойЗапуск                      - Булево - признак того была ли проверка запущена вручную
//                                            т.е не регламентным заданием.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - ссылка на проверку.
//      * ГлобальныеНастройки               - Структура - структура со значениями:
//            ** КартинкаИндикатораПроблем    - Картинка, которая будет выводиться в качестве
//                                              индикатора ошибки в колонке динамического списка
//                                              форм списков и на специальной панели форм объектов.
//            ** ПояснениеИндикатораПроблем   - Строка - Поясняющая строка к ошибке.
//            ** ГиперссылкаИндикатораПроблем - Строка - Текст гиперссылки, при нажатии на которую,
//                                              будет сформирован и открыт отчет с ошибками.
//      * ИтерацияПроверки                  - Число - итерация проверки.
//
Функция ПодготовитьПараметрыПроверки(Знач Проверка, Знач ПараметрыВыполненияПроверки)
	
	ПараметрыПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проверка, "ДатаНачалаПроверки, Идентификатор,
		|ИдентификаторРегламентногоЗадания, ЛимитПроблем, Наименование, ВажностьПроблемы, СпособВыполнения,
		|КонтекстПроверокВеденияУчета, УточнениеКонтекстаПроверокВеденияУчета");
	
	Если Не ПараметрыПроверки.Свойство("ПроверкаБылаОстановлена") Тогда
		ПараметрыПроверки.Вставить("ПроверкаБылаОстановлена", Ложь);
	КонецЕсли;
	Если Не ПараметрыПроверки.Свойство("РучнойЗапуск") Тогда
		ПараметрыПроверки.Вставить("РучнойЗапуск", Истина);
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("Проверка",            Проверка);
	ПараметрыПроверки.Вставить("ГлобальныеНастройки", ГлобальныеНастройки());
	ПараметрыПроверки.Вставить("ИтерацияПроверки",    1);
	
	Если ПараметрыВыполненияПроверки = Неопределено Тогда
		ГруппаПроверок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "Родитель");
		Если ГруппаПроверок <> Неопределено И Не ГруппаПроверок.Пустая() Тогда
			ИдентификаторПроверки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПроверок, "Идентификатор");
		Иначе
			ИдентификаторПроверки = ПараметрыПроверки.Идентификатор;
		КонецЕсли;
		ПараметрыВыполненияПроверки = Новый Массив;
		ПараметрыВыполненияПроверки.Добавить(ПараметрыВыполненияПроверки(ИдентификаторПроверки));
	КонецЕсли;	
	ПараметрыПроверки.Вставить("ПараметрыВыполненияПроверки", ПараметрыВыполненияПроверки);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Производит очистку результатов предыдущих итераций проверки, пропуская
// те проблемы, которые были проигнорированы пользователем (ИгнорироватьПроблему = Истина).
//
// Параметры:
//     Проверка - СправочникСсылка.ПравилаПроверкиУчета - проверка, информацию по
//                которой необходимо очистить.
//     ПараметрыВыполненияПроверки - Структура, Массив - произвольные дополнительные параметры проверки,
//                                   которые уточняют, что и как именно проверять. 
//       - Структура - один параметр проверки. Состав свойств см. КонтрольВеденияУчета.ПараметрыВыполненияПроверки.
//       - Массив - несколько параметров проверки (элементы массива типа Структура, как описано выше).
//
Процедура ОчиститьРезультатыПредыдущихПроверок(Проверка, ПараметрыВыполненияПроверки)
	
	Для Каждого ТекущиеПараметры Из ПараметрыВыполненияПроверки Цикл
		
		ВидПроверки = ВидПроверки(ТекущиеПараметры, Истина);
		Если Не ЗначениеЗаполнено(ВидПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.РезультатыПроверкиУчета.СоздатьНаборЗаписей();
		Набор.Отбор.ПравилоПроверки.Установить(Проверка);
		Набор.Отбор.ВидПроверки.Установить(ВидПроверки);
		Набор.Отбор.ИгнорироватьПроблему.Установить(Ложь);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку превышения количества итераций проверки допустимого лимита.
//
// Параметры:
//   ПараметрыПроверки - Структура - см. КонтрольВеденияУчетаСлужебный.ПодготовитьПараметрыПроверки.
//
// Возвращаемое значение:
//   Булево - Признак того достигнута ли последняя итерация.
//
Функция ЭтоПоследняяИтерацияПроверки(ПараметрыПроверки)
	
	ЭтоПоследняяИтерация = Ложь;
	
	Если ПараметрыПроверки.ЛимитПроблем <> 0 Тогда
		Если ПараметрыПроверки.ИтерацияПроверки > ПараметрыПроверки.ЛимитПроблем Тогда
			ЭтоПоследняяИтерация = Истина;
		Иначе
			ПараметрыПроверки.Вставить("ИтерацияПроверки", ПараметрыПроверки.ИтерацияПроверки + 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоПоследняяИтерация;
	
КонецФункции

// Возвращает строковое представление вида объектов метаданных по типу объекта.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - Ссылка на проблемный объект.
//
// Возвращаемое значение:
//  Строка - представление вида объектов метаданных. Например: "Справочник", "Документ".
//
Функция ПредставлениеОбъектаПоТипу(СсылкаНаОбъект)
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		
		Возврат НСтр("ru = 'элементом справочника'");
	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'документом'");
	
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'бизнес процессом'");
	
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'планом видов характеристик'");
	
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'планом счетов'");
	
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'планом видов расчета'");
	
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'задачей'");
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'планом обмена'");
	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат НСтр("ru = 'перечислением'");
	
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипОбъекта));
	
	КонецЕсли;
	
КонецФункции

// Возвращает типы Строка, Массив и СправочникСсылка.ВидыПроверок
// для проверки параметров методов, работающих с видами проверок.
//
// Возвращаемое значение:
//    Массив - объектные типы.
//
Функция ОписаниеТипаВидПроверки() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыПроверок"));
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает структуру типов параметров проверки.
//
// Возвращаемое значение:
//    Структура - см. КонтрольВеденияУчетаСлужебный.ПодготовитьПараметрыПроверки.
//
Функция ОжидаемыеТипыСвойствПараметровПроверки() Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("ВажностьПроблемы",                  Тип("ПеречислениеСсылка.ВажностьПроблемыУчета"));
	ОжидаемыеТипыСвойств.Вставить("ГлобальныеНастройки",               Тип("Структура"));
	ОжидаемыеТипыСвойств.Вставить("ДатаНачалаПроверки",                Тип("Дата"));
	ОжидаемыеТипыСвойств.Вставить("Идентификатор",                     Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("ИдентификаторРегламентногоЗадания", Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("ИтерацияПроверки",                  Тип("Число"));
	ОжидаемыеТипыСвойств.Вставить("ЛимитПроблем",                      Тип("Число"));
	ОжидаемыеТипыСвойств.Вставить("Наименование",                      Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("Проверка",                          Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	
	Возврат ОжидаемыеТипыСвойств;
	
КонецФункции

// Возвращает описание типов полей вида проверки - см. реквизиты СвойствоN справочника ВидыПроверок. 
//
// Возвращаемое значение:
//   ОписаниеТипов - все ссылочные типы, а также типы Булево, Строка, Число и Дата.
//
Функция ОжидаемыеТипыСвойствВидовПроверок() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Число"));
	
	Возврат Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаВсеСсылки(), МассивТипов);
	
КонецФункции

// Возвращает структуру типов описания проблемы.
//
// Возвращаемое значение:
//    Проблема - Структура - Сформированная алгоритмом проверки структура проблемы.
//        * ПроблемныйОбъект         - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//        * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//        * ВидПроверки              - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому 
//                                     относится выполненная проверка.
//        * КлючУникальности         - УникальныйИдентификатор - Ключ уникальности проблемы.
//        * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//        * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                     "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//        * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                     идентифицировать ответственного в проблемном объекте.
//        * ИгнорироватьПроблему     - Булево - Флаг игнорирования проблемы. Если имеет значение "Истина",
//                                     запись о проблеме игнорируется подсистемой.
//        * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                     сведениями, связанными с выявленной проблемой.
//        * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
//
Функция ОжидаемыеТипыСвойствОписанияПроблемы() Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("ВажностьПроблемы",         Тип("ПеречислениеСсылка.ВажностьПроблемыУчета"));
	ОжидаемыеТипыСвойств.Вставить("ВидПроверки",              Тип("СправочникСсылка.ВидыПроверок"));
	ОжидаемыеТипыСвойств.Вставить("Выявлено",                 Тип("Дата"));
	ОжидаемыеТипыСвойств.Вставить("ДополнительнаяИнформация", Тип("ХранилищеЗначения"));
	ОжидаемыеТипыСвойств.Вставить("КлючУникальности",         Тип("УникальныйИдентификатор"));
	МассивТипов = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	МассивТипов.Добавить(Тип("Неопределено"));
	ОжидаемыеТипыСвойств.Вставить("Ответственный",            МассивТипов);
	ОжидаемыеТипыСвойств.Вставить("ПравилоПроверки",          Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	ОжидаемыеТипыСвойств.Вставить("ПроблемныйОбъект",         ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ОжидаемыеТипыСвойств.Вставить("УточнениеПроблемы",        Тип("Строка"));
	
	Возврат ОжидаемыеТипыСвойств;
	
КонецФункции

Функция СсылочныеВидыОбъектовМетаданных()
	
	Результат = Новый Массив;
	Результат.Добавить(Метаданные.Справочники);
	Результат.Добавить(Метаданные.Документы);
	Результат.Добавить(Метаданные.ПланыОбмена);
	Результат.Добавить(Метаданные.ПланыВидовХарактеристик);
	Результат.Добавить(Метаданные.ПланыСчетов);
	Результат.Добавить(Метаданные.ПланыВидовРасчета);
	Результат.Добавить(Метаданные.БизнесПроцессы);
	Результат.Добавить(Метаданные.Задачи);
	Возврат Результат;
	
КонецФункции

Функция РегистрыКакОбъектыМетаданных()
	
	Результат = Новый Массив;
	Результат.Добавить(Метаданные.РегистрыБухгалтерии);
	Результат.Добавить(Метаданные.РегистрыНакопления);
	Результат.Добавить(Метаданные.РегистрыРасчета);
	Результат.Добавить(Метаданные.РегистрыСведений);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
