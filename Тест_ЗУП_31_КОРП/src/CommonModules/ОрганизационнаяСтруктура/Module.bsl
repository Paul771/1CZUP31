
#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "ЮридическаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "УправленческаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецПроцедуры

Функция МестоСотрудниковВСтруктуреПредприятия(ТолькоРазрешенные, СписокСотрудников, ДатаПолученияДанных) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, "МестоВСтруктуреПредприятия", ДатаПолученияДанных);
	
	МестоСотрудниковВСтруктуреПредприятия = Новый Соответствие;
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанные Цикл 
		МестоСотрудниковВСтруктуреПредприятия.Вставить(КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.МестоВСтруктуреПредприятия);
	КонецЦикла;
	
	Возврат МестоСотрудниковВСтруктуреПредприятия;
	
КонецФункции

Функция ЗапросПоПредставлению(ИмяПредставления, МассивИменВТИсточниковПараметров, ТолькоРазрешенные) Экспорт 
	
	Запрос = Неопределено;
	
	Если ВРег(ИмяПредставления) = "МЕСТОВСТРУКТУРЕПРЕДПРИЯТИЯ" Тогда
		
		ИмяВТИсточникДанных = МассивИменВТИсточниковПараметров[0];
		
		Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТИсточникДанных, "Сотрудник,Период");
			
			Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез("УдалитьМестоСотрудникаВСтруктуреПредприятия",  
				ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, "Представления_МестоВСтруктуреПредприятия");

		Иначе 
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	КадровыеДанныеСотрудников.Период,
			               |	КадровыеДанныеСотрудников.Сотрудник,
			               |	СтруктураПредприятия.Ссылка КАК Подразделение
			               |ПОМЕСТИТЬ Представления_МестоВСтруктуреПредприятия
			               |ИЗ
			               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			               |		ПО КадровыеДанныеСотрудников.Подразделение = СтруктураПредприятия.Источник";
						   
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТИсточникДанных);
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ПриСозданииФормыПозицииШтатногоРасписания(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют, то не показываем поле места в структуре предприятия.
		Возврат;
	КонецЕсли;
	
	// Создаем реквизит места в структуре предприятия.
	ОписаниеТипов = Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия");
	РеквизитФормы = Новый РеквизитФормы("МестоВСтруктуреПредприятия", ОписаниеТипов, , , Истина);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Добавляем поле ввода.
	Элементы = Форма.Элементы;
	Если Элементы.Найти("МестоВСтруктуреПредприятия") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.МестоВСтруктуреПредприятияГруппа);
	Поле.Заголовок = НСтр("ru = 'Место в стр-ре предприятия'");
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = "МестоВСтруктуреПредприятия.Подразделение";
	Поле.УстановитьДействие("ПриИзменении", "Подключаемый_МестоВСтруктуреПредприятияПриИзменении");
	
КонецПроцедуры

Процедура ПриПолученииДанныхФормыПозицииШтатногоРасписания(Форма, ПозицияСсылка, ЗначениеКопирования) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют.
		Возврат;
	КонецЕсли;
	
	// Считываем место в структуре предприятия из регистра сведений в реквизит формы.
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ПозицияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Отбор = Новый Структура("Позиция", ЗначениеКопирования);
		Выборка = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда 
			МенеджерЗаписи.Подразделение = Выборка.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ПриЗаписиФормыПозицииШтатногоРасписания(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют.
		Возврат;
	КонецЕсли;
	
	// Записываем данные из реквизита формы в регистр сведений.
	МенеджерЗаписи = Форма.РеквизитФормыВЗначение("МестоВСтруктуреПредприятия");
	МенеджерЗаписи.Позиция = ТекущийОбъект.Ссылка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура НастроитьОтображениеМестаВСтруктуреПредприятияВФормеСпискаШтатногоРасписания(Форма, ИмяОсновнойТаблицы, ИмяРеквизитаСписок = "Список") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ОтборМестоВСтруктуреПредприятия = Неопределено;
	Если Форма.Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия", ОтборМестоВСтруктуреПредприятия) Тогда
		
		Если Не ЗначениеЗаполнено(ОтборМестоВСтруктуреПредприятия) Тогда
			Форма.Параметры.Отбор.Удалить("МестоВСтруктуреПредприятия")
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидСтруктураПредприятия",
		"Видимость",
		Не ЗначениеЗаполнено(ОтборМестоВСтруктуреПредприятия));
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """МестоВСтруктуреПредприятия"" КАК МестоВСтруктуреПредприятия", "МестоВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия");
	Список.ТекстЗапроса = Список.ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
	|	ПО " + ИмяОсновнойТаблицы + ".Ссылка = МестоВСтруктуреПредприятия.Позиция";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "МестоВСтруктуреПредприятия", "Видимость", Истина);
	
	Элементы = Форма.Элементы;
	ГруппаМестоВСтруктуреПредприятия = Элементы.ГруппаМестоВСтруктуреПредприятия;
	
	Если Элементы.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда
		Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), ГруппаМестоВСтруктуреПредприятия);
		Поле.Заголовок = НСтр("ru = 'В структуре предприятия'");
		Поле.Вид = ВидПоляФормы.ПолеНадписи;
		Поле.Ширина = 12;
		Поле.ПутьКДанным = ИмяРеквизитаСписок + ".МестоВСтруктуреПредприятия";
	КонецЕсли;
	
КонецПроцедуры

// Считывает подразделение структуры предприятия, соответствующее позиции штатного расписания.
//
Функция МестоПозицииВСтруктуреПредприятия(Позиция) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МестоПозиции.Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|ГДЕ
		|	МестоПозиции.Позиция = &Позиция");
		
	Запрос.УстановитьПараметр("Позиция", Позиция);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка.Подразделение;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Записывает для указанной позиции штатного расписания принадлежность к структуре предприятия.
//
Процедура УстановитьМестоПозицииВСтруктуреПредприятия(Позиция, МестоВСтруктуре) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.УдалитьМестоСотрудникаВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = Позиция;
	МенеджерЗаписи.Подразделение = МестоВСтруктуре;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

// Заменяет текст запроса регистрации изменений объектов, имеющих реквизит с типом "СправочникСсылка.СтруктураПредприятия",
// для получения списка узлов-получателей по организациям, если структура предприятия соответствует структуре
// юридических лиц.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  СтруктураПредприятия - Ссылка или массив ссылок на структуру предприятия, по которым нужно получить список узлов-получателей.
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоОрганизациямСтруктурыПредприятия(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, СтруктураПредприятия) Экспорт
	
	// Не ограничиваем, если структура предприятия не соответствует структуре юридических лиц.
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("СтруктураПредприятия", СтруктураПредприятия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		ИНАЧЕ ПодразделенияОрганизаций.Владелец
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&СвойствоОбъекта_СтруктураПредприятия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОрганизации.Организация В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Организации.Организация
	|			ИЗ
	|				ВТОрганизации КАК Организации)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1.Организации'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='&%1ЭтотУзел'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

Процедура ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйРеквизит = Новый РеквизитФормы("МестоСотрудникаВСтруктуреПредприятия",
		Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.УдалитьМестоСотрудникаВСтруктуреПредприятия"), , , Истина);
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("МестоСотрудникаВСтруктуреПредприятияНаборЗаписей",
		Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.УдалитьМестоСотрудникаВСтруктуреПредприятия"));
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("МестоСотрудникаВСтруктуреПредприятияНаборЗаписейПрочитан",
		Новый ОписаниеТипов("Булево"));
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("МестоСотрудникаВСтруктуреПредприятияНоваяЗапись",
		Новый ОписаниеТипов("Булево"));
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("МестоСотрудникаВСтруктуреПредприятияПрежняя",
		Новый ОписаниеТипов());
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИсточникаВыбранногоПодразделения(ДанныеИсточника, ВыбранноеПодразделение) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеПодразделение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбранноеПодразделение", ВыбранноеПодразделение);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Источник = &ВыбранноеПодразделение";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ДанныеИсточника = Выборка.Ссылка;
	
КонецПроцедуры

Функция СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Экспорт
	
	Используется = Ложь;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьИспользованиеСтруктурыПредприятияДляОтраженияВРегламентированномУчете(Используется);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ОпределитьИспользованиеСтруктурыПредприятияДляОтраженияВРегламентированномУчете(Используется);
	КонецЕсли;

	Возврат Используется;
	
КонецФункции

#Область УправлениеОтборамиВФормахСДинамическимСписком

Процедура УстановитьПараметрыВыбораУправленческойОрганизацииПоЭлементу(Форма, ЭлементФормы) Экспорт
	
	ПараметрВыбора = Новый ПараметрВыбора("ПоказыватьУправленческуюОрганизацию", Истина);
	
	ПараметрыВыбора = Новый Массив(ЭлементФормы.ПараметрыВыбора);
	ПараметрыВыбора.Добавить(ПараметрВыбора);
	
	ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораУправленческойОрганизации(Форма, СоздатьЭлементы = Истина) Экспорт
	
	Если СоздатьЭлементы Тогда
		Форма.Элементы[Форма.НаименованиеРеквизитаФормыДинамическийСписок].СоздатьЭлементыФормыПользовательскихНастроек();
	КонецЕсли;
	
	ЭлементФормы = ЭлементФормыПользовательскийОтборПоОрганизации(Форма.Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки, Форма.ИмяПоляОрганизация);
	Если ЭлементФормы <> Неопределено Тогда
		УстановитьПараметрыВыбораУправленческойОрганизацииПоЭлементу(Форма, ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьМестоСотрудникаВСтруктуреПредприятия", "Период", "Зарплата", "Сотрудник.ГоловнаяОрганизация");
	
КонецПроцедуры

#КонецОбласти

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Ссылка КАК Позиция
	|ПОМЕСТИТЬ ВТПозиции
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	
	Запрос.Выполнить();
	
	Возврат МестаПозицийВСтруктуреПредприятияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТПозиции", "Позиция");
	
КонецФункции

Функция МестаПозицийВСтруктуреПредприятияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяТаблицыПозиций = "ВТПозиции", ИмяКолонкиПозиции = "Позиция")
	
	СоздатьВТМестаПозицийВСтруктуреПредприятияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяТаблицыПозиций, ИмяКолонкиПозиции);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаПозицийВСтруктуреПредприятия.Позиция КАК Позиция,
	|	МестаПозицийВСтруктуреПредприятия.Подразделение КАК Подразделение
	|ИЗ
	|	ВТМестаПозицийВСтруктуреПредприятия КАК МестаПозицийВСтруктуреПредприятия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТМестаПозицийВСтруктуреПредприятияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяТаблицыПозиций = "ВТПозиции", ИмяКолонкиПозиции = "Позиция") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПозиций.Позиция КАК Позиция,
	|	МестоПозиции.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТМестаПозицийВСтруктуреПредприятия
	|ИЗ
	|	#ТаблицаПозиций КАК ТаблицаПозиций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
	|		ПО ТаблицаПозиций.Позиция = МестоПозиции.Позиция";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПозиций", ИмяТаблицыПозиций);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаПозиций.Позиция", "ТаблицаПозиций." + ИмяКолонкиПозиции);
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ЗапросВТПозицииПодразделений(ИмяФильтра)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение,
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТПозицииПодразделений
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТПодразделения КАК ВТПодразделения
		|		ПО МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение = ВТПодразделения.Подразделение
		|ГДЕ
		|	НЕ МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция.ГруппаПозицийПодразделения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТПодразделения", ИмяФильтра);
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТПозицииПодразделений(МенеджерВременныхТаблиц, ИмяФильтра) Экспорт

	Запрос = ЗапросВТПозицииПодразделений(ИмяФильтра);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

Функция ПозицииПодразделений(Подразделения) Экспорт

	Если ТипЗнч(Подразделения) <> Тип("Массив") Тогда
		МассивПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделения);
	Иначе
		МассивПодразделений = Подразделения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ ВТПодразделения
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В(&МассивПодразделений)";
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Запрос.Выполнить();
	
	СоздатьВТПозицииПодразделений(Запрос.МенеджерВременныхТаблиц, "ВТПодразделения");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПозицииПодразделений.Подразделение КАК Подразделение,
		|	ВТПозицииПодразделений.Позиция КАК Позиция
		|ИЗ
		|	ВТПозицииПодразделений КАК ВТПозицииПодразделений";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПодчиненныеПодразделения(МассивПодразделенийУзла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивПодразделенийУзла);
	
	МассивДопустимыхЗначений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Возврат МассивДопустимыхЗначений;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьФормуСпискаШтатногоРасписания(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураПредприятияСписок.ОсновнаяТаблица = "Справочник.СтруктураПредприятия";
	
	Элементы = Форма.Элементы;
	ГруппаСтруктураПредприятия = Элементы.ГруппаСтруктураПредприятия;
	
	Если Элементы.Найти("СтруктураПредприятияСписок") = Неопределено Тогда
		ПолеСтруктураПредприятияСписок = Элементы.Добавить("СтруктураПредприятияСписок", Тип("ТаблицаФормы"), ГруппаСтруктураПредприятия);
		ПолеСтруктураПредприятияСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПолеСтруктураПредприятияСписок.Отображение = ОтображениеТаблицы.Дерево;
		ПолеСтруктураПредприятияСписок.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		ПолеСтруктураПредприятияСписок.ПутьКДанным = "СтруктураПредприятияСписок";
		ПолеСтруктураПредприятияСписок.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_СтруктураПредприятияСписокПриАктивизацииСтроки");
	КонецЕсли;
	
	Если Элементы.Найти("СтруктураПредприятияСписокПодразделение") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("СтруктураПредприятияСписокПодразделение", Тип("ПолеФормы"), ПолеСтруктураПредприятияСписок);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеПодразделение.Заголовок = НСтр("ru = 'Подразделение'");
		ПолеПодразделение.ПутьКДанным = "СтруктураПредприятияСписок.Ссылка";
	КонецЕсли;
	
	ИмяКоманды = "ВидСтруктураПредприятия";
	ВидСпискаГруппа = Элементы.ВидСписка;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Структура предприятия'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ВидСпискаГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "СоздатьУправленческуюПозицию";
	СоздатьСкопироватьГруппа = Элементы.СоздатьСкопироватьГруппа;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Создать'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), СоздатьСкопироватьГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписания(Форма, СозданиеНовой) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
	
	Если СозданиеНовой Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Владелец",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Владелец) И Объект.Владелец <> УправленческаяОрганизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияПриВеденииИстории(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Объект.Владелец <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Должность",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Должность));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияВнешниеДанные(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(Форма.МестоВСтруктуреПредприятия.Подразделение, Объект.Подразделение));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Владелец");
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Организация <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
КонецПроцедуры

Функция РедактированиеПоляМестоВСтруктуреПредприятияЗапрещено(МестоВСтруктуреПредприятия, Подразделение)
	
	Если Не ЗначениеЗаполнено(МестоВСтруктуреПредприятия) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоВСтруктуреПредприятия, "Источник");
	
	Возврат Источник <> Подразделение;
	
КонецФункции

Процедура УправленческаяПозицияПриСозданииНаСервере(Форма, Параметры, СозданиеНовой) Экспорт 
	
	Если Не Параметры.Свойство("УправленческаяПозиция") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если СозданиеНовой Тогда 
		Объект.Владелец = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПроверяемыеРеквизитыШтатногоРасписания(ПроверяемыеРеквизиты) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	
КонецПроцедуры

Функция СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц() Экспорт 
	
	Возврат Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецФункции

Процедура ДополнитьФормуДокументовИзмененияШтатногоРасписания(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПодборУправленческойПозиции";
	Элементы = Форма.Элементы;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Подбор'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.Позиции.КоманднаяПанель);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти("ПозицииМестоВСтруктуреПредприятия") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("ПозицииМестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.ПодразделениеДолжностьГруппа);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПодразделение.ПутьКДанным = "Объект.Позиции.МестоВСтруктуреПредприятия";
		ПолеПодразделение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииВнешнихДанныхПозицииШтатногоРасписания(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ДанныеПозиции.ПозицияШтатногоРасписания;
	МенеджерЗаписи.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияПоДаннымФормы(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.МестоВСтруктуреПредприятия = Форма.МестоВСтруктуреПредприятия.Подразделение;
		
КонецПроцедуры

Процедура ПриПроведенииДокументовИзмененияШтатногоРасписания(Объект) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	СведенияОНаименованиях = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("СведенияОНаименованиях", СведенияОНаименованиях);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПозицииШтатногоРасписания", Объект.Позиции);
	Запрос.УстановитьПараметр("ИзменитьОрганизацию", Объект.Организация <> УправленческаяОрганизация);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПозицииШтатногоРасписания.Позиция,
	               |	ПозицииШтатногоРасписания.ИдентификаторСтрокиПозиции,
	               |	ПозицииШтатногоРасписания.Должность,
	               |	ПозицииШтатногоРасписания.Подразделение,
	               |	ПозицииШтатногоРасписания.МестоВСтруктуреПредприятия
	               |ПОМЕСТИТЬ ВТПозиции
	               |ИЗ
	               |	&ПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Позиции.Позиция,
	               |	Позиции.ИдентификаторСтрокиПозиции,
	               |	Позиции.Должность,
	               |	Позиции.Подразделение,
	               |	Позиции.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТПозиции КАК Позиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	(Позиции.Позиция.Владелец = &УправленческаяОрганизация
	               |				И &ИзменитьОрганизацию
	               |			ИЛИ Позиции.Позиция.Должность <> Позиции.Должность
	               |			ИЛИ Позиции.Позиция.Подразделение <> Позиции.Подразделение)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Позиции.Позиция,
	               |	Позиции.Позиция.Наименование КАК Наименование,
	               |	Позиции.ИдентификаторСтрокиПозиции,
	               |	Позиции.Должность,
	               |	Позиции.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТПозиции КАК Позиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	ЕСТЬNULL(МестоПозицииВСтруктуреПредприятия.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> Позиции.МестоВСтруктуреПредприятия";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
		ПозицияОбъект.Владелец = Объект.Организация;
		ПозицияОбъект.Должность = Выборка.Должность;
		ПозицияОбъект.Подразделение = Выборка.Подразделение;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда  
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
			ДополнительныеПараметры.Вставить("МестоВСтруктуреПредприятия", Выборка.МестоВСтруктуреПредприятия);
			
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				ПозицияОбъект.Подразделение,
				ПозицияОбъект.Должность,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции) Тогда 
			ПозицияОбъект.Наименование = НаименованиеПозиции;
		КонецЕсли;
		
		ПозицияОбъект.Записать();
		
	КонецЦикла;	
		
	Выборка = РезультатыЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Выборка.Позиция;
		НоваяЗапись.Подразделение = Выборка.МестоВСтруктуреПредприятия;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
			ДополнительныеПараметры.Вставить("МестоВСтруктуреПредприятия", Выборка.МестоВСтруктуреПредприятия);
			
			НаименованиеПозиции = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				НоваяЗапись.Подразделение,
				Выборка.Должность,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции) И НаименованиеПозиции <> Выборка.Наименование Тогда 
			ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
			ПозицияОбъект.Наименование = НаименованиеПозиции;
			ПозицияОбъект.Записать();
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросВТМестоПозицииВСтруктуреПредприятия(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания") Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МестоПозицииВСтруктуреПредприятия.Позиция КАК Позиция,
		|	МестоПозицииВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия
		|ПОМЕСТИТЬ ВТМестоПозицииВСтруктуреПредприятия
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
		|		ПО (МестоПозицииВСтруктуреПредприятия.Позиция = ВсеПозицииНаДатуАктуальности.Позиция)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВсеПозицииНаДатуАктуальности.Позиция", "ВсеПозицииНаДатуАктуальности." + ИмяПоляПозиция);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВсеПозицииНаДатуАктуальности", ИмяВТ);
	
	Возврат Запрос;
	
КонецФункции

Функция ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт 
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВСтруктуреПредприятия(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВСтруктуреПредприятия", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ДолжностьПоШтатномуРасписанию");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("МестоВСтруктуреПредприятия");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("МестоВСтруктуреПредприятия") Тогда
		ПутьКДанным = "МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт 
	
	Если ИсточникиДанных.Получить("СведенияОМестеВСтруктуреПредприятия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ПО (КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция)}";
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораОрганизаций(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт 
	
	Если Не СкрыватьУправленческуюОрганизацию(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.Предопределенный
		|	И &УсловиеПоиска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование";
		
	Если Параметры.Свойство("СтрокаПоиска") И Параметры.СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска);	
		УсловиеПоиска = "ПОДСТРОКА(Организации.Наименование, 1, " + СтрДлина(Параметры.СтрокаПоиска) +") = &СтрокаПоиска";
	Иначе 
		УсловиеПоиска = "ИСТИНА";
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Параметры.Отбор Цикл
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений")
			Или ТипЗнч(КлючИЗначение.Значение) = Тип("Массив")
			Или ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") Тогда
			
			ВидСравненияЗапроса = "В";
			
		Иначе
			ВидСравненияЗапроса = "=";
		КонецЕсли;
		
		УсловиеПоиска = УсловиеПоиска + "
			|	И Организации." + КлючИЗначение.Ключ + " " + ВидСравненияЗапроса + " (&" + КлючИЗначение.Ключ + ")";
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоиска", УсловиеПоиска);
	
	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЗаписи(Объект, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Источник", Объект.Подразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Источник = &Источник";
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Объект.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Объект.Ссылка;
		НоваяЗапись.Подразделение = Выборка.Подразделение;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУправленческуюОрганизацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если УправленческаяОрганизация <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = Справочники.Организации.СоздатьЭлемент();
	
	УправленческаяОрганизация.Наименование = НСтр("ru = 'Управленческая организация'");
	УправленческаяОрганизация.НаименованиеПолное = НСтр("ru = 'Управленческая организация'");
	УправленческаяОрганизация.НаименованиеСокращенное = НСтр("ru = 'Управленческая организация'");
	
	УправленческаяОрганизация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
	УправленческаяОрганизация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	УправленческаяОрганизация.ИмяПредопределенныхДанных = "УправленческаяОрганизация";
	
	УправленческаяОрганизация.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ПриУстановкеИспользованияУправленческойЗарплаты(ИспользоватьУправленческуюЗарплату) Экспорт
	
	Если ИспользоватьУправленческуюЗарплату = Истина Тогда
		СоздатьУправленческуюОрганизацию();
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементФормыПользовательскийОтборПоОрганизации(ПодчиненныеЭлементыНастроек, ИмяПоляОрганизация)
	
	Для Каждого ЭлементПодчиненныхЭлементовНастроек Из ПодчиненныеЭлементыНастроек.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементПодчиненныхЭлементовНастроек) = Тип("ГруппаФормы") И ЭлементПодчиненныхЭлементовНастроек.Заголовок = ИмяПоляОрганизация Тогда
			Для Каждого ЭлементГруппыОрганизация Из ЭлементПодчиненныхЭлементовНастроек.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппыОрганизация.Имя = ЭлементПодчиненныхЭлементовНастроек.Имя + "Значение" Тогда
					Возврат ЭлементГруппыОрганизация;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(ЭлементПодчиненныхЭлементовНастроек) = Тип("ГруппаФормы") Тогда
			ЭлементГруппыОрганизация = ЭлементФормыПользовательскийОтборПоОрганизации(ЭлементПодчиненныхЭлементовНастроек, ИмяПоляОрганизация);
			Если ЭлементГруппыОрганизация <> Неопределено Тогда
				Возврат ЭлементГруппыОрганизация;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьФормуДокументаОтражениеЗарплатыВБухучете(Форма) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = "НачисленнаяЗарплатаИВзносыМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
	
		Родитель = Форма.Элементы.Найти("НачисленнаяЗарплатаИВзносы");
		СледующийЭлемент = Форма.Элементы.Найти("НачисленнаяЗарплатаИВзносыВидОперации");
		
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.НачисленнаяЗарплатаИВзносы.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия'");
		
	КонецЕсли;
		
	ИмяЭлемента = "УдержаннаяЗарплатаМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
	
		Родитель = Форма.Элементы.Найти("УдержаннаяЗарплата");
		СледующийЭлемент = Форма.Элементы.Найти("УдержаннаяЗарплатаВидОперации");
		
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.УдержаннаяЗарплата.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеДокументаМестомВСтруктуреПредприятия(ДанныеДокумента, ИменаТаблиц) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблиц);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НомерТаблицы = 1;
	ИсходныеДанныеТекст = "";
	СотрудникиПериодыТекст = "";
	
	Для Каждого КлючИЗначение Из ДанныеДокумента Цикл 
		
		Если СписокТаблиц.Найти(КлючИЗначение.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = "ТаблицаДокумента" + НомерТаблицы;
		ИмяВременнойТаблицы = "ВТТаблицаДокумента" + НомерТаблицы;
		
		Запрос.УстановитьПараметр(ИмяТаблицы, КлючИЗначение.Значение);
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		               |	ТаблицаДокумента.ДатаНачала КАК Период
		               |ПОМЕСТИТЬ ВТТаблицаДокумента
		               |ИЗ
		               |	&ИмяТаблицы КАК ТаблицаДокумента";
					   
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаДокумента", ИмяВременнойТаблицы);
		
		РазделительЗапросов = ?(НомерТаблицы = 1, "", ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИсходныеДанныеТекст = ИсходныеДанныеТекст + РазделительЗапросов + ТекстЗапроса;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ТаблицаДокумента.Сотрудник,
		               |	ТаблицаДокумента.Период
		               |ПОМЕСТИТЬ ВТСотрудникиПериоды
		               |ИЗ
		               |	#ВТТаблицаДокумента КАК ТаблицаДокумента";
					   
		Если НомерТаблицы <> 1 Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТСотрудникиПериоды", "");
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТТаблицаДокумента", ИмяВременнойТаблицы);
		
		ТекстОбъединить = "
		                  |ОБЪЕДИНИТЬ
		                  |";

		Если НомерТаблицы = 1 Тогда 
			ТекстОбъединить = "";
		КонецЕсли;
		
		СотрудникиПериодыТекст = СотрудникиПериодыТекст + ТекстОбъединить + ТекстЗапроса;
		
		НомерТаблицы = НомерТаблицы + 1;
		
	КонецЦикла;
	
	Если ИсходныеДанныеТекст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ИсходныеДанныеТекст, СотрудникиПериодыТекст);
	
	Запрос.Текст = ИсходныеДанныеТекст;
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "МестоВСтруктуреПредприятия";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.Сотрудник,
	               |	КадровыеДанныеСотрудников.Период,
	               |	КадровыеДанныеСотрудников.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				   
	МестоВСтруктуреПредприятияСотрудников = Запрос.Выполнить().Выгрузить();
	МестоВСтруктуреПредприятияСотрудников.Индексы.Добавить("Сотрудник,Период");
	
	ТипСтруктураПредприятия = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	
	Для Каждого КлючИЗначение Из ДанныеДокумента Цикл 
		
		Если СписокТаблиц.Найти(КлючИЗначение.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента = КлючИЗначение.Значение;
		Если ТаблицаДокумента.Колонки.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда 
			ТаблицаДокумента.Колонки.Добавить("МестоВСтруктуреПредприятия", ТипСтруктураПредприятия);
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
			Отбор = Новый Структура("Сотрудник,Период", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ДатаНачала);
			НайденныеСтроки = МестоВСтруктуреПредприятияСотрудников.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаТаблицы.МестоВСтруктуреПредприятия = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьФормуДокументаНачислениеОценочныхОбязательствПоОтпускам(Форма) Экспорт 
	
	Если Не СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = "ОценочныеОбязательстваМестоВСтруктуреПредприятия";
	
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
		Родитель = Форма.Элементы.Найти("ОценочныеОбязательства");
		СледующийЭлемент = Форма.Элементы.Найти("ОценочныеОбязательстваПодразделение");
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.ОценочныеОбязательства.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия'");
	КонецЕсли;
	
	ИмяЭлемента = "ОценочныеОбязательстваПоСотрудникамМестоВСтруктуреПредприятия";
	Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда 
		Родитель = Форма.Элементы.Найти("ОценочныеОбязательстваПоСотрудникам");
		СледующийЭлемент = Форма.Элементы.Найти("ОценочныеОбязательстваПоСотрудникамПодразделение");
		СтруктураПредприятия = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, СледующийЭлемент); 
		СтруктураПредприятия.Вид = ВидПоляФормы.ПолеВвода;
		СтруктураПредприятия.ПутьКДанным = "Объект.ОценочныеОбязательстваПоСотрудникам.МестоВСтруктуреПредприятия";
		СтруктураПредприятия.Заголовок = НСтр("ru = 'Место в стр-ре предприятия'");
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяОбменУправлениеПредприятием2() Экспорт	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяОбменУправлениеПредприятием2 = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплатаERP") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		ИспользуетсяОбменУправлениеПредприятием2 = Модуль.ИспользуетсяОбменУправлениеПредприятием2();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуетсяОбменУправлениеПредприятием2;
	
КонецФункции

Процедура ОбновитьНастройкиСтруктурыПредприятияПриИспользованииОбменаУП2(ОбменНастроен) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплатаERP") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(ОбменНастроен);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.24";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.53";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ВключитьИспользованиеШтатногоРасписанияПриИспользованииЗарплатаКадрыКорпоративнаяПодсистемы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.28";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ЗаполнитьРегистрМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.21";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ЗаполнитьМестоПозицииШтатногоРасписанияВСтруктуреПредприятияПриОтсутствииУправленческойСтруктуры";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.24";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.УточнитьРеквизитыУправленческойОрганизации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.УстановитьПараметрыНабораСвойствСтруктураПредприятия";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("02f46668-44cd-4274-8a15-6452ee3ebf4a");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.28";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("344beb6e-0018-4cf6-b813-aff6d8cc1594");
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ЗаполнитьМестоВСтруктуреПредприятияВДанныхДляПодбораСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.10";
	Обработчик.Процедура = "РегистрыСведений.ПодчиненностьСтруктурныхЕдиниц.ЗаполнитьПодчиненностьСтруктурныхЕдиниц";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59bdc0ac-ee9a-429b-9a85-c7182adeced2");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра сведений ""ПодчиненностьСтруктурныхЕдиниц"".'");	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.151";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.ПометитьНаУдалениеПодразделениеДляУправленческойОрганизации";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0cc6dd7c-e00b-4326-a3e0-f06f8e6c4ba5");
	Обработчик.Комментарий = НСтр("ru = 'Пометка удаления для ошибочно созданного управленческого элемента.'");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц() Экспорт
	
	Соответствует = Истина;
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриУстановкеСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц(Соответствует);
	
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Не Соответствует);
	
КонецПроцедуры

Процедура ВключитьИспользованиеШтатногоРасписанияПриИспользованииЗарплатаКадрыКорпоративнаяПодсистемы() Экспорт 
	
	ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы И Не ИспользоватьШтатноеРасписание Тогда 
		
		НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписанияПоУмолчанию();
		
		Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	    ЗаполнитьЗначенияСвойств(Настройки, НастройкиШтатногоРасписания);
		УправлениеШтатнымРасписанием.ЗаписатьНастройкиШтатногоРасписания(Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрМестоПозицииШтатногоРасписанияВСтруктуреПредприятия() Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСеанса", ДатаСеанса);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ДатаСеанса КАК Период,
	               |	МестоСотрудникаВСтруктуреПредприятияСрезПоследних.Сотрудник,
	               |	МестоСотрудникаВСтруктуреПредприятияСрезПоследних.Подразделение
	               |ПОМЕСТИТЬ ВТМестоСотрудниковВСтруктуреПредприятия
	               |ИЗ
	               |	РегистрСведений.УдалитьМестоСотрудникаВСтруктуреПредприятия.СрезПоследних(&ДатаСеанса, ) КАК МестоСотрудникаВСтруктуреПредприятияСрезПоследних
	               |ГДЕ
	               |	МестоСотрудникаВСтруктуреПредприятияСрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	КадровыеДанные = "ДолжностьПоШтатномуРасписанию";
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТМестоСотрудниковВСтруктуреПредприятия");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадровыеДанныеСотрудников.Сотрудник,
	               |	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция
	               |ПОМЕСТИТЬ ВТПозицииСотрудников
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ПО КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = МестоПозицииВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	ЕСТЬNULL(МестоПозицииВСтруктуреПредприятия.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	               |	И НЕ КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПозицииСотрудников.Позиция,
	               |	МАКСИМУМ(МестоСотрудниковВСтруктуреПредприятия.Подразделение) КАК Подразделение
	               |ИЗ
	               |	ВТПозицииСотрудников КАК ПозицииСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМестоСотрудниковВСтруктуреПредприятия КАК МестоСотрудниковВСтруктуреПредприятия
	               |		ПО ПозицииСотрудников.Сотрудник = МестоСотрудниковВСтруктуреПредприятия.Сотрудник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПозицииСотрудников.Позиция";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМестоПозицииШтатногоРасписанияВСтруктуреПредприятияПриОтсутствииУправленческойСтруктуры() Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтатноеРасписание.Ссылка КАК Позиция,
	               |	ШтатноеРасписание.Подразделение
	               |ПОМЕСТИТЬ ВТПозицииШтатногоРасписания
	               |ИЗ
	               |	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
	               |		ПО ШтатноеРасписание.Ссылка = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	(МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение ЕСТЬ NULL 
	               |			ИЛИ МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПозицииШтатногоРасписания.Позиция,
	               |	СтруктураПредприятия.Ссылка КАК Подразделение
	               |ИЗ
	               |	ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ПО ПозицииШтатногоРасписания.Подразделение = СтруктураПредприятия.Источник";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
	КонецЦикла;
															  
КонецПроцедуры

Процедура УточнитьРеквизитыУправленческойОрганизации() Экспорт 
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если УправленческаяОрганизация = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УправленческаяОрганизация, "ЮридическоеФизическоеЛицо");
	
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда 
		Возврат;
	КонецЕсли;
	
	ОрганизацияОбъект = УправленческаяОрганизация.ПолучитьОбъект();
	
	ОрганизацияОбъект.НаименованиеПолное = НСтр("ru = 'Управленческая организация'");
	ОрганизацияОбъект.НаименованиеСокращенное = НСтр("ru = 'Управленческая организация'");
	
	ОрганизацияОбъект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
	ОрганизацияОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи", Истина);
	
	ОрганизацияОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСтруктураПредприятия(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СтруктураПредприятия", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияВДанныхДляПодбораСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.Наименование КАК Наименование,
		|	ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеДляПодбораСотрудников.Организация КАК Организация,
		|	ДанныеДляПодбораСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляПодбораСотрудников.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	ДанныеДляПодбораСотрудников.ПоДоговоруГПХ КАК ПоДоговоруГПХ,
		|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
		|		ПО ДанныеДляПодбораСотрудников.ДолжностьПоШтатномуРасписанию = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.МестоВСтруктуреПредприятия <> МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, "РегистрСведений.ДанныеДляПодбораСотрудников", "ИдентификаторЗаписи", Выборка.ИдентификаторЗаписи) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НаборДанныеДляПодбораСотрудников = РегистрыСведений.ДанныеДляПодбораСотрудников.СоздатьНаборЗаписей();
			НаборДанныеДляПодбораСотрудников.Отбор.Наименование.Установить(Выборка.Наименование);
			НаборДанныеДляПодбораСотрудников.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборДанныеДляПодбораСотрудников.Отбор.Организация.Установить(Выборка.Организация);
			НаборДанныеДляПодбораСотрудников.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборДанныеДляПодбораСотрудников.Отбор.ИдентификаторЗаписи.Установить(Выборка.ИдентификаторЗаписи);
			НаборДанныеДляПодбораСотрудников.Отбор.ПоДоговоруГПХ.Установить(Выборка.ПоДоговоруГПХ);
			
			НаборДанныеДляПодбораСотрудников.Прочитать();
			Для Каждого Запись Из НаборДанныеДляПодбораСотрудников Цикл
				Запись.МестоВСтруктуреПредприятия = Выборка.МестоВСтруктуреПредприятия;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборДанныеДляПодбораСотрудников);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеПодразделениеДляУправленческойОрганизации(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если УправленческаяОрганизация = Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если УправленческаяОрганизация.Пустая() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Источник = &УправленческаяОрганизация";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
		ПодразделениеОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло);
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло") Тогда
		Форма["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"] = СохраненныеНастройки["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"];
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить(), 0, 1);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 1, 0));
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
		Возврат;
	КонецЕсли;
	
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Параметры.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = 0);
	
КонецПроцедуры

#КонецОбласти

Функция СкрыватьУправленческуюОрганизацию(ПараметрыВыбора = Неопределено)
	
	ПредопределеннаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если ПредопределеннаяОрганизация = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ИспользуетсяУправленческаяОрганизация = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату")
		Или ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		ИспользуетсяУправленческаяОрганизация = Истина;
	КонецЕсли;
	
	ПоказыватьУправленческуюОрганизацию = Ложь;
	Если ПараметрыВыбора <> Неопределено И ПараметрыВыбора.Свойство("ПоказыватьУправленческуюОрганизацию") Тогда
		ПоказыватьУправленческуюОрганизацию = ПараметрыВыбора.ПоказыватьУправленческуюОрганизацию;
	КонецЕсли;
	
	СкрыватьУправленческуюОрганизацию = Не ПоказыватьУправленческуюОрганизацию Или Не ИспользуетсяУправленческаяОрганизация;
	Если Не СкрыватьУправленческуюОрганизацию Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПриСозданииФормыСпискаОрганизаций(Форма, Параметры, СписокОрганизаций) Экспорт
	
	Если Не СкрыватьУправленческуюОрганизацию(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределеннаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОрганизаций, "Ссылка", ПредопределеннаяОрганизация, ВидСравненияКомпоновкиДанных.НеРавно);
	
КонецПроцедуры

Процедура ДополнитьДополнительныеПоляОтчетаШтатноеРасписание(СоответствиеДополнительныхПолейПредставлениям) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременнойТаблицы = "Представления_ШтатноеРасписание";
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не СоответствиеДополнительныхПолейПредставлениям.Свойство(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений) Тогда
		
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		СоответствиеДополнительныхПолейПредставлениям.Вставить(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений);
		
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	СтрокаДополнительногоПоля.ПутьПоляСКД = "МестоВСтруктуреПредприятия";
	
КонецПроцедуры

Процедура ДополнитьДополнительныеПоляОтчетаКадроваяИсторияСотрудников(СоответствиеДополнительныхПолейПредставлениям) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременнойТаблицы = "_";
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не СоответствиеДополнительныхПолейПредставлениям.Свойство(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений) Тогда
		
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		СоответствиеДополнительныхПолейПредставлениям.Вставить(ИмяВременнойТаблицы, ДополнительныеПоляПредставлений);
		
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	
	ОписаниеСоединения = ЗарплатаКадрыОбщиеНаборыДанных.ПустоеОписаниеСоединения();
	ОписаниеСоединения.Источник = "РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеСоединения.Псевдоним = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
	ОписаниеСоединения.Условие = "ВсяКадроваяИстория.ДолжностьПоШтатномуРасписанию = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция";
	ОписаниеСоединения.ПсевдонимИсточникаСвязи = "ВсяКадроваяИстория";
	
	СтрокаДополнительногоПоля.Соединения.Добавить(ОписаниеСоединения);
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений объектов, имеющих реквизит с типом "СправочникСсылка.СтруктураПредприятия",
// для получения списка узлов-получателей по организациям, если структура предприятия соответствует структуре
// юридических лиц.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  СтруктураПредприятия - Ссылка или массив ссылок на структуру предприятия, по которым нужно получить список узлов-получателей.
//
Процедура ДополнитьОграничениеРегистрацииОбъектаОтборомПоСтруктуреПредприятия(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Подразделения) Экспорт
	
	Возврат;
	
	// Не ограничиваем по структуре предприятия, если Подразделения не указаны
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		Или Подразделения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Подразделения", Подразделения);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подразделения.Ссылка КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделения
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.Ссылка В(&СвойствоОбъекта_Подразделения)" +
	
	"
	|
	|;
	|
	|" + ТекстЗапроса + 
	
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|" +
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаПодразделения.Подразделение В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Подразделения.Подразделение
	|			ИЗ
	|				ВТПодразделения КАК Подразделения)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоПодразделениям
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0 И
	|	НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоПодразделениям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
	|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И 1 В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				1
	|			ИЗ
	|				ВТПодразделения)
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоПодразделениям
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаПодразделения.Подразделение) = 0 И
	|	НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоПодразделениям";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаПодразделения",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1.Подразделения'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='&%1ЭтотУзел'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

Процедура ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятия(ОграниченияРегистрации, ИмяПланаОбмена) Экспорт
	
	Возврат;
	
	МассивПодразделенийУзла = МассивДоступныхПодразделений(ИмяПланаОбмена);
	
	Если МассивПодразделенийУзла.Количество() > 0 И ОграниченияРегистрации.Подразделения.Количество() = 0 Тогда
		// Подразделения не указаны, требуется вычислить
		Если ОграниченияРегистрации.Сотрудники.Количество() > 0 Тогда
			ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятияСотрудников(ОграниченияРегистрации);
		КонецЕсли;
		Если ОграниченияРегистрации.ФизическиеЛица.Количество() > 0 Тогда
			ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятияФизическихЛиц(ОграниченияРегистрации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятияСотрудников(ОграниченияРегистрации) Экспорт
	
	Возврат;
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		// Объект ограничен, т.к. не все сотрудники доступны в документе
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиЗарплатаКадрыРасширенный.СоздатьВТСотрудники(ОграниченияРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ОграниченияРегистрации.ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	&ДатаПолученияДанных КАК Период
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	#ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаСотрудников", ОграниченияРегистрации.ИмяТаблицыСотрудники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаСотрудников.Сотрудник", "ТаблицаСотрудников." + ОграниченияРегистрации.ИмяПоляСотрудник);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "МестоВСтруктуреПредприятия");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	ПрисутствующиеПодразделения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, КадровыеДанныеСотрудников.ВыгрузитьКолонку("МестоВСтруктуреПредприятия"), Истина);
	
	Если ОграниченияРегистрации.ДополнительныеПодразделения <> Неопределено Тогда
		Если ТипЗнч(ОграниченияРегистрации.ДополнительныеПодразделения) <> Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОграниченияРегистрации.ДополнительныеПодразделения), Истина);
		ИначеЕсли ТипЗнч(ОграниченияРегистрации.ДополнительныеПодразделения) = Тип("Массив") И ОграниченияРегистрации.ДополнительныеПодразделения.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, ОграниченияРегистрации.ДополнительныеПодразделения, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Подразделения, ПрисутствующиеПодразделения, Истина);
	
КонецПроцедуры

Процедура ОграничитьРегистрацииОбъектовПоМестамВСтруктуреПредприятияФизическихЛиц(ОграниченияРегистрации) Экспорт
	
	Возврат;
	
	Если ОграниченияРегистрации.ОграничитьИзменениеОбъекта Тогда
		// Объект ограничен, т.к. не все сотрудники доступны в документе
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиЗарплатаКадрыРасширенный.СоздатьВТФизическиеЛица(ОграниченияРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОграниченияРегистрации.МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	#ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаФизическихЛиц", ОграниченияРегистрации.ИмяТаблицыФизическиеЛица);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФизическихЛиц.ФизическоеЛицо", "ТаблицаФизическихЛиц." + ОграниченияРегистрации.ИмяПоляФизическоеЛицо);
	
	МассивФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.КадровыеДанные = "МестоВСтруктуреПредприятия";
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОграниченияРегистрации.ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = МассивФизическихЛиц;
	СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ПрисутствующиеПодразделения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, СотрудникиФизическихЛиц.ВыгрузитьКолонку("МестоВСтруктуреПредприятия"), Истина);
	
	Если ОграниченияРегистрации.ДополнительныеПодразделения <> Неопределено Тогда
		Если ТипЗнч(ОграниченияРегистрации.ДополнительныеПодразделения) <> Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОграниченияРегистрации.ДополнительныеПодразделения), Истина);
		ИначеЕсли ТипЗнч(ОграниченияРегистрации.ДополнительныеПодразделения) = Тип("Массив") И ОграниченияРегистрации.ДополнительныеПодразделения.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрисутствующиеПодразделения, ОграниченияРегистрации.ДополнительныеПодразделения, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Подразделения, ПрисутствующиеПодразделения, Истина);
	
КонецПроцедуры

Функция СтруктураПредприятия() Экспорт
	
	Если СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц() Тогда
		// Если структуры соответствуют, то не возвращаем структуру предприятия.
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Подразделение,
	|	СтруктураПредприятия.Родитель КАК ПодразделениеРодитель
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	НЕ СтруктураПредприятия.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураПредприятия.Ссылка ИЕРАРХИЯ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МассивДоступныхПодразделений(ИмяПланаОбмена, УзелПланаОбмена = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		МассивПодразделенийУзла = УзелПланаОбмена.Подразделения.ВыгрузитьКолонку("Подразделение");
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланОбменаПодразделения.Подразделение КАК Подразделение
		|ИЗ
		|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаПодразделения КАК ПланОбменаПодразделения
		|		ПО (ПланОбменаПодразделения.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
		|ГДЕ
		|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
		|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
		|	И ПланОбменаПодразделения.Подразделение ЕСТЬ НЕ NULL ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланОбменаПодразделения",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1.Подразделения'"), ИмяПланаОбмена));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланОбмена",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1'"), ИмяПланаОбмена));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПланаОбменаЭтотУзел",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='&%1ЭтотУзел'"), ИмяПланаОбмена));
			
		Запрос.УстановитьПараметр(ИмяПланаОбмена + "ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
		
		МассивПодразделенийУзла = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
	КонецЕсли;
	
	Возврат ПодчиненныеПодразделения(МассивПодразделенийУзла);
	
КонецФункции

Процедура ДополнитьИменаПолейОграниченияРегистрацииРегистраСведений(СтруктураОграниченияРегистрации) Экспорт
	СтруктураОграниченияРегистрации.Вставить("ПозицииШтатногоРасписания", Новый Массив);
КонецПроцедуры

Процедура ДополнитьОграничениеРегистрацииРегистраСведений(НаборСведений, ИменаПолей, МассивОрганизаций, МассивПодразделений) Экспорт
	
	Возврат;
	
	// Позиции штатного расписания
	МассивПозиций = Новый Массив;
	Для Каждого ЗаписьНабора Из НаборСведений Цикл
		Если ТипЗнч(ИменаПолей.ПозицииШтатногоРасписания) = Тип("Массив") Тогда
			Для Каждого ИмяПозиции Из ИменаПолей.ПозицииШтатногоРасписания Цикл
				ЗначениеПоля = ЗаписьНабора[ИмяПозиции];
				Если ЗначениеЗаполнено(ЗначениеПоля) И МассивПозиций.Найти(ЗначениеПоля) = Неопределено Тогда
					МассивПозиций.Добавить(ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПоля = ЗаписьНабора[ИменаПолей.ПозицииШтатногоРасписания];
			Если ЗначениеЗаполнено(ЗначениеПоля) И МассивПозиций.Найти(ЗначениеПоля) = Неопределено Тогда
				МассивПозиций.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПозиций, "Владелец");
	Для каждого ЭлементСоответствия Из ОрганизацииПозиций Цикл
		Если МассивОрганизаций.Найти(ЭлементСоответствия.Значение) = Неопределено Тогда
			МассивОрганизаций.Добавить(ЭлементСоответствия.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МестаПозиций = МестаПозицийВСтруктуреПредприятия(МассивПозиций);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПодразделений, МестаПозиций.ВыгрузитьКолонку("Подразделение"), Истина);
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияДанныхДляПодбораСотрудников(НаборЗаписейДанныеДляПодбораСотрудников) Экспорт
	
	СписокПозиций = Новый Соответствие;
	Для Каждого Запись Из НаборЗаписейДанныеДляПодбораСотрудников Цикл
		
		Если ЗначениеЗаполнено(Запись.ДолжностьПоШтатномуРасписанию)
			И Не ЗначениеЗаполнено(Запись.МестоВСтруктуреПредприятия) Тогда
			
			СписокПозиций.Вставить(Запись.ДолжностьПоШтатномуРасписанию);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокПозиций.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокПозиций", ОбщегоНазначения.ВыгрузитьКолонку(СписокПозиций, "Ключ"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция КАК Позиция,
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение КАК Подразделение
			|ИЗ
			|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
			|ГДЕ
			|	МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция В(&СписокПозиций)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокПозиций.Вставить(Выборка.Позиция, Выборка.Подразделение);
			КонецЦикла;
			
			Для Каждого Запись Из НаборЗаписейДанныеДляПодбораСотрудников Цикл
				
				Если ЗначениеЗаполнено(Запись.ДолжностьПоШтатномуРасписанию) Тогда
					Запись.МестоВСтруктуреПредприятия = СписокПозиций.Получить(Запись.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормСпискаИлиВыбораСотрудников(Форма, Параметры) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.СтруктураПредприятия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"МестоВСтруктуреПредприятия",
		"Видимость",
		Истина);
	
	ДобавитьТаблицуСтруктурыПредприятия = Не Параметры.Отбор.Свойство("МестоВСтруктуреПредприятия");
	
	Если ДобавитьТаблицуСтруктурыПредприятия Тогда
		
		КоллекцияОтборов = Новый Массив;
		КоллекцияОтборов.Добавить(Форма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы);
		КоллекцияОтборов.Добавить(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы);
		КоллекцияОтборов.Добавить(СотрудникиКлиентСерверРасширенный.ПользовательскиеОтборы(Форма.Список));
		
		Для Каждого ЭлементыОтбора Из КоллекцияОтборов Цикл
			
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Филиал")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации")
					Или ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестоВСтруктуреПредприятия") Тогда
					
					ДобавитьТаблицуСтруктурыПредприятия = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ДобавитьТаблицуСтруктурыПредприятия Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДобавитьТаблицуСтруктурыПредприятия Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаОтборов = Форма.Элементы.Найти("ПодразделенияГруппыСотрудниковСтраницы");
	Если ГруппаОтборов <> Неопределено Тогда
		
		ИмяОрганизационнаяСтруктураСтраница = "ОрганизационнаяСтруктураСтраница";
		ОрганизационнаяСтруктураСтраница = Форма.Элементы.Найти(ИмяОрганизационнаяСтруктураСтраница);
		Если ОрганизационнаяСтруктураСтраница = Неопределено Тогда
			
			// Добавление реквизита
			
			МассивНовыхРеквизитов = Новый Массив;
			МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ОрганизационнаяСтруктура", Новый ОписаниеТипов("ДинамическийСписок")));
			
			Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
			
			Форма.ОрганизационнаяСтруктура.ОсновнаяТаблица = "Справочник.СтруктураПредприятия";
			
			// Добавление таблицы
			
			ОрганизационнаяСтруктураСтраница = Форма.Элементы.Добавить(ИмяОрганизационнаяСтруктураСтраница, Тип("ГруппаФормы"), ГруппаОтборов);
			ОрганизационнаяСтруктураСтраница.Вид = ВидГруппыФормы.Страница;
			
			ОрганизационнаяСтруктураТаблица = Форма.Элементы.Добавить("ОрганизационнаяСтруктураТаблица", Тип("ТаблицаФормы"), ОрганизационнаяСтруктураСтраница);
			ОрганизационнаяСтруктураТаблица.ПутьКДанным = "ОрганизационнаяСтруктура";
			ОрганизационнаяСтруктураТаблица.ТолькоПросмотр = Истина;
			ОрганизационнаяСтруктураТаблица.Шапка = Ложь;
			ОрганизационнаяСтруктураТаблица.Отображение = ОтображениеТаблицы.Дерево;
			ОрганизационнаяСтруктураТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			ОрганизационнаяСтруктураТаблица.ИзменятьСоставСтрок = Ложь;
			ОрганизационнаяСтруктураТаблица.ИзменятьПорядокСтрок = Ложь;
			ОрганизационнаяСтруктураТаблица.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_ОрганизационнаяСтруктураПриАктивизацииСтроки");
			
			ОрганизационнаяСтруктураТаблицаСсылка = Форма.Элементы.Добавить("ОрганизационнаяСтруктураТаблицаСсылка", Тип("ПолеФормы"), ОрганизационнаяСтруктураТаблица);
			ОрганизационнаяСтруктураТаблицаСсылка.Вид = ВидПоляФормы.ПолеНадписи;
			ОрганизационнаяСтруктураТаблицаСсылка.ПутьКДанным = "ОрганизационнаяСтруктура.Ссылка";
			
			// Добавление команды
			
			Команда = Форма.Команды.Добавить("ПоОрганизационнойСтруктуре");
			Команда.Заголовок = НСтр("ru='Структура предприятия'");
			Команда.Действие = "Подключаемый_ПоОрганизационнойСтруктуре";
			
			ГруппаКоманд = Форма.Элементы.Найти("ВидСпискаГруппа");
			Если ГруппаКоманд <> Неопределено Тогда
				
				КомандаФормы = Форма.Элементы.Добавить("ФормаПоОрганизационнойСтруктуре", Тип("КнопкаФормы"), ГруппаКоманд);
				КомандаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				КомандаФормы.ИмяКоманды = "ПоОрганизационнойСтруктуре";
				
				НастройкаВидПоОрганизационнойСтруктуре = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре");
				КомандаФормы.Пометка = ?(НастройкаВидПоОрганизационнойСтруктуре = Неопределено, Ложь, НастройкаВидПоОрганизационнойСтруктуре);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокСотрудниковУстановитьОтображениеСписков(Форма, СохранитьНастройки) Экспорт
	
	ОрганизационнаяСтруктураКлиентСервер.СписокСотрудниковУстановитьОтображениеСписков(Форма);
	
	Если СохранитьНастройки Тогда
		
		Если Не Форма.ПолучитьФункциональнуюОпциюФормы("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре", Ложь);
		Иначе
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокСотрудников", "ВидПоОрганизационнойСтруктуре", Форма.Элементы.ФормаПоОрганизационнойСтруктуре.Пометка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДополнительныхПолейПредставленийОтчетовПоСотрудникам(ДополнительныеПоляПредставлений) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	СтрокаДополнительногоПоля.ПутьПоляСКД = "РабочееМесто.МестоВСтруктуреПредприятия";
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоляПредставлений = Неопределено;
	Если Не ДополнительныеПоля.Свойство("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляПредставлений) Тогда
		ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	КонецЕсли;
	
	СтрокаДополнительногоПоля = ДополнительныеПоляПредставлений.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "МестоВСтруктуреПредприятия";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудников",
		"МестоВСтруктуреПредприятия",
		"РабочееМесто.МестоВСтруктуреПредприятия");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудниковНаКонецПериода",
		"МестоВСтруктуреПредприятияНаКонецПериода",
		"РабочееМесто.МестоВСтруктуреПредприятияНаКонецПериода");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеГоловныхСотрудников",
		"МестоВСтруктуреПредприятияГоловногоСотрудникаНаКонецПериода",
		"РабочееМесто.МестоВСтруктуреПредприятияГоловногоСотрудникаНаКонецПериода",
		НСтр("ru='Место в структуре предприятия основного сотрудника на конец периода'"));
	
КонецПроцедуры


#Область УправлениеДоступом

// Обслуживание подсистемы УправлениеДоступом
// см. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
//
Процедура УправлениеДоступомЗаполнитьСвойстваВидаДоступа(ВидыДоступа) Экспорт
	
	// Структура предприятия.
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "СтруктураПредприятия";
	ВидДоступа.Представление = НСтр("ru = 'Структура предприятия'");
	ВидДоступа.ТипЗначений = Тип("СправочникСсылка.СтруктураПредприятия");
	
КонецПроцедуры

#КонецОбласти


#Область ИсточникСведенийОШтатномРасписании

Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	ДобавитьОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников)
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		
		ИдентификаторИсточника = "РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия";
		ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
		
		ИмяДанныхШР = "МестоВСтруктуреПредприятия";
		УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника,
			"РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение");
		
		Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия
				|		ПО ОтборПозицийШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция}";
			
		Иначе
			
			ОписаниеИсточника.ТекстСоединений = "
				|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия
				|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийМестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция}";
			
		КонецЕсли;
		
	Иначе
		УправлениеШтатнымРасписанием.ДобавитьПустоеОписаниеСведенийМестаВСтруктуреПредприятия(ОписаниеИсточников)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
