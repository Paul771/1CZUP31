#Область СлужебныйПрограммныйИнтерфейс

// Формирует печатную форму бланка анкеты кандидата
//
// Параметры:
//   ШаблонАнкеты - СправочникСсылка.ШаблоныАнкет - шаблон анкеты, по которому формируется печатная форма.
//
// ВозвращаемоеЗначение:
//   ТабличныйДокумент - печатная форма бланка анкеты кандидата.
//
Функция ПечатьАнкеты(ШаблонАнкеты) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ШаблонАнкеты = Справочники.ШаблоныАнкет.ПустаяСсылка() Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("БланкАнкетыЭлектронногоИнтервью");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.ИмяШаблона = ШаблонАнкеты.Наименование;
	ТабличныйДокумент.Вывести(Шапка);
	Если ЗначениеЗаполнено(ШаблонАнкеты.Вступление) Тогда
		Вступление = Макет.ПолучитьОбласть("Вступление");
		Вступление.Параметры.Вступление = ШаблонАнкеты.Вступление;
		ТабличныйДокумент.Вывести(Вступление);
	КонецЕсли;
	
	Результат = ДанныеВопросовШаблонаАнкеты(ШаблонАнкеты);
	Если Результат.Пустой() Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Выборка.Количество() > 0 Тогда
		ДобавитьСтрокиДереваАнкеты(Выборка, Макет, ТабличныйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонАнкеты.Заключение) Тогда
		Заключение = Макет.ПолучитьОбласть("Заключение");
		Заключение.Параметры.Заключение = ШаблонАнкеты.Заключение;
		ТабличныйДокумент.Вывести(Заключение);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура-обработчик подписки РассчитатьХарактеристикиФизЛиц.
// Рассчитывает характеристики физических лиц по данным набора записей регистра ответов на вопросы анкет.
//
Процедура РассчитатьХарактеристикиФизЛиц(НаборЗаписейРегистра, Отказ, Замещение) Экспорт
	
	ИспользоватьЭлектронноеИнтервью = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронноеИнтервью");
	Если Не ИспользоватьЭлектронноеИнтервью Тогда
		Возврат;
	КонецЕсли;
	
	Анкета = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	ЗапросПараметровОтбора = Новый Запрос;
	ЗапросПараметровОтбора.Текст =
		"ВЫБРАТЬ
		|	АнкетыКандидатов.Вакансия КАК Вакансия,
		|	АнкетыКандидатов.Кандидат КАК Кандидат,
		|	АнкетыКандидатов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	АнкетыКандидатов.ЭтапРаботыСКандидатом КАК Этап
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|ГДЕ
		|	АнкетыКандидатов.Анкета = &Анкета";
	ЗапросПараметровОтбора.УстановитьПараметр("Анкета", Анкета);
	РезультатЗапросаПараметровОтбора = ЗапросПараметровОтбора.Выполнить();
	Если РезультатЗапросаПараметровОтбора.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаПараметровОтбора = РезультатЗапросаПараметровОтбора.Выбрать();
	ВыборкаПараметровОтбора.Следующий();
	ОтборВакансия = ВыборкаПараметровОтбора.Вакансия;
	ОтборФизическоеЛицо = ВыборкаПараметровОтбора.ФизическоеЛицо;
	Кандидат = ВыборкаПараметровОтбора.Кандидат;
	ЭтапРаботы = ВыборкаПараметровОтбора.Этап;
	
	НаборХарактеристик = РегистрыСведений.ХарактеристикиФизическихЛиц.СоздатьНаборЗаписей();
	НаборХарактеристик.Отбор.Вакансия.Установить(ОтборВакансия);
	НаборХарактеристик.Отбор.ФизическоеЛицо.Установить(ОтборФизическоеЛицо);
	НаборХарактеристик.Прочитать();
	
	МассивСтарыхЗаписей = Новый Массив;
	Для Каждого ТекущаяЗапись Из НаборХарактеристик Цикл
		Если ТекущаяЗапись.Этап = ЭтапРаботы Тогда
			МассивСтарыхЗаписей.Добавить(ТекущаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УстаревшаяЗапись Из МассивСтарыхЗаписей Цикл
		НаборХарактеристик.Удалить(УстаревшаяЗапись);
	КонецЦикла;
	
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		НаборХарактеристик.Записать();
		Кандидаты = Новый Массив;
		Кандидаты.Добавить(Кандидат);
		РассчитатьОценкиКандидатов(ОтборВакансия, Кандидаты);
		Возврат;
	КонецЕсли;
	
	Вопрос = Неопределено;
	Ответ = Неопределено;
	Родитель = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию("Служебные вопросы", Истина, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка());
	Если ЗначениеЗаполнено(Родитель) Тогда
		Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию("Отказался отвечать", Истина, Родитель);
	КонецЕсли;
	
	Ответы = РасширеннаяТаблицаОтветов(НаборЗаписейРегистра);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ответы", Ответы);
	Запрос.УстановитьПараметр("ВопросОтказалсяОтвечать", Вопрос);
	Запрос.УстановитьПараметр("Расшифровка", Ложь);
	Запрос.Текст = ТекстЗапросаПоБаллам();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = НаборХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Период = Анкета.Дата;
		НоваяЗапись.Этап = ЭтапРаботы
	КонецЦикла;
	НаборХарактеристик.Записать();
	
	Кандидаты = Новый Массив;
	Кандидаты.Добавить(Кандидат);
	РассчитатьОценкиКандидатов(ОтборВакансия, Кандидаты);
	
КонецПроцедуры

// Процедура-обработчик подписки ЗавершитьЭтапРаботыСКандидатомПриПроведенииАнкеты.
// Завершает этап работы с кандидатом при проведении анкеты по этому этапу.
//
Процедура ЗавершитьЭтапРаботыСКандидатом(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АнкетыКандидатов.Вакансия,
		|	АнкетыКандидатов.ЭтапРаботыСКандидатом,
		|	АнкетыКандидатов.Кандидат,
		|	РаботаСКандидатами.Бронь КАК Бронь,
		|	РаботаСКандидатами.Период
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|		ПО АнкетыКандидатов.Кандидат = РаботаСКандидатами.Кандидат
		|			И АнкетыКандидатов.ЭтапРаботыСКандидатом = РаботаСКандидатами.ЭтапРаботы
		|ГДЕ
		|	АнкетыКандидатов.Анкета = &Анкета";
	Запрос.УстановитьПараметр("Анкета", Источник.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВакансии = Справочники.Вакансии.ДанныеВакансии(Выборка.Вакансия);
		СтрокаЭтапаВакансии = Неопределено;
		Для Каждого Строка Из ДанныеВакансии.ЭтапыРаботыСКандидатами Цикл
			Если Строка.ЭтапРаботы = Выборка.ЭтапРаботыСКандидатом Тогда
				СтрокаЭтапаВакансии = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеЭтапа = ПодборПерсоналаКлиентСервер.ОписаниеЭтапаРаботыСКандидатом();
		ОписаниеЭтапа.Этап = Выборка.ЭтапРаботыСКандидатом;
		ОписаниеЭтапа.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден;
		ОписаниеЭтапа.Период = ТекущаяДатаСеанса();
		Если СтрокаЭтапаВакансии <> Неопределено Тогда
			ОписаниеЭтапа.Комментарий = СтрокаЭтапаВакансии.Комментарий;
			ОписаниеЭтапа.ШаблонАнкеты = СтрокаЭтапаВакансии.ШаблонАнкеты;
		КонецЕсли;
		ПрежниеДанныеЭтапа = Справочники.ЭтапыРаботыСКандидатами.СтруктураДанныхПланированияЭтапа();
		ЗаполнитьЗначенияСвойств(ПрежниеДанныеЭтапа, Выборка);
		ПодборПерсонала.УстановитьСостояниеЭтапаРаботыКандидата(Выборка.Кандидат, ОписаниеЭтапа, ПрежниеДанныеЭтапа);
	КонецЦикла;
	
КонецПроцедуры

// Формирует дерево расшифровки характеристик кандидата по ответам на вопросы анкет
//
// Параметры:
//   Вакансия - СправочникСсылка.Вакансии - вакансия для расшифровки.
//   ФизическиеЛица - СписокЗначений - физические лица для расшифровки.
//   ХарактеристикаПерсонала - ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала - характеристика персонала для расшифровки.
//   ЗначениеХарактеристики - СправочникСсылка.ЗначенияХарактеристикПерсонала - значение характеристики персонала для расшифровки.
//
// ВозвращаемоеЗначение:
//   ДеревоЗначений - результат расшифровки характеристики кандидата по ответам на вопросы анкет.
//
Функция РасшифровкаХарактеристикПоОтветам(Вакансия, ФизическиеЛица, ХарактеристикаПерсонала, ЗначениеХарактеристики) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
		|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
		|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ОтветыНаВопросыАнкет.НомерЯчейки КАК НомерЯчейки,
		|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
		|	ОтветыНаВопросыАнкет.ОткрытыйОтвет КАК ОткрытыйОтвет
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
		|		ПО АнкетыКандидатов.Анкета = ОтветыНаВопросыАнкет.Анкета
		|ГДЕ
		|	(АнкетыКандидатов.ФизическоеЛицо В(&ФизическиеЛица))
		|	И АнкетыКандидатов.Вакансия = &Вакансия";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Вопрос = Неопределено;
	Ответ = Неопределено;
	Родитель = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию("Служебные вопросы", Истина, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка());
	Если ЗначениеЗаполнено(Родитель) Тогда
		Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию("Отказался отвечать", Истина, Родитель);
	КонецЕсли;
	
	Ответы = РасширеннаяТаблицаОтветов(РезультатЗапроса.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ХарактеристикаПерсонала", ХарактеристикаПерсонала);
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеХарактеристики);
	Запрос.УстановитьПараметр("Ответы", Ответы);
	Запрос.УстановитьПараметр("ВопросОтказалсяОтвечать", Вопрос);
	Запрос.УстановитьПараметр("Расшифровка", Истина);
	Запрос.Текст = ТекстЗапросаПоБаллам();
	
	Запрос.Текст = Запрос.Текст + ";" +
		"ВЫБРАТЬ
		|	ВопросыДляСобеседования.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	МАКСИМУМ(ВопросыДляСобеседования.ВопросШаблонаАнкетыЭлементарныйВопрос) КАК ВопросШаблонаАнкетыЭлементарныйВопрос,
		|	МАКСИМУМ(ВопросыДляСобеседования.ЭлементарныйВопрос) КАК ЭлементарныйВопрос,
		|	МАКСИМУМ(ВопросыДляСобеседования.Вопрос) КАК Вопрос
		|ПОМЕСТИТЬ ВТСписокВопросов
		|ИЗ
		|	ВТВопросыДляСобеседования КАК ВопросыДляСобеседования
		|ГДЕ
		|	НЕ ВопросыДляСобеседования.ВопросДляСобеседования ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВопросыДляСобеседования.ВопросДляСобеседования
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВопросыДляСобеседования.ВопросДляСобеседования,
		|	ВопросыДляСобеседования.ВопросШаблонаАнкетыЭлементарныйВопрос,
		|	ВопросыДляСобеседования.ЭлементарныйВопрос,
		|	МАКСИМУМ(ВопросыДляСобеседования.Вопрос)
		|ИЗ
		|	ВТВопросыДляСобеседования КАК ВопросыДляСобеседования
		|ГДЕ
		|	ВопросыДляСобеседования.ВопросДляСобеседования ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВопросыДляСобеседования.ВопросДляСобеседования,
		|	ВопросыДляСобеседования.ВопросШаблонаАнкетыЭлементарныйВопрос,
		|	ВопросыДляСобеседования.ЭлементарныйВопрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеБаллы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МаксимальныеБаллы.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	МаксимальныеБаллы.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	МаксимальныеБаллы.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	СписокВопросов.Вопрос КАК Вопрос,
		|	МаксимальныеБаллы.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ЕСТЬNULL(ВТВопросыДляСобеседования.Ответ, """") КАК Ответ,
		|	ЕСТЬNULL(ОтветыСБаллами.Балл, 0) КАК Балл,
		|	МаксимальныеБаллы.Балл КАК МаксимальныйБалл
		|ПОМЕСТИТЬ ВТРасшифровкаБаллов
		|ИЗ
		|	ВТМаксимальныеБаллы КАК МаксимальныеБаллы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАктуальныеАнкеты КАК ВТАктуальныеАнкеты
		|		ПО МаксимальныеБаллы.Вакансия = ВТАктуальныеАнкеты.Вакансия
		|			И МаксимальныеБаллы.ФизическоеЛицо = ВТАктуальныеАнкеты.ФизическоеЛицо
		|			И МаксимальныеБаллы.ХарактеристикаПерсонала = ВТАктуальныеАнкеты.ХарактеристикаПерсонала
		|			И МаксимальныеБаллы.ЗначениеХарактеристики = ВТАктуальныеАнкеты.ЗначениеХарактеристики
		|			И МаксимальныеБаллы.Анкета = ВТАктуальныеАнкеты.Анкета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокВопросов КАК СписокВопросов
		|		ПО (ВЫБОР
		|				КОГДА МаксимальныеБаллы.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|					ТОГДА СписокВопросов.ВопросДляСобеседования ЕСТЬ NULL
		|							И МаксимальныеБаллы.ЭлементарныйВопрос = СписокВопросов.ВопросШаблонаАнкетыЭлементарныйВопрос
		|				ИНАЧЕ МаксимальныеБаллы.ВопросДляСобеседования = СписокВопросов.ВопросДляСобеседования
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВопросыДляСобеседования КАК ВТВопросыДляСобеседования
		|		ПО МаксимальныеБаллы.Вакансия = ВТВопросыДляСобеседования.Вакансия
		|			И МаксимальныеБаллы.ФизическоеЛицо = ВТВопросыДляСобеседования.Кандидат.ФизическоеЛицо
		|			И (МаксимальныеБаллы.ВопросДляСобеседования = ВТВопросыДляСобеседования.ВопросДляСобеседования
		|				ИЛИ МаксимальныеБаллы.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|					И ВТВопросыДляСобеседования.ВопросДляСобеседования ЕСТЬ NULL)
		|			И МаксимальныеБаллы.ЭлементарныйВопрос = ВТВопросыДляСобеседования.ЭлементарныйВопрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветыСБаллами КАК ОтветыСБаллами
		|		ПО МаксимальныеБаллы.Вакансия = ОтветыСБаллами.Вакансия
		|			И МаксимальныеБаллы.ФизическоеЛицо = ОтветыСБаллами.ФизическоеЛицо
		|			И МаксимальныеБаллы.ХарактеристикаПерсонала = ОтветыСБаллами.ХарактеристикаПерсонала
		|			И МаксимальныеБаллы.ЗначениеХарактеристики = ОтветыСБаллами.ЗначениеХарактеристики
		|			И (МаксимальныеБаллы.ВопросДляСобеседования = ОтветыСБаллами.ВопросДляСобеседования
		|				ИЛИ МаксимальныеБаллы.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|					И ОтветыСБаллами.ВопросДляСобеседования ЕСТЬ NULL)
		|			И МаксимальныеБаллы.ЭлементарныйВопрос = ОтветыСБаллами.ЭлементарныйВопрос
		|ГДЕ
		|	(МаксимальныеБаллы.ХарактеристикаПерсонала = &ХарактеристикаПерсонала
		|			ИЛИ &ХарактеристикаПерсонала = НЕОПРЕДЕЛЕНО)
		|	И (МаксимальныеБаллы.ЗначениеХарактеристики = &ЗначениеХарактеристики
		|			ИЛИ &ЗначениеХарактеристики = НЕОПРЕДЕЛЕНО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаБаллов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасшифровкаБаллов.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	РасшифровкаБаллов.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	РасшифровкаБаллов.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	РасшифровкаБаллов.Вопрос КАК Вопрос,
		|	РасшифровкаБаллов.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	РасшифровкаБаллов.Ответ КАК Ответ,
		|	РасшифровкаБаллов.Балл КАК Балл,
		|	РасшифровкаБаллов.МаксимальныйБалл КАК МаксимальныйБалл,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.МаксимальныйВесЗначения, 0) = 0
		|			ТОГДА ЕСТЬNULL(ВакансииХарактеристикиПерсонала.ВесЗначения, 0)
		|		ИНАЧЕ ЕСТЬNULL(ВакансииХарактеристикиПерсонала.ВесЗначения, 0) / ВложенныйЗапрос.МаксимальныйВесЗначения
		|	КОНЕЦ КАК Вес,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.МаксимальныйВесЗначения, 0) = 0
		|			ТОГДА ЕСТЬNULL(ВакансииХарактеристикиПерсонала.ВесЗначения, 0)
		|		ИНАЧЕ ЕСТЬNULL(ВакансииХарактеристикиПерсонала.ВесЗначения, 0) / ВложенныйЗапрос.МаксимальныйВесЗначения
		|	КОНЕЦ * ЕСТЬNULL(ИтоговыеЗначения.Балл, 0) КАК ИтоговыйБалл
		|ИЗ
		|	ВТРасшифровкаБаллов КАК РасшифровкаБаллов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ХарактеристикиПерсонала КАК ВакансииХарактеристикиПерсонала
		|		ПО РасшифровкаБаллов.ХарактеристикаПерсонала = ВакансииХарактеристикиПерсонала.Характеристика
		|			И РасшифровкаБаллов.ЗначениеХарактеристики = ВакансииХарактеристикиПерсонала.Значение
		|			И (ВакансииХарактеристикиПерсонала.Ссылка = &Вакансия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеЗначения КАК ИтоговыеЗначения
		|		ПО РасшифровкаБаллов.ФизическоеЛицо = ИтоговыеЗначения.ФизическоеЛицо
		|			И РасшифровкаБаллов.ХарактеристикаПерсонала = ИтоговыеЗначения.ХарактеристикаПерсонала
		|			И РасшифровкаБаллов.ЗначениеХарактеристики = ИтоговыеЗначения.ЗначениеХарактеристики
		|			И (ИтоговыеЗначения.Вакансия = &Вакансия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВакансииХарактеристикиПерсонала.Ссылка КАК Ссылка,
		|			ВакансииХарактеристикиПерсонала.Характеристика КАК Характеристика,
		|			МАКСИМУМ(ВакансииХарактеристикиПерсонала.ВесЗначения) КАК МаксимальныйВесЗначения
		|		ИЗ
		|			Справочник.Вакансии.ХарактеристикиПерсонала КАК ВакансииХарактеристикиПерсонала
		|		ГДЕ
		|			ВакансииХарактеристикиПерсонала.Ссылка = &Вакансия
		|			И (ВакансииХарактеристикиПерсонала.Характеристика = &ХарактеристикаПерсонала
		|					ИЛИ &ХарактеристикаПерсонала = НЕОПРЕДЕЛЕНО)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВакансииХарактеристикиПерсонала.Ссылка,
		|			ВакансииХарактеристикиПерсонала.Характеристика) КАК ВложенныйЗапрос
		|		ПО РасшифровкаБаллов.ХарактеристикаПерсонала = ВложенныйЗапрос.Характеристика
		|ИТОГИ
		|	СУММА(Балл),
		|	СУММА(МаксимальныйБалл),
		|	МАКСИМУМ(Вес),
		|	МАКСИМУМ(ИтоговыйБалл)
		|ПО
		|	ФизическоеЛицо,
		|	ХарактеристикаПерсонала,
		|	ЗначениеХарактеристики,
		|	Вопрос,
		|	ЭлементарныйВопрос,
		|	Ответ";
	
	ДанныеРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Возврат ДанныеРезультат;
	
КонецФункции

// Формирует таблицу для отображения дерева в формах настроек вопросов
//
Процедура ЗаполнитьТаблицуДереваКритериевОценки(ДеревоРезультат, Ответы, СоздаватьНовыеОбъекты = Ложь, ЭлементарныйВопрос = Неопределено, ОтветНаВопрос = Неопределено, 
	ЭлементарныйВопросВопросаДляСобеседования = Неопределено, ОтветНаВопросВопросаДляСобеседования = Неопределено, СтарыеОтветы = Неопределено) Экспорт 
		
	Для Каждого СтрокаДерева Из ДеревоРезультат Цикл
		
		Уровень = СтрокаДерева.Уровень();
		
		Если Уровень = 2 
			И Не ЗначениеЗаполнено(СтрокаДерева.ОтветНаВопрос) Тогда
			Продолжить;
		КонецЕсли; 

		Если Уровень = 3 
			И Не ЗначениеЗаполнено(СтрокаДерева.Характеристика) 
			И Не ЗначениеЗаполнено(СтрокаДерева.Значение) 
			И Не ЗначениеЗаполнено(СтрокаДерева.Балл) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Уровень = 3 
			И СоздаватьНовыеОбъекты 
			И Не (ЗначениеЗаполнено(СтрокаДерева.Характеристика) 
			И ЗначениеЗаполнено(СтрокаДерева.Значение) 
			И ЗначениеЗаполнено(СтрокаДерева.Балл)) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ответы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если СоздаватьНовыеОбъекты И (Уровень = 1 Или Уровень = 2) Тогда
			Если Уровень = 1 Тогда
				ИмяКолонки = "ЭлементарныйВопрос";
			ИначеЕсли Уровень = 2 Тогда 
				ИмяКолонки = "ОтветНаВопрос";
			КонецЕсли;
			СтрокаОбъект = НоваяСтрока[ИмяКолонки].ПолучитьОбъект();
			НовОбъект = СтрокаОбъект.Скопировать();
			НовОбъект.УстановитьНовыйКод();
			Если Уровень = 2 Тогда 
				НовОбъект.Владелец = ЭлементарныйВопрос;
			КонецЕсли;
			НовОбъект.Записать();
			НоваяСтрока[ИмяКолонки + "ВопросаДляСобеседования"] = НоваяСтрока[ИмяКолонки];
			НоваяСтрока[ИмяКолонки] = НовОбъект.Ссылка;
			Если Уровень = 1 Тогда
				ЭлементарныйВопрос = НовОбъект.Ссылка;
				ЭлементарныйВопросВопросаДляСобеседования = НоваяСтрока.ЭлементарныйВопросВопросаДляСобеседования;
			ИначеЕсли Уровень = 2 Тогда 
				НоваяСтрока.ЭлементарныйВопрос = ЭлементарныйВопрос;
				НоваяСтрока.ЭлементарныйВопросВопросаДляСобеседования = ЭлементарныйВопросВопросаДляСобеседования;
				ОтветНаВопрос = НоваяСтрока.ОтветНаВопрос;
				ОтветНаВопросВопросаДляСобеседования = НоваяСтрока.ОтветНаВопросВопросаДляСобеседования;
			КонецЕсли;
			
			Если СтарыеОтветы <> Неопределено И Уровень = 2 Тогда
				СтруктураВопросовДляСобеседования = Новый Структура;
				СтруктураВопросовДляСобеседования.Вставить("ЭлементарныйВопрос", СтрокаДерева.ЭлементарныйВопрос);
				СтруктураВопросовДляСобеседования.Вставить("ОтветНаВопрос", СтрокаДерева.ОтветНаВопрос);
				СтарыеОтветыСтроки = СтарыеОтветы.НайтиСтроки(СтруктураВопросовДляСобеседования);
				Если СтарыеОтветыСтроки.Количество() > 0 Тогда
					НоваяСтрока.СтарыйЭлементарныйВопрос = СтарыеОтветыСтроки[0].СтарыйЭлементарныйВопрос;
					НоваяСтрока.СтарыйОтветНаВопрос = СтарыеОтветыСтроки[0].СтарыйОтветНаВопрос;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Если СоздаватьНовыеОбъекты И Уровень = 3 Тогда
			НоваяСтрока.ЭлементарныйВопрос = ЭлементарныйВопрос;
			НоваяСтрока.ОтветНаВопрос = ОтветНаВопрос;
			НоваяСтрока.ЭлементарныйВопросВопросаДляСобеседования = ЭлементарныйВопросВопросаДляСобеседования;
			НоваяСтрока.ОтветНаВопросВопросаДляСобеседования = ОтветНаВопросВопросаДляСобеседования;
		КонецЕсли;
		
		Если Не СоздаватьНовыеОбъекты И НоваяСтрока.Свойство("ЭлементарныйВопросВопросаДляСобеседования") Тогда
			Если Уровень = 0 Тогда
				НоваяСтрока.ЭлементарныйВопросВопросаДляСобеседования = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка();
				НоваяСтрока.ОтветНаВопросВопросаДляСобеседования = Справочники.ВариантыОтветовАнкет.ПустаяСсылка();
			ИначеЕсли Уровень = 1 Тогда
				НоваяСтрока.ОтветНаВопросВопросаДляСобеседования = Справочники.ВариантыОтветовАнкет.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
		
		НоваяСтрока.Уровень = СтрокаДерева.Уровень();
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуДереваКритериевОценки(СтрокаДерева.Строки, Ответы, СоздаватьНовыеОбъекты, ЭлементарныйВопрос, ОтветНаВопрос, ЭлементарныйВопросВопросаДляСобеседования, ОтветНаВопросВопросаДляСобеседования, СтарыеОтветы);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Установка оформления дерева критериев оценки
//
Процедура УстановитьОформлениеДереваКритериевОценки(Форма) Экспорт 
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КритерииОценкиДерево.КоличествоКлючей");
	Отбор.ПравоеЗначение = 0;
	Отбор.Использование = Истина;
	
	Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КритерииОценкиДерево.Уровень");
	Отбор.ПравоеЗначение = 1;
	Отбор.Использование = Истина;
	
	ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КритерииОценкиДерево"); 
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

// Находит или создает вопрос для собеседования по наименованию из макета Библиотека.
//
// Параметры:
//   ВопросДляСобеседованияСтрокой - строка - наименование вопроса для собеседования.
//   БиблиотекаТаблица - ТаблицаЗначений - таблица из библиотеки Вопросов для собеседования.
//   БиблиотекаТаблицаКлючевыхВопросов - ТаблицаЗначений - таблица ключевых вопросов из библиотеки Вопросов для собеседования.
//   БиблиотекаОтветовТаблица - ТаблицаЗначений - таблица ответов из библиотеки Вопросов для собеседования.
//   БиблиотекаХарактеристикТаблица - ТаблицаЗначений - таблица характеристик персонала из библиотеки.
//
// ВозвращаемоеЗначение:
//   СправочникСсылка.ВопросыДляСобеседования - ссылка на вопрос.
//
Функция ВопросДляСобеседованияИзМакета(ВопросДляСобеседованияСтрокой, БиблиотекаТаблица, БиблиотекаТаблицаКлючевыхВопросов, БиблиотекаОтветовТаблица, БиблиотекаХарактеристикТаблица) Экспорт
	
	Если Не ЗначениеЗаполнено(ВопросДляСобеседованияСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВопросСсылка = Справочники.ВопросыДляСобеседования.НайтиПоНаименованию(ВопросДляСобеседованияСтрокой, Истина);
	Если ЗначениеЗаполнено(ВопросСсылка) Тогда
		Возврат ВопросСсылка;
	КонецЕсли;
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Наименование", ВопросДляСобеседованияСтрокой);
	СтрокиКлючей = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиКлючей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВопросДляСобеседования = Справочники.ВопросыДляСобеседования.СоздатьЭлемент();
	ВопросДляСобеседования.Наименование = ВопросДляСобеседованияСтрокой;
	ВопросДляСобеседования.ТипВопроса = Перечисления.ТипыВопросовПоМетодуСИвановой[СтрокиКлючей[0].ТипВопроса];
	ВопросДляСобеседования.Формулировка = СтрокиКлючей[0].Формулировка;
	ВопросДляСобеседования.Подсказка = СтрокиКлючей[0].Подсказка;
	ВопросДляСобеседования.СпособОтображенияПодсказки = Перечисления.СпособыОтображенияПодсказок[СтрокиКлючей[0].СпособОтображенияПодсказки];
	
	СтрокиВопросов = БиблиотекаТаблицаКлючевыхВопросов.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекущаяСтрока Из СтрокиВопросов Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЭлементарныйВопрос) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементарныйВопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
		ЭлементарныйВопрос.Наименование = ТекущаяСтрока.ЭлементарныйВопрос;
		ЭлементарныйВопрос.Формулировка = ТекущаяСтрока.ЭлементарныйВопрос;
		ЭлементарныйВопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз;
		ЭлементарныйВопрос.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовАнкет");
		ЭлементарныйВопрос.ВидПереключателя = Перечисления.ВидыПереключателяВАнкетах.Тумблер;
		ЭлементарныйВопрос.ТребуетсяКомментарий = ТекущаяСтрока.ТребуетсяКомментарий;
		ЭлементарныйВопрос.ПояснениеКомментария = ТекущаяСтрока.ПояснениеКомментария;
		ЭлементарныйВопрос.Записать();
		
		НоваяСтрокаВопросов = ВопросДляСобеседования.КлючевыеВопросы.Добавить();
		НоваяСтрокаВопросов.ЭлементарныйВопрос = ЭлементарныйВопрос.Ссылка;
		НоваяСтрокаВопросов.Предопределенный = ТекущаяСтрока.Предопределенный;
		
		МассивОтветов = Новый Массив;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Вопрос", ВопросДляСобеседованияСтрокой);
		СтруктураПоиска.Вставить("ЭлементарныйВопрос", ТекущаяСтрока.ЭлементарныйВопрос);
		СтрокиОтветов = БиблиотекаОтветовТаблица.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекущийОтвет Из СтрокиОтветов Цикл
			Ответ = Справочники.ВариантыОтветовАнкет.СоздатьЭлемент();
			Ответ.Наименование = ТекущийОтвет.Ответ;
			Ответ.Владелец = ЭлементарныйВопрос.Ссылка;
			Ответ.Записать();
			МассивОтветов.Добавить(Ответ.Ссылка);
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Наименование", ВопросДляСобеседованияСтрокой);
		СтруктураПоиска.Вставить("ЭлементарныйВопрос", ТекущаяСтрока.ЭлементарныйВопрос);
		СтрокиКлючей = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаКлючей Из СтрокиКлючей Цикл
			Если Не ЗначениеЗаполнено(СтрокаКлючей.ХарактеристикаПерсонала) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураХарактеристики = ХарактеристикиПерсонала.ХарактеристикаИзМакета(СтрокаКлючей.ХарактеристикаПерсонала, СтрокаКлючей.ЗначениеХарактеристики, БиблиотекаХарактеристикТаблица);
			Если СтруктураХарактеристики = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТЧ = ВопросДляСобеседования.Ключи.Добавить();
			НоваяСтрокаТЧ.ЭлементарныйВопрос = ЭлементарныйВопрос.Ссылка;
			НоваяСтрокаТЧ.ОтветНаВопрос = ОтветНаВопрос(СтрокаКлючей.ОтветНаВопрос, МассивОтветов);
			НоваяСтрокаТЧ.ХарактеристикаПерсонала = СтруктураХарактеристики.Характеристика;
			НоваяСтрокаТЧ.ЗначениеХарактеристики = СтруктураХарактеристики.Значение;
			НоваяСтрокаТЧ.Балл = СтрокаКлючей.Балл;
		КонецЦикла;
	КонецЦикла;
	ВопросДляСобеседования.Записать();
	Возврат ВопросДляСобеседования.Ссылка;	
	
КонецФункции

// Определение структуры параметра Настройки процедуры ПриОпределенииНастроек отчетов и обработок,
//   включенных в состав подсистемы ПодключаемыеОтчетыИОбработки.
//
// Параметры:
//   ВидыПодключаемыхКоманд - ТаблицаЗначений - Поддерживаемые виды команд.
//       * Имя         - Строка            - Имя вида команд. Может соответствовать имени подсистемы, поставляющей команды.
//                                           Должно удовлетворять требованиям именования переменных.
//                                           Также должно быть уникальным (не совпадать с именами других видов).
//                                           Подсистемами БСП зарезервированы следующие имена:
//                                           "Печать", "Отчеты", "ЗаполнениеОбъектов".
//       * ИмяПодменю  - Строка            - Имя подменю "по умолчанию" для размещения команд этого вида.
//       * Заголовок   - Строка            - Наименование подменю.
//       * Картинка    - Картинка          - Картинка подменю.
//       * Отображение - ОтображениеКнопки - Режим отображения подменю.
//       * Порядок     - Число             - Порядок подменю в командной панели по отношению к другим подменю.
//                                           Используется при автоматическом создании подменю.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя        = "Анкетирование";
	Вид.ИмяПодменю = "ПодменюАнкетирование";	
	
КонецПроцедуры

// Позволяет расширить состав параметра Настройки процедуры ПриОпределенииНастроек в модулях менеджеров отчетов и 
// обработок, включенных в состав подсистемы ПодключаемыеОтчетыИОбработки, с помощью чего отчеты и обработки могут 
// сообщить о себе, что они предоставляют определенные виды команд и взаимодействуют с подсистемами через их 
// программный интерфейс.
//
// При внедрении в конфигурацию подсистем "Печать", "Заполнение объектов" и "Варианты отчетов" в параметре Настройки
// процедуры ПриОпределенииНастроек модулей менеджеров отчетов и обработок, предопределен ряд стандартных свойств, 
// в которых возможно задать следующее:
//   * Размещение - Массив - перечислить объекты метаданных конфигурации (ОбъектМетаданных), к которым подключен данный 
//                           отчет или обработка. 
//   * ДобавитьКомандыПечати - Булево - если указать Истина, то в модуле менеджера отчета (обработки) предусмотрена 
//                             процедура ДобавитьКомандыПечати, которую вызывает подсистема "Печать" при выводе команд 
//                             печати в объектах, перечисленных в параметре Размещение. Это эквивалентно указанию 
//                             этого отчета (обработки) в процедуре 
//                             УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
//   * ДобавитьКомандыЗаполнения - Булево - если указать Истина, то в модуле менеджера отчета (обработки) предусмотрена 
//                             процедура ДобавитьКомандыЗаполнения, которую вызывает подсистема "Заполнение объектов" 
//                             при выводе команд заполнения в объектах, перечисленных в параметре Размещение.
//                             Это эквивалентно указанию этого отчета (обработки) в процедуре 
//                             ЗаполнениеОбъектовПереопределяемый.ПриОпределенииОбъектовСКомандамиЗаполнения.
//   * ДобавитьКомандыОтчетов - Булево - только для отчетов. Если указать Истина, то в модуле менеджера отчета 
//                             определена процедура ДобавитьКомандыОтчетов, которую вызывает подсистема 
//                             "Варианты отчетов" при формировании списка контекстных отчетов, открываемых прямо 
//                             из форм объектов, перечисленных в параметре Размещение. Это эквивалентно указанию 
//                             этого отчета в процедуре 
//                             ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов.
//   * НастроитьВариантыОтчета - Булево - только для отчетов. Если указать Истина, то в модуле менеджера отчета 
//                             определена процедура НастроитьВариантыОтчета, которую вызывает подсистема 
//                             "Варианты отчетов" при получении списка вариантов данного отчета.
//                             Подробнее см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//   * ОпределитьНастройкиФормы - Булево - только для отчетов, подключенных к общей форме отчета ФормаОтчета. 
//                             Если указать Истина, то в модуле объекта отчета определена процедура 
//                             ОпределитьНастройкиФормы, которую вызывает подсистема "Варианты отчетов" для 
//                             переопределения стандартного вида и поведения формы отчета ФормаОтчета.
//                             Подробнее см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
// Если в конфигурации отсутствует одна из подсистем "Печать", "Заполнение объектов" и "Варианты отчетов", то 
// соответствующие свойства в параметре Настройки также отсутствуют.
//
// Параметры:
//   НастройкиПрограммногоИнтерфейса - ТаблицаЗначений - для добавления нового свойства в параметр Настройки процедуры 
//                                                       ПриОпределенииНастроек модулей менеджеров отчетов и обработок, 
//                                                       включенных в состав подсистемы ПодключаемыеОтчетыИОбработки,
//                                                       добавить строку таблицы с колонками:
//       * Ключ              - Строка        - имя настройки, например, "ДобавитьМотиваторы".
//       * ОписаниеТипов     - ОписаниеТипов - тип настройки, например: Новый ОписаниеТипов("Булево").
//       * ВидыПодключаемыхОбъектов - Строка - имена видов объектов метаданных, для которых будет доступна эта настройка,
//                                             перечисленные через запятую. Например: "Отчет" или "Отчет, Обработка".
//
// Пример:
//  Для того чтобы в ПриОпределенииНастроек модуля обработки предусмотреть собственный признак ДобавитьМотиваторы:
//  Процедура ПриОпределенииНастроек(Настройки) Экспорт
//    Настройки.ДобавитьМотиваторы = Истина;  // вызывается процедура ДобавитьМотиваторы
//    Настройки.Размещение.Добавить(Метаданные.Документы.Анкеты);
//  КонецПроцедуры
//
//  следует реализовать следующий код:
//  Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
//  Настройка.Ключ          = "ДобавитьМотиваторы";
//  Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
//  Настройка.ВидыПодключаемыхОбъектов = "Обработка";
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьПодключаемыеКоманды";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Обработка";	
	
КонецПроцедуры

// Заполнение списка команд, подключенных к форме.
//   Событие возникает в процессе вызова модуля повторного использования.
//
// Параметры:
//   НастройкиФормы - Структура - Сведения о форме, в которой выводятся команды. Для чтения.
//         * ИмяФормы - Строка - Полное имя формы, в которой выводятся подключаемые команды.
//   
//   Источники - ДеревоЗначений - Сведения об основных поставщиках команд этой формы. Для чтения.
//         * Метаданные - ОбъектМетаданных - Метаданные объекта.
//         * ПолноеИмя  - Строка           - Полное имя объекта. Например: "Документ.ИмяДокумента".
//         * Вид        - Строка           - Вид объекта в верхнем регистре. Например: "СПРАВОЧНИК".
//         * Менеджер   - Произвольный     - Модуль менеджера объекта.
//                      - Неопределено     - Если у объекта нет модуля менеджера или если его не удалось получить.
//         * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта метаданных.
//         * ЭтоЖурналДокументов - Булево - Истина если объект является журналом документов.
//         * ТипСсылкиДанных     - Тип, ОписаниеТипов - Тип ссылки элемента.
//         На 2 уровне могут располагаться источники, регистрируемые автоматически при регистрации владельца.
//         Например, документы-регистраторы журналов.
//   
//   ПодключенныеОтчетыИОбработки - ТаблицаЗначений - Настройки отчетов и обработок,
//       подключенных к основным поставщикам команд. Для чтения.
//         * ПолноеИмя - Строка       - Полное имя объекта метаданных.
//         * Менеджер  - Произвольный - Модуль менеджера объекта метаданных.
//       Состав колонок определяется в процедуре ПриОпределенииНастроекПрограммногоИнтерфейсаПодключаемыхОбъектов.
//   
//   Команды - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//       * Вид - Строка - Вид команды.
//           Подробнее см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд().
//       * Идентификатор - Строка - Идентификатор команды.
//       
//     Настройки внешнего вида:
//       * Представление - Строка   - Представление команды в форме.
//       * Важность      - Строка   - Суффикс подгруппы в меню, в которой следует вывести эту команду.
//                                    Допустимо использовать: "Важное", "Обычное" и "СмТакже".
//       * Порядок       - Число    - Порядок размещения команды в группе. Используется для настройки под конкретное
//                                    рабочее место. Допустимо задавать в диапазоне от 1 до 100. По умолчанию порядок 50.
//       * Картинка      - Картинка - Картинка команды. Необязательный.
//       * СочетаниеКлавиш - СочетаниеКлавиш - Сочетание клавиш для быстрого вызова команды. Необязательный.
//     
//     Настройки видимости и доступности:
//       * ТипПараметра - ОписаниеТипов - Типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах    - Строка - Имена форм через запятую, в которых должна отображаться команда.
//                                        Используется когда состав команд отличается для различных форм.
//       * ФункциональныеОпции - Строка - Имена функциональных опций через запятую, определяющих видимость команды.
//       * УсловияВидимости    - Массив - Определяет видимость команды в зависимости от контекста.
//                                        Для регистрации условий следует использовать процедуру
//                                        ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды().
//                                        Условия объединяются по "И".
//       * ИзменяетВыбранныеОбъекты - Булево - Определяет доступность команды в ситуации,
//                                        когда у пользователя нет прав на изменение объекта.
//                                        Если Истина, то в описанной выше ситуации кнопка будет недоступна.
//                                        Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки процесса выполнения:
//       * МножественныйВыбор - Булево - Если Истина, то команда поддерживает множественный выбор.
//             В этом случае в параметре выполнения будет передан список ссылок.
//             Необязательный. Значение по умолчанию: Истина.
//       * РежимЗаписи - Строка - Действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
//             ** "НеЗаписывать"          - Объект не записывается, а в параметрах обработчика вместо ссылок передается
//                                          вся форма. В этом режиме рекомендуется работать напрямую с формой,
//                                          которая передается в структуре 2 параметра обработчика команды.
//             ** "ЗаписыватьТолькоНовые" - Записывать новые объекты.
//             ** "Записывать"            - Записывать новые и модифицированные объекты.
//             ** "Проводить"             - Проводить документы.
//             Перед записью и проведением у пользователя запрашивается подтверждение.
//             Необязательный. Значение по умолчанию: "Записывать".
//       * ТребуетсяРаботаСФайлами - Булево - Если Истина, то в веб-клиенте предлагается
//             установить расширение работы с файлами.
//             Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки обработчика:
//       * Менеджер - Строка - Объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - Имя формы, которую требуется получить для выполнения команды.
//           Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ИмяПараметраФормы - Строка - Имя параметра формы, в который следует передать ссылку или массив ссылок.
//       * ПараметрыФормы - Неопределено, Структура - Необязательный. Параметры формы, указанной в ИмяФормы.
//       * Обработчик - Строка - Описание процедуры, обрабатывающей основное действие команды.
//           Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем модуле.
//           Формат "<ИмяПроцедуры>" используется в следующих случаях:
//             - Если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
//             - Если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - Структура - Необязательный. Параметры обработчика, указанного в Обработчик.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Источники.Строки.Найти(Метаданные.Документы.Анкета, "Метаданные") <> Неопределено Тогда
		Команда = Команды.Добавить();
		Команда.Вид = "Анкетирование";
		Команда.Представление = НСтр("ru = 'Мотивация'");
		Команда.РежимЗаписи = "НеЗаписывать";
		Команда.ВидимостьВФормах = "ФормаДокумента";
		Команда.Обработчик = "ЭлектронноеИнтервьюКлиент.ЗаполнитьМотивацию";
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "РежимАнкетирования", Перечисления.РежимыАнкетирования.Интервью);
	КонецЕсли;	
	
КонецПроцедуры

// Копирует шаблоны анкет и настройки этапов вакансий и профилей должностей
//
// Параметры:
//   Объект - СправочникОбъект.Вакансии, СправочникОбъект.ПрофилиДолжностей - объект, для которого выполняется копирование.
//
Процедура СкопироватьНастройкиЭтапов(Объект, ИмяВладельца) Экспорт
	
	СоответствиеЗаписейНастроекВопросовДляСобеседования = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из Объект.ЭтапыРаботыСКандидатами Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ШаблонАнкеты) Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлементСсылка = КопияШаблонаАнкеты(ТекущаяСтрока.ШаблонАнкеты, ТекущаяСтрока.ЭтапРаботы, СоответствиеЗаписейНастроекВопросовДляСобеседования, Объект.Наименование, ИмяВладельца);
		ТекущаяСтрока.ШаблонАнкеты = НовыйЭлементСсылка;
	КонецЦикла;
	СсылкаНового = Объект.ПолучитьСсылкуНового();
	Если СсылкаНового.Пустая() Тогда
		СсылкаНового = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ПолучитьСсылку();
	КонецЕсли;
	Для Каждого Соответствие Из СоответствиеЗаписейНастроекВопросовДляСобеседования Цикл
		ВопросДляСобеседования = Соответствие.Ключ;
		СтрокиНастройкаВопросовДляСобеседования = Соответствие.Значение;
		НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(СсылкаНового);
		Если ТипЗнч(ВопросДляСобеседования) = Тип("СправочникСсылка.ВопросыДляСобеседования") Тогда
			НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(ВопросДляСобеседования);
		Иначе
			НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Справочники.ВопросыДляСобеседования.ПустаяСсылка());
			НаборЗаписей.Отбор.ЭлементарныйВопрос.Установить(ВопросДляСобеседования);
		КонецЕсли;
		Для каждого СтрокаТаблицы Из СтрокиНастройкаВопросовДляСобеседования Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			НоваяЗапись.Объект = СсылкаНового;
			НоваяЗапись.Подразделение = Объект.Подразделение;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Проверяет необходимость создания новой характеристики из библиотеки
//
// Параметры:
//  Характеристика - Строка - наименование проверяемой характеристики персонала.
//  МассивХарактеристик - Массив - массив наименований характеристик персонала, которые будут создаваться в рамках
//                                 проверяемой операции.
//
Процедура ПроверитьНовуюХарактеристику(Характеристика, МассивХарактеристик) Экспорт
	
	ХарактеристикаСсылка = ПланыВидовХарактеристик.ХарактеристикиПерсонала.НайтиПоНаименованию(Характеристика, Истина);
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	БиблиотекаXML = ПланыВидовХарактеристик.ХарактеристикиПерсонала.ПолучитьМакет("Библиотека").ПолучитьТекст();
	БиблиотекаТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(БиблиотекаXML).Данные;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Наименование", Характеристика);
	СтрокиХарактеристики = БиблиотекаТаблица.НайтиСтроки(СтруктураПоиска);
	Если СтрокиХарактеристики.Количество() > 0 Тогда
		МассивХарактеристик.Добавить(Характеристика);
	КонецЕсли;
	
КонецПроцедуры

// Создает табличный документ с расшифровкой характеристик по ответам
//
// Параметры:
//   Вакансия - СправочникСсылка.Вакансии - вакансия для расшифровки.
//   ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо для расшифровки.
//   ХарактеристикаПерсонала - ПланВидовХарактеристикСсылка.ХарактеристикиПерсонала - характеристика персонала для расшифровки.
//   ЗначениеХарактеристики - СправочникСсылка.ЗначенияХарактеристикПерсонала - значение характеристики персонала для расшифровки.
//
// ВозвращаемоеЗначение:
//   ТабличныйДокумент - табличный документ с расшифровкой.
//
Функция ТабличныйДокументРасшифровкиХарактеристикПоОтветам(Вакансия, ФизическоеЛицо, ХарактеристикаПерсонала, ЗначениеХарактеристики) Экспорт
	
	ТаблицаОтчета = Новый ТабличныйДокумент;
	
	ФизическиеЛица = Новый СписокЗначений;
	ФизическиеЛица.Добавить(ФизическоеЛицо);
	ДеревоРасшифровки = РасшифровкаХарактеристикПоОтветам(Вакансия, ФизическиеЛица, ХарактеристикаПерсонала, ЗначениеХарактеристики);	
	ТаблицаОтветов = ТаблицаОтветов(Вакансия, ФизическоеЛицо);
	
	Сч = 6;
	Макет = Обработки.СравнениеХарактеристикКандидатов.ПолучитьМакет("МакетРасшифровка");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТаблицаОтчета.Вывести(ПустаяСтрока, 0);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТаблицаОтчета.НачатьГруппуСтрок("Шапка");
	Если ДеревоРасшифровки.Строки.Количество() > 0 И ДеревоРасшифровки.Строки[0].Строки.Количество() > 0 И ДеревоРасшифровки.Строки[0].Строки[0].Строки.Количество() > 0 Тогда
		СтрокаРасшифровки = ДеревоРасшифровки.Строки[0].Строки[0].Строки[0];
		ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаРасшифровки);
	КонецЕсли; 
	
	Область.Параметры.ПараметрыРасшифровки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вакансия: %1
              |Физическое лицо: %2
              |Характеристика персонала: %3
              |Значение характеристики: %4'"),
		Вакансия,
		ФизическоеЛицо,
		ХарактеристикаПерсонала,
		ЗначениеХарактеристики);
	ТаблицаОтчета.Вывести(Область, 0);

	НомерВопроса = 1;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	ТаблицаОтчета.Вывести(ПустаяСтрока, 0);
	
	Если ДеревоРасшифровки.Строки.Количество() = 0 Или ДеревоРасшифровки.Строки[0].Строки.Количество() = 0 Или ДеревоРасшифровки.Строки[0].Строки[0].Строки.Количество() = 0 Тогда
		Возврат ТаблицаОтчета;
	КонецЕсли;
	
	ТаблицаВопросовСобеседования = ТаблицаВопросовСобеседования(СтрокаРасшифровки);
	
	ТаблицаОтчета.НачатьАвтогруппировкуСтрок();
	
	Для Каждого ВеткаВопрос Из СтрокаРасшифровки.Строки Цикл
		
		Область = Макет.ПолучитьОбласть("Вопрос");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВеткаВопрос);
		Область.Параметры.ВопросФормулировка = "" + НомерВопроса + ". " + ВеткаВопрос.Вопрос.Формулировка;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВопросШаблонаАнкеты", ВеткаВопрос.Вопрос);
		Массив = ТаблицаВопросовСобеседования.НайтиСтроки(СтруктураПоиска);
		ЭтоТриПлюсаТриМинуса = Ложь;
		Если Массив.Количество()>0 Тогда
			Область.Параметры.Вопрос = Массив[0].ВопросДляСобеседования;
			Если Массив[0].ТипВопросаПоМетодуСИвановой = Перечисления.ТипыВопросовПоМетодуСИвановой.ТриПлюсаТриМинуса Тогда
				ЭтоТриПлюсаТриМинуса = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		НомерВопроса = НомерВопроса + 1;
		ТаблицаОтчета.Вывести(Область, 0);
		Сч = Сч + 1;
		
		Если ЭтоТриПлюсаТриМинуса Тогда
			
			Область = Макет.ПолучитьОбласть("ТриПлюсаТриМинуса");
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Вопрос", ВеткаВопрос.Вопрос);
			СтруктураПоиска.Вставить("ЭлементарныйВопросПредставление", "");
			СтруктураПоиска.ЭлементарныйВопросПредставление = "Плюсы";
			МассивПлюсы = ТаблицаОтветов.НайтиСтроки(СтруктураПоиска);
			Если МассивПлюсы.Количество()>0 Тогда
				Область.Параметры.Плюсы = МассивПлюсы[0].Ответ;
			КонецЕсли;
			СтруктураПоиска.ЭлементарныйВопросПредставление = "Минусы";
			МассивМинусы = ТаблицаОтветов.НайтиСтроки(СтруктураПоиска);
			Если МассивМинусы.Количество()>0 Тогда
				Область.Параметры.Минусы = МассивМинусы[0].Ответ;
			КонецЕсли;
			
			ТаблицаОтчета.Вывести(Область, 1);
			Сч = Сч + 2;
			
		КонецЕсли; 
			
		Для Каждого ВеткаЭлементарныйВопрос Из ВеткаВопрос.Строки Цикл
			
			ОбластьВопрос = Макет.ПолучитьОбласть("ЭлементарныйВопрос|КолонкиВопрос");
			ЗаполнитьЗначенияСвойств(ОбластьВопрос.Параметры, ВеткаЭлементарныйВопрос);
			ТаблицаОтчета.Вывести(ОбластьВопрос, 1);
			Сч = Сч + 1;
			Выборка = ДанныеАнкеты(Вакансия, ВеткаЭлементарныйВопрос.ЭлементарныйВопрос, ХарактеристикаПерсонала, ЗначениеХарактеристики);
			
			ПерваяСтрока = Истина;
			ТекущаяВысота = 0;
			Пока Выборка.Следующий() Цикл
				ВеткаОтвет = ВеткаЭлементарныйВопрос.Строки.Найти(Выборка.Ответ);
				ДополнительнаяКолонка = ?(ПерваяСтрока, "|КолонкиОтвет", "");
				Если ВеткаОтвет<>Неопределено Тогда
					Область = Макет.ПолучитьОбласть("УказанныйОтвет" + ДополнительнаяКолонка);
					ЗаполнитьЗначенияСвойств(Область.Параметры, ВеткаОтвет);
				Иначе
					Область = Макет.ПолучитьОбласть("Ответ" + ДополнительнаяКолонка);
					ЗаполнитьЗначенияСвойств(Область.Параметры, Выборка);
					Область.Параметры.Балл = Выборка.МаксимальныйБалл;
				КонецЕсли; 
				Если ПерваяСтрока Тогда
					ТаблицаОтчета.Присоединить(Область);
					ПерваяСтрока = Ложь;
				Иначе
					ТаблицаОтчета.Вывести(Область);
					Сч = Сч + 1;
					ТекущаяВысота = ТекущаяВысота + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Область = ТаблицаОтчета.Область(Сч-ТекущаяВысота, 1, Сч, 5);
			Область.Объединить();
			 			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Вопрос", ВеткаВопрос.Вопрос);
			СтруктураПоиска.Вставить("ЭлементарныйВопрос", ВеткаЭлементарныйВопрос.ЭлементарныйВопрос);
			МассивКомментариев = ТаблицаОтветов.НайтиСтроки(СтруктураПоиска);
			Если МассивКомментариев.Количество()>0 И СокрЛП(МассивКомментариев[0].ОткрытыйОтвет)<>"" Тогда
				Область = Макет.ПолучитьОбласть("Комментарий");
				Область.Параметры.Комментарий = МассивКомментариев[0].ОткрытыйОтвет;
				ТаблицаОтчета.Вывести(Область, 1);
				Сч = Сч + 1;
			КонецЕсли;
		
		КонецЦикла;
				
	КонецЦикла; 
	
	ТаблицаОтчета.ЗакончитьАвтогруппировкуСтрок();
			
	Область = Макет.ПолучитьОбласть("Итоги");
	ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаРасшифровки);
	ТаблицаОтчета.Вывести(Область);
	
	Возврат ТаблицаОтчета;
	
КонецФункции

// Создает табличный документ для подробного отчета по характеристикам
//
// Параметры:
//   ТаблицаОтчета - ТабличныйДокумент - табличный документ подробного отчета.
//   Вакансия - СправочникСсылка.Вакансии - вакансия для формирования отчета.
//   Кандидаты - СписокЗначений - кандидаты для формирования отчета.
//
Процедура ТабличныйДокументПодробногоОтчетаПоХарактеристикам(ТаблицаОтчета, Вакансия, Кандидаты) Экспорт
	
	ФизЛица = Новый СписокЗначений;
	Если Кандидаты.Количество() > 0 Тогда
		Для Каждого Кандидат Из Кандидаты Цикл
			ФизЛица.Добавить(Кандидат.Значение.ФизическоеЛицо);
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Кандидаты.ФизическоеЛицо
			|ИЗ
			|	Справочник.Кандидаты КАК Кандидаты
			|ГДЕ
			|	Кандидаты.Вакансия = &Вакансия
			|	И НЕ Кандидаты.ПометкаУдаления";
		Запрос.УстановитьПараметр("Вакансия", Вакансия);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФизЛица.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
	КонецЕсли;
	ОценкиПоХарактеристикам = ОценкиФизическихЛицПоХарактеристикам(Вакансия, ФизЛица, Новый СписокЗначений, Ложь);
	Данные = ОценкиПоХарактеристикам.Данные;
	ТаблицаИтогов = ОценкиПоХарактеристикам.ТаблицаИтогов;
	УдаляемыеСтроки = Новый Массив;
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
			УдаляемыеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаИтогов.Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Для Каждого ФизическоеЛицо Из ФизЛица Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", ФизическоеЛицо.Значение);
		Если ТаблицаИтогов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаИтогов.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо.Значение;
			НоваяСтрока.ОтносительнаяОценка = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаХарактеристик = Данные.Скопировать();
	ТаблицаХарактеристик.Свернуть("Характеристика");
	
	ДеревоРасшифровки = РасшифровкаХарактеристикПоОтветам(Вакансия, ФизЛица, Неопределено, Неопределено);
	
	Макет = Отчеты.СравнениеХарактеристикКандидатовПодробно.ПолучитьМакет("Макет");
	
	ШапкаОбщая = Макет.ПолучитьОбласть("ШапкаОбщая");
	ШапкаОбщая.Параметры.Вакансия = Вакансия;
	ТаблицаОтчета.Вывести(ШапкаОбщая);
	ОбластьНачалоЗаголовков = Макет.ПолучитьОбласть("ОбластьИтоговыйБалл|КолонкиФормулировка");
	ОбластьИмяЗаголовок = Макет.ПолучитьОбласть("ОбластьИтоговыйБалл|Балл");
	Если Кандидаты.Количество() = 1 Тогда
		Шапка2 = Макет.ПолучитьОбласть("ШапкаКандидат");
		Шапка2.Параметры.Кандидат = Кандидаты[0].Значение;
		ТаблицаОтчета.Вывести(Шапка2);
		ТаблицаОтчета.Вывести(ОбластьНачалоЗаголовков);
		Если ТаблицаИтогов.Количество() > 0 Тогда
			ОбластьИмяЗаголовок.Параметры.ИтоговыйБалл = ТаблицаИтогов[0].ОтносительнаяОценка;
			ТаблицаОтчета.Присоединить(ОбластьИмяЗаголовок);
		КонецЕсли;
	Иначе
		Шапка2 = Макет.ПолучитьОбласть("ШапкаКандидаты");
		Если ТаблицаИтогов.Количество() > 1 Тогда
			Область = Шапка2.Область(1, 12, 1, 11 + ТаблицаИтогов.Количество());
			Область.Объединить();
		КонецЕсли;
		ТаблицаОтчета.Вывести(Шапка2);
		ТаблицаОтчета.Вывести(ОбластьНачалоЗаголовков);
		Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
			ОбластьИмяЗаголовок.Параметры.Кандидат = ТекущаяСтрока.ФизическоеЛицо;
			ОбластьИмяЗаголовок.Параметры.ИтоговыйБалл = ТекущаяСтрока.ОтносительнаяОценка;
			ТаблицаОтчета.Присоединить(ОбластьИмяЗаголовок);
		КонецЦикла;
	КонецЕсли;
	ОбластьЗаголовков = Новый ТабличныйДокумент;
	ОбластьЗаголовков.Вывести(ТаблицаОтчета);
	
	Для Каждого ТекущаяХарактеристика Из ТаблицаХарактеристик Цикл
		СоответствиеРасшифровок = Новый Соответствие;
		
		ДеревоВопросов = Новый ДеревоЗначений;
		ДеревоВопросов.Колонки.Добавить("Вопрос");
		ДеревоВопросов.Колонки.Добавить("ЭлементарныйВопрос");
		Для Каждого ВеткаФизЛицо Из ДеревоРасшифровки.Строки Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ФизическоеЛицо", ВеткаФизЛицо.ФизическоеЛицо); 
			СтруктураПоиска.Вставить("Характеристика", ТекущаяХарактеристика.Характеристика); 
			СтрокиХарактеристики = Данные.НайтиСтроки(СтруктураПоиска);
			Если СтрокиХарактеристики.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВеткаХарактеристики = ВеткаФизЛицо.Строки.Найти(ТекущаяХарактеристика.Характеристика);
			Если ВеткаХарактеристики = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВеткаЗначения = ВеткаХарактеристики.Строки.Найти(СтрокиХарактеристики[0].Значение);
			Если ВеткаЗначения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СоответствиеРасшифровок.Вставить(ВеткаФизЛицо.ФизическоеЛицо, ВеткаЗначения);
			Для Каждого ВеткаВопрос Из ВеткаЗначения.Строки Цикл
				СтрокаВопроса = ДеревоВопросов.Строки.Найти(ВеткаВопрос.Вопрос);
				Если СтрокаВопроса = Неопределено Тогда
					СтрокаВопроса = ДеревоВопросов.Строки.Добавить();
					СтрокаВопроса.Вопрос = ВеткаВопрос.Вопрос;
				КонецЕсли;
				Для Каждого ВеткаЭлементарныйВопрос Из ВеткаВопрос.Строки Цикл
					СтрокаЭлементарногоВопроса = СтрокаВопроса.Строки.Найти(ВеткаЭлементарныйВопрос.ЭлементарныйВопрос);
					Если СтрокаЭлементарногоВопроса = Неопределено Тогда
						СтрокаЭлементарногоВопроса = СтрокаВопроса.Строки.Добавить();
						СтрокаЭлементарногоВопроса.ЭлементарныйВопрос = ВеткаЭлементарныйВопрос.ЭлементарныйВопрос;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
			
		ОбластьХарактеристикиЗаголовок = Новый ТабличныйДокумент;
		ОбластьЗаголовокХарактеристики = Макет.ПолучитьОбласть("ХарактеристикаЗаголовок|КолонкиФормулировка");
		ОбластьЗаголовокХарактеристикиБаллы = Макет.ПолучитьОбласть("ХарактеристикаЗаголовок|Балл");
		ОбластьСтрокаХарактеристики = Макет.ПолучитьОбласть("Характеристика|КолонкиФормулировка");
		ОбластьЗаголовокХарактеристики.Параметры.Характеристика = ТекущаяХарактеристика.Характеристика;
		ОбластьХарактеристикиЗаголовок.Вывести(ОбластьЗаголовокХарактеристики);
		Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
			ОбластьХарактеристикиЗаголовок.Присоединить(ОбластьЗаголовокХарактеристикиБаллы);
		КонецЦикла;
		ОбластьСтроки = ОбластьХарактеристикиЗаголовок.Область(1, 1, 1, ТаблицаИтогов.Количество() + 11);
		ОбластьСтроки.Объединить();
		ОбластьХарактеристики = Новый ТабличныйДокумент;
		ОбластьХарактеристики.Вывести(ОбластьСтрокаХарактеристики);
		ОбластьСтрокаХарактеристикиБаллы = Макет.ПолучитьОбласть("Характеристика|Балл");
		Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
			ОбластьСтрокаХарактеристикиБаллы.Параметры.МаксимальныйБалл = 0;
			ОбластьСтрокаХарактеристикиБаллы.Параметры.Вес = 0;
			ОбластьСтрокаХарактеристикиБаллы.Параметры.Балл = 0;
			ОбластьСтрокаХарактеристикиБаллы.Параметры.ИтоговыйБалл = 0;
			ОбластьСтрокаХарактеристикиБаллы.Параметры.ЗначениеХарактеристики = "";
			СтрокаРасшифровки = СоответствиеРасшифровок.Получить(ТекущаяСтрока.ФизическоеЛицо);
			Если СтрокаРасшифровки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаХарактеристикиБаллы.Параметры, СтрокаРасшифровки);
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Характеристика", ТекущаяХарактеристика.Характеристика); 
				СтрокиХарактеристики = Данные.НайтиСтроки(СтруктураПоиска);
				Если СтрокиХарактеристики.Количество() > 0 Тогда
					ОбластьСтрокаХарактеристикиБаллы.Параметры.ЗначениеХарактеристики = СтрокиХарактеристики[0].ОсновноеЗначение;
					ОбластьСтрокаХарактеристикиБаллы.Параметры.Вес = 1;
				КонецЕсли;
			КонецЕсли;
			ОбластьХарактеристики.Присоединить(ОбластьСтрокаХарактеристикиБаллы);
		КонецЦикла;
		ГруппировкаХарактеристики = Новый ТабличныйДокумент;
		ГруппировкаХарактеристики.Вывести(ОбластьХарактеристикиЗаголовок);
		ГруппировкаХарактеристики.Вывести(ОбластьХарактеристики);
		Если Не ТаблицаОтчета.ПроверитьВывод(ГруппировкаХарактеристики) Тогда
			ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
			ТаблицаОтчета.Вывести(ОбластьЗаголовков);
		КонецЕсли;
		ТаблицаОтчета.Вывести(ОбластьХарактеристикиЗаголовок);
		ТаблицаОтчета.НачатьГруппуСтрок();
		ТаблицаОтчета.Вывести(ОбластьХарактеристики);
		
		НомерВопроса = 1;
		Для Каждого ВеткаВопрос Из ДеревоВопросов.Строки Цикл
		    ОбластьВопрос = Новый ТабличныйДокумент;
			Область = Макет.ПолучитьОбласть("Вопрос|КолонкиФормулировка");
			ОбластьВопросПустая = Макет.ПолучитьОбласть("Вопрос|Балл");
			ЗаполнитьЗначенияСвойств(Область.Параметры, ВеткаВопрос);
			Область.Параметры.ВопросФормулировка = "" + НомерВопроса + ". " + ВеткаВопрос.Вопрос.Формулировка;
			
			НомерВопроса = НомерВопроса + 1;
			ОбластьВопрос.Вывести(Область, 0);
			Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
				ОбластьВопрос.Присоединить(ОбластьВопросПустая);
			КонецЦикла;
			Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьВопрос) Тогда
				ТаблицаОтчета.ЗакончитьГруппуСтрок();
				ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
				ТаблицаОтчета.Вывести(ОбластьЗаголовков);
				ТаблицаОтчета.Вывести(ОбластьХарактеристикиЗаголовок);
				ТаблицаОтчета.НачатьГруппуСтрок();
				ТаблицаОтчета.Вывести(ОбластьХарактеристики);
			КонецЕсли;
			ТаблицаОтчета.Вывести(ОбластьВопрос, 1);
			ТаблицаОтчета.НачатьГруппуСтрок();
			Для Каждого ВеткаЭлементарныйВопрос Из ВеткаВопрос.Строки Цикл
				ОбластьТаблицаОтветов = Новый ТабличныйДокумент;
				
				ОбластьЭлементарныйВопрос = Макет.ПолучитьОбласть("ЭлементарныйВопрос|КолонкиВопрос");
				ЗаполнитьЗначенияСвойств(ОбластьЭлементарныйВопрос.Параметры, ВеткаЭлементарныйВопрос);
				ОбластьТаблицаОтветов.Вывести(ОбластьЭлементарныйВопрос, 1);
				Выборка = ДанныеАнкеты(Вакансия, ВеткаЭлементарныйВопрос.ЭлементарныйВопрос, ТекущаяХарактеристика.Характеристика, Неопределено);
				ТаблицаОтветов = Новый ТаблицаЗначений;
				ТаблицаОтветов.Колонки.Добавить("Ответ");
				ТаблицаОтветов.Колонки.Добавить("ЗначениеХарактеристики");
				ТаблицаОтветов.Колонки.Добавить("МаксимальныйБалл");
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТаблицаОтветов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЦикла;
				
				СписокОтветов = ТаблицаОтветов.Скопировать();
				СписокОтветов.Свернуть("Ответ");
				
				ПерваяСтрока = Истина;
				ТекущаяВысота = 0;
				Для Каждого Ответ Из СписокОтветов Цикл
					ДополнительнаяКолонка = ?(ПерваяСтрока, "|КолонкиОтвет", "|КолонкиФормулировка");
					Область = Макет.ПолучитьОбласть("Ответ" + ДополнительнаяКолонка);
					ЗаполнитьЗначенияСвойств(Область.Параметры, Ответ);
					Если ПерваяСтрока Тогда
						ОбластьТаблицаОтветов.Присоединить(Область);
						ПерваяСтрока = Ложь;
					Иначе
						ОбластьТаблицаОтветов.Вывести(Область);
						ТекущаяВысота = ТекущаяВысота + 1;
					КонецЕсли;
					ОбластьБалл = Макет.ПолучитьОбласть("Ответ|Балл");
					ОбластьПолученныйБалл = Макет.ПолучитьОбласть("УказанныйОтвет|Балл");
					Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
						Область = ОбластьБалл;
						Область.Параметры.Балл = 0;
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо); 
						СтруктураПоиска.Вставить("Характеристика", ТекущаяХарактеристика.Характеристика); 
						СтрокиХарактеристики = Данные.НайтиСтроки(СтруктураПоиска);
						Если СтрокиХарактеристики.Количество() > 0 Тогда
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Ответ", Ответ.Ответ);
							СтруктураПоиска.Вставить("ЗначениеХарактеристики", СтрокиХарактеристики[0].Значение);
							СтрокиОтвета = ТаблицаОтветов.НайтиСтроки(СтруктураПоиска);
							Если СтрокиОтвета.Количество() > 0 Тогда
								Область.Параметры.Балл = СтрокиОтвета[0].МаксимальныйБалл;
							КонецЕсли;
						КонецЕсли;
						ДанныеРасшифровки = СоответствиеРасшифровок.Получить(ТекущаяСтрока.ФизическоеЛицо);
						Если ДанныеРасшифровки <> Неопределено Тогда
							СтрокаВопроса = ДанныеРасшифровки.Строки.Найти(ВеткаВопрос.Вопрос);
							Если СтрокаВопроса <> Неопределено Тогда
								СтрокаЭлементарногоВопроса = СтрокаВопроса.Строки.Найти(ВеткаЭлементарныйВопрос.ЭлементарныйВопрос);
								Если СтрокаЭлементарногоВопроса <> Неопределено Тогда
									СтрокаОтвета = СтрокаЭлементарногоВопроса.Строки.Найти(Ответ.Ответ);
									Если СтрокаОтвета <> Неопределено Тогда
										Область = ОбластьПолученныйБалл;
										ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаОтвета);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли
						КонецЕсли;
						ОбластьТаблицаОтветов.Присоединить(Область);
					КонецЦикла;
				КонецЦикла;
				Область = ОбластьТаблицаОтветов.Область(1, 1, 1 + ТекущаяВысота, 5);
				Область.Объединить();
				Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьТаблицаОтветов) Тогда
					ТаблицаОтчета.ЗакончитьГруппуСтрок();
					ТаблицаОтчета.ЗакончитьГруппуСтрок();
					ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
					ТаблицаОтчета.Вывести(ОбластьЗаголовков);
					ТаблицаОтчета.Вывести(ОбластьХарактеристикиЗаголовок);
					ТаблицаОтчета.НачатьГруппуСтрок();
					ТаблицаОтчета.Вывести(ОбластьХарактеристики);
					ТаблицаОтчета.Вывести(ОбластьВопрос, 1);
					ТаблицаОтчета.НачатьГруппуСтрок();
				КонецЕсли;
				ТаблицаОтчета.Вывести(ОбластьТаблицаОтветов);
			КонецЦикла;
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
		КонецЦикла;
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЦикла;
	
	ДобавитьМотиваторыВОтчет(ТаблицаОтчета, ТаблицаИтогов, Вакансия, ФизЛица, Макет, ОбластьЗаголовков);
	ДобавитьМотивирующиеФразыВОтчет(ТаблицаОтчета, ТаблицаИтогов, Вакансия, ФизЛица, Макет, ОбластьЗаголовков);
	
КонецПроцедуры

// Возвращает структуру с таблицами оценок физических лиц по характеристикам
//
// Параметры:
//   Вакансия - СправочникСсылка.Вакансии - оцениваемая вакансия.
//   СписокФизЛиц - СписокЗначений - список оцениваемых физических лиц.
//   ОтбираемыеХарактеристики - СписокЗначений - список оцениваемых характеристик персонала, используется в случае
//                                               отбора по этапам.
//   ИспользоватьОтборПоЭтапам - Булево - признак использования отбора по этапам.
//
// ВозвращаемоеЗначение:
//   Структура - структура таблиц оценок физических лиц по характеристикам.
//
Функция ОценкиФизическихЛицПоХарактеристикам(Вакансия, СписокФизЛиц, ОтбираемыеХарактеристики, ИспользоватьОтборПоЭтапам) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВакансииХарактеристикиПерсонала.Ссылка КАК Ссылка,
		|	ВакансииХарактеристикиПерсонала.Характеристика КАК Характеристика,
		|	ВакансииХарактеристикиПерсонала.Значение КАК Значение,
		|	ВакансииХарактеристикиПерсонала.Вес КАК Вес,
		|	ВакансииХарактеристикиПерсонала.ВесЗначения КАК ВесЗначения
		|ПОМЕСТИТЬ ВТХарактеристикиВакансий
		|ИЗ
		|	Справочник.Вакансии.ХарактеристикиПерсонала КАК ВакансииХарактеристикиПерсонала
		|ГДЕ
		|	ВакансииХарактеристикиПерсонала.Ссылка = &Вакансия
		|	И ВакансииХарактеристикиПерсонала.ТребуетсяПроверка
		|	И (ВакансииХарактеристикиПерсонала.Характеристика В (&Характеристики)
		|			ИЛИ НЕ &ИспользоватьОтборПоЭтапам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	МАКСИМУМ(ХарактеристикиВакансий.Значение) КАК ОсновноеЗначение,
		|	ВложенныйЗапрос.ВесЗначения КАК ВесЗначения,
		|	ВложенныйЗапрос.Вес КАК Вес
		|ПОМЕСТИТЬ ВТЗначенияХарактеристик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХарактеристикиВакансий.Ссылка КАК Ссылка,
		|		МАКСИМУМ(ХарактеристикиВакансий.ВесЗначения) КАК ВесЗначения,
		|		ХарактеристикиВакансий.Характеристика КАК Характеристика,
		|		ХарактеристикиВакансий.Вес КАК Вес
		|	ИЗ
		|		ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХарактеристикиВакансий.Ссылка,
		|		ХарактеристикиВакансий.Характеристика,
		|		ХарактеристикиВакансий.Вес) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|		ПО ВложенныйЗапрос.ВесЗначения = ХарактеристикиВакансий.ВесЗначения
		|			И ВложенныйЗапрос.Характеристика = ХарактеристикиВакансий.Характеристика
		|			И ВложенныйЗапрос.Ссылка = ХарактеристикиВакансий.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.ВесЗначения,
		|	ВложенныйЗапрос.Вес
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиВакансий.Ссылка КАК Вакансия,
		|	ХарактеристикиВакансий.Характеристика КАК Характеристика,
		|	ХарактеристикиВакансий.Значение КАК Значение,
		|	ХарактеристикиВакансий.Вес КАК Вес,
		|	ХарактеристикиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ХарактеристикиВакансий.ВесЗначения КАК ВесЗначения,
		|	ЕСТЬNULL(ХарактеристикиФизическихЛиц.Балл, 0) * ХарактеристикиВакансий.ВесЗначения КАК Оценка
		|ПОМЕСТИТЬ ВТОценкиЗначений
		|ИЗ
		|	ВТХарактеристикиВакансий КАК ХарактеристикиВакансий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХарактеристикиФизическихЛиц.СрезПоследних КАК ХарактеристикиФизическихЛиц
		|		ПО ХарактеристикиВакансий.Характеристика = ХарактеристикиФизическихЛиц.ХарактеристикаПерсонала
		|			И ХарактеристикиВакансий.Значение = ХарактеристикиФизическихЛиц.ЗначениеХарактеристики
		|			И ХарактеристикиВакансий.Ссылка = ХарактеристикиФизическихЛиц.Вакансия
		|			И ХарактеристикиФизическихЛиц.ФизическоеЛицо В (&ФизЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Вакансия КАК Вакансия,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Вес КАК Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка КАК Оценка,
		|	ОценкиЗначений.Значение КАК Значение,
		|	ОценкиЗначений.ВесЗначения КАК ВесЗначения
		|ПОМЕСТИТЬ ВТАбсолютныеОценкиХарактеристик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОценкиЗначений.Вакансия КАК Вакансия,
		|		ОценкиЗначений.Характеристика КАК Характеристика,
		|		ОценкиЗначений.Вес КАК Вес,
		|		ОценкиЗначений.ФизическоеЛицо КАК ФизическоеЛицо,
		|		МАКСИМУМ(ОценкиЗначений.Оценка) КАК Оценка
		|	ИЗ
		|		ВТОценкиЗначений КАК ОценкиЗначений
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОценкиЗначений.Вакансия,
		|		ОценкиЗначений.Характеристика,
		|		ОценкиЗначений.Вес,
		|		ОценкиЗначений.ФизическоеЛицо) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОценкиЗначений КАК ОценкиЗначений
		|		ПО ВложенныйЗапрос.Вакансия = ОценкиЗначений.Вакансия
		|			И ВложенныйЗапрос.Характеристика = ОценкиЗначений.Характеристика
		|			И ВложенныйЗапрос.ФизическоеЛицо = ОценкиЗначений.ФизическоеЛицо
		|			И ВложенныйЗапрос.Оценка = ОценкиЗначений.Оценка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Вакансия КАК Вакансия,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Вес КАК Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка КАК Оценка,
		|	МАКСИМУМ(АбсолютныеОценкиХарактеристик.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТАбсолютныеОценкиХарактеристикСвернутые
		|ИЗ
		|	(ВЫБРАТЬ
		|		АбсолютныеОценкиХарактеристик.Вакансия КАК Вакансия,
		|		АбсолютныеОценкиХарактеристик.Характеристика КАК Характеристика,
		|		АбсолютныеОценкиХарактеристик.Вес КАК Вес,
		|		АбсолютныеОценкиХарактеристик.ФизическоеЛицо КАК ФизическоеЛицо,
		|		АбсолютныеОценкиХарактеристик.Оценка КАК Оценка,
		|		МАКСИМУМ(АбсолютныеОценкиХарактеристик.ВесЗначения) КАК ВесЗначения
		|	ИЗ
		|		ВТАбсолютныеОценкиХарактеристик КАК АбсолютныеОценкиХарактеристик
		|	
		|	СГРУППИРОВАТЬ ПО
		|		АбсолютныеОценкиХарактеристик.Вакансия,
		|		АбсолютныеОценкиХарактеристик.Характеристика,
		|		АбсолютныеОценкиХарактеристик.Вес,
		|		АбсолютныеОценкиХарактеристик.ФизическоеЛицо,
		|		АбсолютныеОценкиХарактеристик.Оценка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАбсолютныеОценкиХарактеристик КАК АбсолютныеОценкиХарактеристик
		|		ПО ВложенныйЗапрос.Вакансия = АбсолютныеОценкиХарактеристик.Вакансия
		|			И ВложенныйЗапрос.Характеристика = АбсолютныеОценкиХарактеристик.Характеристика
		|			И ВложенныйЗапрос.Вес = АбсолютныеОценкиХарактеристик.Вес
		|			И ВложенныйЗапрос.ФизическоеЛицо = АбсолютныеОценкиХарактеристик.ФизическоеЛицо
		|			И ВложенныйЗапрос.Оценка = АбсолютныеОценкиХарактеристик.Оценка
		|			И ВложенныйЗапрос.ВесЗначения = АбсолютныеОценкиХарактеристик.ВесЗначения
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Вакансия,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Вес,
		|	ВложенныйЗапрос.ФизическоеЛицо,
		|	ВложенныйЗапрос.Оценка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АбсолютныеОценкиХарактеристикСвернутые.Вакансия КАК Вакансия,
		|	АбсолютныеОценкиХарактеристикСвернутые.Характеристика КАК Характеристика,
		|	АбсолютныеОценкиХарактеристикСвернутые.Вес КАК Вес,
		|	АбсолютныеОценкиХарактеристикСвернутые.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ЗначенияХарактеристик.ВесЗначения = 0
		|			ТОГДА 0
		|		ИНАЧЕ АбсолютныеОценкиХарактеристикСвернутые.Оценка / ЗначенияХарактеристик.ВесЗначения
		|	КОНЕЦ КАК Оценка,
		|	АбсолютныеОценкиХарактеристикСвернутые.Значение КАК Значение,
		|	ЗначенияХарактеристик.ОсновноеЗначение КАК ОсновноеЗначение
		|ПОМЕСТИТЬ ВТОценкиХарактеристик
		|ИЗ
		|	ВТАбсолютныеОценкиХарактеристикСвернутые КАК АбсолютныеОценкиХарактеристикСвернутые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияХарактеристик КАК ЗначенияХарактеристик
		|		ПО АбсолютныеОценкиХарактеристикСвернутые.Вакансия = ЗначенияХарактеристик.Ссылка
		|			И АбсолютныеОценкиХарактеристикСвернутые.Характеристика = ЗначенияХарактеристик.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОценкиХарактеристик.Вакансия КАК Вакансия,
		|	ОценкиХарактеристик.Характеристика КАК Характеристика,
		|	ОценкиХарактеристик.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОценкиХарактеристик.Оценка КАК Оценка,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Вес = 0
		|			ТОГДА 0
		|		ИНАЧЕ ОценкиХарактеристик.Оценка * ОценкиХарактеристик.Вес / ВложенныйЗапрос.Вес
		|	КОНЕЦ КАК ОтносительнаяОценка,
		|	ОценкиХарактеристик.Значение КАК Значение,
		|	ОценкиХарактеристик.ОсновноеЗначение КАК ОсновноеЗначение
		|ИЗ
		|	ВТОценкиХарактеристик КАК ОценкиХарактеристик
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияХарактеристик.Ссылка КАК Ссылка,
		|			СУММА(ЗначенияХарактеристик.Вес) КАК Вес
		|		ИЗ
		|			ВТЗначенияХарактеристик КАК ЗначенияХарактеристик
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗначенияХарактеристик.Ссылка) КАК ВложенныйЗапрос
		|		ПО ОценкиХарактеристик.Вакансия = ВложенныйЗапрос.Ссылка";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизЛица", СписокФизЛиц);
	Запрос.УстановитьПараметр("Характеристики", ОтбираемыеХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоЭтапам", ИспользоватьОтборПоЭтапам);
	Данные = Запрос.Выполнить().Выгрузить();
	
	ТаблицаИтогов = Данные.Скопировать();
	ТаблицаИтогов.Свернуть("ФизическоеЛицо", "Оценка, ОтносительнаяОценка");
	ТаблицаИтогов.Сортировать("ОтносительнаяОценка Убыв");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Данные", Данные);
	СтруктураВозврата.Вставить("ТаблицаИтогов", ТаблицаИтогов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура отменяет анкеты кандидатов по этапу работы вакансии
//
// Параметры:
//   Вакансия - СправочникСсылка.Вакансии - вакансия.
//   ЭтапРаботы - СправочникСсылка.ЭтапыРаботыСКандидатами - этап работы с кандидатами.
//   Кандидат - СправочникСсылка.Кандидаты, Неопределено - кандидат, для которого отменяется этап работы.
//
Процедура ОтменитьАнкетыПоЭтапу(Вакансия, ЭтапРаботы, Кандидат = Неопределено) Экспорт
	
	НаборХарактеристик = РегистрыСведений.ХарактеристикиФизическихЛиц.СоздатьНаборЗаписей();
	НаборХарактеристик.Отбор.Вакансия.Установить(Вакансия);
	Если ЗначениеЗаполнено(Кандидат) Тогда
		НаборХарактеристик.Отбор.ФизическоеЛицо.Установить(Кандидат.ФизическоеЛицо);
	КонецЕсли;
	НаборХарактеристик.Прочитать();
	МассивСтарыхЗаписей = Новый Массив;
	Для Каждого ТекущаяЗапись Из НаборХарактеристик Цикл
		Если ТекущаяЗапись.Этап = ЭтапРаботы Тогда
			МассивСтарыхЗаписей.Добавить(ТекущаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УстаревшаяЗапись Из МассивСтарыхЗаписей Цикл
		НаборХарактеристик.Удалить(УстаревшаяЗапись);
	КонецЦикла;
	НаборХарактеристик.Записать();
	
	НаборЗаписей = РегистрыСведений.АнкетыКандидатов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вакансия.Установить(Вакансия);
	НаборЗаписей.Отбор.ЭтапРаботыСКандидатом.Установить(ЭтапРаботы);
	Если ЗначениеЗаполнено(Кандидат) Тогда
		НаборЗаписей.Отбор.Кандидат.Установить(Кандидат);
	КонецЕсли;
	НаборЗаписей.Записать();	
	
КонецПроцедуры

// Процедура-обработчик подписки ПроверитьЗаполнениеМотиваторовВАнкете.
// Проверяет, установлен ли признак "Мотиваторы разобраны". Если нет, то отказывает в проведении Анкеты.
//
Процедура ПроверитьЗаполнениеМотиваторовВАнкетеОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВопросыШаблонаАнкеты.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|		ПО ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты = ВопросыШаблонаАнкеты.Ссылка
		|ГДЕ
		|	ВопросыШаблонаАнкеты.Владелец = &Владелец
		|	И ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.ТипВопроса = ЗНАЧЕНИЕ(Перечисление.ТипыВопросовПоМетодуСИвановой.Мотивация)
		|	И НЕ ВопросыШаблонаАнкеты.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Источник.ШаблонАнкеты);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПоМотивацииВАнкетахДополнительно.МотиваторыРазобраны КАК МотиваторыРазобраны
	|ИЗ
	|	РегистрСведений.ДанныеПоМотивацииВАнкетахДополнительно КАК ДанныеПоМотивацииВАнкетахДополнительно
	|ГДЕ
	|	ДанныеПоМотивацииВАнкетахДополнительно.Анкета = &Анкета";
	Запрос.УстановитьПараметр("Анкета", Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	
	ТекстОшибки = НСтр("ru = 'Завершение интервью невозможно, пока не разобраны мотиваторы в анкете. Мотиваторы заполняются через кнопку ""Мотивация"".'");
	Если Выборка.Следующий() Тогда
		Если Не Выборка.МотиваторыРазобраны Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает и сохраняет итоговые оценки кандидатов по характеристикам
//
// Параметры:
//   Вакансия - СправочникСсылка.Вакансии - вакансия, по которой осуществляется оценка.
//   Кандидаты - Массив - массив оцениваемых кандидатов.
//
Процедура РассчитатьОценкиКандидатов(Вакансия, Кандидаты) Экспорт
	
	Если Кандидаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаКандидатов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Кандидаты, "ФизическоеЛицо");
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаКандидатов, "Значение");
	
	ОценкиПоХарактеристикам = ОценкиФизическихЛицПоХарактеристикам(Вакансия, ФизическиеЛицаМассив, Новый СписокЗначений, Ложь);
	ТаблицаИтогов = ОценкиПоХарактеристикам.ТаблицаИтогов;
	
	Для Каждого Кандидат Из Кандидаты Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", ФизическиеЛицаКандидатов[Кандидат]);
		СтрокиОценки = ТаблицаИтогов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОценки.Количество() = 0 Тогда
			Оценка = 0;
		Иначе
			Оценка = СтрокиОценки[0].ОтносительнаяОценка;
		КонецЕсли;
		ЗаписьРегистра = РегистрыСведений.ОценкиКандидатовПоХарактеристикам.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Кандидат = Кандидат;
		ЗаписьРегистра.Оценка = Оценка;
		ЗаписьРегистра.ФизическоеЛицо = ФизическиеЛицаКандидатов[Кандидат];
		ЗаписьРегистра.Записать();
	КонецЦикла;	
	
КонецПроцедуры

// Отменяет удаляемые из вакансии этапы.
//
Процедура ОтменитьАнкетыУдаленныхЭтапов(Вакансия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АнкетыКандидатов.Вакансия КАК Вакансия,
		|	АнкетыКандидатов.ЭтапРаботыСКандидатом КАК ЭтапРаботы
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ЭтапыВакансии
		|		ПО (ЭтапыВакансии.Ссылка = АнкетыКандидатов.Вакансия)
		|			И (ЭтапыВакансии.ЭтапРаботы = АнкетыКандидатов.ЭтапРаботыСКандидатом)
		|ГДЕ
		|	АнкетыКандидатов.Вакансия = &Вакансия
		|	И ЭтапыВакансии.ЭтапРаботы ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлектронноеИнтервью.ОтменитьАнкетыПоЭтапу(Вакансия, Выборка.ЭтапРаботы);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки на событие УстановитьИспользованиеЭлектронногоИнтервью
//
Процедура УстановитьИспользованиеЭлектронногоИнтервью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Значение Тогда
		Если Константы.ИспользоватьЭлектронноеИнтервью.Получить() Тогда
			// Значит надо выключить оценку, так как ее использование без "Анкетирования" невозможно.
			Константы.ИспользоватьЭлектронноеИнтервью.Установить(Ложь);
			
			Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьАнкетирование") Тогда
				НаименованиеИсточникаРодительныйПадеж = НСтр("ru = 'Анкетирования'");
			ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьШаблоныСообщений") Тогда
				НаименованиеИсточникаРодительныйПадеж = НСтр("ru = 'Шаблонов сообщений'");
			Иначе
				НаименованиеИсточникаРодительныйПадеж = "";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Использование Электронного интервью невозможно без использования %1. Электронное интервью так же было выключено.'"),
					НаименованиеИсточникаРодительныйПадеж);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дерево по списку действий сотрудников, добавляя их родительские элементы.
//
// Параметры:
//   СписокДействий - Массив - массив действий сотрудников.
//
// ВозвращаемоеЗначение:
//   ДеревоЗначений - дерево из переданных действий сотрудников и их родительских элементов.
//
Функция ДеревоДействийСотрудников(СписокДействий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияСотрудников.Ссылка КАК ДействиеСотрудника,
		|	ВЫБОР
		|		КОГДА ДействияСотрудников.Ссылка В (&СписокДействий)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВОбъекте
		|ИЗ
		|	Справочник.ДействияСотрудников КАК ДействияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДействияСотрудников КАК ДействияСотрудников1
		|		ПО ДействияСотрудников.Ссылка = ДействияСотрудников1.Родитель
		|ГДЕ
		|	(ДействияСотрудников.Ссылка В (&СписокДействий)
		|			ИЛИ ДействияСотрудников1.Ссылка В (&СписокДействий))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДействиеСотрудника ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("СписокДействий", СписокДействий);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РасширеннаяТаблицаОтветов(СтрокиОтветов)
	
	Ответы = Новый ТаблицаЗначений;
	Ответы.Колонки.Добавить("Анкета", Новый ОписаниеТипов("ДокументСсылка.Анкета"));
	Ответы.Колонки.Добавить("ШаблонАнкеты", Новый ОписаниеТипов("СправочникСсылка.ШаблоныАнкет"));
	Ответы.Колонки.Добавить("Вопрос", Новый ОписаниеТипов("СправочникСсылка.ВопросыШаблонаАнкеты"));
	Ответы.Колонки.Добавить("ЭлементарныйВопрос", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляАнкетирования"));
	Ответы.Колонки.Добавить("Ответ", Метаданные.ПланыВидовХарактеристик.ВопросыДляАнкетирования.Тип);
	Для Каждого ТекущаяЗапись Из СтрокиОтветов Цикл
		НоваяСтрока = Ответы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяЗапись);
		НоваяСтрока.ШаблонАнкеты = ТекущаяЗапись.Анкета.ШаблонАнкеты;
	КонецЦикла;
	
	Возврат Ответы;
	
КонецФункции

Функция ТекстЗапросаПоБаллам()
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
		|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
		|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
		|	ОтветыНаВопросыАнкет.ШаблонАнкеты КАК ШаблонАнкеты
		|ПОМЕСТИТЬ ВТОтветы
		|ИЗ
		|	&Ответы КАК ОтветыНаВопросыАнкет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Анкета,
		|	Вопрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиФизическихЛицСрезПоследних.Вакансия КАК Вакансия,
		|	ХарактеристикиФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ХарактеристикиФизическихЛицСрезПоследних.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	ХарактеристикиФизическихЛицСрезПоследних.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	АнкетыКандидатов.Анкета КАК Анкета
		|ПОМЕСТИТЬ ВТАктуальныеАнкеты
		|ИЗ
		|	РегистрСведений.ХарактеристикиФизическихЛиц.СрезПоследних КАК ХарактеристикиФизическихЛицСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ПО ХарактеристикиФизическихЛицСрезПоследних.Вакансия = АнкетыКандидатов.Вакансия
		|			И ХарактеристикиФизическихЛицСрезПоследних.ФизическоеЛицо = АнкетыКандидатов.ФизическоеЛицо
		|			И ХарактеристикиФизическихЛицСрезПоследних.Этап = АнкетыКандидатов.ЭтапРаботыСКандидатом
		|ГДЕ
		|	&Расшифровка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтветы.Анкета КАК Анкета,
		|	ВТОтветы.Вопрос КАК Вопрос
		|ПОМЕСТИТЬ ВТОтказалсяОтветить
		|ИЗ
		|	ВТОтветы КАК ВТОтветы
		|ГДЕ
		|	ВТОтветы.ЭлементарныйВопрос = &ВопросОтказалсяОтвечать
		|	И ВТОтветы.Ответ = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОтветы.Анкета КАК Анкета,
		|	ВТОтветы.ШаблонАнкеты КАК ШаблонАнкеты,
		|	ВопросыШаблонаАнкеты.Ссылка КАК ВопросШаблонаАнкеты
		|ПОМЕСТИТЬ ВТВопросыШаблонаАнкеты
		|ИЗ
		|	ВТОтветы КАК ВТОтветы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|		ПО ВТОтветы.ШаблонАнкеты = ВопросыШаблонаАнкеты.Владелец
		|			И (НЕ ВопросыШаблонаАнкеты.ПометкаУдаления)
		|			И (НЕ ВопросыШаблонаАнкеты.ЭтоГруппа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТВопросыШаблонаАнкеты.ВопросШаблонаАнкеты КАК ВопросШаблонаАнкеты,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	ВТВопросыШаблонаАнкеты.Анкета КАК Анкета,
		|	ВТВопросыШаблонаАнкеты.ВопросШаблонаАнкеты.ЭлементарныйВопрос КАК ВопросШаблонаАнкетыЭлементарныйВопрос,
		|	ВЫБОР
		|		КОГДА ВТОтказалсяОтветить.Вопрос ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОтказалсяОтветить
		|ПОМЕСТИТЬ ВТВопросыАнкеты
		|ИЗ
		|	ВТВопросыШаблонаАнкеты КАК ВТВопросыШаблонаАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|		ПО ВТВопросыШаблонаАнкеты.ВопросШаблонаАнкеты = ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтказалсяОтветить КАК ВТОтказалсяОтветить
		|		ПО ВТВопросыШаблонаАнкеты.Анкета = ВТОтказалсяОтветить.Анкета
		|			И ВТВопросыШаблонаАнкеты.ВопросШаблонаАнкеты = ВТОтказалсяОтветить.Вопрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВопросыАнкеты.Анкета КАК Анкета,
		|	ВТВопросыАнкеты.ВопросШаблонаАнкеты КАК Вопрос,
		|	Ответы.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	Ответы.Ответ КАК Ответ,
		|	АнкетыКандидатов.Вакансия КАК Вакансия,
		|	АнкетыКандидатов.ЭтапРаботыСКандидатом КАК ЭтапРаботыСКандидатом,
		|	АнкетыКандидатов.Кандидат КАК Кандидат,
		|	ВТВопросыАнкеты.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	ВТВопросыАнкеты.ВопросШаблонаАнкетыЭлементарныйВопрос КАК ВопросШаблонаАнкетыЭлементарныйВопрос
		|ПОМЕСТИТЬ ВТВопросыДляСобеседования
		|ИЗ
		|	ВТВопросыАнкеты КАК ВТВопросыАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветы КАК Ответы
		|		ПО ВТВопросыАнкеты.ВопросШаблонаАнкеты = Ответы.Вопрос
		|			И ВТВопросыАнкеты.Анкета = Ответы.Анкета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ПО ВТВопросыАнкеты.Анкета = АнкетыКандидатов.Анкета
		|ГДЕ
		|	(ВТВопросыАнкеты.ОтказалсяОтветить
		|			ИЛИ Ответы.Ответ <> ЗНАЧЕНИЕ(Справочник.ВариантыОтветовАнкет.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ВопросДляСобеседования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВопросыДляСобеседования.Анкета КАК Анкета,
		|	ВопросыДляСобеседования.Вопрос КАК Вопрос,
		|	ВопросыДляСобеседования.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ВопросыДляСобеседования.Ответ КАК Ответ,
		|	ВопросыДляСобеседования.Вакансия КАК Вакансия,
		|	ВопросыДляСобеседования.ЭтапРаботыСКандидатом КАК ЭтапРаботыСКандидатом,
		|	ВопросыДляСобеседования.Кандидат КАК Кандидат,
		|	ВопросыДляСобеседования.Кандидат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВопросыДляСобеседования.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.Балл КАК Балл
		|ПОМЕСТИТЬ ВТОтветыСБаллами
		|ИЗ
		|	ВТВопросыДляСобеседования КАК ВопросыДляСобеседования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
		|		ПО (ВЫБОР
		|				КОГДА ВопросыДляСобеседования.Вакансия.СоответствуетПрофилюДолжности
		|					ТОГДА ВопросыДляСобеседования.Вакансия.ПрофильДолжности
		|				ИНАЧЕ ВопросыДляСобеседования.Вакансия
		|			КОНЕЦ = НастройкаВопросовДляСобеседования.Объект)
		|			И (ВопросыДляСобеседования.ВопросДляСобеседования = НастройкаВопросовДляСобеседования.ВопросДляСобеседования
		|				ИЛИ ВопросыДляСобеседования.ВопросДляСобеседования ЕСТЬ NULL
		|					И НастройкаВопросовДляСобеседования.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка))
		|			И ВопросыДляСобеседования.ЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос
		|			И ВопросыДляСобеседования.Ответ = НастройкаВопросовДляСобеседования.ОтветНаВопрос
		|ГДЕ
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиПерсонала.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветыСБаллами.Вакансия КАК Вакансия,
		|	ОтветыСБаллами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтветыСБаллами.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	ОтветыСБаллами.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	СУММА(ОтветыСБаллами.Балл) КАК Балл
		|ПОМЕСТИТЬ ВТБаллы
		|ИЗ
		|	ВТОтветыСБаллами КАК ОтветыСБаллами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеАнкеты КАК ВТАктуальныеАнкеты
		|		ПО ОтветыСБаллами.Анкета = ВТАктуальныеАнкеты.Анкета
		|			И ОтветыСБаллами.Вакансия = ВТАктуальныеАнкеты.Вакансия
		|			И ОтветыСБаллами.ФизическоеЛицо = ВТАктуальныеАнкеты.ФизическоеЛицо
		|			И ОтветыСБаллами.ХарактеристикаПерсонала = ВТАктуальныеАнкеты.ХарактеристикаПерсонала
		|			И ОтветыСБаллами.ЗначениеХарактеристики = ВТАктуальныеАнкеты.ЗначениеХарактеристики
		|ГДЕ
		|	НЕ(ВТАктуальныеАнкеты.Анкета ЕСТЬ NULL
		|				И &Расшифровка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтветыСБаллами.Вакансия,
		|	ОтветыСБаллами.ФизическоеЛицо,
		|	ОтветыСБаллами.ХарактеристикаПерсонала,
		|	ОтветыСБаллами.ЗначениеХарактеристики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВопросыДляСобеседования.Вакансия КАК Вакансия,
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования КАК ВопросДляСобеседования,
		|	ВопросыДляСобеседования.Кандидат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НастройкаВопросовДляСобеседования.Балл) КАК Балл,
		|	ВопросыДляСобеседования.Анкета КАК Анкета
		|ПОМЕСТИТЬ ВТМаксимальныеБаллы
		|ИЗ
		|	РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВопросыДляСобеседования КАК ВопросыДляСобеседования
		|		ПО (НастройкаВопросовДляСобеседования.Объект = ВЫБОР
		|				КОГДА ВопросыДляСобеседования.Вакансия.СоответствуетПрофилюДолжности
		|					ТОГДА ВопросыДляСобеседования.Вакансия.ПрофильДолжности
		|				ИНАЧЕ ВопросыДляСобеседования.Вакансия
		|			КОНЕЦ)
		|			И (ВопросыДляСобеседования.ВопросДляСобеседования = НастройкаВопросовДляСобеседования.ВопросДляСобеседования
		|				ИЛИ ВопросыДляСобеседования.ВопросДляСобеседования ЕСТЬ NULL
		|					И НастройкаВопросовДляСобеседования.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|					И ВопросыДляСобеседования.ВопросШаблонаАнкетыЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос)
		|			И НастройкаВопросовДляСобеседования.ЭлементарныйВопрос = ВопросыДляСобеседования.ЭлементарныйВопрос
		|ГДЕ
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ХарактеристикиПерсонала.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВопросыДляСобеседования.Вакансия,
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
		|	ВопросыДляСобеседования.Кандидат.ФизическоеЛицо,
		|	ВопросыДляСобеседования.Анкета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеБаллы.Вакансия КАК Вакансия,
		|	МаксимальныеБаллы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МаксимальныеБаллы.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	МаксимальныеБаллы.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	СУММА(МаксимальныеБаллы.Балл) КАК Балл
		|ПОМЕСТИТЬ ВТМаксимальныеБаллыСвернутые
		|ИЗ
		|	ВТМаксимальныеБаллы КАК МаксимальныеБаллы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеАнкеты КАК ВТАктуальныеАнкеты
		|		ПО МаксимальныеБаллы.Вакансия = ВТАктуальныеАнкеты.Вакансия
		|			И МаксимальныеБаллы.ФизическоеЛицо = ВТАктуальныеАнкеты.ФизическоеЛицо
		|			И МаксимальныеБаллы.ХарактеристикаПерсонала = ВТАктуальныеАнкеты.ХарактеристикаПерсонала
		|			И МаксимальныеБаллы.ЗначениеХарактеристики = ВТАктуальныеАнкеты.ЗначениеХарактеристики
		|			И МаксимальныеБаллы.Анкета = ВТАктуальныеАнкеты.Анкета
		|ГДЕ
		|	НЕ(ВТАктуальныеАнкеты.Анкета ЕСТЬ NULL
		|				И &Расшифровка)
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеБаллы.Вакансия,
		|	МаксимальныеБаллы.ХарактеристикаПерсонала,
		|	МаксимальныеБаллы.ЗначениеХарактеристики,
		|	МаксимальныеБаллы.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеБаллыСвернутые.Вакансия КАК Вакансия,
		|	МаксимальныеБаллыСвернутые.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МаксимальныеБаллыСвернутые.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	МаксимальныеБаллыСвернутые.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ВЫБОР
		|		КОГДА МаксимальныеБаллыСвернутые.Балл = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(Баллы.Балл, 0) / МаксимальныеБаллыСвернутые.Балл * 100
		|	КОНЕЦ КАК Балл
		|ПОМЕСТИТЬ ВТИтоговыеЗначения
		|ИЗ
		|	ВТМаксимальныеБаллыСвернутые КАК МаксимальныеБаллыСвернутые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБаллы КАК Баллы
		|		ПО МаксимальныеБаллыСвернутые.ФизическоеЛицо = Баллы.ФизическоеЛицо
		|			И (Баллы.ХарактеристикаПерсонала = МаксимальныеБаллыСвернутые.ХарактеристикаПерсонала)
		|			И (Баллы.ЗначениеХарактеристики = МаксимальныеБаллыСвернутые.ЗначениеХарактеристики)
		|			И (Баллы.Вакансия = МаксимальныеБаллыСвернутые.Вакансия)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Вакансия,
		|	ХарактеристикаПерсонала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеЗначения.Вакансия КАК Вакансия,
		|	ИтоговыеЗначения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИтоговыеЗначения.ХарактеристикаПерсонала КАК ХарактеристикаПерсонала,
		|	ИтоговыеЗначения.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ИтоговыеЗначения.Балл КАК Балл
		|ИЗ
		|	ВТИтоговыеЗначения КАК ИтоговыеЗначения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДанныеВопросовШаблонаАнкеты(ШаблонАнкеты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВопросыШаблонаАнкеты.Ссылка КАК ВопросШаблона,
		|	ВопросыШаблонаАнкеты.Родитель КАК Родитель,
		|	ВопросыШаблонаАнкеты.Наименование КАК Наименование,
		|	ВопросыШаблонаАнкеты.Обязательный КАК Обязательный,
		|	ВопросыШаблонаАнкеты.ТипВопроса КАК ТипВопроса,
		|	ВопросыШаблонаАнкеты.ТипТабличногоВопроса КАК ТипТабличногоВопроса,
		|	ВопросыШаблонаАнкеты.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ВопросыШаблонаАнкеты.ЭтоГруппа КАК ЭтоРаздел,
		|	ВопросыШаблонаАнкеты.РодительВопрос КАК РодительВопрос,
		|	ВЫБОР
		|		КОГДА ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.ТипВопроса = ЗНАЧЕНИЕ(Перечисление.ТипыВопросовПоМетодуСИвановой.Мотивация)
		|			ТОГДА ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.Подсказка	
		|		ИНАЧЕ ВопросыШаблонаАнкеты.Подсказка 
		|	КОНЕЦ КАК Подсказка,
		|	ВопросыШаблонаАнкеты.СпособОтображенияПодсказки КАК СпособОтображенияПодсказки,
		|	ВопросыШаблонаАнкеты.Формулировка КАК Формулировка,
		|	ВопросыШаблонаАнкеты.СоставТабличногоВопроса.(
		|		НомерСтроки КАК НомерСтроки,
		|		ЭлементарныйВопрос
		|	),
		|	ВопросыШаблонаАнкеты.ПредопределенныеОтветы.(
		|		НомерСтроки КАК НомерСтроки,
		|		ЭлементарныйВопрос,
		|		Ответ
		|	),
		|	ВопросыШаблонаАнкеты.СоставКомплексногоВопроса.(
		|		НомерСтроки КАК НомерСтроки,
		|		ЭлементарныйВопрос
		|	),
		|	ЕСТЬNULL(ВопросыДляАнкетирования.Длина, 0) КАК Длина,
		|	ВопросыДляАнкетирования.ТипЗначения КАК ТипЗначения,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.ТребуетсяКомментарий, ЛОЖЬ) КАК ТребуетсяКомментарий,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.ПояснениеКомментария, """") КАК ПояснениеКомментария,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.МинимальноеЗначение, 0) КАК МинимальноеЗначение,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.ТипОтвета, ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ПустаяСсылка)) КАК ТипОтвета,
		|	ЕСТЬNULL(ВопросыДляАнкетирования.Точность, 0) КАК Точность,
		|	ВопросыШаблонаАнкеты.Заметки,
		|	ВЫБОР
		|		КОГДА ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.ТипВопроса = ЗНАЧЕНИЕ(Перечисление.ТипыВопросовПоМетодуСИвановой.Мотивация)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Мотивация,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.ТипВопроса КАК ТипВопросаПоМетодуСИвановой
		|ИЗ
		|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляАнкетирования КАК ВопросыДляАнкетирования
		|		ПО ВопросыШаблонаАнкеты.ЭлементарныйВопрос = ВопросыДляАнкетирования.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|		ПО (ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты = ВопросыШаблонаАнкеты.Ссылка)
		|ГДЕ
		|	НЕ ВопросыШаблонаАнкеты.ПометкаУдаления
		|	И ВопросыШаблонаАнкеты.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВопросыШаблонаАнкеты.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", ШаблонАнкеты);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ДобавитьСтрокиДереваАнкеты(Выборка, Макет, ТабличныйДокумент)
	
	ЛистТабличногоДокумента = Новый ТабличныйДокумент;
	ЛистТабличногоДокумента.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЛистТабличногоДокумента.АвтоМасштаб = Истина;
	ЛистТабличногоДокумента.Вывести(ТабличныйДокумент);
	ТабличныйДокумент.Очистить();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ЭтоРаздел Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ОбластьВопроса = Макет.ПолучитьОбласть("ВопросШаблона");
		ПустойВопрос = Макет.ПолучитьОбласть("ПустойВопрос");
		ПустойРаздел = Макет.ПолучитьОбласть("ПустойРаздел");
		МассивКолонок = Новый Массив;
		Пока ПодчиненнаяВыборка.Следующий() Цикл
			ФормулировкаВопроса = ПодчиненнаяВыборка.Формулировка;
			Если ПодчиненнаяВыборка.ТипВопросаПоМетодуСИвановой = Перечисления.ТипыВопросовПоМетодуСИвановой.PARLA Тогда
				ФормулировкаВопроса = СтрЗаменить(ФормулировкаВопроса, "P(Problem)", "•");
				ФормулировкаВопроса = СтрЗаменить(ФормулировкаВопроса, "A(Action)", "•");
				ФормулировкаВопроса = СтрЗаменить(ФормулировкаВопроса, "R(Result)", "•");
				ФормулировкаВопроса = СтрЗаменить(ФормулировкаВопроса, "L(Learned)", "•");
				ФормулировкаВопроса = СтрЗаменить(ФормулировкаВопроса, "A(Applied)", "•");
			КонецЕсли;
			Если ЗначениеЗаполнено(ПодчиненнаяВыборка.Подсказка) Тогда
				ФормулировкаВопроса = ФормулировкаВопроса + "(" + ПодчиненнаяВыборка.Подсказка + ")";
			КонецЕсли;
			ОбластьВопроса.Параметры.ВопросШаблона = ФормулировкаВопроса;
			ДобавляемыйТабличныйДокумент = Новый ТабличныйДокумент;
			ДобавляемыйТабличныйДокумент.Вывести(ОбластьВопроса);
			Если ПодчиненнаяВыборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Простой Тогда
				Если ПодчиненнаяВыборка.Мотивация Тогда
					ДобавитьМотивацию(ДобавляемыйТабличныйДокумент, Макет, ПодчиненнаяВыборка.ЭлементарныйВопрос);
				Иначе
					ДобавитьПростойВопрос(ДобавляемыйТабличныйДокумент, Макет, ПодчиненнаяВыборка.ЭлементарныйВопрос);
				КонецЕсли;
				МассивКолонок.Добавить(ДобавляемыйТабличныйДокумент);
			ИначеЕсли ПодчиненнаяВыборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Комплексный Тогда
				
				СоставВопроса = ПодчиненнаяВыборка.СоставКомплексногоВопроса.Выгрузить();
				
				Если ПодчиненнаяВыборка.ТипВопросаПоМетодуСИвановой = Перечисления.ТипыВопросовПоМетодуСИвановой.ТриПлюсаТриМинуса Тогда
					
					СтрокаОтвета = Макет.ПолучитьОбласть("ВопросТаблицы");
					Если СоставВопроса.Количество() > 0 Тогда
						СтрокаОтвета.Параметры.Вопрос1 = СоставВопроса[0].ЭлементарныйВопрос.Формулировка;
					КонецЕсли;
					Если СоставВопроса.Количество() > 1 Тогда
						СтрокаОтвета.Параметры.Вопрос2 = СоставВопроса[1].ЭлементарныйВопрос.Формулировка;
					КонецЕсли; 
					ДобавляемыйТабличныйДокумент.Вывести(СтрокаОтвета);
					
					Если СоставВопроса.Количество()>2 Тогда
						Для Сч=3 По СоставВопроса.Количество() Цикл
							ДобавитьЭлементарныйВопрос(ДобавляемыйТабличныйДокумент, Макет, СоставВопроса[Сч-1].ЭлементарныйВопрос);
						КонецЦикла; 
					КонецЕсли; 
					
				Иначе
					
					Для Каждого ТекущаяСтрока Из СоставВопроса Цикл
						ДобавитьЭлементарныйВопрос(ДобавляемыйТабличныйДокумент, Макет, ТекущаяСтрока.ЭлементарныйВопрос);
					КонецЦикла;
					
				КонецЕсли; 
				МассивКолонок.Добавить(ДобавляемыйТабличныйДокумент);
				
			ИначеЕсли ПодчиненнаяВыборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Табличный Тогда
				СтрокаОтвета = Макет.ПолучитьОбласть("ВопросТаблицы");
				СоставТабличногоВопроса = ПодчиненнаяВыборка.СоставТабличногоВопроса.Выгрузить();
				Если СоставТабличногоВопроса.Количество() > 0 Тогда
					СтрокаОтвета.Параметры.Вопрос1 = СоставТабличногоВопроса[0].ЭлементарныйВопрос.Формулировка;
				КонецЕсли;
				Если СоставТабличногоВопроса.Количество() > 1 Тогда
					СтрокаОтвета.Параметры.Вопрос2 = СоставТабличногоВопроса[1].ЭлементарныйВопрос.Формулировка;
				КонецЕсли; 
				ДобавляемыйТабличныйДокумент.Вывести(СтрокаОтвета);
				МассивКолонок.Добавить(ДобавляемыйТабличныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		НачалоРаздела = ЛистТабличногоДокумента.ВысотаТаблицы;
		ВысотаРаздела = 0;
		НомерКолонки = 0;
		Пока НомерКолонки < МассивКолонок.Количество() Цикл
			ПромежуточныйТабличныйДокумент = Новый ТабличныйДокумент;
			ОбластьРаздел = Макет.ПолучитьОбласть("ОбластьРаздел");
			ОбластьРаздел.Параметры.Раздел = Выборка.ВопросШаблона;
			ПромежуточныйТабличныйДокумент.Вывести(ОбластьРаздел);
			ВысотаФрагмента = 1;
			НомерПоследнейКолонки = НомерКолонки + 2;
			МассивДляВывода = Новый Массив;
			Пока НомерКолонки < МассивКолонок.Количество() И НомерКолонки <= НомерПоследнейКолонки Цикл
				Высота = МассивКолонок[НомерКолонки].ВысотаТаблицы;
				МассивДляВывода.Добавить(МассивКолонок[НомерКолонки]);
				Если Высота > ВысотаФрагмента Тогда
					ВысотаФрагмента = Высота;
				КонецЕсли;
				НомерКолонки = НомерКолонки + 1;
			КонецЦикла;
			КолонокВыведено = 0;
			ПромежуточныйТабличныйДокументКолонок = Новый ТабличныйДокумент;
			Для Каждого ТабличныйДокументКолонка Из МассивДляВывода Цикл
				Пока ТабличныйДокументКолонка.ВысотаТаблицы < ВысотаФрагмента Цикл
					ТабличныйДокументКолонка.Вывести(ПустойВопрос);
				КонецЦикла;
				ПромежуточныйТабличныйДокументКолонок.Присоединить(ТабличныйДокументКолонка);
				КолонокВыведено = КолонокВыведено + 1;
			КонецЦикла;
			Пока КолонокВыведено < 3 Цикл
				ТабличныйДокументКолонка = Новый ТабличныйДокумент;
				Для Строк = 1 По ВысотаФрагмента Цикл
					ТабличныйДокументКолонка.Вывести(ПустойВопрос);
				КонецЦикла;
				ПромежуточныйТабличныйДокументКолонок.Присоединить(ТабличныйДокументКолонка);
				КолонокВыведено = КолонокВыведено + 1;
			КонецЦикла;
			Если Не ЛистТабличногоДокумента.ПроверитьВывод(ПромежуточныйТабличныйДокументКолонок) Тогда
				ТабличныйДокумент.Вывести(ЛистТабличногоДокумента);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЛистТабличногоДокумента = Новый ТабличныйДокумент;
				ЛистТабличногоДокумента.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
				ЛистТабличногоДокумента.АвтоМасштаб = Истина;
				НачалоРаздела = 0;
				ВысотаРаздела = 0;
			КонецЕсли;
			ВысотаРаздела = ВысотаРаздела + ВысотаФрагмента;
			Если ВысотаРаздела > 0 Тогда
				Сплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ПромежуточныйТабличныйДокумент.Присоединить(ПромежуточныйТабличныйДокументКолонок);
				ЛистТабличногоДокумента.Вывести(ПромежуточныйТабличныйДокумент);
				ЛистТабличногоДокумента.Область(НачалоРаздела + 1, 1, НачалоРаздела + ВысотаРаздела, 1).Обвести(Сплошная, Сплошная, Сплошная, Сплошная);
				ЛистТабличногоДокумента.Область(НачалоРаздела + 1, 1, НачалоРаздела + ВысотаРаздела, 1).Объединить();
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	ТабличныйДокумент.Вывести(ЛистТабличногоДокумента);
	
КонецПроцедуры

Процедура ДобавитьЭлементарныйВопрос(ТабличныйДокумент, Макет, ЭлементарныйВопрос)
	
	Если ЭлементарныйВопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз
		Или ЭлементарныйВопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		СтрокаВопроса = Макет.ПолучитьОбласть("ЭлементарныйВопрос");
		ТекстВопроса = ЭлементарныйВопрос.Формулировка + ":";
		СтрокаВопроса.Параметры.Вопрос = ТекстВопроса;
		ТабличныйДокумент.Вывести(СтрокаВопроса);
		СтрокаОтвета = Макет.ПолучитьОбласть("ЭлементарныйОтвет");
		Ответ = "";
		ВариантыОтветов = ВариантыОтветов(ЭлементарныйВопрос);
		Для Каждого ТекущийВариант Из ВариантыОтветов Цикл
			Ответ = Ответ + ?(ПустаяСтрока(Ответ), "", "  /  ") + ТекущийВариант.Наименование;
		КонецЦикла;
		СтрокаОтвета.Параметры.Ответ = Ответ;
		ТабличныйДокумент.Вывести(СтрокаОтвета);
		Если ЭлементарныйВопрос.ТребуетсяКомментарий Тогда
			ОбластьКомментарий = Макет.ПолучитьОбласть("Комментарий");
			ОбластьКомментарий.Параметры.Комментарий = ЭлементарныйВопрос.ПояснениеКомментария + ":";
			ТабличныйДокумент.Вывести(ОбластьКомментарий);
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
		КонецЕсли;
	Иначе
		СтрокаОтвета = Макет.ПолучитьОбласть("ЭлементарныйВопрос");
		СтрокаОтвета.Параметры.Вопрос = ЭлементарныйВопрос.Формулировка + ":";
		ТабличныйДокумент.Вывести(СтрокаОтвета);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьПростойВопрос(ТабличныйДокумент, Макет, ЭлементарныйВопрос)
	
	Если ЭлементарныйВопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз
		Или ЭлементарныйВопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		СтрокаОтвета = Макет.ПолучитьОбласть("ЭлементарныйОтвет");
		Ответ = "";
		ВариантыОтветов = ВариантыОтветов(ЭлементарныйВопрос);
		Для Каждого ТекущийВариант Из ВариантыОтветов Цикл
			Ответ = Ответ + ?(Ответ = "", "", "  /  ") + ТекущийВариант.Наименование;
		КонецЦикла;
		СтрокаОтвета.Параметры.Ответ = Ответ;
		ТабличныйДокумент.Вывести(СтрокаОтвета);
		Если ЭлементарныйВопрос.ТребуетсяКомментарий Тогда
			ОбластьКомментарий = Макет.ПолучитьОбласть("Комментарий");
			ОбластьКомментарий.Параметры.Комментарий = ЭлементарныйВопрос.ПояснениеКомментария + ":";
			ТабличныйДокумент.Вывести(ОбластьКомментарий);
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
		КонецЕсли;
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьМотивацию(ТабличныйДокумент, Макет, ЭлементарныйВопрос)
	
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	Если ЭлементарныйВопрос.ТребуетсяКомментарий Тогда
		ОбластьКомментарий = Макет.ПолучитьОбласть("Комментарий");
		ОбластьКомментарий.Параметры.Комментарий = ЭлементарныйВопрос.ПояснениеКомментария + ":";
		ТабличныйДокумент.Вывести(ОбластьКомментарий);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПустойВопрос"));
	КонецЕсли;	
	
КонецПроцедуры

Функция ВариантыОтветов(ЭлементарныйВопрос)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВариантыОтветовАнкет.Ссылка,
		|	ВариантыОтветовАнкет.ТребуетОткрытогоОтвета,
		|	ВариантыОтветовАнкет.Наименование
		|ИЗ
		|	Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
		|ГДЕ
		|	ВариантыОтветовАнкет.Владелец = &Владелец
		|	И НЕ ВариантыОтветовАнкет.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантыОтветовАнкет.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("Владелец", ЭлементарныйВопрос);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОтветНаВопрос(ОтветСтрокой, МассивОтветов)
	
	Для Каждого Ответ Из МассивОтветов Цикл
		Если Ответ.Наименование = ОтветСтрокой Тогда
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.ВариантыОтветовАнкет.ПустаяСсылка();
	
КонецФункции

// Копирует шаблон анкеты, соответствующий определенному этапу работы.
// Функция вызывается при создании нового объекта копированием. При этом шаблоны анкеты копируемого объекта должны
// заменяться на аналогичные новые шаблоны.
//
// Параметры 
//	ЭлементКопирования - СправочникСсылка.ШаблоныАнкет - копируемый шаблон анкеты. 
//	ЭтапРаботы - СправочникСсылка.ЭтапыРаботыСКандидатами - этап, для которого копируется шаблон анкеты.
//	СоответствиеЗаписейНастроекВопросовДляСобеседования - Соответствие - соответствие настроек вопросам для собеседования.
//	Наименование - Строка - наименование нового элемента справочника, для которого копируется шаблон анкеты.
//	ИмяВладельца - Строка - имя справочника, для которого копируется шаблон анкеты.
//
// ВозвращаемоеЗначение:
//   СправочникСсылка.ШаблоныАнкет - ссылка на новый шаблон анкеты.
//
Функция КопияШаблонаАнкеты(ЭлементКопирования, ЭтапРаботы, СоответствиеЗаписейНастроекВопросовДляСобеседования, Наименование, ИмяВладельца)
	
	ШаблонАнкетыОбъект = Справочники.ШаблоныАнкет.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(ШаблонАнкетыОбъект, ЭлементКопирования, "ПометкаУдаления, Наименование, Заголовок, Вступление, Заключение");
	ШаблонАнкетыОбъект.Наименование = Наименование + " / " + ЭтапРаботы.Наименование;
	ШаблонАнкетыОбъект.Заголовок = ШаблонАнкетыОбъект.Наименование;
	ШаблонАнкетыОбъект.УстановитьСсылкуНового(Справочники.ШаблоныАнкет.ПолучитьСсылку());
	ШаблонАнкетыОбъект.РедактированиеШаблонаЗавершено = Ложь;
	ШаблонАнкетыОбъект.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВакансииЭтапыРаботыСКандидатами.Ссылка
		|ИЗ
		|	Справочник.Вакансии.ЭтапыРаботыСКандидатами КАК ВакансииЭтапыРаботыСКандидатами
		|ГДЕ
		|	ВакансииЭтапыРаботыСКандидатами.ШаблонАнкеты = &ШаблонАнкеты";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Вакансии", ИмяВладельца);
	Запрос.УстановитьПараметр("ШаблонАнкеты", ЭлементКопирования);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтарыйОбъект = Выборка.Ссылка;
	Иначе
		СтарыйОбъект = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыШаблонаАнкеты.Ссылка КАК Ссылка,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования,
		|	ВопросыШаблонаАнкеты.ЭлементарныйВопрос
		|ПОМЕСТИТЬ ВТВопросы
		|ИЗ
		|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|		ПО ВопросыШаблонаАнкеты.Ссылка = ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты
		|ГДЕ
		|	ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вопросы.Ссылка КАК Ссылка,
		|	Вопросы.Ссылка.Владелец КАК Владелец,
		|	Вопросы.Ссылка.Родитель КАК Родитель,
		|	Вопросы.Ссылка.ЭтоГруппа КАК ЭтоГруппа,
		|	Вопросы.Ссылка.Код КАК Код,
		|	Вопросы.Ссылка.Наименование КАК Наименование,
		|	Вопросы.Ссылка.Формулировка КАК Формулировка,
		|	Вопросы.Ссылка.Обязательный КАК Обязательный,
		|	Вопросы.Ссылка.ТипВопроса КАК ТипВопроса,
		|	Вопросы.Ссылка.ТипТабличногоВопроса КАК ТипТабличногоВопроса,
		|	Вопросы.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	Вопросы.Ссылка.РодительВопрос КАК РодительВопрос,
		|	Вопросы.Ссылка.Заметки КАК Заметки,
		|	Вопросы.Ссылка.Подсказка КАК Подсказка,
		|	Вопросы.Ссылка.СпособОтображенияПодсказки КАК СпособОтображенияПодсказки,
		|	Вопросы.Ссылка.СоставТабличногоВопроса.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК СоставТабличногоВопроса,
		|	Вопросы.Ссылка.ПредопределенныеОтветы.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		Ответ КАК Ответ,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК ПредопределенныеОтветы,
		|	Вопросы.Ссылка.СоставКомплексногоВопроса.(
		|		ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК СоставКомплексногоВопроса,
		|	Вопросы.ВопросДляСобеседования
		|ИЗ
		|	ВТВопросы КАК Вопросы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ,
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.Балл,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования
		|ИЗ
		|	ВТВопросы КАК Вопросы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
		|		ПО (ВЫБОР
		|				КОГДА Вопросы.ВопросДляСобеседования ЕСТЬ NULL 
		|					ТОГДА НастройкаВопросовДляСобеседования.ВопросДляСобеседования = ЗНАЧЕНИЕ(Справочник.ВопросыДляСобеседования.ПустаяСсылка)
		|							И Вопросы.ЭлементарныйВопрос = НастройкаВопросовДляСобеседования.ЭлементарныйВопрос
		|				ИНАЧЕ Вопросы.ВопросДляСобеседования = НастройкаВопросовДляСобеседования.ВопросДляСобеседования
		|			КОНЕЦ)
		|			И (НастройкаВопросовДляСобеседования.Объект = &Объект)
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопрос,
		|	НастройкаВопросовДляСобеседования.ЗначениеХарактеристики,
		|	НастройкаВопросовДляСобеседования.ВопросДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопрос,
		|	НастройкаВопросовДляСобеседования.Балл,
		|	НастройкаВопросовДляСобеседования.ЭлементарныйВопросВопросаДляСобеседования,
		|	НастройкаВопросовДляСобеседования.ОтветНаВопросВопросаДляСобеседования";
	
	Запрос.УстановитьПараметр("ШаблонАнкеты", ЭлементКопирования);
	Запрос.УстановитьПараметр("Объект", СтарыйОбъект);
	
	Результаты = Запрос.ВыполнитьПакет();
	Если Результаты[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	НастройкаВопросовДляСобеседования = Результаты[2].Выгрузить();
	
	ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(ШаблонАнкетыОбъект.Ссылка, Выборка, НастройкаВопросовДляСобеседования, СоответствиеЗаписейНастроекВопросовДляСобеседования);
	
	Возврат ШаблонАнкетыОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, Выборка, НастройкаВопросовДляСобеседования, СоответствиеЗаписейНастроекВопросовДляСобеседования, Родитель = Неопределено)
	
	ВопросыСУсловием = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьГруппу();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка, "Наименование, Код, Формулировка");
			
		Иначе
			
			НовыйЭлемент = Справочники.ВопросыШаблонаАнкеты.СоздатьЭлемент();
			
			СсылкаНового = Справочники.ВопросыШаблонаАнкеты.ПолучитьСсылку();
			НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка,, "Владелец, Родитель, СоставТабличногоВопроса, ПредопределенныеОтветы, Код, РодительВопрос");
			СоставТабличногоВопроса = Выборка.СоставТабличногоВопроса.Выгрузить();
			СоставТабличногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставТабличногоВопроса.Загрузить(СоставТабличногоВопроса);
			ПредопределенныеОтветы = Выборка.ПредопределенныеОтветы.Выгрузить();
			ПредопределенныеОтветы.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.ПредопределенныеОтветы.Загрузить(ПредопределенныеОтветы);
			СоставКомплексногоВопроса = Выборка.СоставКомплексногоВопроса.Выгрузить();
			СоставКомплексногоВопроса.Сортировать("НомерСтроки Возр");
			НовыйЭлемент.СоставКомплексногоВопроса.Загрузить(СоставКомплексногоВопроса);
			
			Если Выборка.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.ВопросСУсловием Тогда
				ВопросыСУсловием.Вставить(Выборка.Ссылка, СсылкаНового);
			КонецЕсли;
			
			Если Не Выборка.РодительВопрос.Пустая() Тогда
				НовыйЭлемент.РодительВопрос = ВопросыСУсловием.Получить(Выборка.РодительВопрос);
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйЭлемент.Владелец = Ссылка;
		НовыйЭлемент.Родитель = ?(Родитель = Неопределено, Справочники.ВопросыШаблонаАнкеты.ПустаяСсылка(), Родитель);
		НовыйЭлемент.Записать();
		
		Если ЗначениеЗаполнено(Выборка.ВопросДляСобеседования) Тогда
			
			// Запись вопросов для собеседования шаблонов анкет
			Запись = РегистрыСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет.СоздатьМенеджерЗаписи();
			Запись.ВопросШаблонаАнкеты = НовыйЭлемент.Ссылка;
			Запись.ВопросДляСобеседования = Выборка.ВопросДляСобеседования;
			Запись.Записать();
				
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Выборка.ВопросДляСобеседования);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
				СоответствиеЗаписейНастроекВопросовДляСобеседования.Вставить(Выборка.ВопросДляСобеседования, СтрокиНастройкаВопросовДляСобеседования);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЭлементарныйВопрос) Тогда
			
			// Запись настроек вопросов для собеседования
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВопросДляСобеседования", Справочники.ВопросыДляСобеседования.ПустаяСсылка());
			СтруктураПоиска.Вставить("ЭлементарныйВопрос", Выборка.ЭлементарныйВопрос);
			СтрокиНастройкаВопросовДляСобеседования = НастройкаВопросовДляСобеседования.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНастройкаВопросовДляСобеседования.Количество() > 0 Тогда
				СоответствиеЗаписейНастроекВопросовДляСобеседования.Вставить(Выборка.ЭлементарныйВопрос, СтрокиНастройкаВопросовДляСобеседования);
			КонецЕсли;
			
		КонецЕсли;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ПодчиненнаяВыборка.Количество() > 0 Тогда
			ДобавитьЭлементыСправочникаВопросыШаблонаАнкеты(Ссылка, ПодчиненнаяВыборка, НастройкаВопросовДляСобеседования, СоответствиеЗаписейНастроекВопросовДляСобеседования, НовыйЭлемент.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик фонового задания сохранения настроек шаблона анкеты и пересчета результатов анкетирования.
//
// Параметры 
//	Параметры - Структура - параметры фонового задания. 
//	ЭтапРаботы - Строка - адрес временного хранилища результатов работы фонового задания.
//
Процедура СохранитьНастройкиШаблонаАнкеты(Параметры, АдресРезультата) Экспорт
	
	НачатьТранзакцию();
	
	МассивАнкет = Параметры.МассивАнкет;
	МассивУдаляемыхВопросов = Новый Массив;
	Если МассивАнкет.Количество() = 0 Тогда
		Анкетирование.УдалитьВопросыШаблонаАнкеты(Параметры.ШаблонАнкеты);
		СоответствиеВопросов = Неопределено;
		КодыРазделов = Неопределено;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	ВопросыШаблонаАнкеты.Ссылка
			|ИЗ
			|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
			|ГДЕ
			|	ВопросыШаблонаАнкеты.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Параметры.ШаблонАнкеты);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			МассивУдаляемыхВопросов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		СоответствиеВопросов = Новый Соответствие;
		КодыРазделов = Новый Соответствие;
	КонецЕсли;
	
	ЗаписатьДеревоШаблонаАнкеты(Параметры, Параметры.ДеревоШаблонаАнкеты, СоответствиеВопросов, КодыРазделов, 1);
	
	ПерезаполнитьАнкеты(Параметры, МассивАнкет, СоответствиеВопросов);
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого ЭлементМассива Из МассивУдаляемыхВопросов Цикл
		СправочникОбъект = ЭлементМассива.ПолучитьОбъект();
		Если (Не СправочникОбъект = Неопределено) Тогда
			СправочникОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КодыРазделов <> Неопределено Тогда
		Для Каждого КодРаздела Из КодыРазделов Цикл
			ТекущийРаздел = КодРаздела.Ключ.ПолучитьОбъект();
			ТекущийРаздел.Код = КодРаздела.Значение;
			ТекущийРаздел.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.ТребуетсяПересчетАнкет Тогда
		ВыполнитьПересчетАнкет(Параметры.МассивАнкет);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьДеревоШаблонаАнкеты(Параметры, СтрокаДереваРодитель, СоответствиеВопросов, КодыРазделов, УровеньРекурсии, СправочникРодитель = Неопределено)
	
	Счетчик = 0;
	
	// запишем новые
	Для каждого СтрокаДерева Из СтрокаДереваРодитель.Строки Цикл
		
		Счетчик = Счетчик + 1;
		СпрСсылка = ЭлементСправочникаВопросШаблонаАнкеты(Параметры, СтрокаДерева, СоответствиеВопросов, КодыРазделов, ?(УровеньРекурсии = 1, Счетчик, Неопределено), СправочникРодитель);
		
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ТипСтроки = "Раздел" Тогда
			ЗаписатьДеревоШаблонаАнкеты(Параметры, СтрокаДерева, СоответствиеВопросов, КодыРазделов, УровеньРекурсии+1, СпрСсылка);
		Иначе
			Для Каждого СтрокаПодчиненныйВопрос Из СтрокаДерева.Строки Цикл
				ЭлементСправочникаВопросШаблонаАнкеты(Параметры, СтрокаПодчиненныйВопрос, СоответствиеВопросов, КодыРазделов, Неопределено, СправочникРодитель, СпрСсылка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементСправочникаВопросШаблонаАнкеты(Параметры, СтрокаДерева, СоответствиеВопросов, КодыРазделов, Код = Неопределено, СправочникРодитель = Неопределено, ВопросРодитель = Неопределено)
	
	Если СтрокаДерева.ТипСтроки = "Раздел" Тогда
		
		СпрОбъект = Справочники.ВопросыШаблонаАнкеты.СоздатьГруппу();
		
	Иначе
		
		// запись комментария
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВопросДляСобеседования", СтрокаДерева.ВопросДляСобеседования);
		СтруктураОтбора.Вставить("Уровень", 2);
		Таблица = Параметры.Ответы.Скопировать(СтруктураОтбора, "ЭлементарныйВопрос, ТребуетсяКомментарий, ПояснениеКомментария");
		Таблица.Свернуть("ЭлементарныйВопрос, ТребуетсяКомментарий, ПояснениеКомментария");
		Для Каждого СтрокаТЗ Из Таблица Цикл
			ВопросОбъект = СтрокаТЗ.ЭлементарныйВопрос.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ВопросОбъект, СтрокаТЗ);
			ВопросОбъект.Записать();
		КонецЦикла; 
		
		СпрОбъект = Справочники.ВопросыШаблонаАнкеты.СоздатьЭлемент();
		СпрОбъект.РодительВопрос = ?(ВопросРодитель = Неопределено, Справочники.ВопросыШаблонаАнкеты.ПустаяСсылка(), ВопросРодитель);
		СпрОбъект.Подсказка = СтрокаДерева.Подсказка;
		СпрОбъект.СпособОтображенияПодсказки = СтрокаДерева.СпособОтображенияПодсказки;
			
		Если ТипЗнч(СтрокаДерева.ВопросДляСобеседования) = Тип("СправочникСсылка.ВопросыДляСобеседования") Тогда
			
			Если СтрокаДерева.ВопросДляСобеседования.ТипВопроса = Перечисления.ТипыВопросовПоМетодуСИвановой.Мотивация Тогда
				
				СпрОбъект.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Комплексный;
				СпрОбъект.Подсказка = НСтр("ru = 'Ответ вводить через кнопку ""Мотивация""'");
				Если ЗначениеЗаполнено(СтрокаДерева.ВопросДляСобеседования.Подсказка) Тогда
					СпрОбъект.Подсказка = СтрокаДерева.ВопросДляСобеседования.Подсказка + "
										  |" + СпрОбъект.Подсказка;
				КонецЕсли;
				СоставВопросаПоМотивации = СоставВопросаПоМотивации();
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СоставВопросаПоМотивации, СпрОбъект.СоставКомплексногоВопроса);
				
			Иначе
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВопросДляСобеседования", СтрокаДерева.ВопросДляСобеседования);
				СтруктураОтбора.Вставить("Уровень", 1);
				СоставКомплексногоВопроса = Параметры.Ответы.Скопировать(СтруктураОтбора, "ЭлементарныйВопрос");
				СоставКомплексногоВопроса.Свернуть("ЭлементарныйВопрос");
				
				ДобавитьПроверкуОтказаОтвечать(СпрОбъект.СоставКомплексногоВопроса);
				
				Если СтрокаДерева.ВопросДляСобеседования.ТипВопроса = Перечисления.ТипыВопросовПоМетодуСИвановой.ТриПлюсаТриМинуса Тогда
					СпрОбъект.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Комплексный;
					СпрОбъект.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.Составной;
					// вопрос "плюс" и "минус" должен отображаться в анкетах всегда
					СоставТабличногоВопросаПоУмолчанию = СоставТабличногоВопроса();
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СоставТабличногоВопросаПоУмолчанию, СпрОбъект.СоставКомплексногоВопроса);
				Иначе
					СпрОбъект.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Комплексный;
				КонецЕсли;
				
				 ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СоставКомплексногоВопроса, СпрОбъект.СоставКомплексногоВопроса);

			КонецЕсли;
			
		Иначе	
			// Характеристика
			СпрОбъект.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Простой;
			СпрОбъект.ЭлементарныйВопрос = СтрокаДерева.ЭлементарныйВопрос;
		КонецЕсли;
		
	КонецЕсли;
	
	НужноИзменитьКод = Ложь;
	Если Код <> Неопределено Тогда
		Если СправочникРодитель <> Неопределено Тогда
			СпрОбъект.Код = Код;
		ИначеЕсли КодыРазделов <> Неопределено Тогда
			НужноИзменитьКод = Истина;
		КонецЕсли;
	КонецЕсли;
	СпрОбъект.Наименование = СтрокаДерева.Наименование;
	СпрОбъект.Формулировка = СтрокаДерева.Формулировка;
	СпрОбъект.Родитель     = ?(СправочникРодитель = Неопределено, Справочники.ВопросыШаблонаАнкеты.ПустаяСсылка(), СправочникРодитель);
	СпрОбъект.Владелец     = Параметры.ШаблонАнкеты;
	
	СпрОбъект.Записать();
	Если ЗначениеЗаполнено(СтрокаДерева.ВопросШаблона) И СоответствиеВопросов <> Неопределено Тогда
		СоответствиеВопросов.Вставить(СтрокаДерева.ВопросШаблона, СпрОбъект.Ссылка);
	КонецЕсли;
	СтрокаДерева.ВопросШаблона = СпрОбъект.Ссылка;
	Если НужноИзменитьКод Тогда
		КодыРазделов.Вставить(СпрОбъект.Ссылка, Код);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.ВопросДляСобеседования) Тогда
		Возврат СпрОбъект.Ссылка;
	КонецЕсли;
	
	// Запись настроек вопросов для собеседования
	НаборЗаписей = РегистрыСведений.НастройкаВопросовДляСобеседования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Параметры.Объект);
	Если ТипЗнч(СтрокаДерева.ВопросДляСобеседования) = Тип("СправочникСсылка.ВопросыДляСобеседования") Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВопросДляСобеседования", СтрокаДерева.ВопросДляСобеседования);
		СоставКомплексногоВопроса = Параметры.Ответы.Скопировать(СтруктураОтбора);
		НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(СтрокаДерева.ВопросДляСобеседования);
		ОбработатьСоставКомплексногоВопроса(СоставКомплексногоВопроса);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВопросДляСобеседования", Справочники.ВопросыДляСобеседования.ПустаяСсылка());
		СтруктураОтбора.Вставить("Характеристика", СтрокаДерева.ВопросДляСобеседования);
		СоставКомплексногоВопроса = Параметры.Ответы.Скопировать(СтруктураОтбора);
		НаборЗаписей.Отбор.ВопросДляСобеседования.Установить(Справочники.ВопросыДляСобеседования.ПустаяСсылка());
		НаборЗаписей.Отбор.ХарактеристикаПерсонала.Установить(СтрокаДерева.ВопросДляСобеседования);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СоставКомплексногоВопроса Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Параметры.Объект;
		Запись.ВопросДляСобеседования = СтрокаТаблицы.ВопросДляСобеседования;
		Запись.ЭлементарныйВопрос = СтрокаТаблицы.ЭлементарныйВопрос;
		Запись.ОтветНаВопрос = СтрокаТаблицы.ОтветНаВопрос;
		Запись.ХарактеристикаПерсонала = СтрокаТаблицы.Характеристика;
		Запись.ЗначениеХарактеристики = СтрокаТаблицы.Значение;
		Запись.Балл = СтрокаТаблицы.Балл;
		Запись.ЭлементарныйВопросВопросаДляСобеседования = СтрокаТаблицы.ЭлементарныйВопросВопросаДляСобеседования;
		Запись.ОтветНаВопросВопросаДляСобеседования = СтрокаТаблицы.ОтветНаВопросВопросаДляСобеседования;
		Запись.Подразделение = Параметры.Объект.Подразделение;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Если ТипЗнч(СтрокаДерева.ВопросДляСобеседования) = Тип("СправочникСсылка.ВопросыДляСобеседования") Тогда
		// Запись вопросов для собеседования шаблонов анкет
		Запись = РегистрыСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет.СоздатьМенеджерЗаписи();
		Запись.ВопросШаблонаАнкеты = СпрОбъект.Ссылка;
		Запись.ВопросДляСобеседования = СтрокаДерева.ВопросДляСобеседования;
		Запись.Записать();
	КонецЕсли;
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция СоставТабличногоВопроса()
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	ВозвращаемоеЗначение.Колонки.Добавить("ЭлементарныйВопрос");
	
	ФормулировкиВопросов = Новый Массив;
	
	Родитель = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию("3+/3-", Истина, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка());
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		РодительОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьГруппу();
		РодительОбъект.Наименование = "3+/3-";
		РодительОбъект.Записать();
		Родитель = РодительОбъект.Ссылка;
	КонецЕсли;
	
	ФормулировкиВопросов.Добавить("Плюсы");
	ФормулировкиВопросов.Добавить("Минусы");
		
	Для каждого Формулировка Из ФормулировкиВопросов Цикл
		Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(Формулировка, Истина, Родитель);
		Если Не ЗначениеЗаполнено(Вопрос) Тогда
			ВопросОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
			ВопросОбъект.Родитель = Родитель;
			ВопросОбъект.Наименование = Формулировка;
			ВопросОбъект.Формулировка = Формулировка;
			ВопросОбъект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка;
			ВопросОбъект.ТипЗначения = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150));
			ВопросОбъект.Длина = 150;
			ВопросОбъект.Записать();
			Вопрос = ВопросОбъект.Ссылка;
		КонецЕсли;
		НоваяСтрока = ВозвращаемоеЗначение.Добавить();
		НоваяСтрока.ЭлементарныйВопрос = Вопрос;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьСоставКомплексногоВопроса(СоставКомплексногоВопроса)
	
	УдалитьСтрокиУровня(СоставКомплексногоВопроса, 0);
	УдалитьСтрокиУровня(СоставКомплексногоВопроса, 1, Истина);
	УдалитьСтрокиУровня(СоставКомплексногоВопроса, 2, Истина);
	
КонецПроцедуры

Процедура УдалитьСтрокиУровня(Таблица, Уровень, СПроверкойВложенных = Ложь)
	
	Если СПроверкойВложенных Тогда
		
		МассивУдаления = Новый Массив;
		Для Каждого СтрокаТЗ Из Таблица Цикл
			Если СтрокаТЗ.Уровень <> Уровень Тогда 
				Продолжить;
			КонецЕсли;	
			СтруктураПоиска = Новый Структура(
				"ВопросДляСобеседования,
				|ЭлементарныйВопрос,
				|Уровень");
			Если Уровень = 2 Тогда
				СтруктураПоиска.Вставить("ОтветНаВопрос");
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			СтруктураПоиска.Уровень = Уровень+1;
			РезПоиска = Таблица.НайтиСтроки(СтруктураПоиска);
			Если РезПоиска.Количество()>0 Тогда
				МассивУдаления.Добавить(СтрокаТЗ);
			КонецЕсли; 
		КонецЦикла; 
			
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Уровень", Уровень);
		МассивУдаления = Таблица.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли; 
	
	Для Каждого ЭлМассива Из МассивУдаления Цикл
		Таблица.Удалить(ЭлМассива);
	КонецЦикла;
	
КонецПроцедуры 

Процедура ВыполнитьПересчетАнкет(МассивАнкет)
	
	Для Каждого Анкета Из МассивАнкет Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.ОтветыНаВопросыАнкет.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Анкета);
		НаборЗаписейРегистра.Прочитать();
		
		РассчитатьХарактеристикиФизЛиц(НаборЗаписейРегистра, Ложь, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаВопросовСобеседования(ДеревоРасшифровки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты,
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросДляСобеседования.ТипВопроса КАК ТипВопросаПоМетодуСИвановой
		|ИЗ
		|	РегистрСведений.ВопросыДляСобеседованияВопросовШаблоновАнкет КАК ВопросыДляСобеседованияВопросовШаблоновАнкет
		|ГДЕ
		|	ВопросыДляСобеседованияВопросовШаблоновАнкет.ВопросШаблонаАнкеты В(&ВопросШаблонаАнкеты)";
	
	Запрос.УстановитьПараметр("ВопросШаблонаАнкеты", ДеревоРасшифровки.Строки.ВыгрузитьКолонку("Вопрос"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаОтветов(Вакансия, ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
		|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
		|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
		|	ПРЕДСТАВЛЕНИЕ(ОтветыНаВопросыАнкет.ЭлементарныйВопрос) КАК ЭлементарныйВопросПредставление,
		|	ОтветыНаВопросыАнкет.НомерЯчейки КАК НомерЯчейки,
		|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
		|	ОтветыНаВопросыАнкет.ОткрытыйОтвет КАК ОткрытыйОтвет,
		|	АнкетыКандидатов.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
		|		ПО АнкетыКандидатов.Анкета = ОтветыНаВопросыАнкет.Анкета
		|ГДЕ
		|	(АнкетыКандидатов.ФизическоеЛицо = &ФизическоеЛицо
		|			ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
		|	И АнкетыКандидатов.Вакансия = &Вакансия";
	
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеАнкеты(Вакансия, ЭлементарныйВопрос, ХарактеристикаПерсонала, ЗначениеХарактеристики)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОтветовАнкет.Ссылка КАК Ответ,
		|	ВложенныйЗапрос.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ЕСТЬNULL(ВложенныйЗапрос.Балл, 0) КАК МаксимальныйБалл
		|ИЗ
		|	Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НастройкаВопросовДляСобеседования.Балл КАК Балл,
		|			НастройкаВопросовДляСобеседования.ОтветНаВопрос КАК ОтветНаВопрос,
		|			НастройкаВопросовДляСобеседования.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|		ИЗ
		|			РегистрСведений.НастройкаВопросовДляСобеседования КАК НастройкаВопросовДляСобеседования
		|		ГДЕ
		|			НастройкаВопросовДляСобеседования.ХарактеристикаПерсонала = &ХарактеристикаПерсонала
		|			И НастройкаВопросовДляСобеседования.Объект = &Объект
		|			И (НастройкаВопросовДляСобеседования.ЗначениеХарактеристики = &ЗначениеХарактеристики ИЛИ &ЗначениеХарактеристики = Неопределено)) КАК ВложенныйЗапрос
		|		ПО ВариантыОтветовАнкет.Ссылка = ВложенныйЗапрос.ОтветНаВопрос
		|ГДЕ
		|	ВариантыОтветовАнкет.Владелец = &Владелец
		|	И НЕ ВариантыОтветовАнкет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", ЭлементарныйВопрос);
	Запрос.УстановитьПараметр("ХарактеристикаПерсонала", ХарактеристикаПерсонала);
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеХарактеристики);
	Запрос.УстановитьПараметр("Объект", Вакансия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Процедура ПерезаполнитьАнкеты(Параметры, МассивАнкет, СоответствиеВопросов)
	
	СтарыеОтветы = Параметры.Ответы.Скопировать();
	Для Каждого Анкета Из МассивАнкет Цикл
		Если Анкета.Состав.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеСтроки = Новый Массив;
		АнкетаОбъект = Анкета.ПолучитьОбъект();
		Для Каждого ТекущаяСтрока Из АнкетаОбъект.Состав Цикл
			НовыйВопрос = СоответствиеВопросов.Получить(ТекущаяСтрока.Вопрос);
			Если ЗначениеЗаполнено(НовыйВопрос) Тогда
				ТекущаяСтрока.Вопрос = НовыйВопрос;
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СтарыйЭлементарныйВопрос", ТекущаяСтрока.ЭлементарныйВопрос);
				СтруктураПоиска.Вставить("СтарыйОтветНаВопрос", ТекущаяСтрока.Ответ);
				СтрокиЗамены = СтарыеОтветы.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЗамены.Количество() > 0 Тогда
					ТекущаяСтрока.ЭлементарныйВопрос = СтрокиЗамены[0].ЭлементарныйВопрос;
					ТекущаяСтрока.Ответ = СтрокиЗамены[0].ОтветНаВопрос;
				КонецЕсли;
			Иначе
				УдаляемыеСтроки.Добавить(ТекущаяСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АнкетаОбъект.Состав.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		АнкетаОбъект.ОбменДанными.Загрузка = Истина;
		АнкетаОбъект.Записать();
		
		Если АнкетаОбъект.Проведен Тогда
			ПерезаполнитьОтветы(АнкетаОбъект);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерезаполнитьОтветы(Анкета)
	
	УстановитьПривилегированныйРежим(Истина);
	ОтветыНаВопросыАнкет = Анкета.Движения.ОтветыНаВопросыАнкет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаСостав.Вопрос,
		|	ТаблицаСостав.ЭлементарныйВопрос,
		|	ТаблицаСостав.НомерЯчейки,
		|	ТаблицаСостав.Ответ,
		|	ТаблицаСостав.ОткрытыйОтвет,
		|	ТаблицаСостав.НомерСтроки
		|ПОМЕСТИТЬ Состав
		|ИЗ
		|	&ТаблицаСостав КАК ТаблицаСостав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Состав.Вопрос,
		|	Состав.ЭлементарныйВопрос,
		|	Состав.НомерЯчейки,
		|	Состав.Ответ,
		|	Состав.ОткрытыйОтвет,
		|	ИСТИНА КАК Активность,
		|	&Ссылка КАК Регистратор,
		|	&Ссылка КАК Анкета,
		|	Состав.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Состав КАК Состав";
	
	Запрос.УстановитьПараметр("ТаблицаСостав", Анкета.Состав);
	Запрос.УстановитьПараметр("Ссылка", Анкета.Ссылка);
	
	ОтветыНаВопросыАнкет.Загрузить(Запрос.Выполнить().Выгрузить());
	ОтветыНаВопросыАнкет.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьМотивирующиеФразыВОтчет(ТаблицаОтчета, ТаблицаИтогов, Вакансия, ФизЛица, Макет, ОбластьШапкиСтраниц)
	
	ОбластьМотивационныеФразыЗаголовок = Макет.ПолучитьОбласть("МотивирующиеФразыЗаголовок|КолонкиФормулировка");
	ОбластьМотивационныеФразыЗаголовокБаллы = Макет.ПолучитьОбласть("МотивирующиеФразыЗаголовок|Балл");
	Заголовок = Новый ТабличныйДокумент;
	Заголовок.Вывести(ОбластьМотивационныеФразыЗаголовок);	
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Заголовок.Присоединить(ОбластьМотивационныеФразыЗаголовокБаллы);
	КонецЦикла;
	ОбластьЗаголовка = Заголовок.Область(1, 1, 1, ТаблицаИтогов.Количество() + 11);
	ОбластьЗаголовка.Объединить();
	Заголовок.НачатьГруппуСтрок();
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоМотивацииВАнкетахДополнительно.МотивирующаяФраза КАК МотивирующаяФраза,
		|	АнкетыКандидатов.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПоМотивацииВАнкетахДополнительно КАК ДанныеПоМотивацииВАнкетахДополнительно
		|		ПО АнкетыКандидатов.Анкета = ДанныеПоМотивацииВАнкетахДополнительно.Анкета
		|ГДЕ
		|	АнкетыКандидатов.Вакансия = &Вакансия
		|	И (АнкетыКандидатов.ФизическоеЛицо В(&ФизическиеЛица))";
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизЛица);
	ТаблицаФраз = Запрос.Выполнить().Выгрузить();
	ОбластьМотивационныеФразы = Макет.ПолучитьОбласть("МотивирующаяФразаСтрока|КолонкиФормулировка");
	ОбластьМотивационныеФразыРезультат = Макет.ПолучитьОбласть("МотивирующаяФразаСтрока|Балл");
	Заголовок.Вывести(ОбластьМотивационныеФразы);
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо);;
		СтрокиФраз = ТаблицаФраз.НайтиСтроки(СтруктураПоиска);
		Фраза = "";
		Для Каждого СтрокаФразы Из СтрокиФраз Цикл
			Фраза = Фраза + ?(ЗначениеЗаполнено(Фраза), Символы.ПС, "") + СтрокаФразы.МотивирующаяФраза;
		КонецЦикла;
		ОбластьМотивационныеФразыРезультат.Параметры.Фраза = Фраза;
		Заголовок.Присоединить(ОбластьМотивационныеФразыРезультат);
	КонецЦикла;
	Заголовок.ЗакончитьГруппуСтрок();
	Если Не ТаблицаОтчета.ПроверитьВывод(Заголовок) Тогда
		ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
		ТаблицаОтчета.Вывести(ОбластьШапкиСтраниц);
	КонецЕсли;
	ТаблицаОтчета.Вывести(Заголовок);
	
КонецПроцедуры

Процедура ДобавитьМотиваторыВОтчет(ТаблицаОтчета, ТаблицаИтогов, Вакансия, ФизЛица, Макет, ОбластьШапкиСтраниц)
	
	СписокМотиваторов = Новый Массив;
	СписокДемотиваторов = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МотиваторыВАнкетах.Мотиватор КАК Мотиватор,
		|	МотиваторыВАнкетах.Количество КАК Количество,
		|	МотиваторыВАнкетах.Комментарий КАК Комментарий,
		|	ВЫБОР
		|		КОГДА МотиваторыВАнкетах.Мотиватор ССЫЛКА Справочник.Мотиваторы
		|			ТОГДА ""Мотиватор""
		|		ИНАЧЕ ""Демотиватор""
		|	КОНЕЦ КАК Группа,
		|	АнкетыКандидатов.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.АнкетыКандидатов КАК АнкетыКандидатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МотиваторыВАнкетах КАК МотиваторыВАнкетах
		|		ПО АнкетыКандидатов.Анкета = МотиваторыВАнкетах.Анкета
		|ГДЕ
		|	АнкетыКандидатов.Вакансия = &Вакансия
		|	И (АнкетыКандидатов.ФизическоеЛицо В(&ФизическиеЛица))";
	Запрос.УстановитьПараметр("Вакансия", Вакансия);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизЛица);
	ТаблицаМотиваторов = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из ТаблицаМотиваторов Цикл
		Если ТекущаяСтрока.Группа = "Мотиватор" И СписокМотиваторов.Найти(ТекущаяСтрока.Мотиватор) = Неопределено Тогда
			СписокМотиваторов.Добавить(ТекущаяСтрока.Мотиватор);
		ИначеЕсли ТекущаяСтрока.Группа = "Демотиватор" И СписокДемотиваторов.Найти(ТекущаяСтрока.Мотиватор) = Неопределено Тогда
			СписокДемотиваторов.Добавить(ТекущаяСтрока.Мотиватор);
		КонецЕсли;
	КонецЦикла;
	ОбластьМотиваторыЗаголовок = Макет.ПолучитьОбласть("МотиваторыЗаголовок|КолонкиФормулировка");
	ОбластьМотиваторыЗаголовокБаллы = Макет.ПолучитьОбласть("МотиваторыЗаголовок|Балл");
	Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьМотиваторыЗаголовок) Тогда
		ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
		ТаблицаОтчета.Вывести(ОбластьШапкиСтраниц);
	КонецЕсли;
	Заголовок = Новый ТабличныйДокумент;
	Заголовок.Вывести(ОбластьМотиваторыЗаголовок);
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Заголовок.Присоединить(ОбластьМотиваторыЗаголовокБаллы);
	КонецЦикла;
	ОбластьЗаголовка = Заголовок.Область(1, 1, 1, ТаблицаИтогов.Количество() + 11);
	ОбластьЗаголовка.Объединить();
	ТаблицаОтчета.Вывести(Заголовок);
	ТаблицаОтчета.НачатьГруппуСтрок();
	ОбластьМотиваторы = Макет.ПолучитьОбласть("МотиваторыСтрока|КолонкиФормулировка");
	ОбластьМотиваторыОценка = Макет.ПолучитьОбласть("МотиваторыСтрока|Балл");
	Для Каждого Мотиватор Из СписокМотиваторов Цикл
		ОбластьМотиватора = Новый ТабличныйДокумент;
		ОбластьМотиваторы.Параметры.Мотиватор = Мотиватор;
		ОбластьМотиватора.Вывести(ОбластьМотиваторы);
		Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо);
			СтруктураПоиска.Вставить("Мотиватор", Мотиватор);
			СтрокиПоФизЛицу = ТаблицаМотиваторов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоФизЛицу.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМотиваторыОценка.Параметры, СтрокиПоФизЛицу[0]);
			Иначе
				ОбластьМотиваторыОценка.Параметры.Количество = 0;
				ОбластьМотиваторыОценка.Параметры.Комментарий = "";
			КонецЕсли;
			ОбластьМотиватора.Присоединить(ОбластьМотиваторыОценка);
		КонецЦикла;
		Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьМотиватора) Тогда
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
			ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
			ТаблицаОтчета.Вывести(ОбластьШапкиСтраниц);
			ТаблицаОтчета.Вывести(Заголовок);
			ТаблицаОтчета.НачатьГруппуСтрок();
		КонецЕсли;
		ТаблицаОтчета.Вывести(ОбластьМотиватора);
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	ОбластьДемотиваторыЗаголовок = Макет.ПолучитьОбласть("ДемотиваторыЗаголовок|КолонкиФормулировка");
	ОбластьДемотиваторыЗаголовокБаллы = Макет.ПолучитьОбласть("ДемотиваторыЗаголовок|Балл");
	Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьДемотиваторыЗаголовок) Тогда
		ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
		ТаблицаОтчета.Вывести(ОбластьШапкиСтраниц);
	КонецЕсли;
	Заголовок = Новый ТабличныйДокумент;
	Заголовок.Вывести(ОбластьДемотиваторыЗаголовок);
	Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
		Заголовок.Присоединить(ОбластьДемотиваторыЗаголовокБаллы);
	КонецЦикла;
	ОбластьЗаголовка = Заголовок.Область(1, 1, 1, ТаблицаИтогов.Количество() + 11);
	ОбластьЗаголовка.Объединить();
	ТаблицаОтчета.Вывести(Заголовок);
	ТаблицаОтчета.НачатьГруппуСтрок();
	ОбластьДемотиваторы = Макет.ПолучитьОбласть("МотиваторыСтрока|КолонкиФормулировка");
	ОбластьДемотиваторыОценка = Макет.ПолучитьОбласть("МотиваторыСтрока|Балл");
	Для Каждого Демотиватор Из СписокДемотиваторов Цикл
		ОбластьДемотиватора = Новый ТабличныйДокумент;
		ОбластьДемотиваторы.Параметры.Мотиватор = Демотиватор;
		ОбластьДемотиватора.Вывести(ОбластьДемотиваторы);
		Для Каждого ТекущаяСтрока Из ТаблицаИтогов Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ФизическоеЛицо", ТекущаяСтрока.ФизическоеЛицо);
			СтруктураПоиска.Вставить("Мотиватор", Демотиватор);
			СтрокиПоФизЛицу = ТаблицаМотиваторов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоФизЛицу.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ОбластьДемотиваторыОценка.Параметры, СтрокиПоФизЛицу[0]);
			Иначе
				ОбластьДемотиваторыОценка.Параметры.Количество = 0;
				ОбластьДемотиваторыОценка.Параметры.Комментарий = "";
			КонецЕсли;
			ОбластьДемотиватора.Присоединить(ОбластьДемотиваторыОценка);
		КонецЦикла;
		Если Не ТаблицаОтчета.ПроверитьВывод(ОбластьДемотиватора) Тогда
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
			ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
			ТаблицаОтчета.Вывести(ОбластьШапкиСтраниц);
			ТаблицаОтчета.Вывести(Заголовок);
			ТаблицаОтчета.НачатьГруппуСтрок();
		КонецЕсли;
		ТаблицаОтчета.Вывести(ОбластьДемотиватора);
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();	
	
КонецПроцедуры

Процедура ДобавитьПроверкуОтказаОтвечать(СоставКомплексногоВопроса)
	
	СлужебныеВопросыСтрока = НСтр("ru = 'Служебные вопросы'");
	Родитель = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(СлужебныеВопросыСтрока, Истина, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка());
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		РодительОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьГруппу();
		РодительОбъект.Наименование = СлужебныеВопросыСтрока;
		РодительОбъект.Записать();
		Родитель = РодительОбъект.Ссылка;
	КонецЕсли;
	
	ОтказалсяОтвечатьСтрока = НСтр("ru = 'Отказался отвечать'");
	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(ОтказалсяОтвечатьСтрока, Истина, Родитель);
	Если Не ЗначениеЗаполнено(Вопрос) Тогда
		ВопросОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
		ВопросОбъект.Родитель = Родитель;
		ВопросОбъект.Наименование = ОтказалсяОтвечатьСтрока;
		ВопросОбъект.Формулировка = "";
		ВопросОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВариантыОтветовАнкет");
		ВопросОбъект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево;
		ВопросОбъект.ВидФлажка = Перечисления.ВидыФлажкаВАнкетах.Флажок;
		ВопросОбъект.Записать();
		Вопрос = ВопросОбъект.Ссылка;
	КонецЕсли;
	НоваяСтрока = СоставКомплексногоВопроса.Добавить();
	НоваяСтрока.ЭлементарныйВопрос = Вопрос;	
	
КонецПроцедуры

Функция СоставВопросаПоМотивации()
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	ВозвращаемоеЗначение.Колонки.Добавить("ЭлементарныйВопрос");
	
	ФормулировкиВопросов = Новый Массив;
	
	НаименованиеВопроса = НСтр("ru = 'Мотивация'");
	Родитель = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(НаименованиеВопроса, Истина, ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПустаяСсылка());
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		РодительОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьГруппу();
		РодительОбъект.Наименование = НаименованиеВопроса;
		РодительОбъект.Записать();
		Родитель = РодительОбъект.Ссылка;
	КонецЕсли;
	
	НаименованиеВопроса = НСтр("ru = 'Ответ получен'");
	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(НаименованиеВопроса, Истина, Родитель);
	Если Не ЗначениеЗаполнено(Вопрос) Тогда
		ВопросОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
		ВопросОбъект.Родитель = Родитель;
		ВопросОбъект.Наименование = НаименованиеВопроса;
		ВопросОбъект.Формулировка = НаименованиеВопроса;
		ВопросОбъект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево;
		ВопросОбъект.ВидФлажка = Перечисления.ВидыФлажкаВАнкетах.Флажок;
		ВопросОбъект.Записать();
		Вопрос = ВопросОбъект.Ссылка;
	КонецЕсли;
	НоваяСтрока = ВозвращаемоеЗначение.Добавить();
	НоваяСтрока.ЭлементарныйВопрос = Вопрос;
	
	НаименованиеВопроса = НСтр("ru = 'Заметки по вопросу'");
	Вопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоНаименованию(НаименованиеВопроса, Истина, Родитель);
	Если Не ЗначениеЗаполнено(Вопрос) Тогда
		ВопросОбъект = ПланыВидовХарактеристик.ВопросыДляАнкетирования.СоздатьЭлемент();
		ВопросОбъект.Родитель = Родитель;
		ВопросОбъект.Наименование = НаименованиеВопроса;
		ВопросОбъект.Формулировка = НаименованиеВопроса;
		ВопросОбъект.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст;
		ВопросОбъект.Записать();
		Вопрос = ВопросОбъект.Ссылка;
	КонецЕсли;
	НоваяСтрока = ВозвращаемоеЗначение.Добавить();
	НоваяСтрока.ЭлементарныйВопрос = Вопрос;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.77";
	Обработчик.Процедура = "Справочники.Мотиваторы.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.81";
	Обработчик.Процедура = "РегистрыСведений.АнкетыКандидатов.ЗаполнитьФизическоеЛицо";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b903d968-dfc2-43fc-92b3-5a6e3783a0a6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных объектов электронного интервью.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.81";
	Обработчик.Процедура = "РегистрыСведений.НастройкаВопросовДляСобеседования.ЗаполнитьПодразделение";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("de3ca329-7948-4cb0-b44d-6843cac4adb6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных объектов электронного интервью.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.81";
	Обработчик.Процедура = "РегистрыСведений.ОценкиКандидатовПоХарактеристикам.ЗаполнитьФизическоеЛицо";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("851ee13e-26e6-443b-be3f-18dd34c0b122");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение вторичных данных объектов электронного интервью.'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
