
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет движения условиями удержания по исполнительному документу.
//
// Параметры:
//	Движения
//	ДатаДействия
//	ИсполнительныйДокумент
//	УсловияИсполнительногоЛиста - структура с полями
//		СпособРасчета
//		ВидБазы.
//		Процент
//		Сумма
//		Числитель
//		Знаменатель
//		ПрожиточныйМинимум
//		Предел
//		УчитыватьБольничныеЛисты
//		ПлатежныйАгент
//		ТарифПлатежногоАгента
//
Процедура ЗарегистрироватьУсловияИсполнительногоЛиста(Движения, ДатаДействия, ИсполнительныйДокумент, УсловияИсполнительногоЛиста) Экспорт
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсполнительныйДокумент, "ФизическоеЛицо,Организация");
	
	// Условия удержания
	НоваяСтрока = Движения.УсловияУдержанияПоИсполнительномуДокументу.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловияИсполнительногоЛиста);
	НоваяСтрока.Период = ДатаДействия;
	НоваяСтрока.ИсполнительныйДокумент = ИсполнительныйДокумент;
	НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
	НоваяСтрока.Организация = ДанныеДокумента.Организация;
	
	Движения.УсловияУдержанияПоИсполнительномуДокументу.Записывать = Истина;
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Исполнительный лист».
//
Процедура РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл		
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;	
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.БазовыйПериодНачало КАК Период,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	СоздатьВТОсталосьУдержатьПоДокументам(МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	ЕСТЬNULL(ОсталосьУдержатьПоДокументам.Остаток, 0) КАК Остаток,
		|	УсловияУдержания.СпособРасчета,
		|	УсловияУдержания.ВидБазы,
		|	УсловияУдержания.Процент,
		|	УсловияУдержания.Сумма,
		|	УсловияУдержания.Числитель,
		|	УсловияУдержания.Знаменатель,
		|	УсловияУдержания.Предел,
		|	УсловияУдержания.ПрожиточныйМинимум,
		|	УсловияУдержания.УчитыватьБольничныеЛисты,
		|	УсловияУдержания.ПлатежныйАгент,
		|	УсловияУдержания.Получатель,
		|	УсловияУдержания.ВеличинаПрожиточногоМинимума
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержания
		|		ПО (УсловияУдержания.ИсполнительныйДокумент = ДанныеДляРасчета.ИсполнительныйДокумент)
		|			И (УсловияУдержания.Период = ДанныеДляРасчета.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсталосьУдержатьПоДокументам КАК ОсталосьУдержатьПоДокументам
		|		ПО (УсловияУдержания.ИсполнительныйДокумент = ОсталосьУдержатьПоДокументам.ДокументОснование)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	КатегорииБольничного = ПланыВидовРасчета.Начисления.КатегорииОплатыБольничного();
	ПоказательРасчетнаяБазаИсполнительногоЛиста = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	ПоказательИсчисленныйПоИсполнительномуЛистуНДФЛ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ИсчисленныйПоИсполнительномуЛистуНДФЛ");
	
	ПогашениеЗадолженности = Обработки.МенеджерРасчетаЗарплаты.ОснованияПогашенияЗадолженности(МенеджерВременныхТаблиц);
	
	Пока Выборка.СледующийПоЗначениюПоля("ИсполнительныйДокумент") Цикл
		ОстатокПоДокументу = Выборка.Остаток;
		ТолькоЗадолженность = ПогашениеЗадолженности.Найти(Выборка.ИсполнительныйДокумент) <> Неопределено;
		Пока Выборка.Следующий() Цикл
			Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			Если Строка.ФиксЗаполнение Тогда 
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБазаИсполнительногоЛиста");
				РасчетнаяБазаИсполнительногоЛиста = СтрокаПоказателя.Значение;
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "ИсчисленныйПоИсполнительномуЛистуНДФЛ");
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = СтрокаПоказателя.Значение;
			ИначеЕсли ТолькоЗадолженность Тогда 
				РасчетнаяБазаИсполнительногоЛиста = 0;
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
			Иначе 
				РасчетнаяБазаИсполнительногоЛиста = Строка.Дополнительно.СуммаДополнения;
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = Строка.Дополнительно.СуммаНДФЛ;
				Для Каждого СтрокаРасшифровки Из Строка.Дополнительно.РасшифровкаРасчетнойБазы Цикл
					РасчетнаяБазаИсполнительногоЛиста = РасчетнаяБазаИсполнительногоЛиста + СтрокаРасшифровки.Сумма + СтрокаРасшифровки.СуммаДополнения;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = ИсчисленныйПоИсполнительномуЛистуНДФЛ + СтрокаРасшифровки.СуммаНДФЛ;
					Если Не Выборка.УчитыватьБольничныеЛисты И КатегорииБольничного.Найти(СтрокаРасшифровки.КатегорияБазовогоНачисления) <> Неопределено Тогда
						// Больничный не учитывается, исключаем его сумму и долю пришедшегося на него НДФЛ, но дополнение оставляем.
						РасчетнаяБазаИсполнительногоЛиста = РасчетнаяБазаИсполнительногоЛиста - СтрокаРасшифровки.Сумма;
						ИсчисленныйПоИсполнительномуЛистуНДФЛ = ИсчисленныйПоИсполнительномуЛистуНДФЛ - СтрокаРасшифровки.СуммаНДФЛ;
					КонецЕсли;
				КонецЦикла;
				Если Выборка.ВидБазы = Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум Тогда
					// Расчетная база по данным прожиточного минимума.
					РасчетнаяБазаИсполнительногоЛиста = Выборка.ВеличинаПрожиточногоМинимума;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
				КонецЕсли;
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
					// Показатели не используются.
					РасчетнаяБазаИсполнительногоЛиста = 0;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
				КонецЕсли;
				// Расчетная база
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБазаИсполнительногоЛиста");
				Если СтрокаПоказателя = Неопределено Тогда 
					СтрокаПоказателя = Строка.Показатели.Добавить();
					СтрокаПоказателя.Показатель = ПоказательРасчетнаяБазаИсполнительногоЛиста;
				КонецЕсли;
				СтрокаПоказателя.Значение = РасчетнаяБазаИсполнительногоЛиста;
				// НДФЛ
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "ИсчисленныйПоИсполнительномуЛистуНДФЛ");
				Если СтрокаПоказателя = Неопределено Тогда 
					СтрокаПоказателя = Строка.Показатели.Добавить();
					СтрокаПоказателя.Показатель = ПоказательИсчисленныйПоИсполнительномуЛистуНДФЛ;
				КонецЕсли;
				СтрокаПоказателя.Значение = ИсчисленныйПоИсполнительномуЛистуНДФЛ;
			КонецЕсли;
			РасчетнаяБаза = РасчетнаяБазаИсполнительногоЛиста - ИсчисленныйПоИсполнительномуЛистуНДФЛ;
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
				Строка.Результат = Выборка.Сумма;
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
				Строка.Результат = РасчетнаяБаза * Выборка.Процент / 100;
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
				Строка.Результат = РасчетнаяБаза * Выборка.Числитель / Выборка.Знаменатель;
			КонецЕсли;
			// Если установлен предел удержания, то ограничиваем сумму.
			Если Выборка.Предел > 0 Тогда
				Строка.Результат = Мин(ОстатокПоДокументу, Строка.Результат);
				ОстатокПоДокументу = ОстатокПоДокументу - Строка.Результат;
			КонецЕсли;
			// Если исполнительный лист добавлен только для погашения задолженности - обнуляем результат.
			Если ТолькоЗадолженность Тогда
				Строка.Результат = 0;
			КонецЕсли;
			Строка.Результат = Строка.Результат + Строка.Задолженность;
			Строка.Получатель = Выборка.Получатель;
			Строка.ЗаписьРасчета.Получатель = Выборка.Получатель;
			Строка.ПлатежныйАгент = Выборка.ПлатежныйАгент;
			Строка.ЗаписьРасчета.ПлатежныйАгент = Выборка.ПлатежныйАгент;
		КонецЦикла;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Заполняет набор записей регистра УдержанийПоИсполнительнымДокументам при расчете для того, 
// чтобы учесть результаты расчета удержаний по исполнительным документам при расчете вознаграждения платежным агентам.
//
Процедура ЗарегистрироватьРасчетУдержанийПоИсполнительнымДокументам(ОчередностьРасчета, НаборыЗаписей, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.Получатель,
		|	Удержания.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания,
		|	СУММА(Удержания.Результат) КАК СуммаУдержания
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержаний.ИсполнительныйЛист)
		|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.Получатель,
		|	Удержания.ДокументОснование,
		|	Удержания.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	СУММА(Удержания.Результат) <> 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УдержанияПоДокументам = ПустаяТаблицаУдержанияПоДокументам();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(УдержанияПоДокументам.Добавить(), Выборка);
	КонецЦикла;
	
	СформироватьУдержанияПоИсполнительнымДокументам(НаборыЗаписей, УдержанияПоДокументам);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.УдержанияПоИсполнительнымДокументам);
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Вознаграждение платежного агента».
//
Процедура РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ВознаграждениеПлатежногоАгента Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл		
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;	
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.БазовыйПериодНачало КАК Период,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.БазовыйПериодКонец,
		|	Удержания.Получатель,
		|	Удержания.ПлатежныйАгент
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.БазовыйПериодНачало) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.БазовыйПериодКонец) КАК ОкончаниеПериода
		|ИЗ
		|	ВТДанныеДляРасчета КАК Удержания";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	УсловияУдержания.Получатель,
		|	УсловияУдержания.ПлатежныйАгент
		|ПОМЕСТИТЬ ВТФильтрУдержаний
		|ИЗ
		|	ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО УсловияУдержания.ИсполнительныйДокумент = ДанныеДляРасчета.ИсполнительныйДокумент
		|			И УсловияУдержания.Период = ДанныеДляРасчета.Период";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрУдержаний");
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.УдержанияПоИсполнительнымДокументам");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("Регистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ) КАК Месяц,
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.Получатель КАК Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент КАК ПлатежныйАгент,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаУдержанияОборот) КАК СуммаУдержанияОборот,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаВознагражденияПлатежногоАгентаОборот) КАК СуммаВознагражденияПлатежногоАгентаОборот
		|ПОМЕСТИТЬ ВТСуммыУдержаний
		|ИЗ
		|	(ВЫБРАТЬ
		|		УдержанияОбороты.Период КАК Период,
		|		УдержанияОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|		УдержанияОбороты.Получатель КАК Получатель,
		|		УдержанияОбороты.ПлатежныйАгент КАК ПлатежныйАгент,
		|		УдержанияОбороты.СуммаУдержания КАК СуммаУдержанияОборот,
		|		УдержанияОбороты.СуммаВознагражденияПлатежногоАгента КАК СуммаВознагражденияПлатежногоАгентаОборот
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияОбороты
		|	ГДЕ
		|		УдержанияОбороты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (УдержанияОбороты.ФизическоеЛицо, УдержанияОбороты.Получатель, УдержанияОбороты.ПлатежныйАгент) В
		|				(ВЫБРАТЬ
		|					Условия.ФизическоеЛицо,
		|					Условия.Получатель,
		|					Условия.ПлатежныйАгент
		|				ИЗ
		|					ВТФильтрУдержаний КАК Условия)
		|		И УдержанияОбороты.Регистратор <> &Регистратор
		|		И НЕ УдержанияОбороты.ОграничениеВзыскания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияОбороты.Период,
		|		УдержанияОбороты.ФизическоеЛицо,
		|		УдержанияОбороты.Получатель,
		|		УдержанияОбороты.ПлатежныйАгент,
		|		УдержанияОбороты.СуммаУдержания,
		|		УдержанияОбороты.СуммаВознагражденияПлатежногоАгента
		|	ИЗ
		|		ВТРегистрНакопления_УдержанияПоИсполнительнымДокументам КАК УдержанияОбороты
		|	ГДЕ
		|		УдержанияОбороты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (УдержанияОбороты.ФизическоеЛицо, УдержанияОбороты.Получатель, УдержанияОбороты.ПлатежныйАгент) В
		|				(ВЫБРАТЬ
		|					Условия.ФизическоеЛицо,
		|					Условия.Получатель,
		|					Условия.ПлатежныйАгент
		|				ИЗ
		|					ВТФильтрУдержаний КАК Условия)) КАК УдержанияПоИсполнительнымДокументам
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСуммыУдержаний");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ПрименяемыеТарифы.Получатель КАК Получатель,
		|	ПрименяемыеТарифы.ПлатежныйАгент КАК ПлатежныйАгент,
		|	ПрименяемыеТарифы.Период КАК Период,
		|	СуммыУдержаний.СуммаУдержанияОборот,
		|	ШкалаТарифа.Ссылка КАК Тариф,
		|	ВЫБОР
		|		КОГДА ШкалаТарифа.Порог = 0
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПорога,
		|	ШкалаТарифа.Порог КАК Порог,
		|	ШкалаТарифа.Процент,
		|	ШкалаТарифа.Сумма,
		|	ШкалаТарифа.МинимальнаяСумма,
		|	ШкалаТарифа.МаксимальнаяСумма
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК ПрименяемыеТарифы
		|		ПО ДанныеДляРасчета.ИсполнительныйДокумент = ПрименяемыеТарифы.ИсполнительныйДокумент
		|			И ДанныеДляРасчета.Период = ПрименяемыеТарифы.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифыПлатежныхАгентов.Шкала КАК ШкалаТарифа
		|		ПО (ПрименяемыеТарифы.ТарифПлатежногоАгента = ШкалаТарифа.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыУдержаний КАК СуммыУдержаний
		|		ПО (СуммыУдержаний.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
		|			И (СуммыУдержаний.Получатель = ПрименяемыеТарифы.Получатель)
		|			И (СуммыУдержаний.ПлатежныйАгент = ПрименяемыеТарифы.ПлатежныйАгент)
		|			И (СуммыУдержаний.Месяц = НАЧАЛОПЕРИОДА(ДанныеДляРасчета.Период, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Получатель,
		|	ПлатежныйАгент,
		|	Период,
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	Тариф,
		|	ПриоритетПорога,
		|	Порог";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ПлатежныйАгент") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
					ИсполнительныйДокумент = Неопределено;
					Пока Выборка.СледующийПоЗначениюПоля("ИсполнительныйДокумент") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
							Если ИсполнительныйДокумент <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
							Тариф = Неопределено;
							Пока Выборка.Следующий() Цикл
								Тариф = Новый Структура("Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма");
								ЗаполнитьЗначенияСвойств(Тариф, Выборка);
								Если Выборка.СуммаУдержанияОборот <= Выборка.Порог Или Выборка.Порог = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Тариф = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							Строка.Получатель = Выборка.Получатель;
							Строка.ПлатежныйАгент = Выборка.ПлатежныйАгент;
							Строка.Результат = РазмерВознагражденияПлатежногоАгента(
								Выборка.СуммаУдержанияОборот, Тариф.Процент, Тариф.Сумма, Тариф.МинимальнаяСумма, Тариф.МаксимальнаяСумма);
						КонецЦикла;
						ИсполнительныйДокумент = Выборка.ИсполнительныйДокумент;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Удержания - таблица значений с колонками
//			ИсполнительныйДокумент.
//			Получатель
//			ПлатежныйАгент
//			МесяцУдержания
//			СуммаУдержания
//			СуммаВознагражденияПлатежногоАгента.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьУдержанияПоИсполнительнымДокументам(Движения, Удержания, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Суммы в строках, где не заполнен исполнительный документ (это вознаграждения агента), 
	// распределяем пропорционально по получателю и платежному агенту.
	
	РаспределяемыеСуммы = Новый ТаблицаЗначений;
	РаспределяемыеСуммы.Колонки.Добавить("Получатель");
	РаспределяемыеСуммы.Колонки.Добавить("ПлатежныйАгент");
	РаспределяемыеСуммы.Колонки.Добавить("Сумма");
	
	ОтборСтрок = Новый Структура("Получатель, ПлатежныйАгент");
	
	// Переносим строки вознаграждения в таблицу распределяемых сумм.
	ИсполнительныеДокументы = Новый Массив;
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из Удержания Цикл
		Если ЗначениеЗаполнено(Строка.ИсполнительныйДокумент) Тогда
			ИсполнительныеДокументы.Добавить(Строка.ИсполнительныйДокумент);
		Иначе
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
			НайденныеСтроки = Удержания.НайтиСтроки(ОтборСтрок);
			Если Строка.СуммаВознагражденияПлатежногоАгента <> 0 Тогда
				Суммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
					Строка.СуммаВознагражденияПлатежногоАгента,
					ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "СуммаУдержания"));
				Индекс = 0;	
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента = НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента + Суммы[Индекс];
					Индекс = Индекс + 1;	
				КонецЦикла;
			КонецЕсли;
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем строки с не заполненным документом, эти суммы мы распределим по оставшимся строкам.
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Удержания.Удалить(Строка);
	КонецЦикла;
	
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ИсполнительныеДокументы, "ФизическоеЛицо, Организация");
	
	Для Каждого Строка Из Удержания Цикл
		ДанныеДокумента = ДанныеДокументов[Строка.ИсполнительныйДокумент];
		НоваяСтрока = Движения.УдержанияПоИсполнительнымДокументам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период = Строка.МесяцУдержания;
		НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
		НоваяСтрока.Организация = ДанныеДокумента.Организация;
	КонецЦикла;
	Движения.УдержанияПоИсполнительнымДокументам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		Движения.УдержанияПоИсполнительнымДокументам.Записать();
		Движения.УдержанияПоИсполнительнымДокументам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Составляет временную таблицу с условиями удержаний по исполнительным листам
// ВТПоказателиУдержанийПоИсполнительнымДокументам.
//
Процедура СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ) Экспорт
	
	Если СозданныеВТ.Найти("ВТПоказателиУдержанийПоИсполнительнымДокументам") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияЗаПериод.ДатаНачала КАК Период,
	|	УдержанияЗаПериод.ДокументОснование КАК ИсполнительныйДокумент
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"ИсполнительныйДокумент"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	УсловияУдержания.Период,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.ПлатежныйАгент,
	|	УсловияУдержания.ТарифПлатежногоАгента,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТУсловияУдержанияПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	МАКСИМУМ(ПлатежныеАгенты.Период) КАК Период
	|ПОМЕСТИТЬ ВТПлатежныеАгентыМаксимальныеПериоды
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеАгенты.ИсполнительныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента
	|ПОМЕСТИТЬ ВТПлатежныеАгенты
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгентыМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ПО (МаксимальныеПериоды.ИсполнительныйДокумент = ПлатежныеАгенты.ИсполнительныйДокумент)
	|			И (МаксимальныеПериоды.Период = ПлатежныеАгенты.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.ИсполнительныйДокумент КАК ДокументОснование,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) КАК КатегорияУдержания,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТПоказателиУдержанийПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	NULL,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента),
	|	УсловияУдержания.Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)";
	
	Запрос.Выполнить();
	
	СозданныеВТ.Добавить("ВТПоказателиУдержанийПоИсполнительнымДокументам");
	
КонецПроцедуры

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей) Экспорт
	
	// Исполнительные листы
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ИсчисленныйПоИсполнительномуЛистуНДФЛ");
	
КонецПроцедуры

// Конструирует таблицу значений для регистрации движений при помощи
//	метода СформироватьУдержанияПоИсполнительнымДокументам.
//
Функция ПустаяТаблицаУдержанияПоДокументам() Экспорт
	
	УдержанияПоДокументам = Новый ТаблицаЗначений;
	УдержанияПоДокументам.Колонки.Добавить("ИсполнительныйДокумент", Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	УдержанияПоДокументам.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("МесяцУдержания", Новый ОписаниеТипов("Дата"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаУдержания", Новый ОписаниеТипов("Число"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаВознагражденияПлатежногоАгента", Новый ОписаниеТипов("Число"));
	
	Возврат УдержанияПоДокументам;
	
КонецФункции

Процедура ДополнитьЦеломесячнымиЗаписямиУдержаний(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИскусственныйРегистратор", Документы.НачислениеЗарплаты.ПолучитьСсылку());
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ЗаписиУдержаний
		|ГДЕ
		|	ЗаписиУдержаний.ВидРасчета.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// Нет исполнительных листов.
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	МИНИМУМ(ЗаписиУдержаний.БазовыйПериодНачало) КАК Начало,
		|	МАКСИМУМ(ЗаписиУдержаний.БазовыйПериодКонец) КАК Окончание
		|ПОМЕСТИТЬ ВТИзмеренияЗаписейНеполныйМесяц
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ЗаписиУдержаний
		|ГДЕ
		|	(ЗаписиУдержаний.Начинается
		|			ИЛИ ЗаписиУдержаний.Заканчивается)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.МесяцУдержания
		|
		|ИМЕЮЩИЕ
		|	(МИНИМУМ(ЗаписиУдержаний.БазовыйПериодНачало) > НАЧАЛОПЕРИОДА(ЗаписиУдержаний.МесяцУдержания, МЕСЯЦ)
		|		ИЛИ МАКСИМУМ(ЗаписиУдержаний.БазовыйПериодКонец) < КОНЕЦПЕРИОДА(ЗаписиУдержаний.МесяцУдержания, МЕСЯЦ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеЗаписи.ПериодРегистрации,
		|	ОсновныеЗаписи.Регистратор,
		|	ОсновныеЗаписи.НомерСтроки,
		|	ОсновныеЗаписи.ФизическоеЛицо,
		|	ОсновныеЗаписи.Организация,
		|	ОсновныеЗаписи.ВидРасчета,
		|	ОсновныеЗаписи.Сотрудник,
		|	ОсновныеЗаписи.ДокументОснование,
		|	ОсновныеЗаписи.БазовыйПериодНачало,
		|	ОсновныеЗаписи.БазовыйПериодКонец,
		|	ОсновныеЗаписи.ИдентификаторСтроки,
		|	ОсновныеЗаписи.МесяцУдержания,
		|	ОсновныеЗаписи.Начинается,
		|	ОсновныеЗаписи.Заканчивается,
		|	ОсновныеЗаписи.ОригинальнаяЗапись
		|ПОМЕСТИТЬ ВТВсеОсновныеЗаписи
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ОсновныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновныеЗаписиУдержаний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.Регистратор,
		|	ЗаписиУдержаний.НомерСтроки,
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.Сотрудник,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.БазовыйПериодНачало,
		|	ЗаписиУдержаний.БазовыйПериодКонец,
		|	ЗаписиУдержаний.ИдентификаторСтроки,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	ЗаписиУдержаний.Начинается,
		|	ЗаписиУдержаний.Заканчивается,
		|	ЗаписиУдержаний.ОригинальнаяЗапись
		|ПОМЕСТИТЬ ВТОсновныеЗаписиУдержаний
		|ИЗ
		|	ВТВсеОсновныеЗаписи КАК ЗаписиУдержаний
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	&ИскусственныйРегистратор,
		|	ЗаписиУдержаний.НомерСтроки,
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.Сотрудник,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.БазовыйПериодНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(ЗаписиУдержаний.БазовыйПериодКонец, МЕСЯЦ),
		|	ЗаписиУдержаний.ИдентификаторСтроки,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ВТВсеОсновныеЗаписи КАК ЗаписиУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренияЗаписейНеполныйМесяц КАК ЗаписиНеполныйМесяц
		|		ПО ЗаписиУдержаний.ФизическоеЛицо = ЗаписиНеполныйМесяц.ФизическоеЛицо
		|			И ЗаписиУдержаний.Организация = ЗаписиНеполныйМесяц.Организация
		|			И ЗаписиУдержаний.ВидРасчета = ЗаписиНеполныйМесяц.ВидРасчета
		|			И ЗаписиУдержаний.ДокументОснование = ЗаписиНеполныйМесяц.ДокументОснование
		|			И ЗаписиУдержаний.ПериодРегистрации = ЗаписиНеполныйМесяц.ПериодРегистрации
		|			И ЗаписиУдержаний.МесяцУдержания = ЗаписиНеполныйМесяц.МесяцУдержания";
		
	Запрос.Выполнить();	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТИзмеренияЗаписейНеполныйМесяц");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВсеОсновныеЗаписи");
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУдерживаетсяВЦеломЗаМесяц(МенеджерВременныхТаблиц) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсходныеДанные");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТИсходныеДанные") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТИсходныеДанные";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("ДокументОснование");
	ПоляИсключения.Добавить("УдерживаетсяВЦеломЗаМесяц");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	Удержания.ДокументОснование,
		|	Удержания.УдерживаетсяВЦеломЗаМесяц
		|ПОМЕСТИТЬ ВТВсеУдержания
		|ИЗ
		|	ВТУдержания КАК Удержания";
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(Запрос.Текст, МенеджерВременныхТаблиц, "ВТУдержания", "Удержания", ПоляИсключения);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВсеУдержания");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТУдержания");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	Удержания.ДокументОснование,
		|	ВЫБОР
		|		КОГДА УсловияУдержаний.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА Удержания.УдерживаетсяВЦеломЗаМесяц
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержаний.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
		|						ИЛИ УсловияУдержаний.ВидБазы = ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК УдерживаетсяВЦеломЗаМесяц
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТВсеУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержаний
		|		ПО (УсловияУдержаний.ИсполнительныйДокумент = Удержания.ДокументОснование)
		|			И (УсловияУдержаний.Период = Удержания.ДатаНачала)";
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(Запрос.Текст, МенеджерВременныхТаблиц, "ВТВсеУдержания", "Удержания", ПоляИсключения);
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазмерВознагражденияПлатежногоАгента(СуммаПлатежа, Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма)
	
	Вознаграждение = 0;
	
	Если СуммаПлатежа = 0 Тогда 
		Возврат Вознаграждение;
	КонецЕсли;
	
	// Рассчитываем процентом
	Если Процент > 0 Тогда
		Вознаграждение = СуммаПлатежа * Процент / 100;
	КонецЕсли;
	
	// Если указана сумма, то она взимается в дополнение к проценту.
	Вознаграждение = Вознаграждение + Сумма;
	
	// Обрабатываем ограничения
	Если Вознаграждение < МинимальнаяСумма Тогда
		Вознаграждение = МинимальнаяСумма;
	КонецЕсли;
	
	Если Вознаграждение > МаксимальнаяСумма И МаксимальнаяСумма > 0 Тогда
		Вознаграждение = МаксимальнаяСумма;
	КонецЕсли;
	
	Возврат Вознаграждение;
	
КонецФункции

Функция ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам()
	
	ОписаниеВТ = Новый Структура(
		"ИмяВТ");
	
	Возврат ОписаниеВТ;
	
КонецФункции

// Ожидается ВТ с полями
//	- ИсполнительныйДокумент
//	- Период
//
Процедура СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ)
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУсловияУдержанийПоИсполнительнымДокументам") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Запрашиваем условия удержаний.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеВТ.ИмяВТ, "ИсполнительныйДокумент");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияУдержанияПоИсполнительномуДокументу", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних");
	
	// Запрашиваем величину прожиточных минимумов.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних", "ПрожиточныйМинимум");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ВеличинаПрожиточногоМинимума", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТВеличинаПрожиточногоМинимумаСрезПоследних");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержания.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|	УсловияУдержания.Период КАК Период,
		|	УсловияУдержания.СпособРасчета КАК СпособРасчета,
		|	УсловияУдержания.ВидБазы КАК ВидБазы,
		|	УсловияУдержания.Процент КАК Процент,
		|	УсловияУдержания.Сумма КАК Сумма,
		|	УсловияУдержания.Числитель КАК Числитель,
		|	УсловияУдержания.Знаменатель КАК Знаменатель,
		|	УсловияУдержания.Предел КАК Предел,
		|	УсловияУдержания.ПрожиточныйМинимум КАК ПрожиточныйМинимум,
		|	УсловияУдержания.УчитыватьБольничныеЛисты КАК УчитыватьБольничныеЛисты,
		|	УсловияУдержания.Получатель КАК Получатель,
		|	УсловияУдержания.ПлатежныйАгент КАК ПлатежныйАгент,
		|	УсловияУдержания.ТарифПлатежногоАгента КАК ТарифПлатежногоАгента,
		|	ЕСТЬNULL(ВеличинаПрожиточногоМинимума.Размер, 0) КАК ВеличинаПрожиточногоМинимума
		|ПОМЕСТИТЬ ВТУсловияУдержанийПоИсполнительнымДокументам
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВеличинаПрожиточногоМинимумаСрезПоследних КАК ВеличинаПрожиточногоМинимума
		|		ПО УсловияУдержания.ПрожиточныйМинимум = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|			И УсловияУдержания.Период = ВеличинаПрожиточногоМинимума.Период";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура ПроверитьДатуИсполнительногоЛиста(ИсполнительныйЛист, ДатаСобытия, Регистратор, ИмяРеквизитаДатаСобытия, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", ДатаСобытия);
	Запрос.УстановитьПараметр("ИсполнительныйЛист", ИсполнительныйЛист);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияУдержанияПоИсполнительномуДокументу.Период,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Регистратор
	               |ИЗ
	               |	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	               |ГДЕ
	               |	УсловияУдержанияПоИсполнительномуДокументу.Регистратор <> &Регистратор
	               |	И УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент = &ИсполнительныйЛист
	               |	И УсловияУдержанияПоИсполнительномуДокументу.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ШаблонСообщения = НСтр("ru = 'На дату %1 уже проведен документ %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(Выборка.Период, "ДЛФ=Д"), Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизитаДатаСобытия, "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТОсталосьУдержатьПоДокументам(МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления)
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТОсталосьУдержатьПоДокументам") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование
	               |ПОМЕСТИТЬ ВТУдержанияДоПредела
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = ДанныеДляРасчета.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = ДанныеДляРасчета.ИсполнительныйДокумент
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	               |			И (УдержанияДоПределаПоСотрудникам.Период <= &Период)
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	               |		ПО УдержанияДоПределаПоСотрудникам.Удержание = Удержания.Ссылка
	               |			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникамОстатки.Организация,
	               |	УдержанияДоПределаПоСотрудникамОстатки.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникамОстатки.Удержание,
	               |	УдержанияДоПределаПоСотрудникамОстатки.ДокументОснование,
	               |	УдержанияДоПределаПоСотрудникамОстатки.СуммаОстаток
	               |ПОМЕСТИТЬ ВТУдержанияДоПределаОстатки
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам.Остатки(
	               |			&Период,
	               |			(Организация, ФизическоеЛицо, Удержание, ДокументОснование) В
	               |				(ВЫБРАТЬ
	               |					УдержанияДоПредела.Организация,
	               |					УдержанияДоПредела.ФизическоеЛицо,
	               |					УдержанияДоПредела.Удержание,
	               |					УдержанияДоПредела.ДокументОснование
	               |				ИЗ
	               |					ВТУдержанияДоПредела КАК УдержанияДоПредела)) КАК УдержанияДоПределаПоСотрудникамОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование,
	               |	УдержанияДоПределаПоСотрудникам.Сумма
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = УдержанияДоПредела.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = УдержанияДоПредела.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.Удержание = УдержанияДоПредела.Удержание
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = УдержанияДоПредела.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.Регистратор В (&ИсключаемыйРегистратор))
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдержанияДоПределаПоСотрудникам.Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.Удержание,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование,
	               |	УдержанияДоПределаПоСотрудникам.Сумма
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ПО УдержанияДоПределаПоСотрудникам.Организация = УдержанияДоПредела.Организация
	               |			И УдержанияДоПределаПоСотрудникам.ФизическоеЛицо = УдержанияДоПредела.ФизическоеЛицо
	               |			И УдержанияДоПределаПоСотрудникам.Удержание = УдержанияДоПредела.Удержание
	               |			И УдержанияДоПределаПоСотрудникам.ДокументОснование = УдержанияДоПредела.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.Период = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ))
	               |			И (УдержанияДоПределаПоСотрудникам.Регистратор <> &ИсключаемыйРегистратор)
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияДоПредела.Организация,
	               |	УдержанияДоПредела.ФизическоеЛицо,
	               |	УдержанияДоПредела.Удержание,
	               |	УдержанияДоПредела.ДокументОснование,
	               |	СУММА(ЕСТЬNULL(УдержанияДоПределаОстатки.СуммаОстаток, 0)) КАК Остаток
	               |ПОМЕСТИТЬ ВТОсталосьУдержатьПоДокументам
	               |ИЗ
	               |	ВТУдержанияДоПредела КАК УдержанияДоПредела
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДоПределаОстатки КАК УдержанияДоПределаОстатки
	               |		ПО УдержанияДоПредела.Организация = УдержанияДоПределаОстатки.Организация
	               |			И УдержанияДоПредела.ФизическоеЛицо = УдержанияДоПределаОстатки.ФизическоеЛицо
	               |			И УдержанияДоПредела.Удержание = УдержанияДоПределаОстатки.Удержание
	               |			И УдержанияДоПредела.ДокументОснование = УдержанияДоПределаОстатки.ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдержанияДоПредела.Организация,
	               |	УдержанияДоПредела.ФизическоеЛицо,
	               |	УдержанияДоПредела.Удержание,
	               |	УдержанияДоПредела.ДокументОснование";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТУдержанияДоПредела");
	УдалитьВТ.Добавить("ВТУдержанияДоПределаОстатки");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Функция ИсчисленныйПоДоходамНалог(МенеджерВременныхТаблиц, ОписаниеВТ, МесяцНачисления, ПогашениеЗаймов, ИсключаемыйРегистратор, НастройкиУдержаний, ОчередностьРасчета = Неопределено, ЭтоИсправлениеТекущимПериодом = Ложь) Экспорт 
	
	НалогПоДоходам = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей().Выгрузить(, "Период,ФизическоеЛицо,Начисление,СуммаДохода");
	НалогПоДоходам.Колонки.СуммаДохода.Имя = "Налог";
	НалогПоДоходам.Колонки.Период.Имя = "Месяц";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.НачалоПериода) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.ОкончаниеПериода) КАК ОкончаниеПериода
		|ИЗ
		|	ВТУдержания КАК Удержания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВидыНДФЛ", Обработки.МенеджерРасчетаЗарплаты.ВидыНДФЛДополненияРасчетнойБазыУдержаний());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеУдержаний.НомерСтроки КАК НомерСтроки,
	               |	ДанныеУдержаний.Организация КАК Организация,
	               |	ДанныеУдержаний.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ДанныеУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДанныеУдержаний.ВидРасчета КАК ВидРасчета,
	               |	ДанныеУдержаний.ДокументОснование КАК ИсполнительныйДокумент
	               |ПОМЕСТИТЬ ВТУдержанияПоИсполнительнымЛистам
	               |ИЗ
	               |	ВТРегистрРасчета_Удержания КАК ДанныеУдержаний
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	               |		ПО ДанныеУдержаний.ВидРасчета = Удержания.Ссылка
	               |			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	               |			И (&УсловиеОчередностьРасчета)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ВТУдержанияПоИсполнительнымЛистам КАК УдержанияПоИсполнительнымЛистам";
	
	Если ОчередностьРасчета = Неопределено Тогда
		ТекстУсловияОчередность = "ИСТИНА";
	Иначе
		ТекстУсловияОчередность = "Удержания.ОчередностьРасчета = &ОчередностьРасчета";
		Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОчередностьРасчета", ТекстУсловияОчередность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТУдержанияПоИсполнительнымЛистам");
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		Возврат НалогПоДоходам;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдержанияПоИсполнительнымЛистам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	УдержанияПоИсполнительнымЛистам.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаИсполнительныеЛисты
	               |ИЗ
	               |	ВТУдержанияПоИсполнительнымЛистам КАК УдержанияПоИсполнительнымЛистам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ) КАК Месяц,
	               |	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК Ставка,
	               |	ВЫБОР
	               |		КОГДА Начисления.НачислениеУдержание В (&ВидыНДФЛ)
	               |			ТОГДА Начисления.Сумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Налог
	               |ИЗ
	               |	ВТРегистрНакопления_НачисленияУдержанияПоСотрудникам КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И Начисления.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ),
	               |	Начисления.ФизическоеЛицо,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	               |	ВЫБОР
	               |		КОГДА Начисления.НачислениеУдержание В (&ВидыНДФЛ)
	               |			ТОГДА Начисления.Сумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	ВТРегистрНакопления_НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И Начисления.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ИменаВТ.Добавить("ВТФизическиеЛицаИсполнительныеЛисты");
	
	НалогПоСтавкам = РезультатыЗапроса[1].Выгрузить();
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, МЕСЯЦ) КАК Месяц,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК Ставка,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма КАК Налог
		               |ИЗ
		               |	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
		               |		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
		               |			И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор)
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)";
		
		РанееИсчисленныйНалог = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РанееИсчисленныйНалог, НалогПоСтавкам);
		
	КонецЕсли;
	
	ФизическиеЛица = Новый Соответствие;
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Для Каждого СтрокаЗаймов Из ПогашениеЗаймов Цикл 
		Если СтрокаЗаймов.НалогНаМатериальнуюВыгоду <> 0 И ФизическиеЛица[СтрокаЗаймов.ФизическоеЛицо] <> Неопределено Тогда 
			СтрокаНДФЛ = НалогПоСтавкам.Добавить();
			СтрокаНДФЛ.Месяц = МесяцНачисления;
			СтрокаНДФЛ.ФизическоеЛицо = СтрокаЗаймов.ФизическоеЛицо;
			СтрокаНДФЛ.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			СтрокаНДФЛ.Налог = -СтрокаЗаймов.НалогНаМатериальнуюВыгоду;
		КонецЕсли;
	КонецЦикла;
	
	НалогПоСтавкам.Свернуть("Месяц,ФизическоеЛицо,Ставка", "Налог");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ) КАК Месяц,
	               |	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК Ставка,
	               |	СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета КАК Результат
	               |ИЗ
	               |	ВТРегистрНакопления_СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
	               |			И СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |			И (&УсловиеСторно)";
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ТекстУсловияСторно = "НЕ СведенияОДоходахНДФЛ.Сторно";
	Иначе
		ТекстУсловияСторно = "ИСТИНА";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", ТекстУсловияСторно);
	
	ОблагаемыеНалогомДоходы = Запрос.Выполнить().Выгрузить();
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ) КАК Месяц,
		               |	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
		               |	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК Ставка,
		               |	СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета КАК Результат
		               |ИЗ
		               |	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
		               |		ПО (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		               |			И (СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор)
		               |			И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
		               |			И СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо";
		
		СведенияОДоходахНДФЛ = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОДоходахНДФЛ, ОблагаемыеНалогомДоходы);
		
	КонецЕсли;	
	
	ОблагаемыеНалогомДоходы.Свернуть("Месяц,ФизическоеЛицо,Начисление,Ставка", "Результат");
	ОблагаемыеНалогомДоходы.Индексы.Добавить("Месяц,ФизическоеЛицо,Ставка");
	
	Для Каждого СтрокаНалога Из НалогПоСтавкам Цикл 
		КоэффициентыРаспределения = Новый Массив;
		Отбор = Новый Структура("Месяц,ФизическоеЛицо,Ставка", СтрокаНалога.Месяц, СтрокаНалога.ФизическоеЛицо, СтрокаНалога.Ставка);
	    ДоходыФизическогоЛица = ОблагаемыеНалогомДоходы.НайтиСтроки(Отбор);
		Для Каждого СтрокаДохода Из ДоходыФизическогоЛица Цикл 
			КоэффициентыРаспределения.Добавить(СтрокаДохода.Результат);
		КонецЦикла;
		РезультатРаспределения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНалога.Налог, КоэффициентыРаспределения);
		Если РезультатРаспределения <> Неопределено Тогда 
			Индекс = 0;
			Для Каждого СтрокаДохода Из ДоходыФизическогоЛица Цикл 
				НоваяСтрока = НалогПоДоходам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДохода);
				НоваяСтрока.Налог = РезультатРаспределения[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НалогПоДоходам.Свернуть("Месяц,ФизическоеЛицо,Начисление", "Налог");
	НалогПоДоходам.Индексы.Добавить("Месяц,ФизическоеЛицо,Начисление");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
	Возврат НалогПоДоходам;
	
КонецФункции

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.25";
	Обработчик.Процедура = "ИсполнительныеЛисты.ЗаполнитьПолучателяИТарифПлатежногоАгентаВУсловияхУдержания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.8";
	Обработчик.Процедура = "ИсполнительныеЛисты.УстановитьИспользованиеПараметровНаборовСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.14";
	Обработчик.Процедура = "ИсполнительныеЛисты.СформироватьДвиженияПоРегиструУдержанияДоПределаПоСотрудникам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.16";
	Обработчик.Процедура = "ИсполнительныеЛисты.УточнитьПризнакПрекратитьПоДостижениюПредела";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e813921-bbee-4134-8254-1c98560dc34d");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение значения реквизита «Прекратить по достижению предела» в исполнительных листах.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.17";
	Обработчик.Процедура = "ИсполнительныеЛисты.УточнитьДвиженияПоРегиструПредельныеСуммыУдержанийСотрудников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d241ab95-198b-47a3-aea9-cb0b78abcd4d");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение движений по регистру «Предельные суммы удержаний сотрудников».'");
	
КонецПроцедуры

Процедура ЗаполнитьПолучателяИТарифПлатежногоАгентаВУсловияхУдержания() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержания
	|ГДЕ
	|	(УсловияУдержания.ПлатежныйАгент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И УсловияУдержания.ТарифПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ТарифыПлатежныхАгентов.ПустаяСсылка)
	|			ИЛИ УсловияУдержания.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияУдержания.Период,
	|	УсловияУдержания.Регистратор,
	|	УсловияУдержания.НомерСтроки,
	|	УсловияУдержания.Активность,
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.УчитыватьБольничныеЛисты,
	|	УсловияУдержания.ПлатежныйАгент,
	|	ИсполнительныйЛист.ТарифПлатежногоАгента,
	|	УсловияУдержания.ФизическоеЛицо,
	|	УсловияУдержания.Организация,
	|	ИсполнительныйЛист.Получатель
	|ИЗ
	|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|		ПО (ИсполнительныйЛист.Ссылка = УсловияУдержания.ИсполнительныйДокумент)
	|ГДЕ
	|	УсловияУдержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УсловияУдержания.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметровНаборовСвойств() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиРасчетаЗарплатыРасширенный.ИспользоватьИсполнительныеЛисты) КАК ИспользоватьИсполнительныеЛисты
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаЗарплатыРасширенный КАК НастройкиРасчетаЗарплатыРасширенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		ПараметрыНабора.Используется = Выборка.ИспользоватьИсполнительныеЛисты;
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИсполнительныйЛист", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеУсловийИсполнительногоЛиста", ПараметрыНабора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструУдержанияДоПределаПоСотрудникам() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнительныйЛист.Ссылка
	               |ИЗ
	               |	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	               |ГДЕ
	               |	ИсполнительныйЛист.Предел > 0
	               |	И НЕ ИсполнительныйЛист.ПрекратитьПоДостижениюПредела
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИзменениеУсловийИсполнительногоЛиста.Ссылка
	               |ИЗ
	               |	Документ.ИзменениеУсловийИсполнительногоЛиста КАК ИзменениеУсловийИсполнительногоЛиста
	               |ГДЕ
	               |	ИзменениеУсловийИсполнительногоЛиста.Предел > 0
	               |	И НЕ ИзменениеУсловийИсполнительногоЛиста.ПрекратитьПоДостижениюПредела";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПрекратитьПоДостижениюПредела = Истина;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
	    ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияУдержанияПоИсполнительномуДокументу.Период КАК Период,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Регистратор КАК Регистратор,
	               |	УсловияУдержанияПоИсполнительномуДокументу.НомерСтроки КАК НомерСтроки,
	               |	УсловияУдержанияПоИсполнительномуДокументу.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент.Удержание КАК Удержание,
	               |	УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент КАК ДокументОснование,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Организация.ГоловнаяОрганизация КАК Организация,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Предел > 0 КАК ПрекратитьПоДостижениюПредела,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Предел КАК Сумма
	               |ИЗ
	               |	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельныеСуммыУдержанийСотрудников КАК ПредельныеСуммыУдержанийСотрудников
	               |		ПО УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент = ПредельныеСуммыУдержанийСотрудников.ДокументОснование
	               |ГДЕ
	               |	ПредельныеСуммыУдержанийСотрудников.ДокументОснование ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистратор";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		НаборЗаписей = РегистрыСведений.ПредельныеСуммыУдержанийСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Удержание) Тогда 
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьПризнакПрекратитьПоДостижениюПредела(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсполнительныйЛист.Ссылка
	               |ИЗ
	               |	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	               |ГДЕ
	               |	ИсполнительныйЛист.Предел > 0
	               |	И НЕ ИсполнительныйЛист.ПрекратитьПоДостижениюПредела
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИзменениеУсловийИсполнительногоЛиста.Ссылка
	               |ИЗ
	               |	Документ.ИзменениеУсловийИсполнительногоЛиста КАК ИзменениеУсловийИсполнительногоЛиста
	               |ГДЕ
	               |	ИзменениеУсловийИсполнительногоЛиста.Предел > 0
	               |	И НЕ ИзменениеУсловийИсполнительногоЛиста.ПрекратитьПоДостижениюПредела";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ОбщегоНазначения.ИмяТаблицыПоСсылке(Выборка.Ссылка), "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПрекратитьПоДостижениюПредела = Истина;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
	    ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьДвиженияПоРегиструПредельныеСуммыУдержанийСотрудников(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПредельныеСуммыУдержанийСотрудников.Период КАК Период,
	               |	ПредельныеСуммыУдержанийСотрудников.Регистратор КАК Регистратор,
	               |	ПредельныеСуммыУдержанийСотрудников.Организация КАК Организация,
	               |	ПредельныеСуммыУдержанийСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПредельныеСуммыУдержанийСотрудников.Удержание КАК Удержание,
	               |	ПредельныеСуммыУдержанийСотрудников.ДокументОснование КАК ДокументОснование,
	               |	ИсполнительныйЛист.ПрекратитьПоДостижениюПредела КАК ПрекратитьПоДостижениюПредела,
	               |	ПредельныеСуммыУдержанийСотрудников.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ПредельныеСуммыУдержанийСотрудников КАК ПредельныеСуммыУдержанийСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	               |		ПО ПредельныеСуммыУдержанийСотрудников.Регистратор = ИсполнительныйЛист.Ссылка
	               |			И ПредельныеСуммыУдержанийСотрудников.ПрекратитьПоДостижениюПредела <> ИсполнительныйЛист.ПрекратитьПоДостижениюПредела
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПредельныеСуммыУдержанийСотрудников.Период,
	               |	ПредельныеСуммыУдержанийСотрудников.Регистратор,
	               |	ПредельныеСуммыУдержанийСотрудников.Организация,
	               |	ПредельныеСуммыУдержанийСотрудников.ФизическоеЛицо,
	               |	ПредельныеСуммыУдержанийСотрудников.Удержание,
	               |	ПредельныеСуммыУдержанийСотрудников.ДокументОснование,
	               |	ИзменениеУсловийИсполнительногоЛиста.ПрекратитьПоДостижениюПредела,
	               |	ПредельныеСуммыУдержанийСотрудников.Сумма
	               |ИЗ
	               |	РегистрСведений.ПредельныеСуммыУдержанийСотрудников КАК ПредельныеСуммыУдержанийСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеУсловийИсполнительногоЛиста КАК ИзменениеУсловийИсполнительногоЛиста
	               |		ПО ПредельныеСуммыУдержанийСотрудников.Регистратор = ИзменениеУсловийИсполнительногоЛиста.Ссылка
	               |			И ПредельныеСуммыУдержанийСотрудников.ПрекратитьПоДостижениюПредела <> ИзменениеУсловийИсполнительногоЛиста.ПрекратитьПоДостижениюПредела";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПредельныеСуммыУдержанийСотрудников.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПредельныеСуммыУдержанийСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
