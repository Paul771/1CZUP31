
#Область СлужебныйПрограммныйИнтерфейс

// Создает элементы формы для группы Исправления.
//		Исправить
//		Сторнировать
//		ИсправлениеКартинка (ИсправлениеИнфоНадпись выводится в расширенную подсказку)
//		ПерейтиКИсправлению
//		ПерейтиКСторно
//		ПерейтиКИсправленному
//
Процедура ГруппаИсправлениеДополнитьФорму(Форма, ИспользоватьИсправлениеДокумента = Истина, ИспользоватьСторнированиеДокумента = Истина,  ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		ДобавляемыеРеквизиты = Новый Массив;
		Если ИспользоватьИсправлениеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправлен", Новый ОписаниеТипов("Булево")));
			Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Форма.Параметры.Ключ));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправление", Новый ОписаниеТипов(Типы)));
		КонецЕсли;
		Если ИспользоватьСторнированиеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторнирован", Новый ОписаниеТипов("Булево")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторно", Новый ОписаниеТипов("ДокументСсылка.СторнированиеНачислений")));
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеДоступно", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроведенаВыплатаЗарплаты", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроизведеноОтражение", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПериодРегистрацииИсправленногоДокумента", Новый ОписаниеТипов("Дата")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьИсправлениеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьСторнированиеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноИсправлениеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноСторнированиеДокумента", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДоступноЧтениеСторнирование", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьРасчетЗарплатыРасширенная", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеЦветОсобогоТекста", Новый ОписаниеТипов("Цвет")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеПоясняющийТекст", Новый ОписаниеТипов("Цвет")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы И (ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента) Тогда
		
		Элементы = Форма.Элементы;
		
		// Группа команд
		ГруппаИсправление = Элементы.ГруппаИсправление;
		ГруппаИсправление.РастягиватьПоГоризонтали = Истина;
		
		// Команда "Исправить".
		Если ИспользоватьИсправлениеДокумента Тогда
			ИмяКоманды = "Исправить";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = "Исправить";
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
			КонецЕсли;
		КонецЕсли;
			
		// Команда "Сторнировать".
		Если ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "Сторнировать";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = "Сторнировать";
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
			КонецЕсли;
		КонецЕсли;
		
		// Картинка и надпись панели исправления.
		Если Элементы.Найти("ИсправлениеКартинка") = Неопределено Тогда
			Элемент = Элементы.Добавить("ИсправлениеКартинка", Тип("ДекорацияФормы"), ГруппаИсправление);
			Элемент.Заголовок = "Предупреждение";
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			// Картинка устанавливается в процедуре УстановитьПоляИсправления.
			Элемент.Ширина = 2;
			Элемент.Высота = 1;
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
			
			// Надпись
			ИсправлениеИнфоНадпись = Элемент.РасширеннаяПодсказка;
			ИсправлениеИнфоНадпись.АвтоМаксимальнаяШирина = Ложь;
			ИсправлениеИнфоНадпись.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		// Команда "Открыть документ-исправление".
		Если ИспользоватьИсправлениеДокумента Тогда
			ИмяКоманды = "ПерейтиКИсправлению";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Открыть документ- исправление'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 13;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
		
		// Команда "Открыть документ-сторно".
		Если ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "ПерейтиКСторно";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Открыть документ-сторно'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 11;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
		
		// Команда "Открыть исправленный документ".
		ИмяКоманды = "ПерейтиКИсправленному";
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Заголовок = НСтр("ru = 'Открыть исправленный документ'");
			КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КонецЕсли;
		Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
			Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
			Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
			Элемент.ИмяКоманды = ИмяКоманды;
			Элемент.Ширина = 16;
			Элемент.Высота = 3;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении данных тех документов, к которым подключен механизм исправления.
// Заполняет реквизиты формы механизма исправления, которые создаются в ГруппаИсправлениеДополнитьФорму.
// Параметры:
// 		Форма, 
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ИмяОсновногоРеквизита - по умолчанию "Объект".
//		ПолеОрганизация - по умолчанию "Организация".
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//
Процедура ПрочитатьРеквизитыИсправления(Форма, РежимИсправления = "РасчетЗарплаты", ИмяОсновногоРеквизита = "Объект", ПолеОрганизация = "Организация", ПолеПериодРегистрации = "ПериодРегистрации", ПроверятьНаличиеНачислений = Истина) Экспорт
	
	Форма.ИсправлениеЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Форма.ИсправлениеПоясняющийТекст = ЦветаСтиля.ПоясняющийТекст;
	Форма.ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если НЕ Форма.ИспользоватьРасчетЗарплатыРасширенная Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНовогоЭлемента = Форма.Параметры.Свойство("Ключ") И Форма.Параметры.Ключ.Пустая();
	Форма.ИспользоватьИсправлениеДокумента = Форма.Элементы.Найти("Исправить") <> Неопределено;
	Форма.ИспользоватьСторнированиеДокумента = Форма.Элементы.Найти("Сторнировать") <> Неопределено;
	
	Объект = Форма[ИмяОсновногоРеквизита];
	
	Если Форма.ИспользоватьИсправлениеДокумента И РежимИсправления = "РасчетЗарплаты" Тогда
		Форма.ПериодРегистрацииИсправленногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, ПолеПериодРегистрации);
	КонецЕсли;
	
	Если ФормаНовогоЭлемента Тогда
		Возврат;
	КонецЕсли;
	
	ДокументИсправленЕсть = Ложь;
	ДокументСторнированЕсть = Ложь;
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "ДокументИсправлен" Тогда
			ДокументИсправленЕсть = Истина;
			Форма.ДокументИсправлен = Ложь;
		ИначеЕсли Реквизит.Имя = "ДокументСторнирован" Тогда
			ДокументСторнированЕсть = Истина;
			Форма.ДокументСторнирован = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументИсправленЕсть Или ДокументСторнированЕсть Тогда
		
		Запрос = Новый Запрос;
		
		Если ДокументИсправленЕсть Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Документ.Ссылка КАК ДокументИсправление,
			|	NULL КАК СторнирующийДокумент
			|ИЗ
			|	#Таблица КАК Документ
			|ГДЕ
			|	Документ.ИсправленныйДокумент = &Ссылка
			|	И НЕ &ПустаяСсылка
			|	И Документ.Проведен";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект.Ссылка));
		КонецЕсли;
		
		Если ДокументСторнированЕсть Тогда
			Если Не ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	NULL КАК ДокументИсправление,
			|	Документ.Ссылка КАК СторнирующийДокумент
			|ИЗ
			|	Документ.СторнированиеНачислений КАК Документ
			|ГДЕ
			|	Документ.СторнируемыйДокумент = &Ссылка
			|	И НЕ &ПустаяСсылка
			|	И Документ.Проведен";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", Объект.Ссылка.Пустая());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ДокументИсправленЕсть И Выборка.ДокументИсправление <> NULL Тогда
				Форма.ДокументИсправлен = Истина;
				Форма.ДокументИсправление = Выборка.ДокументИсправление;
			ИначеЕсли ДокументСторнированЕсть И Выборка.СторнирующийДокумент <> NULL Тогда
				Форма.ДокументСторнирован = Истина;
				Форма.ДокументСторно = Выборка.СторнирующийДокумент;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Форма.ТолькоПросмотр Или (ДокументИсправленЕсть И Форма.ДокументИсправлен)
			Или (ДокументСторнированЕсть И Форма.ДокументСторнирован);
		
	Если РежимИсправления = "РасчетЗарплаты" Тогда
		
		Документ = Объект.Ссылка;
		Организация = Объект[ПолеОрганизация];
		ПериодРегистрации = Объект[ПолеПериодРегистрации];
		
		РезультатПроверки = ДоступноИсправлениеРасчетногоДокумента(Документ, Организация, ПериодРегистрации, ПроверятьНаличиеНачислений);
		
		Форма.ИсправлениеДоступно = РезультатПроверки.ИсправлениеДоступно;
		Форма.ПроведенаВыплатаЗарплаты = РезультатПроверки.ПроведенаВыплатаЗарплаты;
		Форма.ПроизведеноОтражение = РезультатПроверки.ПроизведеноОтражение;
		
	Иначе
		Форма.ИсправлениеДоступно = Истина;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоДобавления = ПравоДоступа("Добавление", Объект.Ссылка.Метаданные(), ПользователиИнформационнойБазы.ТекущийПользователь());
		ЕстьПравоДобавленияСторнирования = ПравоДоступа("Добавление", Метаданные.Документы.СторнированиеНачислений, ПользователиИнформационнойБазы.ТекущийПользователь());
		ЕстьПравоЧтенияСторнирования = ПравоДоступа("Чтение", Метаданные.Документы.СторнированиеНачислений, ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		ЕстьПравоДобавления = ПравоДоступа("Добавление", Объект.Ссылка.Метаданные());
		ЕстьПравоДобавленияСторнирования = ПравоДоступа("Добавление", Метаданные.Документы.СторнированиеНачислений);
		ЕстьПравоЧтенияСторнирования = ПравоДоступа("Чтение", Метаданные.Документы.СторнированиеНачислений);
	КонецЕсли;
	
	Форма.ДоступноИсправлениеДокумента = ЕстьПравоДобавления
		И ((ИспользоватьНачислениеЗарплаты И РежимИсправления = "РасчетЗарплаты") Или (РежимИсправления <> "РасчетЗарплаты"));
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ПользователиИнформационнойБазы.ТекущийПользователь(), Ложь, Ложь);
	ДоступноСторнирование = ЕстьПравоДобавленияСторнирования Или ЭтоПолноправныйПользователь;
	Форма.ДоступноЧтениеСторнирование = ДоступноСторнирование Или ЕстьПравоЧтенияСторнирования;
	Форма.ДоступноСторнированиеДокумента = ((ИспользоватьНачислениеЗарплаты И РежимИсправления = "РасчетЗарплаты") Или (РежимИсправления <> "РасчетЗарплаты"))
		И (ДоступноСторнирование Или Форма.ДоступноЧтениеСторнирование);
		
КонецПроцедуры

Функция ДоступноИсправлениеРасчетногоДокумента(Документ, Организация, ПериодРегистрации, ПроверятьНаличиеНачислений) Экспорт 
	
	// Проверяется наличие выплаты в периоде.
	БылаВыплатаВПериоде = ВыплатаПроизводилась(Организация, Документ, ПериодРегистрации);
	
	// Проверим наличие документа отражение зарплаты в бухгалтерском учете.
	БылоОтражениеЗарплатыВБухучете = ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации);
	
	БылаВыплатаВПериодеИлиОтражениеЗарплатыВБухучете = (БылаВыплатаВПериоде ИЛИ БылоОтражениеЗарплатыВБухучете);
	
	// Если документ содержит табличную часть начислений, проверяется наличие начислений по документу.
	ИмяТаблицыНачислений = "Начисления";
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТаблицыНачислений);
	
	Если МетаданныеТабличнойЧасти = Неопределено 
		Или Не ПроверятьНаличиеНачислений Тогда
		ДокументРегистрировалНачисления = Истина;
	Иначе		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДокументРегистрировалНачисления = (Выборка.Количество() <> 0);
	КонецЕсли;
	
	РезультатПроверки = Новый Структура("ИсправлениеДоступно,ПроведенаВыплатаЗарплаты,ПроизведеноОтражение", Ложь, Ложь, Ложь);
	ИсправлениеВТекущемПериодеВозможно = ДокументыИсправляемыеВТекущемПериоде().Найти(МетаданныеДокумента) <> НеОпределено;
	
	Если (БылаВыплатаВПериодеИлиОтражениеЗарплатыВБухучете Или ИсправлениеВТекущемПериодеВозможно) 
		И ДокументРегистрировалНачисления Тогда
		РезультатПроверки.ИсправлениеДоступно = Истина;
		РезультатПроверки.ПроведенаВыплатаЗарплаты = БылаВыплатаВПериоде;
		РезультатПроверки.ПроизведеноОтражение = БылоОтражениеЗарплатыВБухучете;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Помечает набор записей перед добавлением в него сторно строк. Используется для предотвращения повторной обработки
// набора записей.
//
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей - Изолируемый набор.
//  ИмяУчета	 - Строка						 - Имя изолирующего учета.
// 
// Возвращаемое значение:
//  Булево - Истина когда обработка набора еще не выполнялось учетами, Ложь когда обработка уже выполнена.
//
Функция ИзолироватьУчетом(НаборЗаписей, ИмяУчета) Экспорт
	
	Результат = Ложь;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИзолированоУчетом") Тогда
		МаркерУчета = НаборЗаписей.ДополнительныеСвойства.ИзолированоУчетом;
		Если МаркерУчета <> ИмяУчета И МаркерУчета <> "<ВнеУчета>" И ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Учет ""%1"" нарушает изоляцию %2 установленную учетом ""%3""'"),
				ИмяУчета, НаборЗаписей.Метаданные().ПолноеИмя(), НаборЗаписей.ДополнительныеСвойства.ИзолированоУчетом);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИзолированоУчетом", ИмяУчета);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в набор записей такие строки, которые сторнируют движения исправленного документа.
//  Подходит для регистров накопления, имеющих реквизит Сторно (булево).
//
// Параметры:
//  НаборЗаписей		 - РегистрНакопленияНаборЗаписей - Целевой набор записей в который будут добавлены сторнирующие строки.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, движения которого необходимо сторнировать.
//  МетаданныеРегистра	 - ОбъектМетаданных				 - Метаданные регистра целевого набора записей.
//  Записывать			 - Булево						 - Если Истина, то набор будет записан сразу, если Ложь, то набору будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра = Неопределено, Записывать = Ложь) Экспорт
	
	Если МетаданныеРегистра = Неопределено Тогда
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(НаборЗаписей));
	КонецЕсли;
	
	Запрос = Новый Запрос(
	    "ВЫБРАТЬ
	    |   *
	    |ИЗ
	    |   #СторнируемыйРегистр КАК СторнируемыйРегистр 
	    |ГДЕ
	    |   СторнируемыйРегистр.Регистратор = &ИсправленныйДокумент
	    |   И СторнируемыйРегистр.Сторно = ЛОЖЬ");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СторнируемыйРегистр", МетаданныеРегистра.ПолноеИмя());
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИдентификаторСтроки = МетаданныеРегистра.Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено;
	МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
			НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
		КонецЦикла;
		НоваяСтрока.Сторно = Истина;
		
		Если ЕстьИдентификаторСтроки Тогда
			НоваяСтрока.ИдентификаторСтроки = - НоваяСтрока.ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Если Записывать Тогда
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	Иначе
		НаборЗаписей.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сторнирует движения в регистрах накопления и расчета универсальными алгоритмами.
// Движения уже сторнированные учетами будут пропущены.
//
// Параметры:
//  Движения					 - КоллекцияДвижений, Структура	 - Коллекция движений, в которую будут добавлены сторно записи.
//  ИсправленныйДокумент		 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  ИсправлениеВТекущемПериоде	 - Булево						 - Истина если документ исправление проводится в том же периоде что и исправленный документ.
//
Процедура СторнироватьДвиженияБезСпецификиУчетов(Движения, ИсправленныйДокумент, ИсправлениеВТекущемПериоде = Ложь) Экспорт

	МетаданныеДвиженийИсправленногоДокумента = ИсправленныйДокумент.Метаданные().Движения;
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		
		НедостающиеДвижения = Новый Массив;
		НаборЗаписей = Неопределено;
		
		Для Каждого МетаданныеРегистра Из МетаданныеДвиженийИсправленногоДокумента Цикл
			
			Если Не(ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Или ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра))Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДвиженияВСтруктуре Тогда
				Движения.Свойство(МетаданныеРегистра.Имя, НаборЗаписей);
			Иначе
				НаборЗаписей = Движения.Найти(МетаданныеРегистра.Имя);
			КонецЕсли;
			
			Если НаборЗаписей = Неопределено Тогда
				НедостающиеДвижения.Добавить(МетаданныеРегистра.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
		
		Если НедостающиеДвижения.Количество() > 0 Тогда
			
			ДокументИсправление = "";
			Для Каждого ЭлементКоллекции Из Движения Цикл
				НаборЗаписей = ?(ДвиженияВСтруктуре, ЭлементКоллекции.Значение, ЭлементКоллекции);
				ДокументИсправление = НаборЗаписей.Отбор.Регистратор;
				Прервать;
			КонецЦикла;
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не выполняет движений по: %2
						   |как исправленный им документ %3'"),
				ДокументИсправление, Символы.ПС + СтрСоединить(НедостающиеДвижения, Символы.ПС), ИсправленныйДокумент);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из Движения Цикл
		
		Если ДвиженияВСтруктуре Тогда 
			НаборЗаписей = ЭлементКоллекции.Значение;
		Иначе 
			НаборЗаписей = ЭлементКоллекции;
		КонецЕсли;
			
		МетаданныеРегистра = НаборЗаписей.Метаданные();
		
		Если Не МетаданныеДвиженийИсправленногоДокумента.Содержит(МетаданныеРегистра)
			Или НаборЗаписей.ДополнительныеСвойства.Свойство("ИзолированоУчетом") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			
			СторнироватьДвиженияВРегистреНакопления(НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра);
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрРасчета(МетаданныеРегистра) Тогда
			
			Если ИсправлениеВТекущемПериоде Тогда
				Если МетаданныеРегистра.Имя = "Начисления" Тогда
					РегистрыРасчета[МетаданныеРегистра.Имя].СторнироватьДвиженияВТекущемПериоде(НаборЗаписей, ИсправленныйДокумент);
				ИначеЕсли МетаданныеРегистра.Имя = "Удержания" Тогда
					РегистрыРасчета[МетаданныеРегистра.Имя].СторнироватьДвижения(НаборЗаписей, ИсправленныйДокумент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сторнирует движения в регистрах накопления и расчета по всем известным учетам.
//
// Параметры:
//  Движения					 - КоллекцияДвижений, Структура	 - Коллекция движений, в которую будут добавлены сторно записи.
//  ИсправленныйДокумент		 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  ИсправлениеВТекущемПериоде	 - Булево						 - Истина если документ исправление проводится в том же периоде что и исправленный документ.
//  СтруктураВидовУчета			 - Структура					 - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//  					Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//
Процедура СторнироватьДвиженияПоВсемУчетам(Движения, ИсправленныйДокумент, ИсправлениеВТекущемПериоде = Ложь, СтруктураВидовУчета) Экспорт
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		УчетРабочегоВремениРасширенный.СторнироватьДниЧасыОтгуловСотрудников(Движения, ИсправленныйДокумент);
		УчетСтраховыхВзносовРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УчетНДФЛРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		ОтражениеЗарплатыВБухучетеРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УчетНачисленнойЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УчетПособийСоциальногоСтрахованияРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		УправлениеШтатнымРасписанием.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияБезСпецификиУчетов(Движения, ИсправленныйДокумент, ИсправлениеВТекущемПериоде);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку правильности заполнений реквизитов механизма исправления.
// Вызывается из ОбработкаПроверкиЗаполнения документа.
// Параметры:
//		Объект - документ
//		ПроверяемыеРеквизиты - проверяемые реквизиты документа.
//		Отказ - булево
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ИмяОсновногоРеквизита - по умолчанию "Объект".
//		ПолеОрганизация - по умолчанию "Организация".
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//		
Процедура ПроверитьЗаполнение(Объект, ПроверяемыеРеквизиты, Отказ, РежимИсправления = "РасчетЗарплаты", ПолеПериодРегистрации = "ПериодРегистрации") Экспорт
	
	Если РежимИсправления = "РасчетЗарплаты" Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПериодРегистрацииИсправленногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, ПолеПериодРегистрации);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПериодРегистрацииИсправленногоДокумента <> НеОпределено Тогда
			// Если допустимо исправление в текущем периоде
			Если ДокументыИсправляемыеВТекущемПериоде().Найти(Объект.Метаданные()) <> НеОпределено Тогда
				Если ПериодРегистрацииИсправленногоДокумента > Объект[ПолеПериодРегистрации] Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверно указан месяц. Месяц исправления должен быть больше или равен месяцу исправляемого документа (%1 г.)'"),
						Формат(ПериодРегистрацииИсправленногоДокумента, "ДФ='ММММ гггг'"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеПериодРегистрации,,Отказ);
				КонецЕсли;
			Иначе
				Если ПериодРегистрацииИсправленногоДокумента >= Объект[ПолеПериодРегистрации] Тогда
					ПериодРегистрацииПравильный = Ложь;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверно указан месяц. Месяц исправления должен быть больше месяца исправляемого документа (%1 г.)'"),
						Формат(ПериодРегистрацииИсправленногоДокумента, "ДФ='ММММ гггг'"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеПериодРегистрации,,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ИсправленныйДокумент", Объект.ИсправленныйДокумент);
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Проведен
			|	И ТаблицаДокумента.ИсправленныйДокумент = &ИсправленныйДокумент
			|	И ТаблицаДокумента.Ссылка <> &Ссылка";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", Объект.Метаданные().ПолноеИмя());
			
			ШаблонСообщения = НСтр("ru = 'Документ %1 уже исправлен документом %2'");
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.ИсправленныйДокумент, Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ИсправленныйДокумент",,Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет копирование документа.
//
// Параметры:
//  Приемник					 - Объект	 - Документ, в который копируются данные.
//  Источник					 - Ссылка	 - Документ, из которого копируются данные.
//  ИсключаемыеСвойства			 - Строка	 - Имена свойств, разделенные запятыми, которые необходимо исключить из заполнения.
//  ИсключаемыеТабличныеЧасти	 - Строка	 - Имена табличных частей, разделенные запятыми, которые необходимо исключить из заполнения.
//  ДанныеЗаполнения			 - Структура - Значение параметра процедуры ОбработкаЗаполнения, используется как основание для заполнения документа.
//
Процедура СкопироватьДокумент(Приемник, Источник, ИсключаемыеСвойства = "", ИсключаемыеТабличныеЧасти = "", ДанныеЗаполнения = Неопределено) Экспорт
	
	ДанныеДокумента = Источник.Скопировать();
	МетаданныеДокумента = Приемник.Метаданные();
	
	ЗаполнитьЗначенияСвойств(Приемник, ДанныеДокумента, , ИсключаемыеСвойства);
	
	Если ИсключаемыеТабличныеЧасти = "" Тогда
		ИменаИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		ИменаИсключаемыхТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеТабличныеЧасти, , , Истина);
	КонецЕсли;
	
	Для каждого ТабличнаяЧастьДокумента Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИменаИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧастьДокумента.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрокаДокумента Из Источник[ТабличнаяЧастьДокумента.Имя] Цикл
			НоваяСтрока = Приемник[ТабличнаяЧастьДокумента.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
		ИсправлениеВТекущемПериоде = Ложь;
	Иначе
		ИсправлениеВТекущемПериоде = ДанныеЗаполнения.Свойство("ДопустимоИсправлениеВТекущемПериоде")
			И ДанныеЗаполнения.ДопустимоИсправлениеВТекущемПериоде
			И ДокументыИсправляемыеВТекущемПериоде().Найти(МетаданныеДокумента) <> Неопределено;
	КонецЕсли;

	Если ИсправлениеВТекущемПериоде Тогда
		ДоначислитьЗарплатуПриНеобходимости = Ложь;
	Иначе
		ДоначислитьЗарплатуПриНеобходимости = Истина;
		
		// Период регистрации документа исправления необходимо увеличить.
		Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ИмяПериодРегистрации") Тогда
			ИмяПериодРегистрации = ДанныеЗаполнения.ИмяПериодРегистрации;
			ПериодРегистрацииИсправленногоДокумента = ДанныеЗаполнения.ПериодРегистрацииИсправленногоДокумента;
		Иначе
			МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации");
			Если МетаданныеРеквизита = Неопределено Тогда
				МетаданныеРеквизита = МетаданныеДокумента.Реквизиты.Найти("МесяцНачисления");
			КонецЕсли;
			
			Если МетаданныеРеквизита <> Неопределено Тогда
				ИмяПериодРегистрации = МетаданныеРеквизита.Имя;
				ПериодРегистрацииИсправленногоДокумента = ДанныеДокумента[ИмяПериодРегистрации];
			Иначе
				ИмяПериодРегистрации = Неопределено;
				ПериодРегистрацииИсправленногоДокумента = Дата(1, 1, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПериодРегистрации <> Неопределено Тогда
			Значения = Новый Структура("Месяц");
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(Значения);
			
			Приемник[ИмяПериодРегистрации] = Макс(ДобавитьМесяц(ПериодРегистрацииИсправленногоДокумента, 1), Значения.Месяц);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДоначислитьЗарплатуПриНеобходимости", ДоначислитьЗарплатуПриНеобходимости);
	
КонецПроцедуры

// Процедура создает таблицу со всеми документами входящими в цепочку исправления. 
// Т.е. допустим, что в параметре МассивСсылок передана ссылка на Документ_3, который является документом исправлением
// для Документ_2, а Документ_2 является исправлением для Документ_1. Результирующая таблица(две колонки: Ссылка и
// ИсправленныйДокумент) будет содержать следующие строки:
//	 Документ_3 - Документ_2
//	 Документ_3 - Документ_1
//
// Параметры:
//  МенеджерВременныхТаблиц	 - 	 МенеджерВременныхТаблиц в который будет помещена временная таблица ИмяВТ 
//  МассивСсылок			 - 	 массив ссылок на документы, по которым надо создать временную таблицу 
//  ИмяДокумента			 - 	 имя таблицы документа, например "Отпуск", "Увольнение" 
//  ИмяВТ					 - 	 имя результирующей таблицы. Если не задано, то используется строка: "ВТИсправленныеДокументы" + ИмяДокумента.
//
Процедура СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц, МассивСсылок, ИмяДокумента, ИмяВТ = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	НомерШага = 0;
	
	РезультатВыполненияШага = ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента);
	
	ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();

	Пока ЕстьИсправленные Цикл  
		
		НомерШага = НомерШага + 1;
		
		РезультатВыполненияШага = ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента);
		
		ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();
		
	КонецЦикла;

	ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента, ИмяВТ);
	
	УничтожитьВременныеТаблицыШаговПоиска(НомерШага, Запрос);
	
КонецПроцедуры

// Вызывается при проведении документа поддерживающего исправление.
// Выполняет необходимые проверки при проведении и сторнирование движений исправляемого документа по учетам.
//
// Параметры:
//  ДокументСсылка         - ДокументСсылка               - Документ исправление или документ, который сам может быть исправлен.
//  Движения               - КоллекцияДвижений, Структура - Коллекция движений документа в которую будут добавлены сторно стоки.
//  РежимПроведения        - РежимПроведенияДокумента     - Оперативный, неоперативный.
//  Отказ                  - Булево                       - Признак отказа от проведения документа.
//  РеквизитыДляПроведения - Структура                    - Значения реквизитов документа.
//    * ИсправленныйДокумент - ДокументСсылка - Исправленный документ.
//    * ПериодРегистрации    - Дата           - Период регистрации документа исправления.
//  СтруктураВидовУчета    - Структура                    - Виды учета, по которым будет выполнено сторнирование исправленного документа.
//    Состав полей см. в ПроведениеРасширенныйСервер.СтруктураВидовУчета().
//  Объект                 - ДокументОбъект               - Передается только при вызове из обработки проведения документа.
//  ИмяПериодРегистрации   - Строка                       - Имя реквизита содержащего период регистрации документа.
//  Результат              - Структура                    - Возвращаемое значение с полями:
//    * ИсправлениеВТекущемПериоде      - Булево - Истина если документ исправление проводится в том же периоде, что и исправленный документ.
//    * ИсправленныйДокументСторнирован - Булево - Истина если исправленный документ сторнирован собственной функцией СторнироватьПоУчетам.
//
Процедура ПриПроведенииИсправления(ДокументСсылка, Движения, РежимПроведения, Отказ, РеквизитыДляПроведения = Неопределено, СтруктураВидовУчета = Неопределено, Объект = Неопределено, ИмяПериодРегистрации = "ПериодРегистрации", Результат = Неопределено) Экспорт
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			Если ТипЗнч(ВидУчета.Значение) = Тип("Булево") Тогда
				СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВидовУчета.ПроведениеПоВсемУчетам Или СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		Сведения = СведенияОбИсправленииДокумента(ДокументСсылка);
		Если Сведения <> Неопределено Тогда
			// Перепроведение исправленных документов запрещено.
			ВызватьИсключение НСтр("ru = 'Проведение запрещено.'") + Символы.ПС + Сведения.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СторнированиеНачислений") Тогда
		ИмяИсправленныйДокумент = "СторнируемыйДокумент";
		ОтменаДокумента = Истина;
	Иначе
		ИмяИсправленныйДокумент = "ИсправленныйДокумент";
		ОтменаДокумента = Ложь;
	КонецЕсли;
	
	Если РеквизитыДляПроведения = Неопределено Тогда
		Если Объект = Неопределено Тогда
			Возврат;
		Иначе
			РеквизитыДляПроведения = Новый Структура();
			РеквизитыДляПроведения.Вставить(ИмяПериодРегистрации, Объект[ИмяПериодРегистрации]);
			РеквизитыДляПроведения.Вставить(ИмяИсправленныйДокумент, Объект[ИмяИсправленныйДокумент]);
		КонецЕсли;
	КонецЕсли;
	
	ИсправленныйДокумент = РеквизитыДляПроведения[ИмяИсправленныйДокумент];
	
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = СведенияОбИсправленииДокумента(ИсправленныйДокумент);
	Если Сведения <> Неопределено И Сведения.ДокументИсправление <> ДокументСсылка Тогда
		// Несколько одновременных исправлений одного и того же документа запрещено.
		ВызватьИсключение НСтр("ru = 'Проведение еще одного исправления запрещено.'") + Символы.ПС + Сведения.Представление;
	КонецЕсли;
	
	МетаданныеИсправленногоДокумента = ИсправленныйДокумент.Метаданные();
	
	Если Объект <> Неопределено И (СтруктураВидовУчета.ПроведениеПоВсемУчетам Или СтруктураВидовУчета.ОстальныеВидыУчета) Тогда
		ДоступноИсправлениеПериодическихСведений =
			Метаданные.ПодпискиНаСобытия.ПолучитьПрежнийИсправленный.Источник.СодержитТип(
				Тип("ДокументОбъект." + МетаданныеИсправленногоДокумента.Имя));
			
		Если ДоступноИсправлениеПериодическихСведений Тогда
			ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения, ДокументСсылка, ИсправленныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	ИсправлениеВТекущемПериодеВозможно = ДокументыИсправляемыеВТекущемПериоде().Найти(МетаданныеИсправленногоДокумента) <> Неопределено;
	
	Если ИсправлениеВТекущемПериодеВозможно Тогда
		
		Если ОтменаДокумента Тогда
			ПериодРегистрацииИсправленного = РеквизитыДляПроведения.ПериодРегистрацииСторнируемого;
		Иначе
			ИмяПериодРегистрацииИсправленного = ИмяПериодРегистрации;
			Если МетаданныеИсправленногоДокумента.Реквизиты.Найти(ИмяПериодРегистрацииИсправленного) = Неопределено Тогда
				ИмяПериодРегистрацииИсправленного = "МесяцНачисления";
			КонецЕсли;
			УстановитьПривилегированныйРежим(Истина);
			ПериодРегистрацииИсправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, ИмяПериодРегистрацииИсправленного);
		КонецЕсли;
		
		ИсправлениеВТекущемПериоде = ПериодРегистрацииИсправленного = РеквизитыДляПроведения[ИмяПериодРегистрации];
		
	Иначе
		ИсправлениеВТекущемПериоде = Ложь;
	КонецЕсли;
	
	Если ИсправлениеВТекущемПериодеВозможно И (Не ИсправлениеВТекущемПериоде) Тогда
		// Сброс признака исправления текущим периодом, на случай если ранее документ был исправлен текущим периодом.
		РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ИсправленныйДокумент);
	КонецЕсли;
	
	ПараметрыСторнирования = Новый Структура;
	ПараметрыСторнирования.Вставить("ИсправлениеВТекущемПериоде", ИсправлениеВТекущемПериоде);
	ПараметрыСторнирования.Вставить("ОтменаДокумента", ОтменаДокумента);
	ПараметрыСторнирования.Вставить("ПериодРегистрации", РеквизитыДляПроведения[ИмяПериодРегистрации]);
	ПараметрыСторнирования.Вставить("РеквизитыДляПроведения", РеквизитыДляПроведения);
	
	Если ОтменаДокумента Тогда
		ИсправленныйДокументСторнирован = Ложь;
	Иначе
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсправленногоДокумента.ПолноеИмя());
		ИсправленныйДокументСторнирован = МенеджерДокумента.СторнироватьПоУчетам(
			Движения, ДокументСсылка, ИсправленныйДокумент, СтруктураВидовУчета, ПараметрыСторнирования);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИсправлениеВТекущемПериоде", ИсправлениеВТекущемПериоде);
	Результат.Вставить("ИсправленныйДокументСторнирован", ИсправленныйДокументСторнирован);
КонецПроцедуры

Функция ДокументыИсправляемыеВТекущемПериоде() Экспорт
	
	ДокументыИсправляемыеВТекущемПериоде = Новый Массив;
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументИсправляемыйВТекущемПериоде.Тип.Типы() Цикл
		ДокументыИсправляемыеВТекущемПериоде.Добавить(Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	Возврат ДокументыИсправляемыеВТекущемПериоде;
	
КонецФункции

Функция ЭтоИсправлениеТекущимПериодом(ДанныеДокументаИсправления, ИсправляемыйДокумент, ИмяПоляПериодРегистрации) Экспорт
	Если Не ЗначениеЗаполнено(ИсправляемыйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	ПериодРегистрацииИсправляемогоДокумента =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, ИмяПоляПериодРегистрации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеДокументаИсправления[ИмяПоляПериодРегистрации] = ПериодРегистрацииИсправляемогоДокумента;	
КонецФункции	

// Получает первый документ в цепочке исправлений по переданой ссылке на документ
// Параметры: 
//	ИсходныйДокумент - ссылка
// Возвращаемое значение: 
//	Ссылка на первый документ цепочки исправлений (того же типа, что и ИсходныйДокумент)
//	Если ИсходныйДокумент не является исправлением, возвращается ссылка на него.
// 
// см. также СоздатьВТИсправленныеДокументы
Функция ПервыйДокументЦепочкиИсправлений(ИсходныйДокумент) Экспорт
	ИсправленныйДокумент = ИсходныйДокумент;
	Пока Истина Цикл
		ТекущийИсправленныйДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, "ИсправленныйДокумент");
		Если ЗначениеЗаполнено(ТекущийИсправленныйДокумент) Тогда
			ИсправленныйДокумент = ТекущийИсправленныйДокумент;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ИсправленныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТШага0
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТШага0.Ссылка
	|ИЗ
	|	ВТШага0 КАК ВТШага0
	|ГДЕ
	|	ВТШага0.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокумента#", ИмяДокумента);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента)
	
	ТекстЗапросаШага = 
	"ВЫБРАТЬ
	|	ТаблицаПредыдущегоШага.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ТаблицаТекущегоШага#
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТШага# КАК ТаблицаПредыдущегоШага
	|		ПО Документ.Ссылка = ТаблицаПредыдущегоШага.ИсправленныйДокумент
	|ГДЕ
	|	Документ.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаШага.Ссылка
	|ИЗ
	|	#ТаблицаТекущегоШага# КАК ТаблицаШага";
	
	ТекстЗапросаШага = СтрЗаменить(ТекстЗапросаШага, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапросаШага;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТШага#", "ВТШага" + Строка(НомерШага - 1));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаТекущегоШага#", "ВТШага" + НомерШага);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ = Неопределено)
	
	ИмяВТИсправленныеДокументы = ИмяВТ;
	
	Если ИмяВТИсправленныеДокументы = Неопределено Тогда
		ИмяВТИсправленныеДокументы = "ВТИсправленныеДокументы" + ИмяДокумента;
	КонецЕсли;
	
	Возврат ИмяВТИсправленныеДокументы;

КонецФункции

Функция ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(Знач НомерШага, Запрос, ИмяДокумента, ИмяВТ)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТШага.Ссылка,
	|	ВТШага.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ИмяВТ#
	|ИЗ
	|	ВТШага0 КАК ВТШага";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ#", ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ));
	
	ТекстЗапроса = " 
	|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ВТШага.Ссылка, ВТШага.ИсправленныйДокумент ИЗ #ВТШага# КАК ВТШага";
	
	Пока НомерШага > 0 Цикл
		
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	Запрос.Выполнить();

КонецФункции 

Функция УничтожитьВременныеТаблицыШаговПоиска(Знач НомерШага, Запрос)
	
	Запрос.Текст = "";
	
	ТекстЗапроса = "Уничтожить #ВТШага#;";
	
	Пока НомерШага >= 0 Цикл
			
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст);
	
	Запрос.Выполнить();

КонецФункции 

// Обработчик подписки на событие "ОтменитьИсправлениеВТекущемПериоде".
//
Процедура ОтменитьИсправлениеВТекущемПериоде(Источник, Отказ) Экспорт
	
	ИмяРеквизита = "ИсправленныйДокумент";
	Если Источник.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		ИмяРеквизита = "СторнируемыйДокумент";
	КонецЕсли;
	
	ИсправленныйДокумент = Источник[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыплатаПроизводилась(Организация, ДокументОснование, ПериодВзаиморасчетов) Экспорт
	
	Если ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрированаНачисленнаяЗарплатаДокументом(ДокументОснование) Тогда
		// Движения по документу были, значит определим была ли по этому документу выплата
		Возврат ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрированаВыплаченнаяЗарплатаПоДокументу(ДокументОснование);
	Иначе
		// Движений по документу не было, значит определим была ли выплата по периоду
		Возврат ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрированаВыплаченнаяЗарплатаЗаПериод(Организация, ПериодВзаиморасчетов);
	КонецЕсли;
	
КонецФункции

Функция ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации) Экспорт
	
	БылоОтражениеЗарплатыВБухучете = Ложь;
	
	ИмяДокументаОтраженияВБухучете = Неопределено;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизацийРасширенная") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизацийРасширенный");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	// Если имя документа удалось выяснить, выполняем запрос.
	Если ИмяДокументаОтраженияВБухучете <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#ИмяДокументаОтраженияВБухучете КАК ОтражениеЗарплатыВБухучете
			|ГДЕ
			|	ОтражениеЗарплатыВБухучете.Организация = &Организация
			|	И ОтражениеЗарплатыВБухучете.Проведен
			|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации = &ПериодРегистрации";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокументаОтраженияВБухучете", ИмяДокументаОтраженияВБухучете);
		
		УстановитьПривилегированныйРежим(Истина);
		БылоОтражениеЗарплатыВБухучете = Не Запрос.Выполнить().Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат БылоОтражениеЗарплатыВБухучете;
	
КонецФункции

Функция СведенияОбИсправленииДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документы.Дата КАК Дата,
		|	Документы.Номер КАК Номер,
		|	ИсправляющиеДокументы.Дата КАК ДатаИсправления,
		|	ИсправляющиеДокументы.Номер КАК НомерИсправления,
		|	ИсправляющиеДокументы.Ссылка КАК СсылкаИсправления
		|ИЗ
		|	#Таблица КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #Таблица КАК ИсправляющиеДокументы
		|		ПО (Документы.Ссылка = &Ссылка)
		|			И (ИсправляющиеДокументы.Проведен)
		|			И Документы.Ссылка = ИсправляющиеДокументы.ИсправленныйДокумент");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", МетаданныеДокумента.ПолноеИмя());
	Если МетаданныеДокумента.Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсправляющиеДокументы.ИсправленныйДокумент", "ИсправляющиеДокументы.СторнируемыйДокумент");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ №%1 от %2 исправлен документом №%3 от %4.'"),
			Выборка.Номер, Выборка.Дата,
			Выборка.НомерИсправления, Выборка.ДатаИсправления);
			
		Результат = Новый Структура();
		Результат.Вставить("ДокументИсправление", Выборка.СсылкаИсправления);
		Результат.Вставить("Представление", Представление);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
