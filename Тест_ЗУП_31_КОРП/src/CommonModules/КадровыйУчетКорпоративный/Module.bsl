
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные о доступности пользователей. Работает на указанный период.
//
// Параметры:
//	СписокПользователей	- Массив ссылок на элементы справочника Пользователи или 
//						- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* Пользователь  - СправочникСсылка.Пользователи.
//		* ДатаНачала - Дата - дата начала состояния занятости.
//		* ДатаОкончания - Дата - дата окончания состояния занятости.
//		* Доступен - Булево.
//
Функция ДоступностьПользователей(Пользователи, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, 
		Пользователи, 
		НачалоПериода, 
		ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКомпании.Сотрудник КАК Сотрудник,
	|	&НачалоПериода КАК ДатаНачала,
	|	&КонецПериода КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериодыСостояний
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиКомпании";
	
	Запрос.Выполнить();
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыСостояний");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиПользователей.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Начало ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Начало
	|		ИНАЧЕ &НачалоПериода
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Окончание ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Окончание
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК ДатаОкончания,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПериодыСостоянийСотрудников.Сотрудник ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Доступен
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО СотрудникиПользователей.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник
	|			И (НЕ ПериодыСостоянийСотрудников.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа), ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиПользователей.Пользователь,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Начало ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Начало
	|		ИНАЧЕ &НачалоПериода
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыСостоянийСотрудников.Окончание ЕСТЬ NULL
	|			ТОГДА ПериодыСостоянийСотрудников.Окончание
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает данные о рабочих днях пользователя.
//
// Параметры:
//	Пользователь	- СправочникСсылка.Пользователи.
//	ЗаполняемыеГода	- Массив - массив лет, подлежащих заполнению.
//	ДатаЗаполнения	- Дата - дата получения данных о рабочих днях.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* Дата - Дата - дата в году.
//		* Рабочий - Булево.
//
Функция РабочиеДниПользователя(Пользователь, Знач ЗаполняемыеГода, Знач ДатаЗаполнения) Экспорт
	
	РабочиеДни = Новый ТаблицаЗначений();
	РабочиеДни.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	РабочиеДни.Колонки.Добавить("Рабочий", Новый ОписаниеТипов("Булево"));
	
	ОсновныеСотрудники = ОсновныеСотрудникиПользователей(Пользователь, ДатаЗаполнения);
	
	Если ОсновныеСотрудники.Количество() <> 0 Тогда
		
		Сотрудник = ОсновныеСотрудники[0].Сотрудник;
		
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
		
		Для Каждого Год Из ЗаполняемыеГода Цикл
			
			Для НомерМесяца = 1 По 12 Цикл
				
				СтрокаТаблицы = ТаблицаСотрудников.Добавить();
				СтрокаТаблицы.Сотрудник = Сотрудник;
				СтрокаТаблицы.ПериодРегистрации = ДатаЗаполнения;
				СтрокаТаблицы.Месяц = Дата(Год, НомерМесяца, 1);
				СтрокаТаблицы.ДатаНачала = СтрокаТаблицы.Месяц;
				СтрокаТаблицы.ДатаОкончания = КонецМесяца(СтрокаТаблицы.Месяц);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.Месяц,
		|	ТаблицаСотрудников.ДатаНачала,
		|	ТаблицаСотрудников.ДатаОкончания,
		|	ТаблицаСотрудников.ПериодРегистрации КАК ДатаАктуальности
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
		Запрос.Выполнить();
		
		ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
		
		УстановитьПривилегированныйРежим(Истина);
		УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.УстановитьПараметр("ВидыРабочегоВремени", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановоеВремя.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ПлановоеВремя.ВидУчетаВремени В (&ВидыРабочегоВремени)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Рабочий
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(РабочиеДни.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РабочиеДни;
	
КонецФункции

// Возвращает данные о занятости пользователя на неделе.
//
// Параметры:
//	Пользователь	- СправочникСсылка.Пользователи.
//	ДатаЗаполнения	- Дата - дата получения данных о рабочих днях.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* ДеньНедели - Число.
//		* ВремяНачала - время начала работы.
//		* ВремяОкончания - время окончания работы.
//
Функция ЗанятостьПользователяНаНеделе(Пользователь, Знач ДатаЗаполнения) Экспорт
	
	ЗанятостьНаНеделе = Новый ТаблицаЗначений();
	ЗанятостьНаНеделе.Колонки.Добавить("ДеньНедели", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ЗанятостьНаНеделе.Колонки.Добавить("Рабочий", Новый ОписаниеТипов("Булево"));
	ЗанятостьНаНеделе.Колонки.Добавить("ВремяНачала", Новый ОписаниеТипов("Дата"));
	ЗанятостьНаНеделе.Колонки.Добавить("ВремяОкончания", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиПользователей(Запрос.МенеджерВременныхТаблиц, Пользователь, ДатаЗаполнения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ГрафикиПользователей.Пользователь КАК Пользователь,
	|	ГрафикиПользователей.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафиковРаботыСотрудников.ПоНеделям)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаполняетсяПоНеделям
	|ИЗ
	|	ВТГрафикиПользователей КАК ГрафикиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ГрафикиПользователей.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРабочихЧасах.НомерДняЦикла КАК НомерДняЦикла,
	|	ДанныеОРабочихЧасах.Часов КАК Часов,
	|	ДанныеОРабочихЧасах.Ссылка КАК ГрафикРаботы
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников.ДанныеОРабочихЧасах КАК ДанныеОРабочихЧасах
	|ГДЕ
	|	ДанныеОРабочихЧасах.Ссылка В
	|			(ВЫБРАТЬ
	|				ГрафикиПользователей.ГрафикРаботы КАК ГрафикРаботы
	|			ИЗ
	|				ВТГрафикиПользователей КАК ГрафикиПользователей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерДняЦикла";
	
	Результаты = Запрос.ВыполнитьПакет();
	МаксИндекс = Результаты.ВГраница();
	
	ВыбораПользователей = Результаты[МаксИндекс - 1].Выбрать();
	ВыбораДанныхГрафиков = Результаты[МаксИндекс].Выбрать();
	
	Если ВыбораПользователей.Следующий() 
		И ВыбораПользователей.ЗаполняетсяПоНеделям Тогда
		
		ПустаяДата = Дата(1, 1, 1);
		ВремяС = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ОтображатьВремяС");
		Если ЗначениеЗаполнено(ВремяС) Тогда
			ВремяНачала = ?(ЗначениеЗаполнено(ВремяС), ВремяС * 3600, Неопределено);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ГрафикРаботы", ВыбораПользователей.ГрафикРаботы);
		Пока ВыбораДанныхГрафиков.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если ВыбораДанныхГрафиков.Часов > 0 Тогда
				
				Если ЗначениеЗаполнено(ВремяНачала) Тогда
					ВремяОкончания = ВремяНачала + ВыбораДанныхГрафиков.Часов * 3600;
				Иначе
					ВремяОкончания = 86400;
				КонецЕсли;
				
				Занятость = ЗанятостьНаНеделе.Добавить();
				Занятость.ДеньНедели = ВыбораДанныхГрафиков.НомерДняЦикла;
				Занятость.ВремяНачала = ПустаяДата + ВремяНачала;
				Занятость.ВремяОкончания = ПустаяДата + ВремяОкончания;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗанятостьНаНеделе;
	
КонецФункции

// Возвращает регистраторы отсутствий пользователя за указанный период.
//
// Параметры:
//	Пользователь		- СправочникСсылка.Пользователи.
//	НачалоПериода		- Дата - дата, с которой выполняется проверка.
//	ОкончаниеПериода	- Дата - дата, до которой выполняется проверка.
//
// Возвращаемое значение:
//	Массив - коллекция ссылок на документы.
//
Функция ОтсутствияПользователя(Пользователь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, 
		Пользователь, 
		НачалоПериода, 
		ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСотрудника.ОтпускОсновной);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СотрудникиКомпании.Сотрудник КАК Сотрудник,
	|	&Состояние КАК Состояние,
	|	&НачалоПериода КАК Начало,
	|	&КонецПериода КАК Окончание
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК СотрудникиКомпании";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныеДанные = Запрос.Выполнить().Выгрузить();
	Регистратор = Документы.Отпуск.ПустаяСсылка();
	
	Отсутствия = Новый Массив;
	ДанныеПроверки = СостоянияСотрудников.ПроверитьПересечениеПериодовОтсутствия(ИсходныеДанные, Регистратор);
	
	Если Не ДанныеПроверки.Отказ Тогда
		
		Для Каждого КлючИЗначение Из ДанныеПроверки.ДанныеСотрудников Цикл
			Отсутствия.Добавить(КлючИЗначение.Значение.Регистратор);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(Отсутствия);
		
	КонецЕсли;
	
	Возврат Отсутствия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу значений содержащую поля Пользователь и Сотрудник. Сотрудник отбирается по принципам:
//	- Работает на указанный период.
//	- Выбирается сотрудник, работающий в структурном подразделении, указанном для пользователя.
//	- Если соответствия нет, то выбирается основной сотрудник в первой из организаций. Принцип выбора см. в описании 
//		процедуры КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц.
//
// Параметры:
//	СписокПользователей	- Массив ссылок на элементы справочника Пользователи или 
//						- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо.
//
Функция ОсновныеСотрудникиПользователей(СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода);
	
	УстановитьПривилегированныйРежим(Истина);
	ОсновныеСотрудникиПользователей = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеСотрудникиПользователей;
	
КонецФункции

// Формирует временную таблицу содержащую поля Пользователь и Сотрудник. Сотрудник отбирается по принципам:
//	- Работает на указанный период.
//	- Выбирается сотрудник, работающий в структурном подразделении, указанном для пользователя.
//	- Если соответствия нет, то выбирается основной сотрудник в первой из организаций. Принцип выбора см. в описании 
//		процедуры КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	СписокПользователей		- Массив ссылок на элементы справочника Пользователи или 
//							- СправочникСсылка.Пользователи
//	НачалоПериода			- Дата
//	ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//								получены на дату НачалоПериода.
//
Процедура СоздатьВТОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода);
	
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТОсновныеСотрудникиПользователей");
	
КонецПроцедуры

// Формирует временную таблицу содержащую поля Пользователь и ГрафикРаботы. График работы соответствует кадровым данным
//сотрудника пользователя. Принцип выбора сотрудника см. в описании процедуры ОсновныеСотрудникиПользователей.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	СписокПользователей		- Массив ссылок на элементы справочника Пользователи или 
//							- СправочникСсылка.Пользователи
//	Период					- Дата
//
Процедура СоздатьВТГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период);
	
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТГрафикиПользователей");
	
КонецПроцедуры

Функция ЗапросОсновныеСотрудникиПользователей(МенеджерВременныхТаблиц, СписокПользователей, НачалоПериода, ОкончаниеПериода = '00010101')
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокПользователей", СписокПользователей);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Пользователи.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&СписокПользователей)
	|	И Пользователи.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолучения.КадровыеДанные = "ОсновноеРабочееМестоВОрганизации,ФизическоеЛицо,МестоВСтруктуреПредприятия";
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолучения.НачалоПериода = НачалоПериода;
	ПараметрыПолучения.ОкончаниеПериода = ОкончаниеПериода;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СотрудникиОрганизации.Сотрудник) КАК Сотрудник,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОсновныеРабочиеМеста
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	СотрудникиОрганизации.ОсновноеРабочееМестоВОрганизации
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизации.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Подразделение КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА СотрудникиОрганизации.Сотрудник ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КолВоРабочихМест
	|ПОМЕСТИТЬ ВТВсегоРабочихМестФизическихЛиц
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ФизическиеЛица.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.Подразделение,
	|	ФизическиеЛица.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.КолВоРабочихМест > 1
	|				И ФизическиеЛица.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИскатьПоСтруктуреПредприятия,
	|	ОсновныеРабочиеМеста.Сотрудник КАК ОсновноеРабочееМесто
	|ПОМЕСТИТЬ ВТПараметрыОтбораОсновныхСотрудников
	|ИЗ
	|	ВТВсегоРабочихМестФизическихЛиц КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеРабочиеМеста КАК ОсновныеРабочиеМеста
	|		ПО ФизическиеЛица.ФизическоеЛицо = ОсновныеРабочиеМеста.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеРабочиеМеста
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсегоРабочихМестФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыОтбораОсновныхСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПараметрыОтбораОсновныхСотрудников.ИскатьПоСтруктуреПредприятия
	|				И НЕ СотрудникиВСтруктуреПредприятия.Сотрудник ЕСТЬ NULL
	|			ТОГДА СотрудникиВСтруктуреПредприятия.Сотрудник
	|		ИНАЧЕ СотрудникиОрганизации.Сотрудник
	|	КОНЕЦ КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиКомпании
	|ИЗ
	|	ВТПараметрыОтбораОсновныхСотрудников КАК ПараметрыОтбораОсновныхСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ПараметрыОтбораОсновныхСотрудников.ОсновноеРабочееМесто = СотрудникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиВСтруктуреПредприятия
	|		ПО ПараметрыОтбораОсновныхСотрудников.ФизическоеЛицо = СотрудникиВСтруктуреПредприятия.ФизическоеЛицо
	|			И ПараметрыОтбораОсновныхСотрудников.Подразделение = СотрудникиВСтруктуреПредприятия.МестоВСтруктуреПредприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПараметрыОтбораОсновныхСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА СотрудникиКомпании.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|		ИНАЧЕ СотрудникиКомпании.Сотрудник
	|	КОНЕЦ КАК Сотрудник
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКомпании КАК СотрудникиКомпании
	|		ПО ФизическиеЛица.ФизическоеЛицо = СотрудникиКомпании.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиКомпании";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросГрафикиПользователей(МенеджерВременныхТаблиц, СписокПользователей, Период)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиПользователей(Запрос.МенеджерВременныхТаблиц, СписокПользователей, Период);
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеСотрудникиПользователей.Сотрудник,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК ОсновныеСотрудникиПользователей";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ГрафикРаботы";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, КадровыеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеСотрудникиПользователей.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) КАК ГрафикРаботы
	|ИЗ
	|	ВТОсновныеСотрудникиПользователей КАК ОсновныеСотрудникиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ОсновныеСотрудникиПользователей.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Возврат Запрос;
	
КонецФункции

#Область Увольнение

Процедура УвольнениеДополнитьФорму(Форма, ОтложенноеИзменение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтложенноеИзменение Тогда
		ДобавлятьЭлементыФормы = Ложь;
		ДобавлятьРеквизитыФормы = Истина;
	Иначе
		ДобавлятьЭлементыФормы = Истина;
		ДобавлятьРеквизитыФормы = Ложь;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя", Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя", Новый ОписаниеТипов("Булево")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		КомпенсацияПриУвольненииГруппа = Форма.Элементы.Найти("КомпенсацияПриУвольненииГруппа");
		
		ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = "ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении";
		ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Форма.Элементы.Найти(ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении);
		Если ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Неопределено Тогда
			
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении = Форма.Элементы.Добавить(
				ИмяЭлементаВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппа);
			
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.ПутьКДанным = "Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении";
			ЭлементВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольненииПриИзменении");
			
		КонецЕсли;
		
		ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная = "КомпенсацияПриУвольненииГруппаГоризонтальная";
		КомпенсацияПриУвольненииГруппаГоризонтальная = Форма.Элементы.Найти(ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная);
		Если КомпенсацияПриУвольненииГруппаГоризонтальная = Неопределено Тогда
			
			КомпенсацияПриУвольненииГруппаГоризонтальная = Форма.Элементы.Добавить(
				ИмяЭлементаКомпенсацияПриУвольненииГруппаГоризонтальная, Тип("ГруппаФормы"), КомпенсацияПриУвольненииГруппа);
			
			КомпенсацияПриУвольненииГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			КомпенсацияПриУвольненииГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
			КомпенсацияПриУвольненииГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ИмяЭлементаДатаУведомленияОбУвольнении = "ДатаУведомленияОбУвольнении";
			ДатаУведомленияОбУвольнении = Форма.Элементы.Добавить(ИмяЭлементаДатаУведомленияОбУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			ДатаУведомленияОбУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			ДатаУведомленияОбУвольнении.Заголовок = НСтр("ru='Дата уведомления'");
			ДатаУведомленияОбУвольнении.ПутьКДанным = "Объект.ДатаУведомленияОбУвольнении";
			ДатаУведомленияОбУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_ДатаУведомленияОбУвольнении");
			
			ИмяЭлементаДатаУведомленияОбУвольнении = "КоличествоДнейЧасовКомпенсацииПриУвольнении";
			КоличествоДнейЧасовКомпенсацииПриУвольнении = Форма.Элементы.Добавить(ИмяЭлементаДатаУведомленияОбУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			КоличествоДнейЧасовКомпенсацииПриУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			КоличествоДнейЧасовКомпенсацииПриУвольнении.КнопкаРегулирования = Истина;
			КоличествоДнейЧасовКомпенсацииПриУвольнении.Заголовок = НСтр("ru='Компенсировать'");
			КоличествоДнейЧасовКомпенсацииПриУвольнении.ПутьКДанным = "Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении";
			КоличествоДнейЧасовКомпенсацииПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_КоличествоДнейЧасовКомпенсацииПриУвольнении");
			
			ИмяЭлементаНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = "НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя";
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = Форма.Элементы.Добавить(ИмяЭлементаНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.Вид = ВидПоляФормы.ПолеНадписи;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.Ширина = 4;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.РастягиватьПоГоризонтали = Ложь;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.РастягиватьПоВертикали = Ложь;
			НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя.ПутьКДанным = "НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя";
			
			ИмяЭлементаКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении";
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = Форма.Элементы.Добавить(ИмяЭлементаКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении, Тип("ПолеФормы"), КомпенсацияПриУвольненииГруппаГоризонтальная);
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.Вид = ВидПоляФормы.ПолеВвода;
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПутьКДанным = "Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении";
			КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.УстановитьДействие(
				"ПриИзменении", "Подключаемый_КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗавершитьИнициализациюФормы(Форма, НовыйДокумент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	КадровыйУчетКорпоративныйКлиентСервер.УвольнениеУстановитьВидимостьПолейВводаКомпенсацииНеотработанныхДней(Форма);
	УвольнениеУстановитьНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя(Форма);
	
КонецПроцедуры

Процедура УвольнениеОбновитьФормуПоВидуДоговора(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы =
		Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении);
	
	ИспользоватьГосударственнуюМуниципальнуюСлужбу = ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьМуниципальнуюСлужбу");
	Если ИспользоватьГосударственнуюМуниципальнуюСлужбу Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Объект.ВидДоговора);
		Иначе
			ЭтоГосслужащий = Ложь;
		КонецЕсли;
		
		Если ЭтоГосслужащий Тогда
			ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего); 
		КонецЕсли;
		
		ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = Элементы.Найти("КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		Если ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении <> Неопределено Тогда
			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(ПараметрВыбораКомпенсацииЗаНеотработанныеДниЧасы);
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВАрхиве", Ложь));
			
			ЭлементКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.ПараметрыВыбора =
				Новый ФиксированныйМассив(МассивПараметровВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеПроверкаЗаполненияПриРасчете(Форма, Отказ, ВыводитьСообщения, ОграниченияНаУровнеЗаписей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаУведомленияОбУвольнении) Тогда
			
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата уведомления об увольнении'"),,"Объект.ДатаУведомленияОбУвольнении");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
			
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета компенсации за неотработанные дни'"), , "Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗаполнитьНачислениеКомпенсацииЗаНеотработанноеВремя(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Не ЗначениеЗаполнено(Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
				ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Объект.ВидДоговора);
			Иначе
				ЭтоГосслужащий = Ложь;
			КонецЕсли;
			
			Если ЭтоГосслужащий Тогда
				КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего;
			Иначе
				КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении;
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
				Форма, Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении, КатегорияНачисления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейЧасовКомпенсацииПриУвольнении(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МесяцДатыУведомления = НачалоМесяца(Объект.ДатаУведомленияОбУвольнении);
		ПоложеннаяДатаУвольнения = ДобавитьМесяц(КонецДня(Объект.ДатаУведомленияОбУвольнении) + 1, 2);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
			Запрос.МенеджерВременныхТаблиц, МесяцДатыУведомления, ПоложеннаяДатаУвольнения);
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
		Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
		
		Запрос.УстановитьПараметр("ПоложеннаяДатаУвольнения", ПоложеннаяДатаУвольнения);
		
		Запрос.УстановитьПараметр("ДатаУведомления", Объект.ДатаУведомленияОбУвольнении);
		Запрос.УстановитьПараметр("ДатаУвольнения", Объект.ДатаУвольнения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Сотрудник КАК Сотрудник,
			|	Периоды.Период КАК Месяц,
			|	ВЫБОР
			|		КОГДА Периоды.Период < &ДатаУведомления
			|			ТОГДА &ДатаУведомления
			|		ИНАЧЕ Периоды.Период
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ) > &ПоложеннаяДатаУвольнения
			|			ТОГДА &ПоложеннаяДатаУвольнения
			|		ИНАЧЕ КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
			|	КОНЕЦ КАК ДатаОкончания,
			|	&ПериодРегистрации КАК ДатаАктуальности
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	ВТПериоды КАК Периоды";
		
		Запрос.Выполнить();
		
		ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
		
		ПараметрыПолученияДанных.НеУчитываемыеРегистраторы.Добавить(Форма.СсылкаНаОбъект);
		Если ЗначениеЗаполнено(Форма.СсылкаНаИсправленныйДокумент) Тогда
			ПараметрыПолученияДанных.НеУчитываемыеРегистраторы.Добавить(Форма.СсылкаНаИсправленныйДокумент);
		КонецЕсли;
		
		УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
		
		Запрос.УстановитьПараметр("ВидыРабочегоВремени", УчетРабочегоВремениРасширенный.ВидыВремениВключаемыеВНорму());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановоеВремя.Дата КАК Дата,
			|	МАКСИМУМ(ПлановоеВремя.ДниПлан) КАК ДниПлан,
			|	СУММА(ПлановоеВремя.ЧасыПлан) КАК ЧасыПлан
			|ПОМЕСТИТЬ ВТРабочиеДни
			|ИЗ
			|	ВТПлановоеВремя КАК ПлановоеВремя
			|ГДЕ
			|	ПлановоеВремя.ВидУчетаВремени В(&ВидыРабочегоВремени)
			|	И ПлановоеВремя.Дата > &ДатаУвольнения
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановоеВремя.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(РабочиеДни.ДниПлан) КАК ДниПлан,
			|	СУММА(РабочиеДни.ЧасыПлан) КАК ЧасыПлан
			|ИЗ
			|	ВТРабочиеДни КАК РабочиеДни";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Форма.ИспользуетсяСреднечасовойЗаработок Тогда
				Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении = Выборка.ЧасыПлан;
			Иначе
				Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении = Выборка.ДниПлан;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеЗаполнитьКомпенсациюЗаНеотработанноеВремя(Форма, ТаблицаНачислений, МенеджерРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Если Объект.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
		
		Если Форма.РассчитатьДнейЧасовКомпенсацииЗаНеотработанноеВремя Тогда
			ЗаполнитьКоличествоДнейЧасовКомпенсацииПриУвольнении(Форма);
		КонецЕсли;
		
		Если Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении > 0 Тогда
			
			ДатаКомпенсации = НачалоДня(Объект.ДатаУвольнения);
			Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
				ДатаКомпенсации = НачалоДня(Объект.ПериодРегистрации);
			КонецЕсли;
			
			НовыйИнтервал = ТаблицаНачислений.Добавить();
			НовыйИнтервал.Сотрудник = Объект.Сотрудник;
			НовыйИнтервал.Начисление = Объект.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении;
			НовыйИнтервал.ДатаНачала = ДатаКомпенсации;
			НовыйИнтервал.ДатаОкончания	= ДатаКомпенсации;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
				ЭтоГосслужащий = МодульГосударственнаяСлужба.ВидДоговораГосударственнойСлужбы(Форма, Объект.ВидДоговора);
			Иначе
				ЭтоГосслужащий = Ложь;
			КонецЕсли;
			
			Если ЭтоГосслужащий Тогда
				
				ПоказательВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейКомпенсацииЗаНеотработанноеВремяПриУвольнении");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательВремени, Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении);
				
				ПоказательМесячноеДенежноеСодержание = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесячноеДенежноеСодержание");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательМесячноеДенежноеСодержание, Объект.МесячноеДенежноеСодержание);
				
			Иначе
				
				ПоказательВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовКомпенсацииЗаНеотработанноеВремяПриУвольнении");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательВремени, Объект.КоличествоДнейЧасовКомпенсацииПриУвольнении);
				
				ПоказательСреднийЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(НовыйИнтервал, ПоказательСреднийЗаработок, Объект.СреднийЗаработокВыходногоПособия);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УвольнениеУстановитьНадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ИспользуетсяСреднечасовойЗаработок Тогда
		Форма.НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = НСтр("ru='дн.'");
	Иначе
		Форма.НадписьДнейЧасовКомпенсацииЗаНеотработанноеВремя = НСтр("ru='час.'");
	КонецЕсли;
	
КонецПроцедуры

#Область УвольнениеОбработкаПроверкиЗаполнения

Процедура УвольнениеОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, ПраваНаДокумент) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		
		Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаУведомленияОбУвольнении");
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаУведомленияОбУвольнении");
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	УвольнениеПроверитьЗаполнениеКомпенсацийДнейЧасовПриУвольнении(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент);
	
КонецПроцедуры

Процедура УвольнениеПроверитьЗаполнениеКомпенсацийДнейЧасовПриУвольнении(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДатаУведомленияОбУвольнении");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
		
		ТекстСообщенияДатаУведомленияОбУвольнении = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""'");
		ПутьКПолюДатаУведомленияОбУвольнении = "Объект.Сотрудники[%1].ДатаУведомленияОбУвольнении";
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаУведомленияОбУвольнении");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении");
		
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
		
		ТекстСообщенияДатаУведомленияОбУвольнении = НСтр("ru='Поле ""%1"" не заполнено'");
		ПутьКПолюДатаУведомленияОбУвольнении = "Объект.ДатаУведомленияОбУвольнении";
		
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.Увольнение;
	СинонимДатаУведомленияОбУвольнении = МетаданныеДокумента.Реквизиты.ДатаУведомленияОбУвольнении.Синоним;
	СинонимКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении = МетаданныеДокумента.Реквизиты.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении.Синоним;
	
	Для ИндексЭлементаКоллекции = 0 По ПроверяемаяКоллекция.Количество() - 1 Цикл
		
		ЭлементКоллекции = ПроверяемаяКоллекция[ИндексЭлементаКоллекции];
		Если ЭлементКоллекции.ВыплачиватьКомпенсациюНеотработанныхДнейЧасовПриУвольнении Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.ДатаУведомленияОбУвольнении) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении,
					СинонимДатаУведомленияОбУвольнении,
					ЭлементКоллекции.Сотрудник);
				
				ПутьКПолю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении, ИндексЭлементаКоллекции);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
			Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
				И Не ЗначениеЗаполнено(ЭлементКоллекции.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияДатаУведомленияОбУвольнении,
					СинонимКомпенсацияЗаНеотработанныеДниЧасыПриУвольнении,
					ЭлементКоллекции.Сотрудник);
				
				ПутьКПолю = СтрШаблон(ТекстСообщенияДатаУведомленияОбУвольнении, ИндексЭлементаКоллекции);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

