
#Область ПрограммныйИнтерфейс

// Инициализирует выгрузку.
//
// Параметры:
//   АдресПриложения - Строка - url приложения.
//   Логин - Строка - логин пользователя с полными правами в этом приложении.
//   Пароль - Строка - пароль пользователя.
//
Процедура НачатьВыгрузку(АдресПриложения, Логин, Пароль) Экспорт
	
	Результат = ПроверитьМетаданные();
	Если Результат.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно настроен план обмена и/или подписки на события, миграция невозможна.'");
	КонецЕсли;
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	УзелОбмена = УзелОбмена();
	Если ЗначениеЗаполнено(УзелОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Переход уже начался.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	НовыйУзел = ПланыОбмена[ИмяПланаОбмена()].СоздатьУзел();
	НовыйУзел.Наименование = СтрШаблон(НСтр("ru = 'Миграция в %1 (%2)'"), Метаданные.Представление(), АдресПриложения);
	НовыйУзел.Код = Строка(Новый УникальныйИдентификатор);
	НовыйУзел.Записать();
	
	Части = ПолучениеФайловИзИнтернетаКлиентСервер.РазделитьURL(АдресПриложения);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИмяСервера", Части.ИмяСервера);
	ПараметрыПодключения.Вставить("Путь", Части.ПутьКФайлуНаСервере + ?(СтрЗаканчиваетсяНа(Части.ПутьКФайлуНаСервере, "/"), "", "/") + "hs/AppMigration/");
	ПараметрыПодключения.Вставить("Логин", Логин);
	ПараметрыПодключения.Вставить("Пароль", Пароль);
	ПараметрыПодключения.Вставить("ЗащищенноеСоединение", Части.Протокол = "https");
	
	УстановитьПривилегированныйРежим(Истина);
	ТехнологияСервисаИнтеграцияСБСП.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел.Ссылка, ПараметрыПодключения, "ПараметрыПодключения");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запись = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
	Запись.ДатаНачала = ТекущаяУниверсальнаяДата();
	Запись.Записать();
	
	ЗначенияПоУмолчанию = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Расписание", ЗначенияПоУмолчанию.Расписание);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", ЗначенияПоУмолчанию.КоличествоПовторовПриАварийномЗавершении);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ЗначенияПоУмолчанию.ИнтервалПовтораПриАварийномЗавершении);
	ПараметрыЗадания.Вставить("Ключ", ЗначенияПоУмолчанию.Ключ);
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	СоответствиеПользователей = Новый Соответствие;
	СоответствиеПользователей.Вставить(Пользователи.ТекущийПользователь(), Логин);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяКонфигурации", Метаданные.Имя);
	ПараметрыЗапроса.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	ПараметрыЗапроса.Вставить("СоответствиеПользователей", СоответствиеПользователей);
	
	ВызватьМетодСервиса(ПараметрыПодключения, "Begin", ПараметрыЗапроса);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Отменяет выгрузку.
//
Процедура ОтменитьВыгрузку() Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	НачатьТранзакцию();
	
	УзелОбмена = УзелОбмена();
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Переход не выполняется.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = ТехнологияСервисаИнтеграцияСБСП.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "ПараметрыПодключения");
	УстановитьПривилегированныйРежим(Ложь);
	
	УзелОбмена.ПолучитьОбъект().Удалить();
	
	РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	
	РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьНаборЗаписей().Записать();
	
	Попытка
		ВызватьМетодСервиса(ПараметрыПодключения, "Cancel");
	Исключение
		ШаблонСообщения = НСтр("ru = 'Отмена миграции на сервисе завершилась с ошибкой, обратесь к администратору сервиса. 
                                |Описание ошибки:
                                |%1'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает состояние выгрузки.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * ДатаНачала - Дата - универсальная дата начала перехода.
//     * ОтправленоСообщений - Число - количество отправленных сообщений.
//     * ОбработаноСообщений - Число - количество обработанных сообщений.
//     * ИзмененоОбъектов - Число - количество зарегистрированных изменений.
//     * ВыгруженоОбъектов - Число - количество выгруженных объектов.
//     * ЗагруженоОбъектов - Число - количество загруженнных объектов.
//     * ЗагрузитьОбъектов - Число - количество объектов, которые еще нужно загрузить. 
//     * ДатаЗавершения - Дата - универсальная дата завершения перехода.
//     * ЗавершеноСОшибками - Булево - флаг налиичия ошибки при переходе.
//     * ОписаниеОшибки - Строка - описание ошибки.
//
Функция СостояниеВыгрузки() Экспорт 
	
	СостояниеВыгрузки = Новый Структура;
	СостояниеВыгрузки.Вставить("ДатаНачала", Дата(1, 1, 1));
	СостояниеВыгрузки.Вставить("ОтправленоСообщений", 0);
	СостояниеВыгрузки.Вставить("ОбработаноСообщений", 0);
	СостояниеВыгрузки.Вставить("ИзмененоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ВыгруженоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ЗагруженоОбъектов", 0);
	СостояниеВыгрузки.Вставить("ЗагрузитьОбъектов", 0);
	СостояниеВыгрузки.Вставить("ДатаЗавершения", Дата(1, 1, 1));
	СостояниеВыгрузки.Вставить("ЗавершеноСОшибками", Ложь);
	СостояниеВыгрузки.Вставить("ОписаниеОшибки", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеВыгрузки.ДатаНачала КАК ДатаНачала,
	|	СостояниеВыгрузки.ОтправленоСообщений КАК ОтправленоСообщений,
	|	СостояниеВыгрузки.ОбработаноСообщений КАК ОбработаноСообщений,
	|	СостояниеВыгрузки.ИзмененоОбъектов КАК ИзмененоОбъектов,
	|	СостояниеВыгрузки.ВыгруженоОбъектов КАК ВыгруженоОбъектов,
	|	СостояниеВыгрузки.ЗагруженоОбъектов КАК ЗагруженоОбъектов,
	|	СостояниеВыгрузки.ЗавершеноСОшибками КАК ЗавершеноСОшибками,
	|	СостояниеВыгрузки.ОписаниеОшибки КАК ОписаниеОшибки,
	|	СостояниеВыгрузки.ДатаЗавершения КАК ДатаЗавершения,
	|	СостояниеВыгрузки.Завершение КАК Завершение
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийСостояниеВыгрузки КАК СостояниеВыгрузки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат СостояниеВыгрузки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СостояниеВыгрузки, Выборка);
	
	СостояниеВыгрузки.ЗагрузитьОбъектов = СостояниеВыгрузки.ВыгруженоОбъектов - СостояниеВыгрузки.ЗагруженоОбъектов + СостояниеВыгрузки.ИзмененоОбъектов;
	
	Возврат СостояниеВыгрузки;
	
КонецФункции

// Инициализирует загрузку.
//
// Параметры - Структура - структура с ключами:
//   * ИмяКонфигурации - Строка - имя конфигурации.
//   * ВерсияКонфигурации - Строка - версия конфигурации.
//   * СоответствиеПользователей - Соответствие - в качестве ключа исходная ссылка, в качестве значения логин пользователя.
//
Процедура НачатьЗагрузку(Параметры) Экспорт
	
	ПроверитьКонфигурациюВерсию(Параметры);
	
	ПроверитьИспользованиеРазделениеСеанса();
	ПроверитьМонопольныйРежим();
	
	НачатьТранзакцию();
	
	МенеджерЗначения = Константы.ВыполняетсяЗагрузкаДанных.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	Если МенеджерЗначения.Значение Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка уже выполняется.'");
	КонецЕсли;
	
	МенеджерЗначения.Значение = Истина;
	МенеджерЗначения.Записать();
	
	СоответствиеСсылок = Новый Соответствие;
	Для Каждого КлючИЗначение Из Параметры.СоответствиеПользователей Цикл
		СтараяСсылка = КлючИЗначение.Ключ;
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(КлючИЗначение.Значение);
		Если ПользовательИБ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Пользователи.ИдентификаторПользователяСервиса КАК ИдентификаторПользователяСервиса
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СоответствиеСсылок.Вставить(СтараяСсылка, Выборка.ИдентификаторПользователяСервиса);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запись = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	Запись.ДатаНачала = ТекущаяУниверсальнаяДата();
	Запись.СоответствиеСсылок = Новый ХранилищеЗначения(СоответствиеСсылок);
	Запись.Записать();
	
	ЗначенияПоУмолчанию = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Расписание", ЗначенияПоУмолчанию.Расписание);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", ЗначенияПоУмолчанию.КоличествоПовторовПриАварийномЗавершении);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ЗначенияПоУмолчанию.ИнтервалПовтораПриАварийномЗавершении);
	ПараметрыЗадания.Вставить("Ключ", ЗначенияПоУмолчанию.Ключ);
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Помещает сообщение в очередь.
//
// Параметры:
//   ПотокЧтения - Поток - открытый поток файла сообщения. 
//
Процедура ЗагрузитьСообщение(ПотокЧтения) Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ВыполняетсяЗагрузкаДанных.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка сообщений не выполняется.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ОчередьЗагрузки
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.ОчередьЗагрузки >= МаксимальнаяОчередьЗагрузки() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Очередь загрузки больше %1!'"), МаксимальнаяОчередьЗагрузки());
	КонецЕсли;
	
	Идентификатор = Строка(Новый УникальныйИдентификатор);
	Каталог = ПолучитьОбщийКаталогВременныхФайлов() + "AppMigrationIn";
	СоздатьКаталог(Каталог);
	ИмяФайла = Каталог + ПолучитьРазделительПути() + Идентификатор + ".zip";
	
	СборщикМусора = РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.СоздатьМенеджерЗаписи();
	СборщикМусора.ИдентификаторСообщения = Идентификатор;
	СборщикМусора.ИмяФайлаСообщения = ИмяФайла;
	СборщикМусора.ДатаЗакладкиСообщения = ТекущаяУниверсальнаяДата();
	СборщикМусора.Записать();
	
	ПотокЗаписи = Новый ФайловыйПоток(ИмяФайла, РежимОткрытияФайла.СоздатьНовый);
	ПотокЧтения.КопироватьВ(ПотокЗаписи);
	ПотокЗаписи.Закрыть();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МиграцияПриложенийОчередьЗагрузки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Номер), 0) КАК Номер
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	НомерСообщения = Выборка.Номер + 1;
	НаборЗаписей = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	Запись.Номер = НомерСообщения;
	Запись.ИмяФайла = ИмяФайла;
	НаборЗаписей.Записать(Ложь);
	СборщикМусора.Удалить();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Выключает признак загрузки, сама загрузка завершится в регламентном задании.
//
Процедура ОтменитьЗагрузку() Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	НачатьТранзакцию();
	
	МенеджерЗначения = Константы.ВыполняетсяЗагрузкаДанных.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	Если Не МенеджерЗначения.Значение Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка не выполняется.'");
	КонецЕсли;
	
	МенеджерЗначения.Значение = Ложь;
	МенеджерЗначения.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает состояние загрузки.
// 
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * Конфигурация - Строка - имя конфигурации.
//     * ВерсияКонфигурации - Строка - версия конфигурации.
//     * ВыполняетсяЗагрузка - Булево - признак что выполняется загрузка.
//     * ОбработаноСообщений - Число - количество обработанных сообщений.
//     * ЗагруженоОбъектов - Число - количество загруженных объектов.
//     * ОчередьСообщений - Число - количество сообщений в очереди.
//
Функция СостояниеЗагрузки() Экспорт
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	Статус = Новый Структура();
	Статус.Вставить("Конфигурация", Метаданные.Имя);
	Статус.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Статус.Вставить("ВыполняетсяЗагрузка", Константы.ВыполняетсяЗагрузкаДанных.Получить());
	Статус.Вставить("ОбработаноСообщений", 0);
	Статус.Вставить("ЗагруженоОбъектов", 0);
	Статус.Вставить("ЗавершеноСОшибками", Ложь);
	Статус.Вставить("ОписаниеОшибки", "");
	Статус.Вставить("ЗагрузкаПриостановлена", Ложь);
	Статус.Вставить("ОчередьСообщений", 0);
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	Если СостояниеЗагрузки.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Статус, СостояниеЗагрузки);
		Статус.ЗагрузкаПриостановлена = СостояниеЗагрузки.КоличествоПопыток >= 3;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)  КАК ОчередьСообщений
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Статус.ОчередьСообщений = Выборка.ОчередьСообщений;
	КонецЦикла;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при установке параметров сеанса.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено.
//
Процедура ПриУстановкеПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса = Неопределено 
		И ТекущийРежимЗапуска() <> Неопределено
		И РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных()
		И ПараметрыСеанса.ВыполняетсяЗагрузкаДанных Тогда
		ВызватьИсключение НСтр("ru = 'Выполняется загрузка данных, вход запрещен!'");
	КонецЕсли;
	
	Если ИменаПараметровСеанса <> Неопределено 
		И ИменаПараметровСеанса.Найти(Метаданные.ПараметрыСеанса.ВыполняетсяЗагрузкаДанных.Имя) <> Неопределено Тогда
		ПараметрыСеанса.ВыполняетсяЗагрузкаДанных = Константы.ВыполняетсяЗагрузкаДанных.Получить();		
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("МиграцияПриложений.ЗаданиеВыгрузка");
	СоответствиеИменПсевдонимам.Вставить("МиграцияПриложений.ЗаданиеЗагрузка");
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ВыполняетсяЗагрузкаДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийОчередьЗагрузки);
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки);
	Типы.Добавить(Метаданные.РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки);
	
	Типы.Добавить(Метаданные.РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных);
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Возвращает имя плана обмена для миграции приложений.
//
// Возвращаемое значение:
//   Строка - имя плана обмена.
//
Функция ИмяПланаОбмена() Экспорт
	
	ИмяПланаОбмена = МиграцияПриложенийПереопределяемый.ИмяПланаОбмена();
	
	Если Не ЗначениеЗаполнено(ИмяПланаОбмена) 
		И ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("_ДемоМиграцияПриложений") Тогда
		Возврат "_ДемоМиграцияПриложений";
	КонецЕсли;
	
	Возврат ИмяПланаОбмена; 
	
КонецФункции

// Регламентное задание МиграцияПриложенийВыгрузка.
//
Процедура ЗаданиеВыгрузка() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = УзелОбмена();
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		ПредставлениеОшибки = НСтр("ru = 'Не найден узел обмена.'");
		ЗавершитьВыгрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(УзелОбмена);
		КлючЗаписи = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьКлючЗаписи(Новый Структура);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	Исключение
		Возврат;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = ТехнологияСервисаИнтеграцияСБСП.ПрочитатьДанныеИзБезопасногоХранилища(УзелОбмена, "ПараметрыПодключения");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыПодключения = Неопределено Тогда
		ПредставлениеОшибки = НСтр("ru = 'Не найдены параметры подключения.'");
		ЗавершитьВыгрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	СостояниеВыгрузки = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
	СостояниеВыгрузки.Прочитать();
	Если Не СостояниеВыгрузки.Выбран() Тогда
		ПредставлениеОшибки = НСтр("ru = 'Состояние выгрузки не найдено.'");
		ЗавершитьВыгрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		СостояниеЗагрузки = ВызватьМетодСервиса(ПараметрыПодключения, "Status");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Выгрузка'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Если (ТекущаяУниверсальнаяДата() - СостояниеВыгрузки.ДатаСостоянияЗагрузки) > (86400 * 3) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Сервис недоступен больше 72 часов.'");
			ЗавершитьВыгрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ЭтоПервоеСообщение = СостояниеВыгрузки.ОтправленоСообщений = 0;
	НомерСообщения = СостояниеВыгрузки.ОтправленоСообщений + 1;
		
	Если ЭтоПервоеСообщение Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
	КонецЕсли;
	
	Если СостояниеВыгрузки.КоличествоПопыток >= 3 Тогда
		
		// Ожидание исправление проблем.
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.Записать();
		
		Если (ТекущаяУниверсальнаяДата() - СостояниеВыгрузки.ДатаПоследнейВыгрузки) > (86400 * 3) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Не удалось выгрузить сообщение в течении 72 часов.'");
			ЗавершитьВыгрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
			Попытка
				ВызватьМетодСервиса(ПараметрыПодключения, "Cancel");
			Исключение
				// Загрузка прервется по такому же таймауту.
			КонецПопытки;
		КонецЕсли;
		
		Возврат;
	
	ИначеЕсли СостояниеЗагрузки.ОчередьСообщений >= МаксимальнаяОчередьЗагрузки() Тогда
		
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.Записать();
		
		Возврат;
		
	ИначеЕсли СостояниеЗагрузки.ЗавершеноСОшибками Тогда
		
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
		УзелОбмена.ПолучитьОбъект().Удалить();
		СостояниеВыгрузки.Записать();
		
		Возврат;
		
	ИначеЕсли СостояниеВыгрузки.Завершение Тогда
		// Сообщения больше не формируются, а только ожидается когда все будет загружено.
		Если Не СостояниеЗагрузки.ВыполняетсяЗагрузка Тогда
			СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
			РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
			УзелОбмена.ПолучитьОбъект().Удалить();
		КонецЕсли;
		ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
		СостояниеВыгрузки.Записать();
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("AppMigrationOut") + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогВыгрузки);
	
	НачатьТранзакцию();
	
	Попытка
		
		Результат = ВыгрузитьДанныеВКаталог(КаталогВыгрузки, УзелОбмена, НомерСообщения, СостояниеВыгрузки.ПоследнийОбъектМетаданных);
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СостояниеВыгрузки.КоличествоПопыток = СостояниеВыгрузки.КоличествоПопыток + 1;
		СостояниеВыгрузки.ДатаПоследнейВыгрузки = ТекущаяУниверсальнаяДата();
		СостояниеВыгрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		СостояниеВыгрузки.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Выгрузка'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Если СостояниеВыгрузки.КоличествоПопыток >= 3 Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Выгрузка'"), УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru = 'Выгрузка приостановлена из-за ошибки.'"));
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаАрхива);
	ЗаписьZIP.Добавить(КаталогВыгрузки + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьZIP.Записать();
	
	СостояниеВыгрузки.ОтправленоСообщений = СостояниеВыгрузки.ОтправленоСообщений + 1;
	СостояниеВыгрузки.ВыгруженоОбъектов = СостояниеВыгрузки.ВыгруженоОбъектов + Результат.КоличествоОбъектов;
	СостояниеВыгрузки.Завершение = Результат.ЭтоПоследнееСообщение;
	СостояниеВыгрузки.КоличествоПопыток = 0;
	СостояниеВыгрузки.ДатаПоследнейВыгрузки = ТекущаяУниверсальнаяДата();
	СостояниеВыгрузки.ОписаниеОшибки = "";
	СостояниеВыгрузки.Записать();
	
	СостояниеЗагрузки = ВызватьМетодСервиса(ПараметрыПодключения, "Upload", ИмяФайлаАрхива);
	ЗафиксироватьТранзакцию();
	
	ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена);
	СостояниеВыгрузки.Записать();
	
	Попытка
		УдалитьФайлы(ИмяФайлаАрхива);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(КаталогВыгрузки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Выгружает данные в указанный каталог.
//
// Параметры:
//   КаталогВыгрузки - Строка - полное имя каталога, в который нужно выгрузить.
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел, по которому выбираются изменения.
//   НомерСообщения - Число - номерс сообщения записывается в манифест.
//   ПоследнийОбъектМетаданных - Строка - полное имя объекта метаданных, если заполнено, то загрузка начнется со следующего объекта.
//
// Возвращаемое значение:
//   Структура - результат выполнения, ключи:
//     * КоличествоОбъектов - Число.
//     * ЭтоПоследнееСообщение - Число.
//
Функция ВыгрузитьДанныеВКаталог(КаталогВыгрузки, УзелОбмена, НомерСообщения, ПоследнийОбъектМетаданных) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КаталогДанных = КаталогВыгрузки + "Data" + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогДанных);
	
	ПараметрыВыгрузки = ПараметрыВыгрузки(КаталогВыгрузки, КаталогДанных);
	
	ВыгруженоОбъектов = ВыгрузитьПользовательскиеДанные(УзелОбмена, ПоследнийОбъектМетаданных, ПараметрыВыгрузки);
	ЭтоПоследнееСообщение = ВыгруженоОбъектов < ПараметрыВыгрузки.МинимальноеКоличествоОбъектов;
	Если ЭтоПоследнееСообщение Тогда
		
		ВыгрузитьГраницыПоследовательностей(ПараметрыВыгрузки);
		
		ВыгрузитьНастройкиПользователей("ХранилищеВариантовОтчетов", ХранилищеВариантовОтчетов, "ReportsVariantsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеНастроекДанныхФорм", ХранилищеНастроекДанныхФорм, "FormDataSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеОбщихНастроек", ХранилищеОбщихНастроек, "CommonSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеПользовательскихНастроекДинамическихСписков", ХранилищеПользовательскихНастроекДинамическихСписков, "DynamicListsUserSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеПользовательскихНастроекОтчетов", ХранилищеПользовательскихНастроекОтчетов, "ReportsUserSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьНастройкиПользователей("ХранилищеСистемныхНастроек", ХранилищеСистемныхНастроек, "SystemSettingsStorage.xml", ПараметрыВыгрузки);
		ВыгрузитьПользователей(ПараметрыВыгрузки);
		ВыгрузитьСоставСтандартногоИнтерфейсаOData(ПараметрыВыгрузки);
		
	КонецЕсли;
	
	ВыгрузитьОбщиеДанные(ПараметрыВыгрузки);
		
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, 1);
		
	ЗаписатьДанныеВФайл(ПараметрыВыгрузки.Данные, КаталогВыгрузки + "Data.xml");
	ЗаписатьДанныеВФайл(ВсеЭтиУзлы(), КаталогВыгрузки + "ThisNodes.xml");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Манифест = Новый Структура;
	Манифест.Вставить("НомерСообщения", НомерСообщения);
	Манифест.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Манифест.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Манифест.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);
	Манифест.Вставить("ДлительностьСек", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	Манифест.Вставить("КоличествоОбъектов", ВыгруженоОбъектов);
	Манифест.Вставить("ЭтоПоследнееСообщение", ЭтоПоследнееСообщение);
	
	ЗаписатьДанныеВФайл(Манифест, КаталогВыгрузки + "Manifest.xml");
	
	Возврат Манифест;
	
КонецФункции

// Регламентное задание МиграцияПриложенийЗагрузка.
//
Процедура ЗаданиеЗагрузка() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьИспользованиеРазделениеСеанса();
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	
	Если Не СостояниеЗагрузки.Выбран() Тогда
		ПредставлениеОшибки = НСтр("ru = 'Состояние загрузки не найдено.'");
		ЗавершитьЗагрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЗагрузки.КоличествоПопыток >= 3 Тогда
		// Ожидание исправления ошибки.
		
		Если (ТекущаяУниверсальнаяДата() - СостояниеЗагрузки.ДатаПоследнейЗагрузки) > (86400 * 3) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Не удалось загрузить сообщение в течении 72 часов.'");
			ЗавершитьЗагрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ВыполняетсяЗагрузкаДанных.Получить() Тогда
		УдалитьОчередь();
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		СостояниеЗагрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		СостояниеЗагрузки.ЗавершеноСОшибками = Истина;
		СостояниеЗагрузки.ОписаниеОшибки = НСтр("ru = 'Задание отменено.'");
		СостояниеЗагрузки.Записать();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МиграцияПриложенийОчередьЗагрузки.Номер КАК Номер,
	|	МиграцияПриложенийОчередьЗагрузки.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		// Если долго очередь пустует, значит инициатор миграции больше не формирует сообщения.
		ОтсчетВремени = ?(ЗначениеЗаполнено(СостояниеЗагрузки.ДатаПоследнейЗагрузки), СостояниеЗагрузки.ДатаПоследнейЗагрузки, СостояниеЗагрузки.ДатаНачала);
		Если (ТекущаяУниверсальнаяДата() - ОтсчетВремени) > (86400 * 3) Тогда
			ПредставлениеОшибки = НСтр("ru = 'Отсутствуют сообщения в течении больше 72 часов.'");
			ЗавершитьЗагрузкуСОшибкой(ПредставлениеОшибки, ПредставлениеОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Выборка.ИмяФайла);
	Если Не Файл.Существует() Тогда
		ПодробноеПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Файл сообщения %1 не найден.'"), Выборка.ИмяФайла);
		КраткоеПредставлениеОшибки = НСтр("ru = 'Файл сообщения не найден.'");
		ЗавершитьЗагрузкуСОшибкой(ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	СоответствиеСсылок = СостояниеЗагрузки.СоответствиеСсылок.Получить();
	Если СоответствиеСсылок = Неопределено Тогда
		СоответствиеСсылок = Новый Соответствие;
	КонецЕсли;
	
	ОбъектыДляОчистки = СостояниеЗагрузки.ОбъектыДляОчистки.Получить();
	Если ОбъектыДляОчистки = Неопределено Тогда
		ОбъектыДляОчистки = ОбъектыДляОчистки();
		// Это самое начало
		ОчиститьПользовательскиеДанные(ФайловыеФункцииСлужебныйВМоделиСервисаБТСПовтИсп.СправочникиФайловИОбъектыХранения().ОбъектыХранения);
	КонецЕсли;
		
	КаталогЗагрузки = ПолучитьИмяВременногоФайла("AppMigrationIn") + ПолучитьРазделительПути();
	СоздатьКаталог(КаталогЗагрузки);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(Выборка.ИмяФайла);
	ЧтениеZIP.ИзвлечьВсе(КаталогЗагрузки, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZIP.Закрыть();
	
	Попытка
		
		Результат = ЗагрузитьДанныеИзКаталога(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СостояниеЗагрузки.КоличествоПопыток = СостояниеЗагрузки.КоличествоПопыток + 1;
		СостояниеЗагрузки.ДатаПоследнейЗагрузки = ТекущаяУниверсальнаяДата();
		СостояниеЗагрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		СостояниеЗагрузки.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Загрузка'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Если СостояниеЗагрузки.КоличествоПопыток >= 3 Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Загрузка'"), УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru = 'Загрузка приостановлена из-за ошибки.'"));
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	НачатьТранзакцию();
	
	ОчередьЗагрузки = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьМенеджерЗаписи();
	ОчередьЗагрузки.Номер = Выборка.Номер;
	ОчередьЗагрузки.Удалить();
	
	СборщикМусора = РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.СоздатьМенеджерЗаписи();
	СборщикМусора.ИдентификаторСообщения = Файл.ИмяБезРасширения;
	СборщикМусора.ИмяФайлаСообщения = Выборка.ИмяФайла;
	СборщикМусора.ДатаЗакладкиСообщения = ТекущаяУниверсальнаяДата();
	СборщикМусора.Записать();
	
	СостояниеЗагрузки.СоответствиеСсылок = Новый ХранилищеЗначения(СоответствиеСсылок);
	СостояниеЗагрузки.ОбъектыДляОчистки = Новый ХранилищеЗначения(ОбъектыДляОчистки);
	СостояниеЗагрузки.ОбработаноСообщений = СостояниеЗагрузки.ОбработаноСообщений + 1;
	СостояниеЗагрузки.ЗагруженоОбъектов = СостояниеЗагрузки.ЗагруженоОбъектов + Результат.ЗагруженоОбъектов;
	
	Если Результат.ЭтоПоследнееСообщение Тогда
		
		СостояниеЗагрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
		Менеджер = Константы.ВыполняетсяЗагрузкаДанных.СоздатьМенеджерЗначения();
		Менеджер.Значение = Ложь;
		Менеджер.Записать();
		
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
		
	КонецЕсли;
	
	СостояниеЗагрузки.ДатаПоследнейЗагрузки = ТекущаяУниверсальнаяДата();
	СостояниеЗагрузки.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Попытка
		УдалитьФайлы(КаталогЗагрузки);
	Исключение
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(Выборка.ИмяФайла);
		СборщикМусора.Удалить();
	Исключение
	КонецПопытки;
		
КонецПроцедуры

// Загружает данные из каталога.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога.
//   СоответствиеСсылок - Соответствие - коллекция старых и новых ссылок, необходимо сохранять между вызовами.
//   ОбъектыДляОчистки - коллекция полных имен метаданных, необходимо сохранять между вызовами.
//
// Возвращаемое значение:
//   Структура - результат загрузки, ключи:
//     * ЗагруженоОбъектов - Число - количество загруженных объектов.
//     * ЭтоПоследнееСообщение - Булево - Истина, если это последнее сообщение.
//
Функция ЗагрузитьДанныеИзКаталога(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки) Экспорт
	
	Манифест = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "Manifest.xml");
	
	ПроверитьКонфигурациюВерсию(Манифест);
	
	ЭтоПоследнееСообщение = Манифест.ЭтоПоследнееСообщение;
	
	ПараметрыЗагрузки = ПараметрыЗагрузки(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки);
	
	ЗагруженоОбъектов = ЗагрузитьПользовательскиеДанные(ПараметрыЗагрузки);
	
	Если ЭтоПоследнееСообщение Тогда
		
		ИсторияРаботыПользователя.ОчиститьВсе();
		
		ОчиститьПользовательскиеДанные(ОбъектыДляОчистки);
		
		ДобавитьПолноправныхПользователейВГруппуАдминистраторыИОбновитьРолиОстальнымПользователям();
		
		ЗагрузитьГраницыПоследовательностей(ПараметрыЗагрузки);
		
		ЗагрузитьНастройкиПользователей(ХранилищеВариантовОтчетов, "ReportsVariantsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеНастроекДанныхФорм, "FormDataSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеОбщихНастроек, "CommonSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеПользовательскихНастроекДинамическихСписков, "DynamicListsUserSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеПользовательскихНастроекОтчетов, "ReportsUserSettingsStorage.xml", ПараметрыЗагрузки);
		ЗагрузитьНастройкиПользователей(ХранилищеСистемныхНастроек, "SystemSettingsStorage.xml", ПараметрыЗагрузки);
		
		ЗагрузитьСоставСтандартногоИнтерфейсаOData(КаталогЗагрузки);
		
	КонецЕсли;
	
	Возврат Новый Структура("ЗагруженоОбъектов, ЭтоПоследнееСообщение", ЗагруженоОбъектов, ЭтоПоследнееСообщение);
	
КонецФункции

// Возвращает текущий узел обмена.
//
// Возвращаемое значение:
//   ПланОбменаСсылка.МиграцияПриложений
//
Функция УзелОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МиграцияПриложений.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена() + " КАК МиграцияПриложений
	|ГДЕ
	|	НЕ МиграцияПриложений.ЭтотУзел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет состав плана обмена и состав подписок. Пустая коллекция означает что состав всех объектов корректный.
//
// Возвращаемое значение:
//   Соответствие - где:
//     * Ключ - Строка - полное имя объекта метаданных, состав которого не соответствует.
//     * Значение - Структура - структура с ключами:
//         * Добавить - Массив - список объектов, которые нужно добавить в состав.
//         * Удалить - Массив - список объектов, которые нужно удалить из состава.
//
Функция ПроверитьМетаданные() Экспорт
	
	ИмяПланаОбмена = ИмяПланаОбмена();
	
	Если Не ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить функцию МиграцияПриложенийПереопределяемый.ИмяПланаОбмена()'");
	КонецЕсли;
	
	ЗагружаемыеОбъекты = ЗагружаемыеОбъекты();
	Результат = Новый Соответствие;
	
	ПроверкаПланаОбмена = ПроверитьСоставПланаОбмена(ЗагружаемыеОбъекты);
	Если ПроверкаПланаОбмена.Количество() <> 0 Тогда
		Результат.Вставить(Метаданные.ПланыОбмена[ИмяПланаОбмена].ПолноеИмя(), ПроверкаПланаОбмена);
	КонецЕсли;
	
	НужныеТипыПередЗаписьюОбъекта = Новый Соответствие;
	НужныеТипыПередЗаписьюДокумента = Новый Соответствие;
	НужныеТипыПередЗаписьюНабора = Новый Соответствие;
	НужныеТипыПередЗаписьюНабораРасчета = Новый Соответствие;
	НужныеТипыПередУдалениемОбъекта = Новый Соответствие;
	
	Для Каждого ЗагружаемыйОбъект Из ЗагружаемыеОбъекты Цикл
		
		ОбъектМетаданных = ЗагружаемыйОбъект.Ключ;
		ИмяОбъекта = ОбъектМетаданных.Имя;
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("КонстантаМенеджерЗначения." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("СправочникОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("СправочникОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных)  Тогда
			НужныеТипыПередЗаписьюДокумента.Вставить(Тип("ДокументОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("ДокументОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)  Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("ПланВидовХарактеристикОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("ПланВидовХарактеристикОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)   Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("ПланСчетовОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("ПланСчетовОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("ПланВидовРасчетаОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("ПланВидовРасчетаОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("ЗадачаОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("ЗадачаОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюОбъекта.Вставить(Тип("БизнесПроцессОбъект." + ИмяОбъекта), Истина);
			НужныеТипыПередУдалениемОбъекта.Вставить(Тип("БизнесПроцессОбъект." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)Тогда
			НужныеТипыПередЗаписьюНабора.Вставить(Тип("РегистрСведенийНаборЗаписей." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)Тогда 
			НужныеТипыПередЗаписьюНабора.Вставить(Тип("РегистрНакопленияНаборЗаписей." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)Тогда 
			НужныеТипыПередЗаписьюНабора.Вставить(Тип("РегистрБухгалтерииНаборЗаписей." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюНабора.Вставить(Тип("ПоследовательностьНаборЗаписей." + ИмяОбъекта), Истина);
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
			НужныеТипыПередЗаписьюНабораРасчета.Вставить(Тип("РегистрРасчетаНаборЗаписей." + ИмяОбъекта), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеТипыПередЗаписьюОбъекта = Новый Массив;
	ТекущиеТипыПередЗаписьюДокумента = Новый Массив;
	ТекущиеТипыПередЗаписьюНабора = Новый Массив;
	ТекущиеТипыПередЗаписьюНабораРасчета = Новый Массив;
	ТекущиеТипыПередУдалениемОбъекта = Новый Массив;
	
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		
		ТекущиеТипы = Неопределено;
		
		Если Подписка.Обработчик = "МиграцияПриложений.ПередЗаписьюОбъекта" Тогда
			ТекущиеТипы = ТекущиеТипыПередЗаписьюОбъекта;
		ИначеЕсли Подписка.Обработчик = "МиграцияПриложений.ПередЗаписьюДокумента" Тогда
			ТекущиеТипы = ТекущиеТипыПередЗаписьюДокумента;
		ИначеЕсли Подписка.Обработчик = "МиграцияПриложений.ПередЗаписьюНабора" Тогда
			ТекущиеТипы = ТекущиеТипыПередЗаписьюНабора;
		ИначеЕсли Подписка.Обработчик = "МиграцияПриложений.ПередЗаписьюНабораРасчета" Тогда
			ТекущиеТипы = ТекущиеТипыПередЗаписьюНабораРасчета;
		ИначеЕсли Подписка.Обработчик = "МиграцияПриложений.ПередУдалениемОбъекта" Тогда
			ТекущиеТипы = ТекущиеТипыПередУдалениемОбъекта;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийТип Из Подписка.Источник.Типы() Цикл
			ТекущиеТипы.Добавить(ТекущийТип);
		КонецЦикла;
		
	КонецЦикла;
	
	ПроверитьСоставПодписки("Подписка.ПередЗаписьюОбъекта", ТекущиеТипыПередЗаписьюОбъекта, НужныеТипыПередЗаписьюОбъекта, Результат);	
	ПроверитьСоставПодписки("Подписка.ПередЗаписьюДокумента", ТекущиеТипыПередЗаписьюДокумента, НужныеТипыПередЗаписьюДокумента, Результат);
	ПроверитьСоставПодписки("Подписка.ПередЗаписьюНабора", ТекущиеТипыПередЗаписьюНабора, НужныеТипыПередЗаписьюНабора, Результат);
	ПроверитьСоставПодписки("Подписка.ПередЗаписьюНабораРасчета", ТекущиеТипыПередЗаписьюНабораРасчета, НужныеТипыПередЗаписьюНабораРасчета, Результат);
	ПроверитьСоставПодписки("Подписка.ПередУдалениемОбъекта", ТекущиеТипыПередУдалениемОбъекта, НужныеТипыПередУдалениемОбъекта, Результат);
	
	Возврат Результат;
	
КонецФункции

// Обработчик подписки на событие ПередЗаписьюОбъекта.
//
Процедура ПередЗаписьюОбъекта(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ЗаписьюДокумента.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюНабора.
//
Процедура ПередЗаписьюНабора(Источник, Отказ, Замещение) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюНабораРасчета.
//
Процедура ПередЗаписьюНабораРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалениемОбъекта.
//
Процедура ПередУдалениемОбъекта(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка не требуется, т.к. подписка относится к плану обмена.
	ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает параметры, необходимые для выгрузки.
//
// Параметры:
//   КаталогВыгрузки - Строка - полное имя каталога, в который производится выгрузка.
//   КаталогДанных - Строка - полное имя каталога, в который производится выгрузка данных, всегда каталог "Data" в каталоге выгрузки.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * КаталогВыгрузки - Строка - полное имя каталога, в который производится выгрузка.
//     * КаталогДанных - Строка - полное имя каталога, в который производится выгрузка данных, всегда каталог "Data" в каталоге выгрузки.
//     * Данные - ТаблицаЗначений - описание см. ТаблицаДанных().
//     * СсылкиОбщихДанных - Соответствие - коллекция всех общих ссылок, которые будут обнаружены, Ключ - СправочникСсылка, Значение - Истина.
//     * ТипыСопоставляемыхОбщихДанныхПоПолямПоиска - Соответствие - описание см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска().
//     * ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени - Соответствие - описание см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени().
//     * ЗапрещенныеТипыОбщихДанных - Соответствие - описание см. МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных().
//     * СправочникиФайлов - Структура - описание см. ФайловыеФункцииСлужебныйВМоделиСервисаБТСПовтИсп.СправочникиФайловИОбъектыХранения().
//
Функция ПараметрыВыгрузки(КаталогВыгрузки, КаталогДанных)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	ПараметрыВыгрузки.Вставить("КаталогДанных", КаталогДанных);
	ПараметрыВыгрузки.Вставить("Данные", ТаблицаДанных());
	ПараметрыВыгрузки.Вставить("СсылкиОбщихДанных", Новый Соответствие);
	ПараметрыВыгрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПолямПоиска", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска());
	ПараметрыВыгрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени());
	ПараметрыВыгрузки.Вставить("ЗапрещенныеТипыОбщихДанных", МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных());
	ПараметрыВыгрузки.Вставить("СправочникиФайлов", ФайловыеФункцииСлужебныйВМоделиСервисаБТСПовтИсп.СправочникиФайловИОбъектыХранения());
	ПараметрыВыгрузки.Вставить("МинимальноеКоличествоОбъектов", 10000);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

// Выгружает данные, зарегистрированные в плане обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   СостояниеВыгрузки - РегистрСведенийМенеджерЗаписи.МиграцияПриложенийСостояниеВыгрузки - состояние выгрузки.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьПользовательскиеДанные(УзелОбмена, ПоследнийОбъектМетаданных, ПараметрыВыгрузки)
	
	ШаблонСтатистики = НСтр("ru = 'Объект: %1
                            |Количество: %2
                            |Длительность (сек): %3'");
	ВсегоОбъектов = 0;
	Для Каждого ОбъектМетаданных Из ПорядокВыборкиМетаданных(ПоследнийОбъектМетаданных) Цикл
		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьКонстанту(ОбъектМетаданных, УзелОбмена, ПараметрыВыгрузки);
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьСсылочныйТип(ОбъектМетаданных, УзелОбмена, ПараметрыВыгрузки);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ВыгруженоОбъектов = ВыгрузитьНаборЗаписей(ОбъектМетаданных, УзелОбмена, ПараметрыВыгрузки);
			
		КонецЕсли;
		
		Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000;
		Комментарий = СтрШаблон(ШаблонСтатистики, ОбъектМетаданных.ПолноеИмя(), ВыгруженоОбъектов, СериализаторXDTO.XMLСтрока(Длительность));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Статистика выгрузки'"), УровеньЖурналаРегистрации.Примечание, , , Комментарий);
		
		ВсегоОбъектов = ВсегоОбъектов + ВыгруженоОбъектов;
				
		// Ограничение порции по количеству записей.
		Если ВсегоОбъектов > ПараметрыВыгрузки.МинимальноеКоличествоОбъектов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследнийОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	Возврат ВсегоОбъектов;
	
КонецФункции

// Выгружает константу.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Константа - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьКонстанту(ОбъектМетаданных, Узел, ПараметрыВыгрузки)
	
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, 1, ОбъектМетаданных);
	Если Не ВыборкаДанных.Следующий() Тогда
		Возврат 0;
	КонецЕсли;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	
	Объект = ВыборкаДанных.Получить();
	
	Отказ = Ложь;
	МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Значение) = Тип("ХранилищеЗначения") Тогда
		ВыгрузитьХранилищеЗначений(Объект.Значение, Идентификатор, 0, ПараметрыВыгрузки);
	КонецЕсли;
	
	ДобавитьВспомогательныеДанные(Объект.Значение, ПараметрыВыгрузки);
	
	ЗаписатьДанныеВФайл(Объект, ПараметрыВыгрузки.КаталогДанных + Идентификатор + ".xml");
	
	СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
	СтрокаТаблицы.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтрокаТаблицы.Идентификатор = Идентификатор;
	СтрокаТаблицы.КоличествоЗаписей = 1;
	
	Возврат 1;
	
КонецФункции

// Выгружает ссылочный объект.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Справочник, ОбъектМетаданных: Документ, 
//                      ОбъектМетаданных: ПланВидовХарактеристик, ОбъектМетаданных: ПланСчетов, 
//                      ОбъектМетаданных: ПланыВидовРасчета, ОбъектМетаданных: Задачи,
//                      ОбъектМетаданных: БизнесПроцессы - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьСсылочныйТип(ОбъектМетаданных, Узел, ПараметрыВыгрузки)
	
	ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
	ОбработчикФайлов = ПараметрыВыгрузки.СправочникиФайлов.СправочникиФайлов[ИмяТаблицы];
	ЭтоСправочникФайлов = ОбработчикФайлов <> Неопределено;
	Если ЭтоСправочникФайлов Тогда
		ОбработчикФайлов = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль(ОбработчикФайлов);
		КоличествоФайлов = 0;
	КонецЕсли;
	
	КоличествоФайловХранилищ = 0;
	РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
	Если ЭтоСправочникФайлов Тогда
		РеквизитыСХранилищем.Удалить(РеквизитыСХранилищем.Найти("ФайлХранилище"));
	КонецЕсли;
	
	ТабличныеЧастиСХранилищем = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Реквизиты = РеквизитыСХранилищем(ТабличнаяЧасть.Реквизиты);
		Если Реквизиты.Количество() Тогда
			ТабличныеЧастиСХранилищем.Вставить(ТабличнаяЧасть.Имя, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	ИмяФайла = Идентификатор + ".xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	КоличествоОбъектов = 0;
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, 1, ОбъектМетаданных);
	Пока ВыборкаДанных.Следующий() Цикл
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
		Объект = ВыборкаДанных.Получить();
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Объект) <> Тип("УдалениеОбъекта") Тогда
		
			Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
				ВыгрузитьХранилищеЗначений(Объект[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
			КонецЦикла;
			
			Если ЭтоСправочникФайлов Тогда
				КаталогФайлов = ПараметрыВыгрузки.КаталогДанных + Идентификатор + "-files";
				ИмяФайлаВложения = СформироватьИмяФайла(КаталогФайлов, КоличествоФайлов) + ".bin";
				Объект.Том = Неопределено;
				Объект.ФайлХранилище = Новый ХранилищеЗначения(ИмяФайлаВложения);
				ОбработчикФайлов.ВыгрузитьФайл(Объект, КаталогФайлов + ПолучитьРазделительПути() + ИмяФайлаВложения);
			КонецЕсли;
			
			Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСХранилищем Цикл
				Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
					Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
						ВыгрузитьХранилищеЗначений(СтрокаТабличнойЧасти[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		ДобавитьВспомогательныеДанные(СериализаторXDTO.ЗаписатьXDTO(Объект), ПараметрыВыгрузки);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Если КоличествоОбъектов = 0 Тогда
		
		УдалитьФайлы(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		
	Иначе
		
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ИмяТаблицы;
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КоличествоОбъектов;
		
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Выгружает набор записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: РегистрСведений, ОбъектМетаданных: РегистрНакопления, 
//                      ОбъектМетаданных: РегистрРасчета, ОбъектМетаданных: РегистрБухгалтерии,
//                      ОбъектМетаданных: Последовательность - объект, который нужно выгрузить.
//   Узел - ПланОбменаСсылка.МиграцияПриложений - узел обмена, по которому выбираются изменения.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ВыгрузитьНаборЗаписей(ОбъектМетаданных, Узел, ПараметрыВыгрузки)
	
	ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
	
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		РеквизитыСХранилищем = Новый Массив;
		
	Иначе 
		
		РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
		Для Каждого Реквизит Из РеквизитыСХранилищем(ОбъектМетаданных.Ресурсы) Цикл
			РеквизитыСХранилищем.Добавить(Реквизит);
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоФайловХранилищ = 0;
	
	Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
	ИмяФайла = Идентификатор + ".xml";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	ЭтоРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
		
	КоличествоОбъектов = 0;
	ВыборкаДанных = ПланыОбмена.ВыбратьИзменения(Узел, 1, ОбъектМетаданных);
	Пока ВыборкаДанных.Следующий() Цикл
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
		Объект = ВыборкаДанных.Получить();
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриВыгрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСХранилищем.Количество() Тогда
			Для Каждого Запись Из Объект Цикл
				Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
					ВыгрузитьХранилищеЗначений(Запись[Реквизит], Идентификатор, КоличествоФайловХранилищ, ПараметрыВыгрузки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Временный обход ошибки платформы: регистр бухгалтерии не сериализуется в ОбъектXDTO.
		Если Не ЭтоРегистрБухгалтерии Тогда
			ДобавитьВспомогательныеДанные(СериализаторXDTO.ЗаписатьXDTO(Объект), ПараметрыВыгрузки);
		КонецЕсли;
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	Если КоличествоОбъектов = 0 Тогда
		
		УдалитьФайлы(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		
	Иначе
		
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ИмяТаблицы;
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КоличествоОбъектов;
		
	КонецЕсли;
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Выгружает хранилище в файл.
//
// Параметры:
//   Реквизит - ХранилищеЗначения - значение, которое нужно выгрузить.
//   Идентификатор - Строка - идентификатор выгружаемого объекта.
//   КоличествоФайлов - Число - переменная для накопления количества файлов по данному объекту метаданных.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьХранилищеЗначений(Реквизит, Идентификатор, КоличествоФайлов, ПараметрыВыгрузки)
	
	Если ТипЗнч(Реквизит) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Значение = Реквизит.Получить();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Значение = Неопределено
		Или (ОбщегоНазначенияБТС.ЭтоПримитивныйТип(ТипЗнч(Значение)) И Не ЗначениеЗаполнено(Значение)) Тогда
		Возврат;
	КонецЕсли;	
	
	КаталогХранилищ = ПараметрыВыгрузки.КаталогДанных + Идентификатор + "-storages";
	
	ИмяФайла = СформироватьИмяФайла(КаталогХранилищ, КоличествоФайлов);
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ИмяФайла = ИмяФайла + ".bin";
		Значение.Записать(КаталогХранилищ + ПолучитьРазделительПути() + ИмяФайла);
	Иначе
		ИмяФайла = ИмяФайла + ".xml";
		
		ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Значение);
		Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
			ДобавитьВспомогательныеДанные(ОбъектXDTO, ПараметрыВыгрузки);
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(КаталогХранилищ + ПолучитьРазделительПути() + ИмяФайла);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, , , , НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
	КонецЕсли;
	
	Реквизит = Новый ХранилищеЗначения(ИмяФайла);
	
КонецПроцедуры

// Выгружает общие данные по накопленным ссылкам.
//
// Параметры:
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьОбщиеДанные(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.СсылкиОбщихДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкиПоТипам = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПараметрыВыгрузки.СсылкиОбщихДанных Цикл
		Ссылка = КлючИЗначение.Ключ;
		Список = СсылкиПоТипам[ТипЗнч(Ссылка)];
		Если Список = Неопределено Тогда
			Список = Новый Массив;
			СсылкиПоТипам.Вставить(ТипЗнч(Ссылка), Список);
		КонецЕсли;
		Список.Добавить(ссылка);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СсылкиПоТипам Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		
		Идентификатор = СформироватьИмяФайла(ПараметрыВыгрузки.КаталогДанных, ПараметрыВыгрузки.Данные.Количество());
		ИмяФайла = Идентификатор + ".xml";
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогДанных + ИмяФайла);
		ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
		ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
		
		Для Каждого Ссылка Из КлючИЗначение.Значение Цикл
			
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени[КлючИЗначение.Ключ] <> Неопределено
				И Не Объект.Предопределенный Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружена ссылка на общие данные без поля поиска. Тип данных: %1'"), Объект.Метаданные().ПолноеИмя());
			КонецЕсли;
			
			ДобавитьВспомогательныеДанные(СериализаторXDTO.ЗаписатьXDTO(Объект), ПараметрыВыгрузки);
			
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект, "Object", НазначениеТипаXML.Явное);
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
		СтрокаТаблицы = ПараметрыВыгрузки.Данные.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.КоличествоЗаписей = КлючИЗначение.Значение.Количество();
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает границы всех последовательностей.
//
// Параметры:
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьГраницыПоследовательностей(ПараметрыВыгрузки)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогВыгрузки + "SequenceBounds.xml");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	Для Каждого ОбъектМетаданных Из Метаданные.Последовательности Цикл
		
		Запрос = Новый Запрос;
		
		Если ОбъектМетаданных.Измерения.Количество() = 0 Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Период, Регистратор
			|ИЗ
			|	Последовательность." + ОбъектМетаданных.Имя + ".Границы";
			
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Запрос.Выполнить().Выгрузить(), ОбъектМетаданных.Имя, НазначениеТипаXML.Явное);
			
		Иначе
			
			ОтборЗапроса = Новый Структура;
			Измерения = Новый Массив;
			ПоляЗапроса = Новый Массив;
			ПоляЗапроса.Добавить("ЕСТЬNULL(Период, ДАТАВРЕМЯ(1,1,1)) КАК Период");
			ПоляЗапроса.Добавить("Регистратор");
			Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
				ПоляЗапроса.Добавить(Измерение.Имя);
				Измерения.Добавить(Измерение.Имя);
				ОтборЗапроса.Вставить(Измерение.Имя);
				Запрос.УстановитьПараметр(Измерение.Имя, Неопределено);
			КонецЦикла;
			
			ИзмеренияСтрокой = СтрСоединить(Измерения, ",");
			
			// Пример условия:
			// ГДЕ    (Измерение1 > &Измерение1) 
			//    ИЛИ (Измерение1 = &Измерение1 И Измерение2 > &Измерение2)
			//    ИЛИ (Измерение1 = &Измерение1 И Измерение2 = &Измерение2 И Измерение3 > &Измерение3)
			//    ИЛИ < ... >
			УсловияЗапроса = Новый Массив;
			Для ИндексИзмерения = 0 По Измерения.ВГраница() Цикл
				УсловияПоИ = Новый Массив;
				// Условия на равенство.
				Для ИндексРавно = 0 По ИндексИзмерения - 1 Цикл
					УсловияПоИ.Добавить(Измерения[ИндексРавно] + " = &" + Измерения[ИндексРавно]);
				КонецЦикла;
				// Условие на больше (оно всегда одно).
				УсловияПоИ.Добавить(Измерения[ИндексИзмерения] + " > &" + Измерения[ИндексИзмерения]);
				
				УсловияЗапроса.Добавить("(" + СтрСоединить(УсловияПоИ, " И ") + ")");
			КонецЦикла;
			
			// Курсорный запрос.
			РазмерПорции = 10000;
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0") + "
			|	" + СтрСоединить(ПоляЗапроса, ",") + "
			|ИЗ
			|	Последовательность." + ОбъектМетаданных.Имя + ".Границы
			|ГДЕ 
			|	" + СтрСоединить(УсловияЗапроса, " ИЛИ ") + "
			|УПОРЯДОЧИТЬ ПО
			|	" + ИзмеренияСтрокой;
			
		КонецЕсли;
		
		Пока Истина Цикл
			
			ЗаполнитьЗначенияСвойств(Запрос.Параметры, ОтборЗапроса);
			Границы = Запрос.Выполнить().Выгрузить();
			
			Если Границы.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Данные = Новый ТаблицаЗначений;
			Для Каждого Колонка Из Границы.Колонки Цикл
				Если Колонка.Имя = "Регистратор" Тогда
					Данные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения));
				Иначе
					Данные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения, , "Null"));
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаТаблицы Из Границы Цикл
				ЗаполнитьЗначенияСвойств(Данные.Добавить(), СтрокаТаблицы);
			КонецЦикла;
			
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные, ОбъектМетаданных.Имя, НазначениеТипаXML.Явное);
			
			Если Границы.Количество() < РазмерПорции Тогда
				Прервать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборЗапроса, Границы[Границы.Количество() - 1]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Выгружает пользователей ИБ.
//
// Параметры:
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьПользователей(ПараметрыВыгрузки)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Таблица.Колонки.Добавить("АутентификацияОС", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("АутентификацияСтандартная", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ЗапрещеноИзменятьПароль", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПарольУстановлен", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ПоказыватьВСпискеВыбора", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПользовательОС", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РазделениеДанных", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("РежимЗапуска", Новый ОписаниеТипов("РежимЗапускаКлиентскогоПриложения"));
	Таблица.Колонки.Добавить("СохраняемоеЗначениеПароля", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Язык", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Роли", Новый ОписаниеТипов("Массив"));
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		СтрокаПользователь = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПользователь, Пользователь);
		СтрокаПользователь.Язык = ?(Пользователь.Язык <> Неопределено, Пользователь.Язык.Имя, "");
		Для Каждого Роль Из Пользователь.Роли Цикл
			СтрокаПользователь.Роли.Добавить(Роль.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогВыгрузки + "Users.xml");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Таблица, "Пользователи", НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Выгружает настройки пользователей ИБ.
//
// Параметры:
//   ХранилищеНастроек - СтандартноеХранилищеНастроекМенеджер - настройки, которые нужно выгрузить.
//   ИмяФайла - Строка - краткое имя файла, в который нужно выгрузить настройки.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьНастройкиПользователей(НаименованиеХранилищаНастроек, ХранилищеНастроек, ИмяФайла, ПараметрыВыгрузки)
	
	Если ТипЗнч(ХранилищеНастроек) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПараметрыВыгрузки.КаталогВыгрузки + ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("Настройки");
	ЗаписатьСоответствиеПространствИмен(ЗаписьXML);
	
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			// Сопоставление при загрузке невозможно.
			Продолжить;
		КонецЕсли;
		Выборка = ХранилищеНастроек.Выбрать(Новый Структура("Пользователь", ПользовательИБ.Имя));
		Пока Истина Цикл
			
			Попытка
				Если Не Выборка.Следующий() Тогда
					Прервать;
				КонецЕсли;
			Исключение
				ШаблонОшибки = НСтр("ru = 'Выгрузка настройки %1 (пользователь: %2, ключ объекта: %3, ключ настроек: %4 ) пропущена по причине: %5'");
				Комментарий = СтрШаблон(ШаблонОшибки, 
					НаименованиеХранилищаНастроек, 
					Выборка.Пользователь, 
					Выборка.КлючОбъекта, 
					Выборка.КлючНастроек, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Выгрузка'"), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
				Продолжить;
			КонецПопытки;
			
			Если Выборка.Настройки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипНастроек = ТипЗнч(Выборка.Настройки);
			
			НастройкиСериализованыВXDTO = Ложь;
			Если ТипНастроек = Тип("ИзбранноеРаботыПользователя") Тогда
				
				Для Каждого Элемент Из Выборка.Настройки Цикл
					ОбъектXDTO = ПреобразоватьНавигационнуюСсылкуВОбъектXDTO(Элемент.НавигационнаяСсылка);
					Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
						ДобавитьВспомогательныеДанные(ОбъектXDTO, ПараметрыВыгрузки);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Не ТипНастроек = Тип("НастройкиИсторииВыбора") 
				И Не ТипНастроек = Тип("НастройкиИнтерфейсаКлиентскогоПриложения")
				И Не ТипНастроек = Тип("НастройкиКомандногоИнтерфейса")
				И Не ТипНастроек = Тип("НастройкиФормы") 
				И Не ТипНастроек = Тип("ИсторияПоискаТаблицы")
				И Не ТипНастроек = Тип("НастройкиНачальнойСтраницы")Тогда
				
				Попытка
					НастройкиXDTO = СериализаторXDTO.ЗаписатьXDTO(Выборка.Настройки);
					НастройкиСериализованыВXDTO = Истина;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			Настройка = Новый Структура("КлючОбъекта, КлючНастроек, Настройки,  Представление");
			ЗаполнитьЗначенияСвойств(Настройка, Выборка);
			Настройка.Вставить("Пользователь", Пользователь);
			Если НастройкиСериализованыВXDTO Тогда
				Если ТипЗнч(НастройкиXDTO) = Тип("ОбъектXDTO") Тогда
					ДобавитьВспомогательныеДанные(НастройкиXDTO, ПараметрыВыгрузки);
				КонецЕсли;
			КонецЕсли;
			
			ЗаписатьВХранилище = Не НастройкиСериализованыВXDTO;
			Если Не ЗаписатьВХранилище Тогда
				Попытка
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройка, "Настройка", НазначениеТипаXML.Явное);
				Исключение
					// Возможно в полях содержатся недопустимые символы XML.
					ЗаписатьВХранилище = Истина;
				КонецПопытки;
			КонецЕсли;	
			
			Если ЗаписатьВХранилище Тогда
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(Настройка), "Настройка", НазначениеТипаXML.Явное);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Выгружает состав стандартного интерфейса.
//
// Параметры:
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ВыгрузитьСоставСтандартногоИнтерфейсаOData(ПараметрыВыгрузки)
	
	Состав = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из ПолучитьСоставСтандартногоИнтерфейсаOData() Цикл
		Состав.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	ЗаписатьДанныеВФайл(Состав, ПараметрыВыгрузки.КаталогВыгрузки + "StandardODataInterfaceContent.xml");
	
КонецПроцедуры

// Возвращает параметры для загрузки.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога, из которого выполняется загрузка.
//   СоответствиеСсылок - Соответствие - соответствие старых и новых ссылок.
//   ОбъектыДляОчистки - Соотвествие - коллекция полных имен метаданных, которые требуется очистить.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * КаталогЗагрузки - Строка - полное имя каталога, из которого выполняется загрузка.
//     * КаталогДанных - Строка - полное имя каталога, в котором находятся данные, это каталог Data в каталоге загрузки.
//     * ТаблицаДанных - ТаблицаЗначений - описание см. ТаблицаДанных().
//     * ОбщиеДанные - Соответствие - соответствие старых и новых ссылок общих данных.
//     * ТипыУзловОбмена - Соответствие - описание см. ТипыУзловОбмена().
//     * СоответствиеСсылок - Соответствие - соответствие старых и новых ссылок.
//     * Разделитель - Число - значение текущего разделителя.
//     * СправочникиФайлов - Структура - описание см. ФайловыеФункцииСлужебныйВМоделиСервисаБТСПовтИсп.СправочникиФайловИОбъектыХранения(). 
//     * ОбъектыДляОчистки - Соотвествие - коллекция полных имен метаданных, которые требуется очистить.
//     * ТипыСопоставляемыхОбщихДанныхПоПолямПоиска - Соответствие - описание см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска().
//     * ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени - Соответствие - описание см. МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени().
//     * ЗапрещенныеТипыОбщихДанных - Соответствие - описание см. МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных().
//     * ТипыПересоздаваемыхСсылок - Соответствие - описание см. МиграцияПриложенийПовтИсп.ТипыПересоздаваемыхСсылок().
//     * СовместноИспользуемыеОбъектыМетаданных - Соответствие - описание см. МиграцияПриложенийПовтИсп.СовместноИспользуемыеОбъектыМетаданных().
//
Функция ПараметрыЗагрузки(КаталогЗагрузки, СоответствиеСсылок, ОбъектыДляОчистки)
	
	КаталогДанных = КаталогЗагрузки + "Data" + ПолучитьРазделительПути();
	ТаблицаДанных = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "Data.xml");
	
	Если ТаблицаДанных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует файл Data.xml'");
	КонецЕсли;
	
	ОбщиеДанные = ЗагрузитьОбщиеДанные(КаталогДанных, ТаблицаДанных);
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("КаталогЗагрузки", КаталогЗагрузки);
	ПараметрыЗагрузки.Вставить("КаталогДанных", КаталогДанных);
	ПараметрыЗагрузки.Вставить("ТаблицаДанных", ТаблицаДанных);
	ПараметрыЗагрузки.Вставить("ОбщиеДанные", ОбщиеДанные);
	ПараметрыЗагрузки.Вставить("ТипыУзловОбмена", ТипыУзловОбмена());
	ПараметрыЗагрузки.Вставить("СоответствиеСсылок", ПрочитатьСоответствиеСсылок(СоответствиеСсылок, КаталогЗагрузки));
	ПараметрыЗагрузки.Вставить("Разделитель", ПараметрыСеанса.ОбластьДанныхЗначение);
	ПараметрыЗагрузки.Вставить("СправочникиФайлов", ФайловыеФункцииСлужебныйВМоделиСервисаБТСПовтИсп.СправочникиФайловИОбъектыХранения());
	ПараметрыЗагрузки.Вставить("ОбъектыДляОчистки", ОбъектыДляОчистки);
	ПараметрыЗагрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПолямПоиска", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска());
	ПараметрыЗагрузки.Вставить("ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени", МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени());
	ПараметрыЗагрузки.Вставить("ЗапрещенныеТипыОбщихДанных", МиграцияПриложенийПовтИсп.ЗапрещенныеТипыОбщихДанных());
	ПараметрыЗагрузки.Вставить("ТипыПересоздаваемыхСсылок", МиграцияПриложенийПовтИсп.ТипыПересоздаваемыхСсылок());
	ПараметрыЗагрузки.Вставить("СовместноИспользуемыеОбъектыМетаданных", МиграцияПриложенийПовтИсп.СовместноИспользуемыеОбъектыМетаданных());
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

// Загружает пользовательские данные.
//
// Параметры:
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
// Возвращаемое значение:
//   Число - количество загруженнных объектов.
//
Функция ЗагрузитьПользовательскиеДанные(ПараметрыЗагрузки)
	
	ШаблонСтатистики = НСтр("ru = 'Объект: %1
                            |Количество: %2
                            |Длительность (сек): %3'");
	ЗагружаемыеОбъекты = МиграцияПриложенийПовтИсп.ЗагружаемыеОбъекты();
	ВсегоОбъектов = 0;
	
	Для Каждого СтрокаДанных Из ПараметрыЗагрузки.ТаблицаДанных Цикл
		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(СтрокаДанных.ОбъектМетаданных);
		
		Если ЗагружаемыеОбъекты[ОбъектМетаданных] = Неопределено Тогда
			
			Продолжить;
		
		ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьКонстанту(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьСсылочныйТип(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ЗагруженоОбъектов = ЗагрузитьНаборЗаписей(ОбъектМетаданных, СтрокаДанных.Идентификатор, ПараметрыЗагрузки);
			
		КонецЕсли;
		
		Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000;
		Комментарий = СтрШаблон(ШаблонСтатистики, ОбъектМетаданных.ПолноеИмя(), ЗагруженоОбъектов, СериализаторXDTO.XMLСтрока(Длительность));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Статистика загрузки'"), УровеньЖурналаРегистрации.Примечание, , , Комментарий);
		
		ВсегоОбъектов = ВсегоОбъектов + ЗагруженоОбъектов;
		
	КонецЦикла;
	
	Возврат ВсегоОбъектов;
	
КонецФункции

// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Константа - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьКонстанту(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	Объект = ПрочитатьДанныеИзФайла(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
	
	ЗаменитьСсылкиПриЗагрузке(Объект.Значение, ПараметрыЗагрузки);
	
	Если СовместноРазделен Тогда
		Объект.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Значение) = Тип("ХранилищеЗначения") Тогда
		ЗагрузитьХранилищеЗначений(Объект.Значение, Идентификатор, ПараметрыЗагрузки);
	КонецЕсли;
	
	Отказ = Ложь;
	МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Объект.Записать();
	
	Возврат 1;
	
КонецФункции

// Загружает ссылочный объект.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Справочник, ОбъектМетаданных: Документ, 
//                      ОбъектМетаданных: ПланВидовХарактеристик, ОбъектМетаданных: ПланСчетов, 
//                      ОбъектМетаданных: ПланыВидовРасчета, ОбъектМетаданных: Задачи,
//                      ОбъектМетаданных: БизнесПроцессы - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьСсылочныйТип(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	ЭтоСправочникПользователи = ОбъектМетаданных = Метаданные.Справочники.Пользователи;
	
	ЭтоСправочникПрофилиГруппДоступа = ОбъектМетаданных = Метаданные.Справочники.ПрофилиГруппДоступа;
	Если ЭтоСправочникПрофилиГруппДоступа Тогда
		НедоступныеРоли = НедоступныеРоли();
	КонецЕсли;
	
	ОбработчикФайлов = ПараметрыЗагрузки.СправочникиФайлов.СправочникиФайлов[ОбъектМетаданных.ПолноеИмя()];
	ЭтоСправочникФайлов = ОбработчикФайлов <> Неопределено;
	Если ЭтоСправочникФайлов Тогда
		ОбработчикФайлов = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль(ОбработчикФайлов);
	КонецЕсли;
	
	ЭтоПланВидовРасчета = Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных);
	
	Если ПараметрыЗагрузки.ОбъектыДляОчистки[ОбъектМетаданных.ПолноеИмя()] <> Неопределено Тогда
		
		ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
		
		Если ЭтоСправочникПользователи Тогда
			ТекущиеПользователи = Новый Соответствие;
			ИдентификаторыПользователей = Новый Массив;
			Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
				ИдентификаторыПользователей.Добавить(Пользователь.УникальныйИдентификатор);
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ИдентификаторыПользователей", ИдентификаторыПользователей);
			Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователей)
			|	И Пользователи.ИдентификаторПользователяСервиса <> &ПустойИдентификатор";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();				
				ТекущиеПользователи.Вставить(Объект.ИдентификаторПользователяСервиса, СериализаторXDTO.ЗаписатьXDTO(Объект));
			КонецЦикла;
		КонецЕсли;
		
		ОчиститьСсылочныйТип(ОбъектМетаданных);
		
	КонецЕсли;
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты);
	Если ЭтоСправочникФайлов Тогда
		РеквизитыСХранилищем.Удалить(РеквизитыСХранилищем.Найти("ФайлХранилище"));
	КонецЕсли;
	
	ТабличныеЧастиСХранилищем = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Реквизиты = РеквизитыСХранилищем(ТабличнаяЧасть.Реквизиты);
		Если Реквизиты.Количество() Тогда
			ТабличныеЧастиСХранилищем.Вставить(ТабличнаяЧасть.Имя, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;	
	
	КоличествоОбъектов = 0;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		// Временный обход ошибки платформы: план видов расчета не десериализуется в ОбъектXDTO.
		Если ЭтоПланВидовРасчета Тогда
			Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Иначе
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаменитьСсылкиПриЗагрузке(ОбъектXDTO, ПараметрыЗагрузки);
			Объект = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Продолжить;
		КонецЕсли;
		
		ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		
		Если ЭтоСправочникПрофилиГруппДоступа Тогда
			Для ОбратныйИндекс = 1 - Объект.Роли.Количество() По 0 Цикл
				Если НедоступныеРоли[Объект.Роли[-ОбратныйИндекс].Роль] <> Неопределено Тогда
					Объект.Роли.Удалить(-ОбратныйИндекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЭтоСправочникПользователи Тогда
			Если ТекущиеПользователи <> Неопределено Тогда
				// Сопоставление по идентификатору пользователя сервиса.
				ИдентификаторПользователяСервиса = Объект.ИдентификаторПользователяСервиса;
				Если Не ЗначениеЗаполнено(ИдентификаторПользователяСервиса) Тогда
					ИдентификаторПользователяСервиса = ПараметрыЗагрузки.СоответствиеСсылок[ОбъектXDTO.Ref];
				КонецЕсли;
				ТекущийПользовательXDTO = Неопределено;
				Если ЗначениеЗаполнено(ИдентификаторПользователяСервиса) Тогда
					ТекущийПользовательXDTO = ТекущиеПользователи[ИдентификаторПользователяСервиса];
				КонецЕсли;
				Если ТекущийПользовательXDTO <> Неопределено Тогда
					// Записывается прежний элемент справочника но с другой ссылкой.
					ТекущийПользовательXDTO.Ref = ОбъектXDTO.Ref;
					ТекущийПользователь = СериализаторXDTO.ПрочитатьXDTO(ТекущийПользовательXDTO);
					ТекущийПользователь.ОбменДанными.Загрузка = Истина;
					ТекущийПользователь.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
					ТекущийПользователь.Записать();
					ТекущиеПользователи.Удалить(ИдентификаторПользователяСервиса);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// Перезаписывать пользователя сервиса не нужно, для остальных нужно очистить идентификаторы.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ОбъектXDTO.Ref);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
			|	Пользователи.ИдентификаторПользователяСервиса КАК ИдентификаторПользователяСервиса
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка = &Ссылка";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ИдентификаторПользователяСервиса) Тогда
				Продолжить;
			Иначе
				Объект.ИдентификаторПользователяИБ = Неопределено;
				Объект.ИдентификаторПользователяСервиса = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если СовместноРазделен Тогда
			Объект.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
		КонецЕсли;
		
		Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
			ЗагрузитьХранилищеЗначений(Объект[Реквизит], Идентификатор, ПараметрыЗагрузки);
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиСХранилищем Цикл
			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Ключ] Цикл
				Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
					ЗагрузитьХранилищеЗначений(СтрокаТабличнойЧасти[Реквизит], Идентификатор, ПараметрыЗагрузки);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если ЭтоСправочникФайлов Тогда
			ОбработчикФайлов.ЗагрузитьФайл(Объект, ПараметрыЗагрузки.КаталогДанных + Идентификатор + "-files" + ПолучитьРазделительПути() + Объект.ФайлХранилище.Получить());
		КонецЕсли;
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		
		Объект.Записать();
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	// Восстановление всех ранее созданных пользователей.
	Если ТекущиеПользователи <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ТекущиеПользователи Цикл
			Объект = СериализаторXDTO.ПрочитатьXDTO(КлючИЗначение.Значение);
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Объект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоОбъектов
	
КонецФункции

// Очищает ссылочный тип:
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Справочник, ОбъектМетаданных: Документ, 
//                      ОбъектМетаданных: ПланВидовХарактеристик, ОбъектМетаданных: ПланСчетов, 
//                      ОбъектМетаданных: ПланыВидовРасчета, ОбъектМетаданных: Задачи,
//                      ОбъектМетаданных: БизнесПроцессы - объект, который нужно выгрузить.
//
Процедура ОчиститьСсылочныйТип(ОбъектМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Загружает набор записей.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: РегистрСведений, ОбъектМетаданных: РегистрНакопления, 
//                      ОбъектМетаданных: РегистрРасчета, ОбъектМетаданных: РегистрБухгалтерии,
//                      ОбъектМетаданных: Последовательность - объект, который нужно выгрузить.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
// Возвращаемое значение:
//   Число - количество выгруженных объектов.
//
Функция ЗагрузитьНаборЗаписей(ОбъектМетаданных, Идентификатор, ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки.ОбъектыДляОчистки[ОбъектМетаданных.ПолноеИмя()] <> Неопределено Тогда
		ПараметрыЗагрузки.ОбъектыДляОчистки.Удалить(ОбъектМетаданных.ПолноеИмя());
		ОчиститьНаборЗаписей(ОбъектМетаданных);
	КонецЕсли;
	
	СовместноРазделен = ПараметрыЗагрузки.СовместноИспользуемыеОбъектыМетаданных[ОбъектМетаданных] <> Неопределено;
	
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		РеквизитыСХранилищем = Новый Массив;
	Иначе
		РеквизитыСХранилищем = РеквизитыСХранилищем(ОбъектМетаданных.Ресурсы);
		Для Каждого Реквизит Из РеквизитыСХранилищем(ОбъектМетаданных.Реквизиты) Цикл
			РеквизитыСХранилищем.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогДанных + Идентификатор + ".xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;	
	
	ЭтоРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
		
	КоличествоОбъектов = 0;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		// Временный обход ошибки платформы: регистр бухгалтерии не десериализуется из ОбъектXDTO.
		Если ЭтоРегистрБухгалтерии Тогда
			Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Иначе
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЗаменитьСсылкиПриЗагрузке(ОбъектXDTO, ПараметрыЗагрузки);
			Объект = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		КонецЕсли;
		
		ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		
		Если СовместноРазделен Тогда
			Объект.Отбор.ОбластьДанныхВспомогательныеДанные.Значение = ПараметрыЗагрузки.Разделитель;
		КонецЕсли;
		Если СовместноРазделен Или РеквизитыСХранилищем.Количество() > 0 Тогда 
			Для Каждого Запись Из Объект Цикл
				Если СовместноРазделен Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ПараметрыЗагрузки.Разделитель;
				КонецЕсли;
				Для Каждого Реквизит Из РеквизитыСХранилищем Цикл
					ЗагрузитьХранилищеЗначений(Запись[Реквизит], Идентификатор, ПараметрыЗагрузки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Отказ = Ложь;
		МиграцияПриложенийПереопределяемый.ПриЗагрузкеОбъекта(Объект, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.Записать();
		
		КоличествоОбъектов = КоличествоОбъектов + 1;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат КоличествоОбъектов;
	
КонецФункции

// Очищает набор записей.
// 
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: РегистрСведений, ОбъектМетаданных: РегистрНакопления, 
//                      ОбъектМетаданных: РегистрРасчета, ОбъектМетаданных: РегистрБухгалтерии,
//                      ОбъектМетаданных: Последовательность - объект, который нужно выгрузить.
//
Процедура ОчиститьНаборЗаписей(ОбъектМетаданных)
	
	МенеджерОбъекта = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) 
		И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.Записать();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистратор КАК Регистратор
		|ИЗ
		|	" + ОбъектМетаданных.ПолноеИмя();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	// Дополнительно очищаются границы последовательности с битыми ссылками.
	Если Метаданные.Последовательности.Содержит(ОбъектМетаданных) И ОбъектМетаданных.Измерения.Количество() Тогда
		
		Измерения = Новый Массив;
		Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
			Измерения.Добавить(Измерение.Имя);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	" + СтрСоединить(Измерения, ",") + "
		|ИЗ
		|	" + ОбъектМетаданных.ПолноеИмя() + ".Границы";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() Тогда
			
			МетаданныеДокумента = Неопределено;
			Для Каждого МетаданныеДокумента Из ОбъектМетаданных.Документы Цикл
				Прервать;
			КонецЦикла;
			МенеджерДокумента = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор);
			
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			НаборЗаписей.Записать();
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает общие данные из каталога.
//
// Параметры:
//   КаталогДанных - Строка - полное имя каталога.
//   ТаблицаДанных - ТаблицаЗначений - описание см. ТаблицаДанных().
//
// Возвращаемое значение:
//   Соответствие - соответствие старых и новых ссылок общих данных.
//
Функция ЗагрузитьОбщиеДанные(КаталогДанных, ТаблицаДанных)
	
	// Ключ - старая ссылка, Значение - новая ссылка.
	ОбщиеДанные = Новый Соответствие;
	
	ОбщиеДанныеСопоставляемыеПоПолямПоиска = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке();
	
	Для Каждого ОбъектМетаданных Из ПорядокСопоставленияОбщихДанных() Цикл
		
		НайденнаяСтрока = ТаблицаДанных.Найти(ОбъектМетаданных.ПолноеИмя(), "ОбъектМетаданных");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СопоставитьПоПолямПоиска = ОбщиеДанныеСопоставляемыеПоПолямПоиска.Найти(ОбъектМетаданных) <> Неопределено;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(КаталогДанных + НайденнаяСтрока.Идентификатор + ".xml");
		ЧтениеXML.ПерейтиКСодержимому();
		
		ТаблицаДанных.Удалить(НайденнаяСтрока);
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
			ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
		КонецЕсли;
		
		Объекты = Новый Массив;
		
		ЧтениеXML.Прочитать();
		Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных);
		    Объекты.Добавить(Объект);
			
			Если Объекты.Количество() = 10000 Тогда
				Если СопоставитьПоПолямПоиска Тогда
					СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные);
				Иначе
					СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные);
				КонецЕсли;
				Объекты.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		ЧтениеXML.Закрыть();
		
		Если Объекты.Количество() > 0 Тогда
			Если СопоставитьПоПолямПоиска Тогда
				СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные);
			Иначе
				СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщиеДанные;
		
КонецФункции

// Загружает хранилища значений в реквизит.
//
// Параметры:
//   Реквизит - ХранилищеЗначений - значение реквизита.
//   Идентификатор - Строка - идентификатор загружаемого объекта.
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
Процедура ЗагрузитьХранилищеЗначений(Реквизит, Идентификатор, ПараметрыЗагрузки)
	
	Если ТипЗнч(Реквизит) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИмяФайла = Реквизит.Получить();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ИмяФайла) <> Тип("Строка") Или ПустаяСтрока(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ПараметрыЗагрузки.КаталогДанных + Идентификатор + "-storages" + ПолучитьРазделительПути() + ИмяФайла;
	
	Если СтрЗаканчиваетсяНа(ИмяФайла, ".bin") Тогда
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Реквизит = Новый ХранилищеЗначения(ДвоичныеДанные);
		
	Иначе
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		ЗаменитьСсылкиПриЗагрузке(ОбъектXDTO, ПараметрыЗагрузки);
		
		Значение = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		Реквизит = Новый ХранилищеЗначения(Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Загружает настройки пользователей.
//
// Параметры:
//   ХранилищеНастроек - СтандартноеХранилищеНастроекМенеджер - хранилище, в которое загружаются настройки.
//   ИмяФайла - Строка - короткое имя файла.
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
Процедура ЗагрузитьНастройкиПользователей(ХранилищеНастроек, ИмяФайла, ПараметрыЗагрузки)
	
	Если ТипЗнч(ХранилищеНастроек) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ПараметрыЗагрузки.КаталогЗагрузки + ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ХранилищеНастроек.Выбрать();
	Пока Выборка.Следующий() Цикл
		ХранилищеНастроек.Удалить(Выборка.КлючОбъекта, Выборка.КлючНастроек, Выборка.Пользователь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	ИменаПользователей = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ <> Неопределено Тогда
			ИменаПользователей.Вставить(Выборка.Пользователь, ПользовательИБ.ИМя);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогЗагрузки + ИмяФайла);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Настройки" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Настройки"".'"));
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Настройка = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		Если ТипЗнч(Настройка) = Тип("ХранилищеЗначения") Тогда
			Настройка = Настройка.Получить();
		КонецЕсли;
		
		ИмяПользователя = ИменаПользователей[Настройка.Пользователь];
		
		Если ИмяПользователя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Настройка.Настройки) = Тип("ИзбранноеРаботыПользователя") Тогда
			НовоеИзбранное = Новый ИзбранноеРаботыПользователя;
			Для Каждого Элемент Из Настройка.Настройки Цикл
				ОбъектXDTO = ПреобразоватьНавигационнуюСсылкуВОбъектXDTO(Элемент.НавигационнаяСсылка);
				Если ОбъектXDTO <> Неопределено Тогда
					ЗаменитьСсылкиПриЗагрузке(ОбъектXDTO, ПараметрыЗагрузки);
					ЭлементИзбранного = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
					Для Каждого ЭлементЗамены Из ЭлементИзбранного.Замена Цикл
						НовоеЗначение = УникальныйИдентификаторВСтроку32(ЭлементЗамены.Значение.УникальныйИдентификатор());
						ЭлементИзбранного.НавигационнаяСсылка = СтрЗаменить(ЭлементИзбранного.НавигационнаяСсылка, ЭлементЗамены.Ключ, НовоеЗначение);
					КонецЦикла;
					Элемент.НавигационнаяСсылка = ЭлементИзбранного.НавигационнаяСсылка;
				КонецЕсли;
				НовыйЭлемент = Новый ЭлементИзбранногоРаботыПользователя;
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				НовоеИзбранное.Добавить(НовыйЭлемент);
			КонецЦикла;
			Настройка.Настройки = НовоеИзбранное;
		КонецЕсли;
		
		ОписаниеНастроек = Новый ОписаниеНастроек;
		ОписаниеНастроек.Представление = Настройка.Представление;
		ХранилищеНастроек.Сохранить(Настройка.КлючОбъекта, Настройка.КлючНастроек, Настройка.Настройки, ОписаниеНастроек, ИмяПользователя);
	КонецЦикла;
		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Загружает границы последовательности из файла.
//
// Параметры:
//
Процедура ЗагрузитьГраницыПоследовательностей(ПараметрыЗагрузки)
	
	Файл = Новый Файл(ПараметрыЗагрузки.КаталогЗагрузки + "SequenceBounds.xml");
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПараметрыЗагрузки.КаталогЗагрузки + "SequenceBounds.xml");
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'"));
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ИмяПоследовательности = ЧтениеXML.Имя;
		Границы = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		Отбор = Новый Структура;
		Для Каждого Измерение Из Метаданные.Последовательности[ИмяПоследовательности].Измерения Цикл
			Отбор.Вставить(Измерение.Имя);
		КонецЦикла;
		
		Для Каждого Граница Из Границы Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Граница);
			МоментВремени = Новый МоментВремени(Граница.Период, Граница.Регистратор);
			Последовательности[ИмяПоследовательности].УстановитьГраницу(МоментВремени, Отбор);
		КонецЦикла;
		
	КонецЦикла;
		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Загружает состав стандартного интерфейса.
//
// Параметры:
//   КаталогЗагрузки - Строка - полное имя каталога.
//
Процедура ЗагрузитьСоставСтандартногоИнтерфейсаOData(КаталогЗагрузки)
	
	Файл = Новый Файл(КаталогЗагрузки + "StandardODataInterfaceContent.xml");
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Состав = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "StandardODataInterfaceContent.xml");
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из Состав Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
		
	УстановитьСоставСтандартногоИнтерфейсаOData(ОбъектыМетаданных);
	
КонецПроцедуры

// Записыват данные в файл, данные при этом сериализуются в XML.
//
// Параметры:
//   Данные - Любой - любой сериализуемый в XML тип.
//   ИмяФайла - Строка - полное имя файла.
//
Процедура ЗаписатьДанныеВФайл(Данные, ИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные, НазначениеТипаXML.Явное);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Читает данные из файла.
//
// Параметры:
//   ИмяФайла - Строка - полное имя файла.
//
// Возвращаемое значение:
//   Любой - любой сериализуемый в XML тип.
//
Функция ПрочитатьДанныеИзФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

// Возвращает общий каталог временных файлов, который доступен между сеансами.
//
// Возвращаемое значение:
//   Строка - полный путь к каталогу.
//
Функция ПолучитьОбщийКаталогВременныхФайлов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;
	
	Если ТипПлатформыСервера = ТипПлатформы.Linux_x86 Или ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
		ОбщийВременныйКаталог = Константы.КаталогОбменаФайламиВМоделиСервисаLinux.Получить();
	Иначе
		ОбщийВременныйКаталог = Константы.КаталогОбменаФайламиВМоделиСервиса.Получить();
	КонецЕсли;
	
	Если ПустаяСтрока(ОбщийВременныйКаталог) Тогда
		ОбщийВременныйКаталог = СокрЛП(КаталогВременныхФайлов());
	Иначе
		ОбщийВременныйКаталог = СокрЛП(ОбщийВременныйКаталог);
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ОбщийВременныйКаталог, ПолучитьРазделительПути()) Тогда
		ОбщийВременныйКаталог = ОбщийВременныйКаталог + ПолучитьРазделительПути();
	КонецЕсли;
	
	Возврат ОбщийВременныйКаталог;
	
КонецФункции

// Проверяет имя конфигурации и версию, в случае несовпадения вызывает исключение.
//
// Параметры:
//   Параметры - Структура - структура с ключами:
//     * ИмяКонфигурации - Строка - имя конфигурации.
//     * ВерсияКонфигурации - Строка - версия конфигурации.
//
Процедура ПроверитьКонфигурациюВерсию(Параметры)
	
	Если Параметры.ИмяКонфигурации <> Метаданные.Имя Тогда
		ВызватьИсключение НСтр("ru = 'Имя конфигурации не совпадает.'");
	КонецЕсли;
	
	Если Параметры.ВерсияКонфигурации <> Метаданные.Версия Тогда
		ВызватьИсключение НСтр("ru = 'Версия конфигурации не совпадает.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет использование разделения сеанса, если разделение не используется, то вызывается исключение.
//
Процедура ПроверитьИспользованиеРазделениеСеанса()
	
	Если Не РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных() Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение возможно только в разделенном сеансе.'");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет блокировку монопольного режима, если блокировка не установлена, то вызывается исключение.
//
Процедура ПроверитьМонопольныйРежим()
	
	Если Не МонопольныйРежим() Тогда
		ВызватьИсключение НСтр("ru = 'Требуется монопольный режим.'");
	КонецЕсли;
	
КонецПроцедуры

// Очищает очередь загрузки.
//
// Параметры:
//
Процедура УдалитьОчередь()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МиграцияПриложенийОчередьЗагрузки.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.МиграцияПриложенийОчередьЗагрузки КАК МиграцияПриложенийОчередьЗагрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Файл = Новый Файл(Выборка.ИмяФайла);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(Выборка.ИмяФайла);
			Исключение
				СборщикМусора = РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.СоздатьМенеджерЗаписи();
				СборщикМусора.ИдентификаторСообщения = Файл.ИмяБезРасширения;
				СборщикМусора.ИмяФайлаСообщения = Выборка.ИмяФайла;
				СборщикМусора.ДатаЗакладкиСообщения = ТекущаяУниверсальнаяДата();
				СборщикМусора.Записать();
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.МиграцияПриложенийОчередьЗагрузки.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Конструктор таблицы данных.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ОбъектМетаданных - Строка - полное имя метаданного.
//     * Идентификатор - Строка - идентификатор объекта, порядковый номер приведенный к строковому представлению.
//     * КоличествоЗаписей - Число - количество выгруженных объектов.
//
Функция ТаблицаДанных()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Данные.Колонки.Добавить("КоличествоЗаписей", Новый ОписаниеТипов("Число"));
	
	Возврат Данные;
	
КонецФункции

// Добавляет ссылки общих данных и проверяет использование запрещенных данных.
//
// Параметры:
//   Значение - ОбъектXDTO, СписокXDTO, Ссылка на общие данные - значение, которое нужно проанализировать.
//   ПараметрыВыгрузки - Структура - описание см. ПараметрыВыгрузки().
//
Процедура ДобавитьВспомогательныеДанные(Значение, ПараметрыВыгрузки)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("ОбъектXDTO") Тогда 
		
		Для Каждого СвойствоXDTO Из Значение.Тип().Свойства Цикл
			ДобавитьВспомогательныеДанные(Значение[СвойствоXDTO.Имя], ПараметрыВыгрузки);
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("СписокXDTO") Тогда
		
		Для Индекс = 0 По Значение.Количество() - 1 Цикл
			ДобавитьВспомогательныеДанные(Значение[Индекс], ПараметрыВыгрузки);
		КонецЦикла;
		
	ИначеЕсли ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска[ТипЗначения] <> Неопределено Тогда 
		
		Если ЗначениеЗаполнено(Значение) И ПараметрыВыгрузки.СсылкиОбщихДанных[Значение] = Неопределено Тогда
			
			ПараметрыВыгрузки.СсылкиОбщихДанных.Вставить(Значение, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВыгрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) И ПараметрыВыгрузки.СсылкиОбщихДанных[Значение] = Неопределено Тогда
			
			ПараметрыВыгрузки.СсылкиОбщихДанных.Вставить(Значение, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыВыгрузки.ЗапрещенныеТипыОбщихДанных[ТипЗначения] <> Неопределено Тогда 
		
		Если ЗначениеЗаполнено(Значение) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте обнаружена недопустимая ссылка. Тип данных: %1'"), Значение.Метаданные().ПолноеИмя());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует имя файла с учетом подкаталога, согласно правилу, что в каталоге должно быть не больше 1000 файлов.
//
// Параметры:
//   Каталог - Строка - полное имя каталога, используется для создания подкаталога.
//   КоличествоФайлов - Число - переменная в которой накапливается количество файлов в каталоге.
//
// Возвращаемое значение:
//
//
Функция СформироватьИмяФайла(Каталог, КоличествоФайлов)
	
	ИмяФайла = Формат(КоличествоФайлов % 1000, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
	НомерКаталога = Цел(КоличествоФайлов / 1000);
	Подкаталог = ?(НомерКаталога = 0, "", Формат(НомерКаталога, "ЧГ=0") + ПолучитьРазделительПути());
	
	Если КоличествоФайлов % 1000 = 0 Тогда
		СоздатьКаталог(Каталог + ПолучитьРазделительПути() + Подкаталог);
	КонецЕсли;
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
	Возврат Подкаталог + ИмяФайла;
	
КонецФункции

// Записывает соответствие часто используемых пространств имен, это немного уменьшает размер xml.
//
// Параметры:
//   ЗаписьXML - ЗаписьXML.
//
Процедура ЗаписатьСоответствиеПространствИмен(ЗаписьXML)
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("en", "http://v8.1c.ru/8.1/data/enterprise");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("cc", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
КонецПроцедуры

// Возращает все типы узлов обмена.
//
// Возвращаемое значение:
//   Соответствие - коллекция типов узлов.
//
Функция ТипыУзловОбмена()
	
	Типы = Новый Соответствие;
	
	Для Каждого ПланОбмена Из ПланыОбмена Цикл
		Типы.Вставить(ТипЗнч(ПланОбмена.ПустаяСсылка()), Истина);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

// Возвращает коллекцию узлов планов обмена, у которых ЭтотУзел = Истина;
//
// Возвращаемое значение:
//   Массив - массив объектов ПланОбменаСсылка.
//
Функция ВсеЭтиУзлы()
	
	Узлы = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыОбмена Цикл
		Узлы.Добавить(ПланыОбмена[ОбъектМетаданных.Имя].ЭтотУзел());
	КонецЦикла;
	
	Возврат Узлы;
	
КонецФункции

// Возвращает коллекцию имен реквизитов, которые содержат тип ХранилищеЗначений.
//
// Параметры:
//   Реквизиты - КоллекцияОбъектовМетаданных - коллекция реквизитов.
//
// Возвращаемое значение:
//   Массив - массив реквизитов с типом ХранилищеЗначения.
//
Функция РеквизитыСХранилищем(Реквизиты)
	
	РеквизитыСХранилищем = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			РеквизитыСХранилищем.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыСХранилищем;
	
КонецФункции

// Ищет соответствие для каждой ссылки общих данных по предопределенному имени.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Справочник, ОбъектМетаданных: ПланВидовХарактеристик, 
//						ОбъектМетаданных: ПланВидовРасчета - объект метаданных, для которого необходимо выполнить соспоставление.
//   Объекты - Массив - массив ссылок, для которых необходиом выполнить сопоставление.
//   ОбщиеДанные - Соответствие - коллекция куда помещается соответствие ссылок.
//
Процедура СопоставитьОбщиеДанныеПоПредопределенномуИмени(ОбъектМетаданных, Объекты, ОбщиеДанные)
	
	МенеджерОбъекта = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Для Каждого Объект Из Объекты Цикл
		Ссылка = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Объект.ПолучитьСсылкуНового());
		ОбщиеДанные.Вставить(Ссылка, МенеджерОбъекта[Объект.ИмяПредопределенныхДанных]);
	КонецЦикла;
	
КонецПроцедуры

// Ищет соответствие для каждой ссылки общих данных по ключевым полям поиска.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных: Справочник, ОбъектМетаданных: ПланВидовХарактеристик, 
//						ОбъектМетаданных: ПланВидовРасчета - объект метаданных, для которого необходимо выполнить соспоставление.
//   Объекты - Массив - массив ссылок, для которых необходиом выполнить сопоставление.
//   ОбщиеДанные - Соответствие - коллекция куда помещается соответствие ссылок.
//
Процедура СопоставитьОбщиеДанныеПоПолямПоиска(ОбъектМетаданных, Объекты, ОбщиеДанные)
	
	МенеджерОбъекта = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Поля = МенеджерОбъекта.ПоляЕстественногоКлюча();
	УсловияСоединения = Новый Массив;
	ПоляЗамены = Новый Массив;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Ссылка", ОбъектМетаданных.СтандартныеРеквизиты.Ссылка.Тип);
	Для Каждого Поле Из Поля Цикл
		ТипПоля = ТипПоляПоиска(ОбъектМетаданных, Поле);
		ТаблицаОбъектов.Колонки.Добавить(Поле, ТипПоля);
		УсловияСоединения.Добавить("ТаблицаОбъектов." + Поле + " = ТаблицаСправочника." + Поле);
		// Замены ссылки
		Для Каждого Тип Из ТипПоля.Типы() Цикл
			Если Метаданные.НайтиПоТипу(Тип) <> Неопределено Тогда
				ПоляЗамены.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Объект Из Объекты Цикл
		Для Каждого Поле из ПоляЗамены Цикл
			НовоеЗначение = ОбщиеДанные[Объект[Поле]];
			Если НовоеЗначение <> Неопределено Тогда
				Объект[Поле] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = ТаблицаОбъектов.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
			НоваяСтрока.Ссылка = Объект.ПолучитьссылкуНового();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка,
	|	" + СтрСоединить(Поля, ",") + "
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК СтараяСсылка,
	|	ТаблицаСправочника.Ссылка КАК НоваяСсылка
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОбъектМетаданных.ПолноеИмя() + " КАК ТаблицаСправочника
	|		ПО " + СтрСоединить(УсловияСоединения, " И ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщиеДанные.Вставить(Выборка.СтараяСсылка, Выборка.НоваяСсылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает порядок сопоставления общих данных.
//
// Возвращаемое значение:
//   Массив - массив объектов метаданных
//
Функция ПорядокСопоставленияОбщихДанных()
	
	ТипыОбщихДанных = ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыОбщихДанныхПоддерживающиеСопоставлениеСсылокПриЗагрузке();
		
	Граф = Новый Соответствие;
	
	// Заполнение вершин графа.
	Для Каждого ОбъектМетаданных Из ТипыОбщихДанных Цикл
		Граф.Вставить(ОбъектМетаданных, Новый Структура("Объект, Зависимости, Цвет", ОбъектМетаданных, Новый Массив, 0));
	КонецЦикла;
	Для Каждого Тип Из МиграцияПриложенийПовтИсп.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип.Ключ);
		Граф.Вставить(ОбъектМетаданных, Новый Структура("Объект, Зависимости, Цвет", ОбъектМетаданных, Новый Массив, 0));
	КонецЦикла;
	
	// Заполнение ребер графа.
	Для Каждого ОбъектМетаданных Из ТипыОбщихДанных Цикл
		МенеджерОбъекта = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Для Каждого ПолеПоиска Из МенеджерОбъекта.ПоляЕстественногоКлюча() Цикл
			Для Каждого Тип Из ТипПоляПоиска(ОбъектМетаданных, ПолеПоиска).Типы() Цикл
				НайденныйОбъект = Метаданные.НайтиПоТипу(Тип);
				Если НайденныйОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Граф[ОбъектМетаданных].Зависимости.Добавить(НайденныйОбъект);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Топологическая сортировка.
	Порядок = Новый Массив;
	Для Каждого Вершина Из Граф Цикл
		ПоискВГлубину(Граф, Вершина.Значение, Порядок);
	КонецЦикла;
	
	Возврат Порядок;
	
КонецФункции

// Алгоритм "Поиск в глубину" (рекурсивный).
//
// Параметры:
//   Граф - Соответствие - коллекция объектов, их зависимостей и цвета:
//     * Ключ - Любой объект - ключ используется для быстрого поиска.
//     * Значение - Структура - структура с ключами:
//         ** Объект - Любой объект - объект, для которого строится зависимость.
//         ** Зависимости - Массив - массив объектов, которые используются в Объект.
//         ** Цвет - Число - 0,1,2 - белый, серый, черный.
//   Вершина - Структура - описание см. параметр Граф.Значение.
//   Порядок - Массив - массив объектов метаданных, после выполнения будет содержать результат.
//
Процедура ПоискВГлубину(Граф, Вершина, Порядок)
	
	// Если вершина "серая", значит найден цикл, топологическая сортировка невозможна.
	Если Вершина.Цвет = 1 Тогда
		
		ВызватьИсключение НСтр("ru = 'Рекурсивная зависимость.'");
		
	ИначеЕсли Вершина.Цвет = 0 Тогда
		
		// При входе вершина становится "серой".
		Вершина.Цвет = 1;
		
		// Из каждой вершины проводим обход в глубину.
		Для Каждого Объект Из Вершина.Зависимости Цикл
			НоваяВершина = Граф[Объект];
			Если НоваяВершина <> Неопределено Тогда
				ПоискВГлубину(Граф, НоваяВершина, Порядок);
			КонецЕсли;
		КонецЦикла;
		
		// При выходе вершина становится "черной".
		Вершина.Цвет = 2;
		// И одновременно заносится в окончательный список.
		Порядок.Добавить(Вершина.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает тип поля по имени.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - объект, поле которого нужно проанализировать.
//   ИмяПоля - Строка - имя поля.
//
// Возвращаемое значение:
//   ОписаниеТипов - тип поля.
//
Функция ТипПоляПоиска(ОбъектМетаданных, ИмяПоля)
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяПоля Тогда
			Возврат Реквизит.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Реквизит = ОбъектМетаданных.Реквизиты.Найти(ИмяПоля);
	Если Реквизит <> Неопределено Тогда
		Возврат Реквизит.Тип;
	КонецЕсли;
	
	ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяПоля);
	Если ОбщийРеквизит <> Неопределено И ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать Тогда
		ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
			Или ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
			И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать Тогда
			Возврат ОбщийРеквизит.Тип;			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Поле %1 не может использоваться в качестве поля естественного ключа объекта %2:
		|поле объекта не обнаружено!'", Метаданные.ОсновнойЯзык.КодЯзыка),
		ИмяПоля,
		ОбъектМетаданных.ПолноеИмя());
	
КонецФункции

// Удаляет все записи указанных объектов из базы данных.
//
// Параметры:
//   ОбъектыДляОчистки - Соответствие - в качестве ключа ОбъектМетаданных, который нужно очистить.
//
Процедура ОчиститьПользовательскиеДанные(ОбъектыДляОчистки)
	
	Для Каждого КлючИЗначение Из ОбъектыДляОчистки Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(КлючИЗначение.Ключ);
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			МенеджерЗначения = Константы[ОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = Неопределено;
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			МенеджерЗначения.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			МенеджерЗначения.Записать();
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) 
			Или Метаданные.Документы.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.Задачи.Содержит(ОбъектМетаданных) 
			Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
			
			ОчиститьСсылочныйТип(ОбъектМетаданных);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
			Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) 
			Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
			Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
			
			ОчиститьНаборЗаписей(ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыДляОчистки.Очистить();
	
КонецПроцедуры

// Заменяет ссылки в объекте. Следующие ссылки требуют замены: Ссылки планов обмена, общих данных и ссылки разделенных независимо и совместно.
//
// Параметры:
//   Значение - ОбъектXDTO, СписокXDTO, Ссылка - объект, в котором нужно заменить ссылки, либо само значение.
//   ПараметрыЗагрузки - Структура - описание см. ПараметрыЗагрузки().
//
Процедура ЗаменитьСсылкиПриЗагрузке(Значение, ПараметрыЗагрузки)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("ОбъектXDTO") Тогда
		
		Для Каждого СвойствоXDTO Из Значение.Тип().Свойства Цикл
			ЗаменитьСсылкиПриЗагрузке(Значение[СвойствоXDTO.Имя], ПараметрыЗагрузки);
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("СписокXDTO") Тогда
		
		Для Индекс = 0 По Значение.Количество() - 1 Цикл
			ЗаменитьСсылкиПриЗагрузке(Значение[Индекс], ПараметрыЗагрузки);
		КонецЦикла;
		
	ИначеЕсли ПараметрыЗагрузки.ТипыСопоставляемыхОбщихДанныхПоПолямПоиска[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			НовоеЗначение = ПараметрыЗагрузки.ОбщиеДанные[Значение];
			Если НовоеЗначение <> Неопределено Тогда
		    	Значение = СериализаторXDTO.ЗаписатьXDTO(НовоеЗначение);
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ПараметрыЗагрузки.ТипыПересоздаваемыхСсылок[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			НоваяСсылка = ПараметрыЗагрузки.СоответствиеСсылок[Значение];
			Если НоваяСсылка = Неопределено Тогда
				МенеджерОбъекта = ТехнологияСервисаИнтеграцияСБСП.МенеджерОбъектаПоПолномуИмени(Значение.Метаданные().ПолноеИмя());
				НоваяСсылка = МенеджерОбъекта.ПолучитьСсылку();
				ПараметрыЗагрузки.СоответствиеСсылок.Вставить(Значение, НоваяСсылка);
			КонецЕсли;
			Значение = СериализаторXDTO.ЗаписатьXDTO(НоваяСсылка);
		КонецЕсли;
			
	ИначеЕсли ПараметрыЗагрузки.ТипыСопоставляемыхОбщихДанныхПоПредопределенномуИмени[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			НовоеЗначение = ПараметрыЗагрузки.ОбщиеДанные[Значение];
			Если НовоеЗначение = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте обнаружена недопустимая ссылка. Тип данных: %1'"), Значение.Метаданные().ПолноеИмя());
			КонецЕсли;
			Значение = СериализаторXDTO.ЗаписатьXDTO(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ТипыУзловОбмена[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			НовоеЗначение = ПараметрыЗагрузки.СоответствиеСсылок[Значение];
			Если НовоеЗначение <> Неопределено Тогда
		    	Значение = СериализаторXDTO.ЗаписатьXDTO(НовоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыЗагрузки.ЗапрещенныеТипыОбщихДанных[ТипЗначения] <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'В объекте обнаружена недопустимая ссылка. Тип данных: %1'"), Значение.Метаданные().ПолноеИмя());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в переданную коллекцию прочитанные из файла ссылки.
//
// Параметры:
//   СоответствиеСсылок - Соответствие - коллекция соответствия ссылок.
//   КаталогЗагрузки - Строка - полное имя каталога, откуда выполняется загрузка.
//
// Возвращаемое значение:
//   Соответствие - параметр СоответствиеСсылок.
//
Функция ПрочитатьСоответствиеСсылок(Знач СоответствиеСсылок, КаталогЗагрузки)
	
	Файл = Новый Файл(КаталогЗагрузки + "ThisNodes.xml");
	Если Файл.Существует() Тогда
		
		ЭтиУзлы = ПрочитатьДанныеИзФайла(КаталогЗагрузки + "ThisNodes.xml");
		
		Для Каждого СтарыйУзел Из ЭтиУзлы Цикл
			СоответствиеСсылок.Вставить(СтарыйУзел, ПланыОбмена[СтарыйУзел.Метаданные().Имя].ЭтотУзел());
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеСсылок;
	
КонецФункции

// Получает все объекты метаданных, которые требуется очистить.
//
// Параметры:
//
// Возвращаемое значение:
//   Соответствие - коллекция полных имен метаданных.
//
Функция ОбъектыДляОчистки()
	
	Объекты = Новый Соответствие;
	
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав Цикл
		Объекты.Вставить(ЭлементСостава.Метаданные.ПолноеИмя(), Истина);
	КонецЦикла;
	
	Возврат Объекты;
	
КонецФункции

// Разбирает навигационную ссылку и представляет в виде объекта XDTO.
//
// Параметры:
//   НавигационнаяСсылка - Строка - навигационная ссылка.
//
// Возвращаемое значение:
//   ОбъектXDTO - сериализованный объект Структура с ключами:
//     * НавигационнаяСсылка - Строка - преобразованная навигационная ссылка, от исходной навигационной ссылки отличается тем, что выделены ссылки и заменены на параметры.
//     * Замена - Соответствие - соответствие параметров и ссылок.
//
Функция ПреобразоватьНавигационнуюСсылкуВОбъектXDTO(Знач НавигационнаяСсылка)
	
	// Примеры навигационных ссылок (см. также ПредставлениеНавигационнойСсылки.НавигационнаяСсылка):
	//   Объект информационной базы - e1cib/data/<путь к метаданному>?ref="<идентификатор ссылки>";
	//   Запись регистра информационной базы - e1cib/data/<путь к метаданному>?<имя ключевого поля>="<значение>"[&<имя ключевого поля>="<значение>"];
	//   Реквизит объекта информационной базы - e1cib/data/<путь к метаданному>.<имя реквизита>?ref="<идентификатор ссылки>";
	//   Реквизит табличной части объекта информационной базы - e1cib/data/<путь к метаданному>.<имя табличной части>.<имя реквизита>?ref="<идентификатор ссылки>"index="<индекс строки табличной части>";
	//   Реквизит записи регистра информационной базы - e1cib/data/<путь к метаданному>.<имя реквизита>?<имя ключевого поля>="<значение>" [&<имя ключевого поля>="<значение>"];
	
	Если Не СтрНачинаетсяС(НавигационнаяСсылка, "e1cib/data/") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НавигационнаяСсылка = РаскодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.КодировкаURL);
	
	НачалоПараметров = СтрНайти(НавигационнаяСсылка, "?");
	ПутьКМетаданному = Сред(НавигационнаяСсылка, 12, НачалоПараметров - 12);
	ЧастиПути = СтрРазделить(ПутьКМетаданному, ".");
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЧастиПути[0] + "." + ЧастиПути[1]);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоСсылочныйОбъект = ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ОбъектМетаданных);
	ЭтоНезависимыйРегистр = Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	
	Если Не ЭтоСсылочныйОбъект И Не ЭтоНезависимыйРегистр Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыПараметров = Новый Структура;
	Если ЭтоСсылочныйОбъект Тогда
		ТипыПараметров.Вставить("ref", ОбъектМетаданных.СтандартныеРеквизиты.Ссылка.Тип);
		ТипыПараметров.Вставить("index", Новый ОписаниеТипов("Число"));
	Иначе 
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ТипыПараметров.Вставить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
			ТипыПараметров.Вставить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыНавигационнойСсылки = Новый Массив;
	ЭлементИзбранного = Новый Структура("НавигационнаяСсылка, Замена", НавигационнаяСсылка, Новый Соответствие);
	
	СтрокаПараметров = Сред(НавигационнаяСсылка, НачалоПараметров + 1);
	Для Каждого Параметр Из СтрРазделить(СтрокаПараметров, "&") Цикл
		
		ЗнакРавно = СтрНайти(Параметр, "=");
		ИмяПараметра = Лев(Параметр, ЗнакРавно - 1);
		ЗначениеПараметра = Сред(Параметр, ЗнакРавно + 1);
		ТипПараметра = ТипыПараметров[ИмяПараметра];
		Если ТипПараметра.Типы().Количество() = 1 Тогда
			ТипСсылки = ТипПараметра.Типы()[0];
		Иначе
			// Составной тип.
			ТипСсылки = Тип(Лев(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":") - 1));
		КонецЕсли;
		
		МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипСсылки); 
		Если МетаданныеСсылки = Неопределено Тогда
			ПараметрыНавигационнойСсылки.Добавить(Параметр);
		Иначе
			Идентификатор = УникальныйИдентификаторИзСтроки32(Сред(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":") + 1));
			ПараметрыКонструктора = Новый Массив;
			ПараметрыКонструктора.Добавить(Идентификатор);
			СсылкаПараметра = Новый (ТипСсылки, ПараметрыКонструктора);
			
			ИдентификаторЗамены = Строка(Новый УникальныйИдентификатор);
			НовоеЗначениеПараметра = Лев(ЗначениеПараметра, СтрНайти(ЗначениеПараметра, ":")) + ИдентификаторЗамены;
			ПараметрыНавигационнойСсылки.Добавить(ИмяПараметра + "=" + КодироватьСтроку(НовоеЗначениеПараметра, СпособКодированияСтроки.КодировкаURL));
			ЭлементИзбранного.Замена.Вставить(ИдентификаторЗамены, СсылкаПараметра);
		КонецЕсли;
			
	КонецЦикла;
	
	НоваяНавигационнаяСсылка = "e1cib/data/" + ПутьКМетаданному + "?" + СтрСоединить(ПараметрыНавигационнойСсылки, "&");
	ЭлементИзбранного.НавигационнаяСсылка = НоваяНавигационнаяСсылка;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ЭлементИзбранного);
	
КонецФункции

// Преобразует представление уникального идентификатора для навигационной ссылки в уникальный идентификатор.
//
// Параметры:
//   Отображение - Строка - представление уникального идентификатора.
//
// Возвращаемое значение:
//   УникальныйИдентификатор - полученный идентификатор.
//
Функция УникальныйИдентификаторИзСтроки32(Знач Отображение)
	
	Часть1 = Сред(Отображение, 25, 8);
	Часть2 = Сред(Отображение, 21, 4);
	Часть3 = Сред(Отображение, 17, 4);
	Часть4 = Сред(Отображение, 1,  4);
	Часть5 = Сред(Отображение, 5,  12);
	
	Возврат Новый УникальныйИдентификатор(Часть1 + "-" + Часть2 + "-" + Часть3 + "-" + Часть4 + "-" + Часть5);
	
КонецФункции

// Преобразует уникальный идентификатор в формат идентификатора навигационной ссылки.
//
// Параметры:
//   Идентификатор - УникальныйИдентификатор, который требуется преобразовать.
//
// Возвращаемое значение:
//   Строка - строковое представление.
//
Функция УникальныйИдентификаторВСтроку32(Знач Идентификатор)
	
	Части = СтрРазделить(Идентификатор, "-");
	Ид = Части[3] + Части[4] + Части[2] + Части[1] + Части[0];
	
	ИдентификаторСсылки = Строка(Идентификатор);
	
	Возврат Сред(ИдентификаторСсылки, 20, 4) + Сред(ИдентификаторСсылки, 25) + Сред(ИдентификаторСсылки, 15, 4) + Сред(ИдентификаторСсылки, 10, 4) + Сред(ИдентификаторСсылки, 1, 8);
	
КонецФункции

// Добавляет все пользователей с ролью ПолныеПрава в группу доступа Администраторы.
//
Процедура ДобавитьПолноправныхПользователейВГруппуАдминистраторыИОбновитьРолиОстальнымПользователям()
	
	ИдентификаторыПользователей = Новый Массив;
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			ИдентификаторыПользователей.Добавить(Пользователь.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПользователей", ИдентификаторыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&ИдентификаторыПользователей)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СпрОбъект = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// В новой области у пользователя только два вида КИ.
			Для Каждого СтрокаКИ Из ПользовательОбъект.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
					СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
				ИначеЕсли  СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
					СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
				КонецЕсли;
			КонецЦикла;
			
			Если СпрОбъект.Пользователи.Найти(Выборка.Ссылка, "Пользователь") = Неопределено Тогда
				ПользовательОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", НСтр("ru = 'Создание администратора области данных при миграции приложения.'"));
				СпрОбъект.Пользователи.Добавить().Пользователь = Выборка.Ссылка;
			КонецЕсли;
			
			ПользовательОбъект.Записать();
			
		КонецЦикла;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
	КонецЕсли;
	
	УправлениеДоступом.ОбновитьРолиПользователей();
	
КонецПроцедуры

// Добавляет источнику в получатели все узлы плана обмена МиграцияПриложений.
//
// Параметры:
//   Источник - СправочникОбъект, ДокументОбъект, ... - объект, который регистрируется в плане обмена.
//
Процедура ЗарегистрироватьИзменения(Источник)
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПланаОбмена = ИмяПланаОбмена();
	Если Не ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("ПланОбмена." + ИмяПланаОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МиграцияПриложений.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК МиграцияПриложений
	|ГДЕ
	|	НЕ МиграцияПриложений.ЭтотУзел";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Источник.ОбменДанными.Получатели.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Вызывает метод http-сервиса методом POST, в случае неудачи вызывается исключение.
//
// Параметры:
//   ПараметрыПодключения - Структура - структура с ключами:
//     * ИмяСервера - Строка - имя сервера.
//     * ЗащищенноеСоединение - Булево - истина, если требуется защищенное соединение.
//     * Путь - Строка - адрес ресурса без имени сервера.
//     * Логин - Строка - имя пользователя.
//     * Пароль - Строка - пароль пользователя.
//   МетодСервиса - Строка - имя метода сервиса.
//   Тело - Строка, СериализуемоеЗначение - имя файла или любое сериализуемое в XML значение.
//
// Возвращаемое значение:
//   Структура - Структура - описание см. СостояниеЗагрузки().
//
Функция ВызватьМетодСервиса(ПараметрыПодключения, МетодСервиса, Тело = Неопределено)
	
	ЗащищенноеСоединение = ?(ПараметрыПодключения.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.ИмяСервера, , ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль, , 300, ЗащищенноеСоединение);
	Запрос = Новый HTTPЗапрос(ПараметрыПодключения.Путь + МетодСервиса);
	Если ТипЗнч(Тело) = Тип("Строка") И Не ПустаяСтрока(Тело) Тогда
		Запрос.УстановитьИмяФайлаТела(Тело);
	ИначеЕсли Тело <> Неопределено Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Тело);
		Запрос.УстановитьТелоИзСтроки(ЗаписьXML.Закрыть());
	КонецЕсли;
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		СостояниеЗагрузки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		Возврат СостояниеЗагрузки;
		
	ИначеЕсли Ответ.КодСостояния = 401 Тогда
		
		ВызватьИсключение НСтр("ru = 'Неправильный логин или пароль.'");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось подключиться к серверу, код ответа: %1, текст ответа: %2'"), Ответ.КодСостояния, Символы.ПС + Ответ.ПолучитьТелоКакСтроку());

	КонецЕсли;
	
КонецФункции

// Возвращает сортированный порядок выборки объектов метаданных с учетом последнего выгруженного объекта.
//
// Параметры:
//   ПоследнийОбъект - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   Массив - массив полных имен объектов метаданных.
//
Функция ПорядокВыборкиМетаданных(ПоследнийОбъект)
	
	Объекты = Новый СписокЗначений;
	
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав Цикл
		
		Порядок = "12";
		Если Метаданные.Константы.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "00";
		ИначеЕсли Метаданные.Справочники.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "01";
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "02";
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "03";
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "04";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "05";
		ИначеЕсли Метаданные.Документы.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "06";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "07";
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "08";
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "09";
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "10";
		ИначеЕсли Метаданные.Задачи.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "11";
		ИначеЕсли Метаданные.Последовательности.Содержит(ЭлементСостава.Метаданные) Тогда
			Порядок = "12";
		КонецЕсли;
		
		Объекты.Добавить(ЭлементСостава.Метаданные, Порядок + ЭлементСостава.Метаданные.ПолноеИмя());
	КонецЦикла;
	
	Объекты.СортироватьПоПредставлению();
	НайденныйЭлемент = Объекты.НайтиПоЗначению(Метаданные.НайтиПоПолномуИмени(ПоследнийОбъект));
	
	Если НайденныйЭлемент <> Неопределено Тогда
		Смещение = Объекты.Количество() - 1;
		Для КоличествоПовторов = 0 По Объекты.Индекс(НайденныйЭлемент) Цикл
			Объекты.Сдвинуть(0, Смещение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Объекты.ВыгрузитьЗначения();
	
КонецФункции

// Заполняет состояние выгрузки с учетом статуса загрузки. 
//
// Параметры:
//   СостояниеВыгрузки - РегистрСведенийЗапись.МиграцияПриложенийСостояниеВыгрузки - запись, которую нужно обновить.
//   СостояниеЗагрузки - Структура - описание см. СостояниеЗагрузки().
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел по которому выполняется выборка изменений.
//
Процедура ЗаполнитьСостояниеВыгрузки(СостояниеВыгрузки, СостояниеЗагрузки, УзелОбмена)
	
	СостояниеВыгрузки.ДатаСостоянияЗагрузки = ТекущаяУниверсальнаяДата();
	СостояниеВыгрузки.ОбработаноСообщений = СостояниеЗагрузки.ОбработаноСообщений;
	СостояниеВыгрузки.ЗагруженоОбъектов = СостояниеЗагрузки.ЗагруженоОбъектов;
	СостояниеВыгрузки.ИзмененоОбъектов = КоличествоИзмененных(УзелОбмена);
	Если СостояниеЗагрузки.ЗавершеноСОшибками Тогда
		СостояниеВыгрузки.ЗавершеноСОшибками = Истина;
		СостояниеВыгрузки.ОписаниеОшибки = НСтр("ru = 'При загрузке сообщения возникли ошибки:'") + Символы.ПС + СостояниеЗагрузки.ОписаниеОшибки;
	ИначеЕсли СостояниеЗагрузки.ЗагрузкаПриостановлена Тогда
		СостояниеВыгрузки.ОписаниеОшибки = НСтр("ru = 'Загрузка приостановлена из-за ошибки:'") + Символы.ПС + СостояниеЗагрузки.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает максимальную длину очереди.
//
// Возвращаемое значение:
//   Число - длина очереди.
//
Функция МаксимальнаяОчередьЗагрузки()
	
	Возврат 3;
	
КонецФункции

// Подсчитывает количество зарегистрированных изменений по узлу.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка.МиграцияПриложений - узел по которому выполняется выборка изменений.
//
// Возвращаемое значение:
//   Число - количество изменений.
//
Функция КоличествоИзмененных(Узел)
	
	ТекстыЗапросов = Новый Массив;
	
	Для Каждого Состав Из Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав Цикл
		
		ИмяТаблицы = СтрЗаменить(Состав.Метаданные.ПолноеИмя(), ".Перерасчет.", ".");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	" + ИмяТаблицы + ".Изменения
		|ГДЕ
		|	Узел = &Узел";
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст = "ВЫБРАТЬ СУММА(Количество) КАК Количество ИЗ (" + СтрСоединить(ТекстыЗапросов, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + ") КАК Т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает загружаемые объекты метаданных, которые используются в выгрузке data_dump.zip.
//
// Возвращаемое значение:
//   Соответствие - коллекция объектов метаданных.
//
Функция ЗагружаемыеОбъекты()
	
	ЗагружаемыеОбъекты = МиграцияПриложенийПовтИсп.МодельДанныхОбласти();
	
	Для Каждого ОбъектМетаданных Из ВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ПолучитьТипыИсключаемыеИзВыгрузкиЗагрузки() Цикл
		ЗагружаемыеОбъекты.Удалить(ОбъектМетаданных);
	КонецЦикла;
	
	Возврат ЗагружаемыеОбъекты;
	
КонецФункции

// Проверяет состав плана обмена МиграцияПриложений и возвращает объекты, которые нужно добавить или удалить.
// Пустая структура означает, что состав плана обмена корректный.
//
// Параметры:
//   ЗагружаемыеОбъекты - Соответствие - описание см. ЗагружаемыеОбъекты().
//
// Возвращаемое значение:
//   Структура - структура с необязательными ключами:
//     * Добавить - Массив - массиво объектов, которые нужно добавить.
//     * Удалить - Массив - массиво объектов, которые нужно удалить.
//
Функция ПроверитьСоставПланаОбмена(ЗагружаемыеОбъекты)
	
	НужноДобавить = Новый Массив;
	НужноУдалить = Новый Массив;
	
	Для Каждого КлючИЗначение Из ЗагружаемыеОбъекты Цикл
		Если Не Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав.Содержит(КлючИЗначение.Ключ) Тогда
			НужноДобавить.Добавить(КлючИЗначение.Ключ.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав Цикл
		Если ЗагружаемыеОбъекты[ЭлементСостава.Метаданные] = Неопределено Тогда
			НужноУдалить.Добавить(ЭлементСостава.Метаданные.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Если НужноДобавить.Количество() Тогда
		Результат.Вставить("Добавить", СортироватьМассив(НужноДобавить));
	КонецЕсли;
	
	Если НужноУдалить.Количество() Тогда
		Результат.Вставить("Удалить", СортироватьМассив(НужноУдалить));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет состав плана обмена МиграцияПриложений и возвращает объекты, которые нужно добавить или удалить.
// Пустая структура означает, что состав плана обмена корректный.
//
// Параметры:
//   Подписка - Строка - наименование подписки.
//   ТекущиеТипы - 
//   НужныеТипы - Соответствие - коллекция типов, которые должна содержать подписка.
//
// Возвращаемое значение:
//   Структура - структура с необязательными ключами:
//     * Добавить - Массив - массиво объектов, которые нужно добавить.
//     * Удалить - Массив - массиво объектов, которые нужно удалить.
//     * ОбщийРезультат - Соответствие - общдий результат, в который добавляется результат проверки текущей подписки.
//
Процедура ПроверитьСоставПодписки(Подписка, ТекущиеТипы, НужныеТипы, ОбщийРезультат)
	
	НужноДобавить = Новый Массив;
	НужноУдалить = Новый Массив;
	
	Для Каждого ТекущийТип Из ТекущиеТипы Цикл
		Если НужныеТипы[ТекущийТип] = Неопределено Тогда
			НужноУдалить.Добавить(ИмяТипа(ТекущийТип));
		Иначе
			НужныеТипы.Удалить(ТекущийТип);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НужныйТип Из НужныеТипы Цикл
		НужноДобавить.Добавить(ИмяТипа(НужныйТип.Ключ));
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Если НужноДобавить.Количество() Тогда
		Результат.Вставить("Добавить", СортироватьМассив(НужноДобавить));
	КонецЕсли;
	
	Если НужноУдалить.Количество() Тогда
		Результат.Вставить("Удалить", СортироватьМассив(НужноУдалить));
	КонецЕсли;
	
	Если Результат.Количество() Тогда
		ОбщийРезультат.Вставить(Подписка, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Преобразует тип к строковому представлению.
//
// Параметры:
//   Тип - Тип - тип, который нужно преобразовать.
//
// Возвращаемое значение:
//   Строка - строковое представление типа.
//
Функция ИмяТипа(Тип)
	
	ИмяТипа = СериализаторXDTO.XMLТип(Тип).ИмяТипа;
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "ConstantValueManager", "КонстантаМенеджерЗначения");
	ИмяТипа = СтрЗаменить(ИмяТипа, "CatalogObject", "СправочникОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "DocumentObject", "ДокументОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ChartOfCalculationTypesObject", "ПланВидовРасчетаОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ChartOfAccountsObject", "ПланСчетовОбъект ");
	ИмяТипа = СтрЗаменить(ИмяТипа, "ChartOfCharacteristicTypesObject", "ПланВидовХарактеристикОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "TaskObject", "ЗадачаОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "BusinessProcessObject", "БизнесПроцессОбъект");
	ИмяТипа = СтрЗаменить(ИмяТипа, "AccumulationRegisterRecordSet", "РегистрНакопленияНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "InformationRegisterRecordSet", "РегистрСведенийНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "AccountingRegisterRecordSet", "РегистрБухгалтерииНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "CalculationRegisterRecordSet", "РегистрРасчетаНаборЗаписей");
	ИмяТипа = СтрЗаменить(ИмяТипа, "SequenceRecordSet", "ПоследовательностьНаборЗаписей");
	
	Возврат ИмяТипа;
	
КонецФункции

// Сортирует массив по значений.
//
// Параметры:
//   Массив - Массив - массив, который нужно сортировать.
//
// Возвращаемое значение:
//   Массив - результат сортировки.
//
Функция СортироватьМассив(Массив)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Массив);
	СписокЗначений.СортироватьПоЗначению();
	
	Возврат СписокЗначений.ВыгрузитьЗначения();
	
КонецФункции

// Возвращает недоступные роли пользователям.
//
// Возвращаемое значение:
//   Соответствие - коллекция объектов типа СправочникСсылка.ИдентификаторыОбъектовМетаданных
Функция НедоступныеРоли()
	
	НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРоли();
	ИменаРолей = Новый Массив;
	Для Каждого НедоступнаяРоль Из НедоступныеРоли Цикл
		ИменаРолей.Добавить("Роль." + НедоступнаяРоль.Ключ);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИменаРолей", ИменаРолей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя В(&ИменаРолей)";
	
	НедоступныеРоли = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НедоступныеРоли.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат НедоступныеРоли;
	
КонецФункции

// Проверяет, что объект соответствует указанному объекту метаданных, если не совпадает, то вызывается исключение.
//
// Параметры:
//   Объект - загружаемый объект.
//   ОбъектМетаданных - ОбъектМетаданных.
//
Процедура ПроверитьТипПрочитанногоОбъекта(Объект, ОбъектМетаданных)
	
	Если ОбъектМетаданных <> Объект.Метаданные() Тогда
		ВызватьИсключение НСтр("ru = 'Тип прочитанного объекта не соответствует объявленному.'");
	КонецЕсли;
	
КонецПроцедуры

// Завершает выгрузку и регистрирует ошибку в журнале регистрации.
//
// Параметры:
//   ПодробноеПредставлениеОшибки - Строка - ошибка которая записывается в журнал регистрации.
//   КраткоеПредставлениеОшибки - Строка - сохраняется в регистре, будет показано пользователю.
//
Процедура ЗавершитьВыгрузкуСОшибкой(ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Выгрузка'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
	
	НачатьТранзакцию();
	
	СостояниеВыгрузки = РегистрыСведений.МиграцияПриложенийСостояниеВыгрузки.СоздатьМенеджерЗаписи();
	СостояниеВыгрузки.Прочитать();
	СостояниеВыгрузки.ЗавершеноСОшибками = Истина;
	СостояниеВыгрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки;
	СостояниеВыгрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
	СостояниеВыгрузки.Записать();
	РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийВыгрузка);
	УзелОбмена = УзелОбмена();
	Если ЗначениеЗаполнено(УзелОбмена) Тогда
		УзелОбмена.ПолучитьОбъект().Удалить();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Завершает выгрузку и регистрирует ошибку в журнале регистрации.
//
// Параметры:
//   ПодробноеПредставлениеОшибки - Строка - ошибка которая записывается в журнал регистрации.
//   КраткоеПредставлениеОшибки - Строка - сохраняется в регистре, будет показано пользователю.
//
Процедура ЗавершитьЗагрузкуСОшибкой(ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Миграция приложений. Загрузка'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки);
	
	НачатьТранзакцию();
	
	СостояниеЗагрузки = РегистрыСведений.МиграцияПриложенийСостояниеЗагрузки.СоздатьМенеджерЗаписи();
	СостояниеЗагрузки.Прочитать();
	СостояниеЗагрузки.ЗавершеноСОшибками = Истина;
	СостояниеЗагрузки.ОписаниеОшибки = КраткоеПредставлениеОшибки;
	СостояниеЗагрузки.ДатаЗавершения = ТекущаяУниверсальнаяДата();
	СостояниеЗагрузки.Записать();
	
	Менеджер = Константы.ВыполняетсяЗагрузкаДанных.СоздатьМенеджерЗначения();
	Менеджер.Значение = Ложь;
	Менеджер.Записать();
	
	УдалитьОчередь();
		
	РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.МиграцияПриложенийЗагрузка);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти
