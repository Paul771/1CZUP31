#Область СлужебныйПрограммныйИнтерфейс

#Область Взаимодействия

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхПредметов.
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	ТипыПредметов.Добавить("СправочникСсылка.Кандидаты");
	
КонецПроцедуры

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхКонтактов.
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	ВзаимодействияКлиентСервер.ДобавитьЭлементМассиваОписанияВозможныхТиповКонтактов(
		ТипыКонтактов,
		Тип("СправочникСсылка.ФизическиеЛица"),
		Истина,
		"ФизическиеЛица",
		НСтр("ru = 'Физические лица'"),
		Ложь,
		Ложь,
		"",
		Истина,
		"");
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ОбновитьДоступностьНастроекПодборПерсонала(Форма) Экспорт
	
	Форма.Элементы.ЗагрузитьДанныеИзEStaff.Доступность = Форма.НастройкиПодбораПерсонала.ИспользоватьПодборПерсонала;
	
КонецПроцедуры

#КонецОбласти

// Конструктор структуры параметров для формы редактирования этапа работы с кандидатом.
//
Функция ПараметрыРедактированияЭтапаРаботыСКандидатом() Экспорт
	
	Параметры = Новый Структура(
		"Период, 
		|Кандидат,
		|Кандидаты,
		|ЭтапРаботы,
		|СостояниеЭтапа,
		|ШаблонАнкеты,
		|ПричинаОтклонения,
		|ТолькоПросмотр,
		|Комментарий");
	
	Параметры.Кандидаты = Новый Массив;
		
	Возврат Параметры;
		
КонецФункции

Функция ПараметрыРедактированияКомментарияКандидата() Экспорт
	
	Параметры = Новый Структура(
		"Период,
		|Пользователь,
		|Комментарий,
		|Скрытый,
		|МестоПубликации");
			
	Возврат Параметры;
		
КонецФункции

// Определяет формат хранения HTML резюме кандидата.
//
Функция СтруктураHTMLРезюме() Экспорт
	
	СтруктураРезюме = Новый Структура(
		"HTML, 
		|Вложения");
	СтруктураРезюме.HTML = "";
	СтруктураРезюме.Вложения = Новый Структура;
	
	Возврат СтруктураРезюме;
	
КонецФункции

Функция РезультатУстановкиЭтапаРаботыСКандидатом() Экспорт
	
	Результат = Новый Структура(
		"Кандидаты,
		|Вакансии,
		|Участники,
		|ЭтапРаботы,
		|Напоминание,
		|Письмо,
		|СообщениеSMS");
	
	Результат.ЭтапРаботы = ОписаниеЭтапаРаботыСКандидатом();
	
	Результат.Вакансии = Новый Массив;
	
	Результат.Напоминание = Новый Структура(
		"Напоминать,
		|Период,
		|ИнтервалВремени");
	Результат.Напоминание.Напоминать = Ложь;
	
	Результат.Письмо = Новый Структура(
		"Написать,
		|Шаблон");
	Результат.Письмо.Написать = Ложь;
	
	Результат.СообщениеSMS = Новый Структура(
		"Написать,
		|Шаблон");
	Результат.СообщениеSMS.Написать = Ложь;
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЭтапаРаботыСКандидатом() Экспорт
	
	ЭтапРаботы = Новый Структура(
		"Этап,
		|Состояние,
		|Комментарий,
		|ШаблонАнкеты,
		|Помещение,
		|Бронь,
		|Период,
		|ПериодОкончание");
		
	Возврат ЭтапРаботы;
	
КонецФункции

Функция ОписаниеСведенийВакансииДляЧатбота() Экспорт
	
	СведенияВакансии = Новый Структура(
		"Вакансия, 
		|КраткоеНаименование, 
		|Описание");
	
	Возврат СведенияВакансии;
	
КонецФункции

Процедура ЗаполнитьНаименованиеВакансии(Вакансия) Экспорт
	
	Вакансия.Наименование = НаименованиеПоДолжностиПодразделению(Вакансия.Должность, Вакансия.Подразделение);
	Если ЗначениеЗаполнено(Вакансия.УточнениеНаименования) Тогда
		Вакансия.Наименование = Вакансия.Наименование + " " + Вакансия.УточнениеНаименования;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПрофиляДолжности(ПрофильОбъект, ПрежниеРеквизиты = Неопределено) Экспорт
	
	АвтоНаименование = НаименованиеПоДолжностиПодразделению(ПрофильОбъект.Должность, ПрофильОбъект.Подразделение);
	Если Не ЗначениеЗаполнено(ПрофильОбъект.Наименование) Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
		Возврат;
	КонецЕсли;
	
	Если ПрежниеРеквизиты = Неопределено Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
		Возврат;
	КонецЕсли;
	
	ПрежнееАвтоНаименование = НаименованиеПоДолжностиПодразделению(ПрежниеРеквизиты.ПрежняяДолжность, ПрежниеРеквизиты.ПрежнееПодразделение);
	Если ПрофильОбъект.Наименование = ПрежнееАвтоНаименование Тогда
		ПрофильОбъект.Наименование = АвтоНаименование;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеРезюмеКандидата() Экспорт
	
	Структура = Новый Структура(
		"Фамилия, 
		| Имя,
		| Отчество,
		| Вакансия,
		| ФизическоеЛицо,
		| Позиция,
		| Подразделение,
		| Ответственный,
		| ДатаРегистрации,
		| ИсточникИнформации,
		| Рейтинг,
		| ОжидаемыйДоход,
		| Состояние,
		| ДатаРешения,
		| КомментарийРешения,
		| ЭтапРаботы,
		| ПричинаОтклонения,
		| УточнениеНаименования,
		| АдресРезюме,
		| ДатаРождения,
		| Пол,
		| ИНН,
		| СтраховойНомерПФР,
		| МестоРождения,
		| ИмеетНаучныеТруды,
		| ИмеетИзобретения,
		| КонтактнаяИнформация, 
		| Образование,
		| ТрудоваяДеятельность, 
		| ЗнаниеЯзыков, 
		| Гражданство,
		| СостояниеВБраке");
		
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, Использование, КомандаФормы) Экспорт
	
	Если Не Использование Тогда
		СнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, КомандаФормы);
		КомандаФормы.Пометка = Истина;
	Иначе
		УстановитьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, КомандаФормы);
		КомандаФормы.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, КомандаФормы)
	
	СписокСостояний = Новый СписокЗначений;
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано"));
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КандидатыСписок, "Состояние", СписокСостояний, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);
	
КонецПроцедуры

Процедура СнятьОтборОдобренныхОтклоненныхКандидатов(КандидатыСписок, КомандаФормы)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КандидатыСписок, "Состояние", , , , Ложь);
	
КонецПроцедуры

Функция НаименованиеПоДолжностиПодразделению(Должность, Подразделение)
	
	Если Не ЗначениеЗаполнено(Должность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Наименование = Должность;
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Строка(Должность);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 /%2/", Должность, Подразделение);
	
КонецФункции

#КонецОбласти
