////////////////////////////////////////////////////////////////////////////////
// КонтрактыДоговорыСотрудников: Процедуры и функции подсистемы учета договоров и контрактов сотрудников.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет движения документа
//		СведенияКонтрактаДоговораСотрудника.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	СведенияКонтрактаДоговораСотрудника - таблица значений с полями аналогичными структуре регистра сведений
//	                                      СведенияКонтрактаДоговораСотрудника.
// 		
Процедура СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах, ЗаписыватьОсновныеДанные = Истина) Экспорт
	
	Если ЗаписыватьОсновныеДанные Тогда
		СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	КонецЕсли;
	
	СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения сведений
// о контрактах и договорах сотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ИмяВТОтборов			- Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц.
//			* ИмяВТОтборов				- Строка.
//
Функция ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(МенеджерВременныхТаблиц, ИмяВТОтборов = "ВТСотрудникиПериоды") Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов", 			ИмяВТОтборов);
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу, содержащую записи регистра сведений ОсновныеДанныеКонтрактаДоговораСотрудника и 
// СведенияКонтрактаДоговораСотрудника по отбору переданному во временной таблице, содержащейся в
// МенеджереВременныхТаблиц.
//
// Параметры:
//		ТолькоРазрешенные						- Булево
//		ОписательВременныхТаблиц				- Структура (см.
//		                              ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Процедура СоздатьВТСведенияОКонтрактахДоговорахСотрудников(ТолькоРазрешенные, ОписательВременныхТаблиц) Экспорт
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ОсновныеДанныеКонтрактаДоговораСотрудника",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "Сотрудник"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СведенияКонтрактаДоговораСотрудника",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "Сотрудник"),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.Сотрудник,";
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
			|	ОсновныеДанныеКонтрактаДоговора." + Поле + ",";
		
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		
		ТекстЗапроса = ТекстЗапроса + "
			|	СведенияОДоговореКонтракте." + Поле + ",";
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ ВТСведенияОКонтрактахДоговорахСотрудников
		|ИЗ
		|	 " + ОписательВременныхТаблиц.ИмяВТОтборов + " КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних КАК ОсновныеДанныеКонтрактаДоговора
		|		ПО СотрудникиПериоды.Сотрудник = ОсновныеДанныеКонтрактаДоговора.Сотрудник
		|			И СотрудникиПериоды.Период = ОсновныеДанныеКонтрактаДоговора.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКонтрактаДоговораСотрудникаСрезПоследних КАК СведенияОДоговореКонтракте
		|		ПО СотрудникиПериоды.Сотрудник = СведенияОДоговореКонтракте.Сотрудник
		|			И СотрудникиПериоды.Период = СведенияОДоговореКонтракте.Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру содержащую сведения о договоре или контракте сотрудника.
//
// Параметры:
//		Период		- Дата
//		Сотрудник 	- СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//		Структура (см. ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
Функция СведенияОКонтрактеДоговореСотрудника(Период, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиПериоды";
	
	Запрос.УстановитьПараметр("Период", 	Период);
	Запрос.УстановитьПараметр("Сотрудник", 	Сотрудник);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	СоздатьВТСведенияОКонтрактахДоговорахСотрудников(Истина, ОписательВременныхТаблиц);
	
	СведенияОКонтрактеДоговореСотрудника = СтруктураСведенийОДоговореКонтракте();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для каждого Поле Из СведенияОКонтрактеДоговореСотрудника Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	СведенияОКонтрактахДоговорах." + Поле.Ключ + ",";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ВТСведенияОКонтрактахДоговорахСотрудников КАК СведенияОКонтрактахДоговорах";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СведенияОКонтрактеДоговореСотрудника, Выборка);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СведенияОКонтрактеДоговореСотрудника;
	
КонецФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.31";
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьПризнакСрочныйДоговорВДокументеПриемНаРаботу";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.18.35";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.36";
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьВидДоговораВКадровомУчетеСотрудников";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор();
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет значение нового реквизита ""Вид договора"" у кадровых документов прошлых периодов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.23";
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ПеренестиОсновныеДанныеДоговоровКонтрактовСотрудников";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.23.78";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.ОбновитьНаименованияИзКлассификатора";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.10";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.ИсправитьНаименованиеП9Ч1Ст59ИУдалитьЗадвоенныеЭлементы";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.70";
		Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.ОбновитьСИзменениями20161003";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("95cf3719-c55a-42f6-a590-1698155b9ce1");
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьГоловныеОрганизацииРегистраСведенийОсновныеДанныеКонтрактаДоговораСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6ddcade9-0fdc-4435-b4e6-4603f7d09212");
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьГоловныеОрганизацииРегистраСведенийОсновныеДанныеКонтрактаДоговораСотрудникаИспр";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e8725b6f-0f12-41bf-9515-03b9258de62e");
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьГоловныеОрганизацииРегистраСведенийСведенияКонтрактаДоговораСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3b599b9b-9c00-4833-b869-dda6a0b3d7c9");
	Обработчик.Процедура = "КонтрактыДоговорыСотрудников.ЗаполнитьГоловныеОрганизацииРегистраСведенийСведенияКонтрактаДоговораСотрудникаИспр";
	
КонецПроцедуры

Процедура ЗаполнитьПризнакСрочныйДоговорВДокументеПриемНаРаботу() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора <> ДАТАВРЕМЯ(1, 1, 1)";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СрочныйДоговор = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВидДоговораВКадровомУчетеСотрудников(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СотрудникиДокумента = Новый Массив;
	ВидДоговораОбновлен = Ложь;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПриемНаРаботу.Ссылка,
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Проведен
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СотрудникиДокумента.Очистить();
			СотрудникиДокумента.Добавить(Выборка.Сотрудник);
			ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
		КонецЦикла;	
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка КАК Ссылка,
		|	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Проведен
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				
				СотрудникиДокумента.Очистить();
				
				Пока Выборка.Следующий()  Цикл
					Если СотрудникиДокумента.Найти(Выборка.Сотрудник) = Неопределено Тогда
						СотрудникиДокумента.Добавить(Выборка.Сотрудник);
					КонецЕсли;
				КонецЦикла;  
				
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Проведен
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникиДокумента.Очистить();
				СотрудникиДокумента.Добавить(Выборка.Сотрудник);
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	Увольнение.Проведен
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО Увольнение.Ссылка = КадроваяИсторияСотрудников.Регистратор
		|			И (КадроваяИсторияСотрудников.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникиДокумента.Очистить();
				СотрудникиДокумента.Добавить(Выборка.Сотрудник);
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка
		|ПОМЕСТИТЬ ВТДокументыБезСведенийОДоговорах
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО (СведенияКонтрактаДоговораСотрудника.Регистратор = ПриемНаРаботу.Ссылка)
		|ГДЕ
		|	СведенияКонтрактаДоговораСотрудника.Регистратор ЕСТЬ NULL 
		|	И ПриемНаРаботу.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО (СведенияКонтрактаДоговораСотрудника.Регистратор = КадровыйПеревод.Ссылка)
		|ГДЕ
		|	СведенияКонтрактаДоговораСотрудника.Регистратор ЕСТЬ NULL 
		|	И КадровыйПеревод.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВТДокументыБезСведенийОДоговорах.Ссылка
		|ПОМЕСТИТЬ ВТДокументыБезСведенийОДоговорах1000
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах КАК ВТДокументыБезСведенийОДоговорах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Регистратор,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Организация КАК Организация,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	ПриемНаРаботу.Руководитель КАК ПредставительНанимателя,
		|	ПриемНаРаботу.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорДата КАК УдалитьДатаДоговораКонтракта,
		|	ПриемНаРаботу.ДатаПриема КАК УдалитьДатаНачала,
		|	ПриемНаРаботу.ТрудовойДоговорНомер КАК УдалитьНомерДоговораКонтракта,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые КАК УдалитьПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу КАК УдалитьСпособПоступленияНаСлужбу
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах1000 КАК ВТДокументыБезСведенийОДоговорах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО ВТДокументыБезСведенийОДоговорах.Ссылка = ПриемНаРаботу.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.Организация,
		|	КадровыйПеревод.ДатаЗавершенияТрудовогоДоговора,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ОснованиеПредставителяНанимателя,
		|	КадровыйПеревод.ВидАктаГосоргана,
		|	КадровыйПеревод.СрочныйДоговор,
		|	КадровыйПеревод.СрокЗаключенияДоговора,
		|	КадровыйПеревод.ОснованиеСрочногоДоговора,
		|	КадровыйПеревод.ОборудованиеРабочегоМеста,
		|	КадровыйПеревод.ИныеУсловияДоговора,
		|	КадровыйПеревод.ТрудовойДоговорДата,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ТрудовойДоговорНомер,
		|	КадровыйПеревод.ПоступлениеНаСлужбуВпервые,
		|	КадровыйПеревод.СпособПоступленияНаСлужбу
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах1000 КАК ВТДокументыБезСведенийОДоговорах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ПО ВТДокументыБезСведенийОДоговорах.Ссылка = КадровыйПеревод.Ссылка";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НачатьТранзакцию();
				Попытка
					
					Блокировка = Новый БлокировкаДанных;					
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияКонтрактаДоговораСотрудника.НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
					Блокировка.Заблокировать();
					// Заполним сведения о контрактах и договорах сотрудников.
					
					НаборЗаписей = РегистрыСведений.СведенияКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось обработать %Документ% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
					
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПеренестиОсновныеДанныеДоговоровКонтрактовСотрудников() Экспорт
	
	УдалитьСведенияКонтрактаДоговораНепроведенныхРегистраторов();
	
	ПеренестиЗаписиОсновныхДанныхДоговоровКонтрактовСотрудников();
	
	ПеренестиИсправленияОсновныхДанныхДоговоровКонтрактовСотрудников();
	
КонецПроцедуры

Процедура УдалитьСведенияКонтрактаДоговораНепроведенныхРегистраторов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияКонтрактаДоговораСотрудника.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО СведенияКонтрактаДоговораСотрудника.Регистратор = ПриемНаРаботу.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПриемНаРаботу.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ПриемНаРаботу.Проведен = ЛОЖЬ
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СведенияКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Регистратор"].Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗаписиОсновныхДанныхДоговоровКонтрактовСотрудников()
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияКонтрактаДоговораСотрудника.УдалитьНомерДоговораКонтракта КАК НомерДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьДатаДоговораКонтракта КАК ДатаДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьСпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу,
	|	СведенияКонтрактаДоговораСотрудника.Период,
	|	СведенияКонтрактаДоговораСотрудника.Регистратор КАК Регистратор,
	|	СведенияКонтрактаДоговораСотрудника.НомерСтроки,
	|	СведенияКонтрактаДоговораСотрудника.Сотрудник,
	|	СведенияКонтрактаДоговораСотрудника.ФизическоеЛицо,
	|	СведенияКонтрактаДоговораСотрудника.Организация
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			НаборЗаписей = РегистрыСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Регистратор"].Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиИсправленияОсновныхДанныхДоговоровКонтрактовСотрудников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияКонтрактаДоговораСотрудникаИспр.РегистраторИзмерение КАК РегистраторИзмерение,
		|	СведенияКонтрактаДоговораСотрудникаИспр.ПериодИзмерение КАК ПериодИзмерение,
		|	СведенияКонтрактаДоговораСотрудникаИспр.Сотрудник КАК Сотрудник,
		|	СведенияКонтрактаДоговораСотрудникаИспр.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияКонтрактаДоговораСотрудникаИспр.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьДатаДоговораКонтракта КАК ДатаДоговораКонтракта,
		|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьНомерДоговораКонтракта КАК НомерДоговораКонтракта,
		|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
		|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьСпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу
		|ИЗ
		|	РегистрСведений.СведенияКонтрактаДоговораСотрудникаИспр КАК СведенияКонтрактаДоговораСотрудникаИспр";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОсновныеДанныеКонтрактаДоговораСотрудникаИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["РегистраторИзмерение"].Установить(Выборка.РегистраторИзмерение);
			НаборЗаписей.Отбор["ПериодИзмерение"].Установить(Выборка.ПериодИзмерение);
			НаборЗаписей.Отбор["Сотрудник"].Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор["ФизическоеЛицо"].Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Отбор["ГоловнаяОрганизация"].Установить(Выборка.ГоловнаяОрганизация);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные процедуры и функции для обновления ИБ.

// Предназначена для обновления вида договора по ссылке на ПриемНаРаботу, КадровыйПеревод, Увольнение,
// НачальнаяШтатнаяРасстановка.
// Вид договора заполняется непосредственно в в документе и в движениях по регистру сведений "Кадровая история" этого
// документа.
// Для документа Увольнение - только в регистре "Кадровая история".
//
Процедура ЗаполнитьВидДоговораДокумента(Ссылка, Проведен, СотрудникиДокумента)
	
	НачатьТранзакцию();
	
	Попытка
		
		МетаданныеДокумента = Ссылка.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено
			И НЕ Проведен Тогда
			Возврат;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		// Если в документе нет реквизита ВидДоговора, то блокировать его не надо, записывать его не будем.
		Если НЕ МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		КонецЕсли;
		
		Если Проведен Тогда
			// Регистр КадроваяИстория подчинен регистратору, заблокируем по нему.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КадроваяИсторияСотрудников.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		// Заполним реквизит "ВидДоговора" в документе.
		Если НЕ МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено Тогда
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			Если ДокументОбъект.ВидДоговора <> Перечисления.ВидыДоговоровССотрудниками.ПустаяСсылка() Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;				
			
			ДокументОбъект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЕсли;
		
		Если Проведен Тогда
			
			// Заполним данные кадровой истории сотрудников.
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось обработать %Документ% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеДокумента,
		Ссылка,
		ТекстСообщения);
		
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииРегистраСведенийОсновныеДанныеКонтрактаДоговораСотрудника(ПараметрыОбновления = НеОпределено) Экспорт
	
	ЗаполнитьГоловныеОрганизацииРегистраСведений("ОсновныеДанныеКонтрактаДоговораСотрудника", ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииРегистраСведенийОсновныеДанныеКонтрактаДоговораСотрудникаИспр(ПараметрыОбновления = НеОпределено) Экспорт
	
	ЗаполнитьГоловныеОрганизацииРегистраСведений("ОсновныеДанныеКонтрактаДоговораСотрудникаИспр", ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииРегистраСведенийСведенияКонтрактаДоговораСотрудника(ПараметрыОбновления = НеОпределено) Экспорт
	
	ЗаполнитьГоловныеОрганизацииРегистраСведений("СведенияКонтрактаДоговораСотрудника", ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииРегистраСведенийСведенияКонтрактаДоговораСотрудникаИспр(ПараметрыОбновления = НеОпределено) Экспорт
	
	ЗаполнитьГоловныеОрганизацииРегистраСведений("СведенияКонтрактаДоговораСотрудникаИспр", ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииРегистраСведений(ИмяРегистра, ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ПодчиненРегистратору = (МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	ЕстьРесурсОрганизация = (МетаданныеРегистра.Ресурсы.Найти("Организация") <> Неопределено);
	
	Если ПодчиненРегистратору Тогда
		
		ИмяКлючевогоРеквизита = "Регистратор";
		ИмяРеквизитаПериод = "Период";
		
	Иначе
		
		ИмяКлючевогоРеквизита = "РегистраторИзмерение";
		ИмяРеквизитаПериод = "ПериодИзмерение";
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведений.Регистратор,
		|	РегистрСведений.ГоловнаяОрганизация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК РегистрСведений
		|ГДЕ
		|	РегистрСведений.ГоловнаяОрганизация <> РегистрСведений.ГоловнаяОрганизация.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияКонтрактаДоговораСотрудника", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистратор", ИмяКлючевогоРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
	ТекстыУсловийСоединения = Новый Массив;
	ТекстыИзмерений = Новый Массив;
	
	Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
		
		ИмяПоля = Поле.Имя;
		
		Если ИмяПоля  = ИмяРеквизитаПериод
			Или ИмяПоля = ИмяКлючевогоРеквизита Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяПоля <> "ГоловнаяОрганизация" Тогда
			ТекстыУсловийСоединения.Добавить("		РегистрСведений." + ИмяПоля + " = РегистрСведенийВспомогательный."+ ИмяПоля);
		КонецЕсли;
		
		ТекстыИзмерений.Добавить("	РегистрСведений." + ИмяПоля);
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.ГоловнаяОрганизация КАК ГоловнаяОрганизацияНабораЗаписей,
		|	КОЛИЧЕСТВО(РегистрСведенийВспомогательный.Период) КАК КоличествоКонфликтующихЗаписей,
		|	РегистрСведений.Период,
		|	РегистрСведений.Регистратор,
		|	&ТекстыИзмерений
		|ПОМЕСТИТЬ ВТНаборыСКонфликтамиДат
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК РегистрСведений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК РегистрСведенийВспомогательный
		|			ПО РегистрСведений.Сотрудник = РегистрСведенийВспомогательный.Сотрудник
		|				И РегистрСведений.ФизическоеЛицо = РегистрСведенийВспомогательный.ФизическоеЛицо
		|				И РегистрСведений.ГоловнаяОрганизация.ГоловнаяОрганизация = РегистрСведенийВспомогательный.ГоловнаяОрганизация.ГоловнаяОрганизация
		|				И РегистрСведений.ГоловнаяОрганизация <> РегистрСведенийВспомогательный.ГоловнаяОрганизация
		|				И РегистрСведений.Период = РегистрСведенийВспомогательный.Период
		|				И (&УсловияСоединения)
		|		ПО Регистраторы.Регистратор = РегистрСведений.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	Регистраторы.ГоловнаяОрганизация,
		|	РегистрСведений.Период,
		|	РегистрСведений.Регистратор,
		|	&ТекстыИзмерений";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияКонтрактаДоговораСотрудника", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистратор", ИмяКлючевогоРеквизита);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период", ИмяРеквизитаПериод);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияСоединения", СтрСоединить(ТекстыУсловийСоединения, Символы.ПС + "И "));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстыИзмерений", СтрСоединить(ТекстыИзмерений, "," + Символы.ПС + Символы.Таб));
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НаборыСКонфликтамиДат.ГоловнаяОрганизацияНабораЗаписей,
		|	НаборыСКонфликтамиДат.КоличествоКонфликтующихЗаписей,
		|	РегистрСведений.*
		|ИЗ
		|	ВТНаборыСКонфликтамиДат КАК НаборыСКонфликтамиДат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК РегистрСведений
		|		ПО НаборыСКонфликтамиДат.Регистратор = РегистрСведений.Регистратор
		|			И НаборыСКонфликтамиДат.Период = РегистрСведений.Период
		|			И НаборыСКонфликтамиДат.ГоловнаяОрганизация = РегистрСведений.ГоловнаяОрганизация
		|			И (&УсловияСоединения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаборыСКонфликтамиДат.Регистратор";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияКонтрактаДоговораСотрудника", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистратор", ИмяКлючевогоРеквизита);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период", ИмяРеквизитаПериод);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияСоединения", СтрСоединить(ТекстыУсловийСоединения, Символы.ПС + "И "));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведенийВспомогательный", "Регистраторы");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистраторы", "НаборыСКонфликтамиДат");
	
	КонфликтныеПериоды = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля(ИмяКлючевогоРеквизита) Цикл
		
		Если ПодчиненРегистратору Тогда
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления, "РегистрСведений." + ИмяРегистра + ".НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления, "РегистрСведений." + ИмяРегистра, "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяКлючевогоРеквизита].Установить(Выборка[ИмяКлючевогоРеквизита]);
		
		Пока Выборка.Следующий() Цикл
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Если ЕстьРесурсОрганизация Тогда
				Запись.Организация = Запись.ГоловнаяОрганизация;
			КонецЕсли;
			
			Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизацияНабораЗаписей;
			
			Если Выборка.КоличествоКонфликтующихЗаписей > 0 Тогда
				
				СотрудникиПериода = КонфликтныеПериоды.Получить(Запись[ИмяРеквизитаПериод]);
				Если СотрудникиПериода = Неопределено Тогда
					СотрудникиПериода = Новый Соответствие;
					КонфликтныеПериоды.Вставить(Запись[ИмяРеквизитаПериод], СотрудникиПериода);
				КонецЕсли;
				
				КонфликтовСотрудника = СотрудникиПериода.Получить(Запись.Сотрудник);
				Если КонфликтовСотрудника = Неопределено Тогда
					КонфликтовСотрудника = 1;
				Иначе
					Запись[ИмяРеквизитаПериод] = Запись[ИмяРеквизитаПериод] + КонфликтовСотрудника;
					КонфликтовСотрудника = КонфликтовСотрудника + 1;
				КонецЕсли;
				
				СотрудникиПериода.Вставить(Запись.Сотрудник, КонфликтовСотрудника);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеКлассификаторовОснованийПриемаУвольненияСотрудников

// Процедура - Заполнить справочник из макета классификатора
//
// Параметры:
//  ИмяСправочника	 				- Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		- Строка - Имя макета, содержащего классификатор справочника в XML формате
//  СоответствиеПолей			 	- Соответствие - ключ - имя реквизита справочника, значение - имя поля данных классификатора  
//  КлючиПоиска						- Структура с ключами:
//										* КлючиПоискаСправочника
//										* КлючиПоискаМакета
//
Процедура ЗаполнитьСправочникИзМакетаКлассификатора(ИмяСправочника, ИмяМакетаСКлассификатором, СоответствиеПолей, КлючиПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКлассификатора.Ссылка
		|ИЗ
		|	Справочник.ОснованияЗаключенияСрочныхТрудовыхДоговоров КАК ТаблицаКлассификатора";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка", КлючиПоиска.КлючиПоискаСправочника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОснованияЗаключенияСрочныхТрудовыхДоговоров", ИмяСправочника);
	
	ЗначенияПоискаСправочника = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(КлючиПоиска.КлючиПоискаСправочника);
	
	КлассификаторСправочника = КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторСправочника Цикл
		
		Если ЗначенияПоискаСправочника.Найти(СтрокаКлассификатора[КлючиПоиска.КлючиПоискаМакета]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = Менеджер.СоздатьЭлемент();
		Для каждого Поле Из СоответствиеПолей Цикл
			СправочникОбъект[Поле.Ключ] = СтрокаКлассификатора[Поле.Значение];
		КонецЦикла;
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Обновляет поля справочника из макета классификатора
//
// Параметры:
//  ИмяСправочника	 				- Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		- Строка - Имя макета, содержащего классификатор справочника в XML формате
//  ИмяРеквизитаПоиска			 	- Строка - имя реквизита по которому будет искаться обновляемый элемент справочника 
//  ИмяПоляЗначенияПоиска		 	- Строка - имя поля в данных классификатора которое содержит ключ для поиска элемента классификатора
//  ОбновляемыеПоля				 	- Соответствие - ключ - имя реквизита справочника, значение - имя поля данных классификатора.
//
Процедура ОбновитьПоляСправочникаИзМакетаКлассификатора(ИмяСправочника, ИмяМакетаСКлассификатором, ИмяРеквизитаПоиска, ИмяПоляЗначенияПоиска, ОбновляемыеПоля) Экспорт 
	
	Если Не СправочникЗаполнен(ИмяСправочника) Тогда 
		Возврат;
	КонецЕсли;	
	
	КлассификаторСправочника = КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторСправочника Цикл
		
		СправочникСсылка = Менеджер.НайтиПоРеквизиту(ИмяРеквизитаПоиска, СтрокаКлассификатора[ИмяПоляЗначенияПоиска]);
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			
			Для каждого ОбновляемоеПоле Из ОбновляемыеПоля Цикл
				СправочникОбъект[ОбновляемоеПоле.Ключ] = СтрокаКлассификатора[ОбновляемоеПоле.Значение];
			КонецЦикла;
			
			СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			СправочникОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает классификатор справочника из XML-классификатора хранимого в макете.
//
// Параметры:
//  ИмяСправочника	 - Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		 - Строка - Имя макета, содержащего классификатор справочника в XML формате.
// 
// Возвращаемое значение:
//  Данные - таблица значений, содержащая данные из XML-классификатора хранимого в макете.
//
Функция КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Макет = Менеджер.ПолучитьМакет(ИмяМакетаСКлассификатором);	
	
	КлассификаторXML = Макет.ПолучитьТекст();
	
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
КонецФункции

// Функция - Справочник заполнен
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, заполненность которого надо проверить.
// 
// Возвращаемое значение:
//  Булево - Истина, если справочник содержит хотя бы один элемент.
//
Функция СправочникЗаполнен(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	&ИмяСправочника КАК Справочник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция СтруктураСведенийОДоговореКонтракте()
	
	СтруктураСведений = Новый Структура;
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	Возврат СтруктураСведений;
	
КонецФункции 

Функция ОсновныеДанныеДоговораКонтракта()
	
	ОсновныеДанные = Новый Массив;
	
	ОсновныеДанные.Добавить("ДатаДоговораКонтракта");
	ОсновныеДанные.Добавить("НомерДоговораКонтракта");
	ОсновныеДанные.Добавить("ДатаНачала");
	ОсновныеДанные.Добавить("ПоступлениеНаСлужбуВпервые");
	
	Возврат ОсновныеДанные;
	
КонецФункции

Функция СведенияОДоговореКонтракте()
	
	Сведения = Новый Массив;
	
	Сведения.Добавить("ПредставительНанимателя");
	Сведения.Добавить("ДолжностьПредставителяНанимателя");
	Сведения.Добавить("ОснованиеПредставителяНанимателя");
	Сведения.Добавить("ОборудованиеРабочегоМеста");
	Сведения.Добавить("ИныеУсловияДоговора");
	Сведения.Добавить("ВидАктаГосоргана");
	Сведения.Добавить("СрочныйДоговор");
	Сведения.Добавить("СезонныйДоговор");
	Сведения.Добавить("ДатаОкончания");
	Сведения.Добавить("СрокЗаключенияДоговора");
	Сведения.Добавить("ОснованиеСрочногоДоговора");
	
	Возврат Сведения; 
	
КонецФункции

Процедура СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаДанных Из СведенияОКонтрактахДоговорах Цикл
		ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, СтрокаДанных);
	КонецЦикла;
	
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записать();
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	НоваяСтрока = Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДоговора);
	
КонецПроцедуры

Процедура СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаСведений Из СведенияОКонтрактахДоговорах Цикл
		ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, СтрокаСведений);
	КонецЦикла;
	
	Движения.СведенияКонтрактаДоговораСотрудника.Записать();
	Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	Если ДанныеДоговора.СрочныйДоговор Тогда
		ИсключаемыеСвойства = "";
	Иначе
		ИсключаемыеСвойства = "СрочныйДоговор,СезонныйДоговор,ДатаОкончания,СрокЗаключенияДоговора,ОснованиеСрочногоДоговора";
	КонецЕсли;
	
	НоваяСтрока = Движения.СведенияКонтрактаДоговораСотрудника.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДоговора, , ИсключаемыеСвойства);
	
КонецПроцедуры

Процедура УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

