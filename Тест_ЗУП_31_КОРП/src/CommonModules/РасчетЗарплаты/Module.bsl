
#Область ПрограммныйИнтерфейс

// Возвращает ссылку на заполненный документ начисления зарплаты.
// Если для заданного месяца, организации и подразделения существует несколько 
// документов, возвращается хронологически первый.
// Если необходимого документа нет, он создается и записывается.
// В любом случае выполняется заполнение документа.
//
// Параметры:
//	МесяцНачисления
//	Организация
//	Подразделение (необязательный)
//
// Возвращаемое значение - ссылка на документ.
//
Функция ДокументНачисленияЗарплаты(МесяцНачисления, Организация, Подразделение = Неопределено) Экспорт
	
	ДокументСсылка = Неопределено;
	
	РасчетЗарплатыВнутренний.ПодобратьДокументНачисленияЗарплаты(ДокументСсылка, МесяцНачисления, Организация, Подразделение);
	
	Возврат ДокументСсылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает таблицу значений с данными для распределения удержаний физлица 
// пропорционально начислениям по всем местам работы.
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//	Организация
//
// Возвращаемое значение:
//	Таблица значений с колонками
//		ФизическоеЛицо.
//		Сотрудник
//		Подразделение
//		Сумма
//
// В настоящее время учет начисленной зарплаты ведется в разрезе сотрудников и подразделений
// поэтому возвращается таблица с полями Сотрудник, Подразделение.
//
Функция ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	Возврат РасчетЗарплатыВнутренний.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация); 
КонецФункции

// Формирует план видов расчета по текущему состоянию функциональных опций.
//
Процедура СформироватьПланВидовРасчетаПоНастройкам() Экспорт
	РасчетЗарплатыВнутренний.СформироватьПланВидовРасчетаПоНастройкам();
КонецПроцедуры

// Устанавливает соответствие видов расчета РайонныйКоэффициент и СевернаяНадбавка 
// в плане видов расчета Начисления текущим настройкам системы.
// Если виды расчета требуются, они создаются.
// Если виды расчета не требуются, они помечаются на удаление.
Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	РасчетЗарплатыВнутренний.СформироватьВидыРасчетаРКиСН();
КонецПроцедуры

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
КонецФункции

// Заполняет движения плановыми начислениями
//		ПлановыеНачисления
//		ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.
//
// Параметры:
//  РегистраторОбъект
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	СтруктураДанных - Структура
//		Ключи:
//			ДанныеОПлановыхНачислениях (необязательный) - таблица значений с полями:
//				ДатаСобытия
//				Сотрудник
//				Начисление
//				Размер
//
Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений = Истина, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, ЗаполнятьНаборЗаписей);
	
КонецПроцедуры

// Заполняет движения плановыми удержаниями (см. процедуру
// РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхУдержаний).
//
Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт

	РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных);
	
КонецПроцедуры

// Заполняет движения плановыми выплатами (авансы) (см. процедуру
// РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхВыплат).
//
Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт

	РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах);
	
КонецПроцедуры

// Заполняет данные для проведения начислениями и 
// временной таблицей ВТНачисления.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаНачислений - имя (имена через запятую) табличной части с начислениями, не обязательно, по умолчанию -
//		                    "Начисления".
//		ПолеДатыДействия - поле запроса для получения даты действия, по умолчанию дата действия - месяц 
// 				начисления первичного документа, т.е. "Ссылка.МесяцНачисления".
//
Процедура ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений = "Начисления", ПолеДатыДействия = "Ссылка.МесяцНачисления", ПолеВидаНачисления = Неопределено, ПолеВидаНачисленияВШапке = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений, ПолеДатыДействия, ПолеВидаНачисления, ПолеВидаНачисленияВШапке, ФизическиеЛица);
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей НДФЛ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей КорректировкиВыплаты.
//
Процедура ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей страховых взносов.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний = "Удержания", ФизическиеЛица = Неопределено) Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний, ФизическиеЛица);
	
КонецПроцедуры

// Формирует временную таблицу со списком сотрудников ВТСотрудники, которые рассчитываются при 
// проведении документа.
//
// Параметры:
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаНачислений - имя табличной части с начислениями, не обязательно, по умолчанию - "Начисления".
//
Процедура ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений = "Начисления", ФизическиеЛица = Неопределено) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ИмяТаблицыНачислений = МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаНачислений;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	#ТаблицаНачислений КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	Если ОтборПоФизическимЛицам Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ВЫРАЗИТЬ(Начисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
			|";
	КонецЕсли; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", ИмяТаблицыНачислений);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Метод позволяет определить применение районного коэффициента и северной надбавки.
// 
Функция ВостребованностьРКиСН() Экспорт
	
	ВостребованностьРКиСН = Новый Структура("СевернаяНадбавка, РайонныйКоэффициент");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиОрганизаций.ПрименятьСевернуюНадбавку), ЛОЖЬ) КАК СевернаяНадбавка,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиОрганизаций.ПрименятьРайонныйКоэффициент), ЛОЖЬ) КАК РайонныйКоэффициент
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадры КАК НастройкиОрганизаций");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВостребованностьРКиСН.СевернаяНадбавка = Выборка.СевернаяНадбавка;
	ВостребованностьРКиСН.РайонныйКоэффициент = Выборка.РайонныйКоэффициент;
	
	Возврат ВостребованностьРКиСН;
	
КонецФункции

// Проверяет наличие в системе начислений с указанной категорией, 
// если такие начисления уже существуют, пользователю сообщается об ошибке.
// 
Процедура ПроверитьУникальностьНачисленияПоКатегории(Начисление, Категория, Отказ) Экспорт
	
	Начисления = НачисленияПоКатегории(Категория);
	Если Начисления.Количество() > 0 И Начисления.Найти(Начисление) = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начисление с назначением ""%1"" уже существует'"),
				Категория);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, , "Объект.КатегорияНачисленияИлиНеоплаченногоВремени", , Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Возвращает массив начислений, соответствующие параметрам.
//
// Параметры:
//		КатегорияНачисления - Перечисление.КатегорииНачисленийИНеоплаченногоВремени
// 		Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Начисления. 
//
// Возвращаемое значение - массив начислений, соответствующих категории и отборам.
//
Функция НачисленияПоКатегории(КатегорияНачисления, Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисления
	|	&УСЛОВИЕ";
	
	Запрос = Новый Запрос;
	
	Условие = "";
	СтрокаЗамены = "&УСЛОВИЕ";
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Отбор Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 И Начисления.%2 В (&%2)", Условие, КлючИЗначение.Ключ);
			Иначе
				Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 И Начисления.%2 = &%2", Условие, КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Условие = ?(ЗначениеЗаполнено(Условие), Условие, "И Истина");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаЗамены, Условие);
	
	Если ТипЗнч(КатегорияНачисления) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &КатегорияНачисления", "В (&КатегорияНачисления)");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КатегорияНачисления", КатегорияНачисления);
	
	Начисления = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Начисления.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

// Возвращает массив удержаний, соответствующие параметрам.
//
// Параметры:
//		КатегорияУдержания - Перечисление.КатегорииУдержаний
// 		Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Удержания. 
//				Если в качестве ключа передано "КатегорияУдержания" и значение отбора отличается от значения первого параметра,
//				то вернется пустой массив.
//
// Возвращаемое значение:
//		Удержания - массив удержаний, соответствующих роли и отборам.
//
Функция УдержанияПоКатегории(КатегорияУдержания, Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.КатегорияУдержания = &КатегорияУдержания
	|	&УСЛОВИЕ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КатегорияУдержания", КатегорияУдержания);
	
	Условие = "";
	СтрокаЗамены = "&УСЛОВИЕ";
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Отбор Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 И Удержания.%2 В (&%2)", Условие, КлючИЗначение.Ключ);
			Иначе
				Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 И Удержания.%2 = &%2", Условие, КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Условие = ?(ЗначениеЗаполнено(Условие), Условие, "И Истина");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаЗамены, Условие);
	
	Удержания = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Удержания.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Удержания;
	
КонецФункции

// Возвращает начисление районного коэффициента. 
// Уникальность начисления этой категории контролируется при создании.
//
Функция НачислениеРайонныйКоэффициент() Экспорт
	
	Начисления = НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Если Начисления.Количество() > 0 Тогда
		Возврат Начисления[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает начисление северной надбавки. 
// Уникальность начисления этой категории контролируется при создании.
//
Функция НачислениеСевернаяНадбавка() Экспорт
	
	Начисления = НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	Если Начисления.Количество() > 0 Тогда
		Возврат Начисления[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет рекомендуемые корректировки выплаты на основании исчисленного налога и 
// сформированных ранее корректировок выплаты.
// Корректировка выплаты - разница между суммой долга перед сотрудником и 
// суммой, положенной к выплате сотруднику. 
// Разница может быть обусловлена невозможностью выплаты излишне удержанного ранее НДФЛ.
//
// Параметры:
// 	Налоги - ТаблицаЗначений - таблица значений, в которой есть колонки: 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица;
//		* Налог - Число.
// 	Должна содержать, как минимум, одну строку.
//
//	ТекущиеКорректировкиВыплаты - ТаблицаЗначений - таблица значений, в которой есть колонки: 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица;
//		* Сотрудник - СправочникСсылка.Сотрудники;
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - не обязательно к заполнению;
//		* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - не обязательно к заполнению;
//		* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата - не обязательно к заполнению;
//		* СуммаВзаиморасчетов - Число - не обязательно к заполнению.
//		* СуммаКорректировки  - Число - не обязательно к заполнению.
// 	Может содержать строки не по всем физическим лицам, которые переданы в параметре Налоги.
//  Это означает, что текущих корректировок нет.
//
// Возвращаемое значение (см. ТаблицаКорректировкиВыплаты()):
//	ТаблицаЗначений - таблица значений с колонками: 
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица;
//		* Сотрудник - СправочникСсылка.Сотрудники;
//		* Подразделение - СправочникСсылка.ПодразделенияОрганизаций - не обязательно к заполнению;
//		* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - не обязательно к заполнению;
//		* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата - не обязательно к заполнению;
//		* КорректировкаВыплаты - Число - разница между суммой долга перед сотрудником и суммой, 
//									положенной к выплате. Может быть отрицательной.
//		* Первичная  - булево. Если Истина, значит корректировка вносится в учет (например, из-за 
//  					появления отрицательного НДФЛ. Если Ложь, значит это "обратная" 
//						корректировка, восстанавливающая взаиморасчеты после выполнения первичной корректировки
//	Содержит строки со всеми физлицами, переданными в таблице Налоги
//	Если в переданных таблицах есть дополнительные колонки, они игнорируются в возвращаемой таблице.
// 
Функция РекомендуемыеКорректировкиВыплаты(Налоги, ТекущиеКорректировкиВыплаты) Экспорт
	
	КорректировкиВыплаты = ТаблицаКорректировкиВыплаты();
	
	ПараметрыОтбораСтрокКорректировки = Новый Структура("ФизическоеЛицо");
	Для Каждого СтрокаНалога Из Налоги Цикл
		ПараметрыОтбораСтрокКорректировки.ФизическоеЛицо = СтрокаНалога.ФизическоеЛицо;
		СтрокиКорректировок = ТекущиеКорректировкиВыплаты.НайтиСтроки(ПараметрыОтбораСтрокКорректировки);
		ТекущаяКорректировка = 0;
		ОстатокВзаиморасчетов = 0;
		Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
			ТекущаяКорректировка = ТекущаяКорректировка + СтрокаКорректировки.СуммаКорректировки;
			ОстатокВзаиморасчетов = ОстатокВзаиморасчетов + СтрокаКорректировки.СуммаВзаиморасчетов;
		КонецЦикла;
		
		Если ТекущаяКорректировка = 0 Или СтрокаНалога.Налог < 0 Тогда
			// Если текущая корректировка равна нулю, то новая корректировка может сложиться только. 
			НоваяСтрока = КорректировкиВыплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
			Если СтрокаНалога.Налог < ТекущаяКорректировка  Тогда 
				// Вычислим сумму корректировки с учетом остатка по взаиморасчетам
				НоваяСтрока.КорректировкаВыплаты = СтрокаНалога.Налог + Мин(Макс(ОстатокВзаиморасчетов, 0), -СтрокаНалога.Налог);
				НоваяСтрока.Первичная = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаНалога.Налог < ТекущаяКорректировка Тогда
			// Если налог не позволяет полностью компенсировать ("занулить") текущую корректировку
			// компенсируем текущую корректировку пропорционально.
			КорректировкаВыплаты = СтрокаНалога.Налог;
			Коэффициент = КорректировкаВыплаты/ТекущаяКорректировка;
			Распределено = 0;
			МаксимальныйВесСтроки = 0;
			Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
				НоваяСтрока = КорректировкиВыплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
				НоваяСтрока.КорректировкаВыплаты = СтрокаКорректировки.СуммаКорректировки * Коэффициент;
				Распределено = Распределено + НоваяСтрока.КорректировкаВыплаты;
				ВесСтроки = Макс(НоваяСтрока.КорректировкаВыплаты, -НоваяСтрока.КорректировкаВыплаты);
				Если МаксимальныйВесСтроки <= ВесСтроки Тогда
					МаксимальныйВесСтроки = ВесСтроки;
					СамаяТяжелаяСтрока = НоваяСтрока;
				КонецЕсли;
			КонецЦикла;
			// отнесем копейки остатка на самую "тяжелую" строку.
			СамаяТяжелаяСтрока.КорректировкаВыплаты = СамаяТяжелаяСтрока.КорректировкаВыплаты - (КорректировкаВыплаты - Распределено);
		Иначе
			// Если налог позволяет - просто "зануляем" текущую корректировку.
			Для Каждого СтрокаКорректировки Из СтрокиКорректировок Цикл
				НоваяСтрока = КорректировкиВыплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
				НоваяСтрока.КорректировкаВыплаты = СтрокаКорректировки.СуммаКорректировки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборНулевыхСтрок = Новый Структура("КорректировкаВыплаты", 0);
	НулевыеСтроки = КорректировкиВыплаты.НайтиСтроки(ОтборНулевыхСтрок);
	Для Каждого НулеваяСтрока Из НулевыеСтроки Цикл
		КорректировкиВыплаты.Удалить(НулеваяСтрока);
	КонецЦикла;
	
	Возврат КорректировкиВыплаты;
	
КонецФункции

Функция СведенияОКорректировкахВыплаты(Форма, ПутьКДаннымАдресДанныеОбНДФЛ, ФизическоеЛицо = Неопределено) Экспорт
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(ПутьКДаннымАдресДанныеОбНДФЛ);
	
	Если ФизическоеЛицо = Неопределено Тогда
		КоллекцияСтрокКорректировкиВыплаты = Форма.Объект.КорректировкиВыплаты.Выгрузить();
	Иначе
		
		СтруктураОтбора = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		КоллекцияСтрокКорректировкиВыплаты = Форма.Объект.КорректировкиВыплаты.Выгрузить(СтруктураОтбора);
		
	КонецЕсли;
	
	ДанныеОбНДФЛ.Вставить("КорректировкиВыплаты", КоллекцияСтрокКорректировкиВыплаты);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, Форма.УникальныйИдентификатор);
	
КонецФункции

// Определяет, являются ли переданные основания теми документами, по которым НДФЛ уплачивается не сразу, а до конца месяца. 
//
// Параметры:
//	Основания - массив - содержит ссылки - основания для начисления НДФЛ.
//
// Возвращаемое значение - соответствие, ключом является переданное основание, значение - да/нет.
//
Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Возврат РасчетЗарплатыВнутренний.ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания)	

КонецФункции 

// Таблица для хранения данных табличных частей КорректировкиВыплаты документов, начисляющих зарплату.
Функция ТаблицаКорректировкиВыплатыДокумента() Экспорт
	ТаблицаКорректировкиВыплаты = Новый ТаблицаЗначений;
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("КорректировкаВыплаты", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(7));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаКорректировкиВыплаты.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Возврат ТаблицаКорректировкиВыплаты;
	
КонецФункции

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Возврат РасчетЗарплатыВнутренний.ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор);
	
КонецФункции

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваНачислений с полями
//		Начисление - ПланВидовРасчетаСсылка.Начисления,
//		ЯвляетсяДенежнымСодержанием - Булево,
//		ЯвляетсяДенежнымДовольствием - Булево.
//		ЯвляетсяДоходомВНатуральнойФорме - Булево.
//		НачисляетсяВЦеломЗаМесяц - Булево.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц) Экспорт

	РасчетЗарплатыВнутренний.СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц)	

КонецПроцедуры

#Область Аванс

// Функция возвращает таблицу значений с информацией о плановых авансах сотрудников.
//
// Параметры:
//	ТаблицаСотрудников - таблица значений с колонками.
//		- Сотрудник; 
//		- Период
//	ДокументСсылка - если указать, то зарегистрированные этим документом авансы будут игнорироваться;
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь.
//
// Возвращаемое значение - таблица значений с колонками.
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс.
//
Функция АвансыСотрудников(ТаблицаСотрудников, ДокументСсылка = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);

		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеАвансы",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
			ПараметрыПостроения);

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПлановыеАвансыСрезПоследних.Сотрудник,
			|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
			|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
			|ИЗ
			|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаСотрудников.Сотрудник,
			|	ТаблицаСотрудников.Период
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
			
		Запрос.Выполнить();
		
		ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ТекущийСпособРасчетаАванса,ТекущийАванс");
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.Сотрудник,
			|	КадровыеДанныеСотрудников.ТекущийСпособРасчетаАванса КАК СпособРасчетаАванса,
			|	КадровыеДанныеСотрудников.ТекущийАванс КАК Аванс
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

#КонецОбласти

#Область КорректировкиВыплаты

Функция ТаблицаКорректировкиВыплаты()
	
	КорректировкиВыплаты = Новый ТаблицаЗначений;
	КорректировкиВыплаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КорректировкиВыплаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КорректировкиВыплаты.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КорректировкиВыплаты.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	КорректировкиВыплаты.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	КорректировкиВыплаты.Колонки.Добавить("КорректировкаВыплаты", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КорректировкиВыплаты.Колонки.Добавить("Первичная", Новый ОписаниеТипов("Булево"));
	КорректировкиВыплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат КорректировкиВыплаты;
	
КонецФункции

// Добавляет в МенеджерВременныхТаблиц временную таблицу с данными КорректировкиВыплаты по документу.
//
Процедура СоздатьВТДанныеКорректировкиВыплатыПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, ОписаниеТаблицДокумента = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаКорректировкиВыплаты.Ссылка,
	|	ТаблицаКорректировкиВыплаты.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаКорректировкиВыплаты.НомерСтроки,
	|	ТаблицаКорректировкиВыплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаКорректировкиВыплаты.КорректировкаВыплаты
	|ПОМЕСТИТЬ ВТДанныеКорректировкиВыплаты
	|ИЗ
	|	#ТаблицаКорректировкиВыплаты КАК ТаблицаКорректировкиВыплаты
	|ГДЕ
	|	ТаблицаКорректировкиВыплаты.Ссылка = &Ссылка
	|	И ТаблицаКорректировкиВыплаты.ФизическоеЛицо В(&ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКорректировкиВыплаты.Ссылка,
	|	ТаблицаКорректировкиВыплаты.НомерСтроки,
	|	ТаблицаКорректировкиВыплаты.ИдентификаторСтроки,
	|	ТаблицаКорректировкиВыплаты.ФизическоеЛицо,
	|	ТаблицаКорректировкиВыплаты.КорректировкаВыплаты";
	
	Если ОписаниеТаблицДокумента = Неопределено Тогда
		ПолноеИмяДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаКорректировкиВыплаты", ПолноеИмяДокумента + ".КорректировкиВыплаты");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаКорректировкиВыплаты", ОписаниеТаблицДокумента.ИмяТаблицыКорректировкиВыплаты);
	КонецЕсли;
	
	// Создаем временную таблицу
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицаКорректировкиВыплаты.ФизическоеЛицо В(&ФизическиеЛица)", "");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛПриЗаполнении(Форма) Экспорт
	РасчетЗарплатыВнутренний.ФормаПодробнееОРасчетеНДФЛПриЗаполнении(Форма);
КонецПроцедуры

// Возвращает таблицу значений с данными КорректировкиВыплаты, прочитанную из данных документа.
//
// Параметры:
//		ДокументСсылка - ДокументСсылка - документ, содержащий сведения о суммах налогов и вычетов.
//		ОписаниеТаблицДокумента - структура - (необязательный), с полями
//					ИмяТаблицыСНалогами
//		МенеджерВременныхТаблиц - (необязательный), должен содержать перечисленные 
//			в ОписаниеТаблицДокумента временные таблицы.
//
// Возвращаемое значение:
//	таблица значений с колонками:
//		Ссылка,
//		ИдентификаторСтроки
//		НомерСтроки,
//		ФизическоеЛицо,
//		НалогКЗачетуВозврату
//
Функция ДанныеДокументаКорректировкиВыплатыПоДокументу(ДокументСсылка, ОписаниеТаблицДокумента = Неопределено, МенеджерВременныхТаблиц = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	СоздатьВТДанныеКорректировкиВыплатыПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, ОписаниеТаблицДокумента, ФизическиеЛица);
	
	// Получаем данные
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТДанныеКорректировкиВыплаты КАК КорректировкиВыплаты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

Функция КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет данные начисления зарплаты за месяц.
// Параметры:
//	ДанныеНачисленияЗарплаты - объект, описывающий документ начисления зарплаты и 
//  содержащий следующий минимальный набор полей.
//		Ссылка
//		МесяцНачисления
//		Организация
//		Подразделение
//		Начисления - коллекция со списком начисления, со следующим 
//		минимальным набором полей:
//			Сотрудник
//			Подразделение
//			Начисление
//			Результат
//			ОтработаноДней
//			ОтработаноЧасов
//		Удержания и иные коллекции, содержащие данные начисления зарплаты, 
//		которые могут быть разными в зависимости от реализации документа начисления.
//		
Процедура ЗаполнитьДокументНачисленияЗарплаты(ДанныеНачисленияЗарплаты) Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьДокументНачисленияЗарплаты(ДанныеНачисленияЗарплаты);
КонецПроцедуры	

// Возвращает таблицу значений, содержащую данные начисления и расчета зарплаты.
//
// Параметры:
//	Организация
//	МесяцНачисления,
//	Документ - документ, для которого получаются данные для начисления.
//	Подразделение - не обязательный.
//	Сотрудники - не обязательный.
//
// Возвращаемое значение:
//	Таблица значений, которая содержит, как минимум, колонки.
//		Сотрудник
//		Подразделение
//		Начисление
//		Результат
//
Функция РезультатНачисленияРасчетаЗарплаты(Организация, МесяцНачисления, Документ, Подразделение = Неопределено, Сотрудники = Неопределено) Экспорт
	Возврат РасчетЗарплатыВнутренний.РезультатНачисленияРасчетаЗарплаты(Организация, МесяцНачисления, Документ, Подразделение, Сотрудники);
КонецФункции

Функция НачисленияТарифнойСтавки() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.НачисленияТарифнойСтавки();
	
КонецФункции

Функция КатегорииСдельнойОплатыТруда() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.КатегорииСдельнойОплатыТруда();
	
КонецФункции

Функция КатегорииНачисленийКомпенсационныхВыплат() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.КатегорииНачисленийКомпенсационныхВыплат();
	
КонецФункции

// Заменяет строки таблицы ЗаменяемыеДанные строками таблица ЗаменяющиеДанные.
// Сопоставление строк выполняется по колонке КлючеваяКолонка для массива значений Значения.
// Если требуется - вставляет новые строки.
// Если требуется - удаляет неиспользованные старые строки.
//
// Параметры:
//	Значения
//	КлючеваяКолонка - имена колонок через запятую, по которым выполняется сопоставление заменяемой коллекции.
//	ЗаменяемыеДанные - коллекция строк, в которой необходимо выполнить замену.
//	ЗаменяющиеДанные - коллекция строк, которые нужно использовать для замены строк в коллекции ЗаменяемыеДанные.
//	УсловиеЗамены - структура, если указано, замена производится только в случае, 
//		если значения полей структуры по всем заменяемых строкам соблюдается.
//	ОтборСтрок - структура, если указано, в коллекциях обрабатываются только строки, удовлетворяющие отбору, 
//		в качестве значения может быть указан массив значений.
//
Процедура ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, УсловияЗамены = Неопределено, ОтборСтрок = Неопределено) Экспорт
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		СоответствуетУсловиям = Истина;
		Если УсловияЗамены <> Неопределено Тогда
			// Если коллекция старых строк, имеет хотя бы одну строку, 
			// не соответствующую условиям замены - не обновляем.
			Для Каждого СтараяСтрока Из СтарыеСтроки Цикл
				Для Каждого КлючИЗначение Из УсловияЗамены Цикл
					Если СтараяСтрока[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						СоответствуетУсловиям = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		НовыеСтроки = ЗаменяющиеДанные.НайтиСтроки(КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку с измерениями расчета интервального регистра Плановых начислений.
//
Функция ИзмеренияРасчетаПлановыхНачислений() Экспорт
	
	Возврат РасчетЗарплатыВнутренний.ИзмеренияРасчетаПлановыхНачислений();
	
КонецФункции

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ
//

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьПланВидовРасчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.40";
	Обработчик.Процедура = "РасчетЗарплаты.ОбновлениеПланВидовРасчетаРеквизитДопУпорядочивания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.9";
	Обработчик.Процедура = "РасчетЗарплаты.ОбновлениеПланВидовРасчетаРеквизитВидНачисленияДляНУДляРКиСН";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.12";
	Обработчик.Процедура = "РасчетЗарплаты.ОбновлениеПланВидовРасчетаРеквизитКатегорияУдержания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.2";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьКатегориюНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.7";
	Обработчик.Процедура = "РасчетЗарплаты.УстановитьВходимостьНачисленийВБазуРКИСН";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.10";
	Обработчик.Процедура = "РасчетЗарплаты.УстановитьРежимРасчетаДокументовПриРедактировании";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.19";
	Обработчик.Процедура = "РасчетЗарплаты.СформироватьВидыРасчетаБольничныхОтпусковИсполнительныхЛистов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.2";
	Обработчик.Процедура = "РасчетЗарплаты.УстановитьСпособРасчетаАвансаСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.4";
	Обработчик.Процедура = "РасчетЗарплаты.УстановитьСпособРасчетаАвансаСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.8";
	Обработчик.Процедура = "РасчетЗарплаты.УстановитьЗачетОтработанногоВремениНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.9";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьОтработанноеВремяОтсутствий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.28";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.34";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьГоловнуюОрганизациюПлановыхНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.5";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьПланируемыеДатыВыплатыОтпусковИБольничныхЛистов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.37";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьТаблицыКорректировкиВыплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.4";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("48ffa3d2-309a-46ae-abf6-41b3d2101230");
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит ""Дата выплаты"" в документах ""Начисление зарплаты""'");
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьДатыВыплатыВНачисленияхЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.35";
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьИдентификаторыСтрокВРегистрахНакопления";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("34fdfe70-d48c-4c2f-a15a-f9c5ea97237d");
	Обработчик.Комментарий = НСтр("ru='Заполняет реквизит ""Идентификатор строки"" регистров накопления ""Начисления удержания по сотрудникам"" и ""Отработанное время по сотрудникам""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.39";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6f161f2c-6adf-421f-a23b-f2daabeee608");
	Обработчик.Комментарий = НСтр("ru='Заполняет измерение ""Головная организация"" регистра ""Плановые авансы""'");
	Обработчик.Процедура = "РасчетЗарплаты.ЗаполнитьГоловныеОрганизацииПлановыхАвансов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.44";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3ccc87fc-97a8-4ef3-ac05-255b6e9fff04");
	Обработчик.Процедура = "РегистрыСведений.ПлановыеАвансы.ЗаполнитьИнтервальныйРегистр";
	Обработчик.Комментарий = НСтр("ru='Заполняет интервальные данные регистра ""Плановые авансы""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.126";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ca0d865-0d97-4658-9fd5-083464f5c653");
	Обработчик.Процедура = "РасчетЗарплаты.СоздатьНачислениеОтсутствиеПоБолезни";
	Обработчик.Комментарий = НСтр("ru='Создает начисление ""Отсутствие по болезни""'");
	
КонецПроцедуры

Процедура ЗаполнитьПланВидовРасчета() Экспорт
	РасчетЗарплатыВнутренний.СформироватьПланВидовРасчетаПоНастройкам(Истина);
КонецПроцедуры

// Заполняет реквизит РеквизитДопУпорядочивания в ПВР Начисления и Удержания.
Процедура ОбновлениеПланВидовРасчетаРеквизитДопУпорядочивания() Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РасчетЗарплатыВнутренний.СоздатьВТПорядокПредопределенныхНачисленийУдержаний(МенеджерВременныхТаблиц, Истина);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПорядокПредопределенныхНачислений.Порядок, 0) КАК Порядок
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокПредопределенныхНачисленийУдержаний КАК ПорядокПредопределенныхНачислений
	|		ПО Начисления.Ссылка = ПорядокПредопределенныхНачислений.Ссылка
	|			И (ПорядокПредопределенныхНачислений.НачислениеУдержание = ""Начисления"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПорядокПредопределенныхНачислений.Порядок) КАК Порядок
	|ИЗ
	|	ВТПорядокПредопределенныхНачисленийУдержаний КАК ПорядокПредопределенныхНачислений
	|ГДЕ
	|	ПорядокПредопределенныхНачислений.НачислениеУдержание = ""Начисления""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Начисления.РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.РеквизитДопУпорядочивания = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПорядокПредопределенныхУдержаний.Порядок, 0) КАК Порядок
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокПредопределенныхНачисленийУдержаний КАК ПорядокПредопределенныхУдержаний
	|		ПО Удержания.Ссылка = ПорядокПредопределенныхУдержаний.Ссылка
	|			И (ПорядокПредопределенныхУдержаний.НачислениеУдержание = ""Удержания"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПорядокПредопределенныхУдержаний.Порядок) КАК Порядок
	|ИЗ
	|	ВТПорядокПредопределенныхНачисленийУдержаний КАК ПорядокПредопределенныхУдержаний
	|ГДЕ
	|	ПорядокПредопределенныхУдержаний.НачислениеУдержание = ""Удержания""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Удержания.РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.РеквизитДопУпорядочивания = 0";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0];
	ВыборкаПорядок = МассивРезультатов[1].Выбрать();
	РезультатЗапросаЕстьПустые = МассивРезультатов[2];
	
	Если НЕ РезультатЗапросаЕстьПустые.Пустой() Тогда
		// Есть начисления с пустым значением РеквизитДопУпорядочивания
		// обработаем все начисления.
		
		ВыборкаПорядок.Следующий();
		Порядок = ?(Не ЗначениеЗаполнено(ВыборкаПорядок.Порядок), 1, ВыборкаПорядок.Порядок + 1);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.Порядок > 0 Тогда
				НачислениеОбъект.РеквизитДопУпорядочивания = Выборка.Порядок;
			Иначе
				НачислениеОбъект.РеквизитДопУпорядочивания = Порядок;
				Порядок = Порядок +1;
			КонецЕсли;
			НачислениеОбъект.ОбменДанными.Загрузка = Истина;
			НачислениеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;	
	
	РезультатЗапроса = МассивРезультатов[3];
	ВыборкаПорядок = МассивРезультатов[4].Выбрать();
	РезультатЗапросаЕстьПустые = МассивРезультатов[5];
	
	Если НЕ РезультатЗапросаЕстьПустые.Пустой() Тогда
		// Есть удержания с пустым значением РеквизитДопУпорядочивания
		// обработаем все удержания.
		ВыборкаПорядок.Следующий();
		Порядок = ?(Не ЗначениеЗаполнено(ВыборкаПорядок.Порядок), 1, ВыборкаПорядок.Порядок + 1);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.Порядок > 0 Тогда
				УдержаниеОбъект.РеквизитДопУпорядочивания = Выборка.Порядок;
			Иначе
				УдержаниеОбъект.РеквизитДопУпорядочивания = Порядок;
				Порядок = Порядок +1;
			КонецЕсли;
			УдержаниеОбъект.ОбменДанными.Загрузка = Истина;
			УдержаниеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

// Выполняет обновление значения реквизита ВидНачисленияДляНУ для РК и СН.
Процедура ОбновлениеПланВидовРасчетаРеквизитВидНачисленияДляНУДляРКиСН() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255) КАК ВидНачисленияДляНУ
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|	И Начисления.ВидНачисленияДляНУ <> ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидНачисленияДляНУ = Выборка.ВидНачисленияДляНУ;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;	

КонецПроцедуры

// Переносит значение флажка ЯвляетсяДСВ в реквизит КатегорияУдержания.
Процедура ОбновлениеПланВидовРасчетаРеквизитКатегорияУдержания() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.УдалитьЯвляетсяДСВ
	|	И Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ;
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит КатегорияНачисленияИлиНеоплаченногоВремени
// ПВР Начисления.
//
Процедура ЗаполнитьКатегориюНачислений() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Оклад""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""РайонныйКоэффициент""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""СевернаяНадбавка""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее)
	|	КОНЕЦ КАК Категория
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Выборка.Категория;
		НачислениеОбъект.УдалитьИдентификаторОбъекта = "";
		НачислениеОбъект.ОбменДанными.Загрузка = Истина;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВходимостьНачисленийВБазуРКИСН() Экспорт
	
	РасчетЗарплатыВнутренний.УстановитьВходимостьНачисленийВБазуРКИСН();
	
КонецПроцедуры

Процедура УстановитьРежимРасчетаДокументовПриРедактировании() Экспорт
	
	Если Не Константы.РассчитыватьДокументыПриРедактировании.Получить()
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Константы.РассчитыватьДокументыПриРедактировании.Установить(Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

// Формирует виды расчета для учета больничных листов, отпусков и удержаний
// по исполнительным листам.
//
Процедура СформироватьВидыРасчетаБольничныхОтпусковИсполнительныхЛистов() Экспорт
	
	РасчетЗарплатыВнутренний.СформироватьВидыРасчетаБольничныхОтпусковИсполнительныхЛистов();
	
КонецПроцедуры

Процедура УстановитьСпособРасчетаАвансаСотрудников() Экспорт
	
	РасчетЗарплатыВнутренний.УстановитьСпособРасчетаАвансаСотрудников();
	
КонецПроцедуры

Процедура УстановитьЗачетОтработанногоВремениНачислений() Экспорт
	
	РасчетЗарплатыВнутренний.УстановитьЗачетОтработанногоВремениНачислений();
	
КонецПроцедуры

Процедура ЗаполнитьОтработанноеВремяОтсутствий() Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьОтработанноеВремяОтсутствий();
	
КонецПроцедуры

Процедура ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам() Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам();
	
КонецПроцедуры

Процедура ЗаполнитьГоловнуюОрганизациюПлановыхНачислений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Регистратор КАК Регистратор,
			|	ПлановыеНачисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПлановыеНачисления.*
			|ИЗ
			|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеНачисления.Регистратор = Регистраторы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла; 
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПланируемыеДатыВыплатыОтпусковИБольничныхЛистов() Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьПланируемыеДатыВыплатыОтпусковИБольничныхЛистов();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыКорректировкиВыплаты() Экспорт
	РасчетЗарплатыВнутренний.ЗаполнитьТаблицыКорректировкиВыплаты();
КонецПроцедуры

Процедура ЗаполнитьДатыВыплатыВНачисленияхЗарплаты(ПараметрыОбновления = НеОпределено) Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьДатыВыплатыВНачисленияхЗарплаты(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокВРегистрахНакопления(ПараметрыОбновления) Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьИдентификаторыСтрокВРегистрахНакопления(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииПлановыхАвансов(ПараметрыОбновления = НеОпределено) Экспорт
	
	РасчетЗарплатыВнутренний.ЗаполнитьГоловныеОрганизацииПлановыхАвансов(ПараметрыОбновления);
	
КонецПроцедуры

Процедура СоздатьНачислениеОтсутствиеПоБолезни(ПараметрыОбновления = Неопределено) Экспорт
	
	РасчетЗарплатыВнутренний.СоздатьНачислениеОтсутствиеПоБолезни(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
