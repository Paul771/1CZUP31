////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотКлиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

//Открывает форму выбора пользователей в разрезе подразделений и помещает выбранного пользователя в реквизит формы.
// Параметры:
//	Реквизит - имя реквизита формы, в который будет помещен выбранный пользователь
//	ФормаВладелец - форма, из которой вызывается форма выбора пользователя
Процедура ВыбратьПользователяИзДереваПодразделений(Реквизит, ФормаВладелец) Экспорт
	
	ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборПользователяСПодразделениями";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Реквизит", Реквизит);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьПользователяИзДереваПодразделенийЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
	
	ОткрытьФорму(ИмяФормы, , ФормаВладелец,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Открывает форму для указания значения дополнительного реквизита.
// Параметры:
//	Форма - форма, на которой осуществляется работа с дополнительным реквизитом 
//		и из которой вызывается форма заполнения
//	Элемент - элемент формы, в который будет помещено указанной значение
//	СтандартнаяОбработка - параметр обработки, используемый в обработчике на форме, 
//		из которой вызывается заполнение значения доп. реквизита
Процедура ВыбратьЗначениеДополнительногоРеквизита(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Элемент.Родитель.ТекущиеДанные.СписокДоступныхТипов;
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		ЗаголовокФормы = НСтр("ru = 'Тип реквизита ""%Свойство%""'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы,"%Свойство%",Элемент.Родитель.ТекущиеДанные.Свойство);
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТипов, ЗаголовокФормы);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеДополнительногоРеквизитаВыборТипаЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа";
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,, Оповещение);
		
	Иначе
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
		ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент)
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму для указания значения реквизита составного типа.
// Параметры:
//	Форма - УправляемаяФорма - форма, на которой осуществляется работа с реквизитом 
//		и из которой вызывается форма заполнения
//	Элемент - ПолеФормы - элемент формы, в который будет помещено указанной значение
//	СтандартнаяОбработка - Булево- параметр обработки, используемый в обработчике на форме, 
//		из которой вызывается заполнение значения доп. реквизита
//
Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблице(Форма, ТекущиеДанные, Реквизит, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = ТекущиеДанные[Реквизит + "СписокТипов"];
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		ЗаголовокФормы = НСтр("ru = 'Выбор типа данных'");
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТипов, ЗаголовокФормы);
		ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа";
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВыборТипаЗавершение", 
			ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		 
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,, Оповещение);
	Иначе
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
		ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит);
	КонецЕсли;
	
КонецПроцедуры

//Очищает ID и Тип при очистке реквизита объекта Документооборота на форме.
// Параметры:
//	Реквизит - имя реквизита формы
//	ФормаВладелец - управляемая форма, содержащая очищаемые реквизиты
Процедура ОчиститьСсылочныйРеквизит(Реквизит, ФормаВладелец) Экспорт 
	
	ФормаВладелец[Реквизит + "ID"] = "";
	ФормаВладелец[Реквизит + "Тип"] = "";
	ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

//Заполняет реквизиты формы по выбранному значению.
// Параметры:
//	Реквизит - строка с именем реквизита формы
//	ВыбранноеЗначение - структура с выбранным значением
//	СтандартнаяОбработка - признак стандартной обработки выбора
//	ФормаВладелец - форма, содержащая заполняемый реквизит
Процедура ОбработкаВыбораДанныхДляАвтоПодбора(Реквизит, ВыбранноеЗначение, 
	СтандартнаяОбработка, ФормаВладелец, ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт 
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение.name;
			ФормаВладелец[Реквизит + "ID"] = ВыбранноеЗначение.id;;
			ФормаВладелец[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение.name;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = ВыбранноеЗначение.id;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает выбранное значение в элемент списка.
// Параметры:
//	ЭлементСписок - элемент управляемой формы
//	ВыбранноеЗначение - структура выбранного значения. 
//	- id - идентификатор объекта
//	- type - тип объекта
//	- name - представление объекта
Процедура ПрименитьВыборЗначенияРеквизитаВСписке(ЭлементСписок, ВыбранноеЗначение, 
	
	СтандартнаяОбработка, ФормаВладелец) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЭлементСписок.ТекущиеДанные["Значение"] = ВыбранноеЗначение.Name;
		ЭлементСписок.ТекущиеДанные["ЗначениеID"] = ВыбранноеЗначение.id;
		ЭлементСписок.ТекущиеДанные["ЗначениеТип"] = ВыбранноеЗначение.type;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает объект Документооборота.
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта XDTO Документооборота.
//   ID - Строка - идентификатор объекта Документооборота.
//   ВладелецФормы - произвольное значение, устанавливаемое в качестве владельца формы.
//   ДополнительныеПараметры - Структура - параметры, передаваемые в открываемый объект.
//   Оповещение - ОписаниеОповещения - оповещение при закрытии формы.
//
Процедура ОткрытьОбъект(ТипОбъекта, ID, ВладелецФормы = Неопределено, 
	ДополнительныеПараметры = Неопределено, Оповещение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.";
	
	СоответствиеФорм = Новый Соответствие;
	
	СоответствиеФорм.Вставить("DMBusinessProcessInternalDocumentProcessing", "БизнесПроцессОбработкаВнутреннегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessIncomingDocumentProcessing", "БизнесПроцессОбработкаВходящегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessOutgoingDocumentProcessing", "БизнесПроцессОбработкаИсходящегоДокумента");
	
	СоответствиеФорм.Вставить("DMBusinessProcessPerformance", "БизнесПроцессИсполнение");
	СоответствиеФорм.Вставить("DMBusinessProcessAcquaintance", "БизнесПроцессОзнакомление");
	СоответствиеФорм.Вставить("DMBusinessProcessOrder", "БизнесПроцессПоручение");
	СоответствиеФорм.Вставить("DMBusinessProcessConsideration", "БизнесПроцессРассмотрение");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistration", "БизнесПроцессРегистрация");
	СоответствиеФорм.Вставить("DMBusinessProcessApproval", "БизнесПроцессСогласование");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmation", "БизнесПроцессУтверждение");
	
	СоответствиеФорм.Вставить("DMBusinessProcessTask", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessOrderTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskApproval", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskConfirmation", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistrationTaskRegistration", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistrationTaskCheckup", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessPerfomanceTaskCheckup", "Задача"); 
	СоответствиеФорм.Вставить("DMBusinessProcessConsiderationTaskAcquaint", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskQuestion", "Задача"); 
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskAnswer", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskInvitation", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskAcquaint", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskNotify", "Задача");
	
	СоответствиеФорм.Вставить("DMInternalDocument", "ВнутреннийДокумент");
	СоответствиеФорм.Вставить("DMIncomingDocument", "ВходящийДокумент");
	СоответствиеФорм.Вставить("DMOutgoingDocument", "ИсходящийДокумент");
	СоответствиеФорм.Вставить("DMFile", "Файл"); 
	
	СоответствиеФорм.Вставить("DMInternalDocumentFolder", "ПапкаВнутреннихДокументов"); 
	
	// комплексные процессы.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		СоответствиеФорм.Вставить("DMComplexBusinessProcess", "БизнесПроцессКомплексныйПроцесс");
	КонецЕсли;
	
	// приглашение, вопросы автору.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		СоответствиеФорм.Вставить("DMBusinessProcessInvitation", 	"БизнесПроцессПриглашение");
		СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolution","БизнесПроцессРешениеВопросов");
	КонецЕсли;
	// почта.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.8.1.CORP") Тогда
		СоответствиеФорм.Вставить("DMIncomingEMail", "ВходящееПисьмо");
		СоответствиеФорм.Вставить("DMOutgoingEMail", "ИсходящееПисьмо");
	КонецЕсли;
	
	// ежедневные отчеты и работа с контрагентами.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
		СоответствиеФорм.Вставить("DMDailyReport", 	 "ЕжедневныйОтчет");
		СоответствиеФорм.Вставить("DMCorrespondent", "Контрагент");
	КонецЕсли;
	
	ИмяФормы = СоответствиеФорм.Получить(ТипОбъекта);
	
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		ПараметрыФормы = Новый Структура("id, type", ID, ТипОбъекта);
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Для каждого Элемент Из ДополнительныеПараметры Цикл
				ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ОткрытьФорму(ИсточникФормы + ИмяФормы, ПараметрыФормы, ВладелецФормы, ID,,, Оповещение);
		
	Иначе
		Если ЗначениеЗаполнено(ТипОбъекта) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Просмотр объектов такого типа не поддерживается в этой версии 1С:Документооборота.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Создает оповещение при записи документов Документооборота.
// Параметры:
//	Форма - форма документа Документооборота
Процедура Оповестить_ЗаписьДокумента(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Форма.Представление);
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("type", Форма.Тип);
	ПараметрыОповещения.Вставить("documentType", Форма.ВидДокумента);
	ПараметрыОповещения.Вставить("ВнешнийОбъект", Форма.ВнешнийОбъект);
	
	Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

//Создает оповещение при записи бизнес-процессов Документооборота.
// Параметры:
//	Форма - форма бизнес-процесса Документооборота
Процедура Оповестить_ЗаписьБизнесПроцесса(Форма, Стартован) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("Стартован", Стартован);
	
	// Соберем предметы.
	Предметы = Новый Массив;
	Если Форма.ДоступнаМультипредметность Тогда
		Для Каждого СтрокаПредмета Из Форма.Предметы Цикл
			Если СтрокаПредмета.РольПредмета = "Основной" Тогда
				Предмет = Новый Структура;
				Предмет.Вставить("ID", СтрокаПредмета.ПредметID);
				Предмет.Вставить("Тип", СтрокаПредмета.ПредметТип);
				Предметы.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
	Иначе // один предмет
		Предмет = Новый Структура;
		Предмет.Вставить("ID", Форма.ПредметID);
		Предмет.Вставить("Тип", Форма.ПредметТип);
		Предметы.Добавить(Предмет);
	КонецЕсли;
	ПараметрыОповещения.Вставить("Предметы", Предметы);
	
	Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, Форма.ВладелецФормы);

КонецПроцедуры

//Создает оповещение при записи исходящего письма Документооборота.
// Параметры:
//	Форма - форма исходящего письма Документооборота
Процедура Оповестить_ЗаписьИсходящегоПисьма(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("ПредметID", Форма.ПредметID);
	ПараметрыОповещения.Вставить("ПисьмоОснованиеID",Форма.ПисьмоОснованиеID);
	
	Оповестить("Запись_ДокументооборотИсходящееПисьмо", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

//Создает оповещение при записи объекта Документооборота.
// Параметры:
//	Форма - УправляемаяФорма - форма объекта Документооборота
//
Процедура Оповестить_ЗаписьОбъекта(Форма, ВнешнийОбъект = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Форма.Представление);
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("type", Форма.Тип);
	ПараметрыОповещения.Вставить("ВнешнийОбъект", ВнешнийОбъект);
	
	Оповестить("Запись_ДокументооборотОбъект", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

//Создает оповещение при добавлении связи на клиенте.
// Параметры:
//	ID - идентификатор объекта Документооборота
//	Тип - тип XDTO объекта Документооборота
//	СсылкаНаОбъект - ссылка на объект системы
//
Процедура Оповестить_ДобавлениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_ДобавлениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры

//Создает оповещение при удалении связи на клиенте.
// Параметры:
//	ID - идентификатор объекта Документооборота
//	Тип - тип XDTO объекта Документооборота
//	СсылкаНаОбъект - ссылка на объект системы
//
Процедура Оповестить_УдалениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_УдалениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры
 
//Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
// Параметры:
//	ТипОбъектаВыбора - имя класса XDTO, соответствующего типу выбираемого объекта
//	Реквизит - имя реквизита формы, в который будет помещено значение, выбранное из документооборота
//	ФормаВладелец - форма, из которой вызывается форма выбора
//	Отбор - условия, накладываемые на список
//Возвращает:
//	Признак успешного выполнения обработки выбора
//
Процедура ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаЗавершение", ИнтеграцияС1СДокументооборотКлиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(ТипОбъектаВыбора, Отбор, ФормаВладелец[Реквизит + "ID"], ФормаВладелец, Оповещение);
	
КонецПроцедуры

//Обработка выбора значения из списка.
//
Процедура ВыбратьЗначениеИзСпискаЗавершение(Результат, Параметры) Экспорт
	
	ФормаВладелец = Параметры.ФормаВладелец;
	Реквизит = Параметры.Реквизит;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаЗавершение", Реквизит, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму выбора значения реквизита в талице из списка объектов документооборота.
//
Процедура ВыбратьЗначениеИзСпискаВТаблице(ТипОбъектаВыбора, Реквизит, ТекущиеДанные, ФормаВладелец, Отбор = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ИнтеграцияС1СДокументооборотКлиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(ТипОбъектаВыбора, Отбор, ТекущиеДанные[Реквизит + "ID"], ФормаВладелец, Оповещение);
	
КонецПроцедуры

//Обработка выбора значения в таблице из списка.
//
Процедура ВыбратьЗначениеИзСпискаВТаблицеЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные[Реквизит] = Результат.РеквизитПредставление;
		ТекущиеДанные[Реквизит + "ID"] = Результат.РеквизитID;
		ТекущиеДанные[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("Данные", ТекущиеДанные);
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ПараметрыОповещения, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

//Открывает список выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
// Параметры:
//	ТипОбъектаВыбора - имя класса XDTO, соответствующего типу выбираемого объекта
//	Реквизит - имя реквизита формы, в который будет помещено значение, выбранное из документооборота
//	ФормаВладелец - форма, из которой вызывается форма выбора
//	Отбор - условия, накладываемые на список
//Возвращает:
//	Признак успешного выполнения обработки выбора
Процедура ВыбратьЗначениеИзВыпадающегоСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, 
	Отбор = Неопределено, ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт 
	
	СписокВыбора = ИнтеграцияС1СДокументооборотВызовСервера.ЗначенияДляВыбора(ТипОбъектаВыбора, Отбор);
	
	Если ЭтоТаблица Тогда
		ТекущееЗначение = Элемент.Родитель.ТекущиеДанные[Реквизит+"ID"];
	Иначе
		ТекущееЗначение = ФормаВладелец[Реквизит+"ID"];
	КонецЕсли;
	
	НачальноеЗначение = Неопределено;
	Для каждого ЭлементСписка Из СписокВыбора Цикл
		Если ЭлементСписка.Значение.РеквизитID = ТекущееЗначение Тогда
			НачальноеЗначение = ЭлементСписка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Реквизит", Реквизит);
	ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	ДополнительныеПараметры.Вставить("ЭтоТаблица", ЭтоТаблица);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзВыпадающегоСпискаЗавершение", ИнтеграцияС1СДокументооборотКлиент, ДополнительныеПараметры);
	
	Если НачальноеЗначение = Неопределено Тогда
		ФормаВладелец.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, ?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]));
	Иначе
		ФормаВладелец.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, ?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]), НачальноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

//Обработка выбора значения из выпадающего списка.
//
Процедура ВыбратьЗначениеИзВыпадающегоСпискаЗавершение(Результат, Параметры) Экспорт
	
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	ЭтоТаблица = Параметры.ЭтоТаблица;
	Элемент = Параметры.Элемент;
	ТипОбъектаВыбора = Параметры.ТипОбъектаВыбора;
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			Если ТипОбъектаВыбора = "DMBusinessProcessImportance" Тогда
				Представление = СтрЗаменить(Результат.Значение.РеквизитПредставление," важность","");
			Иначе
				Представление = Результат.Значение.РеквизитПредставление;
			КонецЕсли;
			Если Не ЭтоТаблица Тогда
				ФормаВладелец[Реквизит] = Представление;
				ФормаВладелец[Реквизит + "ID"] = Результат.Значение.РеквизитID;
				ФормаВладелец[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			Иначе
				Элемент.Родитель.ТекущиеДанные[Реквизит] = Представление;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = Результат.Значение.РеквизитID;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			КонецЕсли;
			ФормаВладелец.Модифицированность = Истина;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Реквизит", Реквизит);
			ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
			ПараметрыОповещения.Вставить("Элемент", Элемент);
			
			Оповестить("Документооборот_ВыбратьЗначениеИзВыпадающегоСпискаЗавершение", ПараметрыОповещения, ФормаВладелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начинает процесс выбора объекта ДО указанного типа, возвращая результат вызовом оповещения.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - тип выбираемого объекта (XDTO, например, "DMCorrespondent").
//   Отбор - Структура - накладываемый отбор.
//   ВыбранноеЗначение - Строка - идентификатор ранее выбранного значения.
//   ФормаВладелец - УправляемаяФорма - форма, из которой вызван выбор.
//   ОписаниеОповещения - ОписаниеОповещения - вызвается после завершения выбора с передачей структуры, 
//      описывающей выбранный объект.
//
Процедура ВыбратьЗначениеПоТипуОбъекта(ТипОбъектаВыбора, Отбор = Неопределено, ВыбранноеЗначение = "", 
	ФормаВладелец = Неопределено, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Заголовок = НСтр("ru = 'Выбор значения'");
	
	СоответствиеЗаголовков = Новый Соответствие;
	СоответствиеЗаголовков.Вставить("DMFile", 			НСтр("ru = 'Выбор файла'")); 
	СоответствиеЗаголовков.Вставить("DMProject", 		НСтр("ru = 'Выбор проекта'"));
	СоответствиеЗаголовков.Вставить("DMWorkType", 		НСтр("ru = 'Выбор вида работ'")); 
	СоответствиеЗаголовков.Вставить("DMProjectTask", 	НСтр("ru = 'Выбор проектной задачи'"));
	СоответствиеЗаголовков.Вставить("DMFileFolder", 	НСтр("ru = 'Выбор папки файлов'"));
	СоответствиеЗаголовков.Вставить("DMOrganization", 	НСтр("ru = 'Выбор организации'"));
	СоответствиеЗаголовков.Вставить("DMUser", 			НСтр("ru = 'Выбор пользователя'"));
	СоответствиеЗаголовков.Вставить("DMActivityMatter", НСтр("ru = 'Выбор вопроса деятельности'"));
	СоответствиеЗаголовков.Вставить("DMCurrency", 		НСтр("ru = 'Выбор валюты'"));
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
		СоответствиеЗаголовков.Вставить("DMCorrespondent", 	НСтр("ru = 'Выбор корреспондента'"));
	Иначе
		СоответствиеЗаголовков.Вставить("DMCorrespondent", 	НСтр("ru = 'Выбор контрагента'"));
	КонецЕсли;
	
	СоответствиеЗаголовков.Вставить("DMContactPerson", 	НСтр("ru = 'Выбор контактного лица'"));
	СоответствиеЗаголовков.Вставить("DMSubdivision", 	НСтр("ru = 'Выбор подразделения'"));
	СоответствиеЗаголовков.Вставить("DMAccessLevel", 	НСтр("ru = 'Выбор грифа доступа'"));
	СоответствиеЗаголовков.Вставить("DMRelationType", 	НСтр("ru = 'Выбор типа связи'"));
	СоответствиеЗаголовков.Вставить("DMPrivatePerson", 	НСтр("ru = 'Выбор физического лица'"));
	СоответствиеЗаголовков.Вставить("DMDocumentStatus", НСтр("ru = 'Выбор состояния документа'"));
	СоответствиеЗаголовков.Вставить("DMDeliveryMethod", НСтр("ru = 'Выбор способа доставки'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocument", НСтр("ru = 'Выбор внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocument", НСтр("ru = 'Выбор входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocument", НСтр("ru = 'Выбор исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocumentType", 	НСтр("ru = 'Выбор вида входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocumentType", 	НСтр("ru = 'Выбор вида исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentType", 	НСтр("ru = 'Выбор вида внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentFolder", НСтр("ru = 'Выбор папки внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMProlongationProcedure", 	НСтр("ru = 'Выбор способа продления'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessOrderTemplate", 		  НСтр("ru = 'Выбор шаблона поручения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConsiderationTemplate", НСтр("ru = 'Выбор шаблона рассмотрения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessRegistrationTemplate",  НСтр("ru = 'Выбор шаблона регистрации'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessApprovalTemplate", 	  НСтр("ru = 'Выбор шаблона согласования'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConfirmationTemplate",  НСтр("ru = 'Выбор шаблона утверждения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessPerformanceTemplate",   НСтр("ru = 'Выбор шаблона исполнения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessAcquaintanceTemplate",  НСтр("ru = 'Выбор шаблона ознакомления'"));
	СоответствиеЗаголовков.Вставить("DMCompoundBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона составного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMComplexBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона комплексного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessImportance", 			  НСтр("ru = 'Выбор варианта важности'"));
	
	СоответствиеЗаголовков.Вставить("DMIncomingEMail", НСтр("ru = 'Выбор входящего письма'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingEMail", НСтр("ru = 'Выбор исходящего письма'"));
	СоответствиеЗаголовков.Вставить("DMDailyReport", НСтр("ru = 'Выбор ежедневного отчета'"));
	
	ПараметрыФормы.Вставить("Заголовок", СоответствиеЗаголовков.Получить(ТипОбъектаВыбора));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ВыбранноеЗначение);
	
	// В новых версиях доступен выбор объекта поиском.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.6.1") и
		(ТипОбъектаВыбора = "DMIncomingDocument" 
		Или ТипОбъектаВыбора = "DMInternalDocument" 
		Или ТипОбъектаВыбора = "DMOutgoingDocument" 
		Или ТипОбъектаВыбора = "DMCorrespondent") Тогда
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектаПоиском",
			ПараметрыФормы,
			ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе // В старых версиях используем простые формы.
		// Получение подпапок произвольного типа.
		Если ТипОбъектаВыбора = "DMInternalDocument" И ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборВнутреннегоДокумента",
				ПараметрыФормы, 
				ФормаВладелец,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка",
				ПараметрыФормы, 
				ФормаВладелец,
				Новый УникальныйИдентификатор,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подключаемую команду интеграции с 1С:Документообротом из формы объекта или списка.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - УправляемаяФорма - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура, ДанныеФормыКоллекция - данные, уточняющие параметр команды.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Источник) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Команда", Команда);
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("Источник", Источник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение", 
		ЭтотОбъект, Параметры);
	ПроверитьПодключение(ОписаниеОповещения,,,
		Истина);
	
КонецПроцедуры

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Результат - Булево - Истина, если подключение успешно.
//   Параметры - Структура - см. ВыполнитьПодключаемуюКомандуИнтеграции.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
		
	Команда = Параметры.Команда;
	Форма = Параметры.Форма;
	Источник = Параметры.Источник;
	
	Если Команда.Имя = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты" Тогда
		УказатьТрудозатраты(Источник, Форма);
		
	ИначеЕсли Команда.Имя = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж" Тогда
		ПереключитьХронометраж(Источник, Форма);
		
	ИначеЕсли  Команда.Имя = "ИнтеграцияС1СДокументооборотом_Файлы" Тогда
		Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			Ссылка = Источник.Ссылка;
		Иначе
			Если Источник.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Ссылка = Неопределено;
			Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
				Ссылка = Источник.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		ОткрытьПрисоединенныеФайлы(Ссылка, Форма, Форма.УникальныйИдентификатор, Форма.Окно);
		
	КонецЕсли;
		
КонецПроцедуры

// Вызывается после переключения хронометража в форме объекта ИС.
//
Процедура УстановитьПометкуКнопкиПереключитьХронометраж(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Истина Тогда
		Если ПараметрыОповещения.Найти("ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж") <> Неопределено Тогда
			ПараметрыОповещения.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает длительность работы в секундах от начала события до текущей даты.
//
Функция ПолучитьДлительностьРаботы(ДатаНачалаХронометража) Экспорт
	
	ДлительностьРаботы = 0;
	
	Если ДатаНачалаХронометража <> '00010101' Тогда
		СегодняшнийДень = НачалоДня(ТекущаяДата()); // Использование оправдано: расчет длительности.
		ДеньНачала = НачалоДня(ДатаНачалаХронометража);
		
		Если ДеньНачала = СегодняшнийДень Тогда
			КонецХронометража = ТекущаяДата(); // Использование оправдано: расчет длительности.
			ДлительностьРаботы = КонецХронометража - ДатаНачалаХронометража;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДлительностьРаботы;
	
КонецФункции

// Выполняет поиск связанного объекта ДО, при необходимости создавая его на основании объекта ИС 
// с заполнением по правилам интеграции, если подходящее правило существует.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, для которого разыскивается связанный объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания с
//     передачей в качестве параметра Структуры (id, type, name).
//
Процедура НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения) Экспорт
	
	Результат = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(ОбъектИС);
		
	Если Результат <> Неопределено Тогда // найден
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения, Ложь);
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//   ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//     связанный объект следует создать молча. В случае ошибок записи форма все равно будет открыта.
//
Процедура НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения, ОткрытьФорму = Ложь) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОткрытьФорму", ОткрытьФорму);
	
	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ОбъектИС);
	
	Если Правила.Количество() = 1 Тогда
		
		НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правила[0], Параметры);
		
	ИначеЕсли Правила.Количество() = 0 Тогда
		
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораТипа",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Создать в 1С:Документообороте'"));
		ПараметрыФормы.Вставить("ЗаголовокКоманды", НСтр("ru = 'Создать'"));
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаОбъектаДокументооборота",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		
	Иначе // несколько правил, требуется выбор пользователя
		
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание объекта ДО после выбора типа.
//
// Параметры:
//   Тип - Строка - тип создаваемого объекта, например, "DMInternalDocument".
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораТипа(Тип, Параметры) Экспорт
	
	Если ТипЗнч(Тип) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);

	Если Тип = "DMIncomingDocument" Тогда
		ИмяФормы = "ВходящийДокумент";
	ИначеЕсли Тип = "DMOutgoingDocument" Тогда 
		ИмяФормы = "ИсходящийДокумент";
	ИначеЕсли Тип = "DMInternalDocument" Тогда 
		ИмяФормы = "ВнутреннийДокумент";
	ИначеЕсли Тип = "DMCorrespondent" Тогда 
		ИмяФормы = "Контрагент";
	КонецЕсли;
		
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
		ПараметрыФормы,,,,, Параметры.ОписаниеОповещения);
		
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   Правило - Структура - подходящее правило:
//     Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом.
//     ТипОбъектаИС - Строка.
//     ТипОбъектаДО - Строка.
//     ПредставлениеОбъектаИС - Строка.
//     ПредставлениеОбъектаДО - Строка.
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правило, Параметры) Экспорт
	
	Если ТипЗнч(Правило) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОткрытьФорму Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);
		ПараметрыФормы.Вставить("Правило", Правило.Ссылка);
	
		Если Правило.ТипОбъектаДО = "DMIncomingDocument" Тогда
			ИмяФормы = "ВходящийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMOutgoingDocument" Тогда 
			ИмяФормы = "ИсходящийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMInternalDocument" Тогда 
			ИмяФормы = "ВнутреннийДокумент";
		ИначеЕсли Правило.ТипОбъектаДО = "DMCorrespondent" Тогда 
			ИмяФормы = "Контрагент";
		КонецЕсли;
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
			ПараметрыФормы,,Параметры.ОбъектИС,,, Параметры.ОписаниеОповещения);
		
	Иначе // без открытия формы
		
		ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьОбъектДОПоПравилу(
			Параметры.ОбъектИС,
			Правило.Ссылка);
			
		Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
			
			Параметры.Вставить("Правило", Правило.Ссылка);
			Параметры.Вставить("ТипОбъектаДО", Правило.ТипОбъектаДО);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НачатьСозданиеСвязанногоОбъектаДОПослеПредупреждения",
				ИнтеграцияС1СДокументооборотКлиент,
				Параметры);
				
			ПоказатьПредупреждение(ОписаниеОповещения, ОбъектДОИлиСообщение,,
				НСтр("ru = 'Не удалось записать объект 1С:Документооборота'"));
			
		Иначе // структура с описанием созданного объекта результата
			
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОбъектДОИлиСообщение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание связанного объекта ДО после показа предупреждение о невозможности записи
// автоматически созданного объекта. Открывает его форму для интерактивного заполнения.
//
// Параметры:
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//     ОткрытьФорму - Булево - Истина, если нужно открыть форму созданного объекта, и Ложь, если
//       связанный объект следует создать молча.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеПредупреждения(Параметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ОбъектИС);
	ПараметрыФормы.Вставить("Правило", Параметры.Правило);

	Если Параметры.ТипОбъектаДО = "DMIncomingDocument" Тогда
		ИмяФормы = "ВходящийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMOutgoingDocument" Тогда 
		ИмяФормы = "ИсходящийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMInternalDocument" Тогда 
		ИмяФормы = "ВнутреннийДокумент";
	ИначеЕсли Параметры.ТипОбъектаДО = "DMCorrespondent" Тогда 
		ИмяФормы = "Контрагент";
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма." + ИмяФормы,
		ПараметрыФормы,,,,, Параметры.ОписаниеОповещения);
		
КонецПроцедуры

// Создает объект ИС по данным формы объекта ДО.
//
// Параметры:
//   Форма - УправляемаяФорма - форма объекта Документооборота или иная форма, требующая оповещения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - используемое правило.
// 
Процедура СоздатьИнтегрированныйОбъектПоДаннымФормы(Форма, Правило) Экспорт
	
	СоздатьИнтегрированныйОбъектПоПравилу(Форма, Правило, Форма.Тип, Форма.ID);

КонецПроцедуры

// Создает объект ИС по указанному объекту ДО и известному типу.
//
// Параметры:
//   Форма - УправляемаяФорма - форма объекта ДО или иная форма, требующая оповещения.
//   ТипОбъектаИС - Строка - тип объекта ИС.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектПоТипу(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,, ТипОбъектаИС,
		ТипОбъектаДО,
		ИдентификаторОбъектаДО);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ТипОбъектаДО", ТипОбъектаДО);
	ПараметрыОповещения.Вставить("ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьИнтегрированныйОбъектПоТипуПослеВыбораПравила",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
		
	Если Правила.Количество() = 1 Тогда
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Правила[0]);
		
	ИначеЕсли Правила.Количество() = 0 Тогда
		
		СоздатьИнтегрированныйОбъектБезПравила(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		ПараметрыФормы.Вставить("СозданиеОбъектаИС", Истина);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание объекта ИС при неоднозначености правил после выбора правила.
// 
// Параметры:
//   Результат - Структура, содержащее свойство
//     Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - выбранное правило.
//   Параметры - Структура, свойства см. в СоздатьИнтегрированныйОбъектПоТипу.
//
Процедура СоздатьИнтегрированныйОбъектПоТипуПослеВыбораПравила(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	Конецесли;
	
	СоздатьИнтегрированныйОбъектПоПравилу(Параметры.Форма,
		Результат.Ссылка,
		Параметры.ТипОбъектаДО,
		Параметры.ИдентификаторОбъектаДО);
	
КонецПроцедуры

// Создает объект ИС по указанному объекту ДО, заполняет его и устанавливает связь.
//
// Параметры:
//   Форма - УправляемаяФорма - форма объекта ДО или иная форма, требующая оповещения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - используемое правило.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектПоПравилу(Форма, Правило, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	 
	ДанныеЗаполнения = ИнтеграцияС1СДокументооборотВызовСервера.ДанныеЗаполненияИнтегрируемогоОбъекта(Правило,
			ТипОбъектаДО,
			ИдентификаторОбъектаДО);
				
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения.ЗначенияРеквизитов);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО", ТипОбъектаДО);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
			
	Уникальность = Новый УникальныйИдентификатор();
	
	ФормаОбъекта = ОткрытьФорму(ДанныеЗаполнения.ИмяФормы,
		ПараметрыФормы,
		Форма,
		Уникальность,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект1СДокументооборота", ДанныеЗаполнения.Объект1СДокументооборота);
	ПараметрыОповещения.Вставить("ФормаОбъекта", ФормаОбъекта);
	ПараметрыОповещения.Вставить("НаличиеПрисоединенныхФайлов", ДанныеЗаполнения.НаличиеПрисоединенныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьИнтегрированныйОбъектЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
	
	ФормаОбъекта.ОписаниеОповещенияОЗакрытии = Оповещение;
	
КонецПроцедуры

// Создает объект ИС по указанному объекту ДО, заполняет его и устанавливает связь.
//
// Параметры:
//   Форма - УправляемаяФорма - форма объекта ДО или иная форма, требующая оповещения.
//   ТипОбъектаИС - Строка - полное имя типа объекта ИС.
//   ТипОбъектаДО - Строка - тип объекта ДО.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта ДО.
//
Процедура СоздатьИнтегрированныйОбъектБезПравила(Форма, ТипОбъектаИС, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО", ТипОбъектаДО);
	ПараметрыФормы.Вставить("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО", ИдентификаторОбъектаДО);
	
	ИмяФормы = ТипОбъектаИС + ".ФормаОбъекта";
			
	ФормаОбъекта = ОткрытьФорму(ИмяФормы,
		ПараметрыФормы,
		Форма,
		ИдентификаторОбъектаДО,,,,
		РежимОткрытияОкнаФормы.Независимый);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект1СДокументооборота", Новый Структура);
	ПараметрыОповещения.Объект1СДокументооборота.Вставить("ID", ИдентификаторОбъектаДО);
	ПараметрыОповещения.Объект1СДокументооборота.Вставить("Тип", ТипОбъектаДО);
	ПараметрыОповещения.Вставить("ФормаОбъекта", ФормаОбъекта);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьИнтегрированныйОбъектЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		ПараметрыОповещения);
	
	ФормаОбъекта.ОписаниеОповещенияОЗакрытии = Оповещение;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Подходящих правил не найдено.'"));
	
КонецПроцедуры

// Сохраняет имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте сохраняется только имя пользователя.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - необязательный, пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура СохранитьНастройкиАвторизации(ИмяПользователя, Пароль = "", ИспользуетсяАутентификацияОС = Ложь) Экспорт
	
	#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвторизации(ИмяПользователя,
		Пароль,,,,
		ИспользуетсяАутентификацияОС);
	#Иначе
	РазделенныйПароль = ИнтеграцияС1СДокументооборотКлиентСервер.РазделитьПароль(Пароль);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	// В сеансе подключения к удаленному рабочему столу Windows каталог временных файлов может быть временным
	// подкаталогом, создаваемым на время сеанса. В этом случае создадим файл в общем каталоге пользователя.
	ПозицияОбщегоКаталога = СтрНайти(ВРег(ИмяВременногоФайла), "\TEMP\", НаправлениеПоиска.СКонца);
	Если ПозицияОбщегоКаталога <> 0 Тогда
		ПозицияПредпоследнегоРазделителя = ПозицияОбщегоКаталога + СтрДлина("\TEMP");
		ПозицияПоследнегоРазделителя = СтрНайти(ИмяВременногоФайла, "\", НаправлениеПоиска.СКонца);
		Если ПозицияПоследнегоРазделителя > ПозицияПредпоследнегоРазделителя Тогда
			ИмяВременногоФайла = Лев(ИмяВременногоФайла, ПозицияПредпоследнегоРазделителя - 1)
				+ Сред(ИмяВременногоФайла, ПозицияПоследнегоРазделителя);
		КонецЕсли;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(РазделенныйПароль[1]);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	Файл = Новый Файл(ИмяВременногоФайла);
	Файл.УстановитьТолькоЧтение(Истина);
	ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвторизации(ИмяПользователя,
		Пароль,
		ИмяКомпьютера(),
		РазделенныйПароль[0],
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
	#КонецЕсли
	
КонецПроцедуры

// Получает имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте возвращается только имя пользователя. Только имя пользователя возвращается и
// тогда, когда в предыдущий раз настройки были сохранены в веб-клиенте или на другом компьютере.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   ПарольСохранен - Булево - Истина, если пароль сохранен пользователем.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация ОС.
//
Процедура ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС) Экспорт

	Пароль = Неопределено;
	ЧастьПароляВИБ = Неопределено;
	ИмяВременногоФайла = Неопределено;
	ИспользуетсяАутентификацияОС = Ложь;

	#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотВызовСервера.ПрочитатьНастройкиАвторизации(ИмяПользователя,,,,,
		ИспользуетсяАутентификацияОС);
	ПарольСохранен = Ложь;
	#Иначе
	ИнтеграцияС1СДокументооборотВызовСервера.ПрочитатьНастройкиАвторизации(ИмяПользователя,
		ИмяКомпьютера(),
		ПарольСохранен,
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
	#КонецЕсли
	
	Если ПарольСохранен Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			РазделенныйПароль = Новый Массив;
			РазделенныйПароль.Добавить(ЧастьПароляВИБ);
			РазделенныйПароль.Добавить(ТекстовыйДокумент.ПолучитьТекст());
			Пароль = ИнтеграцияС1СДокументооборотКлиентСервер.СобратьПароль(РазделенныйПароль);
			ПарольСохранен = (Пароль <> Неопределено);
		Исключение // файл удален или поврежден
			ПарольСохранен = Ложь;
			ИнтеграцияС1СДокументооборотВызовСервера.ЗаписатьПредупреждение(
				НСтр("ru = 'Не найдены сохраненные учетные данные пользователя 1С:Документооборота'"));
		КонецПопытки;
		Если ПарольСохранен
			И ИнтеграцияС1СДокументооборотВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
			ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
		КонецЕсли;

	Иначе // пароль не сохранен
		// Получим настройки из старого хранилища общих настроек, сохраним их в новом и удалим.
		ИнтеграцияС1СДокументооборотВызовСервера.ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(
			ИмяПользователя, Пароль, ПарольСохранен);
		Если ИмяПользователя <> "" и ПарольСохранен = Истина Тогда
			СохранитьНастройкиАвторизации(ИмяПользователя, Пароль);
			Если ИнтеграцияС1СДокументооборотВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
				ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
			КонецЕсли;
			#Если Не ВебКлиент Тогда // в веб-клиенте пароль не сохранился, и удаление преждевременно
			ИнтеграцияС1СДокументооборотВызовСервера.УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек();
			#КонецЕсли
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Проверяет подключение к 1С:Документообороту, при необходимости запрашивая имя пользователя и пароль.
//
// Параметры:
//
//   ОписаниеОповещения - описание оповещения, вызываемого после проверки подключения с параметром
//      типа Булево, Истина - в случае удачного подключения и Ложь в противном случае.
//   ФормаВладелец - УправляемаяФорма - форма, в которой следует вызвать повторную попытку подключения, или
//                 - Неопределено - если подключение следует выполнить синхронно без повторений.
//   ИмяОбработчика - Строка - имя процедуры модуля формы, содержащей обработчик повторной попытки, или
//                 - Неопределено - если подключение следует выполнить синхронно.
//   ПовторноПоказыватьОкноАвторизации - Булево - Истина, если при отсутствии подключения необходимо
//      повторно показать окно авторизации, даже если оно было показано ранее.
//
Процедура ПроверитьПодключение(ОписаниеОповещения, ФормаВладелец = Неопределено,
	ИмяОбработчика = Неопределено, ПовторноПоказыватьОкноАвторизации = Ложь) Экспорт

	// Если получение пароля не требуется, сразу инициируем подключение обращением к версии сервиса.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПарольИзвестен()
		Или ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользуетсяАутентификацияОС() Тогда

		Таймаут = Неопределено;
		ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса(Таймаут);
		
		Если ВерсияСервиса = "" Тогда // версия неизвестна, в процессе получения фоновым заданием
			
			Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
				ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина)
				
			Иначе // синхронная проверка, ждем завершения фонового задания
				
				ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
				Пока ВерсияСервиса = "" и ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
					ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
				КонецЦикла;
				
				Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			Возврат;
			
		КонецЕсли;

		Если Не ПовторноПоказыватьОкноАвторизации Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЕсли; // пароль известен
	
	ИмяПользователя = Неопределено;
	Пароль = Неопределено;
	ПарольСохранен = Неопределено;
	ИспользуетсяАутентификацияОС = Ложь;
	
	ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС);
	
	ТекстСообщенияОбОшибке = "";
	Если ИспользуетсяАутентификацияОС Тогда // проверим подключение с аутентификацией ОС
		
		Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
			, 
			"",
			"",
			ТекстСообщенияОбОшибке,
			Истина) Тогда
			ИспользуетсяАутентификацияОС = Ложь;
		КонецЕсли;
		
	ИначеЕсли ПовторноПоказыватьОкноАвторизации // проверим подключение с аутентификацией 1С:Предприятия
		И ИмяПользователя <> Неопределено
		И ПарольСохранен Тогда
		
		Если ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодключение(
			, 
			ИмяПользователя,
			Пароль,
			ТекстСообщенияОбОшибке) Тогда
			ПовторноПоказыватьОкноАвторизации = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяАутентификацияОС Тогда
		#Если ВебКлиент Тогда
		ИмяКомпьютера = Неопределено;
		#Иначе
		ИмяКомпьютера = ИмяКомпьютера();
		#КонецЕсли
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера,
			Истина);
		
	Иначе
		
		// Предлагаем окно авторизации, лишь если из контекста вызова известно, что пользователь явно
		// инициировал обращение к функционалу ДО.
		Если ПовторноПоказыватьОкноАвторизации
			Или ((ИмяПользователя = Неопределено Или Не ПарольСохранен)
				И НЕ ИнтеграцияС1СДокументооборотКлиентПереопределяемый.АвторизацияПредложена()) Тогда

			ИнтеграцияС1СДокументооборотКлиентПереопределяемый.СохранитьАвторизацияПредложена();
			
			ПараметрыФормыАвторизации = Новый Структура;
			ПараметрыФормыАвторизации.Вставить("ИмяПользователя", ИмяПользователя);
			ПараметрыФормыАвторизации.Вставить("ПарольСохранен", ПарольСохранен);
			ПараметрыФормыАвторизации.Вставить("Пароль", Пароль);
			ПараметрыФормыАвторизации.Вставить("АвтоматическийВызовПриПроверкеПодключения", Истина);
			
			ПараметрыПроверкиПодключения = Новый Структура;
			ПараметрыПроверкиПодключения.Вставить("ФормаВладелец", ФормаВладелец);
			ПараметрыПроверкиПодключения.Вставить("ИмяОбработчика", ИмяОбработчика);
			ПараметрыПроверкиПодключения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеПослеОкнаАвторизации", 
				ЭтотОбъект, ПараметрыПроверкиПодключения);
			
			ФормаАвторизации = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот", 
				ПараметрыФормыАвторизации,
				ФормаВладелец,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			// В случае успешной аутентификации ОС форма не откроется.
			Если ФормаАвторизации = Неопределено Тогда
				ИспользуетсяАутентификацияОС = Истина;
				#Если ВебКлиент Тогда
				ИмяКомпьютера = Неопределено;
				#Иначе
				ИмяКомпьютера = ИмяКомпьютера();
				#КонецЕсли
				ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера,
					Истина);
			Иначе // открылась форма авторизациии
				Возврат; // с асинхронным продолжением после нажатия ОК.
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
		
	// Случай, когда версия сервиса в параметрах сеанса установлена в 0.0.0.0 из-за недоступности
	// сервиса, а сейчас аутентификация ОС оказалась успешной. Получим версию заново.
	Если ИспользуетсяАутентификацияОС
		И ВерсияСервиса = "0.0.0.0" Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	КонецЕсли;

	Таймаут = Неопределено;
	ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса(Таймаут);
	
	Если ВерсияСервиса = "" Тогда // в процессе получения версии фоновым заданием

		Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
			ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина);
			Возврат;
			
		Иначе // синхронная проверка, ждем завершения фонового задания
			
			ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
			Пока ВерсияСервиса = "" и ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
				ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
			КонецЦикла;
			
			Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда  // версия получена
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда  // версия получена
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;

	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);

КонецПроцедуры

// Вызывается после закрытия окна авторизации. Вызывает обработчик, переданный вызвавшей формой.
//
// Параметры:
//   Результат - Булево - Истина, если в окне авторизации нажата ОК и подключение успешно.
//   Параметры - Структура:
//     ОписаниеОповещения - ОписаниеОповещения - обработчик вызвавшей формы.
//
Процедура ПроверитьПодключениеПослеОкнаАвторизации(Результат, Параметры) Экспорт

	Если Результат = Истина Тогда // успех, настройки авторизации сохранены в параметрах сеанса
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	Иначе // подключиться не удалось, или пользователь отказался от попытки авторизации
		ИнтеграцияС1СДокументооборотВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса("0.0.0.0");
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;

КонецПроцедуры

// Начинает асинхронное подключение к Документообороту, если известны настройки авторизации. Не
// запрашивает имя пользователя и пароль, если они неизвестны. Для вывода окна авторизации и для
// оповещения о результате следует использовать процедуру ПроверитьПодключение.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения[
		"СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	// Если получение пароля не требуется, сразу инициируем подключение обращением к версии сервиса.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПарольИзвестен()
		Или ИнтеграцияС1СДокументооборотКлиентПовтИсп.ИспользуетсяАутентификацияОС() Тогда
		
		ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
		
	Иначе // пароль пока не известен, получим его
		
		ИмяПользователя = Неопределено;
		Пароль = Неопределено;
		ПарольСохранен = Неопределено;
		ИспользуетсяАутентификацияОС = Ложь;
		ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС);
		
		Если (ИмяПользователя <> Неопределено И ПарольСохранен)
			Или ИспользуетсяАутентификацияОС Тогда
		
			ИнтеграцияС1СДокументооборотВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
				ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
		
			ВерсияСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсияСервиса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Следует использовать ПослеНачалаРаботыСистемы().
//
Процедура НачатьПодключение() Экспорт
	
	ПослеНачалаРаботыСистемы();
	
КонецПроцедуры

// Показывает вопрос "Да" / "Нет", принимая Esc и закрытие формы крестиком как ответ "Нет".
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия с
//     передачей параметра КодВозвратаДиалога.Да или КодВозвратаДиалога.Нет.
//   ТекстВопроса - Строка - текст задаваемого вопроса.
//   ТекстКнопкиДа - Строка - необязательный, текст кнопки "Да".
//   ТекстКнопкиНет - Строка - необязательный, текст кнопки "Нет".
//   КнопкаПоУмолчанию - РежимДиалогаВопрос - необязательный, кнопка по умолчанию.
//
Процедура ПоказатьВопросДаНет(ОписаниеОповещенияОЗавершении, ТекстВопроса,
	ТекстКнопкиДа = Неопределено, ТекстКнопкиНет = Неопределено, КнопкаПоУмолчанию = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьВопросДаНетЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		ОписаниеОповещенияОЗавершении);
		
	Кнопки = Новый СписокЗначений;
	Если ТекстКнопкиДа = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Да'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.ОК, ТекстКнопкиДа);
	КонецЕсли;
	Если ТекстКнопкиНет = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, ТекстКнопкиНет);
	КонецЕсли;
	
	Если КнопкаПоУмолчанию = Неопределено Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Да Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.ОК);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Нет Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение кнопки по умолчанию: %1'"),
			КнопкаПоУмолчанию);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после закрытия окна с вопросом "Да" / "Нет" и вызывает ранее переданный обработчик
// оповещения с передачей ответа пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя,
//     КодВозвратаДиалога.ОК или КодВозвратаДиалога.Отмена.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ПоказатьВопросДаНетЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при открытии форм связанных данных ДО и устанавливает заголовок согласно владельцу.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, заголовок которой следует уточнить заголовком владельца.
//
Процедура УстановитьЗаголовокПриОткрытии(Форма) Экспорт
	
	Если Форма.Окно = Неопределено
		И ТипЗнч(Форма.ВладелецФормы) = Тип("УправляемаяФорма")
		И ЗначениеЗаполнено(Форма.ВладелецФормы.Заголовок) Тогда
		
		Если ЗначениеЗаполнено(Форма.Заголовок) Тогда
			Форма.Заголовок = СтрШаблон("%1 (%2)", Форма.Заголовок, Форма.ВладелецФормы.Заголовок);
		Иначе
			Форма.Заголовок = Форма.ВладелецФормы.Заголовок;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

// Открывает окно состояний документа на редактирование или просмотр.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая документу.
//   ТолькоПросмотр - Булево - Истина, если форму следует открыть на просмотр.
//
Процедура ОткрытьСостоянияДокумента(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Представление);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	
	Состояния = Новый Структура("Исполнение, Рассмотрение, Регистрация, Согласование, Утверждение");
	Для каждого КлючЗначение Из Состояния Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		ПараметрыФормы.Вставить("Состояние" + ИмяРеквизита, Форма["Состояние" + ИмяРеквизита]);
		ПараметрыФормы.Вставить("Состояние" + ИмяРеквизита + "ID", Форма["Состояние" + ИмяРеквизита + "ID"]);
		ПараметрыФормы.Вставить("Состояние" + ИмяРеквизита + "Тип", Форма["Состояние" + ИмяРеквизита + "Тип"]);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьСостоянияДокументаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СостоянияДокумента", 
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна состояний документа переносит изменения в форму документа.
//
Процедура ОткрытьСостоянияДокументаЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура("Исполнение, Рассмотрение, Регистрация, Согласование, Утверждение");
	Форма.СостояниеСписок.Очистить();
	
	Для каждого Реквизит Из Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Ключ;
		Форма["Состояние" + ИмяРеквизита] = Результат["Состояние" + ИмяРеквизита];
		Форма["Состояние" + ИмяРеквизита + "ID"] = Результат["Состояние" + ИмяРеквизита + "ID"];
		Форма["Состояние" + ИмяРеквизита + "Тип"] = Результат["Состояние" + ИмяРеквизита + "Тип"];
		
		Если ЗначениеЗаполнено(Результат["Состояние" + ИмяРеквизита + "ID"]) Тогда
			Форма.СостояниеСписок.Добавить(
				Результат["Состояние" + ИмяРеквизита + "ID"], 
				Результат["Состояние" + ИмяРеквизита]);
		КонецЕсли; 
			
	КонецЦикла;
		
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОбзор();
	
КонецПроцедуры

// Открывает окно изменения срока действия документа на редактирование или просмотр.
//
// Параметры:
//   Форма - УправляемаяФорма - форма обработки, соответствующая документу.
//   ТолькоПросмотр - Булево - Истина, если форму следует открыть на просмотр.
//
Процедура ОткрытьСрокДействияДокумента(Форма, ТолькоПросмотр = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Наименование);
	ПараметрыФормы.Вставить("ДокументID", Форма.ID);
	ПараметрыФормы.Вставить("ДокументТип", Форма.Тип);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Форма.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ДатаОкончанияДействия", Форма.ДатаОкончанияДействия);
	ПараметрыФормы.Вставить("ПорядокПродления", Форма.ПорядокПродления);
	ПараметрыФормы.Вставить("ПорядокПродленияID", Форма.ПорядокПродленияID);
	ПараметрыФормы.Вставить("ПорядокПродленияТип", Форма.ПорядокПродленияТип);
	ПараметрыФормы.Вставить("Бессрочный", Форма.Бессрочный);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьСрокДействияДокументаЗавершение",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИзменениеСрокаДействия", 
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// После закрытия окна срока действия документа переносит изменения в форму документа.
//
Процедура ОткрытьСрокДействияДокументаЗавершение(Результат, Форма) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	Форма.СрокДействияПредставление = ИнтеграцияС1СДокументооборотКлиентСервер.
		ПредставлениеСрокаДействияДокумента(
			Результат.ДатаНачалаДействия, Результат.Бессрочный, Результат.ДатаОкончанияДействия,
			Результат.ПорядокПродленияID, Результат.ПорядокПродления);
			
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОбзор();
	
КонецПроцедуры

// Открывает визу согласования документа.
//
// Параметры:
//   Форма - УправляемаяФорма - форма документа-владельца.
//   ВизаСогласования - ДанныеФормыСтруктура - данные строки с визой согласования.
//
Процедура ОткрытьВизуСогласования(Форма, ВизаСогласования) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Наименование", ВизаСогласования.Наименование);
	ПараметрыФормы.Вставить("ID", ВизаСогласования.ID);
	ПараметрыФормы.Вставить("Тип", ВизаСогласования.Тип);
	
	ПараметрыФормы.Вставить("Внес", ВизаСогласования.Внес);
	ПараметрыФормы.Вставить("ВнесID", ВизаСогласования.ВнесID);
	ПараметрыФормы.Вставить("ВнесТип", ВизаСогласования.ВнесТип);
	
	ПараметрыФормы.Вставить("СогласующееЛицо", ВизаСогласования.СогласующееЛицо);
	ПараметрыФормы.Вставить("СогласующееЛицоID", ВизаСогласования.СогласующееЛицоID);
	ПараметрыФормы.Вставить("СогласующееЛицоТип", ВизаСогласования.СогласующееЛицоТип);
	
	ПараметрыФормы.Вставить("Результат", ВизаСогласования.Результат);
	ПараметрыФормы.Вставить("РезультатID", ВизаСогласования.РезультатID);
	ПараметрыФормы.Вставить("РезультатТип", ВизаСогласования.РезультатТип);
	
	ПараметрыФормы.Вставить("Дата", ВизаСогласования.Дата);
	ПараметрыФормы.Вставить("Комментарий", ВизаСогласования.Комментарий);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВизаСогласования",
		ПараметрыФормы, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область БизнесПроцессы

// Создает бизнес-процесс на основании документа ДО.
//
// Параметры:
//   Идентификатор - Строка - идентификатор документа-основания.
//   Тип - Строка - тип документа-основания.
//   Наименование - Строка - наименование документа-основания.
//
Процедура СоздатьБизнесПроцессПоОбъектуДО(Идентификатор, Тип, Наименование) Экспорт
	
	Предмет = Новый Структура;
	Предмет.Вставить("id", Идентификатор);
	Предмет.Вставить("type", Тип);
	Предмет.Вставить("name", Наименование);
	
	СоздатьБизнесПроцесс(Предмет);
	
КонецПроцедуры

// Создает бизнес-процесс. При передаче в качестве предмета ссылки на объект ИС создает связанный
// объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка - ссылка на объект интегрируемой системы, или
//           - Структура - описание объекта ДО, со свойствами:
//               id - Строка - идентификатор;
//               type - Строка - тип;
//               name - Строка - наименование предмета.
//   ГлавнаяЗадача - Ссылка - описание главной задачи бизнес-процесса:
//     id - Строка - идентификатор;
//     type - Строка - тип;
//     name - Строка - наименование главной задачи.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура СоздатьБизнесПроцесс(Предмет = Неопределено, ГлавнаяЗадача = Неопределено,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Отказ = Ложь;
	ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ПередСозданиемБизнесПроцесса(Предмет, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	Если Предмет = Неопределено
		Или ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		НачатьПоискСвязанногоОбъектаДО(Предмет, ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - описание предмета-объекта ДО (id, type, name), или 
//             - Неопределено, если предмет не выбран.
//   Параметры - Структура - см. СоздатьБизнесПроцесс.
//
Процедура СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры.Предмет = Результат;
	КонецЕсли;
	
	// получение дерева шаблонов процессов.
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		
		ОписаниеОповещения = Параметры.ОписаниеОповещения;
		Параметры.ОписаниеОповещения = Неопределено;
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",
			Параметры,,,,, ОписаниеОповещения);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение", 
			ЭтотОбъект, Параметры);
		 
		НачатьВыборТипаБизнесПроцесса(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в строку таблицы участников бизнес-процесса результат выбора участника бизнес-процесса.
//из списка, который формируется при автоподборе
//Параметры:
//	Элемент - таблица участников бизнес-процесса
//	ВыбранноеЗначение - структура выбранного значения 
//	СтандартнаяОбработка - признак выполнения процедуры
//	Форма - управляемая форма с таблицей участников бизнес-процесса
Процедура ПрименитьВыборУчастникаБизнесПроцессаВСписке(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Элемент.ТекущиеДанные.Исполнитель = ВыбранноеЗначение.Name;
			Элемент.ТекущиеДанные.ИсполнительID = ВыбранноеЗначение.id;
			Элемент.ТекущиеДанные.ИсполнительТип = ВыбранноеЗначение.type;
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("Элемент", Элемент);
			
			Оповещение = Новый ОписаниеОповещения("ПрименитьВыборУчастникаБизнесПроцессаВСпискеЗавершение", 
				ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
			 
			ПоказатьПолучениеОбъектовАдресацииРоли(
				Оповещение,
				ВыбранноеЗначение.Name,
				ВыбранноеЗначение.type,
				ВыбранноеЗначение.id,
				Форма);
				 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в поле на форме результат выбора участника бизнес-процесса из списка, который формируется при автоподборе.
//Параметры:
//	ИмяПоля - имя реквизита участника бизнес-процесса формы
//	ИмяПоляОбъектаАдресации - имя реквизита объекта адресации
//	ВыбранноеЗначение - структура выбранного значения участника бизнес-процесса
//	СтандартнаяОбработка - признак выполнения процедуры
//	Форма - управляемая форма с полем выбора участника бизнес-процесса
Процедура ПрименитьВыборУчастникаБизнесПроцессаВПоле(ИмяПоля, ИмяПоляОбъектаАдресации, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Форма[ИмяПоля] = ВыбранноеЗначение.Name;
			Форма[ИмяПоля + "id"] = ВыбранноеЗначение.id;
			Форма[ИмяПоля + "Тип"] = ВыбранноеЗначение.type;
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			ПараметрыОповещения.Вставить("ИмяПоля", ИмяПоля);
			ПараметрыОповещения.Вставить("ИмяПоляОбъектаАдресации", ИмяПоляОбъектаАдресации);
			
			Оповещение = Новый ОписаниеОповещения("ПрименитьВыборУчастникаБизнесПроцессаВПолеЗавершение", 
				ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
				 
			ПоказатьПолучениеОбъектовАдресацииРоли(
				Оповещение,
				ВыбранноеЗначение.Name,
				ВыбранноеЗначение.type,
				ВыбранноеЗначение.id, 
				Форма);
				 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Выбрать тип бизнес-процесса.
//Возвращает:
//	Диалог выбора типа бизнес-процесса для старта.
Процедура НачатьВыборТипаБизнесПроцесса(ОписаниеОповещенияОЗакрытии) Экспорт
	
	СписокДоступныхТиповБизнесПроцессов = Новый СписокЗначений;
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessPerformance", 	НСтр("ru = 'Исполнение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessAcquaintance", 	НСтр("ru = 'Ознакомление'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOrder", 			НСтр("ru = 'Поручение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConsideration", 	НСтр("ru = 'Рассмотрение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessRegistration", 	НСтр("ru = 'Регистрация'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessApproval", 		НСтр("ru = 'Согласование'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConfirmation", 	НСтр("ru = 'Утверждение'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessInternalDocumentProcessing", 	НСтр("ru = 'Обработка внутреннего документа'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessIncomingDocumentProcessing", 	НСтр("ru = 'Обработка входящего документа'")));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOutgoingDocumentProcessing", 	НСтр("ru = 'Обработка исходящего документа'")));
	
	ЗаголовокФормы = НСтр("ru = 'Тип бизнес-процесса'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповБизнесПроцессов, ЗаголовокФормы);
	ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа";
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

//Открывает форму выбора шаблона бизнес-процесса из списка.
//Параметры:
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии
//	Форма - УправляемаяФорма - форма бизнес-процесса Документооборота
Процедура НачатьВыборШаблонаБизнесПроцесса(ОписаниеОповещенияОЗакрытии, Форма) Экспорт
	
	ДанныеОПредмете = Неопределено;
	
	Если ЗначениеЗаполнено(Форма.Предмет) Тогда
		ДанныеОПредмете = Новый Структура;
		ДанныеОПредмете.Вставить("id", Форма.ПредметID);
		ДанныеОПредмете.Вставить("type", Форма.ПредметТип);
	КонецЕсли;
	
	СписокШаблонов = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(Форма.Тип, ДанныеОПредмете);
	
	Если СписокШаблонов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("СписокЗначенийДляВыбора", СписокШаблонов);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка",
			ПараметрыФормы, Форма,,,, ОписаниеОповещенияОЗакрытии);
		
	ИначеЕсли СписокШаблонов.Количество() = 1 Тогда
		РезультатВыбораШаблона = Новый Структура("РеквизитID, РеквизитТип, РеквизитПредставление");
		РезультатВыбораШаблона.РеквизитID = СписокШаблонов[0].Значение.id;
		РезультатВыбораШаблона.РеквизитТип = СписокШаблонов[0].Значение.type;
		РезультатВыбораШаблона.РеквизитПредставление = СписокШаблонов[0].Значение.Name;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатВыбораШаблона); 
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не найдено ни одного подходящего шаблона бизнес-процесса.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//Открывает формы получения объектов адресации роли.
// Параметры
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии
//	ИмяРоли - Строка - имя роли для получения объектов адресации
//	ТипРоли - Строка - тип роли для получения объектов адресации
//	IDРоли - Строка - идентификатор роли в Документообороте
//	ФормаВладелец - УправляемаяФорма - управляемая форма, на которой выбирается роль
//
Процедура ПоказатьПолучениеОбъектовАдресацииРоли(ОписаниеОповещенияОЗакрытии, ИмяРоли, ТипРоли, IDРоли, ФормаВладелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Роль", ИмяРоли);
	ПараметрыФормы.Вставить("РольID", IDРоли);
	ПараметрыФормы.Вставить("РольТип", ТипРоли);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	ПараметрыОповещения.Вставить("ИмяРоли", ИмяРоли);
	ПараметрыОповещения.Вставить("ТипРоли", ТипРоли);
	ПараметрыОповещения.Вставить("IDРоли", IDРоли);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПолучениеОбъектовАдресацииРолиЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
	
	ФормаВыбора = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектовАдресацииРоли", 
		ПараметрыФормы, ФормаВладелец,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Если ФормаВыбора = Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Результат", "БезОбъектовАдресации");
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Запускает процесс согласования в ДО по указанному объекту.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Источник - УправляемаяФорма - необязательный, источник команды.
//     ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успешного запуска.
//
Процедура НачатьСогласование(Параметры) Экспорт
	
	Отказ = Ложь;
	ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ПередСозданиемБизнесПроцесса(Параметры.ПредметСогласования, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
		
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);
		
	// Проверим возможность запуска согласования.
	ТекстПредупреждения = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешенЗапускСогласования(
			Параметры.ПредметСогласования, ТекстПредупреждения) Тогда
		Если ТекстПредупреждения = "" Тогда // текст по умолчанию
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для запуска согласования в 1С:Документообороте.'");
		КонецЕсли;
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПослеПоискаСвязанногоОбъекта = Новый ОписаниеОповещения(
		"НачатьСогласованиеПослеПоискаСвязанногоОбъекта",
		ЭтотОбъект,
		Параметры);
		
	НачатьПоискСвязанногоОбъектаДО(
		Параметры.ПредметСогласования,
		ОписаниеОповещенияПослеПоискаСвязанногоОбъекта);
		
КонецПроцедуры

// Продолжает процесс согласования после нахождения или создания связанного объекта.
//
Процедура НачатьСогласованиеПослеПоискаСвязанногоОбъекта(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Предмет", Результат);
	
	ПараметрыФормыПрерывания = Новый Структура;
	ПараметрыФормыПрерывания.Вставить("Предмет", Параметры.Предмет);
	ПараметрыФормыПрерывания.Вставить("ПовторныйЗапуск", Истина);
	ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
		"НачатьСогласованиеПослеВопроса",
		ЭтотОбъект,
		Параметры);
	ОткрытаяФорма = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеСогласования", 
		ПараметрыФормыПрерывания,,,,, ОписаниеОповещенияПослеВопроса, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ОткрытаяФорма = Неопределено Тогда // нет виз согласования, показывать лист нет нужды
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВопроса, КодВозвратаДиалога.ОК);
	КонецЕсли;
		
КонецПроцедуры

// Продолжает запуск согласования в ДО после показа вопроса о перезапуске ранее запущенных процессов.
//
Процедура НачатьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);

	// Получим подходящие шаблоны.
	ПодходящиеШаблоны = ИнтеграцияС1СДокументооборотВызовСервера.ШаблоныБизнесПроцесса(
		"DMBusinessProcessApproval",
		Параметры.Предмет);

	// Запустим единственный шаблон или предложим выбор из нескольких.
	Если ПодходящиеШаблоны.Количество() = 0 Тогда
		// Откроем общую форму запуск произвольного процесса.
		ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
		ОписаниеОповещенияПослеИнтерактивногоЗапуска = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеИнтерактивногоЗапуска",
			ЭтотОбъект,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Предмет", Параметры.Предмет);
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMBusinessProcessApproval", Неопределено, , 
			ПараметрыФормы, ОписаниеОповещенияПослеИнтерактивногоЗапуска);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Подходящих шаблонов не найдено.'"));
		
	Иначе // есть шаблон(ы)
		ОписаниеОповещенияПослеВыбораШаблона = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеВыбораШаблона", 
			ЭтотОбъект,
			Параметры);
		Если ПодходящиеШаблоны.Количество() = 1 Тогда
			РезультатВыбора = Новый Структура;
			РезультатВыбора.Вставить("РеквизитПредставление", ПодходящиеШаблоны[0].Значение.name);
			РезультатВыбора.Вставить("РеквизитID", ПодходящиеШаблоны[0].Значение.id);
			РезультатВыбора.Вставить("РеквизитТип", ПодходящиеШаблоны[0].Значение.type);
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыбораШаблона, РезультатВыбора);
		Иначе // предложим выбор
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор шаблона согласования'"));
			ПараметрыФормы.Вставить("ВыборГрупп", Ложь);
			ПараметрыФормы.Вставить("СписокЗначенийДляВыбора", ПодходящиеШаблоны);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы,,,,,
				ОписаниеОповещенияПослеВыбораШаблона, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Продолжает запуск согласования в ДО после выбора шаблона согласования.
//
Процедура НачатьСогласованиеПослеВыбораШаблона(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда // шаблон не выбран
		Возврат;
	КонецЕсли;
	
	Шаблон = Новый Структура;
	Шаблон.Вставить("name", Результат.РеквизитПредставление);
	Шаблон.Вставить("id",   Результат.РеквизитID);
	Шаблон.Вставить("type", Результат.РеквизитТип);
	
	// Прервем другие процессы согласования, о которых мы предупредили инициатора, или которые
	// были запущены другими пользователями за время раздумий при выборе шаблона.
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
	
	// Запустим процесс по шаблону.
	Если ИнтеграцияС1СДокументооборотВызовСервера.ЗапуститьСогласованиеПоШаблону(Шаблон, Параметры.Предмет) Тогда
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.НаСогласовании"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
		КонецЕсли;
		Оповестить("Документооборот_ЗапущеноСогласование", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласование запущено.'"));
		
	Иначе
		// Возможно, нужно заполнить обязательные реквизиты. Откроем форму нового процесса.
		ОписаниеОповещенияПослеИнтерактивногоЗапуска = Новый ОписаниеОповещения(
			"НачатьСогласованиеПослеИнтерактивногоЗапуска",
			ЭтотОбъект,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Шаблон", Шаблон);
		ПараметрыФормы.Вставить("Предмет", Параметры.Предмет);
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMBusinessProcessApproval", Неопределено, , 
			ПараметрыФормы, ОписаниеОповещенияПослеИнтерактивногоЗапуска);
			
	КонецЕсли;

КонецПроцедуры

// Завершает запуск согласования в ДО после открытия формы бизнес-процесса.
//
Процедура НачатьСогласованиеПослеИнтерактивногоЗапуска(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Состояние", ПредопределенноеЗначение(
		"Перечисление.СостоянияСогласованияВДокументообороте.НаСогласовании"));
	ПриИзмененииСостоянияСогласования(Параметры);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	Оповестить("Документооборот_ЗапущеноСогласование", Параметры.ПредметСогласования);
	
КонецПроцедуры

// Прерывает процессы согласования в ДО по указанному объекту.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Источник - УправляемаяФорма - необязательный, источник команды.
//     ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успеха.
//
Процедура ПрерватьСогласование(Параметры) Экспорт
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
		
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);
		
	// Проверим существование связаного объекта.
	Результат = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если Результат = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Параметры.Вставить("Предмет", Результат);
	
	// Проверим возможность прерывания согласования.
	ТекстПредупреждения = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ПользователюРазрешеноПрерываниеСогласования(
			Параметры.ПредметСогласования, Параметры.Предмет, ТекстПредупреждения) Тогда
		Если ТекстПредупреждения = "" Тогда // предупреждение по умолчанию
			ТекстПредупреждения = НСтр("ru = 'Недостаточно прав для прерывания согласования в 1С:Документообороте.'");
		КонецЕсли;
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыПрерывания = Новый Структура;
	ПараметрыФормыПрерывания.Вставить("Предмет", Параметры.Предмет);
	ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
		"ПрерватьСогласованиеПослеВопроса",
		ЭтотОбъект,
		Параметры);
	ОткрытаяФорма = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеСогласования", 
		ПараметрыФормыПрерывания,,,,, ОписаниеОповещенияПослеВопроса, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Если ОткрытаяФорма = Неопределено Тогда // нет виз согласования, показывать лист нет нужды
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВопроса, КодВозвратаДиалога.ОК);
	КонецЕсли;
		
КонецПроцедуры

// Продолжает процесс прерывания согласования после показа вопроса.
//
Процедура ПрерватьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьСогласование(Параметры.Предмет);
	
	// Оповестим открытые формы, источник вызова и пользователя.
	Параметры.Вставить("Состояние", Неопределено);
	ПриИзмененииСостоянияСогласования(Параметры);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	Оповестить("Документооборот_ПрерваноСогласование", Параметры.ПредметСогласования);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Согласование прервано.'"));

КонецПроцедуры

// Выполняет согласование по указанному объекту с указанным результатом.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Источник - УправляемаяФорма - необязательный, источник команды.
//     Результат - Строка, "Согласовано", "СогласованоСЗамечаниями", "НеСогласовано".
//     ОписаниеОповещения - ОписаниеОповещения - необязательный, вызывается в случае успеха.
//
Процедура ВыполнитьСогласование(Параметры) Экспорт
	
	// Унифицируем состав параметров.
	Если Не Параметры.Свойство("ОписаниеОповещения") Тогда
		Параметры.Вставить("ОписаниеОповещения", Неопределено);
	КонецЕсли;
	Если Не Параметры.Свойство("Источник") Тогда
		Параметры.Вставить("Источник", Неопределено);
	КонецЕсли;
		
	ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
		"КомандыСогласованияПослеПредупреждения",
		ЭтотОбъект,
		Параметры);

	// Проверим существование связаного объекта.
	Результат = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(Параметры.ПредметСогласования);
	Если Результат = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Параметры.Вставить("Предмет", Результат);
	
	// Проверим, запущен ли вообще процесс согласования.
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ЗапущеноСогласованиеПоПредметуДО(Параметры.Предмет) Тогда
		ТекстПредупреждения = НСтр("ru = 'В 1С:Документообороте не запущено согласование.'");
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	// Проверим, адресованы ли пользователю задачи согласования.
	ЗадачиСогласования = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЗадачиСогласования(Параметры.Предмет);
	Если ЗадачиСогласования.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'В 1С:Документообороте нет адресованных вам задач согласования.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОК", НСтр("ru = 'ОК'"));
		Кнопки.Добавить("ЛистСогласования", НСтр("ru = 'Лист согласования'"));
		ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения(
			"ВыполнитьСогласованиеПослеВопроса",
			ЭтотОбъект,
			Параметры);
		ПоказатьВопрос(ОписаниеОповещенияПослеВопроса, ТекстВопроса, Кнопки);
		Возврат;
	Иначе // есть адресованные пользователю задачи
		Параметры.Вставить("ЗадачиСогласования", ЗадачиСогласования);
		ОписаниеОповещенияПослеВводаКомментария = Новый ОписаниеОповещения(
			"ВыполнитьСогласованиеПослеВводаКомментария",
			ЭтотОбъект,
			Параметры);
		Если Параметры.Результат = "Согласовано" Тогда // комментарий не нужен
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВводаКомментария, "");
		Иначе
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВводРезультатаВыполненияЗадачи",,,,,,
				ОписаниеОповещенияПослеВводаКомментария, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершает работу команд согласования после вывода вопроса.
//
Процедура ВыполнитьСогласованиеПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат = "ЛистСогласования" Тогда
		ИнтеграцияС1СДокументооборотКлиентПереопределяемый.
			ВыполнитьКомандуПечатиЛистаСогласования(Параметры.ПредметСогласования);
	КонецЕсли;
	
КонецПроцедуры

// Завершает работу команд согласования после ввода комментария.
//
Процедура ВыполнитьСогласованиеПослеВводаКомментария(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда // отказ от ввода комментария
		Возврат;
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	Если Не ИнтеграцияС1СДокументооборотВызовСервера.ВыполнитьСогласование(
		Параметры.ЗадачиСогласования, Параметры.Результат, Результат, ТекстСообщенияОбОшибке) Тогда
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ВыполнитьСогласованиеПослеПредупреждения",
			ЭтотОбъект,
			Параметры);
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
		
	// Оповестим открытые формы, источник вызова и пользователя.
	
	Если Параметры.Результат = "Согласовано" Тогда
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.Согласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_Согласовано", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласовано.'"));

	ИначеЕсли Параметры.Результат = "СогласованоСЗамечаниями" Тогда
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.Согласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_СогласованоСЗамечаниями", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Согласовано с замечаниями.'"));

	ИначеЕсли Параметры.Результат = "НеСогласовано" Тогда
		Параметры.Вставить("Состояние", ПредопределенноеЗначение(
			"Перечисление.СостоянияСогласованияВДокументообороте.НеСогласован"));
		ПриИзмененииСостоянияСогласования(Параметры);
		Оповестить("Документооборот_НеСогласовано", Параметры.ПредметСогласования);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не согласовано.'"));

	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;

КонецПроцедуры

// Завершает работу команд согласования после вывода предупреждения о проблеме.
//
Процедура КомандыСогласованияПослеПредупреждения(Параметры) Экспорт
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при изменении состояния согласования в ДО. Меняет состояние на стороне ИС.
//
// Параметры:
//   Параметры - Структура:
//     ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//     Предмет - Структура - описание связанного объекта ДО.
//     Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте - новое состояние.
//               - Неопределено - в случае прерывания согласования.
//     Источник - УправляемаяФорма - необязательный, источник команды.
//
Процедура ПриИзмененииСостоянияСогласования(Параметры) Экспорт
	
	// Определим источник вызова. Если это форма согласуемого объекта, то не следует
	// изменять состояние объекта в БД во избежание эффекта оптимистичной блокировки.
	Если Параметры.Источник = Неопределено Тогда
		ВызовИзФормыОбъекта = Ложь;
	Иначе
		Попытка
			Объект = Параметры.Источник.Объект;
			ВызовИзФормыОбъекта = Истина;
		Исключение
			ВызовИзФормыОбъекта = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПриИзмененииСостоянияСогласования(
		Параметры.Предмет.id,
		Параметры.Предмет.type,
		Параметры.Состояние,
		ВызовИзФормыОбъекта,
		Параметры.ПредметСогласования);
	
	ИнтеграцияС1СДокументооборотКлиентПереопределяемый.ПриИзмененииСостоянияСогласования(
		Параметры.ПредметСогласования,
		Параметры.Источник,
		Параметры.Состояние,
		ВызовИзФормыОбъекта);
		
КонецПроцедуры

// Начинает процесс добавления предмета к процессу или задаче.
//
// Параметры:
//   ФормаВладельца - УправляемаяФорма - форма обработки, соответствующая процессу или задаче.
//   РольПредмета - Строка - роль добавляемого предмета, соответствует перечислению РолиПредметов.
//   ОписаниеОповещения - необязательный, оповещение, вызываемое после успешного добавления предмета
//     с передачей структуры, содержащей его описание.
//
Функция ДобавитьПредмет(ФормаВладельца, РольПредмета, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ФормаВладельца", ФормаВладельца);
	Параметры.Вставить("ИдентификаторВладельца", ФормаВладельца.ID);
	Параметры.Вставить("ТипВладельца", ФормаВладельца.Тип);
	Параметры.Вставить("РольПредмета", РольПредмета);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОВыбореТипа = Новый ОписаниеОповещения(
		"ДобавитьПредметПослеВыбораТипа",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаПредмета",, ЭтотОбъект,,,,
		ОписаниеОповещенияОВыбореТипа, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецФункции

// Продолжает процесс добавления предмета после выбора его типа.
//
// Параметры:
//   Результат - Строка - имя типа предмета.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораТипа(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Вариант = "ФайлСДиска" Тогда
		
		ФормаВладельца = Параметры.ФормаВладельца;
		// Владельцем файла будет процесс, даже если добавлен он из формы задачи.
		Если Найти(Параметры.ТипВладельца, "Task") <> 0 Тогда
			Параметры.ТипВладельца = ФормаВладельца.ПроцессТип;
			Параметры.ИдентификаторВладельца = ФормаВладельца.ПроцессID;
		Иначе
			// Для прикрепления файла процесс должен быть записан.
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторВладельца) Тогда
				РезультатЗаписи = ФормаВладельца.ЗаписатьОбъект();
				Если РезультатЗаписи Тогда
					Параметры.ИдентификаторВладельца = ФормаВладельца.ID;
					Параметры.ТипВладельца = ФормаВладельца.Тип;
				Иначе // запись не удалась, форма сообщила пользователю об источнике проблемы
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеДобавленияФайла",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		СоздатьФайлСДиска(
			ФормаВладельца.УникальныйИдентификатор, 
			Параметры.ИдентификаторВладельца,
			Параметры.ТипВладельца,
			ФормаВладельца.Представление,
			ОписаниеОповещения);
		
	ИначеЕсли Лев(Результат.Вариант, 2) = "DM" Тогда // выбор объекта в ДО
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеВыбораОбъектаДО",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		Отбор = Новый Структура; // без отбора
		ВыбратьЗначениеПоТипуОбъекта(Результат.Вариант,,,, ОписаниеОповещения);
		
	Иначе // выбор объекта ИС
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПослеВыбораОбъектаИС",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		Для Каждого ЭлементСписка Из Результат.Отбор Цикл
			ПараметрыФормы.Отбор.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЦикла;
		ОткрытьФорму(Результат.Вариант + ".ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает процесс добавления предмета после выбора объекта 1С:Документооборота.
//
// Параметры:
//   ОбъектДО - Структура - РеквизитID, РеквизитТип, РеквизитПредставление.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораОбъектаДО(ОбъектДО, Параметры) Экспорт
	
	Если ОбъектДО = Неопределено
		Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПредмета = Новый Структура;
	ОписаниеПредмета.Вставить("Предмет", ОбъектДО.РеквизитПредставление);
	ОписаниеПредмета.Вставить("ПредметID", ОбъектДО.РеквизитID);
	ОписаниеПредмета.Вставить("ПредметТип", ОбъектДО.РеквизитТип);
	ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
	ОписаниеПредмета.Вставить("Представление", ОбъектДО.РеквизитПредставление);
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОписаниеПредмета);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после выбора объекта интегрированной системы.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - выбранный объект ИС.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеВыбораОбъектаИС(ОбъектИС, Параметры) Экспорт
	
	Если ОбъектИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьПредметПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
	
КонецПроцедуры
	
// Продолжает процесс добавления предмета после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - найденный или созданный объект ДО (name, id, type).
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПредмета = Новый Структура;
	ОписаниеПредмета.Вставить("Предмет", Результат.name);
	ОписаниеПредмета.Вставить("ПредметID", Результат.id);
	ОписаниеПредмета.Вставить("ПредметТип", Результат.type);
	ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
	ОписаниеПредмета.Вставить("Ссылка", Параметры.ОбъектИС);
	ОписаниеПредмета.Вставить("Представление", Строка(Параметры.ОбъектИС));
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОписаниеПредмета);
	
КонецПроцедуры

// Продолжает процесс добавления предмета после добавления файла с диска.
//
// Параметры:
//   ОписаниеФайла - Структура - описание файла со свойствами:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Имя - Строка - имя без расширения.
//     Расширение - Строка - расширение.
//   Параметры - Структура - см. ДобавитьПредмет.
//
Процедура ДобавитьПредметПослеДобавленияФайла(ОписаниеФайла, Параметры) Экспорт
	
	Если ОписаниеФайла = Неопределено 
		Или Параметры.ОписаниеОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПомещенныйФайл Из ОписаниеФайла Цикл
		
		ОписаниеПредмета = Новый Структура;
		ОписаниеПредмета.Вставить("Предмет", ПомещенныйФайл.Имя);
		ОписаниеПредмета.Вставить("ПредметID", ПомещенныйФайл.Идентификатор);
		ОписаниеПредмета.Вставить("ПредметТип", "DMFile");
		ОписаниеПредмета.Вставить("РольПредмета", Параметры.РольПредмета);
		ОписаниеПредмета.Вставить("Представление", ПомещенныйФайл.Имя);
		ОписаниеПредмета.Вставить("Расширение", ПомещенныйФайл.Расширение);
	
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОписаниеПредмета);
		
	КонецЦикла;
	
КонецПроцедуры

// Останавливает процесс ДО.
//
// Параметры:
//   Форма - УправляемаяФорма - форма бизнес-процесса.
//
Процедура ОстановитьПроцесс(Форма) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОстановитьПроцесс(Форма.ID, Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс остановлен'"),,
		Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Прерывает активный или остановленный процесс ДО.
//
// Параметры:
//   Форма - УправляемаяФорма - форма бизнес-процесса.
//
Процедура ПрерватьПроцесс(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрерватьПроцессПослеВопроса",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрерываниеПроцесса",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Продолжает остановленный процесс ДО.
//
// Параметры:
//   Форма - УправляемаяФорма - форма бизнес-процесса.
//
Процедура ПродолжитьПроцесс(Форма) Экспорт
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПродолжитьПроцесс(Форма.ID, Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс продолжен'"),,
		Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Возвращает результат подключения расширения работы с файлами.
//
// Возвращаемое значение:
//   Булево - в тонком клиенте всегда Истина, в браузере Google Chrome – всегда Ложь.
//
Функция РасширениеРаботыСФайламиПодключено() Экспорт
	
	Если КлиентПоддерживаетСинхронныеВызовы() Тогда
		Возврат ПодключитьРасширениеРаботыСФайлами();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Отправляет файлы на печать.
//
// Параметры:
//   Файлы - Массив - массив структур со свойствами:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура НапечататьФайлы(Файлы, УникальныйИдентификаторФормы) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НапечататьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотКлиент);
		
	ПолучитьФайлыИПродолжить(Файлы,
		УникальныйИдентификаторФормы,
		ОписаниеОповещения);
	
КонецПроцедуры
	
// Вызвается после получения файлов и отправляет их на печать.
// 
// Параметры:
//   ПолныеИменаФайлов - Массив - массив строк, содержащий полные имена полученных файлов.
//   Параметры - не используется.
//
Процедура НапечататьФайлыПослеПолучения(ПолныеИменаФайлов, Параметры) Экспорт
	
	Для Каждого ПолноеИмяФайла Из ПолныеИменаФайлов Цикл
		НапечататьФайлПриложением(ПолноеИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

// Открывает файл для просмотра или редактирования.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла в ДО.
//   Имя - Строка - имя файла.
//   Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//   НаЧтение - Булево - Истина, если файл открывается для чтения, и Ложь, если для редактирования.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается при успешном открытии файла.
//
Процедура ОткрытьФайл(Идентификатор, Имя, Расширение, УникальныйИдентификаторФормы, 
	НаЧтение = Истина, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт

	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Идентификатор", Идентификатор);
	ОписаниеФайла.Вставить("Имя", Имя);
	ОписаниеФайла.Вставить("Расширение", Расширение);
	
	Файлы = Новый Массив;
	Файлы.Добавить(ОписаниеФайла);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
		
	ПолучитьФайлыИПродолжить(Файлы, УникальныйИдентификаторФормы, ОписаниеОповещения,
		НаЧтение, "DMFile")
	
КонецПроцедуры

// Открывает версию файла для просмотра.
//
// Параметры:
//   Идентификатор - Строка - идентификатор версии в ДО.
//   Имя - Строка - имя версии.
//   Расширение - Строка - расширение версии.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//
Процедура ОткрытьВерсиюФайла(Идентификатор, Имя, Расширение, УникальныйИдентификаторФормы) Экспорт
	
	ОписаниеВерсии = Новый Структура;
	ОписаниеВерсии.Вставить("Идентификатор", Идентификатор);
	ОписаниеВерсии.Вставить("Имя", Имя);
	ОписаниеВерсии.Вставить("Расширение", Расширение);
	
	Версии = Новый Массив;
	Версии.Добавить(ОписаниеВерсии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыПослеПолучения",
		ИнтеграцияС1СДокументооборотКлиент);
		
	ПолучитьФайлыИПродолжить(Версии, УникальныйИдентификаторФормы, ОписаниеОповещения,
		Истина, "DMFileVersion")
	
КонецПроцедуры

// Открывает файлы приложением после их получения.
//
// Параметры:
//   ПолныеИменаФайлов - Массив - массив полных имен полученных из ДО файлов.
//   Параметры - Структура - может содержать ОписаниеОповещения, вызываемое после завершения.
//
Процедура ОткрытьФайлыПослеПолучения(ПолныеИменаФайлов, Параметры) Экспорт
	
	Для Каждого ПолноеИмяФайла Из ПолныеИменаФайлов Цикл
		ОткрытьФайлПриложением(ПолноеИмяФайла);
	КонецЦикла;
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("ОписаниеОповещенияОЗавершении")
		И Параметры.ОписаниеОповещенияОЗавершении <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияОЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл соответствующим ему приложением.
//
// Параметры:
//   ПолныйПуть - Строка - полный путь к открываемому файлу.
//
Функция ОткрытьФайлПриложением(ПолноеИмяФайла) Экспорт
	
	Попытка
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
			Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
		КонецЕсли;
		ЗапуститьПриложение(ПолноеИмяФайла);
		Возврат Истина;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Описание=""%1""'"),
			КраткоеПредставлениеОшибки(Инфо));
		ПоказатьПредупреждение(, ТекстПредупреждения); 
		Возврат Ложь;
		
	КонецПопытки;
		
КонецФункции

// Получает файлы из ДО в каталог временных файлов и передает их на дальнейшую обработку.
//
// Параметры:
//   Файлы - Массив - массив структур со свойствами:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//   НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//   Тип - Строка - тип получаемого объекта, DMFile для файла и DMFileVersion для версии.
//
Процедура ПолучитьФайлыИПродолжить(Файлы, УникальныйИдентификаторФормы, ОписаниеОповещенияОЗавершении,
	НаЧтение = Истина, Тип = "DMFile") Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Файлы", Файлы);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("НаЧтение", НаЧтение);
	Параметры.Вставить("Тип", Тип);
	
	ПолучитьФайлыНачало(Параметры);
	
КонецПроцедуры

// Начинает получение файлов, вызывая оповещение после получения всех файлов.
//
// Параметры:
//   Файлы - Массив - описание еще не полученных файлов, массив структур со свойствами:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//   ПолныеИменаФайлов - Массив - полные имена уже полученных файлов.
//   Тип - Строка - тип получаемого файла, DMFile или DMFileVersion.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//
Процедура ПолучитьФайлыНачало(Параметры) Экспорт
	
	// Получены ли все файлы?
	Если Параметры.Файлы.Количество() = 0  Тогда
		Если Параметры.ПолныеИменаФайлов.Количество() <> 0 Тогда
			ВыполнитьОбработкуОповещения(
				Параметры.ОписаниеОповещения,
				Параметры.ПолныеИменаФайлов);
		КонецЕсли;
			
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Идентификатор", Параметры.Файлы[0].Идентификатор);
	Параметры.Вставить("Имя", Параметры.Файлы[0].Имя);
	Параметры.Вставить("Расширение", Параметры.Файлы[0].Расширение);
	
	Параметры.Файлы.Удалить(0);
	
	ПолучениеФайлаНачало(Параметры);
	
КонецПроцедуры

// Начинает получение одного файла из Документооборота.
//
// Параметры:
//   Файлы - Массив - описание еще не полученных файлов, массив структур со свойствами:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//   ПолныеИменаФайлов - Массив - полные имена уже полученных файлов.
//   Идентификатор - Строка - идентификатор получаемого файла в ДО.
//   Тип - Строка - тип получаемого файла, DMFile или DMFileVersion.
//   Имя - Строка - имя получаемого файла.
//   Расширение - Строка - расширение получаемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   НаЧтение - Булево - Истина, если файлы сохраняются на чтение, и Ложь, если на редактирование.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - вызывается с передачей массива полных имен файлов.
//
Процедура ПолучениеФайлаНачало(Параметры) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		
		ИмяФайла = ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(
			Параметры.Имя, Параметры.Расширение);
		Если Параметры.Тип = "DMFile" Тогда
			АдресВременногоХранилища = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьФайлИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы);
		Иначе // DMFileVersion
			АдресВременногоХранилища = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьВерсиюФайлаИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы);
		КонецЕсли;
				
		ПолучитьФайл(АдресВременногоХранилища, ИмяФайла, Истина);
		
		Параметры.ПолныеИменаФайлов.Добавить(ИмяФайла);
		ПолучитьФайлыНачало(Параметры);
		
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Размер", 0);
	Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено);
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		
		СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, Параметры.Тип);
		Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
		
		Если СведенияОРедактировании.Сохранен 
			и Параметры.Тип <> "DMFileVersion" Тогда // конкретная версия? проверка не нужна.
			
			Параметры.Вставить("ИмяВременногоФайла", СведенияОРедактировании.ПолныйПуть);
			Параметры.Вставить("КаталогВременныхФайлов", СведенияОРедактировании.РекомендуемаяПапка);
			
			Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
			Если Файл.Существует() Тогда
				
				// Проверим дату-время существующего файла.
				ДатаВремяНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
				ДатаВремяВДокументообороте = СведенияОРедактировании.ДатаМодификацииУниверсальная;
				РазмерНаДиске = Файл.Размер();
				РазмерВДокументообороте = СведенияОРедактировании.Размер;
				РазницаДат = ДатаВремяНаДиске - ДатаВремяВДокументообороте;
				
				// Определим необходимость обновления сведений о редактировании.
				Если РазницаДат <> 0 Или (СведенияОРедактировании.НаЧтение И Не Параметры.НаЧтение) Тогда
					Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
					Параметры.СведенияОРедактировании.ДатаМодификацииУниверсальная = ДатаВремяНаДиске;
					Параметры.СведенияОРедактировании.Размер = РазмерНаДиске;
				Иначе
					Параметры.Вставить("ОбновитьСведенияОРедактировании", Ложь);
				КонецЕсли;
				
				// Определим, следует ли задавать вопрос пользователю, или же решение очевидно.
				Если (РазницаДат <= 1 И РазницаДат >= -1 И РазмерВДокументообороте = РазмерНаДиске)
					Или (РазницаДат > 0 И НЕ СведенияОРедактировании.НаЧтение) Тогда
					ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайлаПослеВыбораИсточника",
						ИнтеграцияС1СДокументооборотКлиент,
						Параметры);
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, "ИспользоватьСуществующий");
					Возврат;
					
				Иначе // уверенности нет, требуется вмешательство пользователя
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("ПолныйПуть", СведенияОРедактировании.ПолныйПуть);
					ПараметрыФормы.Вставить("ДатаВремяНаДиске", ДатаВремяНаДиске);
					ПараметрыФормы.Вставить("ДатаВремяВДокументообороте", ДатаВремяВДокументообороте);
					ПараметрыФормы.Вставить("РазмерНаДиске", РазмерНаДиске);
					ПараметрыФормы.Вставить("РазмерВДокументообороте", РазмерВДокументообороте);
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайлаПослеВыбораИсточника",
						ИнтеграцияС1СДокументооборотКлиент,
						Параметры);
					
					// Сформулируем вопрос в зависимости от того, какой из файлов свежее.
					Если РазницаДат > 0 Тогда // файл на диске свежее
						ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'На диске новый файл'"));
						ПараметрыФормы.Вставить("Сообщение",
							НСтр("ru = 'Файл на диске новее, чем файл в 1С:Документообороте.
								|Возможно, он был изменен.
								|
								|Использовать существующий файл или заменить его на файл из 1С:Документооборота,
								|возможно, с потерей изменений?'"));
					
					Иначе // файл на диске старше
						ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'В 1С:Документообороте новый файл'"));
						ПараметрыФормы.Вставить("Сообщение",
							НСтр("ru = 'Файл в 1С:Документообороте новее, чем файл на диске.
								|Возможно, он был изменен.
								|
								|Взять файл из 1С:Документооборота, заменив файл на диске с потерей
								|изменений, или использовать существующий файл?'"));
					
					КонецЕсли;
					ОткрытьФорму(
						"Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборДействийПриОбнаруженииОтличийФайла",
						ПараметрыФормы,,,,,
						ОписаниеОповещения,
						РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					Возврат;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		// Если в ДО указана рабочая папка, попытаемся ее использовать.
		Если ЗначениеЗаполнено(СведенияОРедактировании.РекомендуемаяПапка) Тогда
			Файл = Новый Файл(СведенияОРедактировании.РекомендуемаяПапка);
			Если Файл.Существует() И Файл.ЭтоКаталог() Тогда // используем указанную папку.
				КаталогВременныхФайлов = СведенияОРедактировании.РекомендуемаяПапка;
			ИначеЕсли Файл.Существует() И Файл.ЭтоФайл() Тогда // использовать ее невозможно.
				КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
			Иначе // попытаемся создать эту папку
				Попытка
					СоздатьКаталог(СведенияОРедактировании.РекомендуемаяПапка);
					КаталогВременныхФайлов = СведенияОРедактировании.РекомендуемаяПапка;
				Исключение // нет доступа или иные проблемы.
					КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
					ИнтеграцияС1СДокументооборотВызовСервера.ЗаписатьПредупреждение(
						СтрШаблон(
							НСтр("ru = 'Нет доступа к рабочей папке: %1'"),
							СведенияОРедактировании.РекомендуемаяПапка
					));
				КонецПопытки;
			КонецЕсли;
		Иначе // рекомендуемый каталог не указан
			КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
		КонецЕсли;
		
	Иначе // веб-сервис этой версии не поддерживает расширенную работу с файлами.
		КаталогВременныхФайлов = РабочийКаталогДанныхПользователя();
	КонецЕсли;
	
	РазделительПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазделительПути(
		ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
	Если Прав(КаталогВременныхФайлов, 1) = РазделительПути Тогда
		КаталогВременныхФайлов = Лев(КаталогВременныхФайлов, СтрДлина(КаталогВременныхФайлов) - 1);
	КонецЕсли;
	
	// Получим имя временного файла, не совпадающее с именем файла, существующего во временном каталоге,
	// создав, если нужно, подкаталог вида A...Z, A0...Z9.
	СчетчикПопыток = 0;
	Успех = Ложь;
	#Если Не ВебКлиент Тогда
	Генератор = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДата())); // Использование оправдано: ГСЧ.
	#КонецЕсли
	Пока СчетчикПопыток < 100 Цикл
		СчетчикПопыток = СчетчикПопыток + 1;
		Если СчетчикПопыток = 1 Тогда
			Суффикс = "";
		Иначе
			#Если Не ВебКлиент Тогда
			Суффикс = Символ(КодСимвола("A") + Генератор.СлучайноеЧисло(0, 25));
			Если СчетчикПопыток > 13 Тогда // пора усложнить суффикс
				Суффикс = Суффикс + Строка(Генератор.СлучайноеЧисло(0, 9));
			КонецЕсли;
			#Иначе
			Суффикс = Символ(КодСимвола("A") + (Секунда(ТекущаяДата()) + СчетчикПопыток)) % 26; // Использование оправдано: ГСЧ.
			Если СчетчикПопыток > 13 Тогда // пора усложнить суффикс
				Суффикс = Суффикс + Строка((Секунда(ТекущаяДата()) + СчетчикПопыток) % 10);// Использование оправдано: ГСЧ
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		КаталогССуффиксом = КаталогВременныхФайлов + ?(Суффикс = "", "", РазделительПути + Суффикс);
		Файл = Новый Файл(КаталогССуффиксом);
		Если Файл.Существует() Тогда
			Если Файл.ЭтоФайл() Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Попытка
				СоздатьКаталог(КаталогССуффиксом);
			Исключение
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при создании каталога ""%1"":
						|""%2"".'"),
					КаталогССуффиксом,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
			КонецПопытки;
		КонецЕсли;
		ИмяФайлаССуффиксом = КаталогССуффиксом + РазделительПути + 
			ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(Параметры.Имя, Параметры.Расширение);
		Файл = Новый Файл(ИмяФайлаССуффиксом);
		Если Не Файл.Существует() Тогда
			Успех = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не Успех Тогда
		ВызватьИсключение НСтр("ru = 'Не удается создать файл в каталоге временных файлов.'");
	КонецЕсли;
	Параметры.Вставить("КаталогВременныхФайлов", КаталогССуффиксом);
	Параметры.Вставить("ИмяВременногоФайла", ИмяФайлаССуффиксом);
	
	// Получим файл из ДО на сервере.
	Если Параметры.Тип = "DMFile" Тогда
		Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьФайлИПоместитьВХранилище(
				Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
				?(Параметры.НаЧтение, Неопределено, ТекущаяДата()), // Использование оправдано: фиксируется дата-время на клиенте.
				Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
	Иначе
		Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьВерсиюФайлаИПоместитьВХранилище(
				Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
				Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
	КонецЕсли;
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	
	ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры);
	
КонецПроцедуры

// Вызывается в ходе получения файла после выбора источника: взять из ДО или использовать существующий.
//
// Параметры:
//   Результат - Строка - "ВзятьИзДокументооборота" или "ИспользоватьСуществующий"
//             - Неопределено - пользователь отказался от выбора.
//   Параметры - Структура:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Тип - Строка - DMFile или DMFileVersion.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//     НаЧтение - Булево - Истина, если файл открывается для чтения, и Ложь, если для редактирования.
//                         для версий - только Ложь.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном открытии файла.
//                        - Неопределено - вызов не требуется.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//     КаталогВременныхФайлов - Строка - каталог для сохранения временного файла.
//     ИмяВременногоФайла - Строка - имя, под которым будет сохранен файл.
//     Размер - Число - размер файла.
//     ДатаМодификацииУниверсальная - Дата - универсальные дата и время изменения файла.
//
Процедура ПолучениеФайлаПослеВыбораИсточника(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда // отмена
		Возврат;
	КонецЕсли;
	
	Если Результат = "ВзятьИзДокументооборота" Тогда
		
		// Получим файл из ДО на сервере.
		Если Параметры.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьФайлИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
					?(Параметры.НаЧтение, Неопределено, ТекущаяДата()), // Использование оправдано: фиксируется дата-время на клиенте. 
					Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьВерсиюФайлаИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
					Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		Файл = Новый Файл(Параметры.ИмяВременногоФайла);
		Попытка
			Файл.УстановитьТолькоЧтение(Ложь);
		Исключение
			ПоказатьПредупреждение(, 
				НСтр("ru = 'Не удалось заменить файл на диске файлом из 1С:Документооборота.
				|Возможно, он заблокирован другим приложением.'"));
			Возврат;
		КонецПопытки;
			
		ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры);
		
	ИначеЕсли Результат = "ИспользоватьСуществующий" Тогда
		
		Если Параметры.СведенияОРедактировании.НаЧтение И Не Параметры.НаЧтение Тогда
			Параметры.СведенияОРедактировании.НаЧтение = Ложь;
			Параметры.ОбновитьСведенияОРедактировании = Истина;
			Файл = Новый Файл(Параметры.ИмяВременногоФайла);
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
			Исключение
				ПоказатьПредупреждение(, 
					НСтр("ru = 'Не удалось открыть файл для редактирования. Возможно, 
					|он заблокирован другим приложением.'"));
				ПолучитьФайлыНачало(Параметры);
			КонецПопытки;
			ИнтеграцияС1СДокументооборотВызовСервера.ЗахватитьФайл(
				Параметры.Идентификатор, ТекущаяДата()); // Использование оправдано: фиксируется дата-время на клиенте.
		КонецЕсли;
		Если Параметры.ОбновитьСведенияОРедактировании Тогда
			ИнтеграцияС1СДокументооборотВызовСервера.СохранитьСведенияОРедактированииФайла(
				Параметры.СведенияОРедактировании);
		КонецЕсли;
			
		Параметры.ПолныеИменаФайлов.Добавить(Параметры.ИмяВременногоФайла);
		ПолучитьФайлыНачало(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе получения файла после получения файла из ДО.
//
// Параметры:
//   Параметры - Структура:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Тип - Строка - DMFile или DMFileVersion.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//     НаЧтение - Булево - Истина, если файл открывается для чтения, и Ложь, если для редактирования.
//                         для версий - только Ложь.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном открытии файла.
//                        - Неопределено - вызов не требуется.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//     КаталогВременныхФайлов - Строка - каталог для сохранения временного файла.
//     ИмяВременногоФайла - Строка - имя, под которым будет сохранен файл.
//     Размер - Число - размер файла.
//     ДатаМодификацииУниверсальная - Дата - универсальные дата и время изменения файла.
//     АдресВременногоХранилищаФайла - Строка - адрес, где хранится полученный из ДО файл.
//
Процедура ПолучениеФайлаПослеПолученияИзДокументооборота(Параметры) Экспорт
	
	// Соберем описание получаемого файла и получим его.
	ПолучаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(
		Параметры.ИмяВременногоФайла, Параметры.АдресВременногоХранилищаФайла);
	ПолучаемыеФайлы.Добавить(Описание);
	Если Не ПолучитьФайлы(ПолучаемыеФайлы,,, Ложь) Тогда // необрабатываемая ошибка получения
		ПолучитьФайлыНачало(Параметры);
	КонецЕсли;
	
	// Удаляем файл из временного хранилища после записи на диск.
	Если ЭтоАдресВременногоХранилища(Параметры.АдресВременногоХранилищаФайла) Тогда
		УдалитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	СведенияОРедактировании = Неопределено;
	Если Параметры.Свойство("СведенияОРедактировании", СведенияОРедактировании) Тогда // обновим их
		
		СведенияОРедактировании.Вставить("Сохранен", Истина);
		СведенияОРедактировании.Вставить("ПолныйПуть", Параметры.ИмяВременногоФайла);
		СведенияОРедактировании.Вставить("ДатаСохранения", ТекущаяДата());  // Использование оправдано: фиксируется дата-время на клиенте.
		Если Не СведенияОРедактировании.Свойство("НаЧтение") Тогда
			СведенияОРедактировании.Вставить("НаЧтение", Параметры.НаЧтение);
		Иначе
			СведенияОРедактировании.НаЧтение = СведенияОРедактировании.НаЧтение И Параметры.НаЧтение;
		КонецЕсли;
		СведенияОРедактировании.Вставить("ДатаМодификацииУниверсальная", 
			Параметры.ДатаМодификацииУниверсальная);
		СведенияОРедактировании.Вставить("Размер", Параметры.Размер);
		
		// При сохранении передаем полученный ранее идентификатор текущей версии, а не файла.
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьСведенияОРедактированииФайла(
			СведенияОРедактировании);
		
	КонецЕсли;
	
	Файл = Новый Файл(Параметры.ИмяВременногоФайла);
	Файл.УстановитьУниверсальноеВремяИзменения(Параметры.ДатаМодификацииУниверсальная);
	Если Параметры.НаЧтение Тогда
		Файл.УстановитьТолькоЧтение(Истина);
	КонецЕсли;
	
	Параметры.ПолныеИменаФайлов.Добавить(Параметры.ИмяВременногоФайла);
	ПолучитьФайлыНачало(Параметры);
	
КонецПроцедуры

// Открывает каталог файла, в котором он сохранен на просмотр или редактирование.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла в ДО.
//
Процедура ОткрытьКаталогФайла(Идентификатор) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Открывать каталог файла можно только после подключения
			|расширения для работы с файлами.'"));
		Возврат;
	КонецЕсли;
		
	СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
		ПолучитьСведенияОРедактированииФайла(Идентификатор, "DMFile");
	Если СведенияОРедактировании.Сохранен Тогда
		Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
		Если Файл.Существует() Тогда
			Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
				ЗапуститьПриложение(СведенияОРедактировании.ПолныйПуть);
			Иначе
				ЗапуститьПриложение("explorer.exe /select, """ + СведенияОРедактировании.ПолныйПуть + """");
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Делает активной указанную версию файла.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла-владельца.
//   ИдентификаторВерсии - Строка - идентификатор версии, которую следует сделать активной.
//   ОписаниеОповещения - описание оповещения, вызываемого при успешном изменении.
//
Процедура СделатьВерсиюАктивной(ИдентификаторФайла, ИдентификаторВерсии, 
		ОписаниеОповещения = Неопределено) Экспорт
	
	ТекстСообщения = "";
	Если ИнтеграцияС1СДокументооборотВызовСервера.СделатьВерсиюАктивной(ИдентификаторФайла,
			ИдентификаторВерсии, ТекстСообщения) Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru = 'Активная версия изменена.'");
		КонецЕсли;
		Состояние(ТекстСообщения);
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИдентификаторВерсии);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Заканчивает редактирование файла, помещая его в ДО и снимая захват, если необходимо.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор файла ДО.
//   Имя - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//
Процедура ЗакончитьРедактированиеФайла(Идентификатор, Имя, Расширение,
		УникальныйИдентификаторФормы, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ИмяФайла = ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(Имя, Расширение);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗакончитьРедактированиеБезРасширенияПослеПомещения",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения, , ИмяФайла, Истина, УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сохранить изменения по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеCРасширениемПослеВопросаОбОсвобождении",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	// Проверим, можно ли вообще выполнить операцию (на стороне ДО ситуация могла измениться).
	СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
		ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, "DMFile");
	Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
	Если Не СведенияОРедактировании.Сохранен 
		Или СведенияОРедактировании.НаЧтение Тогда
		
		ПоказатьВопросДаНет(ОписаниеОповещения, 
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
		
	КонецЕсли;
	// Проверим, существует ли файл в указанном месте.
	Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
	Параметры.Вставить("Файл", Файл);
	Если Не Файл.Существует() Тогда
		
		ПоказатьВопросДаНет(ОписаниеОповещения, 
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Размер", Файл.Размер());
	Параметры.Вставить("ДатаМодификации", Файл.ПолучитьВремяИзменения());
	Параметры.Вставить("ДатаМодификацииУниверсальная", Файл.ПолучитьУниверсальноеВремяИзменения());
	
	// Все нормально, поместим файл в ДО и освободим его.
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		СведенияОРедактировании.ПолныйПуть,
		ИнтеграцияС1СДокументооборотКлиентСервер.КраткоеПредставлениеРазмера(Параметры.Размер));
	Состояние(ТекстПояснения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗакончитьРедактированиеСРасширениемПослеПомещения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	Попытка
		НачатьПомещениеФайла(ОписаниеОповещения, , СведенияОРедактировании.ПолныйПуть, Ложь, 
			УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить изменения по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Завершает помещение файла в ДО с использованием расширения для работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     Расширение - Строка - расширение редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//     Файл - Файл - помещаемый файл в рабочем каталоге.
//     Размер - Число - размер помещаемого файла.
//     ДатаМодификации - Дата - дата и время модификации помещаемого файла.
//     ДатаМодификацииУниверсальная - Дата - универсальные дата и время модификации помещаемого файла.
//
Процедура ЗакончитьРедактированиеСРасширениемПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Истина);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.Вставить("Текст", РаботаСФайламиСлужебныйКлиентСервер.ИзвлечьТекст(
			Параметры.СведенияОРедактировании.ПолныйПуть));
	Иначе
		Параметры.Вставить("Текст", "");
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	Файл = Параметры.Файл;
	Параметры.Удалить("Файл");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Если Не Файл.ПолучитьТолькоЧтение() Тогда
			Файл.УстановитьТолькоЧтение(Истина);
		КонецЕсли;
		Состояние(НСтр("ru = 'Файл обновлен и освобожден.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет освобождение файла в ДО после разрешения пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура ЗакончитьРедактированиеCРасширениемПослеВопросаОбОсвобождении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОсвободитьФайл(Параметры.Идентификатор);
	
	// Удалим сведения о редактировании файла.
	СведенияОРедактировании = Параметры.СведенияОРедактировании;
	СведенияОРедактировании.Сохранен = Ложь;
	ИнтеграцияС1СДокументооборотВызовСервера.СохранитьСведенияОРедактированииФайла(
		СведенияОРедактировании);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершает помещение файла в ДО без использования расширения работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     Расширение - Строка - расширение редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура ЗакончитьРедактированиеБезРасширенияПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Истина);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Получим расширение: оно могло измениться.
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.
		РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.Вставить("Расширение", СтруктураИмени.Расширение);
	Параметры.Вставить("Размер", 0); // на сервере буедт определен по двоичным данным
	Параметры.Вставить("ДатаМодификации", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("Текст", "");
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Состояние(НСтр("ru = 'Файл обновлен и освобожден.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет изменения файла в ДО, не снимая захвата.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор файла ДО.
//   Имя - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//
Процедура СохранитьИзмененияРедактируемогоФайла(Идентификатор, Имя, Расширение,
		УникальныйИдентификаторФормы, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ИмяФайла = ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(Имя, Расширение);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьИзмененияБезРасширенияПослеПомещения",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения, , ИмяФайла, Истина, УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сохранить изменения по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	// Проверим, можно ли вообще выполнить операцию (на стороне ДО ситуация могла измениться).
	СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
		ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, "DMFile");
	Если Не СведенияОРедактировании.Сохранен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось сохранить изменения файла,
			|так как он сейчас не захвачен на редактирование.'"));
		Возврат;
	КонецЕсли;
	Если СведенияОРедактировании.НаЧтение Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось сохранить изменения файла,
			|так как он сейчас сохранен только для просмотра.'"));
		Возврат;
	КонецЕсли;
	Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
	
	// Проверим, существует ли файл в указанном месте.
	Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
	Параметры.Вставить("Файл", Файл);
	Если Не Файл.Существует() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьИзмененияCРасширениемПослеВопросаОбОсвобождении",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ПоказатьВопросДаНет(ОписаниеОповещения, 
			НСтр("ru = 'Файл не найден в рабочем каталоге. Освободить его?'"));
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Размер", Файл.Размер());
	Параметры.Вставить("ДатаМодификации", Файл.ПолучитьВремяИзменения());
	Параметры.Вставить("ДатаМодификацииУниверсальная", Файл.ПолучитьУниверсальноеВремяИзменения());
	
	// Все нормально, поместим файл в ДО и освободим его.
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		СведенияОРедактировании.ПолныйПуть,
		ИнтеграцияС1СДокументооборотКлиентСервер.КраткоеПредставлениеРазмера(Параметры.Размер));
	Состояние(ТекстПояснения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьИзмененияСРасширениемПослеПомещения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	Попытка
		НачатьПомещениеФайла(ОписаниеОповещения, , СведенияОРедактировании.ПолныйПуть, Ложь, 
			УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить изменения по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Завершает сохранение изменений в ДО с использованием расширения для работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     Расширение - Строка - расширение редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//     Файл - Файл - помещаемый файл в рабочем каталоге.
//     Размер - Число - размер помещаемого файла.
//     ДатаМодификации - Дата - дата и время модификации помещаемого файла.
//     ДатаМодификацииУниверсальная - Дата - универсальные дата и время модификации помещаемого файла.
//
Процедура СохранитьИзмененияСРасширениемПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		ИзвлеченныйТекст = РаботаСФайламиСлужебныйКлиентСервер.ИзвлечьТекст(
			Параметры.СведенияОРедактировании.ПолныйПуть);
		Параметры.Вставить("Текст", ИзвлеченныйТекст);
	Иначе
		Параметры.Вставить("Текст", "");
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	Параметры.Удалить("Файл");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Состояние(НСтр("ru = 'Изменения сохранены.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет освобождение файла в ДО после разрешения пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора пользователя.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     СведенияОРедактировании - Структура - см. ИС1СДОВызовСервера.ПолучитьСведенияОРедактировании.
//
Процедура СохранитьИзмененияCРасширениемПослеВопросаОбОсвобождении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОсвободитьФайл(Параметры.Идентификатор);
	
	// Удалим сведения о редактировании файла.
	СведенияОРедактировании = Параметры.СведенияОРедактировании;
	СведенияОРедактировании.Сохранен = Ложь;
	ИнтеграцияС1СДокументооборотВызовСервера.
		СохранитьСведенияОРедактированииФайла(СведенияОРедактировании);
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершает сохранение изменений в ДО без использования расширения работы с файлами.
//
// Параметры:
//   Результат - Булево - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла во временном хранилище.
//   ПолныйПуть - Строка - полный путь к помещенному файлу.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура СохранитьИзмененияБезРасширенияПослеПомещения(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Истина);
	
	// Получим расширение: оно могло измениться.
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.
		РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.Вставить("Расширение", СтруктураИмени.Расширение);
	Параметры.Вставить("Размер", 0); // на сервере буедт определен по двоичным данным
	Параметры.Вставить("ДатаМодификации", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("Текст", "");
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Состояние(НСтр("ru = 'Изменения сохранены.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отменяет редактирование ранее захваченного файла.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла в ДО.
//   ОписаниеОповещенияОЗавершении - необязательный параметр, описание оповещения, вызываемого после отмены.
//
Процедура ОтменитьРедактированиеФайла(Идентификатор, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтменитьРедактированиеФайлаПослеВопроса",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ПоказатьВопросДаНет(ОписаниеОповещения,
		НСтр("ru = 'Отмена редактирования файла может привести к потере изменений. Продолжить?'"));
		
КонецПроцедуры

// Завершает процесс отмены редактирования после ответа пользователя на вопрос.
//
//   Результат - КодВозвратаДиалога - результат выбора пользователя.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызывать ничего не нужно.
//
Процедура ОтменитьРедактированиеФайлаПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОсвободитьФайл(Параметры.Идентификатор);
	Если РасширениеРаботыСФайламиПодключено() Тогда
		СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, "DMFile");
		Если СведенияОРедактировании.Сохранен 
			И НЕ СведенияОРедактировании.НаЧтение Тогда
			Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
			Если Файл.Существует() Тогда
				Если НЕ Файл.ПолучитьТолькоЧтение() Тогда
					Файл.УстановитьТолькоЧтение(Истина);
				КонецЕсли;
				СведенияОРедактировании.НаЧтение = Истина;
				СведенияОРедактировании.Размер = Файл.Размер();
				СведенияОРедактировании.ДатаМодификацииУниверсальная = 
					Файл.ПолучитьУниверсальноеВремяИзменения();
			Иначе
				СведенияОРедактировании.Сохранен = Ложь;
			КонецЕсли;
			ИнтеграцияС1СДокументооборотВызовСервера.СохранитьСведенияОРедактированииФайла(
				СведенияОРедактировании);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Начинает сохранение выделенных файлов.
//
// Параметры:
//   Коллекция - ДанныеФормыКоллекция - таблица файлов с колонками ID, Наименование, Расширение.
//   Идентификаторы - Массив - идентификаторы выделенных строк коллекции.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//   ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла после его сохранения.
//
Процедура НачатьСохранениеВыделенныхФайлов(Коллекция, Идентификаторы, УникальныйИдентификаторФормы,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ВыделеннаяСтрока = Коллекция.НайтиПоИдентификатору(Идентификатор);
		Если Параметры.Свойство("Идентификатор") Тогда
			ОставшийсяФайл = Новый Структура;
			ОставшийсяФайл.Вставить("Идентификатор", ВыделеннаяСтрока.ID);
			ОставшийсяФайл.Вставить("Тип", "DMFile");
			ОставшийсяФайл.Вставить("Имя", ВыделеннаяСтрока.Наименование);
			ОставшийсяФайл.Вставить("Расширение", ВыделеннаяСтрока.Расширение);
			Параметры.ОставшиесяФайлы.Добавить(ОставшийсяФайл);
		Иначе
			Параметры.Вставить("Идентификатор", ВыделеннаяСтрока.ID);
			Параметры.Вставить("Тип", "DMFile");
			Параметры.Вставить("Имя", ВыделеннаяСтрока.Наименование);
			Параметры.Вставить("Расширение", ВыделеннаяСтрока.Расширение);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	СохранитьКакНачало(Параметры);
	
КонецПроцедуры

// Сохраняет файл на диск в указанный пользователем каталог.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла Документооборота.
//   Имя - Строка - имя файла.
//   Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//   ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла после его сохранения.
//
Процедура СохранитьФайлКак(Идентификатор, Имя, Расширение, УникальныйИдентификаторФормы,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("Тип", "DMFile");
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	
	СохранитьКакНачало(Параметры);
	
КонецПроцедуры

// Сохраняет версию файла на диск в указанный пользователем каталог.
//
// Параметры:
//   Идентификатор - Строка - идентификатор версии Документооборота.
//   Имя - Строка - имя версии файла.
//   Расширение - Строка - расширение версии файла.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//   ОписаниеОповещения - необязательный, обработчик, вызываемый с передачей имени файла после его сохранения.
//
Процедура СохранитьВерсиюКак(Идентификатор, Имя, Расширение, УникальныйИдентификаторФормы,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("Тип", "DMFileVersion");
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ОставшиесяФайлы", Новый Массив);
	
	СохранитьКакНачало(Параметры);
	
КонецПроцедуры

// Сохраняет файл или версию на диск в указанный пользователем каталог. Общая точка входа для файла и версии.
//
// Параметры - Структура:
//   Идентификатор - Строка - идентификатор файла в ДО.
//   Тип - Строка - DMFile или DMFileVersion.
//   Имя - Строка - имя файла.
//   Расширение - Строка - расширение файла.
//   УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//   ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                      - Неопределено - вызов не требуется.
//
Процедура СохранитьКакНачало(Параметры)
	
	Параметры.Вставить("Размер", 0);
	Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено);
	Параметры.Вставить("ИмяФайла", 
		ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(Параметры.Имя, Параметры.Расширение));
		
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
			
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"". Пожалуйста, подождите...'"),
			Параметры.ИмяФайла);
		Состояние(ТекстПояснения);
		
		Если Параметры.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьФайлИПоместитьВХранилище(
				Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,,
				Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьВерсиюФайлаИПоместитьВХранилище(
				Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
				Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		ПолучитьФайл(Параметры.АдресВременногоХранилища, Параметры.ИмяФайла, Истина);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьКакПослеДиалогаВыбораФайла",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	Если Параметры.ОставшиесяФайлы.Количество() = 0 Тогда
		Параметры.Вставить("РежимДиалогаВыбораФайла", РежимДиалогаВыбораФайла.Сохранение);
		Диалог = Новый ДиалогВыбораФайла(Параметры.РежимДиалогаВыбораФайла);
		Диалог.ПолноеИмяФайла = Параметры.ИмяФайла;
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Параметры.Расширение, Параметры.Расширение);
	Иначе
		Параметры.Вставить("РежимДиалогаВыбораФайла", РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог = Новый ДиалогВыбораФайла(Параметры.РежимДиалогаВыбораФайла);
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Параметры.Расширение, Параметры.Расширение);
	КонецЕсли;
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// Вызывается в ходе сохранения файла после выбора каталога и имени пользователем.
//
// Параметры:
//   Результат - Массив - массив с именем файла, если файл выбран, или
//             - Неопределено - если пользователь отказался от выбора.
//   Параметры - Структура:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Тип - Строка - DMFile или DMFileVersion.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызов не требуется.
//
Процедура СохранитьКакПослеДиалогаВыбораФайла(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Параметры.РежимДиалогаВыбораФайла = РежимДиалогаВыбораФайла.Сохранение Тогда
		Параметры.Вставить("ПолныйПуть", Результат[0]);
	Иначе
		РазделительПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазделительПути(
			ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		Параметры.Вставить("Каталог", Результат[0]);
		Параметры.Вставить("ПолныйПуть", Параметры.Каталог + РазделительПути + Параметры.ИмяФайла);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКакПослеВыбораИсточника", 
		ЭтотОбъект, Параметры);
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1")
		И Параметры.Тип <> "DMFileVersion" Тогда
		СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, Параметры.Тип);
		Если СведенияОРедактировании.Сохранен Тогда
			Файл = Новый Файл(СведенияОРедактировании.ПолныйПуть);
			Если Файл.Существует() Тогда
				// Проверим дату-время существующего файла.
				ДатаВремяНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
				ДатаВремяВДокументообороте = СведенияОРедактировании.ДатаМодификацииУниверсальная;
				РазмерНаДиске = Файл.Размер();
				РазмерВДокументообороте = СведенияОРедактировании.Размер;
				РазницаДат = ДатаВремяНаДиске - ДатаВремяВДокументообороте;
				Если РазницаДат > 0 Тогда // спросим пользователя
					Параметры.Вставить("ИмяВременногоФайла", СведенияОРедактировании.ПолныйПуть);
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'На диске новый файл'"));
					ПараметрыФормы.Вставить("Сообщение",
						НСтр("ru = 'Файл на диске новее, чем файл в 1С:Документообороте.
							|Возможно, он был изменен.
							|
							|Использовать существующий файл или взять файл из 1С:Документооборота?'"));
					ПараметрыФормы.Вставить("ПолныйПуть", СведенияОРедактировании.ПолныйПуть);
					ПараметрыФормы.Вставить("ДатаВремяНаДиске", ДатаВремяНаДиске);
					ПараметрыФормы.Вставить("ДатаВремяВДокументообороте", ДатаВремяВДокументообороте);
					ПараметрыФормы.Вставить("РазмерНаДиске", РазмерНаДиске);
					ПараметрыФормы.Вставить("РазмерВДокументообороте", РазмерВДокументообороте);
					ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборДействийПриОбнаруженииОтличийФайла",
						ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выбора нет: файл должен быть получен из ДО.
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, "ВзятьИзДокументооборота");

КонецПроцедуры

// Вызвыается в ходе сохранения файла на диск после выбора источника (или в отсутствие файла на диске).
//
// Параметры:
//   Результат - Строка - "ВзятьИзДокументооборота" - взять файл из ДО, или
//                      - "ИспользоватьСуществующий" - взять файл из каталога временных, или
//             - Неопределено - ничего не делать.
//   Параметры - Структура:
//     Идентификатор - Строка - идентификатор файла в ДО.
//     Тип - Строка - DMFile или DMFileVersion.
//     Имя - Строка - имя файла.
//     Расширение - Строка - расширение файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор вызвавшей формы.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - вызов не требуется.
//     ИмяВременногоФайла - Строка - полный путь к файлу в каталоге временных файлов.
//     ПолныйПуть - Строка - полный путь к выбранному пользователем каталогу.
//     Размер - Число - размер файла.
//     ДатаМодификацииУниверсальная - Дата - универсальные дата и время изменения файла.
//
Процедура СохранитьКакПослеВыбораИсточника(Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда // отмена
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Параметры.ПолныйПуть);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(Параметры.ПолныйПуть);
	КонецЕсли;
	
	Если Результат = "ВзятьИзДокументооборота" Тогда
		
		// Получим файл из ДО на сервере.
		Если Параметры.Тип = "DMFile" Тогда
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьФайлИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,, 
					Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		Иначе // версия
			Адрес = ИнтеграцияС1СДокументооборотВызовСервера.
				ПолучитьВерсиюФайлаИПоместитьВХранилище(
					Параметры.Идентификатор, Параметры.УникальныйИдентификаторФормы,
					Параметры.Размер, Параметры.ДатаМодификацииУниверсальная);
		КонецЕсли;
		Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
		
		// Соберем описание получаемого файла и получим его.
		ПолучаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(
			Параметры.ПолныйПуть, Параметры.АдресВременногоХранилищаФайла);
		ПолучаемыеФайлы.Добавить(Описание);
		Если Не ПолучитьФайлы(ПолучаемыеФайлы,,, Ложь) Тогда
			Возврат;
		КонецЕсли;
	
		УдалитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаФайла);
	
		Файл = Новый Файл(Параметры.ПолныйПуть);
		Файл.УстановитьУниверсальноеВремяИзменения(Параметры.ДатаМодификацииУниверсальная);
	
	ИначеЕсли Результат = "ИспользоватьСуществующий" Тогда
		
		Попытка
			КопироватьФайл(Параметры.ИмяВременногоФайла, Параметры.ПолныйПуть);
			Файл = Новый Файл(Параметры.ПолныйПуть);
			Файл.УстановитьТолькоЧтение(Ложь);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось скопировать файл (""%1"").'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения); 
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Файл сохранен.'"), , Параметры.ПолныйПуть);
	
	Если Параметры.ОставшиесяФайлы.Количество() <> 0 Тогда
		Параметры.Идентификатор = Параметры.ОставшиесяФайлы[0].Идентификатор;
		Параметры.Имя = Параметры.ОставшиесяФайлы[0].Имя;
		Параметры.Расширение = Параметры.ОставшиесяФайлы[0].Расширение;
		Параметры.Вставить("Размер", 0);
		Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено);
		Параметры.Вставить("ИмяФайла", 
			ИнтеграцияС1СДокументооборотКлиентСервер.ИмяСРасширением(Параметры.Имя, Параметры.Расширение));
		ВыбранныеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Каталог);
		Параметры.ОставшиесяФайлы.Удалить(0);
		СохранитьКакПослеДиалогаВыбораФайла(ВыбранныеФайлы, Параметры);
	ИначеЕсли Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файл ДО из файла на диске.
//
// Параметры:
//   Идентификатор - Строка - Идентификатор файла ДО.
//   Имя - Строка - имя редактируемого файла.
//   Расширение - Строка - расширение редактируемого файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - необязательный, вызывается при успешном завершении.
//
Процедура ОбновитьИзФайлаНаДиске(Идентификатор, Имя, Расширение, УникальныйИдентификаторФормы,
	ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещенияОЗавершении);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	Параметры.Вставить("ОбновитьСведенияОРедактировании", Ложь);
	
	ИмяФайла = ИнтеграцияС1СДокументооборотКлиентСервер.
		ИмяСРасширением(Параметры.Имя, Параметры.Расширение);
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбновитьИзФайлаНаДискеПослеПомещенияФайлаБезРасширения",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		Попытка
			НачатьПомещениеФайла(ОписаниеОповещения,, ИмяФайла, Истина, 
				Параметры.УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить файл по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		СведенияОРедактировании = ИнтеграцияС1СДокументооборотВызовСервера.
			ПолучитьСведенияОРедактированииФайла(Параметры.Идентификатор, "DMFile");
		Параметры.Вставить("СведенияОРедактировании", СведенияОРедактировании);
		Если СведенияОРедактировании.Сохранен Тогда
			ИмяФайла = СведенияОРедактировании.ПолныйПуть;
		Иначе
			РазделительПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазделительПути(
				ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			ИмяФайла = СведенияОРедактировании.РекомендуемаяПапка + РазделительПути + ИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьИзФайлаНаДискеПослеПомещенияФайлаСРасширением",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	Попытка
		НачатьПомещениеФайла(ОписаниеОповещения,, ИмяФайла, Истина, 
			Параметры.УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить файл по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;

КонецПроцедуры

// Вызывается в ходе обновления из файла на диске после помещения файла с использованием расширения.
//
// Параметры:
//   Результат - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла в хранилище.
//   ПолныйПуть - полный путь к файлу, выбранному пользователем.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     Расширение - Строка - расширение редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - ничего вызывать не нужно.
//
Процедура ОбновитьИзФайлаНаДискеПослеПомещенияФайлаСРасширением(Результат, Адрес, ПолныйПуть, Параметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.
		РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.Вставить("Расширение", СтруктураИмени.Расширение);
	
	Файл = Новый Файл(ПолныйПуть);
	Параметры.Вставить("Размер", Файл.Размер());
	Параметры.Вставить("ДатаМодификации", Файл.ПолучитьВремяИзменения());
	Параметры.Вставить("ДатаМодификацииУниверсальная", Файл.ПолучитьУниверсальноеВремяИзменения());
	
	// Извлечем текст, если необходимо.
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.Вставить("Текст", РаботаСФайламиСлужебныйКлиентСервер.ИзвлечьТекст(ПолныйПуть));
	Иначе
		Параметры.Вставить("Текст", "");
	КонецЕсли;
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Состояние(НСтр("ru = 'Файл обновлен.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе обновления из файла на диске после помещения файла без использования расширения.
//
// Параметры:
//   Результат - Истина, если файл помещен в хранилище.
//   Адрес - Строка - адрес данных файла в хранилище.
//   ПолныйПуть - полный путь к файлу, выбранному пользователем.
//   Параметры - Структура:
//     Идентификатор - Строка - Идентификатор файла ДО.
//     Имя - Строка - имя редактируемого файла.
//     Расширение - Строка - расширение редактируемого файла.
//     УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы-владельца.
//     ОписаниеОповещения - ОписаниеОповещения - вызывается при успешном завершении, или
//                        - Неопределено - ничего вызывать не нужно.
//
Процедура ОбновитьИзФайлаНаДискеПослеПомещенияФайлаБезРасширения(Результат, Адрес, ПолныйПуть,
	Параметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", Адрес);
	Параметры.Вставить("ОсвободитьФайл", Ложь);
	
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.
		РазложитьПолноеИмяФайла(ПолныйПуть);
	Параметры.Вставить("Расширение", СтруктураИмени.Расширение);
	Параметры.Вставить("Размер", 0); // на сервере будет определен по двоичным данным
	Параметры.Вставить("ДатаМодификации", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("ДатаМодификацииУниверсальная", Неопределено); // на сервере будет определена текущая
	Параметры.Вставить("Текст", "");
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	
	Если ИнтеграцияС1СДокументооборотВызовСервера.
		ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Параметры) Тогда
		Состояние(НСтр("ru = 'Файл обновлен.'"));
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает файл копированием.
//
// Параметры:
//   УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//   ID - идентификатор владельца файла в Документообороте.
//   Тип - тип XDTO владельца файла в Документообороте.
//   ОригиналID - идентификатор оригинала файла.
//   ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлКопированием(ОригиналID, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОригиналID", ОригиналID);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Файл",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Начало создания файла из файла на диске.
//
// Параметры:
//   УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//   ID - идентификатор владельца файла в Документообороте.
//   Тип - тип XDTO владельца файла в Документообороте.
//   Представление - представление владельца файла.
//   ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлСДиска(УникальныйИдентификаторФормы, ID, Тип, Представление, 
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ID", ID);
	Параметры.Вставить("Тип", Тип);
	Параметры.Вставить("Представление", Представление);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПодключенияРасширения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры));

КонецПроцедуры

// Начало создания файла из файла на диске.
//
// Параметры:
//   Файла - Файл - перетаскиваемый файл.
//   УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//   ID - идентификатор владельца файла в Документообороте.
//   Тип - тип XDTO владельца файла в Документообороте.
//   Представление - представление владельца файла.
//   ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлСДискаПеретаскиванием(Файл, УникальныйИдентификаторФормы, ID, Тип, Представление, 
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПолныеИменаФайлов", Новый Массив);
	Параметры.Вставить("ПомещенныеФайлы", Новый Массив);
	Параметры.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
	Параметры.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	Параметры.Вставить("ID", ID);
	Параметры.Вставить("Тип", Тип);
	Параметры.Вставить("Представление", Представление);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	СоздатьФайлСДискаПослеИнициализацииФайла(Файл, Параметры);

КонецПроцедуры

// Выполняется в ходе создания файла с диска после подключения расширения.
//
// Параметры:
//   Подключено - Истина, если расширение подключено.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлСДискаПослеПодключенияРасширения(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		ВыборФайла.Показать(Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеДиалогаВыбораФайла",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры));
			
	Иначе // веб-клиент без расширения
		
		Попытка
			НачатьПомещениеФайла(Новый ОписаниеОповещения(
				"СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения",
				ИнтеграцияС1СДокументооборотКлиент,
				Параметры),,, 
				Истина, Параметры.УникальныйИдентификаторФормы);
		Исключение
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать файл по причине:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после диалога выбора файла.
//
// Параметры:
//   ВыбранныеФайлы - Массив - имя выбранного файла, или
//                  - Неопределено - если пользователь отказался от выбора.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлСДискаПослеДиалогаВыбораФайла(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ПолныеИменаФайлов = ВыбранныеФайлы;
	Параметры.Вставить("ПолноеИмяФайла", Параметры.ПолныеИменаФайлов[0]);
	Параметры.ПолныеИменаФайлов.Удалить(0);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеИнициализацииФайла",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры),
		Параметры.ПолноеИмяФайла);
		
КонецПроцедуры

// Выполняется в ходе создания файла с диска после инициализации файла.
//
// Параметры:
//   Файл - Файл - инициализированный файл.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//
Процедура СоздатьФайлСДискаПослеИнициализацииФайла(Файл, Параметры) Экспорт
	
	Параметры.Вставить("Файл", Файл);
	Файл.НачатьПолучениеРазмера(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияРазмера",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры));
		
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения размера.
//
// Параметры:
//   Размер - Число - размер файла.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//     Файл - Файл - инициализированный файл.
//
Процедура СоздатьФайлСДискаПослеПолученияРазмера(Размер, Параметры) Экспорт
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотКлиентПовтИсп.МаксимальныйРазмерПередаваемогоФайла();
	Если Размер > МаксРазмерФайла Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2) превышает максимально допустимый (%3).'"),
				 Параметры.ПолноеИмяФайла, 
				 ИнтеграцияС1СДокументооборотКлиентСервер.КраткоеПредставлениеРазмера(Размер),
				 ИнтеграцияС1СДокументооборотКлиентСервер.КраткоеПредставлениеРазмера(МаксРазмерФайла)
			);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Размер", Размер);
	Параметры.Файл.НачатьПолучениеВремениИзменения(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияВремениИзменения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры));
		
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения времени изменения.
//
// Параметры:
//   ВремяИзменения - Дата - дата и время изменения файла на диске.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//     Файл - Файл - инициализированный файл.
//     Размер - Число - размер файла.
//
Процедура СоздатьФайлСДискаПослеПолученияВремениИзменения(ВремяИзменения, Параметры) Экспорт
	
	Параметры.Вставить("ВремяИзменения", ВремяИзменения);
	Параметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(Новый ОписаниеОповещения(
		"СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры));
		
КонецПроцедуры

// Выполняется в ходе создания файла с диска после получения универсального времени изменения.
//
// Параметры:
//   ВремяИзмененияУниверсальное - Дата - универсальные дата и время изменения файла на диске.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//     Файл - Файл - инициализированный файл.
//     Размер - Число - размер файла.
//     ВремяИзменения - Дата - дата и время изменения файла на диске.
//
Процедура СоздатьФайлСДискаПослеПолученияУниверсальногоВремениИзменения(ВремяИзмененияУниверсальное, Параметры) Экспорт
	
	Параметры.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Параметры.ПолноеИмяФайла, ""));
		
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2). Пожалуйста, подождите...'"),
		Параметры.ПолноеИмяФайла,
		ИнтеграцияС1СДокументооборотКлиентСервер.КраткоеПредставлениеРазмера(Параметры.Размер));
	Состояние(ТекстПояснения);
		
	Попытка
		НачатьПомещениеФайлов(Новый ОписаниеОповещения(
			"СоздатьФайлСДискаПослеПомещенияФайла",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры),
			ПомещаемыеФайлы, , Ложь,	Параметры.УникальныйИдентификаторФормы);
	Исключение
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать файл по причине:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после помещения файла (тонкий и веб с расширением).
//
// Параметры:
//   ПомещенныеФайлы - Массив помещенных файлов, или
//                   - Неопределено, если файл поместить не удалось.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//     Файл - Файл - инициализированный файл.
//     Размер - Число - размер файла.
//     ВремяИзменения - Дата - дата и время изменения файла на диске.
//     ВремяИзмененияУниверсальное - Дата - универсальные дата и время изменения файла на диске.
//
Процедура СоздатьФайлСДискаПослеПомещенияФайла(ПомещенныеФайлы, Параметры) Экспорт
	
	Состояние();
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", ПомещенныеФайлы[0].Хранение);
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	Если НастройкиДокументооборот.НужноИзвлечьТекст Тогда
		Параметры.Вставить("Текст", РаботаСФайламиСлужебныйКлиентСервер.
			ИзвлечьТекст(Параметры.ПолноеИмяФайла));
	Иначе
		Параметры.Вставить("Текст", "");
	КонецЕсли;
		
	СоздатьФайлСДискаЗавершение(Параметры);
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после помещения файла (веб без расширения).
//
// Параметры:
//   Помещен - Истина, если файл помещен, и Ложь, если пользователь отказался.
//   АдресВременногоХранилищаФайла - Строка - адрес данных файла в хранилище.
//   ВыбранноеИмяФайла - Строка - полное имя выбранного файла.
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//
Процедура СоздатьФайлСДискаПослеПомещенияФайлаБезРасширения(Помещен, АдресВременногоХранилищаФайла, 
	ВыбранноеИмяФайла, Параметры) Экспорт
	
	Если Не Помещен Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	Параметры.Вставить("ПолноеИмяФайла", ВыбранноеИмяФайла);
	Параметры.Вставить("Размер", 0);
	Параметры.Вставить("ВремяИзменения", Дата('00010101'));
	Параметры.Вставить("ВремяИзмененияУниверсальное", Дата('00010101'));
	Параметры.Вставить("Текст", "");
		
	СоздатьФайлСДискаЗавершение(Параметры);
	
КонецПроцедуры

// Выполняется в ходе создания файла с диска после помещения файла (универсальное завершение).
//
// Параметры:
//   Параметры - Структура:
//     ID - идентификатор владельца файла в Документообороте.
//     Тип - тип XDTO владельца файла в Документообороте.
//     Представление - представление владельца файла.
//     УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы объекта.
//     ОписаниеОповещения - описание оповещения, вызваемого при успешном создании файла.
//     ПолноеИмяФайла - Строка - полное имя выбранного пользователм файла.
//     Файл - Файл - инициализированный файл.
//     Размер - Число - размер файла.
//     ВремяИзменения - Дата - дата и время изменения файла на диске.
//     ВремяИзмененияУниверсальное - Дата - универсальные дата и время изменения файла на диске.
//     Текст - извлеченный текст файла.
//
Процедура СоздатьФайлСДискаЗавершение(Параметры)
	
	// Разберем полный путь на имя и расширение.
	СтруктураИмени = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазложитьПолноеИмяФайла(
		Параметры.ПолноеИмяФайла);
	Параметры.Вставить("Расширение", СтруктураИмени.Расширение);
	Параметры.Вставить("Имя", СтруктураИмени.ИмяБезРасширения);
	
	// Удалим параметры, которые передавать на сервер нельзя и не нужно.
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	Параметры.Удалить("ОписаниеОповещения");
	Параметры.Удалить("Файл");
	
	ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотВызовСервера.
		СоздатьИзФайлаНаДискеСервер(Параметры, Параметры.ID, Параметры.Тип, Параметры.Представление);
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторСозданногоФайла);
	
	ПомещенныйФайл = Новый Структура;
	ПомещенныйФайл.Вставить("Идентификатор", ИдентификаторСозданногоФайла);
	ПомещенныйФайл.Вставить("Имя", Параметры.Имя);
	ПомещенныйФайл.Вставить("Расширение", Параметры.Расширение);
	ПомещенныйФайл.Вставить("ПолноеИмяФайла", Параметры.ПолноеИмяФайла);
	ПомещенныйФайл.Вставить("Размер", Параметры.Размер);
	ПомещенныйФайл.Вставить("ВремяИзменения", Параметры.ВремяИзменения);
	ПомещенныйФайл.Вставить("ВремяИзмененияУниверсальное", Параметры.ВремяИзмененияУниверсальное);
	ПомещенныйФайл.Вставить("Расширение", Параметры.Расширение);
	
	Параметры.ПомещенныеФайлы.Добавить(ПомещенныйФайл);
	
	// Все ли файлы помещены?
	Если Параметры.ПолныеИменаФайлов.Количество() = 0 Тогда
		Если ОписаниеОповещения <> Неопределено Тогда // оповестим, передав описания
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Параметры.ПомещенныеФайлы);
		КонецЕсли;
	Иначе // продолжим создание
		Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		СоздатьФайлСДискаПослеДиалогаВыбораФайла(Параметры.ПолныеИменаФайлов, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Помещает печатную форму объекта в ДО.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект ИС
//   ID - Строка - идентификатор документа 1С:Документооборота
//   Тип - Строка - тип документа 1С:Документооборота
//   Представление - Строка - представление документа 1С:Документооборота
//   ИмяКоманды - Строка - имя команды кнопки в формате "Менеджер_%_Команда_%"
//   ФорматФайла - ПеречислениеСсылка.ФорматыСохраненияОтчетов - формат сохраняемого файла
//   ОписаниеОповещения - оповещение, которое будет вызвано с передачей массива идентификаторов файлов
//
Процедура ПрисоединитьПечатнуюФорму(ВнешнийОбъект, ID, Тип, Представление, ИмяКоманды, ФорматФайла,
	ОписаниеОповещения) Экспорт
	
	СозданныеФайлы = ИнтеграцияС1СДокументооборотВызовСервера.ПрисоединитьПечатнуюФормуОбъектаКДокументу(
		ВнешнийОбъект, ID, Тип, Представление, ИмяКоманды, ФорматФайла);
	ИдентификаторыФайлов = Новый Массив;
	Для каждого СозданныйФайл из СозданныеФайлы Цикл
		ИдентификаторыФайлов.Добавить(СозданныйФайл.Идентификатор);
	КонецЦикла;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИдентификаторыФайлов);
	
КонецПроцедуры

// Открывает список файлов, присоединенных к объекту ИС.
//
// Параметры:
//   Источник - ЛюбаяСсылка - источник команды, объект ИС-владелец файлов.
//   Владелец - УправляемаяФорма - форма, из которой вызвана команда.
//   Уникальность - ключ уникальности, с которым должна быть открыта форма присоединенных файлов.
//   Окно - ОкноКлиентскогоПриложения - необязательный параметр, окно формы-владельца.
//
Процедура ОткрытьПрисоединенныеФайлы(Источник, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВладелецФайла", Источник);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПрисоединенныеФайлы", Параметры, 
		Владелец, Уникальность, Окно);
	
КонецПроцедуры

#КонецОбласти

#Область СвязиДокументов

// Начинает добавление связи с указанным документом ДО. Вызывает оповещение при успехе.
//
// Параметры:
//   ID - Строка - идентификатор исходного документа.
//   Тип - Строка - тип исходного документа.
//   Представление - Строка - представление исходного документа.
//   ТипДобавляемогоДокумента - Строка - тип документа, связь с которым добавляется, или
//                            - Неопределено - признак необходимости предоставить пользователю выбор.
//   ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе, с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//   Отбор - Структура - описание предустановленного отбора в терминах пакета XDTO.
//
Процедура НачатьДобавлениеСвязи(ID, Тип, Представление, ТипДобавляемогоДокумента = Неопределено,
	ОписаниеОповещения = Неопределено, Отбор = Неопределено) Экспорт
	
	Если ТипДобавляемогоДокумента = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ID", ID);
		ПараметрыФормы.Вставить("Тип", Тип);
		ПараметрыФормы.Вставить("Представление", Представление);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ID", ID);
		ПараметрыОповещения.Вставить("Тип", Тип);
		ПараметрыОповещения.Вставить("Представление", Представление);
		ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыОповещения.Вставить("Отбор", Отбор);
		
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
			"НачатьДобавлениеСвязиПослеФормыСозданияСвязи",
			ЭтотОбъект,
			ПараметрыОповещения);
			
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеСвязи",
			ПараметрыФормы,,
			ID,,,
			ОписаниеОповещенияОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе // тип указан явно
			
		НачатьДобавлениеСвязиПослеВыбораТипа(ID,
			Тип,
			Представление,
			ТипДобавляемогоДокумента,
			ОписаниеОповещения,
			Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжает добавление связи после показа формы "Создание связи".
//
// Параметры:
//   Результат - Структура - описание выбора со свойствами:
//     РеквизитТип - Строка - тип выбранного объекта.
//     РеквизитID - Строка - идентификатор выбранного объекта.
//   ПараметрыОповещения - Структура - дополнительные параметры, необходимые для продолжения:
//     ID - Строка - идентификатор исходного документа.
//     Тип - Строка - тип исходного документа.
//     Представление - Строка - представление исходного документа.
//     ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызваемого после добавления.
//     Отбор - Структура - описание отбора, накладываемого при открытии карточки поиска.
//
Процедура НачатьДобавлениеСвязиПослеФормыСозданияСвязи(Результат, ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.РеквизитID) Тогда // выбран конкретный документ
		
		Параметры = Новый Структура;
		
		ИсходныйДокумент = Новый Структура;
		ИсходныйДокумент.Вставить("ID", ПараметрыОповещения.ID);
		ИсходныйДокумент.Вставить("Тип", ПараметрыОповещения.Тип);
		ИсходныйДокумент.Вставить("Представление", ПараметрыОповещения.Представление);
		
		Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
		Параметры.Вставить("ОписаниеОповещения", ПараметрыОповещения.ОписаниеОповещения);
		Параметры.Вставить("Отбор", ПараметрыОповещения.Отбор);
		
		НачатьДобавлениеСвязиПослеВыбораДокумента(Результат, Параметры);
		
	Иначе // выбран только тип
		
		НачатьДобавлениеСвязиПослеВыбораТипа(ПараметрыОповещения.ID,
			ПараметрыОповещения.Тип,
			ПараметрыОповещения.Представление,
			Результат.РеквизитТип,
			ПараметрыОповещения.ОписаниеОповещения,
			ПараметрыОповещения.Отбор);
			
	КонецЕсли;
	
КонецПроцедуры

// Начинает добавление связи с документом ДО указанного типа. Вызывает оповещение при успехе.
//
// Параметры:
//   ID - Строка - идентификатор исходного документа.
//   Тип - Строка - тип исходного документа.
//   Представление - Строка - представление исходного документа.
//   ТипДобавляемогоДокумента - Строка - тип документа, связь с которым добавляется.
//   ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе, с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//   Отбор - Структура - описание предустановленного отбора в терминах пакета XDTO.
//
Процедура НачатьДобавлениеСвязиПослеВыбораТипа(ID, Тип, Представление, ТипДобавляемогоДокумента,
	ОписаниеОповещения = Неопределено, Отбор = Неопределено) Экспорт
	
	ИсходныйДокумент = Новый Структура;
	ИсходныйДокумент.Вставить("ID", ID);
	ИсходныйДокумент.Вставить("Тип", Тип);
	ИсходныйДокумент.Вставить("Представление", Представление);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Отбор", Отбор);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиПослеВыбораДокумента",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(ТипДобавляемогоДокумента, Отбор, , , ОповещениеПродолжения);
	
КонецПроцедуры

// Продолжает добавление связи после выбора связываемого документа ДО.
//
// Параметры:
//   Результат - Структура - результат выбора:
//     РеквизитID - Строка - идентификатор выбранного документа.
//     РеквизитТип - Строка - тип выбранного документа.
//     РеквизитПредставление - Строка - представление выбранного документа.
//   Параметры - Структура - см. НачатьДобавлениеСвязи.
//
Процедура НачатьДобавлениеСвязиПослеВыбораДокумента(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныйДокумент = Новый Структура;
	СвязанныйДокумент.Вставить("ID", Результат.РеквизитID);
	СвязанныйДокумент.Вставить("Тип", Результат.РеквизитТип);
	СвязанныйДокумент.Вставить("Представление", Результат.РеквизитПредставление);
	
	Параметры.Вставить("СвязанныйДокумент", СвязанныйДокумент);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьДобавлениеСвязиПослеВыбораТипаСвязи",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
		
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ИсходныйДокумент", Параметры.ИсходныйДокумент);
	ПараметрыФормыВыбора.Вставить("СвязанныйДокумент", Параметры.СвязанныйДокумент);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборТипаСвязи",
		ПараметрыФормыВыбора,,,,,
		ОповещениеПродолжения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Продолжает добавление связи после выбора типа связи.
//
// Параметры:
//   Результат - Структура - результат выбора:
//     РеквизитID - Строка - идентификатор выбранного типа связи.
//     РеквизитТип - Строка - тип выбранного типа связи.
//     РеквизитПредставление - Строка - представление выбранного типа связи.
//   Параметры - Структура:
//     ИсходныйДокумент - Структура - описание исходного документа.
//     СвязанныйДокумент - Структура - описание связываемого документа.
//     ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое при успехе.
//
Процедура НачатьДобавлениеСвязиПослеВыбораТипаСвязи(Результат, Параметры) Экспорт
	
	Если Результат = "ПовторитьВыборДокумента" Тогда // " < Назад"
		ОповещениеПродолжения = Новый ОписаниеОповещения(
			"НачатьДобавлениеСвязиПослеВыбораДокумента",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры);
		ВыбратьЗначениеПоТипуОбъекта(
			Параметры.СвязанныйДокумент.Тип, Параметры.Отбор,,,ОповещениеПродолжения);
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязьДокументов(
		Параметры.ИсходныйДокумент,
		Параметры.СвязанныйДокумент,
		Результат);
		
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		Параметры.Вставить("ТипСвязи", Результат);
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Начинает удаление связи указанного типа между двумя документами.
//
// Параметры:
//   ИсходныйДокумент - Структура - исходный документ.
//   СвязанныйДокумент - Структура - связанный документ.
//   ТипСвязи - Структура - тип связи. Свойства структур:
//     ID - Строка - идентификатор объекта ДО.
//     Тип - Строка - тип объекта ДО.
//     Представление - Строка - представление объекта ДО.
//   ОписаниеОповещения - ОписаниеОповещения - вызвается при успехе с передачей
//     структуры (ИсходныйДокумент, СвязанныйДокумент, ТипСвязи).
//
Процедура НачатьУдалениеСвязи(ИсходныйДокумент, СвязанныйДокумент, ТипСвязи,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсходныйДокумент", ИсходныйДокумент);
	Параметры.Вставить("СвязанныйДокумент", СвязанныйДокумент);
	Параметры.Вставить("ТипСвязи", ТипСвязи);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"НачатьУдалениеСвязиПослеВопроса",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
		
	ПоказатьВопросДаНет(ОповещениеПродолжения,
		НСтр("ru = 'Удалить связь?'"));
		
КонецПроцедуры
	
// Продолжает удаление связи после вопроса пользователю.
//
// Параметры:
//   Результат - КодВозвратаДиалога - результат выбора.
//   Параметры - Структура со свойствами:
//     ИсходныйДокумент - Структура - исходный документ.
//     СвязанныйДокумент - Структура - связанный документ.
//     ТипСвязи - Структура - тип связи. Свойства структур:
//       ID - Строка - идентификатор объекта ДО.
//       Тип - Строка - тип объекта ДО.
//       Представление - Строка - представление объекта ДО.
//     ОписаниеОповещения - ОписаниеОповещения - вызвается при успехе.
//
Процедура НачатьУдалениеСвязиПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИсходныйДокумент.ID) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.УдалитьСвязьДокументов(
			Параметры.ИсходныйДокумент, Параметры.СвязанныйДокумент, Параметры.ТипСвязи);
	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПодписи

//Подписывает файл в Документообороте.
// Параметры:
//	ИдентификаторФайла - Строка - идентификатор объекта Документооборота
//	ИмяФайла - Строка - имя файла
//	Редактируется - Булево - признак редактирования файла
//	Зашифрован - Булево - признак шифрования файла
//	ОписаниеФайла - Строка - описание файла
//	ДанныеПодписейФайла - Массив - существующе подписи
Процедура ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован, ОписаниеФайла, ДанныеПодписейФайла) Экспорт
	
	Если Редактируется Тогда
		ПоказатьПредупреждение(,
			РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла());
		Возврат;
	КонецЕсли;
	
	Если Зашифрован Тогда
		ПоказатьПредупреждение(,
			РаботаСФайламиСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла());
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание файла'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("Данные", ИнтеграцияС1СДокументооборотВызовСервера.ДвоичныеДанныеФайла(ИдентификаторФайла));
	ОписаниеДанных.Вставить("Представление", ИмяФайла);
	ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
	ОписаниеДанных.СписокПредставлений.Добавить(, ИмяФайла);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	ПараметрыФайла.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыФайла.Вставить("ОписаниеФайла", ОписаниеФайла);
	ПараметрыФайла.Вставить("ДанныеПодписейФайла", ДанныеПодписейФайла);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыФайла);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Неопределено, ОбработчикЗавершения);
	
КонецПроцедуры

//По окончании подписания создает оповещение о подписании файла.
// Параметры:
//	ИмяФайла - имя файла для вывода в сообщение
//	ИдентификаторФайла - идентификатор файла Документооборота
Процедура ИнформироватьОПодписанииОбъекта(ИмяФайла, ИдентификаторФайла) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", ИдентификаторФайла);
	ПараметрыОповещения.Вставить("type", "DMFile");
	ПараметрыОповещения.Вставить("name", ИмяФайла);
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"), ИмяФайла);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Сохраняет файл и подпись на диск.
//
// Параметры:
//	 ИдентификаторФайла - Строка - идентификатор файла Документооборота.
//	 Расширение - Строка - расширение файла.
//	 Имя - Строка - имя файла.
//	 Размер - Число - размер файла в байтах.
//	 ДатаМодификацииУниверсальная - Дата - дата модификации файла универсальная.
//	 УникальныйИдентификатор - Строка - уникальный идентификатор управляемой формы объекта.
//	 Подписи - Массив - содержит структуры существующих подписей файла.
//
Процедура НачатьСохранениеВместеСЭП(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, 
	УникальныйИдентификатор, Подписи = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	Параметры.Вставить("Расширение", Расширение);
	Параметры.Вставить("Имя", Имя);
	Параметры.Вставить("Размер", Размер);
	Параметры.Вставить("ДатаМодификацииУниверсальная", ДатаМодификацииУниверсальная);
	Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Параметры.Вставить("Подписи", Подписи);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"НачатьСохранениеВместеСЭППослеПодключенияРасширения", ИнтеграцияС1СДокументооборотКлиент, Параметры));
		
КонецПроцедуры

// Вызывается в ходе сохранения файла с ЭП после подключения расширения.
//
Процедура НачатьСохранениеВместеСЭППослеПодключенияРасширения(Подключено, Параметры) Экспорт	
	
	Если Подключено Тогда
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
		ОписаниеДанных.Вставить("Представление", Параметры.Имя);
		ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
		ОписаниеДанных.СписокПредставлений.Добавить(, Параметры.Имя);
		Если Параметры.Подписи = Неопределено Тогда
			ОписаниеДанных.Вставить("Объект", ИнтеграцияС1СДокументооборотВызовСервера.
				ПоместитьВХранилищеПодписиФайла(Параметры.ИдентификаторФайла));
		Иначе
			ОписаниеДанных.Вставить("Объект", ПоместитьВоВременноеХранилище(Параметры.Подписи));
		КонецЕсли;
		ОписаниеДанных.Вставить("Данные", Новый ОписаниеОповещения("СохранитьВместеСЭПСохранитьФайл",
			ИнтеграцияС1СДокументооборотКлиент, Параметры));
		ЭлектроннаяПодписьКлиент.СохранитьДанныеВместеСПодписью(ОписаниеДанных);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции нужно установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в ходе сохранения ЭП вместе с файлом, сохраняет файл и вызывает обработчик, передав ему полное имя файла.
Процедура СохранитьВместеСЭПСохранитьФайл(Результат, ПараметрыФайла) Экспорт
	
	СохранитьФайлКак(ПараметрыФайла.ИдентификаторФайла, ПараметрыФайла.Имя, 
		ПараметрыФайла.Расширение, ПараметрыФайла.УникальныйИдентификатор, Результат.Оповещение);
	
КонецПроцедуры

// Проверяет все выделенные подписи.
//
// Параметры:
//
//	ВыделенныеСтроки - массив идентификаторов выделенных строк таблицы подписей 
//	ТаблицаПодписей - реквизит таблицы подписей формы документа
//	АдресСлепкаДокумента - адрес временного хранилища двоичных данных документа Документооборота
//
Процедура ПроверитьПодписи(ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор, АдресСлепкаДокумента) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	Параметры.Вставить("ТаблицаПодписей", ТаблицаПодписей);
	Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Параметры.Вставить("АдресСлепкаДокумента", АдресСлепкаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписиПослеСозданияМенеджера", ИнтеграцияС1СДокументооборотКлиент, Параметры);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
		
КонецПроцедуры

// Вызывается в ходе проверки подписи после создания менеджера криптографии
//
Процедура ПроверитьПодписиПослеСозданияМенеджера(МенеджерКриптографии, Параметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;

	Для Каждого Элемент Из Параметры.ВыделенныеСтроки Цикл
		ДанныеСтроки = Параметры.ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, Параметры.УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, Параметры.АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Проверяет одну электронно-цифровую подпись.
//Параметры:
//	ДанныеСтроки - строка таблицы файлов или структура, содержащая идентификатор объекта в свойстве ОбъектИД
//	МенеджерКриптографии - объект Менеджера криптографии
//	УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота
//	СоответствиеИдОбъектаИДвоичныхДанных - соответствие идентификаторов объектов и их двоичных данных 
//	АдресСлепкаДокумента - адрес временного хранения двоичных данных файла
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
	СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	ДвоичныеДанныеФайла = СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд];
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		Если ДанныеСтроки.ОбъектТип = "DMFile" Тогда
			ДвоичныеДанныеФайла = ИнтеграцияС1СДокументооборотВызовСервера.ДвоичныеДанныеФайла(ДанныеСтроки.ОбъектИд);
		Иначе	
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		КонецЕсли;
		
		СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд] = ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Попытка
		Сертификат = Неопределено;
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
		
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Не верна'");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + ": " + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
	Если ДанныеСтроки.Свойство("КомуВыданСертификатИСтатус") Тогда
		ДанныеСтроки.КомуВыданСертификатИСтатус = 
			ДанныеСтроки.КомуВыданСертификат
			+ Символы.ПС
			+ ДанныеСтроки.Статус;
	КонецЕсли;
	
КонецПроцедуры

//По окончании подписания отображает состояние установки подписи объекту.
//Параметры:
//	Представление - представление подписанного объекта для информирования пользователя о подписании
Процедура ИнформироватьОПодписании(Представление) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Представление);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Добавляет подпись из файла.
//
// Параметры:
//	 ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповщения при закрытии формы
//	 СвойстваФайла - Структура - содержит свойства файла
//		* ИмяФайла - Строка - имя файла для вывода в сообщение
//		* ИдентификаторФайла - Строка - идентификатор файла Документооборота
//		* УникальныйИдентификатор - УникальныйИдентификатор - идентификатор управляемой формы объекта
//		* ОписаниеФайла - Строка - описание файла
//		* ДанныеПодписейФайла - Массив - структура существующих подписей
//
Процедура НачатьДобавлениеЭПИзФайла(ОписаниеОповещенияОЗакрытии = Неопределено, СвойстваФайла) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	Параметры.Вставить("СвойстваФайла", СвойстваФайла);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения(
		"НачатьДобавлениеЭПИзФайлаПослеПодключенияРасширения", ИнтеграцияС1СДокументооборотКлиент, Параметры));
		
КонецПроцедуры

// Вызвается в ходе добавления подписи из файла после подключения расширения.
//
Процедура НачатьДобавлениеЭПИзФайлаПослеПодключенияРасширения(Подключено, Параметры) Экспорт
	
	Если Подключено Тогда
		
		ИмяФормы = "ОбщаяФорма.ДобавлениеПодписиИзФайла";
		
		Оповещение = Новый ОписаниеОповещения(
			"НачатьДобавлениеЭПИзФайлаЗавершение", ИнтеграцияС1СДокументооборотКлиент, Параметры);
		ПустоеОповещение = Новый ОписаниеОповещения(
			"НачатьДобавлениеЭПИзФайлаПустойОбработчик", ИнтеграцияС1СДокументооборотКлиент, Неопределено);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ЗаголовокДанных", "Файл");
		ОписаниеДанных.Вставить("Объект", ПустоеОповещение);
		ОписаниеДанных.Вставить("Представление", Параметры.СвойстваФайла.ИмяФайла);
		ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
		ОписаниеДанных.СписокПредставлений.Добавить(, Параметры.СвойстваФайла.ИмяФайла);
		
		ЭлектроннаяПодписьКлиент.ДобавитьПодписьИзФайла(ОписаниеДанных, Неопределено, Оповещение);
		
	Иначе // веб-клиент без расширения
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для выполнения операции нужно установить расширение работы с файлами.'"));
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияОЗакрытии, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

//Преобразует 2-уровневое дерево в массив.
//Параметры:
//	ТаблицаПодписей - дерево значений формы, содержащая список подписей
//Возвращаемое значение:
// Массив - идентификаторы строк подписей.
//
Функция ДанныеПодписей(ТаблицаПодписейПереданная) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписейПереданная.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

//Формирует подпись для объекта Документооборот и всех его вложенных файлов.
//Параметры:
//	Форма - УправляемаяФорма - форма объекта Документооборота
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - описание оповещения о закрытии
Процедура НачатьФормированиеПодписиОбъекта(Форма, ОписаниеОповещенияОЗакрытии) Экспорт

	МассивДанныхДляЗанесенияВБазу = ОписаниеОповещенияОЗакрытии.
		ДополнительныеПараметры.МассивДанныхДляЗанесенияВБазу;
	МассивФайлов = Новый Массив;
	Для Каждого Файл Из Форма.Файлы Цикл
		МассивФайлов.Добавить(Файл.ID);
	КонецЦикла;
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(Форма.АдресСлепкаДокумента);
	МассивОбъектовДляПодписи = Новый Массив;
	ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьОбъектыДляПодписи(Форма.ID, Форма.Тип, 
		МассивОбъектовДляПодписи, МассивФайлов, ДвоичныеДанныеДокумента);
	
	НаборДанных = Новый Массив;
	Для каждого ОбъектДляПодписи Из МассивОбъектовДляПодписи Цикл
		ДанныеДляПодписи = Новый Структура;
		ДанныеДляПодписи.Вставить("Данные", ОбъектДляПодписи.ДвоичныеДанные);
		НаборДанных.Добавить(ДанныеДляПодписи);
		ДанныеДляЗанесенияВБазу = Новый Структура;
		ДанныеДляЗанесенияВБазу.Вставить("ОбъектСсылка", ОбъектДляПодписи.ОбъектСсылкаДляПодписи);
		ДанныеДляЗанесенияВБазу.Вставить("ОбъектТип", ОбъектДляПодписи.ОбъектТип);
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
	КонецЦикла;
		
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание документа'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	ОписаниеДанных.Вставить("Представление", Форма.Наименование);
	ОписаниеДанных.Вставить("СписокПредставлений", Новый СписокЗначений());
	ОписаниеДанных.СписокПредставлений.Добавить(, Форма.Наименование);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	ОбработчикЗавершения = Новый ОписаниеОповещения("НачатьФормированиеПодписиОбъектаЗавершение", 
		ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Неопределено, ОбработчикЗавершения);
	
КонецПроцедуры

//Возвращает массив подписей файла.
//Параметры:
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	ТаблицаПодписей - таблица подписей объекта
//Возвращает:
//	Массив структур существующих подписей объекта
Функция ДанныеПодписейФайла(ИдентификаторФайла, ТаблицаПодписей) Экспорт
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	НомерСтроки = 0;
	
	// формируем массив данных подписи.
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		Иначе
			ДвоичныеДанныеСертификата = Неопределено;
		КонецЕсли;
		
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("ОбъектСсылка", ИдентификаторФайла);
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", ПодписьДвоичныеДанные);
		ДанныеПодписи.Вставить("Отпечаток", ДанныеСтроки.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи", ДанныеСтроки.ДатаПодписи);
		ДанныеПодписи.Вставить("Комментарий", ДанныеСтроки.Комментарий);
		ДанныеПодписи.Вставить("ИмяФайлаПодписи", ДанныеСтроки.ИмяФайлаПодписи);
		ДанныеПодписи.Вставить("КомуВыданСертификат", ДанныеСтроки.КомуВыданСертификат);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата); 
		ДанныеПодписи.Вставить("ОбъектТип", "DMFile");
		ДанныеПодписи.Вставить("УстановившийПодпись", ДанныеСтроки.УстановившийПодпись); 
		ДанныеПодписи.Вставить("УстановившийПодписьИд", ДанныеСтроки.УстановившийПодписьИд);
		ДанныеПодписи.Вставить("НомерСтроки", НомерСтроки);
		
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		НомерСтроки = НомерСтроки + 1;
			
	КонецЦикла;
	
	Возврат МассивДанныхПодписей;
	
КонецФункции

#КонецОбласти

#Область Автообновление

// Открывает модальную форму настройки автообновления списка. При завершении диалога.
// устанавливает выбранные параметры автообновления списка.
// Параметры:
// Форма - уникальный идентификатор открытой формы
// ИмяСписка - Строка - имя реквизита списка на форме
Процедура УстановитьПараметрыАвтообновленияСписка(Форма, ИмяСписка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоОбновление", Форма.Элементы[ИмяСписка].АвтоОбновление);
	ПараметрыФормы.Вставить("ПериодАвтоОбновления", Форма.Элементы[ИмяСписка].ПериодАвтоОбновления);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ИмяСписка", ИмяСписка);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьПараметрыАвтообновленияСпискаЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.НастройкаАвтообновления",
		ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершает установку параметров автообновления списка после закрытия окна настроек.
//
// Параметры:
//   Результат - Структура со свойствами:
//     Автообновление - Булево.
//     ПериодАвтообновления - Число - период в секундах.
//   ПараметрыОповещения - Структура - см. УстановитьПараметрыАвтообновленияСписка.
//
Процедура УстановитьПараметрыАвтообновленияСпискаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ИмяСписка = ПараметрыОповещения.ИмяСписка;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияСписка(Форма.ИмяФормы, ИмяСписка, Результат);
		
		Форма.Элементы[ИмяСписка].АвтоОбновление = Результат.АвтоОбновление;
		Форма.Элементы[ИмяСписка].ПериодАвтоОбновления = Результат.ПериодАвтоОбновления;
		Если Результат.АвтоОбновление Тогда
			Форма.Элементы[ИмяСписка].Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьИнтегрированныйОбъектЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	СсылкаНаОбъект = ПараметрыОповещения.ФормаОбъекта.Объект.Ссылка;
	ПараметрыОповещения.ФормаОбъекта = Неопределено;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ID = ПараметрыОповещения.Объект1СДокументооборота.ID;
	Тип = ПараметрыОповещения.Объект1СДокументооборота.Тип;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ДобавитьСвязь(ID,
		Тип,
		СсылкаНаОбъект,
		ПараметрыОповещения.НаличиеПрисоединенныхФайлов);
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ДобавлениеСвязи(ID, Тип, СсылкаНаОбъект);
	
КонецПроцедуры
 
Процедура ВыбратьПользователяИзДереваПодразделенийЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит] = Результат.РеквизитПредставление;
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит + "id"] = Результат.РеквизитID;
		ПараметрыОповещения.ФормаВладелец[ПараметрыОповещения.Реквизит + "Тип"] = Результат.РеквизитТип;
		ПараметрыОповещения.ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьФайлЗавершение(ОписаниеДанных, ПараметрыФайла) Экспорт
	
	СвойстваПодписи = Неопределено;
	Если ТипЗнч(ОписаниеДанных) = Тип("Структура") и ОписаниеДанных.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
		
		Если ТипЗнч(СвойстваПодписи) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
		КонецЕсли;
		
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("КомуВыданСертификат", СвойстваПодписи.КомуВыданСертификат);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", СвойстваПодписи.Сертификат);
		ДанныеПодписи.Вставить("Комментарий", СвойстваПодписи.Комментарий);
		ДанныеПодписи.Вставить("ДатаПодписи", СвойстваПодписи.ДатаПодписи);
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", СвойстваПодписи.Подпись);
		ДанныеПодписи.Вставить("ИмяФайлаПодписи", СвойстваПодписи.ИмяФайлаПодписи);
		ДанныеПодписи.Вставить("Отпечаток", СвойстваПодписи.Отпечаток);
		ДанныеПодписи.Вставить("ОбъектТип", "DMFile");
			
		МассивДанныхПодписей = Новый Массив;
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		ИнтеграцияС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
			ПараметрыФайла.ИдентификаторФайла, 
			ПараметрыФайла.ИмяФайла, 
			ПараметрыФайла.ОписаниеФайла, 
			"DMFile", 
			МассивДанныхПодписей, 
			ПараметрыФайла.ДанныеПодписейФайла);
		
		ИнформироватьОПодписанииОбъекта(
			ПараметрыФайла.ИмяФайла, 
			ПараметрыФайла.ИдентификаторФайла);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьДобавлениеЭПИзФайлаПустойОбработчик(Результат, Параметры) Экспорт
	
	КодДляАвтоматизированнойПроверкиКонфигурации = Неопределено; // в этом обработчике не нужны действия
	
КонецПроцедуры

Процедура НачатьДобавлениеЭПИзФайлаЗавершение(ОписаниеДанных, ПараметрыОповещения) Экспорт
	
	СвойстваФайла = ПараметрыОповещения.СвойстваФайла;
	Подписи = ОписаниеДанных.Подписи;
	
	Если ТипЗнч(Подписи) <> Тип("Массив") ИЛИ Подписи.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОписаниеОповещенияОЗакрытии, Ложь);
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	Для каждого Подпись из Подписи Цикл
		Если ТипЗнч(Подпись) = Тип("Строка") Тогда
			СвойстваПодписи = ПолучитьИзВременногоХранилища(Подпись);
		Иначе
			СвойстваПодписи = Подпись;
		КонецЕсли;
		ДанныеДляЗанесенияВБазу = Новый Структура;
		ДанныеДляЗанесенияВБазу.Вставить("ОбъектТип", "DMFile");
		ДанныеДляЗанесенияВБазу.Вставить("КомуВыданСертификат", СвойстваПодписи.КомуВыданСертификат);
		ДанныеДляЗанесенияВБазу.Вставить("ДвоичныеДанныеСертификата", СвойстваПодписи.Сертификат);
		ДанныеДляЗанесенияВБазу.Вставить("Комментарий", СвойстваПодписи.Комментарий);
		ДанныеДляЗанесенияВБазу.Вставить("ДатаПодписи", СвойстваПодписи.ДатаПодписи);
		ДанныеДляЗанесенияВБазу.Вставить("НоваяПодписьДвоичныеДанные", СвойстваПодписи.Подпись);
		ДанныеДляЗанесенияВБазу.Вставить("ИмяФайлаПодписи", СвойстваПодписи.ИмяФайлаПодписи);
		ДанныеДляЗанесенияВБазу.Вставить("Отпечаток", СвойстваПодписи.Отпечаток);
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
		СвойстваФайла.ИдентификаторФайла, 
		СвойстваФайла.ИмяФайла, 
		СвойстваФайла.ОписаниеФайла, 
		"DMFile", 
		МассивДанныхДляЗанесенияВБазу, 
		СвойстваФайла.ДанныеПодписейФайла);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", СвойстваФайла.ИдентификаторФайла);
	ПараметрыОповещения.Вставить("type", "DMFile");
	ПараметрыОповещения.Вставить("name", СвойстваФайла.ИмяФайла);
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения);
	
	Если МассивДанныхДляЗанесенияВБазу.Количество() = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1""'"), СвойстваФайла.ИмяФайла);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"), СвойстваФайла.ИмяФайла);
	КонецЕсли;
	
	Состояние(ТекстСообщения);
	
	Если ПараметрыОповещения.Свойство("ОписаниеОповещенияОЗакрытии")
		И ПараметрыОповещения.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОписаниеОповещенияОЗакрытии, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьФормированиеПодписиОбъектаЗавершение(ОписаниеДанных, ПараметрыОповещения) Экспорт

	ОписаниеОповещения = ПараметрыОповещения.ОписаниеОповещенияОЗакрытии;
	МассивДанныхДляЗанесенияВБазу = ОписаниеОповещения.ДополнительныеПараметры.МассивДанныхДляЗанесенияВБазу;

	Для НомерПодписываемогоОбъекта = 0 по ОписаниеДанных.НаборДанных.Количество() - 1 Цикл
		// Порядок данных для подписи, переданных в Подписать(), совпадает с порядком
		// объектов для помещения в базу, переданных в параметрах оповещения.
		ДанныеДляПодписи = ОписаниеДанных.НаборДанных[НомерПодписываемогоОбъекта];
		ДанныеПодписи = МассивДанныхДляЗанесенияВБазу[НомерПодписываемогоОбъекта];
		СвойстваПодписи = Неопределено;
		Если ДанныеДляПодписи.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
			Если ТипЗнч(СвойстваПодписи) = Тип("Строка") Тогда
				СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
			КонецЕсли;
			ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", СвойстваПодписи.Подпись);
			ДанныеПодписи.Вставить("Отпечаток", СвойстваПодписи.Отпечаток);
			ДанныеПодписи.Вставить("ДатаПодписи", СвойстваПодписи.ДатаПодписи);
			ДанныеПодписи.Вставить("Комментарий", СвойстваПодписи.Комментарий);
			ДанныеПодписи.Вставить("ИмяФайлаПодписи", СвойстваПодписи.ИмяФайлаПодписи);
			ДанныеПодписи.Вставить("КомуВыданСертификат", СвойстваПодписи.КомуВыданСертификат);
			ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", СвойстваПодписи.Сертификат);
			УстановившийПодписьИд = Строка(СвойстваПодписи.УстановившийПодпись.УникальныйИдентификатор());
			ДанныеПодписи.Вставить("УстановившийПодписьИд", УстановившийПодписьИд);
			ДанныеПодписи.Вставить("УстановившийПодпись", Строка(СвойстваПодписи.УстановившийПодпись));
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВыбратьЗначениеДополнительногоРеквизитаВыборТипаЗавершение(ИмяТипа, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	Элемент = ПараметрыОповещения.Элемент;
	
	Если ИмяТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент)
	
КонецПроцедуры

Процедура ВыбратьЗначениеДополнительногоРеквизитаОбработка(ИмяТипа, Форма, Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ИмяТипа = "integer" 
		ИЛИ ИмяТипа = "boolean" 
		ИЛИ ИмяТипа = "string" 
		ИЛИ ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		//ввод значения примитивного типа - строка, число и т.п.
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		ПараметрыОповещения.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеДополнительногоРеквизитаВводЗначенияЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		ПоказатьВводЗначения(Оповещение, ТекущиеДанные.Значение, ТекущиеДанные.Свойство, ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		
		Владелец = Новый Структура;
		Владелец.Вставить("id", ТекущиеДанные.СвойствоID);
		Владелец.Вставить("type", ТекущиеДанные.СвойствоТип);
		
		Отбор = Новый Структура;
		Если ИмяТипа = "DMObjectPropertyValue"
			Или ИмяТипа = "DMObjectPropertyValueHierarchy" Тогда
			Отбор.Вставить("additionalProperty", Владелец);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		ПараметрыОповещения.Вставить("Форма", Форма);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеДополнительногоРеквизитаЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, Форма,,,, Оповещение);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыбратьЗначениеДополнительногоРеквизитаВводЗначенияЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения.Элемент.Родитель.ТекущиеДанные.Значение = Результат;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ВыбратьЗначениеДополнительногоРеквизитаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Элемент = ПараметрыОповещения.Элемент;
	Форма = ПараметрыОповещения.Форма;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Элемент.Родитель.ТекущиеДанные.ЗначениеID = Результат.РеквизитID;
		Элемент.Родитель.ТекущиеДанные.ЗначениеТип = Результат.РеквизитТип;
		Элемент.Родитель.ТекущиеДанные.Значение = Результат.РеквизитПредставление;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВыборТипаЗавершение(ИмяТипа, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ТекущиеДанные = ПараметрыОповещения.ТекущиеДанные;
	Реквизит = ПараметрыОповещения.Реквизит;
	
	Если ИмяТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит)
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеОбработка(ИмяТипа, Форма, ТекущиеДанные, Реквизит)
	
	Если ИмяТипа = "integer" 
		ИЛИ ИмяТипа = "boolean" 
		ИЛИ ИмяТипа = "string" 
		ИЛИ ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВводЗначенияЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		 
		ПоказатьВводЗначения(Оповещение, ТекущиеДанные[Реквизит], НСтр("ru='Введите значение'"), ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Форма", Форма);
		ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеЗавершение", ИнтеграцияС1СДокументооборотКлиент, ПараметрыОповещения);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", 
			ПараметрыФормы, Форма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеВводЗначенияЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит] = Результат;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьЗначениеРеквизитаСоставногоТипаВТаблицеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит + "ID"] = Результат.РеквизитID;
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит + "Тип"] = Результат.РеквизитТип;
		ПараметрыОповещения.ТекущиеДанные[ПараметрыОповещения.Реквизит] = Результат.РеквизитПредставление;
		ПараметрыОповещения.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПолучениеОбъектовАдресацииРолиЗавершение(РезультатЗаполнения, ПараметрыОповещения) Экспорт
	
	ОписаниеОповещенияОЗакрытии = ПараметрыОповещения.ОписаниеОповещенияОЗакрытии;
	ИмяРоли = ПараметрыОповещения.ИмяРоли;
	ТипРоли = ПараметрыОповещения.ТипРоли;
	IDРоли = ПараметрыОповещения.IDРоли;
	
	ДанныеВозврата = Новый Структура;
	
	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		Если РезультатЗаполнения.Результат = "ОК" Тогда
	
			ДанныеВозврата.Вставить("Исполнитель", РезультатЗаполнения.Исполнитель);
			ДанныеВозврата.Вставить("ИсполнительID", РезультатЗаполнения.ИсполнительID);
			ДанныеВозврата.Вставить("ИсполнительТип", РезультатЗаполнения.ИсполнительТип);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", РезультатЗаполнения.ОсновнойОбъектАдресации);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", РезультатЗаполнения.ОсновнойОбъектАдресацииID);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", РезультатЗаполнения.ОсновнойОбъектАдресацииТип);
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", РезультатЗаполнения.ДополнительныйОбъектАдресации);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", РезультатЗаполнения.ДополнительныйОбъектАдресацииID);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", РезультатЗаполнения.ДополнительныйОбъектАдресацииТип);
			
		ИначеЕсли РезультатЗаполнения.Результат = "БезОбъектовАдресации" Тогда
			
			ДанныеВозврата.Вставить("Исполнитель", ИмяРоли);
			ДанныеВозврата.Вставить("ИсполнительID", IDРоли);
			ДанныеВозврата.Вставить("ИсполнительТип", ТипРоли);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", "");
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", "");
			
		Иначе
			ДанныеВозврата = Неопределено;
		КонецЕсли;
	Иначе
		ДанныеВозврата = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ДанныеВозврата);
	
КонецПроцедуры

Процедура ПрименитьВыборУчастникаБизнесПроцессаВСпискеЗавершение(РезультатВыбораРоли, ПараметрыОповещения) Экспорт
	
	ТекущиеДанные = ПараметрыОповещения.Элемент.ТекущиеДанные;
	
	Если РезультатВыбораРоли = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	ТекущиеДанные.Исполнитель = РезультатВыбораРоли.Исполнитель;
	ТекущиеДанные.ИсполнительID = РезультатВыбораРоли.ИсполнительID;
	ТекущиеДанные.ИсполнительТип = РезультатВыбораРоли.ИсполнительТип;
	
	ТекущиеДанные.ОсновнойОбъектАдресации = РезультатВыбораРоли.ОсновнойОбъектАдресации;
	ТекущиеДанные.ОсновнойОбъектАдресацииID = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
	ТекущиеДанные.ОсновнойОбъектАдресацииТип = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
	
	ТекущиеДанные.ДополнительныйОбъектАдресации = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
	ТекущиеДанные.ДополнительныйОбъектАдресацииID = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
	ТекущиеДанные.ДополнительныйОбъектАдресацииТип = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
	
	ПараметрыОповещения.Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПереключитьХронометражЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Записи = ИнтеграцияС1СДокументооборотВызовСервера.
			ПереключитьХронометражПоОбъектамДокументооборота(ПараметрыОповещения.АктивныеЗаписи);
		
		Для Каждого Запись Из Записи Цикл
			Параметры = Новый Структура;
			Параметры.Вставить("name", Запись.Источник);
			Параметры.Вставить("id", Запись.ИсточникID);
			Параметры.Вставить("type", Запись.ИсточникТип);
			Оповестить("Запись_ДокументооборотТрудозатраты", Параметры, Запись.ИсточникID);
		КонецЦикла;
		
		ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.ПереключитьХронометражПоВнешнемуОбъекту(
			ПараметрыОповещения.ОбъектИС,
			ПараметрыОповещения.ПараметрыХронометража);
			
		ПараметрыОповещения.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка = 
			ПараметрыХронометража.ВключенХронометраж;
		
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(ПараметрыОповещения.ОбъектИС));
			Состояние(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение(ТипБизнесПроцесса, Параметры) Экспорт 
	
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьОбъект(ТипБизнесПроцесса, Неопределено, , Параметры);
	
КонецПроцедуры

Процедура ПрименитьВыборУчастникаБизнесПроцессаВПолеЗавершение(РезультатВыбораРоли, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	ИмяПоля = ПараметрыОповещения.ИмяПоля;
	ИмяПоляОбъектаАдресации = ПараметрыОповещения.ИмяПоляОбъектаАдресации;
	
	Если РезультатВыбораРоли = Неопределено Тогда
		Возврат; 
	КонецЕсли;
		
	Форма[ИмяПоля] = РезультатВыбораРоли.Исполнитель;
	Форма[ИмяПоля + "id"] = РезультатВыбораРоли.ИсполнительID;
	Форма[ИмяПоля + "Тип"] = РезультатВыбораРоли.ИсполнительТип;
	
	Форма["Основной" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ОсновнойОбъектАдресации;
	Форма["Основной" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
	Форма["Основной" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
	
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
	Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик динамически подключаемой команды указания трудозатрат.
//
// Парамтеры:
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - объект трудозатрат.
//   Форма - УправляемаяФорма - форма этого объекта.
//
Процедура УказатьТрудозатраты(Источник, Форма)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		Ссылка = Источник.Ссылка;
	Иначе
		Если Источник.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Ссылка = Неопределено;
		Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
			Ссылка = Источник.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УказатьТрудозатратыПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма);
	НачатьПоискСвязанногоОбъектаДО(Ссылка, ОписаниеОповещения);
	
КонецПроцедуры

// Продолжает ввод трудозатрат после нахождения или создания связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - описание объекта ДО (id, type, name), или
//             - Неопределено - если связанный объект не выбран.
//   Форма     - форма объекта хронометража.
//
Процедура УказатьТрудозатратыПослеПоискаСвязанногоОбъектаДО(Результат, Форма) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Источник", Результат.name);
	ПараметрыФормы.Вставить("ИсточникID", Результат.id);
	ПараметрыФормы.Вставить("ИсточникТип", Результат.type);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьПометкуКнопкиПереключитьХронометраж",
		ИнтеграцияС1СДокументооборотКлиент,
		Форма.Элементы);
		
	ОткрытьФорму(
		"Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
		ПараметрыФормы,
		Форма.Элементы,,,,
		Оповещение);
	
КонецПроцедуры

// Обработчик подключаемой команды переключения хронометража.
//
// Парамтеры:
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - объект хронометража.
//   Форма - УправляемаяФорма - форма этого объекта.
//
Процедура ПереключитьХронометраж(Источник, Форма)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		Ссылка = Источник.Ссылка;
	Иначе
		Если Источник.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Ссылка = Неопределено;
		Если Не Источник.ТекущиеДанные.Свойство("Ссылка", Ссылка) Тогда
			Ссылка = Источник.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", Ссылка);
	Параметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереключитьХронометражПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборотКлиент,
		Параметры);
		
	НачатьПоискСвязанногоОбъектаДО(Ссылка, ОписаниеОповещения);
	
КонецПроцедуры

// Продолжает переключение хронометража после нахождения или создания связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - описание объекта ДО (id, type, name), или
//             - Неопределено - если связанный объект не выбран.
//   Параметры - Структура со свойством:
//     ОбъектИС  - ссылка на объект хронометража;
//     Форма     - форма объекта хронометража.
//
Процедура ПереключитьХронометражПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.
		ПараметрыХронометражаОбъекта(Параметры.ОбъектИС);
	
	НуженДиалог = Истина;
	
	ДлительностьРаботы = ИнтеграцияС1СДокументооборотКлиент.
		ПолучитьДлительностьРаботы(ПараметрыХронометража.ДатаНачалаХронометража);
	Если ДлительностьРаботы < 60 Тогда // меньше 1 минуты
		НуженДиалог = Ложь;
	КонецЕсли;
	
	Если НуженДиалог Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", Результат.name);
		ПараметрыФормы.Вставить("ИсточникID", Результат.id);
		ПараметрыФормы.Вставить("ИсточникТип", Результат.type);
		
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьПометкуКнопкиПереключитьХронометраж",
			ИнтеграцияС1СДокументооборотКлиент,
			Параметры.Форма.Элементы);
		
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборот.Форма.ДобавлениеРаботы",
			ПараметрыФормы,
			Параметры.ОбъектИС,,,,
			Оповещение);
		
	Иначе
		
		Если ПараметрыХронометража.ВключенХронометраж Тогда
			
			ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.
				ПереключитьХронометражПоВнешнемуОбъекту(Параметры.ОбъектИС, ПараметрыХронометража);
			
			Параметры.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка = 
				ПараметрыХронометража.ВключенХронометраж;
				
			Если ПараметрыХронометража.ВключенХронометраж Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Параметры.ОбъектИС));
				Состояние(Текст);
			КонецЕсли;
			
		Иначе
			
			АктивныеЗаписи = ИнтеграцияС1СДокументооборотВызовСервера.АктивныеЗаписиХронометража();
			
			Если АктивныеЗаписи.Количество() = 0 Тогда
				
				ПараметрыХронометража = ИнтеграцияС1СДокументооборотВызовСервера.
					ПереключитьХронометражПоВнешнемуОбъекту(Параметры.ОбъектИС, ПараметрыХронометража);
				Параметры.Форма.Элементы.ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж.Пометка = 
					ПараметрыХронометража.ВключенХронометраж;
					
				Если ПараметрыХронометража.ВключенХронометраж Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Включен хронометраж по ""%1""'"), Строка(Параметры.ОбъектИС));
					Состояние(Текст);
				КонецЕсли;
				
			Иначе
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ОбъектИС", Параметры.ОбъектИС);
				ПараметрыОповещения.Вставить("ОбъектДО", Результат);
				ПараметрыОповещения.Вставить("ПараметрыХронометража", ПараметрыХронометража);
				ПараметрыОповещения.Вставить("АктивныеЗаписи", АктивныеЗаписи);
				ПараметрыОповещения.Вставить("Форма", Параметры.Форма);
				
				Оповещение = Новый ОписаниеОповещения(
					"ПереключитьХронометражЗавершение",
					ИнтеграцияС1СДокументооборотКлиент,
					ПараметрыОповещения);
					
				СтрокаОбъектовХронометража = "";
				Для Каждого Запись Из АктивныеЗаписи Цикл 
					СтрокаОбъектовХронометража = СтрокаОбъектовХронометража + Символы.Таб 
						+ Запись.Источник + Символы.ПС;
				КонецЦикла;
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Включен хронометраж по другим объектам:
						|%1
						|Отключить хронометраж и зафиксировать трудозатраты перед включением нового хронометража?'"),
						СтрокаОбъектовХронометража);
				Кнопки = новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Отмена);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, поддерживает ли клиент синхронные вызовы.
//
Функция КлиентПоддерживаетСинхронныеВызовы()
	
#Если ВебКлиент Тогда
	// В Chrome расширение не подключается.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияПрограммыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СистемнаяИнформация.ИнформацияПрограммыПросмотра, " ");
	
	Для Каждого ИнформацияПрограммы Из ИнформацияПрограммыМассив Цикл
		Если Найти(ИнформацияПрограммы, "Chrome") > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

// Начинает печать файла во внешним приложением или, для некоторых видов файлов - средствами платформы.
//
Процедура НапечататьФайлПриложением(ПолноеИмяФайла)
	
	РасширенияИсключения = 
	" m3u, m4a, mid, midi, mp2, mp3, mpa, rmi, wav, wma, 
	| 3g2, 3gp, 3gp2, 3gpp, asf, asx, avi, m1v, m2t, m2ts, m2v, m4v, mkv, mov, mp2v, mp4, mp4v, mpe, mpeg, mts, vob, wm, wmv, wmx, wvx,
	| 7z, zip, rar, arc, arh, arj, ark, p7m, pak, package, 
	| app, com, exe, jar, dll, res, iso, isz, mdf, mds,
	| cf, dt, epf, erf";
	
	ПозицияТочки = СтрНайти(ПолноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки <> 0 Тогда
		Расширение = НРег(Сред(ПолноеИмяФайла, ПозицияТочки + 1));
	Иначе
		Расширение = "";
	КонецЕсли;
	
	Расширение = НРег(Расширение);
	Если СтрНайти(РасширенияИсключения, " " + Расширение + ",") > 0 Тогда 
		Возврат;
	
	ИначеЕсли Расширение = "grs" Тогда
		Схема = Новый ГрафическаяСхема; 
		Схема.Прочитать(ПолноеИмяФайла);
		Схема.Напечатать();;
		
	ИначеЕсли Расширение = "mxl" Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Напечатать();
		
	Иначе
		
		Попытка
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
				Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
			КонецЕсли;
			НапечататьИзПриложенияПоИмениФайла(ПолноеИмяФайла);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Описание=""%1""'"),
				КраткоеПредставлениеОшибки(Инфо))); 
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет печать файла внешним приложением.
//
Процедура НапечататьИзПриложенияПоИмениФайла(ИмяОткрываемогоФайла)
	
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;
		
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Shell = Новый COMОбъект("Shell.Application");
		Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "print", 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрерватьПроцессПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ПрерватьПроцесс(Параметры.Форма.ID, Параметры.Форма.Тип);
	
	Оповестить_ЗаписьБизнесПроцесса(Параметры.Форма, Ложь);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Процесс прерван'"),,
		Параметры.Форма.Заголовок,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти
