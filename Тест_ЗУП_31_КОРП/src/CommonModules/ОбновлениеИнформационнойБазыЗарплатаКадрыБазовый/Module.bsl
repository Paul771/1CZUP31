#Область СлужебныйПрограммныйИнтерфейс

Функция ОсновнойРежимВыполненияОбновления() Экспорт
	РежимОбновления = "Монопольно";
	ЗарплатаКадрыПереопределяемый.УстановитьОсновнойРежимВыполненияОбновления(РежимОбновления);
	Возврат РежимОбновления;
КонецФункции

Процедура УстановитьПараметрОбновления(ПараметрыОбновления, ИмяПараметра, Значение) Экспорт
	Если ПараметрыОбновления <> НеОпределено Тогда
		ПараметрыОбновления[ИмяПараметра] = Значение;
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьОбновлениеДанных(ПараметрыОбновления, ИмяПространстваБлокировки, ПолеБлокировки, ЗначениеБлокировки) Экспорт
	Если ПараметрыОбновления = НеОпределено Тогда
		Возврат Истина;
	КонецЕсли;
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировки);
	Если ЗначениеЗаполнено(ПолеБлокировки) Тогда
		ЭлементБлокировки.УстановитьЗначение(ПолеБлокировки, ЗначениеБлокировки);
	КонецЕсли;
	Попытка 
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , ЗначениеБлокировки, ИмяПространстваБлокировки);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура ЗавершитьОбновлениеДанных(ПараметрыОбновления) Экспорт
	Если ПараметрыОбновления = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

#Область ОбъявлениеБиблиотеки

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для ее использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// ее свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыБазовая";
	Описание.Версия = "3.1.6.3";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.СоздатьВалютуУчетаЗаработнойПлаты";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьРеквизитыПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьРеквизитыОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьРеквизитыПодчиненныхПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьТабличнуюЧастьФизическиеЛица";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УдалитьЗаписиРегистровСведенийСПустымИзмерением";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ВычетыПоДоходамНДФЛ) И
		ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.РазмерВычетовНДФЛ) И
		ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ТарифыСтраховыхВзносов) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.3";
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УдалитьЗаписиРегистровСведенийСПустымИзмерениемОбщиеДанные";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьТаблицуВзносыДокументаНачислениеЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьТаблицыНДФЛДокументаНачислениеЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.7";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьВидОперацииПоЗарплатеВУдержаниях";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОтключитьДопустимостьМножестваЗначенийРабочегоТелефона";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбновитьДанныеДляУчетаСтраховыхВзносовВРазрезеНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.35";
	Обработчик.Процедура = "РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ЗаполнитьИсториюРегистрацийВНалоговомОргане";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыТарифовСтраховыхВзносов) Тогда
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиНаОбъектыСИдентификаторомВидыТарифовСтраховыхВзносов";
	Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ) Тогда
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиНаОбъектыСИдентификаторомСтатусыНалогоплательщиковПоНДФЛ";
	Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольнения) Тогда
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиНаОбъектыСИдентификаторомОснованияУвольнения";
	Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиНаОбъектыСИдентификаторомСпособыВыплатыЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьРегистрОтработанноеВремяПоСотрудникам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.2";
	Обработчик.Процедура = "РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ЗаполнитьИсториюРегистрацийВНалоговомОрганеНаДатуОтсчетаПериодическихСведенийСПериодомМесяц";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.6";
	Обработчик.Процедура = "Справочники.СпособыОкругленияПриРасчетеЗарплаты.ЗаполнитьПравилаОкругленияСпособовОкругления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.6";
	Обработчик.Процедура = "РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.МинимальнаяОплатаТрудаРФ) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.5.160";
		Обработчик.Процедура = "РегистрыСведений.МинимальнаяОплатаТрудаРФ.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПерезаписатьНастройкиЗарплатаКадры";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.8";
	Обработчик.Процедура = "Справочники.СпособыОкругленияПриРасчетеЗарплаты.СоздатьСпособОкругленияДоРубляВБольшуюСторону";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьПересозданныеОбщиеДанные";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.23";
	Обработчик.Процедура = "ЗарплатаКадрыВнутренний.ЗаменитьРазделенныеДанныеОбщими";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьРайонныйКоэффициентРФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.110";
	Обработчик.Процедура = "РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.ЗаполнитьНастройкуУпорядочивания";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.144";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаполнитьТерриториюВыполненияРаботВОрганизацииВНачисленияУдержанияПоСотрудникам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиНаРазделыДатыЗапретаИзменения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.32";
	Обработчик.Процедура = "Справочники.ПодразделенияОрганизаций.ОбновитьОбособленныеПодразделения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.4";
	Обработчик.Процедура = "Справочники.ПодразделенияОрганизаций.ОбновитьОбособленныеПодразделения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.20";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5aceaee2-f453-44a7-9794-f8f33b3b0bfe");
	Обработчик.Процедура = "РегистрыСведений.ПериодыСтажаПФР.ЗаполнитьГодЗаписи";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.33";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a3cfe863-fa67-4f31-8fa7-6b6f4db1d70c");
	Обработчик.Процедура = "РегистрыСведений.ПлановыеНачисления.ЗаполнитьИнтервальныйРегистр";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.98";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6dd9b7f5-4078-471b-92ca-f25d081a30bf");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьВладельцевРегистрацийВНалоговомОргане";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия          = "3.1.3.121";
		Обработчик.РежимВыполнения = "Отложенно";
		Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9729dd3f-55bf-11e7-bae5-5404a6a6895d");
		Обработчик.Процедура       = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОтключитьРассылкиСНекорректнымиНастройкамиОтчетов";
		Обработчик.Комментарий     = НСтр("ru = 'Отключение рассылок с некорректными настройками персонифицированных отчетов.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрыНабораСвойствСтатьиРасходовЗарплата";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0e407542-1206-4792-b919-3289db1010ba");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрыНабораСвойствСтатьиФинансированияЗарплата";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6e442ad2-f76a-4f48-aaed-f172a0309054");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	КадровыйУчет.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛ.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	РасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтраховыхВзносов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ПерсонифицированныйУчет.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПособийСоциальногоСтрахования.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ПрямыеВыплатыПособийСоциальногоСтрахования.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтажаПФР.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетРабочегоВремени.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ЗарплатаКадрыСоставДокументов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульОбъектыБазовойРеализации = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбъектыБазовойРеализации");
		МодульОбъектыБазовойРеализации.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульУчетДепонированнойЗарплаты = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		МодульУчетДепонированнойЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадры");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.УчетФактическиПолученныхДоходов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетФактическиПолученныхДоходов");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Процедура заполняет в документах табличную часть «Физические лица», 
// добавленную для целей ограничения доступа.
//
Процедура ЗаполнитьТабличнуюЧастьФизическиеЛица() Экспорт
	
	// Выявляем состав документов, имеющих табличную часть Физические лица.
	// В соответствие накапливаем сведения о табличных частях документов, 
	// имеющих реквизиты типа Физическое лицо.
	ОбрабатываемыеДокументы = Новый Соответствие;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ФизическиеЛица") <> Неопределено Тогда
			ТабличныеЧастиСФизлицами = Новый Соответствие;
			Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				Если ТабличнаяЧасть.Имя = "ФизическиеЛица" Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Типы = Реквизит.Тип.Типы();
					Если Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
						ТабличныеЧастиСФизлицами.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ТабличныеЧастиСФизлицами.Количество() > 0 Тогда
				ОбрабатываемыеДокументы.Вставить(МетаданныеДокумента.Имя, ТабличныеЧастиСФизлицами);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбрабатываемыеДокументы.Количество() = 0 Тогда
		// Нет документов, подлежащих обработке.
		Возврат;
	КонецЕсли;
	
	// Составляем запрос к документам
	// - из табличных частей документов, имеющих реквизиты типа Физическое лицо, 
	//	выбираем физических лиц,
	// - сравниваем с табличной частью Физические лица,
	// - заполняем табличную часть, если есть различия.
	
	ШаблонТекстаНачало = 
	"ВЫБРАТЬ %5
	|	%1.Ссылка КАК Ссылка,
	|	%1.%3 КАК ФизическоеЛицо
	|ПОМЕСТИТЬ %4
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ШаблонТекстаПродолжение = "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	%1.Ссылка,
	|	%1.%3
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ТекстЗапросаКТабличнымЧастям = "";
	ТекстЗапросаКТабличнойЧастиФизическиеЛица = "";
	Для Каждого ДанныеДокумента Из ОбрабатываемыеДокументы Цикл
		ИмяДокумента = ДанныеДокумента.Ключ;
		Для Каждого КлючИЗначение Из ДанныеДокумента.Значение Цикл
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			ИмяРеквизита = КлючИЗначение.Значение;
			Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнымЧастям), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
			ТекстЗапросаКТабличнымЧастям = ТекстЗапросаКТабличнымЧастям + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон, ИмяТабличнойЧасти, ИмяДокумента, ИмяРеквизита, "ФизлицаДокументов", "РАЗЛИЧНЫЕ");
		КонецЦикла;
		Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнойЧастиФизическиеЛица), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
		ТекстЗапросаКТабличнойЧастиФизическиеЛица = ТекстЗапросаКТабличнойЧастиФизическиеЛица + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон, "ФизическиеЛица", ИмяДокумента, "ФизическоеЛицо", "ФизлицаТабличнойЧасти");
	КонецЦикла;
	
	ТекстЗапроса = 
	ТекстЗапросаКТабличнымЧастям + ";" + 
	ТекстЗапросаКТабличнойЧастиФизическиеЛица + ";" + 
	"ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка
	|ПОМЕСТИТЬ НедоЗаполненныеДокументы
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФизлицаТабличнойЧасти КАК ФизлицаТабличнойЧасти
	|		ПО (ФизлицаТабличнойЧасти.Ссылка = ФизлицаДокументов.Ссылка)
	|			И (ФизлицаТабличнойЧасти.ФизическоеЛицо = ФизлицаДокументов.ФизическоеЛицо)
	|ГДЕ
	|	ФизлицаТабличнойЧасти.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка,
	|	ФизлицаДокументов.ФизическоеЛицо
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|ГДЕ
	|	ФизлицаДокументов.Ссылка В
	|			(ВЫБРАТЬ
	|				НедоЗаполненныеДокументы.Ссылка
	|			ИЗ
	|				НедоЗаполненныеДокументы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицаДокументов.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ФизическиеЛица.Добавить(), Выборка);
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВалютуУчетаЗаработнойПлаты() Экспорт
	
	// Создаем "Рубли".
	
	Коды = Новый Массив;
	Коды.Добавить("643");
	
	РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодчиненныхПодразделений() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подчиненное,
	|	ОбособленныеПодразделения.Ссылка КАК Вышестоящее
	|ПОМЕСТИТЬ ВТПодразделенияПодчиненныеОбособленным
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ОбособленныеПодразделения
	|		ПО (ОбособленныеПодразделения.ОбособленноеПодразделение)
	|			И (Подразделения.Ссылка В (ОбособленныеПодразделения.Ссылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПодразделенияПодчиненныеОбособленным.Вышестоящее ЕСТЬ NULL 
	|			ТОГДА Подразделения.Владелец
	|		ИНАЧЕ ПодразделенияПодчиненныеОбособленным.Вышестоящее
	|	КОНЕЦ КАК ВышестоящееПодразделение,
	|	ВЫБОР
	|		КОГДА ПодразделенияПодчиненныеОбособленным.Вышестоящее ЕСТЬ NULL 
	|			ТОГДА Подразделения.Владелец.ОбособленноеПодразделение
	|		ИНАЧЕ ПодразделенияПодчиненныеОбособленным.Вышестоящее.ОбособленноеПодразделение
	|	КОНЕЦ КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияПодчиненныеОбособленным КАК ПодразделенияПодчиненныеОбособленным
	|		ПО Подразделения.Ссылка = ПодразделенияПодчиненныеОбособленным.Подчиненное
	|ГДЕ
	|	(Подразделения.РайонныйКоэффициент <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РайонныйКоэффициент
	|				ИНАЧЕ Подразделения.Родитель.РайонныйКоэффициент
	|			КОНЕЦ
	|			ИЛИ Подразделения.РайонныйКоэффициент <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РайонныйКоэффициент
	|				ИНАЧЕ Подразделения.Родитель.РайонныйКоэффициент
	|			КОНЕЦ
	|			ИЛИ Подразделения.РегистрацияВНалоговомОргане <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РегистрацияВНалоговомОргане
	|				ИНАЧЕ Подразделения.Родитель.РегистрацияВНалоговомОргане
	|			КОНЕЦ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИсточникДанных = Выборка.ВышестоящееПодразделение.ПолучитьОбъект();
		ИсточникДанных.ДополнительныеСвойства.Вставить("ОбособленноеПодразделение", Выборка.ОбособленноеПодразделение);
		ЗарплатаКадры.УстановитьРеквизитыВПодчиненныхПодразделениях(ИсточникДанных);
	КонецЦикла;
КонецПроцедуры

// Выполняет заполнение и запись Организаций
// для которых необходимо выполнить начальное заполнение значений.
//
Процедура ЗаполнитьРеквизитыОрганизаций() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	ВЫБОР
	|		КОГДА Организации.РайонныйКоэффициент = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УстановитьРайонныйКоэффициент,
	|	Организации.ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА Организации.ОбособленноеПодразделение
	|			ТОГДА ИСТИНА
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Организации.ГоловнаяОрганизация = Организации.Ссылка
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НовыйОбособленноеПодразделение,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ Организации.ГоловнаяОрганизация
	|	КОНЕЦ КАК НовыйГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;

		Если Выборка.УстановитьРайонныйКоэффициент Тогда
			ОрганизацияОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		Если Выборка.ОбособленноеПодразделение <> Выборка.НовыйОбособленноеПодразделение Тогда
			ОрганизацияОбъект.ОбособленноеПодразделение = Выборка.НовыйОбособленноеПодразделение;
		КонецЕсли;
		Если Выборка.ГоловнаяОрганизация <> Выборка.НовыйГоловнаяОрганизация Тогда
			ОрганизацияОбъект.ГоловнаяОрганизация = Выборка.НовыйГоловнаяОрганизация;
		КонецЕсли;
		
		Если ОрганизацияОбъект.Модифицированность() Тогда
			ОрганизацияОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение и запись Подразделений
// для которых необходимо выполнить начальное заполнение значений.
//
Процедура ЗаполнитьРеквизитыПодразделений() Экспорт
	
	// Заполнение Районного коэффициента.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.РайонныйКоэффициент = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПодразделениеОбъект.РайонныйКоэффициент = 1;
		ПодразделениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиРегистровСведенийСПустымИзмерением() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ДоходыПредыдущегоМестаРаботыНДФЛ"" КАК ИмяРегистра,
	|	""ГоловнаяОрганизация"" КАК ПолеОтбора,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ПустоеЗначение
	|ИЗ
	|	РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыПредыдущегоМестаРаботыНДФЛ
	|ГДЕ
	|	ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""УчетнаяПолитикаПоНДФЛ"",
	|	""ГоловнаяОрганизация"",
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|ГДЕ
	|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НастройкиЗарплатаКадры"",
	|	""Организация"",
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадры КАК НастройкиЗарплатаКадры
	|ГДЕ
	|	НастройкиЗарплатаКадры.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам"",
	|	""Организация"",
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
	|ГДЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев"",
	|	""Организация"",
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев КАК СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев
	|ГДЕ
	|	СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НастройкиУчетаСтраховыхВзносов"",
	|	""Организация"",
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
	|ГДЕ
	|	НастройкиУчетаСтраховыхВзносов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяРегистра = Выборка.ИмяРегистра;
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Набор.Отбор[Выборка.ПолеОтбора].Установить(Выборка.ПустоеЗначение);
		Набор.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьЗаписиРегистровСведенийСПустымИзмерениемОбщиеДанные() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВычетыПоДоходамНДФЛ"" КАК ИмяРегистра,
	|	""КодДохода"" КАК ПолеОтбора,
	|	ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка) КАК ПустоеЗначение
	|ИЗ
	|	РегистрСведений.ВычетыПоДоходамНДФЛ КАК ВычетыПоДоходамНДФЛ
	|ГДЕ
	|	ВычетыПоДоходамНДФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""РазмерВычетовНДФЛ"",
	|	""КодВычета"",
	|	ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.РазмерВычетовНДФЛ КАК РазмерВычетовНДФЛ
	|ГДЕ
	|	РазмерВычетовНДФЛ.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ТарифыСтраховыхВзносов"",
	|	""ВидТарифа"",
	|	ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.ТарифыСтраховыхВзносов КАК ТарифыСтраховыхВзносов
	|ГДЕ
	|	ТарифыСтраховыхВзносов.ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяРегистра = Выборка.ИмяРегистра;
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Набор.Отбор[Выборка.ПолеОтбора].Установить(Выборка.ПустоеЗначение);
		Набор.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		Набор.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицуВзносыДокументаНачислениеЗарплаты() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
	|		ПО ИсчисленныеСтраховыеВзносы.Регистратор = НачислениеЗарплатыВзносы.Ссылка
	|			И ИсчисленныеСтраховыеВзносы.НомерСтроки = НачислениеЗарплатыВзносы.НомерСтроки
	|ГДЕ
	|	НачислениеЗарплатыВзносы.НомерСтроки ЕСТЬ NULL 
	|	И ИсчисленныеСтраховыеВзносы.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленныеСтраховыеВзносы.НомерСтроки,
	|	ИсчисленныеСтраховыеВзносы.Регистратор,
	|	ИсчисленныеСтраховыеВзносы.ФизическоеЛицо,
	|	ИсчисленныеСтраховыеВзносы.ФФОМС,
	|	ИсчисленныеСтраховыеВзносы.ФФОМСЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ТФОМС,
	|	ИсчисленныеСтраховыеВзносы.ТФОМСЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ФСС,
	|	ИсчисленныеСтраховыеВзносы.ФССЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ФССНесчастныеСлучаи,
	|	ИсчисленныеСтраховыеВзносы.ПФРНакопительная,
	|	ИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ПФРСтраховая,
	|	ИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуЛетчикам,
	|	ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуШахтерам,
	|	ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ИсчисленныеСтраховыеВзносы.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсчисленныеСтраховыеВзносы.Регистратор,
	|	ИсчисленныеСтраховыеВзносы.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			// Возможны ситуации, когда нарушена ссылочная целостность, и регистратора нет в информационной базе.
			Продолжить;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(ДокументОбъект.Взносы.Добавить(), Выборка);
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыНДФЛДокументаНачислениеЗарплаты() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
	|		ПО (НачислениеЗарплатыНДФЛ.Ссылка = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор)
	|			И (НачислениеЗарплатыНДФЛ.ФизическоеЛицо = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо)
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
	|	И НачислениеЗарплатыНДФЛ.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоНДФЛ.Регистратор,
	|	РасчетыПоНДФЛ.ФизическоеЛицо,
	|	РасчетыПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыПоНДФЛ.Подразделение,
	|	СУММА(РасчетыПоНДФЛ.Сумма) КАК Налог
	|ПОМЕСТИТЬ ВТНДФЛ
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = РасчетыПоНДФЛ.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНДФЛ.Регистратор,
	|	РасчетыПоНДФЛ.ФизическоеЛицо,
	|	РасчетыПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыПоНДФЛ.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредоставленныеВычеты.Регистратор,
	|	ПредоставленныеВычеты.ФизическоеЛицо,
	|	ПредоставленныеВычеты.МесяцНалоговогоПериода,
	|	ПредоставленныеВычеты.КодВычета,
	|	ПредоставленныеВычеты.Подразделение,
	|	СУММА(ПредоставленныеВычеты.Сумма) КАК РазмерВычета
	|ПОМЕСТИТЬ ВТПредоставленныеВычеты
	|ИЗ
	|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ПредоставленныеВычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ПредоставленныеВычеты.Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставленныеВычеты.Регистратор,
	|	ПредоставленныеВычеты.ФизическоеЛицо,
	|	ПредоставленныеВычеты.МесяцНалоговогоПериода,
	|	ПредоставленныеВычеты.Подразделение,
	|	ПредоставленныеВычеты.КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.Регистратор,
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.МесяцНалоговогоПериода,
	|	НДФЛ.Подразделение,
	|	НДФЛ.Налог,
	|	ВЫБОР
	|		КОГДА ПредоставленныеВычеты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|			ТОГДА ПредоставленныеВычеты.КодВычета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ КАК ПримененныйВычетЛичныйКодВычета,
	|	ВЫБОР
	|		КОГДА ПредоставленныеВычеты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|			ТОГДА ПредоставленныеВычеты.РазмерВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененныйВычетЛичный,
	|	ВЫБОР
	|		КОГДА ПредоставленныеВычеты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ПредоставленныеВычеты.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА ПредоставленныеВычеты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|			ТОГДА 0
	|		ИНАЧЕ ПредоставленныеВычеты.РазмерВычета
	|	КОНЕЦ КАК РазмерВычета
	|ИЗ
	|	ВТНДФЛ КАК НДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленныеВычеты КАК ПредоставленныеВычеты
	|		ПО НДФЛ.Регистратор = ПредоставленныеВычеты.Регистратор
	|			И НДФЛ.ФизическоеЛицо = ПредоставленныеВычеты.ФизическоеЛицо
	|			И НДФЛ.Подразделение = ПредоставленныеВычеты.Подразделение
	|			И НДФЛ.МесяцНалоговогоПериода = ПредоставленныеВычеты.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛ.Регистратор,
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.МесяцНалоговогоПериода,
	|	НДФЛ.Подразделение,
	|	ПримененныйВычетЛичный УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			// Возможны ситуации, когда нарушена ссылочная целостность, и регистратора нет в информационной базе.
			Продолжить;
		КонецЕсли;
		СравнениеСтрок = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение");
		Пока Выборка.Следующий() Цикл
			// Сравнение по ключевым полям позволяет понять, 
			// нужно ли добавлять новую строку в таблицу НДФЛ 
			// или это строка с вычетами по той же строке таблицы НДФЛ.
			ДобавлятьСтрокуНДФЛ = Ложь;
			Для Каждого КлючИЗначение Из СравнениеСтрок Цикл
				Если КлючИЗначение.Значение = Неопределено Тогда
					ДобавлятьСтрокуНДФЛ = Истина;
					Прервать;
				КонецЕсли;
				Если КлючИЗначение.Значение <> Выборка[КлючИЗначение.Ключ] Тогда
					ДобавлятьСтрокуНДФЛ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ДобавлятьСтрокуНДФЛ Тогда
				СтрокаНДФЛ = ДокументОбъект.НДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, Выборка);
				СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = СтрокаНДФЛ.НомерСтроки - 1;
				ЗаполнитьЗначенияСвойств(СравнениеСтрок, Выборка);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.КодВычета) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВычета = ДокументОбъект.ПримененныеВычетыНаДетейИИмущественные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВычета, Выборка);
			СтрокаВычета.ИдентификаторСтрокиНДФЛ = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииПоЗарплатеВУдержаниях() Экспорт

	СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	Удержания.КатегорияУдержания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.ВидОперацииПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СвойстваУдержания = СвойстваУдержаний.Получить(Выборка.КатегорияУдержания);
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдержаниеОбъект.ВидОперацииПоЗарплате = СвойстваУдержания.ВидОперацииПоЗарплате;
		УдержаниеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьДопустимостьМножестваЗначенийРабочегоТелефона() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФизическиеЛицаКонтактнаяИнформация.НомерСтроки) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоЗаписейНаФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КоличествоЗаписейНаФизическоеЛицо.Количество) КАК МаксимальноеКоличество
		|ПОМЕСТИТЬ ВТМаксимальноеКоличествоЗаписей
		|ИЗ
		|	ВТКоличествоЗаписейНаФизическоеЛицо КАК КоличествоЗаписейНаФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальноеКоличествоЗаписей КАК МаксимальноеКоличествоЗаписей
		|		ПО (ЕСТЬNULL(МаксимальноеКоличествоЗаписей.МаксимальноеКоличество, 0) > 1)
		|ГДЕ
		|	ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица)
		|	И ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений
		|	И МаксимальноеКоличествоЗаписей.МаксимальноеКоличество ЕСТЬ NULL ");
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// ТелефонРабочийФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.РазрешитьВводНесколькихЗначений = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
КонецПроцедуры

Процедура ОбновитьДанныеДляУчетаСтраховыхВзносовВРазрезеНачислений() Экспорт

	ЗарплатаКадрыВнутренний.ОбновитьДанныеДляУчетаСтраховыхВзносовВРазрезеНачислений();

КонецПроцедуры

Процедура ЗаменитьСсылкиНаОбъектыСИдентификаторомВидыТарифовСтраховыхВзносов() Экспорт 
	
	Справочники.ВидыТарифовСтраховыхВзносов.НачальноеЗаполнение();
	
	ПарыЗамен = Новый Соответствие;
	ЗаменяемыеСсылки = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыТарифовСтраховыхВзносов.Ссылка,
	               |	ВидыТарифовСтраховыхВзносов.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	               |ГДЕ
	               |	ВидыТарифовСтраховыхВзносов.УдалитьИдентификаторОбъекта <> """"
	               |	И НЕ ВидыТарифовСтраховыхВзносов.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов." + Выборка.Идентификатор);
		Если ПредопределенныйЭлемент <> Неопределено Тогда 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗарплатаКадры.ЗаменитьСсылки(ПарыЗамен);
	
	НайденныеСсылки = НайтиПоСсылкам(ЗаменяемыеСсылки);
	Для Каждого СправочникСсылка Из ЗаменяемыеСсылки Цикл
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		Если НайденныеСсылки.Найти(СправочникСсылка, "Ссылка") = Неопределено Тогда
			СправочникОбъект.Удалить();
		Иначе 
			СправочникОбъект.ПометкаУдаления = Истина;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаОбъектыСИдентификаторомСтатусыНалогоплательщиковПоНДФЛ() Экспорт 
	
	Справочники.СтатусыНалогоплательщиковПоНДФЛ.НачальноеЗаполнение();
	
	ПарыЗамен = Новый Соответствие;
	ЗаменяемыеСсылки = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыНалогоплательщиковПоНДФЛ.Ссылка,
	               |	СтатусыНалогоплательщиковПоНДФЛ.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.СтатусыНалогоплательщиковПоНДФЛ КАК СтатусыНалогоплательщиковПоНДФЛ
	               |ГДЕ
	               |	СтатусыНалогоплательщиковПоНДФЛ.УдалитьИдентификаторОбъекта <> """"
	               |	И НЕ СтатусыНалогоплательщиковПоНДФЛ.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ." + Выборка.Идентификатор);
		Если ПредопределенныйЭлемент <> Неопределено Тогда 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗарплатаКадры.ЗаменитьСсылки(ПарыЗамен);
	
	НайденныеСсылки = НайтиПоСсылкам(ЗаменяемыеСсылки);
	Для Каждого СправочникСсылка Из ЗаменяемыеСсылки Цикл
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		Если НайденныеСсылки.Найти(СправочникСсылка, "Ссылка") = Неопределено Тогда
			СправочникОбъект.Удалить();
		Иначе 
			СправочникОбъект.ПометкаУдаления = Истина;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаОбъектыСИдентификаторомОснованияУвольнения() Экспорт 

	КлассификаторXML = Справочники.ОснованияУвольнения.ПолучитьМакет("ОснованияУвольненияПоТКРФ").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	Для Каждого СтрокаКлассификатора Из КлассификаторТаблица Цикл
		Если ЗначениеЗаполнено(СтрокаКлассификатора.ID) Тогда 
			СправочникСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения." + СтрокаКлассификатора.ID);
			Если СправочникСсылка <> Неопределено Тогда
				СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
				СправочникОбъект.Наименование = СтрокаКлассификатора.Title;
				СправочникОбъект.ТекстОснования = СтрокаКлассификатора.Reason;
				СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
				СправочникОбъект.ОбменДанными.Загрузка = Истина;
				СправочникОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПарыЗамен = Новый Соответствие;
	ЗаменяемыеСсылки = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияУвольнения.Ссылка,
	               |	ОснованияУвольнения.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.ОснованияУвольнения КАК ОснованияУвольнения
	               |ГДЕ
	               |	ОснованияУвольнения.УдалитьИдентификаторОбъекта В (""Статья77п5"", ""Статья77п3"")
	               |	И НЕ ОснованияУвольнения.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения." + Выборка.Идентификатор);
		Если ПредопределенныйЭлемент <> Неопределено Тогда 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияУвольнения.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияУвольнения КАК ОснованияУвольнения
	               |ГДЕ
	               |	ОснованияУвольнения.Наименование = &Наименование
	               |	И НЕ ОснованияУвольнения.Предопределенный";
	
	Запрос.УстановитьПараметр("Наименование", НСтр("ru = 'Ст. 77 ч. 1 п. 1'"));
	Выборка = Запрос.Выполнить().Выбрать();
	ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения.Статья77п1");
	Если ПредопределенныйЭлемент <> Неопределено Тогда 
		Пока Выборка.Следующий() Цикл 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Наименование", НСтр("ru = 'Ст. 81 ч. 1 п. 2'"));
	Выборка = Запрос.Выполнить().Выбрать();
	ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения.Статья81п2");
	Если ПредопределенныйЭлемент <> Неопределено Тогда 
		Пока Выборка.Следующий() Цикл 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	
	ЗарплатаКадры.ЗаменитьСсылки(ПарыЗамен);
	
	НайденныеСсылки = НайтиПоСсылкам(ЗаменяемыеСсылки);
	Для Каждого СправочникСсылка Из ЗаменяемыеСсылки Цикл
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		Если НайденныеСсылки.Найти(СправочникСсылка, "Ссылка") = Неопределено Тогда
			СправочникОбъект.Удалить();
		Иначе 
			СправочникОбъект.ПометкаУдаления = Истина;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаОбъектыСИдентификаторомСпособыВыплатыЗарплаты() Экспорт 
	
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	Если СпособВыплатыСсылка <> Неопределено Тогда
		СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
		СпособВыплатыОбъект.Наименование = НСтр("ru = 'Зарплата за месяц'");
		СпособВыплатыОбъект.Записать();
	КонецЕсли;
	
	ПарыЗамен = Новый Соответствие;
	ЗаменяемыеСсылки = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпособыВыплатыЗарплаты.Ссылка,
	               |	СпособыВыплатыЗарплаты.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	               |ГДЕ
	               |	СпособыВыплатыЗарплаты.УдалитьИдентификаторОбъекта = ""Зарплата""
	               |	И НЕ СпособыВыплатыЗарплаты.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПредопределенныйЭлемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты." + Выборка.Идентификатор);
		Если ПредопределенныйЭлемент <> Неопределено Тогда 
			ПарыЗамен.Вставить(Выборка.Ссылка, ПредопределенныйЭлемент);
			ЗаменяемыеСсылки.Добавить(Выборка.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗарплатаКадры.ЗаменитьСсылки(ПарыЗамен);
	
	НайденныеСсылки = НайтиПоСсылкам(ЗаменяемыеСсылки);
	Для Каждого СправочникСсылка Из ЗаменяемыеСсылки Цикл
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		Если НайденныеСсылки.Найти(СправочникСсылка, "Ссылка") = Неопределено Тогда
			СправочникОбъект.Удалить();
		Иначе 
			СправочникОбъект.ПометкаУдаления = Истина;
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьРегистрОтработанноеВремяПоСотрудникам() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияУдержанияПоСотрудникам.Период,
	               |	НачисленияУдержанияПоСотрудникам.Регистратор,
	               |	НачисленияУдержанияПоСотрудникам.Организация,
	               |	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	               |	НачисленияУдержанияПоСотрудникам.Сотрудник,
	               |	НачисленияУдержанияПоСотрудникам.Подразделение,
	               |	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	               |	НачисленияУдержанияПоСотрудникам.УдалитьОтработаноДней КАК ОтработаноДней,
	               |	НачисленияУдержанияПоСотрудникам.УдалитьОтработаноЧасов КАК ОтработаноЧасов,
	               |	НачисленияУдержанияПоСотрудникам.УдалитьОплаченоДней КАК ОплаченоДней,
	               |	НачисленияУдержанияПоСотрудникам.УдалитьОплаченоЧасов КАК ОплаченоЧасов,
	               |	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты,
	               |	НачисленияУдержанияПоСотрудникам.ПериодДействия
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	               |ГДЕ
	               |	НЕ(НачисленияУдержанияПоСотрудникам.УдалитьОтработаноДней = 0
	               |				И НачисленияУдержанияПоСотрудникам.УдалитьОтработаноЧасов = 0
	               |				И НачисленияУдержанияПоСотрудникам.УдалитьОплаченоДней = 0
	               |				И НачисленияУдержанияПоСотрудникам.УдалитьОплаченоЧасов = 0)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачисленияУдержанияПоСотрудникам.Регистратор КАК Ссылка,
	               |	НачисленияУдержанияПоСотрудникам.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	               |ГДЕ
	               |	НачисленияУдержанияПоСотрудникам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Регистратор.Дата, ГОД),
	               |	НачисленияУдержанияПоСотрудникам.Регистратор.Организация,
	               |	НачисленияУдержанияПоСотрудникам.Регистратор.Номер";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ВыборкаРегистраторов.Ссылка;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда 
				Запись.ДатаОкончания = КонецМесяца(ВыборкаРегистраторов.Период);
			КонецЕсли;	
		КонецЦикла;	
		
		НаборЗаписей.Записать();
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов() Экспорт 
	КоллекцияОписаний = Новый Массив;
	
	ОписаниеДокумента = Новый Структура("ИмяДокумента, ИмяПоляПериодРегистрации, ИмяТаблицыВзносов", "НачислениеЗарплаты", "Взносы");
	ОписаниеДокумента.Вставить("ИмяДокумента", "НачислениеЗарплаты");
	ОписаниеДокумента.Вставить("ИмяПоляПериодРегистрации", "МесяцНачисления");
	ОписаниеДокумента.Вставить("ИмяТаблицыВзносов", "Взносы");

	КоллекцияОписаний.Добавить(ОписаниеДокумента);
	
	Для Каждого ОписаниеДокумента Из КоллекцияОписаний Цикл
		УчетСтраховыхВзносов.ЗаполнитьПолеДатаПолученияДоходаПоОписаниюДокумента(ОписаниеДокумента);		
	КонецЦикла;	
КонецПроцедуры	

Процедура ПерезаписатьНастройкиЗарплатаКадры() Экспорт
	НаборЗаписей = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаполнитьПересозданныеОбщиеДанные() Экспорт
	
	// Справочники
	Справочники.ВидыВычетовНДФЛ.НачальноеЗаполнение();
	Справочники.ВидыДоходовНДФЛ.НачальноеЗаполнение();
	Справочники.ВидыДоходовПоСтраховымВзносам.НачальноеЗаполнение();
	Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК.НачальноеЗаполнение();
	Справочники.ВидыТарифовСтраховыхВзносов.НачальноеЗаполнение();
	Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение();
	Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.НачальноеЗаполнение();
	Справочники.ОснованияУвольнения.НачальноеЗаполнение();
	Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение();
	Справочники.СтатусыНалогоплательщиковПоНДФЛ.НачальноеЗаполнение();
	Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение();
	
	// Регистры сведений
	РегистрыСведений.ВычетыПоДоходамНДФЛ.НачальноеЗаполнение();
	РегистрыСведений.ДопустимыеСочетанияКодовГруппСтажа.НачальноеЗаполнение();
	РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.НачальноеЗаполнение();
	РегистрыСведений.РазмерВычетовНДФЛ.НачальноеЗаполнение();
	РегистрыСведений.СтраховыеВзносыСкидкиКДоходам.НачальноеЗаполнение();
	РегистрыСведений.ТарифыВзносовЗаЗанятыхНаРаботахСДосрочнойПенсией.НачальноеЗаполнение();
	РегистрыСведений.ТарифыСтраховыхВзносов.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура ЗаменитьРазделенныеДанныеОбщими() Экспорт
	
	ИзмененныеОбъекты = Новый Соответствие;
	
	// 1. Справочник.ВидыВычетовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыВычетовНДФЛ, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Реквизиты.КодВычетаЛичный);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ТабличныеЧасти.ВычетыНаДетей.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.ПредоставленныеВычеты.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВЗановоСозданномПодчиненномРегистреСведений(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ.Ресурсы.КодВычетаЛичный);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 2. Справочник.ВидыДоходовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовНДФЛ, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.НДФЛУдержанный.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаНДФЛ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 3. Справочник.ВидыДоходовПоСтраховымВзносам
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовПоСтраховымВзносам, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.АктПроверкиСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияУчетаПоСтраховымВзносам.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаСтраховыеВзносы);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.Измерения.ВидДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы, Поля, СоответствиеСсылок);
	
	// 4. Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 5. Справочник.ВидыТарифовСтраховыхВзносов
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыТарифовСтраховыхВзносов, "ИмяПредопределенныхДанных");
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.Ресурсы.ВидТарифа);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов, Поля, СоответствиеСсылок);
	
	// 6. Справочник.ОснованияДосрочногоНазначенияПенсии
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсии, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 7. Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 8. Справочник.ОснованияИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияИсчисляемогоСтраховогоСтажа, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 9. Справочник.ОснованияУвольнения
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияУвольнения, "Наименование");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.Реквизиты.СтатьяТКРФ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 10. Справочник.ОсобыеУсловияТрудаДляСЗВКПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаДляСЗВКПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 11. Справочник.ОсобыеУсловияТрудаПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 12. Справочник.ПараметрыИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ПараметрыИсчисляемогоСтраховогоСтажа, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 13. Справочник.СтатусыНалогоплательщиковПоНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.Реквизиты.СтатусНалогоплательщика);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.Сотрудники.Реквизиты.СтатусНалогоплательщика);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена в наборах записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Ресурсы.Статус);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ, Поля, СоответствиеСсылок);
	
	// 14. Справочник.ТерриториальныеУсловияПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ТерриториальныеУсловияПФР, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.Сотрудники.Реквизиты.ТерриториальныеУсловияНа31_12_2001);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР.Ресурсы.ТерриториальныеУсловияПФР);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР, Поля, СоответствиеСсылок);
	
	// Записываем ссылочные объекты
	Для Каждого КлючИЗначение Из ИзмененныеОбъекты Цикл
		Объект = КлючИЗначение.Значение;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРайонныйКоэффициентРФ() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.РайонныйКоэффициент
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.РайонныйКоэффициент <> Организации.РайонныйКоэффициентРФ
		|	И Организации.РайонныйКоэффициентРФ < 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.РайонныйКоэффициент
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.РайонныйКоэффициент <> ПодразделенияОрганизаций.РайонныйКоэффициентРФ
		|	И ПодразделенияОрганизаций.РайонныйКоэффициентРФ < 1";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектСРК = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектСРК.РайонныйКоэффициентРФ = Выборка.РайонныйКоэффициент;
			
			ОбъектСРК.ОбменДанными.Загрузка = Истина;
			ОбъектСРК.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТерриториюВыполненияРаботВОрганизацииВНачисленияУдержанияПоСотрудникам() Экспорт

	НДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НДФЛ", НДФЛ);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации.Ссылка ЕСТЬ NULL 
	|	И НачисленияУдержания.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И НачисленияУдержания.НачислениеУдержание В(&НДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Период,
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Сумма,
	|	НачисленияУдержания.УдалитьОтработаноДней,
	|	НачисленияУдержания.УдалитьОтработаноЧасов,
	|	НачисленияУдержания.УдалитьОплаченоДней,
	|	НачисленияУдержания.УдалитьОплаченоЧасов,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ПериодДействия,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Контрагент,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.ДанныеМежрасчетногоПериода,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации.Ссылка ЕСТЬ NULL 
	|				И НачисленияУдержания.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И НачисленияУдержания.НачислениеУдержание В (&НДФЛ)
	|			ТОГДА НачисленияУдержания.Подразделение
	|		ИНАЧЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
	|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьСсылкиНаРазделыДатыЗапретаИзменения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрежниеЭлементы.Ссылка КАК ПрежняяСсылка,
		|	НовыеЭлементы.Ссылка КАК НоваяСсылка
		|ПОМЕСТИТЬ ВТСоответствиеЭлементов
		|ИЗ
		|	ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК ПрежниеЭлементы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.РазделыДатЗапретаИзменения КАК НовыеЭлементы
		|		ПО ПрежниеЭлементы.Наименование = НовыеЭлементы.Наименование
		|			И (ПрежниеЭлементы.Предопределенный = ЛОЖЬ)
		|			И (НовыеЭлементы.Предопределенный = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеЭлементов.ПрежняяСсылка,
		|	СоответствиеЭлементов.НоваяСсылка
		|ИЗ
		|	ВТСоответствиеЭлементов КАК СоответствиеЭлементов";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРазделов = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеРазделов.Вставить(Выборка.ПрежняяСсылка, Выборка.НоваяСсылка);
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи.Пользователь
		|ПОМЕСТИТЬ ВТПользователи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыЗапретаИзменений.Пользователь КАК Пользователь
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеЭлементов КАК ПрежниеСсылки
		|			ПО (ПрежниеСсылки.ПрежняяСсылка = ДатыЗапретаИзменений.Раздел)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДатыЗапретаИзменений.Пользователь
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеЭлементов КАК ПрежниеСсылки
		|			ПО (ПрежниеСсылки.ПрежняяСсылка = ДатыЗапретаИзменений.Объект)) КАК Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыЗапретаИзменений.Раздел,
		|	ДатыЗапретаИзменений.Объект,
		|	ДатыЗапретаИзменений.Пользователь,
		|	ДатыЗапретаИзменений.ДатаЗапрета,
		|	ДатыЗапретаИзменений.ОписаниеДатыЗапрета,
		|	ДатыЗапретаИзменений.Комментарий
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи КАК Пользователи
		|		ПО (Пользователи.Пользователь = ДатыЗапретаИзменений.Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатыЗапретаИзменений.Пользователь";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
		НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			НоваяСсылка = СоответствиеРазделов[СтрокаНабора.Раздел];
			Если НоваяСсылка <> Неопределено Тогда
				СтрокаНабора.Раздел = НоваяСсылка;
			КонецЕсли;
			НоваяСсылка = СоответствиеРазделов[СтрокаНабора.Объект];
			Если НоваяСсылка <> Неопределено Тогда
				СтрокаНабора.Объект = НоваяСсылка;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСтатьиРасходовЗарплата(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиРасходовЗарплата");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СтатьиРасходовЗарплата", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСтатьиФинансированияЗарплата(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СтатьиФинансированияЗарплата", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты) Экспорт
	
	НайденныеОбъекты = НайтиПоСсылкам(МассивСсылок);
	
	ОбъектыМетаданных = Новый Соответствие;
	Для Каждого Реквизит Из РеквизитыМетаданных Цикл
		МетаданныеРодителя = МетаданныеРодителя(Реквизит);
		МассивРеквизитов = ОбъектыМетаданных[МетаданныеРодителя];
		Если МассивРеквизитов = Неопределено Тогда
			МассивРеквизитов = Новый Массив;
		КонецЕсли;
		МассивРеквизитов.Добавить(Реквизит);
		ОбъектыМетаданных.Вставить(МетаданныеРодителя, МассивРеквизитов);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НайденныеОбъекты Цикл
		МассивРеквизитов = ОбъектыМетаданных[СтрокаТаблицы.Метаданные];
		Если МассивРеквизитов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Объект = ИзмененныеОбъекты[СтрокаТаблицы.Данные];
		Если Объект = Неопределено Тогда
			Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				// Например, если ссылка "битая".
				Продолжить;
			КонецЕсли;
			ИзмененныеОбъекты.Вставить(СтрокаТаблицы.Данные, Объект);
		КонецЕсли;
		Для Каждого Реквизит Из МассивРеквизитов Цикл
			// Это реквизит объекта
			Если СтрокаТаблицы.Метаданные.Реквизиты.Содержит(Реквизит) Тогда
				Объект[Реквизит.Имя] = СоответствиеСсылок[Объект["Удалить" + Реквизит.Имя]];
				Продолжить;
			КонецЕсли;
			// Это реквизит табличной части
			ТабличнаяЧасть = Реквизит.Родитель();
			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Имя] Цикл
				СтрокаТабличнойЧасти[Реквизит.Имя] = СоответствиеСсылок[СтрокаТабличнойЧасти["Удалить" + Реквизит.Имя]];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВЗановоСозданномПодчиненномРегистреСведений(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.Удалить#ИмяРегистра КАК Прежняя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", МетаданныеРегистра.Имя);
	
	НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	ПрежнийНабор = РегистрыСведений["Удалить" + МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Для Каждого Поле Из Поля Цикл
				СтрокаНабора[Поле.Имя] = СоответствиеСсылок[Выборка[Поле.Имя]];
			КонецЦикла;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		// Удаляем прежний набор записей
		ПрежнийНабор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ПрежнийНабор.ОбменДанными.Загрузка = Истина;
		ПрежнийНабор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Измерения
		|ПОМЕСТИТЬ ВТИзмерения
		|ИЗ
		|	#ПолноеИмяРегистра КАК Таблица
		|ГДЕ
		|	&СтрокаУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.*
		|ИЗ
		|	#ПолноеИмяРегистра КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмерения КАК Измерения
		|		ПО &СтрокаСоединения
		|
		|УПОРЯДОЧИТЬ ПО
		|	&Порядок";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяРегистра", МетаданныеРегистра.ПолноеИмя());
	
	Запрос = Новый Запрос;
	
	СтрокаУсловия = "";
	Для Каждого Поле Из Поля Цикл
		НовыеМетаданные = Метаданные.НайтиПоТипу(Поле.Тип.Типы()[0]);
		ПрежниеМетаданные = Метаданные.НайтиПоПолномуИмени(СтрЗаменить(НовыеМетаданные.ПолноеИмя(), НовыеМетаданные.Имя, "Удалить" + НовыеМетаданные.Имя));
		Запрос.УстановитьПараметр(Поле.Имя + "ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НовыеМетаданные.ПолноеИмя()).ПустаяСсылка());
		Запрос.УстановитьПараметр("Удалить" + Поле.Имя + "ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПрежниеМетаданные.ПолноеИмя()).ПустаяСсылка());
		Если Не ПустаяСтрока(СтрокаУсловия) Тогда
			СтрокаУсловия = СтрокаУсловия + " ИЛИ ";
		КонецЕсли;
		СтрокаУсловия = СтрокаУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(Таблица.%1 = &%1ПустаяСсылка И Таблица.Удалить%1 <> &Удалить%1ПустаяСсылка)", Поле.Имя);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаУсловия", СтрокаУсловия);
	
	МассивИзмерений = Новый Массив;
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) 
		Или МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		МассивИзмерений.Добавить("Регистратор");
	Иначе
		МассивИзмерений = ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеРегистра.Измерения, "Имя");
		Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			МассивИзмерений.Добавить("Период");
		КонецЕсли;
	КонецЕсли;
	
	Измерения = "";
	СтрокаСоединения = "";
	Порядок = "";
	Для Каждого Измерение Из МассивИзмерений Цикл
		Если Не ПустаяСтрока(Измерения) Тогда
			Измерения = Измерения + ",";
		КонецЕсли;
		Измерения = Измерения + Измерение;
		Если Не ПустаяСтрока(СтрокаСоединения) Тогда
			СтрокаСоединения = СтрокаСоединения + " И ";
		КонецЕсли;
		СтрокаСоединения = СтрокаСоединения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(Таблица.%1 = Измерения.%1)", Измерение);
		Если Не ПустаяСтрока(Порядок) Тогда
			Порядок = Порядок + ",";
		КонецЕсли;
		Порядок = Порядок + "Таблица." + Измерение;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", Измерения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСоединения", СтрокаСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Порядок", Порядок);
	
	НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя()).СоздатьНаборЗаписей();
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтборИзмерений = Новый Структура(Измерения);
	
	Пока Выборка.Следующий() Цикл
		НаборИзмеренийСовпадает = Истина;
		Для Каждого Измерение Из МассивИзмерений Цикл 
			Если Выборка[Измерение] <> ОтборИзмерений[Измерение] Тогда
				НаборИзмеренийСовпадает = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если Не НаборИзмеренийСовпадает Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Измерение Из МассивИзмерений Цикл
					НаборЗаписей.Отбор[Измерение].Установить(ОтборИзмерений[Измерение]);
				КонецЦикла;
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			НаборЗаписей.Очистить();
			ЗаполнитьЗначенияСвойств(ОтборИзмерений, Выборка);
		КонецЕсли;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Для Каждого Поле Из Поля Цикл
			СтрокаНабора[Поле.Имя] = СоответствиеСсылок[Выборка["Удалить" + Поле.Имя]];
		КонецЦикла;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Измерение Из МассивИзмерений Цикл
			НаборЗаписей.Отбор[Измерение].Установить(Выборка[Измерение]);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрежняяТаблица.Ссылка КАК ПрежняяСсылка,
		|	НоваяТаблица.Ссылка
		|ИЗ
		|	Справочник.#ИмяТаблицы КАК НоваяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Удалить#ИмяТаблицы КАК ПрежняяТаблица
		|		ПО (ПрежняяТаблица.#ИмяКлюча = НоваяТаблица.#ИмяКлюча)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяКлюча", ИмяКлюча);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", МетаданныеСправочника.Имя);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеСсылок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеСсылок.Вставить(Выборка.ПрежняяСсылка, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеСсылок;
	
КонецФункции

Функция МетаданныеРодителя(ОбъектМетаданных)
	
	МетаданныеРодителя = ОбъектМетаданных.Родитель();
	Если ТипЗнч(МетаданныеРодителя) = Тип("ОбъектМетаданныхКонфигурация") Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	Возврат МетаданныеРодителя(МетаданныеРодителя)
	
КонецФункции

Процедура УстановитьВладельцевРегистрацийВНалоговомОргане(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Ссылка,
		|	РегистрацииВНалоговомОргане.Владелец.ГоловнаяОрганизация КАК Владелец
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Владелец.ОбособленноеПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.РегистрацииВНалоговомОргане", "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектСправочника.Владелец = Выборка.Владелец;
			
			ОбъектСправочника.ОбменДанными.Загрузка = Истина;
			ОбъектСправочника.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Отключает рассылки с некорректными настройками персонифицированных отчетов.
Процедура ОтключитьРассылкиСНекорректнымиНастройкамиОтчетов(Параметры) Экспорт
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрОбновления(Параметры, "ОбработкаЗавершена", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РассылкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов
	|ГДЕ
	|	РассылкиОтчетов.Подготовлена
	|	И РассылкиОтчетов.ИспользоватьЭлектроннуюПочту
	|	И НЕ РассылкиОтчетов.Личная";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПодготовитьОбновлениеДанных(Параметры, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
			УстановитьПараметрОбновления(Параметры, "ОбработкаЗавершена", Ложь);
			Продолжить;
		КонецЕсли;
		
		Рассылка = Выборка.Ссылка.ПолучитьОбъект();
		РезультатПроверки = ЗарплатаКадрыОтчеты.ПроверитьНастройкиРассылки(Рассылка);
		Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
			Рассылка.Подготовлена = Ложь;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Рассылка);
			ЗаписьЖурналаРегистрации(
				РезультатПроверки.ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				РезультатПроверки.Метаданные,
				РезультатПроверки.Данные,
				РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
		ЗавершитьОбновлениеДанных(Параметры);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти