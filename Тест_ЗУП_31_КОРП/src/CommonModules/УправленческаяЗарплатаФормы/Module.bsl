////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управленческая зарплата формы"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения, ДанныеПозиций) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаполнения.Свойство("ЗаполнятьУправленческиеНачисления")
		Или ПараметрыЗаполнения.ЗаполнятьУправленческиеНачисления <> Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДатаСобытия = ПараметрыЗаполнения.ДатаСобытия;
	
	// Определении даты на которую получаются сведения позиций штатного расписания
	ДатаУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения");
	Если ДатаСобытия < ДатаУтверждения Тогда
		ДатаСведений = ДатаУтверждения;
	Иначе
		ДатаСведений = ДатаСобытия;
	КонецЕсли;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Сотрудник = ПараметрыЗаполнения.Сотрудник;
	РазрядКатегорияНадбавки = ПараметрыЗаполнения.РазрядКатегорияНадбавки;
	СохранятьТекущиеЗначения = ПараметрыЗаполнения.СохранятьТекущиеЗначения;
	ОписаниеТаблицыНачислений = ПараметрыЗаполнения.ОписаниеТаблицыУправленческихНачислений;
	
	ДанныеПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
	ДанныеТекущейПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
	
	СодержитПолеДействие = ОписаниеТаблицыНачислений.Свойство("СодержитПолеДействие")
		И ОписаниеТаблицыНачислений.СодержитПолеДействие = Истина;
	
	НачисленияПозиции = ДанныеПозиции.УправленческиеНачисления;
	НачисленияТекущейПозиции = Новый Соответствие;
	Если НачисленияПозиции <> Неопределено Тогда
		
		Если ДанныеТекущейПозиции <> Неопределено Тогда
			
			Для каждого ОписаниеНачисления Из ДанныеТекущейПозиции.УправленческиеНачисления Цикл
				НачисленияТекущейПозиции.Вставить(ОписаниеНачисления.Начисление, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
		
		// Запомним текущее состояние табличной части Начисления.
		ТЧНачисленияПредыдущие = ДанныеНачислений.Выгрузить();
		
		// При заполнении из перемещения необходимо сохранить текущий состав начислений.
		НачисленияИзменяемыхСтрок = Новый Соответствие;
		
		// Получение данных тарифной сетки
		ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		Если ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
			
			ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйПовтИсп.ДанныеТарифныхСеток(
				ДанныеПозиции.ТарифнаяСетка, ДанныеПозиции.РазрядКатегория, ДанныеПозиции.ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, Ложь, ПараметрыЗаполнения.ПКУ);
			
		Иначе
			ДанныеТарифныхСеток = Неопределено;
		КонецЕсли;
		
		Для Каждого ОписаниеНачисления Из НачисленияПозиции Цикл
			
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыНачислений) Тогда
				
				Если (ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
					
					Если ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", ОписаниеНачисления.Размер);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Определение строки начисления или создание новой, если строки с начислением еще нет.
			НайденныеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНачислений = НайденныеСтроки[0];
			Иначе
				
				СтрокаНачислений = ДанныеНачислений.Добавить();
				СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета] = ОписаниеНачисления.Начисление;
				Если СодержитПолеДействие Тогда
					СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				КонецЕсли;
				
			КонецЕсли;
			
			ПоказателиСтрокиНачислений = Новый ТаблицаЗначений;
			ПоказателиСтрокиНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
			// Подготовка значений показателей из предыдущего состава строк.
			НайденныеСтроки = ТЧНачисленияПредыдущие.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаПредыдущихНачислений = НайденныеСтроки[0];
				Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
					
					Если ЗначениеЗаполнено(СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей]) Тогда
						
						НоваяСтрокаПоказателей = ПоказателиСтрокиНачислений.Добавить();
						НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						НоваяСтрокаПоказателей.Показатель = СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей];
						НоваяСтрокаПоказателей.Значение = СтрокаПредыдущихНачислений["Значение" + СчетчикПоказателей];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Подготовка значений показателей по данным начисления штатного расписания.
			// Значение показателя остается неизменным, если его значение попадает в диапазон
			// между минимальным и максимальным значениями показателя штатного расписания.
			// Если значение не попадает в этот диапазон, выбирается ближайшее из значений
			// показателя начисления позиции штатного расписания.
			Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
				
				Если СчетчикПоказателей <= ОписаниеНачисления.Показатели.Количество() Тогда
					
					ОписаниеПоказателя = ОписаниеНачисления.Показатели[СчетчикПоказателей - 1];
					
					НайденныеПоказатели = ПоказателиСтрокиНачислений.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель));
					Если НайденныеПоказатели.Количество() = 0 Тогда
						СтрокаПоказателя = ПоказателиСтрокиНачислений.Добавить();
						СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						СтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
					Иначе
						СтрокаПоказателя = НайденныеПоказатели[0];
					КонецЕсли;
					
					ЗначенияНазначеныПоДаннымТарифныхСеток = Ложь;
					Если ДанныеТарифныхСеток <> Неопределено Тогда
						
						Если ДанныеТарифныхСеток.СписокПоказателейОклад.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							
							ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМин;
								ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс;
							Иначе
								ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение;
								ЗначениеМакс = ЗначениеМин;
							КонецЕсли;
							
						ИначеЕсли ДанныеТарифныхСеток.СписокПоказателейКвалификационнаяНадбавка.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							
							ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМин;
								ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс;
							Иначе
								ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение;
								ЗначениеМакс = ЗначениеМин;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначенияНазначеныПоДаннымТарифныхСеток Тогда
						
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							ЗначениеМин = ОписаниеПоказателя.ЗначениеМин;
							ЗначениеМакс = ОписаниеПоказателя.ЗначениеМакс;
						Иначе
							ЗначениеМин = ОписаниеПоказателя.Значение;
							ЗначениеМакс = ЗначениеМин;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СохранятьТекущиеЗначения Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
							ЗначениеПоказателя = ЗначениеМакс;
						Иначе
							ЗначениеПоказателя = СтрокаПоказателя.Значение;
						КонецЕсли;
						
					Иначе
						ЗначениеПоказателя = ЗначениеМин;
					КонецЕсли;
					
					СтрокаПоказателя.Значение = ЗначениеПоказателя;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Размещение показателей в строке начисления.
			ЗарплатаКадрыРасширенный.ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(
				ИнфоОВидеРасчета, СтрокаНачислений, ПоказателиСтрокиНачислений, 1, , , , Сотрудник, ДатаСобытия);
			
			Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
				
				СтрокаНачислений.ФиксированнаяСумма = Истина;
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ЗначениеМин = ОписаниеНачисления.РазмерМин;
					ЗначениеМакс = ОписаниеНачисления.РазмерМакс;
				Иначе
					ЗначениеМин = ОписаниеНачисления.Размер;
					ЗначениеМакс = ЗначениеМин;
				КонецЕсли;
				
				Если СохранятьТекущиеЗначения Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаНачислений.Значение1) Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 <= ЗначениеМин Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 >= ЗначениеМакс Тогда
						ЗначениеПоказателя = ЗначениеМакс;
					Иначе
						ЗначениеПоказателя = СтрокаНачислений.Значение1;
					КонецЕсли;
					
				Иначе
					ЗначениеПоказателя = ЗначениеМин;
				КонецЕсли;
				
				СтрокаНачислений.Значение1 = ЗначениеПоказателя;
				
			ИначеЕсли Не ИнфоОВидеРасчета.ФОТНеРедактируется Тогда
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений.Размер = ОписаниеНачисления.РазмерМин;
				Иначе
					СтрокаНачислений.Размер = ОписаниеНачисления.Размер;
				КонецЕсли;
				
			КонецЕсли;
			
			НачисленияИзменяемыхСтрок.Вставить(СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета], Истина);
			
		КонецЦикла;
		
		// Дополнительная обработка строк начислений.
		// Необходимо упорядочить строки начислений по значению РеквизитДопУпорядочивания начисления.
		ТЧНачисления = ДанныеНачислений.Выгрузить();
		ТЧНачисления.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
		
		// Подготовка значений РеквизитДопУпорядочивания начислений.
		Начисления = ТЧНачисления.Скопировать();
		Начисления.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
		РеквизитыДопупорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета), "РеквизитДопУпорядочивания");

		// При заполнении из перемещения, необходимо обнулить показатели начислений прекращающих действие
		// и сформировать комментарии к строкам.
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаНачислений Из ТЧНачисления Цикл
			
			Начисление = СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета];
			СтрокаНачислений.РеквизитДопУпорядочивания = РеквизитыДопупорядочивания.Получить(Начисление);
			
			Если НачисленияТекущейПозиции.Получить(Начисление) = Истина Тогда
				
				Если СодержитПолеДействие Тогда
					
					Если НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
						СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
					КонецЕсли;
					
					СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНачислений);
					Если СтруктураСтроки.Свойство("Комментарий") Тогда
						
						ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтруктураСтроки,
							ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений), 1, ОписаниеТаблицыНачислений, ДатаСобытия);
						
						СтрокаНачислений.Комментарий = СтруктураСтроки.Комментарий;
						
					КонецЕсли;
					
				ИначеЕсли НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
					СтрокиКУдалению.Добавить(СтрокаНачислений);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТЧНачисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		ТЧНачисления.Сортировать("РеквизитДопУпорядочивания");
		ДанныеНачислений.Загрузить(ТЧНачисления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловияОтбораПоОписаниюТаблицы(Запрос, ЧастиТекстаЗапроса, ОписаниеТаблицыВидовРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "УправленческиеНачисления"
		Или ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Начисления" Тогда
		
		Если ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "УправленческиеНачисления" Тогда
			ЧастиТекстаЗапроса.Добавить("	И НачисленияСотрудников.ГоловнаяОрганизация = &УправленческаяОрганизация");
		Иначе
			ЧастиТекстаЗапроса.Добавить("	И НачисленияСотрудников.ГоловнаяОрганизация <> &УправленческаяОрганизация");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УправленческаяОрганизация", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьСписокЗависимыхТабличныхЧастей(ЗависимыеТабличныеЧасти) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ИменаВедущихТабличныхЧастей = ЗависимыеТабличныеЧасти.Получить("Показатели");
	Если ИменаВедущихТабличныхЧастей <> Неопределено Тогда
		
		ИменаВедущихТабличныхЧастей = СтрЗаменить(ИменаВедущихТабличныхЧастей, "Начисления,", "Начисления,УправленческиеНачисления,");
		ЗависимыеТабличныеЧасти.Вставить("Показатели", ИменаВедущихТабличныхЧастей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьПараметрыОтбораФормыВыбораСотрудников(Список, Организация, УстанавливатьОтборыПоОрганизации, ИсключаемыеИменаПолейОтборов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если Организация = УправленческаяОрганизация
		И ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
		
		УстанавливатьОтборыПоОрганизации = Ложь;
		
		СписокПозиций = УправленческаяЗарплата.ДолжностиПоШтатномуРасписаниюИспользующиеУправленческиеНачисления();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "ДолжностьПоШтатномуРасписанию", СписокПозиций , ВидСравненияКомпоновкиДанных.ВСписке);
		
		ИсключаемыеИменаПолейОтборов = ?(ПустаяСтрока(ИсключаемыеИменаПолейОтборов), "", ИсключаемыеИменаПолейОтборов + ",")
			+ "Организация,ДолжностьПоШтатномуРасписанию";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьПараметрыФормыВыбораСотрудниковСправочникаФизическиеЛица(Список, Параметры, ДатаНачала, ДатаОкончания, ИсключаемыеИменаПолейОтборов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		
		УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
		Если Параметры.Отбор.Организация = УправленческаяОрганизация
			И ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
			
			Параметры.Отбор.Удалить("Организация");
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
				Список, "Филиал");
			
			ПараметрыПолученияСотрудниковОрганизации = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			ПараметрыПолученияСотрудниковОрганизации.Организация = УправленческаяОрганизация;
			
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ПараметрыПолученияСотрудниковОрганизации.НачалоПериода = ДатаНачала;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				ПараметрыПолученияСотрудниковОрганизации.ОкончаниеПериода = ДатаОкончания;
			Иначе
				ПараметрыПолученияСотрудниковОрганизации.ОкончаниеПериода = КонецМесяца(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизации);
			СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Сотрудники, "ФизическоеЛицо", Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "Ссылка", Новый ФиксированныйМассив(СписокФизическихЛиц), ВидСравненияКомпоновкиДанных.ВСписке);
			
			ИсключаемыеИменаПолейОтборов = ?(ПустаяСтрока(ИсключаемыеИменаПолейОтборов), "", ИсключаемыеИменаПолейОтборов + ",")
				+ "Организация,Ссылка";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПриемНаРаботу

Процедура ПриемНаРаботуДополнитьФорму(Форма, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоОтображаемыхПоказателей", МаксимальноеКоличествоПоказателейУправленческихНачислений());
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоПоказателейРасчета", ОписаниеТаблицыВидовРасчета.КоличествоОтображаемыхПоказателей);
	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
		Форма, ОписаниеТаблицыВидовРасчета, "Начисления", 3, Форма.РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

Процедура ПриемНаРаботуДополнитьМассивОписанийТаблиц(ОписанияТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц.Добавить(УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура ПриемНаРаботуУстановитьОтображениеЭлементовФормы(Форма, ДатаСобытия, ОграниченияНаУровнеЗаписей) Экспорт
	
	ВидимостьУправленческихНачислений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.ДолжностьПоШтатномуРасписанию) Тогда
			
			ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(
				Форма.Объект.ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
			
			Если ДанныеПозиции.ИспользоватьУправленческиеНачисления = Истина Тогда
				ВидимостьУправленческихНачислений = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьУправленческихНачислений
		И ОграниченияНаУровнеЗаписей.Свойство("ДоступКУправленческойЗарплате") Тогда
		
		ВидимостьУправленческихНачислений = ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате.Чтение
			Или ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате.Изменение;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ИспользоватьУправленческиеНачисления", ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаУправленческиеНачисления",
		"Видимость",
		ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияИтогРазмер",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Рассчитать",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РедактироватьФОТ",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ГруппаРасчетчикГруппа = Форма.Элементы.Найти("РасчетчикГруппа");
	Если ГруппаРасчетчикГруппа <> Неопределено Тогда
		
		Если ВидимостьУправленческихНачислений Тогда
			
			Форма.ИмяКнопкиРассчитать = "РассчитатьУправленческие";
			
			ОплатаТрудаСтраница = Форма.Элементы.Найти("ОплатаТрудаСтраница");
			Если ОплатаТрудаСтраница <> Неопределено
				И ГруппаРасчетчикГруппа.Родитель <> ОплатаТрудаСтраница Тогда
				
				ГруппаУправленческиеНачисления = Форма.Элементы.Найти("ГруппаУправленческиеНачисления");
				Если ГруппаУправленческиеНачисления <> Неопределено Тогда
					Форма.Элементы.Переместить(ГруппаРасчетчикГруппа, ОплатаТрудаСтраница, ГруппаУправленческиеНачисления);
				КонецЕсли;
				
			КонецЕсли;
			
			ГруппаСведенияЛевая = Форма.Элементы.Найти("ГруппаСведенияЛевая");
			Если ГруппаСведенияЛевая <> Неопределено Тогда
				ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
				ГруппаСведенияЛевая.Заголовок = НСтр("ru='Регламентированный учет'");
			КонецЕсли;
			
		Иначе
			
			Форма.ИмяКнопкиРассчитать = "Рассчитать";
			
			ГруппаСведенияЛевая = Форма.Элементы.Найти("ГруппаСведенияЛевая");
			Если ГруппаСведенияЛевая <> Неопределено Тогда
				
				Если ГруппаРасчетчикГруппа.Родитель <> ГруппаСведенияЛевая Тогда
				
					КомандныеПанелиНачислений = Форма.Элементы.Найти("КомандныеПанелиНачислений");
					Если КомандныеПанелиНачислений <> Неопределено Тогда
						Форма.Элементы.Переместить(ГруппаРасчетчикГруппа, ГруппаСведенияЛевая, КомандныеПанелиНачислений);
					КонецЕсли;
				
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
						ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
						ГруппаСведенияЛевая.Заголовок = "";
					Иначе
						ГруппаСведенияЛевая.ОтображатьЗаголовок = Ложь;
					КонецЕсли;
					
				Иначе
					ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
					ГруппаСведенияЛевая.Заголовок = НСтр("ru='Начисления'");
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриемНаРаботуПриЗаполненииДанныхНачисленийДляРасчета(ТаблицаНачислений, ТаблицаПоказателей, Форма) Экспорт
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
		
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		Форма,
		Форма.Объект.Сотрудник,
		УправленческаяОрганизация,
		Форма.ВремяРегистрации,
		УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());	
КонецПроцедуры	

Процедура ПриемНаРаботуПриПомещенииРезультатаРасчетаНачисленийВДанныеФормы(Форма, РассчитанныеВторичныеДанные) Экспорт
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		Форма, 
		РассчитанныеВторичныеДанные, 
		УправленческаяОрганизация,
		УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());
КонецПроцедуры	

Процедура ПриемНаРаботуРеквизитВДанные(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1, Ложь);
	
КонецПроцедуры

Процедура ПриемНаРаботуДополнитьПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнятьУправленческиеНачисления", Истина);
	ПараметрыЗаполнения.Вставить("ОписаниеТаблицыУправленческихНачислений", УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура ПриемНаРаботуДополнитьОписаниеТаблиц(ОписанияТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц.Вставить("УправленческиеНачисления", УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура ПриемНаРаботуСпискомДополнитьСписокОчищаемыхТабличныхЧастей(ТабличныеЧасти) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ТабличныеЧасти.Вставить("УправленческиеНачисления");
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйПеревод

Процедура КадровыйПереводДополнитьФорму(Форма, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоОтображаемыхПоказателей", МаксимальноеКоличествоПоказателейУправленческихНачислений());
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоПоказателейРасчета", ОписаниеТаблицыВидовРасчета.КоличествоОтображаемыхПоказателей);
	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
		Форма, ОписаниеТаблицыВидовРасчета, "Начисления", 1, Форма.РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

Процедура КадровыйПереводДополнитьМассивОписанийТаблиц(ОписанияТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц.Добавить(УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура КадровыйПереводУстановитьОтображениеЭлементовФормы(Форма, ОграниченияНаУровнеЗаписей) Экспорт
	
	ВидимостьУправленческихНачислений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.ДолжностьПоШтатномуРасписанию) Тогда
			
			ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(
				Форма.Объект.ДолжностьПоШтатномуРасписанию, Форма.Объект.ДатаНачала, Ложь);
				
			Если ДанныеПозиции.ИспользоватьУправленческиеНачисления = Истина Тогда
				ВидимостьУправленческихНачислений = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьУправленческихНачислений
		И ОграниченияНаУровнеЗаписей.Свойство("ДоступКУправленческойЗарплате") Тогда
		
		ВидимостьУправленческихНачислений = ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате.Чтение
			Или ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате.Изменение;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ИспользоватьУправленческиеНачисления", ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаУправленческиеНачисления",
		"Видимость",
		ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисленияИтогРазмер",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Рассчитать",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"РедактироватьФОТ",
		"Видимость",
		Не ВидимостьУправленческихНачислений);
	
	ИзменитьНачисленияРасчетчикГруппа = Форма.Элементы.Найти("ИзменитьНачисленияРасчетчикГруппа");
	Если ИзменитьНачисленияРасчетчикГруппа <> Неопределено Тогда
		
		Если ВидимостьУправленческихНачислений Тогда
			
			Форма.ИмяКнопкиРассчитать = "РассчитатьУправленческие";
			
			ОплатаТрудаСтраница = Форма.Элементы.Найти("ОплатаТрудаСтраница");
			Если ОплатаТрудаСтраница <> Неопределено
				И ИзменитьНачисленияРасчетчикГруппа.Родитель <> ОплатаТрудаСтраница Тогда
				
				ГруппаУправленческиеНачисления = Форма.Элементы.Найти("ГруппаУправленческиеНачисления");
				Если ГруппаУправленческиеНачисления <> Неопределено Тогда
					Форма.Элементы.Переместить(ИзменитьНачисленияРасчетчикГруппа, ОплатаТрудаСтраница, ГруппаУправленческиеНачисления);
				КонецЕсли;
				
			КонецЕсли;
			
			ГруппаСведенияЛевая = Форма.Элементы.Найти("ГруппаСведенияЛевая");
			Если ГруппаСведенияЛевая <> Неопределено Тогда
				ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
				ГруппаСведенияЛевая.Заголовок = НСтр("ru='Регламентированный учет'");
			КонецЕсли;
			
		Иначе
			
			Форма.ИмяКнопкиРассчитать = "Рассчитать";
			
			ГруппаСведенияЛевая = Форма.Элементы.Найти("ГруппаСведенияЛевая");
			Если ГруппаСведенияЛевая <> Неопределено Тогда
				
				Если ИзменитьНачисленияРасчетчикГруппа.Родитель <> ГруппаСведенияЛевая Тогда
					
					КомандныеПанелиНачислений = Форма.Элементы.Найти("КомандныеПанелиНачислений");
					Если КомандныеПанелиНачислений <> Неопределено Тогда
						Форма.Элементы.Переместить(ИзменитьНачисленияРасчетчикГруппа, ГруппаСведенияЛевая, КомандныеПанелиНачислений);
					КонецЕсли;
					
				КонецЕсли;
			
				Если ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
						ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
						ГруппаСведенияЛевая.Заголовок = "";
					Иначе
						ГруппаСведенияЛевая.ОтображатьЗаголовок = Ложь;
					КонецЕсли;
					
				Иначе
					ГруппаСведенияЛевая.ОтображатьЗаголовок = Истина;
					ГруппаСведенияЛевая.Заголовок = НСтр("ru='Начисления'");
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыйПереводПриЗаполненииДанныхНачисленийДляРасчета(ТаблицаНачислений, ТаблицаПоказателей, Форма) Экспорт
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
		
	ПлановыеНачисленияСотрудниковФормы.ЗаполнитьДанныеПлановыхНачисленийПоСотруднику(
		ТаблицаНачислений,
		ТаблицаПоказателей,
		Форма,
		Форма.Объект.Сотрудник,
		УправленческаяОрганизация,
		Форма.ВремяРегистрации,
		УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений());	
		
КонецПроцедуры	
	
Процедура КадровыйПереводПриПомещенииРезультатаРасчетаНачисленийВДанныеФормы(Форма, РассчитанныеВторичныеДанные) Экспорт
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ПлановыеНачисленияСотрудниковФормы.РезультатРасчетаВторичныхДанныхПоСотрудникуВДанныеФормы(
		Форма, 
		РассчитанныеВторичныеДанные, 
		УправленческаяОрганизация,
		УправленческаяЗарплатаКлиентСервер.ПриемНаРаботуОписаниеТаблицыУправленческихНачислений());
		
	ЗарплатаКадрыРасширенный.УстановитьКомментарииДействийСНачислениями(Форма,
		УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений(), 1, Форма.Объект.ДатаНачала, Форма.Объект.ДатаОкончания);	
КонецПроцедуры	
	
Процедура КадровыйПереводРеквизитВДанные(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1, Ложь);
	
КонецПроцедуры

Процедура КадровыйПереводДополнитьПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнятьУправленческиеНачисления", Истина);
	ПараметрыЗаполнения.Вставить("ОписаниеТаблицыУправленческихНачислений", УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура КадровыйПереводЗаполнитьСоставДействующихНачисленийСотрудника(ИсключаемыйРегистратор, ТаблицаСотрудников, Форма, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.Объект.УправленческиеНачисления.Очистить();
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДействующиеНачисленияВРеквизит(ИсключаемыйРегистратор, ТаблицаСотрудников, Форма, ОписаниеТаблицыВидовРасчета, 1, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

Процедура ДанныеНачисленийДляКадровогоПеревода(ДанныеПеревода) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиВидаРасчета = 1 + 2 * 1000000;
	
	Для каждого ОписаниеСтруктурыДанных Из ДанныеПеревода Цикл
		
		Сотрудник = ОписаниеСтруктурыДанных.Ключ;
		СтруктураДанных = ОписаниеСтруктурыДанных.Значение;
		
		ИдентификаторыНачислений = Новый Соответствие;
		ИндексыУдаляемыхСтрок = Новый Массив;
		ИндексСтроки = 0;
		
		ИменаРеквизитовНачислений = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["УправленческиеНачисления"];
		Для каждого СтрокаНачислений Из СтруктураДанных.ТабличныеЧасти.Начисления Цикл
			
			Если ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление).КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет Тогда
				
				СтруктураСтроки = Новый Структура(ИменаРеквизитовНачислений);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаНачислений);
				ИдентификаторыНачислений.Вставить(СтруктураСтроки.ИдентификаторСтрокиВидаРасчета, ИдентификаторСтрокиВидаРасчета);
				
				СтруктураСтроки.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
				СтруктураДанных.ТабличныеЧасти.УправленческиеНачисления.Добавить(СтруктураСтроки);
				
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				
				ИндексыУдаляемыхСтрок.Вставить(0, ИндексСтроки);
				
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		Если ИдентификаторыНачислений.Количество() > 0 Тогда
			
			Для каждого ИндексСтроки Из ИндексыУдаляемыхСтрок Цикл
				СтруктураДанных.ТабличныеЧасти.Начисления.Удалить(ИндексСтроки);
			КонецЦикла;
			
			Для каждого СтрокаПоказателя Из СтруктураДанных.ТабличныеЧасти.Показатели Цикл
				
				НовыйИдентификаторПоказателя = ИдентификаторыНачислений.Получить(СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета);
				Если НовыйИдентификаторПоказателя <> Неопределено Тогда
					СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = НовыйИдентификаторПоказателя;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КадровыйПереводДополнитьОписаниеТаблиц(ОписанияТаблиц) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписанияТаблиц.Вставить("УправленческиеНачисления", УправленческаяЗарплатаКлиентСервер.КадровыйПереводОписаниеТаблицыУправленческихНачислений());
	
КонецПроцедуры

Процедура КадровыйПереводСпискомДополнитьСписокОчищаемыхТабличныхЧастей(ТабличныеЧасти) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ТабличныеЧасти.Вставить("УправленческиеНачисления");
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ПриСозданииФормыПозицииШтатногоРасписания(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	// Вид расчета по умолчанию.
	Форма.НачислениеДоначислениеДоУправленческогоУчета = НачислениеДоначислениеДоУправленческогоУчета();
	
	Форма.Элементы.УправленческийУчетГруппа.Видимость = Истина;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачисленийПозицииШтатногоРасписания();
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоОтображаемыхПоказателей", МаксимальноеКоличествоПоказателейУправленческихНачислений());
	ОписаниеТаблицыВидовРасчета.Вставить("КоличествоПоказателейРасчета", ОписаниеТаблицыВидовРасчета.КоличествоОтображаемыхПоказателей);
	
	Если Форма.ВнешниеДанные Тогда
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
			Форма, ОписаниеТаблицыВидовРасчета, "Начисления", 0, Форма.ИспользоватьРасчетЗарплаты);
	Иначе
		
		ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(
			Форма, ОписаниеТаблицыВидовРасчета, 0, "Начисления", Форма.ИспользоватьРасчетЗарплаты);
		
		Если Форма.Параметры.Ключ.Пустая() Тогда
			УправленческаяЗарплатаКлиентСервер.ШтатноеРасписаниеУстановитьОтображениеЭлементовФормы(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыВнешнихДанных(Форма, ДанныеПозиции) Экспорт
	
	УстановитьВидимостьУправленческогоУчетаПозицииШтатногоРасписания(Форма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	// Регистр с настройками.
	МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеПозиции);
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания");
	
КонецПроцедуры

Процедура ПриПолученииДанныхФормыПозицииШтатногоРасписания(Форма, ТекущийОбъект, Ссылка) Экспорт
	
	УстановитьВидимостьУправленческогоУчетаПозицииШтатногоРасписания(Форма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ИспользоватьИсторию Тогда
		
		// Регистр с настройками.
		МенеджерЗаписи = РегистрыСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Позиция = Ссылка;
		МенеджерЗаписи.Прочитать();
		Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания");
		
	КонецЕсли;
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачисленийПозицииШтатногоРасписания();
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, 0);
	
	УправленческаяЗарплатаКлиентСервер.ШтатноеРасписаниеУстановитьОтображениеЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура ПриЗаписиФормыПозицииШтатногоРасписания(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем данные из реквизита формы в регистр сведений.
	МенеджерЗаписи = Форма.РеквизитФормыВЗначение("НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания");
	МенеджерЗаписи.Позиция = ТекущийОбъект.Ссылка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура РеквизитыПозицииВДанные(Форма, ТекущийОбъект) Экспорт
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачисленийПозицииШтатногоРасписания();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 0);
	
КонецПроцедуры

Процедура ЗаполнитьПозициюОбъектШтатногоРасписания(ПозицияОбъект, ЭтаФорма) Экспорт

	ПозицияОбъект.УправленческиеНачисления.Очистить();
	ПозицияОбъект.УправленческиеПоказатели.Очистить();
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.УправленческиеНачисления Цикл
		ЗаполнитьЗначенияСвойств(ПозицияОбъект.УправленческиеНачисления.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ЭтаФорма.УправленческиеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(ПозицияОбъект.УправленческиеПоказатели.Добавить(), СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьВидимостьУправленческогоУчетаПозицииШтатногоРасписания(Форма)
	
	ИспользоватьУправленческуюЗарплату = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"УправленческийУчетГруппа",
		"Видимость", 
		ИспользоватьУправленческуюЗарплату);
	
КонецПроцедуры

Функция МаксимальноеКоличествоПоказателейУправленческихНачислений()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет)
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) <> 0");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоОтображаемыхПоказателей;
	
КонецФункции

Функция НачислениеДоначислениеДоУправленческогоУчета()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоначислениеДоУправленческогоУчета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Код");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ПрочитатьТекущиеДанныеПозицииШтатногоРасписанияВФормуСправочника(Форма, ДанныеПозиции, РедактированиеДанных) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = Форма.Объект;
	Если Не РедактированиеДанных Тогда
		
		ЗаполнитьЗначенияСвойств(Форма.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания, ДанныеПозиции, "ИспользоватьУправленческиеНачисления,ДоначислятьДоУправленческогоУчета");
		
		ОбъектФормы.УправленческиеНачисления.Очистить();
		ОбъектФормы.УправленческиеПоказатели.Очистить();
		
	КонецЕсли;
	
	Для каждого ОписаниеНачисления Из ДанныеПозиции.УправленческиеНачисления Цикл
		
		Если РедактированиеДанных Тогда
			
			СтруктураПоиска = Новый Структура("Начисление", ОписаниеНачисления.Начисление);
			СтрокиНачисления = ОбъектФормы.УправленческиеНачисления.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
				
				СтрокаНачисления.ДействующийВидРасчета = Истина;
				
				Если СтрокаНачисления.Свойство("РазмерДоРедактирования") Тогда
					СтрокаНачисления.РазмерДоРедактирования = ОписаниеНачисления.Размер;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("РазмерМинДоРедактирования") Тогда
					СтрокаНачисления.РазмерМинДоРедактирования = ОписаниеНачисления.РазмерМин;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("РазмерМаксДоРедактирования") Тогда
					СтрокаНачисления.РазмерМаксДоРедактирования = ОписаниеНачисления.РазмерМакс;
				КонецЕсли;
				
				НомерПоказателя = 1;
				Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
					
					Если СтрокаНачисления.Свойство("ТекущееЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееЗначение" + НомерПоказателя] = ОписаниеПоказателя.Значение;
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ТекущееМинимальноеЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееМинимальноеЗначение" + НомерПоказателя] = ОписаниеПоказателя.ЗначениеМин;
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ТекущееМаксимальноеЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееМаксимальноеЗначение" + НомерПоказателя] = ОписаниеПоказателя.ЗначениеМакс;
					КонецЕсли;
					
					НомерПоказателя = НомерПоказателя + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаНачисления = ОбъектФормы.УправленческиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления, ОписаниеНачисления);
			
			Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
				
				СтрокаПоказатель = ОбъектФормы.УправленческиеПоказатели.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказатель, ОписаниеПоказателя);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьФОТУправленческихНачисленийПозиции(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачисленийПозицииШтатногоРасписания();
	УправлениеШтатнымРасписанием.РассчитатьФОТВФормеСОднойПозицией(
		Форма, Форма.Объект, Форма.Объект.Владелец, УправлениеШтатнымРасписаниемКлиентСервер.ДатаСобытия(Форма, ТекущаяДатаСеанса()), ОписаниеТаблицыВидовРасчета, Ложь);
	
	Форма.Объект.ФОТУправленческий = 0;
	Форма.Объект.ФОТУправленческийМин = 0;
	Форма.Объект.ФОТУправленческийМакс = 0;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	Для каждого СтрокаНачислений Из ДанныеНачислений Цикл
		
		Форма.Объект.ФОТУправленческий = Форма.Объект.ФОТУправленческий + СтрокаНачислений.Размер;
		Форма.Объект.ФОТУправленческийМин = Форма.Объект.ФОТУправленческийМин + СтрокаНачислений.РазмерМин;
		Форма.Объект.ФОТУправленческийМакс = Форма.Объект.ФОТУправленческийМакс + СтрокаНачислений.РазмерМакс;
		
	КонецЦикла;
	
	Если Форма.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.ДоначислятьДоУправленческогоУчета Тогда
		
		ОтборСтрок = Новый Структура("Начисление", Форма.НачислениеДоначислениеДоУправленческогоУчета);
		НайденныеСтроки = Форма.Объект.Начисления.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаДоначисления = НайденныеСтроки[0];
			УправленческаяЗарплатаКлиентСервер.УстановитьРазмерДоплатыДоУправленческихНачислений(Форма, СтрокаДоначисления);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДополнитьИменаИсключаемыхИзЗаполненияДанных(ИменаИсключаемыхИзЗаполненияДанных) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаИсключаемыхИзЗаполненияДанных = ИменаИсключаемыхИзЗаполненияДанных + ",УправленческиеНачисления,УправленческиеПоказатели";
	
КонецПроцедуры

Процедура ЗаполнитьОбъектФормыДаннымиПозиции(Форма, Объект, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.УправленческиеНачисления.Очистить();
	Объект.УправленческиеПоказатели.Очистить();
	
	Для каждого ОписаниеНачисления Из ДанныеПозиции.УправленческиеНачисления Цикл
		ЗаполнитьЗначенияСвойств(Объект.УправленческиеНачисления.Добавить(), ОписаниеНачисления);
	КонецЦикла;
		
	Для каждого ОписаниеПоказателя Из ДанныеПозиции.УправленческиеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Объект.УправленческиеПоказатели.Добавить(), ОписаниеПоказателя);
	КонецЦикла;
	
	УправленческаяЗарплатаКлиентСервер.ШтатноеРасписаниеУстановитьОтображениеЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура ПоместитьДанныеОНачисленияхВОписаниеПозиции(Форма, Объект, ОписаниеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВнешниеДанные Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеПозиции,
			Форма.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания, "ИспользоватьУправленческиеНачисления,ДоначислятьДоУправленческогоУчета");
		
	КонецЕсли;
	
	// Начисления с показателями
	ОписаниеПозиции.УправленческиеНачисления = Объект.УправленческиеНачисления.Выгрузить();
	
КонецПроцедуры

Процедура ПрочитатьДанныеПозицииВФорму(Форма, Объект, НовыеДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИдентификаторВыделеннойСтроки Из Форма.Элементы.Позиции.ВыделенныеСтроки Цикл
		
		ВыделеннаяСтрока = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиПозиции", ВыделеннаяСтрока.ИдентификаторСтрокиПозиции);
		
		УдаляемыеСтроки = Объект.УправленческиеНачисления.НайтиСтроки(СтруктураОтбора);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.УправленческиеНачисления.Удалить(Объект.УправленческиеНачисления.Индекс(УдаляемаяСтрока));
		КонецЦикла;
		
		УдаляемыеСтроки = Объект.УправленческиеПоказатели.НайтиСтроки(СтруктураОтбора);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.УправленческиеПоказатели.Удалить(Объект.УправленческиеПоказатели.Индекс(УдаляемаяСтрока));
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеТекущейПозиции = Объект.Позиции.НайтиПоИдентификатору(Форма.ИдентификаторРедактируемойСтроки);
	
	Для каждого ОписаниеНачисления Из НовыеДанныеПозиции.УправленческиеНачисления Цикл
		
		НоваяСтрокаНачислений = Объект.УправленческиеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, ОписаниеНачисления);
		НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Для каждого ОписаниеПоказателя Из НовыеДанныеПозиции.УправленческиеПоказатели Цикл
		
		НоваяСтрокаПоказателя = Объект.УправленческиеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, ОписаниеПоказателя);
		НоваяСтрокаПоказателя.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОписаниеДанныхПозицииВХранилище(Объект, ОписаниеПозиции, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	// Начисления с показателями
	УправленческиеНачисления = Объект.УправленческиеНачисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.УправленческиеНачисления 	= УправленческиеНачисления;
	
	УправленческиеПоказатели = Объект.УправленческиеПоказатели.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.УправленческиеПоказатели = УправленческиеПоказатели;
	
КонецПроцедуры

Функция НачислениеДополняетФОТРегламентированныхНачислений(Форма, Начисление) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат (Начисление = Форма.НачислениеДоначислениеДоУправленческогоУчета);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьТекущиеДанныеПозиции(Объект, ТекущиеДанные, ДанныеТекущейПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческиеНачисления = ДанныеТекущейПозиции.УправленческиеНачисления;
	Если УправленческиеНачисления <> Неопределено Тогда
		
		ИдентификаторСтрокиВидаРасчета =
			УправлениеШтатнымРасписанием.МаксимальныйИдентификаторСтроки(Объект.УправленческиеНачисления, "ИдентификаторСтрокиВидаРасчета");
		
		Для каждого Начисление Из УправленческиеНачисления Цикл
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
			НоваяСтрокаНачислений = Объект.УправленческиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, Начисление);
			
			НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			НоваяСтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			Для каждого Показатель Из Начисление.Показатели Цикл
			
				Если ЗначениеЗаполнено(Показатель.Показатель) Тогда
					
					НоваяСтрокаПоказателей = Объект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, Показатель);
					
					НоваяСтрокаПоказателей.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
					НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументДанныеДляРасчетаЗарплаты

Процедура ДокументДанныеДляРасчетаЗарплатыПриНастройкеЭлементовФормы(Форма) Экспорт
	
	НастройкиДокумента = Форма.НастройкиДокумента;
	
	ЭлементОрганизация = Форма.Элементы.Организация;
	Если НастройкиДокумента.НесколькоОрганизаций Тогда
		ЭлементОрганизация = Форма.Элементы["ДанныеСводноОбъект"];
		Если НастройкиДокумента.ИспользуетсяТаблицаДетально Тогда
			ЭлементОрганизация = Форма.Элементы["ДанныеДетальноОбъект"];
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.УстановитьПараметрыВыбораУправленческойОрганизацииПоЭлементу(Форма, ЭлементОрганизация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти