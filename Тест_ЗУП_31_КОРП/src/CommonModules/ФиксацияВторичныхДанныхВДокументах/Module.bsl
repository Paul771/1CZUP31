
#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет данные табличной части с учетом зафиксированных реквизитов.
// 	Параметры:
//    	МенеджерВременныхТаблиц 	- менеджер временных таблиц, должен содержать временную таблицу с именем переданным в
//    	                           ИмяВТ.
//    	ИмяВТ 		- строка, имя ВТ содержащей данные для обновления вторичных данных.
//    	Объект		- ДокументОбъект, объект в котором надо обновить вторичные данные в ТЧ.
//    	ИмяТЧ 		- имя обновляемой табличной части.
//    	ПараметрыФиксацииВторичныхДанных - структура см.
//    	                                   ФиксацияВторичныхДанныхВДокументахКлиентСервер.ПараметрыФиксацииВторичныхДанных.
//
Функция ОбновитьВторичныеДанные(МенеджерВременныхТаблиц, Объект, ИмяТЧ = "", ИмяВТ = "ВТВторичныеДанные", ПараметрыФиксацииВторичныхДанных = Неопределено) Экспорт
	СоздатьВТОбновленныеДанные(МенеджерВременныхТаблиц, Объект, ИмяВТ, ИмяТЧ, ПараметрыФиксацииВторичныхДанных);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "ВЫБРАТЬ * ИЗ #ВТОбновленнаяТЧ# КАК ОбновленнаяТЧ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТОбновленнаяТЧ#",	"ВТОбновленныеДанные" + ИмяТЧ);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	ОбъектМодифицирован = Ложь;
	
	Если ИмяТЧ  = "" Тогда
		ОбновленныеДанные = Результат.Выгрузить()[0];
		Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
			Если ОписаниеФиксацииРеквизита.Значение.РеквизитСтроки Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита = ОписаниеФиксацииРеквизита.Значение.ИмяРеквизита;
			Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) И Не ЗначениеЗаполнено(ОбновленныеДанные[ИмяРеквизита]) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеДоОбновления = Объект[ИмяРеквизита];
			Объект[ИмяРеквизита] = ОбновленныеДанные[ИмяРеквизита];
			Если ЗначениеДоОбновления <> Объект[ИмяРеквизита] Тогда
				ОбъектМодифицирован = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбновленныеДанные = Результат.Выгрузить();
		Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
			Если НЕ (ОписаниеФиксацииРеквизита.Значение.РеквизитСтроки
				И ОписаниеФиксацииРеквизита.Значение.Путь = ИмяТЧ) Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита = ОписаниеФиксацииРеквизита.Значение.ИмяРеквизита;
			Для Каждого ОбновленнаяСтрока Из ОбновленныеДанные Цикл
				Если Не ЗначениеЗаполнено(ОбновленнаяСтрока[ИмяРеквизита]) И Не ЗначениеЗаполнено(Объект[ИмяТЧ][ОбновленнаяСтрока["НомерСтроки"] - 1][ИмяРеквизита]) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеДоОбновления = Объект[ИмяТЧ][ОбновленнаяСтрока["НомерСтроки"] - 1][ИмяРеквизита];
				Объект[ИмяТЧ][ОбновленнаяСтрока["НомерСтроки"] - 1][ИмяРеквизита] = ОбновленнаяСтрока[ИмяРеквизита];
				Если ЗначениеДоОбновления <> Объект[ИмяТЧ][ОбновленнаяСтрока["НомерСтроки"] - 1][ИмяРеквизита] Тогда
					ОбъектМодифицирован = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектМодифицирован;
КонецФункции

// Процедура обновляет данные шапки с учетом зафиксированных реквизитов.
//
// Параметры:
//   НовыеЗначенияРеквизитов - Структура - Новые значения реквизитов шапки документа.
//   Объект - ДокументОбъект.* - Документ в котором надо обновить вторичные данные.
//   ПараметрыФиксацииВторичныхДанных - Структура - Параметры фиксации реквизитов документа.
//       См. ФиксацияВторичныхДанныхВДокументахКлиентСервер.ПараметрыФиксацииВторичныхДанных().
//
Функция ОбновитьДанныеШапки(НовыеЗначенияРеквизитов, Объект, ПараметрыФиксацииВторичныхДанных = Неопределено) Экспорт
	Если ПараметрыФиксацииВторичныхДанных = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		ПараметрыФиксацииВторичныхДанных = МенеджерОбъекта.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	ОбъектМодифицирован = Ложь;
	
	ОписанияРеквизитов = ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов;
	Если ТипЗнч(ОписанияРеквизитов) = Тип("ФиксированноеСоответствие") Тогда
		ОписанияРеквизитов = Новый Соответствие(ОписанияРеквизитов); // Чтобы можно было получать значения по отсутствующим ключам.
	КонецЕсли;
	Для Каждого КлючИЗначение Из НовыеЗначенияРеквизитов Цикл
		ОписаниеРеквизита = ОписанияРеквизитов[КлючИЗначение.Ключ];
		Если ОписаниеРеквизита = Неопределено Тогда
			Продолжить; // Реквизит не фиксируется в данной конфигурации или режиме работы.
		КонецЕсли;
		ИмяРеквизита = ОписаниеРеквизита.ИмяРеквизита;
		Если Объект.ФиксацияИзменений.Найти(ИмяРеквизита, "ИмяРеквизита") <> Неопределено Тогда
			Продолжить; // Реквизит зафиксирован.
		КонецЕсли;
		СтароеЗначение = Объект[ИмяРеквизита];
		Если Не ЗначениеЗаполнено(СтароеЗначение) И Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить; // Оба значения - пустые.
		КонецЕсли;
		Объект[ИмяРеквизита] = КлючИЗначение.Значение; // Новое значение неявно приводится к типу реквизита.
		Если СтароеЗначение <> Объект[ИмяРеквизита] Тогда // Приведенное значение сравнивается со старым значением.
			ОбъектМодифицирован = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектМодифицирован;
КонецФункции

// Процедура создает образ табличной части с учетом зафиксированных реквизитов.
// 	Параметры:
//    	МенеджерВременныхТаблиц 	- менеджер временных таблиц, должен содержать временную таблицу с именем переданным в
//    	                           ИмяВТ.
//    	ИмяВТ 		- строка, имя ВТ содержащей данные для обновления вторичных данных.
//    	Объект		- ДокументОбъект, объект в котором надо обновить вторичные данные в ТЧ.
//    	ИмяТЧ 		- имя обновляемой табличной части.
//    	ПараметрыФиксацииВторичныхДанных - структура см.
//    	                                   ФиксацияВторичныхДанныхВДокументахКлиентСервер.ПараметрыФиксацииВторичныхДанных.
//
Процедура СоздатьВТОбновленныеДанные(МенеджерВременныхТаблиц, Объект, ИмяВТ = "ВТВторичныеДанные", ИмяТЧ = "", ПараметрыФиксацииВторичныхДанных = Неопределено) Экспорт
	Если ПараметрыФиксацииВторичныхДанных = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		ПараметрыФиксацииВторичныхДанных = МенеджерОбъекта.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	*
	|ИЗ
	|	#ИмяВТ# КАК ДанныеБД";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТ#", ИмяВТ);
	Запрос.Текст = ТекстЗапроса;
	ОбновляемыеПоля = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ИмяТЧ = "" Тогда
		ОписанияТЧ = ПараметрыФиксацииВторичныхДанных.ОписанияТЧ;
		Если ОписанияТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КлючевыеПоляТЧ = Неопределено;
		Если НЕ ОписанияТЧ.Свойство(ИмяТЧ, КлючевыеПоляТЧ) Тогда
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФиксации = Новый ТаблицаЗначений;
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Реквизиты = Новый Массив;
	
	Если ИмяТЧ = "" Тогда
		Для каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
			Реквизиты.Добавить(Новый Структура("Имя,Тип", Реквизит.Имя, Реквизит.Тип));
		КонецЦикла;
		// Т.к. в запросе будем использовать поле ИдентификаторСтрокиФикс, то добавим его в таблицы.
		// Для не ТЧ всегда = 0.
		ДанныеФиксации.Колонки.Добавить("ИдентификаторСтрокиФикс", Новый ОписаниеТипов("Число"));
	Иначе
		Для каждого Реквизит Из Объект.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			Реквизиты.Добавить(Новый Структура("Имя,Тип", Реквизит.Имя, Реквизит.Тип));
		КонецЦикла;
		
		// Для ТЧ также добавим стандартные реквизиты, ожидая, что там только номер строки.
		Для каждого Реквизит Из Объект.Метаданные().ТабличныеЧасти[ИмяТЧ].СтандартныеРеквизиты Цикл
			Реквизиты.Добавить(Новый Структура("Имя,Тип", Реквизит.Имя, Реквизит.Тип));
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекущийРеквизит Из Реквизиты Цикл
		Если ТекущийРеквизит.Имя = "ИдентификаторСтрокиФикс" Тогда
			ДанныеФиксации.Колонки.Добавить(ТекущийРеквизит.Имя, ТекущийРеквизит.Тип);
		Иначе
			ДанныеФиксации.Колонки.Добавить(ТекущийРеквизит.Имя, ТипБулево);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиФиксацииПоПути = Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].НайтиСтроки(Новый Структура("Путь", ИмяТЧ));
	Для каждого СтрокаФиксации Из СтрокиФиксацииПоПути Цикл
		ЗаполняемаяСтрокаФиксации = ДанныеФиксации.Найти(СтрокаФиксации.ИдентификаторСтроки, "ИдентификаторСтрокиФикс");
		Если ЗаполняемаяСтрокаФиксации = Неопределено Тогда
			ЗаполняемаяСтрокаФиксации = ДанныеФиксации.Добавить();
			ЗаполняемаяСтрокаФиксации.ИдентификаторСтрокиФикс = СтрокаФиксации.ИдентификаторСтроки;
		КонецЕсли;
		ЗаполняемаяСтрокаФиксации[СтрокаФиксации.ИмяРеквизита] = Истина;
	КонецЦикла;
	
	Если ИмяТЧ = "" Тогда
		ДанныеДокумента = Новый ТаблицаЗначений;
		Для каждого ТекущийРеквизит Из Реквизиты Цикл
			ДанныеДокумента.Колонки.Добавить(ТекущийРеквизит.Имя, ТекущийРеквизит.Тип);
		КонецЦикла;
		ДанныеДокумента.Колонки.Добавить("ИдентификаторСтрокиФикс", Новый ОписаниеТипов("Число"));
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.Добавить(), Объект);
	Иначе
		ДанныеДокумента = Объект[ИмяТЧ].Выгрузить();
	КонецЕсли;
	
	// Подготовим блоки для замены в запросе.
	
	// #СтрокаОбновляемыеПоляСВыбором#
	ШаблонПоляСВыбором = "
	|	ВЫБОР
	|		КОГДА ДанныеФиксации.ИмяПоля ИЛИ ДанныеБД.ИмяПоля ЕСТЬ NULL
	|			ТОГДА ДанныеВДокументе.ИмяПоля
	|		ИНАЧЕ ДанныеБД.ИмяПоля
	|	КОНЕЦ КАК ИмяПоля,";
	
	ШаблонПоляДокумента = "
	|	ДанныеВДокументе.ИмяПоля КАК ИмяПоля,";
	
	// #СтрокаОбновляемыеПоля#
	ШаблонПоляФикс = "
	|	ЕстьNULL(ДанныеФиксации.ИмяПоля, 0) КАК ИмяПоля,";
	
	ШаблонПоля = "
	|	Таблица.ИмяПоля КАК ИмяПоля,";
	
	СтрокаОбновляемыеПоля = "";
	СтрокаПоляДанных = "";
	
	Если ИмяТЧ = "" Тогда
		СтрокаПоляДанных = СтрокаПоляДанных + СтрЗаменить(ШаблонПоля, "ИмяПоля", "ИдентификаторСтрокиФикс");
	КонецЕсли;
	
	Для каждого Колонка Из Реквизиты Цикл
		Если Колонка.Имя = "ИдентификаторСтрокиФикс" Тогда
			СтрокаОбновляемыеПоля = СтрокаОбновляемыеПоля + СтрЗаменить(ШаблонПоляФикс, "ИмяПоля", Колонка.Имя);
		Иначе
			ПолеВторичныхДанных = Ложь;
			Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
				Если ОписаниеФиксацииРеквизита.Значение.Путь = ИмяТЧ И Колонка.Имя = ОписаниеФиксацииРеквизита.Значение.ИмяРеквизита Тогда
					ПолеВторичныхДанных = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПолеВторичныхДанных И ОбновляемыеПоля.Колонки.Найти(Колонка.Имя) <> Неопределено И ?(ИмяТЧ = "", Истина, (КлючевыеПоляТЧ.Найти(Колонка.Имя) = Неопределено)) Тогда
				СтрокаОбновляемыеПоля = СтрокаОбновляемыеПоля + СтрЗаменить(ШаблонПоляСВыбором, "ИмяПоля", Колонка.Имя);
			Иначе
				СтрокаОбновляемыеПоля = СтрокаОбновляемыеПоля + СтрЗаменить(ШаблонПоляДокумента, "ИмяПоля", Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
		СтрокаПоляДанных = СтрокаПоляДанных + СтрЗаменить(ШаблонПоля, "ИмяПоля", Колонка.Имя);
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаОбновляемыеПоля, 1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаПоляДанных, 1);
	
	// #УсловияСоединения#
	СтрокаУсловияСоединения = "";
	Если НЕ ИмяТЧ = "" Тогда
		Для каждого КлючевоеПоле Из КлючевыеПоляТЧ Цикл
			СтрокаУсловияСоединения = СтрокаУсловияСоединения +"
			| ДанныеБД." + КлючевоеПоле + " = ДанныеВДокументе." + КлючевоеПоле + " И";
		КонецЦикла;
	КонецЕсли;
	
	СтрокаУсловияСоединения = ?(СтрокаУсловияСоединения = "", "ИСТИНА ", СтрокаУсловияСоединения);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаУсловияСоединения, 1);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	#СтрокаПоляДанных#
	|ПОМЕСТИТЬ ВТДанныеВДокументе
	|ИЗ
	|	&ДанныеВОбъекте КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	#СтрокаПоляДанных#
	|ПОМЕСТИТЬ ВТДанныеФиксации
	|ИЗ
	|	&ДанныеФиксации КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	#СтрокаОбновляемыеПоляСВыбором#
	|	ПОМЕСТИТЬ #ВТОбновленнаяТЧ#
	| ИЗ
	|	ВТДанныеВДокументе КАК ДанныеВДокументе
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТ# КАК ДанныеБД
	|			ПО #УсловияСоединения#
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеФиксации КАК ДанныеФиксации
	|			ПО ДанныеВДокументе.ИдентификаторСтрокиФикс = ДанныеФиксации.ИдентификаторСтрокиФикс;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеВДокументе;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеФиксации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаОбновляемыеПоляСВыбором#", 	СтрокаОбновляемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СтрокаПоляДанных#", 					СтрокаПоляДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловияСоединения#", 				СтрокаУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТ#", 							ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТОбновленнаяТЧ#", 					"ВТОбновленныеДанные" + ИмяТЧ);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеВОбъекте", ДанныеДокумента);
	Запрос.УстановитьПараметр("ДанныеФиксации", ДанныеФиксации);
	
	Запрос.Выполнить();
КонецПроцедуры

// Процедура очищает фиксацию реквизитов табличной части:
// ОснованиеЗаполнения из СтруктураПараметровОписанияФиксацииРеквизитов.
//    	ПараметрыФиксацииВторичныхДанных - структура см.
//    	                                   ФиксацияВторичныхДанныхВДокументахКлиентСервер.ПараметрыФиксацииВторичныхДанных.
//
Процедура СброситьФиксациюИзмененийТабличнойЧасти(Объект, ИмяТЧ, ПараметрыФиксацииВторичныхДанных = Неопределено) Экспорт
	Если ПараметрыФиксацииВторичныхДанных = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		ПараметрыФиксацииВторичныхДанных = МенеджерОбъекта.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	СтрокиФиксацииТабличнойЧасти = Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].НайтиСтроки(Новый Структура("Путь", ИмяТЧ));
	Для каждого Строка Из СтрокиФиксацииТабличнойЧасти Цикл
		Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].Удалить(Строка)
	КонецЦикла;
КонецПроцедуры

// Функция возвращает структуру параметров механизма фиксации изменений.
// 	Параметры:
//    	Нет
// 	Возвращаемое значение
//		Структура с полями:
//			ОписаниеФиксацииРеквизитов 			- Структура, см. СтруктураПараметровОписанияФиксацииРеквизитов.
//          ИмяТабличнойЧастиФиксацияИзменений  - Строка, имя ТЧ в которой хранятся признаки зафиксированности
//                                                реквизитов формы.
//
Функция ПараметрыФиксацииВторичныхДанных(ОписаниеФиксацииРеквизитов, ИмяТабличнойЧастиФиксацияИзменений = "ФиксацияИзменений", ОписанияТЧ = Неопределено) Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОписаниеФиксацииРеквизитов", 			ОписаниеФиксацииРеквизитов);
	СтруктураПараметров.Вставить("ОписанияТЧ", 							ОписанияТЧ);
	СтруктураПараметров.Вставить("ИмяТабличнойЧастиФиксацияИзменений", 	ИмяТабличнойЧастиФиксацияИзменений);
	Возврат СтруктураПараметров
КонецФункции

// Функция возвращает структуру для формирования описания элемента фиксации реквизита.
// 	Параметры:
//    	Нет
// 	Возвращаемое значение
//		Структура с полями:
//			Имя реквизита 				- Строка, имя реквизита объекта фиксируемого механизмом.
//          ИмяГруппы               	- Строка, имя группировки описаний, механизм позволяет зафиксировать или снять
//                                     фиксацию для всех элементов группировки.
//          ОснованиеЗаполнения     	- Строка, имя группировки описаний, механизм позволяет зафиксировать или снять
//                                     фиксацию для всех элементов группировки.
//          Путь                    	- Строка, путь к таблице -  реквизиту формы, например ФизическиеЛица или.
//                                     Сотрудники(если реквизит ТЧ)  или ""(если реквизит объекта).
//          ОтображатьПредупреждение    - Булево, необходимость отображать предупреждение при редактировании для
//                                        реквизитов формы.
//          СтрокаПредупреждения    	- Строка, предупреждение при редактировании.
//          Используется			    - Булево, фиксация реквизита может использоваться не всегда.
//          РеквизитСтроки			    - Булево, реквизит относится к табличной части.
//
Функция СтруктураПараметровОписанияФиксацииРеквизитов() Экспорт
	ФиксацияРеквизита = Новый Структура("ИмяРеквизита,ИмяГруппы,ОснованиеЗаполнения,ФиксацияГруппы,Путь,ОтображатьПредупреждение,СтрокаПредупреждения,Используется,РеквизитСтроки");
	ФиксацияРеквизита.Используется   = Истина;
	ФиксацияРеквизита.Путь           = "";
	ФиксацияРеквизита.РеквизитСтроки = Ложь;
	ФиксацияРеквизита.ФиксацияГруппы = Ложь;
	ФиксацияРеквизита.СтрокаПредупреждения = НСтр("ru = 'Эти данные заполнены автоматически'");
	ФиксацияРеквизита.ОтображатьПредупреждение = Истина;
	Возврат ФиксацияРеквизита;
КонецФункции

// Функция возвращает описание элемента описания фиксации реквизитов.
// 	Параметры:
//    	ПараметрыОписания - Структура с полями как у СтруктураПараметровОписанияФиксацииРеквизитов().
// 	Возвращаемое значение
//		Структура с полями - см. описание СтруктураПараметровОписанияФиксацииРеквизитов().
//
Функция ОписаниеФиксацииРеквизита(ПараметрыОписания) Экспорт
	ФиксацияРеквизита = СтруктураПараметровОписанияФиксацииРеквизитов();
	
	ЗаполнитьЗначенияСвойств(ФиксацияРеквизита, ПараметрыОписания);
	
	Возврат Новый ФиксированнаяСтруктура(ФиксацияРеквизита);
КонецФункции

// Процедура переносит признаки фиксации из реквизитов формы в табличную часть объекта.
//    	ПараметрыФиксацииВторичныхДанных - структура см.
//    	                                   ФиксацияВторичныхДанныхВДокументахКлиентСервер.ПараметрыФиксацииВторичныхДанных.
//
Процедура ЗафиксироватьВторичныеДанныеДокумента(Объект, ПараметрыФиксацииВторичныхДанных = Неопределено) Экспорт
	Если ПараметрыФиксацииВторичныхДанных = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Метаданные().ПолноеИмя());
		ПараметрыФиксацииВторичныхДанных = МенеджерОбъекта.ПараметрыФиксацииВторичныхДанных();
	КонецЕсли;
	
	Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].Очистить();
	
	Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		Если НЕ ОписаниеФиксацииРеквизита.Значение.РеквизитСтроки Тогда
			НоваяФиксацияРеквизита = Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].Добавить();
			НоваяФиксацияРеквизита.ИмяРеквизита = ОписаниеФиксацииРеквизита.Значение.ИмяРеквизита;
			НоваяФиксацияРеквизита.Путь 		= ОписаниеФиксацииРеквизита.Значение.Путь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыФиксацииВторичныхДанных.ОписанияТЧ  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТЧДокумента Из ПараметрыФиксацииВторичныхДанных.ОписанияТЧ Цикл
		ИдентификаторСтрокиФикс = 1;
		Для каждого СтрокаТЧ Из Объект[ТЧДокумента.Ключ] Цикл
			СтрокаТЧ["ИдентификаторСтрокиФикс"] = ИдентификаторСтрокиФикс;
			Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
				Если ОписаниеФиксацииРеквизита.Значение.РеквизитСтроки Тогда
					НоваяФиксацияРеквизита 						= Объект[ПараметрыФиксацииВторичныхДанных.ИмяТабличнойЧастиФиксацияИзменений].Добавить();
					НоваяФиксацияРеквизита.ИмяРеквизита 		= ОписаниеФиксацииРеквизита.Значение.ИмяРеквизита;
					НоваяФиксацияРеквизита.Путь 				= ОписаниеФиксацииРеквизита.Значение.Путь;
					НоваяФиксацияРеквизита.ИдентификаторСтроки 	= ИдентификаторСтрокиФикс;
				КонецЕсли;
			КонецЦикла;
			ИдентификаторСтрокиФикс = ИдентификаторСтрокиФикс + 1;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
