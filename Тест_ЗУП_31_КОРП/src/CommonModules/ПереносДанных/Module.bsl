#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ПереносДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.87";
	Обработчик.Процедура = "ПереносДанных.УстановитьДоступенПереносДанныхИзПрежнихПрограмм";
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

Процедура УстановитьДоступенПереносДанныхИзПрежнихПрограмм(НеВыполнятьНачальнуюНастройкуПрограммы = Неопределено) Экспорт
	
	ДоступенПереносДанныхИзПрежнихПрограмм = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		ДоступенПереносДанныхИзПрежнихПрограмм = Модуль.ДоступенПереносДанныхИзПрежнихПрограмм(НеВыполнятьНачальнуюНастройкуПрограммы);
	КонецЕсли;
	Константы.ДоступенПереносДанныхИзПрежнихПрограмм.Установить(ДоступенПереносДанныхИзПрежнихПрограмм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы, вызываемые после загрузки данных.

Процедура ВыполнитьОбработчикиПослеЗагрузкиДанных(Параметры) Экспорт
	
	Если Параметры.ОбновитьНастройкуПВР Тогда
		ОбновитьНастройкуПВР();
	КонецЕсли;
	
	Если Параметры.ЗаполнитьДанныеУчетаСтажаПФР Тогда
		УчетСтажаПФРРасширенный.ЗаполнитьПервоначальныеДанныеУчета();
	КонецЕсли;
	
	Если Параметры.СоздатьГрафикРаботыПятидневка Тогда
		УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();
	КонецЕсли;
	
	Если Параметры.ОбновитьУчетСтраховыхВзносов Тогда
		ЗаполнитьСтраховыеВзносыПоФизическимЛицам();
	КонецЕсли;
	
	Если Параметры.ПеренестиДанныеУчетаВремениВНовыеРегистры Тогда
		УчетРабочегоВремениРасширенный.ПеренестиДанныеУчетаВремениВНовыеРегистры();
	КонецЕсли;
	
	Если Параметры.ОбновитьНастройкиШтатногоРасписания Тогда
		ЗаписатьНастройкиШтатногоРасписания();
	КонецЕсли;
	
	Если Параметры.ОбновитьСтруктуруШтатногоРасписания Тогда
		ОбновитьКлассыУсловийТрудаВШтатномРасписании();
		Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПоПодразделениям();
	КонецЕсли;
	
	Если Параметры.ОбновитьВидыКонтактнойИнформации Тогда
		ОбновитьВидыКонтактнойИнформации();
	КонецЕсли;
	
	Если Параметры.ОбновитьНастройкиПрограммы <> 0 Тогда
		ВыполнитьОбновлениеНастроекПрограммы(Параметры.ОбновитьНастройкиПрограммы);
	КонецЕсли;
	
	Если Параметры.ОбновитьТочностьПоказателей Тогда
		ОбновитьТочностьПоказателей();
	КонецЕсли;
	
	Если Параметры.ОбновитьДанныеСтажа Тогда
		ОбновитьДанныеСтажа();	
	КонецЕсли;
	
	Если Параметры.ОбновитьУчетНДФЛ Тогда
		// не выполняем действия	
	КонецЕсли;
	
	Если Параметры.ОбновитьУчетИсполнительныеДокументы Тогда
		РасчетЗарплатыРасширенный.УточнитьРасходПоРегиструУдержанияДоПределаПоСотрудникам();
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПараметровЗагрузкиДанных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗаполнитьДанныеУчетаСтажаПФР", Ложь);
	Параметры.Вставить("ОбновитьВидыКонтактнойИнформации", Ложь);
	Параметры.Вставить("ОбновитьДанныеСтажа", Ложь);
	Параметры.Вставить("ОбновитьНастройкиШтатногоРасписания", Ложь);
	Параметры.Вставить("ОбновитьУчетИсполнительныеДокументы", Ложь);
	Параметры.Вставить("ОбновитьНастройкуПВР", Ложь);
	Параметры.Вставить("ОбновитьСтруктуруШтатногоРасписания", Ложь);
	Параметры.Вставить("ОбновитьТочностьПоказателей", Ложь);
	Параметры.Вставить("ОбновитьУчетНДФЛ", Ложь);
	Параметры.Вставить("ОбновитьУчетСтраховыхВзносов", Ложь);
	Параметры.Вставить("ПеренестиДанныеУчетаВремениВНовыеРегистры", Ложь);
	Параметры.Вставить("СоздатьГрафикРаботыПятидневка", Ложь);
	Параметры.Вставить("ОбновитьНастройкиПрограммы", 0);
	
	Возврат Параметры;
	
КонецФункции 

Процедура ДокументПереносДанныхПриЗагрузке(Объект, СписокРегистров) Экспорт
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	
	Для Каждого ИмяРегистра Из СписокРегистров Цикл
		Если Объект.ТаблицаРегистров.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
			Объект.ТаблицаРегистров.Добавить().Имя = ИмяРегистра;
		КонецЕсли;
		Объект.Движения[ИмяРегистра].ОбменДанными.Загрузка	= Истина;
		Если ИмяРегистра = "ПлановыеНачисленияПоДоговорам" Или ИмяРегистра = "Начисления" Или ИмяРегистра = "ДанныеТабельногоУчетаРабочегоВремениСотрудников" Тогда
		Иначе	
			Объект.Движения[ИмяРегистра].ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		КонецЕсли;
	КонецЦикла;
	
	Объект.Заполнить(Неопределено);	
	
КонецПроцедуры

Процедура ПроцентыСевернойНадбавкиФЛ_Преобразовать(ПараметрыОбъекта, Объект) Экспорт
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ФизическоеЛицо			= Объект.ФизическоеЛицо;
		ТаблицаПроцентовСН		= ЗначениеИзСтрокиВнутр(ПараметрыОбъекта.Получить("ТаблицаПроцентовСН"));
		
		// Создаем набор записей СН по Физлицу.
		НаборЗаписейДанныхОПроцентеСН = РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейДанныхОПроцентеСН.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		
		Для каждого СтрокаТП Из ТаблицаПроцентовСН Цикл
			
			// Удаляем все записи с периодом больше текущего
			МассивУдаляемыхЗаписей = Новый Массив;
			Для Каждого Запись Из НаборЗаписейДанныхОПроцентеСН Цикл
				Если Запись.Период >= СтрокаТП.Период  Тогда
					МассивУдаляемыхЗаписей.Добавить(Запись);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Запись Из МассивУдаляемыхЗаписей Цикл
				НаборЗаписейДанныхОПроцентеСН.Удалить(Запись);
			КонецЦикла;
			
			// Формируем текущую запись регистра
			НоваяЗапись = НаборЗаписейДанныхОПроцентеСН.Добавить();
			НоваяЗапись.ФизическоеЛицо 						= ФизическоеЛицо;
			НоваяЗапись.Период 								= СтрокаТП.Период;
			НоваяЗапись.ПроцентСевернойНадбавки 			= СтрокаТП.Процент;
			
			// Получаем массив изменений процента СевернойНадбавки.
			ПорядокНачисления 		= СтрокаТП.ПорядокИсчисленияПроцентаСевернойНадбавки;
			ПроцентНадбавки 		= СтрокаТП.Процент; 
			Период 					= СтрокаТП.Период;
			
			МассивПериодов = Новый Массив;
			
			// Расчитываем проценты северного стажа
			ОписаниеШкалы = Перечисления.ПорядокНачисленияСеверныхНадбавок.ОписаниеШкалыПоПорядкуНачисления(ПорядокНачисления);
			Для каждого УчастокШкалы Из ОписаниеШкалы Цикл
				Пока ПроцентНадбавки < УчастокШкалы.Ограничение Цикл
					Период = ДобавитьМесяц(Период, УчастокШкалы.РазмерПериода);
					ПроцентНадбавки = Мин(ПроцентНадбавки + УчастокШкалы.РазмерПрироста, УчастокШкалы.Ограничение);
					Элемент = Новый Структура("Период, Процент", Период, ПроцентНадбавки);
					МассивПериодов.Добавить(Элемент);
				КонецЦикла;
			КонецЦикла;
			МассивИзмененийПроцента = МассивПериодов;
			
			// Формируем новые записи регистра.								
			Для каждого Элемент Из МассивИзмененийПроцента Цикл
				НоваяЗапись = НаборЗаписейДанныхОПроцентеСН.Добавить();
				НоваяЗапись.ФизическоеЛицо 						= ФизическоеЛицо;
				НоваяЗапись.Период 								= Элемент.Период;
				НоваяЗапись.ПроцентСевернойНадбавки 			= Элемент.Процент;
			КонецЦикла;
		КонецЦикла;
		
		// Записываем набор.
		НаборЗаписейДанныхОПроцентеСН.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьНастройкуПВР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК ВидРасчета,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЗаработокНаВремяТрудоустройства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Ссылка КАК ВидРасчета,
	|	Удержания.КатегорияУдержания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
		
		КоллекторНачислений = Новый Соответствие;
		Выборка = Результат[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание =  СвойстваНачислений[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени];
			ВРОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
			Если Описание.ОтборБазовых <> Неопределено Тогда
				ВРОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
			КонецЕсли;
			КоллекторНачислений.Вставить(Выборка.ВидРасчета, ВРОбъект);
			
		КонецЦикла;
		
		СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
		КоллекторУдержаний = Новый Соответствие;
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание =  СвойстваУдержаний[Выборка.КатегорияУдержания];
			ВРОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
			Если Описание.ОтборБазовых <> Неопределено Тогда
				ВРОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
			КонецЕсли;
			КоллекторУдержаний.Вставить(Выборка.ВидРасчета, ВРОбъект);
			
		КонецЦикла;
		
		ПланыВидовРасчета.Начисления.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержаниеПослеЗагрузки(Объект, ОбъектМодифицирован) Экспорт
	
	ОбъектМодифицирован = Истина;
	
	СвойстваПоКатегориям	= ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	СвойстваУдержания		= СвойстваПоКатегориям.Получить(Объект.КатегорияУдержания);
	
	ВыполнятьАлгоритм = Истина;
	
	Если СвойстваУдержания = Неопределено Тогда
		// если не нашлось для соответствующей категории используем свойства по умолчанию
		СвойстваУдержания = СвойстваПоКатегориям.Получить(Перечисления.КатегорииУдержаний.ПустаяСсылка());
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	Если ВыполнятьАлгоритм Тогда
		
		Инструкции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваУдержания.ИменаИнструкций);
		НедоступныеСвойства = СвойстваУдержания.НедоступныеСвойства;
		
		Для Каждого КлючИЗначение Из СвойстваУдержания Цикл
			ИмяСвойства = КлючИЗначение.Ключ;
			Если Инструкции.Найти(ИмяСвойства) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НедоступныеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
				// Недоступные свойства пользователь изменять не может
				Объект[ИмяСвойства] = КлючИЗначение.Значение;
				
			Иначе
				// Остальные заполняются только если не заполнены в старой программе
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если Не СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеПоказатели.Добавить(СтрокаПоказателя.Показатель.Идентификатор);
	КонецЦикла;
	
	Объект.Показатели.Очистить();
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Неопределено);
	
	// Определяем нужна ли сама настройка (есть ли показатель среднего заработка)
	ЕстьПоказателиСреднегоЗаработка = Ложь;
	ПоказателиСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиРасчетаСреднегоЗаработка();
	СреднийЗаработокОбщий = ПоказателиСреднегоЗаработка["СреднийЗаработокОбщий"];
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если СтрокаПоказателя.Показатель = СреднийЗаработокОбщий Тогда
			ЕстьПоказателиСреднегоЗаработка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПоказателиСреднегоЗаработка Тогда
		Если Не ЗначениеЗаполнено(Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка) Тогда
			Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
		КонецЕсли;
		
		// Определяем доступность ввода произвольного периода
		ДоступностьВвода = Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору;
		
		Если Не ДоступностьВвода Тогда
			Объект.КоличествоМесяцевРасчетаСреднегоЗаработка = 12;
		КонецЕсли;
	КонецЕсли;
	
	БазовыеВидыРасчета = Объект.БазовыеВидыРасчета.Выгрузить();
	БазовыеВидыРасчета.Свернуть("ВидРасчета");
	Объект.БазовыеВидыРасчета.Загрузить(БазовыеВидыРасчета);
	
	Если ЗапрашиваемыеПоказатели.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(Объект, ЗапрашиваемыеПоказатели);
		
	Иначе
		Если РасчетЗарплатыРасширенный.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
			ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(Объект.ФормулаРасчета);
		Иначе
			ПоказателиФормулы = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(Объект.СпособРасчета);
		КонецЕсли;
		ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(Объект.Ссылка, ПоказателиФормулы);
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Объект.Показатели);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НачислениеПослеЗагрузки(Объект, ОбъектМодифицирован) Экспорт
	
	ОбъектМодифицирован = Истина;
	
	СвойстваПоКатегориям	= ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	СвойстваНачисления		= СвойстваПоКатегориям.Получить(Объект.КатегорияНачисленияИлиНеоплаченногоВремени);
	
	ВыполнятьАлгоритм = Истина;
	
	Если СвойстваНачисления = Неопределено Тогда
		// если не нашлось для соответствующей категории используем свойства по умолчанию
		СвойстваНачисления = СвойстваПоКатегориям.Получить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(Объект, СвойстваНачисления, , "СреднийЗаработокОбщий");
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	// Если категория определена, то свойства, которые она определяет недоступны для изменения пользователем.
	Если ВыполнятьАлгоритм И Не ЗначениеЗаполнено(Объект.КатегорияНачисленияИлиНеоплаченногоВремени) Тогда
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	// Поля структуры свойств, которые не являются непосредственно свойствами ПВР, 
	// но содержат инструкции и/или другие сведения о категории начисления.
	Если ВыполнятьАлгоритм Тогда
		
		Инструкции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваНачисления.ИменаИнструкций);
		НедоступныеСвойства = СвойстваНачисления.НедоступныеСвойства;
		
		Если Объект.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда") Тогда 
			Если Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета") Тогда 
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "СреднийЗаработокОбщий");
			Иначе 
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "ВидВремени");
			КонецЕсли;
		КонецЕсли;
		
		Объект.СреднийЗаработокФСС.Очистить();
		
		Для Каждого КлючИЗначение Из СвойстваНачисления Цикл
			ИмяСвойства = КлючИЗначение.Ключ;
			Если Инструкции.Найти(ИмяСвойства) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяСвойства = "СреднийЗаработокОбщий" Тогда
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокОбщий" Тогда
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокФСС" Тогда
				
				Если КлючИЗначение.Значение Тогда
					НоваяСтрока = Объект.СреднийЗаработокФСС.Добавить();
					НоваяСтрока.ПорядокРасчета	= Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
					НоваяСтрока.Значение		= Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокФСС2010" Тогда
				
				ВключатьВСреднийЗаработокФСС = КлючИЗначение.Значение;
				Если ВключатьВСреднийЗаработокФСС = Неопределено Тогда
					ВключатьВСреднийЗаработокФСС = СвойстваНачисления.ВключатьВСреднийЗаработокФСС;	
				КонецЕсли;
				
				Если ВключатьВСреднийЗаработокФСС Тогда
					НоваяСтрока = Объект.СреднийЗаработокФСС.Добавить();
					НоваяСтрока.ПорядокРасчета	= Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010;
					НоваяСтрока.Значение		= Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
				КонецЕсли
				
			ИначеЕсли ИмяСвойства = "ПериодРасчетаБазовыхНачислений" Тогда
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "ИндексируетсяСреднийЗаработокОбщий" Тогда
				
			ИначеЕсли НедоступныеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
				// Недоступные свойства пользователь изменять не может
				Объект[ИмяСвойства] = КлючИЗначение.Значение;
				
			ИначеЕсли (ИмяСвойства = "КодДоходаНДФЛ") И (ИмяСвойства = "ВидНачисленияДляНУ") Тогда
				// Эти свойства всегда переносятся, если они не находятся в списке недоступных
				
			Иначе
				// Остальные заполняются только если не заполнены в старой программе
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если (Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете")
		Или Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете"))
		И Объект.КатегорияНачисленияИлиНеоплаченногоВремени <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет
		И Объект.КатегорияНачисленияИлиНеоплаченногоВремени <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет Тогда
		Объект.ВключатьВФОТ = Истина;
	КонецЕсли;
	
	ФОТНеРедактируется = РасчетЗарплатыРасширенный.ФОТРассчитываетсяАвтоматически(Объект);
	Если ФОТНеРедактируется <> Объект.ФОТНеРедактируется Тогда
		Если ФОТНеРедактируется = Неопределено Тогда
			Объект.ФОТНеРедактируется = Ложь;
		Иначе
			Объект.ФОТНеРедактируется = ФОТНеРедактируется;	
		КонецЕсли;	
	КонецЕсли;
	
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если Не СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеПоказатели.Добавить(СтрокаПоказателя.Показатель.Идентификатор);
	КонецЦикла;
	
	Объект.Показатели.Очистить();
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Неопределено);
	
	БазовыеВидыРасчета = Объект.БазовыеВидыРасчета.Выгрузить();
	БазовыеВидыРасчета.Свернуть("ВидРасчета");
	Объект.БазовыеВидыРасчета.Загрузить(БазовыеВидыРасчета);
	
	Если ЗапрашиваемыеПоказатели.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(Объект, ЗапрашиваемыеПоказатели);
		
	Иначе
		Если РасчетЗарплатыРасширенный.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
			ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(Объект.ФормулаРасчета);
		Иначе
			ПоказателиФормулы = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(Объект.СпособРасчета);
		КонецЕсли;
		ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(Объект.Ссылка, ПоказателиФормулы);
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Объект.Показатели);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КатегорияДохода) Тогда
		Объект.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Объект.КодДоходаНДФЛ);
	КонецЕсли;	
	
КонецПроцедуры

//	СвойстваПоиска – соответствие, в котором хранятся текущие значения реквизитов поиска.
//
Процедура ПоказателиПоследовательностьПолейПоиска(СвойстваПоиска) Экспорт
	
	Идентификатор = СвойстваПоиска.Получить("Идентификатор");
	ЗаписыватьПоказатель = Ложь;
	ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
	
	Если Идентификатор = "НормаЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаЧасов";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма часов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма (час.)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВДнях" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВДнях";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в днях'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "КалендарныеДни" Тогда
		
		ОписаниеПоказателя.Идентификатор = "КалендарныеДни";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Календарные дни'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Календ. дн.'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВЧасах" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в часах'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "КалендарныеДниМесяца" Тогда
		
		ОписаниеПоказателя.Идентификатор = "КалендарныеДниМесяца";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Календарные дни месяца'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Календ. дн. (мес)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "НормаДнейПоГрафикуПолногоРабочегоВремени" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаДнейПоГрафикуПолногоРабочегоВремени";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВДнях";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма дней по графику полного рабочего времени'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru='Норма дн. полн.граф.'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "НормаЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаЧасов";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма часов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма (час.)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "Оклад" Тогда
		
		ОписаниеПоказателя.Идентификатор = "Оклад";
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладЗаКлассныйЧин" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладЗаКлассныйЧин";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад за классный чин'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. классн. чин'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОтработаноДней" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОтработаноДней";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Отработано дней, в т.ч. сверхурочно'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Отраб. (дни)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОтработаноЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОтработаноЧасов";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Отработано часов, в т.ч. сверхурочно'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Отраб. (час.)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РасчетнаяБаза" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РасчетнаяБаза";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Расчетная база'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Расч. база'");
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ТарифнаяСтавкаДневная" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ТарифнаяСтавкаДневная";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Тарифная ставка (дневная)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Дневн. тариф'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВЧасах" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в часах'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ТарифнаяСтавкаЧасовая" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ТарифнаяСтавкаЧасовая";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Тарифная ставка (часовая)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Час. тариф'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "СдельныйЗаработок" Тогда
		
		ОписаниеПоказателя.Идентификатор = "СдельныйЗаработок";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Сдельный заработок'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Сдельно'");
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентНадбавкиЗаВредность" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаВредность";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за вредность'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РайонныйКоэффициент" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РайонныйКоэффициент";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Районный коэффициент'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Районн. коэфф.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "СевернаяНадбавка" Тогда
		
		ОписаниеПоказателя.Идентификатор = "СевернаяНадбавка";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Северная надбавка'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% сев. надб.'");
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладПоВоинскомуЗванию" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладПоВоинскомуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по воинскому званию'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'ОВЗ'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладПоСпециальномуЗванию" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладПоСпециальномуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по специальному званию'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. по званию'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентДСВ" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентДСВ";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент добровольных страховых взносов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% ДСВ'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентПрофсоюзныхВзносов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентПрофсоюзныхВзносов";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент профсоюзных взносов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% профвзносов'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РасчетнаяБазаСтраховыеВзносы" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РасчетнаяБазаСтраховыеВзносы";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Расчетная база страховых взносов'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Расч. база ДСВ'");
		
		ЗаписыватьПоказатель = Истина;	
		
	КонецЕсли;
	
	Если ЗаписыватьПоказатель Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя);
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюПослеЗагрузкиОбъекта(Объект, ОбъектМодифицирован) Экспорт

	ОбъектМодифицирован = Истина;
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("Приемник");
	ДанныеЗаполнения.Колонки.Добавить("ВидКИ");
	ДанныеЗаполнения.Колонки.Добавить("СтруктураКИ");
	ДанныеЗаполнения.Колонки.Добавить("КлючСтроки");
	
	Для Каждого КИ Из Объект.КонтактнаяИнформация Цикл
		СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
		СтрокаЗаполнения.Приемник		= Объект;
		СтрокаЗаполнения.ВидКИ			= КИ.Вид;
		СтрокаЗаполнения.СтруктураКИ	= УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(КИ.ЗначенияПолей, КИ.Вид);
	КонецЦикла;
	
	// используем Попытку-Исключение для возможности продолжить загрузку данных
	Попытка
		УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения);
	Исключение
	КонецПопытки;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура ЗаполнитьСтраховыеВзносыПоФизическимЛицам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТВсеРегистраторы
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор ССЫЛКА Документ.ПереносДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор,
	|	Регистраторы.Месяц КАК Месяц,
	|	Регистраторы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТРегистраторыКОбработке
	|ИЗ
	|	ВТВсеРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносыПоФизическимЛицам
	|		ПО Регистраторы.Регистратор = СтраховыеВзносыПоФизическимЛицам.Регистратор
	|ГДЕ
	|	СтраховыеВзносыПоФизическимЛицам.ОблагаетсяЕНВД ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеСтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсчисленныеСтраховыеВзносы.Период КАК Период,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТФизическиеЛицаКОбработке
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторыКОбработке.Регистратор
	|			ИЗ
	|				ВТРегистраторыКОбработке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК Месяц,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаКОбработке КАК ФизическиеЛицаКОбработке
	|		ПО ИсчисленныеСтраховыеВзносы.Период = ФизическиеЛицаКОбработке.Период
	|			И ИсчисленныеСтраховыеВзносы.ФизическоеЛицо = ФизическиеЛицаКОбработке.ФизическоеЛицо
	|			И (НЕ ИсчисленныеСтраховыеВзносы.Регистратор В
	|					(ВЫБРАТЬ
	|						ВТРегистраторыКОбработке.Регистратор
	|					ИЗ
	|						ВТРегистраторыКОбработке))
	|			И ИсчисленныеСтраховыеВзносы.Организация = ФизическиеЛицаКОбработке.Организация
	|ГДЕ
	|	НЕ ФизическиеЛицаКОбработке.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегистраторыКОбработке.Регистратор,
	|	РегистраторыКОбработке.Месяц,
	|	РегистраторыКОбработке.Организация
	|ИЗ
	|	ВТРегистраторыКОбработке КАК РегистраторыКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Месяц,
	|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			
			ПериодРегистрации = Выборка.Месяц;
			
			Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
				
				Регистратор = Выборка.Регистратор;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", Регистратор);
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТФизическиеЛица
				|ИЗ
				|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК Начисления
				|ГДЕ
				|	Начисления.Регистратор = &Ссылка";
				Запрос.Выполнить();
				
				УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОВзносах(Организация, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц);
				СтраховыеВзносыПоФизическимЛицам = УчетСтраховыхВзносов.СтраховыеВзносыПоФизическимЛицам(Организация, ПериодРегистрации, Регистратор, Запрос.МенеджерВременныхТаблиц);
				
				НаборЗаписей = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				Для каждого СтрокаДанных Из СтраховыеВзносыПоФизическимЛицам Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					НоваяСтрока.Организация = Организация;
					НоваяСтрока.Период = ПериодРегистрации;
				КонецЦикла;
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКлассыУсловийТрудаВШтатномРасписании()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассыУсловийТрудаПоДолжностям.Должность
	|ПОМЕСТИТЬ ВТДолжности
	|ИЗ
	|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыУсловийТрудаПоДолжностям.Период,
	|	Позиции.Ссылка КАК Должность,
	|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
	|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений
	|ИЗ
	|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ШтатноеРасписание.Ссылка КАК Ссылка,
	|			Должности.Должность КАК Должность
	|		ИЗ
	|			Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
	|				ПО ШтатноеРасписание.Должность = Должности.Должность) КАК Позиции
	|		ПО КлассыУсловийТрудаПоДолжностям.Должность = Позиции.Должность
	|ГДЕ
	|	КлассыУсловийТрудаПоДолжностям.Должность ССЫЛКА Справочник.Должности";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;      
	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформации()
	
	Информация = НастройкаПорядкаЭлементов.ПолучитьИнформациюДляПеремещения(Метаданные.Справочники.ВидыКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.РеквизитДопУпорядочивания = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	ВидыКонтактнойИнформации.Тип.Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.РеквизитДопУпорядочивания = НастройкаПорядкаЭлементовСлужебный.ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(Информация, Выборка.Родитель, Неопределено);
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеНастроекПрограммы(ВариантОбновления)
	
	Обновить = Ложь;
	
	Если ВариантОбновления = 1 Тогда
		
		ПараметрыНастроекЗК = ЗарплатаКадрыРасширенный.ПараметрыНастройкиЗарплатаКадрыПоУмолчанию();
		ПараметрыНастроекЗК.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = Ложь;
		Обновить = Истина;
		
	ИначеЕсли ВариантОбновления = 2 Тогда  
		
		ПараметрыНастроекЗК = ЗарплатаКадрыРасширенный.ОписаниеПараметровНастройкиЗарплатаКадры();
		Обновить = Истина;
		
	КонецЕсли;
	
	Если Обновить Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			Модуль.ВыполнитьОбновлениеНастроекПрограммыПослеПереносаДанных(ПараметрыНастроекЗК);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьТочностьПоказателей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателей.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Показатель.Точность = 0
	|	И ЗначенияПоказателей.Значение - (ВЫРАЗИТЬ(ЗначенияПоказателей.Значение КАК ЧИСЛО(15, 0))) <> 0
	|	И ЗначенияПоказателей.Показатель.ТипПоказателя В (ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный), ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Числовой))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательОбъект = Выборка.Показатель.ПолучитьОбъект();
		ПоказательОбъект.Точность = 2;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеСтажа()
	
	КадровыйУчетРасширенный.ПеренестиПроцентыСевернойНадбавки();
	РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.ЗаполнитьДействуетДоРегистраСведений();
	КадровыйУчетРасширенный.ЗаполнитьНакопленныеСтажиФизическихЛиц();	
	
КонецПроцедуры

Процедура ЗаписатьНастройкиШтатногоРасписания()
	
	НастройкиШтатногоРасписания = Новый Структура("ИспользоватьШтатноеРасписание,НеИспользоватьШтатноеРасписание");
	НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = Истина;
	НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание = Ложь;
	
	Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, НастройкиШтатногоРасписания);
	УправлениеШтатнымРасписанием.ЗаписатьНастройкиШтатногоРасписания(Настройки);
	
КонецПроцедуры


#КонецОбласти

Процедура ПроверкаВозможностиЗагрузкиФайлаЗаписиСтажаПФР(Параметры, Отказ, ПричинаОтказа) Экспорт
	
	ВыгруженныеОрганизации = Параметры.ВыгруженныеОрганизации.Получить();
	
	Если ВыгруженныеОрганизации = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = "Отсутствуют данные для загрузки";	
		Возврат;
	КонецЕсли;	
	
	// ВыгруженныеОрганизации - таблица значений с полями
	//	Наименование и ИНН
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации";
	ОрганизацииИБ = Запрос.Выполнить().Выгрузить();
	Отбор = Новый Структура("Наименование,ИНН");
	ТекстСообщения = "Загрузка данных отменена. В загружаемых данных есть организации, отсутствующие в информационной базе";
	Для каждого Организация Из ВыгруженныеОрганизации Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Организация);
		НайденныеСтроки = ОрганизацииИБ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Отказ = Истина;
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС;
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "Наименование: " + СОКРЛП(Организация.Наименование) + " ИНН: " + СОКРЛП(Организация.ИНН);
		КонецЕсли;
	КонецЦикла;
	
	ПричинаОтказа = ТекстСообщения;
	
КонецПроцедуры

Процедура ОбработатьПериодыОплаченныеДоНачалаЭксплуатации(Объект, ОбъектНайден, ПараметрыОбъекта) Экспорт

	Если Не ОбъектНайден Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПериодыОплаченныеДоНачалаЭксплуатации");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
	Попытка 
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	Начисления = ПараметрыОбъекта.Получить("НачисленияТабличнаяЧасть");
	Начисления.Индексы.Добавить("Сотрудник,ВидПериода,ДатаНачала,ДатаОкончания");
	Отбор = Новый Структура("Сотрудник,ВидПериода,ДатаНачала,ДатаОкончания");
	
	ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	ДанныеОбновлены = Ложь;
	НеОбновленныеСтроки = Новый Массив;
	Для каждого СтрокаТЧ Из ДокументОбъект.Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидСтажаПФР) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		НайденныеСтроки = Начисления.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НеОбновленныеСтроки.Добавить(СтрокаТЧ);
		ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[0].ВидСтажаПФР) Тогда
			СтрокаТЧ.ВидСтажаПФР = НайденныеСтроки[0].ВидСтажаПФР;
			ДанныеОбновлены = Истина;
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ДанныеОбновлены Тогда
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры
