////////////////////////////////////////////////////////////////////////////////
// Подсистема "Синхронизация данных"
// Серверные процедуры, обслуживающие правила регистрации объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регистрации изменений для начальной выгрузки данных.
// Используется для переопределения стандартной обработки регистрации изменений.
// При стандартной обработке будут зарегистрированы изменения всех данных из состава плана обмена.
// Если для плана обмена предусмотрены фильтры ограничения миграции данных,
// то использование этого обработчика позволит повысить производительность начальной выгрузки данных.
// В обработчике следует реализовать регистрацию изменений с учетом фильтров ограничения миграции данных.
// Если для плана обмена используются ограничения миграции по дате или по дате и организациям,
// то можно воспользоваться универсальной процедурой
// ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям.
// Обработчик используется только для универсального обмена данными с использованием правил обмена
// и для универсального обмена данными без правил обмена и не используется для обменов в РИБ.
// Использование обработчика позволяет повысить производительность
// начальной выгрузки данных в среднем в 2-4 раза.
//
// Параметры:
//
// Получатель - ПланОбменаСсылка - Узел плана обмена, в который требуется выгрузить данные.
//
// СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки
//                                 события.
//  Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события
//  производиться не будет.
//  Отказ от стандартной обработки не отменяет действие.
//  Значение по умолчанию - Истина.
//
Процедура ОбработкаРегистрацииНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		Модуль.ОбработкаРегистрацииНачальнойВыгрузкиДанных(Получатель, СтандартнаяОбработка, Отбор);
	КонецЕсли;
	
КонецПроцедуры

// Заменяет текст запроса регистрации изменений объекта для получения списка узлов-получателей по организации.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана обмена,
//      для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта
//  Организации - Ссылка или массив ссылок на организации, по которым нужно получить список узлов-получателей.
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоОрганизациямИПодразделениям(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, Организации = Неопределено, Подразделения = Неопределено) Экспорт
	
	ИспользоватьКэш = Ложь;
	
	ПараметрыЗапроса.Вставить("Организации", Организации);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СвойствоОбъекта_Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОрганизации.Организация В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Организации.Организация
	|			ИЗ
	|				ВТОрганизации КАК Организации)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0 И
	|	НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И 1 В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				1
	|			ИЗ
	|				ВТОрганизации)
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка,
	|	ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0 И
	|	НЕ ПланОбменаОсновнаяТаблица.ИспользоватьОтборПоОрганизациям";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ПланОбмена.%1.Организации", ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ПланОбмена.%1", ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("&%1ЭтотУзел", ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

// Возвращает структуру ограничения регистрации независимого регистра сведений
//
// Возвращаемое значение:
//		Структура
//			* Организации - Строка, Массив - имена полей организации в наборе сведений
//			* Подразделения - Строка, Массив - имена полей подразделения в наборе сведений
//			* ФизическиеЛица - Строка, Массив - имена полей физического лица в наборе сведений
//			* Сотрудники - Строка, Массив - имена полей сотрудника в наборе сведений
//			* ДатыПолученияДанных - Строка, Массив - имена полей даты получения кадровых сведений.
//
Функция ИменаПолейОграниченияРегистрацииРегистраСведений() Экспорт
	
	СтруктураОграниченияРегистрации = Новый Структура;
	СтруктураОграниченияРегистрации.Вставить("Организации", Новый Массив);
	СтруктураОграниченияРегистрации.Вставить("Подразделения", Новый Массив);
	СтруктураОграниченияРегистрации.Вставить("ФизическиеЛица", Новый Массив);
	СтруктураОграниченияРегистрации.Вставить("Сотрудники", Новый Массив);
	СтруктураОграниченияРегистрации.Вставить("ДатыПолученияДанных", Новый Массив);
	
	Возврат СтруктураОграниченияРегистрации
	
КонецФункции

// Ограничивает изменение документов, если не все данные в документе доступны пользователю в подчиненном узле
// Вызывается в обработчике "ПриЧтенииНаСервере" всех документов, учавствующих в обмене.
//
// Параметры:
//		Форма - форма документа
//		Источник - Открываемый документ-объект.
//
Процедура ПриЧтенииНаСервереДокумента(Форма, Источник) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет массивы организаций, подразделений, физических лиц и сотрудников из переданного набора сведений.
//
// Параметры:
//		ОграниченияРегистрации - Структура - см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации
//		НаборСведений - Набор, для которого получаем ограничения регистрации
//		ИменаПолей - Структура - см. ОбменДаннымиЗарплатаКадры.ИменаПолейОграниченияРегистрацииРегистраСведений.
//
Процедура ЗаполнитьОграниченияРегистрацииРегистраСведений(ОграниченияРегистрации, НаборСведений, ИменаПолей) Экспорт
	
	МассивОрганизаций = ОграниченияРегистрации.Организации;
	МассивПодразделений = ОграниченияРегистрации.Подразделения;
	МассивФизическихЛиц = ОграниченияРегистрации.ФизическиеЛица;
	МассивСотрудников = ОграниченияРегистрации.Сотрудники;
	ДатаПериода = ОграниченияРегистрации.ДатаПолученияДанных;
	
	Для Каждого ЗаписьНабора Из НаборСведений Цикл
		// Организации
		Если ТипЗнч(ИменаПолей.Организации) = Тип("Массив") Тогда
			Для Каждого ИмяОрганизация Из ИменаПолей.Организации Цикл
				ЗначениеПоля = ЗаписьНабора[ИмяОрганизация];
				Если ЗначениеЗаполнено(ЗначениеПоля) И МассивОрганизаций.Найти(ЗначениеПоля) = Неопределено Тогда
					МассивОрганизаций.Добавить(ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПоля = ЗаписьНабора[ИменаПолей.Организации];
			Если ЗначениеЗаполнено(ЗначениеПоля) И МассивОрганизаций.Найти(ЗначениеПоля) = Неопределено Тогда
				МассивОрганизаций.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		
		// Подразделения
		Если ТипЗнч(ИменаПолей.Подразделения) = Тип("Массив") Тогда
			Для Каждого ИмяПодразделения Из ИменаПолей.Подразделения Цикл
				ЗначениеПоля = ЗаписьНабора[ИмяПодразделения];
				Если ЗначениеЗаполнено(ЗначениеПоля) И МассивПодразделений.Найти(ЗначениеПоля) = Неопределено Тогда
					МассивПодразделений.Добавить(ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПоля = ЗаписьНабора[ИменаПолей.Подразделения];
			Если ЗначениеЗаполнено(ЗначениеПоля) И МассивПодразделений.Найти(ЗначениеПоля) = Неопределено Тогда
				МассивПодразделений.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		
		// Физические лица
		Если ТипЗнч(ИменаПолей.ФизическиеЛица) = Тип("Массив") Тогда
			Для Каждого ИмяФизическоеЛицо Из ИменаПолей.ФизическиеЛица Цикл
				ЗначениеПоля = ЗаписьНабора[ИмяФизическоеЛицо];
				Если ЗначениеЗаполнено(ЗначениеПоля) И МассивФизическихЛиц.Найти(ЗначениеПоля) = Неопределено Тогда
					МассивФизическихЛиц.Добавить(ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПоля = ЗаписьНабора[ИменаПолей.ФизическиеЛица];
			Если ЗначениеЗаполнено(ЗначениеПоля) И МассивФизическихЛиц.Найти(ЗначениеПоля) = Неопределено Тогда
				МассивФизическихЛиц.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		
		// Сотрудники
		Если ТипЗнч(ИменаПолей.Сотрудники) = Тип("Массив") Тогда
			Для Каждого ИмяСотрудник Из ИменаПолей.Сотрудники Цикл
				ЗначениеПоля = ЗаписьНабора[ИмяСотрудник];
				Если ЗначениеЗаполнено(ЗначениеПоля) И МассивСотрудников.Найти(ЗначениеПоля) = Неопределено Тогда
					МассивСотрудников.Добавить(ЗначениеПоля);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗначениеПоля = ЗаписьНабора[ИменаПолей.Сотрудники];
			Если ЗначениеЗаполнено(ЗначениеПоля) И МассивСотрудников.Найти(ЗначениеПоля) = Неопределено Тогда
				МассивСотрудников.Добавить(ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		
		// Дата получения данных
		Если ТипЗнч(ИменаПолей.ДатыПолученияДанных) = Тип("Массив") Тогда
			Для Каждого ИмяДатаПолученияДанных Из ИменаПолей.ДатыПолученияДанных Цикл
				Если ДатаПериода = '00010101' Или ДатаПериода < ЗаписьНабора[ИмяДатаПолученияДанных]Тогда
					ОграниченияРегистрации.ДатаПолученияДанных = ЗаписьНабора[ИмяДатаПолученияДанных];
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОграниченияРегистрации.ДатаПолученияДанных = ЗаписьНабора[ИменаПолей.ДатыПолученияДанных];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
