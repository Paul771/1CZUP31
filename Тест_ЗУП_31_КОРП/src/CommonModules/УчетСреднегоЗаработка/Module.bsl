////////////////////////////////////////////////////////////////////////////////
// Подсистема «Учет среднего заработка».
// 
// Серверные процедуры и функции.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Предоставляет значение среднего заработка.
//
// Параметры
//	Сотрудник - тип СправочникСсылка.Сотрудники,
//	ДатаНачалаСобытия - тип Дата
//	ДополнительныеПараметры - тип Структура, см. УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка.
//
// Возвращаемое значение - Число, значение среднедневного или среднечасового заработка.
//
Функция СреднийЗаработок(Сотрудник, ДатаНачалаСобытия, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДополнительныеПараметры.ДатаНачалаСобытия = ДатаНачалаСобытия;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.НачалоПериода) 
		Или Не ЗначениеЗаполнено(ДополнительныеПараметры.ОкончаниеПериода) Тогда
		ПериодРасчета = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, ДополнительныеПараметры.Начисление);
		ДополнительныеПараметры.НачалоПериода = ПериодРасчета.ДатаНачала;
		ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчета.ДатаОкончания;
	КонецЕсли;
		
	Если ДополнительныеПараметры.ПорядокРасчета = Неопределено Тогда
		ДополнительныеПараметры.ПорядокРасчета = УчетСреднегоЗаработкаКлиентСервер.ПорядокРасчетаОбщегоСреднегоЗаработка(ДатаНачалаСобытия);
	КонецЕсли;
	
	ДанныеДляРасчета = УчетСреднегоЗаработка.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(
		Сотрудник, 
		ДатаНачалаСобытия, 
		ДополнительныеПараметры.НачалоПериода, 
		ДополнительныеПараметры.ОкончаниеПериода, 
		ДополнительныеПараметры.ПорядокРасчета);
		
	ДополнительныеПараметры.Индексации = ДанныеДляРасчета.ДанныеОбИндексации;
	
	СреднийЗаработок = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДляРасчета.ДанныеОВремени, ДополнительныеПараметры);
	
	Возврат СреднийЗаработок;
	
КонецФункции

// Процедура выполняет регистрацию данных о начисленных суммах и отработанном времени
//  для использования при расчете среднего заработка.
//
// ВНИМАНИЕ. Перед выполнением метода движения по регистру расчетов Начисления и отработанному времени 
//	(в частности по корректировкам отработанного времени) должны быть записаны.
//
//	Параметры:
//		Движения - коллекция движений документа.
//		Отказ
//		МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу.
//		ВТНачисления - с полями.
//			Сотрудник
//			ДатаДействия
//			Начисление - ПВР Начисления
//			Сумма
//
Процедура ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияПоТаблицеНачисления(МенеджерВременныхТаблиц, Начисления);

	УчетПособийСоциальногоСтрахованияРасширенный.ЗарегистрироватьДанныеСреднегоЗаработкаФСС(Движения, Отказ, МенеджерВременныхТаблиц, ЗаписыватьДвижения);
	ЗарегистрироватьДанныеОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ЗаписыватьДвижения);
	
КонецПроцедуры

// Конструирует структуру параметров для регистрации данных документа в учете среднего заработка.
//
Функция ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка(ИменаТаблиц = "Начисления,НачисленияПерерасчет") Экспорт
	
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблиц);
	
	ДополнительныеПараметры = Новый Структура(
		"МесяцНачисления,
		|Таблицы");
	ДополнительныеПараметры.МесяцНачисления = "Ссылка.МесяцНачисления";
	
	ДополнительныеПараметры.Таблицы = Новый Структура;
	Для Каждого ИмяТаблицы Из МассивИмен Цикл
		ИменаПолей = Новый Структура(
			"ДатаДействия, 
			|Начисление, 
			|НачалоБазовогоПериода, 
			|ОкончаниеБазовогоПериода,
			|ДатаНачала, 
			|ДатаОкончания");
		ИменаПолей.ДатаДействия = "ДатаНачала";
		ИменаПолей.Начисление = "Начисление";
		ИменаПолей.НачалоБазовогоПериода = "ДатаНачала";
		ИменаПолей.ОкончаниеБазовогоПериода = "ДатаОкончания";
		ИменаПолей.ДатаНачала = "ДатаНачала";
		ИменаПолей.ДатаОкончания = "ДатаОкончания";
		ДополнительныеПараметры.Таблицы.Вставить(ИмяТаблицы, ИменаПолей);
	КонецЦикла;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Функция формирует временные таблицы с данными документа начисления
//  для регистрации данных учета среднего заработка.
//
// Параметры:
//	- ДанныеДляПроведения - структура данных, накапливающая данные для проведения.
//	- ДокументСсылка - ссылка на документ, выполняющий начисления.
//	- ТаблицаНачислений - строка с именем (или именами через запятую) 
//			табличных частей документа с начислениями.
//	- ПолеДатыДействия - имя поля, содержащего период регистрации записей.
//	- ПолеГод - имя поля, содержащего год, за который регистрируются записи.
//
Процедура ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, ДокументСсылка, ДополнительныеПараметры = Неопределено, СписокФизическихЛиц = Неопределено) Экспорт

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
	КонецЕсли;

	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого КлючИЗначение Из ДополнительныеПараметры.Таблицы Цикл
		ИмяТаблицы = КлючИЗначение.Ключ;
		ИменаПолей = КлючИЗначение.Значение;
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстОбъединения = 
			"ВЫБРАТЬ
			|	ТаблицаНачислений.Ссылка КАК ДокументСсылка,
			|	ТаблицаНачислений.ДатаДействия КАК ДатаДействия,
			|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
			|	ТаблицаНачислений.МесяцНачисления КАК МесяцНачисления,
			|	ТаблицаНачислений.Начисление КАК Начисление,
			|	ТаблицаНачислений.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
			|	ТаблицаНачислений.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
			|	ТаблицаНачислений.ДатаНачала КАК ДатаНачала,
			|	ТаблицаНачислений.ДатаОкончания КАК ДатаОкончания,
			|	ТаблицаНачислений.НомерСтроки КАК НомерСтроки,
			|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
			|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаНачислений.Ссылка.Организация КАК Организация,
			|	ТаблицаНачислений.Результат КАК Сумма,
			|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	ТаблицаНачислений.Сторно КАК Сторно
			|ПОМЕСТИТЬ ВТЗаписиНачислений
			|ИЗ
			|	#ТаблицаНачислений КАК ТаблицаНачислений
			|ГДЕ
			|	ТаблицаНачислений.Ссылка = &ДокументСсылка";
		
		Если СписокФизическихЛиц <> Неопределено Тогда
			
			ТекстОбъединения = ТекстОбъединения + "
				|	И ТаблицаНачислений.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
			
		КонецЕсли;
		
		Если Не ПерваяТаблица Тогда
			
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ПОМЕСТИТЬ ВТЗаписиНачислений", "");
			
			Если СписокФизическихЛиц <> Неопределено Тогда
				Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицы);
		Для Каждого КлючИЗначениеПолей Из ИменаПолей Цикл
			ИмяПоля = КлючИЗначениеПолей.Ключ;
			ТекстОбращения = КлючИЗначениеПолей.Значение;
			Если ТекстОбращения = Неопределено Тогда
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ТаблицаНачислений." + ИмяПоля + " КАК " + ИмяПоля, "НЕОПРЕДЕЛЕНО КАК " + ИмяПоля);
			Иначе
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ТаблицаНачислений." + ИмяПоля + " КАК " + ИмяПоля, "ТаблицаНачислений." + ТекстОбращения + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ТаблицаНачислений.МесяцНачисления КАК МесяцНачисления", "ТаблицаНачислений." + ДополнительныеПараметры.МесяцНачисления + " КАК МесяцНачисления");
		РеквизитыТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицы].Реквизиты;
		Если РеквизитыТабличнойЧасти.Найти("Сторно") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ТаблицаНачислений.Сторно КАК Сторно", "ЛОЖЬ КАК Сторно");
		КонецЕсли;
		
		// Добавляем объединение в общий запрос.
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении начислений по источникам финансирования.
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РаспределениеНачислений.СтатьяФинансирования,
			|	РаспределениеНачислений.СтатьяРасходов,
			|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
			|	РаспределениеНачислений.ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЗаписиНачислений.*
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РаспределениеРезультатовНачислений КАК РаспределениеНачислений
			|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
			|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовНачислений", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовНачислений");
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЗаписиНачислений.Сумма КАК Сумма,
			|	ЗаписиНачислений.*
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПроведения.НачисленияДляСреднегоЗаработка = ПустаяТаблицаДляРегистрацииДанныхСреднегоЗаработка();
	
	// Проверяем тип регистратора
	Если Не ДанныеДляПроведения.НачисленияДляСреднегоЗаработка.Колонки.ДокументСсылка.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип «%1» не включен в состав типов колонки ДокументСсылка таблицы для регистрации данных среднего заработка.'"),
			ТипЗнч(ДокументСсылка));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляПроведения.НачисленияДляСреднегоЗаработка.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение значений специализированных показателей 
//  учета среднего заработка.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ТаблицаПоказателей) Экспорт
	
	ПоказателиОбщегоСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиОбщегоСреднегоЗаработка();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СреднийЗаработокПоказатели", ПоказателиОбщегоСреднегоЗаработка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.Показатель,
		|	ДополнительныеПоказатели.ДатаНачала,
		|	ДополнительныеПоказатели.ВремяВЧасах
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель В(&СреднийЗаработокПоказатели)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.ПоЧасам = Выборка.ВремяВЧасах;
		СреднийЗаработок = УчетСреднегоЗаработка.СреднийЗаработок(Выборка.Сотрудник, Выборка.ДатаНачала, ДополнительныеПараметры);
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		НоваяСтрока.Показатель = Выборка.Показатель;
		НоваяСтрока.Значение = СреднийЗаработок;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет заполнение представления команды расшифровки специализированных показателей 
//  учета среднего заработка.
//
// Параметры:
//		ДокументСсылка
//		ВидРасчетаИнфо - Информация о виде расчета, полученная с помощью метода
//		                 ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета.
//		СтрокаНачислений - строка таблицы "Начисления".
//		ДанныеПоказателей - Таблица показателей.
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ОтображатьТекущиеЗначения - признак того, что в форме отображаются действующие на настоящий 
//			момент показатели начислений. Применяется, например, в документах кадровых переводов.
//			По умолчанию - Ложь
//		ДокументСсылка - расчетный документ.
//
Процедура ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипыДокументовРасчетаПоСреднемуЗаработку().Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиСреднего = УчетСреднегоЗаработкаКлиентСервер.ПоказателиОбщегоСреднегоЗаработка();
	ПоказателиСреднего.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"));
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ПоказателиСреднего.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
			ОтображатьРасшифровку = Истина;
			Если СтрокаНачислений.Свойство("ДокументОснование") И ЗначениеЗаполнено(СтрокаНачислений.ДокументОснование) Тогда
				ОтображатьРасшифровку = Ложь;
			КонецЕсли;
			Если ОтображатьРасшифровку Тогда
				СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = УчетСреднегоЗаработкаКлиентСервер.ПредставлениеКомандыРасшифровки();
			КонецЕсли;
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для получения настроек подсистемы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиРасчетаСреднегоЗаработка() Экспорт
	
	НастройкиРасчетаСреднегоЗаработка = РегистрыСведений.НастройкиРасчетаСреднегоЗаработка.СоздатьМенеджерЗаписи();
	НастройкиРасчетаСреднегоЗаработка.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиРасчетаСреднегоЗаработка, Метаданные.РегистрыСведений.НастройкиРасчетаСреднегоЗаработка);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура заполняет настройки учета среднего заработка в зависимости 
//  от количества в информационной базе специализированных начислений.
//
Процедура ЗаполнитьНастройкиУчетаСреднегоЗаработка() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК СреднийЗаработокФССРазличаетсяПоПорядкуРасчета
	|ПОМЕСТИТЬ ВТНастройкаСреднегоФСС
	|ИЗ
	|	ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК НастройкаСреднегоФСС
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкаСреднегоФСС.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкаСреднегоФСС.ПорядокРасчета) < &КоличествоПорядковРасчетаФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок)
	|					И НЕ НастройкаСреднегоОбщего.Индексируется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьОсновныеНачисленияБезИндексацииИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииПроцентомИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом)
	|					И НЕ НастройкаСреднегоОбщего.Индексируется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииПроцентомБезИндексацииИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииЗаГодПроцентомИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом)
	|					И НЕ НастройкаСреднегоОбщего.Индексируется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииЗаГодПроцентомБезИндексацииИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииСуммойИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой)
	|					И НЕ НастройкаСреднегоОбщего.Индексируется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииСуммойБезИндексацииИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииЗаГодСуммойИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой)
	|					И НЕ НастройкаСреднегоОбщего.Индексируется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьПремииЗаГодСуммойБезИндексацииИстина,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиНачисления.Показатель = &СреднийЗаработокОбщий
	|					И НЕ Начисления.УчетВремениВЧасах
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьОтработаноДнейИстина,
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиНачисления.Показатель = &СреднийЗаработокОбщий
	|					И Начисления.УчетВремениВЧасах
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьОтработаноЧасовИстина,
	|	СУММА(ВЫБОР
	|			КОГДА НастройкаСреднегоОбщего.Значение В (&Премии)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьОтработаноПоПятидневкеИстина,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыОтпусков.СпособРасчетаОтпуска В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользоватьОтработаноПоШестидневкеИстина,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкаСреднегоФСС.СреднийЗаработокФССРазличаетсяПоПорядкуРасчета), ЛОЖЬ) КАК СреднийЗаработокФССРазличаетсяПоПорядкуРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоОбщего
	|		ПО (НастройкаСреднегоОбщего.Ссылка = Начисления.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
	|		ПО (ПоказателиНачисления.Ссылка = Начисления.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|		ПО (ВидыОтпусков.Ссылка = Начисления.ВидОтпуска)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНастройкаСреднегоФСС КАК НастройкаСреднегоФСС
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ Начисления.ПометкаУдаления
	|	И НЕ Начисления.ВАрхиве
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьОсновныеНачисленияБезИндексацииИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОсновныеНачисленияБезИндексации,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииПроцентомИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииПроцентом,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииПроцентомБезИндексацииИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииПроцентомБезИндексации,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииЗаГодПроцентомИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииЗаГодПроцентом,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииЗаГодПроцентомБезИндексацииИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииЗаГодПроцентомБезИндексации,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииСуммойИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииСуммой,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииСуммойБезИндексацииИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииСуммойБезИндексации,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииЗаГодСуммойИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииЗаГодСуммой,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьПремииЗаГодСуммойБезИндексацииИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПремииЗаГодСуммойБезИндексации,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьОтработаноДнейИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОтработаноДней,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьОтработаноЧасовИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							Справочник.ГрафикиРаботыСотрудников
	|						ГДЕ
	|							Справочник.ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьОтработаноПоПятидневкеИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОтработаноПоПятидневке,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользоватьОтработаноПоШестидневкеИстина > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОтработаноПоШестидневке,
	|	Начисления.СреднийЗаработокФССРазличаетсяПоПорядкуРасчета КАК СреднийЗаработокФССРазличаетсяПоПорядкуРасчета
	|ИЗ
	|	ВТНачисления КАК Начисления");
	
	Запрос.УстановитьПараметр("СреднийЗаработокОбщий", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий"));
	Запрос.УстановитьПараметр("КоличествоПорядковРасчетаФСС", Метаданные.Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.ЗначенияПеречисления.Количество());
	Запрос.УстановитьПараметр("Премии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	// Запись настроек в регистр сведений.
	Настройки = РегистрыСведений.НастройкиРасчетаСреднегоЗаработка.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	Настройки.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция запрашивает период расчета среднего заработка для указанного начисления (или удержания)
// с учетом периода работы сотрудника.
//
Функция ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, ВидРасчета = Неопределено) Экспорт
	
	// Период, определяемый по начислению корректируется с учетом даты приема на работу сотрудника.
	ПериодРасчета = Новый СтандартныйПериод;
	
	// Применяются следующие условия.
	// 1. Если сотрудник принят позже, чем начало периода расчета среднего заработка, 
	// то началом периода расчета становится дата его приема на работу.
	// 2. Если сотрудник принят в том же месяце, что и начало события, 
	// то периодом расчета среднего заработка является месяц начала события.
	// Определим дату приема на работу сотрудника и ограничим ею начало периода расчета среднего заработка.
	// Если же дата приема на работу не заполнена, заполняем период без ограничений.
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ФамилияИО, ДатаПриема");
	Если КадровыеДанные.Количество() = 0 Тогда
		// Сотрудник не принят на работу.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить период расчета среднего заработка, так как %1 не принят на работу.'"),
			Сотрудник);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДатаПриема = КадровыеДанные[0].ДатаПриема;
	Если ЗначениеЗаполнено(ДатаПриема) И ДатаПриема > ДатаНачалаСобытия Тогда
		// Дата начала события раньше, чем сотрудник принят на работу.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить период расчета среднего заработка, так как %1 принят на работу %2 позже даты события %3.'"),
			КадровыеДанные[0].ФамилияИО, 
			Формат(ДатаПриема, "ДЛФ=D"), 
			Формат(ДатаНачалаСобытия, "ДЛФ=D"));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// Устанавливаем привилегированный режим, т.к. возможны обращения к плану видов расчета.
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодПоВидуРасчета = УчетСреднегоЗаработкаКлиентСервер.ПериодРасчетаОбщегоСреднегоЗаработка(ДатаНачалаСобытия, ВидРасчета);
	
	// Корректируем период расчета.
	ПериодРасчета.ДатаНачала = ПериодПоВидуРасчета.ДатаНачала;
	ПериодРасчета.ДатаОкончания = ПериодПоВидуРасчета.ДатаОкончания;
	Если ПериодРасчета.ДатаОкончания < КадровыеДанные[0].ДатаПриема Тогда
		ПериодРасчета.ДатаНачала = НачалоМесяца(КадровыеДанные[0].ДатаПриема);
		ПериодРасчета.ДатаОкончания = КонецМесяца(КадровыеДанные[0].ДатаПриема);
	КонецЕсли;
	
	Возврат ПериодРасчета;
	
КонецФункции

// Добавляет в структуру данных для проведения поля, необходимые для заполнения результатов расчета займов.
//
// Параметры:
//	ДанныеДляПроведения - см. РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//
Процедура ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения) Экспорт
	
	ДанныеДляПроведения.Вставить("НачисленияДляСреднегоЗаработка");
	
КонецПроцедуры

// Функция определяет факт использования в формуле начисления показателя среднечасовой заработок.
//
// Параметры
//	Начисление - ПланВидовРасчетаСсылка.Начисления.
//
// Возвращаемое значение - булево, Истина - если используется, Ложь в противном случае.
//
Функция НачислениеИспользуетСреднечасовойЗаработок(Начисление) Экспорт
	
	СреднечасовойЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднечасовойЗаработок");
	
	Если СреднечасовойЗаработок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|ГДЕ
		|	Показатели.Ссылка = &Начисление
		|	И Показатели.Показатель = &СреднечасовойЗаработок");
		
	Запрос.УстановитьПараметр("Начисление", Начисление);
	Запрос.УстановитьПараметр("СреднечасовойЗаработок", СреднечасовойЗаработок);
	
	Возврат Не Запрос.Выполнить().Пустой();
		
КонецФункции

// Определяет статью финансирования, используемую для сотрудника по умолчанию.
//
Функция ОтражениеВБухучетеПоУмолчанию(Сотрудник, ДатаАктуальности, Начисление = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Выполнить();
	
	// Из кадрового учета получаем организацию и подразделение.
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "Организация,Подразделение,ТерриторияВыполненияРаботВОрганизации");
	
	// Формируем временную таблицу с настройками бухучета.
	Если Начисление <> Неопределено Тогда
		ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеНачисленийСотрудников(МенеджерВременныхТаблиц, "ВТКадровыеДанныеСотрудников", "Сотрудник,Период", , , Начисление);
		ИмяВТ = "ВТСведенияОБухучетеНачисленийСотрудников";
	Иначе
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВременныхТаблиц, "ВТКадровыеДанныеСотрудников", "Сотрудник,Период");
		ИмяВТ = "ВТСведенияОБухучетеЗарплатыСотрудников";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОБухучете.СтатьяФинансирования,
	|	СведенияОБухучете.СпособОтраженияЗарплатыВБухучете,
	|	СведенияОБухучете.СтатьяРасходов,
	|	СведенияОБухучете.ОтношениеКЕНВД
	|ИЗ
	|	#ИмяВТ КАК СведенияОБухучете";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ", ИмяВТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтражениеВБухучете = Новый Структура("СтатьяФинансирования,СпособОтраженияЗарплатыВБухучете,СтатьяРасходов,ОблагаетсяЕНВД");
	Если Выборка.Следующий() Тогда
		ОтражениеВБухучете.СтатьяФинансирования = Выборка.СтатьяФинансирования;
		ОтражениеВБухучете.СпособОтраженияЗарплатыВБухучете = Выборка.СпособОтраженияЗарплатыВБухучете;
		ОтражениеВБухучете.СтатьяРасходов = Выборка.СтатьяРасходов;
		ОтражениеВБухучете.ОблагаетсяЕНВД = Выборка.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД;
	КонецЕсли;
	
	Возврат ОтражениеВБухучете;
	
КонецФункции

// Получает коэффициенты распределения среднего заработка по статьям финансирования из таблицы СреднийЗаработокОбщий.
//	Параметры
//		Объект - ДокументОбъект, Структура, ДанныеФормыКоллекция
//		ОписаниеДокумента - структура, описание см РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента.
//
//	Возвращаемое значение, соответствие с коэффициентами для каждого способа расчета среднего заработка, указанного в описании документа 
//		Соответствие
//			Ключ - значение перечисления СпособыРасчетаНачислений
//			Значение - таблица значений с коэффициентами, колонки таблицы
//				* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//				* Коэффициент - Число
//
Функция КоэффициентыРаспределенияСреднегоЗаработкаДокумента(Объект, ОписаниеДокумента) Экспорт

	КоэффициентыРаспределения = Новый Соответствие;
	
	ТаблицаКоэффициентов = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКоэффициентыРаспределенияСреднегоЗаработка();
	
	СпособыРасчетаСреднегоЗаработка = Новый Соответствие;
	Если ОписаниеДокумента.СпособыРасчетаСреднегоЗаработка = Неопределено Тогда
		СпособыРасчетаСреднегоЗаработка.Вставить(Перечисления.СпособыРасчетаНачислений.ПустаяСсылка(),Неопределено);
	Иначе
		Для каждого ЭлементСтруктуры Из ОписаниеДокумента.СпособыРасчетаСреднегоЗаработка Цикл
			СпособыРасчетаСреднегоЗаработка.Вставить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из СпособыРасчетаСреднегоЗаработка Цикл
		
		ПараметрыРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ПараметрыРасчетаСреднего.Индексации = Объект.ДанныеОбИндексации;
		ПараметрыРасчетаСреднего.ДатаНачалаСобытия = Объект[ОписаниеДокумента.ДатаНачалаСобытияИмя];
		ПараметрыРасчетаСреднего.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ПараметрыРасчетаСреднего.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
		ПараметрыРасчетаСреднего.ПоЧасам = ОписаниеДокумента.ЭтоСреднеЧасовойЗаработок;
		ПараметрыРасчетаСреднего.СпособРасчетаОтпуска = ЭлементКоллекции.Значение;
		ПараметрыРасчетаСреднего.ПоСтатьямФинансирования = Истина;
		
		ДанныеДляРасчета = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий, 
		ПараметрыРасчетаСреднего);
		
		Для Каждого СтрокаНачислений Из ДанныеДляРасчета["Заработок"] Цикл
			НоваяСтрока	 = ТаблицаКоэффициентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
			НоваяСтрока.Коэффициент = СтрокаНачислений["Учтено"];
		КонецЦикла;
		ОтражениеЗарплатыВБухучетеРасширенный.СвернутьТаблицуКоэффициентовРаспределенияСреднегоЗаработка(ТаблицаКоэффициентов);
		
		КоэффициентыРаспределения.Вставить(ЭлементКоллекции.Ключ, ТаблицаКоэффициентов);
		
	КонецЦикла;
	
	Возврат КоэффициентыРаспределения;

КонецФункции

// Обслуживание проведения документа ПереносЗатратНаПерсоналМеждуСтатьями.
// Формирует таблицу значений с движениями по регистру ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
//		Параметры
//			НачисленияСотрудников - таблица значений, соответствует структуре РН БухучетНачисленияУдержанияПоСотрудникам
//									дополнительно имеет колонки Сторно и ИдентификаторСтрокиЗатрат
//			ТаблицаПереносы - таблица значений, соответствует структуре табличной части Переносы документа ПереносЗатратНаПерсоналМеждуСтатьями
//		Возвращаемое значение
//			Таблица значений со структурой регистра ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
//
Функция ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаПослеПереносаЗатрат(НачисленияСотрудников, ТаблицаПереносы) Экспорт

	// Таблица отбора, используется для получения данных из РН ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
	ТаблицаОтбора = НачисленияСотрудников.Скопировать(,"Сотрудник,Начисление,Регистратор");
	ТаблицаОтбора.Свернуть("Сотрудник,Начисление,Регистратор");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиНачислений.Ссылка КАК Начисление,
	|	НастройкиНачислений.ПорядокРасчета КАК ПорядокРасчета,
	|	НастройкиНачислений.Значение КАК СоставнаяЧасть
	|ПОМЕСТИТЬ ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка
	|ИЗ
	|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиНачислений
	|ГДЕ
	|	НастройкиНачислений.ПорядокРасчета <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
	|	ТаблицаОтбора.Начисление КАК Начисление,
	|	ТаблицаОтбора.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
	|	ТаблицаОтбора.Регистратор КАК Регистратор,
	|	ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка.ПорядокРасчета КАК ПорядокРасчета,
	|	ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка.СоставнаяЧасть КАК СоставнаяЧасть
	|ПОМЕСТИТЬ ВТОтборДанныхОбщегоСреднего
	|ИЗ
	|	ВТТаблицаОтбора КАК ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка КАК ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка
	|		ПО ТаблицаОтбора.Начисление = ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПорядокРасчетаОбщегоСреднегоЗаработка.Начисление КАК Начисление,
	|	НачисленияПорядокРасчетаОбщегоСреднегоЗаработка.ПорядокРасчета КАК ПорядокРасчета,
	|	НачисленияПорядокРасчетаОбщегоСреднегоЗаработка.СоставнаяЧасть КАК СоставнаяЧасть
	|ИЗ
	|	ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка КАК НачисленияПорядокРасчетаОбщегоСреднегоЗаработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОНачислениях.Период КАК Период,
	|	ДанныеОНачислениях.Регистратор КАК Регистратор,
	|	ДанныеОНачислениях.Сотрудник КАК Сотрудник,
	|	ДанныеОНачислениях.ПорядокРасчета КАК ПорядокРасчета,
	|	ДанныеОНачислениях.СоставнаяЧасть КАК СоставнаяЧасть,
	|	ДанныеОНачислениях.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеОНачислениях.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеОНачислениях.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ДанныеОНачислениях.Индексируется КАК Индексируется,
	|	ДанныеОНачислениях.Год КАК Год,
	|	ДанныеОНачислениях.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
	|	ДанныеОНачислениях.КоличествоМесяцев КАК КоличествоМесяцев,
	|	ДанныеОНачислениях.Организация КАК Организация,
	|	ДанныеОНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеОНачислениях.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачислениях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборДанныхОбщегоСреднего КАК ОтборДанныхОбщегоСреднего
	|		ПО ДанныеОНачислениях.Регистратор = ОтборДанныхОбщегоСреднего.Регистратор
	|			И ДанныеОНачислениях.Сотрудник = ОтборДанныхОбщегоСреднего.Сотрудник
	|			И ДанныеОНачислениях.ПорядокРасчета = ОтборДанныхОбщегоСреднего.ПорядокРасчета
	|			И ДанныеОНачислениях.СоставнаяЧасть = ОтборДанныхОбщегоСреднего.СоставнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
	|	ТаблицаОтбора.Регистратор КАК Регистратор,
	|	ТаблицаОтбора.Начисление КАК Начисление
	|ИЗ
	|	ВТТаблицаОтбора КАК ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка КАК ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка
	|		ПО ТаблицаОтбора.Начисление = ВТНачисленияПорядокРасчетаОбщегоСреднегоЗаработка.Начисление";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатЗапроса.ВГраница();
	ТаблицаОтбора = РезультатЗапроса[КоличествоРезультатов].Выгрузить();
	ТекущиеДанныеОНачислениях = РезультатЗапроса[КоличествоРезультатов-1].Выгрузить();
	ОписанияНачислений = РезультатЗапроса[КоличествоРезультатов-2].Выгрузить();
	
	// таблица которую будем возвращать
	НовыеДанныеОНачислениях    = ТекущиеДанныеОНачислениях.СкопироватьКолонки();
	
	// массив используемых порядков расчета
	ИспользуемыеПорядкиРасчета = ТекущиеДанныеОНачислениях.ВыгрузитьКолонку("ПорядокРасчета");
	ИспользуемыеПорядкиРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемыеПорядкиРасчета);
	
	// Отберем из таблицы НачисленияСотрудников строки по тем начислениям
	// которые входят в расчет среднего заработка и поместим в таблицу НачисленияСписать.
	НачисленияСписать  = НачисленияСотрудников.СкопироватьКолонки();
	Отбор = Новый Структура("Сотрудник,Регистратор,Начисление,Сторно");
	Для каждого СтрокаТЗ Из ТаблицаОтбора Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		Отбор.Сторно = Истина;
		НайденныеСтроки = НачисленияСотрудников.НайтиСтроки(Отбор);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеСтроки, НачисленияСписать);
	КонецЦикла;
	НачисленияСписать.Свернуть("Сотрудник,Регистратор,Начисление,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ИдентификаторСтрокиЗатрат","Сумма");
	
	// отбор для поиска по таблице ОписанияНачислений
	ОтборНачислений = Новый Структура("Начисление,ПорядокРасчета");
	// отбор для поиска строк в таблице ТаблицаПереносы
	ОтборСтрокПереноса = Новый Структура("ИдентификаторСтрокиЗатрат");
	// отбор для поиска строк в таблице ТекущиеДанныеОНачислениях
	ОтборТекущиеДанныеОНачислениях = Новый Структура("Сотрудник,Регистратор,СоставнаяЧасть,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете");
	// отбор для поиска строк в таблице ВремТаблицаДобавить
	ОтборСтрокДобавить = Новый Структура("Сотрудник,Регистратор,СоставнаяЧасть,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете");
	
	// описание таблицы по которой будут списываться затраты
	ОписаниеТаблицыСписать = НачисленияСписать.СкопироватьКолонки();
	ОписаниеТаблицыСписать.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	
	// описание таблицы по которой будут добавляться затраты
	ОписаниеТаблицыДобавит = ОписаниеТаблицыСписать.СкопироватьКолонки();
	ОписаниеТаблицыДобавит.Колонки.Добавить("НоваяСтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ОписаниеТаблицыДобавит.Колонки.Добавить("НоваяСтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ОписаниеТаблицыДобавит.Колонки.Добавить("НовыйСпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	
	Для каждого ПорядокРасчета Из ИспользуемыеПорядкиРасчета Цикл
		
		ОтборНачислений.ПорядокРасчета = ПорядокРасчета;
		ВремТаблицаСписать  = ОписаниеТаблицыСписать.СкопироватьКолонки();
		ВремТаблицаДобавить = ОписаниеТаблицыДобавит.СкопироватьКолонки();
		
		Для каждого СтрокаТЗ Из НачисленияСписать Цикл
			
			ОтборНачислений.Начисление = СтрокаТЗ.Начисление;
			НайденныеСтроки = ОписанияНачислений.НайтиСтроки(ОтборНачислений);
			СоставнаяЧасть = НайденныеСтроки[0].СоставнаяЧасть;
			
			НоваяСтрока = ВремТаблицаСписать.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
			НоваяСтрока.СоставнаяЧасть = СоставнаяЧасть;
			
			ОтборСтрокПереноса.ИдентификаторСтрокиЗатрат = СтрокаТЗ.ИдентификаторСтрокиЗатрат;
			СтрокиПереноса = ТаблицаПереносы.НайтиСтроки(ОтборСтрокПереноса);
			КоэффициентыПереноса = Новый Массив;
			Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
				КоэффициентыПереноса.Добавить(СтрокаПереноса.Сумма);
			КонецЦикла;
			РезультатыПереноса = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(НоваяСтрока.Сумма, КоэффициентыПереноса);
			Если РезультатыПереноса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
				НоваяСтрока = ВремТаблицаДобавить.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
				НоваяСтрока.НоваяСтатьяФинансирования = СтрокаПереноса.СтатьяФинансирования;
				НоваяСтрока.НоваяСтатьяРасходов 				  = СтрокаПереноса.СтатьяРасходов;
				НоваяСтрока.НовыйСпособОтраженияЗарплатыВБухучете = СтрокаПереноса.СпособОтраженияЗарплатыВБухучете;
				НоваяСтрока.СоставнаяЧасть = СоставнаяЧасть;
				НоваяСтрока.Сумма = -РезультатыПереноса[Индекс];
				Индекс = Индекс+1;
			КонецЦикла;
		
		КонецЦикла;
		
		ВремТаблицаСписать.Свернуть("Сотрудник,Регистратор,СоставнаяЧасть,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете","Сумма");
		ВремТаблицаДобавить.Свернуть("Сотрудник,Регистратор,СоставнаяЧасть,СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,НоваяСтатьяФинансирования,НоваяСтатьяРасходов,НовыйСпособОтраженияЗарплатыВБухучете","Сумма");
		
		Для каждого СтрокаТЗ Из ВремТаблицаСписать Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборТекущиеДанныеОНачислениях, СтрокаТЗ);
			НайденныеСтроки = ТекущиеДанныеОНачислениях.НайтиСтроки(ОтборТекущиеДанныеОНачислениях);
			Коэффициенты = Новый Массив;
			СуммаТекущихДанны = 0;
			Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
				Коэффициенты.Добавить(СтрокаТекДанных.Сумма);
				СуммаТекущихДанны = СуммаТекущихДанны + СтрокаТекДанных.Сумма;
			КонецЦикла;
			
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
			Если Результаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
				НоваяСтрока = НовыеДанныеОНачислениях.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТекДанных);
				НоваяСтрока.СтатьяФинансирования 			 = СтрокаТЗ.СтатьяФинансирования;
				НоваяСтрока.СтатьяРасходов 					 = СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаТЗ.СпособОтраженияЗарплатыВБухучете;
				НоваяСтрока.Сумма = Результаты[Индекс];
				Индекс = Индекс+1;
			КонецЦикла;
			
			// Если сумма списания меньше суммы из таблицы начислений, тогда надо будет дополнительно уменьшить суммы в таблице ВремТаблицаДобавить.
			НормироватьСуммуДобавить = (?(СуммаТекущихДанны<0,-СуммаТекущихДанны,СуммаТекущихДанны) < ?(СтрокаТЗ.Сумма<0,-СтрокаТЗ.Сумма,СтрокаТЗ.Сумма));
			ЗаполнитьЗначенияСвойств(ОтборСтрокДобавить, СтрокаТЗ);
			НайденныеСтрокиПереноса = ВремТаблицаДобавить.НайтиСтроки(ОтборСтрокДобавить);
			Если НормироватьСуммуДобавить Тогда
				
				КоэффициентыПереноса = Новый Массив;
				Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
					КоэффициентыПереноса.Добавить(СтрокаПереноса.Сумма);
				КонецЦикла;
				
				Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаТекущихДанны, КоэффициентыПереноса);
				Если Результаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = 0;
				Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
					СтрокаПереноса.Сумма = Результаты[Индекс];
					Индекс = Индекс+1;
				КонецЦикла;
				
			КонецЕсли;
			
			Для каждого СтрокаПереноса Из НайденныеСтрокиПереноса Цикл
				
				Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаПереноса.Сумма, Коэффициенты);
				Если Результаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = 0;
				Для каждого СтрокаТекДанных Из НайденныеСтроки Цикл
					НоваяСтрока = НовыеДанныеОНачислениях.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТекДанных);
					НоваяСтрока.СтатьяФинансирования 			 = СтрокаПереноса.НоваяСтатьяФинансирования;
					НоваяСтрока.СтатьяРасходов 					 = СтрокаПереноса.НоваяСтатьяРасходов;
					НоваяСтрока.СпособОтраженияЗарплатыВБухучете = СтрокаПереноса.НовыйСпособОтраженияЗарплатыВБухучете;
					НоваяСтрока.Сумма = Результаты[Индекс];
					Индекс = Индекс+1;
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НовыеДанныеОНачислениях;
	
КонецФункции

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения			 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать			 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетСреднегоЗаработка";
	МетаданныеРегистров = РегистрыСреднегоЗаработка();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе 
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработка

// Возвращает структуру содержащую таблицы значений
// с данными о начислениях, отработанном времени и
// коэффициентах для расчета среднего заработка.
//      	 
// Параметры:
//      Сотрудник 
//		НачалоПериода - начало периода расчета среднего заработка.
//		ОкончаниеПериода - окончание периода расчета среднего заработка.
//		ПорядокРасчета - правила расчета общего среднего заработка.
//		ОтборМесяцев - необязательный, массив дат начала месяцев, 
//			если указан, данные будут получены только за эти месяцы.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками.
//			Сотрудник
//			Период
//			ПорядокРасчета
//			СоставнаяЧасть
//			Индексируется
//			Сумма
//			Год
//			ДатаНачалаБазовогоПериода
//			КоличествоМесяцев.
//
//		ДанныеОВремени - таблица значений с колонками.
//			Сотрудник
//			Период
//			ПорядокРасчета
//			ОтработаноДнейПятидневка
//			ОтработаноЧасовПятидневка
//			НормаДнейПроизводственныйКалендарь
//			НормаЧасовПроизводственныйКалендарь
//			ОтработаноДнейКалендарных
//			ОтработаноДней
//			ОтработаноДнейШестидневка.
//
//		ДанныеОбИндексации - таблица значений с колонками.
//			Сотрудник
//			Период
//			КоэффициентИндексации 
//
Функция ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(Сотрудник, ДатаНачалаСобытия, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев = Неопределено, ИсключаемыйРегистратор = Неопределено, УчитыватьКорректировки = Истина) Экспорт
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаОбщегоСреднегоЗаработка();
	
	СтрокаТаблицы = ИсходныеДанные.Добавить();
	СтрокаТаблицы.Сотрудник = Сотрудник;
	СтрокаТаблицы.ПорядокРасчета = ПорядокРасчета;
	СтрокаТаблицы.ДатаНачалаСобытия = ДатаНачалаСобытия;
	СтрокаТаблицы.НачалоПериодаРасчетаСреднего = НачалоПериода;
	СтрокаТаблицы.ОкончаниеПериодаРасчетаСреднего = ОкончаниеПериода;
	
	Возврат ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудников(ИсходныеДанные, ОтборМесяцев, ИсключаемыйРегистратор, УчитыватьКорректировки);
	
КонецФункции

// Возвращает структуру, содержащую таблицы значений с данными о начислениях, 
// отработанном времени и коэффициентах индексации для расчета среднего заработка.
//      	 
// Параметры:
//      ДокументСсылка - ссылка на документ расчета.
//		ТаблицаСотрудники - таблица значений с колонками.
//			Сотрудник: должно быть непустым
//			ДатаНачалаСобытия
//          НачалоПериодаРасчетаСреднего
//			ОкончаниеПериодаРасчетаСреднего.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками.
//			Сотрудник
//			Период
//			ПорядокРасчета
//			СоставнаяЧасть
//			Индексируется
//			Сумма
//			Год
//			ДатаНачалаБазовогоПериода
//			КоличествоМесяцев.
//
//		ДанныеОВремени - таблица значений с колонками.
//			Сотрудник
//			Период
//			ПорядокРасчета
//			ОтработаноДнейПятидневка
//			ОтработаноЧасовПятидневка
//			НормаДнейПроизводственныйКалендарь
//			НормаЧасовПроизводственныйКалендарь
//			ОтработаноДнейКалендарных
//			ОтработаноДней
//			ОтработаноДнейШестидневка.
//
//		ДанныеОбИндексации - таблица значений с колонками.
//			Сотрудник
//			Период
//			КоэффициентИндексации 
//
Функция ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудников(ТаблицаСотрудники, ОтборМесяцев = Неопределено, ИсключаемыйРегистратор = Неопределено, УчитыватьКорректировки = Истина) Экспорт
	
	Перем МинимальнаяДатаНачала;
	Перем МаксимальнаяДатаОкончания;
	
	МесяцыРасчетаСотрудников = Новый ТаблицаЗначений;
	МесяцыРасчетаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	МесяцыРасчетаСотрудников.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	МесяцыРасчетаСотрудников.Колонки.Добавить("ПорядокРасчетаСреднегоОтбор", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	МесяцыРасчетаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	// Определяем границы расчета среднего.
	НайтиГраницыПериодаРасчетаОбщегоСреднегоЗаработка(ТаблицаСотрудники, МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, МинимальнаяДатаНачала, МаксимальнаяДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодыРасчетаСреднегоСотрудников", ТаблицаСотрудники);
	Запрос.УстановитьПараметр("ОтборМесяцев", ОтборМесяцев);
	Запрос.УстановитьПараметр("ПоВсемМесяцам", ОтборМесяцев = Неопределено);
	Запрос.УстановитьПараметр("ДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("УчитыватьКорректировки", УчитыватьКорректировки);
	Запрос.УстановитьПараметр("ГодовыеПремии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии());
	
	// Общий заработок, без учета годовых премий.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыРасчета.Сотрудник КАК Сотрудник,
		|	ПериодыРасчета.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ПериодыРасчета.НачалоПериодаРасчетаСреднего КАК НачалоПериодаРасчетаСреднего,
		|	ПериодыРасчета.ОкончаниеПериодаРасчетаСреднего КАК ОкончаниеПериодаРасчетаСреднего,
		|	ПериодыРасчета.ПорядокРасчета КАК ПорядокРасчета
		|ПОМЕСТИТЬ ВТПериодыРасчетаСреднегоСотрудников
		|ИЗ
		|	&ПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборГодовыхПремий.Сотрудник КАК Сотрудник,
		|	ГОД(ДОБАВИТЬКДАТЕ(ОтборГодовыхПремий.ДатаНачалаСобытия, ГОД, -1)) КАК ГодовыеПремииЗаГод,
		|	ОтборГодовыхПремий.ПорядокРасчета КАК ПорядокРасчета
		|ПОМЕСТИТЬ ВТОтборГодовыхПремий
		|ИЗ
		|	ВТПериодыРасчетаСреднегоСотрудников КАК ОтборГодовыхПремий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.Период КАК Период,
		|	ДанныеРегистра.Сотрудник КАК Сотрудник,
		|	ДанныеРегистра.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеРегистра.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ДанныеРегистра.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеРегистра.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДанныеРегистра.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеРегистра.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ДанныеРегистра.Индексируется КАК Индексируется,
		|	ДанныеРегистра.Год КАК Год,
		|	ДанныеРегистра.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ДанныеРегистра.КоличествоМесяцев КАК КоличествоМесяцев,
		|	ДанныеРегистра.ПереносДанных КАК ПереносДанных,
		|	СУММА(ДанныеРегистра.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТДанныеДляРасчетаСреднего
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ) КАК Период,
		|		ДанныеРегистра.Сотрудник КАК Сотрудник,
		|		ДанныеРегистра.ПорядокРасчета КАК ПорядокРасчета,
		|		ДанныеРегистра.СоставнаяЧасть КАК СоставнаяЧасть,
		|		ДанныеРегистра.СтатьяФинансирования КАК СтатьяФинансирования,
		|		ДанныеРегистра.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		ДанныеРегистра.СтатьяРасходов КАК СтатьяРасходов,
		|		ДанныеРегистра.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|		ДанныеРегистра.Индексируется КАК Индексируется,
		|		ДанныеРегистра.Год КАК Год,
		|		ДанныеРегистра.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|		ДанныеРегистра.КоличествоМесяцев КАК КоличествоМесяцев,
		|		ВЫБОР
		|			КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПереносДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереносДанных,
		|		ДанныеРегистра.Сумма КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеРегистра
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборГодовыхПремий КАК Отбор
		|			ПО (Отбор.Сотрудник = ДанныеРегистра.Сотрудник)
		|				И (Отбор.ПорядокРасчета = ДанныеРегистра.ПорядокРасчета)
		|				И (ДанныеРегистра.Регистратор <> &ИсключаемыйРегистратор)
		|				И (ВЫБОР
		|					КОГДА ДанныеРегистра.СоставнаяЧасть В (&ГодовыеПремии)
		|						ТОГДА Отбор.ГодовыеПремииЗаГод = ДанныеРегистра.Год
		|					ИНАЧЕ ДанныеРегистра.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				КОНЕЦ)) КАК ДанныеРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистра.Период,
		|	ДанныеРегистра.Сотрудник,
		|	ДанныеРегистра.ПорядокРасчета,
		|	ДанныеРегистра.СоставнаяЧасть,
		|	ДанныеРегистра.СтатьяФинансирования,
		|	ДанныеРегистра.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеРегистра.СтатьяРасходов,
		|	ДанныеРегистра.ОблагаетсяЕНВД,
		|	ДанныеРегистра.Индексируется,
		|	ДанныеРегистра.Год,
		|	ДанныеРегистра.ДатаНачалаБазовогоПериода,
		|	ДанныеРегистра.КоличествоМесяцев,
		|	ДанныеРегистра.ПереносДанных
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеРегистра.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Месяцы.Период КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцы
		|ИЗ
		|	ВТПериоды КАК Месяцы
		|ГДЕ
		|	(Месяцы.Период В (&ОтборМесяцев)
		|			ИЛИ &ПоВсемМесяцам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРасчетаСреднегоСотрудников.Сотрудник КАК Сотрудник,
		|	ПериодыРасчетаСреднегоСотрудников.ПорядокРасчета КАК ПорядокРасчета,
		|	Месяцы.Месяц КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцыРасчетаСотрудников
		|ИЗ
		|	ВТПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчетаСреднегоСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцы КАК Месяцы
		|		ПО ПериодыРасчетаСреднегоСотрудников.НачалоПериодаРасчетаСреднего <= Месяцы.Месяц
		|			И ПериодыРасчетаСреднегоСотрудников.ОкончаниеПериодаРасчетаСреднего >= Месяцы.Месяц";

	Запрос.Выполнить();
	
	// Данные начислений (основной заработок).
	Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеНачислений.Сотрудник КАК Сотрудник,
		|	ДанныеНачислений.Период КАК Период,
		|	ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ДанныеНачислений.Год КАК Год,
		|	ДанныеНачислений.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ДанныеНачислений.КоличествоМесяцев КАК КоличествоМесяцев,
		|	ДанныеНачислений.Индексируется КАК Индексируется,
		|	ДанныеНачислений.Сумма КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТНачисленияСреднегоЗаработка
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК МесяцыРасчетаСотрудников
		|		ПО (МесяцыРасчетаСотрудников.Месяц = ДанныеНачислений.Период)
		|			И (МесяцыРасчетаСотрудников.ПорядокРасчета = ДанныеНачислений.ПорядокРасчета)
		|			И (МесяцыРасчетаСотрудников.Сотрудник = ДанныеНачислений.Сотрудник)
		|			И (ДанныеНачислений.ПереносДанных = ЛОЖЬ)
		|			И (НЕ ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СведенияНачислений.Сотрудник,
		|	СведенияНачислений.Месяц,
		|	СведенияНачислений.СоставнаяЧасть,
		|	СведенияНачислений.ПорядокРасчета,
		|	СведенияНачислений.СтатьяФинансирования,
		|	СведенияНачислений.СпособОтраженияЗарплатыВБухучете,
		|	СведенияНачислений.СтатьяРасходов,
		|	СведенияНачислений.ОблагаетсяЕНВД,
		|	СведенияНачислений.Год,
		|	СведенияНачислений.ДатаНачалаБазовогоПериода,
		|	СведенияНачислений.КоличествоМесяцев,
		|	СведенияНачислений.Индексируется,
		|	СведенияНачислений.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК МесяцыРасчетаСотрудников
		|		ПО (МесяцыРасчетаСотрудников.Месяц = СведенияНачислений.Месяц)
		|			И (МесяцыРасчетаСотрудников.ПорядокРасчета = СведенияНачислений.ПорядокРасчета)
		|			И (МесяцыРасчетаСотрудников.Сотрудник = СведенияНачислений.Сотрудник)
		|			И (НЕ СведенияНачислений.СоставнаяЧасть В (&ГодовыеПремии))
		|			И (СведенияНачислений.Сумма <> 0)
		|			И (&УчитыватьКорректировки = ИСТИНА
		|				ИЛИ НЕ ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|						ГДЕ
		|							ДанныеНачислений.Сотрудник = СведенияНачислений.Сотрудник
		|							И ДанныеНачислений.Период = СведенияНачислений.Месяц
		|							И ДанныеНачислений.ПорядокРасчета = СведенияНачислений.ПорядокРасчета
		|							И НЕ ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД,
		|	ДанныеНачислений.Год,
		|	ДанныеНачислений.ДатаНачалаБазовогоПериода,
		|	ДанныеНачислений.КоличествоМесяцев,
		|	ДанныеНачислений.Индексируется,
		|	ДанныеНачислений.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК МесяцыРасчетаСотрудников
		|		ПО (МесяцыРасчетаСотрудников.Месяц = ДанныеНачислений.Период)
		|			И (МесяцыРасчетаСотрудников.ПорядокРасчета = ДанныеНачислений.ПорядокРасчета)
		|			И (МесяцыРасчетаСотрудников.Сотрудник = ДанныеНачислений.Сотрудник)
		|			И (ДанныеНачислений.ПереносДанных = ИСТИНА)
		|			И (НЕ ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Период КАК Период,
		|	МИНИМУМ(Начисления.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет
		|ИЗ
		|	ВТНачисленияСреднегоЗаработка КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНачислений.Сотрудник КАК Сотрудник,
		|	ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеНачислений.Период КАК Период,
		|	ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ДанныеНачислений.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ДанныеНачислений.Индексируется КАК Индексируется,
		|	ДанныеНачислений.Источник КАК Источник,
		|	ДанныеНачислений.Год КАК Год,
		|	ДанныеНачислений.КоличествоМесяцев КАК КоличествоМесяцев,
		|	СУММА(ДанныеНачислений.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеНачислений.Сотрудник КАК Сотрудник,
		|		ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|		ДанныеНачислений.Период КАК Период,
		|		ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
		|		ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
		|		ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
		|		ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|		ДанныеНачислений.Год КАК Год,
		|		ДанныеНачислений.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|		ДанныеНачислений.КоличествоМесяцев КАК КоличествоМесяцев,
		|		ДанныеНачислений.Индексируется КАК Индексируется,
		|		ДанныеНачислений.Источник КАК Источник,
		|		ДанныеНачислений.Сумма КАК Сумма
		|	ИЗ
		|		ВТНачисленияСреднегоЗаработка КАК ДанныеНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ДанныеНачислений.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ДанныеНачислений.Период)
		|				И (МинимальныйПриоритет.Приоритет = ДанныеНачислений.Приоритет)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеНачислений.Сотрудник,
		|		ДанныеНачислений.ПорядокРасчета,
		|		ДанныеНачислений.Период,
		|		ДанныеНачислений.СоставнаяЧасть,
		|		ДанныеНачислений.СтатьяФинансирования,
		|		ДанныеНачислений.СпособОтраженияЗарплатыВБухучете,
		|		ДанныеНачислений.СтатьяРасходов,
		|		ДанныеНачислений.ОблагаетсяЕНВД,
		|		ДанныеНачислений.Год,
		|		ДанныеНачислений.ДатаНачалаБазовогоПериода,
		|		ДанныеНачислений.КоличествоМесяцев,
		|		ДанныеНачислений.Индексируется,
		|		ДанныеНачислений.Источник,
		|		ДанныеНачислений.Сумма
		|	ИЗ
		|		ВТНачисленияСреднегоЗаработка КАК ДанныеНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСреднегоЗаработкаМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ДанныеНачислений.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ДанныеНачислений.Период)
		|				И (МинимальныйПриоритет.Приоритет = 1)
		|				И (ДанныеНачислений.Приоритет = 3)) КАК ДанныеНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД,
		|	ДанныеНачислений.ДатаНачалаБазовогоПериода,
		|	ДанныеНачислений.Индексируется,
		|	ДанныеНачислений.Источник,
		|	ДанныеНачислений.Год,
		|	ДанныеНачислений.КоличествоМесяцев
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Индексируется УБЫВ";

	ВыборкаНачислений = Запрос.Выполнить().Выбрать();
	
	ДанныеНачислений = ПустаяТаблицаНачисленийСреднийЗаработокОбщий();
	Пока ВыборкаНачислений.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), ВыборкаНачислений);
	КонецЦикла;
	
	// Годовые премии.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ГодовыеПремии.Сотрудник КАК Сотрудник,
		|	ГодовыеПремии.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ГодовыеПремии.ПорядокРасчета КАК ПорядокРасчета,
		|	ГодовыеПремии.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ГодовыеПремии.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ГодовыеПремии.СтатьяРасходов КАК СтатьяРасходов,
		|	ГодовыеПремии.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ГодовыеПремии.Год КАК Год,
		|	ГодовыеПремии.Период КАК Период,
		|	ГодовыеПремии.Индексируется КАК Индексируется,
		|	ГодовыеПремии.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ГодовыеПремии.Сумма КАК Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТГодовыеПремии
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ГодовыеПремии
		|ГДЕ
		|	ГодовыеПремии.СоставнаяЧасть В(&ГодовыеПремии)
		|	И ГодовыеПремии.ПереносДанных = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СведенияНачислений.Сотрудник,
		|	СведенияНачислений.СоставнаяЧасть,
		|	СведенияНачислений.ПорядокРасчета,
		|	СведенияНачислений.СтатьяФинансирования,
		|	СведенияНачислений.СпособОтраженияЗарплатыВБухучете,
		|	СведенияНачислений.СтатьяРасходов,
		|	СведенияНачислений.ОблагаетсяЕНВД,
		|	СведенияНачислений.Год,
		|	СведенияНачислений.Месяц,
		|	СведенияНачислений.Индексируется,
		|	СведенияНачислений.ДатаНачалаБазовогоПериода,
		|	СведенияНачислений.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборГодовыхПремий КАК ОтборГодовыхПремий
		|		ПО (ОтборГодовыхПремий.Сотрудник = СведенияНачислений.Сотрудник)
		|			И (ОтборГодовыхПремий.ПорядокРасчета = СведенияНачислений.ПорядокРасчета)
		|			И (ОтборГодовыхПремий.ГодовыеПремииЗаГод = СведенияНачислений.Год)
		|			И (СведенияНачислений.СоставнаяЧасть В (&ГодовыеПремии))
		|			И (СведенияНачислений.Сумма <> 0)
		|			И (&УчитыватьКорректировки = ИСТИНА
		|				ИЛИ НЕ ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТДанныеДляРасчетаСреднего КАК ДанныеНачислений
		|						ГДЕ
		|							ДанныеНачислений.Сотрудник = СведенияНачислений.Сотрудник
		|							И ДанныеНачислений.Период = СведенияНачислений.Месяц
		|							И ДанныеНачислений.ПорядокРасчета = СведенияНачислений.ПорядокРасчета
		|							И ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ГодовыеПремии.Сотрудник,
		|	ГодовыеПремии.СоставнаяЧасть,
		|	ГодовыеПремии.ПорядокРасчета,
		|	ГодовыеПремии.СтатьяФинансирования,
		|	ГодовыеПремии.СпособОтраженияЗарплатыВБухучете,
		|	ГодовыеПремии.СтатьяРасходов,
		|	ГодовыеПремии.ОблагаетсяЕНВД,
		|	ГодовыеПремии.Год,
		|	ГодовыеПремии.Период,
		|	ГодовыеПремии.Индексируется,
		|	ГодовыеПремии.ДатаНачалаБазовогоПериода,
		|	ГодовыеПремии.Сумма,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|ИЗ
		|	ВТДанныеДляРасчетаСреднего КАК ГодовыеПремии
		|ГДЕ
		|	ГодовыеПремии.СоставнаяЧасть В(&ГодовыеПремии)
		|	И ГодовыеПремии.ПереносДанных = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГодовыеПремии.Сотрудник КАК Сотрудник,
		|	ГодовыеПремии.Год КАК Год,
		|	МИНИМУМ(ГодовыеПремии.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТГодовыеПремииМинимальныйПриоритет
		|ИЗ
		|	ВТГодовыеПремии КАК ГодовыеПремии
		|
		|СГРУППИРОВАТЬ ПО
		|	ГодовыеПремии.Сотрудник,
		|	ГодовыеПремии.Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГодовыеПремии.Сотрудник КАК Сотрудник,
		|	ГодовыеПремии.ПорядокРасчета КАК ПорядокРасчета,
		|	ГодовыеПремии.Год КАК Год,
		|	ГодовыеПремии.Период КАК Период,
		|	ГодовыеПремии.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ГодовыеПремии.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ГодовыеПремии.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ГодовыеПремии.СтатьяРасходов КАК СтатьяРасходов,
		|	ГодовыеПремии.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ГодовыеПремии.Индексируется КАК Индексируется,
		|	ГодовыеПремии.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ГодовыеПремии.Источник КАК Источник,
		|	СУММА(ГодовыеПремии.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ГодовыеПремии.Сотрудник КАК Сотрудник,
		|		ГодовыеПремии.ПорядокРасчета КАК ПорядокРасчета,
		|		ГодовыеПремии.СоставнаяЧасть КАК СоставнаяЧасть,
		|		ГодовыеПремии.СтатьяФинансирования КАК СтатьяФинансирования,
		|		ГодовыеПремии.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|		ГодовыеПремии.СтатьяРасходов КАК СтатьяРасходов,
		|		ГодовыеПремии.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|		ГодовыеПремии.Год КАК Год,
		|		ГодовыеПремии.Период КАК Период,
		|		ГодовыеПремии.Индексируется КАК Индексируется,
		|		ГодовыеПремии.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|		ГодовыеПремии.Источник КАК Источник,
		|		ГодовыеПремии.Сумма КАК Сумма
		|	ИЗ
		|		ВТГодовыеПремии КАК ГодовыеПремии
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГодовыеПремииМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ГодовыеПремии.Сотрудник)
		|				И (МинимальныйПриоритет.Год = ГодовыеПремии.Год)
		|				И (МинимальныйПриоритет.Приоритет = ГодовыеПремии.Приоритет)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГодовыеПремии.Сотрудник,
		|		ГодовыеПремии.ПорядокРасчета,
		|		ГодовыеПремии.СоставнаяЧасть,
		|		ГодовыеПремии.СтатьяФинансирования,
		|		ГодовыеПремии.СпособОтраженияЗарплатыВБухучете,
		|		ГодовыеПремии.СтатьяРасходов,
		|		ГодовыеПремии.ОблагаетсяЕНВД,
		|		ГодовыеПремии.Год,
		|		ГодовыеПремии.Период,
		|		ГодовыеПремии.Индексируется,
		|		ГодовыеПремии.ДатаНачалаБазовогоПериода,
		|		ГодовыеПремии.Источник,
		|		ГодовыеПремии.Сумма
		|	ИЗ
		|		ВТГодовыеПремии КАК ГодовыеПремии
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГодовыеПремииМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ГодовыеПремии.Сотрудник)
		|				И (МинимальныйПриоритет.Год = ГодовыеПремии.Год)
		|				И (МинимальныйПриоритет.Приоритет = 1)
		|				И (ГодовыеПремии.Приоритет = 3)) КАК ГодовыеПремии
		|
		|СГРУППИРОВАТЬ ПО
		|	ГодовыеПремии.Сотрудник,
		|	ГодовыеПремии.ПорядокРасчета,
		|	ГодовыеПремии.СоставнаяЧасть,
		|	ГодовыеПремии.СтатьяФинансирования,
		|	ГодовыеПремии.СпособОтраженияЗарплатыВБухучете,
		|	ГодовыеПремии.СтатьяРасходов,
		|	ГодовыеПремии.ОблагаетсяЕНВД,
		|	ГодовыеПремии.Индексируется,
		|	ГодовыеПремии.ДатаНачалаБазовогоПериода,
		|	ГодовыеПремии.Источник,
		|	ГодовыеПремии.Год,
		|	ГодовыеПремии.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГодовыеПремии.Сотрудник,
		|	ГодовыеПремии.Год,
		|	ГодовыеПремии.СоставнаяЧасть,
		|	ГодовыеПремии.Индексируется УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНачислений.Добавить(), Выборка);
	КонецЦикла;
		
	// Данные отработанного времени.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(СотрудникиМесяцы.Месяц, МЕСЯЦ)) КАК Период
		|ПОМЕСТИТЬ ВТПериодыКадровыхДанных
		|ИЗ
		|	ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиМесяцы.Сотрудник";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТПериодыКадровыхДанных");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаПриема");
	
	Запрос.УстановитьПараметр("ОграничиватьНачалоРасчетногоПериода", ПолучитьФункциональнуюОпцию("ОграничиватьНачалоРасчетногоПериодаСреднегоЗаработкаДатойПриема"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА &ОграничиватьНачалоРасчетногоПериода
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КадровыеДанные.ДатаПриема, СотрудникиМесяцы.Месяц) <= СотрудникиМесяцы.Месяц
		|						ТОГДА СотрудникиМесяцы.Месяц
		|					ИНАЧЕ ЕСТЬNULL(КадровыеДанные.ДатаПриема, СотрудникиМесяцы.Месяц)
		|				КОНЕЦ
		|		ИНАЧЕ СотрудникиМесяцы.Месяц
		|	КОНЕЦ КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(СотрудникиМесяцы.Месяц, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФильтрДанныеПроизводственногоКалендаря
		|ИЗ
		|	ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|		ПО СотрудникиМесяцы.Сотрудник = КадровыеДанные.Сотрудник
		|ГДЕ
		|	(НЕ &ОграничиватьНачалоРасчетногоПериода
		|			ИЛИ НАЧАЛОПЕРИОДА(ЕСТЬNULL(КадровыеДанные.ДатаПриема, СотрудникиМесяцы.Месяц), МЕСЯЦ) <= СотрудникиМесяцы.Месяц)";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = УчетРабочегоВремениРасширенный.ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоСотрудникам();
	ОписаниеФильтра.ИмяВТ = "ВТФильтрДанныеПроизводственногоКалендаря";
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеПроизводственногоКалендаряПоСотрудникам(МенеджерВременныхТаблиц, ОписаниеФильтра);
	
	ИменаУДаляемыхТаблиц = Новый Массив;
	ИменаУДаляемыхТаблиц.Добавить("ВТПериодыКадровыхДанных");
	ИменаУДаляемыхТаблиц.Добавить("ВТКадровыеДанныеСотрудников");
	ИменаУДаляемыхТаблиц.Добавить("ВТФильтрДанныеПроизводственногоКалендаря");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ИменаУДаляемыхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.ПереносДанных,
		|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТНакопленияВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.Период КАК Период,
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ДанныеВремени.ПорядокРасчета КАК ПорядокРасчета,
		|		ВЫБОР
		|			КОГДА ДанныеВремени.Регистратор ССЫЛКА Документ.ПереносДанных
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПереносДанных,
		|		ДанныеВремени.ОтработаноДней КАК ОтработаноДней,
		|		ДанныеВремени.ОтработаноЧасов КАК ОтработаноЧасов,
		|		ДанныеВремени.ОтработаноДнейШестидневка КАК ОтработаноДнейШестидневка,
		|		ДанныеВремени.ОтработаноДнейПятидневка КАК ОтработаноДнейПятидневка,
		|		ДанныеВремени.ОтработаноЧасовПятидневка КАК ОтработаноЧасовПятидневка,
		|		ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных
		|	ИЗ
		|		РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРасчетаСреднегоСотрудников КАК ПериодыРасчета
		|			ПО (ПериодыРасчета.Сотрудник = ДанныеВремени.Сотрудник)
		|				И (ПериодыРасчета.ПорядокРасчета = ДанныеВремени.ПорядокРасчета)
		|				И (ДанныеВремени.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|				И (ДанныеВремени.Регистратор <> &ИсключаемыйРегистратор)) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.ПереносДанных
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ДанныеВремени.ОтработаноДней) <> 0
		|		ИЛИ СУММА(ДанныеВремени.ОтработаноЧасов) <> 0
		|		ИЛИ СУММА(ДанныеВремени.ОтработаноДнейШестидневка) <> 0
		|		ИЛИ СУММА(ДанныеВремени.ОтработаноДнейПятидневка) <> 0
		|		ИЛИ СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) <> 0
		|		ИЛИ СУММА(ДанныеВремени.ОтработаноДнейКалендарных) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеВремени.Период КАК Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.ОтработаноДней,
		|	ДанныеВремени.ОтработаноЧасов,
		|	ДанныеВремени.ОтработаноДнейШестидневка,
		|	ДанныеВремени.ОтработаноДнейПятидневка,
		|	ДанныеВремени.ОтработаноЧасовПятидневка,
		|	ДанныеВремени.ОтработаноДнейКалендарных,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТВремяДляРасчетаСреднего
		|ИЗ
		|	ВТНакопленияВремени КАК ДанныеВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (СотрудникиМесяцы.Месяц = ДанныеВремени.Период)
		|			И (СотрудникиМесяцы.ПорядокРасчета = ДанныеВремени.ПорядокРасчета)
		|			И (ДанныеВремени.ПереносДанных = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СведенияВремени.Месяц,
		|	СведенияВремени.Сотрудник,
		|	СведенияВремени.ПорядокРасчета,
		|	СведенияВремени.ОтработаноДней,
		|	СведенияВремени.ОтработаноЧасов,
		|	СведенияВремени.ОтработаноДнейШестидневка,
		|	СведенияВремени.ОтработаноДнейПятидневка,
		|	СведенияВремени.ОтработаноЧасовПятидневка,
		|	СведенияВремени.ОтработаноДнейКалендарных,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.СведенияОВремениДляРасчетаСреднегоОбщий КАК СведенияВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = СведенияВремени.Сотрудник)
		|			И (СотрудникиМесяцы.Месяц = СведенияВремени.Месяц)
		|			И (СотрудникиМесяцы.ПорядокРасчета = СведенияВремени.ПорядокРасчета)
		|			И (СведенияВремени.ОтработаноДней <> 0
		|				ИЛИ СведенияВремени.ОтработаноЧасов <> 0
		|				ИЛИ СведенияВремени.ОтработаноЧасов <> 0
		|				ИЛИ СведенияВремени.ОтработаноДнейШестидневка <> 0
		|				ИЛИ СведенияВремени.ОтработаноДнейПятидневка <> 0
		|				ИЛИ СведенияВремени.ОтработаноЧасовПятидневка <> 0
		|				ИЛИ СведенияВремени.ОтработаноДнейКалендарных <> 0)
		|			И (&УчитыватьКорректировки = ИСТИНА
		|				ИЛИ НЕ ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТНакопленияВремени КАК НакопленияВремени
		|						ГДЕ
		|							НакопленияВремени.Сотрудник = СведенияВремени.Сотрудник
		|							И НакопленияВремени.Период = СведенияВремени.Месяц
		|							И НакопленияВремени.ПорядокРасчета = СведенияВремени.ПорядокРасчета))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеВремени.Период,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.ОтработаноДней,
		|	ДанныеВремени.ОтработаноЧасов,
		|	ДанныеВремени.ОтработаноДнейШестидневка,
		|	ДанныеВремени.ОтработаноДнейПятидневка,
		|	ДанныеВремени.ОтработаноЧасовПятидневка,
		|	ДанныеВремени.ОтработаноДнейКалендарных,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|ИЗ
		|	ВТНакопленияВремени КАК ДанныеВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (СотрудникиМесяцы.Месяц = ДанныеВремени.Период)
		|			И (СотрудникиМесяцы.ПорядокРасчета = ДанныеВремени.ПорядокРасчета)
		|			И (ДанныеВремени.ПереносДанных = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Время.Сотрудник,
		|	Время.Период,
		|	МИНИМУМ(Время.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет
		|ИЗ
		|	ВТВремяДляРасчетаСреднего КАК Время
		|
		|СГРУППИРОВАТЬ ПО
		|	Время.Сотрудник,
		|	Время.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Месяц,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.Источник,
		|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТДанныеВремениПоСотрудникам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.Период КАК Месяц,
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ДанныеВремени.ПорядокРасчета КАК ПорядокРасчета,
		|		ДанныеВремени.Источник КАК Источник,
		|		ДанныеВремени.ОтработаноДней КАК ОтработаноДней,
		|		ДанныеВремени.ОтработаноЧасов КАК ОтработаноЧасов,
		|		ДанныеВремени.ОтработаноДнейШестидневка КАК ОтработаноДнейШестидневка,
		|		ДанныеВремени.ОтработаноДнейПятидневка КАК ОтработаноДнейПятидневка,
		|		ДанныеВремени.ОтработаноЧасовПятидневка КАК ОтработаноЧасовПятидневка,
		|		ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТВремяДляРасчетаСреднего КАК ДанныеВремени
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО ДанныеВремени.Сотрудник = МинимальныйПриоритет.Сотрудник
		|				И ДанныеВремени.Период = МинимальныйПриоритет.Период
		|				И ДанныеВремени.Приоритет = МинимальныйПриоритет.Приоритет
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеВремени.Период,
		|		ДанныеВремени.Сотрудник,
		|		ДанныеВремени.ПорядокРасчета,
		|		ДанныеВремени.Источник,
		|		ДанныеВремени.ОтработаноДней,
		|		ДанныеВремени.ОтработаноЧасов,
		|		ДанныеВремени.ОтработаноДнейШестидневка,
		|		ДанныеВремени.ОтработаноДнейПятидневка,
		|		ДанныеВремени.ОтработаноЧасовПятидневка,
		|		ДанныеВремени.ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТВремяДляРасчетаСреднего КАК ДанныеВремени
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО ДанныеВремени.Сотрудник = МинимальныйПриоритет.Сотрудник
		|				И ДанныеВремени.Период = МинимальныйПриоритет.Период
		|				И (МинимальныйПриоритет.Приоритет = 1)
		|				И (ДанныеВремени.Приоритет = 3)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеВремениКорректировка.Месяц,
		|		ДанныеВремениКорректировка.Сотрудник,
		|		ДанныеВремениКорректировка.ПорядокРасчета,
		|		ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления),
		|		ДанныеВремениКорректировка.ОтработаноДней,
		|		0,
		|		ДанныеВремениКорректировка.ОтработаноДнейШестидневка,
		|		ДанныеВремениКорректировка.ОтработаноДнейПятидневка,
		|		ДанныеВремениКорректировка.ОтработаноЧасовПятидневка,
		|		ДанныеВремениКорректировка.ОтработаноДнейКалендарных
		|	ИЗ
		|		РегистрСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка КАК ДанныеВремениКорректировка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|			ПО (СотрудникиМесяцы.Сотрудник = ДанныеВремениКорректировка.Сотрудник)
		|				И (СотрудникиМесяцы.ПорядокРасчета = ДанныеВремениКорректировка.ПорядокРасчета)
		|				И (СотрудникиМесяцы.Месяц = ДанныеВремениКорректировка.Месяц)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ДанныеВремениКорректировка.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ДанныеВремениКорректировка.Месяц)
		|				И (МинимальныйПриоритет.Приоритет = 2)
		|	ГДЕ
		|		МинимальныйПриоритет.Период ЕСТЬ NULL ) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Месяц,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.Период,
		|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных,
		|	СУММА(ДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
		|	СУММА(ДанныеВремени.НормаДнейПроизводственныйКалендарь) КАК НормаДнейПроизводственныйКалендарь,
		|	СУММА(ДанныеВремени.НормаЧасовПроизводственныйКалендарь) КАК НормаЧасовПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТДанныеВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеВремени.Сотрудник КАК Сотрудник,
		|		ДанныеВремени.ПорядокРасчета КАК ПорядокРасчета,
		|		ДанныеВремени.Источник КАК Источник,
		|		ДанныеВремени.Месяц КАК Период,
		|		ДанныеВремени.ОтработаноДней КАК ОтработаноДней,
		|		ДанныеВремени.ОтработаноЧасов КАК ОтработаноЧасов,
		|		ДанныеВремени.ОтработаноДнейПятидневка КАК ОтработаноДнейПятидневка,
		|		ДанныеВремени.ОтработаноЧасовПятидневка КАК ОтработаноЧасовПятидневка,
		|		ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных,
		|		ДанныеВремени.ОтработаноДнейШестидневка КАК ОтработаноДнейШестидневка,
		|		0 КАК НормаДнейПроизводственныйКалендарь,
		|		0 КАК НормаЧасовПроизводственныйКалендарь
		|	ИЗ
		|		ВТДанныеВремениПоСотрудникам КАК ДанныеВремени
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СотрудникиМесяцы.Сотрудник,
		|		СотрудникиМесяцы.ПорядокРасчета,
		|		ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка),
		|		СотрудникиМесяцы.Месяц,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		КалендарноеВремя.НормаДнейПоПроизводственномуКалендарю,
		|		КалендарноеВремя.НормаЧасовПоПроизводственномуКалендарю
		|	ИЗ
		|		ВТМесяцыРасчетаСотрудников КАК СотрудникиМесяцы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоСотрудникам КАК КалендарноеВремя
		|			ПО (КалендарноеВремя.Сотрудник = СотрудникиМесяцы.Сотрудник)
		|				И (НАЧАЛОПЕРИОДА(КалендарноеВремя.ДатаНачала, МЕСЯЦ) = СотрудникиМесяцы.Месяц)) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ПорядокРасчета,
		|	ДанныеВремени.Период,
		|	ЕСТЬNULL(ИсточникиДанных.Источник, ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)) КАК Источник,
		|	ДанныеВремени.ОтработаноДней,
		|	ДанныеВремени.ОтработаноЧасов,
		|	ДанныеВремени.ОтработаноДнейПятидневка,
		|	ДанныеВремени.ОтработаноЧасовПятидневка,
		|	ДанныеВремени.ОтработаноДнейКалендарных,
		|	ДанныеВремени.ОтработаноДнейШестидневка,
		|	ДанныеВремени.НормаДнейПроизводственныйКалендарь,
		|	ДанныеВремени.НормаЧасовПроизводственныйКалендарь
		|ИЗ
		|	ВТДанныеВремени КАК ДанныеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднего КАК ИсточникиДанных
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяДляРасчетаСреднегоМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Сотрудник = ИсточникиДанных.Сотрудник)
		|				И (МинимальныйПриоритет.Период = ИсточникиДанных.Период)
		|		ПО (ИсточникиДанных.Сотрудник = ДанныеВремени.Сотрудник)
		|			И (ИсточникиДанных.Период = ДанныеВремени.Период)
		|			И (ИсточникиДанных.Приоритет = МинимальныйПриоритет.Приоритет)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Период";

	ВыборкаВремени = Запрос.Выполнить().Выбрать();
	ДанныеВремени = ПустаяТаблицаОтработанноеВремяСреднийЗаработокОбщий();
	Пока ВыборкаВремени.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВремени.Добавить(), ВыборкаВремени);
	КонецЦикла;
	
	// Данные индексации
	// Для получения данных индексации исходные данные нужно дополнить данными месяца наступления события, 
	// т.к. индексация в этом месяце также распространяется на расчетный период в соответствии с п.16 постановления 922.
	Для Каждого СтрокаДанных Из ТаблицаСотрудники Цикл
		СтрокаДанных.ОкончаниеПериодаРасчетаСреднего = ДобавитьМесяц(СтрокаДанных.ОкончаниеПериодаРасчетаСреднего, 1);
	КонецЦикла;
	
	ДанныеИндексации = ДанныеИндексации(ТаблицаСотрудники);
	
	ДанныеДляРасчета = Новый Структура(
		"ДанныеОНачислениях, 
		|ДанныеОВремени, 
		|ДанныеОбИндексации");
		
	ДанныеДляРасчета.ДанныеОНачислениях = ДанныеНачислений;
	ДанныеДляРасчета.ДанныеОВремени = ДанныеВремени;
	ДанныеДляРасчета.ДанныеОбИндексации = ДанныеИндексации;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции	

// Получает таблицу коэффициентов по месяцам, 
// которые необходимо применить к среднему заработку из-за проводимой индексации заработка.
//
// Параметры:
//	ИсходныеДанные - таблица значений, 
//		созданная конструктором см. ПустаяТаблицаИсходныхДанныхРасчетаОбщегоСреднегоЗаработка
//	КоэффициентУчитываетПоследующиеИндексации 
//		- если Истина, коэффициент на конкретный месяц учитывает все индексации произошедшие ПОСЛЕ него (для расчета
//		показателя КоэффициентИндексации)
//		- если Ложь, коэффициент на конкретный месяц учитывает все индексации произошедшие ДО него.
//
Функция ДанныеИндексации(ИсходныеДанные, КоэффициентУчитываетПоследующиеИндексации = Ложь) Экспорт
	
	ДанныеИндексации = Новый ТаблицаЗначений;
	ДанныеИндексации.Колонки.Добавить("Сотрудник");
	ДанныеИндексации.Колонки.Добавить("Период");
	ДанныеИндексации.Колонки.Добавить("КоэффициентИндексации");
	
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат ДанныеИндексации;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.НачалоПериодаРасчетаСреднего,
		|	ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего,
		|	ИсходныеДанные.ДатаНачалаСобытия,
		|	ИсходныеДанные.ПорядокРасчета
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ИсходныеДанные.НачалоПериодаРасчетаСреднего) КАК НачалоПервогоИнтервала,
		|	МАКСИМУМ(ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего) КАК ОкончаниеПоследнегоИнтервала
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеИндексации;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	// Создаем ВТ с месяцами
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.НачалоПервогоИнтервала, Выборка.ОкончаниеПоследнегоИнтервала);
	
	// Выбираем коэффициенты индексации заработка: 
	// - для индексации выплат, учитываемых при расчете показателя среднего заработка, 
	// для каждого месяца выбираем коэффициенты, всех индексаций, случившихся ДО него
	// - для расчета показателя КоэффициентИндексации - для каждого месяца 
	// выборка коэффициентов всех индексаций, случившихся ПОСЛЕ него.
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	Месяцы.Период КАК Период,
		|	ЕСТЬNULL(КоэффициентИндексацииЗаработка.Коэффициент, 1) КАК КоэффициентИндексации
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Месяцы
		|		ПО (Месяцы.Период МЕЖДУ ИсходныеДанные.НачалоПериодаРасчетаСреднего И ИсходныеДанные.ОкончаниеПериодаРасчетаСреднего)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентИндексацииЗаработка
		|		ПО ИсходныеДанные.Сотрудник = КоэффициентИндексацииЗаработка.Сотрудник
		|			И (Месяцы.Период >= НАЧАЛОПЕРИОДА(КоэффициентИндексацииЗаработка.Период, МЕСЯЦ))
		|			И (КоэффициентИндексацииЗаработка.Период >= ИсходныеДанные.ДатаНачалаСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период УБЫВ
		|ИТОГИ ПО
		|	Сотрудник,
		|	Период";
	
	Если Не КоэффициентУчитываетПоследующиеИндексации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ">=", "<");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период УБЫВ", "Период ВОЗР");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обходя результаты запроса агрегируем коэффициенты.
	
	ВыборкаПоСотрудникам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		ВыборкаПоМесяцам = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоМесяцам.Следующий() Цикл
			Коэффициент = 1;
			Выборка = ВыборкаПоМесяцам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Коэффициент = Коэффициент * Выборка.КоэффициентИндексации;
			КонецЦикла;
			СтрокаИндексации = ДанныеИндексации.Добавить();
			СтрокаИндексации.Сотрудник = ВыборкаПоСотрудникам.Сотрудник;
			СтрокаИндексации.Период = ВыборкаПоМесяцам.Период;
			СтрокаИндексации.КоэффициентИндексации = Коэффициент;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеИндексации;
	
КонецФункции

// По переданному массиву ссылок возвращает структуру, содержащую таблицы значений с данными о начислениях, 
// отработанном времени и коэффициентах индексации для расчета среднего заработка.
//
Функция ТаблицыДанныхОСреднемЗаработке(ИмяДокумента, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументДанныеОЗаработке.Ссылка,
		|	ДокументДанныеОЗаработке.Сотрудник,
		|	ДокументДанныеОЗаработке.ПорядокРасчета,
		|	ДокументДанныеОЗаработке.СоставнаяЧасть,
		|	ДокументДанныеОЗаработке.СтатьяФинансирования,
		|	ДокументДанныеОЗаработке.СпособОтраженияЗарплатыВБухучете,
		|	ДокументДанныеОЗаработке.СтатьяРасходов,
		|	ДокументДанныеОЗаработке.ОблагаетсяЕНВД,
		|	ДокументДанныеОЗаработке.Период,
		|	ДокументДанныеОЗаработке.Индексируется,
		|	ДокументДанныеОЗаработке.Сумма,
		|	ДокументДанныеОЗаработке.Источник,
		|	ДокументДанныеОЗаработке.Год,
		|	ДокументДанныеОЗаработке.ДатаНачалаБазовогоПериода,
		|	ДокументДанныеОЗаработке.КоличествоМесяцев
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокОбщий КАК ДокументДанныеОЗаработке
		|ГДЕ
		|	ДокументДанныеОЗаработке.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументОтработанноеВремя.Ссылка,
		|	ДокументОтработанноеВремя.Сотрудник,
		|	ДокументОтработанноеВремя.ПорядокРасчета,
		|	ДокументОтработанноеВремя.Период,
		|	ДокументОтработанноеВремя.ОтработаноДней,
		|	ДокументОтработанноеВремя.ОтработаноДнейПятидневка,
		|	ДокументОтработанноеВремя.ОтработаноЧасов,
		|	ДокументОтработанноеВремя.ОтработаноДнейШестидневка,
		|	ДокументОтработанноеВремя.ОтработаноДнейКалендарных,
		|	ДокументОтработанноеВремя.НормаДнейПроизводственныйКалендарь,
		|	ДокументОтработанноеВремя.ОтработаноЧасовПятидневка,
		|	ДокументОтработанноеВремя.НормаЧасовПроизводственныйКалендарь,
		|	ДокументОтработанноеВремя.Источник
		|ИЗ
		|	Документ.#ИмяДокумента#.ОтработанноеВремяДляСреднегоОбщий КАК ДокументОтработанноеВремя
		|ГДЕ
		|	ДокументОтработанноеВремя.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументДанныеОбИндексации.Ссылка,
		|	ДокументДанныеОбИндексации.Сотрудник,
		|	ДокументДанныеОбИндексации.Период,
		|	ДокументДанныеОбИндексации.КоэффициентИндексации
		|ИЗ
		|	Документ.#ИмяДокумента#.ДанныеОбИндексации КАК ДокументДанныеОбИндексации
		|ГДЕ
		|	ДокументДанныеОбИндексации.Ссылка В (&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента#", ИмяДокумента);	
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеОНачислениях 	= Результат[0].Выгрузить();
	ДанныеВремени 		= Результат[1].Выгрузить();
	ДанныеИндексации	= Результат[2].Выгрузить();
	ДанныеДляРасчета 	= Новый Структура("ДанныеОНачислениях,ДанныеОВремени,ДанныеОбИндексации", ДанныеОНачислениях, ДанныеВремени, ДанныеИндексации);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции	

// Создает новую таблицу значений и копирует в нее данные отобранные по значению в указанном поле.
//
Функция ТаблицаОтобраннаяПоПолю(ИсходнаяТаблица, Поле, ЗначениеОтбора) Экспорт
	
	ОтобраннаяТаблица = ИсходнаяТаблица.СкопироватьКолонки();
	
	Для каждого Строка Из ИсходнаяТаблица Цикл
		Если Строка[Поле] = ЗначениеОтбора Тогда
			ЗаполнитьЗначенияСвойств(ОтобраннаяТаблица.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;

	Возврат ОтобраннаяТаблица;

КонецФункции

#КонецОбласти

#Область МетодыОбслуживанияФормДокументовДляРасчетаСреднегоЗаработка

// Процедура заполняет таблицы документа данными учета среднего заработка
// по результатам их редактирования.
//
Процедура ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, РедактируемыеДанные, Модифицированность = Ложь) Экспорт
	
	ОчиститьДанныеОСреднемДокумента(
		РедактируемыеДанные.Сотрудник, 
		РедактируемыеДанные.ПорядокРасчета, 
		РедактируемыеДанные.НачалоПериодаРасчета, 
		РедактируемыеДанные.ОкончаниеПериодаРасчета, 
		ДанныеОНачислениях, 
		ДанныеОВремени, 
		ДанныеОбИндексации);	
	
	РедактируемыеНачисления = ПолучитьИзВременногоХранилища(РедактируемыеДанные.ДанныеОНачислениях);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеНачисления, ДанныеОНачислениях);
	
	Если РедактируемыеДанные.Свойство("ДанныеОВремени") И ЗначениеЗаполнено(РедактируемыеДанные.ДанныеОВремени) Тогда 
		РедактируемоеВремя = ПолучитьИзВременногоХранилища(РедактируемыеДанные.ДанныеОВремени);
		Если РедактируемоеВремя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемоеВремя, ДанныеОВремени);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДанныеОбИндексации <> Неопределено И РедактируемыеДанные.Свойство("ДанныеОбИндексации") Тогда
		РедактируемаяИндексация = ПолучитьИзВременногоХранилища(РедактируемыеДанные.ДанныеОбИндексации);
		Если РедактируемаяИндексация <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемаяИндексация, ДанныеОбИндексации);
		КонецЕсли;	
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры	

// Функция выполняет обновление коллекций данных среднего заработка из данных учета.
// Обновление производится для добавленных сотрудников, для удаленных сотрудников строки коллекций удаляются.
//
// Параметры:
//	ДанныеДокумента - структура с полями ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации (необязательный),
//	ДатаНачалаСобытия,
//	НачалоПериода - начало периода расчета среднего заработка,
//	ОкончаниеПериода - окончание периода расчета среднего заработка,
//	СотрудникиДокумента - массив сотрудников, данные для которых должны быть в документе.
//	ПроверятьПериодРасчетаСреднегоЗаработка - если Истина, то будут обновлены данные среднего для всех сотрудников, 
// 			чьи данные не покрывают период расчета среднего заработка.
// 
// Возвращаемое значение - массив сотрудников, данные для расчета среднего которых были обновлены.
//
Функция ОбновитьДанныеОбщегоСреднегоЗаработка(ДанныеДокумента, ДатаНачалаСобытия, НачалоПериода, ОкончаниеПериода, СотрудникиДокумента, ПроверятьПериодРасчетаСреднего = Истина, ИсключаемыйРегистратор = Неопределено, ОбновлятьДанныеВсехСотрудников = Ложь) Экспорт
	
	// Различаем сценарии
	// - изменился состав сотрудников
	// - изменился состав периодов среднего заработка.
	
	// Если изменился состав периодов расчета среднего заработка
	// - удаляем данные вне периода, если это не ручные корректировки
	// - получаем данные за новый период
	// - переносим имеющиеся ручные корректировки в полученные данные.
	
	// Выявляем состав сотрудников, 
	// - данные которых нужно удалить
	// - данных для которых не хватает.
	
	СотрудникиДанныхСреднего = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеДокумента.ДанныеОНачислениях, "Сотрудник", Истина);
	
	СотрудникиДобавить = ОбщегоНазначенияКлиентСервер.СократитьМассив(СотрудникиДокумента, СотрудникиДанныхСреднего);
	СотрудникиУдалить = ОбщегоНазначенияКлиентСервер.СократитьМассив(СотрудникиДанныхСреднего, СотрудникиДокумента);
	
	ОбновляемыеСотрудники = Новый Массив;
	
	// Удаляем строки сотрудников удаленных сотрудников.
	Если СотрудникиУдалить <> Неопределено Тогда
		ОчиститьДанныеДляРасчетаСреднего(ДанныеДокумента.ДанныеОНачислениях, СотрудникиУдалить);
		ОчиститьДанныеДляРасчетаСреднего(ДанныеДокумента.ДанныеОВремени, СотрудникиУдалить);
	КонецЕсли;
	
	// Таблица для получения данных среднего заработка.
	ТаблицаСотрудники = ПустаяТаблицаИсходныхДанныхРасчетаОбщегоСреднегоЗаработка();

	ПорядокРасчета = УчетСреднегоЗаработкаКлиентСервер.ПорядокРасчетаОбщегоСреднегоЗаработка(ДатаНачалаСобытия);
	
	Если СотрудникиДобавить <> Неопределено Тогда
		// Заполняем таблицу добавленными сотрудниками.
		Для Каждого Сотрудник Из СотрудникиДобавить Цикл
			НоваяСтрока = ТаблицаСотрудники.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
			НоваяСтрока.ДатаНачалаСобытия = ДатаНачалаСобытия;
			НоваяСтрока.НачалоПериодаРасчетаСреднего = НачалоПериода;
			НоваяСтрока.ОкончаниеПериодаРасчетаСреднего = ОкончаниеПериода;
			ОбновляемыеСотрудники.Добавить(Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
	// Проверяем следствия изменения периода расчета среднего заработка.
	Если ПроверятьПериодРасчетаСреднего Тогда
		// Выявляем сотрудников, для которых нужно дополнить данные в связи с изменением периода.
		// Считаем, что дополнять данные нужно, если минимальный для сотрудника месяц или максимальный 
		// выходят за границы периода расчета среднего заработка.
		ПериодыСотрудников = Новый Соответствие;
		Для Каждого СтрокаДанныхСреднего Из ДанныеДокумента.ДанныеОНачислениях Цикл
			ПериодыСотрудника = ПериодыСотрудников[СтрокаДанныхСреднего.Сотрудник];
			Если ПериодыСотрудников[СтрокаДанныхСреднего.Сотрудник] = Неопределено Тогда
				ПериодыСотрудника = Новый Структура("Минимум, Максимум");
			КонецЕсли;
			Если ПериодыСотрудника.Минимум = Неопределено 
				Или СтрокаДанныхСреднего.Период < ПериодыСотрудника.Минимум Тогда
				ПериодыСотрудника.Минимум = СтрокаДанныхСреднего.Период;
			КонецЕсли;
			Если ПериодыСотрудника.Максимум = Неопределено 
				Или СтрокаДанныхСреднего.Период > ПериодыСотрудника.Максимум Тогда
				ПериодыСотрудника.Максимум = СтрокаДанныхСреднего.Период;
			КонецЕсли;
			ПериодыСотрудников.Вставить(СтрокаДанныхСреднего.Сотрудник, ПериодыСотрудника);
		КонецЦикла;
		
		// Если для сотрудника границы периода данных среднего не покрывают нового периода
		// нужно получить новые данные.
		Для Каждого КлючИЗначение Из ПериодыСотрудников Цикл
			Сотрудник = КлючИЗначение.Ключ;
			ПериодыСотрудника = КлючИЗначение.Значение;
			Если ПериодыСотрудника.Минимум > НачалоПериода 
				Или ПериодыСотрудника.Максимум < НачалоМесяца(ОкончаниеПериода) Тогда 
				НоваяСтрока = ТаблицаСотрудники.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
				НоваяСтрока.ДатаНачалаСобытия = ДатаНачалаСобытия;
				НоваяСтрока.НачалоПериодаРасчетаСреднего = НачалоПериода;
				НоваяСтрока.ОкончаниеПериодаРасчетаСреднего = ОкончаниеПериода;
				ОбновляемыеСотрудники.Добавить(Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем из коллекций данные, находящиеся вне периода расчета среднего заработка.
		ГодГодовыхПремий = УчетСреднегоЗаработкаКлиентСервер.ГодГодовыхПремий(ДатаНачалаСобытия);
		УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеДокумента.ДанныеОНачислениях, НачалоПериода, ОкончаниеПериода, , ГодГодовыхПремий);
		УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеДокумента.ДанныеОВремени, НачалоПериода, ОкончаниеПериода);
		
		Если ДанныеДокумента.Свойство("ДанныеОбИндексации") Тогда
			// Данные индексации перезаполняем полностью.
			ОчиститьДанныеДляРасчетаСреднего(ДанныеДокумента.ДанныеОбИндексации, ОбновляемыеСотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновлятьДанныеВсехСотрудников Тогда
		// Заполняем таблицу добавленными сотрудниками.
		Для Каждого Сотрудник Из СотрудникиДокумента Цикл
			Отбор = Новый Структура("Сотрудник", Сотрудник);
			Если ТаблицаСотрудники.НайтиСтроки(Отбор).Количество() <> 0 Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаСотрудники.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
			НоваяСтрока.ДатаНачалаСобытия = ДатаНачалаСобытия;
			НоваяСтрока.НачалоПериодаРасчетаСреднего = НачалоПериода;
			НоваяСтрока.ОкончаниеПериодаРасчетаСреднего = ОкончаниеПериода;
			ОбновляемыеСотрудники.Добавить(Сотрудник);
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаСотрудники.Количество() = 0 Тогда
		Возврат ОбновляемыеСотрудники;
	КонецЕсли;
	
	// Получаем данные для расчета среднего заработка.
	ДанныеДляРасчета = УчетСреднегоЗаработка.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудников(ТаблицаСотрудники, , ИсключаемыйРегистратор);
	
	// Объединение данных, полученных из учета, с данными документа осуществляется по следующим правилам
	// Данные в документе заменяются данными из учета в одном из следующих случаев
	//	- источник данных в документе не относится к группе источников "Результаты редактирования" (СведенияДоНачалаЭксплуатации и Исправления)
	//	- порядковый номер источника из учета (приоритет) выше, чем в документе.
	
	// Следовательно, необходимо в разрезе сотрудника и месяца для каждой коллекции определить максимальный приоритет источника 
	// и наличие результатов редактирования.
	
	ПриоритетИсточников = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПриоритетИсточников();
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
	СочетанияЗамены = Новый ТаблицаЗначений;
	СочетанияЗамены.Колонки.Добавить("Сотрудник");
	СочетанияЗамены.Колонки.Добавить("Период");
	
	ОтборСтрок = Новый Структура("Сотрудник, Период");
	
	СоответствиеКоллекций = Новый Соответствие;
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеДокумента.ДанныеОНачислениях);
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОВремени, ДанныеДокумента.ДанныеОВремени);
	
	Для Каждого КлючИЗначение Из СоответствиеКоллекций Цикл
		КоллекцияУчета = КлючИЗначение.Ключ;
		КоллекцияДокумента = КлючИЗначение.Значение;
		СочетанияЗамены.Очистить();
		Для Каждого СтрокаДанных Из КоллекцияУчета Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
			НайденныеСочетания = СочетанияЗамены.НайтиСтроки(ОтборСтрок);
			Если НайденныеСочетания.Количество() > 0 Тогда
				// Такое сочетание уже есть, пропускаем.
				Продолжить;
			КонецЕсли;
			НайденныеСтроки = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Строк за этот месяц вовсе нет в документе, добавляем.
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			ЕстьСохраняемыеЗначения = Ложь;
			ПриоритетИзДокумента = 0;
			Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
				Если СохраняемыеЗначения.Найти(СтрокаДокумента.Источник) <> Неопределено Тогда
					// Источник относится к сохраняемым значениям, пропускаем.
					ЕстьСохраняемыеЗначения = Истина;
				КонецЕсли;
				Приоритет = ПриоритетИсточников[СтрокаДокумента.Источник];
				Если ПриоритетИзДокумента < Приоритет Тогда
					ПриоритетИзДокумента = Приоритет;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьСохраняемыеЗначения Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			// Сравниваем приоритет.
			ПриоритетИзУчета = ПриоритетИсточников[СтрокаДанных.Источник];
			Если ПриоритетИзУчета > ПриоритетИзДокумента Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем все строки, соответствующие отобранным сочетаниям Сотрудник + Период.
		Для Каждого Сочетание Из СочетанияЗамены Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
			// Переносим.
			// Удаляем существующие строки...
			СтрокиДокумента = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				КоллекцияДокумента.Удалить(СтрокаДокумента);
			КонецЦикла;
			// ..и добавляем из данных расчета.
			СтрокиУчета = КоллекцияУчета.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаУчета Из СтрокиУчета Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияДокумента.Добавить(), СтрокаУчета);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеДокумента.Свойство("ДанныеОбИндексации") Тогда
		// Заполняем таблицы документа с данными среднего заработка.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОбИндексации, ДанныеДокумента.ДанныеОбИндексации);
	КонецЕсли;
	
	Возврат ОбновляемыеСотрудники;
	
КонецФункции

// Выполняет упаковку данных общего среднего заработка формы документа для передачи в форму редактирования.
//
Процедура ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументу(ДанныеФормыОбъект, ПараметрыРедактирования) Экспорт
	
	// Переносим содержимое табличных частей в таблицы значений и помещаем последние во временное хранилище
	// - начисления.
	ДанныеНачислений = УчетСреднегоЗаработка.ПустаяТаблицаНачисленийСреднийЗаработокОбщий();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокОбщий, ДанныеНачислений);
	ПараметрыРедактирования.ДанныеОНачислениях = ПоместитьВоВременноеХранилище(ДанныеНачислений);
	
	// - отработанное время
	ОтработанноеВремя = УчетСреднегоЗаработка.ПустаяТаблицаОтработанноеВремяСреднийЗаработокОбщий();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ОтработанноеВремяДляСреднегоОбщий, ОтработанноеВремя);
	ПараметрыРедактирования.ДанныеОВремени = ПоместитьВоВременноеХранилище(ОтработанноеВремя);
	
	// - данные индексации
	ДанныеИндексации = УчетСреднегоЗаработка.ПустаяТаблицаДанныеИндексации();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ДанныеОбИндексации, ДанныеИндексации);
	ПараметрыРедактирования.ДанныеОбИндексации = ПоместитьВоВременноеХранилище(ДанныеИндексации);
	
КонецПроцедуры

// Добавляет команду печати "Расчет среднего заработка", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, МенеджерПечати, ФункциональныеОпции = "") Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
		КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ФункциональныеОпции = ФункциональныеОпции;
		
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет команду печати "Расчет среднего заработка", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоЗаработка0504425(КомандыПечати, МенеджерПечати, ФункциональныеОпции = "") Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) 
		И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработкаФорма0504425с2015";
		КомандаПечати.Представление = НСтр("ru = 'Записка-расчет (0504425) с 2015 года'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ФункциональныеОпции = ФункциональныеОпции;
		КомандаПечати.Порядок = 40;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработкаФорма0504425";
		КомандаПечати.Представление = НСтр("ru = 'Записка-расчет (0504425)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ФункциональныеОпции = ФункциональныеОпции;
		КомандаПечати.Порядок = 50;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команду печати "Расчет среднего заработка (для выходного пособия)", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоЗаработкаВыходногоПособия(КомандыПечати, МенеджерПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработкаВыходногоПособия";
		КомандаПечати.Представление = НСтр("ru = 'Расчет среднего заработка (для выходного пособия)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

#Область ИнформацияОЗаполненностиДанныхСреднегоЗаработка

// Функция формирует структуру информационных сведений о заполненности данных 
//  для расчета общего среднего заработка сотрудника.
//
// Параметры:
//	Ссылка				- ДокументСсылка на документ а котором рассчитывается средний заработок
//	ЗаполнениеВыполнено	- Булево, Истина, если в документе произведено заполнение расчета среднего заработка
// 	Сотрудник
//	НачалоРасчета - дата начала периода расчета среднего заработка.
//	ОкончаниеРасчета - дата окончания периода расчета среднего заработка.
//	ДанныеНачислений - данные формы табличной части начислений общего среднего заработка.
//	ДанныеОВремени - данные формы табличной части времени общего среднего заработка.
//	УчитыватьДанныеОВремени - булево, необходимость проверки заполненности данных о времени.
//
Функция ИнформацияОЗаполненностиДанныхСреднегоЗаработка(Ссылка, ЗаполнениеВыполнено, Сотрудник, ДатаНачалаСобытия, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДанныеНачислений, ДанныеОВремени, УчитыватьДанныеОВремени = Истина) Экспорт
	
	Если ТребуетсяПерезаполнитьСведенияОСреднемЗаработке(Ссылка, ЗаполнениеВыполнено) Тогда
		
		СтруктураИнфонадписи = ИнфонадписьТребуетсяПерезаполнитьСведенияОСреднемЗаработке();
		
	ИначеЕсли ТребуетсяДозаполнитьСведенияОСреднемЗаработке(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаНачалаСобытия, ДанныеНачислений, ДанныеОВремени, УчитыватьДанныеОВремени) Тогда
		
		СтруктураИнфонадписи = ИнфонадписьТребуетсяДозаполнитьСведенияОСреднемЗаработке();
		
	Иначе 
		
		СтруктураИнфонадписи = ИнфонадписьИспользованныеДанныеОСреднемЗаработке(НачалоПериодаРасчета, ОкончаниеПериодаРасчета);
		
	КонецЕсли;
	
	Возврат СтруктураИнфонадписи;
	
КонецФункции

// Функция проверяет есть ли в указанном периоде месяцы данные по которым не заполнены.
//
// Параметры:
//	НачалоРасчета - дата начала периода расчета среднего заработка.
//	ОкончаниеРасчета - дата окончания периода расчета среднего заработка.
//	ДанныеНачислений - данные формы табличной части начислений общего среднего заработка.
//	ДанныеОВремени - данные формы табличной части времени общего среднего заработка.
//	УчитыватьДанныеОВремени - булево, необходимость проверки заполненности данных о времени.
//
Функция ЕстьНеЗаполненныеПериодыРасчетаСреднегоЗаработка(НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДанныеНачислений, ДанныеОВремени, УчитыватьДанныеОВремени, МесяцыКорректировкиСреднегоЗаработка)
	
	ЕстьНеЗаполненныеДанные = Ложь;
	
	Если ДанныеНачислений.Количество() = 0 
		Или ДанныеОВремени.Количество() = 0 Тогда
		Если МесяцыКорректировкиСреднегоЗаработка.Количество() > 0 Тогда
			ЕстьНеЗаполненныеДанные = Истина;
		КонецЕсли;
	Иначе
		// Необходимо проверить на все ли месяцы интервала 
		// заполнены данные о начислениях и отработанном времени.
		// Проверяем по таблице начислений.
		ПериодыНезаполненныхДанных = ПериодыНезаполненногоСреднегоЗаработка(НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДанныеНачислений);
		Для Каждого Месяц Из ПериодыНезаполненныхДанных Цикл
			Если МесяцыКорректировкиСреднегоЗаработка.Найти(Месяц) <> Неопределено Тогда
				ЕстьНеЗаполненныеДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Проверяем по таблице времени.
		Если УчитыватьДанныеОВремени И Не ЕстьНеЗаполненныеДанные Тогда
			ПериодыНезаполненныхДанных = ПериодыНезаполненногоСреднегоЗаработка(НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДанныеОВремени);
			Для Каждого Месяц Из ПериодыНезаполненныхДанных Цикл
				Если МесяцыКорректировкиСреднегоЗаработка.Найти(Месяц) <> Неопределено Тогда
					ЕстьНеЗаполненныеДанные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьНеЗаполненныеДанные;
	
КонецФункции

// Функция возвращает структуру для заполнения инфонадписи о заполненности данных для расчета
// среднего заработка сотрудника.
//
Функция ИнфонадписьТребуетсяПерезаполнитьСведенияОСреднемЗаработке() Экспорт
	
	ТекстСообщения = НСтр("ru='Требуется перезаполнить сведения
		|о среднем заработке.'");
	
	ЧастиСообщения = Новый Массив;
	ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(ТекстСообщения, , ЦветаСтиля.ПоясняющийОшибкуТекст));
	ЧастиСообщения.Добавить(" ");
	ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'") + "...", , , , "Подробнее"));
		
	Картинка = БиблиотекаКартинок.Предупреждение;
	
	Возврат ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(Новый ФорматированнаяСтрока(ЧастиСообщения), Картинка);
	
КонецФункции

// Функция возвращает структуру для заполнения инфонадписи о заполненности данных для расчета
// среднего заработка сотрудника.
//
Функция ИнфонадписьТребуетсяДозаполнитьСведенияОСреднемЗаработке() Экспорт
	
	ТекстСообщения = Новый ФорматированнаяСтрока(НСтр("ru = 'Данные о заработке неполные.
		|Для ввода недостающих данных используйте команду «Изменить»'"));
	
	Картинка = БиблиотекаКартинок.Предупреждение;
	
	Возврат ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(ТекстСообщения, Картинка);
	
КонецФункции

// Функция возвращает структуру для заполнения инфонадписи о заполненности данных для расчета
// среднего заработка сотрудника.
//
// Параметры:
//	НачалоРасчета - дата начала периода расчета среднего заработка.
//	ОкончаниеРасчета - дата окончания периода расчета среднего заработка.
//
Функция ИнфонадписьИспользованныеДанныеОСреднемЗаработке(НачалоПериодаРасчета, ОкончаниеПериодаРасчета) Экспорт 
	
	Если НачалоМесяца(НачалоПериодаРасчета) = НачалоМесяца(ОкончаниеПериодаРасчета) Тогда
		// За один месяц
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Использованы данные о заработке за %1'"), 
		Формат(НачалоПериодаРасчета, "ДФ='ММММ гггг'"));
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Использованы данные о заработке за период %1 - %2'"), 
		Формат(НачалоПериодаРасчета, "ДФ='ММММ гггг'"), 
		Формат(ОкончаниеПериодаРасчета, "ДФ='ММММ гггг'"));
	КонецЕсли;
	
	Картинка = БиблиотекаКартинок.Информация;
	
	Возврат ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(ТекстСообщения, Картинка);
	
КонецФункции

// Инкапсулирует текст и картинку инфонадписи в структуру.
//
// Параметры:
//	Текст - текст сообщения инфонадписи.
//	Картинка - картинка для инфонадписи.
//
Функция ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(Текст, Картинка) Экспорт
	
	СтруктураИнфонадписи = Новый Структура;
	СтруктураИнфонадписи.Вставить("Текст", 	Новый ФорматированнаяСтрока(Текст));
	СтруктураИнфонадписи.Вставить("Картинка", Картинка);
	
	Возврат СтруктураИнфонадписи;

КонецФункции

Функция ТребуетсяПерезаполнитьСведенияОСреднемЗаработке(СсылкаНаДокумент, ЗаполнениеВыполнено) Экспорт
	
	ТребуетсяПерезаполнитьСведенияОСреднемЗаработке = Не ЗаполнениеВыполнено И ЗначениеЗаполнено(СсылкаНаДокумент);
	
	Если ТребуетсяПерезаполнитьСведенияОСреднемЗаработке Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);	
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПерерасчетСреднегоЗаработка.ДокументСреднегоЗаработка
			|ИЗ
			|	РегистрСведений.ПерерасчетСреднегоЗаработка КАК ПерерасчетСреднегоЗаработка
			|ГДЕ
			|	ПерерасчетСреднегоЗаработка.ДокументСреднегоЗаработка = &СсылкаНаДокумент";
			
		ТребуетсяПерезаполнитьСведенияОСреднемЗаработке = Не Запрос.Выполнить().Пустой(); 
		
	КонецЕсли;
	
	Возврат ТребуетсяПерезаполнитьСведенияОСреднемЗаработке;
	
КонецФункции

Функция ТребуетсяДозаполнитьСведенияОСреднемЗаработке(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаНачалаСобытия, ДанныеНачислений, ДанныеОВремени, УчитыватьДанныеОВремени) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ДатаПриема");
	Если КадровыеДанные.Количество() > 0 Тогда
		ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
	Иначе
		ДатаПриемаНаРаботу = '00010101';
	КонецЕсли;	
	
	МесяцыКорректировкиСреднегоЗаработка = МесяцыКорректировкиСреднегоЗаработка(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаПриемаНаРаботу, ДатаНачалаСобытия);
	
	ЕстьНеЗаполненныеДанные = ЕстьНеЗаполненныеПериодыРасчетаСреднегоЗаработка(НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДанныеНачислений, ДанныеОВремени, УчитыватьДанныеОВремени, МесяцыКорректировкиСреднегоЗаработка);
	
	Возврат ЕстьНеЗаполненныеДанные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегистрацияРучныхКорректировок

Функция КорректировкиОбщегоСреднегоЗаработкаДокумента(ДокументСсылка) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПорядокРасчета,
		|	Начисления.СоставнаяЧасть,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.Период,
		|	Начисления.Индексируется,
		|	Начисления.Сумма,
		|	Начисления.Год,
		|	Начисления.ДатаНачалаБазовогоПериода,
		|	Начисления.КоличествоМесяцев,
		|	Начисления.Ссылка.Организация КАК Организация,
		|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	#ТабличнаяЧастьНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &ДокументСсылка
		|	И Начисления.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Время.Сотрудник,
		|	Время.ПорядокРасчета,
		|	Время.Период,
		|	Время.ОтработаноДней,
		|	Время.ОтработаноДнейПятидневка,
		|	Время.ОтработаноЧасовПятидневка,
		|	Время.ОтработаноЧасов,
		|	Время.ОтработаноДнейШестидневка,
		|	Время.ОтработаноДнейКалендарных,
		|	Время.НормаДнейПроизводственныйКалендарь,
		|	Время.НормаЧасовПроизводственныйКалендарь
		|ИЗ
		|	#ТабличнаяЧастьВремя КАК Время
		|ГДЕ
		|	Время.Ссылка = &ДокументСсылка
		|	И Время.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)";

	ИмяТаблицыДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТабличнаяЧастьНачисления", ИмяТаблицыДокумента + ".СреднийЗаработокОбщий");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТабличнаяЧастьВремя", ИмяТаблицыДокумента + ".ОтработанноеВремяДляСреднегоОбщий");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Корректировки = Новый Структура("КорректировкиНачислений, КорректировкиВремени");
	Корректировки.КорректировкиНачислений = РезультатыЗапроса[0].Выгрузить();
	Корректировки.КорректировкиВремени = РезультатыЗапроса[1].Выгрузить();
	
	Возврат Корректировки;
	
КонецФункции

Функция ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка() Экспорт
	
	Параметры = Новый Структура(
		"Организация, 
		|ФизическоеЛицо, 
		|Сотрудник, 
		|ПорядокРасчета");
	Параметры.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
	
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет запись сведений об общем среднем заработке 
//  на основе данных, введенных пользователем.
//
// Параметры:
//	КорректировкиНачислений - таблица значений, структуры аналогичной набору записей 
//								регистра сведений СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.
//	КорректировкиВремени	- таблица значений, структуры аналогичной набору записей 
//								регистра сведений СведенияОВремениДляРасчетаСреднегоОбщий.
//
Процедура ЗаписатьКорректировкиОбщегоСреднегоЗаработка(Корректировки, НачалоПериода, ОкончаниеПериода, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка();
	КонецЕсли;
	
	КорректировкиНачислений = Корректировки.КорректировкиНачислений;
	КорректировкиВремени = Корректировки.КорректировкиВремени;
	
	// Корректировки начислений
	ПереименоватьКолонкуПериодВМесяц(КорректировкиНачислений);
	
	ИзмеренияНачислений = 
		"Сотрудник, 
		|Организация, 
		|ФизическоеЛицо, 
		|ПорядокРасчета, 
		|Месяц, 
		|СоставнаяЧасть, 
		|СтатьяФинансирования, 
		|СпособОтраженияЗарплатыВБухучете, 
		|СтатьяРасходов, 
		|ОблагаетсяЕНВД, 
		|Индексируется, 
		|Год, 
		|ДатаНачалаБазовогоПериода, 
		|КоличествоМесяцев";
	КорректировкиНачислений.Свернуть(ИзмеренияНачислений, "Сумма");
	
	ЗначенияПоУмолчанию = Новый Структура(
		"Организация, 
		|ФизическоеЛицо, 
		|Сотрудник, 
		|ПорядокРасчета");
	ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, ДополнительныеПараметры);
	
	ЗаписатьТаблицуЗначенийВРегистрСведений(
		КорректировкиНачислений, 
		РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей(), 
		"Сотрудник, ПорядокРасчета, Месяц",
		НачалоПериода, 
		ОкончаниеПериода, 
		Истина,
		ЗначенияПоУмолчанию);
		
	// Корректировки времени
	ПереименоватьКолонкуПериодВМесяц(КорректировкиВремени);
	
	ИзмеренияВремени = "Сотрудник, ПорядокРасчета, Месяц";
	КорректировкиВремени.Свернуть(ИзмеренияВремени, "ОтработаноДней, ОтработаноЧасов, ОтработаноДнейПятидневка, ОтработаноЧасовПятидневка, ОтработаноДнейШестидневка, ОтработаноДнейКалендарных");
	
	ЗаписатьТаблицуЗначенийВРегистрСведений(
		КорректировкиВремени, 
		РегистрыСведений.СведенияОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей(), 
		ИзмеренияВремени,
		НачалоПериода, 
		ОкончаниеПериода,
		Истина, 
		ЗначенияПоУмолчанию);
		
	Если РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПереноситьДанныеВДругойУчетСреднегоЗаработка Тогда
		УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиКорректировкиВСреднийЗаработокФСС(КорректировкиНачислений, КорректировкиВремени, НачалоПериода, ОкончаниеПериода);
	КонецЕсли;
		
КонецПроцедуры	

Процедура ПеренестиКорректировкиВСреднийЗаработокОбщий(КорректировкиНачислений, КорректировкиВремени, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	КорректировкиОбщегоЗаработка = СведенияОбщегоСреднегоЗаработкаПоКорректировкамФСС(Организация, КорректировкиНачислений, КорректировкиВремени);
	Если КорректировкиОбщегоЗаработка.Свойство("КорректировкиНачислений") Тогда
		ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиОбщегоЗаработка["КорректировкиНачислений"],
			РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей(), 
			"Сотрудник, ПорядокРасчета, Месяц",
			НачалоПериода, 
			ОкончаниеПериода, 
			Ложь);
	КонецЕсли;
	
	Если КорректировкиОбщегоЗаработка.Свойство("КорректировкиВремени") Тогда
		ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиОбщегоЗаработка["КорректировкиВремени"], 
			РегистрыСведений.СведенияОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей(), 
			"Сотрудник, ПорядокРасчета, Месяц",
			НачалоПериода, 
			ОкончаниеПериода,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыТаблицДанныхСреднегоЗаработка

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокОбщий
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокОбщий() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ТаблицаДанных.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Индексируется", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 0));
	ТаблицаДанных.Колонки.Добавить("ДатаНачалаБазовогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("КоличествоМесяцев", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(3, 0));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокОбщий
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаГодовыхПремий() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ТаблицаДанных.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 0));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Индексируется", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоОбщий
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокОбщий() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДней", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("ОтработаноЧасов", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейПятидневка", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("ОтработаноЧасовПятидневка", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейШестидневка", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("НормаДнейПроизводственныйКалендарь", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("НормаЧасовПроизводственныйКалендарь", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ДанныеОбИндексации
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаДанныеИндексации() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("КоэффициентИндексации", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 2));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПустаяТаблицаИсходныхДанныхРасчетаОбщегоСреднегоЗаработка() Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачалаСобытия", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("НачалоПериодаРасчетаСреднего", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ОкончаниеПериодаРасчетаСреднего", Новый ОписаниеТипов("Дата"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПустаяТаблицаДляРегистрацииДанныхСреднегоЗаработка() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.БольничныйЛист"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ДоходВНатуральнойФорме"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.Командировка"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.МатериальнаяПомощь"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОплатаДнейУходаЗаДетьмиИнвалидами"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.Отгул"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтгулСписком"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.Отпуск"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтпускБезСохраненияОплаты"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтпускБезСохраненияОплатыСписком"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПереносДанных"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.Премия"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПрогулНеявка"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПростойСотрудников"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РазовоеНачисление"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.СторнированиеНачислений"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.Увольнение"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.УвольнениеСписком"));
	
	ТаблицаДанных.Колонки.Добавить("ДокументСсылка", Новый ОписаниеТипов(ТипыРегистраторов));
	
	ТаблицаДанных.Колонки.Добавить("ДатаДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаДанных.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьПричиныПерерасчетов(СсылкаНаДокумент, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получение признака о том, что нужно удалить перерасчеты текущего периода
	УдалитьПерерасчетыСреднегоЗаработка = Неопределено;
	ДополнительныеПараметры.Свойство("УдалитьПерерасчетыСреднегоЗаработка", УдалитьПерерасчетыСреднегоЗаработка);
	Если УдалитьПерерасчетыСреднегоЗаработка <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Неопределено;
	ДополнительныеПараметры.Свойство("СотрудникиПерерасчетаЗаработка", Сотрудники);
	
	НаборЗаписей = РегистрыСведений.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСреднегоЗаработка.Установить(СсылкаНаДокумент);
	
	Если Сотрудники <> Неопределено Тогда
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			СписокСотрудников = Сотрудники;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПерерасчетСреднегоЗаработка.Организация,
			|	ПерерасчетСреднегоЗаработка.Сотрудник,
			|	ПерерасчетСреднегоЗаработка.ДокументСреднегоЗаработка,
			|	ПерерасчетСреднегоЗаработка.ДокументОснование
			|ИЗ
			|	РегистрСведений.ПерерасчетСреднегоЗаработка КАК ПерерасчетСреднегоЗаработка
			|ГДЕ
			|	НЕ ПерерасчетСреднегоЗаработка.Сотрудник В (&СписокСотрудников)
			|	И ПерерасчетСреднегоЗаработка.ДокументСреднегоЗаработка = &СсылкаНаДокумент";
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция РегистрыСреднегоЗаработка() Экспорт
	
	МассивРегистров = Новый Массив;
	
	УчетПособийСоциальногоСтрахованияРасширенный.РегистрыУчетаПособийСоциальногоСтрахованияРасширенная(МассивРегистров);
	
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий);
			
	Возврат МассивРегистров;

КонецФункции

#Область РегистрацияДанныхДляРасчетаСреднегоЗаработка

// Процедура выполняет регистрацию данных о начисленных суммах и отработанном времени
//  для использования при расчете общего среднего заработка.
//
//	Параметры: см. комментарий к методу ЗарегистрироватьДанныеСреднегоЗаработка.
//
Процедура ЗарегистрироватьДанныеОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ЗаписыватьДвижения = Ложь)
	
	// Время нахождения работника в служебной командировке, 
	// а также начисленные за это время суммы исключаются при исчислении среднего заработка.
	// - определяем начисления, которые зависят от расчета времени и при этом не вытесняются командировкой,
	// - определяем фактический период действия командировок этих сотрудников в выбранных периодах действия, 
	// - при регистрации начислений:
	//	* получаем расчетную базу таких начислений за периоды командировок, 
	//	* вычитаем расчетную базу из регистрируемых начислений,
	// - при регистрации времени:
	//	* получаем данные времени выбранных начислений за фактический период действия командировок,
	//	* вычитаем количество дней и часов из регистрируемого отработанного времени.
	// Если нет таких начислений или не случилось командировок, ничего не делаем, добавляем пустышку в запрос.
	
	ИсключатьВПериодКомандировок = Истина;
	СоздатьВТДляИсключенияКомандировок(МенеджерВременныхТаблиц, ИсключатьВПериодКомандировок);
	
	ЗарегистрироватьНачисленияДляРасчетаОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ИсключатьВПериодКомандировок, ЗаписыватьДвижения);
	
	ЗарегистрироватьДанныеВремениДляРасчетаОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ИсключатьВПериодКомандировок, ЗаписыватьДвижения);
	
КонецПроцедуры

Процедура ИсключитьНачисленияВПериодКомандировок(МенеджерВременныхТаблиц, Регистратор, ИсключатьВПериодКомандировок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	// Определяем суммы начислений, попадающих в период командировки.
	Если Не ИсключатьВПериодКомандировок Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем максимальный период действия для ограничения базовых записей.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТПериодыДействияНачислений
		|ИЗ
		|	ВТНачисления КАК Начисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДействияНачислений.МесяцНачисления
		|ИЗ
		|	ВТНачисления КАК ПериодыДействияНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Начисления.ПериодДействия) КАК МаксимальныйПериодДействия
		|ИЗ
		|	ВТПериодыДействияНачислений КАК Начисления";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("МаксимальныйПериодДействия", Выборка.МаксимальныйПериодДействия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&МаксимальныйПериодДействия КАК ПериодРегистрации,
		|	ПериодыКомандировок.Регистратор,
		|	ПериодыКомандировок.НомерСтроки,
		|	ПериодыКомандировок.Сотрудник,
		|	ПериодыКомандировок.ВидРасчета,
		|	ПериодыКомандировок.Начало КАК БазовыйПериодНачало,
		|	ПериодыКомандировок.Окончание КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТПериодыКомандировок КАК ПериодыКомандировок";
	Запрос.Выполнить();
	
	// Готовим запрос к расчетной базе начислений.
	ИменаИзмерений = РасчетЗарплатыРасширенный.ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(РасчетЗарплатыРасширенный.ЭлементОтбораБазовыхЗаписей("Регистратор", Регистратор));
	
	РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, "ВТИсключаемыеВПериодКомандировки", ОтборБазовыхЗаписей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсключаемыеСуммы.ИдентификаторСтрокиРазрез КАК ИдентификаторСтроки,
		|	СУММА(ИсключаемыеСуммы.РезультатБаза) КАК Сумма
		|ПОМЕСТИТЬ ВТИсключаемыеВПериодКомандировкиСуммы
		|ИЗ
		|	ВТРасчетнаяБаза КАК ИсключаемыеСуммы
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсключаемыеСуммы.ИдентификаторСтрокиРазрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРасчетнаяБаза";
	Запрос.Выполнить();
	
	// Регистрация сумм начислений для общего среднего заработка.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТНачисленияПринимаемые
		|ИЗ
		|	ВТНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПринимаемые КАК Начисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-ИсключаемыеСуммы.Сумма,
		|	Начисления.*
		|ИЗ
		|	ВТНачисленияПринимаемые КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсключаемыеВПериодКомандировкиСуммы КАК ИсключаемыеСуммы
		|		ПО (ИсключаемыеСуммы.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияДляРасчетаОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ИсключатьВПериодКомандировок, ЗаписыватьДвижения = Ложь)
		
	Регистратор = Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Отбор.Регистратор.Значение;
	
	ИсключитьНачисленияВПериодКомандировок(МенеджерВременныхТаблиц, Регистратор, ИсключатьВПериодКомандировок);	
	
	СоздатьВТПорядокРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КОНЕЦПЕРИОДА(Начисления.МесяцНачисления, МЕСЯЦ) КАК Период,
	               |	Начисления.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСписокСотрудников
	               |ИЗ
	               |	ВТНачисления КАК Начисления";
				   
	Запрос.Выполнить();			   
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаПриема");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ДатаДействия КАК ДатаДействия,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.МесяцНачисления КАК МесяцНачисления,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Организация КАК Организация,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	Начисления.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	Начисления.ДокументСсылка КАК ДокументСсылка,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.Сторно КАК Сторно,
		|	ПорядокРасчетаДляУчетаНачислений.ПорядокРасчета КАК ПорядокРасчета,
		|	НастройкиНачисления.Значение КАК СоставнаяЧасть,
		|	НастройкиНачисления.Индексируется КАК Индексируется,
		|	ЕСТЬNULL(КадровыеДанные.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТНачисленияОбщегоСреднегоЗаработка
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокРасчетаОбщегоСреднегоЗаработка КАК ПорядокРасчетаДляУчетаНачислений
		|		ПО (ПорядокРасчетаДляУчетаНачислений.ДатаДействия = Начисления.ДатаДействия)
		|			И (ПорядокРасчетаДляУчетаНачислений.Начисление = Начисления.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиНачисления
		|		ПО (НастройкиНачисления.Ссылка = Начисления.Начисление)
		|			И (НастройкиНачисления.ПорядокРасчета = ПорядокРасчетаДляУчетаНачислений.ПорядокРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|		ПО Начисления.Сотрудник = КадровыеДанные.Сотрудник
		|			И (КОНЕЦПЕРИОДА(Начисления.МесяцНачисления, МЕСЯЦ) = КадровыеДанные.Период)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.ДокументСсылка КАК ДокументСсылка,
		|	Начисления.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА Начисления.ПериодДействия
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Начисления.ДатаДействия, МЕСЯЦ)
		|	КОНЕЦ КАК Период,
		|	Начисления.ДатаДействия КАК ДатаДействия,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СоставнаяЧасть КАК СоставнаяЧасть,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Индексируется КАК Индексируется,
		|	ВЫБОР
		|		КОГДА Начисления.СоставнаяЧасть В (&ГодовыеПремии)
		|			ТОГДА ГОД(Начисления.НачалоБазовогоПериода)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Год,
		|	ВЫБОР
		|		КОГДА Начисления.СоставнаяЧасть В (&Премии)
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.СоставнаяЧасть В (&ГодовыеПремии)
		|						ТОГДА 12
		|					КОГДА Начисления.ДатаПриема > Начисления.НачалоБазовогоПериода
		|						ТОГДА ВЫБОР
		|								КОГДА НАЧАЛОПЕРИОДА(Начисления.ОкончаниеБазовогоПериода, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(Начисления.ДатаПриема, МЕСЯЦ)
		|									ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Начисления.ДатаПриема, МЕСЯЦ), НАЧАЛОПЕРИОДА(Начисления.ОкончаниеБазовогоПериода, МЕСЯЦ), МЕСЯЦ) + 1
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					ИНАЧЕ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Начисления.НачалоБазовогоПериода, МЕСЯЦ), НАЧАЛОПЕРИОДА(Начисления.ОкончаниеБазовогоПериода, МЕСЯЦ), МЕСЯЦ) + 1
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоМесяцев,
		|	ВЫБОР
		|		КОГДА Начисления.СоставнаяЧасть В (&Премии)
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ДатаПриема > Начисления.НачалоБазовогоПериода
		|						ТОГДА Начисления.ДатаПриема
		|					ИНАЧЕ Начисления.НачалоБазовогоПериода
		|				КОНЕЦ
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаНачалаБазовогоПериода,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.МесяцНачисления КАК МесяцНачисления,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	Начисления.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	Начисления.Сторно КАК Сторно,
		|	Начисления.ДатаПриема КАК ДатаПриема
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияОбщегоСреднегоЗаработка КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)";
		
	Запрос.УстановитьПараметр("Премии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии());
	Запрос.УстановитьПараметр("ГодовыеПремии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии());
	Запрос.Выполнить();
	
	РаспределитьВТНачисленияПоБазе(МенеджерВременныхТаблиц, Регистратор, ИсключатьВПериодКомандировок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Сотрудники.ГоловнойСотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СоставнаяЧасть КАК СоставнаяЧасть,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Индексируется КАК Индексируется,
		|	Начисления.Год КАК Год,
		|	Начисления.КоличествоМесяцев КАК КоличествоМесяцев,
		|	Начисления.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.СоставнаяЧасть,
		|	Сотрудники.ГоловнойСотрудник,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.ПорядокРасчета,
		|	Начисления.Период,
		|	Начисления.Индексируется,
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Организация,
		|	Начисления.ДатаНачалаБазовогоПериода,
		|	Начисления.Год,
		|	Начисления.КоличествоМесяцев
		|
		|ИМЕЮЩИЕ
		|	СУММА(Начисления.Сумма) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Записывать = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Добавить(), Выборка);
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Записать();
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеВремениДляРасчетаОбщегоСреднегоЗаработка(Движения, Отказ, МенеджерВременныхТаблиц, ИсключатьВПериодКомандировок, ЗаписыватьДвижения = Ложь)
	
	// Вызов общий, и при этом отработанное время регистрируется не всеми документами,
	// поэтому делаем проверку.
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		// для типа Структура
		Если Не Движения.Свойство("ДанныеОВремениДляРасчетаСреднегоОбщий") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// для типа КоллекцияДвижений
		Если Движения.Найти("ДанныеОВремениДляРасчетаСреднегоОбщий") = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// При этом время необходимо писать только по основному сотруднику, по подработкам не писать, 
	// т.к. считается, что он подработки выполняет в течение времени основной работы.
	
	СоздатьВТВидыНачисленийДляРегистрацииОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.Регистратор,
		|	ФПД.Сотрудник,
		|	ФПД.Сторно,
		|	ФПД.ВидРасчета,
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия КАК Месяц,
		|	ФПД.ПериодДействияНачало КАК НачалоПериода,
		|	ФПД.ПериодДействияКонец КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &Регистратор
		|				И Сотрудник.ГоловнойСотрудник = Сотрудник
		|				И ВидРасчета В
		|					(ВЫБРАТЬ
		|						ВТВидыНачислений.Ссылка
		|					ИЗ
		|						ВТВидыНачислений)) КАК ФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.Регистратор,
		|	ФПД.Сотрудник,
		|	ФПД.Сторно,
		|	ФПД.ГрафикРаботы,
		|	ФПД.Месяц,
		|	ФПД.НачалоПериода,
		|	ФПД.ОкончаниеПериода,
		|	ВидыНачислений.Прогул,
		|	ВидыНачислений.Отгул,
		|	ВидыНачислений.ЗачетНормыВремени,
		|	ВидыНачислений.ЗачетОтработанногоВремени,
		|	ВидыНачислений.ЕжегодныйОтпуск
		|ПОМЕСТИТЬ ВТФПДСотрудников
		|ИЗ
		|	ВТФактическийПериодДействия КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
		|		ПО (ВидыНачислений.Ссылка = ФПД.ВидРасчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыГрафиков.ГрафикРаботы,
		|	ПериодыГрафиков.НачалоПериода,
		|	ПериодыГрафиков.ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыГрафиков
		|ИЗ
		|	ВТФПДСотрудников КАК ПериодыГрафиков
		|ГДЕ
		|	ПериодыГрафиков.ЗачетНормыВремени";
	
	Запрос.УстановитьПараметр("Регистратор", Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Отбор.Регистратор.Значение);
	Запрос.Выполнить();
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	
	Если Не ИсключатьВПериодКомандировок Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Месяц,
			|	0 КАК Дней,
			|	0 КАК Часов
			|ПОМЕСТИТЬ ВТИсключаемоеВремя";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СвязьСГрафиком.ГрафикРаботы,
			|	СвязьСГрафиком.ПериодРегистрацииВремени,
			|	СвязьСГрафиком.ИдентификаторСтроки,
			|	СвязьСГрафиком.Сторно,
			|	СвязьСГрафиком.Регистратор
			|ПОМЕСТИТЬ ВТСвязьСГрафиком
			|ИЗ
			|	РегистрРасчета.Начисления КАК СвязьСГрафиком
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсключаемыеВПериодКомандировки КАК ИсключаемыеНачисления
			|		ПО (ИсключаемыеНачисления.ВидРасчета = СвязьСГрафиком.ВидРасчета)
			|			И (СвязьСГрафиком.Регистратор = &Регистратор)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПериодыКомандировок.Сотрудник,
			|	НАЧАЛОПЕРИОДА(ПериодыКомандировок.Начало, МЕСЯЦ) КАК Месяц,
			|	ПериодыКомандировок.Начало КАК Начало,
			|	ПериодыКомандировок.Окончание КАК Окончание,
			|	ПериодыКомандировок.ВидРасчета КАК ВидКомандировки,
			|	ИсключаемыеНачисления.ВидРасчета КАК Начисление,
			|	СвязьСГрафиком.ГрафикРаботы,
			|	СвязьСГрафиком.ПериодРегистрацииВремени,
			|	СвязьСГрафиком.Сторно,
			|	ВидыВремени.ВидВремени,
			|	ВЫБОР
			|		КОГДА ВидыВремени.Ссылка.ТребуетсяРасчетСверхурочных = ИСТИНА
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ИсключатьДни
			|ПОМЕСТИТЬ ВТИсключаемыеПериоды
			|ИЗ
			|	ВТПериодыКомандировок КАК ПериодыКомандировок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсключаемыеВПериодКомандировки КАК ИсключаемыеНачисления
			|		ПО (ИсключаемыеНачисления.Ссылка = ПериодыКомандировок.ВидРасчета)
			|			И (ИсключаемыеНачисления.ИсключатьВремя = ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
			|		ПО (Начисления.Начисление = ИсключаемыеНачисления.ВидРасчета)
			|			И (Начисления.Сотрудник = ПериодыКомандировок.Сотрудник)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязьСГрафиком КАК СвязьСГрафиком
			|		ПО (СвязьСГрафиком.Регистратор = Начисления.ДокументСсылка)
			|			И (СвязьСГрафиком.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
			|		ПО (ВидыВремени.Ссылка = ИсключаемыеНачисления.ВидРасчета)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсключаемыеПериоды.Сотрудник,
			|	ИсключаемыеПериоды.Месяц,
			|	ИсключаемыеПериоды.Начисление,
			|	ИсключаемыеПериоды.ГрафикРаботы,
			|	ИсключаемыеПериоды.ПериодРегистрацииВремени,
			|	ИсключаемыеПериоды.ВидВремени,
			|	ИсключаемыеПериоды.ИсключатьДни,
			|	ИсключаемыеПериоды.Сторно,
			|	ДанныеГрафика.Дата
			|ПОМЕСТИТЬ ВТИсключаемыеДаты
			|ИЗ
			|	ВТИсключаемыеПериоды КАК ИсключаемыеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеГрафика
			|		ПО ИсключаемыеПериоды.ГрафикРаботы = ДанныеГрафика.ГрафикРаботы
			|			И (ДанныеГрафика.Месяц = ИсключаемыеПериоды.Месяц)
			|			И (ДанныеГрафика.Дата МЕЖДУ ИсключаемыеПериоды.Начало И ИсключаемыеПериоды.Окончание)
			|			И ИсключаемыеПериоды.ВидВремени = ДанныеГрафика.ВидУчетаВремени
			|			И ИсключаемыеПериоды.ПериодРегистрацииВремени = ДанныеГрафика.ПериодРегистрации
			|			И (ДанныеГрафика.ВремяВЧасах = ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсключаемыеДаты.Сотрудник,
			|	ИсключаемыеДаты.Месяц,
			|	СУММА(ВЫБОР
			|			КОГДА ИсключаемыеДаты.ИсключатьДни = ИСТИНА
			|				ТОГДА ВЫБОР
			|						КОГДА ИсключаемыеДаты.Сторно = ИСТИНА
			|							ТОГДА -ДанныеГрафика.ОсновноеЗначение
			|						ИНАЧЕ ДанныеГрафика.ОсновноеЗначение
			|					КОНЕЦ
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Дней,
			|	СУММА(ВЫБОР
			|			КОГДА ИсключаемыеДаты.Сторно = ИСТИНА
			|				ТОГДА -ДанныеГрафика.ДополнительноеЗначение
			|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначение
			|		КОНЕЦ) КАК Часов
			|ПОМЕСТИТЬ ВТИсключаемоеВремя
			|ИЗ
			|	ВТИсключаемыеДаты КАК ИсключаемыеДаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеГрафика
			|		ПО ИсключаемыеДаты.ГрафикРаботы = ДанныеГрафика.ГрафикРаботы
			|			И (ДанныеГрафика.Месяц = ИсключаемыеДаты.Месяц)
			|			И (ДанныеГрафика.Дата = ИсключаемыеДаты.Дата)
			|			И ИсключаемыеДаты.ВидВремени = ДанныеГрафика.ВидУчетаВремени
			|			И ИсключаемыеДаты.ПериодРегистрацииВремени = ДанныеГрафика.ПериодРегистрации
			|			И (ДанныеГрафика.ВремяВЧасах = ЛОЖЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсключаемыеДаты.Сотрудник,
			|	ИсключаемыеДаты.Месяц";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Месяц КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010) КАК ПорядокРасчета,
		|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ДанныеВремени.ДнейПоПятидневке) КАК ОтработаноДнейПятидневка,
		|	СУММА(ДанныеВремени.ЧасовПоПятидневке) КАК ОтработаноЧасовПятидневка,
		|	СУММА(ДанныеВремени.ДнейПоШестидневке) КАК ОтработаноДнейШестидневка,
		|	СУММА(ДанныеВремени.ДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ИЗ
		|	(ВЫБРАТЬ
		|		ФПД.Сотрудник КАК Сотрудник,
		|		ФПД.Месяц КАК Месяц,
		|		0 КАК ОтработаноДней,
		|		0 КАК ОтработаноЧасов,
		|		СУММА(ВЫБОР
		|				КОГДА ФПД.Прогул = ЛОЖЬ
		|					ТОГДА ВЫБОР
		|							КОГДА ФПД.Сторно = ИСТИНА
		|								ТОГДА -ДанныеКалендаряПоФПД.ДнейПоПятидневке
		|							ИНАЧЕ ДанныеКалендаряПоФПД.ДнейПоПятидневке
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейПоПятидневке,
		|		СУММА(ВЫБОР
		|				КОГДА ФПД.Прогул = ЛОЖЬ
		|					ТОГДА ВЫБОР
		|							КОГДА ФПД.Сторно = ИСТИНА
		|								ТОГДА -ДанныеКалендаряПоФПД.ЧасовПоПятидневке
		|							ИНАЧЕ ДанныеКалендаряПоФПД.ЧасовПоПятидневке
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ЧасовПоПятидневке,
		|		СУММА(ВЫБОР
		|				КОГДА ФПД.Сторно = ИСТИНА
		|					ТОГДА -ДанныеКалендаряПоФПД.ДнейПоШестидневке
		|				ИНАЧЕ ДанныеКалендаряПоФПД.ДнейПоШестидневке
		|			КОНЕЦ) КАК ДнейПоШестидневке,
		|		СУММА(ВЫБОР
		|				КОГДА ФПД.Сторно = ИСТИНА
		|					ТОГДА -ДанныеКалендаряПоФПД.ДнейКалендарных
		|				ИНАЧЕ ДанныеКалендаряПоФПД.ДнейКалендарных
		|			КОНЕЦ) КАК ДнейКалендарных
		|	ИЗ
		|		ВТФПДСотрудников КАК ФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаряПоФПД
		|			ПО (ДанныеКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|				И (ДанныеКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|				И (ДанныеКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|				И (ФПД.ЗачетНормыВремени)
		|				И (ФПД.ЗачетОтработанногоВремени
		|					ИЛИ ФПД.Отгул)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ФПД.Сотрудник,
		|		ФПД.Месяц
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ФПД.Сотрудник,
		|		ФПД.Месяц,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(ВЫБОР
		|				КОГДА ФПД.Сторно = ИСТИНА
		|					ТОГДА -ДанныеКалендаряПоФПД.Праздников
		|				ИНАЧЕ ДанныеКалендаряПоФПД.Праздников
		|			КОНЕЦ)
		|	ИЗ
		|		ВТФПДСотрудников КАК ФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаряПоФПД
		|			ПО (ДанныеКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|				И (ДанныеКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|				И (ДанныеКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|				И (ФПД.ЕжегодныйОтпуск)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ФПД.Сотрудник,
		|		ФПД.Месяц
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтработанноеВремя.Сотрудник,
		|		ОтработанноеВремя.ПериодДействия,
		|		СУММА(ОтработанноеВремя.ОтработаноДней),
		|		СУММА(ОтработанноеВремя.ОтработаноЧасов),
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
		|			ПО (ВидыНачислений.Ссылка = ОтработанноеВремя.Начисление)
		|				И (ОтработанноеВремя.Регистратор = &Регистратор)
		|				И (ОтработанноеВремя.Сотрудник = ОтработанноеВремя.Сотрудник.ГоловнойСотрудник)
		|				И (ВидыНачислений.ЗачетОтработанногоВремени
		|					ИЛИ ВидыНачислений.Прогул)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтработанноеВремя.Регистратор,
		|		ОтработанноеВремя.ПериодДействия,
		|		ОтработанноеВремя.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсключаемоеВремя.Сотрудник,
		|		ИсключаемоеВремя.Месяц,
		|		-ИсключаемоеВремя.Дней,
		|		-ИсключаемоеВремя.Часов,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		ВТИсключаемоеВремя КАК ИсключаемоеВремя) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Месяц";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Записывать = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Добавить(), Выборка);
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Записать();
		Движения.ДанныеОВремениДляРасчетаСреднегоОбщий.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет пересчет и регистрацию данных об отработанном времени для учета общего среднего заработка
// для указанных сотрудников в указанных месяцах.
//
// Параметры:
//	- МенеджерВременныхТаблиц - менеджер таблиц, в котором есть таблица ВТСотрудникиМесяцы с полями Сотрудник и Месяц.
//
Процедура ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	СоздатьВТВидыНачисленийДляРегистрацииОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиМесяцы.Сотрудник,
		|	СотрудникиМесяцы.Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцыБезНачислений
		|ИЗ
		|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Сотрудник = СотрудникиМесяцы.Сотрудник)
		|			И (Начисления.ПериодДействия = СотрудникиМесяцы.Месяц)
		|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
		|ГДЕ
		|	Начисления.ПериодДействия ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПД.Сотрудник,
		|	ВЫБОР
		|		КОГДА ФПД.Сторно
		|				ИЛИ ФПД.ФиксСторно
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Сторно,
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия КАК Месяц,
		|	ФПД.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ФПД.ПериодДействияНачало КАК НачалоПериода,
		|	ФПД.ПериодДействияКонец КАК ОкончаниеПериода,
		|	ВидыНачислений.Прогул,
		|	ВидыНачислений.Отгул,
		|	ВидыНачислений.ЗачетНормыВремени,
		|	ВидыНачислений.ЗачетОтработанногоВремени,
		|	ВидыНачислений.ЕжегодныйОтпуск
		|ПОМЕСТИТЬ ВТФПДСотрудников
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор <> &ИсключаемыйРегистратор
		|				И (Сотрудник, ПериодДействия) В
		|					(ВЫБРАТЬ
		|						СотрудникиМесяцы.Сотрудник,
		|						СотрудникиМесяцы.Месяц
		|					ИЗ
		|						ВТСотрудникиМесяцы КАК СотрудникиМесяцы)
		|				И ВидРасчета В
		|					(ВЫБРАТЬ
		|						ВТВидыНачислений.Ссылка
		|					ИЗ
		|						ВТВидыНачислений)) КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
		|		ПО (ВидыНачислений.Ссылка = ФПД.ВидРасчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыГрафиков.ГрафикРаботы,
		|	ПериодыГрафиков.НачалоПериода,
		|	ПериодыГрафиков.ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыГрафиков
		|ИЗ
		|	ВТФПДСотрудников КАК ПериодыГрафиков
		|ГДЕ
		|	ПериодыГрафиков.ЗачетНормыВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.Выполнить();
	
	УчетРабочегоВремениРасширенный.СоздатьВТДатыПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	
	// Данные по календарю (сколько всего должно быть зарегистрировано дней в учете среднего заработка) соотносим с тем, 
	// что уже накоплено в ДанныеОВремениДляРасчетаСреднегоОбщий.
	// Разницу записываем с минусом в ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка.
	// Корректировку отработанных дней получаем "как есть" из учета начисленной зарплаты.
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФПД.Сотрудник КАК Сотрудник,
		|	ФПД.Месяц КАК Месяц,
		|	ФПД.Сторно КАК Сторно,
		|	ДатыКалендаряПоФПД.Дата КАК Дата,
		|	ДатыКалендаряПоФПД.ДеньПоПятидневке КАК ДеньПоПятидневке,
		|	ДатыКалендаряПоФПД.ДеньПоШестидневке КАК ДеньПоШестидневке,
		|	ИСТИНА КАК ДеньКалендарный,
		|	ДатыКалендаряПоФПД.ЧасовПоПятидневке КАК ЧасовПоПятидневке
		|ПОМЕСТИТЬ ВТДатыПроизводственногоКалендаряПоСотрудникам
		|ИЗ
		|	ВТФПДСотрудников КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственногоКалендаряПоГрафикам КАК ДатыКалендаряПоФПД
		|		ПО (ДатыКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|			И (ДатыКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|			И (ДатыКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|			И (ФПД.ЗачетНормыВремени)
		|			И (ФПД.ЗачетОтработанногоВремени
		|				ИЛИ ФПД.Отгул)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФПД.Сотрудник,
		|	ФПД.Месяц,
		|	ФПД.Сторно,
		|	ДатыКалендаряПоФПД.Дата,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	0
		|ИЗ
		|	ВТФПДСотрудников КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственногоКалендаряПоГрафикам КАК ДатыКалендаряПоФПД
		|		ПО (ДатыКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|			И (ДатыКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|			И (ДатыКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|			И (ФПД.Прогул)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФПД.Сотрудник,
		|	ФПД.Месяц,
		|	ФПД.Сторно,
		|	ДатыКалендаряПоФПД.Дата,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	0
		|ИЗ
		|	ВТФПДСотрудников КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственногоКалендаряПоГрафикам КАК ДатыКалендаряПоФПД
		|		ПО (ДатыКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|			И (ДатыКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|			И (ДатыКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|			И (ФПД.ЕжегодныйОтпуск)
		|			И (ДатыКалендаряПоФПД.ДеньПраздничный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремяКорректировка.Сотрудник КАК Сотрудник,
		|	ОтработанноеВремяКорректировка.ПериодДействия КАК Месяц,
		|	СУММА(ОтработанноеВремяКорректировка.ОтработаноДней) КАК ОтработаноДнейКорректировка
		|ПОМЕСТИТЬ ВТОтработанноеВремяКорректировка
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяКорректировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ПО (СотрудникиМесяцы.Сотрудник = ОтработанноеВремяКорректировка.Сотрудник)
		|			И ОтработанноеВремяКорректировка.ПериодДействия = СотрудникиМесяцы.Месяц
		|			И (ОтработанноеВремяКорректировка.Регистратор <> &ИсключаемыйРегистратор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
		|		ПО (ВидыНачислений.Ссылка = ОтработанноеВремяКорректировка.Начисление)
		|			И (ВидыНачислений.ЗачетОтработанногоВремени)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремяКорректировка.ПериодДействия,
		|	ОтработанноеВремяКорректировка.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакопленныеДанныеВремени.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НакопленныеДанныеВремени.Период, МЕСЯЦ) КАК Месяц,
		|	СУММА(НакопленныеДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(НакопленныеДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
		|	СУММА(НакопленныеДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
		|	СУММА(НакопленныеДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
		|	СУММА(НакопленныеДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТНакопленныеДанные
		|ИЗ
		|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК НакопленныеДанныеВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ПО НакопленныеДанныеВремени.Сотрудник = СотрудникиМесяцы.Сотрудник
		|			И НакопленныеДанныеВремени.Период >= СотрудникиМесяцы.Месяц
		|			И (НакопленныеДанныеВремени.Период <= КОНЕЦПЕРИОДА(СотрудникиМесяцы.Месяц, МЕСЯЦ))
		|			И (НакопленныеДанныеВремени.Регистратор <> &ИсключаемыйРегистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеДанныеВремени.Сотрудник,
		|	НАЧАЛОПЕРИОДА(НакопленныеДанныеВремени.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.Сотрудник КАК Сотрудник,
		|	ФПД.Месяц КАК Месяц,
		|	ДатыКалендаряПоФПД.Дата КАК Дата,
		|	ДатыКалендаряПоФПД.ЧасовПоПятидневке КАК ЧасовПоПятидневке
		|ПОМЕСТИТЬ ВТЧасовПоДатам
		|ИЗ
		|	ВТФПДСотрудников КАК ФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственногоКалендаряПоГрафикам КАК ДатыКалендаряПоФПД
		|		ПО (ДатыКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
		|			И (ДатыКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
		|			И (ДатыКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазличныеДатыПоСотрудникам.Сотрудник КАК Сотрудник,
		|	РазличныеДатыПоСотрудникам.Месяц КАК Месяц,
		|	РазличныеДатыПоСотрудникам.Дата КАК Дата,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ДеньПоПятидневке
		|				ТОГДА ВЫБОР
		|						КОГДА РазличныеДатыПоСотрудникам.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноНаДатуДнейПятидневка,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ДеньПоШестидневке
		|				ТОГДА ВЫБОР
		|						КОГДА РазличныеДатыПоСотрудникам.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноНаДатуДнейШестидневка,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ДеньКалендарный
		|				ТОГДА ВЫБОР
		|						КОГДА РазличныеДатыПоСотрудникам.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноНаДатуДнейКалендарных
		|ПОМЕСТИТЬ ВТОтработаноДнейПоДатам
		|ИЗ
		|	ВТДатыПроизводственногоКалендаряПоСотрудникам КАК РазличныеДатыПоСотрудникам
		|
		|СГРУППИРОВАТЬ ПО
		|	РазличныеДатыПоСотрудникам.Сотрудник,
		|	РазличныеДатыПоСотрудникам.Месяц,
		|	РазличныеДатыПоСотрудникам.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазличныеДатыПоСотрудникам.Сотрудник КАК Сотрудник,
		|	РазличныеДатыПоСотрудникам.Месяц КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейПятидневка > 0
		|				ТОГДА 1
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейПятидневка < 0
		|				ТОГДА -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноДнейПятидневка,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейПятидневка > 0
		|				ТОГДА 1
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейПятидневка < 0
		|				ТОГДА -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) * ЧасовПоДатам.ЧасовПоПятидневке КАК ОтработаноЧасовПятидневка,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейШестидневка > 0
		|				ТОГДА 1
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейШестидневка < 0
		|				ТОГДА -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноДнейШестидневка,
		|	СУММА(ВЫБОР
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейКалендарных > 0
		|				ТОГДА 1
		|			КОГДА РазличныеДатыПоСотрудникам.ОтработаноНаДатуДнейКалендарных < 0
		|				ТОГДА -1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТДанныеПоФПД
		|ИЗ
		|	ВТОтработаноДнейПоДатам КАК РазличныеДатыПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЧасовПоДатам КАК ЧасовПоДатам
		|		ПО (ЧасовПоДатам.Сотрудник = РазличныеДатыПоСотрудникам.Сотрудник)
		|			И (ЧасовПоДатам.Месяц = РазличныеДатыПоСотрудникам.Месяц)
		|			И (ЧасовПоДатам.Дата = РазличныеДатыПоСотрудникам.Дата)
		|
		|СГРУППИРОВАТЬ ПО
		|	РазличныеДатыПоСотрудникам.Сотрудник,
		|	РазличныеДатыПоСотрудникам.Месяц,
		|	ЧасовПоДатам.ЧасовПоПятидневке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВремени.Сотрудник КАК Сотрудник,
		|	ДанныеВремени.Месяц КАК Месяц,
		|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(ДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
		|	СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
		|ПОМЕСТИТЬ ВТДанныеВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтработанноеВремяКорректировка.Сотрудник КАК Сотрудник,
		|		ОтработанноеВремяКорректировка.Месяц КАК Месяц,
		|		ОтработанноеВремяКорректировка.ОтработаноДнейКорректировка КАК ОтработаноДней,
		|		0 КАК ОтработаноЧасов,
		|		0 КАК ОтработаноДнейПятидневка,
		|		0 КАК ОтработаноЧасовПятидневка,
		|		0 КАК ОтработаноДнейШестидневка,
		|		0 КАК ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТОтработанноеВремяКорректировка КАК ОтработанноеВремяКорректировка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеПоФПД.Сотрудник,
		|		ДанныеПоФПД.Месяц,
		|		0,
		|		0,
		|		ДанныеПоФПД.ОтработаноДнейПятидневка,
		|		ДанныеПоФПД.ОтработаноЧасовПятидневка,
		|		ДанныеПоФПД.ОтработаноДнейШестидневка,
		|		ДанныеПоФПД.ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТДанныеПоФПД КАК ДанныеПоФПД
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НакопленныеДанные.Сотрудник,
		|		НакопленныеДанные.Месяц,
		|		0,
		|		0,
		|		-НакопленныеДанные.ОтработаноДнейПятидневка,
		|		-НакопленныеДанные.ОтработаноЧасовПятидневка,
		|		-НакопленныеДанные.ОтработаноДнейШестидневка,
		|		-НакопленныеДанные.ОтработаноДнейКалендарных
		|	ИЗ
		|		ВТНакопленныеДанные КАК НакопленныеДанные) КАК ДанныеВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиМесяцы.Сотрудник КАК Сотрудник,
		|	СотрудникиМесяцы.Месяц КАК Месяц,
		|	ДанныеВремени.ОтработаноДней КАК ОтработаноДней,
		|	ДанныеВремени.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ДанныеВремени.ОтработаноДнейПятидневка КАК ОтработаноДнейПятидневка,
		|	ДанныеВремени.ОтработаноЧасовПятидневка КАК ОтработаноЧасовПятидневка,
		|	ДанныеВремени.ОтработаноДнейШестидневка КАК ОтработаноДнейШестидневка,
		|	ДанныеВремени.ОтработаноДнейКалендарных КАК ОтработаноДнейКалендарных
		|ИЗ
		|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремени КАК ДанныеВремени
		|		ПО СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник
		|			И СотрудникиМесяцы.Месяц = ДанныеВремени.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцыБезНачислений КАК СотрудникиМесяцыБезНачислений
		|		ПО (СотрудникиМесяцыБезНачислений.Сотрудник = СотрудникиМесяцы.Сотрудник)
		|			И (СотрудникиМесяцыБезНачислений.Месяц = СотрудникиМесяцы.Месяц)
		|ГДЕ
		|	СотрудникиМесяцыБезНачислений.Месяц ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиМесяцыБезНачислений.Сотрудник,
		|	СотрудникиМесяцыБезНачислений.Месяц,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТСотрудникиМесяцыБезНачислений КАК СотрудникиМесяцыБезНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Месяц";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ОтработаноДней = 0 
					И Выборка.ОтработаноЧасов = 0 
					И Выборка.ОтработаноДнейПятидневка = 0 
					И Выборка.ОтработаноДнейШестидневка = 0 
					И Выборка.ОтработаноДнейКалендарных = 0 Тогда
					// Не записываем пустые строки.
					Продолжить;
				КонецЕсли;
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
			КонецЦикла;
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет в менеджер таблиц временную таблицу 
//  с порядком расчета общего среднего заработка, 
//  исходя из периода и других данных начисления.
//
Процедура СоздатьВТПорядокРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ДатаДействия,
		|	Начисления.Начисление,
		|	НастройкиНачислений.ПорядокРасчета
		|ПОМЕСТИТЬ ВТПорядокРасчетаОбщегоСреднегоЗаработка
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиНачислений
		|		ПО (НастройкиНачислений.Ссылка = Начисления.Начисление)
		|			И (НастройкиНачислений.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТВидыНачисленийДляРегистрацииОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.ЗачетНормыВремени,
		|	Начисления.ЗачетОтработанногоВремени,
		|	ЛОЖЬ КАК Прогул,
		|	ЛОЖЬ КАК Отгул,
		|	ЛОЖЬ КАК ЕжегодныйОтпуск
		|ПОМЕСТИТЬ ВТВидыНачислений
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ЗачетОтработанногоВремени
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоЗаработка
		|			ГДЕ
		|				НастройкаСреднегоЗаработка.Ссылка = Начисления.Ссылка
		|				И НастройкаСреднегоЗаработка.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПрогула)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииОтгула)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
		|	И Начисления.ВидОтпуска.ОтпускЯвляетсяЕжегодным
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисления.Ссылка";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииПрогула", ПланыВидовРасчета.Начисления.КатегорииПрогула());
	Запрос.УстановитьПараметр("КатегорииОтгула", ПланыВидовРасчета.Начисления.КатегорииОтгула());
	Запрос.УстановитьПараметр("ВидыВремениРаботаВыходныеПраздничные", УчетРабочегоВремениРасширенный.ВидыВремениРаботаВыходныеПраздничные());
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисленияПоТаблицеНачисления(МенеджерВременныхТаблиц, Начисления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", Начисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ДокументСсылка КАК ДокументСсылка,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Организация КАК Организация,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ДатаДействия КАК ДатаДействия,
		|	Начисления.МесяцНачисления КАК МесяцНачисления,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала КАК ДатаНачала,
		|	Начисления.ДатаОкончания КАК ДатаОкончания,
		|	Начисления.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	Начисления.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.Сторно КАК Сторно,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|ПОМЕСТИТЬ ВТНачисленияПредварительно
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПредварительно.ДокументСсылка КАК ДокументСсылка,
		|	НачисленияПредварительно.Сотрудник КАК Сотрудник,
		|	НачисленияПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПредварительно.Организация КАК Организация,
		|	НачисленияПредварительно.Начисление КАК Начисление,
		|	НачисленияПредварительно.ДатаДействия КАК ДатаДействия,
		|	НачисленияПредварительно.МесяцНачисления КАК МесяцНачисления,
		|	НачисленияПредварительно.ПериодДействия КАК ПериодДействия,
		|	НачисленияПредварительно.ДатаНачала КАК ДатаНачала,
		|	НачисленияПредварительно.ДатаОкончания КАК ДатаОкончания,
		|	НачисленияПредварительно.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
		|	НачисленияПредварительно.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
		|	СУММА(НачисленияПредварительно.Сумма) КАК Сумма,
		|	НачисленияПредварительно.Сторно КАК Сторно,
		|	НачисленияПредварительно.НомерСтроки КАК НомерСтроки,
		|	НачисленияПредварительно.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПредварительно.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НачисленияПредварительно.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НачисленияПредварительно.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленияПредварительно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияПредварительно КАК НачисленияПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияПредварительно.ДокументСсылка,
		|	НачисленияПредварительно.Сотрудник,
		|	НачисленияПредварительно.ФизическоеЛицо,
		|	НачисленияПредварительно.Организация,
		|	НачисленияПредварительно.Начисление,
		|	НачисленияПредварительно.ДатаДействия,
		|	НачисленияПредварительно.МесяцНачисления,
		|	НачисленияПредварительно.ПериодДействия,
		|	НачисленияПредварительно.ДатаНачала,
		|	НачисленияПредварительно.ДатаОкончания,
		|	НачисленияПредварительно.НачалоБазовогоПериода,
		|	НачисленияПредварительно.ОкончаниеБазовогоПериода,
		|	НачисленияПредварительно.Сторно,
		|	НачисленияПредварительно.НомерСтроки,
		|	НачисленияПредварительно.ИдентификаторСтроки,
		|	НачисленияПредварительно.СтатьяФинансирования,
		|	НачисленияПредварительно.СпособОтраженияЗарплатыВБухучете,
		|	НачисленияПредварительно.СтатьяРасходов,
		|	НачисленияПредварительно.ОблагаетсяЕНВД";
		
	Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТНачисленияПредварительно");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

Процедура СоздатьВТДляИсключенияКомандировок(МенеджерВременныхТаблиц, ИсключатьНачисленияВПериодКомандировок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорииПрогула", ПланыВидовРасчета.Начисления.КатегорииПрогула());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыКомандировок.Ссылка,
		|	Начисления.Начисление КАК ВидРасчета,
		|	ВЫБОР
		|		КОГДА ИсключаемыеВПериодКомандировки.ЗачетОтработанногоВремени
		|				ИЛИ ИсключаемыеВПериодКомандировки.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПрогула)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключатьВремя
		|ПОМЕСТИТЬ ВТИсключаемыеВПериодКомандировки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыКомандировок
		|		ПО (ВидыКомандировок.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки))
		|			И (ВидыКомандировок.ЗачетНормыВремени)
		|			И (ВидыКомандировок.Ссылка <> Начисления.Начисление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ИсключаемыеВПериодКомандировки
		|		ПО (ИсключаемыеВПериодКомандировки.Ссылка = Начисления.Начисление)
		|			И (ИсключаемыеВПериодКомандировки.ТребуетсяРасчетВремени)
		|			И (НЕ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
		|					ГДЕ
		|						ВытесняющиеВидыРасчета.Ссылка = Начисления.Начисление
		|						И ВытесняющиеВидыРасчета.ВидРасчета = ВидыКомандировок.Ссылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТИсключаемыеВПериодКомандировки КАК ИсключаемыеВПериодКомандировки";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ИсключатьНачисленияВПериодКомандировок = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПДКомандировки.Регистратор,
		|	ФПДКомандировки.НомерСтроки,
		|	ФПДКомандировки.Сотрудник,
		|	ФПДКомандировки.ВидРасчета,
		|	ФПДКомандировки.ПериодДействияНачало КАК Начало,
		|	ФПДКомандировки.ПериодДействияКонец КАК Окончание
		|ПОМЕСТИТЬ ВТПериодыКомандировок
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Сотрудник, ПериодДействия) В
		|					(ВЫБРАТЬ
		|						Начисления.Сотрудник,
		|						Начисления.ПериодДействия
		|					ИЗ
		|						ВТНачисления КАК Начисления)
		|				И ВидРасчета В
		|					(ВЫБРАТЬ
		|						ВидыКомандировок.Ссылка
		|					ИЗ
		|						ВТИсключаемыеВПериодКомандировки КАК ВидыКомандировок)) КАК ФПДКомандировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТПериодыКомандировок КАК ФПДКомандировки";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ИсключатьНачисленияВПериодКомандировок = Ложь;
		Возврат;
	КонецЕсли;
	
	ИсключатьНачисленияВПериодКомандировок = Истина;
	
КонецПроцедуры

Процедура РаспределитьВТНачисленияПоБазе(МенеджерВременныхТаблиц, Регистратор, ИсключатьВПериодКомандировок)
	
	// Если начисление отражается в среднем заработке пропорционально базовым начислениям, получаем расчетную базу и
	// выполняем распределение.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Определяем, вообще есть ли в регистрируемом наборе подобные начисления.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Период КАК Период,
		|	Начисления.ДокументСсылка КАК ДокументСсылка,
		|	Начисления.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТНачисленияОтражаемыеПоБазе
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.СтратегияОтраженияВСреднемЗаработке = ЗНАЧЕНИЕ(Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисленияОтражаемыеПоБазе КАК НачисленияОтражаемыеПоБазе";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если нет, то создаем пустышку и ничего далее не делаем.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	// Выполняем расчет базы для получения расшифровки.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТРегистрНачисления
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	НачисленияОтражаемыеПоБазе.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияОтражаемыеПоБазе.СтатьяФинансирования КАК СтатьяФинансирования,
		|	НачисленияОтражаемыеПоБазе.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	НачисленияОтражаемыеПоБазе.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленияОтражаемыеПоБазе.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачисленияОтражаемыеПоБазе.Сотрудник КАК Сотрудник,
		|	НачисленияОтражаемыеПоБазе.Период КАК Период,
		|	НачисленияОтражаемыеПоБазе.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределяемыеСуммыПредварительно
		|ИЗ
		|	ВТНачисленияОтражаемыеПоБазе КАК НачисленияОтражаемыеПоБазе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрНачисления КАК Начисления
		|		ПО (Начисления.Регистратор = НачисленияОтражаемыеПоБазе.ДокументСсылка)
		|			И (Начисления.ИдентификаторСтроки = НачисленияОтражаемыеПоБазе.ИдентификаторСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаспределяемыеСуммы.Регистратор КАК Регистратор,
		|	РаспределяемыеСуммы.НомерСтроки КАК НомерСтроки,
		|	РаспределяемыеСуммы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределяемыеСуммы.Сотрудник КАК Сотрудник,
		|	РаспределяемыеСуммы.Период КАК Период
		|ПОМЕСТИТЬ ВТОтборНачислений
		|ИЗ
		|	ВТРаспределяемыеСуммыПредварительно КАК РаспределяемыеСуммы";
	Запрос.Выполнить();
	
	РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблицеКаскадно(МенеджерВременныхТаблиц);
	
	// РК и СН с начислений, не входящих в средний заработок, также не должны входить в средний.
	Если Не ИсключатьВПериодКомандировок Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	0 КАК ИдентификаторСтроки,
			|	0 КАК Сумма
			|ПОМЕСТИТЬ ВТИсключаемыеВПериодКомандировкиСуммы";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетнаяБаза.Регистратор КАК Регистратор,
		|	РасчетнаяБаза.НомерСтроки КАК НомерСтроки,
		|	СУММА(РасчетнаяБаза.РезультатБаза - ЕСТЬNULL(ИсключаемыеСуммы.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТРасчетнаяБазаСреднегоЗаработка
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиВидаРасчета
		|		ПО РасчетнаяБаза.ВидРасчетаРазрез = НастройкиВидаРасчета.Ссылка
		|			И (НастройкиВидаРасчета.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеВПериодКомандировкиСуммы КАК ИсключаемыеСуммы
		|		ПО РасчетнаяБаза.ИдентификаторСтрокиРазрез = ИсключаемыеСуммы.ИдентификаторСтроки
		|			И (РасчетнаяБаза.Регистратор = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетнаяБаза.Регистратор КАК Регистратор,
		|	РасчетнаяБаза.НомерСтроки КАК НомерСтроки,
		|	СУММА(РасчетнаяБаза.РезультатБаза) КАК Сумма
		|ПОМЕСТИТЬ ВТРасчетнаяБазаВсего
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределяемыеСуммыПредварительно.Регистратор КАК Регистратор,
		|	РаспределяемыеСуммыПредварительно.НомерСтроки КАК НомерСтроки,
		|	РаспределяемыеСуммыПредварительно.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределяемыеСуммыПредварительно.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределяемыеСуммыПредварительно.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	РаспределяемыеСуммыПредварительно.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределяемыеСуммыПредварительно.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	РаспределяемыеСуммыПредварительно.Сотрудник КАК Сотрудник,
		|	РаспределяемыеСуммыПредварительно.Период КАК Период,
		|	ВЫБОР
		|		КОГДА РасчетнаяБазаВсего.Сумма = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(РаспределяемыеСуммыПредварительно.Сумма * РасчетнаяБазаСреднегоЗаработка.Сумма / РасчетнаяБазаВсего.Сумма КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределяемыеСуммы
		|ИЗ
		|	ВТРаспределяемыеСуммыПредварительно КАК РаспределяемыеСуммыПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаВсего КАК РасчетнаяБазаВсего
		|		ПО РаспределяемыеСуммыПредварительно.Регистратор = РасчетнаяБазаВсего.Регистратор
		|			И РаспределяемыеСуммыПредварительно.НомерСтроки = РасчетнаяБазаВсего.НомерСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаСреднегоЗаработка КАК РасчетнаяБазаСреднегоЗаработка
		|		ПО РаспределяемыеСуммыПредварительно.Регистратор = РасчетнаяБазаСреднегоЗаработка.Регистратор
		|			И РаспределяемыеСуммыПредварительно.НомерСтроки = РасчетнаяБазаСреднегоЗаработка.НомерСтроки";
	
	Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТРасчетнаяБазаСреднегоЗаработка");
	ИменаВТ.Добавить("ВТРасчетнаяБазаВсего");
	ИменаВТ.Добавить("ВТРаспределяемыеСуммыПредварительно");
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ИменаВТ);
	
	// Получив расчетную базу, мы можем понять, из каких начислений состоит результат распределяемых сумм,
	// но для аналогичного отражения его в среднем заработке нужно понять, как именно эти базовые начисления были отражены
	// в среднем заработке.
	
	// Выполняем поиск по ключу Регистратор + Сотрудник + СоставнаяЧасть + ПорядокРасчета + Индексируется и распределяем суммы, 
	// входящие в базу по тому, что удалось получить (т.к. могут быть несколько записей, по статьям финансирования и др.).
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОсновныеЗаписи.Сотрудник КАК Сотрудник,
		|	ОсновныеЗаписи.Период КАК Период,
		|	РасчетнаяБаза.РегистраторРазрез КАК Регистратор,
		|	НастройкиВидаРасчета.ПорядокРасчета КАК ПорядокРасчета,
		|	НастройкиВидаРасчета.Значение КАК СоставнаяЧасть,
		|	НастройкиВидаРасчета.Индексируется КАК Индексируется,
		|	СУММА(РасчетнаяБаза.РезультатБаза - ЕСТЬNULL(ИсключаемыеСуммы.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТРасшифровкаБазы
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОсновныеЗаписи
		|		ПО (ОсновныеЗаписи.Регистратор = РасчетнаяБаза.Регистратор)
		|			И (ОсновныеЗаписи.НомерСтроки = РасчетнаяБаза.НомерСтроки)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкиВидаРасчета
		|		ПО (НастройкиВидаРасчета.Ссылка = РасчетнаяБаза.ВидРасчетаРазрез)
		|			И (НастройкиВидаРасчета.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеВПериодКомандировкиСуммы КАК ИсключаемыеСуммы
		|		ПО РасчетнаяБаза.ИдентификаторСтрокиРазрез = ИсключаемыеСуммы.ИдентификаторСтроки
		|			И (РасчетнаяБаза.Регистратор = &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписи.ИдентификаторСтроки,
		|	ОсновныеЗаписи.Сотрудник,
		|	ОсновныеЗаписи.Период,
		|	РасчетнаяБаза.РегистраторРазрез,
		|	НастройкиВидаРасчета.ПорядокРасчета,
		|	НастройкиВидаРасчета.Значение,
		|	НастройкиВидаРасчета.Индексируется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Период КАК Период,
		|	РасшифровкаБазы.Регистратор КАК Регистратор,
		|	РасшифровкаБазы.ПорядокРасчета КАК ПорядокРасчета,
		|	РасшифровкаБазы.СоставнаяЧасть КАК СоставнаяЧасть,
		|	РасшифровкаБазы.Индексируется КАК Индексируется
		|ПОМЕСТИТЬ ВТРаспределяемыеСочетания
		|ИЗ
		|	ВТРасшифровкаБазы КАК РасшифровкаБазы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО (Начисления.ИдентификаторСтроки = РасшифровкаБазы.ИдентификаторСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Период КАК Период,
		|	Начисления.ДокументСсылка КАК Регистратор,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СоставнаяЧасть КАК СоставнаяЧасть,
		|	Начисления.Индексируется КАК Индексируется,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Начисления.Год КАК Год,
		|	Начисления.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	Начисления.КоличествоМесяцев КАК КоличествоМесяцев,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТОснованияРаспределения
		|ИЗ
		|	ВТРаспределяемыеСочетания КАК Сочетания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО (Начисления.ДокументСсылка = Сочетания.Регистратор)
		|			И (Начисления.Сотрудник = Сочетания.Сотрудник)
		|			И (Начисления.Период = Сочетания.Период)
		|			И (Начисления.ПорядокРасчета = Сочетания.ПорядокРасчета)
		|			И (Начисления.СоставнаяЧасть = Сочетания.СоставнаяЧасть)
		|			И (Начисления.Индексируется = Сочетания.Индексируется)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (Начисления.ИдентификаторСтроки = ОтборНачислений.ИдентификаторСтроки)
		|ГДЕ
		|	ОтборНачислений.ИдентификаторСтроки ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.Регистратор,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.СоставнаяЧасть,
		|	ДанныеНачислений.Индексируется,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ДанныеНачислений.СтатьяРасходов,
		|	ДанныеНачислений.ОблагаетсяЕНВД,
		|	ДанныеНачислений.Год,
		|	ДанныеНачислений.ДатаНачалаБазовогоПериода,
		|	ДанныеНачислений.КоличествоМесяцев,
		|	ДанныеНачислений.Организация,
		|	ДанныеНачислений.ФизическоеЛицо,
		|	ДанныеНачислений.Сумма
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределяемыеСочетания КАК Сочетания
		|		ПО ДанныеНачислений.Регистратор = Сочетания.Регистратор
		|			И ДанныеНачислений.Сотрудник = Сочетания.Сотрудник
		|			И ДанныеНачислений.Период = Сочетания.Период
		|			И ДанныеНачислений.ПорядокРасчета = Сочетания.ПорядокРасчета
		|			И ДанныеНачислений.СоставнаяЧасть = Сочетания.СоставнаяЧасть
		|			И ДанныеНачислений.Индексируется = Сочетания.Индексируется
		|			И (ДанныеНачислений.Регистратор <> &Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РасшифровкаБазы.Сотрудник КАК Сотрудник,
		|	РасшифровкаБазы.Период КАК Период,
		|	РасшифровкаБазы.Регистратор КАК Регистратор,
		|	РасшифровкаБазы.ПорядокРасчета КАК ПорядокРасчета,
		|	РасшифровкаБазы.СоставнаяЧасть КАК СоставнаяЧасть,
		|	РасшифровкаБазы.Индексируется КАК Индексируется,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоСтрок
		|ИЗ
		|	ВТРасшифровкаБазы КАК РасшифровкаБазы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснованияРаспределения КАК ОснованияРаспределения
		|		ПО (ОснованияРаспределения.ПорядокРасчета = РасшифровкаБазы.ПорядокРасчета)
		|			И (ОснованияРаспределения.СоставнаяЧасть = РасшифровкаБазы.СоставнаяЧасть)
		|			И (ОснованияРаспределения.Индексируется = РасшифровкаБазы.Индексируется)
		|			И (ОснованияРаспределения.Регистратор = РасшифровкаБазы.Регистратор)
		|			И (ОснованияРаспределения.Сотрудник = РасшифровкаБазы.Сотрудник)
		|			И (ОснованияРаспределения.Период = РасшифровкаБазы.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаБазы.ИдентификаторСтроки,
		|	РасшифровкаБазы.Сотрудник,
		|	РасшифровкаБазы.Период,
		|	РасшифровкаБазы.Регистратор,
		|	РасшифровкаБазы.ПорядокРасчета,
		|	РасшифровкаБазы.СоставнаяЧасть,
		|	РасшифровкаБазы.Индексируется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РасшифровкаБазы.Сотрудник КАК Сотрудник,
		|	РасшифровкаБазы.Период КАК Период,
		|	РасшифровкаБазы.Регистратор КАК Регистратор,
		|	РасшифровкаБазы.ПорядокРасчета КАК ПорядокРасчета,
		|	РасшифровкаБазы.СоставнаяЧасть КАК СоставнаяЧасть,
		|	РасшифровкаБазы.Индексируется КАК Индексируется,
		|	РасшифровкаБазы.Сумма КАК Сумма,
		|	ЕСТЬNULL(КоличествоСтрок.Количество, 0) КАК КоличествоСтрок
		|ИЗ
		|	ВТРасшифровкаБазы КАК РасшифровкаБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрок КАК КоличествоСтрок
		|		ПО (КоличествоСтрок.ИдентификаторСтроки = РасшифровкаБазы.ИдентификаторСтроки)
		|			И (КоличествоСтрок.Регистратор = РасшифровкаБазы.Регистратор)
		|			И (КоличествоСтрок.ПорядокРасчета = РасшифровкаБазы.ПорядокРасчета)
		|			И (КоличествоСтрок.СоставнаяЧасть = РасшифровкаБазы.СоставнаяЧасть)
		|			И (КоличествоСтрок.Индексируется = РасшифровкаБазы.Индексируется)
		|			И (КоличествоСтрок.Сотрудник = РасшифровкаБазы.Сотрудник)
		|			И (КоличествоСтрок.Период = РасшифровкаБазы.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасшифровкаБазы.Регистратор,
		|	РасшифровкаБазы.ИдентификаторСтроки,
		|	РасшифровкаБазы.Сотрудник,
		|	РасшифровкаБазы.Период,
		|	РасшифровкаБазы.ПорядокРасчета,
		|	РасшифровкаБазы.СоставнаяЧасть,
		|	РасшифровкаБазы.Индексируется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаБазы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОснованияРаспределения.Сотрудник КАК Сотрудник,
		|	ОснованияРаспределения.Период КАК Период,
		|	ОснованияРаспределения.Регистратор КАК Регистратор,
		|	ОснованияРаспределения.ПорядокРасчета КАК ПорядокРасчета,
		|	ОснованияРаспределения.СоставнаяЧасть КАК СоставнаяЧасть,
		|	ОснованияРаспределения.Индексируется КАК Индексируется,
		|	ОснованияРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ОснованияРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ОснованияРаспределения.СтатьяРасходов КАК СтатьяРасходов,
		|	ОснованияРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ОснованияРаспределения.Год КАК Год,
		|	ОснованияРаспределения.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	ОснованияРаспределения.КоличествоМесяцев КАК КоличествоМесяцев,
		|	ОснованияРаспределения.Организация КАК Организация,
		|	ОснованияРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОснованияРаспределения.Сумма КАК Сумма
		|ИЗ
		|	ВТОснованияРаспределения КАК ОснованияРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасшифровкаБазы КАК РасшифровкаБазы
		|		ПО ОснованияРаспределения.ПорядокРасчета = РасшифровкаБазы.ПорядокРасчета
		|			И ОснованияРаспределения.СоставнаяЧасть = РасшифровкаБазы.СоставнаяЧасть
		|			И ОснованияРаспределения.Индексируется = РасшифровкаБазы.Индексируется
		|			И ОснованияРаспределения.Регистратор = РасшифровкаБазы.Регистратор
		|			И ОснованияРаспределения.Сотрудник = РасшифровкаБазы.Сотрудник
		|			И ОснованияРаспределения.Период = РасшифровкаБазы.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОснованияРаспределения.Регистратор,
		|	РасшифровкаБазы.ИдентификаторСтроки,
		|	ОснованияРаспределения.Сотрудник,
		|	ОснованияРаспределения.Период,
		|	ОснованияРаспределения.ПорядокРасчета,
		|	ОснованияРаспределения.СоставнаяЧасть,
		|	ОснованияРаспределения.Индексируется";

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСумм = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаРасшифровки = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	// Выполняем распределение сумм пропорционально базе.
	БазаРаспределения = Новый ТаблицаЗначений;
	БазаРаспределения.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	БазаРаспределения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БазаРаспределения.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	БазаРаспределения.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	БазаРаспределения.Колонки.Добавить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	БазаРаспределения.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	БазаРаспределения.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	БазаРаспределения.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	БазаРаспределения.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	БазаРаспределения.Колонки.Добавить("Индексируется", Новый ОписаниеТипов("Булево"));
	БазаРаспределения.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	БазаРаспределения.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(4, 0));
	БазаРаспределения.Колонки.Добавить("ДатаНачалаБазовогоПериода", Новый ОписаниеТипов("Дата"));
	БазаРаспределения.Колонки.Добавить("КоличествоМесяцев", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(3, 0));
	БазаРаспределения.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	БазаРаспределения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Пока ВыборкаСумм.Следующий() Цикл
		Если ВыборкаСумм.КоличествоСтрок = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиРаспределения = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		Для Индекс = 1 По ВыборкаСумм.КоличествоСтрок Цикл
			ВыборкаРасшифровки.Следующий();
			НоваяСтрока = БазаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасшифровки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			СтрокиРаспределения.Добавить(НоваяСтрока);
			КоэффициентыРаспределения.Добавить(ВыборкаРасшифровки.Сумма);
		КонецЦикла;
		Если ВыборкаСумм.КоличествоСтрок < 2 Тогда
			Продолжить;
		КонецЕсли;
		РаспределенныеСуммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВыборкаСумм.Сумма, КоэффициентыРаспределения);
		Если РаспределенныеСуммы <> Неопределено Тогда
			Индекс = 0;
			Пока Индекс < СтрокиРаспределения.Количество() Цикл
				СтрокиРаспределения[Индекс].Сумма = РаспределенныеСуммы[Индекс];
				Индекс = Индекс + 1;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БазаРаспределения.Сотрудник КАК Сотрудник,
		|	БазаРаспределения.Период КАК Период,
		|	БазаРаспределения.ПорядокРасчета КАК ПорядокРасчета,
		|	БазаРаспределения.СоставнаяЧасть КАК СоставнаяЧасть,
		|	БазаРаспределения.Индексируется КАК Индексируется,
		|	БазаРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БазаРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БазаРаспределения.СтатьяРасходов КАК СтатьяРасходов,
		|	БазаРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БазаРаспределения.Год КАК Год,
		|	БазаРаспределения.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	БазаРаспределения.КоличествоМесяцев КАК КоличествоМесяцев,
		|	БазаРаспределения.Организация КАК Организация,
		|	БазаРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БазаРаспределения.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТБазаРаспределения
		|ИЗ
		|	&БазаРаспределения КАК БазаРаспределения";
	Запрос.УстановитьПараметр("БазаРаспределения", БазаРаспределения);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БазаРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БазаРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БазаРаспределения.СтатьяРасходов КАК СтатьяРасходов,
		|	БазаРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(1) КАК КоличествоСтрок
		|ПОМЕСТИТЬ ВТКоличествоСтрокБазыРаспределения
		|ИЗ
		|	ВТБазаРаспределения КАК БазаРаспределения
		|
		|СГРУППИРОВАТЬ ПО
		|	БазаРаспределения.ИдентификаторСтроки,
		|	БазаРаспределения.СтатьяФинансирования,
		|	БазаРаспределения.СпособОтраженияЗарплатыВБухучете,
		|	БазаРаспределения.СтатьяРасходов,
		|	БазаРаспределения.ОблагаетсяЕНВД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределяемыеСуммы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределяемыеСуммы.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределяемыеСуммы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	РаспределяемыеСуммы.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределяемыеСуммы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	РаспределяемыеСуммы.Сумма КАК Сумма,
		|	ЕСТЬNULL(КоличествоСтрокБазыРаспределения.КоличествоСтрок, 0) КАК КоличествоСтрок
		|ИЗ
		|	ВТРаспределяемыеСуммы КАК РаспределяемыеСуммы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрокБазыРаспределения КАК КоличествоСтрокБазыРаспределения
		|		ПО (КоличествоСтрокБазыРаспределения.ИдентификаторСтроки = РаспределяемыеСуммы.ИдентификаторСтроки)
		|			И (КоличествоСтрокБазыРаспределения.СтатьяФинансирования = РаспределяемыеСуммы.СтатьяФинансирования)
		|			И (КоличествоСтрокБазыРаспределения.СпособОтраженияЗарплатыВБухучете = РаспределяемыеСуммы.СпособОтраженияЗарплатыВБухучете)
		|			И (КоличествоСтрокБазыРаспределения.СтатьяРасходов = РаспределяемыеСуммы.СтатьяРасходов)
		|			И (КоличествоСтрокБазыРаспределения.ОблагаетсяЕНВД = РаспределяемыеСуммы.ОблагаетсяЕНВД)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспределяемыеСуммы.ИдентификаторСтроки,
		|	РаспределяемыеСуммы.СтатьяФинансирования,
		|	РаспределяемыеСуммы.СпособОтраженияЗарплатыВБухучете,
		|	РаспределяемыеСуммы.СтатьяРасходов,
		|	РаспределяемыеСуммы.ОблагаетсяЕНВД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	БазаРаспределения.Сотрудник КАК Сотрудник,
		|	БазаРаспределения.Период КАК Период,
		|	БазаРаспределения.ПорядокРасчета КАК ПорядокРасчета,
		|	БазаРаспределения.СоставнаяЧасть КАК СоставнаяЧасть,
		|	БазаРаспределения.Индексируется КАК Индексируется,
		|	БазаРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БазаРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БазаРаспределения.СтатьяРасходов КАК СтатьяРасходов,
		|	БазаРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	БазаРаспределения.Год КАК Год,
		|	БазаРаспределения.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	БазаРаспределения.КоличествоМесяцев КАК КоличествоМесяцев,
		|	БазаРаспределения.Организация КАК Организация,
		|	БазаРаспределения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	БазаРаспределения.Сумма КАК Сумма
		|ИЗ
		|	ВТБазаРаспределения КАК БазаРаспределения
		|
		|УПОРЯДОЧИТЬ ПО
		|	БазаРаспределения.ИдентификаторСтроки,
		|	БазаРаспределения.СтатьяФинансирования,
		|	БазаРаспределения.СпособОтраженияЗарплатыВБухучете,
		|	БазаРаспределения.СтатьяРасходов,
		|	БазаРаспределения.ОблагаетсяЕНВД";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСумм = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаРасшифровки = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	// Выполняем распределение сумм пропорционально полученной базе распределения.
	Распределение = БазаРаспределения;
	Распределение.Очистить();
	
	Пока ВыборкаСумм.Следующий() Цикл
		Если ВыборкаСумм.КоличествоСтрок = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокиРаспределения = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		Для Индекс = 1 По ВыборкаСумм.КоличествоСтрок Цикл
			ВыборкаРасшифровки.НайтиСледующий(ВыборкаСумм.ИдентификаторСтроки, "ИдентификаторСтроки");
			НоваяСтрока = Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасшифровки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			СтрокиРаспределения.Добавить(НоваяСтрока);
			КоэффициентыРаспределения.Добавить(ВыборкаРасшифровки.Сумма);
		КонецЦикла;
		Если ВыборкаСумм.КоличествоСтрок < 2 Тогда
			Продолжить;
		КонецЕсли;
		РаспределенныеСуммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВыборкаСумм.Сумма, КоэффициентыРаспределения);
		Если РаспределенныеСуммы <> Неопределено Тогда
			Индекс = 0;
			Пока Индекс < СтрокиРаспределения.Количество() Цикл
				СтрокиРаспределения[Индекс].Сумма = РаспределенныеСуммы[Индекс];
				Индекс = Индекс + 1;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТРасшифровкаБазы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРаспределяемыеСуммы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтборНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРасчетнаяБаза";
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Распределение.Сотрудник КАК Сотрудник,
		|	Распределение.Период КАК Период,
		|	Распределение.ПорядокРасчета КАК ПорядокРасчета,
		|	Распределение.СоставнаяЧасть КАК СоставнаяЧасть,
		|	Распределение.Индексируется КАК Индексируется,
		|	Распределение.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Распределение.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	Распределение.СтатьяРасходов КАК СтатьяРасходов,
		|	Распределение.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	Распределение.Год КАК Год,
		|	Распределение.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
		|	Распределение.КоличествоМесяцев КАК КоличествоМесяцев,
		|	Распределение.Организация КАК Организация,
		|	Распределение.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Распределение.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределениеПоБазовымНачислениям
		|ИЗ
		|	&Распределение КАК Распределение";
		
	Запрос.УстановитьПараметр("Распределение", Распределение);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Период,
		|	Начисления.ПорядокРасчета,
		|	Начисления.СоставнаяЧасть,
		|	Начисления.Индексируется,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.Год,
		|	Начисления.ДатаНачалаБазовогоПериода,
		|	Начисления.КоличествоМесяцев,
		|	Начисления.Организация,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сумма,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисленияРаспределяемые
		|ИЗ
		|	ВТНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Период,
		|	Начисления.ПорядокРасчета,
		|	Начисления.СоставнаяЧасть,
		|	Начисления.Индексируется,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.СпособОтраженияЗарплатыВБухучете,
		|	Начисления.СтатьяРасходов,
		|	Начисления.ОблагаетсяЕНВД,
		|	Начисления.Год,
		|	Начисления.ДатаНачалаБазовогоПериода,
		|	Начисления.КоличествоМесяцев,
		|	Начисления.Организация,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сумма,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТНачисленияРаспределяемые КАК Начисления
		|ГДЕ
		|	НЕ Начисления.ИдентификаторСтроки В
		|				(ВЫБРАТЬ
		|					Распределение.ИдентификаторСтроки
		|				ИЗ
		|					ВТРаспределениеПоБазовымНачислениям КАК Распределение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.Период,
		|	Распределение.ПорядокРасчета,
		|	Распределение.СоставнаяЧасть,
		|	Распределение.Индексируется,
		|	Распределение.СтатьяФинансирования,
		|	Распределение.СпособОтраженияЗарплатыВБухучете,
		|	Распределение.СтатьяРасходов,
		|	Распределение.ОблагаетсяЕНВД,
		|	Распределение.Год,
		|	Распределение.ДатаНачалаБазовогоПериода,
		|	Распределение.КоличествоМесяцев,
		|	Распределение.Организация,
		|	Распределение.ФизическоеЛицо,
		|	Распределение.Сумма,
		|	Начисления.*
		|ИЗ
		|	ВТНачисленияРаспределяемые КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределениеПоБазовымНачислениям КАК Распределение
		|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
		|			И (Распределение.СтатьяФинансирования = Начисления.СтатьяФинансирования)
		|			И (Распределение.СпособОтраженияЗарплатыВБухучете = Начисления.СпособОтраженияЗарплатыВБухучете)
		|			И (Распределение.СтатьяРасходов = Начисления.СтатьяРасходов)
		|			И (Распределение.ОблагаетсяЕНВД = Начисления.ОблагаетсяЕНВД)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииПолученияДанныхСреднегоЗаработка

Процедура НайтиГраницыПериодаРасчетаОбщегоСреднегоЗаработка(ТаблицаДанных, МинимальнаяДата, МаксимальнаяДата)
	
	МинимальнаяДата		= Дата(1, 1, 1);
	МаксимальнаяДата	= Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(МинимальнаяДата) Тогда
			МинимальнаяДата = СтрокаТаблицы.НачалоПериодаРасчетаСреднего;
		КонецЕсли;
		МинимальнаяДата		= Мин(МинимальнаяДата, СтрокаТаблицы.НачалоПериодаРасчетаСреднего);
		МаксимальнаяДата	= Макс(МаксимальнаяДата, СтрокаТаблицы.ОкончаниеПериодаРасчетаСреднего);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииРегистрацииКорректировок

Процедура ЗаписатьТаблицуЗначенийВРегистрСведений(ИсходнаяТаблицаЗначений, НаборЗаписей, ИменаПолейОтбора, НачалоПериода, ОкончаниеПериода, Замещать = Истина, ЗначенияПоУмолчанию = Неопределено) Экспорт
	
	ПоляОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейОтбора);
	
	// Записываем нулевые наборы записей (набор записей, в котором всего одна заполненная пустыми значениями строка) на месяцы, 
	// для которых в таблице ИсходнаяТаблицаЗначений нет строк за период с НачалоПериода по ОкончаниеПериода.
	Если Замещать Тогда
		Отбор = Новый Структура;
		СочетанияОтбора = Новый ТаблицаЗначений;
		Для Каждого ПолеОтбора Из ПоляОтбора Цикл
			Если СокрЛП(ПолеОтбора) = "Месяц" Тогда
				// Сочетания выбираем без учета месяца.
				Продолжить;
			КонецЕсли;
			Отбор.Вставить(СокрЛП(ПолеОтбора));
			СочетанияОтбора.Колонки.Добавить(СокрЛП(ПолеОтбора));
		КонецЦикла;
		// Заполняем таблицу сочетаний.
		Если ИсходнаяТаблицаЗначений.Количество() = 0 И ЗначенияПоУмолчанию <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СочетанияОтбора.Добавить(), ЗначенияПоУмолчанию);
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ИсходнаяТаблицаЗначений Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			Если СочетанияОтбора.НайтиСтроки(Отбор).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(СочетанияОтбора.Добавить(), Отбор);
			КонецЕсли;
		КонецЦикла;
		// Записываем или пустые, или нулевые наборы на всем интервале.
		Отбор.Вставить("Месяц");
		МесяцОбхода = НачалоПериода;
		Пока МесяцОбхода < ОкончаниеПериода Цикл
			Для Каждого СтрокаСочетания Из СочетанияОтбора Цикл
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаСочетания);
				Отбор.Месяц = МесяцОбхода;
				Если ИсходнаяТаблицаЗначений.НайтиСтроки(Отбор).Количество() = 0 Тогда
					// Очищаем пространство в регистре сведений.
					Для Каждого КлючИЗначение Из Отбор Цикл
						НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
					КонецЦикла;
					// Если запись выполняется в режиме замещения, то не оставляем пустых месяцев, если нет данных записываем нулевую запись.
					// Это позволит в дальнейшем отличать пустые места от отсутствующих данных.
					ПустаяСтрока = НаборЗаписей.Добавить();
					Если ЗначенияПоУмолчанию <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ПустаяСтрока, ЗначенияПоУмолчанию);
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ПустаяСтрока, Отбор);
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЕсли;
			КонецЦикла;
			МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
		КонецЦикла;
	КонецЕсли;
	
	// Записываем таблицу значений.
	ТаблицаЗначений = ИсходнаяТаблицаЗначений.Скопировать();
	
	СтруктураОтбора = Новый Структура(ИменаПолейОтбора);
	Пока ТаблицаЗначений.Количество() > 0 Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТаблицаЗначений[0]);
		СтрокиПоОтбору = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиПоОтбору Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
			ТаблицаЗначений.Удалить(СтрокаТаблицы);
		КонецЦикла;
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереименоватьКолонкуПериодВМесяц(ТаблицаЗначений)
	
	КолонкаПериод = ТаблицаЗначений.Колонки.Найти("Период");
	
	Если КолонкаПериод <> Неопределено Тогда
		КолонкаПериод.Имя = "Месяц";
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет преобразование сведений о среднем заработке, 
//  введенных по правилам ФСС в сведения по правилам общего среднего заработка.
//
Функция СведенияОбщегоСреднегоЗаработкаПоКорректировкамФСС(Организация, КорректировкиНачисленийФСС, КорректировкиВремениФСС = Неопределено)
	
	КорректировкиОбщегоЗаработка = Новый Структура;
	
	Если КорректировкиНачисленийФСС.Количество() > 0 
		Или (КорректировкиВремениФСС <> Неопределено И КорректировкиВремениФСС.Количество() > 0) Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(КорректировкиНачисленийФСС, "ФизическоеЛицо", Истина);
		Если КорректировкиВремениФСС <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизическихЛиц, 
				ОбщегоНазначения.ВыгрузитьКолонку(КорректировкиНачисленийФСС, "ФизическоеЛицо", Истина), Истина);
		КонецЕсли;
		
		// Данные ФСС определены для физического лица в целом, 
		// поэтому растиражируем их в учете общего среднего по всем сотрудникам физического лица в этой головной организации.
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыПолученияСотрудников.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = МассивФизическихЛиц;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
		
	КонецЕсли;
	
	Если КорректировкиНачисленийФСС.Количество() > 0 Тогда
		
		// Перенос выполняем только тех сведений, 
		// для которых в учете общего среднего заработка нет «собственных» корректировок.
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкиНачисленийФСС.ФизическоеЛицо,
			|	КорректировкиНачисленийФСС.ГоловнаяОрганизация,
			|	КорректировкиНачисленийФСС.Месяц,
			|	КорректировкиНачисленийФСС.ПорядокРасчета,
			|	КорректировкиНачисленийФСС.Сумма
			|ПОМЕСТИТЬ КорректировкиНачисленийФСС
			|ИЗ
			|	&КорректировкиНачисленийФСС КАК КорректировкиНачисленийФСС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Сотрудник,
			|	КорректировкиНачисленийФСС.ГоловнаяОрганизация КАК Организация,
			|	КорректировкиНачисленийФСС.ФизическоеЛицо,
			|	КорректировкиНачисленийФСС.Месяц,
			|	ПорядокРасчетаОбщегоСреднегоЗаработка.Ссылка КАК ПорядокРасчета,
			|	ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок) КАК СоставнаяЧасть,
			|	ИСТИНА КАК Индексируется,
			|	КорректировкиНачисленийФСС.Сумма
			|ПОМЕСТИТЬ ВТКорректировкиОбщегоСреднегоЗаработка
			|ИЗ
			|	КорректировкиНачисленийФСС КАК КорректировкиНачисленийФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий КАК ПорядокРасчетаОбщегоСреднегоЗаработка
			|		ПО (ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
			|		ПО (Сотрудники.ФизическоеЛицо = КорректировкиНачисленийФСС.ФизическоеЛицо)
			|ГДЕ
			|	КорректировкиНачисленийФСС.ПорядокРасчета = &ПорядокРасчетаФСС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиОбщегоСреднегоЗаработка.Сотрудник,
			|	КорректировкиОбщегоСреднегоЗаработка.Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиОбщегоСреднегоЗаработка КАК КорректировкиОбщегоСреднегоЗаработка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияОНачислениях
			|		ПО (СведенияОНачислениях.Сотрудник = КорректировкиОбщегоСреднегоЗаработка.Сотрудник)
			|			И (СведенияОНачислениях.Месяц = КорректировкиОбщегоСреднегоЗаработка.Месяц)
			|			И (СведенияОНачислениях.ДанныеИзУчетаСреднегоФСС = ЛОЖЬ)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиОбщегоСреднегоЗаработка.Сотрудник,
			|	КорректировкиОбщегоСреднегоЗаработка.Месяц
			|ИЗ
			|	ВТКорректировкиОбщегоСреднегоЗаработка КАК КорректировкиОбщегоСреднегоЗаработка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
			|		ПО (ДанныеНачислений.Сотрудник = КорректировкиОбщегоСреднегоЗаработка.Сотрудник)
			|			И (НАЧАЛОПЕРИОДА(ДанныеНачислений.Период, МЕСЯЦ) = КорректировкиОбщегоСреднегоЗаработка.Месяц)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкиОбщегоСреднегоЗаработка.Сотрудник,
			|	КорректировкиОбщегоСреднегоЗаработка.Организация,
			|	КорректировкиОбщегоСреднегоЗаработка.ФизическоеЛицо,
			|	КорректировкиОбщегоСреднегоЗаработка.Месяц,
			|	КорректировкиОбщегоСреднегоЗаработка.ПорядокРасчета,
			|	КорректировкиОбщегоСреднегоЗаработка.СоставнаяЧасть,
			|	КорректировкиОбщегоСреднегоЗаработка.Индексируется,
			|	КорректировкиОбщегоСреднегоЗаработка.Сумма,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоФСС
			|ИЗ
			|	ВТКорректировкиОбщегоСреднегоЗаработка КАК КорректировкиОбщегоСреднегоЗаработка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.Сотрудник = КорректировкиОбщегоСреднегоЗаработка.Сотрудник)
			|			И (СуществующиеЗаписи.Месяц = КорректировкиОбщегоСреднегоЗаработка.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL ";
		
		// Заполняем колонки, имеющие смысл для общего среднего заработка
		// кроме того, данные корректировок представлены для разных порядков расчета ФСС,
		// необходимо данные по одному из порядков (любому, т.к. по всем одинаковые данные) 
		// записать по всем (по которым это имеет смысл) существующим порядкам расчета 
		// общего среднего заработка.
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КорректировкиНачисленийФСС", КорректировкиНачисленийФСС);
		Запрос.УстановитьПараметр("ПорядокРасчетаФСС", КорректировкиНачисленийФСС[0]["ПорядокРасчета"]);
		
		КорректировкиОбщегоЗаработка.Вставить("КорректировкиНачислений", Запрос.Выполнить().Выгрузить());
		
		Запрос.Текст = 
			"УНИЧТОЖИТЬ ВТСуществующиеЗаписи";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Если КорректировкиВремениФСС <> Неопределено И КорректировкиВремениФСС.Количество() > 0 Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КорректировкиВремениФСС.ФизическоеЛицо,
			|	КорректировкиВремениФСС.Месяц,
			|	КорректировкиВремениФСС.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ КорректировкиВремениФСС
			|ИЗ
			|	&КорректировкиВремениФСС КАК КорректировкиВремениФСС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Сотрудник,
			|	КорректировкиВремениФСС.Месяц,
			|	ПорядокРасчетаОбщегоСреднегоЗаработка.Ссылка КАК ПорядокРасчета,
			|	КорректировкиВремениФСС.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ ВТКорректировкиВремениОбщегоСреднегоЗаработка
			|ИЗ
			|	КорректировкиВремениФСС КАК КорректировкиВремениФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
			|		ПО (Сотрудники.ФизическоеЛицо = КорректировкиВремениФСС.ФизическоеЛицо)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий КАК ПорядокРасчетаОбщегоСреднегоЗаработка
			|		ПО (ИСТИНА)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиВремениОбщегоСреднегоЗаработка КАК Корректировки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВремениДляРасчетаСреднегоОбщий КАК СведенияОВремени
			|		ПО (СведенияОВремени.Сотрудник = Корректировки.Сотрудник)
			|			И (СведенияОВремени.Месяц = Корректировки.Месяц)
			|			И (СведенияОВремени.ДанныеИзУчетаСреднегоФСС = ЛОЖЬ)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц
			|ИЗ
			|	ВТКорректировкиВремениОбщегоСреднегоЗаработка КАК Корректировки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
			|		ПО (ДанныеВремени.Сотрудник = Корректировки.Сотрудник)
			|			И (НАЧАЛОПЕРИОДА(ДанныеВремени.Период, МЕСЯЦ) = Корректировки.Месяц)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц,
			|	Корректировки.ПорядокРасчета,
			|	Корректировки.ОтработаноДнейКалендарных,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоФСС
			|ИЗ
			|	ВТКорректировкиВремениОбщегоСреднегоЗаработка КАК Корректировки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.Сотрудник = Корректировки.Сотрудник)
			|			И (СуществующиеЗаписи.Месяц = Корректировки.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("КорректировкиВремениФСС", КорректировкиВремениФСС);
		
		КорректировкиОбщегоЗаработка.Вставить("КорректировкиВремени", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат КорректировкиОбщегоЗаработка;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормыКалькулятораСреднегоЗаработка

// Процедура заполняет заголовки таблицы представлениями месяцев.
//
Процедура ЗаполнитьМесяцыВЗаголовкахКолонок(ЭлементыФормы, НомераМесяцев, ВыводитьГод) Экспорт
	
	ФорматнаяСтрока = ?(ВыводитьГод, 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"ДФ='ММММ%1гггг'", 
							Символы.ПС), 
						"ДФ='ММММ'");
						
	Для Каждого КлючИЗначение Из НомераМесяцев Цикл
		НачалоМесяца = КлючИЗначение.Ключ;
		НомерМесяца = КлючИЗначение.Значение;
		ЭлементыФормы["СреднийЗаработокСумма" + НомерМесяца].Заголовок = Формат(НачалоМесяца, ФорматнаяСтрока);
	КонецЦикла;

	// Колонки, которые не входят в период расчета среднего - делаем невидимыми.
	НомерМесяца = 12 - НомераМесяцев.Количество();
	Пока НомерМесяца > 0 Цикл
		ЭлементыФормы["СреднийЗаработокСумма" + НомерМесяца].Видимость = Ложь;
		НомерМесяца = НомерМесяца - 1;
	КонецЦикла;
	
КонецПроцедуры	

Функция СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор) Экспорт
	
	НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Возврат ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
	
КонецФункции

// Выбирает из указанного периода месяцы, в которые возможны корректировки, 
// то есть ручной ввод значений в форме калькулятора.
// Корректировки доступны начиная с даты приема на работу и вплоть до первого месяца, 
// в котором есть расчеты.
//
// Параметры:
//	Сотрудник
//	НачалоПериодаРасчета
//	ОкончаниеПериодаРасчета
//
// Возвращаемое значение - фиксированный массив.
//
Функция МесяцыКорректировкиСреднегоЗаработка(Сотрудник, НачалоПериодаРасчета, ОкончаниеПериодаРасчета, ДатаПриемаНаРаботу, ДатаНачалаСобытия) Экспорт
	
	// Метод определяет доступный для редактирования период, 
	// опираясь на наличие данных расчета зарплаты.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ)) КАК Месяц
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Сотрудник = &Сотрудник
		|	И НЕ Начисления.Регистратор ССЫЛКА Документ.ПереносДанных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	// Месяцы, в которых доступен ручной ввод, т.е. корректировка.
	МесяцыКорректировкиМассив = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МесяцОбхода = НачалоПериодаРасчета;
	Пока МесяцОбхода < ОкончаниеПериодаРасчета Цикл
		Если НачалоМесяца(МесяцОбхода) = НачалоМесяца(ДатаНачалаСобытия) Тогда
			// Если период расчета захватывает дату начала события, 
			// значит это месяц приема на работу, зарплата еще не рассчитана, нужно дать возможность корректировок.
			МесяцыКорректировкиМассив.Добавить(МесяцОбхода);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Месяц) И МесяцОбхода >= Выборка.Месяц Тогда
			// Если начались расчеты, значит месяцы корректировок закончились.
			Прервать;
		КонецЕсли;
		Если КонецМесяца(МесяцОбхода) >= ДатаПриемаНаРаботу Тогда
			МесяцыКорректировкиМассив.Добавить(МесяцОбхода);
		КонецЕсли;
		МесяцОбхода = ДобавитьМесяц(МесяцОбхода, 1);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МесяцыКорректировкиМассив);
	
КонецФункции

Процедура ЗаполнитьДатуПриемаНаРаботуСотрудника(ДатаПриема, Сотрудник, ДатаНачалаСобытия, Отказ) Экспорт
	
	// Определим дату приема на работу сотрудника и ограничим ею начало периода расчета среднего заработка.
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаПриема,ОформленПоТрудовомуДоговору");
	Если КадровыеДанные.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сведения о сотруднике недоступны.'"), , , , Отказ);
	Иначе
		Если Не КадровыеДанные[0].ОформленПоТрудовомуДоговору Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сотрудник не принят на работу.'"), , , , Отказ);
		Иначе
			Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала события не заполнена.'"), , , , Отказ);
			Иначе
				Если КадровыеДанные[0].ДатаПриема > ДатаНачалаСобытия Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала события раньше, чем сотрудник принят на работу.'"), , , , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПриема = КадровыеДанные[0].ДатаПриема;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедурыИФункции

// Функция составляет массив периодов, входящих в указанный интервал, 
//  для которых отсутствуют строки в коллекции данных среднего заработка.
//
// Параметры:
//  НачалоРасчета - дата начала интервала, в котором определяются не заполненные периоды.
//	ОкончаниеРасчета - дата окончания интервала, в котором определяются не заполненные периоды.
//
// Возвращаемое значение
//	Массив - содержащий периоды, для которых отсутствуют данные среднего заработка.
//
Функция ПериодыНезаполненногоСреднегоЗаработка(НачалоРасчета, ОкончаниеРасчета, ДанныеНачислений)
	
	МассивПериодов = Новый Массив;
	
	ТекущийПериод = НачалоРасчета;
	
	Пока ТекущийПериод < ОкончаниеРасчета Цикл
		Если ДанныеНачислений.НайтиСтроки(Новый Структура("Период", ТекущийПериод)).Количество() = 0 Тогда
			МассивПериодов.Добавить(ТекущийПериод);
		КонецЕсли;
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);		
	КонецЦикла;	
	
	Возврат МассивПериодов;
	
КонецФункции

Процедура ОчиститьДанныеОСреднемДокумента(Сотрудник, ПорядокРасчета, НачалоПериода, ОкончаниеПериода, ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации = Неопределено)
	
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	
	Пока ТекущийМесяц <= НачалоМесяца(ОкончаниеПериода) Цикл 
		
		СтруктураПоиска = Новый Структура("Сотрудник, ПорядокРасчета, Период");
		СтруктураПоиска.Сотрудник = Сотрудник;
		СтруктураПоиска.ПорядокРасчета = ПорядокРасчета;
		СтруктураПоиска.Период = ТекущийМесяц;
		
		СтрокиДокументаНачисления = ДанныеОНачислениях.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из СтрокиДокументаНачисления Цикл
			ДанныеОНачислениях.Удалить(ДанныеОНачислениях.Индекс(НайденнаяСтрока));
		КонецЦикла;
		
		Если ТипЗнч(ПорядокРасчета) = Тип("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС") Тогда
			СтруктураПоиска = Новый Структура("Сотрудник,  Период", Сотрудник,  ТекущийМесяц);	
		КонецЕсли;	
		
		СтрокиДокументаВремя = ДанныеОВремени.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из СтрокиДокументаВремя Цикл
			ДанныеОВремени.Удалить(ДанныеОВремени.Индекс(НайденнаяСтрока));
		КонецЦикла;
		
		Если ДанныеОбИндексации <> Неопределено Тогда
			УдаляемыеСтрокиИндексации = ДанныеОбИндексации.НайтиСтроки(Новый Структура("Сотрудник, Период", Сотрудник, ТекущийМесяц));
			Для Каждого УдаляемыеСтрока Из УдаляемыеСтрокиИндексации Цикл 
				ДанныеОбИндексации.Удалить(ДанныеОбИндексации.Индекс(УдаляемыеСтрока));
			КонецЦикла;	
		КонецЕсли;	

		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(КоллекцияДанныхСреднего, НачалоПериода, ОкончаниеПериода, ПорядокРасчета = Неопределено, ГодГодовыхПремий = Неопределено) Экспорт
	
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
 	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаКоллекции Из КоллекцияДанныхСреднего Цикл
		ПодходитПоПериоду = СтрокаКоллекции.Период >= НачалоПериода И СтрокаКоллекции.Период <= ОкончаниеПериода;
		Если ГодГодовыхПремий <> Неопределено Тогда
			Если Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии().Найти(СтрокаКоллекции.СоставнаяЧасть) <> Неопределено Тогда
				ПодходитПоПериоду = СтрокаКоллекции.Год = ГодГодовыхПремий;
			КонецЕсли;
		КонецЕсли;
		
		// Если порядок расчета не указан, то это значит, что его не нужно учитывать, тогда:
		// - корректировки оставляем в любом случае
		// - не корректировки оставляем, если проходит по периоду (если не проходит - удаляем).
		
		// Если порядок расчета указан
		// - корректировки переносим (заменяем порядок расчета)
		// - не корректировки оставляем, если проходит по периоду.
		
		// Если не подходит по периоду, удаляем, но корректировки оставляем.
		Если Не ПодходитПоПериоду И СохраняемыеЗначения.Найти(СтрокаКоллекции.Источник) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			Продолжить;
		КонецЕсли;	
		
		Если ПорядокРасчета <> Неопределено Тогда
			Если СтрокаКоллекции.ПорядокРасчета <> ПорядокРасчета Тогда
				Если СохраняемыеЗначения.Найти(СтрокаКоллекции.Источник) <> Неопределено Тогда
					СтрокаКоллекции.ПорядокРасчета = ПорядокРасчета;
				Иначе
					// Не корректировка, которая не совпадает по порядку расчета
					// ее удаляем даже несмотря на то, что она проходит по периоду.
					УдаляемыеСтроки.Добавить(СтрокаКоллекции);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не ПодходитПоПериоду Тогда
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		КоллекцияДанныхСреднего.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанныеДляРасчетаСреднего(КоллекцияСтрок, Сотрудники)
	
	// Очищает данные для расчета среднего по указанным сотрудникам.
	Для Каждого Сотрудник Из Сотрудники Цикл
		ОтборСтрок = Новый Структура("Сотрудник", Сотрудник);
		УдаляемыеСтроки = КоллекцияСтрок.НайтиСтроки(ОтборСтрок);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			КоллекцияСтрок.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Составляет массив типов документов, в которых осуществляется локальный расчет показателей среднего заработка.
//
Функция ТипыДокументовРасчетаПоСреднемуЗаработку() Экспорт 
	Возврат Метаданные.ОпределяемыеТипы.ДокументСреднегоЗаработка.Тип.Типы();;
КонецФункции

// Устарела. 
// см. УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу.
//
Функция ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу() Экспорт
	Возврат УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
КонецФункции

#КонецОбласти

#Область БлокОбновленияИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.18";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьВторичныеДанныеОграниченияДоступом";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.57";
	Обработчик.Процедура = "УчетСреднегоЗаработка.СкорректироватьДанныеУчетаОбщегоСреднегоЗаработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.33";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьГодыПериодаРасчетаСреднегоЗаработкаВДокументах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.5";
	Обработчик.Процедура = "УчетСреднегоЗаработка.СменитьПериодРегистрацииЗаписиГодовойПремии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.5";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ОчиститьПолеГодДляНегодовыхПремий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.18";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьСведенияОКорректировкахВремени";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.11";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ИсправитьДанныеОВремениДляРасчетаСреднегоОбщийДокументаПереносДанных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.6";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ВосстановитьДанныеОВремениДляРасчетаСреднегоОбщий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.18";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ОбновитьСведенияОКорректировкахВремениПоСторноЗаписям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.4";
	Обработчик.Процедура = "УчетСреднегоЗаработка.СоздатьПоказателиСреднечасовогоСреднедневногоЗаработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.45";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ПеренестиСведенияДляРасчетаСреднегоЗаработкаПолученныеПриПереносеДанных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.49";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ИсправитьМесяцРегистрацииГодовыхПремий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.66";
	Обработчик.Процедура = "УчетСреднегоЗаработка.УдалитьДанныеКорректировокЗаМесяцыБезНачислений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.95";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ИсправитьНастройкуУчетаСреднегоЗаработка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.77";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ОбновитьКорректировкиСреднегоЗаработкаЗаМесяцыПереносаДанных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.80";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьИсточникДанныхДляРасчетаСреднегоЗаработкаВДокументах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.20";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьСведенияДокументовСреднегоЗаработка";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2245d069-45fe-4594-aee1-827f7e70169c");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сведений о документах расчета среднего заработка.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.45";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ОбновитьДанныеВремениСреднегоЗаработкаПрогулов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.8";
	Обработчик.Процедура = "УчетСреднегоЗаработка.ЗаполнитьОтражениеВБухучетеВРегистрахСреднегоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("554ff6db-1765-423c-b8ff-83fef7c19323");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сведений об отражении в бухучете в регистрах среднего заработка.'");
	
КонецПроцедуры

// Заполняет поля, необходимые для ограничения доступом в существующих регистрах.
//
Процедура ЗаполнитьВторичныеДанныеОграниченияДоступом() Экспорт
	
	// СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОНачислениях.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияОНачислениях
	|ГДЕ
	|	(СведенияОНачислениях.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ СведенияОНачислениях.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОНачислениях.Сотрудник КАК Сотрудник,
	|	СведенияОНачислениях.Месяц,
	|	СведенияОНачислениях.ПорядокРасчета,
	|	СведенияОНачислениях.СоставнаяЧасть,
	|	СведенияОНачислениях.Индексируется,
	|	СведенияОНачислениях.Год,
	|	СведенияОНачислениях.ДатаНачалаБазовогоПериода,
	|	СведенияОНачислениях.КоличествоМесяцев,
	|	СведенияОНачислениях.Сумма,
	|	СведенияОНачислениях.ДанныеИзУчетаСреднегоФСС,
	|	СправочникСотрудники.ГоловнаяОрганизация КАК Организация,
	|	СправочникСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияОНачислениях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
	|		ПО (СправочникСотрудники.Ссылка = СведенияОНачислениях.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = СведенияОНачислениях.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		НаборЗаписей = РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхСреднийЗаработокОбщий
	|ГДЕ
	|	(ДанныеОНачисленияхСреднийЗаработокОбщий.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ДанныеОНачисленияхСреднийЗаработокОбщий.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Период,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Регистратор КАК Регистратор,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.НомерСтроки,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Активность,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Сотрудник,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.ПорядокРасчета,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.СоставнаяЧасть,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Индексируется,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Год,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.ДатаНачалаБазовогоПериода,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.КоличествоМесяцев,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Сотрудник.ГоловнаяОрганизация КАК Организация,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеОНачисленияхСреднийЗаработокОбщий.Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхСреднийЗаработокОбщий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ДанныеОНачисленияхСреднийЗаработокОбщий.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет очистку измерений ДатаНачалаБазовогоПериода, Год, КоличествоМесяцев 
// для всех записей, не являющихся премиями.
//
Процедура СкорректироватьДанныеУчетаОбщегоСреднегоЗаработка() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	|ГДЕ
	|	НЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В (&Премии)
	|	И (ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ДатаНачалаБазовогоПериода <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год <> 0
	|			ИЛИ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.КоличествоМесяцев <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Период,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.НомерСтроки,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Активность,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Сотрудник,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ПорядокРасчета,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Индексируется,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В (&Премии)
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год
	|	КОНЕЦ КАК Год,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В (&Премии)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ДатаНачалаБазовогоПериода
	|	КОНЕЦ КАК ДатаНачалаБазовогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В (&Премии)
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.КоличествоМесяцев
	|	КОНЕЦ КАК КоличествоМесяцев,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Организация,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ФизическоеЛицо,
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	|ГДЕ
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Премии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

// Заполняет реквизиты, содержащие годы периода расчета среднего заработка, в связи с их появлением.
//
Процедура ЗаполнитьГодыПериодаРасчетаСреднегоЗаработкаВДокументах() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка,
	|	ГОД(БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало) КАК ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ГОД(БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание) КАК ПериодРасчетаСреднегоЗаработкаВторойГод
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	(БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод = 0
	|			ИЛИ БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ГОД(ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаНачало),
	|	ГОД(ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаОкончание)
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	(ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаПервыйГод = 0
	|			ИЛИ ОтпускПоУходуЗаРебенком.ПериодРасчетаСреднегоЗаработкаВторойГод = 0)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СменитьПериодРегистрацииЗаписиГодовойПремии() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНачислений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
	|ГДЕ
	|	ДанныеНачислений.СоставнаяЧасть В(&ГодовыеПремии)
	|	И ДанныеНачислений.ДатаНачалаБазовогоПериода <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДанныеНачислений.Период <> НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ДанныеНачислений.ДатаНачалаБазовогоПериода, ГОД), МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии)
	|				И ДанныеНачислений.ДатаНачалаБазовогоПериода <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ДанныеНачислений.ДатаНачалаБазовогоПериода, ГОД), МЕСЯЦ)
	|		ИНАЧЕ ДанныеНачислений.Период
	|	КОНЕЦ КАК Период,
	|	ДанныеНачислений.Регистратор КАК Регистратор,
	|	ДанныеНачислений.НомерСтроки КАК НомерСтроки,
	|	ДанныеНачислений.Активность КАК Активность,
	|	ДанныеНачислений.Сотрудник КАК Сотрудник,
	|	ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
	|	ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
	|	ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеНачислений.Индексируется КАК Индексируется,
	|	ДанныеНачислений.Год КАК Год,
	|	ДанныеНачислений.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
	|	ДанныеНачислений.КоличествоМесяцев КАК КоличествоМесяцев,
	|	ДанныеНачислений.Организация КАК Организация,
	|	ДанныеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеНачислений.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
	|ГДЕ
	|	ДанныеНачислений.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеНачислений.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ГодовыеПремии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПолеГодДляНегодовыхПремий() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНачислений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
	|ГДЕ
	|	ДанныеНачислений.СоставнаяЧасть В(&Премии)
	|	И НЕ ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии)
	|	И ДанныеНачислений.Год <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.Период КАК Период,
	|	ДанныеНачислений.Регистратор КАК Регистратор,
	|	ДанныеНачислений.НомерСтроки КАК НомерСтроки,
	|	ДанныеНачислений.Активность КАК Активность,
	|	ДанныеНачислений.Сотрудник КАК Сотрудник,
	|	ДанныеНачислений.ПорядокРасчета КАК ПорядокРасчета,
	|	ДанныеНачислений.СоставнаяЧасть КАК СоставнаяЧасть,
	|	ДанныеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ДанныеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ДанныеНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ДанныеНачислений.Индексируется КАК Индексируется,
	|	ВЫБОР
	|		КОГДА ДанныеНачислений.СоставнаяЧасть В (&Премии)
	|				И НЕ ДанныеНачислений.СоставнаяЧасть В (&ГодовыеПремии)
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеНачислений.Год
	|	КОНЕЦ КАК Год,
	|	ДанныеНачислений.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
	|	ДанныеНачислений.КоличествоМесяцев КАК КоличествоМесяцев,
	|	ДанныеНачислений.Организация КАК Организация,
	|	ДанныеНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеНачислений.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
	|ГДЕ
	|	ДанныеНачислений.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеНачислений.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Премии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии());
	Запрос.УстановитьПараметр("ГодовыеПремии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОКорректировкахВремени() Экспорт
	
	// С помощью регистра накопления не удается полноценно решать задачу учета времени для расчета среднего заработка.
	// В частности, из-за учета отработанных дней сотрудников, работающих по нескольким тарифным ставкам.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТВидыНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ЗачетОтработанногоВремени
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоЗаработка
	|			ГДЕ
	|				НастройкаСреднегоЗаработка.Ссылка = Начисления.Ссылка
	|				И НастройкаСреднегоЗаработка.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФПД.Регистратор,
	|	ФПД.НомерСтроки,
	|	ФПД.ВидРасчета,
	|	ФПД.Сотрудник,
	|	ФПД.Сторно,
	|	ФПД.ГрафикРаботы,
	|	ФПД.ПериодДействия КАК Месяц,
	|	ФПД.ПериодДействияНачало КАК НачалоПериода,
	|	ФПД.ПериодДействияКонец КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТФПДНачислений
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета В
	|				(ВЫБРАТЬ
	|					ВТВидыНачислений.Ссылка
	|				ИЗ
	|					ВТВидыНачислений)) КАК ФПД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФПД.Сотрудник,
	|	ФПД.Месяц,
	|	ФПД.ГрафикРаботы,
	|	ФПД.Сторно,
	|	ФПД.НачалоПериода,
	|	ФПД.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТФПДСотрудников
	|ИЗ
	|	ВТФПДНачислений КАК ФПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ФПДПересечения
	|		ПО (ФПДПересечения.Сотрудник = ФПД.Сотрудник)
	|			И (ФПДПересечения.Месяц = ФПД.Месяц)
	|			И (ФПДПересечения.ВидРасчета <> ФПД.ВидРасчета)
	|			И (НЕ(ФПДПересечения.Регистратор = ФПД.Регистратор
	|					И ФПДПересечения.НомерСтроки = ФПД.НомерСтроки))
	|			И (ФПДПересечения.НачалоПериода <= ФПД.ОкончаниеПериода)
	|			И (ФПДПересечения.ОкончаниеПериода >= ФПД.НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка КАК ДанныеВремениКорректировка
	|		ПО (ДанныеВремениКорректировка.Сотрудник = ФПД.Сотрудник)
	|			И (ДанныеВремениКорректировка.Месяц = ФПД.Месяц)
	|ГДЕ
	|	ДанныеВремениКорректировка.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиМесяцы.Сотрудник,
	|	СотрудникиМесяцы.Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТФПДСотрудников КАК СотрудникиМесяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыГрафиков.ГрафикРаботы,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТФПДСотрудников КАК ПериодыГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УчетРабочегоВремениРасширенный.СоздатьВТДатыПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	
	// Данные по календарю (сколько всего должно быть зарегистрировано дней в учете среднего заработка) соотносим с тем, 
	// что уже накоплено в ДанныеОВремениДляРасчетаСреднегоОбщий.
	// Разницу записываем с минусом в ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка.
	// Корректировку отработанных дней получаем "как есть" из учета начисленной зарплаты.
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФПД.Сотрудник,
	|	ФПД.Месяц,
	|	ФПД.Сторно,
	|	ДатыКалендаряПоФПД.Дата,
	|	ДатыКалендаряПоФПД.ДеньПоПятидневке,
	|	ДатыКалендаряПоФПД.ДеньПоШестидневке,
	|	ДатыКалендаряПоФПД.ЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТДатыПроизводственногоКалендаряПоСотрудникам
	|ИЗ
	|	ВТФПДСотрудников КАК ФПД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственногоКалендаряПоГрафикам КАК ДатыКалендаряПоФПД
	|		ПО (ДатыКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
	|			И (ДатыКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
	|			И (ДатыКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанноеВремяКорректировка.ПериодДействия КАК Месяц,
	|	ОтработанноеВремяКорректировка.Сотрудник,
	|	СУММА(ОтработанноеВремяКорректировка.ОтработаноДней) КАК ОтработаноДней
	|ПОМЕСТИТЬ ВТОтработанноеВремяКорректировка
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяКорректировка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
	|		ПО (СотрудникиМесяцы.Сотрудник = ОтработанноеВремяКорректировка.Сотрудник)
	|			И ОтработанноеВремяКорректировка.ПериодДействия = СотрудникиМесяцы.Месяц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
	|		ПО (ВидыНачислений.Ссылка = ОтработанноеВремяКорректировка.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанноеВремяКорректировка.ПериодДействия,
	|	ОтработанноеВремяКорректировка.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВремени.Сотрудник,
	|	ДанныеВремени.Месяц,
	|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
	|	-СУММА(ДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
	|	-СУММА(ДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
	|	-СУММА(ДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
	|	-СУММА(ДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
	|ПОМЕСТИТЬ ВТДанныеВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаДанныхКалендаря.Сотрудник КАК Сотрудник,
	|		КорректировкаДанныхКалендаря.Месяц КАК Месяц,
	|		0 КАК ОтработаноДней,
	|		СУММА(КорректировкаДанныхКалендаря.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
	|		СУММА(КорректировкаДанныхКалендаря.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
	|		СУММА(КорректировкаДанныхКалендаря.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
	|		СУММА(КорректировкаДанныхКалендаря.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
	|	ИЗ
	|		(ВЫБРАТЬ
	|			НакопленныеДанныеВремени.Сотрудник КАК Сотрудник,
	|			НАЧАЛОПЕРИОДА(НакопленныеДанныеВремени.Период, МЕСЯЦ) КАК Месяц,
	|			СУММА(НакопленныеДанныеВремени.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
	|			СУММА(НакопленныеДанныеВремени.ОтработаноЧасовПятидневка) КАК ОтработаноЧасовПятидневка,
	|			СУММА(НакопленныеДанныеВремени.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
	|			СУММА(НакопленныеДанныеВремени.ОтработаноДнейКалендарных) КАК ОтработаноДнейКалендарных
	|		ИЗ
	|			РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК НакопленныеДанныеВремени
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
	|				ПО (СотрудникиМесяцы.Сотрудник = НакопленныеДанныеВремени.Сотрудник)
	|					И (СотрудникиМесяцы.Месяц = НАЧАЛОПЕРИОДА(НакопленныеДанныеВремени.Период, МЕСЯЦ))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НакопленныеДанныеВремени.Сотрудник,
	|			НАЧАЛОПЕРИОДА(НакопленныеДанныеВремени.Период, МЕСЯЦ)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			РазличныеДатыПоСотрудникам.Сотрудник,
	|			РазличныеДатыПоСотрудникам.Месяц,
	|			-СУММА(ВЫБОР
	|					КОГДА РазличныеДатыПоСотрудникам.ДеньПоПятидневке
	|						ТОГДА ВЫБОР
	|								КОГДА РазличныеДатыПоСотрудникам.Сторно
	|									ТОГДА -1
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ),
	|			-СУММА(ВЫБОР
	|					КОГДА РазличныеДатыПоСотрудникам.Сторно = ИСТИНА
	|						ТОГДА -РазличныеДатыПоСотрудникам.ЧасовПоПятидневке
	|					ИНАЧЕ РазличныеДатыПоСотрудникам.ЧасовПоПятидневке
	|				КОНЕЦ),
	|			-СУММА(ВЫБОР
	|					КОГДА РазличныеДатыПоСотрудникам.ДеньПоШестидневке
	|						ТОГДА ВЫБОР
	|								КОГДА РазличныеДатыПоСотрудникам.Сторно
	|									ТОГДА -1
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ),
	|			-СУММА(ВЫБОР
	|					КОГДА РазличныеДатыПоСотрудникам.Сторно
	|						ТОГДА -1
	|					ИНАЧЕ 1
	|				КОНЕЦ)
	|		ИЗ
	|			ВТДатыПроизводственногоКалендаряПоСотрудникам КАК РазличныеДатыПоСотрудникам
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазличныеДатыПоСотрудникам.Сотрудник,
	|			РазличныеДатыПоСотрудникам.Месяц) КАК КорректировкаДанныхКалендаря
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаДанныхКалендаря.Сотрудник,
	|		КорректировкаДанныхКалендаря.Месяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтработанноеВремя.Сотрудник,
	|		ОтработанноеВремя.Месяц,
	|		ОтработанноеВремя.ОтработаноДней,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТОтработанноеВремяКорректировка КАК ОтработанноеВремя) КАК ДанныеВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВремени.Сотрудник,
	|	ДанныеВремени.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиМесяцы.Сотрудник КАК Сотрудник,
	|	СотрудникиМесяцы.Месяц КАК Месяц,
	|	ДанныеВремени.ОтработаноДней,
	|	ДанныеВремени.ОтработаноДнейПятидневка,
	|	ДанныеВремени.ОтработаноЧасовПятидневка,
	|	ДанныеВремени.ОтработаноДнейШестидневка,
	|	ДанныеВремени.ОтработаноДнейКалендарных
	|ИЗ
	|	ВТСотрудникиМесяцы КАК СотрудникиМесяцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремени КАК ДанныеВремени
	|		ПО СотрудникиМесяцы.Сотрудник = ДанныеВремени.Сотрудник
	|			И СотрудникиМесяцы.Месяц = ДанныеВремени.Месяц
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Месяц";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ОтработаноДней = 0 
					И Выборка.ОтработаноДнейПятидневка = 0 
					И Выборка.ОтработаноДнейШестидневка = 0 
					И Выборка.ОтработаноДнейКалендарных = 0 Тогда
					// Не записываем пустые строки.
					Продолжить;
				КонецЕсли;
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
			КонецЦикла;
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДанныеОВремениДляРасчетаСреднегоОбщийДокументаПереносДанных() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВремени.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПереносДанных.ТаблицаРегистров КАК ИменаРегистров
	|		ПО (ИменаРегистров.Ссылка = ДанныеВремени.Регистратор)
	|			И (ИменаРегистров.Имя = ""ДанныеОВремениДляРасчетаСреднегоОбщий"")
	|ГДЕ
	|	ДанныеВремени.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И ИменаРегистров.Имя ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВремени.Сотрудник,
	|	ДанныеВремени.Период КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
	|ГДЕ
	|	ДанныеВремени.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРегистраторы.Регистратор
	|ИЗ
	|	ВТРегистраторы КАК ВТРегистраторы";
	
	// Из-за ошибки под документ Перенос данных были вписаны движения по учету времени для расчета среднего заработка, 
	// которых "законно" под этими документами быть не должно (они размещаются под другими экземплярами документов).
	// Нужно удалить такие движения и обновить корректировки, которые могли быть ошибочно посчитаны для таких случаев.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	УчетСреднегоЗаработка.ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ВосстановитьДанныеОВремениДляРасчетаСреднегоОбщий() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ПОМЕСТИТЬ ВТВидыНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ЗачетОтработанногоВремени
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоЗаработка
	|			ГДЕ
	|				НастройкаСреднегоЗаработка.Ссылка = Начисления.Ссылка
	|				И НастройкаСреднегоЗаработка.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПрогула)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеОВремени
	|		ПО (ДанныеОВремени.Регистратор = Начисления.Регистратор)
	|			И (ДанныеОВремени.Сотрудник = Начисления.Сотрудник)
	|			И (ДанныеОВремени.Период = Начисления.ПериодДействия)
	|ГДЕ
	|	Начисления.ВидРасчета.ЗачетОтработанногоВремени
	|	И ДанныеОВремени.Сотрудник ЕСТЬ NULL 
	|	И НЕ Начисления.Регистратор ССЫЛКА Документ.ПереносДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Начисления.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФПД.Регистратор,
	|	ФПД.Сотрудник,
	|	ФПД.Сторно,
	|	ФПД.ГрафикРаботы,
	|	ФПД.ПериодДействия КАК Месяц,
	|	ФПД.ПериодДействияНачало КАК НачалоПериода,
	|	ФПД.ПериодДействияКонец КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТФПДСотрудников
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			Регистратор В
	|					(ВЫБРАТЬ
	|						Регистраторы.Регистратор
	|					ИЗ
	|						ВТРегистраторы КАК Регистраторы)
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						ВидыНачислений.Ссылка
	|					ИЗ
	|						ВТВидыНачислений КАК ВидыНачислений)) КАК ФПД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыГрафиков.ГрафикРаботы,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТФПДСотрудников КАК ПериодыГрафиков";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КатегорииПрогула", ПланыВидовРасчета.Начисления.КатегорииПрогула());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВремени.Регистратор,
	|	ДанныеВремени.Сотрудник,
	|	ДанныеВремени.Месяц КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010) КАК ПорядокРасчета,
	|	СУММА(ДанныеВремени.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ДанныеВремени.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(ДанныеВремени.ДнейПоПятидневке) КАК ОтработаноДнейПятидневка,
	|	СУММА(ДанныеВремени.ЧасовПоПятидневке) КАК ОтработаноЧасовПятидневка,
	|	СУММА(ДанныеВремени.ДнейПоШестидневке) КАК ОтработаноДнейШестидневка,
	|	СУММА(ДанныеВремени.ДнейКалендарных) КАК ОтработаноДнейКалендарных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФПД.Регистратор КАК Регистратор,
	|		ФПД.Сотрудник КАК Сотрудник,
	|		ФПД.Месяц КАК Месяц,
	|		0 КАК ОтработаноДней,
	|		0 КАК ОтработаноЧасов,
	|		СУММА(ВЫБОР
	|				КОГДА ФПД.Сторно = ИСТИНА
	|					ТОГДА -ДанныеКалендаряПоФПД.ДнейПоПятидневке
	|				ИНАЧЕ ДанныеКалендаряПоФПД.ДнейПоПятидневке
	|			КОНЕЦ) КАК ДнейПоПятидневке,
	|		СУММА(ВЫБОР
	|				КОГДА ФПД.Сторно = ИСТИНА
	|					ТОГДА -ДанныеКалендаряПоФПД.ЧасовПоПятидневке
	|				ИНАЧЕ ДанныеКалендаряПоФПД.ЧасовПоПятидневке
	|			КОНЕЦ) КАК ЧасовПоПятидневке,
	|		СУММА(ВЫБОР
	|				КОГДА ФПД.Сторно = ИСТИНА
	|					ТОГДА -ДанныеКалендаряПоФПД.ДнейПоШестидневке
	|				ИНАЧЕ ДанныеКалендаряПоФПД.ДнейПоШестидневке
	|			КОНЕЦ) КАК ДнейПоШестидневке,
	|		СУММА(ВЫБОР
	|				КОГДА ФПД.Сторно = ИСТИНА
	|					ТОГДА -ДанныеКалендаряПоФПД.ДнейКалендарных
	|				ИНАЧЕ ДанныеКалендаряПоФПД.ДнейКалендарных
	|			КОНЕЦ) КАК ДнейКалендарных
	|	ИЗ
	|		ВТФПДСотрудников КАК ФПД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаряПоФПД
	|			ПО (ДанныеКалендаряПоФПД.НачалоПериода = ФПД.НачалоПериода)
	|				И (ДанныеКалендаряПоФПД.ОкончаниеПериода = ФПД.ОкончаниеПериода)
	|				И (ДанныеКалендаряПоФПД.ГрафикРаботы = ФПД.ГрафикРаботы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ФПД.Регистратор,
	|		ФПД.Сотрудник,
	|		ФПД.Месяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтработанноеВремя.Регистратор,
	|		ОтработанноеВремя.Сотрудник,
	|		ОтработанноеВремя.ПериодДействия,
	|		СУММА(ОтработанноеВремя.ОтработаноДней),
	|		СУММА(ОтработанноеВремя.ОтработаноЧасов),
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремя
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|			ПО (Регистраторы.Регистратор = ОтработанноеВремя.Регистратор)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыНачислений КАК ВидыНачислений
	|			ПО (ВидыНачислений.Ссылка = ОтработанноеВремя.Начисление)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтработанноеВремя.Регистратор,
	|		ОтработанноеВремя.ПериодДействия,
	|		ОтработанноеВремя.Сотрудник) КАК ДанныеВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВремени.Регистратор,
	|	ДанныеВремени.Сотрудник,
	|	ДанныеВремени.Месяц
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеВремени.Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивРегистраторов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		МассивРегистраторов.Добавить(Выборка.Регистратор);
		НаборЗаписей = РегистрыНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// Для записанных наборов необходимо обновить корректировки.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНабора.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ДанныеНабора.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеНабора
	|ГДЕ
	|	ДанныеНабора.Регистратор В (&Регистраторы)";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистраторы", МассивРегистраторов);
	Запрос.Выполнить();
	
	УчетСреднегоЗаработка.ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ОбновитьСведенияОКорректировкахВремениПоСторноЗаписям() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Сторно = ИСТИНА
	|	И Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоЗаработка
	|			ГДЕ
	|				НастройкаСреднегоЗаработка.Ссылка = Начисления.ВидРасчета
	|				И НастройкаСреднегоЗаработка.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура СоздатьПоказателиСреднечасовогоСреднедневногоЗаработка() Экспорт
	
	ОбновлятьПовторноИспользуемыеЗначения = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднедневнойЗаработок") = Неопределено Тогда
		Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательСреднедневнойЗаработок();
		ОбновлятьПовторноИспользуемыеЗначения = Истина;
	КонецЕсли;
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		Если ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднечасовойЗаработок") = Неопределено Тогда
			Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательСреднечасовойЗаработок();
			ОбновлятьПовторноИспользуемыеЗначения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновлятьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиСведенияДляРасчетаСреднегоЗаработкаПолученныеПриПереносеДанных() Экспорт
	
	// Перенесенные ранее данные из предыдущих программ в регистры сведений 
	// необходимо перенести в регистры накопления для корректного совмещения с результатами перерасчета.
	// Для этого сведения за месяцы, в которых нет записей регистра накопления, выполненных документом "Перенос данных", 
	// формируем наборы записей регистров накопления и экземпляры документа "Перенос данных".
	// Записи же за те месяцы, в которых есть данные регистров накопления, выполненные документом "Перенос данных", 
	// копируем в пересозданный регистр сведений.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Собираем соответствие наборов записей по месяцам и организациям.
	ПоМесяцам = Новый Соответствие;
	
	// 1. Данные начислений для расчета общего среднего заработка.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ДанныеНачислений.Период, МЕСЯЦ) КАК Месяц,
		|	ДанныеНачислений.Сотрудник
		|ПОМЕСТИТЬ ВТДанныеНачисленийПереносДанных
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Регистратор ССЫЛКА Документ.ПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.Месяц КАК Период,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СоставнаяЧасть,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Индексируется,
		|	УдалитьСведенияНачислений.Год,
		|	УдалитьСведенияНачислений.ДатаНачалаБазовогоПериода,
		|	УдалитьСведенияНачислений.КоличествоМесяцев,
		|	УдалитьСведенияНачислений.Организация,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сумма,
		|	УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоФСС
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияНачислений.Сумма <> 0
		|	И УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоФСС = ЛОЖЬ
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.Организация,
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СоставнаяЧасть,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Индексируется,
		|	УдалитьСведенияНачислений.Год,
		|	УдалитьСведенияНачислений.ДатаНачалаБазовогоПериода,
		|	УдалитьСведенияНачислений.КоличествоМесяцев
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СоставнаяЧасть,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Индексируется,
		|	УдалитьСведенияНачислений.Год,
		|	УдалитьСведенияНачислений.ДатаНачалаБазовогоПериода,
		|	УдалитьСведенияНачислений.КоличествоМесяцев,
		|	УдалитьСведенияНачислений.Организация,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сумма,
		|	УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоФСС
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ НЕ NULL 
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СоставнаяЧасть,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Индексируется,
		|	УдалитьСведенияНачислений.Год,
		|	УдалитьСведенияНачислений.ДатаНачалаБазовогоПериода,
		|	УдалитьСведенияНачислений.КоличествоМесяцев,
		|	УдалитьСведенияНачислений.Организация,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сумма,
		|	УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоФСС
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоФСС = ИСТИНА
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.Организация,
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СоставнаяЧасть,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Индексируется,
		|	УдалитьСведенияНачислений.Год,
		|	УдалитьСведенияНачислений.ДатаНачалаБазовогоПериода,
		|	УдалитьСведенияНачислений.КоличествоМесяцев";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Выборка для записи в регистр накопления.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.Организация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.Организация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"].Добавить(), Выборка);
				НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"].Записывать = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Выборка для записи в регистр сведений.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.Организация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.Организация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"].Добавить(), Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Данные времени для расчета общего среднего заработка.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ДанныеВремени.Период, МЕСЯЦ) КАК Месяц,
		|	ДанныеВремени.Сотрудник
		|ПОМЕСТИТЬ ВТДанныеВремениПереносДанных
		|ИЗ
		|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
		|ГДЕ
		|	ДанныеВремени.Регистратор ССЫЛКА Документ.ПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияВремени.Сотрудник.ГоловнаяОрганизация КАК Организация,
		|	УдалитьСведенияВремени.Сотрудник,
		|	УдалитьСведенияВремени.Месяц,
		|	УдалитьСведенияВремени.Месяц КАК Период,
		|	УдалитьСведенияВремени.ПорядокРасчета,
		|	УдалитьСведенияВремени.ОтработаноДней,
		|	УдалитьСведенияВремени.ОтработаноЧасов,
		|	УдалитьСведенияВремени.ОтработаноДнейПятидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейШестидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейКалендарных,
		|	УдалитьСведенияВремени.ОтработаноЧасовПятидневка
		|ПОМЕСТИТЬ ВТДанныеДляНакопления
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОВремениДляРасчетаСреднегоОбщий КАК УдалитьСведенияВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремениПереносДанных КАК ДанныеВремениПереносДанных
		|		ПО (ДанныеВремениПереносДанных.Сотрудник = УдалитьСведенияВремени.Сотрудник)
		|			И (ДанныеВремениПереносДанных.Месяц = УдалитьСведенияВремени.Месяц)
		|ГДЕ
		|	ДанныеВремениПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияВремени.ДанныеИзУчетаСреднегоФСС = ЛОЖЬ
		|	И УдалитьСведенияВремени.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляНакопления.Сотрудник,
		|	ДанныеДляНакопления.Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	ВТДанныеДляНакопления КАК ДанныеДляНакопления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляНакопления.Организация,
		|	ДанныеДляНакопления.Сотрудник,
		|	ДанныеДляНакопления.Месяц,
		|	ДанныеДляНакопления.Период,
		|	ДанныеДляНакопления.ПорядокРасчета,
		|	ДанныеДляНакопления.ОтработаноДней,
		|	ДанныеДляНакопления.ОтработаноЧасов,
		|	ДанныеДляНакопления.ОтработаноДнейПятидневка,
		|	ДанныеДляНакопления.ОтработаноДнейШестидневка,
		|	ДанныеДляНакопления.ОтработаноДнейКалендарных,
		|	ДанныеДляНакопления.ОтработаноЧасовПятидневка
		|ИЗ
		|	ВТДанныеДляНакопления КАК ДанныеДляНакопления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляНакопления.Месяц,
		|	ДанныеДляНакопления.Организация,
		|	ДанныеДляНакопления.Сотрудник,
		|	ДанныеДляНакопления.ПорядокРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияВремени.Сотрудник.ГоловнаяОрганизация КАК Организация,
		|	УдалитьСведенияВремени.Сотрудник,
		|	УдалитьСведенияВремени.Месяц,
		|	УдалитьСведенияВремени.ПорядокРасчета,
		|	УдалитьСведенияВремени.ОтработаноДней,
		|	УдалитьСведенияВремени.ОтработаноЧасов,
		|	УдалитьСведенияВремени.ОтработаноДнейПятидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейШестидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейКалендарных,
		|	УдалитьСведенияВремени.ОтработаноЧасовПятидневка
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОВремениДляРасчетаСреднегоОбщий КАК УдалитьСведенияВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремениПереносДанных КАК ДанныеВремениПереносДанных
		|		ПО (ДанныеВремениПереносДанных.Сотрудник = УдалитьСведенияВремени.Сотрудник)
		|			И (ДанныеВремениПереносДанных.Месяц = УдалитьСведенияВремени.Месяц)
		|ГДЕ
		|	ДанныеВремениПереносДанных.Месяц ЕСТЬ НЕ NULL 
		|	И УдалитьСведенияВремени.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдалитьСведенияВремени.Сотрудник.ГоловнаяОрганизация,
		|	УдалитьСведенияВремени.Сотрудник,
		|	УдалитьСведенияВремени.Месяц,
		|	УдалитьСведенияВремени.ПорядокРасчета,
		|	УдалитьСведенияВремени.ОтработаноДней,
		|	УдалитьСведенияВремени.ОтработаноЧасов,
		|	УдалитьСведенияВремени.ОтработаноДнейПятидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейШестидневка,
		|	УдалитьСведенияВремени.ОтработаноДнейКалендарных,
		|	УдалитьСведенияВремени.ОтработаноЧасовПятидневка
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОВремениДляРасчетаСреднегоОбщий КАК УдалитьСведенияВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремениПереносДанных КАК ДанныеВремениПереносДанных
		|		ПО (ДанныеВремениПереносДанных.Сотрудник = УдалитьСведенияВремени.Сотрудник)
		|			И (ДанныеВремениПереносДанных.Месяц = УдалитьСведенияВремени.Месяц)
		|ГДЕ
		|	ДанныеВремениПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияВремени.ДанныеИзУчетаСреднегоФСС = ИСТИНА
		|	И УдалитьСведенияВремени.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьСведенияВремени.Месяц,
		|	УдалитьСведенияВремени.Сотрудник.ГоловнаяОрганизация,
		|	УдалитьСведенияВремени.Сотрудник,
		|	УдалитьСведенияВремени.ПорядокРасчета";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Выборка для записи в регистр накопления.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.Организация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.Организация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["ДанныеОВремениДляРасчетаСреднегоОбщий"].Добавить(), Выборка);
				НаборыЗаписей["ДанныеОВремениДляРасчетаСреднегоОбщий"].Записывать = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Выборка для записи в регистр сведений.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.Организация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.Организация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["СведенияОВремениДляРасчетаСреднегоОбщий"].Добавить(), Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// 3. Данные начислений для расчета среднего заработка ФСС
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТДанныеНачисленийПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ДанныеНачислений.Период, МЕСЯЦ) КАК Месяц,
		|	ДанныеНачислений.Сотрудник
		|ПОМЕСТИТЬ ВТДанныеНачисленийПереносДанных
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Регистратор ССЫЛКА Документ.ПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.ГоловнаяОрганизация,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.Месяц КАК Период,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Сумма
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияНачислений.Сумма <> 0
		|	И УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоОбщий = ЛОЖЬ
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ГоловнаяОрганизация,
		|	УдалитьСведенияНачислений.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.ГоловнаяОрганизация,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Сумма,
		|	УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоОбщий
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ НЕ NULL 
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдалитьСведенияНачислений.ГоловнаяОрганизация,
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ФизическоеЛицо,
		|	УдалитьСведенияНачислений.Сотрудник,
		|	УдалитьСведенияНачислений.ПорядокРасчета,
		|	УдалитьСведенияНачислений.СтатьяФинансирования,
		|	УдалитьСведенияНачислений.Сумма,
		|	УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоОбщий
		|ИЗ
		|	РегистрСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК УдалитьСведенияНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНачисленийПереносДанных КАК ДанныеНачисленийПереносДанных
		|		ПО (ДанныеНачисленийПереносДанных.Сотрудник = УдалитьСведенияНачислений.Сотрудник)
		|			И (ДанныеНачисленийПереносДанных.Месяц = УдалитьСведенияНачислений.Месяц)
		|ГДЕ
		|	ДанныеНачисленийПереносДанных.Месяц ЕСТЬ NULL 
		|	И УдалитьСведенияНачислений.ДанныеИзУчетаСреднегоОбщий = ИСТИНА
		|	И УдалитьСведенияНачислений.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдалитьСведенияНачислений.Месяц,
		|	УдалитьСведенияНачислений.ГоловнаяОрганизация,
		|	УдалитьСведенияНачислений.ФизическоеЛицо";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Выборка для записи в регистр накопления.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.ГоловнаяОрганизация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.ГоловнаяОрганизация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС"].Добавить(), Выборка);
				НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС"].Записывать = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Выборка для записи в регистр сведений.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		ПоОрганизациям = ПоМесяцам[Выборка.Месяц];
		Если ПоОрганизациям = Неопределено Тогда
			// Создаем наборы по месяцам.
			ПоОрганизациям = Новый Соответствие;
			ПоМесяцам.Вставить(Выборка.Месяц, ПоОрганизациям);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
			НаборыЗаписей = ПоОрганизациям[Выборка.ГоловнаяОрганизация];
			Если НаборыЗаписей = Неопределено Тогда
				НаборыЗаписей = НаборыЗаписейСреднегоЗаработкаДляПереноса();
				ПоОрганизациям.Вставить(Выборка.ГоловнаяОрганизация, НаборыЗаписей);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборыЗаписей["СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС"].Добавить(), Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// 5. Записываем документы и наборы записей.
	Для Каждого КлючИЗначениеПоМесяцам Из ПоМесяцам Цикл
		Месяц = КлючИЗначениеПоМесяцам.Ключ;
		ПоОрганизациям = КлючИЗначениеПоМесяцам.Значение;
		// В одном из регистров нет измерения Организация, поэтому его пишем по всем организациям в целом за месяц,
		// и прежний очищаем также.
		СведенияОВремениДляРасчетаСреднегоОбщий = РегистрыСведений.СведенияОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей();
		// Используем транзакцию для целостного сохранения изменений.
		НачатьТранзакцию();
		Для Каждого КлючИЗначениеПоОрганизациям Из ПоОрганизациям Цикл
			Организация = КлючИЗначениеПоОрганизациям.Ключ;
			НаборыЗаписей = КлючИЗначениеПоОрганизациям.Значение;
			// В транзакции записываем 
			// - документ Перенос данных, держатель движений,
			// - наборы записей накопления,
			// - наборы записей сведений,
			// - прежний набор сведений по месяцу и организации.
			
			// Заполняем документ.
			ДокументОбъект = Документы.ПереносДанных.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"].Отбор.Регистратор.Значение);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Организация = Организация;
			ДокументОбъект.ПериодРегистрации = Месяц;
			ДокументОбъект.Дата = Месяц;
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
			
			// Начисления общего заработка.
			Удалять = Ложь;
			НаборЗаписей = НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"];
			Если НаборЗаписей.Количество() > 0 Тогда
				ДокументОбъект.ТаблицаРегистров.Добавить().Имя = "ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий";
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				Удалять = Истина;
			КонецЕсли;
			НаборЗаписей = НаборыЗаписей["СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий"];
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Отбор.Месяц.Установить(Месяц);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				Удалять = Истина;
			КонецЕсли;
			// Удаляем прежний набор.
			Если Удалять Тогда
				НаборЗаписей = РегистрыСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Месяц.Установить(Месяц);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			
			// Время общего заработка.
			НаборЗаписей = НаборыЗаписей["ДанныеОВремениДляРасчетаСреднегоОбщий"];
			Если НаборЗаписей.Количество() > 0 Тогда
				ДокументОбъект.ТаблицаРегистров.Добавить().Имя = "ДанныеОВремениДляРасчетаСреднегоОбщий";
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			НаборЗаписей = НаборыЗаписей["СведенияОВремениДляРасчетаСреднегоОбщий"];
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборЗаписей, СведенияОВремениДляРасчетаСреднегоОбщий);
			
			// Начисления заработка ФСС.
			Удалять = Ложь;
			НаборЗаписей = НаборыЗаписей["ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС"];
			Если НаборЗаписей.Количество() > 0 Тогда
				ДокументОбъект.ТаблицаРегистров.Добавить().Имя = "ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС";
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				Удалять = Истина;
			КонецЕсли;
			НаборЗаписей = НаборыЗаписей["СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС"];
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Отбор.Месяц.Установить(Месяц);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Организация);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				Удалять = Истина;
			КонецЕсли;
			// Удаляем прежний набор.
			Если Удалять Тогда
				НаборЗаписей = РегистрыСведений.УдалитьСведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Месяц.Установить(Месяц);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Организация);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			Если ДокументОбъект.ТаблицаРегистров.Количество() > 0 Тогда
				ДокументОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		// Пишем наборы в целом за месяц (по всем организациям).
		Если СведенияОВремениДляРасчетаСреднегоОбщий.Количество() > 0 Тогда
			СведенияОВремениДляРасчетаСреднегоОбщий.Отбор.Месяц.Установить(Месяц);
			СведенияОВремениДляРасчетаСреднегоОбщий.ОбменДанными.Загрузка = Истина;
			СведенияОВремениДляРасчетаСреднегоОбщий.Записать();
		КонецЕсли;
		УдалитьСведенияОВремениДляРасчетаСреднегоОбщий = РегистрыСведений.УдалитьСведенияОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей();
		УдалитьСведенияОВремениДляРасчетаСреднегоОбщий.Отбор.Месяц.Установить(Месяц);
		УдалитьСведенияОВремениДляРасчетаСреднегоОбщий.ОбменДанными.Загрузка = Истина;
		УдалитьСведенияОВремениДляРасчетаСреднегоОбщий.Записать();
		// ..и только после этого фиксируем транзакцию.
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	// Обновляем корректировки общего среднего заработка.
	ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция НаборыЗаписейСреднегоЗаработкаДляПереноса()
	
	НаборыЗаписей = Новый Структура;
	
	ВременнаяСсылка = Документы.ПереносДанных.ПолучитьСсылку();
	
	ПодчиненныеНаборы = Новый Массив;
	ПодчиненныеНаборы.Добавить("ДанныеОВремениДляРасчетаСреднегоОбщий");
	ПодчиненныеНаборы.Добавить("ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий");
	ПодчиненныеНаборы.Добавить("ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС");
	Для Каждого ИмяНабора Из ПодчиненныеНаборы Цикл
		НаборЗаписей = РегистрыНакопления[ИмяНабора].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВременнаяСсылка);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборыЗаписей.Вставить(ИмяНабора, НаборЗаписей);
	КонецЦикла;
	
	НезависимыеНаборы = Новый Массив;
	НезависимыеНаборы.Добавить("СведенияОВремениДляРасчетаСреднегоОбщий");
	НезависимыеНаборы.Добавить("СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий");
	НезависимыеНаборы.Добавить("СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС");
	Для Каждого ИмяНабора Из НезависимыеНаборы Цикл
		НаборЗаписей = РегистрыСведений[ИмяНабора].СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборыЗаписей.Вставить(ИмяНабора, НаборЗаписей);
	КонецЦикла;
	
	Возврат НаборыЗаписей;
	
КонецФункции

Процедура ИсправитьМесяцРегистрацииГодовыхПремий() Экспорт 
	
	Запрос = Новый Запрос;
	
	ГодовыеПремии = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ГодовыеПремии();
	Запрос.УстановитьПараметр("СоставнаяЧасть", ГодовыеПремии);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Сотрудник КАК Сотрудник,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Месяц КАК Месяц,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ПорядокРасчета КАК ПорядокРасчета,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть КАК СоставнаяЧасть,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СтатьяФинансирования КАК СтатьяФинансирования,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СтатьяРасходов КАК СтатьяРасходов,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Индексируется КАК Индексируется,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год КАК Год,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ДатаНачалаБазовогоПериода КАК ДатаНачалаБазовогоПериода,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.КоличествоМесяцев КАК КоличествоМесяцев,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Организация КАК Организация,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Сумма КАК Сумма,
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.ДанныеИзУчетаСреднегоФСС КАК ДанныеИзУчетаСреднегоФСС
	               |ИЗ
	               |	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	               |ГДЕ
	               |	СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В(&СоставнаяЧасть)
	               |	И НЕ(СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год = ГОД(СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Месяц)
	               |				И СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Месяц = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Месяц, ГОД), МЕСЯЦ, 11))
	               |	И СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год <> 0";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей = РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		НаборЗаписей.Отбор.ПорядокРасчета.Установить(Выборка.ПорядокРасчета);
		НаборЗаписей.Отбор.СоставнаяЧасть.Установить(Выборка.СоставнаяЧасть);
		НаборЗаписей.Отбор.СтатьяФинансирования.Установить(Выборка.СтатьяФинансирования);
		НаборЗаписей.Отбор.СпособОтраженияЗарплатыВБухучете.Установить(Выборка.СпособОтраженияЗарплатыВБухучете);
		НаборЗаписей.Отбор.СтатьяРасходов.Установить(Выборка.СтатьяРасходов);
		НаборЗаписей.Отбор.ОблагаетсяЕНВД.Установить(Выборка.ОблагаетсяЕНВД);
		НаборЗаписей.Отбор.Индексируется.Установить(Выборка.Индексируется);
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		НаборЗаписей.Отбор.ДатаНачалаБазовогоПериода.Установить(Выборка.ДатаНачалаБазовогоПериода);
		НаборЗаписей.Отбор.КоличествоМесяцев.Установить(Выборка.КоличествоМесяцев);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Месяц = Дата(Выборка.Год, 12, 1);
		
		НаборЗаписей = РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(Месяц);
		НаборЗаписей.Отбор.ПорядокРасчета.Установить(Выборка.ПорядокРасчета);
		НаборЗаписей.Отбор.СоставнаяЧасть.Установить(Выборка.СоставнаяЧасть);
		НаборЗаписей.Отбор.СтатьяФинансирования.Установить(Выборка.СтатьяФинансирования);
		НаборЗаписей.Отбор.СпособОтраженияЗарплатыВБухучете.Установить(Выборка.СпособОтраженияЗарплатыВБухучете);
		НаборЗаписей.Отбор.СтатьяРасходов.Установить(Выборка.СтатьяРасходов);
		НаборЗаписей.Отбор.ОблагаетсяЕНВД.Установить(Выборка.ОблагаетсяЕНВД);
		НаборЗаписей.Отбор.Индексируется.Установить(Выборка.Индексируется);
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		НаборЗаписей.Отбор.ДатаНачалаБазовогоПериода.Установить(Выборка.ДатаНачалаБазовогоПериода);
		НаборЗаписей.Отбор.КоличествоМесяцев.Установить(Выборка.КоличествоМесяцев);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Месяц = Месяц;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	               |ГДЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоставнаяЧасть В(&СоставнаяЧасть)
	               |	И НЕ(ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год = ГОД(ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Период)
	               |				И ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Период = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Период, ГОД), МЕСЯЦ, 11))
	               |	И ТИПЗНАЧЕНИЯ(ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор) = ТИП(Документ.ПереносДанных)
	               |	И ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Год <> 0";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
	    НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ДанныеОНачислениях Из НаборЗаписей Цикл 
			Если ГодовыеПремии.Найти(ДанныеОНачислениях.СоставнаяЧасть) <> Неопределено
				И ДанныеОНачислениях.Год <> 0 И ДанныеОНачислениях.Период <> Дата(ДанныеОНачислениях.Год, 12, 1) Тогда 
				ДанныеОНачислениях.Период = Дата(ДанныеОНачислениях.Год, 12, 1);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДанныеКорректировокЗаМесяцыБезНачислений() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеКорректировки.Сотрудник,
		|	ДанныеКорректировки.Месяц
		|ИЗ
		|	РегистрСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка КАК ДанныеКорректировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Сотрудник = ДанныеКорректировки.Сотрудник)
		|			И (Начисления.ПериодДействия = ДанныеКорректировки.Месяц)
		|ГДЕ
		|	Начисления.ПериодДействия ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеКорректировки.Сотрудник");
		
	НаборЗаписей = РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоОбщийКорректировка.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура ИсправитьНастройкуУчетаСреднегоЗаработка() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИСТИНА) КАК ИспользоватьОтработаноПоПятидневке
		|ПОМЕСТИТЬ ВТНужноеПоложениеНастройки
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НастройкаСреднегоОбщего
		|ГДЕ
		|	НастройкаСреднегоОбщего.Значение В(&Премии)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НужноеПоложениеНастройки.ИспользоватьОтработаноПоПятидневке
		|ИЗ
		|	РегистрСведений.НастройкиРасчетаСреднегоЗаработка КАК Настройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНужноеПоложениеНастройки КАК НужноеПоложениеНастройки
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Настройки.ИспользоватьОтработаноПоПятидневке <> НужноеПоложениеНастройки.ИспользоватьОтработаноПоПятидневке");
		
	Запрос.УстановитьПараметр("Премии", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	// Запись настроек в регистр сведений.
	Настройки = РегистрыСведений.НастройкиРасчетаСреднегоЗаработка.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	Настройки.Записать();
	
КонецПроцедуры

Процедура ОбновитьКорректировкиСреднегоЗаработкаЗаМесяцыПереносаДанных() Экспорт 
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеВремени.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ДанныеВремени.Период, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТСотрудникиМесяцы
		|ИЗ
		|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеВремени
		|ГДЕ
		|	ДанныеВремени.Регистратор ССЫЛКА Документ.ПереносДанных";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	ОбновитьДанныеКорректировкиДнейДляРасчетаОбщегоСреднегоЗаработка(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗаполнитьИсточникДанныхДляРасчетаСреднегоЗаработкаВДокументах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	Документ.Командировка.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ИЗ
		|	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ИЗ
		|	Документ.Отпуск.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ИЗ
		|	Документ.Увольнение.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ТаблицаНачислений.Источник,
		|	ТаблицаНачислений.УдалитьКорректировка
		|ИЗ
		|	Документ.УвольнениеСписком.СреднийЗаработокОбщий КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПереносНачислений.Период, МЕСЯЦ) КАК Месяц,
		|	ПереносНачислений.Сотрудник
		|ПОМЕСТИТЬ ВТПереносНачислений
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ПереносНачислений
		|ГДЕ
		|	ПереносНачислений.Регистратор ССЫЛКА Документ.ПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ПОМЕСТИТЬ ВТВремя
		|ИЗ
		|	Документ.Командировка.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	Документ.Отпуск.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	Документ.Увольнение.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ТаблицаВремени.Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	Документ.УвольнениеСписком.ОтработанноеВремяДляСреднегоОбщий КАК ТаблицаВремени
		|ГДЕ
		|	ТаблицаВремени.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ПереносВремени.Период, МЕСЯЦ) КАК Месяц,
		|	ПереносВремени.Сотрудник
		|ПОМЕСТИТЬ ВТПереносВремени
		|ИЗ
		|	РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ПереносВремени
		|ГДЕ
		|	ПереносВремени.Регистратор ССЫЛКА Документ.ПереносДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПорядокРасчета,
		|	ТаблицаНачислений.СоставнаяЧасть,
		|	ТаблицаНачислений.СтатьяФинансирования,
		|	ТаблицаНачислений.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаНачислений.СтатьяРасходов,
		|	ТаблицаНачислений.ОблагаетсяЕНВД,
		|	ТаблицаНачислений.Период,
		|	ТаблицаНачислений.Индексируется,
		|	ТаблицаНачислений.Сумма,
		|	ТаблицаНачислений.УдалитьКорректировка,
		|	ТаблицаНачислений.Год,
		|	ТаблицаНачислений.ДатаНачалаБазовогоПериода,
		|	ТаблицаНачислений.КоличествоМесяцев,
		|	ВЫБОР
		|		КОГДА ТаблицаНачислений.УдалитьКорректировка = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТПереносНачислений КАК ПереносНачислений
		|						ГДЕ
		|							ПереносНачислений.Сотрудник = ТаблицаНачислений.Сотрудник
		|							И ПереносНачислений.Месяц = ТаблицаНачислений.Период)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|			КОНЕЦ
		|	КОНЕЦ КАК Источник
		|ИЗ
		|	ВТНачисления КАК ТаблицаНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНачислений.Ссылка,
		|	ТаблицаНачислений.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки,
		|	ТаблицаВремени.Сотрудник,
		|	ТаблицаВремени.ПорядокРасчета,
		|	ТаблицаВремени.Период,
		|	ТаблицаВремени.ОтработаноДней,
		|	ТаблицаВремени.ОтработаноДнейПятидневка,
		|	ТаблицаВремени.ОтработаноЧасов,
		|	ТаблицаВремени.ОтработаноДнейШестидневка,
		|	ТаблицаВремени.ОтработаноДнейКалендарных,
		|	ТаблицаВремени.НормаДнейПроизводственныйКалендарь,
		|	ТаблицаВремени.ОтработаноЧасовПятидневка,
		|	ТаблицаВремени.НормаЧасовПроизводственныйКалендарь,
		|	ВЫБОР
		|		КОГДА ТаблицаВремени.УдалитьКорректировка = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТПереносВремени КАК ПереносВремени
		|						ГДЕ
		|							ПереносВремени.Сотрудник = ТаблицаВремени.Сотрудник
		|							И ПереносВремени.Месяц = ТаблицаВремени.Период)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|			КОНЕЦ
		|	КОНЕЦ КАК Источник,
		|	ТаблицаВремени.УдалитьКорректировка
		|ИЗ
		|	ВТВремя КАК ТаблицаВремени
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаВремени.Ссылка,
		|	ТаблицаВремени.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка,
		|	МАКСИМУМ(ТаблицаДокументов.ОбрабатыватьНачисления) КАК ОбрабатыватьНачисления,
		|	МАКСИМУМ(ТаблицаДокументов.ОбрабатыватьВремя) КАК ОбрабатыватьВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНачислений.Ссылка КАК Ссылка,
		|		ИСТИНА КАК ОбрабатыватьНачисления,
		|		ЛОЖЬ КАК ОбрабатыватьВремя
		|	ИЗ
		|		ВТНачисления КАК ТаблицаНачислений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаВремени.Ссылка,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		ВТВремя КАК ТаблицаВремени) КАК ТаблицаДокументов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокументов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокументов.Ссылка";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ВыборкаПоНачислениям = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выбрать();
	ВыборкаПоОтработанномуВремени = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		Если ВыборкаДокументов.ОбрабатыватьНачисления = Истина Тогда
			ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				ДокументОбъект.СреднийЗаработокОбщий[ВыборкаПоНачислениям.НомерСтроки - 1].Источник = ВыборкаПоНачислениям.Источник;
			КонецЦикла;
		КонецЕсли;
		Если ВыборкаДокументов.ОбрабатыватьВремя = Истина Тогда
			ВыборкаПоОтработанномуВремени.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоОтработанномуВремени.Следующий() Цикл
				ДокументОбъект.ОтработанноеВремяДляСреднегоОбщий[ВыборкаПоОтработанномуВремени.НомерСтроки - 1].Источник = ВыборкаПоОтработанномуВремени.Источник;
			КонецЦикла;
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеВБухучетеВРегистрахСреднегоЗаработка(ПараметрыОбновления = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	БухучетНачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТБухучетНачисленияУдержания
	               |ИЗ
	               |	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисленияУдержанияПоСотрудникам
	               |ГДЕ
	               |	БухучетНачисленияУдержанияПоСотрудникам.Период >= ДАТАВРЕМЯ(2017, 1, 1)
	               |	И (БухучетНачисленияУдержанияПоСотрудникам.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |			ИЛИ БухучетНачисленияУдержанияПоСотрудникам.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТОбработанныеРегистраторы
	               |ИЗ
	               |	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленияУдержания КАК БухучетНачисленияУдержания
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор = БухучетНачисленияУдержания.Регистратор
	               |			И (ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |				ИЛИ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленияУдержания КАК БухучетНачисленияУдержания
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор = БухучетНачисленияУдержания.Регистратор
	               |			И (ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |				ИЛИ ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленияУдержания КАК БухучетНачисленияУдержания
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор = БухучетНачисленияУдержания.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеРегистраторы КАК ОбработанныеРегистраторы
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Регистратор = ОбработанныеРегистраторы.Регистратор
	               |ГДЕ
	               |	ОбработанныеРегистраторы.Регистратор ЕСТЬ NULL
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНачисленияУдержания КАК БухучетНачисленияУдержания
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор = БухучетНачисленияУдержания.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеРегистраторы КАК ОбработанныеРегистраторы
	               |		ПО ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Регистратор = ОбработанныеРегистраторы.Регистратор
	               |ГДЕ
	               |	ОбработанныеРегистраторы.Регистратор ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	БлокируемыеРегистры = Новый Соответствие;
	
	НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.СоздатьНаборЗаписей();
	ТипыРегистраторов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл 
		СписокРегистров = БлокируемыеРегистры[ТипРегистратора];
		Если СписокРегистров = Неопределено Тогда 
			СписокРегистров = Новый Массив;
			БлокируемыеРегистры.Вставить(ТипРегистратора, СписокРегистров);
		КонецЕсли;
		СписокРегистров.Добавить("РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий");
	КонецЦикла;
	
	НаборЗаписей = РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей();
	ТипыРегистраторов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл 
		СписокРегистров = БлокируемыеРегистры[ТипРегистратора];
		Если СписокРегистров = Неопределено Тогда 
			СписокРегистров = Новый Массив;
			БлокируемыеРегистры.Вставить(ТипРегистратора, СписокРегистров);
		КонецЕсли;
		СписокРегистров.Добавить("РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС");
	КонецЦикла;
	
	НаборЗаписей = РегистрыНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий.СоздатьНаборЗаписей();
	ТипыРегистраторов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл 
		СписокРегистров = БлокируемыеРегистры[ТипРегистратора];
		Если СписокРегистров = Неопределено Тогда 
			СписокРегистров = Новый Массив;
			БлокируемыеРегистры.Вставить(ТипРегистратора, СписокРегистров);
		КонецЕсли;
		СписокРегистров.Добавить("РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий");
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоФСС.СоздатьНаборЗаписей();
	ТипыРегистраторов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл 
		СписокРегистров = БлокируемыеРегистры[ТипРегистратора];
		Если СписокРегистров = Неопределено Тогда 
			СписокРегистров = Новый Массив;
			БлокируемыеРегистры.Вставить(ТипРегистратора, СписокРегистров);
		КонецЕсли;
		СписокРегистров.Добавить("РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС");
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		ТипРегистратора = ТипЗнч(Выборка.Регистратор);
		Если ТипРегистратора = Тип("ДокументСсылка.ПереносДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыОбновления <> Неопределено Тогда
			
			НачатьТранзакцию();
			
			СписокРегистров = БлокируемыеРегистры[ТипРегистратора];
			
			ВызваноИсключение = Ложь;
			Для Каждого ИмяРегистра Из СписокРегистров Цикл 
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра + ".НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				Попытка 
					Блокировка.Заблокировать();
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Предупреждение, , , ИмяРегистра);
					ВызваноИсключение = Истина;
					Прервать;
				КонецПопытки;
			КонецЦикла;
			
			Если ВызваноИсключение Тогда 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Движения = Неопределено;
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведенияДокумента.Неоперативный, Выборка.Регистратор, СтруктураВидовУчета, "ДанныеДляРасчетаСреднего", Движения);
		
		Для Каждого КлючИЗначение Из Движения Цикл 
			Движение = КлючИЗначение.Значение;
			Движение.ОбменДанными.Загрузка = Истина;
		КонецЦикла;
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Регистратор);
		МенеджерДокумента.ПровестиПоУчетам(Выборка.Регистратор, РежимПроведенияДокумента.Неоперативный, Ложь, "ДанныеДляРасчетаСреднего", Движения);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьДатуНачалаСобытия(ДокументСсылка, Сотрудник, ДатаНачалаСобытия) Экспорт
		
	Сведения = СведенияДокументаСреднегоЗаработка();
	Сведения.ДатаНачалаСобытия = ДатаНачалаСобытия;
	УчетСреднегоЗаработка.ЗаписатьСведенияДокументаПоСотруднику(ДокументСсылка, Сотрудник, Сведения);

КонецПроцедуры

Функция СведенияДокументаСреднегоЗаработка() Экспорт
	
	СведенияДокумента = Новый Структура("ДатаНачалаСобытия");
	Возврат СведенияДокумента;
	
КонецФункции

Процедура ЗаписатьСведенияДокументаПоСотруднику(ДокументСсылка, Сотрудник, СведенияДокумента) Экспорт
	
	ТаблицаСведений = ТаблицаСведенийДокументаСреднегоЗаработка();
	
	НоваяСтрока = ТаблицаСведений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СведенияДокумента);
	НоваяСтрока.Сотрудник = Сотрудник;
	
	ЗаписатьСведенияДокументаПоСотрудникам(ДокументСсылка, ТаблицаСведений);
	
КонецПроцедуры

Функция ТаблицаСведенийДокументаСреднегоЗаработка() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ПоляСведений = СведенияДокументаСреднегоЗаработка();
	Для Каждого КлючИЗначение Из ПоляСведений Цикл
		Таблица.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаписатьСведенияДокументаПоСотрудникам(ДокументСсылка, СведенияПоСотрудникам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДокументыСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументСсылка);
	
	Для Каждого СтрокаТаблицы Из СведенияПоСотрудникам Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ДокументОснование = ДокументСсылка;
	КонецЦикла;		
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьСведенияДокументовСреднегоЗаработка(ПараметрыОбновления) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДокументыСреднегоЗаработка.Ссылка КАК Ссылка,
		|	ДокументыСреднегоЗаработка.Сотрудник,
		|	ДокументыСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ДокументыСреднегоЗаработка.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка КАК Ссылка,
		|		ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|		ТаблицаДокумента.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		ТаблицаДокумента.ПериодРегистрации КАК ПериодРегистрации
		|	ИЗ
		|		Документ.БольничныйЛист КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаНачалаСобытия,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.Командировка КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаНачалаСобытия,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаНачалаСобытия,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.ОплатаПоСреднемуЗаработку КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.ОсновнойСотрудник,
		|		ТаблицаДокумента.ДатаНачала,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.ОтпускПоУходуЗаРебенком КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаНачалаСобытия,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.Отпуск КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаУвольнения,
		|		ТаблицаДокумента.ПериодРегистрации
		|	ИЗ
		|		Документ.Увольнение КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаДокумента.Ссылка,
		|		ТаблицаДокумента.Сотрудник,
		|		ТаблицаДокумента.ДатаУвольнения,
		|		ТаблицаДокумента.Ссылка.ПериодРегистрации
		|	ИЗ
		|		Документ.УвольнениеСписком.Сотрудники КАК ТаблицаДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСреднегоЗаработка КАК ДатыНачалаСобытия
		|			ПО (ДатыНачалаСобытия.ДокументОснование = ТаблицаДокумента.Ссылка)
		|	ГДЕ
		|		ДатыНачалаСобытия.ДокументОснование ЕСТЬ NULL ) КАК ДокументыСреднегоЗаработка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации УБЫВ,
		|	Ссылка";
		
	РезультатЗапроса = Запрос.Выполнить();
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		НаборЗаписей = РегистрыСведений.ДокументыСреднегоЗаработка.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.Ссылка);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДокументОснование = Выборка.Ссылка;
		КонецЦикла;		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеВремениСреднегоЗаработкаПрогулов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииПрогула", ПланыВидовРасчета.Начисления.КатегорииПрогула());
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистраторы.Регистратор
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтработанноеВремя.Регистратор КАК Регистратор,
		|		ОтработанноеВремя.ПериодДействия КАК ПериодДействия,
		|		ОтработанноеВремя.Сотрудник КАК Сотрудник,
		|		СУММА(ОтработанноеВремя.ОтработаноДней - ЕСТЬNULL(ДанныеСреднего.ОтработаноДней, 0)) КАК ОтклонениеДней,
		|		СУММА(ОтработанноеВремя.ОтработаноЧасов - ЕСТЬNULL(ДанныеСреднего.ОтработаноЧасов, 0)) КАК ОтклонениеЧасов
		|	ИЗ
		|		РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремя
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|			ПО (ВидыРасчета.Ссылка = ОтработанноеВремя.Начисление)
		|				И (ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПрогула))
		|				И (НЕ ОтработанноеВремя.Регистратор ССЫЛКА Документ.ПереносДанных)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОВремениДляРасчетаСреднегоОбщий КАК ДанныеСреднего
		|			ПО (ДанныеСреднего.Регистратор = ОтработанноеВремя.Регистратор)
		|				И ОтработанноеВремя.Сотрудник = ДанныеСреднего.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(ДанныеСреднего.Период, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОтработанноеВремя.Регистратор,
		|		ОтработанноеВремя.ПериодДействия,
		|		ОтработанноеВремя.Сотрудник
		|	
		|	ИМЕЮЩИЕ
		|		(СУММА(ОтработанноеВремя.ОтработаноДней - ЕСТЬNULL(ДанныеСреднего.ОтработаноДней, 0)) <> 0
		|			ИЛИ СУММА(ОтработанноеВремя.ОтработаноЧасов - ЕСТЬNULL(ДанныеСреднего.ОтработаноЧасов, 0)) <> 0)) КАК Регистраторы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		УстановитьПривилегированныйРежим(Истина);
		Отказ = Ложь;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Регистратор);
		МенеджерДокумента.ПровестиПоУчетам(Выборка.Регистратор, РежимПроведенияДокумента.Неоперативный, Отказ, "ДанныеДляРасчетаСреднего");
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДокументыСреднегоЗаработкаПоДатеНачалаСобытия(МенеджерВременныхТаблиц, ДокументСсылка, Сотрудник, ДатаНачалаСобытия) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДокументыСреднегоЗаработка.СоздатьНаборЗаписей();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДокументОснование = ДокументСсылка;
	НоваяСтрока.ДатаНачалаСобытия = ДатаНачалаСобытия;

	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти
