////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Бронь", "Дата", "ПодборПерсонала", "");
	
КонецПроцедуры

#КонецОбласти

// Позволяет уточнить право на ввод брони.
// Описание см. БронированиеПомещенийПереопределяемый.ПриОпределенииПраваБронирования.
//
Процедура ПриОпределенииПраваБронирования(Помещение, ЕстьПраво) Экспорт
	
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Помещение, "Ответственный");
	ЕстьПраво = (Ответственный = Пользователи.ТекущийПользователь());
	
КонецПроцедуры

// Переопределяет признак доступности изменения заданной записи рабочего календаря.
// Описание см. БронированиеПомещенийПереопределяемый.ПриОпределенииПраваИзмененияБрони.
//
Процедура ПриОпределенииПраваИзмененияБрони(Бронь, ЕстьПраво) Экспорт
	
	Если ПравоДоступа("Изменение", Бронь.Метаданные()) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЕстьПраво = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Бронь, "Пользователь") = Пользователь
			Или Пользователи.ЭтоПолноправныйПользователь(Пользователь));
		
	КонецЕсли;
	
КонецПроцедуры

// Не позволяет изменить бронь, созданную при планировании этапа.
// Описание см. БронированиеПомещенийПереопределяемый.ПередЗаписьюБрони.
//
Процедура ПередЗаписьюБрони(ЭтотОбъект, Отказ) Экспорт
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бронь", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РаботаСКандидатами.ЭтапРаботы КАК ЭтапРаботы,
	|	РаботаСКандидатами.Бронь КАК Бронь,
	|	РаботаСКандидатами.Кандидат КАК Кандидат
	|ИЗ
	|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|ГДЕ
	|	РаботаСКандидатами.Бронь = &Бронь";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой()
		И Не ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменениеСвязаннойБрони") Тогда
		
		ТаблицаКандидатов = Результат.Выгрузить();
		Кандидаты = ТаблицаКандидатов.ВыгрузитьКолонку("Кандидат");
		ЭтапРаботы = ТаблицаКандидатов[0].ЭтапРаботы;
		
		ОписаниеСобытия = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидаты, ЭтапРаботы);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Изменение связанной брони недоступно.
			|Для изменения данной брони необходимо отменить %1.'"), ОписаниеСобытия);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатыЗапросаСвязанныхБроней(МенеджерВременныхТаблиц, Помещение, ДатаНачала, ДатаОкончания, ИмяВТДанныеЭтапаРаботы = "ВТДанныеЭтапаРаботы")
	
	ПересекаемыеБрони = Новый Массив;
	Если ЗначениеЗаполнено(Помещение) Тогда
		
		Бронь = Документы.Бронь.СоздатьДокумент();
		Бронь.Помещение = Помещение;
		Бронь.ДатаНачала = ДатаНачала;
		Бронь.ДатаОкончания = ДатаОкончания;
		
		ТаблицаБроней = БронированиеПомещений.ПолучитьПересекающиесяБрони(Бронь);
		Если ТаблицаБроней.Количество() > 0 Тогда
			ПересекаемыеБрони = ТаблицаБроней.ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПересекаемыеБрони", ПересекаемыеБрони);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЭтапаРаботы.Бронь КАК Ссылка,
	|	ДанныеЭтапаРаботы.ЭтапРаботы КАК ЭтапРаботы
	|ПОМЕСТИТЬ ВТПрежниеБрони
	|ИЗ
	|	ВТДанныеЭтапаРаботы КАК ДанныеЭтапаРаботы
	|ГДЕ
	|	ДанныеЭтапаРаботы.Бронь <> ЗНАЧЕНИЕ(Документ.Бронь.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПересекающаясяБронь.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботаСКандидатами.ЭтапРаботы ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ЭтапыРаботыСКандидатами.ПустаяСсылка)
	|			ИНАЧЕ РаботаСКандидатами.ЭтапРаботы
	|		КОНЕЦ) КАК ЭтапРаботы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботаСКандидатами.Бронь ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Связанная
	|ПОМЕСТИТЬ ВТПересекаемыеБрони
	|ИЗ
	|	Документ.Бронь КАК ПересекающаясяБронь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|		ПО (РаботаСКандидатами.Бронь = ПересекающаясяБронь.Ссылка)
	|ГДЕ
	|	ПересекающаясяБронь.Ссылка В(&ПересекаемыеБрони)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересекающаясяБронь.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересекаемыеБрони.Ссылка КАК Ссылка,
	|	ПересекаемыеБрони.ЭтапРаботы КАК ЭтапРаботы
	|ПОМЕСТИТЬ ВТНеУчтенныеСвязанныеБрони
	|ИЗ
	|	ВТПересекаемыеБрони КАК ПересекаемыеБрони
	|ГДЕ
	|	НЕ ПересекаемыеБрони.Ссылка В
	|				(ВЫБРАТЬ
	|					ПрежниеБрони.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТПрежниеБрони КАК ПрежниеБрони)
	|	И ПересекаемыеБрони.Связанная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрежниеБрони.Ссылка КАК Ссылка,
	|	ПрежниеБрони.ЭтапРаботы КАК ЭтапРаботы,
	|	ВЫБОР
	|		КОГДА ПересекаемыеБрони.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пересекается
	|ПОМЕСТИТЬ ВТВсеСвязанныеБрони
	|ИЗ
	|	ВТПрежниеБрони КАК ПрежниеБрони
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПересекаемыеБрони КАК ПересекаемыеБрони
	|		ПО ПрежниеБрони.Ссылка = ПересекаемыеБрони.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НеУчтенныеСвязанныеБрони.Ссылка,
	|	НеУчтенныеСвязанныеБрони.ЭтапРаботы,
	|	ИСТИНА
	|ИЗ
	|	ВТНеУчтенныеСвязанныеБрони КАК НеУчтенныеСвязанныеБрони
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересекаемыеБрони.Ссылка КАК Ссылка
	|ИЗ
	|	ВТПересекаемыеБрони КАК ПересекаемыеБрони
	|ГДЕ
	|	НЕ ПересекаемыеБрони.Связанная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеСвязанныеБрони.Ссылка КАК Ссылка,
	|	ВсеСвязанныеБрони.ЭтапРаботы КАК ЭтапРаботы,
	|	ВсеСвязанныеБрони.Пересекается КАК Пересекается
	|ИЗ
	|	ВТВсеСвязанныеБрони КАК ВсеСвязанныеБрони
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботаСКандидатами.Бронь КАК Бронь,
	|	РаботаСКандидатами.Кандидат КАК Кандидат
	|ИЗ
	|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
	|ГДЕ
	|	РаботаСКандидатами.Бронь В
	|			(ВЫБРАТЬ
	|				ВсеСвязанныеБрони.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТВсеСвязанныеБрони КАК ВсеСвязанныеБрони)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Бронь УБЫВ,
	|	Кандидат";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеЭтапаРаботы", ИмяВТДанныеЭтапаРаботы);
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результаты;
	
КонецФункции

// Проверяет возможность брони помещения.
//
// Параметры:
//  Помещение		- СправочникСсылка.ТерриторииИПомещения		- помещение.
//  ДатаНачала		- Дата										- дата, с которой отбираются брони.
//  ДатаОкончания	- Дата										- дата, по которую отбираются брони.
//  ЭтапРаботы		- СправочникСсылка.ЭтапыРаботыСКандидатами	- ссылка на этап работы с кандидатами.
//  Кандидаты		- Массив 									- кандидаты (СправочникСсылка.Кандидаты).
// 
// Возвращаемое значение:
//  Булево - бронирование помещения возможно.
//
Функция ВозможнаБроньПомещенияПоЭтапуРаботы(Помещение, ДатаНачала, ДатаОкончания, ЭтапРаботы, Кандидаты) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПодборПерсонала.СоздатьВТДанныеЭтапаРаботыСКандидатами(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы);
	
	Результаты = РезультатыЗапросаСвязанныхБроней(МенеджерВременныхТаблиц, Помещение, ДатаНачала, ДатаОкончания);
	
	МаксИндекс = Результаты.ВГраница();
	РезультатНеСвязанныеБрони = Результаты[МаксИндекс - 2];
	Если Не РезультатНеСвязанныеБрони.Пустой() Тогда
		
		ВыборкаНеСвязанныеБрони = РезультатНеСвязанныеБрони.Выбрать();
		
		ТекстОшибки = НСтр("ru = 'Невозможно забронировать, так как на данное время уже введена бронь.'");
		Пока ВыборкаНеСвязанныеБрони.Следующий() Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + ВыборкаНеСвязанныеБрони.Ссылка;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	ВыборкаБрони = Результаты[МаксИндекс - 1].Выбрать();
	ВыборкаБроньДляКандидатов = Результаты[МаксИндекс].Выбрать();
	
	БронированиеЗапрещено = Ложь;
	ТекстОшибки = НСтр("ru = 'Планирование невыполнимо.'");
	КандидатыБрони = Новый Массив;
	
	Пока ВыборкаБроньДляКандидатов.СледующийПоЗначениюПоля("Бронь") Цикл
		
		ПрежняяБронь = ВыборкаБроньДляКандидатов.Бронь;
		
		ВыборкаБрони.НайтиСледующий(Новый Структура("Ссылка", ПрежняяБронь));
		БроньПересекается = ВыборкаБрони.Пересекается;
		ЭтапРаботыБрони = ВыборкаБрони.ЭтапРаботы;
		
		КандидатыБрони.Очистить();
		
		Пока ВыборкаБроньДляКандидатов.Следующий() Цикл
			КандидатыБрони.Добавить(ВыборкаБроньДляКандидатов.Кандидат);
		КонецЦикла;
		
		НеУчитываемыеКандидаты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(КандидатыБрони, Кандидаты);
		
		Если БроньПересекается 
			И (НеУчитываемыеКандидаты.Количество() <> 0 Или ЭтапРаботыБрони <> ЭтапРаботы) Тогда
			
			БронированиеЗапрещено = Истина;
			
			ОписаниеСобытия = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(КандидатыБрони, ЭтапРаботыБрони, , , Истина);
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрШаблон(НСтр("ru = 'Запланируйте этап, не бронируя помещения, или аннулируйте бронь ""%1"".
				|Для аннулирования брони необходимо отменить этап:
				|%2.'"), ПрежняяБронь, ОписаниеСобытия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если БронированиеЗапрещено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат Не БронированиеЗапрещено;
	
КонецФункции

Процедура ЗадатьБроньПоЭтапу(МенеджерВременныхТаблиц, Кандидаты, ЭтапРаботы, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИсключения = НСтр("ru = 'Бронирование не выполнено.'");
	
	Результаты = РезультатыЗапросаСвязанныхБроней(
		МенеджерВременныхТаблиц, 
		ЭтапРаботы.Помещение, 
		ЭтапРаботы.Период, 
		ЭтапРаботы.ПериодОкончание);
		
	МаксИндекс = Результаты.ВГраница();
	
	ВыборкаБрони = Результаты[МаксИндекс - 1].Выбрать();
	ВыборкаБроньДляКандидатов = Результаты[МаксИндекс].Выбрать();
	
	ПрежниеБрони = Новый Массив;
	Пока ВыборкаБрони.Следующий() Цикл
		ПрежниеБрони.Добавить(ВыборкаБрони.Ссылка);
	КонецЦикла;
	
	ПрежняяБронь = Документы.Бронь.ПустаяСсылка();
	НоваяБронь = Документы.Бронь.ПустаяСсылка();
	
	КандидатыБрони = Новый Массив;
	НеУчитываемыеКандидаты = Новый Массив;
	НовыеКандидаты = Новый Массив;
	
	Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		
		РезультатНеСвязанныеБрони = Результаты[МаксИндекс - 2];
		
		// Проверка возможности бронирования выполняется при планировании в форме "Этапа работы с кандидатом".
		Если Не РезультатНеСвязанныеБрони.Пустой() Тогда
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Пока ВыборкаБроньДляКандидатов.СледующийПоЗначениюПоля("Бронь") Цикл
		
		ПрежняяБронь = ВыборкаБроньДляКандидатов.Бронь;
		
		ВыборкаБрони.НайтиСледующий(Новый Структура("Ссылка", ПрежняяБронь));
		БроньПересекается = ВыборкаБрони.Пересекается;
		ЭтапРаботыБрони = ВыборкаБрони.ЭтапРаботы;
		
		Если БроньПересекается И ЭтапРаботыБрони <> ЭтапРаботы Тогда
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		КандидатыБрони.Очистить();
		
		Пока ВыборкаБроньДляКандидатов.Следующий() Цикл
			КандидатыБрони.Добавить(ВыборкаБроньДляКандидатов.Кандидат);
		КонецЦикла;
		
		НеУчитываемыеКандидаты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(КандидатыБрони, Кандидаты);
		НовыеКандидаты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Кандидаты, КандидатыБрони);
		
		Если НеУчитываемыеКандидаты.Количество() = 0 Тогда
			
			Если ПрежниеБрони.Количество() > 1 
				И ЭтапРаботы.Состояние <> Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
				БронированиеПомещенийВызовСервера.УстановитьПометкуУдаления(ПрежняяБронь, Истина, Истина);
			КонецЕсли;
			
		Иначе
			
			Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда 
				
				Если БроньПересекается Тогда
					ВызватьИсключение ТекстИсключения;
				Иначе
					
					// Обновляем описание старой брони для не тронутых кандидатов.
					ПрежниеДанныеБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрежняяБронь, "Помещение,ДатаНачала,ДатаОкончания");
					
					ДанныеЗаполнения = ДанныеОбновляемойБрони();
					ДанныеЗаполнения.Ссылка = ПрежняяБронь;
					ДанныеЗаполнения.Помещение = ПрежниеДанныеБрони.Помещение;
					ДанныеЗаполнения.ДатаНачала = ПрежниеДанныеБрони.ДатаНачала;
					ДанныеЗаполнения.ДатаОкончания = ПрежниеДанныеБрони.ДатаОкончания;
					ДанныеЗаполнения.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.Событие;
					
					Комментарий = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(НеУчитываемыеКандидаты, ЭтапРаботы.Этап, , , Истина);
					ДанныеЗаполнения.Вставить("Комментарий", Комментарий);
					
					ИзменяемыеБрони = Новый Массив;
					ИзменяемыеБрони.Добавить(ДанныеЗаполнения);
					
					РезультатыБроней = БронированиеПомещенийВызовСервера.ИзменитьБрони(ИзменяемыеБрони, Истина);
					
					// Создаем новую бронь для текущих кандидатов.
					Комментарий = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидаты, ЭтапРаботы.Этап, , , Истина);
					НоваяБронь = НоваяБронь(ЭтапРаботы.Помещение, ЭтапРаботы.Период, ЭтапРаботы.ПериодОкончание, Комментарий);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПрежниеБрони.Количество() <> 1 Тогда
		
		Если ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован 
			И ЗначениеЗаполнено(ЭтапРаботы.Помещение) Тогда
			
			Комментарий = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидаты, ЭтапРаботы.Этап, , , Истина);
			НоваяБронь = НоваяБронь(ЭтапРаботы.Помещение, ЭтапРаботы.Период, ЭтапРаботы.ПериодОкончание, Комментарий);
			
		КонецЕсли;
		
	Иначе
		
		Если НеУчитываемыеКандидаты.Количество() = 0 Тогда
			
			Если (Не ЗначениеЗаполнено(ЭтапРаботы.Состояние) 
				Или ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен
				Или (ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован
				И Не ЗначениеЗаполнено(ЭтапРаботы.Помещение))) Тогда
				
				БронированиеПомещенийВызовСервера.УстановитьПометкуУдаления(ПрежняяБронь, Истина, Истина);
				
			ИначеЕсли ЭтапРаботы.Состояние = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
				
				ПрежниеДанныеБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрежняяБронь, "Помещение,ДатаНачала,ДатаОкончания");
				ИзменилосьПомещение = ПрежниеДанныеБрони.Помещение <> ЭтапРаботы.Помещение;
				ДобавилисьКандидаты = НовыеКандидаты.Количество() <> 0;
				
				ИзмениласьДата = ПрежниеДанныеБрони.ДатаНачала <> ЭтапРаботы.Период
					Или ПрежниеДанныеБрони.ДатаОкончания <> ЭтапРаботы.ПериодОкончание;
				
				Если ИзмениласьДата Или ИзменилосьПомещение Или ДобавилисьКандидаты Тогда
					
					ДанныеЗаполнения = ДанныеОбновляемойБрони();
					ДанныеЗаполнения.Ссылка = ПрежняяБронь;
					ДанныеЗаполнения.Помещение = ЭтапРаботы.Помещение;
					ДанныеЗаполнения.ДатаНачала = ЭтапРаботы.Период;
					ДанныеЗаполнения.ДатаОкончания = ЭтапРаботы.ПериодОкончание;
					ДанныеЗаполнения.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.Событие;
					
					Если ИзменилосьПомещение Или ДобавилисьКандидаты Тогда
						
						Комментарий = Справочники.ЭтапыРаботыСКандидатами.ОписаниеПланируемогоЭтапа(Кандидаты, ЭтапРаботы.Этап, , , Истина);
						ДанныеЗаполнения.Вставить("Комментарий", Комментарий);
						
					КонецЕсли;
					
					ИзменяемыеБрони = Новый Массив;
					ИзменяемыеБрони.Добавить(ДанныеЗаполнения);
					
					РезультатыБроней = БронированиеПомещенийВызовСервера.ИзменитьБрони(ИзменяемыеБрони, Истина);
					
				КонецЕсли;
				
				НоваяБронь = ПрежняяБронь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтапРаботы.Вставить("Бронь", НоваяБронь);
	
КонецПроцедуры

Функция ДанныеОбновляемойБрони()
	
	Возврат Новый Структура("Ссылка,Помещение,ТипЗаписи,ДатаНачала,ДатаНачалаИсходная,ДатаОкончания");
	
КонецФункции

Функция НоваяБронь(Помещение, ДатаНачала, ДатаОкончания, Комментарий)
	
	ДанныеЗаполнения = Новый Структура("Помещение,ДатаНачала,ДатаОкончания,Комментарий,Автор");
	ДанныеЗаполнения.Автор = Пользователи.ТекущийПользователь();
	ДанныеЗаполнения.Помещение = Помещение;
	ДанныеЗаполнения.ДатаНачала = ДатаНачала;
	ДанныеЗаполнения.ДатаОкончания = ДатаОкончания;
	ДанныеЗаполнения.Комментарий = Комментарий;
	
	Возврат БронированиеПомещенийВызовСервера.СоздатьБронь(ДанныеЗаполнения).Бронь;
	
КонецФункции

#КонецОбласти
