
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров открываемой формы редактирования состава начислений и удержаний.
//
// Ключи возвращаемой структуры:
//		ВладелецНачисленийИУдержаний - Справочник ссылка Сотрудники или ШтатноеРасписание
//		ДатаРедактирования.
//		Организация
//		Подразделение
//		ГрафикРаботы
//		РежимРаботы - Число см. описание к ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит.
//      Показатели - Коллекция показателей со значениями.
//		ДополнитьНедостающиеЗначенияПоказателей - указывает, что значения показателей, которые не переданы
//						в параметре Показатели необходимо прочитать из текущих данных о значениях показателей.
//		ОписаниеТаблицыНачислений - Структура
//						Используется - Булево
//						Таблица - коллекция с начислениями и размерами вкладов в ФОТ.
//						ТолькоПросмотр - Булево
//						ИзменятьСоставВидовРасчета - Булево
//						ИзменятьЗначенияПоказателей - Булево
//						ПоказатьФОТ - Булево, при открытии поля вкладов в ФОТ отображаются.
//						НомерТаблицы - Число
//		ОписаниеТаблицыУдержаний - Структура
//						Используется - Булево
//						Таблица - коллекция с удержаниями.
//						ТолькоПросмотр - Булево
//						ИзменятьСоставВидовРасчета - Булево
//						ИзменятьЗначенияПоказателей - Булево
//						НомерТаблицы - Число
//
Функция ПараметрыРедактированияСоставаНачисленийИУдержаний() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ВладелецНачисленийИУдержаний");
	ПараметрыОткрытия.Вставить("ДатаРедактирования");
	ПараметрыОткрытия.Вставить("ВремяРегистрации", '00010101000000');
	ПараметрыОткрытия.Вставить("Организация");
	ПараметрыОткрытия.Вставить("Подразделение");
	ПараметрыОткрытия.Вставить("Должность");
	ПараметрыОткрытия.Вставить("ДолжностьПоШтатномуРасписанию");
	ПараметрыОткрытия.Вставить("ГрафикРаботы");
	ПараметрыОткрытия.Вставить("РежимРаботы");
	ПараметрыОткрытия.Вставить("Показатели");
	ПараметрыОткрытия.Вставить("РазрядКатегория");
	ПараметрыОткрытия.Вставить("ТарифнаяСетка");
	ПараметрыОткрытия.Вставить("КоличествоСтавок");
	ПараметрыОткрытия.Вставить("Территория");
	ПараметрыОткрытия.Вставить("УсловияТруда");
	ПараметрыОткрытия.Вставить("ВоинскоеСпециальноеЗвание");
	ПараметрыОткрытия.Вставить("КлассныйЧинРанг");
	
	ПараметрыОткрытия.Вставить("ДополнитьНедостающиеЗначенияПоказателей", Ложь);
	
	ПараметрыОткрытия.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремениИспользуется", Ложь);
	ПараметрыОткрытия.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени");
	ПараметрыОткрытия.Вставить("СовокупнаяТарифнаяСтавка");
	ПараметрыОткрытия.Вставить("ВидТарифнойСтавки");
	ПараметрыОткрытия.Вставить("ТарифнаяСетка");

	ПараметрыОткрытия.Вставить("СпособРасчетаАвансаИспользуется", Ложь);
	ПараметрыОткрытия.Вставить("СпособРасчетаАванса");
	ПараметрыОткрытия.Вставить("Аванс");
	
	ОписаниеТаблицыНачислений = Новый Структура;
	ОписаниеТаблицыНачислений.Вставить("Используется", Ложь);
	ОписаниеТаблицыНачислений.Вставить("Таблица");
	ОписаниеТаблицыНачислений.Вставить("ТолькоПросмотр", Ложь);
	ОписаниеТаблицыНачислений.Вставить("ИзменятьСоставВидовРасчета", Истина);
	ОписаниеТаблицыНачислений.Вставить("ИзменятьЗначенияПоказателей", Истина);
	ОписаниеТаблицыНачислений.Вставить("СодержитПолеДействие", Истина);
	ОписаниеТаблицыНачислений.Вставить("ПоказатьФОТ", Ложь);
	ОписаниеТаблицыНачислений.Вставить("НомерТаблицы", 0);
	ОписаниеТаблицыНачислений.Вставить("РедактируемыеНачисления", Новый Массив);
	ОписаниеТаблицыНачислений.Вставить("СодержитПоляПериодаНачисления", Ложь);
	
	ПараметрыОткрытия.Вставить("ОписаниеТаблицыНачислений", ОписаниеТаблицыНачислений);
	
	ОписаниеТаблицыУдержаний = Новый Структура;
	ОписаниеТаблицыУдержаний.Вставить("Используется", Ложь);
	ОписаниеТаблицыУдержаний.Вставить("Таблица");
	ОписаниеТаблицыУдержаний.Вставить("ТолькоПросмотр", Ложь);
	ОписаниеТаблицыУдержаний.Вставить("ИзменятьСоставВидовРасчета", Истина);
	ОписаниеТаблицыУдержаний.Вставить("ИзменятьЗначенияПоказателей", Истина);
	ОписаниеТаблицыУдержаний.Вставить("СодержитПолеДействие", Истина);
	ОписаниеТаблицыУдержаний.Вставить("НомерТаблицы", 0);
	ОписаниеТаблицыУдержаний.Вставить("СодержитПоляПериодаНачисления", Ложь);
	
	ПараметрыОткрытия.Вставить("ОписаниеТаблицыУдержаний", ОписаниеТаблицыУдержаний);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Возвращает имя реквизита, содержащего максимальное количество показателей расчета
// отображаемых в форме документа-начислятеля.
Функция ИмяРеквизитаМаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ОписаниеТаблицыВидовРасчета) Экспорт
	
	Возврат ИмяРеквизитаМаксимальноеКоличествоПоказателей(ОписаниеТаблицыВидовРасчета.ИмяТаблицы);
	
КонецФункции

// Возвращает максимальное количество показателей расчета, 
// отображаемых в таблице формы документа-начислятеля.
// Параметры: 
//		Форма, 
//		ИмяТаблицы - строка с именем таблицы формы.
Функция МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы, ИмяПВР = "Начисления", РежимРаботы = 2) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаМаксимальноеКоличествоПоказателей(ИмяТаблицы)) Тогда
		Возврат Форма[ИмяРеквизитаМаксимальноеКоличествоПоказателей(ИмяТаблицы)];
	Иначе
		Возврат ЗарплатаКадрыРасширенныйВызовСервера.КоличествоОтображаемыхПоказателей(РежимРаботы, ИмяПВР, Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецФункции

// Возвращает максимальное количество показателей расчета, 
// отображаемых в таблице формы документа-начислятеля.
// Параметры: 
//		Форма, 
//		ОписаниеТаблицыВидовРасчета - описание таблицы формы, см. ОписаниеТаблицыРасчета().
Функция МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР = "Начисления", РежимРаботы = 0) Экспорт
	
	Возврат МаксимальноеКоличествоПоказателей(Форма, ОписаниеТаблицыВидовРасчета.ИмяТаблицы, ИмяПВР, РежимРаботы);
	
КонецФункции

// Переключает видимость колонок таблицы формы с показателями расчета для документов-начислений.
Процедура УстановитьВидимостьГруппыПоказателей(Форма, ИмяТаблицы, Видимость) Экспорт 
	
	Если ИмяТаблицы = "Удержания"
		Или ИмяТаблицы = "УдержанияПерерасчет" Тогда
		ИмяПВР = "Удержания";
	Иначе
		ИмяПВР = "Начисления";
	КонецЕсли;
	
	Если МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы, ИмяПВР) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяТаблицы + "Показатели", "Видимость", Видимость);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текст комментария для таблиц документов, управляющих составом плановых начислений.
Процедура УстановитьКомментарииДействийСНачислением(СтрокаНачисления, МаксимальноеКоличествоПоказателей, РежимРаботы, ОписаниеТаблицыВидовРасчета = Неопределено, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если ТипЗнч(СтрокаНачисления) = Тип("Структура") И НЕ СтрокаНачисления.Свойство("Действие") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаНачисления) = Тип("ДанныеФормыЭлементКоллекции") И НЕ СтрокаНачисления.Свойство("Действие") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаНачисления) = Тип("Структура") И НЕ СтрокаНачисления.Свойство("Комментарий") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаНачисления) = Тип("ДанныеФормыЭлементКоллекции") И НЕ СтрокаНачисления.Свойство("Комментарий") Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровыватьИспользованиеНачисления = ЗначениеЗаполнено(ДатаСобытия) И СтрокаНачисления.Свойство("ДатаОкончанияНачисления");
	Если РасшифровыватьИспользованиеНачисления Тогда
		ПредставлениеДатаОкончанияНачисления = Формат(СтрокаНачисления.ДатаОкончанияНачисления, "ДЛФ=D");
	Иначе
		ПредставлениеДатаОкончанияНачисления = "";
	КонецЕсли;
	
	Если СтрокаНачисления.Свойство("ХарактерНачисления") Тогда
		ХарактерНачисления = СтрокаНачисления.ХарактерНачисления;
	Иначе
		ХарактерНачисления = ПредопределенноеЗначение("Перечисление.ХарактерПлановогоНачисления.ПустаяСсылка");
	КонецЕсли;
	
	Если СтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
		
		СтрокаНачисления.Комментарий = НСтр("ru = 'Отменено'");
		Если РасшифровыватьИспользованиеНачисления Тогда
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				
				Если ДатаОкончания < СтрокаНачисления.ДатаОкончанияНачисления
					Или Не ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления) Тогда
					
					СтрокаНачисления.Комментарий = СтрокаНачисления.Комментарий + " "
						+ НСтр("ru='по'") + " " + Формат(ДатаОкончания, "ДЛФ=D");
					
					Если ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления)
						И СтрокаНачисления.ИспользуетсяПоОкончании Тогда
						
						СтрокаНачисления.Комментарий = СтрокаНачисления.Комментарий + ", "
							+ НСтр("ru='затем начисляется до'") + " " + ПредставлениеДатаОкончанияНачисления;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Не СтрокаНачисления.ДействующийВидРасчета И РасшифровыватьИспользованиеНачисления И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления) Тогда
		
		СтрокаНачисления.Комментарий = НСтр("ru = 'Будет начисляться с'") + " " + ПредставлениеДатаОкончанияНачисления;
		
	ИначеЕсли СтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") Тогда
		
		СтрокаНачисления.Комментарий = НСтр("ru = 'Новое начисление'");
		Если РасшифровыватьИспользованиеНачисления Тогда
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				
				СтрокаНачисления.Комментарий = СтрокаНачисления.Комментарий + " "
					+ НСтр("ru = 'по'") + " " + Формат(ДатаОкончания, "ДЛФ=D");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НачисляетсяВЦеломЗаМесяц = Ложь;
		Если ОписаниеТаблицыВидовРасчета <> Неопределено И ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета Тогда 
			
			ВидРасчета = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
			Если ЗначениеЗаполнено(ВидРасчета) Тогда 
				
				#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
					ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
				#Иначе
					ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
				#КонецЕсли
					
				Если ВидРасчетаИнфо.ЭтоНачисление Тогда 
					НачисляетсяВЦеломЗаМесяц = ВидРасчетаИнфо.НачисляетсяВЦеломЗаМесяц;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Комментарий = "";
		КомментарийТекущегоЗначения = "";
		НаименованиеПервогоПоказателя = "";
		КоличествоИзмененныхПоказателей = 0;
		Для Сч = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Если РежимРаботы = 0 Тогда
				
				Если СтрокаНачисления.Свойство("ТекущееЗначение") Тогда
					
					ТекущееЗначение = ?(СтрокаНачисления["ТекущееЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["ТекущееЗначение" + Сч]);
					Значение = ?(СтрокаНачисления["Значение" + Сч] = Неопределено, 0, СтрокаНачисления["Значение" + Сч]);
					
					Если Значение > ТекущееЗначение  Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен %1 (+%2);'"),
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					ИначеЕсли  Значение < ТекущееЗначение Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен %1 (%2);'"),
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					КонецЕсли;
					
				КонецЕсли;
					
				Если СтрокаНачисления.Свойство("ТекущееМинимальноеЗначение") Тогда
					
					ТекущееЗначение = ?(СтрокаНачисления["ТекущееМинимальноеЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["ТекущееМинимальноеЗначение" + Сч]);
					Значение = ?(СтрокаНачисления["МинимальноеЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["МинимальноеЗначение" + Сч]); 
					
					Если Значение > ТекущееЗначение  Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен минимум %1 (+%2);'"), 
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					ИначеЕсли  Значение < ТекущееЗначение Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен минимум %1 (%2);'"), 
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("ТекущееМаксимальноеЗначение") Тогда
					
					ТекущееЗначение = ?(СтрокаНачисления["ТекущееМаксимальноеЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["ТекущееМаксимальноеЗначение" + Сч]);
					Значение = ?(СтрокаНачисления["МаксимальноеЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["МаксимальноеЗначение" + Сч]);
					
					Если Значение > ТекущееЗначение  Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен максимум %1 (+%2);'"), 
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					ИначеЕсли  Значение < ТекущееЗначение Тогда
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен максимум %1 (%2);'"), 
							СтрокаНачисления["Показатель" + Сч],  Значение - ТекущееЗначение) + " ";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ТекущееЗначение = ?(СтрокаНачисления["ТекущееЗначение" + Сч] = Неопределено, 0, СтрокаНачисления["ТекущееЗначение" + Сч]);
				Значение = ?(СтрокаНачисления["Значение" + Сч] = Неопределено, 0, СтрокаНачисления["Значение" + Сч]); 
				
				Если РасшифровыватьИспользованиеНачисления
					И ЗначениеЗаполнено(ДатаОкончания)
					И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления)
					И ДатаОкончания > СтрокаНачисления.ДатаОкончанияНачисления Тогда
					
					ЗначениеПоОкончании = ?(СтрокаНачисления["ЗначениеПоОкончании" + Сч] = Неопределено, 0, СтрокаНачисления["ЗначениеПоОкончании" + Сч]); 
					
				Иначе
					ЗначениеПоОкончании = ТекущееЗначение;
				КонецЕсли;
				
				Если Значение <> ТекущееЗначение Тогда
					
					КоличествоИзмененныхПоказателей = КоличествоИзмененныхПоказателей + 1;
					
					НачалоДействия = "";
					Если НачисляетсяВЦеломЗаМесяц И ДатаСобытия <> Неопределено Тогда
						НачалоДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' с %1'"), Формат(НачалоМесяца(ДатаСобытия), "ДФ=""д ММММ"""));
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ПредставлениеПоказателя" + Сч) Тогда
						НаименованиеПоказателя = СтрокаНачисления["ПредставлениеПоказателя" + Сч];
					Иначе
						НаименованиеПоказателя = СтрокаНачисления["Показатель" + Сч];
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ТочностьПоказателя" + Сч) Тогда
						ФорматПоказателя = СтрокаНачисления["ТочностьПоказателя" + Сч];
					Иначе
						ФорматПоказателя = "ЧДЦ=4";
					КонецЕсли;
					
					Если Не ПустаяСтрока(Комментарий) Тогда
						Комментарий = Комментарий + "; ";
					КонецЕсли; 
					
					Если КоличествоИзмененныхПоказателей > 1 Тогда
						
						Если Не ПустаяСтрока(НаименованиеПервогоПоказателя) Тогда
							КомментарийТекущегоЗначения = НаименованиеПервогоПоказателя + " " + КомментарийТекущегоЗначения;
							НаименованиеПервогоПоказателя = "";
						КонецЕсли; 
						
						КомментарийТекущегоЗначения = ?(ПустаяСтрока(КомментарийТекущегоЗначения), "", КомментарийТекущегоЗначения + "; ")
							+ НаименованиеПоказателя + " " + Формат(ЗначениеПоОкончании, ФорматПоказателя);
						
					Иначе
						НаименованиеПервогоПоказателя = НаименованиеПоказателя;
						КомментарийТекущегоЗначения = Формат(ЗначениеПоОкончании, ФорматПоказателя);
					КонецЕсли;
					
					Если Значение > ТекущееЗначение Тогда
						
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен %1 (+%2)'"), 
							НаименованиеПоказателя, Формат(Значение - ТекущееЗначение, ФорматПоказателя));
						
					ИначеЕсли Значение < ТекущееЗначение Тогда
						
						Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен %1 (%2)'"), 
							НаименованиеПоказателя, Формат(Значение - ТекущееЗначение, ФорматПоказателя));
						
					КонецЕсли;
					
					Если Не РасшифровыватьИспользованиеНачисления
						И Не ПустаяСтрока(Комментарий) Тогда
						
						Комментарий = Комментарий + НачалоДействия;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеПоОкончании <> ТекущееЗначение Тогда
					
					КоличествоИзмененныхПоказателей = КоличествоИзмененныхПоказателей + 1;
					
					Если КоличествоИзмененныхПоказателей > 1 Тогда
						
						Если Не ПустаяСтрока(НаименованиеПервогоПоказателя) Тогда
							КомментарийТекущегоЗначения = НаименованиеПервогоПоказателя + " " + КомментарийТекущегоЗначения;
							НаименованиеПервогоПоказателя = "";
						КонецЕсли; 
						
						КомментарийТекущегоЗначения = ?(ПустаяСтрока(КомментарийТекущегоЗначения), "", КомментарийТекущегоЗначения + "; ")
							+ НаименованиеПоказателя + " " + Формат(ЗначениеПоОкончании, ФорматПоказателя);
						
					Иначе
						НаименованиеПервогоПоказателя = НаименованиеПоказателя;
						КомментарийТекущегоЗначения = Формат(ЗначениеПоОкончании, ФорматПоказателя);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(КомментарийТекущегоЗначения)
			И ЗначениеЗаполнено(ДатаОкончания) Тогда
			
			Если Не ПустаяСтрока(Комментарий) Тогда
				Комментарий = Комментарий + " ";
			КонецЕсли;
			
			Комментарий = Комментарий + НСтр("ru='по'") + " " + Формат(ДатаОкончания, "ДЛФ=D")
				+ ", " + НСтр("ru='затем'") + " " + КомментарийТекущегоЗначения
			
		КонецЕсли;
		
		Если РасшифровыватьИспользованиеНачисления Тогда
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				
				Если ДатаОкончания >= СтрокаНачисления.ДатаОкончанияНачисления
					И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления) Тогда
				
					Если СтрокаНачисления.ИспользуетсяПоОкончании <> СтрокаНачисления.ДействующийВидРасчета Тогда
						
						Если ПустаяСтрока(Комментарий) Тогда
							Комментарий = НСтр("ru='Начисляется'");
						КонецЕсли;
						
						Комментарий = Комментарий + " " + НСтр("ru='по'") + " " + Формат(ДатаОкончания, "ДЛФ=D");
						
					КонецЕсли;
					
				ИначеЕсли ДатаОкончания < СтрокаНачисления.ДатаОкончанияНачисления
					И ХарактерНачисления = ПредопределенноеЗначение("Перечисление.ХарактерПлановогоНачисления.Штатное") Тогда
					
					Если ПустаяСтрока(Комментарий) Тогда
						Комментарий = НСтр("ru='Начисляется'");
					КонецЕсли;
					
					Комментарий = Комментарий + " " + НСтр("ru='до'") + " " + ПредставлениеДатаОкончанияНачисления;
					
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончанияНачисления)
					И Не СтрокаНачисления.ИспользуетсяПоОкончании Тогда
					
					Если ПустаяСтрока(Комментарий) Тогда
						Комментарий = НСтр("ru='Начисляется'");
					КонецЕсли;
					
					Комментарий = Комментарий + " " + НСтр("ru='до'") + " " + ПредставлениеДатаОкончанияНачисления;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНачисления.Комментарий = Комментарий;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтрокаНачисления,
			ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, , РежимРаботы),
			РежимРаботы, ОписаниеТаблицыВидовРасчета, ДатаСобытия, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// То же, что и УстановитьКомментарииДействийСНачислением, но для таблицы с дополнительными показателями, а не
// плановыми начислениями.
Процедура УстановитьКомментарииДействийСДополнительнымПоказателем(СтрокаПоказателя) Экспорт
	
	Если ТипЗнч(СтрокаПоказателя) = Тип("Структура") И СтрокаПоказателя.Свойство("Действие") = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаПоказателя) = Тип("ДанныеФормыЭлементКоллекции") И Не СтрокаПоказателя.Свойство("Действие") Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаПоказателя) = Тип("Структура") И СтрокаПоказателя.Свойство("Комментарий") = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтрокаПоказателя) = Тип("ДанныеФормыЭлементКоллекции") И Не СтрокаПоказателя.Свойство("Комментарий") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаПоказателя.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить") И (Не СтрокаПоказателя.ДействующийПоказатель) Тогда
		СтрокаПоказателя.Комментарий = НСтр("ru = 'Новый'");
	ИначеЕсли СтрокаПоказателя.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
		СтрокаПоказателя.Комментарий = НСтр("ru = 'Отменен'");
	ИначеЕсли Не СтрокаПоказателя.ДействующийПоказатель Тогда
		СтрокаПоказателя.Комментарий = НСтр("ru = 'Новый'");
	Иначе
		Комментарий = "";
		
		ТекущееЗначение = ?(СтрокаПоказателя.ТекущееЗначение = Неопределено, 0, СтрокаПоказателя.ТекущееЗначение);
		Значение = ?(СтрокаПоказателя.Значение = Неопределено, 0, СтрокаПоказателя.Значение); 
		Если Значение > ТекущееЗначение  Тогда
			Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен (+%1);'"),
			Значение - ТекущееЗначение) + " ";
		ИначеЕсли  Значение < ТекущееЗначение Тогда
			Комментарий = Комментарий + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен (%1);'"),
			Значение - ТекущееЗначение) + " ";
		КонецЕсли;
		
		СтрокаПоказателя.Комментарий = Комментарий;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет список определяющих показателей, 
// используемый в форме видов расчета для расстановки пометок.
//
// Параметры:
//	- СписокОпределяющихПоказателей - заполняемый список значений.
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- СведенияОПоказателях - соответствие структур реквизитов показателей.
//
Процедура ЗаполнитьСписокОпределяющихПоказателей(СписокОпределяющихПоказателей, Показатели, СведенияОПоказателях) Экспорт
	
	СписокОпределяющихПоказателей.Очистить();
	Если СведенияОПоказателях.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтображаемыеПредопределенные = Новый Массив;
	ОтображаемыеПредопределенные.Добавить("ПереработаноПоСуммированномуУчету");
	ОтображаемыеПредопределенные.Добавить("ПереработаноПоСуммированномуУчетуВПределах2Часов");
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если Не СтрокаПоказателя.ИспользоватьПриРасчете Тогда
			Продолжить;
		КонецЕсли;
		СведенияОПоказателе = СведенияОПоказателях[СтрокаПоказателя.Показатель];
		Если СведенияОПоказателе.СпособПримененияЗначений = ПредопределенноеЗначение("Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое") 
			И СведенияОПоказателе.НазначениеПоказателя = ПредопределенноеЗначение("Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника") 
			И Не СведенияОПоказателе.СпособВводаЗначений = ПредопределенноеЗначение("Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете")
			И (Не СведенияОПоказателе.ЗначениеРассчитываетсяАвтоматически Или ОтображаемыеПредопределенные.Найти(СведенияОПоказателе.Идентификатор) <> Неопределено)
			И Не СведенияОПоказателе.ЭтоШкалаОценки Тогда
			СписокОпределяющихПоказателей.Добавить(СтрокаПоказателя.Показатель, СведенияОПоказателе.Идентификатор, СтрокаПоказателя.ОпределяющийПоказатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Расставляет пометки для таблицы формы вида расчета с запрашиваемыми показателями.
// Показатели в виде расчета хранятся списком, для наглядности в форме этот список управляется "галочками".
Процедура УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Показатели) Экспорт
	
	Для Каждого СтрокаПоказателей Из Показатели Цикл
		СтрокаПоказателей.ЗапрашиватьПриВводе = ЗапрашиваемыеПоказатели.Найти(СтрокаПоказателей.Показатель) <> Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обновление табличной части Показатели вида расчета 
// после редактирования формулы (изменения состава показателей).
//
// Параметры:
//	- СведенияОПоказателяхФормулы - соответствие, ключ которого показатель, 
//			значение - структура сведений о показателях.
//	- Показатели - данные формы коллекция связанная с табличной частью показателей.
//
Процедура ОбновитьПоказателиПоФормуле(СведенияОПоказателяхФормулы, Показатели) Экспорт
	
	// запомнить старые
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.ИспользоватьПриРасчете Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	// записать новые
	ОтборСтрок = Новый Структура("Показатель");
	Для Каждого КлючИЗначение Из СведенияОПоказателяхФормулы Цикл
		Показатель = КлючИЗначение.Ключ;
		Если ЗначениеЗаполнено(Показатель) Тогда
			ОтборСтрок.Показатель = Показатель;
			НайденныеСтроки = Показатели.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИспользоватьПриРасчете = Истина;
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтрокиКУдалению, НайденныеСтроки[0]);
			Иначе
				НоваяСтрока = Показатели.Добавить();
				НоваяСтрока.Показатель = Показатель;
				НоваяСтрока.ИспользоватьПриРасчете = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удалить неиспользуемые старые показатели.
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется формами начислений и удержаний для расстановки в данных формы 
// признака запрашиваемости показателей, который в свою очередь используется для отбора строк.
//
// Параметры:
//	- Форма - управляемая форма начисления или удержания.
//	- СведенияОПоказателях - соответствие с данными о показателях.
//
Процедура ЗаполнитьПризнакПоказателейМожетЗапрашиватьсяПриВводе(Форма, СведенияОПоказателях) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Для Каждого СтрокаПоказателей Из Объект.Показатели Цикл
		Сведения = СведенияОПоказателях[СтрокаПоказателей.Показатель];
		СтрокаПоказателей.МожетЗапрашиватьсяПриВводе = СтрокаПоказателей.ИспользоватьПриРасчете
			И Сведения.СпособПримененияЗначений = ПредопределенноеЗначение("Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное")
			И Сведения.НазначениеПоказателя = ПредопределенноеЗначение("Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника")
			И Не Сведения.ЭтоПоказательЗависящийОтСтажа
			И Не Сведения.ЗначениеРассчитываетсяАвтоматически;
	КонецЦикла;
		
КонецПроцедуры

// Определяет является ли переданное состояние объекта (строки регистра) состоянием по умолчанию.
Функция ВоинскийУчетПоУмолчанию(ВоинскийУчет) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ВоинскийУчет.ОтношениеКВоинскойОбязанности)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.КатегорияЗапаса)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.Звание)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.Состав)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.ВУС)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.Годность)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.Военкомат)
		И НЕ ВоинскийУчет.НаличиеМобпредписания
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.НомерКомандыПартии)
		И НЕ ЗначениеЗаполнено(ВоинскийУчет.ПунктПеречня));
		
КонецФункции

// Определяет является ли переданное состояние объекта (строки регистра) состоянием по умолчанию.
Функция СостоянияВБракеФизическихЛицПоУмолчанию(СостоянияВБракеФизическихЛиц) Экспорт
	Возврат НЕ ЗначениеЗаполнено(СостоянияВБракеФизическихЛиц.СостояниеВБраке);
КонецФункции

// Функция преобразовывает представление уникального идентификатора так, 
// чтобы его можно было использовать в качестве имени метаданных.
//
Функция УникальноеИмяРеквизита() Экспорт
	
	Возврат СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
КонецФункции

// Проверяет текущий вариант интерфейса клиентского приложения.
//
// Возвращаемое значение - Истина, если установлен вариант Такси, Ложь в противном случае.
//
Функция ЭтоВариантИнтерфейсаКлиентскогоПриложенияТакси() Экспорт
	Возврат ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
КонецФункции

#Область Взаимодействия

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхПредметов.
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаКлиентСервер = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("ПодборПерсоналаКлиентСервер");
		МодульПодборПерсоналаКлиентСервер.ПриОпределенииВозможныхПредметов(ТипыПредметов);
	КонецЕсли;
	
КонецПроцедуры

// См. ВзаимодействияКлиентСерверПереопределяемый.ПриОпределенииВозможныхКонтактов.
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаКлиентСервер = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("ПодборПерсоналаКлиентСервер");
		МодульПодборПерсоналаКлиентСервер.ПриОпределенииВозможныхКонтактов(ТипыКонтактов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МногофункциональныеДокументы

// Функция возвращает список типов существующих в системе многофункциональных документов.
// Тип возвращаемого значения - соответствие, ключем является тип документа, значением - структура, содержащая
// имена реквизитов, в которых хранятся данные о состоянии документа и о втором ответственном, а также название вида
// учета, к которому относится документ.
//
Функция ТипыМногофункциональныхДокументов() Экспорт 
	
	МногофункциональныеДокументы = Новый Соответствие;
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ДокументРассчитан";
	ОписаниеДокумента.ВторойОтветственный = "Рассчитал";
	ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не рассчитан.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.БольничныйЛист"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Командировка"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.МатериальнаяПомощь"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОплатаДнейУходаЗаДетьмиИнвалидами"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Отпуск"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Премия"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Увольнение"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.УвольнениеСписком"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ПерерасчетВыполнен";
	ОписаниеДокумента.ВторойОтветственный = "Рассчитал";
	ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не рассчитан.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтпускБезСохраненияОплаты"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтпускБезСохраненияОплатыСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Отгул"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтгулСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПростойСотрудников"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ПерерасчетВыполнен";
	ОписаниеДокумента.ВторойОтветственный = "Рассчитал";
	ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - данные не включены в расчет зарплаты.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПрогулНеявка"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "НачисленияУтверждены";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "РазмерОплатыУтвержден";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПереводНаОплатуПоСреднемуЗаработку"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "НачисленияУтверждены";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - ежемесячные начисления не установлены.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ВозвратИзОтпускаПоУходуЗаРебенком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.КадровыйПереводСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПриемНаРаботу"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПриемНаРаботуСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ВосстановлениеВДолжности"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "НачисленияУтверждены";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ИзменениеГрафикаРаботыСписком"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ИзменениеКвалификационногоРазряда"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.КадровыйПеревод"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "РазмерДоплатыУтвержден";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ПриказНаДоплатуДоСреднегоЗаработка"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.Совмещение"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ОтменаДоплатыУтверждена";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - документ не утвержден.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтменаДоплатыДоСреднегоЗаработка"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.ОтменаСовмещения"), ОписаниеДокумента);
	
	ОписаниеДокумента = ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ВремяУчтено";
	ОписаниеДокумента.ВторойОтветственный = "ВремяУчел";
	ОписаниеДокумента.ВидУчета = "РабочееВремя";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - время не учтено.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.РаботаСверхурочно"), ОписаниеДокумента);
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.РаботаВВыходныеИПраздничныеДни"), ОписаниеДокумента);
	
	#Область Подработки
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("Подработки");
		МногофункциональныеДокументыПодработок = Модуль.ТипыМногофункциональныхДокументов();
		
		Для Каждого КлючИЗначение  Из МногофункциональныеДокументыПодработок Цикл
			МногофункциональныеДокументы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение)
		КонецЦикла	
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АттестацииСотрудников
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("АттестацииСотрудников");
		МногофункциональныеДокументыАттестацииСотрудников = Модуль.ТипыМногофункциональныхДокументов();
		
		Для Каждого КлючИЗначение  Из МногофункциональныеДокументыАттестацииСотрудников Цикл
			МногофункциональныеДокументы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение)
		КонецЦикла	
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГосударственнаяСлужба
	
	Если ОбщегоНазначенияБЗККлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначенияБЗККлиентСервер.ОбщийМодуль("ГосударственнаяСлужбаКлиентСервер");
		МногофункциональныеДокументыГосударственнойСлужбы = Модуль.ТипыМногофункциональныхДокументов();
		
		Для Каждого КлючИЗначение Из МногофункциональныеДокументыГосударственнойСлужбы Цикл
			МногофункциональныеДокументы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение)
		КонецЦикла	
		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат МногофункциональныеДокументы;
	
КонецФункции

Функция ОписаниеМногофункциональногоДокумента() Экспорт
	
	Возврат Новый Структура("РеквизитСостояние, ВторойОтветственный, ВидУчета, СообщениеДокументНеУтвержден");
	
КонецФункции	

// Проверяет выделенные в динамическом списке строки и возвращает массив ссылок.
//
// Параметры:
// 		Список - динамический список.
//
// Возвращаемое значение:
// 		МассивСсылок - массив выделенных в списке ссылок.
//
Функция ВыделенныеВДинамическомСпискеСсылки(Список) Экспорт 
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ТекСтрока Из Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ТекСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

Процедура УстановитьДоступностьКомандыУтвердитьВМногофункциональныхДокументах(Форма) Экспорт 

	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	
	ЗначениеДоступность = Ложь;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Свойство("ТребуетОбработки") Тогда 
		ЗначениеДоступность = ТекущиеДанные.ТребуетОбработки;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаУтвердить", "Доступность", ЗначениеДоступность);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с несколькими рабочими местами физического лица.

// Получение строки, дополняющей комментарий к плановым начислениям.
// Применяется в документах, редактирующих состояние нескольких сотрудников одного физлица. 
// Пример - Отпуск по уходу за ребенком.
// Параметры - сравниваемые старое и новое значение.
// Возвращаемое значение: строка.
Функция ПолучитьКомментарийКДействиюСПрименениеПлановыхНачислений(Значение, ТекущееЗначение) Экспорт
	Комментарий = "";
	Если Значение <> ТекущееЗначение Тогда
		Если ТекущееЗначение Тогда
			Комментарий = НСтр("ru = '(Ранее начисления действовали)'");
		Иначе	
			Комментарий = НСтр("ru = '(Ранее начисления не действовали)'");
		КонецЕсли;
	КонецЕсли;
	Возврат Комментарий;
КонецФункции 

// Обновление комментариев к плановым начислениям.
// Применяется в документах, редактирующих состояние нескольких сотрудников одного физлица. 
// Пример такого документа - Отпуск по уходу за ребенком.
Процедура НесколькоРабочихМестОбновитьКомментарии(Форма, ОписаниеФормы, ОписаниеТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Для каждого Строка Из Таблица Цикл
		
		Значение = Строка[ОписаниеТаблицы.ИмяРеквизитаПоказателя];
		ТекущееЗначение = Строка[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий];
		
		Если ОписаниеФормы.ЕстьАвансы И ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыАвансы Тогда
			
			СпособРасчетаАванса = Строка[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАванса]; 
			ТекущийСпособРасчетаАванса = Строка[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий]; 
			
			Строка[ОписаниеТаблицы.ИмяРеквизитаКомментарий] = 
				РасчетЗарплатыКлиентСервер.КомментарийИзмененияАванса(
					ТекущийСпособРасчетаАванса, ТекущееЗначение, Истина); 	
					
		ИначеЕсли ОписаниеФормы.ЕстьПрименениеПлановыхНачислений И ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыПрименениеПлановыхНачислений Тогда 
			Строка[ОписаниеТаблицы.ИмяРеквизитаКомментарий] = ПолучитьКомментарийКДействиюСПрименениеПлановыхНачислений(Значение, ТекущееЗначение)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Признак того, что в документе редактируется более одного сотрудника одного физлица.
// Применяется в документах, редактирующих состояние нескольких сотрудников одного физлица. 
// Пример такого документа - Отпуск по уходу за ребенком.
// Возвращаемое значение: булево.
Функция НесколькоРабочихМестЕстьРабочиеМестаФизическогоЛица(Форма, ОписаниеТаблицыРабочихМест) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным).Количество() > 0;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Начисления и удержания

// Функция определяет выполняет ли начисление зачет нормы времени.
// Возвращает: булево.
Функция ЗачетНормыВремениНачисления(ОписаниеНачисления) Экспорт
	
	// Зачет нормы времени выполняем только если это плановое начисление или отклонение.
	Если ОписаниеНачисления.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы")
		Или ОписаниеНачисления.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет, относится ли вид времени к отработанному времени.
//
Функция ЗачетОтработанногоВремени(ВидВремени) Экспорт
	Возврат ВидыОтработанногоВремени().Найти(ВидВремени) <> Неопределено;
КонецФункции

// Возвращает массив значений перечисления ВидыРабочегоВремениСотрудников, которые 
// соответствуют отработанному времени.
Функция ВидыОтработанногоВремени() Экспорт
	
	ВидыОтработанногоВремени = Новый Массив;
	ВидыОтработанногоВремени.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы"));
	ВидыОтработанногоВремени.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы"));
	ВидыОтработанногоВремени.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы"));
	
	Возврат ВидыОтработанногоВремени;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Распределение результатов расчета по источникам финансирования.

// Имена колонок таблицы, содержащей распределение результатов расчета 
// по статьям финансирования.
// Возвращает строку с именами колонок, разделенных запятыми.
Функция ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы) Экспорт
	
	ИменаКолонок = "СтатьяФинансирования,СтатьяРасходов,КодСтатьиФинансирования,Результат";
	
	ИмяТаблицыРаспределениеРезультатов = ИмяТаблицыРаспределениеРезультатовРасчета(ОписаниеТаблицы);
	
	Если ИмяТаблицыРаспределениеРезультатов = "РаспределениеРезультатовНачислений" Тогда
		ИменаКолонок = ИменаКолонок + ",Территория,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД,ПодразделениеУчетаЗатрат";
	ИначеЕсли ИмяТаблицыРаспределениеРезультатов = "РаспределениеРезультатовУдержаний" Тогда
		ИменаКолонок = ИменаКолонок + ",ВидУдержания,Сотрудник,Подразделение,ПодразделениеУчетаЗатрат";
	КонецЕсли;
	
	Возврат ИменаКолонок;

КонецФункции

// Имя таблицы, содержащей распределение результатов расчета 
// по статьям финансирования.
// Возвращает строку с именами колонок, разделенных запятыми.
Функция ИмяТаблицыРаспределениеРезультатовРасчета(ОписаниеТаблицы) Экспорт

	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов, ".");
	Возврат МассивПодстрок[МассивПодстрок.ВГраница()];

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Особые климатические условия.

// Возвращает булево значение - требуется ли применять климатическую надбавку 
// для переданных территориальных условий.
Функция ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловияПоТерриториальнымУсловиям(ТерриториальныеУсловия) Экспорт
	
	ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия = Ложь;
	
	Если ЗначениеЗаполнено(ТерриториальныеУсловия) Тогда
		
		ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия =
			ТерриториальныеУсловия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.МКС")
			ИЛИ ТерриториальныеУсловия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.МКСР")
			ИЛИ ТерриториальныеУсловия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.РКС")
			ИЛИ ТерриториальныеУсловия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.РКСМ")
			ИЛИ ТерриториальныеУсловия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.ПРОЧ");
		
	КонецЕсли; 
	
	Возврат ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия;
	
КонецФункции

// Устанавливает в форме значение процента северной (климатической) надбавки по переданному территориальному условию.
Процедура УстановитьПроцентЗаОсобыеКлиматическиеУсловия(Форма, ПроцентЗаОсобыеКлиматическиеУсловия, ТерриториальныеУсловия) Экспорт
	
	Если (ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.РКС")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.РКСМ")) Тогда
			
		Если ПроцентЗаОсобыеКлиматическиеУсловия = 0 Тогда
			ПроцентЗаОсобыеКлиматическиеУсловия = 100;
		КонецЕсли; 
		
	ИначеЕсли (ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.МКС")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.МКСР")) Тогда
			
		Если ПроцентЗаОсобыеКлиматическиеУсловия = 0 Тогда
			ПроцентЗаОсобыеКлиматическиеУсловия = 50;
		КонецЕсли;
		
	ИначеЕсли ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.ПРОЧ") Тогда
			
		Если ПроцентЗаОсобыеКлиматическиеУсловия = 0 Тогда
			ПроцентЗаОсобыеКлиматическиеУсловия = 30;
		КонецЕсли;
		
	ИначеЕсли ПроцентЗаОсобыеКлиматическиеУсловия <> 0 Тогда
		ПроцентЗаОсобыеКлиматическиеУсловия = 0;
	КонецЕсли; 
	
	УстановитьОтображениеПолейВводаПроцентаЗаОсобыеКлиматическиеУсловия(Форма, ТерриториальныеУсловия);
	
КонецПроцедуры

// Устанавливает в форме видимость полей для ввода процента северной (климатической) надбавки по переданному
// территориальному условию.
// Требует, чтобы в форме присутствовала группа полей ГруппаПроцентЗаОсобыеКлиматическиеУсловия.
Процедура УстановитьОтображениеПолейВводаПроцентаЗаОсобыеКлиматическиеУсловия(Форма, ТерриториальныеУсловия) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") Тогда
		ПоказыватьПоляВвода = (ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.РКС")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.РКСМ")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.МКС")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.МКСР")
			ИЛИ ТерриториальныеУсловия = ПредопределенноеЗначение("Справочник.ТерриториальныеУсловияПФР.ПРОЧ"));
	Иначе
		ПоказыватьПоляВвода = Ложь;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаПроцентЗаОсобыеКлиматическиеУсловия",
		"Видимость",
		ПоказыватьПоляВвода);
		
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура определяет нужно ли отображать предупреждение при редактировании для ключевых реквизитов формы.
Процедура КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображатьПредупреждение = Неопределено, МассивОписанийРеквизитов = Неопределено, МассивИменТаблиц = Неопределено) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 

	Если ОтображатьПредупреждение = Неопределено Тогда
		Если МассивИменТаблиц = Неопределено Тогда 
			МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
		КонецЕсли;	
		ОтображатьПредупреждение = КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц);
	КонецЕсли;
	
	Если МассивОписанийРеквизитов = Неопределено Тогда 
		МассивОписанийРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	КонецЕсли;	
	Для каждого Описание Из МассивОписанийРеквизитов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Описание.ЭлементФормы,
			"ОтображениеПредупрежденияПриРедактировании",
			ОтображатьПредупреждение);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяРеквизитаМаксимальноеКоличествоПоказателей(ИмяТаблицы)
	
	Возврат "МаксимальноеКоличествоПоказателей" + ИмяТаблицы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживание редактирования начислений зависящих от стажа.

Функция СведенияСтрокиНачисленияЗависящегоОтСтажа() Экспорт
	
	СведенияСтроки = Новый Структура;
	
	СведенияСтроки.Вставить("ОписаниеСтажевыхПоказателей", "");
	СведенияСтроки.Вставить("НаименованиеСтажевогоПоказателя", "");
	СведенияСтроки.Вставить("ОписаниеСтажевогоПоказателяЗадавалось", Ложь);
	СведенияСтроки.Вставить("ВидыСтажаПоказателей");
	СведенияСтроки.Вставить("Сотрудник");
	СведенияСтроки.Вставить("ДатаСведений");
	
	Возврат СведенияСтроки;
	
КонецФункции

Процедура ПодготовитьИнформациюОСтажевыхПоказателях(СведенияСтрокиНачисления, ПоказательИнфо, РежимРаботы) Экспорт
	
	Если ПоказательИнфо.ЭтоПоказательЗависящийОтСтажа Тогда
		
		Если РежимРаботы = 0 Тогда
			
			Если ПоказательИнфо.МаксимальноеЗначение <> Неопределено Тогда
				
				Если НЕ ПустаяСтрока(СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей) Тогда
					СведенияСтрокиНачисления.ОписаниеСтажевогоПоказателяЗадавалось = Истина;
					СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей = СведенияСтрокиНачисления.НаименованиеСтажевогоПоказателя + " " + СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей;
				КонецЕсли;
				
				СведенияСтрокиНачисления.НаименованиеСтажевогоПоказателя = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
				Если СведенияСтрокиНачисления.ОписаниеСтажевогоПоказателяЗадавалось Тогда
					СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей = СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей + "; " + Символы.ПС
						+ СведенияСтрокиНачисления.НаименованиеСтажевогоПоказателя + " ";
				КонецЕсли;
				
				СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей = СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей + НСтр("ru='макс.'");
				
				Если ПоказательИнфо.МаксимальноеЗначение = 0 Тогда
					СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей = СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей + " " + НСтр("ru='не задан'");
				Иначе
					СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей = СведенияСтрокиНачисления.ОписаниеСтажевыхПоказателей + " "
						+ Формат(ПоказательИнфо.МаксимальноеЗначение, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]));
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли РежимРаботы = 1 Тогда
			
			Если ЗначениеЗаполнено(ПоказательИнфо.ВидСтажа) Тогда
				
				Если СведенияСтрокиНачисления.ВидыСтажаПоказателей = Неопределено Тогда
					СведенияСтрокиНачисления.ВидыСтажаПоказателей = Новый Массив;
				КонецЕсли; 
				
				Если СведенияСтрокиНачисления.ВидыСтажаПоказателей.Найти(ПоказательИнфо.ВидСтажа) = Неопределено Тогда
					СведенияСтрокиНачисления.ВидыСтажаПоказателей.Добавить(ПоказательИнфо.ВидСтажа);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоместитьВСтрокуНачисленийИнформациюОСтажевыхПоказателях(СтрокаНачислений, СведенияСтрокиНачислений, РежимРаботы) Экспорт

	Если РежимРаботы = 1 Тогда
		
		Если СведенияСтрокиНачислений.ВидыСтажаПоказателей = Неопределено Тогда
			ЗначениеВидыСтажаПоказателей = Неопределено;
		Иначе
			ЗначениеВидыСтажаПоказателей = Новый ФиксированныйМассив(СведенияСтрокиНачислений.ВидыСтажаПоказателей);
		КонецЕсли;
		
		СтрокаНачислений["ВидыСтажаПоказателей"] = ЗначениеВидыСтажаПоказателей;
		
		Если ЗначениеВидыСтажаПоказателей <> Неопределено
			И ЗначениеЗаполнено(СведенияСтрокиНачислений.Сотрудник)
			И ЗначениеЗаполнено(СведенияСтрокиНачислений.ДатаСведений) Тогда
			
			СведенияСтрокиНачислений.ОписаниеСтажевыхПоказателей = ПредставлениеКомандВводаСтажейСотрудника(СведенияСтрокиНачислений.Сотрудник, СведенияСтрокиНачислений.ДатаСведений, ЗначениеВидыСтажаПоказателей);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если РежимРаботы <> 2 Тогда
		СтрокаНачислений["ОписаниеСтажевыхПоказателей"] = СведенияСтрокиНачислений.ОписаниеСтажевыхПоказателей;
	КонецЕсли; 
		
КонецПроцедуры

Функция ПредставлениеКомандВводаСтажейСотрудника(Сотрудник, ДатаСведений, ВидыСтажей)
	
	ПредставлениеКоманд = "";
	
	СведенияОСтажах = КадровыйУчетРасширенныйВызовСервера.СведенияОСтажахСотрудника(Сотрудник, ДатаСведений);
	Если СведенияОСтажах <> Неопределено Тогда
		ПредставлениеКоманд = ПредставленияКомандыВводаСтажейСотрудника(СведенияОСтажах, ВидыСтажей);
	КонецЕсли; 
	
	Возврат ПредставлениеКоманд;
	
КонецФункции

Процедура ВводНачисленийИнициализироватьСтрокиНачислений(Форма, СтрокиНачислений, ОписаниеТаблицы, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
		// Инициализируем поля показателей и их значений.
		Для СчетчикПоказателей = 1 По МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы,, РежимРаботы) Цикл
			СтрокаНачислений["Показатель" + СчетчикПоказателей] = ПредопределенноеЗначение("Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка");
			СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] = 0;
			СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей] = Неопределено;
			Если РежимРаботы <> 0 Тогда
				СтрокаНачислений["Значение" + СчетчикПоказателей] = Неопределено;
			Иначе
				Если Не ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений["Значение" + СчетчикПоказателей] = Неопределено;
				Иначе
					СтрокаНачислений["МаксимальноеЗначение" + СчетчикПоказателей] = Неопределено;
					СтрокаНачислений["МинимальноеЗначение" + СчетчикПоказателей] = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Если ОписаниеТаблицы.ЭтоПлановыеНачисленияУдержания Тогда 
			СтрокаНачислений.ФиксированнаяСумма = Ложь;
		КонецЕсли;
		
		ВидРасчета = СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
		Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
			
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#Иначе
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#КонецЕсли 

		Если РежимРаботы <> 2 И ИнфоОВидеРасчета.Свойство("ФОТНеРедактируется") Тогда
			СтрокаНачислений.ФОТНеРедактируется = ИнфоОВидеРасчета.ФОТНеРедактируется;
		КонецЕсли;
		
		Если РежимРаботы = 2 Тогда
			Если ИмяТаблицы = "Удержания"
				Или ИмяТаблицы = "УдержанияПерерасчет" Тогда
				СтрокаНачислений.ИспользуетсяПериод = ИнфоОВидеРасчета.ТребуетсяРасчетБазы;
				ЗаполнитьПериодВСтрокеПоУмолчанию(Форма, ОписаниеТаблицы, СтрокаНачислений, СтрокаНачислений.ИспользуетсяПериод);
			Иначе
				СтрокаНачислений.ИспользованиеПериода = ИнфоОВидеРасчета.ИспользованиеПериода;
				ЗаполнитьПериодВСтрокеПоУмолчанию(Форма, ОписаниеТаблицы, СтрокаНачислений, СтрокаНачислений.ИспользованиеПериода);
			КонецЕсли;
		КонецЕсли;

		Если ОписаниеТаблицы.ЭтоПлановыеНачисленияУдержания Тогда 
			СтрокаНачислений.ФиксированнаяСумма = Не ИнфоОВидеРасчета.Рассчитывается;
			Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
				ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
				СтрокаНачислений["ТочностьПоказателя1"] = "ЧДЦ=2";
				Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					Форма.Элементы[ИмяТаблицы + "МаксимальноеЗначение1"].ОграничениеТипа = ТипЧисло;
					Форма.Элементы[ИмяТаблицы + "МинимальноеЗначение1"].ОграничениеТипа = ТипЧисло;
				Иначе
					Форма.Элементы[ИмяТаблицы + "Значение1"].ОграничениеТипа = ТипЧисло;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаНачислений.Свойство("ВидВремени") Тогда
			Если ИнфоОВидеРасчета.Свойство("ВидВремени") Тогда
				СтрокаНачислений.ВидВремени = ИнфоОВидеРасчета.ВидВремени;
			Иначе
				СтрокаНачислений.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДокументОснование) Тогда 
			СтрокаНачислений["ДоступенВыборОснования"] = ИнфоОВидеРасчета.ПоддерживаетНесколькоПлановыхНачислений 
				И (Не ОписаниеТаблицы.ЭтоПлановыеНачисленияУдержания Или СтрокаНачислений.ДействующийВидРасчета);
			Если Не ИнфоОВидеРасчета.ПоддерживаетНесколькоПлановыхНачислений Тогда 
				СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДокументОснование] = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРаботы = 2 Тогда
			МаксимальноеЧислоПоказателей = ИнфоОВидеРасчета.КоличествоОтображаемыхПоказателей;
			Если ИмяТаблицы = "Удержания"
				Или ИмяТаблицы = "УдержанияПерерасчет" Тогда
				СтрокаНачислений.КатегорияУдержания = ИнфоОВидеРасчета.КатегорияУдержания;
			КонецЕсли;
		Иначе
			МаксимальноеЧислоПоказателей = ИнфоОВидеРасчета.КоличествоПостоянныхПоказателей;
		КонецЕсли;
		
		Если МаксимальноеЧислоПоказателей > МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы,, РежимРаботы) Тогда
			ТекстПредупреждения = ЗарплатаКадрыРасширенныйКлиентСервер.ТекстПредупрежденияОписаниеНачисленийИзменилось();
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ВызватьИсключение ТекстПредупреждения;
			#Иначе
				ПоказатьПредупреждение(, ТекстПредупреждения);
			#КонецЕсли 
		Иначе
			СчетчикПоказателей = 1;
			СведенияСтрокиНачисленияЗависящегоОтСтажа = СведенияСтрокиНачисленияЗависящегоОтСтажа();
			СведенияСтрокиНачисленияЗависящегоОтСтажа.Сотрудник = Сотрудник;
			СведенияСтрокиНачисленияЗависящегоОтСтажа.ДатаСведений = ДатаСведений;
			Для Каждого СтрокаПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
				#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
					ПоказательИнфо = ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
				#Иначе
					ПоказательИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
				#КонецЕсли 
				ПодготовитьИнформациюОСтажевыхПоказателях(СведенияСтрокиНачисленияЗависящегоОтСтажа, ПоказательИнфо, РежимРаботы);
				Если (РежимРаботы <> 2 И (НЕ СтрокаПоказателя.ЗапрашиватьПриВводе))
					ИЛИ ((РежимРаботы = 2) И (Не СтрокаПоказателя.ИспользоватьПриРасчете))Тогда
					Продолжить;
				КонецЕсли;
				Если (РежимРаботы <> 2 
					И (ПоказательИнфо.СпособПримененияЗначений <> ПредопределенноеЗначение("Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное")
					Или ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически))
					ИЛИ ((РежимРаботы = 2) И (НЕ ПоказательИнфо.ОтображатьВДокументахНачисления))Тогда
					Продолжить;
				КонецЕсли;
				СтрокаНачислений["Показатель" + СчетчикПоказателей] 			= СтрокаПоказателя.Показатель;
				СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] 	= ПоказательИнфо["Точность"];
				СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей]= ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
				Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					Форма.Элементы[ИмяТаблицы + "МаксимальноеЗначение" + СчетчикПоказателей].ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
					Форма.Элементы[ИмяТаблицы + "МинимальноеЗначение" + СчетчикПоказателей].ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
				Иначе
					Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = 
					?(РежимРаботы = 2, ПоказательИнфо.ТипПоказателяПриРасчете, ПоказательИнфо.ТипПоказателя);
				КонецЕсли;
				СчетчикПоказателей = СчетчикПоказателей + 1;
			КонецЦикла;
			ПоместитьВСтрокуНачисленийИнформациюОСтажевыхПоказателях(СтрокаНачислений, СведенияСтрокиНачисленияЗависящегоОтСтажа, РежимРаботы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодВСтрокеПоУмолчанию(Форма, ОписаниеТаблицы, СтрокаНачислений, ИспользованиеПериода)
	
	Если ОписаниеТаблицы.ИмяРеквизитаПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцНачисления = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод];
	Если ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
		Если Не ЗначениеЗаполнено(СтрокаНачислений.ПериодДействия) Тогда
			СтрокаНачислений.ПериодДействия = МесяцНачисления;
			Если СтрокаНачислений.Свойство("ПериодДействияСтрокой") Тогда
				ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(СтрокаНачислений, "ПериодДействия", "ПериодДействияСтрокой");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДатаНачала = НачалоМесяца(МесяцНачисления);
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДатаНачала) 
			И Не ЗначениеЗаполнено(СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаНачала]) Тогда
			СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаНачала] = ДатаНачала;
		КонецЕсли;
		ДатаОкончания = КонецМесяца(МесяцНачисления);
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДатаОкончания) 
			И Не ЗначениеЗаполнено(СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания]) Тогда
			СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания] = ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстПредупрежденияОписаниеНачисленийИзменилось() Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'За время вашей работы с документом существенно изменилось описание начислений. 
                                |Это привело к тому, что вам необходимо завершить работу с документом и повторно открыть его или перечитать данные документа (команда «Перечитать» из меню «%1»).'");	
								
	ЭтоТакси = ЭтоВариантИнтерфейсаКлиентскогоПриложенияТакси();
	
	Возврат СтрШаблон(ТекстПредупреждения, ?(ЭтоТакси, НСтр("ru = 'Еще'"), НСтр("ru = 'Все действия'")));
	
КонецФункции

Функция ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицыВидовРасчета) Экспорт
	
	Если ОписаниеТаблицыВидовРасчета.Свойство("ПоказыватьВременноОтмененныеНачисления") Тогда
		Возврат  ОписаниеТаблицыВидовРасчета.ПоказыватьВременноОтмененныеНачисления;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обслуживание плановых начислений, редактируемых в отдельных полях формы
// РК, СН, Надбавка за вредность.

#Область НачисленияРедактируемыеВОтдельныхПолях

Процедура УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(Форма, РедактироватьФОТ = Неопределено) Экспорт
	
	ИменаЭлементов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	Если ИменаЭлементов <> Неопределено Тогда
		
		МеняетсяСоставНачислений = НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "СоставНачисленийНеМеняется");
		НеРазрешеноРедактироватьФОТ = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НеРазрешеноРедактироватьФОТ");
		
		Если РедактироватьФОТ = Неопределено Тогда
			ПоказыватьВкладВФОТ = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РедактироватьФОТ");
		Иначе
			ПоказыватьВкладВФОТ = РедактироватьФОТ;
		КонецЕсли; 
		
		// Надбавка за вредность
		НадбавкаЗаВредностьВыводитсяИзСоставаПлановыхНачислений = 
			МеняетсяСоставНачислений И НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеНадбавкаЗаВредность")
			И НадбавкаЗаВредностьВходитВСоставПлановыхНачислений(Форма);
		
		ВидимостьВкладаВФОТНадбавкиЗаВредность = НадбавкаЗаВредностьВходитВСоставПлановыхНачислений(Форма)
			Или НадбавкаЗаВредностьВыводитсяИзСоставаПлановыхНачислений;
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ИнформацияОНачислении(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерНадбавкаЗаВредность,
			"Видимость",
			ВидимостьВкладаВФОТНадбавкиЗаВредность И НЕ НадбавкаЗаВредностьВыводитсяИзСоставаПлановыхНачислений И ПоказыватьВкладВФОТ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.ДекорацияРазмерНадбавкаЗаВредность,
			"Видимость",
			НадбавкаЗаВредностьВыводитсяИзСоставаПлановыхНачислений И ПоказыватьВкладВФОТ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерНадбавкаЗаВредность,
			"ТолькоПросмотр",
			НеРазрешеноРедактироватьФОТ Или Форма.ТолькоПросмотр Или ФОТНеРедактируется);
		
		// Районный коэффициент
		РКВыводитсяИзСоставаПлановыхНачислений = 
			МеняетсяСоставНачислений И НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеРайонныйКоэффициент")
			И РайонныйКоэффициентВходитВСоставПлановыхНачислений(Форма);
		
		ВидимостьРК = РайонныйКоэффициентВходитВСоставПлановыхНачислений(Форма)
			Или РКВыводитсяИзСоставаПлановыхНачислений;
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ИнформацияОНачислении(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерРайонныйКоэффициент,
			"Видимость",
			ВидимостьРК И Не РКВыводитсяИзСоставаПлановыхНачислений И ПоказыватьВкладВФОТ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.ДекорацияРазмерРайонныйКоэффициент,
			"Видимость",
			РКВыводитсяИзСоставаПлановыхНачислений И ПоказыватьВкладВФОТ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерРайонныйКоэффициент,
			"ТолькоПросмотр",
			НеРазрешеноРедактироватьФОТ Или Форма.ТолькоПросмотр Или ФОТНеРедактируется);
		
		// Северная надбавка
		СНВыводитсяИзСоставаПлановыхНачислений = 
			МеняетсяСоставНачислений И НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеСевернаяНадбавка");
		
		ВидимостьСН = СевернаяНадбавкаВходитВСоставПлановыхНачислений(Форма)
			И НЕ СНВыводитсяИзСоставаПлановыхНачислений И ПоказыватьВкладВФОТ;
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавка");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ИнформацияОНачислении(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерСевернаяНадбавка,
			"Видимость",
			ВидимостьСН);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементов.РазмерСевернаяНадбавка,
			"ТолькоПросмотр",
			НеРазрешеноРедактироватьФОТ Или Форма.ТолькоПросмотр Или ФОТНеРедактируется);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ИнформацияОНачислении(Начисление)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
	#Иначе
		Возврат ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
	#КонецЕсли
	
КонецФункции

Функция РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Экспорт
	
	РежимРедактирования = Ложь;
	Если РежимРаботы = 1 И ОписаниеТаблицыВидовРасчета.Свойство("РедактироватьНачисленияВОтдельныхПолях") Тогда
		РежимРедактирования = ОписаниеТаблицыВидовРасчета.РедактироватьНачисленияВОтдельныхПолях;
	КонецЕсли; 
	
	Возврат РежимРедактирования;
	
КонецФункции

Функция ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета) Экспорт
	
	СодержитПолеДействие = Ложь;
	Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеДействие") Тогда
		СодержитПолеДействие = ОписаниеТаблицыВидовРасчета.СодержитПолеДействие;
	КонецЕсли; 
	
	Возврат СодержитПолеДействие;
	
КонецФункции

Функция ТабличнаяЧастьСодержитПолеХарактерНачисления(ОписаниеТаблицыВидовРасчета) Экспорт
	
	СодержитПолеХарактерНачисления = Ложь;
	Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеХарактерНачисления") Тогда
		СодержитПолеХарактерНачисления = ОписаниеТаблицыВидовРасчета.СодержитПолеХарактерНачисления;
	КонецЕсли;
	
	Возврат СодержитПолеХарактерНачисления;
	
КонецФункции

Функция НадбавкаЗаВредностьВходитВСоставПлановыхНачислений(Форма) Экспорт
	
	Возврат (НадбавкаЗаВредностьПрименяется(Форма) ИЛИ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется"))
		И ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность"));
	
КонецФункции

Функция НадбавкаЗаВредностьПрименяется(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеНадбавкаЗаВредность");
	
КонецФункции

Функция РайонныйКоэффициентВходитВСоставПлановыхНачислений(Форма) Экспорт
	
	Возврат РайонныйКоэффициентПрименяется(Форма)
		ИЛИ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется");
	
КонецФункции

Функция РайонныйКоэффициентПрименяется(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеРайонныйКоэффициент");
	
КонецФункции

Функция СевернаяНадбавкаВходитВСоставПлановыхНачислений(Форма) Экспорт
	
	Возврат СевернаяНадбавкаПрименяется(Форма)
		ИЛИ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется");
	
КонецФункции

Функция СевернаяНадбавкаПрименяется(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеСевернаяНадбавка");
	
КонецФункции

Функция ИзменяетсяПрименениеНачисленийРедактируемыхВОтдельныхПолях(Форма) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеРайонныйКоэффициент")
			<> ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется")
		Или ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеСевернаяНадбавка")
			<> ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется")
		Или ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеНадбавкаЗаВредность")
			<> ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется");
	
КонецФункции

Процедура УстановитьРежимОтображенияНачисленийРедактируемыхВОтдельныхПолях(Форма, РедактированиеПоказателей, РедактированиеВкладаВФОТ) Экспорт
	
	ИменаЭлементов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	Если ИменаЭлементов <> Неопределено Тогда
		
		ИмяГруппыОтдельныхПолей = ИменаЭлементов.ГруппаНачисленийРедактируемыхВОтдельныхПолях;
		Если ЗначениеЗаполнено(ИмяГруппыОтдельныхПолей) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяГруппыОтдельныхПолей + "Значения",
				"ТолькоПросмотр",
				Не РедактированиеПоказателей);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяГруппыОтдельныхПолей + "Размеры",
				"ТолькоПросмотр",
				Не РедактированиеВкладаВФОТ);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура УдалитьДанныеСотрудникаСписочногоДокумента(Объект, СтруктураОписания, ЗначениеПоиска, КлючПоиска = "ИдентификаторСтрокиСотрудника") Экспорт
	
	СтруктураПоиска = Новый Структура(КлючПоиска, ЗначениеПоиска);
	Для каждого ОписаниеТабличнойЧасти Из СтруктураОписания.ТабличныеЧасти Цикл
		
		Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей"
			ИЛИ ОписаниеТабличнойЧасти.Ключ = "Сотрудники" Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьСтрокиТабличнойЧасти(Объект[ОписаниеТабличнойЧасти.Ключ], СтруктураПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиТабличнойЧасти(ТабличнаяЧасть, СтруктураПоиска)
	
	УдаляемыеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Для каждого УдаляемаяСтроки Из УдаляемыеСтроки Цикл
		ТабличнаяЧасть.Удалить(УдаляемаяСтроки);
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаНачисленияСодержитВкладВФОТ(СтрокаНачисления, ОписаниеТаблицыВидовРасчета) Экспорт
	
	СтрокаСодержитФОТ = Истина;
	Если ОписаниеТаблицыВидовРасчета.Свойство("ДатаРасчетаИтогаФОТ") Тогда
		
		ДатаРасчетаИтогаФОТ = ОписаниеТаблицыВидовРасчета.ДатаРасчетаИтогаФОТ;
		ИтогФОТРассчитываетсяНаДату = ЗначениеЗаполнено(ДатаРасчетаИтогаФОТ);
		
			Если ИтогФОТРассчитываетсяНаДату
			И (ЗначениеЗаполнено(СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДатаНачала])
				И СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДатаНачала] > ДатаРасчетаИтогаФОТ
					Или ЗначениеЗаполнено(СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДатаОкончания])
						И СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДатаОкончания] < ДатаРасчетаИтогаФОТ) Тогда
			
			СтрокаСодержитФОТ = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаСодержитФОТ;
	
КонецФункции

Функция ИтогиПоФОТ(Форма, ОписаниеТаблицыВидовРасчета) Экспорт
	
	ФОТ = 0;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	СодержитПолеДействие = ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета);
	Для каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СодержитПолеДействие Тогда
			
			Если СтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка")
				И СтрокаНачисления.Свойство("ДействующийВидРасчета")
				И Не СтрокаНачисления.ДействующийВидРасчета Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрокаНачисленияСодержитВкладВФОТ(СтрокаНачисления, ОписаниеТаблицыВидовРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Начисление = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
		Если ЗначениеЗаполнено(Начисление) Тогда
			ВидРасчетаИнфо = ИнформацияОНачислении(Начисление);
			Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
				ФОТ = ФОТ + СтрокаНачисления.Размер;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыВидовРасчета) Тогда
		
		ИменаЭлементов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
		
		Если НадбавкаЗаВредностьПрименяется(Форма) Тогда
			
			Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
			Если ЗначениеЗаполнено(Начисление) Тогда
				
				ВидРасчетаИнфо = ИнформацияОНачислении(Начисление);
				Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
					ФОТ = ФОТ + ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность");
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если РайонныйКоэффициентПрименяется(Форма) Тогда
			
			Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент");
			Если ЗначениеЗаполнено(Начисление) Тогда
				
				ВидРасчетаИнфо = ИнформацияОНачислении(Начисление);
				Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
					ФОТ = ФОТ + ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент");
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СевернаяНадбавкаПрименяется(Форма) Тогда
			
			Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент");
			Если ЗначениеЗаполнено(Начисление) Тогда
				
				ВидРасчетаИнфо = ИнформацияОНачислении(Начисление);
				Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
					ФОТ = ФОТ + ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка");
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ФОТ;
	
КонецФункции

Функция РассчитатьИтогиФОТВФормеДокументаСНесколькимиРабочимиМестами(Форма, ОписаниеТаблицыВидовРасчета, ПутьКДаннымФОТ = "ФОТ") Экспорт
	
	ФОТ = 0;
	ФОТПоРабочимМестам = Новый Соответствие;
	ПредставленияРабочихМест = Новый Соответствие;
	
	МаксимальнаяДлинаПредставления = 0;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	Для каждого СтрокаНачислений Из ДанныеНачислений Цикл
		
		Если СтрокаНачислений.Свойство("Действие") И СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда
			Продолжить;
		КонецЕсли; 
		
		ФОТ = ФОТ + СтрокаНачислений.Размер;
		
		Сотрудник = СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник];
		
		ФОТРабочегоМеста = ФОТПоРабочимМестам.Получить(Сотрудник);
		Если ФОТРабочегоМеста = Неопределено Тогда
			
			Если СтрокаНачислений.Свойство(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаПредставлениеРабочегоМеста) Тогда
				ПредставлениеРабочегоМеста = СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаПредставлениеРабочегоМеста];
			Иначе
				ПредставлениеРабочегоМеста = Сотрудник;
			КонецЕсли;
			
			ДлинаПредставления = СтрДлина(ПредставлениеРабочегоМеста);
			Если МаксимальнаяДлинаПредставления < ДлинаПредставления Тогда
				МаксимальнаяДлинаПредставления = ДлинаПредставления;
			КонецЕсли; 
			
			ПредставленияРабочихМест.Вставить(Сотрудник, ПредставлениеРабочегоМеста);
			ФОТРабочегоМеста = 0;
			
		КонецЕсли; 
		
		ФОТРабочегоМеста = ФОТРабочегоМеста + СтрокаНачислений.Размер;
		ФОТПоРабочимМестам.Вставить(Сотрудник, ФОТРабочегоМеста);
		
	КонецЦикла;
	
	ТекстРасширеннойПодсказки = "";
	Если ФОТПоРабочимМестам.Количество() > 1 Тогда
		
		ШаблонПробелов = "     ";
		Для Номер = 1 По МаксимальнаяДлинаПредставления / 5 + 1 Цикл
			ШаблонПробелов = ШаблонПробелов + "     ";
		КонецЦикла;
		
		МаксимальнаяДлинаФОТ = 0;
		Для каждого ОписаниеИтогаФОТ Из ФОТПоРабочимМестам Цикл
			
			ПредставлениеФОТ = Формат(ОписаниеИтогаФОТ.Значение, "ЧДЦ=2");
			ДлинаПредставленияФОТ = СтрДлина(ПредставлениеФОТ);
			
			Если МаксимальнаяДлинаФОТ < ДлинаПредставленияФОТ Тогда
				МаксимальнаяДлинаФОТ = ДлинаПредставленияФОТ;
			КонецЕсли;
			
		КонецЦикла;
			
		Для каждого ОписаниеИтогаФОТ Из ФОТПоРабочимМестам Цикл
			
			ПредставлениеРабочегоМеста = ПредставленияРабочихМест.Получить(ОписаниеИтогаФОТ.Ключ);
			ДлинаПредставления = СтрДлина(ПредставлениеРабочегоМеста);
			
			ПредставлениеФОТ = Формат(ОписаниеИтогаФОТ.Значение, "ЧДЦ=2");
			ДлинаПредставленияФОТ = СтрДлина(ПредставлениеФОТ);
			
			ТекстРасширеннойПодсказки = ?(ПустаяСтрока(ТекстРасширеннойПодсказки), "", ТекстРасширеннойПодсказки + Символы.ПС)
				+ ПредставлениеРабочегоМеста + Сред(ШаблонПробелов, 1, МаксимальнаяДлинаПредставления - ДлинаПредставления) + ": "
				+ Сред(ШаблонПробелов, 1, МаксимальнаяДлинаФОТ - ДлинаПредставленияФОТ) + ПредставлениеФОТ;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКДаннымФОТ, ФОТ);
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ПутьКДаннымФОТ, ТекстРасширеннойПодсказки);
	
КонецФункции

Функция ПредставлениеКомандыВводаСтажаСотрудника(ВидСтажа, Лет, Месяцев, Дней, НетСведенийОСтаже, ВключатьВПредставлениеНаименованиеСтажа) Экспорт
	
	ПредставлениеКоманды = "";
	Если НетСведенийОСтаже Тогда
		
		Если ВключатьВПредставлениеНаименованиеСтажа Тогда
			ПредставлениеКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Стаж ""%1"" не задан'"),
				Строка(ВидСтажа));;
		Иначе
			ПредставлениеКоманды = НСтр("ru = 'Стаж не задан'");
		КонецЕсли;
			
	Иначе
		
		Если ВключатьВПредставлениеНаименованиеСтажа Тогда
			ПредставлениеКоманды = Строка(ВидСтажа) + ": ";
		Иначе
			ПредставлениеКоманды = "";
		КонецЕсли;
		
		Если Лет > 0 Тогда
			
			ЛетМенееПяти = Лет - Цел(Лет / 10) * 10;
			Если (Лет < 5 ИЛИ Лет > 20)
				И ЛетМенееПяти > 0 И ЛетМенееПяти < 5 Тогда
				
				Если ЛетМенееПяти = 1 Тогда
					РасшифровкаЛет = НСтр("ru='год'");
				Иначе
					РасшифровкаЛет = НСтр("ru='года'");
				КонецЕсли;
				
			Иначе
				РасшифровкаЛет = НСтр("ru='лет'");
			КонецЕсли; 
			
			ПредставлениеКоманды = ПредставлениеКоманды + Формат(Лет, "ЧДЦ=0; ЧГ=") + " " + РасшифровкаЛет;
					
		КонецЕсли; 
		
		Если Месяцев > 0 Тогда
			
			ПредставлениеКоманды = ПредставлениеКоманды
				+ ?(Лет > 0, ", ", "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 мес.'"),
					Формат(Месяцев , "ЧДЦ=0; ЧН=; ЧГ="));
					
		КонецЕсли;
		
		Если Дней > 0 ИЛИ Месяцев = 0 И Лет = 0 Тогда
			
			ПредставлениеКоманды = ПредставлениеКоманды
				+ ?(Месяцев > 0 ИЛИ Лет > 0, ", ", "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 дн.'"),
					Формат(Дней , "ЧДЦ=0; ЧН=; ЧГ="));
					
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат ПредставлениеКоманды;
	
КонецФункции

Функция ПредставленияКомандыВводаСтажейСотрудника(СведенияОСтажах, ВидыСтажа) Экспорт
	
	ПредставлениеКоманды = "";
	НесколькоСтажей = ВидыСтажа.Количество() > 1;
	Для каждого ВидСтажа Из ВидыСтажа Цикл
		
		СведенияОСтаже = СведенияОСтажах.Получить(ВидСтажа);
		Если СведенияОСтаже = Неопределено Тогда
			
			Лет = 0;
			Месяцев = 0;
			Дней = 0;
			НетСведенийОСтаже = Истина;
			
		Иначе
			
			Лет = СведенияОСтаже.Лет;
			Месяцев = СведенияОСтаже.Месяцев;
			Дней = СведенияОСтаже.Дней;
			НетСведенийОСтаже = Ложь;
			
		КонецЕсли;
		
		ПредставлениеКоманды = ?(ПустаяСтрока(ПредставлениеКоманды), "", ПредставлениеКоманды + ";" + Символы.ПС)
			+ ПредставлениеКомандыВводаСтажаСотрудника(ВидСтажа, Лет, Месяцев, Дней, НетСведенийОСтаже, НесколькоСтажей);
			
	КонецЦикла;
		
	Возврат ПредставлениеКоманды;
	
КонецФункции

Функция ПродолжительностьСтажа(Знач ОписаниеСтажа, Знач ДатаАктуальности) Экспорт 
	
	Возврат КадровыйУчетРасширенныйВызовСервера.ПродолжительностьСтажа(ОписаниеСтажа, ДатаАктуальности);
	
КонецФункции

Функция ПредставлениеСтажа(Лет, Месяцев, Дней) Экспорт 
	
	ПоследняяЦифра = Прав(Лет, 1);
	Если СтрНайти("0,5,6,7,8,9", ПоследняяЦифра) <> 0 Тогда 
		КоличествоЛетШаблон = НСтр("ru = '%1 лет'");
	Иначе 
		ПоследниеДвеЦифры = Прав(Лет, 2);
		ПоследниеДвеЦифры = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПоследниеДвеЦифры, 2, "0");
		Если ПоследняяЦифра = "1" Тогда 
			КоличествоЛетШаблон = ?(ПоследниеДвеЦифры = "11", НСтр("ru = '%1 лет'"), НСтр("ru = '%1 год'"));
		Иначе
			КоличествоЛетШаблон = ?(Найти("12,13,14", ПоследниеДвеЦифры) = 0, НСтр("ru = '%1 года'"), НСтр("ru = '%1 лет'"));
		КонецЕсли;
	КонецЕсли;
	КоличествоЛетТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КоличествоЛетШаблон, Лет);
	
	ПоследняяЦифра = Прав(Месяцев, 1);
	Если СтрНайти("0,5,6,7,8,9", ПоследняяЦифра) <> 0 Тогда 
		КоличествоМесяцевШаблон = НСтр("ru = '%1 месяцев'");
	Иначе 
		ПоследниеДвеЦифры = Прав(Месяцев, 2);
		ПоследниеДвеЦифры = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПоследниеДвеЦифры, 2, "0");
		Если ПоследняяЦифра = "1" Тогда 
			КоличествоМесяцевШаблон = ?(ПоследниеДвеЦифры = "11", НСтр("ru = '%1 месяцев'"), НСтр("ru = '%1 месяц'"));
		Иначе
			КоличествоМесяцевШаблон = ?(Найти("12,13,14", ПоследниеДвеЦифры) = 0, НСтр("ru = '%1 месяца'"), НСтр("ru = '%1 месяцев'"));
		КонецЕсли;
	КонецЕсли;
	КоличествоМесяцевТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КоличествоМесяцевШаблон, Месяцев);
	
	ПоследняяЦифра = Прав(Дней, 1);
	Если СтрНайти("0,5,6,7,8,9", ПоследняяЦифра) <> 0 Тогда 
		КоличествоДнейШаблон = НСтр("ru = '%1 дней'");
	Иначе 
		ПоследниеДвеЦифры = Прав(Дней, 2);
		ПоследниеДвеЦифры = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПоследниеДвеЦифры, 2, "0");
		Если ПоследняяЦифра = "1" Тогда 
			КоличествоДнейШаблон = ?(ПоследниеДвеЦифры = "11", НСтр("ru = '%1 дней'"), НСтр("ru = '%1 день'"));
		Иначе
			КоличествоДнейШаблон = ?(Найти("12,13,14", ПоследниеДвеЦифры) = 0, НСтр("ru = '%1 дня'"), НСтр("ru = '%1 дней'"));
		КонецЕсли;
	КонецЕсли;
	КоличествоДнейТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КоличествоДнейШаблон, Дней);
	
	ПредставлениеСтажа = "";
	Если Лет <> 0 Тогда 
		ПредставлениеСтажа = КоличествоЛетТекст;
	КонецЕсли;
	
	Если Месяцев <> 0 Тогда 
		ПредставлениеСтажа = ПредставлениеСтажа + ?(ПредставлениеСтажа = "", "", ", ") + КоличествоМесяцевТекст;
	КонецЕсли;
	
	Если ПредставлениеСтажа <> "" И Дней <> 0 Тогда 
		ПредставлениеСтажа = ПредставлениеСтажа + " " + НСтр("ru = 'и'") + " " + КоличествоДнейТекст;
	КонецЕсли;
	
	Если ПредставлениеСтажа = "" Тогда 
		ПредставлениеСтажа = КоличествоДнейТекст;
	КонецЕсли;
	
	Возврат ПредставлениеСтажа;
	
КонецФункции

Функция СведенияОСтаже() Экспорт 
	
	СведенияОСтаже = Новый Структура();
	СведенияОСтаже.Вставить("ПериодРегистрации", '00010101');
	СведенияОСтаже.Вставить("ДатаОтсчета", '00010101');
	СведенияОСтаже.Вставить("РазмерМесяцев", 0);
	СведенияОСтаже.Вставить("РазмерДней", 0);
	СведенияОСтаже.Вставить("ИсчисляетсяСДатыПриема", Ложь);
	СведенияОСтаже.Вставить("Лет", 0);
	СведенияОСтаже.Вставить("Месяцев", 0);
	СведенияОСтаже.Вставить("Дней", 0);
	СведенияОСтаже.Вставить("Прерван", Ложь);
	
	Возврат СведенияОСтаже;
	
КонецФункции

// Функция определяет есть ли данные в таблицах документа, подключенных к механизму.
Функция КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц)
	
	ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Если Таблица.Количество() > 0 Тогда
			ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтображатьПредупреждениеПриРедактировании;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоказателейТарифныхСеток(Форма, КоллекцияСтрокНачислений, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДополнительныеПараметры) Экспорт
	
	Если НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из КоллекцияСтрокНачислений Цикл
		Действие = Неопределено;
		СтрокаНачислений.Свойство("Действие", Действие);
		Если Действие <> ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить") Тогда 
			ЗаполнитьЗначенияПоказателейТарифныхСетокВСтрокеНачислений(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейТарифныхСетокВСтрокеНачислений(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДополнительныеПараметры) Экспорт
	
	ДатаСведений = ДополнительныеПараметры.ДатаСведений; 
	ТарифнаяСетка = ДополнительныеПараметры.ТарифнаяСетка; 
	ТарифнаяСеткаНадбавки = ДополнительныеПараметры.ТарифнаяСеткаНадбавки; 
	РазрядКатегория = ДополнительныеПараметры.РазрядКатегория; 
	РазрядКатегорияНадбавки = ДополнительныеПараметры.РазрядКатегорияНадбавки;
	ПКУ = ДополнительныеПараметры.ПКУ;
	СчитатьПоказателиПоДолжности = ДополнительныеПараметры.СчитатьПоказателиПоДолжности;
	
	ВидРасчета = СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
	Если ЗначениеЗаполнено(ВидРасчета) Тогда
		
		Если (ЗначениеЗаполнено(ТарифнаяСетка)
				ИЛИ ЗначениеЗаполнено(ТарифнаяСеткаНадбавки))
			И (РежимРаботы = 0
				ИЛИ ЗначениеЗаполнено(РазрядКатегория)
				ИЛИ ЗначениеЗаполнено(РазрядКатегорияНадбавки)
				ИЛИ ЗначениеЗаполнено(ПКУ)) Тогда
			
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйПовтИсп.ДанныеТарифныхСеток(
					ТарифнаяСетка, РазрядКатегория, ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, СчитатьПоказателиПоДолжности, ПКУ);
			#Иначе
				ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ДанныеТарифныхСеток(
					ТарифнаяСетка, РазрядКатегория, ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, СчитатьПоказателиПоДолжности, ПКУ);
			#КонецЕсли

			ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
			
			Для СчетчикПоказателей = 1 По МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаНачислений["Показатель" + СчетчикПоказателей]) Тогда
					Прервать;
				КонецЕсли; 
				
				Если ДанныеТарифныхСеток.СписокПоказателейОклад.Найти(СтрокаНачислений["Показатель" + СчетчикПоказателей]) <> Неопределено Тогда
					
					Значение = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение;
					ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМин;
					ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс;
					
				ИначеЕсли ДанныеТарифныхСеток.СписокПоказателейОкладПоДолжности.Найти(СтрокаНачислений["Показатель" + СчетчикПоказателей]) <> Неопределено Тогда
					
					Значение = ДанныеТарифныхСеток.ЗначениеПоказателейОкладПоДолжности.Значение;
					ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОкладПоДолжности.ЗначениеМин;
					ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОкладПоДолжности.ЗначениеМакс;
					
				ИначеЕсли ДанныеТарифныхСеток.СписокПоказателейКвалификационнаяНадбавка.Найти(СтрокаНачислений["Показатель" + СчетчикПоказателей]) <> Неопределено Тогда
					
					Значение = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение;
					ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМин;
					ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс;
					
				ИначеЕсли РежимРаботы <> 0 И ЗначениеЗаполнено(РазрядКатегорияНадбавки) 
					И ДанныеТарифныхСеток.СписокПоказателейДоплатыЗаКвалификацию.Найти(СтрокаНачислений["Показатель" + СчетчикПоказателей]) <> Неопределено Тогда
					
					ТарифПозиции = ДанныеТарифныхСеток.ЗначенияТарифов[РазрядКатегория]; 
					ТарифСотрудника = ДанныеТарифныхСеток.ЗначенияТарифов[РазрядКатегорияНадбавки];
					Если ТарифПозиции <> Неопределено И ТарифСотрудника <> Неопределено Тогда 
						Значение = Макс(ТарифСотрудника - ТарифПозиции, 0);
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если РежимРаботы = 0 Тогда
					Значение = ЗначениеМакс;
				КонецЕсли; 
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании И РежимРаботы = 0 Тогда
					СтрокаНачислений["МинимальноеЗначение" + СчетчикПоказателей] = ЗначениеМин;
					СтрокаНачислений["МаксимальноеЗначение" + СчетчикПоказателей] = ЗначениеМакс;
				ИначеЕсли Значение <> 0 Или РежимРаботы = 0 Тогда 
					СтрокаНачислений["Значение" + СчетчикПоказателей] = Значение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаполненияЗначенийПоказателейТарифныхСеток() Экспорт 
	
	ДополнительныеПараметры = Новый Структура(
		"ДатаСведений, 
		|ТарифнаяСетка, 
		|ТарифнаяСеткаНадбавки, 
		|РазрядКатегория, 
		|РазрядКатегорияНадбавки,
		|ПКУ,
		|СчитатьПоказателиПоДолжности");
		
	ДополнительныеПараметры.СчитатьПоказателиПоДолжности = Ложь;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура УстановитьСвойствоРассчитыватьУдержания(Форма) Экспорт 
	
	ВыплатаВМежрасчетныйПериод = Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Межрасчет")
								Или Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Аванс");
	Форма.Объект.РассчитыватьУдержания = ВыплатаВМежрасчетныйПериод;
	
КонецПроцедуры

Процедура УстановитьДоступностьПоляРассчитыватьУдержания(Форма) Экспорт 
	
	ВыплатаВМежрасчетныйПериод = Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Межрасчет")
								Или Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Аванс");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РассчитыватьУдержания", "Доступность", ВыплатаВМежрасчетныйПериод);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияЗаполненныхСвойств(Приемник, Источник) Экспорт
	
	Для каждого СвойствоИсточника Из Источник Цикл
		
		Если Не ЗначениеЗаполнено(СвойствоИсточника.Значение) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Не Приемник.Свойство(СвойствоИсточника.Ключ) Тогда
			Продолжить;
		КонецЕсли; 
		
		Приемник[СвойствоИсточника.Ключ] = СвойствоИсточника.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИтогФОТДокумента(ФОТ, Форма, ОписаниеТаблицыВидовРасчета) Экспорт
	
	ФОТ = ИтогиПоФОТ(Форма, ОписаниеТаблицыВидовРасчета);
	
КонецПроцедуры

Процедура СброситьФлагНеобходимостиВыполненияРасчета(Форма, ИмяКнопкиРассчитать = "Рассчитать") Экспорт
	
	Форма.РасчетНеобходимоВыполнить = Ложь;
	УстановитьСостояниеКнопкиФормыРассчитать(Форма, Форма.РасчетНеобходимоВыполнить, ИмяКнопкиРассчитать);
	
КонецПроцедуры

Процедура УстановитьСостояниеКнопкиФормыРассчитать(Форма, РасчетНеобходимоВыполнить, ИмяКнопкиРассчитать = "Рассчитать") Экспорт
	
	Если РасчетНеобходимоВыполнить Тогда
		КартинкаКнопки = БиблиотекаКартинок.ПересчитатьЗарплатуКрасная;
		ЦветФонаКнопки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ВыделеннаяКнопкаФон");
	Иначе
		КартинкаКнопки = БиблиотекаКартинок.ПересчитатьЗарплатуСерая;
		ЦветФонаКнопки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветФонаКнопки");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяКнопкиРассчитать,
		"Картинка",
		КартинкаКнопки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИмяКнопкиРассчитать,
		"ЦветФона",
		ЦветФонаКнопки);
	
КонецПроцедуры

// Функция возвращает пустую структуру, предназначенную для заполнения в модулях менеджеров документов.
//
Функция СтруктураОписанияДокумента() Экспорт

	ОписаниеДокумента = Новый Структура;
	
	ОписаниеДокумента.Вставить("КраткоеНазваниеИменительныйПадеж");
	ОписаниеДокумента.Вставить("КраткоеНазваниеРодительныйПадеж");
	ОписаниеДокумента.Вставить("ИмяРеквизитаСотрудник");
	ОписаниеДокумента.Вставить("ИмяРеквизитаОтсутствующийСотрудник");
	ОписаниеДокумента.Вставить("ИмяРеквизитаДатаНачалаСобытия");
	ОписаниеДокумента.Вставить("ИмяРеквизитаДатаОкончанияСобытия");
	ОписаниеДокумента.Вставить("ИмяРеквизитаДокументОснование");
	ОписаниеДокумента.Вставить("ИмяРеквизитаФормыТекущаяПозицияШР", Неопределено);
			
	Возврат ОписаниеДокумента;

КонецФункции

Функция ПредставлениеВсеРабочиеМеста() Экспорт
	
	Возврат НСтр("ru = 'Все рабочие места'");
	
КонецФункции

#КонецОбласти
