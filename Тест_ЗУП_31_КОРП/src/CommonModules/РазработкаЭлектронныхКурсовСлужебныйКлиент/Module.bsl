#Область СлужебныеПроцедурыИФункции

// Порядок элементов

// Перемещает элемент вверх или вниз в таблице
//
Процедура ПереместитьЭлемент(Направление, Таблица) Экспорт
	
	Если Таблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаЭлемент = Таблица.ТекущиеДанные.Ссылка;
	
	РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ПереместитьЭлемент(Направление, СсылкаНаЭлемент);
	
	Таблица.Обновить();
	
КонецПроцедуры

// Работа с документами Word

Функция ЕстьПоддержкаДокументов() Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие; // Глобальная переменная
	КонецЕсли;	

	ИмяПараметра = "ЭлектронныеРесурсы.ЕстьПоддержкаДокументов";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
	
		ЕстьПоддержка = Ложь;
		
		#Если НЕ ВебКлиент Тогда
			
		СистемнаяИнформация = Новый СистемнаяИнформация();
				
		ТипПлатформыНаКлиенте = СистемнаяИнформация.ТипПлатформы;

		Если ТипПлатформыНаКлиенте = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыНаКлиенте = ТипПлатформы.Windows_x86_64 Тогда		
			
			ЕстьПоддержка = Истина;
			
		КонецЕсли;	
			
		#КонецЕсли	
			
		ПараметрыПриложения.Вставить(ИмяПараметра, ЕстьПоддержка);
		
	Иначе
		
		ЕстьПоддержка = ПараметрыПриложения[ИмяПараметра];	
		
	КонецЕсли;
	
	Возврат ЕстьПоддержка;
	
КонецФункции

Функция ДиалогВыбораФайлаПоТипу(Знач ТипФайла, Знач Заголовок, Знач ИмяТипа) Экспорт
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = Заголовок;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;	
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	
	Если ТипФайла <> Неопределено Тогда
		
		Если ТипЗнч(ТипФайла) <> Тип("Массив") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипФайла);
		Иначе
			МассивТипов = ТипФайла;
		КонецЕсли;
		
		РасширенияФайлов = Новый Массив;
		
		Для каждого ТипФайла Из МассивТипов Цикл
			
			РасширенияФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.СоответствиеРасширенияИТипаЭлементаРесурса(ТипФайла);
			
			Для каждого РасширениеФайла Из РасширенияФайла Цикл
			
				Если РасширенияФайлов.Найти(РасширениеФайла) = Неопределено Тогда
					РасширенияФайлов.Добавить(РасширениеФайла);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;		
		
		СписокРасширений = "";
		
		Для каждого Элемент Из РасширенияФайлов Цикл		
			Расширение = СтрЗаменить(Элемент.Ключ, "_", ".");			
			СписокРасширений = СписокРасширений + "*" + Расширение + ";"; 			
		КонецЦикла;
		
		СписокРасширений = Лев(СписокРасширений, СтрДлина(СписокРасширений)-1);		
		ДиалогВыбораФайла.Фильтр = ИмяТипа + "("+СписокРасширений+")|"+СписокРасширений+"";			
		
	КонецЕсли;
		
	Возврат ДиалогВыбораФайла;
	
КонецФункции

Процедура СформироватьДокументДляСохраненияВБазе(ПараметрыЗагрузки = Неопределено) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	// Делаем проверки
	//
	
	Если ПараметрыЗагрузки = Неопределено
		ИЛИ	НЕ ПараметрыЗагрузки.Свойство("Приложение")
		ИЛИ НЕ ПараметрыЗагрузки.Свойство("УникальныйИдентификатор")
		ИЛИ НЕ ПараметрыЗагрузки.Свойство("ПутьКДокументу") Тогда
		
		ВызватьИсключение НСтр("ru = 'Отсутствуют обязательные параметры загрузки документа'")
		
	КонецЕсли;
		
	ФайлДокумента = Новый Файл(ПараметрыЗагрузки.ПутьКДокументу);
	
	Если НЕ ФайлДокумента.Существует() Тогда
		ВызватьИсключение НСтр("ru = 'Файл не найден:'") + ПараметрыЗагрузки.ПутьКДокументу
	КонецЕсли;
	
	// Получаем переменные
	//
	
	ПутьКФайлуДокумента    = ПараметрыЗагрузки.ПутьКДокументу;	
	ПутьККаталогуДокумента = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ФайлДокумента.Путь);
	
	Если ПараметрыЗагрузки.Свойство("ФайлыДляУдаления") Тогда
		ФайлыДляУдаления = ПараметрыЗагрузки.ФайлыДляУдаления;
	Иначе
		ФайлыДляУдаления = Новый Массив;
	КонецЕсли;
	
	WordApp = ПараметрыЗагрузки.Приложение;
	
	ФайлыДляСохранения = Новый Массив(); // Файлы, которые реально будут сохранены в базе
	
	ДокументДляСохранения = Неопределено;
	
	ДокументДляСохранения = ФайлДокумента;
	
	// Формируем HTML вариант документа
	//
	
	Попытка
		DocAsHTML = WordApp.Documents.Open(ПутьКФайлуДокумента,,,Ложь);
	Исключение				
		// Записываем ошибку в журнал
		ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(WordApp, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		// Исключение не создаем, так как оно будет вызвано в ЗакрытьCOMПриложение
		Возврат;
	КонецПопытки;

	DocAsHTML.WebOptions.AllowPNG = Истина;
	DocAsHTML.WebOptions.Encoding = 65001;
	DocAsHTML.WebOptions.BrowserLevel = 2;
	DocAsHTML.WebOptions.OptimizeForBrowser = Истина;
	DocAsHTML.WebOptions.RelyOnCSS = Истина;
	
	ФайлHTML = Новый Файл(РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПутьКФайлуЗапускаДокумента(ПутьККаталогуДокумента));				
	ФайлыДляУдаления.Добавить(ФайлHTML.ПолноеИмя);	
	DocAsHTML.SaveAs(ФайлHTML.ПолноеИмя, 10,,,Ложь,,,,,,,65001); //wdFormatFilteredHTML, UTF-8		
	ФайлHTMLДополнения = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + ".files");
	
	Если ФайлHTMLДополнения.Существует() Тогда		
		ФайлыДляУдаления.Добавить(ФайлHTMLДополнения.ПолноеИмя);	
	КонецЕсли;	
	
	// Обрабатываем гиперссылки
	//
	
	Для каждого Гиперссылка Из DocAsHTML.Hyperlinks Цикл		
		Гиперссылка.Target = "_blank"; // Все ссылки считаем внешними		
	КонецЦикла;
	
	DocAsHTML.Save();	
	
	// Обрабатываем дополнительные файлы страницы (картинки в этих файлах)
	//
					
	Если ПараметрыЗагрузки <> Неопределено И ПараметрыЗагрузки.Свойство("НастройкиКартинок") И ФайлHTMLДополнения.Существует() Тогда
		
		ShellApp = Новый COMОбъект("shell.application");
		
		// Ищем все картинки в оригинальном каталоге.
		// Каждая картинка будет основой для серии картинок.
		// Серия картинок может содержать одну и более картинок.
		// Сейчас серия может содержать максимум две картинки - оригинальная и в формате PNG.
		
		СерииКартинокФайлы = НайтиФайлы(ФайлHTMLДополнения.ПолноеИмя, "image*.*", Ложь);		
		
		Для каждого ФайлКартинки Из СерииКартинокФайлы Цикл
			
			НоваяСерияКартинок = Новый Структура("Имя, Картинки", ФайлКартинки.ИмяБезРасширения, Новый Массив());			
			ДобавитьКартинкуВСерию(НоваяСерияКартинок.Картинки, ФайлКартинки, ShellApp);			
			ПараметрыЗагрузки.НастройкиКартинок.СерииКартинок.Добавить(НоваяСерияКартинок);
			
		КонецЦикла;
		
		// Ищем картинки PNG
		Попытка		
			DocAsHTML_FULL = WordApp.Documents.Open(ПутьКФайлуДокумента,,,Ложь);
		Исключение				
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(WordApp, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		DocAsHTML_FULL.WebOptions.AllowPNG = Истина;
		DocAsHTML_FULL.WebOptions.Encoding = 65001;
		DocAsHTML_FULL.WebOptions.BrowserLevel = 2;
		DocAsHTML_FULL.WebOptions.OptimizeForBrowser = Истина;
		DocAsHTML_FULL.WebOptions.RelyOnCSS = Истина;
		
		ФайлHTMLПолный = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + "_full.html");
		
		ФайлыДляУдаления.Добавить(ФайлHTMLПолный.ПолноеИмя);
		
		DocAsHTML_FULL.SaveAs(ФайлHTMLПолный.ПолноеИмя, 8,,,Ложь,,,,,,,65001); //wdFormatHTML, UTF-8
		
		DocAsHTML_FULL.Close();
		
		ФайлHTMLПолныйДополнения = Новый Файл(ПутьККаталогуДокумента + ФайлHTML.ИмяБезРасширения + "_full.files");
		
		Если ФайлHTMLПолныйДополнения.Существует() Тогда
			
			ФайлыДляУдаления.Добавить(ФайлHTMLПолныйДополнения.ПолноеИмя);
			
			КартинкиСтандартные = НайтиФайлы(ФайлHTMLДополнения.ПолноеИмя, "image*.*", Ложь);
			КартинкиИсходные    = НайтиФайлы(ФайлHTMLПолныйДополнения.ПолноеИмя, "image*.*", Ложь);
			
			Если КартинкиСтандартные.Количество() = КартинкиИсходные.Количество() Тогда // Картинки не будут перепутаны
				
				// Копируем исходные картинки
				
				Для каждого СтандартныйФайл Из КартинкиСтандартные Цикл
					
					// Ищем исходный файл
					
					ИсходныйФайлСтандартного = Неопределено;
					
					Для каждого ИсходныйФайл Из КартинкиИсходные Цикл
						Если ИсходныйФайл.ИмяБезРасширения = СтандартныйФайл.ИмяБезРасширения Тогда
							ИсходныйФайлСтандартного = ИсходныйФайл;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ИсходныйФайлСтандартного = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйДополнительныйФайл = Новый Файл(ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ФайлHTMLДополнения.ПолноеИмя) + ИсходныйФайлСтандартного.ИмяБезРасширения + "_src" + ИсходныйФайлСтандартного.Расширение);
						
					КопироватьФайл(ИсходныйФайлСтандартного.ПолноеИмя, НовыйДополнительныйФайл.ПолноеИмя);
						
					// Добавляем новую картинку PNG в серию
						
					ТекСерияКартинок = Неопределено;
					
					Для каждого Строка Из ПараметрыЗагрузки.НастройкиКартинок.СерииКартинок Цикл
					
						Если Строка.Имя = СтандартныйФайл.ИмяБезРасширения Тогда
							ТекСерияКартинок = Строка;
							Прервать;
						КонецЕсли;
					
					КонецЦикла;
					
					Если ТекСерияКартинок <> Неопределено Тогда
						ДобавитьКартинкуВСерию(ТекСерияКартинок.Картинки, НовыйДополнительныйФайл, ShellApp);	
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;			
			
		КонецЕсли;		
						
	КонецЕсли; // Обработка доп. файлов
	
	// Закрываем документ
	//
	
	DocAsHTML.Close();	
	
	// Получаем данные для индексирования
	//
	
	Если ПараметрыЗагрузки.Свойство("ТекстовыеДанныеДляИндексирования") Тогда
		
		Извлечение = Новый ИзвлечениеТекста(ФайлHTML.ПолноеИмя);
		
		ТекстФайла = "";
		
		Попытка			
			ТекстФайла = Извлечение.ПолучитьТекст();			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Произошла ошибка при извлечении текста из файла: %1'"), ФайлHTML.ПолноеИмя);
			ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
		
		ПараметрыЗагрузки.ТекстовыеДанныеДляИндексирования = ТекстФайла;
		
	КонецЕсли;	
	
	// Копируем получившийся HTML в один каталог
	//
	
	КаталогДляСохраненияHTML = ПолучитьИмяВременногоФайла("");	
	СоздатьКаталог(КаталогДляСохраненияHTML);	
	ФайлыДляУдаления.Добавить(КаталогДляСохраненияHTML);
	
	КаталогДляСохраненияHTML = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляСохраненияHTML);	

	КопироватьФайл(ФайлHTML.ПолноеИмя, КаталогДляСохраненияHTML + ФайлHTML.Имя);
	
	Если ФайлHTMLДополнения.Существует() Тогда
		
		КаталогДляСохраненияДопФайлов = КаталогДляСохраненияHTML + ФайлHTMLДополнения.Имя;
		
		СоздатьКаталог(КаталогДляСохраненияДопФайлов);
		
		КаталогДляСохраненияДопФайлов = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляСохраненияДопФайлов);
		
		ДопФайлы = НайтиФайлы(ФайлHTMLДополнения.ПолноеИмя, "*", Ложь);
		
		Для каждого ДопФайл Из ДопФайлы Цикл		
			КопироватьФайл(ДопФайл.ПолноеИмя, КаталогДляСохраненияДопФайлов + ДопФайл.Имя);				
		КонецЦикла;
		
	КонецЕсли;
	
	// Упаковываем HTML каталог
    //	
	
	ПутьКАрхивуZIP = ПолучитьИмяВременногоФайла("zip");
	
	ФайлZIP = Новый ЗаписьZipФайла(ПутьКАрхивуZIP,,,МетодСжатияZIP.Копирование);							
	ФайлZIP.Добавить(КаталогДляСохраненияHTML + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,  РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ФайлZIP.Записать();		

	ФайлыДляУдаления.Добавить(ПутьКАрхивуZIP);
	ФайлыДляСохранения.Добавить(Новый Файл(ПутьКАрхивуZIP));
	
	// Помещаем файл в хранилище на сервере	
	//
	
	ФайлыДляСохранения.Добавить(ДокументДляСохранения);	
	ПараметрыЗагрузки.СтруктураФайлов.Добавить(ЭлектронноеОбучениеСлужебныйКлиентСервер.НовоеОписаниеФайла(ФайлДокумента, ПараметрыЗагрузки.КонтекстФайла));	
	Для каждого ФайлДляСохранения Из ФайлыДляСохранения Цикл		
		ПараметрыЗагрузки.ПередаваемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлДляСохранения.ПолноеИмя));
	КонецЦикла;	
	ПоместитьФайлы(ПараметрыЗагрузки.ПередаваемыеФайлы, ПараметрыЗагрузки.ПереданныеФайлы,, Ложь, ПараметрыЗагрузки.УникальныйИдентификатор);
		
	// Удаляем старые файлы
	//
	
	Для каждого ПутьКФайлу Из ФайлыДляУдаления Цикл
			
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
			ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
				|%1 по причине: %2'"), ПутьКФайлу, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
			);
		КонецПопытки;			
		
	КонецЦикла;	
	
	#КонецЕсли
	
КонецПроцедуры

Функция ПриложениеMSWord(DOCApp) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(DOCApp) Тогда

		Попытка
			DOCApp = Новый COMObject("Word.Application");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Программа MS Word не найдена.'") + ОписаниеОшибки());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			DOCApp = Неопределено;
		КонецПопытки;
		
		DOCApp.Visible = Ложь;
		
	КонецЕсли;
	
	Возврат DOCApp;
	
	#КонецЕсли
	
КонецФункции

Процедура ИнициализироватьПриложениеРаботыСДокументами(Приложение) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	// Инициализируем приложение
	//
	
	Если Приложение = Неопределено Тогда
		Приложение = Новый Структура("Пользовательское, Скрытое, Версия, Документ, РабочийКаталог, ПропуститьЗапись");
	КонецЕсли;
	
	Приложение.ПропуститьЗапись = Ложь;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		ИЛИ НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
			
		Приложение.Пользовательское = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриложениеMSWord(Приложение.Пользовательское);
		Приложение.Скрытое = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриложениеMSWord(Приложение.Скрытое);
		Приложение.Скрытое.Visible = Ложь;
		
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		ИЛИ НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда
		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;
		
	КонецЕсли;
	
	Если Приложение.Версия = Неопределено Тогда
		Приложение.Версия = Число(ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(Приложение.Пользовательское.Version, ".")[0]);	
	КонецЕсли;
	
	// Рабочий каталог
	//
	
	РабочийКаталог = Новый Структура("Путь, Документ, Копия, ФайлДляСохранения, ЭтоВременный, ИмяФайла");		
		
	РабочийКаталог.Путь = ПолучитьИмяВременногоФайла("");
	РабочийКаталог.ЭтоВременный = Истина;
	СоздатьКаталог(РабочийКаталог.Путь);	
	РабочийКаталог.Путь = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Путь);			

	// Путь для сохранения документа
	
	РабочийКаталог.Документ = РабочийКаталог.Путь + "doc";	
	СоздатьКаталог(РабочийКаталог.Документ);	
	РабочийКаталог.Документ = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Документ);			
		
	// Имя файла
	
	РабочийКаталог.ИмяФайла = ""; // Заполним ниже после открытия/создания документа			
	
	// Путь для хранения копии документа
	
	РабочийКаталог.Копия = ПолучитьИмяВременногоФайла("");	
	СоздатьКаталог(РабочийКаталог.Копия);			
	РабочийКаталог.Копия = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог.Копия);
	
	Приложение.РабочийКаталог = РабочийКаталог;
	
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьДокумент(Приложение, ВладелецФормы, Форма, Скрытно, МестоХраненияДокументаВБазе, СвойстваЭлементаКурса) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	ИнициализироватьПриложениеРаботыСДокументами(Приложение);	
	
	РабочийКаталог = Приложение.РабочийКаталог;
	
	// Открываем документ
	//	
	
	Если НЕ ДокументДоступен(Приложение) Тогда
	
		ДобавитьОбработчик Приложение.Пользовательское.Quit, Форма.ПриЗакрытииВнешнегоПриложения;
		ДобавитьОбработчик Приложение.Пользовательское.DocumentBeforeSave, Форма.ПриЗаписиДокумента;	
		ДобавитьОбработчик Приложение.Пользовательское.DocumentBeforeClose, Форма.ПриЗакрытииДокумента;
		
		СвойстваШаблона = Неопределено;	
			
		Если МестоХраненияДокументаВБазе = Неопределено Тогда // Нет файла для открытия			
						
			Если СвойстваШаблона = Неопределено Тогда		
				Приложение.Документ = Приложение.Пользовательское.Documents.Add();
			Иначе
				Приложение.Документ = Приложение.Пользовательское.Documents.Add(СвойстваШаблона.ПутьКФайлу);
			КонецЕсли;	
			
			Если СвойстваЭлементаКурса = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СвойстваЭлементаКурса.Наименование) Тогда
				НаименованиеФайла = НСтр("ru = 'Документ'");
			Иначе
				НаименованиеФайла = СвойстваЭлементаКурса.Наименование;
			КонецЕсли;

			Приложение.ПропуститьЗапись = Истина;
			
			Если Приложение.Версия < 12 Тогда
				
				Если Приложение.Версия < 11 Тогда					
					Приложение.Документ.SaveAs2000(РабочийКаталог.Документ + НаименованиеФайла + ".doc", 0,,,Ложь);					
				Иначе					
					Приложение.Документ.SaveAs(РабочийКаталог.Документ + НаименованиеФайла + ".doc", 0,,,Ложь);					
				КонецЕсли;
				
			Иначе				
				Приложение.Документ.SaveAs(РабочийКаталог.Документ + НаименованиеФайла, 16,,, Ложь);				
			КонецЕсли;		
			
		Иначе
			
			ПолучитьФайл(МестоХраненияДокументаВБазе, РабочийКаталог.Документ + СвойстваЭлементаКурса.ИмяФайла, Ложь);
			
			Попытка
				Приложение.Документ = Приложение.Пользовательское.Documents.Open(РабочийКаталог.Документ + СвойстваЭлементаКурса.ИмяФайла,,,Ложь);
			Исключение				
				// Записываем в журнал ошибку
				ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Пользовательское, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Ошибку не показываем
				Возврат;
			КонецПопытки;			
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РабочийКаталог.ИмяФайла) Тогда
			РабочийКаталог.ИмяФайла = Приложение.Документ.Name;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определяем видимость приложения
	//
	
	Если Скрытно Тогда		
		Приложение.Пользовательское.Visible = Ложь;		
	Иначе				
		Приложение.Пользовательское.Visible = Истина;		
		Приложение.Пользовательское.WindowState = 2;
		Приложение.Пользовательское.WindowState = 1;			
	КонецЕсли;	
	
	#КонецЕсли
	
КонецПроцедуры

Функция ЕстьОткрытыеДокументы(Приложение) Экспорт
	
	Возврат ?(
	
		Приложение <> Неопределено
		И Приложение.Пользовательское <> Неопределено
		И ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		И Приложение.Пользовательское.Documents.Count > 0
		
		, Истина, Ложь);
		
		
КонецФункции

Процедура ПриЗакрытииФормыДокумента(Приложение, УдалятьCOMПриложенияПриЗакрытии, Форма) Экспорт
	
	Если Приложение <> Неопределено Тогда
		
		Если Приложение.Пользовательское <> Неопределено Тогда
		
			Попытка
				УдалитьОбработчик Приложение.Пользовательское.Quit, Форма.ПриЗакрытииВнешнегоПриложения;	
				УдалитьОбработчик Приложение.Пользовательское.DocumentBeforeSave, Форма.ПриЗаписиДокумента;	
				УдалитьОбработчик Приложение.Пользовательское.DocumentBeforeClose, Форма.ПриЗакрытииДокумента;	
			Исключение
				// Обработка исключения не требуется
			КонецПопытки;
			
			Если Приложение.Документ <> Неопределено Тогда
			
				Попытка
					Приложение.Документ.Close(0);
				Исключение	
					// Обработка исключения не требуется
				КонецПопытки;
				
			КонецЕсли;		
			
			Если УдалятьCOMПриложенияПриЗакрытии Тогда
				
				Если НЕ ЕстьОткрытыеДокументы(Приложение) Тогда
					// Нельзя удалять приложение, если есть открытые документы,
					// так как они могут не сохраниться.
					ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Пользовательское);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
			
		Если Приложение.Скрытое <> Неопределено
			И УдалятьCOMПриложенияПриЗакрытии Тогда
			
			ЭлектронноеОбучениеСлужебныйКлиент.ЗакрытьCOMПриложение(Приложение.Скрытое);

		КонецЕсли;		
		
			
		РабочийКаталог = Приложение.РабочийКаталог;
		
		Если РабочийКаталог <> Неопределено Тогда
			
			Если РабочийКаталог.ЭтоВременный Тогда
			
				Если ЗначениеЗаполнено(РабочийКаталог.Путь) Тогда
					
					Попытка
						УдалитьФайлы(РабочийКаталог.Путь);  // Удаляем временный каталог с файлом
					Исключение
						ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
							|%1 по причине: %2'"), РабочийКаталог.Путь, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
						);
					КонецПопытки;					
					
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочийКаталог.Копия) Тогда 
				
				Попытка
					УдалитьФайлы(РабочийКаталог.Копия); // Удаляем каталог с копией файла (всегда)
				Исключение
					ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
						|%1 по причине: %2'"), РабочийКаталог.Копия, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
					);
				КонецПопытки;	
				
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если УдалятьCOMПриложенияПриЗакрытии Тогда
			Приложение = Неопределено;
		КонецЕсли;		
		
	КонецЕсли;			
	
КонецПроцедуры

Функция ДокументДоступен(Приложение) Экспорт
	
	Если Приложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Приложение.Документ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяДокумента = Неопределено;
	
	Попытка
		ИмяДокумента = Приложение.Документ.Name;
	Исключение
		Приложение.Документ = Неопределено;
		// Обработка исключения не требуется
	КонецПопытки;
	
	Возврат ?(ИмяДокумента = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ДокументМодифицирован(Приложение) Экспорт
	
	Если НЕ ДокументДоступен(Приложение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Приложение.Документ.Saved Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовоеОписаниеКартинокДокумента(ВариантЗагрузкиКартинок = Неопределено) Экспорт
	Возврат Новый Структура("ВариантЗагрузкиКартинок, СерииКартинок", ?(ВариантЗагрузкиКартинок = Неопределено, ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиКартинокДокументовЭлектронныхКурсов.УвеличиватьСтандартные"),  ВариантЗагрузкиКартинок), Новый Массив()); // Информация о картинках, содержащихся в документе
КонецФункции

Процедура ДобавитьКартинкуВСерию(МассивКартинокСерии, ФайлКартинки, ShellApp)
	
	objFolder = ShellApp.NameSpace(ФайлКартинки.Путь);
	objItem   = objFolder.ParseName(ФайлКартинки.Имя) ;

	МассивКартинокСерии.Добавить(Новый Структура("Имя, РазмерКартинки, РазмерФайла", ФайлКартинки.Имя, objItem.ExtendedProperty("Dimensions"), ФайлКартинки.Размер()));
	
КонецПроцедуры

// Работа с презентациями

Функция ПриложениеPowerPoint(PPTApp) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(PPTApp) Тогда

		Попытка
			PPTApp = Новый COMObject("PowerPoint.Application");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Программа PowerPoint не найдена.'") + ОписаниеОшибки());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			PPTApp = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат PPTApp;
	
	#КонецЕсли
	
КонецФункции

Процедура ИнициализироватьПриложениеРаботыСПрезентациями(Приложение) Экспорт
	
	#Если НЕ ВебКлиент Тогда

	// Инициализируем приложение
	//
	
	Если Приложение = Неопределено Тогда
		Приложение = Новый Структура("Пользовательское, Скрытое, Версия, ХранениеВБазе, ХранениеНаДиске, ХранениеНаДискеКопия, Презентация, ВыйтиИзРежимаРедактированияПослеЗаписи");
	КонецЕсли;
	
	Приложение.ВыйтиИзРежимаРедактированияПослеЗаписи = Ложь;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда		
		Приложение.Пользовательское = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриложениеPowerPoint(Приложение.Пользовательское);
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
		Приложение.Скрытое = РазработкаЭлектронныхКурсовСлужебныйКлиент.ПриложениеPowerPoint(Приложение.Скрытое);
	КонецЕсли;		
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;		
	КонецЕсли;
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Скрытое) Тогда		
		Приложение = Неопределено;		
		ПоказатьПредупреждение(,НСтр("ru = 'Ошибка инициализации приложения'"));		
		Возврат;		
	КонецЕсли;	
	
	Если Приложение.Версия = Неопределено Тогда
		Приложение.Версия = Число(ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(Приложение.Пользовательское.Version, ".")[0]);
	КонецЕсли;
	
	Если ТипЗнч(Приложение.Версия) <> Тип("Число")
		ИЛИ Приложение.Версия < 12 Тогда
		
		ВызватьИсключение НСтр("ru = 'Для работы с презентациями PowerPoint на компьютере должен быть установлен MS Office 2007 или выше'")
		
	КонецЕсли;	
			
	#КонецЕсли
	
КонецПроцедуры

Функция ПрезентацияДоступна(Приложение) Экспорт
	
	Если Приложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Приложение.Презентация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПрезентации = Неопределено;
	
	Попытка
		ИмяПрезентации = Приложение.Презентация.Name;
	Исключение
		Приложение.Презентация = Неопределено;
		// Обработка исключения не требуется
	КонецПопытки;
	
	Возврат ?(ИмяПрезентации = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПрезентацияМодифицирована(Приложение) Экспорт
	
	Если НЕ ПрезентацияДоступна(Приложение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Приложение.Презентация.Saved Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьОткрытыеПрезентации(Приложение) Экспорт
	
	Возврат ?(
	
		Приложение <> Неопределено
		И Приложение.Пользовательское <> Неопределено
		И ЭлектронноеОбучениеСлужебныйКлиент.ПриложениеCOMДоступно(Приложение.Пользовательское)
		И Приложение.Пользовательское.Presentations.Count > 0
		
		, Истина, Ложь);
		
		
КонецФункции

// Работа с видео

Функция ЕстьПоддержкаРаботыСВидео() Экспорт
	
	#Если ВебКлиент Тогда
		
	Возврат Ложь;
		
	#Иначе
		
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	ТипПлатформыНаКлиенте = СистемнаяИнформация.ТипПлатформы;

	Если ТипПлатформыНаКлиенте <> ТипПлатформы.Windows_x86 И ТипПлатформыНаКлиенте <> ТипПлатформы.Windows_x86_64 Тогда		
		Возврат Ложь;		
	КонецЕсли;	
	
	Возврат Истина;
		
	#КонецЕсли	
	
КонецФункции

Функция ИнициализироватьРабочийКаталогРаботыСВидео() Экспорт
	
	Если ЕстьПоддержкаРаботыСВидео() Тогда	
		
		#Если ВебКлиент Тогда
			
			Возврат Неопределено;
			
		#Иначе			
			
			РабочийКаталог = ПолучитьИмяВременногоФайла("");
			
			СоздатьКаталог(РабочийКаталог);
			
			РабочийКаталог = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог);
			
			ДвоичныеДанныеПрограммы   = РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ДвоичныеДанныеПрограммы("КонвертерВидеоWindows");
			ПутьКПрограммеКонвертации = РабочийКаталог + "ffmpeg.exe";
			ДвоичныеДанныеПрограммы.Записать(ПутьКПрограммеКонвертации);		
			
			Возврат РабочийКаталог;
			
		#КонецЕсли
			
	Иначе		
		
		Возврат Неопределено;

	КонецЕсли;	
	
КонецФункции

Функция ДвоичныеДанныеМиниатюрыВидео(ПутьКФайлуВидео, РабочийКаталог) Экспорт
	
	Попытка
		
		WshShell = Новый COMОбъект("WScript.Shell");
		WshShell.CurrentDirectory = РабочийКаталог;
		WshShell.Run(РабочийКаталог + "ffmpeg.exe -i """ + ПутьКФайлуВидео + """ -f image2 -vframes 1 -ss 00:00:02 thumbnail.jpg", 0, 1);
		
	Исключение
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Конвертация видео'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", "ДвоичныеДанныеМиниатюрыВидео(): " + ИнформацияОбОшибке() + Символы.ПС + ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;	
		
	ФайлМиниатюры = Новый Файл(РабочийКаталог + "thumbnail.jpg");
	
	Если НЕ ФайлМиниатюры.Существует() Тогда
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Конвертация видео'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", НСтр("ru = 'Файл миниатюры не найден'"));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДвоичныеДанныеМиниатюры = Новый ДвоичныеДанные(ФайлМиниатюры.ПолноеИмя);
	
	Попытка
		УдалитьФайлы(ФайлМиниатюры.ПолноеИмя);
	Исключение
		ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), ФайлМиниатюры.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;	
	
	Возврат ДвоичныеДанныеМиниатюры;
	
КонецФункции

Функция РазмерВидео(ПутьКФайлуВидео, РабочийКаталог) Экспорт
	
	РазмерыПоУмолчанию = Новый Структура("Ширина, Высота", Неопределено, Неопределено);
	
	Попытка
		
		WshShell = Новый COMОбъект("WScript.Shell");
		WshShell.CurrentDirectory = РабочийКаталог;
		WshShell.Run(РабочийКаталог + "ffmpeg.exe -i """ + ПутьКФайлуВидео + """ -report", 0, 1);	
	
	Исключение
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Конвертация видео'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", "РазмерВидео(): " + ИнформацияОбОшибке() + Символы.ПС + ОписаниеОшибки());
		
		Возврат РазмерыПоУмолчанию;
		
	КонецПопытки;	
	
	НайденныеФайлы = НайтиФайлы(РабочийКаталог, "*.log", Ложь);
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(НСтр("ru = 'Конвертация видео'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "Ошибка", НСтр("ru = 'Файл для получения размера видео не найден'"));
		
		Возврат РазмерыПоУмолчанию;
		
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Попытка
		ТекстовыйДокумент.Прочитать(НайденныеФайлы[0].ПолноеИмя);
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ЭлектронноеОбучениеСлужебныйКлиентСервер.СобытиеЖурналаРегистрацииЭлектронныхКурсов(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат РазмерыПоУмолчанию;
	КонецПопытки;	
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
	
		Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		// Определяем, содержит ли строка данные о размере
		
		ПозицияStream = Найти(Строка, "Stream #");
		ПозицияVideo = Найти(Строка, "Video:");
		
		Если ПозицияStream = 0 ИЛИ ПозицияVideo = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМассив = ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(Строка, ",");
		
		Если СтрокаМассив.Количество() < 5 Тогда
			Продолжить;			
		КонецЕсли;
		
		ШиринаЧисло = Неопределено;
		ВысотаЧисло = Неопределено;
		
		Для каждого СтрокаРазмер Из СтрокаМассив Цикл
			
			СтрокаРазмер = СокрЛП(СтрокаРазмер);
			
			ПозицияПробела = Найти(СтрокаРазмер, " ");
			
			Если ПозицияПробела > 0 Тогда
				СтрокаРазмер = Сред(СтрокаРазмер, 1, ПозицияПробела-1); // Убираем информацию справа от пробела
			КонецЕсли;			
			
			РазмерМассив = ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(СтрокаРазмер, "x");
			
			Если РазмерМассив.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ШиринаЧисло = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(РазмерМассив[0]);			
			ВысотаЧисло = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(РазмерМассив[1]);
			
			Если ТипЗнч(ШиринаЧисло) = Тип("Число")
				И ШиринаЧисло > 0
				И ТипЗнч(ВысотаЧисло) = Тип("Число")
				И ВысотаЧисло > 0 Тогда
				
				Прервать;
				
			Иначе
				
				ШиринаЧисло = Неопределено;
				ВысотаЧисло = Неопределено;				
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ШиринаЧисло)
			И ЗначениеЗаполнено(ВысотаЧисло) Тогда
			
			РазмерыПоУмолчанию.Ширина = ШиринаЧисло;
			РазмерыПоУмолчанию.Высота = ВысотаЧисло;
			
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(НайденныеФайлы[0].ПолноеИмя);
	Исключение
		ЭлектронноеОбучениеСлужебныйКлиент.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить временный файл
			|%1 по причине: %2'"), НайденныеФайлы[0].ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;	
	
	Если РазмерыПоУмолчанию.Ширина <> Неопределено И РазмерыПоУмолчанию.Высота <> Неопределено Тогда
		
		Пропорция = РазмерыПоУмолчанию.Высота / РазмерыПоУмолчанию.Ширина;
		
		РазмерыПоУмолчанию.Ширина = РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ШиринаВидеоПоУмолчанию();
		
		РазмерыПоУмолчанию.Высота = Окр(РазмерыПоУмолчанию.Ширина * Пропорция, 0);
		
		РазмерыПоУмолчанию.Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(РазмерыПоУмолчанию.Ширина);
		РазмерыПоУмолчанию.Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(РазмерыПоУмолчанию.Высота);
		
	КонецЕсли;	
	
	Возврат РазмерыПоУмолчанию;
	
КонецФункции

Процедура ИзменитьРазмерыПропорционально(Увеличивать = Истина, Ширина, Высота, СтараяШирина = Неопределено, СтараяВысота = Неопределено) Экспорт
	
	Если МожноИзменятьРазмерыПропорционально(Ширина, Высота) Тогда
		
		ШиринаЧисло = Число(Ширина);
		ВысотаЧисло = Число(Высота);		
		
		Если СтараяШирина = Неопределено
			И СтараяВысота = Неопределено Тогда
			
			Если ТипЗнч(Увеличивать) <> Тип("Булево") Тогда
				ВызватьИсключение НСтр("ru = 'Неверный тип параметра Увеличивать'");
			КонецЕсли;
				
			СтараяВысота = ВысотаЧисло;
			СтараяШирина = ШиринаЧисло;			
						
			Если Увеличивать Тогда				
				ШиринаЧисло = ШиринаЧисло + 10; 				
			Иначе				
				ШиринаЧисло = ШиринаЧисло - 10;				
			КонецЕсли;
			
			ВысотаЧисло = Окр(ШиринаЧисло * (СтараяВысота / СтараяШирина), 0);
			
			Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(ШиринаЧисло);
			Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(ВысотаЧисло);
			
		Иначе
			
			Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(СтараяШирина) Тогда
				СтараяШиринаЧисло = Число(СтараяШирина);
			Иначе
				СтараяШиринаЧисло = 0;
			КонецЕсли;
			
			Если ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(СтараяВысота) Тогда
				СтараяВысотаЧисло = Число(СтараяВысота);
			Иначе
				СтараяВысотаЧисло = 0;
			КонецЕсли;			
			
			Если ШиринаЧисло <> СтараяШиринаЧисло И СтараяШиринаЧисло > 0 Тогда
				
				Если ШиринаЧисло > СтараяШиринаЧисло Тогда
					Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяВысотаЧисло * (ШиринаЧисло/СтараяШиринаЧисло),0)
							 );
				Иначе
					Высота = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяВысотаЧисло / (СтараяШиринаЧисло/ШиринаЧисло),0)
							 );
				КонецЕсли;				
				
				СтараяВысота = Высота;
				СтараяШирина = Ширина;
				
			ИначеЕсли ВысотаЧисло <> СтараяВысотаЧисло И СтараяВысотаЧисло > 0 Тогда 
				
				Если ВысотаЧисло > СтараяВысотаЧисло Тогда
					Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяШиринаЧисло * (ВысотаЧисло/СтараяВысотаЧисло),0)
							 );
				Иначе
					Ширина = ЭлектронноеОбучениеСлужебныйКлиентСервер.ЧислоВСтроку(
								Окр(СтараяШиринаЧисло / (СтараяВысотаЧисло/ВысотаЧисло),0)
							 );
				КонецЕсли;				
				
				СтараяШирина = Ширина;
				СтараяВысота = Высота;
				
			Иначе
				
				Возврат; // Ничего не изменилось
				
			КонецЕсли;
			
		КонецЕсли;
		
			
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно определить соотношение ширины и высоты'"));
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция МожноИзменятьРазмерыПропорционально(Ширина, Высота) Экспорт
	
	Возврат (ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(Ширина)
		И ЭлектронноеОбучениеСлужебныйКлиентСервер.ЭтоЧисло(Высота)
		И Число(Ширина) > 0
		И Число(Высота) > 0);
	
КонецФункции

// Работа с YouTube

Процедура ПередИспользованиемYouTube(ОбработкаОповещения) Экспорт

	#Если НЕ ВебКлиент Тогда
	
		
	// Авторизуемся на YouTube или получаем ранее сохраненные настройки
	
	ПерсональныеНастройки = РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ПерсональныеНастройкиYouTube();

	Если ПерсональныеНастройки = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭлементыЭлектронныхРесурсов.Форма.ФормаАвторизацииНаYouTube",,,,,,ОбработкаОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, ПерсональныеНастройки);  
	КонецЕсли;		
	
	#КонецЕсли
	
КонецПроцедуры	

Процедура СкопироватьПрограммуCURL(Знач ПутьККаталогу) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		
	ПутьКАрхивуCURL = ПолучитьИмяВременногоФайла("zip");
	
	ПрограммаCURL = РазработкаЭлектронныхКурсовСлужебныйВызовСервера.ДвоичныеДанныеПрограммы("ПрограммаCURL");
	ПрограммаCURL.Записать(ПутьКАрхивуCURL);

	ЧтениеZIP = Новый ЧтениеZipФайла(ПутьКАрхивуCURL);
	ЧтениеZIP.ИзвлечьВсе(ПутьККаталогу, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();	
	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(ПутьКАрхивуCURL);
	
	#КонецЕсли
	
КонецПроцедуры

// Запускает внешнюю программу в соответствии с параметрами запуска.
// Адаптированная функция ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму.
//
Функция ЗапуститьПрограмму(Знач СтрокаКоманды, ПараметрыЗапускаПрограммы) Экспорт 
	
	#Если ВебКлиент Тогда
		
	ВызватьИсключение НСтр("ru = 'Запуск программ недоступен в веб-клиенте.'");
	
	#Иначе
	
	ТекущийКаталог              = ПараметрыЗапускаПрограммы.ТекущийКаталог;
	ДождатьсяЗавершения         = ПараметрыЗапускаПрограммы.ДождатьсяЗавершения;
	
	ФайлПотокаВывода = ПолучитьИмяВременногоФайла("stdout.tmp");
	СтрокаКоманды = СтрокаКоманды + " > """ + ФайлПотокаВывода + """";
		
	ФайлПотокаОшибок = ПолучитьИмяВременногоФайла("stderr.tmp");
	СтрокаКоманды = СтрокаКоманды + " 2>""" + ФайлПотокаОшибок + """";

	Если Не ПустаяСтрока(ТекущийКаталог) Тогда 
		СтрокаКоманды = "cd """ + ТекущийКаталог + """ && " + СтрокаКоманды;
	КонецЕсли;
	
	КодВозврата = Неопределено;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) 
		ИЛИ (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		
		// Для Windows выполняем запуск через cmd.exe (для перенаправления stdout и stderr).
		СтрокаКоманды = "cmd /c """ + СтрокаКоманды + """";
		
		#Если Сервер Тогда
		ЗапуститьПриложение(СтрокаКоманды,, ДождатьсяЗавершения, КодВозврата);
		#Иначе
		
		Оболочка = Новый COMОбъект("Wscript.Shell");
		// Run запускает новый процесс, не являющийся дочерним текущего процесса (в отличии от Exec).
		КодВозврата = Оболочка.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
		Оболочка = Неопределено;
		
		#КонецЕсли
		
	Иначе

		// Для ОС Linux и MacOS просто запускаем команду.
		ЗапуститьПриложение(СтрокаКоманды,, ДождатьсяЗавершения, КодВозврата);
		
	КонецЕсли;
	
	// Переопределение возвращенного оболочной значения.
	Если КодВозврата = Неопределено Тогда 
		КодВозврата = 0;
	КонецЕсли;
	
	ПотокВывода = Неопределено;
	ПотокОшибок = Неопределено;
	
	Если ДождатьсяЗавершения Тогда 
		
		ЧтениеПотокаВывода = Новый ЧтениеТекста(ФайлПотокаВывода, РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.КодировкаСтандартныхПотоков()); 
		ПотокВывода = ЧтениеПотокаВывода.Прочитать();
		ЧтениеПотокаВывода.Закрыть();
			
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(ФайлПотокаВывода);
			
		Если ПотокВывода = Неопределено Тогда 
			ПотокВывода = "";
		КонецЕсли;
		
		ЧтениеПотокаОшибок = Новый ЧтениеТекста(ФайлПотокаОшибок, РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.КодировкаСтандартныхПотоков());
		ПотокОшибок = ЧтениеПотокаОшибок.Прочитать();
		ЧтениеПотокаОшибок.Закрыть();
			
		ЭлектронноеОбучениеСлужебныйКлиентСервер.УдалитьВременныйФайл(ФайлПотокаОшибок);
			
		Если ПотокОшибок = Неопределено Тогда 
			ПотокОшибок = "";
		КонецЕсли;

	Иначе

		ПотокВывода = Новый Файл(ФайлПотокаВывода);
		ПотокОшибок = Новый Файл(ФайлПотокаОшибок);

	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КодВозврата", КодВозврата);
	Результат.Вставить("ПотокВывода", ПотокВывода);
	Результат.Вставить("ПотокОшибок", ПотокОшибок);
	
	Возврат Результат;
	
#КонецЕсли
	
КонецФункции

Функция ПараметрыЗапускаПрограммы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущийКаталог", "");
	Параметры.Вставить("ДождатьсяЗавершения", Ложь);
	Параметры.Вставить("ПолучитьПотокВывода", Ложь);
	Параметры.Вставить("ПолучитьПотокОшибок", Ложь);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти



