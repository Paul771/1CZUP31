#Область СлужебныйПрограммныйИнтерфейс

// Предназначена для обработки команды перехода из формы сотрудника к форме кандидата.
//
Процедура ОткрытьФормуКандидатаИзФормыСотрудника(Форма) Экспорт
	
	КандидатСсылка = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "КандидатСсылка");
	Если Не ЗначениеЗаполнено(КандидатСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Кандидаты.Форма.ФормаЭлемента", Новый Структура("Ключ", КандидатСсылка));
	
КонецПроцедуры

Функция СсылкиНаОбъектыВыделенныхСтрокСписка(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	ВыделенныеСтроки = ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока = Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			МассивСсылок.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

#Область НачальнаяНастройкаПрограммы

Процедура ОткрытьФормуЗагрузкиДанныхИзEStaff(Форма) Экспорт
	
	ОткрытьФорму("Обработка.ПереносДанныхEStaff.Форма.ПереносДанныхEStaff", , Форма);
	
КонецПроцедуры
	
#КонецОбласти

#Область ОтправкаСообщений

Процедура ОбновитьВидимостьКомандОтправкиВакансий(Форма, Источник) Экспорт
	
	Вакансии = Новый Массив;
	Элементы = Форма.Элементы;
	
	Вакансии = СсылкиНаОбъектыВыделенныхСтрокСписка(Источник);
	
	Если Вакансии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Форма.ВладельцыКомандОтправки Цикл
		
		ЭлементФормы = Форма.Элементы.Найти(КлючИЗначение.Ключ);
		Если ЭлементФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПоказыватьКоманду = Истина;
		Владельцы = КлючИЗначение.Значение;
		
		Для Каждого Вакансия Из Вакансии Цикл
			
			Если Владельцы.Найти(Вакансия) = Неопределено Тогда
				ПоказыватьКоманду = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементФормы.Видимость = ПоказыватьКоманду;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыФормированияПисьма(УникальныйИдентификатор) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Параметры.Вставить("ИдентификаторПечатнойФормы", "");
	Параметры.Вставить("Предметы", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьСообщениеБезШаблона(ДополнительныеПараметры) Экспорт
	
	Сообщение = ПодборПерсоналаВызовСервера.ПодготовитьСообщениеБезШаблонаНаСервере(ДополнительныеПараметры);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
	
КонецПроцедуры

Процедура СформироватьСообщениеЗаявителюБезШаблона(ДополнительныеПараметры) Экспорт
	
	Сообщение = ПодборПерсоналаВызовСервера.ПодготовитьСообщениеЗаявителюБезШаблонаНаСервере(ДополнительныеПараметры);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
	
КонецПроцедуры

Процедура Подключаемый_СформироватьСообщение(Шаблон, ДополнительныеПараметры) Экспорт
	
	Если Шаблон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = ПодборПерсоналаВызовСервера.ПодготовитьСообщениеНаСервере(Шаблон, ДополнительныеПараметры);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
	
КонецПроцедуры

Процедура Подключаемый_СформироватьСообщениеЗаявителю(Шаблон, ДополнительныеПараметры) Экспорт
	
	Если Шаблон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = ПодборПерсоналаВызовСервера.ПодготовитьСообщениеЗаявителюНаСервере(Шаблон, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ОтправитьСообщенияКандидатам(Шаблон, ДополнительныеПараметры) Экспорт
	
	Если Шаблон = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ДополнительныеПараметры.Удалить("Форма");
	
	РезультатОтправки = ПодборПерсоналаВызовСервера.ОтправитьСообщенияКандидатам(Шаблон, ДополнительныеПараметры);
	
	КоличествоУспешных = РезультатОтправки.КоличествоУспешных;
	КоличествоНеУспешных = РезультатОтправки.КоличествоНеУспешных;
	
	ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отправлено %1, не отправлено %2 сообщений.'"), РезультатОтправки.КоличествоУспешных, РезультатОтправки.КоличествоНеУспешных));
	
	Если КоличествоУспешных > 0 Тогда
		Форма.Элементы.Кандидаты.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОбновлениеКомандОтправкиВакансий(Форма) Экспорт
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьКомандОтправкиВакансий");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьКомандОтправкиВакансий", 0.2, Истина);
КонецПроцедуры

Функция ТекстВопросаПередОтправкой() Экспорт
	
	Возврат НСтр("ru = 'Данные еще не записаны.
		|Отправка будет доступна только после записи данных.
		|Данные будут записаны.'");
	
КонецФункции

Функция ИдентификаторПечатнойФормы(ИмяКоманды) Экспорт
	
	ИдентификаторОписания = СтрЗаменить(ИмяКоманды, "ОтправитьВакансиюКандидатам", "Вакансия");
	ИдентификаторОписания = СтрЗаменить(ИдентификаторОписания, "ОтправитьВакансию", "Вакансия");
	ИдентификаторОписания = СтрЗаменить(ИдентификаторОписания, "ОтправитьКандидатам_", "");
	ИдентификаторОписания = СтрЗаменить(ИдентификаторОписания, "Отправить_", "");
	ИдентификаторОписания = СтрЗаменить(ИдентификаторОписания, "ОтправитьРезюме", "Резюме");
	
	Возврат ИдентификаторОписания;
	
КонецФункции

#КонецОбласти

#КонецОбласти