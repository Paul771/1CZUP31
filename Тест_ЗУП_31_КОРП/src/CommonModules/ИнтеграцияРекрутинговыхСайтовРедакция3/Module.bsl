
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.95";
	Обработчик.Процедура = "ИнтеграцияРекрутинговыхСайтовРедакция3.ОбновитьАдресаПубликацииВакансий";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("529d4bc1-cfbf-4d5e-8e64-4a04f721a4a4");
	Обработчик.Комментарий = НСтр("ru = 'Обновление ссылок на страницы вакансий сайта SuperJob.'");
	
КонецПроцедуры

Процедура ОбновитьАдресаПубликацииВакансий(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПубликацияВакансий.Вакансия КАК Вакансия,
	|	ПубликацияВакансий.МестоПубликации КАК МестоПубликации,
	|	ПубликацияВакансий.ИдентификаторВакансии КАК ИдентификаторВакансии,
	|	ПубликацияВакансий.ДатаПубликации КАК ДатаПубликации,
	|	ПубликацияВакансий.ДатаОбновления КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|ГДЕ
	|	ПубликацияВакансий.МестоПубликации = &МестоПубликации
	|	И (ВЫРАЗИТЬ(ПубликацияВакансий.ИдентификаторВакансии КАК СТРОКА(1))) <> """"
	|	И НЕ ПубликацияВакансий.АдресПубликации ПОДОБНО &АдресПубликации";
	
	Запрос.УстановитьПараметр("МестоПубликации", ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob());
	Запрос.УстановитьПараметр("АдресПубликации", "https://www.superjob.ru/vakansii/vacancy-%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПубликацияВакансий", "Вакансия", Выборка.Вакансия) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПубликацияВакансий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Вакансия.Установить(Выборка.Вакансия);
		НаборЗаписей.Отбор.МестоПубликации.Установить(Выборка.МестоПубликации);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.АдресПубликации = ИнтеграцияРекрутинговыхСайтовКлиентСервер.АдресВакансииSuperJob(Выборка.ИдентификаторВакансии);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПарсерJSON(ТекущаяСтрока, ПрочитатьВСоответствие = Ложь) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекущаяСтрока);
	Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписьJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ТипЗначенияJSONСтрока() Экспорт
	
	Возврат ТипЗначенияJSON.Строка;
	
КонецФункции

Функция ТипЗначенияJSONЧисло() Экспорт
	
	Возврат ТипЗначенияJSON.Число;
	
КонецФункции

Функция ТипЗначенияJSONНачалоМассива() Экспорт
	
	Возврат ТипЗначенияJSON.НачалоМассива;
	
КонецФункции

Функция ТипЗначенияJSONНачалоОбъекта() Экспорт
	
	Возврат ТипЗначенияJSON.НачалоОбъекта;
	
КонецФункции

Функция ТипЗначенияJSONБулево() Экспорт
	
	Возврат ТипЗначенияJSON.Булево;
	
КонецФункции

Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ИдентификаторПрофиляМенеджер = ПодборПерсонала.ИдентификаторПрофиляМенеджерПоНаборуПерсонала();
	ИдентификаторПрофиляСтаршийМенеджер = ПодборПерсонала.ИдентификаторПрофиляСтаршийМенеджерПоНаборуПерсонала();
	ПрофильМенеджерПоПерсоналу = Неопределено;
	ПрофильСтаршийМенеджерПоПерсоналу = Неопределено;
	
	Для Каждого Профиль Из ОписанияПрофилей Цикл
		Если Профиль.Идентификатор = ИдентификаторПрофиляМенеджер Тогда
			ПрофильМенеджерПоПерсоналу = Профиль;
		КонецЕсли;
		Если Профиль.Идентификатор = ИдентификаторПрофиляСтаршийМенеджер Тогда
			ПрофильСтаршийМенеджерПоПерсоналу = Профиль;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПрофильМенеджерПоПерсоналу) Тогда
		ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ПрофильМенеджерПоПерсоналу, "ИспользованиеИнтеграцииРекрутинговыхСайтов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрофильСтаршийМенеджерПоПерсоналу) Тогда
		ЗарплатаКадрыРасширенный.ДобавитьВОписаниеПрофиляРоль(ПрофильСтаршийМенеджерПоПерсоналу, "ИспользованиеИнтеграцииРекрутинговыхСайтов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов");	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФОИспользуетсяВзаимодействиеСРекрутинговымиСайтами() Экспорт
	
	НастройкиВзаимодействияСРекрутинговымиСайтамиМенеджерЗаписи = РегистрыСведений.НастройкиВзаимодействияСРекрутинговымиСайтами.СоздатьМенеджерЗаписи();
	НастройкиВзаимодействияСРекрутинговымиСайтамиМенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	НастройкиВзаимодействияСРекрутинговымиСайтамиМенеджерЗаписи.ИспользуетсяВзаимодействиеСРекрутинговымиСайтами = 
		Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Получить() И ИнтеграцияРекрутинговыхСайтов.ИспользуемыеСайты() <> Неопределено;
	НастройкиВзаимодействияСРекрутинговымиСайтамиМенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция СтруктураТрудоваяДеятельность() Экспорт
	
	Возврат Справочники.Кандидаты.СтруктураТрудоваяДеятельность();
	
КонецФункции

Функция СтруктураЗнаниеЯзыков() Экспорт
	
	Возврат Справочники.Кандидаты.СтруктураЗнаниеЯзыков();
	
КонецФункции

Процедура ЗаполнитьМассивКонтактнойИнформацииHeadHunter(СтруктураРезюме, МассивКонтактнаяИнформация) Экспорт 

	Для Каждого КонтактнаяИнформация Из СтруктураРезюме.Получить("contact") Цикл
		
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		Если КонтактнаяИнформация.Получить("type").Получить("id") = "cell" Тогда
			СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
			СтруктураКонтактнаяИнформация.Представление = КонтактнаяИнформация.Получить("value").Получить("country") + "(" + КонтактнаяИнформация.Получить("value").Получить("city") + ")" + КонтактнаяИнформация.Получить("value").Получить("number");
		ИначеЕсли КонтактнаяИнформация.Получить("type").Получить("id") = "home" Тогда
			СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
			СтруктураКонтактнаяИнформация.Представление = КонтактнаяИнформация.Получить("value").Получить("country") + "(" + КонтактнаяИнформация.Получить("value").Получить("city") + ")" + КонтактнаяИнформация.Получить("value").Получить("number");
		ИначеЕсли КонтактнаяИнформация.Получить("type").Получить("id") = "work" Тогда
			СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
			СтруктураКонтактнаяИнформация.Представление = КонтактнаяИнформация.Получить("value").Получить("country") + "(" + КонтактнаяИнформация.Получить("value").Получить("city") + ")" + КонтактнаяИнформация.Получить("value").Получить("number");
		ИначеЕсли КонтактнаяИнформация.Получить("type").Получить("id") = "email" Тогда
			СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
			СтруктураКонтактнаяИнформация.Представление = КонтактнаяИнформация.Получить("value");
		КонецЕсли;
		
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтруктураРезюме.Получить("area")) Тогда
		
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		
		СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = СтруктураРезюме.Получить("area").Получить("name");
		
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииRabota(СтруктураРезюме, МассивКонтактнаяИнформация) Экспорт 

	АдресПочты = СтруктураРезюме.Получить("contactEmail");
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		
		СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = АдресПочты;
		
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
		
	КонецЕсли;
	
	Для Каждого КонтактнаяИнформация Из СтруктураРезюме.Получить("phones") Цикл
		
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		
		Если КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 2 Тогда
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		ИначеЕсли КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 1 Тогда
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		ИначеЕсли КонтактнаяИнформация.Получить("offerTelephoneType").Получить("id") = 3 Тогда
			СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураКонтактнаяИнформация.Вид) Тогда
			
			СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтруктураКонтактнаяИнформация.Представление = СтрШаблон("%1 (%2) %3", КонтактнаяИнформация.Получить("countryCode"), КонтактнаяИнформация.Получить("code"), Формат(КонтактнаяИнформация.Получить("number"), "ЧГ="));
			
			МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеПроживания Из СтруктураРезюме.Получить("leavingRegion") Цикл
		
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		
		СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = ДанныеПроживания.Получить("name");
		
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивКонтактнойИнформацииSuperJob(СтруктураРезюме, МассивКонтактнаяИнформация) Экспорт
	
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "phone1")) Тогда
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = СтруктураРезюме.phone1;
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "phone2")) Тогда
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
		СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = СтруктураРезюме.phone2;
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "email")) Тогда
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
	    СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = СтруктураРезюме.email;
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(СтруктураРезюме, "town")) Тогда
		СтруктураКонтактнаяИнформация = Новый Структура("Тип, Вид, Представление");
	    СтруктураКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтруктураКонтактнаяИнформация.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица");
		СтруктураКонтактнаяИнформация.Представление = СтруктураРезюме.town.title;
		МассивКонтактнаяИнформация.Добавить(СтруктураКонтактнаяИнформация);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеHeadHunter(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуHeadHunter(СтруктураРезюме.Получить("education").Получить("level").Получить("id"));
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
	
	Если УровеньОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.СреднееПолноеОбщееОбразование() Тогда
		
		Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("elementary") Цикл
			
			СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
			СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
			СтруктураОбразование.Окончание = Образование.Получить("year");
			СтруктураОбразование.ВидОбразования = УровеньОбразования;
			
			МассивОбразование.Добавить(СтруктураОбразование);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("primary") Цикл
		
			СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
			СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
			СтруктураОбразование.Факультет = Образование.Получить("organization");
			СтруктураОбразование.Специальность = Образование.Получить("result");
			СтруктураОбразование.Окончание = Образование.Получить("year");
			СтруктураОбразование.ВидОбразования = УровеньОбразования;
			
			МассивОбразование.Добавить(СтруктураОбразование);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДопОбразование Из СтруктураРезюме.Получить("education").Получить("additional") Цикл
		
		Если Не ЗначениеЗаполнено(ДопОбразование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ДопОбразование.Получить("organization");
		СтруктураОбразование.НаименованиеКурса = ДопОбразование.Получить("name");
		СтруктураОбразование.Окончание = ДопОбразование.Получить("year");
		СтруктураОбразование.Квалификация = ДопОбразование.Получить("result");
		СтруктураОбразование.ВидОбразования = УровеньДопОбразования;
		СтруктураОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеRabota(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	
	Для Каждого Образование Из СтруктураРезюме.Получить("education").Получить("details") Цикл
		
		ДанныеУровняОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуRabota(Образование.Получить("level").Получить("id"));
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = Образование.Получить("name");
		СтруктураОбразование.Факультет = Образование.Получить("faculty");
		
		Если ДанныеУровняОбразования.ВидОбразования = УровеньДопОбразования Тогда
			СтруктураОбразование.НаименованиеКурса = Образование.Получить("speciality");
		Иначе
			СтруктураОбразование.Специальность = Образование.Получить("speciality");
		КонецЕсли;
		
		СтруктураОбразование.Окончание = Образование.Получить("yearTo");
		ЗаполнитьЗначенияСвойств(СтруктураОбразование, ДанныеУровняОбразования);
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивОбразованиеSuperJob(СтруктураРезюме, МассивОбразование) Экспорт
	
	УровеньДопОбразования = Справочники.ВидыОбразованияФизическихЛиц.ДополнительноеПрофессиональноеОбразование;
	ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
	
	Для Каждого Образование Из СтруктураРезюме.base_education_history Цикл
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "institute")) Тогда
			СтруктураОбразование.УчебноеЗаведение = ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "institute", "title");
		КонецЕсли;
		СтруктураОбразование.Факультет = Образование.faculty;
		СтруктураОбразование.Специальность = Образование.profession;
		СтруктураОбразование.Окончание = Образование.yearend;
		Если ЗначениеЗаполнено(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "education_type")) Тогда
			СтруктураОбразование.ВидОбразования = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ВидОбразованияПоИдентификаторуSuperJob(ИнтеграцияРекрутинговыхСайтов.ЗначениеСвойстваУзла(Образование, "education_type", "id"));
		КонецЕсли;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
	Для Каждого ДопОбразование Из СтруктураРезюме.education_history Цикл
		
		Если Не ЗначениеЗаполнено(ДопОбразование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбразование = Справочники.Кандидаты.СтруктураОбразование();
		СтруктураОбразование.УчебноеЗаведение = ДопОбразование.institute;
		СтруктураОбразование.НаименованиеКурса = ДопОбразование.name;
		СтруктураОбразование.Окончание = ДопОбразование.yearend;
		СтруктураОбразование.ВидОбразования = УровеньДопОбразования;
		СтруктураОбразование.ВидДополнительногоОбучения = ВидДополнительногоОбучения;
		
		МассивОбразование.Добавить(СтруктураОбразование);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПубликацияВакансииHeadHunter(Дерево, Сайт) Экспорт
	
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииHeadHunter(Дерево, Сайт);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииHeadHunter) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодировкаОтвета = "UTF-8";
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросHeadHunter("/vacancies", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, КодировкаОтвета, ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 201 Тогда
		
		АдресВакансии = Ответ.Заголовки.Получить("Location");
		
		НомерВхожденияРазделителя = ИнтеграцияРекрутинговыхСайтовКлиентСервер.НайтиВСтроке(АдресВакансии, "/", 2);
		ИдентификаторВакансии = Сред(АдресВакансии, НомерВхожденияРазделителя + 1, СтрДлина(АдресВакансии) - НомерВхожденияРазделителя);
		
		Возврат ИдентификаторВакансии;
		
	Иначе
		
		СообщениеОбОшибке = "";
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
		
		ИнформацияОбОшибках = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		
		Если ТипЗнч(ИнформацияОбОшибках) = Тип("Структура") 
			И ИнформацияОбОшибках.Свойство("errors") Тогда
			
			Если ТипЗнч(ИнформацияОбОшибках.errors) = Тип("Массив") Тогда
				Для Каждого Ошибка Из ИнформацияОбОшибках.errors Цикл
					Если Ошибка.type = "bad_json_data" Тогда 
						СтрокаДерева = Дерево.Строки.Найти(Ошибка.value, "Путь", Истина);
						Если СтрокаДерева = Неопределено Тогда
							СтрокаДерева = Дерево.Строки.Найти(Ошибка.value + ".id", "Путь", Истина);
						КонецЕсли;						
						Если СтрокаДерева <> Неопределено Тогда
							Поле = СтрокаДерева.Показатель;
						Иначе
							Поле = Ошибка.value;
						КонецЕсли;
						СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + НСтр("ru = 'Неверно заполнено поле'") + " " + Поле;						
					Иначе
						СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + Ошибка.value;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка публикации вакансии %1'"), Ответ.КодСостояния);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

Функция ПубликацияВакансииRabota(Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииRabota = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииRabota(Дерево);
	
	Если Не ЗначениеЗаполнено(ОписаниеВакансииДляПубликацииRabota) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota("vacancies", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииRabota);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 201 Тогда
		
		Результат = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		Идентификатор = Результат[0];
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("action", "publish");
		ПараметрыЗапроса.Вставить("periodDays", 14);
		ПараметрыЗапроса.Вставить("hideContact", Ложь);
		ПараметрыЗапроса.Вставить("searchable", Истина);
		ПараметрыЗапроса.Вставить("useTrap", Истина);
		
		Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota(СтрШаблон("vacancies/%1", Формат(Идентификатор, "ЧГ=0")), МаркерДоступа);
		Запрос.УстановитьТелоИзСтроки(ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ПараметрыЗапроса));
		Ответ = Соединение.Записать(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
		
		Если Ответ.КодСостояния <> 204 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка публикации вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
		КонецЕсли; 
		
		Возврат Идентификатор;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка создания вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПубликацияВакансииSuperJob(Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииSuperJob = ИнтеграцияРекрутинговыхСайтов.ОписаниеВакансииДляПубликацииSuperJob(Дерево);
	
	Если Не ЗначениеЗаполнено(ОписаниеВакансииДляПубликацииSuperJob) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодировкаОтвета = "UTF-8";
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob("/2.0/vacancies/", МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииSuperJob, КодировкаОтвета);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
	
	Если Ответ.КодСостояния = 201 Тогда
		СтруктураВакансии = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		Возврат СтруктураВакансии.id;
		
	Иначе
		
		СообщениеОбОшибке = "";
		ИнформацияОбОшибках = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(ТекущаяСтрока);
		
		Если ТипЗнч(ИнформацияОбОшибках) = Тип("Структура") 
			И ИнформацияОбОшибках.Свойство("error") Тогда
			
			Если ТипЗнч(ИнформацияОбОшибках.error.message) = Тип("Строка") Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + ИнформацияОбОшибках.error.message;
			ИначеЕсли ТипЗнч(ИнформацияОбОшибках.error.message) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из ИнформацияОбОшибках.error.message Цикл
					Для Каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
						СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + ЭлементМассива;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка публикации вакансии %1'"), Ответ.КодСостояния);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ОбновлениеВакансииHeadHunter(ИдентификаторВакансии, Дерево, Сайт) Экспорт
	
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииHeadHunter(Дерево, Сайт, Истина);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииHeadHunter) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеВакансии = ИнтеграцияРекрутинговыхСайтов.ПарсерJSON(JSONОписаниеВакансииHeadHunter);
	
	ОписаниеВакансии_billing_type = Неопределено;
	ОписаниеВакансии_manager = Неопределено;
	Если ОписаниеВакансии.Свойство("billing_type") Тогда
		ОписаниеВакансии_billing_type = Новый Структура("billing_type");
		ЗаполнитьЗначенияСвойств(ОписаниеВакансии_billing_type, ОписаниеВакансии);
		ОписаниеВакансии.Удалить("billing_type");
	КонецЕсли;
	
	Если ОписаниеВакансии.Свойство("manager") Тогда
		ОписаниеВакансии_manager = Новый Структура("manager");
		ЗаполнитьЗначенияСвойств(ОписаниеВакансии_manager, ОписаниеВакансии);
		ОписаниеВакансии.Удалить("manager");
	КонецЕсли;
	
	JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии);
	
	КодировкаОтвета = "UTF-8";
	ТекстЗапроса = "/vacancies/" + ИдентификаторВакансии;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеHeadHunter();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросHeadHunter(ТекстЗапроса, МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, КодировкаОтвета, ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
	
	Если Ответ.КодСостояния <> 204 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка обновления вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
		Возврат Ложь;
	КонецЕсли;
	
	Если ОписаниеВакансии_billing_type <> Неопределено Тогда
		JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии_billing_type);
		
		Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, КодировкаОтвета, ИспользованиеByteOrderMark.НеИспользовать);
		Ответ = Соединение.Записать(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
		
		Если Ответ.КодСостояния <> 204 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка обновления биллингового типа вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеВакансии_manager <> Неопределено Тогда
		JSONОписаниеВакансииHeadHunter = ИнтеграцияРекрутинговыхСайтов.ЗаписьJSON(ОписаниеВакансии_manager);
		
		Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииHeadHunter, КодировкаОтвета, ИспользованиеByteOrderMark.НеИспользовать);
		Ответ = Соединение.Записать(Запрос);
		
		ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
		
		Если Ответ.КодСостояния <> 204 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка обновления менеджера вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновлениеВакансииRabota(ИдентификаторВакансии, Дерево) Экспорт
	
	JSONОписаниеВакансииRabota = ИнтеграцияРекрутинговыхСайтов.JSONОписаниеВакансииRabota(Дерево, Истина);
	
	Если Не ЗначениеЗаполнено(JSONОписаниеВакансииRabota) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеRabota();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросRabota(СтрШаблон("vacancies/%1", ИдентификаторВакансии), МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(JSONОписаниеВакансииRabota);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния <> 204 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка публикации вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ОбновлениеВакансииSuperJob(ИдентификаторВакансии, Дерево) Экспорт
	
	ОписаниеВакансииДляПубликацииSuperJob = ИнтеграцияРекрутинговыхСайтов.ОписаниеВакансииДляПубликацииSuperJob(Дерево);
	
	Если Не ЗначениеЗаполнено(ОписаниеВакансииДляПубликацииSuperJob) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодировкаОтвета = "UTF-8";
	ТекстЗапроса = "/2.0/vacancies/" + ИдентификаторВакансии + "/";
	
	МаркерДоступа = ИнтеграцияРекрутинговыхСайтов.МаркерДоступа(ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob());
	Соединение = ИнтеграцияРекрутинговыхСайтов.HTTPСоединениеSuperJob();
	Запрос = ИнтеграцияРекрутинговыхСайтов.HTTPЗапросSuperJob(ТекстЗапроса, МаркерДоступа);
	Запрос.УстановитьТелоИзСтроки(ОписаниеВакансииДляПубликацииSuperJob, КодировкаОтвета);
	
	Ответ = Соединение.Записать(Запрос);
	ТекущаяСтрока = Ответ.ПолучитьТелоКакСтроку(КодировкаОтвета);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка обновления вакансии %1: %2'"), Ответ.КодСостояния, ТекущаяСтрока));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НайтиКандидатов(ПараметрыПроцедуры, УникальныйИдентификатор, АдресХранилища) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск кандидатов'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияРекрутинговыхСайтов.ВыполнитьПоискКандидатов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	АдресХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитВакансииСоответствующийПолюПубликации(Путь, Вакансия) Экспорт
	
	Если Путь = "name" 
		Или Путь = "profession" Тогда
		
		НаименованиеВакансии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Наименование");
		ПозицияСимвола = 0;
		ПозицияСимвола = СтрНайти(НаименованиеВакансии, "/");
		НаименованиеВакансии = Лев(НаименованиеВакансии, ?(ПозицияСимвола = 0, СтрДлина(НаименованиеВакансии), ПозицияСимвола - 1)); 
		
		Возврат НаименованиеВакансии;
		
	ИначеЕсли Путь = "salary.to" 
		Или Путь = "payment_to"
		Или Путь = "salaryTo" Тогда
		Возврат Число(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "ПредполагаемыйДоход"));
	ИначеЕсли Путь = "code" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Код");
	ИначеЕсли Путь = "work" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Обязанности");
	ИначеЕсли Путь = "compensation" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Условия");
	ИначеЕсли Путь = "candidat" Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Требования");
	ИначеЕсли Путь = "description" Тогда
		Обязанности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Обязанности");
		Условия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Условия");
		Требования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вакансия, "Требования");
		
		Описание = "";
		Описание = Описание + ?(ЗначениеЗаполнено(Обязанности), НСтр("ru = 'Обязанности'") + ":" + Символы.ПС, "") + Обязанности; 
		Описание = Описание + ?(ЗначениеЗаполнено(Описание), Символы.ПС, "") + ?(ЗначениеЗаполнено(Условия), НСтр("ru = 'Условия'") + ":" + Символы.ПС, "") + Условия; 
		Описание = Описание + ?(ЗначениеЗаполнено(Описание), Символы.ПС, "") + ?(ЗначениеЗаполнено(Требования), НСтр("ru = 'Требования'") + ":" + Символы.ПС, "") + Требования;
		
		Возврат Описание;
		
	КонецЕсли;
	
КонецФункции

Функция ОпубликованныеВакансииСИдентификаторами(Сайт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликацияВакансий.Вакансия,
	|	ПубликацияВакансий.ИдентификаторВакансии,
	|	Вакансии.Наименование,
	|	Вакансии.Позиция,
	|	Вакансии.Подразделение,
	|	Вакансии.ПрофильДолжности,
	|	Вакансии.ПредполагаемыйДоход,
	|	Вакансии.Ответственный,
	|	Вакансии.Заявитель,
	|	Вакансии.ДатаОткрытия,
	|	Вакансии.ПланируемаяДатаЗакрытия,
	|	Вакансии.Состояние,
	|	Вакансии.ДатаСостояния,
	|	Вакансии.Основание,
	|	Вакансии.Примечание,
	|	Вакансии.СоответствуетПрофилюДолжности,
	|	Вакансии.Требования,
	|	Вакансии.Обязанности,
	|	Вакансии.Условия,
	|	Вакансии.Сложность,
	|	Вакансии.Приоритет,
	|	Вакансии.ПричинаОткрытия,
	|	Вакансии.УточнениеНаименования
	|ИЗ
	|	РегистрСведений.ПубликацияВакансий КАК ПубликацияВакансий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вакансии КАК Вакансии
	|		ПО ПубликацияВакансий.Вакансия = Вакансии.Ссылка
	|ГДЕ
	|	ПубликацияВакансий.МестоПубликации = &МестоПубликации";
	
	Запрос.УстановитьПараметр("МестоПубликации", Сайт);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РеквизитПубликацииСоответствующийРеквизитуВакансии(Сайт, Вакансия, Реквизит) Экспорт
	
	Если Реквизит = "Ответственный" Тогда
		Возврат Пользователи.ТекущийПользователь();
	ИначеЕсли Реквизит = "Позиция" Тогда
		Возврат Справочники.ШтатноеРасписание.ПустаяСсылка();
	ИначеЕсли Реквизит = "Подразделение" Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	ИначеЕсли Реквизит = "ПрофильДолжности" Тогда
		Возврат Справочники.ПрофилиДолжностей.ПустаяСсылка();
	ИначеЕсли Реквизит = "Заявитель" Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Реквизит = "ПричинаОткрытия" Тогда
		Возврат Справочники.ПричиныОткрытияВакансий.ПустаяСсылка();
	КонецЕсли;
	
	Если Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.HeadHunter() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.Получить("name")), Вакансия.Получить("name"), "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.Получить("salary.to")), Вакансия.Получить("salary.to"), 0);
		ИначеЕсли Реквизит = "ДатаОткрытия" Тогда
			Возврат Дата(СтрЗаменить(Лев(Вакансия.Получить("created_at"), 10), "-", ""));
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" Тогда
			Возврат ДобавитьМесяц(Дата(СтрЗаменить(Лев(Вакансия.Получить("created_at"), 10), "-", "")), 1);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Требования;
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Обязанности;
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.Получить("description")).Условия;
		КонецЕсли;
		
	ИначеЕсли Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.Rabota() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.name), Вакансия.name, "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.salaryTo), Вакансия.salaryTo, ?(ЗначениеЗаполнено(Вакансия.salaryFrom), Вакансия.salaryFrom, 0));
		ИначеЕсли Реквизит = "ДатаОткрытия" И ЗначениеЗаполнено(Вакансия.publishDate) Тогда
			Возврат Дата(СтрЗаменить(Лев(Вакансия.publishDate, 10), "-", ""));
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" И ЗначениеЗаполнено(Вакансия.expiresDate) Тогда
			Возврат Дата(СтрЗаменить(Лев(Вакансия.expiresDate, 10), "-", ""));
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Требования;
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Обязанности;
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ОписаниеТребованийОбязанностейУсловий(Вакансия.description).Условия;
		КонецЕсли;
		
	ИначеЕсли Сайт = ИнтеграцияРекрутинговыхСайтовКлиентСервер.SuperJob() Тогда
		
		Если Реквизит = "Наименование" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.profession), Вакансия.profession, "");
		ИначеЕсли Реквизит = "ПредполагаемыйДоход" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.payment_to), Вакансия.payment_to, 0);
		ИначеЕсли Реквизит = "ДатаОткрытия" Тогда
			Возврат Дата(СтрЗаменить(Лев(Вакансия.date_last_published, 10), "-", ""));
		ИначеЕсли Реквизит = "ПланируемаяДатаЗакрытия" Тогда
			Возврат ДобавитьМесяц(Дата(СтрЗаменить(Лев(Вакансия.date_last_published, 10), "-", "")), 1);
		ИначеЕсли Реквизит = "Требования" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.candidat), Вакансия.candidat, "");
		ИначеЕсли Реквизит = "Обязанности" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.work), Вакансия.work, "");
		ИначеЕсли Реквизит = "Условия" Тогда
			Возврат ?(ЗначениеЗаполнено(Вакансия.compensation), Вакансия.compensation ,"");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗагружаемыеРеквизитыВакансии(Сайт) Экспорт
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("ПредполагаемыйДоход");
	Реквизиты.Добавить("ДатаОткрытия");
	Реквизиты.Добавить("ПланируемаяДатаЗакрытия");
	Реквизиты.Добавить("Условия");
	Реквизиты.Добавить("Требования");
	Реквизиты.Добавить("Обязанности");
	
	Возврат Реквизиты;
	
КонецФункции

Функция НоваяСтепеньЗнанияЯзыка(Код) Экспорт
	
КонецФункции

Функция КонстантаИспользоватьИнтеграциюРекрутинговыхСайтов() Экспорт
	
	Возврат Константы.ИспользоватьИнтеграциюРекрутинговыхСайтов.Получить();
	
КонецФункции

Функция ОписаниеТребованийОбязанностейУсловий(Знач ОбщееОписание)
	
	ОбщееОписание = ИнтеграцияРекрутинговыхСайтовКлиентСервер.ИзвлечьТекстИзHTML(ОбщееОписание);
	
	СвойстваОписания = Новый Структура;
	ДлинаОписания = СтрДлина(ОбщееОписание);
	
	ТаблицаРазделов = Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("ИндексНачала", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаРазделов.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРазделов.Колонки.Добавить("Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	ЗаголовкиРазделов = Новый Соответствие;
	
	ЗаголовкиРазделов.Вставить("Требования", СтрРазделить("Требования:,Требования к кандидату:", ","));
	ЗаголовкиРазделов.Вставить("Обязанности", СтрРазделить("Обязанности:,Должностные обязанности:", ","));
	ЗаголовкиРазделов.Вставить("Условия", СтрРазделить("Условия:,Условия работы:", ","));
	
	Для Каждого ЗаголовкиРаздела Из ЗаголовкиРазделов Цикл
		
		ТекущийЗаголовок = "";
		ИндексНачала = 0;
		
		Заголовки = ЗаголовкиРаздела.Значение;
		Для Каждого Заголовок Из Заголовки Цикл
			
			ТекущийЗаголовок = Заголовок;
			ИндексНачала = СтрНайти(ОбщееОписание, ТекущийЗаголовок);
			
			Если ИндексНачала <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаРазделов.Добавить();
		НоваяСтрока.Имя = ЗаголовкиРаздела.Ключ;
		НоваяСтрока.Заголовок = ТекущийЗаголовок;
		НоваяСтрока.ИндексНачала = ИндексНачала;
		
	КонецЦикла;
	
	ТаблицаРазделов.Сортировать("ИндексНачала");
	ВсегоРазделов = ТаблицаРазделов.Количество();
	
	РазделыРаспознаны = Ложь;
	ТекстПрочихУсловий = "";
	
	Для Каждого Раздел Из ТаблицаРазделов Цикл
		
		Если Раздел.ИндексНачала <> 0 Тогда
			
			Если Не РазделыРаспознаны Тогда
				
				Если Раздел.ИндексНачала <> 1 Тогда
					ТекстПрочихУсловий = СокрЛП(Сред(ОбщееОписание, 1, Раздел.ИндексНачала - 1));
				КонецЕсли;
				
				РазделыРаспознаны = Истина;
				
			КонецЕсли;
			
			ИндексНачалаОписания = Раздел.ИндексНачала + СтрДлина(Раздел.Заголовок);
			
		Иначе
			СвойстваОписания.Вставить(Раздел.Имя, "");
			Продолжить;
		КонецЕсли;
		
		КонецРаздела = ДлинаОписания;
		ИндексРаздела = ТаблицаРазделов.Индекс(Раздел);
		
		Если ИндексРаздела < ВсегоРазделов - 1 Тогда
			
			СледРаздел = ТаблицаРазделов.Получить(ИндексРаздела + 1);
			Описание = Сред(ОбщееОписание, ИндексНачалаОписания, СледРаздел.ИндексНачала - ИндексНачалаОписания);
			
		Иначе
			Описание = Сред(ОбщееОписание, ИндексНачалаОписания);
		КонецЕсли;
		
		СвойстваОписания.Вставить(Раздел.Имя, СокрЛП(Описание));
		
	КонецЦикла;
	
	Если Не РазделыРаспознаны Тогда
		ТекстПрочихУсловий = ОбщееОписание;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПрочихУсловий) Тогда
		СвойстваОписания.Условия = СвойстваОписания.Условия + Символы.ПС + ТекстПрочихУсловий;
	КонецЕсли;
	
	Возврат СвойстваОписания;
	
КонецФункции

#КонецОбласти