////////////////////////////////////////////////////////////////////////////////
// Возвратные события: методы возвратных событий, работающие на стороне сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

// Формирует движения интервального регистра сведений по изменениям первичного регистра
//		КадроваяИсторияСотрудников
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра сведений, имеющего интервальную версию.
//	НаборЗаписей - Набор записей регистра сведений
//	МенеджерВременныхТаблиц - Менеджер временных таблиц, в котором содержится "ВТСтарыйНаборЗаписей"
//	ПараметрыПостроения - Структура - см. метод "ПараметрыПостроенияИнтервальногоРегистра".
Процедура СформироватьДвиженияИнтервальногоРегистраПоИзменениям(ИмяРегистра, НаборЗаписей, МенеджерВременныхТаблиц, ПараметрыПостроения) Экспорт

	ЭтоНовыйНабор = НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоНовыйНабор") И НаборЗаписей.ДополнительныеСвойства.ЭтоНовыйНабор;
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц,НаборЗаписей,Истина,"ВТНовыйНаборЗаписей");
	Запрос = Новый Запрос;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
	Иначе
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
	КонецЕсли;
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	
	Если Не ЭтоНовыйНабор Тогда
		
		Если НаборЗаписей.Количество() = 0 Тогда
		
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТИзмененныеЗаписи.ИзмеренияОтбора_
			|ПОМЕСТИТЬ ВТОтборДляПереформирования
			|ИЗ
			|	ВТСтарыйНаборЗаписей КАК ВТИзмененныеЗаписи"; 
			
		Иначе
			
			ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
			МассивОписанияПолей = Новый Массив;
			
			МассивОписанияПолей.Добавить("ВТНаборЗаписей.Период");
			Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
			
				МассивОписанияПолей.Добавить(Разделитель);
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.ДействуетДо");
			
			КонецЕсли;
			
			Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
				МассивОписанияПолей.Добавить(Разделитель);
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.");
				МассивОписанияПолей.Добавить(Измерение);
			
			КонецЦикла; 
			
			Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
			
				МассивОписанияПолей.Добавить(Разделитель);
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.");
				МассивОписанияПолей.Добавить(Ресурс);
			
			КонецЦикла; 
			
			Для каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
				МассивОписанияПолей.Добавить(Разделитель);
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.");
				МассивОписанияПолей.Добавить(Ресурс);
			
			КонецЦикла; 
			
			Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
			
				МассивОписанияПолей.Добавить(Разделитель);
				МассивОписанияПолей.Добавить("ВТНаборЗаписей.");
				МассивОписанияПолей.Добавить(Реквизит);
			
			КонецЦикла; 
			
			ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	ВТИзмененныеЗаписи.ИзмеренияОтбора_
				|ПОМЕСТИТЬ ВТОтборДляПереформирования
				|ИЗ
				|	(ВЫБРАТЬ
				|		#ТекстОписанияПолей,
				|		СУММА(Флаг)
				|	ИЗ
				|		(ВЫБРАТЬ
				|			#ТекстОписанияПолей,
				|			1 КАК Флаг
				|		ИЗ
				|			ВТСтарыйНаборЗаписей КАК ВТНаборЗаписей
				|	
				|		ОБЪЕДИНИТЬ ВСЕ
				|	
				|		ВЫБРАТЬ
				|			#ТекстОписанияПолей,
				|			-1
				|		ИЗ
				|			ВТНовыйНаборЗаписей КАК ВТНаборЗаписей) КАК ВТНаборЗаписей
				|
				|	СГРУППИРОВАТЬ ПО
				|		#ТекстОписанияПолей
				|
				|	ИМЕЮЩИЕ
				|		СУММА(Флаг) <> 0) КАК ВТИзмененныеЗаписи";
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТНовыйНаборЗаписей");
						
		КонецЕсли; 
		
		МассивСтрокИзмерений = Новый Массив;
		Для каждого Измерение Из МассивИзмерений Цикл
		
			МассивСтрокИзмерений.Добавить(Разделитель);
			МассивСтрокИзмерений.Добавить("ВТИзмененныеЗаписи.");
			МассивСтрокИзмерений.Добавить(Измерение);
		
		КонецЦикла; 
		
		МассивСтрокИзмерений.Удалить(0);
		ТекстИзмерений = СтрСоединить(МассивСтрокИзмерений);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТСтарыйНаборЗаписей");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТекстОписанияПолей", ТекстОписанияПолей);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИзмененныеЗаписи.ИзмеренияОтбора_", ТекстИзмерений);
		Результат = Запрос.ВыполнитьПакет();
		ДанныеДляПереформирования = Результат[0].Выбрать();
		ДанныеДляПереформирования.Следующий();
		
		Если ДанныеДляПереформирования.Количество = 0 Тогда
			Запрос.Текст = "УНИЧТОЖИТЬ ВТОтборДляПереформирования";
			Запрос.Выполнить();
			Возврат;
		КонецЕсли; 
		
	Иначе
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТСтарыйНаборЗаписей";
		Запрос.Выполнить();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПостроения.ПолноеПереформирование = Не ЭтоНовыйНабор;
	СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ПараметрыПостроения);
	
КонецПроцедуры	

// Создает временную таблицу записей регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Если ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра)
		ИЛИ ПривилегированныйРежим() Тогда
		
		Запрос = ЗапросВТИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	Иначе
		
		Если ПараметрыПостроения = Неопределено Тогда
			ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		Иначе
			ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = "";
		КонецЕсли;
		
		Если ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода Тогда
			
			ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
			ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериодаПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
			
			Если ВключатьЗаписиНаНачалоПериода Тогда
				
				ИмяСоздаваемойТаблицыСрезПоследних = ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ИмяРегистра, ПараметрыПостроения);
				
				ОписаниеФильтраСрезаПоследних = ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра.ТаблицаФильтра, ОписаниеФильтра.ИзмеренияФильтра);
				УстановитьНастройкиОписаниеФильтраСрезаПоследних(ОписаниеФильтраСрезаПоследних, ОписаниеФильтра);
				
				ПараметрыПостроенияСрезаПоследних = ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра);
				
				СоздатьВТИмяРегистраСрезПоследних(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтраСрезаПоследних, ПараметрыПостроенияСрезаПоследних, ИмяСоздаваемойТаблицыСрезПоследних);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		ИмяВТДоступныеЗаписи = ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения);
		Запрос = ЗапросВТДоступныеЗаписиИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяВТДоступныеЗаписи);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос = ЗапросВТТаблицаРегистра(ИмяРегистра, Ложь, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
КонецПроцедуры

// Создает временную таблицу периодов регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано как ВТ<ИмяРегистра>Периоды.
//					
Процедура СоздатьВТИмяРегистраПериоды(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Запрос = ЗапросВТПериодыИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу среза первых регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПервых(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Если ПривилегированныйРежим() Тогда
		
		Запрос = ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Ложь, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	Иначе
		
		ИмяВТМинимальныеПериоды = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
		Запрос = ЗапросВТПериодыСреза(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Ложь, ИмяВТМинимальныеПериоды);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос = ЗапросВТТаблицаСреза(ИмяРегистра, Ложь, ОписаниеФильтра, ИмяВТМинимальныеПериоды, ПараметрыПостроения, Ложь, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает временную таблицу среза последних регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка - имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка - имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПоследних(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	Если ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра)
		ИЛИ ПривилегированныйРежим() Тогда
		
		Запрос = ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
	Иначе
		
		ИмяВТМаксимальныеПериоды = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
		Запрос = ЗапросВТПериодыСреза(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, ИмяВТМаксимальныеПериоды);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос = ЗапросВТТаблицаСреза(ИмяРегистра, Ложь, ОписаниеФильтра, ИмяВТМаксимальныеПериоды, ПараметрыПостроения, Истина, ИмяРезультирующейТаблицы);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает запрос представления ВТИмяРегистра.
//
// Параметры:
//		ТолькоРазрешенные - Булево
//		ИмяРегистра - Строка - Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения - Структура - см.ПараметрыПостроенияПредставленияВТТаблицаРегистра.
//		ИмяСоздаваемойТаблицы - Строка - если не указано, запрос будет создавать временную
//					таблицу ВТ<ИмяРегистра>
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Запрос = Неопределено;
	
	ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
	Если Запрос <> Неопределено Тогда
		Возврат Запрос;
	КонецЕсли;	
		
	Если ПараметрыПостроения <> Неопределено Тогда
		ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = "";
	КонецЕсли; 
	
	ИмяВТДоступныеЗаписи = ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения);
	Если ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра) Тогда
		
		Если ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра) Тогда
			Запрос = ЗапросВТДвиженияПервичныйРегистр(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		Иначе
			Запрос = ЗапросВТДвиженияИмяИнтервальногоРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		КонецЕсли;
		
	Иначе
		
		Запрос = ЗапросВТДоступныеЗаписиИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяВТДоступныеЗаписи);
	
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос,
			ЗапросВТТаблицаРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТДоступныеЗаписи, ПараметрыПостроения, ИмяСоздаваемойТаблицы));	
			
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраСрез.
//
// Параметры:
//		ТолькоРазрешенные 		- Булево
//		ИмяРегистра 			- Строка - Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения 	- Структура - см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		СрезПоследних			- Булево - если Истина - срез последних, если Ложь - Срез первых.
//		ИмяСоздаваемойТаблицы 	- Строка - если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистраСрез(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Запрос = Неопределено;
	
	ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);
	
	Если Запрос <> Неопределено Тогда
		Возврат Запрос;
	КонецЕсли;	
	
	ИмяВТПериодыСреза = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
	Если СрезПоследних 
		И ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра) Тогда
	
		Если ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, Истина) Тогда
			Запрос = ЗапросВТСрезПервичныйРегистр(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		Иначе
			Запрос = ЗапросВТИнтервалыСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
		КонецЕсли; 
		
	Иначе
		
		Запрос = ЗапросВТПериодыСреза(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяВТПериодыСреза);
	
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос,
			ЗапросВТТаблицаСреза(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ИмяВТПериодыСреза, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы));
		
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраПериоды. 
// Получение периодов по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка - Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура - см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка - если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>Периоды
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТПериодыИмяРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	
	Если ИспользоватьИнтервальныйРегистрСведений(ИмяРегистра) 
		И Не ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, Ложь, 0) Тогда
		
		Запрос = ЗапросВТПериодыИмяИнтервальногоРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	Иначе
		Запрос = ЗапросВТПериодыИмяПервичногоРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции

// Проверяет возможность использования интервальногои регистра сведений
//
// Параметры:
//		ИмяРегистра - Строка - Имя проверяемого регистра.
//
// Возвращаемое значение:
//		Булево
Функция ИспользоватьИнтервальныйРегистрСведений(Знач ИмяРегистра) Экспорт
	
	Возврат Метаданные.РегистрыСведений.Найти(ИмяРегистра + "Интервальный") <> Неопределено;
	
КонецФункции

// Формирует движения интервального регистра сведений
//		КадроваяИсторияСотрудников
//
// Параметры:
//	ИмяРегистра - Строка - Имя регистра сведений, имеющего интервальную версию.
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//	ПараметрыПостроения - структура - см. метод "ПараметрыПостроенияИнтервальногоРегистра".
Процедура СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ПараметрыПостроения, ПараметрыОбновления = Неопределено) Экспорт
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	ИзмерениеЗаписи = ПараметрыПостроения.ОсновноеИзмерение;
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
		СоставнойКлючРасчета = Истина;
		
	Иначе
		
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
		СоставнойКлючРасчета = Ложь;
		
	КонецЕсли;
	РежимЗагрузки = ПараметрыПостроения.РежимЗагрузки;
	ПолноеПереформирование = ПараметрыПостроения.ПолноеПереформирование;
	ПараметрыРесурсов = ПараметрыПостроения.ПараметрыРесурсов;
	
	МаксимальнаяДата = МаксимальнаяДата();
	ТекстОписанияПолей = "";
	ПоляРегистра = 
		"ДатаОкончания,
		|ДатаНачала,
		|ПериодЗаписи,
		|РегистраторЗаписи,
		|РегистраторСобытия,
		|ПериодЗаписи,
		|ПериодПредыдущейЗаписи,
		|ПустойИнтервал,
		|ДействуетДо";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ЗаполнитьПоляРегистраПоОписанию(ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра);
	
	Выборка 			= Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование);
	СтруктураОжидания 	= Новый Структура(ПоляРегистра);
	Вставка				= Новый Структура(ПоляРегистра);
	ЗначенияИзмерений 	= Новый Структура(ИзмеренияОтбора);
	НаборЗаписей 		= РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены	= Ложь;
	ЕстьВставка			= Истина;
	НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
	
	Если СоставнойКлючРасчета Тогда
		ДанныеРегистра = ТекущиеДанныеРегистра(ИмяИнтервальногоРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстОписанияПолей);
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля(ИзмерениеЗаписи) Цикл
		
		ПространствоБлокировки = "РегистрСведений." + ИмяРегистра;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ПространствоБлокировки, ИзмерениеЗаписи, Выборка[ИзмерениеЗаписи]) Тогда
			Продолжить;
		КонецЕсли;
		РассчитанныеПериоды = Новый Соответствие;
		ИзмеренияЗаполнены = Ложь;
		Если ПолноеПереформирование Тогда
			РассчитанныеПериоды.Вставить(Дата(1, 1, 1), НаборЗаписей);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
				
				Если ИзмеренияЗаполнены Тогда
					ЗакрытьИнтервал(Вставка, НаборЗаписей, МаксимальнаяДата, ЕстьВставка);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);				
				ИзмеренияЗаполнены 				= Истина;
				ЕстьОжидание					= Ложь;
				ЕстьВставка 					= Ложь;
				Вставка.ПустойИнтервал			= Ложь;
				Вставка.ПериодПредыдущейЗаписи 	= Дата(1, 1, 1);
				Вставка.ДатаНачала 				= Дата(1, 1, 1);
				ТекущийГод						= Дата(1, 1, 1);
				ИзмеренияПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЗначенияИзмерений);
				
			КонецЕсли;
			
			Если СоставнойКлючРасчета Тогда
				
				Если Не ПолноеПереформирование Тогда
					ИзмеренияПоиска.Вставить("Год", НачалоГода(Выборка.ДатаСобытия)); 
				КонецЕсли;
				
				НайденныеСтроки = ДанныеРегистра.НайтиСтроки(ИзмеренияПоиска);
				Для каждого СтрокаДанных Из НайденныеСтроки Цикл
					ДанныеРегистра.Удалить(СтрокаДанных);
				КонецЦикла; 
				
			КонецЕсли;

			Если Выборка.ЭтоНачалоИнтервала Тогда
				
				Если ЕстьВставка Тогда
					
					Если Вставка.ПериодЗаписи > Выборка.ПериодЗаписи
						И Вставка.ПустойИнтервал <> Истина
						Или Выборка.ПустойИнтервал Тогда
						
						Если Не ПолноеПереформирование
							И НачалоГода(Выборка.ДатаСобытия) <> ТекущийГод Тогда
				
							НаборЗаписейПоГоду(ИмяИнтервальногоРегистра, РассчитанныеПериоды, НачалоГода(Выборка.ДатаСобытия));
						КонецЕсли; 
						
						Продолжить;
					КонецЕсли;
					
					Если Вставка.ДатаНачала < Выборка.ДатаСобытия Тогда
						
						ДатаОкончания = Выборка.ДатаСобытия - 1;
						ЗакрытьИнтервал(Вставка, НаборЗаписей, ДатаОкончания, ЕстьВставка);
						
					КонецЕсли;
					ПоместитьВОжидание(СтруктураОжидания, Вставка, Выборка, ЕстьОжидание);
					
				КонецЕсли;
				
				ОткрытьИнтервал(Вставка, Выборка, Выборка.ДатаСобытия, ЕстьВставка);
				ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
				
			Иначе
				
				Если ЕстьВставка
					И Вставка.ДатаНачала = Выборка.ПериодЗаписи Тогда
				
					ЗакрытьИнтервал(Вставка, НаборЗаписей, Выборка.ДатаСобытия, ЕстьВставка);
					Если ЕстьОжидание 
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда

						Вставка.ПериодПредыдущейЗаписи = Вставка.ДатаНачала;
						СтруктураОжидания.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ОткрытьИнтервал(Вставка, СтруктураОжидания, Выборка.ДатаСобытия + 1, ЕстьВставка);
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						ЕстьОжидание = Ложь;
						
					ИначеЕсли ПараметрыРесурсов <> Неопределено
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда
						
						ОткрытьПустойИнтервал(Вставка, Выборка, Выборка.ДатаСобытия + 1, ЕстьВставка, ПараметрыРесурсов);
						Вставка.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗакрытьИнтервал(Вставка, НаборЗаписей, МаксимальнаяДата, ЕстьВставка);
		СтруктураПоиска = Новый Структура(ИзмерениеЗаписи, Выборка[ИзмерениеЗаписи]);
		
		Для каждого КлючИЗначение Из РассчитанныеПериоды Цикл
			
			НаборЗаписей = КлючИЗначение.Значение;
			НаборЗаписей.Отбор[ИзмерениеЗаписи].Установить(Выборка[ИзмерениеЗаписи]);
			Если Не ПолноеПереформирование Тогда
				
				НаборЗаписей.Отбор.Год.Установить(КлючИЗначение.Ключ);
				СтруктураПоиска.Вставить("Год", КлючИЗначение.Ключ); 
				
			КонецЕсли;

			Если СоставнойКлючРасчета Тогда
				
				ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, НаборЗаписей);
				ДанныеИзмерений = ДанныеРегистра.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаДанных Из ДанныеИзмерений Цикл
					
					Если ЗначенияИзмеренийОтличны(ЗначенияИзмерений, СтрокаДанных) Тогда
						НоваяСтрока = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ТаблицаФильтра 		- Строка - имя временной таблицы
//					   		- ТаблицаЗначений
//								содержат обязательные колонки:
//									"Период" (для получения представлений среза первых или
//										среза последних)
//									"ДатаНачала" и "ДатаОкончания" (для получения таблицы регистра).
//		ИзмеренияФильтра 	- Строка - имена колонок таблицы равные именам измерений регистра,
//								по которым устанавливается фильтр, для колонок с именами отличающимися
//								от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//								указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//								Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//		ПоляФильтра 		- Строка
//							- Массив - имена колонок таблицы, по которым не устанавливается фильтр,
//								но которые должны участвовать в результате запроса.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ВременнаяТаблица 	- Булево - Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистра(Знач ТаблицаФильтра, Знач ИзмеренияФильтра = "", Знач ПоляФильтра = "") Экспорт
	
	ОписаниеФильтра = Новый Структура;
	
	ОписаниеФильтра.Вставить("ВременнаяТаблица", ТипЗнч(ТаблицаФильтра) = Тип("Строка"));
	ОписаниеФильтра.Вставить("ТаблицаФильтра", ТаблицаФильтра);
	ОписаниеФильтра.Вставить("ИзмеренияФильтра", ИзмеренияФильтра);
	ОписаниеФильтра.Вставить("СоответствиеИзмеренийРегистраИзмерениямФильтра", Новый Соответствие);
	Если ТипЗнч(ПоляФильтра) = Тип("Строка") Тогда
		МассивПолейФильтра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляФильтра, , , Истина);
	Иначе
		МассивПолейФильтра = ИзмеренияФильтра;
	КонецЕсли;
	ОписаниеФильтра.Вставить("ПоляФильтра", МассивПолейФильтра);
	
	Возврат ОписаниеФильтра;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистра.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево - если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив - описания отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистра() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВключатьЗаписиНаНачалоПериода", Ложь);
	ПараметрыПостроения.Вставить("ИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода", "");
	ПараметрыПостроения.Вставить("ОтборыЗаписейНаНачалоПериода", Неопределено);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраПериоды.
//
// Возвращаемое значение - Структура - содержит структуры со свойствами:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево - если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка - по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив - описания отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраСрез.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 			- Неопределено 	- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 					- Массив 		- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВсеЗаписи 				- Булево - если Истина в результирующую таблицу будут включены
//											записи таблицы фильтра, для которых нет записей в регистре.
//			* ВключаяГраницу 			- Булево - если Ложь из результирующей таблицы будут исключены
//											записи с периодами равными ограничивающим.
//			* ОтборыПрименяемыеКСрезу - Массив - коллекции, аналогичных коллекции ключа Отборы, но применяемый
//											к полученному срезу.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез() Экспорт
	
	ПараметрыПостроения = ПараметрыПостроенияВТИмяРегистра();
	ПараметрыПостроения.Вставить("ВсеЗаписи", Ложь);
	ПараметрыПостроения.Вставить("ВключаяГраницу", Истина);
	ПараметрыПостроения.Вставить("ОтборыПрименяемыеКСрезу", Новый Массив);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыПостроенияИнтервальногоРегистра() Экспорт
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ПолноеПереформирование", Истина);
	ПараметрыПостроения.Вставить("РежимЗагрузки", Истина);
	ПараметрыПостроения.Вставить("ОсновноеИзмерение", Неопределено);
	ПараметрыПостроения.Вставить("ИзмеренияРасчета", Неопределено);
	ПараметрыРесурсов = Новый Структура;
	ПараметрыПостроения.Вставить("ПараметрыРесурсов", ПараметрыРесурсов);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает максимально возможную дату для интервального регистра.
//
// Возвращаемое значение:
//		Дата
Функция МаксимальнаяДата() Экспорт
	
	Возврат Дата(3999, 12, 31, 23, 59, 59);
	
КонецФункции

// Возвращает максимально возможную дату для интервального регистра строкой для запроса.
//
// Возвращаемое значение:
//		Строка
Функция МаксимальнаяДатаСтрокой() Экспорт
	
	Возврат "ДАТАВРЕМЯ(" + Формат(МаксимальнаяДата(), "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
	
КонецФункции

Функция ПараметрыНаследованияРесурсов(ИмяРегистра) Экспорт
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ПараметрыРесурсов = Новый Структура;
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
	
		Если Ресурс = "ПериодПредыдущейЗаписи" Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыРесурсов.Вставить(Ресурс);
		ПараметрыНаследования = Новый Структура("ПравилоНаследования, Значение", "Пустое");
		ПараметрыРесурсов[Ресурс] = ПараметрыНаследования;
		
	КонецЦикла;
	
	Возврат ПараметрыРесурсов;
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает запрос представления ВТДоступныеЗаписиИмяРегистра. 
// Получение движений по неинтервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 					- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 				- Булево
//		ОписаниеФильтра 				- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 			- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяВТДоступныеЗаписиИмяРегистра - Строка
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДоступныеЗаписиИмяРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяВТДоступныеЗаписиИмяРегистра = Неопределено)
	
	Запрос = Новый Запрос;
	СчПараметров = 1;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительОтбора = Символы.ПС + Символы.Таб + "И (";
	МассивСтрок = Новый Массив;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		Если Не ЗначениеЗаполнено(ОписаниеФильтра.ИзмеренияФильтра) Тогда
			
			МассивИзмерений = Новый Массив;
			Для Каждого Колонка Из ОписаниеФильтра.ТаблицаФильтра.Колонки Цикл
				МассивИзмерений.Добавить(Колонка.Имя);		
			КонецЦикла;	
			
		Иначе
			
			Если ТипЗнч(ОписаниеФильтра.ИзмеренияФильтра) = Тип("Строка") Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеФильтра.ИзмеренияФильтра, , , Истина);
			Иначе
				МассивИзмерений = ОписаниеФильтра.ИзмеренияФильтра;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИмяВТИзмеренияДаты = ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения);
		
		МассивСтрок.Добавить("ВЫБРАТЬ");
		МассивСтрок.Добавить("
			|	ИзмеренияДаты.");
		МассивСтрок.Добавить(ИзмерениеФильтраДатаНачала);
		МассивСтрок.Добавить(",
			|	ИзмеренияДаты.");
		МассивСтрок.Добавить(ИзмерениеФильтраДатаОкончания);
		
		Для Каждого Измерение Из МассивИзмерений Цикл
			
			Если ВРег(Измерение) = ВРег(ИзмерениеФильтраДатаНачала)
				Или ВРег(Измерение) = ВРег(ИзмерениеФильтраДатаОкончания) Тогда
				
				Продолжить;
			КонецЕсли; 
			
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("ИзмеренияДаты.");
			МассивСтрок.Добавить(Измерение);
			МассивСтрок.Добавить(" КАК ");
			МассивСтрок.Добавить(Измерение);
				
		КонецЦикла;
		
		ТекстЗапроса = "
			|ПОМЕСТИТЬ #ИмяВТИзмеренияДаты
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		ИмяПараметраИзмеренияДаты = УникальноеИмяПараметраЗапроса(ИмяВТИзмеренияДаты);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмеренияДаты", "&" + ИмяПараметраИзмеренияДаты);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТИзмеренияДаты", ИмяВТИзмеренияДаты);
		МассивСтрок.Добавить(ТекстЗапроса);
		
		МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		МассивСтрок.Добавить(Символы.ПС);
		
		Запрос.УстановитьПараметр(ИмяПараметраИзмеренияДаты, ОписаниеФильтра.ТаблицаФильтра);
		
		ОписаниеФильтра.ВременнаяТаблица = Истина;
		ОписаниеФильтра.ТаблицаФильтра = ИмяВТИзмеренияДаты;
		ОписаниеФильтра.ИзмеренияФильтра = МассивИзмерений;
		
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
		
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериодаПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
	Если ВключатьЗаписиНаНачалоПериода Тогда
			
		Если ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
			Если ФормироватьСПериодичностьДень Тогда
				ПредставлениеПериода = "ДЕНЬ";
			Иначе
				ПредставлениеПериода = "СЕКУНДА";
			КонецЕсли;
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
			ПредставлениеПериода = "ДЕНЬ";
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
			ПредставлениеПериода = "МЕСЯЦ";
		ИначеЕсли ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
			ПредставлениеПериода = "КВАРТАЛ";
		Иначе
			ПредставлениеПериода = "ГОД";
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода) Тогда
			
			ИмяСоздаваемойТаблицыСрезПоследних = ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ИмяРегистра, ПараметрыПостроения);
			
			Если ОписаниеФильтра.ВременнаяТаблица Тогда
				ОписаниеФильтраСрезаПоследних = ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра.ТаблицаФильтра, ОписаниеФильтра.ИзмеренияФильтра);
			Иначе
				ОписаниеФильтраСрезаПоследних = ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТИзмеренияДаты, МассивИзмерений);
			КонецЕсли;
			
			УстановитьНастройкиОписаниеФильтраСрезаПоследних(ОписаниеФильтраСрезаПоследних, ОписаниеФильтра);
			
			ПараметрыПостроенияСрезаПоследних = ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра);
			
			ЗапросВТИмяРегистраСрез = ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтраСрезаПоследних, ПараметрыПостроенияСрезаПоследних, Истина,  ИмяСоздаваемойТаблицыСрезПоследних);
			
			ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
			
			МассивСтрок.Добавить(ЗапросВТИмяРегистраСрез.Текст);
			МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			
		КонецЕсли;
		
		Если ФормироватьСПериодичностьДень
			Или ОписаниеРегистра.Периодичность <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
			
			ПредставлениеИзмерениеФильтраДатаНачала = "ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + ", " + ПредставлениеПериода + "), " + ПредставлениеПериода + ", 1)";
			
		Иначе
			ПредставлениеИзмерениеФильтраДатаНачала = "ДОБАВИТЬКДАТЕ(ИзмеренияДаты." + ИзмерениеФильтраДатаНачала + ", " + ПредставлениеПериода + ", 1)";
		КонецЕсли;
		
	Иначе
		ПредставлениеИзмерениеФильтраДатаНачала = "ИзмеренияДаты." + ИзмерениеФильтраДатаНачала;
	КонецЕсли; 
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ПредставлениеРегистрСведенийПериод = "НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ)";
		
		ПредставлениеУсловияИзмеренияДатыДатаНачала = "НАЧАЛОПЕРИОДА(" + ПредставлениеИзмерениеФильтраДатаНачала + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыДатаОкончания = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания + ", ДЕНЬ)";
		
	Иначе
		
		ПредставлениеРегистрСведенийПериод = "РегистрСведений.Период";
		
		ПредставлениеУсловияИзмеренияДатыДатаНачала = ПредставлениеИзмерениеФильтраДатаНачала;
		ПредставлениеУсловияИзмеренияДатыДатаОкончания = "ИзмеренияДаты." + ИзмерениеФильтраДатаОкончания;
		
	КонецЕсли;
	
	ТекстОписанияИзмерений = "";
	МассивОписанияИзмерений = Новый Массив;
	
	УсловиеСоединенияПоПериоду =
		"(ВЫБОР 
		|				КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаНачала = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
		|				КОГДА РегистрСведений.Период >= #ПредставлениеУсловияИзмеренияДатыДатаНачала ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|		И (ВЫБОР
		|			КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
		|			КОГДА РегистрСведений.Период <= #ПредставлениеУсловияИзмеренияДатыДатаОкончания ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)";
		
	УсловиеСоединенияПоПериоду = СтрЗаменить(УсловиеСоединенияПоПериоду, "#ИзмерениеФильтраДатаНачала", ИзмерениеФильтраДатаНачала);
	УсловиеСоединенияПоПериоду = СтрЗаменить(УсловиеСоединенияПоПериоду, "#ПредставлениеУсловияИзмеренияДатыДатаНачала", ПредставлениеУсловияИзмеренияДатыДатаНачала);
	УсловиеСоединенияПоПериоду = СтрЗаменить(УсловиеСоединенияПоПериоду, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	УсловиеСоединенияПоПериоду = СтрЗаменить(УсловиеСоединенияПоПериоду, "#ПредставлениеУсловияИзмеренияДатыДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
	
	МассивУсловиеСоединенияПоПериоду = Новый Массив;
	МассивУсловиеСоединенияПоПериоду.Добавить(УсловиеСоединенияПоПериоду);
	МассивОписанияПолей = Новый Массив;
	МассивОписанияПолей.Добавить(Символы.Таб);
	МассивОписанияПолей.Добавить(ПредставлениеРегистрСведенийПериод);
	МассивОписанияПолей.Добавить(" КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи,");
	МассивОписанияПолей.Добавить(УсловиеСоединенияПоПериоду);
	МассивОписанияПолей.Добавить(" КАК ЗаписьПериода");
		
	Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
			
		ТекстОписанияПолей = ",
			|	РегистрСведений.ДействуетДо КАК ДействуетДо,
			|	ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ЛОЖЬ
			|		КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ИСТИНА
			|		КОГДА РегистрСведений.ДействуетДо <= #ПредставлениеУсловияИзмеренияДатыДатаОкончания ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ВозвратнаяЗапись";
			
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "#ПредставлениеУсловияИзмеренияДатыДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
		
		МассивОписанияПолей.Добавить(ТекстОписанияПолей);
		
		МассивУсловиеСоединенияПоПериоду.Добавить(" ИЛИ ");
		МассивУсловиеСоединенияПоПериоду.Добавить(СтрЗаменить(УсловиеСоединенияПоПериоду, "РегистрСведений.Период", "РегистрСведений.ДействуетДо"));
		МассивУсловиеСоединенияПоПериоду.Добавить(" И РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)");
			
	КонецЕсли;
	
	УсловиеСоединенияПоПериоду = СтрСоединить(МассивУсловиеСоединенияПоПериоду);
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("РегистрСведений.");
		МассивОписанияПолей.Добавить(Измерение);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Измерение);
			
		МассивОписанияИзмерений.Добавить(Разделитель);
		МассивОписанияИзмерений.Добавить("РегистрСведений.");
		МассивОписанияИзмерений.Добавить(Измерение);
			
	КонецЦикла;
	
	Если МассивОписанияИзмерений.Количество() > 0 Тогда
		
		МассивОписанияИзмерений.Удалить(0);
		МассивОписанияИзмерений.Добавить(Символы.Таб);
		
	КонецЕсли;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("РегистрСведений.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("РегистрСведений.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("РегистрСведений.");
		МассивОписанияПолей.Добавить(Реквизит);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Реквизит);
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("РегистрСведений.");
		МассивОписанияПолей.Добавить(СтандартныйРеквизит);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(СтандартныйРеквизит);
	КонецЦикла;
	
	ТекстОписанияИзмерений = СтрСоединить(МассивОписанияИзмерений);
	ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
	МассивСтрок.Добавить("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|");
	МассивСтрок.Добавить(ТекстОписанияПолей);
	МассивСтрок.Добавить("
		|ПОМЕСТИТЬ ");
	МассивСтрок.Добавить(ИмяВТДоступныеЗаписиИмяРегистра);
	МассивСтрок.Добавить("
		|ИЗ
		|	");
	МассивСтрок.Добавить(ОписаниеФильтра.ТаблицаФильтра);
	МассивСтрок.Добавить(" КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.");
	МассивСтрок.Добавить(ИмяРегистра);
	МассивСтрок.Добавить(" КАК РегистрСведений
		|		ПО (");
	МассивСтрок.Добавить(УсловиеСоединенияПоПериоду);
	МассивСтрок.Добавить(")");
	МассивСтрок.Добавить(" И ");
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивСтрок.Добавить("(ИзмеренияДаты.");
		МассивСтрок.Добавить(ИзмерениеФильтра);
		МассивСтрок.Добавить(" = РегистрСведений.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(")");
		МассивСтрок.Добавить(" И ");
		
	КонецЦикла;
	
	МассивСтрок.Удалить(МассивСтрок.Количество() - 1);
	
	Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
		
		ТекстОтбор = "";
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить("
			|ГДЕ
			|	(ИСТИНА");
		
		Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
				
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяВТДоступныеЗаписиИмяРегистра, СчПараметров);
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
			КонецЕсли;
			
			Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
				
				ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				МассивОтбор.Добавить(РазделительОтбора);
				МассивОтбор.Добавить(ПредставленияЛевогоЗначение);
				МассивОтбор.Добавить(" ");
				МассивОтбор.Добавить(СтруктураОтбора.ВидСравнения);
				МассивОтбор.Добавить(" (");
				МассивОтбор.Добавить(ОписаниеПараметра);
				МассивОтбор.Добавить("))");
					
			Иначе
					
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
				МассивОтбор.Добавить(РазделительОтбора);
				МассивОтбор.Добавить(ПредставленияЛевогоЗначение);
				МассивОтбор.Добавить(" ");
				МассивОтбор.Добавить(СтруктураОтбора.ВидСравнения);
				МассивОтбор.Добавить(" ");
				МассивОтбор.Добавить(ОписаниеПараметра);
				МассивОтбор.Добавить(")");
					
			КонецЕсли;
			
		КонецЦикла;	
		
		МассивОтбор.Добавить(")");
		ТекстОтбор = СтрСоединить(МассивОтбор);
		
		МассивСтрок.Добавить(ТекстОтбор);
		
	КонецЕсли;	
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
		
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(ТекстОтбораСКД);
		
		КонецЕсли; 

	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистра. 
// Получение движений по неинтервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 					- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 				- Булево
//		ОписаниеФильтра 				- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ИмяВТДоступныеЗаписиИмяРегистра - Строка
//		ПараметрыПостроения 			- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 			- Строка, если не указано, запрос будет создавать временную таблицу.
//										ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТТаблицаРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ИмяВТДоступныеЗаписиИмяРегистра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	Запрос = Новый Запрос;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительОтбора = Символы.ПС + Символы.Таб + "И (";
	МассивСтрок = Новый Массив;
	СчПараметров = 1;
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
	
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
		
	ВключатьЗаписиНаНачалоПериода = ВключатьЗаписиНаНачалоПериодаПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
	
	ТекстОписанияПолей =
		"	ДоступныеЗаписи.Период КАК Период,
		|	ДоступныеЗаписи.ПериодЗаписи КАК ПериодЗаписи";
	МассивОписанияПолей = Новый Массив;
	МассивОписанияПолей.Добавить(ТекстОписанияПолей);
		
	Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
		
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ЛОЖЬ КАК ЭтоВозвратноеСобытие");
		
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.ДействуетДо КАК ПериодВозвратногоСобытия");
		
	КонецЕсли; 
	
	МассивОписанияИзмерений = Новый Массив;
	ТекстОписанияИзмерений = "";
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.");
		МассивОписанияПолей.Добавить(Измерение);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Измерение);
			
		МассивОписанияИзмерений.Добавить(Разделитель);
		МассивОписанияИзмерений.Добавить("РегистрСведений.");
		МассивОписанияИзмерений.Добавить(Измерение);
			
	КонецЦикла;
	
	Если МассивОписанияИзмерений.Количество() > 0 Тогда
		МассивОписанияИзмерений.Удалить(0);
	КонецЕсли;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.");
		МассивОписанияПолей.Добавить(Реквизит);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Реквизит);
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДоступныеЗаписи.");
		МассивОписанияПолей.Добавить(СтандартныйРеквизит);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(СтандартныйРеквизит);
	КонецЦикла;
	
	ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
	ТекстОписанияИзмерений = СтрСоединить(МассивОписанияИзмерений);
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|");
	МассивСтрок.Добавить(ТекстОписанияПолей);
	МассивСтрок.Добавить("
		|ПОМЕСТИТЬ ВТПредставленияИмяРегистраТаблица
		|ИЗ
		|	ВТДоступныеЗаписиИмяРегистра КАК ДоступныеЗаписи
		|ГДЕ
		|	ДоступныеЗаписи.ЗаписьПериода");
	
	Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
		
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолей, "ДоступныеЗаписи.", "РегистрСведений.");
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, "РегистрСведений.ПериодЗаписи", "РегистрСведений.ДействуетДо");
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, "РегистрСведений.Период", "РегистрСведений.ДействуетДо");
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, 
			"РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия", МаксимальнаяДатаСтрокой() + " КАК ПериодВозвратногоСобытия");
		ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, "ЛОЖЬ КАК ЭтоВозвратноеСобытие", "ИСТИНА КАК ЭтоВозвратноеСобытие");
		
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ТекстОписанияПолейСВозвратнымиРесурсами = СтрЗаменить(ТекстОписанияПолейСВозвратнымиРесурсами, 
				"РегистрСведений." + Ресурс + " КАК " + Ресурс,
				"РегистрСведений." + Ресурс + "ПоОкончании  КАК " + Ресурс);
				
		КонецЦикла;
		
		МассивСтрок.Добавить("
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|");
		МассивСтрок.Добавить(ТекстОписанияПолейСВозвратнымиРесурсами);
		МассивСтрок.Добавить("
			|ИЗ
			|	ВТДоступныеЗаписиИмяРегистра КАК ДоступныеЗаписи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.");
		МассивСтрок.Добавить(ИмяРегистра);
		МассивСтрок.Добавить(" КАК РегистрСведений
			|		ПО ДоступныеЗаписи.ВозвратнаяЗапись
			|			И ДоступныеЗаписи.ПериодЗаписи = РегистрСведений.Период
			|			И ДоступныеЗаписи.ДействуетДо = РегистрСведений.ДействуетДо");

		Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
				
			Если ВРег(Измерение) <> ВРег("ДатаНачала") И ВРег(Измерение) <> ВРег("ДатаОкончания") Тогда
				МассивСтрок.Добавить("	И (ДоступныеЗаписи.");
				МассивСтрок.Добавить(Измерение);
				МассивСтрок.Добавить(" = РегистрСведений.");
				МассивСтрок.Добавить(Измерение);
				МассивСтрок.Добавить(")");
			КонецЕсли;
			
		КонецЦикла;
	
		МассивСтрок.Добавить("
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.");
		МассивСтрок.Добавить(ИмяРегистра);
		МассивСтрок.Добавить(" КАК РегистрСведенийВспомогательный
			|		ПО РегистрСведений.Период < РегистрСведенийВспомогательный.Период
			|			И РегистрСведений.ДействуетДо >= РегистрСведенийВспомогательный.Период");
			
		Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
				
			МассивСтрок.Добавить("
				|			И РегистрСведений.");
			МассивСтрок.Добавить(Измерение);
			МассивСтрок.Добавить(" = РегистрСведенийВспомогательный.");
			МассивСтрок.Добавить(Измерение);
			
		КонецЦикла;
		
		МассивСтрок.Добавить("}");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить("ГДЕ
			|	РегистрСведенийВспомогательный.Период ЕСТЬ NULL");
		
		Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
			
			ТекстОтбор = "";
			МассивОтбора = Новый Массив;
						
			Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
					
				Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
				Иначе
					ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяСоздаваемойТаблицы, СчПараметров);
					ОписаниеПараметра = "&" + ИмяПараметра;
					Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				КонецЕсли;
				
				Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
					
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
					МассивОтбора.Добавить(РазделительОтбора);
					МассивОтбора.Добавить(ПредставленияЛевогоЗначение);
					МассивОтбора.Добавить(" ");
					МассивОтбора.Добавить(СтруктураОтбора.ВидСравнения);
					МассивОтбора.Добавить(" (");
					МассивОтбора.Добавить(ОписаниеПараметра);
					МассивОтбора.Добавить("))");
					
				Иначе
					
					ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
					МассивОтбора.Добавить(РазделительОтбора);
					МассивОтбора.Добавить(ПредставленияЛевогоЗначение);
					МассивОтбора.Добавить(" ");
					МассивОтбора.Добавить(СтруктураОтбора.ВидСравнения);
					МассивОтбора.Добавить(" ");
					МассивОтбора.Добавить(ОписаниеПараметра);
					МассивОтбора.Добавить(")");
					
				КонецЕсли;
			
			КонецЦикла;	
			
			ТекстОтбор = СтрСоединить(МассивОтбора);
			
			Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
				ТекстОтбор = СтрЗаменить(ТекстОтбор, 
					"." + Ресурс + " ",
					"." + Ресурс + "ПоОкончании ");
			КонецЦикла;
			
			МассивСтрок.Добавить(Символы.ПС + Символы.Таб);
			МассивСтрок.Добавить(ТекстОтбор);
			
		КонецЕсли;	
		
	КонецЕсли; 
	
	ИмяВТПредставленияВсеЗаписиИмяРегистра = "ВТПредставленияВсеЗаписи" + ИмяРегистра;
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ИмяВТМаксимальныеПериодыПоДням = ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения);
		
		МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		МассивСтрок.Добавить("
			|ВЫБРАТЬ
			|	РегистрСведений.Период,
			|	МАКСИМУМ(РегистрСведений.ПериодЗаписи) КАК ПериодЗаписи,
			|");
		МассивСтрок.Добавить(ТекстОписанияИзмерений);
		МассивСтрок.Добавить("
			|ПОМЕСТИТЬ ");
		МассивСтрок.Добавить(ИмяВТМаксимальныеПериодыПоДням);
		МассивСтрок.Добавить("
			|ИЗ 
			|	ВТПредставленияИмяРегистраТаблица КАК РегистрСведений
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСведений.Период,
			|");
		МассивСтрок.Добавить(ТекстОписанияИзмерений);
		
		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "ДоступныеЗаписи.", "РегистрСведений.");
		
		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстРезультирующегоОписанияПолей,
			"НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ) КАК Период", "РегистрСведений.Период КАК Период");
			
		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстРезультирующегоОписанияПолей,
			"РегистрСведений.Период КАК ПериодЗаписи", "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи");
			
		ТекстРезультирующегоОписанияПолей = СтрЗаменить(ТекстРезультирующегоОписанияПолей,
			"РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия", "РегистрСведений.ПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия");
			
		МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		МассивСтрок.Добавить("
			|ВЫБРАТЬ
			|");
		МассивСтрок.Добавить(ТекстРезультирующегоОписанияПолей);
		МассивСтрок.Добавить("
			|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
			|ИЗ 
			|	");
		МассивСтрок.Добавить(ИмяВТМаксимальныеПериодыПоДням);
		МассивСтрок.Добавить(" КАК РегистрСведенийСрез
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ");
		МассивСтрок.Добавить(ИмяВТПредставленияВсеЗаписиИмяРегистра);
		МассивСтрок.Добавить(" КАК РегистрСведений
			|		ПО РегистрСведенийСрез.Период = РегистрСведений.Период
			|			И РегистрСведенийСрез.ПериодЗаписи = РегистрСведений.ПериодЗаписи");
			
		Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
			МассивСтрок.Добавить("
				|			И РегистрСведенийСрез.");
			МассивСтрок.Добавить(Измерение);
			МассивСтрок.Добавить(" = РегистрСведений.");
			МассивСтрок.Добавить(Измерение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		
		ТекстОписанияПолейНаНачалоПериода = СтрЗаменить(ТекстОписанияПолей, "ДоступныеЗаписи.", "РегистрСведений.");
		ТекстОписанияПолейНаНачалоПериода = СтрЗаменить(ТекстОписанияПолейНаНачалоПериода, "РегистрСведений.Период КАК ПериодЗаписи", "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи");
		ТекстОписанияПолейНаНачалоПериода = СтрЗаменить(ТекстОписанияПолейНаНачалоПериода, 
			"РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия", "РегистрСведений.ПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия");
		
		МассивСтрок.Добавить("
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|");
		МассивСтрок.Добавить(ТекстОписанияПолейНаНачалоПериода);
		МассивСтрок.Добавить("
			|ИЗ 
			|	");
		МассивСтрок.Добавить(ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода);
		МассивСтрок.Добавить(" КАК РегистрСведений
			|ГДЕ
			|	КОНЕЦПЕРИОДА(РегистрСведений.Период, ДЕНЬ) >= РегистрСведений.ПериодЗаписи");
			
		Если ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода <> Неопределено И ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода.Количество() > 0 Тогда
			
			ТекстОтбор = "";
			МассивОтбор = Новый Массив;
			
			Для Каждого СтруктураОтбора Из ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода Цикл
					
				Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
					ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
				Иначе
					ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяСоздаваемойТаблицы, СчПараметров);
					ОписаниеПараметра = "&" + ИмяПараметра;
					Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				КонецЕсли;
				
				Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
					
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
					МассивОтбор.Добавить(РазделительОтбора);
					МассивОтбор.Добавить(ПредставленияЛевогоЗначение);
					МассивОтбор.Добавить(" ");
					МассивОтбор.Добавить(СтруктураОтбора.ВидСравнения);
					МассивОтбор.Добавить(" (");
					МассивОтбор.Добавить(ОписаниеПараметра);
					МассивОтбор.Добавить("))");
						
				Иначе
						
					ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
					МассивОтбор.Добавить(РазделительОтбора);
					МассивОтбор.Добавить(ПредставленияЛевогоЗначение);
					МассивОтбор.Добавить(" ");
					МассивОтбор.Добавить(СтруктураОтбора.ВидСравнения);
					МассивОтбор.Добавить(" ");
					МассивОтбор.Добавить(ОписаниеПараметра);
					МассивОтбор.Добавить(")");
						
				КонецЕсли;
				
			КонецЦикла;	
			
			ТекстОтбор = СтрСоединить(МассивОтбор);
			МассивСтрок.Добавить(ТекстОтбор);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДоступныеЗаписиИмяРегистра", ИмяВТДоступныеЗаписиИмяРегистра);
	
	Если ФормироватьСПериодичностьДень Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПредставленияИмяРегистраТаблица", ИмяВТПредставленияВсеЗаписиИмяРегистра);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПредставленияИмяРегистраТаблица", "ВТИмяСоздаваемойТаблицы");
	КонецЕсли;

	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТДоступныеЗаписиИмяРегистра);
	Если ФормироватьСПериодичностьДень Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТМаксимальныеПериодыПоДням);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТПредставленияВсеЗаписиИмяРегистра);
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистра. 
// Получение движений по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДвиженияИмяИнтервальногоРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	СчПараметров 			= 1;
	ТекстУсловияСоединения 	= "";
	ТекстУсловияСреза		= "";
	ТекстУсловийСКД         = "";
	ТекстОписанияПолей 		= "";
	ТекстОтбораСКД 			= "";
	ТекстНачальныеЗаписи 	= "";
	ИсключающийРегистратор 	= Неопределено;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
	|#ТекстУсловийСКД
	|ИЗ
	|	#ТаблицаФильтра КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяИнтервальногоРегистра КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= #ДатаНачала
	|			И РегистрСведений.ДатаНачала <= #ДатаОкончания
	|			#ТекстУсловияСреза)
	|			#ТекстУсловияСоединения
	|			#СоединениеСПрерваннымИнтервалом 
	|ГДЕ
	|(#ТекстОтбораНаНачалоПериода)
	|#ТекстУсловияОтбора
	|#ТекстОтбораСКД"; 
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
		
	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ЕстьИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяИнтервальногоРегистра, ПараметрыПостроения));
		ТекстЗапроса = ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраДатаНачала, ИзмерениеФильтраДатаОкончания)
			+ ТекстЗапроса;
			
	КонецЕсли;
	
	ОписаниеРегистра 					= ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяИнтервальногоРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень 		= ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ВключатьЗаписиНаНачалоПериода 		= ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода;
	ПредставлениеИзмеренияДатаНачала 	= "ИзмеренияДаты." + ИзмерениеФильтраДатаНачала;
	ПредставлениеИзмеренияДатаОкончания = "ВЫБОР КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
											|	ТОГДА &МаксимальнаяДата
											|ИНАЧЕ
											|	ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания
											|КОНЕЦ"; 
											
	ПредставлениеИзмеренияДатаОкончания = СтрЗаменить(ПредставлениеИзмеренияДатаОкончания, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	
	МассивУсловияСоединения = Новый Массив;
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ПредставлениеРегистрСведенийПериод 				= "НАЧАЛОПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)";
		ПредставлениеПериодичности 						= "ДЕНЬ";
		ПредставлениеУсловияИзмеренияДатыДатаНачала 	= "НАЧАЛОПЕРИОДА(" + ПредставлениеИзмеренияДатаНачала + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыДатаОкончания 	= "КОНЕЦПЕРИОДА("+ ПредставлениеИзмеренияДатаОкончания + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыСреза			= "КОНЕЦПЕРИОДА(" + ПредставлениеИзмеренияДатаНачала + ", ДЕНЬ)";
		МассивУсловияСоединения.Добавить("И РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)");
		
	Иначе
		
		ПредставлениеРегистрСведенийПериод 				= "РегистрСведений.ДатаНачала";
		ПредставлениеПериодичности 						= "СЕКУНДА";
		ПредставлениеУсловияИзмеренияДатыДатаНачала 	= ПредставлениеИзмеренияДатаНачала;
		ПредставлениеУсловияИзмеренияДатыДатаОкончания 	= ПредставлениеИзмеренияДатаОкончания;
		ПредставлениеУсловияИзмеренияДатыСреза			= ПредставлениеИзмеренияДатаНачала;
		
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
	
		ТекстУсловияСреза = "ИЛИ #ПредставлениеРегистрСведенийПериод <= #ДатаНачалаСреза
			|			И РегистрСведений.ДатаОкончания >= #ДатаНачалаСреза";
		ТекстУсловияСреза = СтрЗаменить(ТекстУсловияСреза, "#ДатаНачалаСреза", ПредставлениеУсловияИзмеренияДатыСреза);
		ТекстУсловияСреза = СтрЗаменить(ТекстУсловияСреза, "#ПредставлениеРегистрСведенийПериод", ПредставлениеРегистрСведенийПериод);
		
		ТекстПериод = "ВЫБОР
			|		КОГДА РегистрСведений.ДатаНачала <= #ДатаНачалаСреза
			|			ТОГДА #ДатаНачалаСреза
			|		ИНАЧЕ #ПредставлениеРегистрСведенийПериод
			|	КОНЕЦ";
		ТекстПериод = СтрЗаменить(ТекстПериод, "#ДатаНачалаСреза", ПредставлениеУсловияИзмеренияДатыДатаНачала);
		ТекстПериод = СтрЗаменить(ТекстПериод, "#ПредставлениеРегистрСведенийПериод", ПредставлениеРегистрСведенийПериод);
		ПредставлениеРегистрСведенийПериод = ТекстПериод;

		ПредставлениеУсловияИзмеренияДатыДатаНачала = "ДОБАВИТЬКДАТЕ(" 
			+ ПредставлениеУсловияИзмеренияДатыДатаНачала + "," 
			+ ПредставлениеПериодичности + ",1)";			
			
	КонецЕсли; 
	
	МассивОписанияПолей = Новый Массив;
	МассивОписанияПолей.Добавить(ПредставлениеРегистрСведенийПериод);
	МассивОписанияПолей.Добавить(" КАК Период,
		|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
		|	ВЫБОР
		|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
		|	РегистрСведений.РегистраторСобытия КАК Регистратор,
		|	РегистрСведений.ДатаНачала КАК ДатаНачала,
		|	РегистрСведений.ДатаОкончания КАК ДатаОкончания");
	МассивОписанияПолей.Добавить(ТекстОписанияПолейПоОписаниюРегистра(ОписаниеРегистра));
	ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
	ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи", "РегистрСведений.ДатаНачала КАК ПериодЗаписи");
	
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения);
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивУсловияСоединения.Добавить("
		|			И (ИзмеренияДаты."); 
		МассивУсловияСоединения.Добавить(ИзмерениеФильтра);
		МассивУсловияСоединения.Добавить(" = РегистрСведений.");
		МассивУсловияСоединения.Добавить(Измерение);
		МассивУсловияСоединения.Добавить(")");
		
	КонецЦикла;
	
	ТекстУсловияСоединения = СтрСоединить(МассивУсловияСоединения);
	
	ТекстУсловияОтбора = ТекстОтобраИмяРегистра(ИмяИнтервальногоРегистра, ПараметрыПостроения.Отборы, Запрос, СчПараметров, ЕстьИсключаемыеРегистраторы, ИсключающийРегистратор);
	МассивУсловияОтбора = Новый Массив;
	МассивУсловияОтбора.Добавить(ТекстУсловияОтбора);
	Если ИсключающийРегистратор <> Неопределено Тогда
		МассивУсловияОтбора.Добавить("	И #УсловиеПоПредыдущемуИнтервалу");
	КонецЕсли; 
	ТекстУсловияОтбора = СтрСоединить(МассивУсловияОтбора);
	
	ТекстОтбораНаНачалоПериода = "ИСТИНА";
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ТекстОтбораНаНачалоПериода = ТекстОтобраИмяРегистра(ИмяИнтервальногоРегистра, ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, Запрос, СчПараметров);
		МассивОтборНаНачалоПериода = Новый Массив;
		МассивОтборНаНачалоПериода.Добавить("	РегистрСведений.ДатаНачала >= #ДатаНачала
		|	ИЛИ РегистрСведений.ДатаНачала < #ДатаНачала");
		МассивОтборНаНачалоПериода.Добавить(ТекстОтбораНаНачалоПериода);
		ТекстОтбораНаНачалоПериода = СтрСоединить(МассивОтборНаНачалоПериода);
	КонецЕсли;
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			
			ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Измерение];
			Если ПсевдонимПоля <> Неопределено Тогда
				МассивСтрокОтбораСКД.Добавить(" КАК ");
				МассивСтрокОтбораСКД.Добавить(ПсевдонимПоля);
			КонецЕсли;
			
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД
		И ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Количество() > 0 Тогда
		
		МассивПсевдонимов = Новый Массив;
		Для Каждого КлючИЗначение Из ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД Цикл
			МассивПсевдонимов.Добавить(КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Значение);
		КонецЦикла;
		
		ТекстУсловийСКД = "{ВЫБРАТЬ
			|	"
			+ СтрСоединить(МассивПсевдонимов, "," + Символы.ПС + Символы.Таб)
			+ Символы.ПС
			+ "}";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяИнтервальногоРегистра", ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСреза", ТекстУсловияСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединения", ТекстУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияОтбора", ТекстУсловияОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораНаНачалоПериода", ТекстОтбораНаНачалоПериода);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловийСКД", ТекстУсловийСКД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСКД", ТекстОтбораСКД);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);

	ДобавитьУсловиеПоИсключающемуРегистратору(ТекстЗапроса, ИсключающийРегистратор, ОписаниеРегистра, ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаНачала", ПредставлениеУсловияИзмеренияДатыДатаНачала); 
	
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВспомогательнойВТИзмеренияДаты(ИмяИнтервальногоРегистра, ПараметрыПостроения));
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой()); 
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраПериоды. 
// Получение периодов по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>Периоды
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТПериодыИмяИнтервальногоРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	СчПараметров 			= 1;
	ТекстУсловияСоединения 	= "";
	ТекстУсловияСреза		= "";
	ТекстОписанияПолей 		= "";
	ТекстОтбораСКД 			= "";
	ТекстНачальныеЗаписи 	= "";
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
	|ИЗ
	|	#ТаблицаФильтра КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяИнтервальногоРегистра КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= #ДатаНачала
	|			И РегистрСведений.ДатаНачала <= #ДатаОкончания
	|			#ТекстУсловияСреза)
	|			#ТекстУсловияСоединения
	|#ТекстУсловияОтбора
	|#ТекстОтбораСКД"; 
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + "Периоды";
	КонецЕсли; 
		
	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ЕстьИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяИнтервальногоРегистра, ПараметрыПостроения));
		ТекстЗапроса = ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраДатаНачала, ИзмерениеФильтраДатаОкончания)
			+ ТекстЗапроса;
			
	КонецЕсли;
	
	ОписаниеРегистра 					= ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяИнтервальногоРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень 		= ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ПредставлениеИзмеренияДатаНачала 	= "ИзмеренияДаты." + ИзмерениеФильтраДатаНачала;
	ПредставлениеИзмеренияДатаОкончания = "ВЫБОР КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
											|	ТОГДА &МаксимальнаяДата
											|ИНАЧЕ
											|	ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания
											|КОНЕЦ";
											
	ПредставлениеИзмеренияДатаОкончания = СтрЗаменить(ПредставлениеИзмеренияДатаОкончания, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	
	МассивУсловияСоединения = Новый Массив;
	
	Если ФормироватьСПериодичностьДень Тогда
		
		ПредставлениеРегистрСведенийНачалоПериода		= "НАЧАЛОПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)";
		ПредставлениеРегистрСведенийКонецПериода		= "КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РегистрСведений.ДатаОкончания, СЕКУНДА, -86399), ДЕНЬ)";
		ПредставлениеПериодичности						= "ДЕНЬ";
		ПредставлениеУсловияИзмеренияДатыДатаНачала		= "НАЧАЛОПЕРИОДА(" + ПредставлениеИзмеренияДатаНачала + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыДатаОкончания	= "КОНЕЦПЕРИОДА("+ ПредставлениеИзмеренияДатаОкончания + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыСреза			= "КОНЕЦПЕРИОДА(" + ПредставлениеИзмеренияДатаНачала + ", ДЕНЬ)";
		МассивУсловияСоединения.Добавить("И РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)");
		
	Иначе
		
		ПредставлениеРегистрСведенийНачалоПериода		= "РегистрСведений.ДатаНачала";
		ПредставлениеРегистрСведенийКонецПериода		= "РегистрСведений.ДатаОкончания";
		ПредставлениеПериодичности						= "СЕКУНДА";
		ПредставлениеУсловияИзмеренияДатыДатаНачала		= ПредставлениеИзмеренияДатаНачала;
		ПредставлениеУсловияИзмеренияДатыДатаОкончания	= ПредставлениеИзмеренияДатаОкончания;
		ПредставлениеУсловияИзмеренияДатыСреза			= ПредставлениеИзмеренияДатаНачала;
		
	КонецЕсли;
	
	ТекстПредставленияКонецПериода = 
		"ВЫБОР
		|		КОГДА #ПредставлениеКонецПериода > #ДатаОкончания
		|			ТОГДА #ДатаОкончания
		|		ИНАЧЕ #ПредставлениеКонецПериода
		|	КОНЕЦ";
	ТекстПредставленияКонецПериода = СтрЗаменить(ТекстПредставленияКонецПериода, "#ПредставлениеКонецПериода", ПредставлениеРегистрСведенийКонецПериода);	
	ТекстПредставленияКонецПериода = СтрЗаменить(ТекстПредставленияКонецПериода, "#ДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
	
	ТекстУсловияСреза = "ИЛИ #ПредставлениеРегистрСведенийПериод <= #ДатаНачалаСреза
		|			И РегистрСведений.ДатаОкончания >= #ДатаНачалаСреза";
	ТекстУсловияСреза = СтрЗаменить(ТекстУсловияСреза, "#ДатаНачалаСреза", ПредставлениеУсловияИзмеренияДатыСреза);
	ТекстУсловияСреза = СтрЗаменить(ТекстУсловияСреза, "#ПредставлениеРегистрСведенийПериод", ПредставлениеРегистрСведенийНачалоПериода);
	
	ТекстПериод = "ВЫБОР
		|		КОГДА РегистрСведений.ДатаНачала <= #ДатаНачалаСреза
		|			ТОГДА #ДатаНачалаСреза
		|		ИНАЧЕ #ПредставлениеРегистрСведенийПериод
		|	КОНЕЦ";
	ТекстПериод = СтрЗаменить(ТекстПериод, "#ДатаНачалаСреза", ПредставлениеУсловияИзмеренияДатыДатаНачала);
	ТекстПериод = СтрЗаменить(ТекстПериод, "#ПредставлениеРегистрСведенийПериод", ПредставлениеРегистрСведенийНачалоПериода);
	ПредставлениеРегистрСведенийНачалоПериода = ТекстПериод;

	ПредставлениеУсловияИзмеренияДатыДатаНачала = "ДОБАВИТЬКДАТЕ(" 
		+ ПредставлениеУсловияИзмеренияДатыДатаНачала + "," 
		+ ПредставлениеПериодичности + ",1)";			
	
	МассивОписанияПолей = Новый Массив;
	МассивОписанияПолей.Добавить(ПредставлениеРегистрСведенийНачалоПериода);
	МассивОписанияПолей.Добавить(" КАК НачалоПериода");
	МассивОписанияПолей.Добавить(Разделитель);
	МассивОписанияПолей.Добавить(ТекстПредставленияКонецПериода);
	МассивОписанияПолей.Добавить(" КАК КонецПериода,
		|	ВЫБОР
		|		КОГДА РегистрСведений.ДатаНачала = РегистрСведений.ПериодЗаписи
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
		|	РегистрСведений.РегистраторСобытия КАК Регистратор,
		|	ИзмеренияДаты.");
	МассивОписанияПолей.Добавить(ИзмерениеФильтраДатаНачала);
	МассивОписанияПолей.Добавить(" КАК ДатаНачала,
		|	ИзмеренияДаты.");
	МассивОписанияПолей.Добавить(ИзмерениеФильтраДатаОкончания);
	МассивОписанияПолей.Добавить(" КАК ДатаОкончания");
	МассивОписанияПолей.Добавить(ТекстОписанияПолейПоОписаниюРегистра(ОписаниеРегистра));
	ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
	
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения);
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивУсловияСоединения.Добавить("
		|			И (ИзмеренияДаты."); 
		МассивУсловияСоединения.Добавить(ИзмерениеФильтра);
		МассивУсловияСоединения.Добавить(" = РегистрСведений.");
		МассивУсловияСоединения.Добавить(Измерение);
		МассивУсловияСоединения.Добавить(")");
		
	КонецЦикла;
	
	ТекстУсловияСоединения = СтрСоединить(МассивУсловияСоединения);
	
	ТекстУсловияОтбора = ТекстОтобраИмяРегистра(ИмяИнтервальногоРегистра, ПараметрыПостроения.Отборы, Запрос, СчПараметров);
	
	Если Не ПустаяСтрока(ТекстУсловияОтбора) Тогда
		
		МассивУсловияОтбора = Новый Массив;
		МассивУсловияОтбора.Добавить("ГДЕ
			|");
		МассивУсловияОтбора.Добавить(Сред(ТекстУсловияОтбора,3)); 
		ТекстУсловияОтбора = СтрСоединить(МассивУсловияОтбора);
		
	КонецЕсли;
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяИнтервальногоРегистра", ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСреза", ТекстУсловияСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаНачала", ПредставлениеУсловияИзмеренияДатыДатаНачала); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединения", ТекстУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияОтбора", ТекстУсловияОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСКД", ТекстОтбораСКД);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);

	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВспомогательнойВТИзмеренияДаты(ИмяИнтервальногоРегистра, ПараметрыПостроения));
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой()); 
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраПериоды. 
// Получение периодов по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>Периоды
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТПериодыИмяПервичногоРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	Запрос = Новый Запрос;
	ИмяВТДвиженияРегистра = "ВТДвиженияРегистра" + ИмяРегистра;
	РазделительСоединения = Символы.ПС + "			И ";
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли;
	
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + "Периоды";
	КонецЕсли;
	
	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
	
	ПредставлениеИзмеренияДатаОкончания = "ВЫБОР
										|		КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
										|			ТОГДА &МаксимальнаяДата
										|		ИНАЧЕ
										|			ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания
										|	КОНЕЦ";
	ПредставлениеИзмеренияДатаОкончания = СтрЗаменить(ПредставлениеИзмеренияДатаОкончания, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	
	Если ПараметрыПостроения.ФормироватьСПериодичностьДень Тогда
		ПредставлениеИзмеренияДатыДатаОкончания = "КОНЕЦПЕРИОДА(" + ПредставлениеИзмеренияДатаОкончания + ", ДЕНЬ)";
	Иначе
		ПредставлениеИзмеренияДатыДатаОкончания = ПредставлениеИзмеренияДатаОкончания;
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
		Запрос.Текст = ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраДатаНачала, ИзмерениеФильтраДатаОкончания);
			
	КонецЕсли;
	
	ПараметрыПостроенияДвижений = ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения);
	
	ЗапросДвижения = ЗапросВТИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроенияДвижений, ИмяВТДвиженияРегистра);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросДвижения);
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДвиженияРегистра.Период КАК НачалоПериода,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДвиженияРегистра.ПериодВозвратногоСобытия)) > #ДатаОкончания
		|			ТОГДА #ДатаОкончания
		|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДвиженияРегистра.ПериодВозвратногоСобытия))
		|	КОНЕЦ КАК КонецПериода,
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаНачала КАК ДатаНачала,
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания КАК ДатаОкончания,
		|	#ТекстОписанияПолей
		|ПОМЕСТИТЬ ВТМаксимальныеОкончанияПериодов
		|ИЗ
		|	#ИмяВТДвиженияРегистра КАК ДвиженияРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТДвиженияРегистра КАК СледующиеИнтервалы
		|		ПО ДвиженияРегистра.Измерение_ = СледующиеИнтервалы.Измерение_
		|			И ДвиженияРегистра.Период < СледующиеИнтервалы.Период
		|			И ДвиженияРегистра.ПериодЗаписи <> СледующиеИнтервалы.ПериодЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаФильтра КАК ИзмеренияДаты
		|		ПО ДвиженияРегистра.Измерение_ = ИзмеренияДаты.Измерение_
		|			И ДвиженияРегистра.Период >= ИзмеренияДаты.#ИзмерениеФильтраДатаНачала
		|			И ДвиженияРегистра.Период <= #ДатаОкончания
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияРегистра.Период,
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаНачала,
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания,
		|	#ТекстПолейГруппировки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Минимум(ДвиженияРегистра.НачалоПериода) КАК НачалоПериода,
		|	ДвиженияРегистра.КонецПериода КАК КонецПериода,
		|	ДвиженияРегистра.ДатаНачала КАК ДатаНачала,
		|	ДвиженияРегистра.ДатаОкончания КАК ДатаОкончания,
		|	#ТекстОписанияПолей
		|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
		|ИЗ
		|	ВТМаксимальныеОкончанияПериодов КАК ДвиженияРегистра
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияРегистра.КонецПериода,
		|	ДвиженияРегистра.ДатаНачала,
		|	ДвиженияРегистра.ДатаОкончания,
		|	#ТекстПолейГруппировки";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТДвиженияРегистра", ИмяВТДвиженияРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра);
	ТекстЗаменыПериодВозвратногоСобытия = 
		"ВЫБОР
		|	КОГДА ДвиженияРегистра.ПериодВозвратногоСобытия = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ ДвиженияРегистра.ПериодВозвратногоСобытия < ДвиженияРегистра.Период
		|		ТОГДА &МаксимальнаяДата
		|	ИНАЧЕ ДвиженияРегистра.ПериодВозвратногоСобытия
		|КОНЕЦ";
	ТекстЗаменыПериодВозвратногоСобытия = СтрЗаменить(ТекстЗаменыПериодВозвратногоСобытия, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстЗаменыПериодВозвратногоСобытия = МаксимальнаяДатаСтрокой();	
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДвиженияРегистра.ПериодВозвратногоСобытия", ТекстЗаменыПериодВозвратногоСобытия);
	МассивУсловияСоединения = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивУсловияСоединения.Добавить(РазделительСоединения);
		МассивУсловияСоединения.Добавить("ДвиженияРегистра."); 
		МассивУсловияСоединения.Добавить(Измерение);
		МассивУсловияСоединения.Добавить(" = ИзмеренияДаты.");
		МассивУсловияСоединения.Добавить(ИзмерениеФильтра);
		
	КонецЦикла;
	
	Если МассивУсловияСоединения.Количество() > 0 Тогда
		МассивУсловияСоединения.Удалить(0);
	КонецЕсли;
	ТекстУсловияСоединения = СтрСоединить(МассивУсловияСоединения);
	
	МассивОписанияПолей = Новый Массив;
	МассивПолейГруппировки = Новый Массив;
	МассивСоединенияДвижений = Новый Массив;
	
	МассивОписанияПолей.Добавить("ДвиженияРегистра.ПериодЗаписи КАК ПериодЗаписи,
		|	ДвиженияРегистра.Регистратор КАК Регистратор");
		
	МассивПолейГруппировки.Добавить("ДвиженияРегистра.ПериодЗаписи,
		|	ДвиженияРегистра.Регистратор");
		
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДвиженияРегистра.ЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие");
		МассивПолейГруппировки.Добавить(Разделитель);
		МассивПолейГруппировки.Добавить("ДвиженияРегистра.ЭтоВозвратноеСобытие");
		
	КонецЕсли;
	
	Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		Если Измерение = "ДатаОкончания"
			ИЛИ Измерение = "ДатаНачала"
			ИЛИ Измерение = "Год" Тогда
		
			Продолжить;
		КонецЕсли;
		
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДвиженияРегистра.");
		МассивОписанияПолей.Добавить(Измерение);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Измерение);
		
		МассивПолейГруппировки.Добавить(Разделитель);
		МассивПолейГруппировки.Добавить("ДвиженияРегистра.");
		МассивПолейГруппировки.Добавить(Измерение);
		
		Если Измерение = "ПериодЗаписи" Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивСоединенияДвижений.Добавить(РазделительСоединения);
		МассивСоединенияДвижений.Добавить("ДвиженияРегистра.");
		МассивСоединенияДвижений.Добавить(Измерение);
		МассивСоединенияДвижений.Добавить(" = СледующиеИнтервалы.");
		МассивСоединенияДвижений.Добавить(Измерение);
		
	КонецЦикла;
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
	
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДвиженияРегистра.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
		
		МассивПолейГруппировки.Добавить(Разделитель);
		МассивПолейГруппировки.Добавить("ДвиженияРегистра.");
		МассивПолейГруппировки.Добавить(Ресурс);
		
	КонецЦикла;
	
	Для каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
	
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДвиженияРегистра.");
		МассивОписанияПолей.Добавить(Ресурс);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Ресурс);
		
		МассивПолейГруппировки.Добавить(Разделитель);
		МассивПолейГруппировки.Добавить("ДвиженияРегистра.");
		МассивПолейГруппировки.Добавить(Ресурс);
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
	
		МассивОписанияПолей.Добавить(Разделитель);
		МассивОписанияПолей.Добавить("ДвиженияРегистра.");
		МассивОписанияПолей.Добавить(Реквизит);
		МассивОписанияПолей.Добавить(" КАК ");
		МассивОписанияПолей.Добавить(Реквизит);
		
		МассивПолейГруппировки.Добавить(Разделитель);
		МассивПолейГруппировки.Добавить("ДвиженияРегистра.");
		МассивПолейГруппировки.Добавить(Реквизит);
		
	КонецЦикла;
	
	Если МассивСоединенияДвижений.Количество() > 0 Тогда
		МассивСоединенияДвижений.Удалить(0);
	КонецЕсли;
	
	ТекстОписанияПолей = СтрСоединить(МассивОписанияПолей);
	ТекстПолейГруппировки = СтрСоединить(МассивПолейГруппировки);
	ТекстСоединенияДвижений = СтрСоединить(МассивСоединенияДвижений);
	
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ДобавитьПостоянныеПоля(ТекстПолейГруппировки, Запрос, ПараметрыПостроения, Истина);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстПолейГруппировки", ТекстПолейГруппировки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаОкончания", ПредставлениеИзмеренияДатыДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмерениеФильтраДатаНачала", ИзмерениеФильтраДатаНачала);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДвиженияРегистра.Измерение_ = СледующиеИнтервалы.Измерение_", ТекстСоединенияДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДвиженияРегистра.Измерение_ = ИзмеренияДаты.Измерение_", ТекстУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ОписаниеФильтра.ТаблицаФильтра);
	КонецЕсли; 
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТДвиженияРегистра);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТМаксимальныеОкончанияПериодов");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТПериодыСреза.
//
// Параметры:
//		ИмяРегистра 		- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 	- Булево
//		ОписаниеФильтра 	- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения - Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		СрезПоследних		- Булево, если Истина - срез последних, если Ложь - Срез первых.
//		ИмяВТПериодыСреза 	- Строка
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТПериодыСреза(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяВТПериодыСреза = Неопределено)

	Запрос = Новый Запрос;
	МассивСтрок = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 

	ИзмерениеФильтраПериод = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		Если Не ЗначениеЗаполнено(ОписаниеФильтра.ИзмеренияФильтра) Тогда
			
			МассивИзмерений = Новый Массив;
			Для Каждого Колонка Из ОписаниеФильтра.ТаблицаФильтра.Колонки Цикл
				МассивИзмерений.Добавить(Колонка.Имя);		
			КонецЦикла;	
			
		Иначе
			
			Если ТипЗнч(ОписаниеФильтра.ИзмеренияФильтра) = Тип("Строка") Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеФильтра.ИзмеренияФильтра, , , Истина);
			Иначе
				МассивИзмерений = ОписаниеФильтра.ИзмеренияФильтра;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИмяВТИзмеренияДаты = ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения);
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИзмеренияДаты.";
		МассивСтрок.Добавить(ТекстЗапроса);
		МассивСтрок.Добавить(ИзмерениеФильтраПериод);
			
		Для Каждого Измерение Из МассивИзмерений Цикл
			
			Если ВРег(Измерение) = ВРег(ИзмерениеФильтраПериод) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("ИзмеренияДаты.");
			МассивСтрок.Добавить(Измерение);
				
		КонецЦикла;
		
		ТекстЗапроса = "
			|ПОМЕСТИТЬ #ИмяВТИзмеренияДаты
			|ИЗ
			|	&ИзмеренияДаты КАК ИзмеренияДаты";
		
		ИмяПараметраИзмеренияДаты = УникальноеИмяПараметраЗапроса(ИмяВТИзмеренияДаты);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзмеренияДаты", "&" + ИмяПараметраИзмеренияДаты);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТИзмеренияДаты", ИмяВТИзмеренияДаты);
		МассивСтрок.Добавить(ТекстЗапроса);
		МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		МассивСтрок.Добавить(Символы.ПС);
		
		Запрос.УстановитьПараметр(ИмяПараметраИзмеренияДаты, ОписаниеФильтра.ТаблицаФильтра);
		
		ОписаниеФильтра.ВременнаяТаблица = Истина;
		ОписаниеФильтра.ТаблицаФильтра = ИмяВТИзмеренияДаты;
		ОписаниеФильтра.ИзмеренияФильтра = МассивИзмерений;
		
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);

	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
	Если ФормироватьСПериодичностьДень Тогда
		
		Если СрезПоследних Тогда
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "КОНЕЦПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		Иначе
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "НАЧАЛОПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		КонецЕсли;
		
	Иначе
		ПредставлениеУсловияИзмеренияДатыПериод = "ИзмеренияДаты." + ИзмерениеФильтраПериод;	
		ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "МаксимальныеПериоды.ЗаданныйПериод";
	КонецЕсли;
	
	МассивУсловийСКД = Новый Массив;
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	ЗаданныйПериод";        
	МассивУсловийСКД.Добавить(ТекстУсловийСКД);	
	
	МассивСтрок.Добавить("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзмеренияДаты.");
	МассивСтрок.Добавить(ИзмерениеФильтраПериод);
	МассивСтрок.Добавить(" КАК ЗаданныйПериод");
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("ИзмеренияДаты.");
			МассивСтрок.Добавить(ИзмерениеФильтра);
			
		Иначе
				
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("РегистрСведений.");
			МассивСтрок.Добавить(Измерение);
							
		КонецЕсли;
		
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Измерение);
				
		МассивУсловийСКД.Добавить(Разделитель);
		МассивУсловийСКД.Добавить(Измерение);
			
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	ДобавитьОписаниеПолейФильтра(ТекстЗапроса, ОписаниеФильтра);
	МассивСтрок.Очистить();
	МассивСтрок.Добавить(ТекстЗапроса);
	МассивУсловийСКД.Добавить("}");
	
	Если СрезПоследних Тогда
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("МАКСИМУМ(РегистрСведений.Период) КАК Период");
		
		ТекстЗапроса = " 
			|ПОМЕСТИТЬ #ИмяВТПериодыСреза
			|#ТекстУсловийСКД
			|ИЗ
			|	#ТаблицаФильтра КАК ИзмеренияДаты
			|		{#ТипСоединения СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
			|		ПО (ВЫБОР КОГДА РегистрСведений.Период <= #ПредставлениеУсловияИзмеренияДатыПериод ТОГДА ИСТИНА КОГДА ИзмеренияДаты.#ИзмерениеФильтраПериод = ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ)";
			
		Если Не ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"<=","<");
		КонецЕсли;
		
	Иначе
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("МИНИМУМ(РегистрСведений.Период) КАК Период");
		
		ТекстЗапроса = "
			|ПОМЕСТИТЬ #ИмяВТПериодыСреза
			|#ТекстУсловийСКД
			|ИЗ
			|	#ТаблицаФильтра КАК ИзмеренияДаты
			|		{#ТипСоединения СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
			|		ПО (РегистрСведений.Период >= #ПредставлениеУсловияИзмеренияДатыПериод)";
			
		Если Не ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,">=",">");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		ТекстУсловийСКД = СтрСоединить(МассивУсловийСКД);
	Иначе
		ТекстУсловийСКД = "";
	КонецЕсли; 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловийСКД", ТекстУсловийСКД);
	ТипСоединения = ?(ПараметрыПостроения.ВсеЗаписи, "ЛЕВОЕ", "ВНУТРЕННЕЕ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТипСоединения", ТипСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТПериодыСреза", ИмяВТПериодыСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПредставлениеУсловияИзмеренияДатыПериод", ПредставлениеУсловияИзмеренияДатыПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмерениеФильтраПериод", ИзмерениеФильтраПериод);
	МассивСтрок.Добавить(ТекстЗапроса);
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивСтрок.Добавить("
			|			И (РегистрСведений.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(" = ИзмеренияДаты.");
		МассивСтрок.Добавить(ИзмерениеФильтра);
		МассивСтрок.Добавить(")");
			
	КонецЦикла;
	
	Если ПараметрыПостроения.Отборы <> Неопределено И ПараметрыПостроения.Отборы.Количество() > 0 Тогда
		
		СчПараметров = 1;
		
		ТекстОтбор = "";
		МассивОтбора = Новый Массив;
		
		Для Каждого СтруктураОтбора Из ПараметрыПостроения.Отборы Цикл
				
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				
				ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяВТПериодыСреза, СчПараметров);
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
			Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
				
				ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				МассивОтбора.Добавить(?(МассивОтбора.Количество() = 0, "	И (", Символы.ПС + "	И "));
				МассивОтбора.Добавить("(");
				МассивОтбора.Добавить(ПредставленияЛевогоЗначение);
				МассивОтбора.Добавить(" ");
				МассивОтбора.Добавить(СтруктураОтбора.ВидСравнения);
				МассивОтбора.Добавить(" (");
				МассивОтбора.Добавить(ОписаниеПараметра);
				МассивОтбора.Добавить("))");
				
			Иначе
					
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
				МассивОтбора.Добавить(?(МассивОтбора.Количество() = 0, "	И (", Символы.ПС + "	И ")); 
				МассивОтбора.Добавить("(");
				МассивОтбора.Добавить(ПредставленияЛевогоЗначение);
				МассивОтбора.Добавить(" ");
				МассивОтбора.Добавить(СтруктураОтбора.ВидСравнения);
				МассивОтбора.Добавить(" ");
				МассивОтбора.Добавить(ОписаниеПараметра);
				МассивОтбора.Добавить(")");
				
			КонецЕсли;
			
		КонецЦикла;	
		
		МассивОтбора.Добавить(")");
		ТекстОтбор = СтрСоединить(МассивОтбора);
		МассивСтрок.Добавить(ТекстОтбор);
		
	КонецЕсли;
	
	МассивСтрок.Добавить("}");
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
			
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(ТекстОтбораСКД);

		КонецЕсли; 
			
	КонецЕсли;
	
	МассивСтрок.Добавить("
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмеренияДаты.");
	МассивСтрок.Добавить(ИзмерениеФильтраПериод);
		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("ИзмеренияДаты.");
			МассивСтрок.Добавить(ИзмерениеФильтра);
				
		Иначе
				
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("РегистрСведений.");
			МассивСтрок.Добавить(Измерение);
				
		КонецЕсли;
			
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	ДобавитьОписаниеПолейФильтра(ТекстЗапроса, ОписаниеФильтра, Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ЗапросВТТаблицаСреза.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ИмяВТПериодыСреза 		- Строка
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		СрезПоследних			- Булево, если Истина - срез последних, если Ложь - Срез первых.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТТаблицаСреза(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ИмяВТПериодыСреза, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	Запрос = Новый Запрос;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	МассивСтрок = Новый Массив;
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 
	
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + ?(СрезПоследних,"СрезПоследних","СрезПервых");
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	
	ИзмерениеФильтраПериод = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	
	ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
	Если ФормироватьСПериодичностьДень Тогда
		
		Если СрезПоследних Тогда
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыПостроения.ВключаяГраницу Тогда
				ПредставлениеУсловияИзмеренияДатыПериод = "НАЧАЛОПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			Иначе
				ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(ИзмеренияДаты." + ИзмерениеФильтраПериод + ", ДЕНЬ)";	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "КОНЕЦПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		Иначе
			ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "НАЧАЛОПЕРИОДА(МаксимальныеПериоды.ЗаданныйПериод, ДЕНЬ)";
		КонецЕсли;
		
	Иначе
		ПредставлениеУсловияИзмеренияДатыПериод = "ИзмеренияДаты." + ИзмерениеФильтраПериод;	
		ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод = "МаксимальныеПериоды.ЗаданныйПериод";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи";
		
	МассивСтрок.Добавить(ТекстЗапроса);
	Если ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 И СрезПоследних Тогда
		
		ТекстЗапроса = ",
			|	ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ РегистрСведений.ДействуетДо >= #ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод И МаксимальныеПериоды.ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Ложь
			|		ИНАЧЕ Истина
			|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
			|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод", ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод);
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,">=",">");
		КонецЕсли;
		МассивСтрок.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	Период,
		|	ПериодЗаписи";
		
	МассивУсловийСКД = Новый Массив;
	МассивУсловийСКД.Добавить(ТекстУсловийСКД);
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		МассивСтрок.Добавить(",
			|	МаксимальныеПериоды.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Измерение);
		
		МассивУсловийСКД.Добавить(Разделитель);
		МассивУсловийСКД.Добавить(Измерение);
		
	КонецЦикла;
	
	ТекстУсловийСКД = СтрСоединить(МассивУсловийСКД);
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	ДобавитьОписаниеПолейФильтра(ТекстЗапроса, ОписаниеФильтра);
	ЗаменитьПредставленияПолей(ТекстЗапроса, ПараметрыПостроения, ТекстУсловийСКД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИзмеренияДаты.", "МаксимальныеПериоды.");
	МассивСтрок.Очистить();
	МассивСтрок.Добавить(ТекстЗапроса);
	МассивУсловийСКД = Новый Массив;
	МассивУсловийСКД.Добавить(ТекстУсловийСКД);
	Если СрезПоследних Тогда
		
		МассивЗапросаПолей = Новый Массив;

		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			ТекстЗапросаПолей = ",
				|	ВЫБОР
				|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
				|				ИЛИ РегистрСведений.ДействуетДо >= #ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод И МаксимальныеПериоды.ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА РегистрСведений.#Ресурс
				|		ИНАЧЕ РегистрСведений.#РесурсПоОкончании
				|	КОНЕЦ КАК #Ресурс";
				
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "#ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод", ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод);
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "#Ресурс", Ресурс);
			МассивЗапросаПолей.Добавить(ТекстЗапросаПолей);
			
			МассивУсловийСКД.Добавить(Разделитель);
			МассивУсловийСКД.Добавить(Ресурс)
		
		КонецЦикла;
		
		ТекстЗапросаПолей = СтрСоединить(МассивЗапросаПолей);
		Если ПараметрыПостроения.ВключаяГраницу Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей,">=",">");
		КонецЕсли;
		
		МассивСтрок.Добавить(ТекстЗапросаПолей);
		
	Иначе
		
		Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			МассивСтрок.Добавить(",
				|	РегистрСведений.");
			МассивСтрок.Добавить(Ресурс);
			МассивСтрок.Добавить(" КАК ");
			МассивСтрок.Добавить(Ресурс);
			
			МассивСтрок.Добавить(",
				|	РегистрСведений.");
			МассивСтрок.Добавить(Ресурс);
			МассивСтрок.Добавить("ПоОкончании КАК ");
			МассивСтрок.Добавить(Ресурс);
			МассивСтрок.Добавить("ПоОкончании");
			
			МассивУсловийСКД.Добавить(Разделитель);
			МассивУсловийСКД.Добавить(Ресурс);
			МассивУсловийСКД.Добавить(Разделитель);
			МассивУсловийСКД.Добавить(Ресурс);
			МассивУсловийСКД.Добавить("ПоОкончании");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		
		МассивСтрок.Добавить(",
			|	РегистрСведений.");
		МассивСтрок.Добавить(Ресурс);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Ресурс);
		
		МассивУсловийСКД.Добавить(Разделитель);
		МассивУсловийСКД.Добавить(Ресурс);
		
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		
		МассивСтрок.Добавить(",
			|	РегистрСведений.");
		МассивСтрок.Добавить(Реквизит);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Реквизит);
		
		МассивУсловийСКД.Добавить(Разделитель);
		МассивУсловийСКД.Добавить(Реквизит);
		
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		
		МассивСтрок.Добавить(",
			|	РегистрСведений.");
		МассивСтрок.Добавить(СтандартныйРеквизит);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(СтандартныйРеквизит);
		
		МассивУсловийСКД.Добавить(Разделитель);
		МассивУсловийСКД.Добавить(СтандартныйРеквизит);
		
	КонецЦикла;
	
	ТекстПостоянныеПоля = "";
	ДобавитьПостоянныеПоля(ТекстПостоянныеПоля, Запрос, ПараметрыПостроения);
	МассивСтрок.Добавить(ТекстПостоянныеПоля);
	МассивУсловийСКД.Добавить("}");
	ТекстУсловийСКД = СтрСоединить(МассивУсловийСКД);
	
	МассивСтрок.Добавить("
		|ПОМЕСТИТЬ ВТПредставленияИмяРегистраСрез
		|	");
	МассивСтрок.Добавить(?(ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД, ТекстУсловийСКД , ""));
	ТекстЗапроса = "
		|ИЗ
		|	#ИмяВТПериодыСреза КАК МаксимальныеПериоды
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТПериодыСреза", ИмяВТПериодыСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	
	МассивСтрок.Добавить(ТекстЗапроса);
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		МассивСтрок.Добавить("
			|			И (РегистрСведений.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(" = МаксимальныеПериоды.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(")");
		
	КонецЦикла;
	
	МассивСтрок.Добавить("}");
	
	Если ПараметрыПостроения.ОтборыПрименяемыеКСрезу <> Неопределено И ПараметрыПостроения.ОтборыПрименяемыеКСрезу.Количество() > 0 Тогда
		
		СчПараметров = 1;
		ДобавитьСоединениеИ = Ложь;
		ТекстУсловийПрименяемыхКСрезу = "";
		МассивУсловийПрименяемыхКСрезу = Новый Массив;
		РазделительУсловий = Символы.ПС + Символы.Таб + "И";
		
		Для Каждого СтруктураОтбора Из ПараметрыПостроения.ОтборыПрименяемыеКСрезу Цикл
			
			Если ТипЗнч(СтруктураОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				ОписаниеПараметра = СтруктураОтбора.ПравоеЗначение;
			Иначе
				
				ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяСоздаваемойТаблицы, СчПараметров);
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, СтруктураОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
			Если ДобавитьСоединениеИ Тогда
				МассивУсловийПрименяемыхКСрезу.Добавить(РазделительУсловий);
			Иначе
				ДобавитьСоединениеИ = Истина;
			КонецЕсли;
			
			Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
				
				Если ОписаниеРегистра.ВозвратныеРесурсыДляПоиска.Найти(ВРег(СтруктураОтбора.ЛевоеЗначение)) <> Неопределено Тогда
					
					ПредставленияЛевогоЗначение =
						"	ВЫБОР
						|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
						|				ИЛИ РегистрСведений.ДействуетДо >= #ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод И МаксимальныеПериоды.ЗаданныйПериод <> ДАТАВРЕМЯ(1, 1, 1)
						|			ТОГДА РегистрСведений.#ЛевоеЗначение
						|		ИНАЧЕ РегистрСведений.#ЛевоеЗначениеПоОкончании
						|	КОНЕЦ";
					ПредставленияЛевогоЗначение = СтрЗаменить(ПредставленияЛевогоЗначение, "#ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод", ПредставлениеУсловияМаксимальныеПериодыЗаданныйПериод);
					ПредставленияЛевогоЗначение = СтрЗаменить(ПредставленияЛевогоЗначение, "#ЛевоеЗначение", СтруктураОтбора.ЛевоеЗначение);
					
				Иначе
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				КонецЕсли;
				
				МассивУсловийПрименяемыхКСрезу.Добавить("(");
				МассивУсловийПрименяемыхКСрезу.Добавить(ПредставленияЛевогоЗначение);
				МассивУсловийПрименяемыхКСрезу.Добавить(" ");
				МассивУсловийПрименяемыхКСрезу.Добавить(СтруктураОтбора.ВидСравнения);
				МассивУсловийПрименяемыхКСрезу.Добавить(" (");
				МассивУсловийПрименяемыхКСрезу.Добавить(ОписаниеПараметра);
				МассивУсловийПрименяемыхКСрезу.Добавить("))");
				
			Иначе
				
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
				МассивУсловийПрименяемыхКСрезу.Добавить("(");
				МассивУсловийПрименяемыхКСрезу.Добавить(ПредставленияЛевогоЗначение);
				МассивУсловийПрименяемыхКСрезу.Добавить(" ");
				МассивУсловийПрименяемыхКСрезу.Добавить(СтруктураОтбора.ВидСравнения);
				МассивУсловийПрименяемыхКСрезу.Добавить(" ");
				МассивУсловийПрименяемыхКСрезу.Добавить(ОписаниеПараметра);
				МассивУсловийПрименяемыхКСрезу.Добавить(")");
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстУсловийПрименяемыхКСрезу = СтрСоединить(МассивУсловийПрименяемыхКСрезу);
		Если Не ПустаяСтрока(ТекстУсловийПрименяемыхКСрезу) Тогда
			
			МассивСтрок.Добавить("
				|ГДЕ
				|	");
			
			МассивСтрок.Добавить(ТекстУсловийПрименяемыхКСрезу);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивСтрок);
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПредставленияИмяРегистраСрез", ИмяСоздаваемойТаблицы);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТПериодыСреза);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраСрез. Получение среза по интервальному регистру сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИнтервалыСрез(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	ТекстУсловияСоединения 	= "";
	ТекстОтбораСКД 			= "";
	ИсключающийРегистратор 	= Неопределено;
	СчПараметров 			= 1;
	Запрос = Новый Запрос;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
	|#ТекстУсловийСКД 
	|ИЗ
	|	#ТаблицаФильтра КАК ИзмеренияДаты
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяИнтервальногоРегистра КАК РегистрСведений 
	|		ПО (РегистрСведений.ДатаНачала <= #ДатаСреза
	|			И РегистрСведений.ДатаОкончания >= #ДатаСреза)
	|			#ТекстУсловияСоединения}
	|		#СоединениеСПрерваннымИнтервалом
	|#ТекстУсловияОтбора
	|#ТекстОтбораСКД"; 
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + "СрезПоследних";
	КонецЕсли;
	
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ", "ЛЕВОЕ СОЕДИНЕНИЕ");
	КонецЕсли; 
	
	ЕстьИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;
	
	ИзмерениеФильтраПериод = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	ФормироватьСПериодичностьДень 	= ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ВключаяГраницу					= ПараметрыПостроения.ВключаяГраницу;
	ВременнаяТаблица 				= ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяИнтервальногоРегистра, ПараметрыПостроения));
		ТекстЗапроса = ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраПериод) + ТекстЗапроса;
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяИнтервальногоРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ПредставлениеИзмеренияДатыПериод = "ВЫБОР 
										|КОГДА ИзмеренияДаты.#ИзмерениеФильтраПериод = ДАТАВРЕМЯ(1, 1, 1) 
										|	ТОГДА &МаксимальнаяДата
										|ИНАЧЕ 
										|	ИзмеренияДаты.#ИзмерениеФильтраПериод
										|КОНЕЦ";
										
	ПредставлениеИзмеренияДатыПериод = СтрЗаменить(ПредставлениеИзмеренияДатыПериод, "#ИзмерениеФильтраПериод", ИзмерениеФильтраПериод);
	
	Если ФормироватьСПериодичностьДень Тогда
		
		Если ВключаяГраницу Тогда
			ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(" + ПредставлениеИзмеренияДатыПериод + ", ДЕНЬ)";
		Иначе
			ПредставлениеУсловияИзмеренияДатыПериод = "ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ПредставлениеИзмеренияДатыПериод + ", ДЕНЬ),СЕКУНДА,-1)";
		КонецЕсли; 
		
	Иначе
		
		Если ВключаяГраницу Тогда
			ПредставлениеУсловияИзмеренияДатыПериод = ПредставлениеИзмеренияДатыПериод;                                    
		Иначе
			ПредставлениеУсловияИзмеренияДатыПериод = "ДОБАВИТЬКДАТЕ(" + ПредставлениеИзмеренияДатыПериод + ",СЕКУНДА, -1)";
		КонецЕсли; 
	
	КонецЕсли; 									
	
	ТекстУсловийСКД = "{ВЫБРАТЬ
		|	Период,
		|	ПериодВозвратногоСобытия,
		|	Регистратор";
	
	ТекстОписанияПолей = "ИзмеренияДаты." + ИзмерениеФильтраПериод + " КАК Период,
		|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
		|	ВЫБОР
		|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
		|	РегистрСведений.РегистраторСобытия КАК Регистратор";
		
	ДобавитьОписаниеПолейФильтра(ТекстОписанияПолей, ОписаниеФильтра);
	ДобавитьОписаниеПолейСреза(ОписаниеРегистра, ОписаниеФильтра, ТекстОписанияПолей, ТекстУсловийСКД, ПараметрыПостроения);
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения, ТекстУсловийСКД);
	
	МассивУсловияСоединения = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивУсловияСоединения.Добавить("И (РегистрСведений.");
		МассивУсловияСоединения.Добавить(Измерение);
		МассивУсловияСоединения.Добавить(" = ИзмеренияДаты.");
		МассивУсловияСоединения.Добавить(ИзмерениеФильтра);
		МассивУсловияСоединения.Добавить(")" + Символы.ПС);
			
	КонецЦикла;
	
	ТекстОтбораУсловияСоединения = ТекстОтобраИмяРегистра(ИмяИнтервальногоРегистра, ПараметрыПостроения.Отборы, Запрос, СчПараметров, ЕстьИсключаемыеРегистраторы, ИсключающийРегистратор);
	МассивУсловияСоединения.Добавить(ТекстОтбораУсловияСоединения);
	ТекстУсловияСоединения = СтрСоединить(МассивУсловияСоединения);
	МассивУсловияОтбора = Новый Массив;
	ТекстУсловияОтбора = ТекстОтобраИмяРегистра(ИмяИнтервальногоРегистра, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, Запрос, СчПараметров);
	МассивУсловияОтбора.Добавить(ТекстУсловияОтбора);
	
	Если Не ПараметрыПостроения.ВсеЗаписи 
		И ИсключающийРегистратор <> Неопределено Тогда
		
		МассивУсловияОтбора.Добавить("	И НЕ (РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
									|		И РегистрСведений.РегистраторЗаписи В (");
		МассивУсловияОтбора.Добавить(ИсключающийРегистратор);
		МассивУсловияОтбора.Добавить("))");
		
	КонецЕсли;
	
	Если МассивУсловияОтбора.Количество() > 0 Тогда
		МассивУсловияОтбора.Вставить(0, "ГДЕ
										|	ИСТИНА");
		МассивУсловияОтбора.Вставить(1, Символы.ПС);
		ТекстУсловияОтбора = СтрСоединить(МассивУсловияОтбора); 
	КонецЕсли; 
		
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			
			ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Измерение];
			Если ПсевдонимПоля <> Неопределено Тогда
				МассивСтрокОтбораСКД.Добавить(" КАК ");
				МассивСтрокОтбораСКД.Добавить(ПсевдонимПоля);
			КонецЕсли;
			
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяИнтервальногоРегистра", 	ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", 			ОписаниеФильтра.ТаблицаФильтра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаСреза", 					ПредставлениеУсловияИзмеренияДатыПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", 		ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловийСКД", 			ТекстУсловийСКД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединения", 	ТекстУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияОтбора", 		ТекстУсловияОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСКД", 			ТекстОтбораСКД);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	ДобавитьУсловиеПоИсключающемуРегистратору(ТекстЗапроса, ИсключающийРегистратор, ОписаниеРегистра, ИмяИнтервальногоРегистра);
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ОписаниеФильтра.ИмяВТИзмеренияДаты);	
	КонецЕсли;
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
		
КонецФункции

// Возвращает запрос представления ВТИмяРегистраСрез. 
// Получение среза по первичным данным интервального регистра сведений.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТСрезПервичныйРегистр(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	ТекстИзмеренияФильтра 				= "";
	ТекстИзмеренияРегистра 				= "";
	ТекстГруппировки 					= "";
	ТекстУсловияСоединенияПересечения 	= "";
	ТекстОписанияПолей 					= "";
	ТекстУсловийСКД						= "";
	ТекстОтбораСоединения				= "";
	ТекстОтбораСреза 					= "";
	СчПараметров = 1;
	Запрос = Новый Запрос;
	ИсключающийРегистратор = Неопределено;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	#ТекстИзмеренияРегистра
	|ПОМЕСТИТЬ #ИмяВТРегистрСведений
	|ИЗ
	|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФильтра КАК ИзмеренияДаты
	|		ПО РегистрСведений.Период <= #ДатаСреза
	|			#ТекстУсловияСоединенияИзмеренияДаты
	|			#ТекстОтбораСоединения  
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.Период < РегистрСведенийПересечения.Период
	|				И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	#ТекстИзмеренияРегистра
	|ПОМЕСТИТЬ #ИмяВТПересечения
	|ИЗ
	|	#ИмяВТРегистрСведений КАК РегистрСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ИмяВТРегистрСведений КАК РегистрСведенийПересечения
	|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
	|			И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			#ТекстУсловияСоединенияПересечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмеренияДаты.#ИзмерениеФильтраПериод КАК ЗаданныйПериод,
	|	#ТекстИзмеренияФильтра,
	|	МАКСИМУМ(РегистрСведений.Период) КАК МаксимальныйПериодИзмерения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА #ПредставлениеУсловияИзмеренияДаты <= РегистрСведений.ДействуетДо
	|				ТОГДА РегистрСведений.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК МаксимальныйПериодРесурсы
	|ПОМЕСТИТЬ #ИмяВТМаксимальныеПериоды
	|ИЗ
	|	#ТаблицаФильтра КАК ИзмеренияДаты	
	|		#ТипСоединения #ИмяВТПересечения КАК РегистрСведений
	|		ПО #ПредставлениеУсловияИзмеренияДаты >= РегистрСведений.Период
	|			#ТекстУсловияСоединенияИзмеренияДаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмеренияДаты.#ИзмерениеФильтраПериод, 
	|	#ТекстГруппировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмеренияДаты.ЗаданныйПериод КАК Период,
	|	РегистрСведенийИзмерения.Период КАК ПериодЗаписи,
	|	ВЫБОР
	|		КОГДА ИзмеренияДаты.МаксимальныйПериодИзмерения = ИзмеренияДаты.МаксимальныйПериодРесурсы
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведенийИзмерения.ДействуетДо КАК ПериодВозвратногоСобытия, 
	|	РегистрСведенийИзмерения.Регистратор КАК Регистратор,
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы 
	|#ТекстУсловийСКД 
	|ИЗ
	|	#ИмяВТМаксимальныеПериоды КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведенийИзмерения
	|		ПО ИзмеренияДаты.МаксимальныйПериодИзмерения = РегистрСведенийИзмерения.Период
	|			#ТекстУсловияСоединенияИзмеренияРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведенийРесурсы
	|		ПО ИзмеренияДаты.МаксимальныйПериодРесурсы = РегистрСведенийРесурсы.Период
	|			#ТекстУсловияСоединенияРесурсы
	|ГДЕ
	|	ИСТИНА
	|	#ТекстОтбораСреза
	|#ТекстОтбораСКД";
	
	ИмяВТРегистрСведений = "ВТРегистрСведений";
	ИмяВТМаксимальныеПериоды = "ВТМаксимальныеПериоды";
	ИмяВТПересечения = "ВТПересеченияРегистров";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТРегистрСведений", ИмяВТРегистрСведений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТМаксимальныеПериоды", ИмяВТМаксимальныеПериоды);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТПересечения", ИмяВТПересечения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра); 
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 

	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра + "СрезПоследних";
	КонецЕсли;
		
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТипСоединения", "ЛЕВОЕ СОЕДИНЕНИЕ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТипСоединения", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
	КонецЕсли; 
	
	ИзмерениеФильтраПериод = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("Период");
	Если ИзмерениеФильтраПериод = Неопределено Тогда
		ИзмерениеФильтраПериод = "Период";
	КонецЕсли;
	
	ФормироватьСПериодичностьДень 	= ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ВключаяГраницу					= ПараметрыПостроения.ВключаяГраницу;
	ВременнаяТаблица 				= ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
		ТекстЗапроса = ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраПериод) + ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра);
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмерениеФильтраПериод", ИзмерениеФильтраПериод);
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведенийИзмерения.ДействуетДо", "&МаксимальнаяДата");
		ТекстЗамены = "ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ РегистрСведений.ДействуетДо
			|	КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
	КонецЕсли;
	
	МассивУсловияСоединенияИзмеренияДаты = Новый Массив;
	МассивУсловияСоединенияПересечения = Новый Массив;
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
		
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивУсловияСоединенияИзмеренияДаты.Добавить("			И (РегистрСведений.");
		МассивУсловияСоединенияИзмеренияДаты.Добавить(Измерение);
		МассивУсловияСоединенияИзмеренияДаты.Добавить(" = ИзмеренияДаты.");
		МассивУсловияСоединенияИзмеренияДаты.Добавить(ИзмерениеФильтра);
		МассивУсловияСоединенияИзмеренияДаты.Добавить(")" + Символы.ПС);
			
	КонецЦикла;
	
	ТекстУсловияСоединенияИзмеренияДаты = СтрСоединить(МассивУсловияСоединенияИзмеренияДаты);
	
	МассивСтрокИзмеренияФильтра = Новый Массив;
	МассивСтрокГруппировки = Новый Массив;
	МассивСтрокИзмеренияРегистра = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			МассивСтрокИзмеренияФильтра.Добавить("ИзмеренияДаты.");
			МассивСтрокИзмеренияФильтра.Добавить(ИзмерениеФильтра);
			МассивСтрокИзмеренияФильтра.Добавить(" КАК ");
			МассивСтрокИзмеренияФильтра.Добавить(Измерение);
			МассивСтрокИзмеренияФильтра.Добавить(Разделитель);
			
			МассивСтрокГруппировки.Добавить("ИзмеренияДаты.");
			МассивСтрокГруппировки.Добавить(ИзмерениеФильтра);
			МассивСтрокГруппировки.Добавить(Разделитель);	
				
		Иначе
				
			МассивСтрокИзмеренияФильтра.Добавить("РегистрСведений.");
			МассивСтрокИзмеренияФильтра.Добавить(Измерение);
			МассивСтрокИзмеренияФильтра.Добавить(" КАК ");
			МассивСтрокИзмеренияФильтра.Добавить(Измерение);
			МассивСтрокИзмеренияФильтра.Добавить(Разделитель);
			
			МассивСтрокГруппировки.Добавить("РегистрСведений.");
			МассивСтрокГруппировки.Добавить(Измерение);
			МассивСтрокГруппировки.Добавить(Разделитель);
				
		КонецЕсли;
			
		МассивСтрокИзмеренияРегистра.Добавить("РегистрСведений.");
		МассивСтрокИзмеренияРегистра.Добавить(Измерение);
		МассивСтрокИзмеренияРегистра.Добавить(" КАК ");
		МассивСтрокИзмеренияРегистра.Добавить(Измерение);
		МассивСтрокИзмеренияРегистра.Добавить(Разделитель);
		
		МассивУсловияСоединенияПересечения.Добавить("			И (РегистрСведений.");
		МассивУсловияСоединенияПересечения.Добавить(Измерение);
		МассивУсловияСоединенияПересечения.Добавить(" = РегистрСведенийПересечения.");
		МассивУсловияСоединенияПересечения.Добавить(Измерение);
		МассивУсловияСоединенияПересечения.Добавить(")" + Символы.ПС);
		
	КонецЦикла;
	
	Если МассивСтрокИзмеренияФильтра.Количество() > 0 Тогда
		МассивСтрокИзмеренияФильтра.Удалить(МассивСтрокИзмеренияФильтра.Количество() - 1);
	КонецЕсли; 
	
	Если МассивСтрокГруппировки.Количество() > 0 Тогда
		МассивСтрокГруппировки.Удалить(МассивСтрокГруппировки.Количество() - 1);
	КонецЕсли;
	
	Если МассивСтрокИзмеренияРегистра.Количество() > 0 Тогда
		МассивСтрокИзмеренияРегистра.Удалить(МассивСтрокИзмеренияРегистра.Количество() - 1);
	КонецЕсли;
	
	ТекстУсловияСоединенияПересечения = СтрСоединить(МассивУсловияСоединенияПересечения);
	ТекстУсловияСоединенияИзмеренияРегистра = СтрЗаменить(ТекстУсловияСоединенияПересечения, "РегистрСведенийПересечения.", "РегистрСведенийИзмерения.");
	ТекстУсловияСоединенияРесурсы = СтрЗаменить(ТекстУсловияСоединенияПересечения, "РегистрСведенийПересечения.", "РегистрСведенийРесурсы.");
	ТекстУсловияСоединенияИзмеренияРегистра = СтрЗаменить(ТекстУсловияСоединенияИзмеренияРегистра, "РегистрСведений.", "ИзмеренияДаты.");
	ТекстУсловияСоединенияРесурсы = СтрЗаменить(ТекстУсловияСоединенияРесурсы, "РегистрСведений.", "ИзмеренияДаты.");
	
	ТекстИзмеренияРегистра = СтрСоединить(МассивСтрокИзмеренияРегистра);
	ТекстИзмеренияФильтра = СтрСоединить(МассивСтрокИзмеренияФильтра);
	ДобавитьОписаниеПолейФильтра(ТекстИзмеренияФильтра, ОписаниеФильтра);
	ТекстГруппировки = СтрСоединить(МассивСтрокГруппировки);
	ДобавитьОписаниеПолейФильтра(ТекстГруппировки, ОписаниеФильтра, Ложь);
	
	ПредставлениеИзмеренияДатыПериод = "ВЫБОР 
										|КОГДА ИзмеренияДаты.#ИзмерениеФильтраПериод = ДАТАВРЕМЯ(1, 1, 1) 
										|	ТОГДА &МаксимальнаяДата
										|ИНАЧЕ 
										|	ИзмеренияДаты.#ИзмерениеФильтраПериод
										|КОНЕЦ";
										
	ПредставлениеИзмеренияДатыПериод = СтрЗаменить(ПредставлениеИзмеренияДатыПериод, "#ИзмерениеФильтраПериод", ИзмерениеФильтраПериод);
										
	Если ФормироватьСПериодичностьДень Тогда
		
		Если ВключаяГраницу Тогда
			ПредставлениеУсловияИзмеренияДатыПериод = "КОНЕЦПЕРИОДА(" + ПредставлениеИзмеренияДатыПериод + ", ДЕНЬ)";
		Иначе
			ПредставлениеУсловияИзмеренияДатыПериод = "ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(" + ПредставлениеИзмеренияДатыПериод + ", ДЕНЬ), СЕКУНДА, -1)";
		КонецЕсли; 
		
	Иначе
		
		Если ВключаяГраницу Тогда
			ПредставлениеУсловияИзмеренияДатыПериод = ПредставлениеИзмеренияДатыПериод;                                    
		Иначе
			ПредставлениеУсловияИзмеренияДатыПериод = "ДОБАВИТЬКДАТЕ(" + ПредставлениеИзмеренияДатыПериод + ",СЕКУНДА, -1)";
		КонецЕсли; 
	
	КонецЕсли; 									
	
	ТекстУсловийСКД = 
		"{ВЫБРАТЬ
		|	Период,
		|	ПериодЗаписи"; 
	ДобавитьОписаниеПолейСреза(ОписаниеРегистра, ОписаниеФильтра, ТекстОписанияПолей, ТекстУсловийСКД, ПараметрыПостроения);
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений." + Измерение, "РегистрСведенийИзмерения." + Измерение);
	КонецЦикла;
	ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений.Регистратор", "РегистрСведенийИзмерения.Регистратор");
	ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений.", "РегистрСведенийРесурсы.");
	ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "КАК Регистратор", "КАК РегистраторЗаписи");
	ТекстОписанияПолей = Сред(ТекстОписанияПолей, 4);
	ДобавитьОписаниеПолейФильтра(ТекстОписанияПолей, ОписаниеФильтра);
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения, ТекстУсловийСКД);
	
	ТекстОтбораСоединения = ТекстОтобраИмяРегистра(ИмяРегистра, ПараметрыПостроения.Отборы, Запрос, СчПараметров);
	ТекстОтбораСоединения = СтрЗаменить(ТекстОтбораСоединения, ".РегистраторЗаписи", ".Регистратор");
	ТекстОтбораСреза = ТекстОтобраИмяРегистра(ИмяРегистра, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, Запрос, СчПараметров);
	ТекстОтбораСреза = СтрЗаменить(ТекстОтбораСреза, "РегистрСведений.", "РегистрСведенийРесурсы.");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПредставлениеУсловияИзмеренияДаты", ПредставлениеУсловияИзмеренияДатыПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаСреза", ПредставлениеУсловияИзмеренияДатыПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстИзмеренияРегистра", ТекстИзмеренияРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстИзмеренияФильтра", ТекстИзмеренияФильтра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстГруппировки", ТекстГруппировки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединенияИзмеренияДаты", ТекстУсловияСоединенияИзмеренияДаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединенияИзмеренияРегистра", ТекстУсловияСоединенияИзмеренияРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединенияРесурсы", ТекстУсловияСоединенияРесурсы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединенияПересечения", ТекстУсловияСоединенияПересечения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПредставлениеФильтраПериод", "ИзмеренияДаты." + ИзмерениеФильтраПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмеренияМаксимальныеПериоды", СтрЗаменить(ТекстИзмеренияФильтра, "ИзмеренияДаты", "МаксимальныеПериоды"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСоединения", ТекстОтбораСоединения);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСреза", ТекстОтбораСреза);
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведенийИзмерения.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловийСКД", ТекстУсловийСКД);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСКД", ТекстОтбораСКД);
	
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ОписаниеФильтра.ИмяВТИзмеренияДаты);	
	КонецЕсли;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТМаксимальныеПериоды);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТПересечения);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТРегистрСведений);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистра. 
// Получение движений при условии на исключение нескольких регистраторов.
//
// Параметры:
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ТолькоРазрешенные 		- Булево
//		ОписаниеФильтра 		- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДвиженияПервичныйРегистр(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	
	СчПараметров 			= 1;
	ТекстУсловияСоединения 	= "";
	ТекстОписанияПолей 		= "";
	ТекстОтбораСКД 			= "";
	ТекстНачальныеЗаписи 	= "";
	Запрос = Новый Запрос;
	МассивСтрок	= Новый Массив;
	
	ТекстЗапросНаНачалоПериода = 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаНачала
		|	#ТекстИзмеренийТаблицыФильтра
		|ИЗ
		|	#ТаблицаФильтра КАК ИзмеренияДаты
		|
		|ГДЕ
		|	ИзмеренияДаты.#ИзмерениеФильтраДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РегистрСведений.ДействуетДо КАК #ИзмерениеФильтраДатаНачала
		|	#ТекстИзмеренийФильтраРегистра
		|ПОМЕСТИТЬ #ИмяТаблицыФильтраСреза 
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаФильтра КАК ИзмеренияДаты
		|		ПО РегистрСведений.ДействуетДо >= #ДатаНачала
		|			И РегистрСведений.ДействуетДо <= #ДатаОкончания
		|			#ТекстУсловияСоединения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведенийПересечения
		|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
		|			И РегистрСведений.ДействуетДо >= РегистрСведенийПересечения.Период
		|			#ТекстСоединенияПересечения 
		|
		|ГДЕ
		|	РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|	И РегистрСведенийПересечения.Период ЕСТЬ NULL
		|
		|#ТекстЗапросНаНачалоПериода
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|#ТекстВТСрез 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	#ТекстОписанияПолейДвижений
		|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
		|ИЗ
		|	#ТаблицаФильтра КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ПО РегистрСведений.Период >= #ДатаНачала
		|			И РегистрСведений.Период <= #ДатаОкончания
		|			#ТекстУсловияСоединения 
		|ГДЕ
		|	ИСТИНА
		|	#ТекстУсловияОтбораДвижений
		|#ТекстОтбораСКД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	#ТекстОписанияПолейСреза
		|ИЗ
		|	#ИмяТаблицыСрезПоследних КАК РегистрСведений
		|
		|ГДЕ
		|	РегистрСведений.ПериодЗаписи >= РегистрСведений.Период
		|	ИЛИ (РегистрСведений.ПериодЗаписи < РегистрСведений.Период
		|	#ТекстОтбораНачалоПериода)
		|
		|#ТекстПериодичностьДень";
		
	ТекстПериодичностьДень = 
		";
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегистрСведений.ПериодЗаписи) КАК МаксимальныйПериод,
		|	РегистрСведений.Период КАК Период,
		|	#ТекстИзмеренийРегистра
		|ПОМЕСТИТЬ МаксимальныеПериоды
		|ИЗ
		|	ВТДвиженияРегистра КАК РегистрСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведений.Период,
		|	#ТекстГруппировкиИзмеренийРегистра
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведений.Период КАК Период,
		|	РегистрСведений.ПериодЗаписи КАК ПериодЗаписи,
		|	РегистрСведений.ПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
		|	РегистрСведений.ЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
		|	РегистрСведений.Регистратор КАК Регистратор,
		|	#ТекстПолейСоздаваемойТаблицы
		|ПОМЕСТИТЬ ВТИмяСоздаваемойТаблицы
		|ИЗ
		|	ВТДвиженияРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеПериоды КАК МаксимальныеПериоды
		|		ПО РегистрСведений.ПериодЗаписи = МаксимальныеПериоды.МаксимальныйПериод
		|			#ТекстСоединенияМаксимальныеПериоды";
			
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 

	ЗаменитьПредставленияПолей(ТекстПериодичностьДень, ПараметрыПостроения);
	
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ИмяСоздаваемойТаблицы = "ВТ" + ИмяРегистра;
	КонецЕсли; 
		
	ИзмерениеФильтраДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если ИзмерениеФильтраДатаНачала = Неопределено Тогда
		ИзмерениеФильтраДатаНачала = "ДатаНачала";
	КонецЕсли;
	
	ИзмерениеФильтраДатаОкончания = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаОкончания");
	Если ИзмерениеФильтраДатаОкончания = Неопределено Тогда
		ИзмерениеФильтраДатаОкончания = "ДатаОкончания";
	КонецЕсли;
	
	ВременнаяТаблица = ОписаниеФильтра.ВременнаяТаблица;
	Если Не ВременнаяТаблица Тогда
		
		ОписаниеФильтра.Вставить("ИмяВТИзмеренияДаты", ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
		МассивСтрок.Добавить(ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраДатаНачала, ИзмерениеФильтраДатаОкончания));
			
	КонецЕсли;
	
	ОписаниеРегистра 					= ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень 		= ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ВключатьЗаписиНаНачалоПериода 		= ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода;
	ПредставлениеИзмеренияДатаНачала 	= "ИзмеренияДаты." + ИзмерениеФильтраДатаНачала;
	ПредставлениеИзмеренияДатаОкончания = "ВЫБОР КОГДА ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
											|	ТОГДА &МаксимальнаяДата
											|ИНАЧЕ
											|	ИзмеренияДаты.#ИзмерениеФильтраДатаОкончания
											|КОНЕЦ"; 
	ПредставлениеИзмеренияДатаОкончания = СтрЗаменить(ПредставлениеИзмеренияДатаОкончания, "#ИзмерениеФильтраДатаОкончания", ИзмерениеФильтраДатаОкончания);
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ДействуетДо" , "ДАТАВРЕМЯ(1, 1, 1)");	
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросНаНачалоПериода", ТекстЗапросНаНачалоПериода);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстЗапросНаНачалоПериода", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораНачалоПериода", "");
	КонецЕсли; 											
											
	Если ФормироватьСПериодичностьДень Тогда
		
		ПредставлениеРегистрСведенийПериод 				= "НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ)";
		ПредставлениеПериодичности 						= "ДЕНЬ";
		ПредставлениеУсловияИзмеренияДатыДатаНачала 	= "НАЧАЛОПЕРИОДА(" + ПредставлениеИзмеренияДатаНачала + ", ДЕНЬ)";
		ПредставлениеУсловияИзмеренияДатыДатаОкончания 	= "КОНЕЦПЕРИОДА("+ ПредставлениеИзмеренияДатаОкончания + ", ДЕНЬ)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", "ВТДвиженияРегистра");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстПериодичностьДень", ТекстПериодичностьДень);
		
	Иначе
		
		ПредставлениеРегистрСведенийПериод 				= "РегистрСведений.Период";
		ПредставлениеПериодичности 						= "СЕКУНДА";
		ПредставлениеУсловияИзмеренияДатыДатаНачала 	= ПредставлениеИзмеренияДатаНачала;
		ПредставлениеУсловияИзмеренияДатыДатаОкончания 	= ПредставлениеИзмеренияДатаОкончания;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстПериодичностьДень", "");
		
	КонецЕсли;
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
	
		ПредставлениеУсловияИзмеренияДатыДатаНачала = "ДОБАВИТЬКДАТЕ(" 
			+ ПредставлениеУсловияИзмеренияДатыДатаНачала + "," 
			+ ПредставлениеПериодичности + ",1)";
	
	КонецЕсли;  
	
	ТекстОписанияПолей = "";
	ЗаполнитьПоляРегистраПоОписанию(ОписаниеРегистра, ТекстОписанияПолей);
	ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения);
	
	МассивОписанияПолейДвижений = Новый Массив;
	МассивОписанияПолейДвижений.Добавить(ПредставлениеРегистрСведенийПериод);
	МассивОписанияПолейДвижений.Добавить(" КАК Период,
		|	РегистрСведений.Период КАК ПериодЗаписи,
		|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
		|	ЛОЖЬ КАК ЭтоВозвратноеСобытие,
		|	РегистрСведений.Регистратор КАК Регистратор,
		|");
	МассивОписанияПолейДвижений.Добавить(ТекстОписанияПолей);
	ТекстОписанияПолейДвижений = СтрСоединить(МассивОписанияПолейДвижений);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстОписанияПолейДвижений = СтрЗаменить(ТекстОписанияПолейДвижений, "РегистрСведений.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");	
	КонецЕсли;
	
	Если ФормироватьСПериодичностьДень Тогда
		ТекстПолейСоздаваемойТаблицы = ТекстОписанияПолей;
		ЗаменитьПредставленияПолей(ТекстПолейСоздаваемойТаблицы, ПараметрыПостроения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстПолейСоздаваемойТаблицы", ТекстПолейСоздаваемойТаблицы);
	Иначе
		ЗаменитьПредставленияПолей(ТекстОписанияПолейДвижений, ПараметрыПостроения);
	КонецЕсли;
	
	ТекстИзмеренийТаблицыФильтра = "";
	ТекстИзмеренийФильтраРегистра = "";
	ТекстИзмеренийРегистра = "";
	ТекстГруппировкиИзмеренийРегистра = "";
	МассивСтрокИзмеренийФильтра = Новый Массив;
	МассивСтрокИзмеренийФильтраРегистра = Новый Массив;
	МассивСтрокИзмеренийРегистра = Новый Массив;
	МассивСтрокГруппировкиИзмеренийРегистра = Новый Массив;
	МассивСтрокУсловияСоединения = Новый Массив;
	МассивСтрокСоединенияПересечения = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб; 
	
	Для Каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			
		ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
		Если ИзмерениеФильтра = Неопределено Тогда
			ИзмерениеФильтра = Измерение;
		КонецЕсли;
		
		МассивСтрокИзмеренийФильтраРегистра.Добавить(Разделитель);
		МассивСтрокИзмеренийФильтраРегистра.Добавить("РегистрСведений.");
		МассивСтрокИзмеренийФильтраРегистра.Добавить(Измерение);
		МассивСтрокИзмеренийФильтраРегистра.Добавить(" КАК ");
		МассивСтрокИзмеренийФильтраРегистра.Добавить(ИзмерениеФильтра);
		
		МассивСтрокИзмеренийФильтра.Добавить(Разделитель);
		МассивСтрокИзмеренийФильтра.Добавить("ИзмеренияДаты.");
		МассивСтрокИзмеренийФильтра.Добавить(ИзмерениеФильтра);
		
		МассивСтрокУсловияСоединения.Добавить(Символы.ПС);
		МассивСтрокУсловияСоединения.Добавить("			И (ИзмеренияДаты.");
		МассивСтрокУсловияСоединения.Добавить(ИзмерениеФильтра);
		МассивСтрокУсловияСоединения.Добавить(" = РегистрСведений.");
		МассивСтрокУсловияСоединения.Добавить(Измерение);
		МассивСтрокУсловияСоединения.Добавить(")");
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		МассивСтрокИзмеренийРегистра.Добавить(Разделитель);
		МассивСтрокИзмеренийРегистра.Добавить("РегистрСведений.");
		МассивСтрокИзмеренийРегистра.Добавить(Измерение);
		МассивСтрокИзмеренийРегистра.Добавить(" КАК ");
		МассивСтрокИзмеренийРегистра.Добавить(Измерение);
		
		МассивСтрокГруппировкиИзмеренийРегистра.Добавить(Разделитель);
		МассивСтрокГруппировкиИзмеренийРегистра.Добавить("РегистрСведений.");
		МассивСтрокГруппировкиИзмеренийРегистра.Добавить(Измерение);
		
		МассивСтрокСоединенияПересечения.Добавить(Символы.ПС);
		МассивСтрокСоединенияПересечения.Добавить("			И (РегистрСведений.");
		МассивСтрокСоединенияПересечения.Добавить(Измерение);
		МассивСтрокСоединенияПересечения.Добавить(" = РегистрСведенийПересечения.");
		МассивСтрокСоединенияПересечения.Добавить(Измерение);
		МассивСтрокСоединенияПересечения.Добавить(")");
		
	КонецЦикла;
		
	Если ОписаниеРегистра.Измерения.Количество() > 0 Тогда
		МассивСтрокИзмеренийРегистра.Удалить(0);
		МассивСтрокГруппировкиИзмеренийРегистра.Удалить(0);
	КонецЕсли; 
	
	ТекстИзмеренийФильтраРегистра = СтрСоединить(МассивСтрокИзмеренийФильтраРегистра);
	ТекстИзмеренийРегистра = СтрСоединить(МассивСтрокИзмеренийРегистра);
	ТекстГруппировкиИзмеренийРегистра = СтрСоединить(МассивСтрокГруппировкиИзмеренийРегистра);
	ТекстИзмеренийТаблицыФильтра = СтрСоединить(МассивСтрокИзмеренийФильтра);
	ТекстУсловияСоединения = СтрСоединить(МассивСтрокУсловияСоединения);
	ТекстСоединенияПересечения = СтрСоединить(МассивСтрокСоединенияПересечения);
	ТекстСоединенияМаксимальныеПериоды = СтрЗаменить(ТекстСоединенияПересечения, "РегистрСведенийПересечения", "МаксимальныеПериоды");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстИзмеренийРегистра", ТекстИзмеренийРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстИзмеренийФильтраРегистра", ТекстИзмеренийФильтраРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстИзмеренийТаблицыФильтра", ТекстИзмеренийТаблицыФильтра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстГруппировкиИзмеренийРегистра", ТекстГруппировкиИзмеренийРегистра);
	ТекстУсловияОтбораДвижений = ТекстОтобраИмяРегистра(ИмяРегистра, ПараметрыПостроения.Отборы, Запрос, СчПараметров);
	ТекстУсловияОтбораДвижений = СтрЗаменить(ТекстУсловияОтбораДвижений, "РегистраторЗаписи", "Регистратор");
	
	Если ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД Тогда
		
		МассивСтрокОтбораСКД = Новый Массив;
		МассивСтрокОтбораСКД.Добавить("{ГДЕ" + Символы.ПС);
		
		Для каждого Измерение Из ОписаниеРегистра.ИзмеренияФильтра Цикл
			МассивСтрокОтбораСКД.Добавить("РегистрСведений.");
			МассивСтрокОтбораСКД.Добавить(Измерение);
			МассивСтрокОтбораСКД.Добавить(".*");
			МассивСтрокОтбораСКД.Добавить(Разделитель);
		КонецЦикла;
		
		Если МассивСтрокОтбораСКД.Количество() > 1 Тогда
		
			МассивСтрокОтбораСКД.Удалить(МассивСтрокОтбораСКД.Количество() - 1);
			МассивСтрокОтбораСКД.Добавить("}");
			ТекстОтбораСКД = СтрСоединить(МассивСтрокОтбораСКД);
		
		КонецЕсли; 
			
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаФильтра", ОписаниеФильтра.ТаблицаФильтра); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаНачала", ПредставлениеУсловияИзмеренияДатыДатаНачала); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДатаОкончания", ПредставлениеУсловияИзмеренияДатыДатаОкончания);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейДвижений", ТекстОписанияПолейДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияСоединения", ТекстУсловияСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстСоединенияПересечения", ТекстСоединенияПересечения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстСоединенияМаксимальныеПериоды", ТекстСоединенияМаксимальныеПериоды);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстУсловияОтбораДвижений", ТекстУсловияОтбораДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораСКД", ТекстОтбораСКД); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИзмерениеФильтраДатаНачала", ИзмерениеФильтраДатаНачала); 
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	ИмяСоздаваемойТаблицыСрезПоследних = "ВТСрезПоследнихИВозвратныеСобытия";
	ИмяТаблицыФильтраСреза = "ВТОтборСреза";
	ТекстВТСрез = ТекстЗапросаСрезаДляДвижений(ИмяРегистра, ИмяТаблицыФильтраСреза, ОписаниеФильтра, ПараметрыПостроения, ОписаниеРегистра, Запрос, ИмяСоздаваемойТаблицыСрезПоследних);  
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстВТСрез", ТекстВТСрез); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыСрезПоследних", ИмяСоздаваемойТаблицыСрезПоследних);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыФильтраСреза", ИмяТаблицыФильтраСреза);
	ТекстОписанияПолейСреза = "РегистрСведений.Период,
		|	РегистрСведений.ПериодЗаписи,
		|	РегистрСведений.ПериодВозвратногоСобытия,
		|	РегистрСведений.ЭтоВозвратноеСобытие,
		|	РегистрСведений.Регистратор,
		|";
	МассивСтрокПолейСреза = Новый Массив;
	МассивСтрокПолейСреза.Добавить(ТекстОписанияПолейСреза);
	МассивСтрокПолейСреза.Добавить(ТекстОписанияПолей);
	ТекстОписанияПолейСреза = СтрСоединить(МассивСтрокПолейСреза);
	ПреобразоватьВидСобытия(ОписаниеРегистра, ТекстОписанияПолейСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейСреза", ТекстОписанияПолейСреза);
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ТекстОтбораНачалоПериода = ТекстОтобраИмяРегистра(ИмяРегистра, ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, Запрос, СчПараметров);
		ТекстОтбораНачалоПериода = СтрЗаменить(ТекстОтбораНачалоПериода, "РегистраторЗаписи", "Регистратор");
		ПреобразоватьВидСобытия(ОписаниеРегистра, ТекстОтбораНачалоПериода);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОтбораНачалоПериода", ТекстОтбораНачалоПериода);
	КонецЕсли;
	
	ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПараметрыПостроения.ИндексироватьПо);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Если Не ВременнаяТаблица Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения));
	КонецЕсли;
	Если ФормироватьСПериодичностьДень Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТДвиженияРегистра");
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "МаксимальныеПериоды");
	КонецЕсли;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяСоздаваемойТаблицыСрезПоследних);	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяТаблицыФильтраСреза);
	
	МассивСтрок.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивСтрок);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	
	Возврат Запрос;
	
КонецФункции

Процедура ПреобразоватьВидСобытия(ОписаниеРегистра, ТекстЗапроса)
	
	Если ОписаниеРегистра.Ресурсы.Найти("ВидСобытия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗамены = 
		"ВЫБОР
		|		КОГДА РегистрСведений.ЭтоВозвратноеСобытие
		|			И РегистрСведений.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
		|		ИНАЧЕ РегистрСведений.ВидСобытия
		|	КОНЕЦ";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ВидСобытия", ТекстЗамены);
	
КонецПроцедуры

Процедура ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы)
	ЗарплатаКадрыПериодическиеРегистрыВнутренний.ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);	
КонецПроцедуры	

Процедура ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы)
	ЗарплатаКадрыПериодическиеРегистрыВнутренний.ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);	
КонецПроцедуры	

Процедура СоздатьВТРегистраторыДляОбновления(ИмяРегистра, МенеджерВременныхТаблиц, ИзмеренияОтбора, НаборЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновлятьУвольнение", Истина);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведений.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыДляОбновления
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтбора КАК ТаблицаОтбора
		|		ПО РегистрСведений.ИзмеренияОтбора_ = ТаблицаОтбора.ИзмеренияОтбора_
		|ГДЕ
		|	РегистрСведений.Регистратор <> &Регистратор
		|	И РегистрСведений.ВидСобытия = &ВидСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаОтбора";
		
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	МассивСтрокСоединения = Новый Массив;
	Разделитель = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокСоединения.Добавить(Разделитель);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = ТаблицаОтбора.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла; 
	МассивСтрокСоединения.Удалить(0);
	ТекстСоединения = СтрСоединить(МассивСтрокСоединения);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_ = ТаблицаОтбора.ИзмеренияОтбора_", ТекстСоединения);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	Если Выборка.Количество = 0 Тогда
		
		НаборЗаписей.ДополнительныеСвойства.ОбновлятьУвольнение = Ложь;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТРегистраторыДляОбновления";
		Запрос.Выполнить();
	
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущиеДанныеРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстПолейРегистра)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источник.Измерение_ КАК Измерение_
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	ВТИнтервалы КАК Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
		|	РегистрСведений.ДатаНачала КАК ДатаНачала,
		|	РегистрСведений.ПериодЗаписи КАК ПериодЗаписи,
		|	РегистрСведений.РегистраторЗаписи КАК РегистраторЗаписи,
		|	РегистрСведений.РегистраторСобытия КАК РегистраторСобытия,
		|	РегистрСведений.Год КАК Год,
		|	РегистрСведений.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	РегистрСведений.ПустойИнтервал КАК ПустойИнтервал,
		|	РегистрСведений.ДействуетДо КАК ДействуетДо,
		|	РегистрСведений.Поля_
		|ИЗ
		|	РегистрСведений_ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
		|		ПО РегистрСведений.Измерение_ = Отбор.Измерение_
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведений.Измерение_,
		|	Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтбор";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Измерение_", ИзмерениеЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.Поля_", ТекстПолейРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений_ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ДанныеРегистра = Результат.Выгрузить();
	ДанныеРегистра.Индексы.Добавить(ИзмерениеЗаписи+",Год");
	Возврат ДанныеРегистра;
	
КонецФункции

Функция НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, Год)

	НаборЗаписей = РассчитанныеПериоды.Получить(Год);
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		РассчитанныеПериоды.Вставить(Год, НаборЗаписей);
	КонецЕсли;
	
	Возврат НаборЗаписей;

КонецФункции 

Процедура ОбновитьРесурсыИнтервальногоРегистра(Знач ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ОписаниеИнтервальногоРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПервичныйРегистр.Измерения_ КАК Измерения_
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|			И (ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_)
		|
		|;
		|//////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_,
		|	ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|УПОРЯДОЧИТЬ ПО
		|	ИнтервальныйРегистр.ИзмеренияПорядок_";
	
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединение = Символы.ПС + "			И ";
	МассивИзмеренияПервичногоРегистра = Новый Массив;
	МассивПолейИнтервальногоРегистра = Новый Массив;
	МассивПолейПервичногоРегистра = Новый Массив;
    МассивИзмеренияСоединение = Новый Массив;
	МассивРесурсыСоединение = Новый Массив;
	МассивИзмеренияПорядок = Новый Массив;
	ЗначенияИзмерений = Новый Структура;
	
	Для каждого Измерение Из ОписаниеИнтервальногоРегистра.Измерения Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		
		Если ОписаниеРегистра.Измерения.Найти(Измерение) <> Неопределено Тогда
			
			ЗначенияИзмерений.Вставить(Измерение);
			
			МассивИзмеренияПервичногоРегистра.Добавить(Разделитель);
			МассивИзмеренияПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			МассивИзмеренияПервичногоРегистра.Добавить(" КАК ");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			
			МассивИзмеренияСоединение.Добавить(РазделительСоединение);
			МассивИзмеренияСоединение.Добавить("ПервичныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			МассивИзмеренияСоединение.Добавить(" = ИнтервальныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			
			МассивИзмеренияПорядок.Добавить(Разделитель);
			МассивИзмеренияПорядок.Добавить("ИнтервальныйРегистр.");
			МассивИзмеренияПорядок.Добавить(Измерение);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	РазделительСоединение = Символы.ПС + "				ИЛИ ";
	Для каждого Ресурс Из ОписаниеИнтервальногоРегистра.Ресурсы Цикл
		
		Если ОписаниеРегистра.Ресурсы.Найти(Ресурс) <> Неопределено Тогда
			
			МассивПолейПервичногоРегистра.Добавить(Разделитель);
			МассивПолейПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			МассивПолейПервичногоРегистра.Добавить(" КАК ");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			
			МассивРесурсыСоединение.Добавить(РазделительСоединение);
			МассивРесурсыСоединение.Добавить("ПервичныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			МассивРесурсыСоединение.Добавить(" <> ИнтервальныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			
		Иначе
			
			МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
			МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОписаниеИнтервальногоРегистра.Реквизиты Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		
	КонецЦикла;
	
	МассивПолейИнтервальногоРегистра.Удалить(0);
	МассивИзмеренияСоединение.Удалить(0);
	МассивПолейПервичногоРегистра.Удалить(0);
	МассивРесурсыСоединение.Удалить(0);
	МассивИзмеренияПорядок.Удалить(0);
	МассивИзмеренияПервичногоРегистра.Удалить(0);
	
	ТекстИзмеренияПервичногоРегистра = СтрСоединить(МассивИзмеренияПервичногоРегистра);
	ТекстПолейИнтервальногоРегистра = СтрСоединить(МассивПолейИнтервальногоРегистра);
	ТекстПолейПервичногоРегистра = СтрСоединить(МассивПолейПервичногоРегистра);
	ТекстИзмеренияСоединение = СтрСоединить(МассивИзмеренияСоединение);
	ТекстРесурсыСоединение = СтрСоединить(МассивРесурсыСоединение);
	ТекстСоединенияВТСотрудники = СтрЗаменить(ТекстИзмеренияСоединение, "ИнтервальныйРегистр.", "ВТСотрудники.");
	ТекстИзмеренияПорядок = СтрСоединить(МассивИзмеренияПорядок);
	
	ТекстЗаменыИзмеренияПервичногоРегистра = 
		"ПервичныйРегистр.Измерения_ КАК Измерения_";
		
	ТекстЗаменыПолейИнтервальногоРегистра = 
		"ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_";
		
	ТекстЗаменыПолейПервичногоРегистра = 
		"ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_";
		
	ТекстЗаменыСоединенияВТСотрудники = 
		"ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыИзмеренияСоединение = 
		"ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыРесурсыСоединение = 
		"ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_";
		
	ТекстЗаменыИзмеренияПорядок = 
		"ИнтервальныйРегистр.ИзмеренияПорядок_";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныйРегистр_", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИнтервальныйРегистр_", "РегистрСведений." + ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПервичногоРегистра, ТекстИзмеренияПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейИнтервальногоРегистра, ТекстПолейИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыСоединенияВТСотрудники, ТекстСоединенияВТСотрудники);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейПервичногоРегистра, ТекстПолейПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияСоединение, ТекстИзмеренияСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыРесурсыСоединение, ТекстРесурсыСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПорядок, ТекстИзмеренияПорядок);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИзмеренияЗаполнены 
			И ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
		
			УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		
		КонецЕсли; 
		
		ИзмеренияЗаполнены = Истина;
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда 
		
		УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияИзмеренийОтличны(ЗначенияИзмерений, ОбъектСравнения)
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
	
		Если КлючИЗначение.Значение <> ОбъектСравнения[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений)
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Значение = КлючИЗначение.Значение;
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиВозвратныйРегистрВИнтервальныйРегистрСведений(ИмяРегистра, ПараметрыПостроения, ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСведений.ИзмеренияОтбора_
		|ПОМЕСТИТЬ ВТОтборДляПереформирования
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведенийИнтервальный
		|		ПО РегистрСведений.ИзмеренияОтбора_ = РегистрСведенийИнтервальный.ИзмеренияОтбора_
		|ГДЕ
		|	РегистрСведенийИнтервальный.ДатаНачала ЕСТЬ NULL
		|;
		|///////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтборДляПереформирования.*
		|ИЗ
		|	ВТОтборДляПереформирования КАК ОтборДляПереформирования";
	
	Если ПараметрыПостроения.ИзмеренияРасчета <> Неопределено Тогда
		ИзмеренияОтбора = ПараметрыПостроения.ИзмеренияРасчета;
	Иначе
		ИзмеренияОтбора = ПараметрыПостроения.ОсновноеИзмерение;
	КонецЕсли;
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	МассивСтрокИзмерений = Новый Массив;
	МассивСтрокСоединения = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединения = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(Разделитель);
		МассивСтрокИзмерений.Добавить("РегистрСведений.");
		МассивСтрокИзмерений.Добавить(Измерение);
		
		МассивСтрокСоединения.Добавить(РазделительСоединения);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = РегистрСведенийИнтервальный.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла;
	
	МассивСтрокИзмерений.Удалить(0);
	МассивСтрокСоединения.Удалить(0);
	ТекстИзмеренияОтбора = СтрСоединить(МассивСтрокИзмерений);
	ТекстСоединения = СтрСоединить(МассивСтрокСоединения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_ = РегистрСведенийИнтервальный.ИзмеренияОтбора_", ТекстСоединения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмеренияОтбора_", ТекстИзмеренияОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	КонецЕсли;
	ПараметрыПостроения.Вставить("ПолноеПереформирование", Истина);
	ПараметрыПостроения.Вставить("РежимЗагрузки", Истина);
	СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, Запрос.МенеджерВременныхТаблиц, ПараметрыПостроения, ПараметрыОбновления);

КонецПроцедуры

// Определяет ограничение использования интервального регистра сведений
//	и необходимость использовать первичный регистр.
//
// Параметры:
//		ПараметрыПостроения - Структура, см.ПараметрыПостроенияПредставленияВТТаблицаРегистра
//		ИмяРегистра - Имя проверяемого регистра
//		ЭтоСрез - Булево, если Истина - Срез; Ложь - Движения.
//
// Возвращаемое значение:
//		Булево
Функция ИспользоватьПервичныйРегистр(ПараметрыПостроения, ИмяРегистра, ЭтоСрез = Ложь, ДопустимоеЧислоИсключаемыхРегистраторов = 1)
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.Отборы = Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли; 
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	ИсключаемыеРегистраторы = Новый Массив;
	Для каждого Отбор Из ПараметрыПостроения.Отборы Цикл                    
	
		Если ЭтоСрез
			И МетаданныеРегистра.Ресурсы.Найти(Отбор.ЛевоеЗначение) <> Неопределено 
			И ВРег(Отбор.ЛевоеЗначение) <> ВРег("ЭтоГоловнойСотрудник") Тогда
			
			Возврат Истина;
		КонецЕсли; 
		
		Если ВРег(Отбор.ЛевоеЗначение) = ВРег("Регистратор")  
			И (Отбор.ВидСравнения = "<>" 
			ИЛИ ВРег(Отбор.ВидСравнения) = "НЕ В") Тогда
			
			Если ТипЗнч(Отбор.ПравоеЗначение) = Тип("Массив") Тогда
		
				Для каждого ЭлементОтбора Из Отбор.ПравоеЗначение Цикл	
					
					Если Не ЭлементОтбора.Пустая() Тогда
						ИсключаемыеРегистраторы.Добавить(ЭлементОтбора);
					КонецЕсли; 
					
				КонецЦикла;
	
			Иначе
				ИсключаемыеРегистраторы.Добавить(Отбор.ПравоеЗначение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

	Если ИсключаемыеРегистраторы.Количество() > 0 Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.Регистратор) КАК Регистратор
			|ИЗ
			|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
			|ГДЕ
			|	РегистрСведений.Регистратор В(&Регистраторы)
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.Регистратор) > 0";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
		Запрос.УстановитьПараметр("Регистраторы", ИсключаемыеРегистраторы);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Истина);
			Если Выборка.Регистратор > ДопустимоеЧислоИсключаемыхРегистраторов Тогда
				Возврат Истина;
			КонецЕсли; 
			
		Иначе
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Ложь);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьВТСтарыйНаборЗаписей(НаборЗаписей, МенеджерВременныхТаблиц, ИмяВТРезультат = "ВТСтарыйНаборЗаписей") Экспорт
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТСтарыйНаборЗаписей 
		|ИЗ
		|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
		|ГДЕ
		|	РегистрСведений.Регистратор = &Регистратор";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтарыйНаборЗаписей", ИмяВТРезультат);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Результат = Запрос.Выполнить();
	
	СтарыеЗаписи = Результат.Выбрать();
	СтарыеЗаписи.Следующий();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовыйНабор", СтарыеЗаписи.Количество = 0);
	
КонецПроцедуры

Функция Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	УдалятьВТИнтервалы = МассивИзмерений.Количество() = 1;
	МассивСтрокИзмерений = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(Разделитель);
		МассивСтрокИзмерений.Добавить("ВТИнтервалы.");
		МассивСтрокИзмерений.Добавить(Измерение);
	
	КонецЦикла;
	МассивСтрокИзмерений.Удалить(0);
	ТекстИзмерений = СтрСоединить(МассивСтрокИзмерений);
	
	Если ПолноеПереформирование Тогда
		ТекстЗапроса = ЗапросВТИнтервалыПоПервичномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	Иначе
		ТекстЗапроса = ЗапросВТИнтервалыПоИнтервальномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	КонецЕсли; 
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекстЗапроса);
	МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()); 
	ТекстПолейВТИнтервалы = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТИнтервалы");
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаНачала КАК ДатаСобытия,
		|	ВТИнтервалы.ПериодЗаписи КАК ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи КАК РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия КАК РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ИСТИНА КАК ЭтоНачалоИнтервала,
		|	#ТекстОписанияПолей 
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|ГДЕ
		|	НЕ ВТИнтервалы.ДатаНачала ЕСТЬ NULL
		|	И ВТИнтервалы.ДатаОкончания >= ВТИнтервалы.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ЛОЖЬ,
		|	#ТекстОписанияПолей
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТИнтервалы.ИзмеренияОтбора_,
		|	ДатаСобытия,
		|	ПериодЗаписи";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстПолейВТИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИнтервалы.ИзмеренияОтбора_", ТекстИзмерений);
	МассивСтрок.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивСтрок);
	Если УдалятьВТИнтервалы Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТИнтервалы");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МаксимальнаяДата", МаксимальнаяДатаСтрокой());
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Процедура ЗаполнитьПоляРегистраПоОписанию(Знач ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра = "")
	
	МассивСтрокОписанияПолей = Новый Массив;
	МассивСтрокОписанияПолей.Добавить(ТекстОписанияПолей);
	Разделитель = "," + Символы.ПС + Символы.Таб;
	МассивСтрокПолейРегистра = Новый Массив;
	МассивСтрокПолейРегистра.Добавить(ПоляРегистра);
	Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
	
		Если Измерение = "ДатаОкончания"
			Или Измерение = "ДатаНачала"
			Или Измерение = "ПериодЗаписи" 
			Или Измерение = "Год" Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Измерение);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Измерение);
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Измерение);
	
	КонецЦикла; 
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
	
		Если Ресурс = "ПериодПредыдущейЗаписи" 
			Или Ресурс = "ДействуетДо" Тогда
			
			Продолжить;
		КонецЕсли; 
		
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Ресурс);
	
	КонецЦикла; 
	
	Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		
		Если Реквизит = "ПустойИнтервал" 
			Или Реквизит = "РегистраторЗаписи" 
			Или Реквизит = "РегистраторСобытия" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Реквизит);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Реквизит);
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Реквизит);
		
	КонецЦикла;
	
	Если МассивСтрокОписанияПолей.Количество() > 0 Тогда
		МассивСтрокОписанияПолей.Удалить(МассивСтрокОписанияПолей.Количество() - 1);
	КонецЕсли; 

	ТекстОписанияПолей = СтрСоединить(МассивСтрокОписанияПолей);
	ПоляРегистра = СтрСоединить(МассивСтрокПолейРегистра);
	
КонецПроцедуры

Процедура ПроверитьИзменениеТекущегоГода(ИмяРегистра, ТекущаяДата, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование)
	
	Если Не ПолноеПереформирование
		И ТекущийГод < НачалоГода(ТекущаяДата) Тогда
		
		ТекущийГод = НачалоГода(ТекущаяДата);
		НаборЗаписей = НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, ТекущийГод);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьИнтервал(Вставка, Источник, ДатаНачала, ЕстьВставка)

	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Вставка, Источник, , "ПериодПредыдущейЗаписи");
	
	Если ДатаНачала <> Источник.ПериодЗаписи 
		И Вставка.Свойство("ВидСобытия") Тогда
		Вставка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение;
	КонецЕсли; 
	
	Вставка.ДатаНачала 	= ДатаНачала;
	ЕстьВставка 		= Истина;	

КонецПроцедуры

Процедура ОткрытьПустойИнтервал(Вставка, Источник, ДатаНачала, ЕстьВставка, ПараметрыРесурсов)

	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Вставка.ПериодПредыдущейЗаписи) Тогда
		Вставка.ПериодПредыдущейЗаписи = Вставка.ДатаНачала;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ПараметрыРесурсов Цикл
		
		Ресурс = КлючИЗначение.Ключ;
		Наследование = КлючИЗначение.Значение;
		Если Наследование <> Неопределено 
			И ТипЗнч(Наследование) = Тип("Структура") 
			И Вставка.Свойство(Ресурс) Тогда
			
			ПравилоНаследования = Неопределено;
			Наследование.Свойство("ПравилоНаследования", ПравилоНаследования);
			
			Если ПравилоНаследования = "Фиксированное" Тогда
				Вставка[Ресурс] = Наследование.Значение;
			ИначеЕсли ПравилоНаследования = "Пустое" Тогда
			    Вставка[Ресурс] = Неопределено;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	Вставка.ДатаНачала 			= ДатаНачала;
	Вставка.ДействуетДо 			= Дата(1, 1, 1);
	Вставка.ПустойИнтервал			= Истина;
	ЕстьВставка 				= Истина;

КонецПроцедуры

Процедура ЗакрытьИнтервал(Вставка, НаборЗаписей, ДатаОкончания, ЕстьВставка)

	Если Не ЕстьВставка Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяЗапись 					= НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Вставка);
	НоваяЗапись.ДатаОкончания		= ДатаОкончания;
	НоваяЗапись.Год 				= НачалоГода(НоваяЗапись.ДатаНачала);
	ЕстьВставка 					= Ложь;
	
КонецПроцедуры
 
Процедура ПоместитьВОжидание(СтруктураОжидания, Источник, Вставка, ЕстьОжидание)

	Если Источник.РегистраторЗаписи <> Вставка.РегистраторЗаписи Тогда
		Источник.ПериодПредыдущейЗаписи = ?(Источник.ДатаНачала < Вставка.ДатаСобытия, Источник.ДатаНачала, Источник.ПериодЗаписи);
	КонецЕсли;
		
	Если Источник.ПустойИнтервал = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОжидания, Источник,,"ПериодПредыдущейЗаписи");
	СтруктураОжидания.ДействуетДо = Дата(1, 1, 1);
	ЕстьОжидание = Истина;	

КонецПроцедуры

Процедура ЗаписатьНаборЗаписей(НаборЗаписей)
	
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
КонецПроцедуры

Функция ЗапросВТИнтервалыПоПервичномуРегистру(Знач ИмяРегистра, Знач МассивИзмерений, Знач ТекстОписанияПолей)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	РегистрСведений.Период КАК ДатаНачала,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторСобытия,
	|	ЛОЖЬ КАК ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПредыдущейЗаписи, 
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТОтборДляПереформирования КАК ВТОтборДляПереформирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
	|		ПО РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_";
	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ДействуетДо КАК ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо");
	
	КонецЕсли; 
	
	МассивСоединения = Новый Массив;
	РазделительСоединения = Символы.ПС + "			И ";
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСоединения.Добавить(РазделительСоединения);
		МассивСоединения.Добавить("РегистрСведений.");
		МассивСоединения.Добавить(Измерение);
		МассивСоединения.Добавить(" = ВТОтборДляПереформирования.");
		МассивСоединения.Добавить(Измерение);
		
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений." + Измерение, "ВТОтборДляПереформирования." + Измерение);

	КонецЦикла; 
	
	МассивСоединения.Удалить(0);
	ТекстСоединения = СтрСоединить(МассивСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТОтборДляПереформирования");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросВТИнтервалыПоИнтервальномуРегистру(Знач ИмяРегистра, Знач МассивИзмерений, Знач ТекстОписанияПолей)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_, 
	|	РегистрСведений.Год КАК НачалоГода,
	|	КОНЕЦПЕРИОДА(РегистрСведений.Год, ГОД) КАК КонецГода
	|ПОМЕСТИТЬ ВТГодыИнтервалов
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|		ПО (НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ДЕНЬ) <= РегистрСведений.ДатаОкончания)
	|			И (ВЫБОР
	|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|			КОНЕЦ > РегистрСведений.ДатаНачала)
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТНовыйНаборЗаписей.ИзмеренияОтбора_, 
	|	НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ГОД),
	|	КОНЕЦПЕРИОДА(ВТНовыйНаборЗаписей.Период, ГОД)
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.ДатаОкончания,
	|	РегистрСведений.ДатаНачала,
	|	РегистрСведений.ПериодПредыдущейЗаписи,
	|	РегистрСведений.ПериодЗаписи,
	|	РегистрСведений.РегистраторЗаписи,
	|	РегистрСведений.РегистраторСобытия,
	|	РегистрСведений.ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	#ТекстОписанияПолейСуществующийНабор
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГодыИнтервалов КАК ВТГодыИнтервалов
	|		ПО РегистрСведений.ДатаОкончания >= ВТГодыИнтервалов.НачалоГода
	|			И (РегистрСведений.ДатаНачала МЕЖДУ ВТГодыИнтервалов.НачалоГода И ВТГодыИнтервалов.КонецГода)
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ВТНовыйНаборЗаписей.Период,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВТНовыйНаборЗаписей.Период,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ЛОЖЬ,
	|	ВТНовыйНаборЗаписей.ДействуетДо,
	|	#ТекстОписанияПолейНовыйНабор
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТГодыИнтервалов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТНовыйНаборЗаписей";
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА &МаксимальнаяДата
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|			КОНЕЦ > РегистрСведений.ДатаНачала";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "ИСТИНА");
		
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ДействуетДо,", "ДАТАВРЕМЯ(1, 1, 1),");
	
	КонецЕсли;
	
	МассивСтрокИзмерений = Новый Массив;
	МассивСтрокСоединения = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединения = Символы.ПС + "			И ";
	
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(Разделитель);
		МассивСтрокИзмерений.Добавить("РегистрСведений.");
		МассивСтрокИзмерений.Добавить(Измерение);
		МассивСтрокИзмерений.Добавить(" КАК ");
		МассивСтрокИзмерений.Добавить(Измерение);
		
		МассивСтрокСоединения.Добавить(РазделительСоединения);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = ВТНовыйНаборЗаписей.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла; 
	
	МассивСтрокИзмерений.Удалить(0);
	МассивСтрокСоединения.Удалить(0);
	ТекстИзмеренийРегистрСведений = СтрСоединить(МассивСтрокИзмерений);
	ТекстСоединенияГодыИнтервалов = СтрСоединить(МассивСтрокСоединения);
	ТекстИзмеренийНовыйНабор = СтрЗаменить(ТекстИзмеренийРегистрСведений, "РегистрСведений.", "ВТНовыйНаборЗаписей.");
	ТекстСоединенияИнтервалы = СтрЗаменить(ТекстСоединенияГодыИнтервалов, "ВТНовыйНаборЗаписей.", "ВТГодыИнтервалов.");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстСоединенияГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_", ТекстСоединенияИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_", ТекстИзмеренийРегистрСведений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстИзмеренийНовыйНабор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейСуществующийНабор", ТекстОписанияПолей);
	ТекстОписанияПолейНовыйНабор = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТНовыйНаборЗаписей");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейНовыйНабор", ТекстОписанияПолейНовыйНабор);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросВТИзмеренияДаты(ОписаниеФильтра, Запрос, ИзмерениеФильтраДатаНачала, ИзмерениеФильтраДатаОкончания = "")

	Если Не ЗначениеЗаполнено(ОписаниеФильтра.ИзмеренияФильтра) Тогда
			
		МассивИзмерений = Новый Массив;
		Для Каждого Колонка Из ОписаниеФильтра.ТаблицаФильтра.Колонки Цикл
			МассивИзмерений.Добавить(Колонка.Имя);		
		КонецЦикла;	
		
	Иначе
		
		Если ТипЗнч(ОписаниеФильтра.ИзмеренияФильтра) = Тип("Строка") Тогда
			МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеФильтра.ИзмеренияФильтра, , , Истина);
		Иначе
			МассивИзмерений = ОписаниеФильтра.ИзмеренияФильтра;
		КонецЕсли;
		
	КонецЕсли; 
	
	ИмяВТИзмеренияДаты = ОписаниеФильтра.ИмяВТИзмеренияДаты;
	МассивСтрок = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	МассивСтрок.Добавить( 
		"ВЫБРАТЬ
		|	ИзмеренияДаты.");
	МассивСтрок.Добавить(ИзмерениеФильтраДатаНачала);
	
	Если Не ПустаяСтрока(ИзмерениеФильтраДатаОкончания) Тогда
	
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("ИзмеренияДаты.");
		МассивСтрок.Добавить(ИзмерениеФильтраДатаОкончания);
	
	КонецЕсли; 
		
	Для Каждого Измерение Из МассивИзмерений Цикл
		
		Если ВРег(Измерение) = ВРег(ИзмерениеФильтраДатаНачала) 
			ИЛИ ВРег(Измерение) = ВРег(ИзмерениеФильтраДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("ИзмеренияДаты.");
		МассивСтрок.Добавить(Измерение);
			
	КонецЦикла;
	
	ИмяПараметраИзмеренияДаты = УникальноеИмяПараметраЗапроса(ИмяВТИзмеренияДаты);
	
	МассивСтрок.Добавить(Символы.ПС + "ПОМЕСТИТЬ ");
	МассивСтрок.Добавить(ИмяВТИзмеренияДаты);
	МассивСтрок.Добавить(Символы.ПС + "ИЗ" + Символы.ПС);
	МассивСтрок.Добавить("	&" + ИмяПараметраИзмеренияДаты);
	МассивСтрок.Добавить(" КАК ИзмеренияДаты");
	
	МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	Запрос.УстановитьПараметр(ИмяПараметраИзмеренияДаты, ОписаниеФильтра.ТаблицаФильтра);
	
	ОписаниеФильтра.ВременнаяТаблица 	= Истина;
	ОписаниеФильтра.ТаблицаФильтра		= ИмяВТИзмеренияДаты;
	ОписаниеФильтра.ИзмеренияФильтра 	= МассивИзмерений;

	Возврат СтрСоединить(МассивСтрок);
	
КонецФункции

Функция ТекстЗапросаСрезаДляДвижений(ИмяРегистра, ИмяТаблицыФильтраСреза, ОписаниеФильтра, ПараметрыПостроения, ОписаниеРегистра, Запрос, ИмяСоздаваемойТаблицыСрезПоследних)
	
	ТекстВТСрез = "";
	
	ОписаниеФильтраСрезаПоследних = ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяТаблицыФильтраСреза, ОписаниеФильтра.ИзмеренияФильтра);
	УстановитьНастройкиОписаниеФильтраСрезаПоследних(ОписаниеФильтраСрезаПоследних, ОписаниеФильтра);
	ПараметрыПостроенияСрезаПоследних = ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра);
	ПараметрыПостроенияСрезаПоследних.ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ЗапросВТИмяРегистраСрез = ЗапросВТСрезПервичныйРегистр(ИмяРегистра, Ложь, ОписаниеФильтраСрезаПоследних, ПараметрыПостроенияСрезаПоследних, ИмяСоздаваемойТаблицыСрезПоследних);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
	ТекстВТСрез = ЗапросВТИмяРегистраСрез.Текст;
	
	Возврат ТекстВТСрез;
	
КонецФункции

Процедура ДобавитьУсловиеПоИсключающемуРегистратору(ТекстЗапроса, ИсключающийРегистратор, ОписаниеРегистра, ИмяИнтервальногоРегистра)
	
	Если ИсключающийРегистратор = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СоединениеСПрерваннымИнтервалом", "");
		Возврат;
		
	КонецЕсли;
	
	МассивСтрокСоединения = Новый Массив;
	Разделитель = Символы.ПС + "			И ";
	
	Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		Если Измерение = "ДатаОкончания"
			ИЛИ Измерение = "ДатаНачала"
			ИЛИ Измерение = "ПериодЗаписи"
			ИЛИ Измерение = "Год" Тогда
		
			Продолжить;
		КонецЕсли;
		
		МассивСтрокСоединения.Добавить(Разделитель);
		МассивСтрокСоединения.Добавить("РегистрСведений.");
		МассивСтрокСоединения.Добавить(Измерение);
		МассивСтрокСоединения.Добавить(" = РегистрСведенийЗамена.");
		МассивСтрокСоединения.Добавить(Измерение);
	
	КонецЦикла; 
	МассивСтрокСоединения.Удалить(0);
	ТекстУсловияСоединения = СтрСоединить(МассивСтрокСоединения);
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		
		Если Ресурс = "ПериодПредыдущейЗаписи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУсловияВыбора = 
		"ВЫБОР 
		|		КОГДА #УсловиеЗамены
		|			ТОГДА РегистрСведенийЗамена." + Ресурс + "
		|		ИНАЧЕ
		|			РегистрСведений." + Ресурс + "
		|	КОНЕЦ ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений." + Ресурс + " ", ТекстУсловияВыбора);
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
	
		ТекстУсловияВыбора = 
		"ВЫБОР 
		|		КОГДА #УсловиеЗамены
		|			ТОГДА РегистрСведенийЗамена." + Реквизит + "
		|		ИНАЧЕ
		|			РегистрСведений." + Реквизит + "
		|	КОНЕЦ ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений." + Реквизит + " ", ТекстУсловияВыбора);
		
	КонецЦикла;

	ТекстУсловияВыбора = 
		"ВЫБОР 
		|		КОГДА #УсловиеЗамены
		|			ТОГДА РегистрСведенийЗамена.ПериодЗаписи
		|		ИНАЧЕ
		|			РегистрСведений.ПериодЗаписи
		|	КОНЕЦ КАК ПериодЗаписи";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПериодЗаписи КАК ПериодЗаписи", ТекстУсловияВыбора);
	
	ТекстУсловияВыбора = 
		"ВЫБОР 
		|		КОГДА #УсловиеЗамены
		|			ТОГДА РегистрСведенийЗамена.ДействуетДо
		|		ИНАЧЕ
		|			РегистрСведений.ДействуетДо
		|	КОНЕЦ КАК ПериодВозвратногоСобытия";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия", ТекстУсловияВыбора);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеЗамены", "РегистрСведений.РегистраторЗаписи В (#ИсключаемыйРегистратор)");
	ТекстСоединения = 
		"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяИнтервальногоРегистра + " КАК РегистрСведенийЗамена
		|		ПО РегистрСведений.Измерение_ = РегистрСведенийЗамена.Измерение_
		|			И РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.ДатаНачала
		|			И (РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
		|				ИЛИ РегистрСведенийЗамена.РегистраторЗаписи В (#ИсключаемыйРегистратор))";
	ТекстСоединения = СтрЗаменить(ТекстСоединения, "РегистрСведений.Измерение_ = РегистрСведенийЗамена.Измерение_", ТекстУсловияСоединения); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#СоединениеСПрерваннымИнтервалом", ТекстСоединения);
	
	ТекстУсловияПоПредыдущемуИнтервалу = 
		"ВЫБОР
		|		КОГДА РегистрСведений.ДатаНачала < #ДатаНачала
		|			ТОГДА ИСТИНА
		|		КОГДА РегистрСведений.РегистраторЗаписи В (#ИсключаемыйРегистратор)
		|			И РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
		|			И РегистрСведений.РегистраторЗаписи В (#ИсключаемыйРегистратор)
		|			И ДОБАВИТЬКДАТЕ(РегистрСведенийЗамена.ДатаОкончания, СЕКУНДА, 1) = РегистрСведений.ДатаНачала
		|			ТОГДА ЛОЖЬ
		|		КОГДА РегистрСведений.ПериодЗаписи <> РегистрСведений.ДатаНачала
		|			И РегистрСведенийЗамена.РегистраторЗаписи В (#ИсключаемыйРегистратор)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА 
		|КОНЕЦ";
		 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#УсловиеПоПредыдущемуИнтервалу", ТекстУсловияПоПредыдущемуИнтервалу);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИсключаемыйРегистратор", ИсключающийРегистратор);
		
КонецПроцедуры

Процедура ДобавитьПостоянныеПоля(ТекстОписанияПолей, Запрос, ПараметрыПостроения, БезПсевдонима = Ложь)
	
	Если ПараметрыПостроения.Свойство("ПостоянныеПоля") 
		И ПараметрыПостроения.ПостоянныеПоля <> Неопределено Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекстОписанияПолей);
		Разделитель = "," + Символы.ПС + Символы.Таб;
		Для каждого ПостоянноеПоле Из ПараметрыПостроения.ПостоянныеПоля Цикл
			
			Если ТипЗнч(ПостоянноеПоле.Значение) = Тип("Строка") Тогда
				
				МассивСтрок.Добавить(Разделитель);
				МассивСтрок.Добавить("""");
				МассивСтрок.Добавить(ПостоянноеПоле.Значение);
				МассивСтрок.Добавить("""");
				
				
			Иначе
				
				МассивСтрок.Добавить(Разделитель);
				МассивСтрок.Добавить("&");
				МассивСтрок.Добавить(ПостоянноеПоле.Ключ);
				Запрос.УстановитьПараметр(ПостоянноеПоле.Ключ, ПостоянноеПоле.Значение);
				
			КонецЕсли; 
			
			Если Не БезПсевдонима Тогда
				МассивСтрок.Добавить(" КАК ");
				МассивСтрок.Добавить(ПостоянноеПоле.Ключ);
			КонецЕсли;
			
		КонецЦикла; 
	    ТекстОписанияПолей = СтрСоединить(МассивСтрок);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьОписаниеПолейФильтра(ТекстОписанияПолей, ОписаниеФильтра, ДобавлятьПсевдонимы = Истина)
	
	Если ОписаниеФильтра.Свойство("ПоляФильтра") Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекстОписанияПолей);
		Разделитель = "," + Символы.ПС + Символы.Таб;
		
		Для каждого Поле Из ОписаниеФильтра.ПоляФильтра Цикл
		
			МассивСтрок.Добавить(Разделитель);
			МассивСтрок.Добавить("ИзмеренияДаты.");
			МассивСтрок.Добавить(Поле);
			Если ДобавлятьПсевдонимы Тогда
			
				МассивСтрок.Добавить(" КАК ");
				МассивСтрок.Добавить(Поле);
			
			КонецЕсли; 
		
		КонецЦикла; 
		ТекстОписанияПолей = СтрСоединить(МассивСтрок);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаменитьПредставленияПолей(ТекстОписанияПолей, ПараметрыПостроения, ТекстПолейСКД = "")
	
	Если ПараметрыПостроения.СоответствиеПсевдонимовПолей = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Псевдоним Из ПараметрыПостроения.СоответствиеПсевдонимовПолей Цикл
	
		ТекстОписанияПолей = СтрЗаменить(ТекстОписанияПолей, "КАК " + Псевдоним.Ключ, "КАК " + Псевдоним.Значение);
		ТекстПолейСКД = СтрЗаменить(ТекстПолейСКД, Псевдоним.Ключ, Псевдоним.Значение);
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьОписаниеПолейСреза(ОписаниеРегистра, ОписаниеФильтра, ТекстОписанияПолей, ТекстУсловийСКД, ПараметрыПостроения)
	
	МассивСтрокОписанияПолей = Новый Массив;
	МассивСтрокОписанияПолей.Добавить(ТекстОписанияПолей);
	МассивСтрокУсловийСКД = Новый Массив;
	МассивСтрокУсловийСКД.Добавить(ТекстУсловийСКД);
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
			
		Если ОписаниеРегистра.ИзмеренияФильтра.Найти(Измерение) <> НеОпределено Тогда
			
			ИзмерениеФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить(Измерение);
			Если ИзмерениеФильтра = Неопределено Тогда
				ИзмерениеФильтра = Измерение;
			КонецЕсли;
			
			МассивСтрокОписанияПолей.Добавить(Разделитель);
			МассивСтрокОписанияПолей.Добавить("ИзмеренияДаты.");
			МассивСтрокОписанияПолей.Добавить(ИзмерениеФильтра);
			
		Иначе
			
			МассивСтрокОписанияПолей.Добавить(Разделитель);
			МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
			МассивСтрокОписанияПолей.Добавить(Измерение);
				
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Измерение);
		МассивСтрокУсловийСКД.Добавить(Разделитель);
		МассивСтрокУсловийСКД.Добавить(Измерение);
		
		ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Измерение];
		Если ПсевдонимПоля <> Неопределено Тогда
			МассивСтрокУсловийСКД.Добавить(" КАК ");
			МассивСтрокУсловийСКД.Добавить(ПсевдонимПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		
		МассивСтрокУсловийСКД.Добавить(Разделитель);
		МассивСтрокУсловийСКД.Добавить(Ресурс);
		
		ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Ресурс];
		Если ПсевдонимПоля <> Неопределено Тогда
			МассивСтрокУсловийСКД.Добавить(" КАК ");
			МассивСтрокУсловийСКД.Добавить(ПсевдонимПоля);
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Ресурс);
		
		МассивСтрокУсловийСКД.Добавить(Разделитель);
		МассивСтрокУсловийСКД.Добавить(Ресурс);
		
		ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Ресурс];
		Если ПсевдонимПоля <> Неопределено Тогда
			МассивСтрокУсловийСКД.Добавить(" КАК ");
			МассивСтрокУсловийСКД.Добавить(ПсевдонимПоля);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(Реквизит);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(Реквизит);
		
		МассивСтрокУсловийСКД.Добавить(Разделитель);
		МассивСтрокУсловийСКД.Добавить(Реквизит);
		
		ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[Реквизит];
		Если ПсевдонимПоля <> Неопределено Тогда
			МассивСтрокУсловийСКД.Добавить(" КАК ");
			МассивСтрокУсловийСКД.Добавить(ПсевдонимПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		
		МассивСтрокОписанияПолей.Добавить(Разделитель);
		МассивСтрокОписанияПолей.Добавить("РегистрСведений.");
		МассивСтрокОписанияПолей.Добавить(СтандартныйРеквизит);
		МассивСтрокОписанияПолей.Добавить(" КАК ");
		МассивСтрокОписанияПолей.Добавить(СтандартныйРеквизит);
		
		МассивСтрокУсловийСКД.Добавить(Разделитель);
		МассивСтрокУсловийСКД.Добавить(СтандартныйРеквизит);
		
		ПсевдонимПоля = ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД[СтандартныйРеквизит];
		Если ПсевдонимПоля <> Неопределено Тогда
			МассивСтрокУсловийСКД.Добавить(" КАК ");
			МассивСтрокУсловийСКД.Добавить(ПсевдонимПоля);
		КонецЕсли;
		
	КонецЦикла;
		
	МассивСтрокУсловийСКД.Добавить("}");
	ТекстОписанияПолей = СтрСоединить(МассивСтрокОписанияПолей);
	ТекстУсловийСКД = СтрСоединить(МассивСтрокУсловийСКД);
	
КонецПроцедуры

Функция ТекстОтобраИмяРегистра(ИмяРегистра, Отборы, Запрос, СчПараметров, ИспользоватьИсключающийРегистратор = Ложь, ИсключающийРегистратор = Неопределено)
	
	МассивСтрок = Новый Массив;
	Если Отборы <> Неопределено И Отборы.Количество() > 0 Тогда 
		
		Для Каждого СтруктураОтбора Из Отборы Цикл
			
			Параметр = СтруктураОтбора.ПравоеЗначение;
			ТипПараметра = ТипЗнч(Параметр);
			
			Если ТипПараметра = Тип("Строка") Тогда
				ОписаниеПараметра = Параметр;
			ИначеЕсли ТипПараметра = Тип("Булево") Тогда
				ОписаниеПараметра = Формат(Параметр, "БЛ=Ложь; БИ=Истина");
			ИначеЕсли ТипПараметра = Тип("Число") Тогда
				ОписаниеПараметра = Формат(Параметр,"ЧРД=.; ЧГ=0");
			ИначеЕсли ТипПараметра = Тип("Дата") Тогда
				ОписаниеПараметра = СтрШаблон("ДАТАВРЕМЯ(%1, %2, %3, %4, %5, %6)", 
					Формат(Год(Параметр), "ЧГ=0"), 
					Месяц(Параметр),
					День(Параметр),
					Час(Параметр),
					Минута(Параметр),
					Секунда(Параметр));
			Иначе
				
				ИмяПараметра = УникальноеИмяПараметраЗапроса(ИмяРегистра, СчПараметров);
				ОписаниеПараметра = "&" + ИмяПараметра;
				Запрос.УстановитьПараметр(ИмяПараметра, Параметр); 
				
			КонецЕсли;
			
			Если Не СтруктураОтбора.Свойство("ОтносительныйПуть") Или СтруктураОтбора.ОтносительныйПуть Тогда
				
				Если ВРег(СтруктураОтбора.ЛевоеЗначение) = ВРег("Период") Тогда
				    ПредставленияЛевогоЗначение = "РегистрСведений.ПериодЗаписи";
				Иначе	
					ПредставленияЛевогоЗначение = "РегистрСведений." + СтруктураОтбора.ЛевоеЗначение;
				КонецЕсли; 

			Иначе
				ПредставленияЛевогоЗначение = СтруктураОтбора.ЛевоеЗначение;
			КонецЕсли;
			
			ПредставленияЛевогоЗначение = СтрЗаменить(ПредставленияЛевогоЗначение, ".Регистратор", ".РегистраторЗаписи");
			
			Если ИспользоватьИсключающийРегистратор
				И ВРег(СтруктураОтбора.ЛевоеЗначение) = ВРег("Регистратор") 
				И (СтруктураОтбора.ВидСравнения = "<>" 
				ИЛИ ВРег(СтруктураОтбора.ВидСравнения) = "НЕ В") Тогда
				
				Если ИсключающийРегистратор <> Неопределено Тогда
				
					ТекущийПараметр = Неопределено;
					Запрос.Параметры.Свойство(Сред(ИсключающийРегистратор,2), ТекущийПараметр);
					Если ТипЗнч(ТекущийПараметр) = Тип("Массив") Тогда
						МассивРегистраторов = ТекущийПараметр;
					Иначе
						МассивРегистраторов = Новый Массив;
						МассивРегистраторов.Добавить(ТекущийПараметр);
					КонецЕсли;
					
					Если ТипЗнч(Параметр) = Тип("Массив") Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРегистраторов, Параметр);
					Иначе
						МассивРегистраторов.Добавить(Параметр);
					КонецЕсли;
					
					Запрос.УстановитьПараметр(Сред(ИсключающийРегистратор,2), МассивРегистраторов);
					ОписаниеПараметра = ИсключающийРегистратор;
				
				КонецЕсли; 
				
				ИсключающийРегистратор = ОписаниеПараметра;
				Продолжить;
				
			КонецЕсли;
				
			МассивСтрок.Добавить("И (");
			МассивСтрок.Добавить(ПредставленияЛевогоЗначение);
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(СтруктураОтбора.ВидСравнения);
			МассивСтрок.Добавить(" (");
			МассивСтрок.Добавить(ОписаниеПараметра);
			МассивСтрок.Добавить("))");
			МассивСтрок.Добавить(Символы.ПС);
				
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок);
	
КонецФункции

Функция ТекстОписанияПолейПоОписаниюРегистра(ОписаниеРегистра)
	
	МассивСтрок = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		
		Если Измерение = "ДатаНачала"
			Или Измерение = "ДатаОкончания" Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("РегистрСведений.");
		МассивСтрок.Добавить(Измерение);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Измерение);
			
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
			
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("РегистрСведений.");
		МассивСтрок.Добавить(Ресурс);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Ресурс);
		
	КонецЦикла;
		
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("РегистрСведений.");
		МассивСтрок.Добавить(Ресурс);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Ресурс);
		
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("РегистрСведений.");
		МассивСтрок.Добавить(Реквизит);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(Реквизит);
		
	КонецЦикла;
	
	Для Каждого СтандартныйРеквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		
		МассивСтрок.Добавить(Разделитель);
		МассивСтрок.Добавить("РегистрСведений.");
		МассивСтрок.Добавить(СтандартныйРеквизит);
		МассивСтрок.Добавить(" КАК ");
		МассивСтрок.Добавить(СтандартныйРеквизит);
		
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрок);
	
КонецФункции

Функция ВключатьЗаписиНаНачалоПериодаПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра)
	
	Возврат ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода
		И (ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал
			Или ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год);
			
КонецФункции

Функция ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра)
	
	Возврат ПараметрыПостроения.ФормироватьСПериодичностьДень
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда;
		
КонецФункции
	
Функция ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ИмяРегистра, ПараметрыПостроения)
	
	Если ПустаяСтрока(ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода) Тогда
		ИмяСоздаваемойТаблицыСрезПоследних = "ВТ" + ИмяРегистра + "СрезПоследних";
	Иначе
		ИмяСоздаваемойТаблицыСрезПоследних = ПараметрыПостроения.ИмяВременнойТаблицыЗаписейНаНачалоПериода;
	КонецЕсли; 
	
	ПараметрыПостроения.ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода = ИмяСоздаваемойТаблицыСрезПоследних;
	
	Возврат ИмяСоздаваемойТаблицыСрезПоследних;
	
КонецФункции

Процедура УстановитьНастройкиОписаниеФильтраСрезаПоследних(ОписаниеФильтраСрезаПоследних, ОписаниеФильтра)

	ОписаниеФильтраСрезаПоследних.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра;
	СоответствиеИмениДатаНачала = ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Получить("ДатаНачала");
	Если СоответствиеИмениДатаНачала = Неопределено Тогда
		ИмяКолонкиДатаНачала = "ДатаНачала";
	Иначе
		ИмяКолонкиДатаНачала = СоответствиеИмениДатаНачала;
	КонецЕсли; 
		
	ОписаниеФильтраСрезаПоследних.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяКолонкиДатаНачала);
	
КонецПроцедуры

Функция ПараметрыПостроенияСрезаПоследнихПоПараметрамПостроения(ПараметрыПостроения, ОписаниеРегистра)
	
	ПараметрыПостроенияСрезаПоследних = ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияСрезаПоследних.ФормироватьСПериодичностьДень =
		ФормироватьСПериодичностьДеньПоПараметрамПостроенияИОписаниюРегистра(ПараметрыПостроения, ОписаниеРегистра);
	ПараметрыПостроенияСрезаПоследних.ИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;	
	ПараметрыПостроенияСрезаПоследних.ИсключатьНеИспользуемыеПоля = ПараметрыПостроения.ИсключатьНеИспользуемыеПоля;
	
	Если ПараметрыПостроения.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			
			Если ОписаниеОтбора.Свойство("ОтносительныйПуть") Тогда
				ОтносительныйПуть = ОписаниеОтбора.ОтносительныйПуть;
			Иначе
				ОтносительныйПуть = Истина;
			КонецЕсли;
			
			Если ОтносительныйПуть
				И (ОписаниеРегистра.ИзмеренияДляПоиска.Получить(ВРег(ОписаниеОтбора.ЛевоеЗначение)) <> Неопределено
					Или ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор"))Тогда
					
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСрезаПоследних.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
				
			Иначе
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОтносительныйПуть);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПостроенияСрезаПоследних;
	
КонецФункции

Функция ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения)
	
	ПараметрыПостроенияДвижений = ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроенияДвижений.ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ПараметрыПостроенияДвижений.ИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;	
	ПараметрыПостроенияДвижений.ВключатьЗаписиНаНачалоПериода = Истина;
	ПараметрыПостроенияДвижений.ИсключатьНеИспользуемыеПоля = ПараметрыПостроения.ИсключатьНеИспользуемыеПоля;
	
	Если ПараметрыПостроения.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияДвижений.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОписаниеОтбора.ОтносительныйПуть);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПостроенияДвижений;
	
КонецФункции

Функция ИмяВспомогательнойВТДоступныеЗаписи(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТДоступныеЗаписи" + ИмяРегистра;
	
КонецФункции

Функция ИмяВспомогательнойВТПериодыСреза(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТПериодыСреза" + ИмяРегистра;
	
КонецФункции

// Возвращает параметры построения представлений.
// 
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 				- Неопределено, в параметре можно указать.
//											- Строку, содержащую имена полей регистра по которым
//												будет произведено индексирование, перечисленным через запятую.
//											- Массив, содержащий имена полей регистра.
//			* Отборы 						- Массив, описаний отбора (см. процедуру ДобавитьВКоллекциюОтбор).
//			* ФормироватьСПериодичностьДень - Булево, если Истина сведения будут сформированы по последним записям
//												за день (применяется при получении сведений из регистров сведения
//												с периодичностью равной Секунда).
//			* ПостоянныеПоля				- Структура, содержит постоянные значения, которые необходимо добавить в 
//												запрос как параметры.
//
Функция ПараметрыПостроенияВТИмяРегистра()
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ИндексироватьПо");
	ПараметрыПостроения.Вставить("Отборы", Новый Массив);
	ПараметрыПостроения.Вставить("ФормироватьСПериодичностьДень", Истина);
	ПараметрыПостроения.Вставить("ИспользоватьРасширениеЯзыкаЗапросовДляСКД", Истина);
	ПараметрыПостроения.Вставить("ПостоянныеПоля");
	ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Ложь);
	ПараметрыПостроения.Вставить("СоответствиеПсевдонимовПолей", Новый Соответствие);
	ПараметрыПостроения.Вставить("СоответствиеПсевдонимовПолейСКД", Новый Соответствие);
	ПараметрыПостроения.Вставить("ИсключатьНеИспользуемыеПоля", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция ИмяВспомогательнойВТИзмеренияДаты(ИмяРегистра, ПараметрыПостроения)
	
	Возврат "ВТИзмеренияДаты" + ИмяРегистра;
	
КонецФункции

Функция УникальноеИмяПараметраЗапроса(Знач ИмяТаблицы, НомерПараметра = Неопределено) Экспорт
	
	УникальноеИмяПараметра = ИмяТаблицы + "_Параметр";
	
	Если ТипЗнч(НомерПараметра) = Тип("Число") Тогда
		
		УникальноеИмяПараметра = УникальноеИмяПараметра + Формат(НомерПараметра, "ЧГ=");
		НомерПараметра = НомерПараметра + 1;
		
	КонецЕсли;
	
	Возврат УникальноеИмяПараметра;
	
КонецФункции

// Добавляет к тексту запроса фрагмент индексирования.
//
// Параметры:
//		ТекстЗапроса - Строка
//		ПоляИндексирования - см. описание параметра ПоляИндексирования,
//				метода ПараметрыПостроенияПредставленияВТИмяРегистра.
//
Процедура ДобавитьВТекстЗапросаПоляИндексирования(ТекстЗапроса, ПоляИндексирования)
	
	Если ПоляИндексирования <> Неопределено Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекстЗапроса);
		
		Если ТипЗнч(ПоляИндексирования) = Тип("Строка") Тогда
			МассивПолейИндексирования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляИндексирования, , , Истина);
		Иначе
			МассивПолейИндексирования = ПоляИндексирования;
		КонецЕсли;
		
		Если МассивПолейИндексирования.Количество() > 0 Тогда
			
			МассивСтрок.Добавить(Символы.ПС + "ИНДЕКСИРОВАТЬ ПО" + Символы.ПС + Символы.Таб); 
			Разделитель = "," + Символы.ПС + Символы.Таб;
			Для каждого ИмяПоляИндекса Из МассивПолейИндексирования Цикл
				МассивСтрок.Добавить(ИмяПоляИндекса);
				МассивСтрок.Добавить(Разделитель);
			КонецЦикла;
			
			МассивСтрок.Удалить(МассивСтрок.Количество() - 1);
			ТекстЗапроса = СтрСоединить(МассивСтрок);
			
		КонецЕсли; 
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонтрольИзмененийПередЗаписью(НаборЗаписейРегистра) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НаборЗаписейРегистра.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицИзмененияРегистра", МенеджерВременныхТаблиц);
	
	СоздатьВТСтарыйНаборЗаписей(НаборЗаписейРегистра, МенеджерВременныхТаблиц, ИмяВТСтарыйНаборРегистра(НаборЗаписейРегистра.Метаданные().Имя));
КонецПроцедуры

Процедура КонтрольИзмененийПриЗаписи(НаборЗаписейРегистра) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат;
	КонецЕсли;	
		
	Запрос = ЗапросВТИзмененияВНаборе(НаборЗаписейРегистра.Метаданные().Имя, НаборЗаписейРегистра.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = НаборЗаписейРегистра.ДополнительныеСвойства.МенеджерВременныхТаблицИзмененияРегистра;
	
	Запрос.Выполнить(); 
КонецПроцедуры

Функция ТаблицаИзменившихсяДанныхНабора(НаборЗаписейРегистра) Экспорт
	ТаблицаИзменившихсяДанных = Неопределено;	
	
	МенеджерВременныхТаблиц = Неопределено;
	
	НаборЗаписейРегистра.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицИзмененияРегистра", МенеджерВременныхТаблиц);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.*
		|ИЗ
		|	ВТТаблицаИзменений КАК ТаблицаИзменений";
		
		ИмяТаблицыИзменений = "ВТ" + НаборЗаписейРегистра.Метаданные().Имя + "Изменения";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаИзменений", ИмяТаблицыИзменений);
		
		ТаблицаИзменившихсяДанных = Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
		
	Возврат ТаблицаИзменившихсяДанных;	
КонецФункции

Функция ИмяВТСтарыйНаборРегистра(ИмяРегистра)
	Возврат "ВТ" + ИмяРегистра + "СтарыйНабор";
КонецФункции	

Функция ЗапросВТИзмененияВНаборе(ИмяРегистра, РегистраторТекущегоНабора)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос._Измерения,
	|	ВложенныйЗапрос._ДействуетДо,
	|	&ИзменившиесяРесурсы,
	|	&СтарыеЗначениеРесурсов,
	|	&НовыеЗначенияРесурсов,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ФлагИзменений) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удаление,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ФлагИзменений) = -1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Добавление
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтарыйНабор.Период КАК Период,
	|		СтарыйНабор._Измерения КАК _Измерения,
	|		СтарыйНабор._Ресурсы КАК _Ресурсы,
	|		СтарыйНабор._ДействуетДо КАК _ДействуетДо,
	|		1 КАК ФлагИзменений,
	|		ЛОЖЬ КАК НовыйНабор
	|	ИЗ
	|		&СтарыйНабор КАК СтарыйНабор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НовыйНабор.Период,
	|		НовыйНабор._Измерения,
	|		НовыйНабор._Ресурсы,
	|		НовыйНабор._ДействуетДо,
	|		-1,
	|		ИСТИНА
	|	ИЗ
	|		&ТаблицаРегистра КАК НовыйНабор
	|	ГДЕ
	|		НовыйНабор.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос._Измерения,
	|	ВложенныйЗапрос._ДействуетДо
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.ФлагИзменений) <> 0
	|		ИЛИ &УсловиеИзменившиесяРесурсы)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТРезультат", "ВТ" + ИмяРегистра + "Изменения");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаРегистра", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтарыйНабор", ИмяВТСтарыйНаборРегистра(ИмяРегистра));
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра, Истина);
	
	РазделительПолейЗапроса = "," + Символы.ПС;
	
	ПоляИзмеренияСтарогоНабораЗапроса = Новый Массив;
	ПоляИзмеренияНовогоНабораЗапроса = Новый Массив;
	ПоляИзмеренияВнешнегоЗапроса  = Новый Массив;
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ПоляИзмеренияСтарогоНабораЗапроса.Добавить("СтарыйНабор." + Измерение + " КАК " + Измерение);
		ПоляИзмеренияНовогоНабораЗапроса.Добавить("НовыйНабор." + Измерение);
		ПоляИзмеренияВнешнегоЗапроса.Добавить("ВложенныйЗапрос." + Измерение);
	КонецЦикла;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Измерения КАК _Измерения", СтрСоединить(ПоляИзмеренияСтарогоНабораЗапроса, РазделительПолейЗапроса)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Измерения", СтрСоединить(ПоляИзмеренияНовогоНабораЗапроса, "," + Символы.ПС)); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._Измерения", СтрСоединить(ПоляИзмеренияВнешнегоЗапроса, "," + Символы.ПС)); 

	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._ДействуетДо КАК _ДействуетДо", "СтарыйНабор.ДействуетДо КАК ДействуетДо"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._ДействуетДо", "НовыйНабор.ДействуетДо"); 
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._ДействуетДо КАК _ДействуетДо", "ДАТАВРЕМЯ(1,1,1) КАК ДействуетДо"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._ДействуетДо", "ДАТАВРЕМЯ(1,1,1)"); 
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос._ДействуетДо", "ВложенныйЗапрос.ДействуетДо");
	
	ПоляРесурсыСтарогоНабора = Новый Массив;
	ПоляРесурсыНовогоНаборы = Новый Массив;
	ПоляСтарыеЗначенияРесурсов = Новый Массив;
	ПоляНовыеЗначенияРесурсов = Новый Массив;	
	ПоляИзменившиесяРесурсы = Новый Массив;
	ЧастиУсловияИзменившиесяРесурсы = Новый Массив;
	
	ШаблонПоляИзменениеРесурса = 
	"	ВЫБОР
	|		КОГДА МАКСИМУМ(ВложенныйЗапрос._Ресурс) <> МИНИМУМ(ВложенныйЗапрос._Ресурс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилсяРесурс_Ресурс";
	
	ШаблонУсловияИзмененияРесурса = 
	"	ВЫБОР
	|		КОГДА МАКСИМУМ(ВложенныйЗапрос._Ресурс) <> МИНИМУМ(ВложенныйЗапрос._Ресурс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ШаблонПоляСтарогоЗначенияРесурса = 
	"	МАКСИМУМ(ВЫБОР
	|				КОГДА НЕ ВложенныйЗапрос.НовыйНабор  
	|					ТОГДА ВложенныйЗапрос._Ресурс
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ) КАК СтароеЗначение_Ресурс";
	
	ШаблонПоляНовогоЗначенияРесурса = 
	"	МАКСИМУМ(ВЫБОР
	|				КОГДА ВложенныйЗапрос.НовыйНабор
	|					ТОГДА ВложенныйЗапрос._Ресурс
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ) КАК НовоеЗначение_Ресурс";

	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + Ресурс + " КАК " + Ресурс);
		ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + Ресурс);
		
		ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", Ресурс);
		ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
		
		ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", Ресурс);
		ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
		
		ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
		
		ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		
		ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + Ресурс + " КАК " + Ресурс);
		ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + Ресурс);
		
		ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", Ресурс);
		ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
		
		ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", Ресурс);
		ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
		
		ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
		
		ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", Ресурс);
		ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
		
		РесурсПоОкончании = Ресурс + "ПоОкончании";
		
		ПоляРесурсыСтарогоНабора.Добавить("СтарыйНабор." + РесурсПоОкончании + " КАК " + РесурсПоОкончании);
		ПоляРесурсыНовогоНаборы.Добавить("НовыйНабор." + РесурсПоОкончании);
		
		ТекстПоляИзменившиесяРесурсы = СтрЗаменить(ШаблонПоляИзменениеРесурса, "_Ресурс", РесурсПоОкончании);
		ПоляИзменившиесяРесурсы.Добавить(ТекстПоляИзменившиесяРесурсы);
		
		ТекстУсловияИзменившиесяРесурсы = СтрЗаменить(ШаблонУсловияИзмененияРесурса, "_Ресурс", РесурсПоОкончании);
		ЧастиУсловияИзменившиесяРесурсы.Добавить(ТекстУсловияИзменившиесяРесурсы);
		
		ТекстПоляСтароеЗначениеРесурса = СтрЗаменить(ШаблонПоляСтарогоЗначенияРесурса, "_Ресурс", РесурсПоОкончании);
		ПоляСтарыеЗначенияРесурсов.Добавить(ТекстПоляСтароеЗначениеРесурса);
		
		ТекстПоляНовоеЗначениеРесурса = СтрЗаменить(ШаблонПоляНовогоЗначенияРесурса, "_Ресурс", РесурсПоОкончании);
		ПоляНовыеЗначенияРесурсов.Добавить(ТекстПоляНовоеЗначениеРесурса);
		
	КонецЦикла;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтарыйНабор._Ресурсы КАК _Ресурсы", СтрСоединить(ПоляРесурсыСтарогоНабора, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НовыйНабор._Ресурсы", СтрСоединить(ПоляРесурсыНовогоНаборы, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИзменившиесяРесурсы", СтрСоединить(ПоляИзменившиесяРесурсы, РазделительПолейЗапроса));	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтарыеЗначениеРесурсов", СтрСоединить(ПоляСтарыеЗначенияРесурсов, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НовыеЗначенияРесурсов", СтрСоединить(ПоляНовыеЗначенияРесурсов, РазделительПолейЗапроса));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИзменившиесяРесурсы", СтрСоединить(ЧастиУсловияИзменившиесяРесурсы, " ИЛИ "));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", РегистраторТекущегоНабора);
	
	Возврат Запрос;
КонецФункции	

#КонецОбласти