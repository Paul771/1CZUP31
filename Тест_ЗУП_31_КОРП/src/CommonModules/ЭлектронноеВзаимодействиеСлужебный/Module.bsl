////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеСлужебный: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс


// Размещает команды ЭДО на форме.
//
// Параметры:
//   Форма                            - УправляемаяФорма - форма, в которой необходимо разместить подменю ЭДО.
//   МестоРазмещенияКомандПоУмолчанию - ЭлементФормы - группа, в которую необходимо разместить подменю ЭДО,
//                                                     по умолчанию размещается в командную панель формы.
//   МодульПодсистемы - Строка - название модуля, в котором расположен обработчик команды;
//   НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление документа информационной базы;
//   ТолькоВМенюЕще - Булево - Если Истина, то команда будет размещена только в меню Еще.
//
Процедура РазместитьНаФормеКомандыЭДО(Форма, МестоРазмещенияКомандПоУмолчанию, МодульПодсистемы, НаправлениеЭД = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	КомандыЭДО = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.КомандыЭДОФормы(ИмяФормы, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще).Скопировать();
	ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма);
	
	Если МестоРазмещенияКомандПоУмолчанию <> Неопределено Тогда
		Для Каждого КомандаЭДО Из КомандыЭДО Цикл
			Если ПустаяСтрока(КомандаЭДО.МестоРазмещения) Тогда
				КомандаЭДО.МестоРазмещения = МестоРазмещенияКомандПоУмолчанию.Имя;
			КонецЕсли;
		КонецЦикла;
		Если МодульПодсистемы = "ОбменСБанками" Тогда
			МестоРазмещенияКомандПоУмолчанию.Заголовок = НСтр("ru = '1С:ДиректБанк'");
		КонецЕсли;
	КонецЕсли;
	
	КомандыЭДО.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	ТаблицаКоманд = КомандыЭДО.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Если МестоРазмещенияКомандПоУмолчанию = Неопределено Тогда
		МестоРазмещенияКоманд = Форма.КоманднаяПанель;
		ПодменюЭДО = Форма.Элементы.Добавить(МестоРазмещенияКоманд.Имя + "КомандыЭДО", Тип("ГруппаФормы"), МестоРазмещенияКоманд);
		ПодменюЭДО.Вид = ВидГруппыФормы.Подменю;
		Если МодульПодсистемы = "ОбменСБанками" Тогда
			ПодменюЭДО.Заголовок = НСтр("ru = '1С:ДиректБанк'");
		Иначе
			ПодменюЭДО.Заголовок = НСтр("ru = 'ЭДО'");
		КонецЕсли;
		МестоРазмещенияКомандПоУмолчанию = ПодменюЭДО;
	КонецЕсли;
	
	Если МодульПодсистемы = "ОбменСКонтрагентами" Тогда
		КартинкаОповещений = БиблиотекаКартинок["ЭмблемаСервиса1СЭДО"];
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйВызовСервера");
		Если МодульОбменСКонтрагентами.ЕстьСобытияЭДО() Тогда
			КартинкаОповещений = БиблиотекаКартинок["ВосклицательныйЗнакКрасный"];
		КонецЕсли;
		МестоРазмещенияКомандПоУмолчанию.Картинка = КартинкаОповещений;
	КонецЕсли;
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		НайденныеКоманды = КомандыЭДО.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями,Отключена", МестоРазмещения, Ложь, Ложь));
		ЭлементФормыДляРазмещения = Форма.Элементы.Найти(МестоРазмещения);
		Если ЭлементФормыДляРазмещения = Неопределено Тогда
			ЭлементФормыДляРазмещения = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			ДобавитьКомандыЭДО(Форма, НайденныеКоманды, ЭлементФормыДляРазмещения);
		КонецЕсли;
	КонецЦикла;
	
	АдресКомандЭДОВоВременномХранилище = "АдресКомандЭДОВоВременномХранилище";
	КомандаФормы = Форма.Команды.Найти(АдресКомандЭДОВоВременномХранилище);
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(АдресКомандЭДОВоВременномХранилище);
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(КомандыЭДО, Форма.УникальныйИдентификатор);
	Иначе
		ОбщийСписокКомандЭДОФормы = ПолучитьИзВременногоХранилища(КомандаФормы.Действие);
		Для Каждого КомандаЭДО Из КомандыЭДО Цикл
			ЗаполнитьЗначенияСвойств(ОбщийСписокКомандЭДОФормы.Добавить(), КомандаЭДО);
		КонецЦикла;
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(ОбщийСписокКомандЭДОФормы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список команд ЭДО для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд ЭДО;
//  МодульПодсистемы - Строка - модуль, в котором размещены обработчики команд;
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление документа, для которого выполняется команда;
//  ТолькоВМенюЕще - Булево - если Истина, то команда будет размещена только в меню Еще.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандЭДО().
//
Функция КомандыЭДОФормы(Форма, МодульПодсистемы, НаправлениеЭД, ТолькоВМенюЕще) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	КомандыЭДО = СоздатьКоллекциюКомандЭДО();
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено 
		И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	ДобавляемыеКомандыЭДО = СоздатьКоллекциюКомандЭДО();
	МодульФормирования = ОбщегоНазначения.ОбщийМодуль(МодульПодсистемы);
	МодульФормирования.СформироватьКомандыЭДО(ОбъектМетаданных.ПолноеИмя(), ДобавляемыеКомандыЭДО, НаправлениеЭД, ТолькоВМенюЕще);
	
	Для Каждого КомандаЭДО Из ДобавляемыеКомандыЭДО Цикл
		Если КомандыЭДО.Найти(КомандаЭДО.Идентификатор, "Идентификатор") = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КомандыЭДО.Добавить(), КомандаЭДО);	
		КонецЕсли;
	КонецЦикла;
	
	КомандыЭДО.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыЭДО.Количество() + 1 По 0 Цикл
		КомандаЭДО = КомандыЭДО[-НомерСтроки];
		СписокФорм = СтрРазделить(КомандаЭДО.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыЭДО.Удалить(КомандаЭДО);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма);
	
	Возврат КомандыЭДО;
	
КонецФункции

// Возвращает организацию по умолчанию.
// 
// Возвращаемое значение:
//  Неопределено - не удалось определить организацию.
//  ОпределяемыеТипы.Организация - организация для автоматической подстановки.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(Тип("Строка")) Тогда
		ПолноеИмя = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0]).ПолноеИмя();
		ИмяСправочникаОрганизации = "Справочники." + СтрРазделить(ПолноеИмя, ".")[1];
		МодульОрганизации = ОбщегоНазначения.ОбщийМодуль(ИмяСправочникаОрганизации);
		ОрганизацияПоУмолчанию = МодульОрганизации.ОрганизацияПоУмолчанию();
	Иначе
		ОрганизацияПоУмолчанию = Неопределено;
	КонецЕсли;
	
	Возврат ОрганизацияПоУмолчанию;
	
КонецФункции

// Получает сокращенное наименование организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на организацию.
//
// Возвращаемое значение:
//  Строка - сокращенное наименование организации.
//
Функция СокращенноеНаименованиеОрганизации(Организация) Экспорт
	
	РеквизитНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"СокращенноеНаименованиеОрганизации");
	Если НЕ ЗначениеЗаполнено(РеквизитНаименованиеОрганизации) Тогда
		РеквизитНаименованиеОрганизации = "Наименование";
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, РеквизитНаименованиеОрганизации);
	
КонецФункции

Процедура ПроверитьИспользованияНесколькихОрганизацийПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	&СправочникОрганизации КАК Организации
		|ГДЕ
		|	НЕ Организации.Предопределенный
		|	И НЕ Организации.ПометкаУдаления";
	
	ИмяСправочникаОрганизации = Источник.Метаданные().Имя;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СправочникОрганизации", 
		"Справочник." + ИмяСправочникаОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Если Количество > 1 Тогда
		Константы.ИспользоватьНесколькоОрганизацийБЭД.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись событий в журнал регистрации. Обработка ошибок

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаимодействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией.
//  Электронное взаимодействие:
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//    |_ Бизнес-сеть
// Параметры:
//   ОписаниеСобытия - Строка - описание содержания события, которое требуется записать в журнал регистрации.
//   КодСобытия - Строка - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: "ЭлектронноеВзаимодействие" - Общая подсистема, 
//                                          "ОбменСБанками" - Обмен с банками, 
//                                          "ОбменСКонтрагентами" - Обмен с контрагентами,
//                                          "ОбменССайтами" - Обмен с сайтами, 
//                                          "РегламентныеЗадания" - Регламентные задания, 
//                                          "БизнесСеть" - Бизнес-сеть,
//                                          "ИнтеграцияСЯндексКассой" - Интеграция с Яндекс.Кассой.
//   УровеньВажности - УровеньЖурналаРегистрации - уровень журнала регистрации (Ошибка, Информация, и т.д.).
//   ОбъектМетаданных - ОбъектМетаданных - объект метаданных, к которому относится событие.
//   ДанныеСсылка - Произвольный - данные, с которыми связано событие. Рекомендуется указывать ссылки на объекты данных
//                  (элементы справочников, документы, к которым относится событие).
//   РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - указывает отношение записи к текущей транзакции.
//
Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия, КодСобытия, УровеньВажности = Неопределено,
	ОбъектМетаданных = Неопределено, ДанныеСсылка = Неопределено, РежимТранзакции = Неопределено) Экспорт
	
	
	Если КодСобытия = "ЭлектронноеВзаимодействие" Тогда Подсистема = НСтр("ru = 'Общая подсистема'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "ОбменСБанками" Тогда Подсистема = НСтр("ru = 'Обмен с банками'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "ОбменСКонтрагентами" Тогда Подсистема = НСтр("ru = 'Обмен с контрагентами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "ОбменССайтами" Тогда Подсистема = НСтр("ru = 'Обмен с сайтами'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "РегламентныеЗадания" Тогда Подсистема = НСтр("ru = 'Регламентные задания'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "БизнесСеть" Тогда Подсистема = НСтр("ru = 'Бизнес-сеть'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ИначеЕсли КодСобытия = "ИнтеграцияСЯндексКассой" Тогда Подсистема = НСтр("ru = 'Интеграция с Яндекс Кассой'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		Подсистема = НСтр("ru = 'Общая подсистема'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
		
	ИмяСобытия = СтрЗаменить(НСтр("ru = 'Электронное взаимодействие.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		"%1", Подсистема);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия,
		РежимТранзакции);
	
КонецПроцедуры

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ЭлектронноеВзаимодействиеПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции для работы с HTTP

// Функция формирует прокси по настройкам прокси и протоколу.
//
// Параметры:
//  Протокол - Строка - протокол для которого устанавливаются параметры прокси сервера, например http, https, ftp.
//
// Возвращаемое значение:
//  ИнтернетПрокси - описание параметров прокси-серверов.
// 
Функция СформироватьПрокси(Протокол) Экспорт
	
	// НастройкаПроксиСервера - Соответствие:
	//  ИспользоватьПрокси - использовать ли прокси-сервер;
	//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов;
	//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера;
	//  Сервер       - адрес прокси-сервера;
	//  Порт         - порт прокси-сервера;
	//  Пользователь - имя пользователя для авторизации на прокси-сервере;
	//  Пароль       - пароль пользователя.
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
					НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Определяет параметры HTTP соединения по URL адресу.
//
// Параметры:
//  АдресСайта - Строка - URL сайта;
//  ЗащищенноеСоединение - Булево - возвращает Истина, если требуется шифрование;
//  Адрес - Строка - адрес сайта без протокола;
//  Протокол - Строка - название протокола.
//
Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		
		СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL( , СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
КонецПроцедуры

// Разделение строки на элементы массива.
//
// Параметры:
//  Строка		 - Строка - строка для разделения.
//  Разделитель	 - Строка - разделитель.
// 
// Возвращаемое значение:
//  Массив - результат разделения.
//
Функция МассивПодстрок(Знач Строка, Разделитель) Экспорт
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = СтрНайти(Строка, "{");
	КонПозицияПервогоЭлемента = СтрНайти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, на который отправляются данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Данные - ДвоичныеДанные - тело запроса;
//  ПолучитьТелоКакСтроку - Булево - признак необходимости получения тела как строки;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла.
//      * Тело - ДвоичныеДанные, Строка, Неопределено - данные ответа сервера.
//      * СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число, Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ОтправитьЗапросНаСервер(АдресСервера, Ресурс, Заголовки, Данные = Неопределено, ПолучитьТелоКакСтроку = Ложь, Таймаут = 60) Экспорт
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(АдресСервера, Таймаут);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	Если НЕ Данные = Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
	КонецЕсли;

	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
		Если ПолучитьТелоКакСтроку Тогда
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
		Иначе
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния);
		СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = Ответ.КодСостояния;

	Возврат СтруктураВозврата;
	
КонецФункции

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, с которого будут получены данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла.
//      * Тело - Строка  - путь к файлу с телом ответа сервера.
//      * СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число, Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ПолучитьДанныеССервера(АдресСервера, Ресурс, Заголовки = Неопределено, Таймаут = 60) Экспорт
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(АдресСервера, Таймаут);

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	Тело = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		Ответ = Соединение.Получить(HTTPЗапрос, Тело);
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьВременныеФайлы(Тело);
		
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния);
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = Ответ.КодСостояния;
	СтруктураВозврата.Тело = Тело;
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Файловые операция

// Выгружает электронный документ в файл.
//
// Параметры:
//  ЭД - ЗначениеXDTO, ОбъектXDTO, Неопределено - Записываемое значение.
//  ИмяФайла - Строка - путь к файлу, в который сохраняются данные;
//  УказаниеТипа - НазначениеТипаXML - вариант назначения типа элемента данных XDTO.
//  ТипКодировки - Строка - файл будет записан в соответствующей кодировке.
//
Процедура ВыгрузитьЭДВФайл(ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "windows-1251") Экспорт
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - вложенный каталог первого уровня (не используется, оставлено для совместимости).
//  КлючУникальности - Строка - вложенный каталог второго уровня (не используется, оставлено для совместимости).
//
// Возвращаемое значение:
//  Строка - временный каталог.
//
Функция РабочийКаталог(Знач Подкаталог = "", Знач КлючУникальности = "") Экспорт
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива.
// Проверяется максимальная длина полного имени файла в 255 символов.
// 
// Параметры:
//  АрхивЧтение - ЧтениеZIPФайла - открытий zip архив.
//  КаталогРаспаковки - Строка - папка, в которую будут извлечены данные.
//  ИмяСоздаваемогоФайла - Строка - имя файла, который не может быть извлечен.
//
// Возвращаемое значение:
//  Булево - если возможно то Истина, иначе Ложь.
//
Функция ВозможноИзвлечьФайлы(АрхивЧтение, КаталогРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(КаталогРаспаковки);
	
	Для Каждого Элемент Из АрхивЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Удаляет временные файлы или каталог.
//
// Параметры:
//  Путь - Строка - полный путь к файлу или каталогу
//  Маска - Строка - маска для выбора удаляемых файлов,
//        - Неопределено - удаляются все файлы и каталог <Путь>.
//
Процедура УдалитьВременныеФайлы(Путь, Маска = Неопределено) Экспорт
	
	Попытка
		УдалитьФайлы(Путь, Маска);
	Исключение
		ВидОперации = НСтр("ru = 'Удаление временного файла.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, , "ЭлектронноеВзаимодействие");
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Криптография

// Создает на сервере менеджер криптографии. Пароль не устанавливается.
//
// Параметры:
//  Отказ - Булево -  признак возникновения ошибки создания менеджера криптографии;
//  ПоказыватьОшибку - Булево - показывать текст ошибки.
//  Программа - Неопределено - возвращает менеджер криптографии первой
//              программы из справочника для которой удалось его создать.
//            - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программа
//              для которой нужно создать и вернуть менеджер криптографии.
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии.
//
Функция МенеджерКриптографии(Отказ, ПоказыватьОшибку = Истина, Программа = Неопределено) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("", ПоказыватьОшибку, , Программа);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Проверяет действительность подписи, без учета списка отозванных сертификатов.
// В случае ошибки генерирует исключение.
//
// Параметры:
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии.
//  ДвоичныеДанныеФайла   - ДвоичныеДанные - двоичные данные файла.
//  ДвоичныеДанныеПодписи - ДвоичныеДанные - двоичные данные подписи.
//
Процедура ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	
КонецПроцедуры

// Формирует данные подписи объекта.
//
// Параметры:
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии;
//  ОбъектДляПодписиСсылка  - ЛюбаяСсылка - ссылка на подписываемый объект;
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи;
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий.
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭП.
//
Функция СформироватьДанныеПодписи(МенеджерКриптографии, ОбъектДляПодписиСсылка, ДвоичныеДанные, СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.ПарольПользователя;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СтруктураПараметровПодписи.Сертификат);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура;
	ДанныеПодписи.Вставить("ОбъектСсылка",               ОбъектДляПодписиСсылка);
	ДанныеПодписи.Вставить("Отпечаток",                  Отпечаток);
	ДанныеПодписи.Вставить("ДатаПодписи",                ДатаПодписи);
	ДанныеПодписи.Вставить("Комментарий",                СтруктураПараметровПодписи.Комментарий);
	ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
	ДанныеПодписи.Вставить("КомуВыданСертификат",        КомуВыданСертификат);
	ДанныеПодписи.Вставить("АдресФайла",                 "");
	ДанныеПодписи.Вставить("Подпись",                    НоваяПодписьДвоичныеДанные);
	ДанныеПодписи.Вставить("Сертификат",                 ДвоичныеДанныеСертификата);
	
	Возврат ДанныеПодписи;
	
КонецФункции

// Скрытие областей табличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, где скрываются области.
//  ИменаОбластей - Строка - Имена скрываемых областей через запятую.
//  ТипСмещения - ТипСмещенияТабличногоДокумента - тип смещения удаляемой области.
//
Процедура СкрытьОбластиТабличногоДокумента(ТабличныйДокумент, ИменаОбластей, Знач ТипСмещения = Неопределено) Экспорт
	
	Если ТипСмещения = Неопределено Тогда
		ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;
	КонецЕсли;
	
	Если ТипЗнч(ИменаОбластей) <> Тип("Массив") Тогда
		Области = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИменаОбластей, ",");
	КонецЕсли;
	
	Для каждого ИмяОбласти Из Области Цикл
		
		ЕстьОбластьДД = ТабличныйДокумент.Области.Найти(СокрЛП(ИмяОбласти));
		
		Если ЕстьОбластьДД <> Неопределено Тогда
			ОбластьШапки = ТабличныйДокумент.Области.Найти("Шапка");
			ОбластьТаблицы = ТабличныйДокумент.Область(ИмяОбласти);
			
			Верх = ?(ОбластьТаблицы.Лево = 0 И ОбластьТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
				ОбластьТаблицы.Верх, ОбластьШапки.Низ + 1);
				
			Если ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали Тогда
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ТабличныйДокумент.ВысотаТаблицы, ОбластьТаблицы.Право);
			ИначеЕсли ТипСмещения = ТипСмещенияТабличногоДокумента.БезСмещения Тогда 
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, ОбластьТаблицы.Лево,
					ОбластьТаблицы.Низ, ОбластьТаблицы.Право);
				Если ИмяОбласти = "ИдентификаторДокумента" Тогда
					ТипСмещения = ТипСмещенияТабличногоДокумента.ПоГоризонтали;	
				КонецЕсли;
			Иначе
				Низ = ТабличныйДокумент.ВысотаТаблицы;
				УдаляемаяОбласть = ТабличныйДокумент.Область(Верх, , Низ,);
			КонецЕсли; 
				
			ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Значение реквизита строки дерева разбора.
//
// Параметры:
//  ДеревоРазбора	 - ДеревоЗначений - объект поиска.
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значений.
//  ПутьКРеквизиту	 - Строка - путь к реквизиту.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = СтрНайти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает значение свойства XDTO
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - объект, значение свойства которого нужно получить
//  Путь - Строка - путь к свойству, разделителем является символ ".".
// 
// Возвращаемое значение:
//  Неопределено - данное свойство отсутствует;
//  Строка - значение свойства;
//  ОбъектXDTO - объект XDTO.
//
Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Путь, ".");
	Если МассивСтрок.Количество() = 1 Тогда
		Если ОбъектXDTO.Свойства().Получить(МассивСтрок[0]) = Неопределено Тогда
			Возврат Неопределено
		Иначе
			Значение = ОбъектXDTO[МассивСтрок[0]];
			Если ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			Возврат Значение;
		КонецЕсли;
	Иначе
		ПодОбъектXDTO = ОбъектXDTO.ПолучитьXDTO(МассивСтрок[0]);
		МассивСтрок.Удалить(0);
		НоваяСтрока = "";
		Для Каждого Элемент Из МассивСтрок Цикл
			НоваяСтрока = НоваяСтрока + ?(ПустаяСтрока(НоваяСтрока), "", ".") + Элемент;
		КонецЦикла;
		Возврат ЗначениеСвойстваXDTO(ПодОбъектXDTO, НоваяСтрока);
	КонецЕсли;
	
КонецФункции

// Устарела. Не используется. Обработчик подписки на событие ЗаполнитьВидыЭДДляСертификатаЭП.
//
// Параметры:
//  Источник - СправочникОбъект.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат криптографии;
//  Отказ - Булево - Признак отказа от записи элемента.
//
Процедура ЗаполнитьВидыЭДДляСертификатаЭППередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ПолучитьСсылкуОбъектаБезопасно(Источник);
	Если Источник.ЭтоНовый() Тогда
		РегистрыСведений.ПодписываемыеВидыЭД.СохранитьПодписываемыеВидыЭД(СсылкаНаОбъект);
	КонецЕсли;

КонецПроцедуры

// Определяет, использует ли конфигурация несколько языков.
// 
// Возвращаемое значение:
//  Булево - Истина, если в конфигурации объявлено несколько языков.
//
Функция КонфигурацияИспользуетНесколькоЯзыков() Экспорт

	Возврат Метаданные.Языки.Количество() > 1;

КонецФункции

// Получает ссылку для объекта ИБ, в том числе нового.
//
// Параметры:
//  Объект	 - Объект - объект ссылочного типа.
// 
// Возвращаемое значение:
//  ЛюбаяСсылка - ссылка на переданный объект.
//
Функция ПолучитьСсылкуОбъектаБезопасно(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	Если Ссылка.Пустая() Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();
		Если Ссылка.Пустая() Тогда
			Ссылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции 

// Получает переданные реквизиты объекта или ссылки.
//
// Параметры:
//  Объект    - Объект, ЛюбаяСсылка - объект ссылочного типа или любая ссылка.
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
// 
// Возвращаемое значение:
//  Структура - структура, в которой ключами являются имена реквизитов, а значениями - их значения.
//
Функция ЗначенияРеквизитовОбъектаИлиСсылки(Объект, Знач Реквизиты) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
	Иначе
		// Передан объект - поэтому нужно составить структуру из реквизитов и прочитать в нее значения из объекта напрямую.
		Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
			Если ПустаяСтрока(Реквизиты) Тогда
				Возврат Новый Структура;
			КонецЕсли;
			Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
		КонецЕсли;
		
		Результат = Новый Структура;
		Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
			Результат = Реквизиты;
		ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
			Для Каждого Реквизит Из Реквизиты Цикл
				Результат.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
			КонецЦикла;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Объект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в переданную таблицу установленных электронных подписей служебную колонку, отражающую направление подписи.
//
// Параметры:
//  МассивПодписей			 - Массив - массив структур установленных подписей.
//  ЗначениеДляПростановки	 - Булево - значение для заполнения служебной колонки "Входящая".
//
Процедура ДополнитьМассивПодписейПризнакомНаправления(МассивПодписей, ЗначениеДляПростановки = Неопределено) Экспорт

	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		ДанныеПодписи.Вставить("Входящая", ЗначениеДляПростановки);
	КонецЦикла;

КонецПроцедуры

#Область РаботаСМаршрутамиПодписания

////////////////////////////////////////////////////////////////////////////////
// Работа с данными маршрутов

// Формирует пустое дерево маршрута подписания со всеми необходимыми колонками.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево маршрута подписания.
//
Функция ПустоеДеревоТребованийКПодписанию() Экспорт
	
	ДеревоПодписания = Новый ДеревоЗначений;
	ДеревоПодписания.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ДеревоПодписания.Колонки.Добавить("Требование", Новый ОписаниеТипов("ПеречислениеСсылка.ТребованияКПодписаниюЭД"));
	ДеревоПодписания.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоПодписания.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ДеревоПодписания.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ДополнитьДеревоПодписанияСлужебнымиКолонками(ДеревоПодписания);

	Возврат ДеревоПодписания;
	
КонецФункции

// Формирует пустую таблицу маршрута подписания со всеми необходимыми колонками.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица маршрута подписания.
//
Функция ПустаяТаблицаТребованийКПодписанию() Экспорт
	
	ТипИдентификатора = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));
	
	ТаблицаПодписания = Новый ТаблицаЗначений;
	ТаблицаПодписания.Колонки.Добавить("Идентификатор", ТипИдентификатора);
	ТаблицаПодписания.Колонки.Добавить("ИдентификаторРодителя", ТипИдентификатора);
	ТаблицаПодписания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число",
												  Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой)));
	ТаблицаПодписания.Колонки.Добавить("Требование", Новый ОписаниеТипов("ПеречислениеСсылка.ТребованияКПодписаниюЭД"));
	ТаблицаПодписания.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПодписания.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	ТаблицаПодписания.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаПодписания.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПодписания;
	
КонецФункции

// Заполняет таблицу подписания по дереву маршрута подписания.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений, Неопределено - таблица маршрута подписания. Если не задана, будет сформирована.
//  Дерево	 - ДеревоЗначений  - дерево маршрута подписания.
//
Процедура ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(Таблица, Дерево) Экспорт

	// Если таблица не задана, инициализируем ее
	Если Таблица = Неопределено Тогда
		Таблица = ПустаяТаблицаТребованийКПодписанию();
	КонецЕсли;
	
	ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(Дерево, Таблица);

КонецПроцедуры

// Выполняет проверку маршрута на корректность и формирует результаты проверки.
//
// Параметры:
//  Маршрут - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  ИспользуемыеСертификаты - Массив - элементы справочника "СертификатыКлючейЭлектроннойПодписиИШифрования",
//    используемые для подписания по переданному маршруту.
//  ВидыЭД - Массив - виды электронных документов, по которым производится проверка.
//  ПодписываемыеВидыЭДПереопределенные	 - ТаблицаЗначений - таблица, совпадающая по структуре с набором записей
//    регистра "ПодписываемыеВидыЭД". Необходима в случае, когда проверка выполняется при записи набор записей
//    этого регистра. В этом случае в ней нужно передать содержимое набора записей до изменения.
// 
// Возвращаемое значение:
//  Соответствие - ключом является вид электронного документа, а значением - ключевое имя ошибки.
//
Функция РезультатыПроверкиМаршрутаПоПараметрамНастройки(Маршрут, ИспользуемыеСертификаты, ВидыЭД, 
	ПодписываемыеВидыЭДПереопределенные = Неопределено) Экспорт 

	Результат = Новый Соответствие();
	
	// Подготовим служебные переменные в зависимости от входных параметров
	Если ТипЗнч(Маршрут) = Тип("СправочникСсылка.МаршрутыПодписания") Тогда
		ВыполнятьПроверку = НЕ Маршрут.Предопределенный;
		ТаблицаМаршрута = Неопределено;
	Иначе
		// Передана таблица требований маршрута
		ВыполнятьПроверку = Истина;
		ТаблицаМаршрута = Маршрут;
	КонецЕсли;
	
	Если ПодписываемыеВидыЭДПереопределенные = Неопределено Тогда
		ПодписываемыеВидыЭДПереопределенные = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей().Выгрузить();
	КонецЕсли;
	
	// Выполним проверку, если это необходимо
	Если ВыполнятьПроверку Тогда
		НаборыМассивовСертификатов = Новый Структура;
		
		// Получим соответствие уникальных массив сертификатов и видов документов, которые им можно подписать.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидыЭД", ВидыЭД);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ИспользуемыеСертификаты", ИспользуемыеСертификаты);
		Запрос.УстановитьПараметр("ПодписываемыеВидыЭДПереопределенные", ПодписываемыеВидыЭДПереопределенные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодписываемыеВидыЭДПереопределенные.СертификатЭП,
		|	ПодписываемыеВидыЭДПереопределенные.ВидЭД,
		|	ПодписываемыеВидыЭДПереопределенные.Использовать
		|ПОМЕСТИТЬ ПодписываемыеВидыЭДПереопределенные
		|ИЗ
		|	&ПодписываемыеВидыЭДПереопределенные КАК ПодписываемыеВидыЭДПереопределенные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЭД.Ссылка КАК ВидЭД
		|ПОМЕСТИТЬ ВидыЭД
		|ИЗ
		|	Перечисление.ВидыЭД КАК ВидыЭД
		|ГДЕ
		|	ВидыЭД.Ссылка В(&ВидыЭД)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыЭД.Ссылка
		|ИЗ
		|	Перечисление.ВидыЭДОбменСБанками КАК ВидыЭД
		|ГДЕ
		|	ВидыЭД.Ссылка В(&ВидыЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
		|ПОМЕСТИТЬ ДействующиеСертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван = ЛОЖЬ
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток <> """"
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДата
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&ИспользуемыеСертификаты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЭД.ВидЭД,
		|	ДействующиеСертификаты.Сертификат
		|ПОМЕСТИТЬ СертификатыВидыЭД
		|ИЗ
		|	ВидыЭД КАК ВидыЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеСертификаты КАК ДействующиеСертификаты
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыВидыЭД.Сертификат КАК Сертификат,
		|	ЕСТЬNULL(ПодписываемыеВидыЭДПереопределенные.Использовать, ЕСТЬNULL(ПодписываемыеВидыЭД.Использовать, ЛОЖЬ)) КАК Использовать,
		|	СертификатыВидыЭД.ВидЭД КАК ВидЭД
		|ИЗ
		|	СертификатыВидыЭД КАК СертификатыВидыЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|		ПО СертификатыВидыЭД.Сертификат = ПодписываемыеВидыЭД.СертификатЭП
		|			И СертификатыВидыЭД.ВидЭД = ПодписываемыеВидыЭД.ВидЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПодписываемыеВидыЭДПереопределенные КАК ПодписываемыеВидыЭДПереопределенные
		|		ПО СертификатыВидыЭД.Сертификат = ПодписываемыеВидыЭДПереопределенные.СертификатЭП
		|			И СертификатыВидыЭД.ВидЭД = ПодписываемыеВидыЭДПереопределенные.ВидЭД
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЭД,
		|	Сертификат
		|ИТОГИ
		|	МАКСИМУМ(Использовать)
		|ПО
		|	ВидЭД";
		ВыборкаВидовЭД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидовЭД.Следующий() Цикл
			Если Не ВыборкаВидовЭД.Использовать Тогда
				Результат.Вставить(ВыборкаВидовЭД.ВидЭД, "НетДоступныхСертификатов");
			Иначе
				МассивСертификатов = Новый Массив;
				ИдентификаторМассива = "ИД_";
				Выборка = ВыборкаВидовЭД.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Не Выборка.Использовать Тогда
						Продолжить;
					КонецЕсли;
					
					Если МассивСертификатов.Найти(Выборка.Сертификат) = Неопределено Тогда
						МассивСертификатов.Добавить(Выборка.Сертификат);
						ИдентификаторМассива = ИдентификаторМассива + Строка(Выборка.Сертификат.УникальныйИдентификатор());
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторМассива = СтрЗаменить(ИдентификаторМассива, "-", "_");
				СтруктураОписанияНабораСертификатов = Неопределено;
				Если Не НаборыМассивовСертификатов.Свойство(ИдентификаторМассива, СтруктураОписанияНабораСертификатов) Тогда
					СтруктураОписанияНабораСертификатов = Новый Структура;
					СтруктураОписанияНабораСертификатов.Вставить("Сертификаты", МассивСертификатов);
					СтруктураОписанияНабораСертификатов.Вставить("ВидыЭД", Новый Массив);
					НаборыМассивовСертификатов.Вставить(ИдентификаторМассива, СтруктураОписанияНабораСертификатов);
				КонецЕсли;
				
				СтруктураОписанияНабораСертификатов.ВидыЭД.Добавить(ВыборкаВидовЭД.ВидЭД);
			КонецЕсли;
		КонецЦикла;
		
		// Подготовим в запросе таблицу маршрута, дополненную всеми возможными сертификатами для каждого элемента маршрута.
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
		Если ТаблицаМаршрута = Неопределено Тогда
			Запрос.УстановитьПараметр("Маршрут", Маршрут);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МаршрутыПодписанияТаблицаТребований.Идентификатор,
			|	МаршрутыПодписанияТаблицаТребований.ИдентификаторРодителя,
			|	МаршрутыПодписанияТаблицаТребований.Порядок,
			|	МаршрутыПодписанияТаблицаТребований.Требование,
			|	МаршрутыПодписанияТаблицаТребований.Подписант,
			|	МаршрутыПодписанияТаблицаТребований.Сертификат
			|ПОМЕСТИТЬ ТаблицаМаршрута
			|ИЗ
			|	Справочник.МаршрутыПодписания.ТаблицаТребований КАК МаршрутыПодписанияТаблицаТребований
			|ГДЕ
			|	МаршрутыПодписанияТаблицаТребований.Ссылка = &Маршрут
			|;
			|";
		Иначе
		    Запрос.УстановитьПараметр("ТаблицаМаршрута", ТаблицаМаршрута);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаМаршрута.Идентификатор,
			|	ТаблицаМаршрута.ИдентификаторРодителя,
			|	ТаблицаМаршрута.Порядок,
			|	ТаблицаМаршрута.Требование,
			|	ТаблицаМаршрута.Подписант,
			|	ТаблицаМаршрута.Сертификат
			|ПОМЕСТИТЬ ТаблицаМаршрута
			|ИЗ
			|	&ТаблицаМаршрута КАК ТаблицаМаршрута
			|;
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ТаблицаМаршрута.Идентификатор,
		|	ТаблицаМаршрута.ИдентификаторРодителя,
		|	ТаблицаМаршрута.Порядок,
		|	ТаблицаМаршрута.Требование,
		|	ТаблицаМаршрута.Подписант,
		|	Сертификаты.Ссылка КАК Сертификат
		|ПОМЕСТИТЬ ДополненнаяТаблицаМаршрута
		|ИЗ
		|	ТаблицаМаршрута КАК ТаблицаМаршрута
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ((ТаблицаМаршрута.Подписант = Сертификаты.Пользователь
		|				ИЛИ Сертификаты.Пользователь В (&ПустойПользователь, &ПользовательНеУказан)
		|				ИЛИ ТаблицаМаршрута.Подписант = &ПустойПользователь)
		|				И (ТаблицаМаршрута.Сертификат = Сертификаты.Ссылка
		|					ИЛИ ТаблицаМаршрута.Сертификат = &ПустойСертификат))";
		Запрос.Выполнить();
		
		// Обойдем набор сертификатов и проверим для каждого набора валидность маршрута
		Для Каждого СтруктураНабораСертификатов Из НаборыМассивовСертификатов Цикл
			Запрос.УстановитьПараметр("НаборСертификатов", СтруктураНабораСертификатов.Значение.Сертификаты);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополненнаяТаблицаМаршрута.Идентификатор,
			|	ДополненнаяТаблицаМаршрута.ИдентификаторРодителя,
			|	ДополненнаяТаблицаМаршрута.Порядок,
			|	ДополненнаяТаблицаМаршрута.Требование,
			|	ДополненнаяТаблицаМаршрута.Подписант,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ДополненнаяТаблицаМаршрута.Сертификат В (&НаборСертификатов)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ТребованиеВыполнимо
			|ИЗ
			|	ДополненнаяТаблицаМаршрута КАК ДополненнаяТаблицаМаршрута
			|
			|СГРУППИРОВАТЬ ПО
			|	ДополненнаяТаблицаМаршрута.Идентификатор,
			|	ДополненнаяТаблицаМаршрута.ИдентификаторРодителя,
			|	ДополненнаяТаблицаМаршрута.Порядок,
			|	ДополненнаяТаблицаМаршрута.Требование,
			|	ДополненнаяТаблицаМаршрута.Подписант";
			ТаблицаТребований = Запрос.Выполнить().Выгрузить();
			ДеревоТребований = Неопределено;
			ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоТребований, ТаблицаТребований);
			
			ЕстьНевыполнимыеТребования = Ложь;
			ОбработатьДеревоПодписания(ДеревоТребований, Ложь, Истина, Ложь,, Истина, ЕстьНевыполнимыеТребования);
			Если ДеревоТребований.Строки.Количество() = 0 ИЛИ ЕстьНевыполнимыеТребования Тогда
				Для Каждого ВидЭД Из СтруктураНабораСертификатов.Значение.ВидыЭД Цикл
					Результат.Вставить(ВидЭД, "НетДоступныхСертификатовДляНекоторыхШаговМаршрута");
				КонецЦикла;
			ИначеЕсли ДеревоТребований.Строки[0].Вес > СтруктураНабораСертификатов.Значение.Сертификаты.Количество() Тогда
				Для Каждого ВидЭД Из СтруктураНабораСертификатов.Значение.ВидыЭД Цикл
					Результат.Вставить(ВидЭД, "ДлинаМаршрутаБольшеКоличестваДоступныхСертификатов");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Выводит ошибки, найденные в результате проверки маршрута подписания, если таковые обнаружены.
//
// Параметры:
//  РезультатыПроверки	 - Соответствие - см. описание значения, возвращаемого функцией 
//    ЭлектронноеВзаимодействиеСлужебный.РезультатыПроверкиМаршрутаПоПараметрамНастройки.
//  НастройкаОбмена		 - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка
//    на настройку.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  Отказ				 - Булево - устанавливается в Истина, если параметр РезультатыПроверки содержит ошибки.
//  ИсключаемыеОшибки	 - Строка - строка идентификаторов ошибок, перечисленных через запятую, по которым выводить 
//    сообщения не нужно.
//
Процедура ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, НастройкаОбмена, Маршрут, Отказ = Ложь,
	ИсключаемыеОшибки = "") Экспорт

	Если РезультатыПроверки.Количество() Тогда
		ТаблицаНастроек = НастройкаОбмена.ИсходящиеДокументы.Выгрузить();
		ИсключаемыеОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеОшибки,, Истина, Истина);
		
		ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
		ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
		
		ИмяТипаНастройкиОбменСБанками = "СправочникСсылка.НастройкиОбменСБанками";
		ИмяТипаПрофилиНастроекЭДО = "СправочникСсылка.ПрофилиНастроекЭДО";
		ИмяТипаСоглашенияОбИспользованииЭД = "СправочникСсылка.СоглашенияОбИспользованииЭД";
		
		Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
			Если ИсключаемыеОшибки.Найти(РезультатПроверки.Значение) = Неопределено Тогда
				ВидЭДОшибки = РезультатПроверки.Ключ;
				ИдентификаторОшибки = РезультатПроверки.Значение;
				ТипНастройки = Метаданные.НайтиПоТипу(ТипЗнч(НастройкаОбмена)).ПредставлениеОбъекта;
				
				НомерСтроки = ТаблицаНастроек.Найти(ВидЭДОшибки, "ИсходящийДокумент").НомерСтроки;
				
				Если ЕстьОбменСБанками И ТипЗнч(НастройкаОбмена) = Тип(ИмяТипаНастройкиОбменСБанками) Тогда
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанкамиСлужебный");
				ИначеЕсли ЕстьОбменСКонтрагентами И (ТипЗнч(НастройкаОбмена) = Тип(ИмяТипаПрофилиНастроекЭДО)
					ИЛИ ТипЗнч(НастройкаОбмена) = Тип(ИмяТипаСоглашенияОбИспользованииЭД)) Тогда
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
				КонецЕсли;
				
				ИмяПоляОшибки = МодульПодсистемы.ИмяПоляДляОтображенияОшибкиПоМаршруту(НастройкаОбмена, НомерСтроки);
				
				ШаблонОшибки = "%3 ""%4"": " 
					+ ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ПредставлениеОшибкиНесоответствияМаршрутаНастройкам(
						ИдентификаторОшибки);
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ВидЭДОшибки, 
					Маршрут, ТипНастройки, НастройкаОбмена);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, НастройкаОбмена, ИмяПоляОшибки, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Формирует маршрут подписания электронного документа в соответствии с настройками системы и данными документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  УсловиеПодписания	 - ПеречислениеСсылка.ТребованияКПодписаниюЭД - требование к подписанию. Используется совместно
//    с параметром "СписокПодписантов" и задает логическое условие для объединения переданных подписантов.
//  СписокПодписантов	 - Массив - подписанты маршрута. Содержит элементы типа "СправочникСсылка.Пользователи" или
//    строки табличной части таблицы подписания. Используется совместно с параметром "УсловиеПодписания".
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
//
Процедура СформироватьМаршрутПодписанияЭД(ЭлектронныйДокумент, Маршрут, УсловиеПодписания = Неопределено, 
	СписокПодписантов = Неопределено, ВесМаршрута = 0) Экспорт
	
	ТаблицаПодписания = ТаблицаМаршрутаПоПараметрам(ЭлектронныйДокумент, Маршрут, УсловиеПодписания, СписокПодписантов,
		ВесМаршрута);
	
	// Запишем полученные данные в регистр
	НаборЗаписей = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭлектронныйДокумент);
	НаборЗаписей.Загрузить(ТаблицаПодписания);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует таблицу маршрута подписания по переданным параметрам.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Маршрут              - СправочникСсылка.МаршрутыПодписания - маршрут подписания.
//  УсловиеПодписания	 - ПеречислениеСсылка.ТребованияКПодписаниюЭД - требование к подписанию. Используется совместно
//    с параметром "СписокПодписантов" и задает логическое условие для объединения переданных подписантов.
//  СписокПодписантов	 - Массив - подписанты маршрута. Содержит элементы типа "СправочникСсылка.Пользователи" или
//    строки табличной части таблицы подписания. Используется совместно с параметром "УсловиеПодписания".
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица подписания.
//
Функция ТаблицаМаршрутаПоПараметрам(ЭлектронныйДокумент, Маршрут, УсловиеПодписания = Неопределено, 
	СписокПодписантов = Неопределено, ВесМаршрута = 0) Экспорт
	
	// Подготовим таблицу маршрута
	СхемаПодписания = Маршрут.СхемаПодписания;
	Если СхемаПодписания = Перечисления.СхемыПодписанияЭД.ПоПравилам Тогда
		ТаблицаПодписания = Маршрут.ТаблицаТребований.Выгрузить();
	Иначе
		ТаблицаПодписания = ТаблицаПодписанияПоПараметрам(СхемаПодписания, УсловиеПодписания, СписокПодписантов);
	КонецЕсли;
	
	// Рассчитаем вес маршрута и проставим текущие шаги
	ДеревоПодписания = Неопределено;
	ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоПодписания, ТаблицаПодписания);
	ОбработатьДеревоПодписания(ДеревоПодписания, Ложь, Ложь, Истина,, Истина);
	
	// Конвертируем обратно в таблицу, чтобы подготовить таблицу к записи в регистр
	ТаблицаПодписания = Неопределено;
	ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(ТаблицаПодписания, ДеревоПодписания);
	ТаблицаПодписания.Колонки.Добавить("Объект", Метаданные.РегистрыСведений.СостояниеПодписанияЭД.Измерения.Объект.Тип);
	ТаблицаПодписания.ЗаполнитьЗначения(ЭлектронныйДокумент, "Объект");
	
	// Вернем вес маршрута
	Если ДеревоПодписания.Строки.Количество() > 0 Тогда
		ВесМаршрута = ДеревоПодписания.Строки[0].Вес;
	Иначе
		ВесМаршрута = 0;
	КонецЕсли;
	
	Возврат ТаблицаПодписания;
	
КонецФункции

// Обновляет маршрут подписания документа при установке очередной подписи. При этом из маршрута удаляются невыполнимые
// и уже выполненные требования / подписи.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
//  Сертификат			 - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, по которому
//    установлена подпись.
//  ВесМаршрута			 - Число - в данную переменную будет возвращено максимально возможное количество подписей.
//  Пользователь		 - СправочникСсылка.Пользователи - пользователь, установивший подпись. Необязательный: если не
//    указан, будет использован текущий пользователь.
//
Процедура ОбновитьМаршрутПриПодписании(ЭлектронныйДокумент, Знач Сертификат, ВесМаршрута = 0,
	Знач Пользователь = Неопределено) Экспорт

	Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		// Запросим дерево из регистра и посчитаем сразу логический результат по строкам
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документ", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("Сертификат", Сертификат);
		Запрос.УстановитьПараметр("Организация", Сертификат.Организация);
		Запрос.УстановитьПараметр("ПустойСертификат", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяОрганизация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПодписанияЭД.Идентификатор,
		|	ТаблицаПодписанияЭД.Порядок,
		|	ТаблицаПодписанияЭД.Требование,
		|	ТаблицаПодписанияЭД.Подписант,
		|	ТаблицаПодписанияЭД.Сертификат,
		|	ТаблицаПодписанияЭД.Организация,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблицаПодписанияЭД.Текущий
		|					И (ТаблицаПодписанияЭД.Подписант = &Пользователь ИЛИ ТаблицаПодписанияЭД.Подписант = &ПустойПользователь)
		|					И (ТаблицаПодписанияЭД.Сертификат = &Сертификат ИЛИ ТаблицаПодписанияЭД.Сертификат = &ПустойСертификат)
		|					И (ТаблицаПодписанияЭД.Организация = &Организация ИЛИ ТаблицаПодписанияЭД.Организация = &ПустаяОрганизация)
		|					И ТаблицаПодписанияЭД.Порядок = 1
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК Выполнено,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТаблицаПодписанияЭД.Текущий
		|					И (ТаблицаПодписанияЭД.Подписант = &Пользователь ИЛИ ТаблицаПодписанияЭД.Подписант = &ПустойПользователь)
		|					И (ТаблицаПодписанияЭД.Сертификат = &Сертификат ИЛИ ТаблицаПодписанияЭД.Сертификат = &ПустойСертификат)
		|					И (ТаблицаПодписанияЭД.Организация = &Организация ИЛИ ТаблицаПодписанияЭД.Организация = &ПустаяОрганизация)
		|					И ТаблицаПодписанияЭД.Порядок = 1
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ВыполненоМаксимум,
		|	ТаблицаПодписанияЭД.ИдентификаторРодителя
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК ТаблицаПодписанияЭД
		|ГДЕ
		|	ТаблицаПодписанияЭД.Объект = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПодписанияЭД.Идентификатор,
		|	ТаблицаПодписанияЭД.Порядок,
		|	ТаблицаПодписанияЭД.Требование,
		|	ТаблицаПодписанияЭД.Подписант,
		|	ТаблицаПодписанияЭД.Сертификат,
		|	ТаблицаПодписанияЭД.Организация,
		|	ТаблицаПодписанияЭД.ИдентификаторРодителя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторРодителя,
		|	Порядок";
		ТаблицаПодписания = Запрос.Выполнить().Выгрузить();
		
		// Загрузим текущую таблицу подписания в дерево
		ДеревоПодписания = Неопределено;
		ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(ДеревоПодписания, ТаблицаПодписания);
		
		// Оптимизируем дерево, удалив отработанные и заведомо ложные строки, а также проставим текущие сертификаты.
		ОбработатьДеревоПодписания(ДеревоПодписания, Ложь, Истина, Истина,, Истина);
		
		// Получим снова таблицу, дополним ее и запишем в регистр
		ТаблицаПодписания = Неопределено;
		ЗаполнитьТаблицуТребованийКПодписаниюПоДереву(ТаблицаПодписания, ДеревоПодписания);
		ТаблицаПодписания.Колонки.Добавить("Объект");
		ТаблицаПодписания.ЗаполнитьЗначения(ЭлектронныйДокумент, "Объект");
			
		НаборЗаписей = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭлектронныйДокумент);
		НаборЗаписей.Загрузить(ТаблицаПодписания);
		НаборЗаписей.Записать();
		
		// Вернем вес маршрута
		Если ДеревоПодписания.Строки.Количество() > 0 Тогда
			ВесМаршрута = ДеревоПодписания.Строки[0].Вес;
		Иначе 
			ВесМаршрута = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Определяет, все ли необходимые подписи на документе установлены.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы, ДокументСсылка.СообщениеОбменСБанками - ссылка на
//    объект, для которого формируется маршрут подписания.
// 
// Возвращаемое значение:
//  Булево - Истина, все необходимые для выполнения маршрута подписания подписи установлены.
//
Функция МаршрутПодписанияЗавершен(ЭлектронныйДокумент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеПодписанияДокумента.Объект КАК Документ
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияДокумента
	|ГДЕ
	|	СостояниеПодписанияДокумента.Объект = &ЭлектронныйДокумент";
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

// Очищает маршрут подписания документа. Используется, когда процесс подписания прекращается в
//   нештатном режиме (не при установке очередной подписи).
//
// Параметры:
//  ЭлектронныеДокументы - Массив - подписываемые электронные документы.
//                       - СправочникСсылка.ЭДПрисоединенныеФайлы - подписываемый электронный документ.
//                       - ДокументСсылка.СообщениеОбменСБанками - подписываемый электронный документ.
//
Процедура ОчиститьМаршрутПодписания(ЭлектронныеДокументы) Экспорт

	Если ТипЗнч(ЭлектронныеДокументы) = Тип("Массив") Тогда
		МассивДокументов = ЭлектронныеДокументы;
	Иначе
	    МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЭлектронныеДокументы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", МассивДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеПодписанияЭД.Объект
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|ГДЕ
	|	СостояниеПодписанияЭД.Объект В(&ЭлектронныеДокументы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейМаршрута = РегистрыСведений.СостояниеПодписанияЭД.СоздатьНаборЗаписей();
		НаборЗаписейМаршрута.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписейМаршрута.Записать();
	КонецЦикла;

КонецПроцедуры

// Помещает во временное хранилище настройки выбора маршрута подписания.
//
// Параметры:
//  Владелец						 - УправляемаяФорма, Строка - уникальный идентификатор формы, во временное хранилище которой надо
//    поместить данные и вернуть новый адрес. Или адрес во временном хранилище, по которому надо поместить данные.
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
//  ДоступныеДляВыбораСертификаты	 - Массив - содержит сертификаты, которыми можно подписывать документ в соответствии
//    с настройками.
// 
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция СохранитьНастройкиВыбораМаршрута(Владелец, ЗадаватьМаршрутВручную, Подписанты = Неопределено, 
	ФиксированныйМаршрут = Неопределено, ДоступныеДляВыбораСертификаты = Неопределено) Экспорт

	Настройки = НовыеНастройкиВыбораМаршрута(ЗадаватьМаршрутВручную,
		Подписанты, ФиксированныйМаршрут, ДоступныеДляВыбораСертификаты);
	УИДВладельца = ?(ТипЗнч(Владелец) = Тип("УправляемаяФорма"), Владелец.УникальныйИдентификатор, Владелец);
		
	Возврат ПоместитьВоВременноеХранилище(Настройки, УИДВладельца);

КонецФункции 

// Формирует представление параметров маршрута подписания документа.
//
// Параметры:
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
// 
// Возвращаемое значение:
//  Строка - строковое представление параметров маршрута.
//
Функция ПредставлениеМаршрутаВыбранногоВДокументе(ЗадаватьМаршрутВручную, Подписанты = Неопределено, 
	ФиксированныйМаршрут = Неопределено) Экспорт

	Если ЗадаватьМаршрутВручную Тогда
		ПредставлениеНастроек = СтрШаблон(НСтр("ru = 'Подписи по списку (%1)'"), Подписанты.Количество());
	Иначе
		Если Не ЗначениеЗаполнено(ФиксированныйМаршрут) Тогда
			ПредставлениеНастроек = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ПредставлениеНеВыбранногоМаршрута();
		Иначе 
			ПредставлениеНастроек = ФиксированныйМаршрут;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеНастроек;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Отрисовка дерева

// Заполняет на форме дерево маршрута подписания.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма, на которой нужно отрисовать дерево маршрута подписания.
//  ИсточникДанных		 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//                       - ДокументСсылка.СообщениеОбменСБанками - ссылка на электронный документ.
//                       - ТаблицаЗначений - готовая таблица маршрута подписания.
//  ИмяРеквизитаДерева	 - Строка - имя реквизита дерева маршрута на форме.
//  ИмяОсновногоРеквизита- Строка - имя реквизита дерева, который будет выводиться в основной колонке.
//
Процедура ЗаполнитьДеревоМаршрутаНаФорме(Форма, ИсточникДанных = Неопределено, ИмяРеквизитаДерева = "ДеревоТребований",
	ИмяОсновногоРеквизита = "Подписант") Экспорт
	
	// Подготовим таблицу маршрута в зависимости от типа переданного значения
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ИсточникДанных) Тогда
		// Передана ссылка на документ-владелец маршрута
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", ИсточникДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СостояниеПодписанияЭД.Идентификатор КАК Идентификатор,
		|	СостояниеПодписанияЭД.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	СостояниеПодписанияЭД.Порядок КАК Порядок,
		|	СостояниеПодписанияЭД.Требование,
		|	СостояниеПодписанияЭД.Подписант,
		|	СостояниеПодписанияЭД.Сертификат,
		|	СостояниеПодписанияЭД.Организация
		|ИЗ
		|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
		|ГДЕ
		|	СостояниеПодписанияЭД.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторРодителя,
		|	Порядок";
		ТаблицаМаршрута = Запрос.Выполнить().Выгрузить();
	Иначе
		// Передана готовая таблица маршрута
		ТаблицаМаршрута = ИсточникДанных;
	КонецЕсли;
	
	// Заполним дерево из табличной части
	Дерево = Форма.РеквизитФормыВЗначение(ИмяРеквизитаДерева);
	Дерево.Строки.Очистить();
	ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(Дерево, ТаблицаМаршрута);
	Форма.ЗначениеВРеквизитФормы(Дерево, ИмяРеквизитаДерева);
	
	// Инициализируем вспомогательные колонки в дереве
	ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(Форма[ИмяРеквизитаДерева], ИмяОсновногоРеквизита);

КонецПроцедуры

// Устанавливает у дерева маршрута на форме условное оформление.
//
// Параметры:
//  Форма				               - УправляемаяФорма - форма, содержащая дерево маршрута подписания.
//  ИмяРеквизитаДерева	               - Строка - имя реквизита дерева маршрута на форме.
//  ОформитьКолонкуПодписант           - Булево - признак необходимости установки условного оформления для колонки
//    "Подписант".
//  ОформитьВидимостьКолонкиСертификат - Булево - признак необходимости установки условного оформления для колонки
//    "Сертификат".
//
Процедура УстановитьУсловноеОформлениеДереваМаршрута(Форма, ИмяРеквизитаДерева = "ДеревоТребований", 
	ОформитьКолонкуПодписант = Истина, ОформитьВидимостьКолонкиСертификат = Истина) Экспорт

	// Видимость колонки "Сертификат"
	Если ОформитьВидимостьКолонкиСертификат Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "Сертификат");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".ЭтоСтрокаУсловия");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	КонецЕсли;
	
	// Текст пустой колонки "Сертификат"
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "Сертификат");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".Сертификат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'любым сертификатом'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Текст пустой колонки "Подписант"
	Если ОформитьКолонкуПодписант Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + "ОсновноеЗначение");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".Подписант");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизитаДерева + ".ЭтоСтрокаУсловия");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'любой пользователь'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АвтоматизированноеТестирование
// Выводит область ячеек в табличный документ, предварительно присвоив имена параметризованным ячейкам.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - результирующий документ.
//  ОбластьМакета		 - ТабличныйДокумент - табличный документ для вывода.
//  ПрефиксДляИмен		 - Строка - префикс для имен ячеек (рекомендуется передавать имя области).
//  ИндексПрефикса		 - Число - индекс или номер строки, который будет прибавлен к префиксу 
//                                 (используется для областей, входящих в таблицы).
//  Уровень				 - Число - см. ТабличныйДокумент.Вывести.
//  ИмяГруппы			 - Строка - см. ТабличныйДокумент.Вывести.
//  Открыта				 - Булево - см. ТабличныйДокумент.Вывести.
//
Процедура ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Знач ОбластьМакета, Знач ПрефиксДляИмен, 
	Знач ИндексПрефикса = "", Уровень = Неопределено, ИмяГруппы = Неопределено, Открыта = Истина) Экспорт

	ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, ПрефиксДляИмен, ИндексПрефикса);
 
	ТабличныйДокумент.Вывести(ОбластьМакета, Уровень, ИмяГруппы, Открыта);

КонецПроцедуры

// Присоединяет область ячеек к табличному документу, предварительно присвоив имена параметризованным ячейкам.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - результирующий документ.
//  ОбластьМакета		 - ТабличныйДокумент - табличный документ для вывода.
//  ПрефиксДляИмен		 - Строка - префикс для имен ячеек (рекомендуется передавать имя области).
//  ИндексПрефикса		 - Число - индекс или номер строки, который будет прибавлен к префиксу 
//                                 (используется для областей, входящих в таблицы).
//  Уровень				 - Число - см. ТабличныйДокумент.Присоединить.
//  ИмяГруппы			 - Строка - см. ТабличныйДокумент.Присоединить.
//  Открыта				 - Булево - см. ТабличныйДокумент.Присоединить.
//
Процедура ПрисоединитьОбластьКТабличномуДокументу(ТабличныйДокумент, Знач ОбластьМакета, Знач ПрефиксДляИмен, 
	Знач ИндексПрефикса = "", Уровень = Неопределено, ИмяГруппы = Неопределено, Открыта = Истина) Экспорт

	ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, ПрефиксДляИмен, ИндексПрефикса);
 
	ТабличныйДокумент.Присоединить(ОбластьМакета, Уровень, ИмяГруппы, Открыта);

КонецПроцедуры

// Производит вставку области ячеек в табличный документ, предварительно присвоив имена параметризованным ячейкам.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - результирующий документ.
//  ИсходнаяОбласть		 - ТабличныйДокумент - табличный документ для вставки.
//  ПрефиксДляИмен		 - Строка - префикс для имен ячеек (рекомендуется передавать имя области).
//  ИндексПрефикса		 - Число - индекс или номер строки, который будет прибавлен к префиксу 
//                                 (используется для областей, входящих в таблицы).
//  ОбластьПриемник		 - ОбластьЯчеекТабличногоДокумента - см. ТабличныйДокумент.ВставитьОбласть.
//  Сдвиг			     - ТипСмещенияТабличногоДокумента - см. ТабличныйДокумент.ВставитьОбласть.
//  ЗаполнятьПараметры	 - Булево - см. ТабличныйДокумент.ВставитьОбласть.
//
Процедура ВставитьОбластьВТабличныйДокумент(ТабличныйДокумент, Знач ИсходнаяОбласть, Знач ПрефиксДляИмен,
	Знач ИндексПрефикса = "", Знач ОбластьПриемник = Неопределено, Сдвиг = Неопределено, ЗаполнятьПараметры = Истина) Экспорт

	ПрисвоитьИменаЯчейкамТабличногоДокумента(ИсходнаяОбласть, ПрефиксДляИмен, ИндексПрефикса);
 
	ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбласть.Область(), ОбластьПриемник, Сдвиг, ЗаполнятьПараметры);

КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомДанных

// Создает пустой объект ДереваРазбора.
//
// Возвращаемое значение:
//   ДеревоЗначений - пустое дерево с колонками.
//
Функция ИнициализироватьДеревоРазбора() Экспорт
	
	ДеревоРазбора = Новый ДеревоЗначений;
	ДеревоРазбора.Колонки.Добавить("ТипОбъекта");
	ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");
	ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");
	ДеревоРазбора.Колонки.Добавить("ИндексСтроки");
	ДеревоРазбора.Колонки.Добавить("Реквизит");
	ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");
	ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");
	ДеревоРазбора.Колонки.Добавить("ВидЭД");
	ДеревоРазбора.Колонки.Добавить("ИД");
	ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");
	ДеревоРазбора.Колонки.Добавить("ДопДанные");
	
	ДеревоРазбора.Колонки.Добавить("ТипЭлементаВерсииЭД");
	
	Возврат ДеревоРазбора;
	
КонецФункции

// Находит или создает новый тип в дереве разбора.
//
// Параметры:
//    ДеревоРазбора - ДеревоЗначений - исходное дерево значений;
//    ЗначениеТипаОбъекта - Произвольный - искомый тип объекта.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - найденная или созданная строка.
//
Функция НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ЗначениеТипаОбъекта) Экспорт
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();
		НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;
		НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

// Добавляет реквизит в шапку объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - текущая строка дерева значений;
//  ИмяРеквизита - Строка - название добавляемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение добавляемого реквизита;
//  СсылкаНаОбъект - Произвольный - ссылка на связанный объект информационной базы.
//
Процедура ДобавитьРеквизитШапкиОбъекта(СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено) Экспорт
	
	НовСтрока = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяРеквизита;
	НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в табличную часть объекта.
//
// Параметры:
//  СтрокаЭлементов - СтрокаДереваЗначений - строка дерева значений, в которую помещаются дополнительные реквизиты;
//  ИмяТЧ - Строка - название табличной части в дереве значений;
//  СписокРеквизитов - СписокЗначений - список помещаемых реквизитов.
//
Процедура ДобавитьРеквизитыТЧОбъекта(СтрокаЭлементов, ИмяТЧ, СписокРеквизитов) Экспорт
	
	// Добавить в реквизиты ТЧ ОбменСКонтрагентами
	НовСтрока          = СтрокаЭлементов.Строки.Добавить();
	НовСтрока.Реквизит = ИмяТЧ;
	Для Каждого ТекЭлСписка Из СписокРеквизитов Цикл
		НовСтрокаТЧ                   = НовСтрока.Строки.Добавить();
		НовСтрокаТЧ.Реквизит          = ТекЭлСписка.Представление;
		НовСтрокаТЧ.ЗначениеРеквизита = ТекЭлСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет дополнительные реквизиты в дерево данных.
//
// Параметры:
//  СтрокаДереваРазбора - СтрокаДереваЗначений - строка дерева, в которую помещаются дополнительные реквизиты;
//  ДопРеквизиты - Структура - коллекция помещаемых дополнительных реквизитов;
//  ДеревоРазбора - ДеревоЗначений - исходное дерево данных;
//  Отказ - Булево - признак возникновения ошибки выполнения метода.
//
Процедура ДобавитьДопРеквизиты(СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь) Экспорт
	
	Для Каждого ТекЭл Из ДопРеквизиты Цикл
		
		Если НЕ ТипЗнч(ТекЭл.Значение) = Тип("ОбъектXDTO") Тогда
					
			Если ЗначениеЗаполнено(ТекЭл.Значение) Тогда
				Если ТипЗнч(ТекЭл.Значение) = Тип("Массив") И НЕ ТекЭл.Ключ = "ЗначенияСвойств" И НЕ ТекЭл.Ключ = "Картинки" Тогда
					Для Каждого ТекЭлМассива Из ТекЭл.Значение Цикл
						Если ТипЗнч(ТекЭлМассива) = Тип("Структура") Тогда
							ДобавитьДопРеквизиты(СтрокаДереваРазбора, ТекЭлМассива, ДеревоРазбора, Отказ);
						КонецЕсли;
					КонецЦикла;
				Иначе
					// Поищем, возможно уже есть такой реквизит с таким же значением.
					НайденнаяСтрока = СтрокаДереваРазбора.Строки.Найти(ТекЭл.Ключ, "Реквизит", Истина);
					Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.ЗначениеРеквизита = ТекЭл.Значение Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = СтрокаДереваРазбора.Строки.Добавить();
					НовСтрока.Реквизит          = ТекЭл.Ключ;
					НовСтрока.ЗначениеРеквизита = ТекЭл.Значение;
					// Если ИндексСтроки, то попытка найти СсылкуНаОбъект.
					Если ТипЗнч(НовСтрока.ЗначениеРеквизита) = Тип("Строка") Тогда
						НайденнаяСтрока = ДеревоРазбора.Строки.Найти(НовСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если НайденнаяСтрока <> Неопределено Тогда
							Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
								НовСтрока.СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет тип объекта по текстовому представлению.
//
// Параметры:
//  ОписаниеТипаОбъекта - Строка - текстовое представление типа объекта.
//
// Возвращаемое значение:
//  Строка - тип справочника.
//
Функция ТипОбъекта(ОписаниеТипаОбъекта) Экспорт
	
	ТипОбъекта = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ОписаниеТипаОбъекта);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ТипОбъекта = "СправочникСсылка." + ИмяПрикладногоСправочника;
	КонецЕсли;
	
	Возврат ТипОбъекта;
	
КонецФункции

// Значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Произвольный - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина,
	НайденнаяСтрока = Неопределено) Экспорт
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда		
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Добавляет значение в дерево данных.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево, в которое помещается новое значение;
//  ИмяРеквизита - Строка - название помещаемого реквизита;
//  ЗначениеРеквизита - Произвольный - значение помещаемого реквизита.
//
Процедура ДобавитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	СтрокаДерева = ДеревоДанных.Строки.Найти(ИмяРеквизита);
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоДанных.Строки.Добавить();
	КонецЕсли;
	НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
	СтрокаДерева.ПолныйПуть = ИмяРеквизита;
	СтрокаДерева["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	СтрокаДерева.Значение = ЗначениеРеквизита;

КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева
// Параметры:
//  ДеревоДанных                            - деревоЗначений - дерево с данными.
//  Ошибки                                  - Массив - ошибки, накопленные за время обработки. Элементами массива являются структуры.
//                                                     Состав структур см. в ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки().
//  ДатаПоФорматуФНС                        - Булево - если установлена в Истину, значения типа "Дата" будут проверяться дополнительно
//                                                     на вхождение в диапазон лет 1900-2099 (требование схем ФНС).
//
Процедура ПроверитьЗаполнениеРеквизитовДереваДанныхРекурсивно(ДеревоДанных, Ошибки, ДатаПоФорматуФНС = Ложь) Экспорт
	
	ПроверитьЗаполнениеРеквизитовДереваДанныхСлужебная(ДеревоДанных, Ошибки, Ложь,,, ДатаПоФорматуФНС);
	
КонецПроцедуры

// Добавляет в ошибку в хранилище накопленных ошибок.
//
// Параметры:
//  Ошибки			 				 - Массив - ошибки, накопленные за время обработки. Элементами массива являются структуры.
//                                     Состав структур см. в ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки().
//  СтрокаДерева			 		 - СтрокаДереваЗначений - строка дерева электронного документа, по реквизиту которой
//                                     фиксируется ошибка.
//  ТекстОшибки				 		 - Строка - текст фиксируемой ошибки.
//  ПодставлятьИмяРеквизита	 		 - Булево - если Истина, в начало сообщения об ошибке будет подставлено
//                                     прикладное имя реквизита.
//  НомерСтрокиДанных		 		 - Число - если указана, будет подставлена в имя реквизита.
//  ПрикладноеПредставлениеРеквизита - Строка - если указано, представление реквизита не будет получаться по строке дерева - 
//                                     будет использовано указанное представление.
//
Процедура ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки, ПодставлятьИмяРеквизита = Истина,
	НомерСтрокиДанных = Неопределено, ПрикладноеПредставлениеРеквизита = "") Экспорт
	
	// Даже если по каким-то причинам не нашли строку дерева, все равно выдаем ошибку. Лучше выдать неполное сообщение
	// об ошибке, чем пропустить некорректный документ.
	Если СтрокаДерева <> Неопределено Тогда
		ПроверитьЗаполненностьПараметровОбработкиОшибок(СтрокаДерева);
		
		ПараметрыОбработкиОшибки = ПараметрыОшибкиПоСтрокеДерева(СтрокаДерева);
	
		Если ПодставлятьИмяРеквизита Тогда
			Если Не ЗначениеЗаполнено(ПрикладноеПредставлениеРеквизита) Тогда
				ПрикладноеПредставлениеРеквизита = ПрикладноеПредставлениеПоСтрокеДерева(СтрокаДерева, НомерСтрокиДанных);
			КонецЕсли;

			ТекстОшибки = СтрШаблон("%1: %2", ПрикладноеПредставлениеРеквизита, ТекстОшибки);
		КонецЕсли;
	Иначе
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки();
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ДобавитьОшибку(Ошибки, ТекстОшибки, ПараметрыОбработкиОшибки);

КонецПроцедуры

#КонецОбласти

#Область ПроизводительностьСлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Производительность - модуль контроля производительности конфигурации.
// Методы поддерживаются до момента переноса в 1С:Библиотека стандартных подсистем.
// Не удалять методы из области Производительность.
////////////////////////////////////////////////////////////////////////////////

// Начать замер времени на сервере при помощи подсистемы "Оценка производительности".
// Упрощает замеры длительных операций, обрабатывающих массивы однотипных данных.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//
// Возвращаемое значение:
//  Структура - используется в дальнейших вызовах процедур и функций этого модуля.
//              Описание полей доступно в комментариях функции СтруктураОписанияЗамера().
//  Неопределено - возвращается, если механизм оценки производительности отключен.
//
Функция НачатьЗамерВремени(КлючеваяОперация) Экспорт
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		Возврат СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецФункции

// Завершить замер начатый НачатьЗамерВремени() и сохранить его результат.
// Добавляет к длительности замера время обработки единицы данных и сохраняет замер.
//
// Может вызываться однократно с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗакончитьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных);
		ВремяНачала = ОписаниеЗамера.ВремяНачала - ОписаниеЗамера.СуммарноеВремя;
		ДополнительнаяИнформация = Новый Соответствие;
		ДополнительнаяИнформация["Длительная"] = Истина;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(ОписаниеЗамера.КлючеваяОперация,
			ВремяНачала,
			ОписаниеЗамера.Вес,
			ДополнительнаяИнформация);
		ОписаниеЗамера.ЗамерЗавершен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Зафиксировать промежуточное время замера с учетом количества обработанных данных.
// Добавляет к длительности замера время обработки единицы данных.
//
// Может вызываться неограниченное количество раз после НачатьЗамерВремени(),
// но не после вызова ЗакончитьЗамерВремени() с тем же значением параметра ОписаниеЗамера.
//
// Параметры:
//  ОписаниеЗамера - Структура - полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных, обработанных
//                     после вызова НачатьЗамерВремени() или ЗафиксироватьЗамерВремени().
//                     Если однотипных данных нет, то параметр не нужно указывать, он будет равен 1.
//
Процедура ЗафиксироватьЗамерВремени(ОписаниеЗамера, КоличествоДанных = 1) Экспорт
	
	Если ОписаниеЗамера <> Неопределено Тогда
		ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если КоличествоДанных = 0 Тогда
			КоличествоДанных = 1;
		КонецЕсли;
		
		ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных);
		Интервал = ТекущееВремя - ОписаниеЗамера.ВремяНачала;
		УдельноеВремя = Интервал / КоличествоДанных;
		ОписаниеЗамера.СуммарноеВремя = ОписаниеЗамера.СуммарноеВремя + УдельноеВремя;
		ОписаниеЗамера.Вес = ОписаниеЗамера.Вес + КоличествоДанных;
		ОписаниеЗамера.ВремяНачала = ТекущееВремя;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Расшифровка кода состояния HTTP.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервера.
//
// Возвращаемое значение:
//  Строка - расшифровка кода состояния.
//
Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'Сервер обнаружил в запросе клиента синтаксическую ошибку.'"));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'Неверные данные аутентификации.'"));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'У клиента нет доступа к ресурсу.'"));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'На сервере нет ресурса по указанному URI.'"));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'Указанный клиентом метод нельзя применить к текущему ресурсу.'"));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'Запрошенный URI не может удовлетворить переданным в заголовке характеристикам.'"));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'Для доступа к серверу требуется аутентификация для прокси-сервера.'"));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'"));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'"));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'Ресурс был удален и теперь недоступен.'"));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'Не указан объем передаваемых данных в заголовке.'"));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'Ни одно из условных полей заголовка запроса не было выполнено.'"));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'Сервер отказался обработать запрос по причине слишком большого размера тела запроса.'"));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'Сервер не может обработать запрос из-за слишком длинного указанного URL.'"));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'Сервер отказывается работать с указанным типом данных при данном методе.'"));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'Имеется логическая ошибка, из-за которой невозможно произвести операцию.'"));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'Целевой ресурс из запроса заблокирован от применения к нему указанного метода.'"));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'Клиенту на необходимость обновить протокол.'"));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'Клиент попытался отправить слишком много запросов за короткое время.'"));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'Превышена допустимая длина заголовков.'"));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'Запрашиваемый адрес недоступен.'"));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'Поступило недостаточно информации.'"));
	СоответствиеКодов.Вставить(451, НСтр("ru = 'Доступ к ресурсу закрыт по юридическим причинам.'"));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервера.'"));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'Сервер не поддерживает возможностей, необходимых для обработки запроса.'"));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера.'"));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'Сервер временно не имеет возможности обрабатывать запросы по техническим причинам.'"));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'Сервер в роли шлюза или прокси-сервера не дождался ответа от вышестоящего сервера для завершения текущего запроса.'"));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP.'"));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'Не хватает места для выполнения текущего запроса.'"));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'На сервере отсутствует расширение, которое желает использовать клиент.'"));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'Необходимо авторизоваться в сети провайдера.'"));
	
	Возврат СоответствиеКодов.Получить(КодСостояния);
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если СтрНайти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

// Создает соединение с сервером в интернет.
//
// Параметры:
//  АдресСервера - Строка - URI
//  Таймаут - Число - Определяет время ожидания осуществляемого соединения и операций, в секундах. 0 - таймаут не установлен.
// 
// Возвращаемое значение:
// HTTPСоединение - предназначен для работы с файлами на http-серверах.
//
Функция СоединениеССервером(АдресСервера, Таймаут)
	
	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;

КонецФункции

// Создает пустую таблицу для размещения в нее команд ЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд ЭДО:
//
//  * Идентификатор - Строка - Идентификатор команды ЭДО, по которому менеджер ЭДО определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//                  - Массив - список идентификаторов команд ЭДО.
//
//  * Представление - Строка            - Представление команды в меню ЭДО. 
//                                         Пример: "Просмотр документа".
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление.
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню ЭДО осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню ЭДО.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда ЭДО будет отображаться во
//                                        всех формах объекта, где встроена подсистема ЭДО.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду ЭДО. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "ЭДО". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды ЭДО.
//
Функция СоздатьКоллекциюКомандЭДО()
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("Отображение", Новый ОписаниеТипов("ОтображениеКнопки"));
	
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("РежимИспользованияПараметра", Новый ОписаниеТипов("РежимИспользованияПараметраКоманды"));
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// Для служебного использования.
	Результат.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключена", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("ТолькоВоВсехДействиях", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Недоступна", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

// Создает подменю "ЭДО" на форме и добавляет в него команды ЭДО.
// Если команда ЭДО одна, то вместо подменю добавляется кнопка с названием печатной формы.
Процедура ДобавитьКомандыЭДО(Форма, КомандыЭДО, Знач МестоРазмещенияКоманд = Неопределено)
	
	МестоРазмещения = МестоРазмещенияКоманд;
	Для Каждого ОписаниеКомандыЭДО Из КомандыЭДО Цикл
		
		// Отключение команды загрузки ЭД без ЭП в формах документов.
		Если ОписаниеКомандыЭДО.Идентификатор = "ЗагрузитьЧерезБизнесСеть" Тогда
			МассивРеквизитов = Форма.ПолучитьРеквизиты();
			ЭтоФормаОбъекта = Ложь;
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Если Реквизит.Имя = "Объект" Тогда
					ЭтоФормаОбъекта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоФормаОбъекта Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НомерКоманды = ОписаниеКомандыЭДО.Владелец().Индекс(ОписаниеКомандыЭДО);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + ОписаниеКомандыЭДО.Идентификатор + НомерКоманды;
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуЭДО";
		КомандаФормы.Заголовок = ОписаниеКомандыЭДО.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыЭДО.Отображение) Тогда 
			КомандаФормы.Отображение = ОписаниеКомандыЭДО.Отображение;
		Иначе 
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеКомандыЭДО.Картинка) Тогда
			КомандаФормы.Картинка = ОписаниеКомандыЭДО.Картинка;
		КонецЕсли;
		
		ОписаниеКомандыЭДО.ИмяКомандыНаФорме = ИмяКоманды;
		
		МестоРазмещенияИмя = МестоРазмещенияКоманд.Имя + ОписаниеКомандыЭДО.МестоРазмещения;
		Если Форма.Элементы.Найти(МестоРазмещенияИмя) = Неопределено Тогда
			МестоРазмещения = Форма.Элементы.Добавить(МестоРазмещенияИмя, Тип("ГруппаФормы"), МестоРазмещения);
			МестоРазмещения.Вид = ВидГруппыФормы.ГруппаКнопок;
			МестоРазмещения.Заголовок = СтрЗаменить(ОписаниеКомандыЭДО.МестоРазмещения, "КомандыЭДО", "");
		КонецЕсли; 
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Видимость = Не ОписаниеКомандыЭДО.Недоступна;
		НовыйЭлемент.ТолькоВоВсехДействиях = ОписаниеКомандыЭДО.ТолькоВоВсехДействиях;
		
	КонецЦикла;
	
КонецПроцедуры

// Фильтрует список команд ЭДО в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандЭДОПоФункциональнымОпциям(КомандыЭДО, Форма = Неопределено)
	Для НомерКоманды = -КомандыЭДО.Количество() + 1 По 0 Цикл
		ОписаниеКомандыЭДО = КомандыЭДО[-НомерКоманды];
		ФункциональныеОпцииКомандыЭДО = СтрРазделить(ОписаниеКомандыЭДО.ФункциональныеОпции, ", ", Ложь);
		ВидимостьКоманды = ФункциональныеОпцииКомандыЭДО.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыЭДО Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыЭДО.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

#Область РаботаСМаршрутамиПодписанияСлужебныеПроцедурыИФункции

Процедура ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(СтрокиТаблицы, РодительскийУзелДерева, Таблица)

	ПодчиненныеУзлы = РодительскийУзелДерева.Строки;
	
	// В этих переменных будем хранить результаты подсчетов по истинности узлов
	ВыполненоМинимум = Истина;
	ВыполненоМаксимум = Ложь;
	ВыполненоОбщийМаксимум = Ложь;
	
	// В этих переменных будем хранить результаты подсчетов по истинности узлов
	ВыполнимоМинимум = Истина;
	ВыполнимоМаксимум = Ложь;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл		
		НовыйУзел = ПодчиненныеУзлы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУзел, СтрокаТаблицы);

		ДочерниеСтроки = Таблица.НайтиСтроки(Новый Структура("ИдентификаторРодителя", СтрокаТаблицы.Идентификатор));
		ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(ДочерниеСтроки, НовыйУзел, Таблица);
		
		// Рассчитаем истинность
		Если НовыйУзел.Выполнено < ВыполненоМинимум Тогда
			ВыполненоМинимум = НовыйУзел.Выполнено;
		КонецЕсли;
		
		Если НовыйУзел.Выполнено > ВыполненоМаксимум Тогда
			ВыполненоМаксимум = НовыйУзел.Выполнено;
		КонецЕсли;
		
		Если НовыйУзел.Выполнено ИЛИ НовыйУзел.ВыполненоМаксимум Тогда
			ВыполненоОбщийМаксимум = Истина;
		КонецЕсли;
		
		// Рассчитаем выполнимость
		Если ВыполнимоМинимум > НовыйУзел.ТребованиеВыполнимо Тогда
			ВыполнимоМинимум = НовыйУзел.ТребованиеВыполнимо;
		КонецЕсли;
		
		Если ВыполнимоМаксимум < НовыйУзел.ТребованиеВыполнимо Тогда
			ВыполнимоМаксимум = НовыйУзел.ТребованиеВыполнимо;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(РодительскийУзелДерева) = Тип("СтрокаДереваЗначений") 
			И ЗначениеЗаполнено(РодительскийУзелДерева.Требование) Тогда
		РодительскийУзелДерева.Выполнено = ?(РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, 
			ВыполненоМаксимум, ВыполненоМинимум);
		РодительскийУзелДерева.ВыполненоМаксимум = ВыполненоОбщийМаксимум;
		
		РодительскийУзелДерева.ТребованиеВыполнимо = ?(
			РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, ВыполнимоМаксимум, ВыполнимоМинимум);
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(РодительскийУзелДерева, Таблица)

	Если ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") Тогда
		ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		УчитыватьПорядок = Ложь;
	Иначе
		ИдентификаторРодителя = РодительскийУзелДерева.Идентификатор;
		УчитыватьПорядок = РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ПоПорядку;
	КонецЕсли;
	
	ПодчиненныеУзлы = РодительскийУзелДерева.Строки;
	Порядок = 1;
	Для Каждого Узел Из ПодчиненныеУзлы Цикл
		НоваяСтрокаТаблицы = Таблица.Добавить();
		Если Не ЗначениеЗаполнено(Узел.Идентификатор) Тогда
			Узел.Идентификатор = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Узел);
		НоваяСтрокаТаблицы.ИдентификаторРодителя = ИдентификаторРодителя;
		НоваяСтрокаТаблицы.Порядок = Порядок;
		
		Если УчитыватьПорядок Тогда
			Порядок = Порядок + 1;	
		КонецЕсли;
		
		ПрочитатьСтрокиДереваВТаблицуТребованийКПодписанию(Узел, Таблица);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьДеревоПодписания(РодительскийУзелДерева, УдалятьНевыполнимыеТребования, Оптимизировать,
	ПроставитьТекущие, Знач УдалятьЛожные = Ложь, ПросчитатьВес = Ложь, ЕстьНевыполнимыеТребования = Ложь)

	Если ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") ИЛИ ЗначениеЗаполнено(РодительскийУзелДерева.Требование) Тогда
		СтрокиДляУдаления = Новый Массив;
		
		ПроставлятьТекущиеВоВсехСтроках = ТипЗнч(РодительскийУзелДерева) = Тип("ДеревоЗначений") 
			ИЛИ РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.И
			ИЛИ РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
		ТекущийПроставлен = Ложь;
		
		ВесСумма = 0;
		ВесМаксимум = 0;
		Для Каждого СтрокаДерева Из РодительскийУзелДерева.Строки Цикл
			Если НЕ СтрокаДерева.ТребованиеВыполнимо Тогда
				ЕстьНевыполнимыеТребования = Истина;
			КонецЕсли;
			
			Если Оптимизировать И ((УдалятьЛожные И НЕ СтрокаДерева.ВыполненоМаксимум) ИЛИ СтрокаДерева.Выполнено)
					ИЛИ УдалятьНевыполнимыеТребования И НЕ СтрокаДерева.ТребованиеВыполнимо Тогда
				СтрокиДляУдаления.Добавить(СтрокаДерева);
			Иначе
				ТекУдалятьЛожные = СтрокаДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ 
					И СтрокаДерева.ВыполненоМаксимум;
				ОбработатьДеревоПодписания(СтрокаДерева, УдалятьНевыполнимыеТребования, Оптимизировать, 
					ПроставитьТекущие, ТекУдалятьЛожные, ПросчитатьВес, ЕстьНевыполнимыеТребования);
				
				Если НЕ ЗначениеЗаполнено(СтрокаДерева.Требование) И Не ТекущийПроставлен Тогда
					СтрокаДерева.Текущий = Истина;
					
					Если НЕ ПроставлятьТекущиеВоВсехСтроках Тогда
						ТекущийПроставлен = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ВесСумма = ВесСумма + СтрокаДерева.Вес;
				Если СтрокаДерева.Вес > ВесМаксимум Тогда
					ВесМаксимум = СтрокаДерева.Вес;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			РодительскийУзелДерева.Строки.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Если ПросчитатьВес И ТипЗнч(РодительскийУзелДерева) <> Тип("ДеревоЗначений") Тогда
			РодительскийУзелДерева.Вес = ?(РодительскийУзелДерева.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ, 
				ВесМаксимум, ВесСумма);
		КонецЕсли;
	Иначе // это строка подписанта
		Если ПросчитатьВес Тогда
			РодительскийУзелДерева.Вес = 1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(УзелДерева, ИмяОсновногоРеквизита = "Подписант")

	СтрокиДерева = УзелДерева.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
	    ЗаполнитьВспомогательныеКолонкиВДеревеМаршрута(СтрокаДерева, ИмяОсновногоРеквизита);
		ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ЗаполнитьСлужебныеРеквизитыСтрокиДерева(СтрокаДерева, ИмяОсновногоРеквизита);
	КонецЦикла;

КонецПроцедуры

Функция ТаблицаПодписанияПоПараметрам(СхемаПодписания, УсловиеПодписания, СписокПодписантов)

	Результат = ПустаяТаблицаТребованийКПодписанию();
	Если СхемаПодписания = Перечисления.СхемыПодписанияЭД.ОднойДоступнойПодписью Тогда
		СтрокаТребования = Результат.Добавить();
		СтрокаТребования.ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		СтрокаТребования.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаТребования.Требование = Перечисления.ТребованияКПодписаниюЭД.ИЛИ;
		
		СтрокаПодписанта = Результат.Добавить();
		СтрокаПодписанта.ИдентификаторРодителя = СтрокаТребования.Идентификатор;
		СтрокаПодписанта.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаПодписанта.Подписант = Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли СхемаПодписания = Перечисления.СхемыПодписанияЭД.УказыватьПриСоздании Тогда
		СтрокаТребования = Результат.Добавить();
		СтрокаТребования.ИдентификаторРодителя = ПустойУникальныйИдентификатор();
		СтрокаТребования.Идентификатор = Строка(Новый УникальныйИдентификатор());
		СтрокаТребования.Требование = УсловиеПодписания;
		
		Для Каждого Подписант Из СписокПодписантов Цикл
			СтрокаПодписанта = Результат.Добавить();
			СтрокаПодписанта.ИдентификаторРодителя = СтрокаТребования.Идентификатор;
			СтрокаПодписанта.Идентификатор = Строка(Новый УникальныйИдентификатор());
			
			Если ТипЗнч(Подписант) = Тип("СтрокаТаблицыЗначений") Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПодписанта, Подписант);
			Иначе
				СтрокаПодписанта.Подписант = Подписант;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Заполняет дерево значений по таблице маршрута подписания.
//
// Параметры:
//  Дерево	 - ДеревоЗначений, Неопределено - дерево для формирования маршрута. Если не задано, будет сформировано.
//  Таблица	 - ТаблицаЗначений - таблица маршрута подписания. По структуре должна соответствовать табличной части
//    "ТаблицаТребований" справочника "МаршрутыПодписания".
//
Процедура ЗаполнитьДеревоПоТаблицеТребованийКПодписанию(Дерево, Таблица)
	
	// Если дерево не задано, инициализируем его
	Если Дерево = Неопределено Тогда
		Дерево = ПустоеДеревоТребованийКПодписанию();
	Иначе
		ДополнитьДеревоПодписанияСлужебнымиКолонками(Дерево);
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ИдентификаторРодителя", ПустойУникальныйИдентификатор());
	СтрокиВерхнегоУровня = Таблица.НайтиСтроки(ПараметрыПоиска);
	ПрочитатьСтрокиТаблицыТребованийКПодписаниюВДерево(СтрокиВерхнегоУровня, Дерево, Таблица);
	
КонецПроцедуры

// Возвращает пустой идентификатор строки дерева / таблицы маршрута подписания.
// 
// Возвращаемое значение:
//  Строка - строка, выступающая в качестве пустого идентификатора.
//
Функция ПустойУникальныйИдентификатор() 
	
	Возврат "";
	
КонецФункции

// Формирует набор параметров для выбора маршрута.
//
// Параметры:
//  ЗадаватьМаршрутВручную			 - Булево - признак того, что маршрут будет указываться непосредственно при отправке
//    документа на подпись.
//  Подписанты						 - ТаблицаЗначений - таблица состава подписантов с колонками:
//    * Подписант - СправочникСсылка.Пользователи - пользователь, который может установить подпись.
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат, которым можно 
//      подписать документ.
//  ФиксированныйМаршрут			 - СправочникСсылка.МаршрутыПодписания - маршрут, по которому будет подписываться документ.
//  ДоступныеДляВыбораСертификаты	 - Массив - содержит сертификаты, которыми можно подписывать документ в соответствии
//    с настройками.
// 
// Возвращаемое значение:
//  Структура - параметры выбора маршрута.
//
Функция НовыеНастройкиВыбораМаршрута(ЗадаватьМаршрутВручную, Подписанты = Неопределено, 
	ФиксированныйМаршрут = Неопределено, ДоступныеДляВыбораСертификаты = Неопределено)

	ПредставлениеНастроек = ПредставлениеМаршрутаВыбранногоВДокументе(
		ЗадаватьМаршрутВручную, Подписанты, ФиксированныйМаршрут);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЗадаватьМаршрутВручную", ЗадаватьМаршрутВручную);
	Настройки.Вставить("Подписанты", Подписанты);
	Настройки.Вставить("Маршрут", ФиксированныйМаршрут);
	Настройки.Вставить("ПредставлениеНастроек", ПредставлениеНастроек);
	Настройки.Вставить("ДоступныеДляВыбораСертификаты", ДоступныеДляВыбораСертификаты);
		
	Возврат Настройки;

КонецФункции

// Добавляет при необходимости в дерево подписания служебные колонки, необходимые для работы служебных механизмов.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево маршрута подписания.
//
Процедура ДополнитьДеревоПодписанияСлужебнымиКолонками(Дерево)
	
	Дерево.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ТребованиеВыполнимо", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Выполнено", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("ВыполненоМаксимум", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));

КонецПроцедуры

#КонецОбласти

#Область АвтоматизированноеТестированиеСлужебныеПроцедурыИФункции

// Присваивает имена параметризованным ячейкам переданной области
//
// Параметры:
//  ОбластьМакета		 - ТабличныйДокумент - табличный документ.
//  ПрефиксДляИмен		 - Строка - префикс для имен ячеек (рекомендуется передавать имя области).
//  ИндексПрефикса		 - Число - индекс или номер строки, который будет прибавлен к префиксу.
//
Процедура ПрисвоитьИменаЯчейкамТабличногоДокумента(ОбластьМакета, Знач ПрефиксДляИмен, Знач ИндексПрефикса)
	
	// Обойдем все ячейки выводимой области и заполним имена для ячеек, содержащих параметры.
	Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ОбластьМакета.ШиринаТаблицы Цикл
			Ячейка = ОбластьМакета.Область(НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр
				И ЗначениеЗаполнено(Ячейка.Параметр) Тогда
				Ячейка.Имя = ПрефиксДляИмен + ИндексПрефикса + "_" + Ячейка.Параметр;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроизводительностьСлужебныеПроцедурыИФункции

// Проверить, что указано допустимое количество данных и замер не завершен.
// Если проверка не выполняется успешно, вызывается исключение с описанием проблемы.
//
// Параметры:
//  ОписаниеЗамера - Структура, полученная при выполнении НачатьЗамерВремени().
//  КоличествоДанных - Число - количество повторяющихся однотипных данных.
//
Процедура ПроверитьВозможностьФиксацииЗамераВремени(ОписаниеЗамера, КоличествоДанных)
	
	Если КоличествоДанных < 0 Тогда
		ТекстОшибки = НСтр("ru = 'Параметр ""КоличествоДанных"" должен быть положительным (текущее значение ""%1"").'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, КоличествоДанных);
	ИначеЕсли ОписаниеЗамера.ЗамерЗавершен Тогда
		ТекстОшибки = НСтр("ru = 'Замер ключевой операции ""%1"" уже завершен. Повторное использование описания этого замера запрещено.'",
		                   ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ВызватьИсключение СтрШаблон(ТекстОшибки, ОписаниеЗамера.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Создать описание замера производительности.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция;
//                     Строка - имя ключевой операции, которая будет создана, если таковая отсутствует в ИБ.
//  ВремяНачала - Число - время начала замера с точностью до миллисекунд.
//
// Возвращаемое значение:
//  Структура:
//   КлючеваяОперация - СправочникСсылка.КлючевыеОперации или Строка, равно значению параметра КлючеваяОперация.
//   ВремяНачала      - Число - время начала замера с точностью до миллисекунд, равно значению параметра ВремяНачала.
//   СуммарноеВремя   - Число - время, накопленное при вызовах ЗафиксироватьЗамерВремени().
//   Вес              - Число - суммарное количество обработанных данных.
//   ЗамерЗавершен    - Булево - Ложь, означает, что замер только начат, а Истина (позже), что замер завершен.
//
Функция СтруктураОписанияЗамера(КлючеваяОперация, ВремяНачала)
	
	СтруктураОписания = Новый Структура;
	СтруктураОписания.Вставить("КлючеваяОперация", КлючеваяОперация);
	СтруктураОписания.Вставить("ВремяНачала", ВремяНачала);
	СтруктураОписания.Вставить("СуммарноеВремя", 0.0);
	СтруктураОписания.Вставить("Вес", 0);
	СтруктураОписания.Вставить("ЗамерЗавершен", Ложь);
	
	Возврат СтруктураОписания;
	
КонецФункции

#КонецОбласти

// Формирует прикладное представление реквизита дерева электронного документа.
//
// Параметры:
//  СтрокаДереваДанных	 - СтрокаДереваЗначений - строка реквизита дерева электронного документа.
//  НомерСтрокиДанных	 - Число - номер строки, который будет подставлен по возможности в представление.
// 
// Возвращаемое значение:
//  Строка - прикладное представление реквизита дерева.
//
Функция ПрикладноеПредставлениеПоСтрокеДерева(СтрокаДереваДанных, НомерСтрокиДанных = Неопределено)
	
	ШаблонПрикладногоПредставления = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПрикладноеПредставлениеРеквизита(
		СтрокаДереваДанных.КодПредставления);
		
	Если НомерСтрокиДанных = Неопределено Тогда
		ПрикладноеПредставление = ШаблонПрикладногоПредставления;
	Иначе
		Если СтрНайти(ШаблонПрикладногоПредставления, "%1") > 0 Тогда
			ПрикладноеПредставление = СтрШаблон(ШаблонПрикладногоПредставления, Формат(НомерСтрокиДанных, "ЧГ="));
		Иначе
			ПрикладноеПредставление = ШаблонПрикладногоПредставления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПрикладноеПредставление) Тогда
		ПрикладноеПредставление = СтрЗаменить(СтрокаДереваДанных.ПолныйПуть, ".", " - ");
		
		Если ЗначениеЗаполнено(НомерСтрокиДанных) Тогда
			ПрикладноеПредставление = СтрШаблон("%1(%2)", ПрикладноеПредставление, Формат(НомерСтрокиДанных, "ЧГ="));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПрикладноеПредставление;

КонецФункции

Функция ПараметрыОбработкиОшибкиУказаны(СтрокаДерева)

	Результат = Ложь;
	
	Если СтрокаДерева <> Неопределено Тогда
		Результат = ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки)
			ИЛИ ЗначениеЗаполнено(СтрокаДерева.ПутьКДаннымСообщения) И СтрокаДерева.КлючСообщения <> Неопределено
			ИЛИ ЗначениеЗаполнено(СтрокаДерева.НавигационнаяСсылка)
			ИЛИ ЗначениеЗаполнено(СтрокаДерева.ИмяФормы);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

Функция ПараметрыОшибкиПоСтрокеДерева(СтрокаДерева)

	ДанныеОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки(СтрокаДерева.КлючСообщения,
		СтрокаДерева.ПутьКДаннымСообщения, СтрокаДерева.НавигационнаяСсылка, СтрокаДерева.ИмяФормы, 
		СтрокаДерева.ПараметрыФормы, СтрокаДерева.ТекстОшибки);
	
	Возврат ДанныеОшибки;

КонецФункции

Функция ПолучитьПредставлениеТипаПоСтрокеДерева(Строка, ДатаПоФорматуФНС = Ложь)

	ОписанияСтроками = Новый Массив;
	
	ОписаниеТипа = Строка.ТипЗначения;
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		ПредставлениеТипа = НРег(Строка(Тип));
		
		Если Тип = Тип("Строка") Тогда
			Если ОписаниеТипа.КвалификаторыСтроки.Длина > 0 Тогда
				Если ОписаниеТипа.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная Тогда
					ПредставлениеСтроки = СтрШаблон(НСтр("ru = 'до %1 символов'"), ОписаниеТипа.КвалификаторыСтроки.Длина);
				Иначе
					ПредставлениеСтроки = СтрШаблон(НСтр("ru = '%1 символов'"), ОписаниеТипа.КвалификаторыСтроки.Длина);
				КонецЕсли;
				
				ПредставлениеТипа = СтрШаблон(НСтр("ru = '%1 %2'"), ПредставлениеТипа, ПредставлениеСтроки);
			КонецЕсли;
		ИначеЕсли Тип = Тип("Число") Тогда
			Если ОписаниеТипа.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный Тогда
				ПредставлениеТипа = СтрШаблон(НСтр("ru = 'неотрицательное %1'"), ПредставлениеТипа);
			КонецЕсли;
			
			Если ОписаниеТипа.КвалификаторыЧисла.Разрядность > 0 Тогда
				ПредставлениеТипа = СтрШаблон(НСтр("ru = '%1 формата %2.%3'"), ПредставлениеТипа, 
					ОписаниеТипа.КвалификаторыЧисла.Разрядность - ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти,
					ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			КонецЕсли;
		ИначеЕсли Тип = Тип("Дата") И ДатаПоФорматуФНС Тогда
			ПредставлениеТипа = СтрШаблон(НСтр("ru = '%1 с 01.01.1900 до 31.12.2099 г.'"), ПредставлениеТипа);
		КонецЕсли;
		
		ОписанияСтроками.Добавить(ПредставлениеТипа);
	КонецЦикла;
	
	Возврат СтрСоединить(ОписанияСтроками, " ИЛИ ");

КонецФункции

Процедура ПроверитьЗаполненностьПараметровОбработкиОшибок(СтрокаДерева)
	
	// Если при внедрении не указали параметры обработки ошибки для реквизитов, для которых это обязательно, будет выдано исключение.
	Если НРег(СтрокаДерева.ПараметрыОбработкиОбязательны) = "да" И Не ПараметрыОбработкиОшибкиУказаны(СтрокаДерева) Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Не указаны параметры обработки ошибки для реквизита %1'"),
			СтрокаДерева.ПолныйПуть);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение обязательных реквизитов дерева.
// Только для внутреннего использования.
// Параметры:
//  ДеревоДанных                            - деревоЗначений - дерево с данными.
//  Ошибки                                  - Массив - ошибки, накопленные за время обработки. Элементами массива являются структуры.
//                                                     Состав структур см. в ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки().
//  ЭтоТаблица                              - Булево - если Истина, то проверяется табличная часть.
//  НомерСтроки                             - Число, Неопределено - номер проверяемой строки табличной части.
//  ПроверятьОбязательностьПараметровОшибки - Булево - определяет, нужно ли проверять, заданы ли параметры обработки ошибок
//                                                     в тех реквизитах, для которых это обязательно.
//  ДатаПоФорматуФНС                        - Булево - если установлена в Истину, значения типа "Дата" будут проверяться дополнительно
//                                                     на вхождение в диапазон лет 1900-2099 (требование схем ФНС).
//
Процедура ПроверитьЗаполнениеРеквизитовДереваДанныхСлужебная(ДеревоДанных, Ошибки, ЭтоТаблица,
	НомерСтроки = Неопределено, ПроверятьОбязательностьПараметровОшибки = Истина, ДатаПоФорматуФНС = Ложь)
	
	НомерСтрокиДляПодстановки = ?(ЭтоТаблица, НомерСтроки, Неопределено);
	СтрокаДерева = Неопределено; // в этой переменной будем хранить последнюю считанную строку дерева данных
	
	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		ТекстОшибки = "";
		
		// Не проверяем, заполнены ли параметры обработки ошибок только если реквизит необязателен и не заполнен:
		// такая ситуация может возникнуть для условно-обязательных реквизитов. Для них параметры обработки ошибки могли быть
		// заданы только при заполнении реквизита. А поскольку заполнения не было, то и параметры не были указаны.
		РеквизитЗаполненИлиОбязателен = ЗначениеЗаполнено(СтрокаДерева.Значение) ИЛИ НРег(СтрокаДерева.Обязательное) = "да";
		Если ПроверятьОбязательностьПараметровОшибки И РеквизитЗаполненИлиОбязателен Тогда
			ПроверитьЗаполненностьПараметровОбработкиОшибок(СтрокаДерева);
		КонецЕсли;
		
		// Проверим строку на заполненность, если реквизит обязательный.
		Если СтрокаДерева.Обязательное = "Да" И Не ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ТекстОшибкиНеЗаполненногоЗначенияДерева();
			
		// Проверим строку на соответствие типу
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Значение) И СтрокаДерева.ТипЗначения <> Неопределено
			И Не ЗначениеВСтрокеДереваСоответствуетТипу(СтрокаДерева, ДатаПоФорматуФНС) Тогда
			
			ШаблонОшибки = НСтр("ru = 'неверный тип значения ""%1"" (ожидаемый тип: %2)'");
			ПредставлениеТипаЗначения = ПолучитьПредставлениеТипаПоСтрокеДерева(СтрокаДерева, ДатаПоФорматуФНС);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, СтрокаДерева.Значение,
				ПредставлениеТипаЗначения);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки,, НомерСтрокиДляПодстановки);
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Признак = "Таблица" И (ТипЗнч(СтрокаДерева.Значение) = Тип("Число") И СтрокаДерева.Значение > 0 ИЛИ СтрокаДерева.Обязательное = "Да")Тогда
			Для Каждого СтрокаТаблицы Из СтрокаДерева.Строки Цикл
				ПроверитьЗаполнениеРеквизитовДереваДанныхСлужебная(СтрокаТаблицы, Ошибки, Истина, СтрокаТаблицы.Значение,
					РеквизитЗаполненИлиОбязателен И ПроверятьОбязательностьПараметровОшибки, ДатаПоФорматуФНС);
			КонецЦикла;
		ИначеЕсли СтрокаДерева.Признак = "Выбор" И (ЗначениеЗаполнено(СтрокаДерева.Значение) ИЛИ СтрокаДерева.Обязательное = "Да") Тогда
			ПроверяемаяСтрока = СтрокаДерева.Строки.Найти(СтрокаДерева.ПолныйПуть + "." + СтрокаДерева.Значение, "ПолныйПуть");
			Если ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
				ПроверитьЗаполнениеРеквизитовДереваДанныхСлужебная(ПроверяемаяСтрока, Ошибки, Ложь,,
					РеквизитЗаполненИлиОбязателен И ПроверятьОбязательностьПараметровОшибки, ДатаПоФорматуФНС);
			Иначе
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.ТекстОшибкиНеЗаполненногоЗначенияДерева();
				
				ДобавитьОшибкуПроверкиДереваДанных(Ошибки, СтрокаДерева, ТекстОшибки);
			КонецЕсли;
		ИначеЕсли СтрокаДерева.Признак = "Группа" И СтрокаДерева.Значение = Истина И СтрокаДерева.Строки.Количество() > 0 Тогда
			ПроверитьЗаполнениеРеквизитовДереваДанныхСлужебная(СтрокаДерева, Ошибки, Ложь,,
				РеквизитЗаполненИлиОбязателен И ПроверятьОбязательностьПараметровОшибки, ДатаПоФорматуФНС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеВСтрокеДереваСоответствуетТипу(СтрокаДерева, ДатаПоФорматуФНС = Ложь)

	Результат = СтрокаДерева.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение) = СтрокаДерева.Значение;
	
	// Выполним дополнительную проверку для форматов ФНС.
	Если Результат И ДатаПоФорматуФНС И ТипЗнч(СтрокаДерева.Значение) = Тип("Дата") Тогда
		Если СтрокаДерева.Значение < Дата(1900, 1, 1) ИЛИ СтрокаДерева.Значение >= Дата(2100, 1, 1) Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

