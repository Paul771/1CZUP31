////////////////////////////////////////////////////////////////////////////////
// Бронирование помещений
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает пометку удаления брони и оповещает другие формы.
//
// Параметры:
//  Бронь			 - ДокументСсылка.Бронь	 - бронь.
//  ПометкаУдаления	 - Булево				 - новая пометка удаления.
//  БроньСвязана	 - Булево				 - признак того, что помечается связанная бронь.
// 
// Возвращаемое значение:
//  Булево - признак того, что новая пометка удаления была установлена.
//
Функция УстановитьПометкуУдаления(Бронь, ПометкаУдаления, БроньСвязана = Ложь) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	Если ТипЗнч(Бронь) <> Тип("ДокументСсылка.Бронь") Тогда
		Возврат УстановленаПометкаУдаления;
	КонецЕсли;
	
	БроньОбъект = Бронь.ПолучитьОбъект();
	БроньОбъект.Заблокировать();
	
	Если БроньСвязана Тогда
		БроньОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойБрони");
	КонецЕсли;
	
	Если БроньОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		БроньОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		ДобавитьВИсториюРаботыПользователя(БроньОбъект);
		УстановленаПометкаУдаления = Истина;
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает пометки удаления броней и возвращает факт изменения пометки удаления.
//
// Параметры:
//  Брони				 - Массив	 - помечаемые на удаление брони.
//  ПовторяющиесяБрони	 - Массив	 - помечаемые на удаление повторяющиеся брони.
//  ПометкаУдаления		 - Булево	 - новая пометка удаления.
// 
// Возвращаемое значение:
//  Булево - признак того что новая пометка удаления была установлена.
//
Функция УстановитьПометкиУдаления(Брони, ПовторяющиесяБрони, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Бронь Из Брони Цикл
			
			Если ТипЗнч(Бронь) <> Тип("ДокументСсылка.Бронь") Тогда
				Продолжить;
			КонецЕсли;
			
			БроньОбъект = Бронь.ПолучитьОбъект();
			БроньОбъект.Заблокировать();
			Если БроньОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
				БроньОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				ДобавитьВИсториюРаботыПользователя(БроньОбъект);
				УстановленаПометкаУдаления = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПометкаУдаления И ПовторяющиесяБрони.Количество() > 0 Тогда
			
			Для Каждого ПовторяющаясяБронь Из ПовторяющиесяБрони Цикл
				
				БроньОбъект = ПовторяющаясяБронь.Бронь.ПолучитьОбъект();
				БроньОбъект.Заблокировать();
				БроньОбъект.ДобавитьИсключениеПовторения(ПовторяющаясяБронь.ДатаИсключения);
				БроньОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(БроньОбъект);
				
				УстановленаПометкаУдаления = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Создает бронь.
//
// Параметры:
//  Бронь	 - Структура - данные брони.
// 
// Возвращаемое значение:
//  Структура - результат брони.
//
Функция СоздатьБронь(Бронь) Экспорт
	
	БроньОбъект = Документы.Бронь.СоздатьДокумент();
	БроньОбъект.Заполнить(Бронь);
	БроньОбъект.Записать();
	
	ДобавитьВИсториюРаботыПользователя(БроньОбъект);
	
	Возврат БроньОбъект.РезультатБрони();
	
КонецФункции

// Изменяет брони.
//
// Параметры:
//  ИзмененныеБрони	 - Массив	 - измененные структуры броней.
//  БрониСвязаны	 - Булево	 - признак изменения броней связанных с предметом.
// 
// Возвращаемое значение:
//  Массив - результаты броней.
//
Функция ИзменитьБрони(ИзмененныеБрони, БрониСвязаны = Ложь) Экспорт
	
	РезультатыБроней = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Бронь Из ИзмененныеБрони Цикл
			
			Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				
				БроньОбъект = Документы.Бронь.СоздатьДокумент();
				БроньОбъект.Заполнить(Бронь.Ссылка);
				БроньОбъект.ДополнительныеСвойства.Вставить("ПовторяющаясяБронь", Бронь.Ссылка);
				БроньОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", Бронь.ДатаНачалаИсходная);
				
			Иначе
				
				БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
				БроньОбъект.Заблокировать();
				
				Если БрониСвязаны Тогда
					БроньОбъект.ДополнительныеСвойства.Вставить("ИзменениеСвязаннойБрони");
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(БроньОбъект, Бронь, "Помещение, ДатаНачала, ДатаОкончания");
			
			Если Бронь.Свойство("Комментарий") Тогда
				БроньОбъект.Комментарий = Бронь.Комментарий;
			КонецЕсли;
			
			БроньОбъект.СпособСозданияБрони = Перечисления.СпособыСозданияБрони.Вручную;
			БроньОбъект.Записать();
			
			ДобавитьВИсториюРаботыПользователя(БроньОбъект);
			РезультатыБроней.Добавить(БроньОбъект.РезультатБрони());
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатыБроней;
	
КонецФункции

// Сформировать данные выбора помещения.
//
// Параметры:
//  ПараметрыПолученияДанных - Структура - параметры получения данных.
//
// Возвращаемое значение:
//  СписокЗначений - данные выбора помещения.
//
Функция СформироватьДанныеВыбораПомещения(ПараметрыПолученияДанных) Экспорт
	
	ПараметрыПолученияДанных.Отбор.Вставить("ДляБронирования", Истина);
	ДанныеВыбора = Справочники.ТерриторииИПомещения.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Формирует форматированное представление помещения.
//  Подробнее - см. БронированиеПомещений.ФорматированноеПредставлениеПомещения().
//
Функция ФорматированноеПредставлениеПомещения(Наименование, Вместимость, Родитель, СловаПоиска = Неопределено) Экспорт
	
	Возврат БронированиеПомещений.ФорматированноеПредставлениеПомещения(Наименование, Вместимость, Родитель, СловаПоиска);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет ссылку в историю работы пользователя.
//
Процедура ДобавитьВИсториюРаботыПользователя(Бронь)
	
	ТипПараметра = ТипЗнч(Бронь);
	Если ТипПараметра = Тип("ДокументОбъект.Бронь") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Бронь.Ссылка);
	ИначеЕсли ТипПараметра = Тип("ДокументСсылка.Бронь") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Бронь);
	КонецЕсли;
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

// Возвращает двоичные данные картинки схемы справочника территория
//
// Параметры:
//  ТерриторияПомещениеСсылка - СправочникСсылка.ТерриторииИПомещения - ссылка на справочник, для которого надо
//                                                                      получить данные.
//  АдресВременногоХранилищаФайла - Хранилище значений - адрес хранилища значений, в котором хранится изображение.
//
// Возвращает:
//  ДвоичныеДанные - ДвоичныеДанные - файла картинки.
//
Функция ПолучитьДвоичныеДанныеСхемыТерритории(ТерриторияПомещениеСсылка, АдресВременногоХранилищаФайла) Экспорт
	
	ДвоичныеДанные = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда 
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено И ЗначениеЗаполнено(ТерриторияПомещениеСсылка.ФайлФотографии) Тогда 
		ДвоичныеДанные = ТерриторияПомещениеСсылка.ФайлФотографии.Получить();
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает строковое представление полного пути к территории/помещению 
// Параметры
//    ТерриторияПомещение - СправочникСсылка.ТерриторииИПомещения - ссылка на территорию.
//
// Возвращаемое значение
//    ПолныйПутьТекст - Строка - представление полного пути.
//
Функция ПолучитьПолныйПутьКПомещению(ТерриторияПомещение) Экспорт
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(ТерриторияПомещение) Тогда 
		ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТерриторияПомещение, "Родитель");
		Пока Не ТекущийРодитель.Пустая() Цикл
			ПолныйПуть = СокрЛП(ТекущийРодитель) + "\ " + ПолныйПуть;
			ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйПуть) Тогда 
		ПолныйПуть = Лев(ПолныйПуть, СтрДлина(ПолныйПуть) - 2);
		ПолныйПутьТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			СокрЛП(ТерриторияПомещение), ПолныйПуть);
	Иначе 
		ПолныйПутьТекст = СокрЛП(ТерриторияПомещение);
	КонецЕсли;
	
	Возврат ПолныйПутьТекст;
	
КонецФункции

#КонецОбласти