#Область СлужебныйПрограммныйИнтерфейс

// Процедура-обработчик события "ПриЗаписи" регистра сведений СостоянияСотрудников.
//
Процедура УдалениеЗаработанныхПравНаОтпускПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТЗ.Состояние КАК Перечисление.СостоянияСотрудника) КАК Состояние,
		|	НАЧАЛОПЕРИОДА(ТЗ.Период, ДЕНЬ) КАК Период,
		|	НАЧАЛОПЕРИОДА(ТЗ.ДействуетДо, ДЕНЬ) КАК ДействуетДо
		|ПОМЕСТИТЬ НовыйНабор
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияСотрудников.Сотрудник,
		|	СостоянияСотрудников.Состояние,
		|	НАЧАЛОПЕРИОДА(СостоянияСотрудников.Период, ДЕНЬ) КАК Период,
		|	НАЧАЛОПЕРИОДА(СостоянияСотрудников.ДействуетДо, ДЕНЬ) КАК ДействуетДо
		|ПОМЕСТИТЬ СтарыйНабор
		|ИЗ
		|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|ГДЕ
		|	СостоянияСотрудников.Сотрудник = &Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НовыйНабор.Сотрудник, СтарыйНабор.Сотрудник) КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(СтарыйНабор.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ИСТИНА
		|		КОГДА НовыйНабор.Состояние ЕСТЬ NULL 
		|				ИЛИ СтарыйНабор.Состояние ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НовыйНабор.Состояние <> СтарыйНабор.Состояние
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК БылиИзменения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СтарыйНабор.Период
		|		КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НовыйНабор.Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|					ТОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|				ИНАЧЕ ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|			КОНЕЦ
		|	КОНЕЦ КАК РаннийПериод
		|ПОМЕСТИТЬ СравнительныйНабор
		|ИЗ
		|	НовыйНабор КАК НовыйНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ СтарыйНабор КАК СтарыйНабор
		|		ПО НовыйНабор.Сотрудник = СтарыйНабор.Сотрудник
		|			И НовыйНабор.Период = СтарыйНабор.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СравнительныйНабор.Сотрудник,
		|	СравнительныйНабор.РаннийПериод
		|ПОМЕСТИТЬ ИзменившиесяЗаписи
		|ИЗ
		|	СравнительныйНабор КАК СравнительныйНабор
		|ГДЕ
		|	СравнительныйНабор.БылиИзменения = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменившиесяЗаписи.Сотрудник,
		|	МИНИМУМ(ИзменившиесяЗаписи.РаннийПериод) КАК Период
		|ИЗ
		|	ИзменившиесяЗаписи КАК ИзменившиесяЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзменившиесяЗаписи.Сотрудник";
	
		ТаблицаНовыхДвижений = Источник.Выгрузить(,"Сотрудник,Состояние,ДействуетДо,Период");
		Запрос.УстановитьПараметр("Сотрудник", Источник.Отбор.Сотрудник.Значение);
		Запрос.УстановитьПараметр("ТЗ", ТаблицаНовыхДвижений);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОстаткиОтпусков.УдалитьЗаписиЗаработанныхОтпусков(ТаблицаЗапроса);
	
	
КонецПроцедуры

// Процедура-обработчик события "ПриЗаписи" регистра сведений СведенияКонтрактаДоговораСотрудника.
//
Процедура СведенияКонтрактаДоговораУдалениеЗаработанныхПравНаОтпуск(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ТЗ.СрочныйДоговор КАК СрочныйДоговор,
		|	ТЗ.СезонныйДоговор КАК СезонныйДоговор,
		|	НАЧАЛОПЕРИОДА(ТЗ.Период, ДЕНЬ) КАК Период,
		|	НАЧАЛОПЕРИОДА(ТЗ.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ НовыйНабор
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияДоговора.Сотрудник,
		|	СведенияДоговора.СрочныйДоговор,
		|	СведенияДоговора.СезонныйДоговор,
		|	НАЧАЛОПЕРИОДА(СведенияДоговора.Период, ДЕНЬ) КАК Период,
		|	НАЧАЛОПЕРИОДА(СведенияДоговора.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания
		|ПОМЕСТИТЬ СтарыйНабор
		|ИЗ
		|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияДоговора
		|ГДЕ
		|	СведенияДоговора.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НовыйНабор.Сотрудник, СтарыйНабор.Сотрудник) КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(СтарыйНабор.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ИСТИНА
		|		КОГДА НовыйНабор.СрочныйДоговор ЕСТЬ NULL 
		|				ИЛИ СтарыйНабор.СрочныйДоговор ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		КОГДА НовыйНабор.СезонныйДоговор ЕСТЬ NULL 
		|				ИЛИ СтарыйНабор.СезонныйДоговор ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		КОГДА НовыйНабор.СрочныйДоговор <> СтарыйНабор.СрочныйДоговор
		|			ТОГДА ИСТИНА
		|		КОГДА НовыйНабор.СезонныйДоговор <> СтарыйНабор.СезонныйДоговор
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БылиИзменения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СтарыйНабор.Период
		|		КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НовыйНабор.Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|					ТОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|				ИНАЧЕ ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|			КОНЕЦ
		|	КОНЕЦ КАК РаннийПериод
		|ПОМЕСТИТЬ СравнительныйНабор
		|ИЗ
		|	НовыйНабор КАК НовыйНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ СтарыйНабор КАК СтарыйНабор
		|		ПО НовыйНабор.Сотрудник = СтарыйНабор.Сотрудник
		|			И НовыйНабор.Период = СтарыйНабор.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СравнительныйНабор.Сотрудник,
		|	СравнительныйНабор.РаннийПериод
		|ПОМЕСТИТЬ ИзменившиесяЗаписи
		|ИЗ
		|	СравнительныйНабор КАК СравнительныйНабор
		|ГДЕ
		|	СравнительныйНабор.БылиИзменения = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменившиесяЗаписи.Сотрудник,
		|	&ОсновнойОтпуск КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(ИзменившиесяЗаписи.РаннийПериод) КАК Период
		|ИЗ
		|	ИзменившиесяЗаписи КАК ИзменившиесяЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзменившиесяЗаписи.Сотрудник";
	
		ТаблицаНовыхДвижений = Источник.Выгрузить();
		Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("ТЗ", ТаблицаНовыхДвижений);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОстаткиОтпусков.УдалитьЗаписиЗаработанныхОтпусков(ТаблицаЗапроса);
	
КонецПроцедуры

Процедура РасчетПоложенныхПравНаОтпускаЗависящихОтСтажа(ОбрабатываемыйМесяц = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ЗначениеЗаполнено(ОбрабатываемыйМесяц) Тогда
		ОбрабатываемыйМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбрабатываемыйМесяц", ОбрабатываемыйМесяц);
	
	// Выбираем отпуска, зависящие от стажа.
	ОстаткиОтпусков.СоздатьВТВидыОтпусковЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	
	// Формируем срез последних на дату.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ОбрабатываемыйМесяц КАК Период,
		|	ОтпускаЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТИзмеренияДатыОтпусковЗависящихОтСтажа
		|ИЗ
		|	ВТВидыОтпусковЗависящиеОтСтажа КАК ОтпускаЗависящиеОтСтажа";
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
						"ВТИзмеренияДатыОтпусковЗависящихОтСтажа",
						"ВидЕжегодногоОтпуска,Период");
	ОстаткиОтпусков.СоздатьВТПоложенныеВидыЕжегодныхОтпусков(Запрос.МенеджерВременныхТаблиц, ОписаниеФильтра);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТОтборОтпусков
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	НЕ ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|	И ПоложенныеВидыЕжегодныхОтпусков.ПериодЗаписи <> ПоложенныеВидыЕжегодныхОтпусков.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборОтпусков.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ОтборОтпусков.Период, МЕСЯЦ, -1) КАК Период,
		|	КОНЕЦПЕРИОДА(ОтборОтпусков.Период, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТОтборОтпусков КАК ОтборОтпусков";
	Запрос.Выполнить();
	
	// Получаем стажи сотрудников.
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц);
	
	// Добавляем разрез вида отпуска и протаскиваем регистратор.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтборОтпусков.Сотрудник,
		|	ОтборОтпусков.ВидЕжегодногоОтпуска,
		|	ОтборОтпусков.Регистратор,
		|	ВТВидыОтпусковЗависящиеОтСтажа.ВидСтажа
		|ПОМЕСТИТЬ ВТОтборОтпусковСоСтажами
		|ИЗ
		|	ВТОтборОтпусков КАК ОтборОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВТВидыОтпусковЗависящиеОтСтажа
		|		ПО ОтборОтпусков.ВидЕжегодногоОтпуска = ВТВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзмененияСтажа.Сотрудник,
		|	ОтборОтпусков.ВидЕжегодногоОтпуска,
		|	ПериодыИзмененияСтажа.ВидСтажа,
		|	ПериодыИзмененияСтажа.ДатаСтажа,
		|	ПериодыИзмененияСтажа.ЗначениеСтажа,
		|	ОтборОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТПериодыИзмененияСтажаОтпусков
		|ИЗ
		|	ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОтпусковСоСтажами КАК ОтборОтпусков
		|		ПО ПериодыИзмененияСтажа.Сотрудник = ОтборОтпусков.Сотрудник
		|			И ПериодыИзмененияСтажа.ВидСтажа = ОтборОтпусков.ВидСтажа";
	Запрос.Выполнить();
	
	// Подготавливаем шкалу стаж-показатель.
	ОстаткиОтпусков.СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(Запрос.МенеджерВременныхТаблиц, "ВТВидыОтпусковЗависящиеОтСтажа");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыИзмененияСтажаОтпусков.Сотрудник,
		|	ПериодыИзмененияСтажаОтпусков.ВидЕжегодногоОтпуска,
		|	ПериодыИзмененияСтажаОтпусков.Регистратор,
		|	ПериодыИзмененияСтажаОтпусков.ЗначениеСтажа,
		|	МАКСИМУМ(ШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажа
		|ПОМЕСТИТЬ ВТУказателиЗначенийОтпусковСотрудников
		|ИЗ
		|	ВТПериодыИзмененияСтажаОтпусков КАК ПериодыИзмененияСтажаОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями КАК ШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|		ПО ПериодыИзмененияСтажаОтпусков.ВидЕжегодногоОтпуска = ШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидЕжегодногоОтпуска
		|			И ПериодыИзмененияСтажаОтпусков.ЗначениеСтажа >= ШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияСтажаОтпусков.ВидЕжегодногоОтпуска,
		|	ПериодыИзмененияСтажаОтпусков.ЗначениеСтажа,
		|	ПериодыИзмененияСтажаОтпусков.Сотрудник,
		|	ПериодыИзмененияСтажаОтпусков.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УказателиЗначенийОтпусковСотрудников.Сотрудник,
		|	УказателиЗначенийОтпусковСотрудников.ВидЕжегодногоОтпуска,
		|	УказателиЗначенийОтпусковСотрудников.Регистратор,
		|	ШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГодСледующее КАК КоличествоДней
		|ПОМЕСТИТЬ ВТИтоговыеЗначенияОтпусков
		|ИЗ
		|	ВТУказателиЗначенийОтпусковСотрудников КАК УказателиЗначенийОтпусковСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями КАК ШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|		ПО УказателиЗначенийОтпусковСотрудников.ВидЕжегодногоОтпуска = ШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидЕжегодногоОтпуска
		|			И УказателиЗначенийОтпусковСотрудников.ВерхняяГраницаИнтервалаСтажа = ШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговыеЗначенияОтпусков.Регистратор КАК Регистратор,
		|	КОЛИЧЕСТВО(ВТИтоговыеЗначенияОтпусков.Регистратор) КАК КоличествоРегистраторов
		|ИЗ
		|	ВТИтоговыеЗначенияОтпусков КАК ВТИтоговыеЗначенияОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИтоговыеЗначенияОтпусков.Регистратор
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ВТИтоговыеЗначенияОтпусков.Регистратор) > 1";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбновляемыеРегистраторы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Регистратор");
		
		Для каждого ОбновляемыйРегистратор Из ОбновляемыеРегистраторы Цикл
			// Получим набор записей регистратора.
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ОбновляемыйРегистратор);
			Набор.Прочитать();
			// Генерируем для него вторичные стажевые записи.
			МенеджерВременныхТаблицПоНаборуЗаписей = Новый МенеджерВременныхТаблиц;
			ОстаткиОтпусков.СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Набор, МенеджерВременныхТаблицПоНаборуЗаписей);
			Если ОстаткиОтпусков.ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Набор, МенеджерВременныхТаблицПоНаборуЗаписей) Тогда
				Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
				Набор.Записать();
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 
