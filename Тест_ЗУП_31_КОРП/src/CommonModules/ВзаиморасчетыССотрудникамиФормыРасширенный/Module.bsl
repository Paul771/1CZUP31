////////////////////////////////////////////////////////////////////////////////
// Взаиморасчеты с сотрудниками.
// Расширенные серверные процедуры и функции форм документов.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область МестаВыплатыЗарплаты

// Процедура настраивает поля формы с местами выплаты зарплаты.
//
// Параметры:
//	ОписателиПолейМестВыплаты - соответствие: 
//			ключ	- Поле формы с соответствующим местом выплаты
//			значение- ПеречислениеСсылка.ВидыМестВыплатыЗарплаты.
//
Процедура НастроитьПоляМестВыплатыЗарплаты(ОписателиПолейМестВыплаты) Экспорт

	Для Каждого ОписательПоля Из ОписателиПолейМестВыплаты Цикл
		ОписательПоля.Ключ.ОграничениеТипа = ВзаиморасчетыССотрудникамиРасширенный.ОписаниеТипаМестаВыплатыПоВиду(ОписательПоля.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормВедомостейНаВыплатуЗаработнойПлаты

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ВедомостьСпособВыплатыПриИзмененииНаСервере(Форма) Экспорт
	
	ИнформацияОСпособеВыплаты = ВзаиморасчетыССотрудникамиВызовСервераРасширенный.ИнформацияОСпособеВыплаты(Форма.Объект.СпособВыплаты);
	
	Если Форма.ВидДокументаОснования <> ИнформацияОСпособеВыплаты.ПараметрыЗаполнения.ВидДокументаОснования Тогда
		Форма.Объект.Основания.Очистить();
		Форма.ВидДокументаОснования = ИнформацияОСпособеВыплаты.ПараметрыЗаполнения.ВидДокументаОснования;
		ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьУстановитьПредставлениеОснований(Форма); 
	КонецЕсли;	
	
	Если Форма.ХарактерВыплаты <> ИнформацияОСпособеВыплаты.ПараметрыЗаполнения.ХарактерВыплаты Тогда
		Форма.ХарактерВыплаты = ИнформацияОСпособеВыплаты.ПараметрыЗаполнения.ХарактерВыплаты;
		ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.УстановитьОтображениеВХОПеречисленияНДФЛ(Форма);
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Форма.Объект, ИнформацияОСпособеВыплаты.ПараметрыРасчета);
	
	ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьУстановитьПредставлениеПараметровРасчета(Форма);
		
КонецПроцедуры

Процедура ВедомостьПараметрыРасчетаПриИзменении(Форма) Экспорт
	ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьУстановитьПредставлениеПараметровРасчета(Форма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

Процедура ВедомостьСоставПослеУдаленияНаСервере(Форма) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьСоставПослеУдаленияНаСервере(Форма);
	
	Для Каждого ИдентификаторСтроки Из Форма.ИдентификаторыСтрок Цикл
		
		УдаляемыеСтроки = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.Объект.НДФЛ.Удалить(УдаляемаяСтрока);
		КонецЦикла;	
		
	КонецЦикла
	
КонецПроцедуры	

#КонецОбласти

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ

// Вызывается при создании формы новой ведомости.
// Выполняет заполнение первоначальных значений реквизитов ведомости в форме.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьЗаполнитьПервоначальныеЗначения(Форма);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	
	ИнформацияОСпособеВыплаты = ВзаиморасчетыССотрудникамиВызовСервераРасширенный.ИнформацияОСпособеВыплаты(Форма.Объект.СпособВыплаты);
	
	Если НЕ Форма.Параметры.ЗначенияЗаполнения.Свойство("Округление") ИЛИ НЕ ЗначениеЗаполнено(Форма.Параметры.ЗначенияЗаполнения.Округление) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.Округление", ИнформацияОСпособеВыплаты.ПараметрыРасчета.Округление);
	КонецЕсли;
	Если НЕ Форма.Параметры.ЗначенияЗаполнения.Свойство("ПроцентВыплаты") ИЛИ НЕ ЗначениеЗаполнено(Форма.Параметры.ЗначенияЗаполнения.ПроцентВыплаты) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.ПроцентВыплаты", ИнформацияОСпособеВыплаты.ПараметрыРасчета.ПроцентВыплаты);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении формой данных объекта.
// 	Приспосабливаем форму к редактируемым данным.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//	ТекущийОбъект - Объект, который будет прочитан, ДокументОбъект. 
//
Процедура ВедомостьПриПолученииДанныхНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
	
	ИнформацияОСпособеВыплаты = ВзаиморасчетыССотрудникамиВызовСервераРасширенный.ИнформацияОСпособеВыплаты(Форма.Объект.СпособВыплаты);
	ЗаполнитьЗначенияСвойств(Форма, ИнформацияОСпособеВыплаты.ПараметрыЗаполнения);
	
	ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьУстановитьПредставлениеОснований(Форма); 
	ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.ВедомостьУстановитьПредставлениеПараметровРасчета(Форма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		Форма.Элементы.ОплатыПредставление.Видимость	= Ложь;
		Форма.Элементы.ВнешниеОперацииГруппа.Видимость	= Истина;
		ВзаиморасчетыССотрудникамиКлиентСерверРасширенный.УстановитьОтображениеВХО(Форма);
	Иначе	
		Форма.Элементы.ОплатыПредставление.Видимость	= Истина;
		Форма.Элементы.ВнешниеОперацииГруппа.Видимость	= Ложь;
	КонецЕсли;	
	
	ПроверятьЗаполнениеФинансирования = ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях");	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяФинансирования", 	"АвтоОтметкаНезаполненного", ПроверятьЗаполнениеФинансирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяФинансирования", 	"ОтметкаНезаполненного",     ПроверятьЗаполнениеФинансирования И Не ЗначениеЗаполнено(ТекущийОбъект.СтатьяФинансирования));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяРасходов", 	"АвтоОтметкаНезаполненного",         ПроверятьЗаполнениеФинансирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяРасходов", 	"ОтметкаНезаполненного",             ПроверятьЗаполнениеФинансирования И Не ЗначениеЗаполнено(ТекущийОбъект.СтатьяРасходов));
	
КонецПроцедуры

Процедура ВедомостьПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава);
	
	ВедомостьПриПолученииДанныхСтрокиСоставаФинансирование(Форма, СтрокаСостава);
	ВедомостьПриПолученииДанныхСтрокиСоставаНДФЛ(Форма, СтрокаСостава);
	
КонецПроцедуры	

Процедура ВедомостьПриПолученииДанныхСтрокиСоставаФинансирование(Форма, СтрокаСостава)

	ПоказыватьСтатьиРасходов		= ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиРасходовЗарплата");
	ПоказыватьСтатьиФинансирования	= ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	
	Если НЕ ПоказыватьСтатьиРасходов И НЕ ПоказыватьСтатьиФинансирования Тогда
		Возврат
	КонецЕсли;
	
	Если ПоказыватьСтатьиФинансирования И ПоказыватьСтатьиРасходов Тогда
		ШаблонРасшифровки = "%1(%2)";
	Иначе
		ШаблонРасшифровки = "%1";
	КонецЕсли;
	
	ПоляСтатей = "СтатьяФинансирования, СтатьяРасходов";
	СочетанияСтатей = Форма.Объект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), ПоляСтатей);
	СочетанияСтатей.Свернуть(ПоляСтатей);
	
	РасшифровкаФинансирования = "";
	Для Индекс = 0 По СочетанияСтатей.Количество()-1 Цикл
		
		Если Индекс = 3 Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования + "...";
			Прервать
		ИначеЕсли Индекс > 0 Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования + Символы.ПС;
		КонецЕсли;

		КодСтатьиФинансирования	= ВзаиморасчетыССотрудникамиПовтИспРасширенный.КодыСтатейФинансирования()[СочетанияСтатей[Индекс].СтатьяФинансирования];
		КодСтатьиРасходов		= СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СочетанияСтатей[Индекс].СтатьяРасходов, 3, " ");
		
		РасшифровкаФинансирования = 
			РасшифровкаФинансирования + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки, КодСтатьиФинансирования, КодСтатьиРасходов); 
			
	КонецЦикла;	

	СтрокаСостава.Финансирование = РасшифровкаФинансирования;
	
КонецПроцедуры

Процедура ВедомостьПриПолученииДанныхСтрокиСоставаНДФЛ(Форма, СтрокаСостава)
	
	ПериодРегистрацииВедомости = Форма.Объект.ПериодРегистрации;
	
	СтрокиНДФЛРаботника = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	СтрокаСостава.НДФЛ = 0;
	СтрокаСостава.НДФЛРасшифровка = "";
	
	РасшифровкаПериодов = "";
	РасшифровкаОснований = "";
	
	ЕстьПрошлыеПериоды = Ложь;
	ТипыОснований = Новый Соответствие;
	Для Каждого СтрокаНДФЛРаботника Из СтрокиНДФЛРаботника Цикл
		
		СтрокаСостава.НДФЛ = СтрокаСостава.НДФЛ + СтрокаНДФЛРаботника.Сумма;
		
		ЕстьПрошлыеПериоды = 
			ЕстьПрошлыеПериоды ИЛИ 
			НачалоМесяца(СтрокаНДФЛРаботника.МесяцНалоговогоПериода) <> НачалоМесяца(ПериодРегистрацииВедомости); 		
			
		Если ЗначениеЗаполнено(СтрокаНДФЛРаботника.ДокументОснование) Тогда
			ТипыОснований.Вставить(ТипЗнч(СтрокаНДФЛРаботника.ДокументОснование));
		КонецЕсли	
		
	КонецЦикла;
	
	Если ЕстьПрошлыеПериоды Тогда
		РасшифровкаПериодов = НСтр("ru = 'в т.ч. в счет ранее исчисленного'");
	Иначе
	КонецЕсли;	

	Если Форма.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс И ТипыОснований.Количество() > 0 Тогда
		
		РасшифровкаОснований = НСтр("ru = 'за'") + " ";
		КоличествоОснований = 0;
		Для Каждого ТипОснования Из ТипыОснований Цикл
			
			Если КоличествоОснований = 3 Тогда
				РасшифровкаОснований = РасшифровкаОснований + "...";
				Прервать
			ИначеЕсли КоличествоОснований > 0 Тогда
				РасшифровкаОснований = РасшифровкаОснований + ", ";
			КонецЕсли;

			РасшифровкаОснований = РасшифровкаОснований + НРег(ТипОснования.Ключ);
			
			КоличествоОснований = КоличествоОснований + 1;
			
		КонецЦикла;	
			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РасшифровкаПериодов) Тогда
		СтрокаСостава.НДФЛРасшифровка = РасшифровкаПериодов
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасшифровкаОснований) Тогда
		СтрокаСостава.НДФЛРасшифровка = 
			СтрокаСостава.НДФЛРасшифровка + 
			?(ЗначениеЗаполнено(СтрокаСостава.НДФЛРасшифровка), "; "+Символы.ПС, "") + 
			РасшифровкаОснований;
	КонецЕсли;
	
КонецПроцедуры	

// Обработка сообщений пользователю для форм ведомостей.
// 	Привязывает сообщения объекта к полям формы.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьОбработатьСообщенияПользователю(Форма) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьОбработатьСообщенияПользователю(Форма);
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если СтрНайти(Сообщение.Поле, "ПроцентВыплаты") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ПараметрыРасчетаИнфо";
		КонецЕсли;
		Если СтрНайти(Сообщение.Поле, "Основания") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ОснованияПредставление";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьРедактироватьНДФЛСтрокиЗавершениеНаСервере(Форма, РезультатыРедактирования) Экспорт
	
	ИдентификаторСтроки	= РезультатыРедактирования.ИдентификаторСтроки;
	НДФЛСтроки	= ПолучитьИзВременногоХранилища(РезультатыРедактирования.АдресВХранилищеНДФЛПоСтроке);
	
	УдаляемыеСтроки = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.НДФЛ.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НДФЛСтроки, Форма.Объект.НДФЛ);
	
	СтрокиСостава = Форма.Объект.Состав.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Если СтрокиСостава.Количество() <> 0 Тогда
		Форма.ПриПолученииДанныхСтрокиСостава(СтрокиСостава[0]);
	КонецЕсли;	
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция ВедомостьАдресВХранилищеНДФЛПоСтроке(Форма, ИдентификаторСтроки) Экспорт
	Возврат ПоместитьВоВременноеХранилище(Форма.Объект.НДФЛ.Выгрузить(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)), Форма.УникальныйИдентификатор);
КонецФункции	

Процедура ВедомостьОбновитьНДФЛНаСервере(Форма, ИдентификаторыСтрок) Экспорт
	
	СтрокиСостава = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		СтрокаСостава = Форма.Объект.Состав.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаСостава <> Неопределено Тогда
			СтрокиСостава.Добавить(СтрокаСостава);
		КонецЕсли	
		
	КонецЦикла;	

	ВедомостьЗаполнитьНДФЛ(Форма, СтрокиСостава);
	
КонецПроцедуры

Процедура ВедомостьЗаполнитьНДФЛ(Форма, СтрокиСостава)
	
	ФизЛица = Новый Массив;
	
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		ФизЛица.Добавить(СтрокаСостава.ФизическоеЛицо);
	КонецЦикла;
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьЗарплату() Тогда
		ВзаиморасчетыССотрудникамиРасширенный.ВедомостьОбновитьНДФЛ(ТекущийОбъект, ФизЛица);
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);	
	
КонецПроцедуры

// Устанавливает доступность элементов формы ведомости.
// 	Документ ввода начальных остатков, или по ведомость, по которой есть выплаты,
// или зарегистрирован перенос даты получения дохода
//	доступны только для просмотра.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура ВедомостьУстановитьДоступностьЭлементов(Форма) Экспорт
	
	ВзаиморасчетыССотрудникамиФормы.ВедомостьУстановитьДоступностьЭлементов(Форма);
	
	Форма.ТолькоПросмотр = Форма.ТолькоПросмотр 
			Или ВзаиморасчетыССотрудникамиВызовСервераРасширенный.ЕстьПодтверждениеВыплатыДоходовПоВедомости(Форма.Объект.Ссылка);
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормыРедактированияЗарплатыСтрокиВедомости

Процедура РедактированиеЗарплатыСтрокиВедомостиНастроитьЭлементы(Форма) Экспорт
	
	ПолеСотрудника = Форма.Элементы.ЗарплатаСотрудник;
	
	ПараметрВыбораПоказыватьДоговорниковГПХ = Новый ПараметрВыбора("Отбор.ПоказыватьДоговорниковГПХ", Истина);	
	
	ДобавитьПоказДоговорников = Истина;
	Для Каждого ПараметрВыбора Из ПолеСотрудника.ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя = ПараметрВыбораПоказыватьДоговорниковГПХ.Имя Тогда
			ПараметрВыбора.Значение = ПараметрВыбораПоказыватьДоговорниковГПХ.Значение;
			ДобавитьПоказДоговорников = Ложь;
			Прервать
		КонецЕсли;	
	КонецЦикла;	
	
	Если ДобавитьПоказДоговорников Тогда
		ПараметрыВыбора = Новый Массив(ПолеСотрудника.ПараметрыВыбора);
		ПараметрыВыбора.Добавить(ПараметрВыбораПоказыватьДоговорниковГПХ);
		ПолеСотрудника.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	КонецЕсли;	
				
КонецПроцедуры

#КонецОбласти

#КонецОбласти
