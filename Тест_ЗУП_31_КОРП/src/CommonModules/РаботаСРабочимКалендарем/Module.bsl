////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Сохраняет переданный массив записей календаря.
//
// Параметры:
//  ЗаписиКалендаря		 - Массив	 - сохраняемые записи календаря.
//  НастройкиОтображения - Структура - настройки отображения планировщика.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * СсылкиИзмененныхЗаписейКалендаря - Массив - ссылки на записи календаря.
//    * НовыеИсключенияПовторения - Массив - массив структур.
//    * ОбновитьПринудительно - Булево.
//    * ДанныеПланировщика - Структура - описание см. РаботаСРабочимКалендарем.НовыеДанныеПланировщика.
//
Функция СохранитьЗаписиКалендаря(Знач ЗаписиКалендаря, Знач НастройкиОтображения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", Новый Массив);
	Результат.Вставить("НовыеИсключенияПовторения", Новый Массив);
	Результат.Вставить("ОбновитьПринудительно", Ложь);
	Результат.Вставить("ДанныеПланировщика", Неопределено);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря.Ссылка);
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Цвет = РаботаСРабочимКалендарем.ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
				ИсключениеПовторения = Новый Структура("НоваяСсылка, СтараяСсылка, ДатаНачалаИсходная");
				ИсключениеПовторения.НоваяСсылка = ЗаписьКалендаряОбъект.Ссылка;
				ИсключениеПовторения.СтараяСсылка = ЗаписьКалендаря.Ссылка;
				ИсключениеПовторения.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачалаИсходная;
				Результат.НовыеИсключенияПовторения.Добавить(ИсключениеПовторения);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания, ВесьДень");
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат.ОбновитьПринудительно = УстановленоНапоминание(Результат.СсылкиИзмененныхЗаписейКалендаря);
	Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	
	Возврат Результат;
	
КонецФункции

// Создает запись календаря.
//
// Параметры:
//  ЗаписьКалендаря		 - Структура - структура со свойствами:
//    * ДатаНачала		 - Дата - дата начала записи.
//    * ДатаОкончания	 - Дата - дата окончания записи.
//    * Описание		 - Строка - описание новой записи.
//    * Цвет			 - ПеречислениеСсылка.ЦветаРабочегоКалендаря - цвет для отражения в календаре.
//    * Пользователь	 - Дата - пользователь, для которого создается запись.
//  НастройкиОтображения - Структура - настройки отображения планировщика.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * НовыйЭлемент - СправочникСсылка.ЗаписиРабочегоКалендаря - новая запись.
//    * Напоминание - Структура - (см. НапоминанияПользователяКлиентСервер.ОписаниеНапоминания).
//    * ДанныеПланировщика - Структура - (см. РаботаСРабочимКалендарем.НовыеДанныеПланировщика).
//
Функция СоздатьЗаписьКалендаря(Знач ЗаписьКалендаря, Знач ЗначениеКопирования, Знач НастройкиОтображения) Экспорт
	
	Если ЗначениеКопирования <> Неопределено Тогда
		ОбъектКопирования = ЗначениеКопирования.ПолучитьОбъект();
		ЗаписьКалендаряОбъект = ОбъектКопирования.Скопировать();
		ЗаписьКалендаряОбъект.ДатаНачала = ЗаписьКалендаря.ДатаНачала;
		ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаря.ДатаОкончания;
		ЗаписьКалендаряОбъект.Пользователь = ЗаписьКалендаря.Пользователь;
	Иначе
		ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		ЗаписьКалендаряОбъект.Заполнить(ЗаписьКалендаря);
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("Цвет", ЗаписьКалендаря.Цвет);
	ЗаписьКалендаряОбъект.Записать();
	
	ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
	
	Результат = Новый Структура("НовыйЭлемент, Напоминание, ДанныеПланировщика");
	
	Результат.Напоминание = ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаряОбъект.Ссылка);
	
	Результат.НовыйЭлемент = ОписаниеЭлементаПланировщика(ЗаписьКалендаряОбъект);
	Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает по цвету стиля цвет календаря.
//
// Параметры:
//  ЦветСтиля - Цвет - Цвет стиля.
//
// Возвращаемое значение:
//  Перечисление.ЦветаРабочегоКалендаря - цвет календаря.
//
Функция ПолучитьЦветКалендаря(ЦветСтиля) Экспорт
	
	Если ЦветСтиля = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый");
	ИначеЕсли ЦветСтиля = ЦветаСтиля.ЦветКалендаряОранжевый  Тогда
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый");
	Иначе
		ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет");
	КонецЕсли;
	
	Возврат ЦветКалендаря;
	
КонецФункции

// Формирует структуру элемент планировщика по событию.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//  ЗаписиКалендаря - Массив - записи календаря.
// 
// Возвращаемое значение:
//  Массив - Структуры элементов планировщика.
//
Функция ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря = Неопределено) Экспорт
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.Пользователи,
			ПользователиКлиентСервер.ТекущийПользователь(),,
			ЗаписиКалендаря,
			НастройкиОтображения.ОтображатьОтклоненные);
		
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктурыЭлементов = Новый Массив;
	
	Для Каждого ЗаписьКалендаря Из СобытияПоЧасам Цикл
		СтруктураЭлемента = ОписаниеЭлементаПланировщика(
			ЗаписьКалендаря,
			НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени);
		СтруктурыЭлементов.Добавить(СтруктураЭлемента);
	КонецЦикла;
	
	Возврат СтруктурыЭлементов;
	
КонецФункции

// Формирует структуры интервалов фона планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - структуры интервалов планировщика.
//
Функция ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения) Экспорт
	
	ИнтервалыФонаПланировщика = Новый Массив;
	
	Если Не (НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия) Тогда
		Возврат ИнтервалыФонаПланировщика;
	КонецЕсли;
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
	
	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		ИнтервалФона = НовыйИнтервалФонаПланировщика(Занятость, НастройкиОтображения);
		ИнтервалыФонаПланировщика.Добавить(ИнтервалФона);
	КонецЦикла;
	
	Возврат ИнтервалыФонаПланировщика;
	
КонецФункции

// Формирует структуру элемента планировщика по событию.
//
Функция ОписаниеЭлементаПланировщика(ЗаписьКалендаря,
	ИспользоватьНапоминания = Неопределено, ОтключеноОтображениеВремени = Неопределено) Экспорт
	
	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;
	
	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
		ОтключеноОтображениеВремени =
			НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СтрокаТаблицыЗначений") Тогда
		УстановленоНапоминание = ЗаписьКалендаря.УстановленоНапоминание;
		Цвет = ЗаписьКалендаря.Цвет;
		Отработана = ЗаписьКалендаря.Отработана;
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		УстановленоНапоминание = УстановленоНапоминание(ЗаписьКалендаря.Ссылка);
		Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря.Ссылка);
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		УстановленоНапоминание = УстановленоНапоминание(ЗаписьКалендаря);
		Цвет = ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря);
		Отработана = ЗаписьКалендаряОтработана(ЗаписьКалендаря);
	Иначе
		УстановленоНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
		Отработана = Ложь;
	КонецЕсли;
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	ЭлементПланировщика.Начало = ЗаписьКалендаря.ДатаНачала;
	ЭлементПланировщика.Конец = ЗаписьКалендаря.ДатаОкончания;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "Пользователь", ЗаписьКалендаря.Пользователь);
	
	ЭлементПланировщика.Значение =
		РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря);
	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет И Отработана Тогда
		ЭлементПланировщика.ЦветФона = ЦветаСтиля.ЦветКалендаряОтработано;
	Иначе
		ЭлементПланировщика.ЦветФона = ПолучитьЦветТабличногоДокумента(Цвет);
	КонецЕсли;
	Если ЗаписьКалендаря.ПометкаУдаления Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряУдалена;
	ИначеЕсли ЗаписьКалендаря.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряПодВопросом;
	ИначеЕсли ЗаписьКалендаря.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗаписьКалендаряОтклонена;
	КонецЕсли;
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = ПолучитьЦветРамкиЭлементаПланировщика(ЭлементПланировщика.ЦветФона);
	
	ЭлементПланировщика.Текст = ЗаписьКалендаря.Наименование;
	Если ИспользоватьНапоминания И ОтключеноОтображениеВремени И УстановленоНапоминание Тогда
		ДатаНачалаСобытияСтрокой = Формат(ЗаписьКалендаря.ДатаНачала, "ДФ=HH:mm");
		ЭлементПланировщика.Текст = ДатаНачалаСобытияСтрокой + " " + ЭлементПланировщика.Текст;
	КонецЕсли;
	
	РаботаСРабочимКалендаремПереопределяемый.ПриПолученииСтруктурыЭлементаПланировщика(ЭлементПланировщика, ЗаписьКалендаря);
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

// Формирует структуру элемента планировщика по занятости.
//
Функция ОписаниеЭлементаПланировщикаПоЗанятости(Занятость, Пользователь = Неопределено) Экспорт
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Занятость.Пользователь;
	КонецЕсли;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "Пользователь", Пользователь);
	
	ЭлементПланировщика.Начало = Занятость.ДатаНачала;
	ЭлементПланировщика.Конец = Занятость.ДатаОкончания;
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.Текст = Строка(Занятость.Занят);
	ЭлементПланировщика.ЦветФона = ПолучитьЦветЗанятости(Занятость);
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

// Формирует структуру настроек отображения планировщика.
//
Функция ПолучитьНастройкиОтображения() Экспорт
	
	НастройкиОтображения = Новый Структура;
	
	// Период отображения
	НастройкиОтображения.Вставить(
		"ПериодОтображения",
		ПолучитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря"));
	
	// Пользователи
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
	НастройкиОтображения.Вставить(
		"Пользователи",
		МассивПользователей);
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДатаСеанса());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата",
		ОтображаемаяДата);
	
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты",
		ВыделенныеДаты);
	
	// Отображать события
	НастройкиОтображения.Вставить(
		"ОтображатьСобытия",
		Истина);
	
	// Отображать занятость
	НастройкиОтображения.Вставить(
		"ОтображатьЗанятость",
		ПолучитьПерсональнуюНастройку("ОтображатьЗанятость"));
	
	// Отображать общую занятость
	НастройкиОтображения.Вставить(
		"ОтображатьОбщуюЗанятость",
		Ложь);
	
	// Исключения занятости
	ИсключенияЗанятости = Новый Массив;
	НастройкиОтображения.Вставить(
		"ИсключенияЗанятости",
		ИсключенияЗанятости);
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания",
		ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов",
		НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени",
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	// Отображать помеченные на удаление
	НастройкиОтображения.Вставить(
		"ОтображатьПомеченныеНаУдаление",
		ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаление"));
	
	// Отображать отклоненные
	НастройкиОтображения.Вставить(
		"ОтображатьОтклоненные",
		ПолучитьПерсональнуюНастройку("ОтображатьОтклоненные"));
	
	// Цвет календаря подпись
	НастройкиОтображения.Вставить(
		"ЦветКалендаряПодпись",
		ЦветаСтиля.ЦветКалендаряПодпись);
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить(
		"ЦветКалендаряФонШапки",
		ЦветаСтиля.ЦветКалендаряФонШапки);
	
	// Отображать время с
	НастройкиОтображения.Вставить(
		"ОтображатьВремяС",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяС"));
	
	// Отображать время по
	НастройкиОтображения.Вставить(
		"ОтображатьВремяПо",
		ПолучитьПерсональнуюНастройку("ОтображатьВремяПо"));
	
	// Отображать скрытые элементы
	НастройкиОтображения.Вставить(
		"ОтображатьСкрытыеЭлементы",
		Истина);
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить(
		"РазмерЯчейкиВремени",
		ПолучитьПерсональнуюНастройку("РазмерЯчейкиВремени"));
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня",
		ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя",
		ЦветаСтиля.ЦветКалендаряДоступноеВремя);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет рамки текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветРамкиТекущаяЗапись",
		ПолучитьЦветРамкиЭлементаПланировщика(ЦветаСтиля.ЦветКалендаряТекущаяЗапись));
	
	// Отобразить текущую запись.
	НастройкиОтображения.Вставить(
		"ОтобразитьТекущуюЗапись",
		Ложь);
	
	// Ссылка текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьСсылка",
		Справочники.ЗаписиРабочегоКалендаря.ПустаяСсылка());
	
	// Дата начала текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаНачала",
		Дата(1,1,1));
	
	// Дата окончания текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаОкончания",
		Дата(1,1,1));
	
	// Текущая запись на весь день.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьВесьДень",
		Ложь);
	
	// Запрет создания.
	НастройкиОтображения.Вставить(
		"ЗапретСоздания",
		Ложь);
	
	// Запрет изменения.
	НастройкиОтображения.Вставить(
		"ЗапретИзменения",
		Ложь);
	
	// Скрыть пустые дни в плане дня.
	НастройкиОтображения.Вставить(
		"ПланДняСкрытьПустые",
		Ложь);
	
	Возврат НастройкиОтображения;
	
КонецФункции

// Возвращает цвет, которым отображается событие в календаре пользователя
//
// Параметры:
//	Событие - СправочникСсылка.ЗаписиРабочегоКалендаря - событие, которому соответствует цвет.
//	Пользователь - СправочникСсылка.Пользователи - пользователь, которому соответствует цвет.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ЦветаРабочегоКалендаря - цвет события в календаре.
//
Функция ПолучитьЦветСобытияКалендаря(Событие, Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие) Тогда
		Возврат Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Цвет = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
		Пользователь, Событие, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет);
	
	Если Цвет = Неопределено Или ТипЗнч(Цвет) <> Тип("ПеречислениеСсылка.ЦветаРабочегоКалендаря") Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

// Устанавливает цвет, которым отображается событие в календаре пользователя.
//
Функция УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря, Знач Цвет, Пользователь = Неопределено, ФормироватьОписаниеРезультата = Ложь) Экспорт
	
	Если ТипЗнч(Цвет) = Тип("Цвет") Тогда
		Цвет = ПолучитьЦветКалендаря(Цвет);
	КонецЕсли;
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
		Пользователь, ЗаписьКалендаря, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет, Цвет);
	
КонецФункции

// Устанавливает цвет, которым будут отображаться события в календаре пользователя.
//
// Параметры:
//  ЗаписиКалендаря					 - Массив									 - записи рабочего календаря.
//  Цвет							 - ПеречислениеСсылка.ЦветаРабочегоКалендаря - цвет.
//  СоздаватьИсключенияПовторения	 - Булево									 - признак того что для повторяющегося события будет цвет установлен для одного элемента.
//
// Возвращаемое значение:
//  Массив - ссылки на записи календаря с обновленным цветом.
//
Функция УстановитьЦветЗаписейКалендаря(Знач ЗаписиКалендаря, Знач Цвет, Знач СоздаватьИсключенияПовторения) Экспорт
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если СоздаватьИсключенияПовторения И ЭтоПовторяющеесяСобытие(ЗаписьКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				ЗаписьКалендаряОбъект.Записать();
				
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			Иначе
				
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря.Ссылка, Цвет);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СсылкиИзмененныхЗаписейКалендаря;
	
КонецФункции

// Процедура отображает события пользователя в календарь на указанный период.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  НастройкиОтображения - Структура	 - настройки отображения планировщика.
//
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Если НастройкиОтображения.ОтобразитьТекущуюЗапись Тогда
		РаботаСРабочимКалендаремКлиентСервер.ОтобразитьТекущуюЗапись(
			Планировщик,
			НастройкиОтображения);
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Процедура заполняет таблицу плана дня.
//
// Параметры:
//  ДеревоПланДня - ДеревоЗначений - план дня.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
Процедура ОтобразитьПланДня(ДеревоПланДня, НастройкиОтображения) Экспорт
	
	ДеревоПланДня.Строки.Очистить();
	
	ПериодОтображения =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьПользователя = НастройкиОтображения.Пользователи.Количество() <> 1;
	
	// Получение отображаемых данных.
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
			НастройкиОтображения.Пользователи,
			ПользователиКлиентСервер.ТекущийПользователь(),,,
			НастройкиОтображения.ОтображатьОтклоненные);
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
	КонецЦикла;
	
	// Отображение плана дня.
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			// Отображение строки дня.
			СобытияДняПоЧасам.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если НастройкиОтображения.ОтобразитьТекущуюЗапись
					И Событие.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка Тогда
					Продолжить;
				КонецЕсли;
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НастройкиОтображения.ПланДняСкрытьПустые Тогда
				Если СобытияДняПоЧасам.Количество() = 0 Тогда
					НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СобытияДняПоЧасам.Сортировать("ДатаНачала, Наименование");
			
			КоличествоСобытий = СобытияДняПоЧасам.Количество();
			ДополнительноеПредставлениеДня = "";
			Если НачалоТекущегоДняНедели = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДополнительноеПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) + 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Завтра'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 2 * 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Позавчера'");
			КонецЕсли;
			
			СтрокаТекущегоДня = ДеревоПланДня.Строки.Добавить();
			СтрокаТекущегоДня.ЭтоГруппа = Истина;
			СтрокаТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
			СтрокаТекущегоДня.ИндексЦвета = -1;
			
			ПредставлениеДня = Формат(НачалоТекущегоДняНедели, "ДФ='дддд'");
			ПредставлениеДаты = Формат(НачалоТекущегоДняНедели, "ДФ='д ММММ гггг'");
			Если ЗначениеЗаполнено(ДополнительноеПредставлениеДня) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2, %3",
					ДополнительноеПредставлениеДня,
					ПредставлениеДня,
					ПредставлениеДаты);
			Иначе
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1, %2",
					ТРег(ПредставлениеДня),
					ПредставлениеДаты);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоСобытий) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтрШаблон("%1 (%2)",
					СтрокаТекущегоДня.ОписаниеКраткое,
					КоличествоСобытий);
			КонецЕсли;
			
			// Отображений событий в дне.
			Для Каждого СтрокаСобытие Из СобытияДняПоЧасам Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЭлементЗаписиКалендаря =
					РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(СтрокаСобытие);
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, ЭлементЗаписиКалендаря);
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое =
					СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие, Не СтрокаСобытие.ВесьДень, ОтображатьПользователя);
				Если СтрокаСобытие.Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет И СтрокаСобытие.Отработана Тогда
					СтрокаСобытиеТекущегоДня.ИндексЦвета = 6;
				Иначе
					СтрокаСобытиеТекущегоДня.ИндексЦвета =
						РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(СтрокаСобытие.Цвет);
				КонецЕсли;
				СтрокаСобытиеТекущегоДня.Цвет = СтрокаСобытие.Цвет;
			КонецЦикла;
			
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает персональную настройку рабочего календаря текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя);
		
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Ложь);
			
		
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Ложь);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Ложь);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Дата("00010101080000"));
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Дата("00010101190000"));
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			100);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			70);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Истина);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			9);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			6);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Истина);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Ложь);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			15);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Новый Массив);
		
	ИначеЕсли Настройка = "ОтображатьПолеПользователь" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПолеПользователь",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Истина);
			
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Значение);
			
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаление",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьОтклоненные",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьНавигационныйКалендарь",
			Значение);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Значение);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Значение);
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСтандартный" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСтандартный",
			Значение);
		
	ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"МасштабСПанельюИнформации",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЛегенду",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяС",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьВремяПо",
			Значение);
		
	ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ОтображениеВремениЭлементов") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображениеВремениЭлементов",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьЗанятость",
			Значение);
		
	ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ИспользоватьБыстроеРедактирование",
			Значение);
		
	ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"РазмерЯчейкиВремени",
			Значение);
		
	ИначеЕсли Настройка = "ТекущиеКалендариВсеКалендари" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ТекущиеКалендариВсеКалендари",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьПолеПользователь" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПолеПользователь",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьКалендарьВЗаписиКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьКалендарьВЗаписиКалендаря",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
// Параметры:
//  Запись			 - СправочникСсылка.ЗаписиРабочегоКалендаря - обрабатываемая запись.
//  ПометкаУдаления	 - Булево - новое значение пометки.
//
// Возвращаемое значение:
//  Булево - Истина, если действие выполнено успешно.
//
Функция УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	ЗаписьОбъект = Запись.ПолучитьОбъект();
	Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;
		ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает пометки удаления записей и возвращает факт изменения пометки удаления.
//
// Параметры:
//  Записи					 - Массив - обрабатываемые записи рабочего календаря.
//  ПовторяющиесяСобытия	 - Структура - структура со свойствами:
//    * ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - повторяющееся событие.
//    * ДатаИсключения - Дата - дата исключения.
//  ПометкаУдаления			 - Булево - новое значение пометки.
//
// Возвращаемое значение:
//  Булево - Истина, если операция прошла успешно.
//
Функция УстановитьПометкиУдаления(Записи, ПовторяющиесяСобытия, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из Записи Цикл
			ЗаписьОбъект = Запись.ПолучитьОбъект();
			Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				УстановленаПометкаУдаления = Истина;
				ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления И ПовторяющиесяСобытия.Количество() > 0 Тогда
			Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытия Цикл
				ПовторяющеесяСобытиеОбъект = ПовторяющеесяСобытие.ЗаписьКалендаря.ПолучитьОбъект();
				ПовторяющеесяСобытиеОбъект.Заблокировать();
				ПовторяющеесяСобытиеОбъект.ДобавитьИсключениеПовторения(ПовторяющеесяСобытие.ДатаИсключения);
				ПовторяющеесяСобытиеОбъект.Записать();
				УстановленаПометкаУдаления = Истина;
				ДобавитьВИсториюРаботыПользователя(ЗаписьОбъект);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает повторение события в соответствии с настройками повторения.
//
// Параметры:
//  ЗаписьКалендаря		 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - событие, запись рабочего календаря.
//  НастройкиПовторения	 - Структура	 - настройки повторения.
//
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	Если ТипЗнч(ЗаписьКалендаряОбъект) = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		Если ЗаписьКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
		КонецЕсли;
		Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченного на удаление события.'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаписьКалендаряОбъект) = Тип("ДокументОбъект.Бронь") Тогда
		Если ЗаписьКалендаряОбъект.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
		КонецЕсли;
		Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченной на удаление брони.'");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("НастройкиПовторения", НастройкиПовторения);
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры

// Формирует HTML представление события.
//
// Параметры:
//  Событие		 - СправочникСсылка	 - событие.
//  ДатаСобытия	 - Дата	 - дата события.
// 
// Возвращаемое значение:
//  Строка - HTML представление события.
//
Функция СформироватьHTMLПредставление(Событие, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Если ТипЗнч(Событие) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		ПредставлениеHTML = Справочники.ЗаписиРабочегоКалендаря.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	Иначе
		
		ПредставлениеHTML = "";
		РаботаСРабочимКалендаремПереопределяемый.ПриФормированииHTMLПредставленияСобытия(Событие, ДатаСобытия, ПредставлениеHTML);
		
		Если Не ЗначениеЗаполнено(ПредставлениеHTML) Тогда
			ПредставлениеHTML = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает по цвету рабочего календаря цвет для отображения.
Функция ПолучитьЦветТабличногоДокумента(ЦветКалендаря) Экспорт
	
	Если ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряКрасный;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряСиний;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЖелтый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЗеленый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряОранжевый;
	Иначе
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряПоУмолчанию;
	КонецЕсли;
	
	Возврат ЦветТабличногоДокумента;
	
КонецФункции

// Изменяет доступность времени.
Функция ИзменитьДоступностьВремени(ДатаНачала, ДатаОкончания, Занят = Неопределено) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НоваяЗанятость = 
		РегистрыСведений.ЗанятостьПользователя.ИзменитьДоступностьВремени(
			Пользователь, ДатаНачала, ДатаОкончания, Занят);
	
	Возврат НоваяЗанятость;
	
КонецФункции

// Изменяет доступность массива времен.
//
// Параметры:
//  МассивВремен - Массив - времена, доступность которых изменяется.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияЗанятости - установленное состояние занятости.
//
Функция ИзменитьДоступностьВремен(МассивВремен) Экспорт
	
	УстановленнаяЗанятость = Неопределено;
	
	Для Каждого Время Из МассивВремен Цикл
		НоваяЗанятость = ИзменитьДоступностьВремени(Время.ДатаНачала, Время.ДатаОкончания, УстановленнаяЗанятость);
		Если УстановленнаяЗанятость = Неопределено Тогда
			УстановленнаяЗанятость = НоваяЗанятость;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УстановленнаяЗанятость;
	
КонецФункции

// Возвращает настройку доступности по умолчанию для пользователя.
Функция ПолучитьНастройкуДоступностиПользователя(Пользователь) Экспорт
	
	ДоступностьПоУмолчанию = РегистрыСведений.НастройкиРабочегоКалендаря.ПолучитьНастройку(
		Пользователь, Перечисления.НастройкиРабочегоКалендаря.Доступность);
	
	Если НЕ ЗначениеЗаполнено(ДоступностьПоУмолчанию) Тогда
		ДоступностьПоУмолчанию = Перечисления.ДоступностьПользователя.ДоступенВсегда;
	КонецЕсли;
	
	Возврат ДоступностьПоУмолчанию;
	
КонецФункции

// Устанавливает настройку доступности по умолчанию.
Функция УстановитьНастройкуДоступностиПользователя(Пользователь, ДоступностьПоУмолчанию) Экспорт
	
	ИзмененоЗначениеНастройки = РегистрыСведений.НастройкиРабочегоКалендаря.УстановитьНастройку(
		Пользователь,
		Перечисления.НастройкиРабочегоКалендаря.Доступность,
		ДоступностьПоУмолчанию);
	
	Возврат ИзмененоЗначениеНастройки;
	
КонецФункции

// Проверяет, заняты ли пользователи в указанное время.
//
// Параметры:
//  МассивПользователей	 - Массив	 - пользователи, для которых выполняется проверка.
//  ДатаНачала			 - Дата		 - дата начала проверки.
//  ДатаОкончания		 - Дата		 - дата окончания проверки.
//  ИсключенияЗанятости	 - Массив	 - исключения занятости.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ОбщаяЗанятость - ПеречислениеСсылка.СостоянияЗанятости - обобщенная занятость.
//    * ПользователиОтсутствуют - Массив - отключенные напоминания пользователя.
//    * ПользователиЗанятые - Массив - отключенные напоминания пользователя.
//    * ПользователиПодВопросом - Массив - отключенные напоминания пользователя.
//
Функция ПроверитьДоступностьПользователей(
	МассивПользователей,
	ДатаНачала,
	ДатаОкончания,
	ИсключенияЗанятости) Экспорт
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(
		МассивПользователей,
		ДатаНачала,
		ДатаОкончания,
		Истина,
		ИсключенияЗанятости,
		Истина);
	
	ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	ВременаПодВопросом = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаПодВопросом.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	ВременаЗанятые = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаЗанятые.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	ВременаОтсутствует = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаОтсутствует.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Отсутствует;
	КонецЕсли;
	
	ПользователиОтсутствуют = Новый Массив;
	Для Каждого ВремяОтсутствует Из ВременаОтсутствует Цикл
		Если ПользователиОтсутствуют.Найти(ВремяОтсутствует.Пользователь) = Неопределено Тогда
			ПользователиОтсутствуют.Добавить(ВремяОтсутствует.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ПользователиЗанятые = Новый Массив;
	Для Каждого ВремяЗанятое Из ВременаЗанятые Цикл
		Если ПользователиОтсутствуют.Найти(ВремяЗанятое.Пользователь) = Неопределено
			И ПользователиЗанятые.Найти(ВремяЗанятое.Пользователь) = Неопределено Тогда
			ПользователиЗанятые.Добавить(ВремяЗанятое.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ПользователиПодВопросом = Новый Массив;
	Для Каждого ВремяПодВопросом Из ВременаПодВопросом Цикл
		Если ПользователиОтсутствуют.Найти(ВремяПодВопросом.Пользователь) = Неопределено
			И ПользователиЗанятые.Найти(ВремяПодВопросом.Пользователь) = Неопределено
			И ПользователиПодВопросом.Найти(ВремяПодВопросом.Пользователь) = Неопределено Тогда
			ПользователиПодВопросом.Добавить(ВремяПодВопросом.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ДоступностьПользователей = Новый Структура(
		"ОбщаяЗанятость, ПользователиОтсутствуют, ПользователиЗанятые, ПользователиПодВопросом");
	ДоступностьПользователей.ОбщаяЗанятость = ОбщаяЗанятость;
	ДоступностьПользователей.ПользователиОтсутствуют = ПользователиОтсутствуют;
	ДоступностьПользователей.ПользователиЗанятые = ПользователиЗанятые;
	ДоступностьПользователей.ПользователиПодВопросом = ПользователиПодВопросом;
	
	Возврат ДоступностьПользователей;
	
КонецФункции

// Формирует таблицу рекомендаций, содержащую время доступное для всех пользователей.
Функция ПолучитьТаблицуОбщейЗанятости(Знач МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(
		МассивПользователей,
		ДатаНачала,
		ДатаОкончания,
		Истина,
		ИсключенияЗанятости);
	
	Возврат СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания);
	
КонецФункции

// Переносит элементы планировщика на указанную дату.
//
// Параметры:
//  ЗаписиКалендаря		 - Массив	 - переносимые записи календаря.
//  ДатаПереноса		 - Дата		 - новая дата.
//  НастройкиОтображения - Структура - настройки отображения календаря.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * СсылкиИзмененныхЗаписейКалендаря - Массив - ссылки на записи календаря.
//    * НовыеИсключенияПовторения - Массив - массив структур.
//    * ОбновитьПринудительно - Булево.
//    * ДанныеПланировщика - Структура - описание см. РаботаСРабочимКалендарем.НовыеДанныеПланировщика.
//
Функция ПеренестиЭлементыПланировщикаНаДату(ЗаписиКалендаря, ДатаПереноса, НастройкиОтображения = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", Новый Массив);
	Результат.Вставить("НовыеИсключенияПовторения", Новый Массив);
	Результат.Вставить("ОбновитьПринудительно", Ложь);
	Результат.Вставить("ДанныеПланировщика", Неопределено);
	
	НачатьТранзакцию();
	Попытка
		
		НоваяДатаНачала = НачалоДня(ДатаПереноса);
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
				
				ЗаписьКалендаряОбъект = СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря);
				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря.Ссылка);
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Цвет = РаботаСРабочимКалендарем.ПолучитьЦветСобытияКалендаря(ЗаписьКалендаря.Ссылка);
				УстановитьЦветЗаписиКалендаря(ЗаписьКалендаряОбъект.Ссылка, Цвет);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
				ИсключениеПовторения = Новый Структура("НоваяСсылка, СтараяСсылка, ДатаНачалаИсходная");
				ИсключениеПовторения.НоваяСсылка = ЗаписьКалендаряОбъект.Ссылка;
				ИсключениеПовторения.СтараяСсылка = ЗаписьКалендаря.Ссылка;
				ИсключениеПовторения.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачалаИсходная;
				Результат.НовыеИсключенияПовторения.Добавить(ИсключениеПовторения);
				
			Иначе
				
				ЗаписьКалендаряОбъект = ЗаписьКалендаря.Ссылка.ПолучитьОбъект();
				Длительность = ЗаписьКалендаряОбъект.ДатаОкончания - ЗаписьКалендаряОбъект.ДатаНачала;
				ВремяНачала = ЗаписьКалендаряОбъект.ДатаНачала - НачалоДня(ЗаписьКалендаряОбъект.ДатаНачала);
				ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
				ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
				ЗаписьКалендаряОбъект.Записать();
				
				ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаряОбъект);
				
				Результат.СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат.ОбновитьПринудительно = Истина;
	Если НастройкиОтображения <> Неопределено Тогда
		Результат.ДанныеПланировщика = ОбновитьДанныеПланировщика(НастройкиОтображения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление предмета.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - предмет, на основании которого создана запись календаря.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьПредставлениеПредмета(Предмет) Экспорт
	
	ПредставлениеПредмета = "";
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ПредставлениеПредмета;
	КонецЕсли;
	
	РаботаСРабочимКалендаремПереопределяемый.ПриПолученииПредставленияПредмета(Предмет, ПредставлениеПредмета);
	
	Возврат ПредставлениеПредмета;
	
КонецФункции

// Обработчик подписки КалендарьПередЗаписьюПредмета.
Процедура КалендарьПередЗаписьюПредмета(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДополнительноеСвойствоЭтоНовый(Источник);
	УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Источник);
	
	РаботаСРабочимКалендаремПереопределяемый.ПередЗаписьПредметаКалендаря(Источник);
	
КонецПроцедуры

// Обработчик подписки КалендарьПриЗаписиПредмета.
Процедура КалендарьПередЗаписьюПредметаДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	КалендарьПередЗаписьюПредмета(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подписки КалендарьПриЗаписиПредмета.
Процедура КалендарьПриЗаписиПредмета(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Источник.Ссылка);
	МенеджерОбъекта.КалендарьПриЗаписиПредмета(Источник, Отказ);
	
КонецПроцедуры

// Проверяет, задан ли для пользователя график работы.
Функция ЗаданГрафикРаботыПользователя(Пользователь, ПроверяемаяДата) Экспорт
	
	ГрафикЗадан = Ложь;
	РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииЗаданностиГрафикаРаботыПользователя(Пользователь, ПроверяемаяДата, ГрафикЗадан);
	
	Возврат ГрафикЗадан;
	
КонецФункции

// Заполняет список рабочих дней в соответствии с графиком пользователям. Заполняется год
// соответствующий дате заполнения и смежные с ним года. После заполнения год включается в список 
// заполненных. Если дата заполнения присутствует в списке, то заполнение рабочих не производится.
//
// Параметры:
//  РабочиеДни - СписокЗначений - список дней, среди которых рабочие выделены пометкой.
//  ЗаполненныеГода - СписокЗначений - список лет, для которых заполнены рабочие дни.
//  ДатаЗаполнения - Дата - дата, на которую хотим заполнить рабочие дни.
//
Процедура ЗаполнитьРабочиеДни(РабочиеДни, ЗаполненныеГода, ДатаЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если рабочие дни по году уже заполнены, то не требуется заполнять рабочие дни.
	ГодЗаполнения = Год(ДатаЗаполнения);
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор лет, для которых требуется заполнить рабочие дни - год заполнения и смежные с ним.
	МассивЛетЗаполнения = Новый Массив;
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ГодЗаполнения);
		ЗаполненныеГода.Добавить(ГодЗаполнения);
	КонецЕсли;
	
	ПредшествующийГод = ГодЗаполнения - 1;
	Если ЗаполненныеГода.НайтиПоЗначению(ПредшествующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ПредшествующийГод);
		ЗаполненныеГода.Добавить(ПредшествующийГод);
	КонецЕсли;
	
	СледующийГод = ГодЗаполнения + 1;
	Если ЗаполненныеГода.НайтиПоЗначению(СледующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(СледующийГод);
		ЗаполненныеГода.Добавить(СледующийГод);
	КонецЕсли;
	
	РаботаСРабочимКалендаремПереопределяемый.ПриЗаполненииРабочихДнейПользователя(РабочиеДни, МассивЛетЗаполнения, ДатаЗаполнения);
	
КонецПроцедуры

// Возвращает события пользователя за определенный промежуток времени.
//
// Параметры:
//  ДатаНачала - Дата - с какой даты следует получать события.
//  ДатаОкончания - Дата - по какую дату следует получать события.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, события которого необходимо получить.
//  БезЗаписейОбОтсутствии - Булево - без записей календаря об отсутствии.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица событий пользователя.
//
Функция ПолучитьСобытияПользователя(ДатаНачала, ДатаОкончания, Пользователь, БезЗаписейОбОтсутствии = Истина) Экспорт
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Пользователь);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТаблицаСобытий = ПолучитьТаблицуСобытий(
		ДатаНачала,
		ДатаОкончания,
		Ложь,
		МассивПользователей,
		ТекущийПользователь,,,
		Ложь);
	
	РаботаСРабочимКалендаремПереопределяемый.ПриПолученииТаблицыСобытийПользователя(ТаблицаСобытий, БезЗаписейОбОтсутствии);
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует таблицу занятости.
Функция СформироватьТаблицуЗанятости() Экспорт
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("Пользователь");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Заполняет таблицу событий данными повторяющегося события.
//
Процедура ВнестиПовторяющеесяСобытиеВТаблицу(ТаблицаСобытий, ДанныеСобытия, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемаяДата = НачалоДня(ДатаНачала);
	Пока ПроверяемаяДата < ДатаОкончания Цикл
		
		ПравилоПовторения = НовоеПравилоПовторения();
		ЗаполнитьЗначенияСвойств(ПравилоПовторения, ДанныеСобытия);
		ПравилоПовторения.ИсключенияПовторения = ДанныеСобытия.ИсключенияПовторения.Выгрузить();
		ПравилоПовторения.ПовторениеПоДням = ДанныеСобытия.ПовторениеПоДням.Выгрузить();
		
		Если ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, ПравилоПовторения) Тогда
			
			ДатаНачалаЭлементаПовторения = НачалоДня(ПроверяемаяДата)
				+ (ДанныеСобытия.ДатаНачала - НачалоДня(ДанныеСобытия.ДатаНачала));
			ДатаОкончанияЭлементаПовторения = НачалоДня(ПроверяемаяДата)
				+ (ДанныеСобытия.ДатаОкончания - НачалоДня(ДанныеСобытия.ДатаНачала));
			
			Если ДатаНачала < ДатаОкончанияЭлементаПовторения И ДатаОкончания > ДатаНачалаЭлементаПовторения Тогда
				НоваяСтрока = ТаблицаСобытий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСобытия);
				НоваяСтрока.ДатаНачала = ДатаНачалаЭлементаПовторения;
				НоваяСтрока.ДатаОкончания = ДатаОкончанияЭлементаПовторения;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу событий данными выборки.
//
Процедура ЗаполнитьТаблицуПовторяющимисяСобытиями(ТаблицаСобытий, Выборка, ДатаНачала, ДатаОкончания) Экспорт
	
	Пока Выборка.Следующий() Цикл
		ВнестиПовторяющеесяСобытиеВТаблицу(ТаблицаСобытий, Выборка, ДатаНачала, ДатаОкончания);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру правила повторения.
Функция НовоеПравилоПовторения() Экспорт
	
	ПравилоПовторения = Новый Структура();
	ПравилоПовторения.Вставить("ДатаНачалаПовторения");
	ПравилоПовторения.Вставить("ДатаОкончанияПовторения");
	ПравилоПовторения.Вставить("ИнтервалПовторения");
	ПравилоПовторения.Вставить("КоличествоПовторов");
	ПравилоПовторения.Вставить("ПовторениеПоДнямМесяца");
	ПравилоПовторения.Вставить("ПовторениеПоМесяцам");
	ПравилоПовторения.Вставить("ТипЗаписиКалендаря");
	ПравилоПовторения.Вставить("ЧастотаПовторения");
	ПравилоПовторения.Вставить("ИсключенияПовторения");
	ПравилоПовторения.Вставить("ПовторениеПоДням");
	
	Возврат ПравилоПовторения;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения.
Функция ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, ПравилоПовторения, УчитыватьИсключения = Истина) Экспорт
	
	Если ПроверяемаяДата < ПравилоПовторения.ДатаНачалаПовторения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравилоПовторения.ДатаОкончанияПовторения)
		И ПроверяемаяДата > ПравилоПовторения.ДатаОкончанияПовторения
		И УчитыватьИсключения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (УчитыватьИсключения И ЯвляетсяИсключениемПовторения(ПроверяемаяДата, ПравилоПовторения))
		ИЛИ НЕ УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, ПравилоПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, ПравилоПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, ПравилоПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, ПравилоПовторения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получает данные планировщика, при необходимости сохраняя измененную настройку.
//
// Параметры:
//  НастройкиОтображения - Структура - настройки отображения планировщика.
//  ИзмененнаяНастройка	 - Строка	 - имя измененной настройки.
//
// Возвращаемое значение:
//  Структура - описание см. РаботаСРабочимКалендарем.НовыеДанныеПланировщика.
//
Функция ПолучитьДанныеПланировщика(Знач НастройкиОтображения, Знач ИзмененнаяНастройка) Экспорт
	
	СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	ДанныеПланировщика = НовыеДанныеПланировщика();
	ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения);
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Получает данные планировщика, необходимые для обновления данных о записях календаря.
//
// Параметры:
//  НастройкиОтображения - Структура - настройки отображения планировщика.
//  ЗаписиКалендаря		 - Массив - записи календаря, которые необходимо обновить.
//
// Возвращаемое значение:
//  Структура - описание см. РаботаСРабочимКалендарем.НовыеДанныеПланировщика.
//
Функция ОбновитьДанныеПланировщика(Знач НастройкиОтображения, Знач ЗаписиКалендаря = Неопределено) Экспорт
	
	ДанныеПланировщика = НовыеДанныеПланировщика();
	Если ЗаписиКалендаря <> Неопределено Тогда
		ДанныеПланировщика.Элементы = ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	КонецЕсли;
	ДанныеПланировщика.ИнтервалыФона = ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Сохраняет измененную настройку отображения.
//
Процедура СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка) Экспорт
	
	Если Не ЗначениеЗаполнено(ИзмененнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененнаяНастройка = "ПериодОтображения" Тогда
		УстановитьПерсональнуюНастройку(
			"ПериодОтображенияРабочегоКалендаря",
			НастройкиОтображения.ПериодОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", ЗаписьКалендаря.ДатаНачала);
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Устанавливает условное оформление плана дня на форме.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеПланДня(УсловноеОформление) Экспорт
	
	// Помеченные на удаление элементы.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
	// Элемент дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонШапки);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодпись);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
	// Элемент текущего дня.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланДня");
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ДатаДень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСегодня");
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланДня.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветФона", ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветКалендаряПодписьТекущийДень);
	
КонецПроцедуры

// Подключает напоминание автоматически для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - запись календаря.
//
// Возвращаемое значение:
//  Структура - напоминание текущего пользователя.
//
Функция ПодключитьНапоминаниеАвтоматически(ЗаписьКалендаря) Экспорт
	
	Напоминание = Неопределено;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя") Тогда
		Возврат Напоминание;
	КонецЕсли;
	
	РаботаСРабочимКалендаремПереопределяемый.ПриПодключенииНапоминанияАвтоматически(ЗаписьКалендаря, Напоминание);
	
	Возврат Напоминание;
	
КонецФункции

// Определяет право изменения календаря пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, чьи права проверяем.
//  ПользовательКалендаря - СправочникСсылка.Пользователи - пользователь, права на чей календарь проверяем.
//
// Возвращаемое значение:
//  Булево - доступно изменение календаря.
//
Функция ДоступноИзменениеКалендаря(Пользователь, ПользовательКалендаря) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пользователь в своем календаре имеет право изменения.
	Если ПользовательКалендаря = Пользователь Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Ложь;
	РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииПраваИзмененияКалендаря(Пользователь, ЕстьПраво);
	
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак отработана для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря.
// 
// Возвращаемое значение:
//  Булево - признак того что запись календаря отработана.
//
Функция ЗаписьКалендаряОтработана(ЗаписьКалендаря) Экспорт
	
	Отработана = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		ЗаписьКалендаря,
		Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана);
	Если Отработана = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Отработана;
	
КонецФункции

// Отмечает записи календаря как отработанные.
//
// Параметры:
//  ЗаписиКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - отработанные записи календаря.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * СсылкиИзмененныхЗаписейКалендаря - Массив - ссылки на записи календаря.
//    * ОтключенныеНапоминания - Массив - отключенные напоминания пользователя.
//
Функция ОтработатьВыделенныеЗаписиКалендаря(Знач ЗаписиКалендаря) Экспорт
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	ОтключенныеНапоминания = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
			
			Если ЭтоПовторяющеесяСобытие(ЗаписьКалендаря) Тогда
				
				ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
				ЗаписьКалендаряОбъект.Заполнить(ЗаписьКалендаря.Ссылка);
				ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания");
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЗаписьКалендаря.Ссылка);
				ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЗаписьКалендаря.ДатаНачалаИсходная);
				ЗаписьКалендаряОбъект.Записать();
				
				ОтработатьЗаписьКалендаря(ЗаписьКалендаряОбъект.Ссылка, ОтключенныеНапоминания);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаряОбъект.Ссылка);
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			Иначе
				
				ОтработатьЗаписьКалендаря(ЗаписьКалендаря.Ссылка, ОтключенныеНапоминания);
				
				СсылкиИзмененныхЗаписейКалендаря.Добавить(ЗаписьКалендаря.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкиИзмененныхЗаписейКалендаря", СсылкиИзмененныхЗаписейКалендаря);
	Результат.Вставить("ОтключенныеНапоминания", ОтключенныеНапоминания);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает признак отработана для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря.
//  Отработана		 - Булево									 - новый признак отработки.
//
Процедура УстановитьОтработанаЗаписьКалендаря(ЗаписьКалендаря, Отработана = Истина) Экспорт
	
	РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		ЗаписьКалендаря,
		Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана,
		Отработана);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать новую (см. РаботаСРабочимКалендарем.НовоеПравилоПовторения).
// Возвращает структуру правила повторения.
//
Функция ПолучитьСтруктуруПравилаПовторения() Экспорт
	
	Возврат НовоеПравилоПовторения();
	
КонецФункции

// Устарела. Следует использовать новую (см. РаботаСРабочимКалендарем.ОписаниеЭлементаПланировщика).
// Формирует описание элемента планировщика по событию.
//
Функция ПолучитьСтруктуруЭлементаПланировщика(ЗаписьКалендаря,
	ИспользоватьНапоминания = Неопределено, ОтключеноОтображениеВремени = Неопределено) Экспорт
	
	Возврат ОписаниеЭлементаПланировщика(ЗаписьКалендаря, ИспользоватьНапоминания, ОтключеноОтображениеВремени);
	
КонецФункции

// Устарела. Следует использовать новую (см. ОписаниеЭлементаПланировщикаПоЗанятости).
// Формирует описание элемента планировщика по занятости.
//
Функция ПолучитьСтруктуруЭлементаПланировщикаЗанятость(Занятость, Пользователь = Неопределено) Экспорт
	
	Возврат ОписаниеЭлементаПланировщикаПоЗанятости(Занятость, Пользователь);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет является ли запись календаря повторяющейся.
//
Функция ЭтоПовторяющеесяСобытие(ЗаписьКалендаря)
	
	Возврат ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
	
КонецФункции

// Возвращает факт того что установлено напоминание.
//
Функция УстановленоНапоминание(ЗаписьКалендаря)
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		МассивЗаписейКалендаря = Новый Массив;
		МассивЗаписейКалендаря.Добавить(ЗаписьКалендаря);
	Иначе
		МассивЗаписейКалендаря = ЗаписьКалендаря;
	КонецЕсли;
	
	УстановленоНапоминание = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL КАК УстановленоНапоминание
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка В (&МассивЗаписейКалендаря)";
	
	Запрос.УстановитьПараметр("МассивЗаписейКалендаря", МассивЗаписейКалендаря);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УстановленоНапоминание Тогда
			УстановленоНапоминание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УстановленоНапоминание;
	
КонецФункции

// Формирует пустую таблицу событий.
//
Функция СформироватьТаблицуСобытий()
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("ВесьДень");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	ТаблицаСобытий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСобытий.Колонки.Добавить("ТипЗаписиКалендаря");
	ТаблицаСобытий.Колонки.Добавить("Состояние");
	ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание");
	ТаблицаСобытий.Колонки.Добавить("Пользователь");
	ТаблицаСобытий.Колонки.Добавить("Предмет");
	ТаблицаСобытий.Колонки.Добавить("Связанная");
	ТаблицаСобытий.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Получает настройку отображения времени элементов.
//
// Возвращаемое значение:
//  ОтображениеВремениЭлементовПланировщика - настройка отображения времени элементов.
//
Функция ПолучитьНастройкуОтображениеВремениЭлементов()
	
	ОтображениеВремениЭлементов =
		РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ОтображениеВремениЭлементов");
	
	Если ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.НеОтображать Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачала Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачала;
	ИначеЕсли ОтображениеВремениЭлементов = Перечисления.ОтображениеВремениЭлементов.ВремяНачалаИКонца Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Иначе
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	КонецЕсли;
	
	Возврат НастройкаОтображениеВремениЭлементов;
	
КонецФункции

// Загружает данные планировщика.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	Планировщик.НачалоПериодаОтображения = Неопределено;
	Планировщик.КонецПериодаОтображения = Неопределено;
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтобразитьЗанятостьВДне = РаботаСРабочимКалендаремКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);
	
	// События
	Если НастройкиОтображения.ОтображатьСобытия Тогда
		
		// Получение отображаемых данных
		СобытияПоЧасам = СформироватьТаблицуСобытий();
		Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
			ОтображаемаяДатаНачала =
				РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.НачалоПериодаОтображения) Тогда
				Планировщик.НачалоПериодаОтображения = Мин(
					Планировщик.НачалоПериодаОтображения,
					ОтображаемаяДатаНачала);
			Иначе
				Планировщик.НачалоПериодаОтображения = ОтображаемаяДатаНачала;
			КонецЕсли;
			
			ОтображаемаяДатаОкончания =
				РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
					ПериодОтображения,
					ВыделеннаяДата);
			Если ЗначениеЗаполнено(Планировщик.КонецПериодаОтображения) Тогда
				Планировщик.КонецПериодаОтображения = Мин(
					Планировщик.КонецПериодаОтображения,
					ОтображаемаяДатаОкончания);
			Иначе
				Планировщик.КонецПериодаОтображения = ОтображаемаяДатаОкончания;
			КонецЕсли;
			
			СобытияНаДату = ПолучитьТаблицуСобытий(
				ОтображаемаяДатаНачала,
				ОтображаемаяДатаОкончания,
				НастройкиОтображения.ОтображатьПомеченныеНаУдаление,
				НастройкиОтображения.Пользователи,
				ПользователиКлиентСервер.ТекущийПользователь(),,,
				НастройкиОтображения.ОтображатьОтклоненные);
			Для Каждого Событие Из СобытияНаДату Цикл
				НоваяСтрока = СобытияПоЧасам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение элементов планировщика - События
		Для Каждого Событие Из СобытияПоЧасам Цикл
			Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
			СтруктураЭлемента = ОписаниеЭлементаПланировщика(
				Событие, НастройкиОтображения.ИспользоватьНапоминания,
				НастройкиОтображения.ОтключеноОтображениеВремени);
			Элемент.Загрузить(СтруктураЭлемента);
		КонецЦикла;
		
	КонецЕсли;
	
	// Занятость
	Если НастройкиОтображения.ОтображатьЗанятость Тогда
		
		ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
		ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения);
		
		// Заполнение элементов планировщика
		Если НастройкиОтображения.ОтображатьСобытия Тогда
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				ИнтервалФона.Цвет = ПолучитьЦветЗанятости(Занятость);
			КонецЦикла;
		Иначе
			
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
					Продолжить;
				КонецЕсли;
				Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				СтруктураЭлемента = ОписаниеЭлементаПланировщикаПоЗанятости(Занятость);
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
			
			Для Каждого Занятость Из ТаблицаОбщейЗанятости Цикл
				Если Занятость.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
					Продолжить;
				КонецЕсли;
				Элемент = Планировщик.Элементы.Добавить(Занятость.ДатаНачала, Занятость.ДатаОкончания);
				СтруктураЭлемента = ОписаниеЭлементаПланировщикаПоЗанятости(Занятость, "Общее");
				Элемент.Загрузить(СтруктураЭлемента);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу событий.
Функция ПолучитьТаблицуСобытий(
	ОтображаемаяДатаНачала,
	ОтображаемаяДатаОкончания,
	ОтображатьПомеченныеНаУдаление,
	МассивПользователей,
	ТекущийПользователь,
	ВесьДень = Неопределено,
	ЗаписиКалендаря = Неопределено,
	ОтображатьОтклоненные = Ложь)
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)) КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL  КАК УстановленоНапоминание,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЕСТЬNULL(ОтработаныЗаписи.ЗначениеНастройки, ЛОЖЬ) КАК Отработана
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|			И (ОтработаныЗаписи.Пользователь = &ТекущийПользователь)
		|			И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончания > &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачала < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В(&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)";
	
	Если Не ОтображатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Если ОтображатьОтклоненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)", "");
	КонецЕсли;
	
	Если ЗаписиКалендаря <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Ссылка В(&ЗаписиКалендаря)", "");
	КонецЕсли;
	
	Если ВесьДень <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВесьДень", ВесьДень);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень", "");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ДобавитьВТаблицуСобытийПовторяющиесяСобытия(
		ТаблицаСобытий,
		ОтображаемаяДатаНачала,
		ОтображаемаяДатаОкончания,
		МассивПользователей,
		ТекущийПользователь,
		ВесьДень,
		ЗаписиКалендаря,
		ОтображатьОтклоненные);
	
	ТаблицаСобытий.Сортировать("ДатаНачала");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Включает в таблицу событий повторяющиеся события.
Процедура ДобавитьВТаблицуСобытийПовторяющиесяСобытия(
	ТаблицаСобытий,
	ОтображаемаяДатаНачала,
	ОтображаемаяДатаОкончания,
	МассивПользователей,
	ТекущийПользователь,
	ВесьДень = Неопределено,
	ЗаписиКалендаря = Неопределено,
	ОтображатьОтклоненные = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)) КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	) КАК ПовторениеПоДням,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL  КАК УстановленоНапоминание,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЕСТЬNULL(ОтработаныЗаписи.ЗначениеНастройки, ЛОЖЬ) КАК Отработана
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|			И (ОтработаныЗаписи.Пользователь = &ТекущийПользователь)
		|			И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения >= &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В (&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.Наименование,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ВесьДень,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)),
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL  КАК УстановленоНапоминание,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Предмет,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЕСТЬNULL(ОтработаныЗаписи.ЗначениеНастройки, ЛОЖЬ)
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК ОтработаныЗаписи
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = ОтработаныЗаписи.Событие
		|			И (ОтработаныЗаписи.Пользователь = &ТекущийПользователь)
		|			И (ОтработаныЗаписи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Отработана))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В (&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)
		|	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)";
	
	Если ОтображатьОтклоненные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Отклонено)", "");
	КонецЕсли;
	
	Если ЗаписиКалендаря <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаписиРабочегоКалендаря.Ссылка В (&ЗаписиКалендаря)", "");
	КонецЕсли;
	
	Если ВесьДень <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВесьДень", ВесьДень);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВесьДень", ВесьДень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЗаполнитьТаблицуПовторяющимисяСобытиями(
		ТаблицаСобытий,
		Выборка,
		ОтображаемаяДатаНачала,
		ОтображаемаяДатаОкончания);
	
КонецПроцедуры

// Проверяет подходит ли дата под правило повторения по интервалам.
Функция УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, ПравилоПовторения)
	
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоДня(ПроверяемаяДата) - НачалоДня(ПравилоПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоНедели(ПроверяемаяДата) - НачалоНедели(ПравилоПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		КоличествоЛетИнтервала =
			Год(ПроверяемаяДата) - Год(ПравилоПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала =
			Месяц(ПроверяемаяДата) - Месяц(ПравилоПовторения.ДатаНачалаПовторения) + КоличествоЛетИнтервала * 12;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		НомерПериодаИнтервала =
			Год(ПроверяемаяДата) - Год(ПравилоПовторения.ДатаНачалаПовторения);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерПериодаИнтервала % ПравилоПовторения.ИнтервалПовторения = 0;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням.
Функция УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, ПравилоПовторения)
	
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		Для Каждого ПовторениеПоДнямСтрока Из ПравилоПовторения.ПовторениеПоДням Цикл
			
			Если ПовторениеПоДнямСтрока.НомерВхождения <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПовторениеПоДнямСтрока.ДеньНедели = ДеньНедели(ПроверяемаяДата) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если ЗначениеЗаполнено(ПравилоПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		Иначе
			
			Если ПравилоПовторения.ПовторениеПоДням.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого ПовторениеПоДнямСтрока Из ПравилоПовторения.ПовторениеПоДням Цикл
				
				Если ПовторениеПоДнямСтрока.НомерВхождения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяДатаДеньНеделиВМесяце = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата);
				ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата, Ложь);
				
				Если (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяце.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяце.НомерВхождения)
					ИЛИ (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.НомерВхождения) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням месяца.
Функция УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, ПравилоПовторения)
	
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если НЕ ЗначениеЗаполнено(ПравилоПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПравилоПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если ПравилоПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по месяцам.
Функция УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, ПравилоПовторения)
	
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если ПравилоПовторения.ПовторениеПоМесяцам = Месяц(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет является ли дата исключением.
Функция ЯвляетсяИсключениемПовторения(ПроверяемаяДата, ПравилоПовторения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", НачалоДня(ПроверяемаяДата));
	НайденныеСтроки = ПравилоПовторения.ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует текстовое описание события.
Функция СформироватьТекстовоеОписаниеСобытия(Событие, ВключатьВремяВОписание, ОтображатьПользователя)
	
	Описание = Новый Массив;
	
	Если Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Описание.Добавить("?");
	ИначеЕсли Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Описание.Добавить("-");
	КонецЕсли;
	
	Если ВключатьВремяВОписание Тогда
		Описание.Добавить(СтрШаблон("%1 - %2",
			Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм"),
			Формат(Событие.ДатаОкончания, "ДФ=ЧЧ:мм")));
	КонецЕсли;
	
	Если ОтображатьПользователя Тогда
		Описание.Добавить(СтрШаблон("%1,", Событие.Пользователь));
	КонецЕсли;
	
	Описание.Добавить(Событие.Наименование);
	
	Возврат СтрСоединить(Описание, " ");
	
КонецФункции

// Возвращает соответствующее состояние занятости.
//
// Параметры:
//  СостояниеЗаписиРабочегоКалендаря - ПеречислениеСсылка.СостоянияЗаписейРабочегоКалендаря - состояние записи рабочего календаря.
//  Связанная - Булево - запись календаря является связанной.
//  Предмет - СправочникСсылка, ДокументСсылка - предмет записи календаря.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияЗанятости - состояние занятости.
//
Функция ПолучитьСоответствующееСостояниеЗанятости(СостояниеЗаписиРабочегоКалендаря, Связанная, Предмет) 
	
	СостоянияЗанятости = Неопределено;
	РаботаСРабочимКалендаремПереопределяемый.ПриПолученииСостоянияЗанятости(СостояниеЗаписиРабочегоКалендаря, Связанная, Предмет, СостоянияЗанятости);
	
	Если Не ЗначениеЗаполнено(СостоянияЗанятости) Тогда
		
		Если СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
			СостоянияЗанятости = Перечисления.СостоянияЗанятости.Занят;
		ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
			СостоянияЗанятости = Перечисления.СостоянияЗанятости.Доступен;
		ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
			Или Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
			СостоянияЗанятости = Перечисления.СостоянияЗанятости.ПодВопросом;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СостоянияЗанятости;
	
КонецФункции

// Возвращает таблицу занятости пользователей.
//
Функция ПолучитьТаблицуЗанятостиПользователей(Знач МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(МассивПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	Если ИсключенияЗанятости = Неопределено Тогда
		МассивИсключенийЗанятости = Новый Массив;
	ИначеЕсли ТипЗнч(ИсключенияЗанятости) = Тип("Массив") Тогда
		СвязанныеЗаписиКалендаря =
			Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(ИсключенияЗанятости);
		МассивИсключенийЗанятости = СвязанныеЗаписиКалендаря.ВыгрузитьКолонку("Ссылка");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсключенийЗанятости, ИсключенияЗанятости, Истина);
	Иначе
		СвязанныеЗаписиКалендаря =
			Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(ИсключенияЗанятости);
		МассивИсключенийЗанятости = СвязанныеЗаписиКалендаря.ВыгрузитьКолонку("Ссылка");
		МассивИсключенийЗанятости.Добавить(ИсключенияЗанятости);
	КонецЕсли;
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("Пользователь");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
		|	ЗаписиРабочегоКалендаря.ДатаНачала КАК ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания КАК ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.Состояние КАК Состояние,
		|	ЗаписиРабочегоКалендаря.Связанная КАК Связанная,
		|	ЗаписиРабочегоКалендаря.Предмет КАК Предмет
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ДатаНачала < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.ДатаОкончания > &ДатаНачала
		|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
		|			ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)";
	
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ИсключенияЗанятости", МассивИсключенийЗанятости);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаЗанятости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Занят = ПолучитьСоответствующееСостояниеЗанятости(
			Выборка.Состояние,
			Выборка.Связанная,
			Выборка.Предмет);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	) КАК ИсключенияПовторения,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	) КАК ПовторениеПоДням,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря1,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЗаписиРабочегоКалендаря.Предмет
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения >= &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
		|			ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние,
		|	ЗаписиРабочегоКалендаря.Пользователь,
		|	ЗаписиРабочегоКалендаря.Связанная,
		|	ЗаписиРабочегоКалендаря.Предмет
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И (ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.Принято)
		|			ИЛИ ЗаписиРабочегоКалендаря.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом))
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И НЕ ЗаписиРабочегоКалендаря.Ссылка В (&ИсключенияЗанятости)";
	
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ИсключенияЗанятости", МассивИсключенийЗанятости);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПроверяемаяДата = НачалоДня(ДатаНачала);
		Пока ПроверяемаяДата < ДатаОкончания Цикл
			
			ПравилоПовторения = НовоеПравилоПовторения();
			ЗаполнитьЗначенияСвойств(ПравилоПовторения, Выборка);
			ПравилоПовторения.ИсключенияПовторения = Выборка.ИсключенияПовторения.Выгрузить();
			ПравилоПовторения.ПовторениеПоДням = Выборка.ПовторениеПоДням.Выгрузить();
			
			Если ДатаУдовлетворяетПравилуПовторения(
					ПроверяемаяДата, ПравилоПовторения) Тогда
				
				ДатаНачалаПоПравилуПовторения = НачалоДня(ПроверяемаяДата) + (Выборка.ДатаНачала - НачалоДня(Выборка.ДатаНачала));
				ДатаОкончанияПоПравилуПовторения = НачалоДня(ПроверяемаяДата) + (Выборка.ДатаОкончания - НачалоДня(Выборка.ДатаНачала));
				Если ДатаНачалаПоПравилуПовторения < ДатаОкончания
					И ДатаОкончанияПоПравилуПовторения > ДатаНачала Тогда
					
					НоваяСтрока = ТаблицаЗанятости.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ДатаНачала = ДатаНачалаПоПравилуПовторения;
					НоваяСтрока.ДатаОкончания = ДатаОкончанияПоПравилуПовторения;
					НоваяСтрока.Занят = ПолучитьСоответствующееСостояниеЗанятости(
						Выборка.Состояние,
						Выборка.Связанная,
						Выборка.Предмет);
					
				КонецЕсли;
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыЗанятости = Новый Структура;
	ПараметрыЗанятости.Вставить("Пользователи", МассивПользователей);
	ПараметрыЗанятости.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыЗанятости.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыЗанятости.Вставить("ИсключенияЗанятости", МассивИсключенийЗанятости);
	
	РаботаСРабочимКалендаремПереопределяемый.ПриПолученииТаблицыЗанятостиПользователей(ТаблицаЗанятости, ПараметрыЗанятости);
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Формирует таблицу занятости.
Функция ПолучитьТаблицуЗанятости(
	Знач МассивПользователей,
	ДатаНачала,
	ДатаОкончания,
	ОтобразитьЗанятостьВДне = Истина,
	ИсключенияЗанятости = Неопределено,
	ТолькоИтоги = Ложь) Экспорт
	
	// Формирование структуры таблицы занятости
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	
	// Если занятость в дне не отображается, то таблица занятости не заполняется
	Если Не ОтобразитьЗанятостьВДне Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	// Если передан некорректный период, то таблица занятости не заполняется
	Если Не РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	// Если передан один пользователь вместо массива, то будем обрабатывать массив из одного пользователя.
	Если ТипЗнч(МассивПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	// Получение данных для расчета занятости
	ТаблицаДоступности = РегистрыСведений.ДоступноеВремяПользователя.ПолучитьТаблицуДоступности(
		МассивПользователей);
		
	ТаблицаЗанятостиПользователей = РегистрыСведений.ЗанятостьПользователя.ПолучитьТаблицуЗанятости(
		МассивПользователей, ДатаНачала, ДатаОкончания);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПользователей);
	
	ТаблицаЗанятостиПользователейЗаписиКалендаря = ПолучитьТаблицуЗанятостиПользователей(
		МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПользователейЗаписиКалендаря);
	
	// Расчет занятости для каждого пользователя
	Для Каждого Пользователь Из МассивПользователей Цикл
		
		Если Не ТолькоИтоги Тогда
			
			// Полный подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПользователяПоПолномуАлгоритму(ТаблицаДоступности, Пользователь,
				ТаблицаЗанятости, ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям занятости
			ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиПользователей,
				Пользователь, ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям календаря
			ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиПользователейЗаписиКалендаря,
				Пользователь, ДатаНачала, ДатаОкончания);
			
		Иначе
			
			// Краткий подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
			
			// Занятое время по записям календаря
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(
				ТаблицаЗанятостиПользователейЗаписиКалендаря, Пользователь, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по записям занятости
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(
				ТаблицаЗанятостиПользователей, Пользователь, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПользователяПоКраткомуАлгоритму(
				ТаблицаДоступности, Пользователь, НоваяСтрока.Занят,
				ДатаНачала, ДатаОкончания, ТаблицаЗанятостиПользователей);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Возвращает необходимость проверки отсутствия при различных действиях.
//
// Возвращаемое значение:
//  Булево - признак необходимость проверки отсутствия.
//
Функция ПредупреждатьОбОтсутствии() Экспорт
	
	ПредупреждатьОбОтсутствии = Ложь;
	РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНеобходимостиПредупреждатьОбОтсутствии(ПредупреждатьОбОтсутствии);
	
	Возврат ПредупреждатьОбОтсутствии;
	
КонецФункции

// Проверяет наличие права редактирования заданной записи рабочего календаря текущим пользователем.
//
Функция ДоступноИзменениеЗаписиРабочегоКалендаря(ЗаписьКалендаря) Экспорт
	
	ЕстьПраво = Ложь;
	РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииПраваИзмененияЗаписиРабочегоКалендаря(ЗаписьКалендаря, ЕстьПраво);
	
	Возврат ЕстьПраво;
	
КонецФункции

// Вспомогательная функция расчета доступности пользователя по полному алгоритму.
Функция РассчитатьДоступностьПользователяПоПолномуАлгоритму(ТаблицаДоступности, Пользователь,
	ТаблицаЗанятости, ДатаНачала, ДатаОкончания)
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ПараметрыОтбора = Новый Структура("Пользователь, ДеньНедели");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации =
			ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			Занят = СтрокаДоступностьДняИтерации.Занят;
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Пользователь,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, Занят, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецФункции

// Вспомогательная функция расчета доступности пользователя по краткому алгоритму.
Процедура РассчитатьДоступностьПользователяПоКраткомуАлгоритму(ТаблицаДоступности, Пользователь,
	ЗанятостьПользователя, ДатаНачала, ДатаОкончания, ТаблицаЗанятости)
	
	ТаблицаЗанятостиВременная = СформироватьТаблицуЗанятости();
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ТаблицаЗанятостиВременная.Очистить();
		
		ПараметрыОтбора = Новый Структура("Пользователь, ДеньНедели");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации =
			ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		ДатаНачалаТаблицыЗанятости = Макс(ДатаНачала, НачалоДня(НачалоДняИтерации));
		ДатаОкончанияТаблицыЗанятости = Мин(ДатаОкончания, КонецДня(НачалоДняИтерации));
		НоваяСтрока = ТаблицаЗанятостиВременная.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.ДатаНачала = ДатаНачалаТаблицыЗанятости;
		НоваяСтрока.ДатаОкончания = ДатаОкончанияТаблицыЗанятости;
		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятостиВременная, Пользователь,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, СтрокаДоступностьДняИтерации.Занят,
				ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости);
			
		КонецЦикла;
		
		ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятостиВременная, ТаблицаЗанятости,
			Пользователь, ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости,
			Перечисления.СостоянияЗанятости.Доступен);
		
		// Проверка наличия строки с занятым временем в итоговой временной таблице занятости.
		ПараметрыОтбора = Новый Структура("Занят");
		ПараметрыОтбора.Занят = Перечисления.СостоянияЗанятости.Занят;
		КоличествоСтрокЗанятогоВремени = ТаблицаЗанятостиВременная.НайтиСтроки(ПараметрыОтбора).Количество();
		Если КоличествоСтрокЗанятогоВремени <> 0 Тогда
			ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят;
			Возврат;
		КонецЕсли;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета занятости пользователя по краткому алгоритму.
Функция РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(ТаблицаЗанятости, Пользователь,
	ЗанятостьПользователя)
	
	РасчетЗанятостиЗавершен = Ложь;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ИтоговаяЗанятостьПользователя = ПолучитьИтоговуюЗанятостьПользователя(
		ТаблицаЗанятости, Пользователь);
	Если ИтоговаяЗанятостьПользователя = Перечисления.СостоянияЗанятости.Отсутствует Тогда
		ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Отсутствует;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят Тогда
		ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат РасчетЗанятостиЗавершен;
	
КонецФункции

// Возвращает итоговую занятость пользователя по таблице занятости.
Функция ПолучитьИтоговуюЗанятостьПользователя(ТаблицаЗанятости, Пользователь)
	
	ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	// Учитывается что отсутствует занятость может быть установлена только у отсутствий.
	ПараметрыОтбора = Новый Структура("Пользователь");
	ПараметрыОтбора.Пользователь = Пользователь;
	МассивЗанятостиПользователя = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиПользователя Из МассивЗанятостиПользователя Цикл
		Если СтрокаЗанятостиПользователя.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Отсутствует;
			Прервать;
		ИначеЕсли СтрокаЗанятостиПользователя.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
			Прервать;
		ИначеЕсли СтрокаЗанятостиПользователя.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяЗанятость;
	
КонецФункции

// Вносит занятости из таблицы в таблицу занятости.
Процедура ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиИсточник,
	Пользователь, ДатаНачала, ДатаОкончания, Занят = Неопределено)
	
	Если Занят <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("Пользователь, Занят");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.Занят = Занят;
	Иначе
		ПараметрыОтбора = Новый Структура("Пользователь");
		ПараметрыОтбора.Пользователь = Пользователь;
	КонецЕсли;
	
	МассивЗанятостиПользователя = ТаблицаЗанятостиИсточник.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиПользователя Из МассивЗанятостиПользователя Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Пользователь,
			СтрокаЗанятостиПользователя.ДатаНачала, СтрокаЗанятостиПользователя.ДатаОкончания,
			СтрокаЗанятостиПользователя.Занят, ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости.
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости,
	Пользователь, Знач ДатаНачала, Знач ДатаОкончания, Занят, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Пользователь");
	ПараметрыОтбора.Пользователь = Пользователь;
	МассивЗанятости = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	СтрокиКУдалению = Новый Массив;
	
	ЗаписьВнесенаВТаблице = Ложь;
	Для Каждого СтрокаЗанятости Из МассивЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.Пользователь = Пользователь;
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Формирует таблицу рекомендаций, содержащую время доступное для всех пользователей.
Функция ПолучитьТаблицуРекомендаций(Знач МассивПользователей,
		ДатаНачала, ДатаОкончания, Длительность, ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятости(МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	ТаблицаРекомендаций = ТаблицаОбщейЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаОбщейЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		Если (ДатаОкончания - ДатаНачала) >= Длительность Тогда
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаРекомендаций, Справочники.Пользователи.ПустаяСсылка(),
				СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
				ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Корректирует дубли и пересечение в таблице занятости.
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.Пользователь = ВнесеннаяСтрокаЗанятости.Пользователь
					И СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("Пользователь, ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости.
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.Пользователь = Занятость2.Пользователь
		И Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

// Сортирует таблицу значений по полю занятости.
Процедура СортироватьПоСостояниюЗанятости(ТаблицаЗанятости,
	ДополнительноеНаправлениеСортировки = "", ДополнительнаяСортировка = "") Экспорт
	
	Если ЗначениеЗаполнено(ДополнительноеНаправлениеСортировки) Тогда
		ДополнительноеНаправлениеСортировки = " " + ДополнительноеНаправлениеСортировки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительнаяСортировка) Тогда
		ДополнительнаяСортировка = ", " + ДополнительнаяСортировка;
	КонецЕсли;
	
	ТаблицаЗанятости.Колонки.Добавить("ИндексСортировки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗанятости Цикл
		
		Если СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
			СтрокаТаблицы.ИндексСортировки = 3;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			СтрокаТаблицы.ИндексСортировки = 2;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			СтрокаТаблицы.ИндексСортировки = 1;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
			СтрокаТаблицы.ИндексСортировки = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеСортировки = СтрШаблон("ИндексСортировки%1%2",
		ДополнительноеНаправлениеСортировки,
		ДополнительнаяСортировка);
	
	ТаблицаЗанятости.Сортировать(ЗначениеСортировки);
	
	ТаблицаЗанятости.Колонки.Удалить("ИндексСортировки");
	
КонецПроцедуры

// Добавляет ссылку в историю работы пользователя.
//
Процедура ДобавитьВИсториюРаботыПользователя(ЗаписьКалендаря)
	
	ТипПараметра = ТипЗнч(ЗаписьКалендаря);
	НавигационнаяСсылка = Неопределено;
	
	Если ТипПараметра = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаписьКалендаря.Ссылка);
	ИначеЕсли ТипПараметра = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗаписьКалендаря);
	КонецЕсли;
	
	РаботаСРабочимКалендаремПереопределяемый.ПриОпределенииНавигационнойСсылкиДляИстории(ЗаписьКалендаря, НавигационнаяСсылка);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент - ЭлементПланировщика - элемент планировщика.
//  Измерение - Любой - измерение планировщика.
//  ЗначениеИзмерения - Любой - значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Формирует таблицу общей занятости по переданной таблице занятости.
//
Функция СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачала, ДатаОкончания)
	
	ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ПодВопросомВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			ПодВопросомВремя.ДатаНачала, ПодВопросомВремя.ДатаОкончания, ПодВопросомВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЗанятоеВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			ЗанятоеВремя.ДатаНачала, ЗанятоеВремя.ДатаОкончания, ЗанятоеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Отсутствует);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ОтсутствуетВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			ОтсутствуетВремя.ДатаНачала, ОтсутствуетВремя.ДатаОкончания, ОтсутствуетВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Возврат ТаблицаОбщейЗанятости;
	
КонецФункции

// Формирует таблицу занятости планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица занятости планировщика.
//
Функция ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения)
	
	ПериодОтображения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтобразитьЗанятостьВДне = РаботаСРабочимКалендаремКлиентСервер.ПолучитьОтобразитьЗанятостьВДне(НастройкиОтображения);
	
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ТаблицаЗанятостиНаДату = ПолучитьТаблицуЗанятости(
			НастройкиОтображения.Пользователи,
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			ОтобразитьЗанятостьВДне,
			НастройкиОтображения.ИсключенияЗанятости);
		Для Каждого Занятость Из ТаблицаЗанятостиНаДату Цикл
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Занятость);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Формирует таблицу общей занятости планировщика.
//
// Параметры:
//  ТаблицаЗанятости - ТаблицаЗначений - таблица занятости планировщика.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица занятости планировщика.
//
Функция ПолучитьТаблицуОбщейЗанятостиПланировщика(ТаблицаЗанятости, НастройкиОтображения)
	
	Если Не НастройкиОтображения.ОтображатьОбщуюЗанятость Тогда
		ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
		Возврат ТаблицаОбщейЗанятости;
	КонецЕсли;
	
	ДатаНачалаОбщая = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	
	Возврат СформироватьТаблицуОбщейЗанятости(ТаблицаЗанятости, ДатаНачалаОбщая, ДатаОкончанияОбщая);
	
КонецФункции

// Формирует структуру интервала фона планировщика.
//
// Параметры:
//  Занятость - Структура - занятость.
//  НастройкиОтображения - Структура - структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Структура - Интервал фона планировщика.
//
Функция НовыйИнтервалФонаПланировщика(Занятость, НастройкиОтображения)
	
	СтруктураИнтервалаФона = Новый Структура("Начало, Конец, Цвет");
	СтруктураИнтервалаФона.Начало = Занятость.ДатаНачала;
	СтруктураИнтервалаФона.Конец = Занятость.ДатаОкончания;
	СтруктураИнтервалаФона.Цвет = ПолучитьЦветЗанятости(Занятость);
	
	Возврат СтруктураИнтервалаФона;
	
КонецФункции

// Возвращает цвет занятости.
//
// Параметры:
//  Занятость - Структура - занятость.
//
// Возвращаемое значение:
//  Цвет - цвет занятости.
//
Функция ПолучитьЦветЗанятости(Занятость)
	
	Если Занятость.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
	ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряПодВопросомВремя;
	ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.Отсутствует Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряОтсутствует;
	Иначе
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряДоступноеВремя;
	КонецЕсли;
	
	Возврат ЦветЗанятости;
	
КонецФункции

// Возвращает пустую структуру данных планировщика.
//
// Возвращаемое значение:
//  Структура - структура данных планировщика.
//
Функция НовыеДанныеПланировщика()
	
	ДанныеПланировщика = Новый Структура;
	ДанныеПланировщика.Вставить("Элементы", Новый Массив);
	ДанныеПланировщика.Вставить("ИнтервалыФона", Новый Массив);
	
	Возврат ДанныеПланировщика;
	
КонецФункции

// Создает и заполняет объект повторяющейся записи календаря на основании элемента планировщика.
//
// Параметры:
//  ЗаписьКалендаря - Структура - структура записи календаря планировщика.
//
// Возвращаемое значение:
//  СправочникОбъект.ЗаписиРабочегоКалендаря - не записанный в базу объект исключения повторяющегося события.
//
Функция СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ЗаписьКалендаря)
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ЗаписьКалендаря.Ссылка;
	СтруктураОснование.ДатаИсключения = ЗаписьКалендаря.ДатаНачалаИсходная;
	
	ЗаписьКалендаряОбъект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
	ЗаписьКалендаряОбъект.Заполнить(СтруктураОснование);
	ЗаполнитьЗначенияСвойств(ЗаписьКалендаряОбъект, ЗаписьКалендаря, "ДатаНачала, ДатаОкончания, ВесьДень, Пользователь");
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ЗаписьКалендаря.Ссылка);
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ЗаписьКалендаря.ДатаНачалаИсходная);
	
	Возврат ЗаписьКалендаряОбъект;
	
КонецФункции

// Возвращает цвет рамки элемента календаря.
//
// Параметры:
//  ЦветФона	 - Цвет	 - цвет фона элемента планировщика.
// 
// Возвращаемое значение:
//  Цвет - цвет рамки записи календаря.
//
Функция ПолучитьЦветРамкиЭлементаПланировщика(ЦветФона)
	
	Если ЦветФона = ЦветаСтиля.ЦветКалендаряОтработано Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряОтработана;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряКрасная;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряСиняя;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЖелтая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЗеленая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряОранжевый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряОранжевая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряПоУмолчанию Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряПоУмолчанию;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряТекущаяЗапись Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряТекущаяЗапись;
	Иначе
		ЦветРамки = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	
	Возврат ЦветРамки;
	
КонецФункции

// Отмечает запись календаря как отработанную.
//
// Параметры:
//  ЗаписьКалендаря			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря.
//  ОтключенныеНапоминания	 - Массив									 - отключенные напоминания пользователя.
//
Процедура ОтработатьЗаписьКалендаря(ЗаписьКалендаря, ОтключенныеНапоминания)
	
	УстановитьОтработанаЗаписьКалендаря(ЗаписьКалендаря);
	УстановитьЦветЗаписиКалендаря(ЗаписьКалендаря, Перечисления.ЦветаРабочегоКалендаря.Нет);
	ОтключитьНапоминание(ЗаписьКалендаря, ОтключенныеНапоминания);
	
КонецПроцедуры

#Область НапоминанияПользователя

// Возвращает параметры напоминания по записи календаря.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - запись календаря.
// 
// Возвращаемое значение:
//  Структура - структура напоминания.
//
Функция ПолучитьПараметрыНапоминанияПоИсточнику(ЗаписьКалендаря)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", ЗаписьКалендаря);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Отключает напоминание для записи календаря.
//
// Параметры:
//  ЗаписьКалендаря			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря.
//  ОтключенныеНапоминания	 - Массив									 - отключенные напоминания пользователя.
//
Процедура ОтключитьНапоминание(ЗаписьКалендаря, ОтключенныеНапоминания)
	
	Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(ЗаписьКалендаря);
	Если Напоминание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НапоминанияПользователя.УдалитьНапоминание(Напоминание);
	ОтключенныеНапоминания.Добавить(Напоминание);
	
КонецПроцедуры

#КонецОбласти

// Устанавливает дополнительное свойство ЭтоНовый.
//
// Параметры:
//  Объект - Любой объект - объект.
//
Процедура УстановитьДополнительноеСвойствоЭтоНовый(Объект)
	
	Если Объект.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	
КонецПроцедуры

// Устанавливает дополнительное свойство ПредыдущиеЗначенияРеквизитов.
//
// Параметры:
//  Объект - Любой объект - объект.
//
Процедура УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(Объект)
	
	УстановитьДополнительноеСвойствоЭтоНовый(Объект);
	
	Если Объект.ДополнительныеСвойства.ЭтоНовый
		Или Объект.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОтслеживаемыеРеквизиты = МенеджерОбъекта.ОтслеживаемыеРеквизиты();
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Ссылка,
		ОтслеживаемыеРеквизиты);
	Объект.ДополнительныеСвойства.Вставить(
		"ПредыдущиеЗначенияРеквизитов",
		ПредыдущиеЗначенияРеквизитов);
	
КонецПроцедуры

#КонецОбласти