
#Область СлужебныеПроцедурыИФункции

Процедура ДокументыОтклоненийПриЧтенииНаСервере(Форма, ОписаниеДокумента, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если ДобавлятьРеквизитыФормы Тогда
		ДокументыОтклоненийДополнитьФорму(Форма, ОписаниеДокумента, ОтложенноеИзменение);
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		ДокументыОтклоненийУстановитьПараметрыСвязиВидаРасчета(Форма, ОписаниеДокумента);
		Если ОписаниеДокумента.ИспользуетсяОтсутствиеВТечениеЧастиСмены Тогда 
			ДокументыОтклоненийПриПолученииДанных(Форма, ОписаниеДокумента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДокументыОтклоненийПриСозданииНаСервере(Форма, ОписаниеДокумента, ЗначенияДляПервоначальногоЗаполнения, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт

	Если ДобавлятьРеквизитыФормы И ОписаниеДокумента.ИспользуетсяОтсутствиеВТечениеЧастиСмены Тогда
		ДокументыОтклоненийУстановитьСвойстваЭлементаЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
		
	Если ДобавлятьРеквизитыФормы Тогда
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляПервоначальногоЗаполнения);
		ДокументыОтклоненийДополнитьФорму(Форма, ОписаниеДокумента, ОтложенноеИзменение);
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		ДокументыОтклоненийУстановитьПараметрыСвязиВидаРасчета(Форма, ОписаниеДокумента);
		
		Если Не ЗначениеЗаполнено(ДанныеФормы.ВидРасчета) Тогда
			ДокументыОтклоненийУстановитьВидРасчетаПоПараметрамВыбора(Форма, ОписаниеДокумента);
			ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
			Если Не ЗначениеЗаполнено(ДанныеФормы.ВидРасчета) Тогда
				ДокументыОтклоненийУстановитьВидРасчетаПоВидуДокумента(Форма, ОписаниеДокумента);
				ДокументыОтклоненийУстановитьПараметрыОтклоненияПоНачислению(Форма, ОписаниеДокумента);
			КонецЕсли;	
		Иначе
			ДокументыОтклоненийУстановитьПараметрыОтклоненияПоНачислению(Форма, ОписаниеДокумента);
		КонецЕсли;	
		
		ДокументыОтклоненийЗаполнитьПериодДокументаПоУмолчанию(Форма, ОписаниеДокумента);
		
		Если ОписаниеДокумента.ИспользуетсяОтсутствиеВТечениеЧастиСмены Тогда 
			ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
			ДокументыОтклоненийПриПолученииДанных(Форма, ОписаниеДокумента);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДокументыОтклоненийЗаполнитьПериодДокументаПоУмолчанию(Форма, ОписаниеДокумента)
	
	Если НЕ ОписаниеДокумента.ЗаполнитьПериодДокументаПоУмолчанию Тогда
	     Возврат;
	КонецЕсли;
	
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.ДатаНачалаСобытия) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ДатаНачалаСобытияПутьКДанным, ТекущаяДатаСеанса());
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(ДанныеФормы.ДатаНачалаПериодаОтклонения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ДатаНачалаПериодаОтклоненияПутьКДанным, ТекущаяДатаСеанса());
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеФормы.ДатаОкончанияПериодаОтклонения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ДатаОкончанияПериодаОтклоненияПутьКДанным, ТекущаяДатаСеанса());
	КонецЕсли;	
	
	Если ДанныеФормы.ПризнакЧасовоеОтклонение 
		И Не ЗначениеЗаполнено(ДанныеФормы.ДатаВнутрисменногоОтклонения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ДатаВнутрисменногоОтклоненияПутьКДанным, ТекущаяДатаСеанса());
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыОтклоненийПризнакВнутрисменноеПриИзменении(Форма, ОписаниеДокумента) Экспорт
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента);
	
	Форма.СпособУчетаВремени = ДокументыОтклоненийСпособУчетаВремени(Форма, ОписаниеДокумента);
		
	Если ДанныеФормы.ПризнакЧасовоеОтклонение Тогда		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, 
			ОписаниеДокумента.ДатаВнутрисменногоОтклоненияПутьКДанным, 
			ДанныеФормы.ДатаНачалаПериодаОтклонения);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма,
			ОписаниеДокумента.ДатаОкончанияПериодаОтклоненияПутьКДанным, 
			ДанныеФормы.ДатаНачалаПериодаОтклонения);
	КонецЕсли;
	
	ДокументыОтклоненийУстановитьВидРасчетаПоПараметрамВыбора(Форма, ОписаниеДокумента, Истина);

	ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
	ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);	
КонецПроцедуры	

Функция ДокументыОтклоненийСпособУчетаВремени(Форма, ОписаниеДокумента) Экспорт
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента);
	
	Возврат ?(ДанныеФормы.ПризнакЧасовоеОтклонение, 
		Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное,
		Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное);	
КонецФункции	

Процедура ДокументыОтклоненийВидРасчетаПриИзменении(Форма, ОписаниеДокумента) Экспорт
	ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);	
КонецПроцедуры	

Процедура ДокументыОтклоненийСотрудникПриИзменении(Форма, ОписаниеДокумента) Экспорт
	ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
	ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);	
КонецПроцедуры	

Процедура ДокументыОтклоненийДатаВнутрисменногоОтклоненияПриИзменении(Форма, ОписаниеДокумента) Экспорт
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, 
		ОписаниеДокумента.ДатаНачалаСобытияПутьКДанным, 
		ДанныеФормы.ДатаВнутрисменногоОтклонения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, 
		ОписаниеДокумента.ДатаНачалаПериодаОтклоненияПутьКДанным, 
		ДанныеФормы.ДатаВнутрисменногоОтклонения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, 
		ОписаниеДокумента.ДатаОкончанияПериодаОтклоненияПутьКДанным, 
		ДанныеФормы.ДатаВнутрисменногоОтклонения);
	
	ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
	ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);	
КонецПроцедуры

Функция ДокументыОтклоненийСписокВыбораЗамещаемогоВремени(ДанныеФормы) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;

	ОписаниеПлановыхВидовВремени = УчетРабочегоВремениРасширенный.ОписаниеПлановыхВидовВремениСотрудников(
										ДанныеФормы.Сотрудники, 
										ДанныеФормы.ПериодРегистрации, 
										ДанныеФормы.ДатаВнутрисменногоОтклонения);
		
	Если ОписаниеПлановыхВидовВремени.Количество() = 0 Тогда
		Явка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
		ОписаниеВидаВремени = УчетРабочегоВремениРасширенный.СтруктураОписанияПлановогоВидаВремени();
		РеквизитыВидаВременияЯвка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Явка, "Наименование, БуквенныйКод");
		ЗаполнитьЗначенияСвойств(ОписаниеВидаВремени, РеквизитыВидаВременияЯвка); 
		ОписаниеВидаВремени.ВидВремени = Явка;
		ОписаниеПлановыхВидовВремени.Добавить(ОписаниеВидаВремени);
	КонецЕсли;	
	
	ПредставлениеЗамещающегоВидаВремени = ДокументыОтклоненийПредставлениеЗамещающегоВидаВремени(ДанныеФормы);
	
	Для Каждого ОписаниеВидаВремени Из ОписаниеПлановыхВидовВремени Цикл
		ВидВремениЗамещаемыйПредставление = ДокументыОтклоненийПредставлениеЗамещаемогоВидаВремени(
												ОписаниеВидаВремени.ВидВремени,
												ПредставлениеЗамещающегоВидаВремени,
												ОписаниеВидаВремени.Наименование,
												ОписаниеВидаВремени.ПереходящаяЧастьПредыдущейСмены,
												ОписаниеВидаВремени.ПереходящаяЧастьТекущейСмены);

		ОписаниеЭлементаСпискаВыбораВидаВремени = Новый Структура("ВидВремени, Представление, Смена, ПереходящаяЧастьПредыдущейСмены, ПереходящаяЧастьТекущейСмены");
		ЗаполнитьЗначенияСвойств(ОписаниеЭлементаСпискаВыбораВидаВремени, ОписаниеВидаВремени); 
		ОписаниеЭлементаСпискаВыбораВидаВремени.Представление = ВидВремениЗамещаемыйПредставление;
		
		ДанныеВыбора.Добавить(ОписаниеЭлементаСпискаВыбораВидаВремени, ВидВремениЗамещаемыйПредставление);				
	КонецЦикла;	

	Возврат ДанныеВыбора;
КонецФункции	

Процедура ДокументыОтклоненийПриПолученииДанных(Форма, ОписаниеДокумента)	
	
	Форма.СпособУчетаВремени = ДокументыОтклоненийСпособУчетаВремени(Форма, ОписаниеДокумента);
	ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);	
	
КонецПроцедуры	

Процедура ДокументыОтклоненийДополнитьФорму(Форма, ОписаниеДокумента, ОтложенноеИзменение = Ложь)
	
	ИменаРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, ИменаРеквизитовФормы);
	
	РеквизитСпособУчетаВремени = Новый РеквизитФормы("СпособУчетаВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСпособУчетаВремени);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, ИменаРеквизитовФормы,, ОтложенноеИзменение); 
		
КонецПроцедуры	

Процедура ДокументыОтклоненийУстановитьПараметрыСвязиВидаРасчета(Форма, ОписаниеДокумента)
	
	ЭлементВидРасчета = Форма.Элементы.Найти(ОписаниеДокумента.ИмяЭлементаВидРасчета);
	
	Если ЭлементВидРасчета <> Неопределено Тогда
		
		ТекущиеСвязиПараметровВыбора = ЭлементВидРасчета.СвязиПараметровВыбора;
		
		НовыеСвязиПараметровВыбора = Новый Массив;
		
		СвязьПоВидуВремени = Новый СвязьПараметраВыбора("Отбор.ВидВремени", "СпособУчетаВремени");
		
		НовыеСвязиПараметровВыбора.Добавить(СвязьПоВидуВремени);
		
		Для Каждого СвязьПараметровВыбора Из ТекущиеСвязиПараметровВыбора Цикл 
			НовыеСвязиПараметровВыбора.Добавить(СвязьПараметровВыбора);
		КонецЦикла;
		                                                                    
		ЭлементВидРасчета.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязиПараметровВыбора);
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, 
			"СпособУчетаВремени",
			ДокументыОтклоненийСпособУчетаВремени(Форма, ОписаниеДокумента));
			
	КонецЕсли;
			
КонецПроцедуры	

Процедура ДокументыОтклоненийУстановитьВидРасчетаПоПараметрамВыбора(Форма, ОписаниеДокумента, ВидРасчетаОбязателен = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
	
	ВидДокумента = Неопределено;
	
	СтруктураОтбора = Новый Структура;
	
	ЭлементВидРасчета = Форма.Элементы.Найти(ОписаниеДокумента.ИмяЭлементаВидРасчета);
	
	Если ЭлементВидРасчета <> Неопределено Тогда
		
		Для Каждого ПараметрВыборка Из ЭлементВидРасчета.ПараметрыВыбора Цикл
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрВыборка.Имя, ".");
			ИмяПараметра = ЭлементыПути[ЭлементыПути.Количество() - 1];
			
			Если ИмяПараметра = "ВидДокументаНачисления" Тогда 
				ВидДокумента = ПараметрВыборка.Значение;
			Иначе
				СтруктураОтбора.Вставить(ИмяПараметра, ПараметрВыборка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СвязьПараметровВыбора Из ЭлементВидРасчета.СвязиПараметровВыбора Цикл
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвязьПараметровВыбора.Имя, ".");
			ИмяПараметра = ЭлементыПути[ЭлементыПути.Количество() - 1];
			
			ЗначениеПараметра = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СвязьПараметровВыбора.ПутьКДанным);
			Если ИмяПараметра = "ВидДокументаНачисления" Тогда 
				ВидДокумента = ЗначениеПараметра;
			Иначе
				СтруктураОтбора.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ВидДокумента = Неопределено Тогда
			ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Форма.Объект.Ссылка);
		КонецЕсли;
		
		ВидыРасчета = ПланыВидовРасчета.Начисления.НачисленияПоВидуДокумента(ВидДокумента, СтруктураОтбора);
		
		Если ВидыРасчета.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ВидРасчетаПутьКДанным, ВидыРасчета[0]);	
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, 
				ОписаниеДокумента.ВидРасчетаПутьКДанным,
				ПланыВидовРасчета.Начисления.ПустаяСсылка());
				
			Если ВидРасчетаОбязателен Тогда 
				ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента);
				ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента);		
				ВызватьИсключение Форма.ТекстСообщенияНеЗаполненВидРасчета();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОтклоненийУстановитьВидРасчетаПоВидуДокумента(Форма, ОписаниеДокумента)
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
	
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Форма.Объект.Ссылка);
	
	Отбор = Новый Структура("ВидВремени", Форма.СпособУчетаВремени);
	
	ВидыРасчета = ПланыВидовРасчета.Начисления.НачисленияПоВидуДокумента(ВидДокумента, Отбор);

	Если ВидыРасчета.Количество() = 0 Тогда
		ВидыРасчета = ПланыВидовРасчета.Начисления.НачисленияПоВидуДокумента(ВидДокумента);
	КонецЕсли;	
	
	Если ВидыРасчета.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ВидРасчетаПутьКДанным, ВидыРасчета[0]);	
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, 
			ОписаниеДокумента.ВидРасчетаПутьКДанным,
			ПланыВидовРасчета.Начисления.ПустаяСсылка());
	КонецЕсли;			
КонецПроцедуры	

Процедура ДокументыОтклоненийУстановитьПараметрыОтклоненияПоНачислению(Форма, ОписаниеДокумента)
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
	
	ЭлементВидРасчета = Форма.Элементы.Найти(ОписаниеДокумента.ИмяЭлементаВидРасчета);

	Если ЭлементВидРасчета <> Неопределено И ЭлементВидРасчета.СвязиПараметровВыбора.Количество() > 0 Тогда
		
		ПолучаемыеРеквизиты = Новый Массив;
		СоответствиеСвойствНачисленийДаннымФормы = Новый Соответствие;
		Для Каждого СвязьПараметровВыбора Из ЭлементВидРасчета.СвязиПараметровВыбора Цикл
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвязьПараметровВыбора.Имя, ".");
			ИмяПараметра = ЭлементыПути[ЭлементыПути.Количество() - 1];
			
			ПолучаемыеРеквизиты.Добавить(ИмяПараметра);
			
			СоответствиеСвойствНачисленийДаннымФормы.Вставить(ИмяПараметра, СвязьПараметровВыбора.ПутьКДанным);
		КонецЦикла;	
			
		СвойстваНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеФормы.ВидРасчета, ПолучаемыеРеквизиты);
		
		Для Каждого Свойство Из СвойстваНачисления Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, 
				СоответствиеСвойствНачисленийДаннымФормы[Свойство.Ключ],
				Свойство.Значение);
		КонецЦикла;	
			
	КонецЕсли; 
	
	ПризнакЧасовоеОтклонение = ?(Форма.СпособУчетаВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное, Истина, Ложь); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, ОписаниеДокумента.ПризнакЧасовоеОтклонениеПутьКДанным, 
		ПризнакЧасовоеОтклонение);
		
КонецПроцедуры	

Процедура ДокументыОтклоненийУстановитьСвойстваЭлементаЗамещаемыйВидВремени(Форма, ОписаниеДокумента) 
	НастройкиУчетаВремени = УчетРабочегоВремениРасширенный.НастройкиУчетаВремени();
	
	Если НЕ (НастройкиУчетаВремени.УчитыватьНочныеЧасы 
		Или НастройкиУчетаВремени.УчитыватьВечерниеЧасы	
		Или  НастройкиУчетаВремени.ИспользоватьНесколькоВидовПлановогоВремени) Тогда
		
		Форма.Элементы[ОписаниеДокумента.ИмяЭлементаЗамещаемыйВидВремени].Видимость = Ложь;
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ДокументыОтклоненийУстановитьЗамещаемыйВидВремени(Форма, ОписаниеДокумента) 
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Истина);
	
	Если ДанныеФормы.ПризнакЧасовоеОтклонение Тогда
					
		Если ДанныеФормы.Сотрудники.Количество() = 0 Тогда
			Явка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");											
														
	        ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеДокумента.ЗамещаемыйВидВремениПутьКДанным, Явка);
		Иначе		
			ОписаниеПлановыхВидовВремени = УчетРабочегоВремениРасширенный.ОписаниеПлановыхВидовВремениСотрудников(
												ДанныеФормы.Сотрудники, 
												ДанныеФормы.ПериодРегистрации, 
												ДанныеФормы.ДатаВнутрисменногоОтклонения);
			
			Если ОписаниеПлановыхВидовВремени.Количество() = 0 Тогда
				Явка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
			
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, 
					ОписаниеДокумента.ЗамещаемыйВидВремениПутьКДанным, 
					Явка);
			Иначе
								
				Для Каждого ОписаниеВидаВремени Из ОписаниеПлановыхВидовВремени Цикл
					Если ОписаниеВидаВремени.ВидВремени = ДанныеФормы.ЗамещаемыйВидВремени Тогда
						Возврат;
					КонецЕсли;	
				КонецЦикла;	
				
				ВидВремениЗамещаемый = ОписаниеПлановыхВидовВремени[0].ВидВремени;			
				
	       		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, 
					ОписаниеДокумента.ЗамещаемыйВидВремениПутьКДанным, 
					ВидВремениЗамещаемый);
		
			КонецЕсли;	
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, 
					ОписаниеДокумента.ЗамещаемыйВидВремениПутьКДанным, 
					Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка());	
	КонецЕсли;	
КонецПроцедуры

Процедура ДокументыОтклоненийУстановитьПредставлениеЗамещаемогоВидаВремени(Форма, ОписаниеДокумента) 
	ДанныеФормы = УчетРабочегоВремениРасширенныйКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(Форма, ОписаниеДокумента, Ложь);
		
	Если ЗначениеЗаполнено(ДанныеФормы.ЗамещаемыйВидВремени) Тогда	
		ОписаниеВидаВремени = УчетРабочегоВремениРасширенный.ОписаниеВидовВремени(ДанныеФормы.ЗамещаемыйВидВремени).Получить(ДанныеФормы.ЗамещаемыйВидВремени);
		
		ВидВремениЗамещаемыйПредставление = ДокументыОтклоненийПредставлениеЗамещаемогоВидаВремени(
												ОписаниеВидаВремени.ВидВремени,
												ДокументыОтклоненийПредставлениеЗамещающегоВидаВремени(ДанныеФормы),
												ОписаниеВидаВремени.Наименование,
												ДанныеФормы.ПереходящаяЧастьПредыдущейСмены,
												ДанныеФормы.ПереходящаяЧастьТекущейСмены);
													
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, 
			ОписаниеДокумента.ПредставлениеВидаВремениПутьКДанным, 
			ВидВремениЗамещаемыйПредставление);  
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, 
			ОписаниеДокумента.ПредставлениеВидаВремениПутьКДанным, 
			""); 		
	КонецЕсли;	
КонецПроцедуры	

Функция ДокументыОтклоненийПредставлениеЗамещаемогоВидаВремени(ВидВремениЗамещаемый, НаименованиеЗамещающегоВидаВремени, НаименованиеЗамещаемогоВидаВремени, ПереходящаяЧастьПредыдущейСмены, ПереходящаяЧастьТекущейСмены) Экспорт
	Явка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	НочныеЧасы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	ВечерниеЧасы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	
	Если ПереходящаяЧастьПредыдущейСмены Тогда
		ПереходящаЧастьСменыПредставление = НСтр("ru = '(переходящая часть предыдущей смены)'");		
	ИначеЕсли ПереходящаяЧастьТекущейСмены Тогда
		ПереходящаЧастьСменыПредставление = НСтр("ru = '(переходящая часть текущей смены)'")
	Иначе
		ПереходящаЧастьСменыПредставление = "";	
	КонецЕсли;	
	
	ШаблонПредставления = "";
	Если ВидВремениЗамещаемый = Явка Тогда
		ШаблонПредставления = НСтр("ru = '%1 в дневное время %2'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеЗамещающегоВидаВремени, ПереходящаЧастьСменыПредставление);
	ИначеЕсли ВидВремениЗамещаемый = НочныеЧасы Тогда
		ШаблонПредставления = НСтр("ru = '%1 в ночное время %2'");	
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеЗамещающегоВидаВремени, ПереходящаЧастьСменыПредставление);
	ИначеЕсли ВидВремениЗамещаемый = ВечерниеЧасы Тогда
		ШаблонПредставления = НСтр("ru = '%1 в вечернее время %2'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеЗамещающегоВидаВремени, ПереходящаЧастьСменыПредставление);
	Иначе
		ШаблонПредставления = НСтр("ru = '%1 вместо %2 %3'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеЗамещающегоВидаВремени, НаименованиеЗамещаемогоВидаВремени, ПереходящаЧастьСменыПредставление);
	КонецЕсли;
		
	Возврат Представление;
	
КонецФункции

Функция ДокументыОтклоненийПредставлениеЗамещающегоВидаВремени(ДанныеФормы)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.ВидРасчета, "ОбозначениеВТабелеУчетаРабочегоВремени");
КонецФункции	

// Процедура заполняет заголовки полей таблицы "подневного" ввода данных,
// а также делает невидимыми колонки с 29 по 31 
// в зависимости от количества дней в выбранном месяце.
//
// Параметры:
//	ЭлементыФормы - коллекция элементов формы.
//	Месяц - дата, начало выбранного месяца.
//	ШаблонИмениПоля - строка, имя поля дня, в котором номер дня обозначен "%1".
//
Процедура ОформитьПоляТаблицыДнейМесяца(ЭлементыФормы, Месяц, ШаблонИмениПоля, ПереноситьПредставлениеДня = Истина) Экспорт
	
	ЦветРабочегоДня = ЦветаСтиля.ЦветТекстаФормы;
	ЦветВыходногоДня = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПоследнийДеньМесяца = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц);
	
	Для НомерДня = 1 По ПоследнийДеньМесяца Цикл
		
		ТекущийДень = Дата(Год(Месяц), Месяц(Месяц), НомерДня);
		
		ДеньНедели = ДеньНедели(ТекущийДень);
		
		Разделить = ?(ПереноситьПредставлениеДня, Символы.ПС, " ");
		
		Элемент = ЭлементыФормы[СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПоля, НомерДня)];
		Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"%1%2%3", НомерДня, Разделить, Формат(ТекущийДень, "ДФ=ддд"));
		Элемент.ЦветТекстаЗаголовка = ?(ДеньНедели = 6 Или ДеньНедели = 7, ЦветВыходногоДня, ЦветРабочегоДня);
		
	КонецЦикла;		
КонецПроцедуры	

Процедура ТабельПриЧтенииНаСервере(Форма) Экспорт
	
	ТабельПриЧтенииДанных(Форма);
	
КонецПроцедуры

Процедура ТабельПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт 
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ВысотаСтроки = 2;
			
		Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаПериода)
			И Не ЗначениеЗаполнено(Форма.Объект.ДатаОкончанияПериода) Тогда
			УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
		КонецЕсли;
		
		ТабельПриЧтенииДанных(Форма);
	КонецЕсли;
	
	БуквенныйКодИмяРеквизита = УчетРабочегоВремениРасширенный.БуквенныйКодИмяРеквизита(Форма.Объект.ПериодРегистрации);
	ВидВремениЯвка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Форма.ОбозначениеВидаВремениПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВремениЯвка, БуквенныйКодИмяРеквизита);
	
КонецПроцедуры

Процедура ТабельПриЧтенииДанных(Форма)
	
	Если ТипЗнч(Форма.ОписаниеВидовВремени) <> Тип("ФиксированноеСоответствие") Тогда
		ТабельПоместитьОписаниеВидовВремениВДанныеФормы(форма);
	КонецЕсли;
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(Форма, Истина, Ложь);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");

	ТабельУстановитьВидимостьКолонокДнейПериода(Форма);
	
	ТабельДанныеВРеквизит(Форма);
	ТабельЗаполнитьНормуВремени(Форма);
	
	ТабельУстановитьСвойстваТаблицыДанных(Форма);
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьДоступностьЭлементовПериодаВводаДанных(Форма);
	
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Форма.Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");
	
КонецПроцедуры

Процедура ТабельУстановитьВидимостьКолонокДнейПериода(Форма)
	ПервыйДеньПериода = День(Форма.Объект.ДатаНачалаПериода);
	ПоследнийДеньПериода = День(Форма.Объект.ДатаОкончанияПериода);
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Форма.Элементы["ДанныеОВремениВремя" + НомерДня + "Представление"].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры	

Процедура ТабельУстановитьСвойстваТаблицыДанных(Форма)
	
	Если Не Форма.Объект.ИсправленныйДокумент.Пустая() Тогда 
		Форма.Элементы.ДанныеОВремени.ИзменятьСоставСтрок = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДанныеОВремениПодбор", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДанныеОВремениСотрудник", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабельПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	МассивУдаляемыхСтрок = Новый Массив;
	ТекущийСотрудник = Неопределено;
	ГоловнаяСтрокаПоСотруднику = Неопределено;	
	ГоловнаяСтрокаНеЗаполнена = Ложь;
	ЕстьЗаполненныеСтроки = Ложь;
	Для Каждого СтрокаДанныхОВремени Из ТекущийОбъект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник Тогда
			Если ГоловнаяСтрокаПоСотруднику <> Неопределено И ГоловнаяСтрокаНеЗаполнена И ЕстьЗаполненныеСтроки Тогда
				МассивУдаляемыхСтрок.Добавить(ГоловнаяСтрокаПоСотруднику);				
			КонецЕсли;	
			
			ГоловнаяСтрокаПоСотруднику = СтрокаДанныхОВремени;
			ГоловнаяСтрокаНеЗаполнена = Ложь;
			ЕстьЗаполненныеСтроки = Ложь;
		КонецЕсли;
		
		СтрокаЗаполнена = Ложь;
		Для НомерДня = 1 По 31 Цикл
			Если  ЗначениеЗаполнено(СтрокаДанныхОВремени["ВидВремени" + НомерДня]) Тогда
				СтрокаЗаполнена = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Если СтрокаДанныхОВремени <> ГоловнаяСтрокаПоСотруднику И Не СтрокаЗаполнена Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДанныхОВремени);
		ИначеЕсли СтрокаДанныхОВремени = ГоловнаяСтрокаПоСотруднику И Не СтрокаЗаполнена Тогда  
			ГоловнаяСтрокаНеЗаполнена = Истина;
		Иначе 
			ЕстьЗаполненныеСтроки = Истина;	
		КонецЕсли;	
		
		ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник; 
	КонецЦикла;	
	
	Если ГоловнаяСтрокаПоСотруднику <> Неопределено И ГоловнаяСтрокаНеЗаполнена И ЕстьЗаполненныеСтроки Тогда
		МассивУдаляемыхСтрок.Добавить(ГоловнаяСтрокаПоСотруднику);				
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТекущийОбъект.ДанныеОВремени.Удалить(УдаляемаяСтрока);		
	КонецЦикла;	
КонецПроцедуры

Процедура ТабельПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ТабельДанныеВРеквизит(Форма);
КонецПроцедуры

Процедура ТабельОбновитьДанныеПоСотрудникам(Форма) Экспорт
	Объект = Форма.Объект;
	
	ТаблицаСотрудников = ТабельПустаяТаблицаСотрудников();
	
	СтрокиПоСотрудникам = Новый Соответствие;
	
	СотрудникиДокумента = Новый Массив;
	
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.ЭтоПерваяСтрокаПоСотруднику Тогда 
			МассивСтрокПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, СтрокаДанныхОВремени.НомерСтрокиСотрудник);
	
			ТабельОчиститьСтрокиСотрудника(МассивСтрокПоСотруднику);
						
			СтрокиПоСотрудникам.Вставить(СтрокаДанныхОВремени.Сотрудник, МассивСтрокПоСотруднику);			
		КонецЕсли;	
	КонецЦикла;	
	
	ТабельЗаполнитьДанныеПоСотрудникам(Форма, СотрудникиДокумента, СтрокиПоСотрудникам, 2);
	
КонецПроцедуры	

Процедура ТабельЗаполнитьСотрудникамиОрганизации(Форма, ЗаполнятьТерриторииИУсловия = Ложь) Экспорт
	Объект = Форма.Объект;
	
	Если Не ТабельМожноЗаполнитьАвтоматически(Объект) Тогда
		Возврат;		
	КонецЕсли;	
	
	Если Не Объект.ИсправленныйДокумент.Пустая() Тогда
		СтрокиПоСотрудникам = Новый Соответствие;
		СотрудникиДокумента = Новый Массив;
		
		Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
			Если СтрокаДанныхОВремени.ЭтоПерваяСтрокаПоСотруднику Тогда 
				МассивСтрокПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, СтрокаДанныхОВремени.НомерСтрокиСотрудник);
		
				ТабельОчиститьСтрокиСотрудника(МассивСтрокПоСотруднику);
				СотрудникиДокумента.Добавить(СтрокаДанныхОВремени.Сотрудник);
				СтрокиПоСотрудникам.Вставить(СтрокаДанныхОВремени.Сотрудник, МассивСтрокПоСотруднику);			
			КонецЕсли;	
		КонецЦикла;	
		
		ТабельЗаполнитьДанныеПоСотрудникам(Форма, СотрудникиДокумента, СтрокиПоСотрудникам, , ЗаполнятьТерриторииИУсловия);
	Иначе
		Объект.ДанныеОВремени.Очистить();
		ТабельЗаполнитьДанныеПоСотрудникам(Форма,,,, ЗаполнятьТерриторииИУсловия);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ТабельЗаполнитьДанныеПоСотруднику(Форма, ЗаполнятьТерриторииИУсловия = Ложь) Экспорт
	Объект = Форма.Объект;
			
	ГоловнаяСтрокаСотрудника = Объект.ДанныеОВремени.НайтиПоИдентификатору(Форма.Элементы.ДанныеОВремени.ТекущаяСтрока);
	
	Если ГоловнаяСтрокаСотрудника.НеЗаполнятьПриИзмененииСотрудника Тогда
		ГоловнаяСтрокаСотрудника.НеЗаполнятьПриИзмененииСотрудника = Ложь;
		Сотрудник = ГоловнаяСтрокаСотрудника.Сотрудник;
		
		МассивСтрокПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);
		
		Для Каждого СтрокаТабеля Из МассивСтрокПоСотруднику Цикл
			СтрокаТабеля.Сотрудник = Сотрудник;	
		КонецЦикла;	
	Иначе	
		МассивСтрокПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);
	
		ТабельОчиститьСтрокиСотрудника(МассивСтрокПоСотруднику);
		
		СписокСотрудников = Новый Массив;
		СписокСотрудников.Добавить(ГоловнаяСтрокаСотрудника.Сотрудник);
		
		СтрокиПоСотрудникам = Новый Соответствие;
		СтрокиПоСотрудникам.Вставить(ГоловнаяСтрокаСотрудника.Сотрудник, МассивСтрокПоСотруднику);
				
		ТабельЗаполнитьДанныеПоСотрудникам(Форма, СписокСотрудников, СтрокиПоСотрудникам, Форма.ВысотаСтроки, ЗаполнятьТерриторииИУсловия);
	КонецЕсли;		
КонецПроцедуры	

Процедура ТабельОбработкаПодбора(Форма, СписокСотрудников, ЗаполнятьТерриторииИУсловия = Ложь) Экспорт
	Объект = Форма.Объект;
	
	ТаблицаСотрудников = ТабельПустаяТаблицаСотрудников();
	
	ОбщееКоличествоСтрок = Объект.ДанныеОВремени.Количество();
	
	Если ОбщееКоличествоСтрок = 0 Тогда
		НомерТекущейСтроки = 1;
	Иначе	
		НомерТекущейСтроки = Объект.ДанныеОВремени[ОбщееКоличествоСтрок - 1].НомерСтрокиСотрудник + 1; 
	КонецЕсли;	
	
	ДобавляемыеСотрудники = Новый Массив;
	СтрокиПоСотрудникам = Новый Соответствие;
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Если Объект.ДанныеОВремени.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
			ДобавляемыеСотрудники.Добавить(Сотрудник);
			
			СтрокиПоСотруднику = ТабельНоваяСтрокаДанныхОВремени(Объект.ДанныеОВремени, Сотрудник, НомерТекущейСтроки, Форма.ВысотаСтроки);
			СтрокиПоСотрудникам.Вставить(Сотрудник, СтрокиПоСотруднику);
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
		КонецЕсли;	
	КонецЦикла;	
		
	ТабельЗаполнитьДанныеПоСотрудникам(Форма, ДобавляемыеСотрудники, СтрокиПоСотрудникам, Форма.ВысотаСтроки, ЗаполнятьТерриторииИУсловия);
КонецПроцедуры	

Процедура ТабельЗаполнитьДанныеПоСотрудникам(Форма, СписокСотрудников = Неопределено, СтрокиПоСотрудникам = Неопределено, ВысотаСтроки = 2, ЗаполнятьТерриторииИУсловия = Ложь)
	КодыВидовВремени = УчетРабочегоВремениРасширенный.КодыВидовВремени(Форма.Объект.ПериодРегистрации);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	
	ВыборкаДанныхОВремени = МенеджерОбъекта.ВыборкаДанныхОВремени(Форма.Объект, СписокСотрудников);
	
	ТекущийСотрудник = Неопределено;
	ДанныеОВремениПоСотруднику = Новый Массив;
	НомерСтрокиСотрудник = 1;
	
	ДанныеОВремениПоСотруднику = Новый ТаблицаЗначений;
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Сотрудник");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("ВидУчетаВремени");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дата");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дни");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Часы");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("НормаЧасов"); 
	
	Если ЗаполнятьТерриторииИУсловия Тогда
		ДанныеОВремениПоСотруднику.Колонки.Добавить("Территория");
		ДанныеОВремениПоСотруднику.Колонки.Добавить("УсловияТруда"); 
	КонецЕсли;	
	
	Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ДанныеОВремениПоСотруднику.Очистить();
		Пока ВыборкаДанныхОВремени.Следующий() Цикл
			СтрокаТаблицыДанныхОВремени = ДанныеОВремениПоСотруднику.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанныхОВремени, ВыборкаДанныхОВремени)
		КонецЦикла;	
		
		Если СтрокиПоСотрудникам = Неопределено Тогда
			МассивСтрокПоСотруднику = ТабельНоваяСтрокаДанныхОВремени(Форма.Объект.ДанныеОВремени, ВыборкаДанныхОВремени.Сотрудник, НомерСтрокиСотрудник, Форма.ВысотаСтроки);
		Иначе					
			МассивСтрокПоСотруднику = СтрокиПоСотрудникам[ВыборкаДанныхОВремени.Сотрудник];
		КонецЕсли;	
		
		ТабельЗаполнитьСтрокиПоСотруднику(
			Форма, 
			ДанныеОВремениПоСотруднику, 
			МассивСтрокПоСотруднику, 
			КодыВидовВремени, 
			ВысотаСтроки,
			ЗаполнятьТерриторииИУсловия);
			
		НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;	
	КонецЦикла;	
		
	ТабельУстановитьВысотуСтрокПоСотрудникам(Форма, ВысотаСтроки);
	
	ТабельЗаполнитьИтогиПоСотрудникамДокумента(Форма);
КонецПроцедуры	

Функция ТабельМожноЗаполнитьАвтоматически(Объект)
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Организация", "Объект", Отказ); 
	КонецЕсли;
	Возврат Не Отказ;	
КонецФункции	

Процедура ТабельПериодРегистрацииПриИзменении(Форма) Экспорт
	Объект = Форма.Объект;
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
	ОформитьПоляТаблицыДнейМесяца(Форма.Элементы, НачалоМесяца(Объект.ДатаНачалаПериода), "ДанныеОВремениВремя%1Представление");	
	
	ТабельУстановитьВидимостьКолонокДнейПериода(Форма);
	
	ТабельПоместитьОписаниеВидовВремениВДанныеФормы(Форма);
	
	Если Форма.Объект.ПериодВводаДанныхОВремени <> Перечисления.ПериодыВводаДанныхОВремени.ПрошлыйПериод Тогда
		ТабельОбновитьДанныеПоСотрудникам(Форма);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ТабельПериодВводаДанныхОВремениПриИзменении(Форма) Экспорт
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьПериодДокумента(Форма);
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьДоступностьЭлементовПериодаВводаДанных(Форма);
	ТабельПериодРегистрацииПриИзменении(Форма);	
КонецПроцедуры	

Процедура ТабельДанныеВРеквизит(Форма)
	
	Объект = Форма.Объект;
	
	Форма.КоличествоПолностьюЗаполненныхСтрок = 0;
	
	КодыВидовВремени = УчетРабочегоВремениРасширенный.КодыВидовВремени(Объект.ПериодРегистрации);
	
	ТекущийСотрудник = Неопределено;
	ТекущийНомерСтроки = 0;
	
	ВысотаСтроки = 0;
	
	СоответствиеСотрудниковСтрокам = Новый Соответствие;
	
	ВысотаСтрокПоСотрудникам = Новый Соответствие;
	
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник Тогда
			ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
			ЧетнаяСтрока = (ТекущийНомерСтроки % 2 = 0);; 
			СтрокаДанныхОВремени.ЭтоПерваяСтрокаПоСотруднику = Истина;
			
			СоответствиеСотрудниковСтрокам.Вставить(СтрокаДанныхОВремени.Сотрудник, СтрокаДанныхОВремени);
		КонецЕсли;
		
		СтрокаДанныхОВремени.НомерСтрокиСотрудник = ТекущийНомерСтроки;
		СтрокаДанныхОВремени.ЧетнаяСтрока = ЧетнаяСтрока;
		
		Для НомерДня = 1 По 31 Цикл
			ОбозначениеВремени = КодыВидовВремени.Получить(СтрокаДанныхОВремени["ВидВремени" + НомерДня]);
			Часы = СтрокаДанныхОВремени["Часов" + НомерДня];
			СтрокаДанныхОВремени["Время" + НомерДня + "Представление"] = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельПредставлениеВремениПоВиду(ОбозначениеВремени, Часы);
		КонецЦикла;
		
		ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
	КонецЦикла;
	
	ОбозначенияВидовВремени = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельОбозначенияВидовВремени(Форма.ОписаниеВидовВремени);
	Для Каждого ГоловнаяСтрока Из СоответствиеСотрудниковСтрокам Цикл
		МассивСтрок = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрока.Значение.НомерСтрокиСотрудник);
		ВысотаСтроки = Макс(ВысотаСтроки, МассивСтрок.Количество());
		ВысотаСтрокПоСотрудникам.Вставить(ГоловнаяСтрока.Значение, МассивСтрок.Количество());
	КонецЦикла;
	
	Форма.ВысотаСтроки = Макс(Форма.ВысотаСтроки, ?(ВысотаСтроки = 1, 2, ВысотаСтроки));
	
	Для Каждого КлючЗначение Из ВысотаСтрокПоСотрудникам Цикл
		ТабельДополнитьСтрокуПоСотруднику(Объект.ДанныеОВремени, КлючЗначение.Ключ, Форма.ВысотаСтроки - КлючЗначение.Значение);
		Если КлючЗначение.Значение = Форма.ВысотаСтроки Тогда 
			Форма.КоличествоПолностьюЗаполненныхСтрок = Форма.КоличествоПолностьюЗаполненныхСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(Форма, "ПериодическиеСведения");
	ИсправлениеДокументовЗарплатаКадрыКлиентСервер.УстановитьПоляИсправления(Форма, "ПериодическиеСведения");
	
	ТабельЗаполнитьИтогиПоСотрудникамДокумента(Форма);
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьИнфонадписьВысотаСтрок(Форма);
	
КонецПроцедуры

Процедура ТабельЗаполнитьНормуВремени(Форма)
	ТаблицаСотрудников = ТабельПустаяТаблицаСотрудников();	
	
	Объект = Форма.Объект;
	
	СоответствиеСотрудниковСтрокам = Новый Соответствие;
	
	СтрокиПоСотрудникам = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельГоловныеСтрокиСотрудников(Объект.ДанныеОВремени);
	
	Для Каждого ГоловнаяСтрока Из СтрокиПоСотрудникам Цикл
		СтрокаТаблицы = ТаблицаСотрудников.Добавить();
		СтрокаТаблицы.Сотрудник = ГоловнаяСтрока.Сотрудник; 
		СтрокаТаблицы.ПериодДействия = НачалоМесяца(Объект.ДатаНачалаПериода);
		
		СоответствиеСотрудниковСтрокам.Вставить(ГоловнаяСтрока.Сотрудник, ГоловнаяСтрока);	
	КонецЦикла;	
	
	НеучитываемыеДокументы = Новый Массив;
	Если Не Объект.Ссылка.Пустая() Тогда
		НеучитываемыеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;	
	
	ВыборкаПоНормеВремени = УчетРабочегоВремениРасширенный.СформироватьЗапросПоНормеВремени(ТаблицаСотрудников, НеучитываемыеДокументы).Выбрать();
	
	Пока ВыборкаПоНормеВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ГоловнаяСтрокаСотрудника = СоответствиеСотрудниковСтрокам.Получить(ВыборкаПоНормеВремени.Сотрудник);
		СтрокиПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);
		Пока ВыборкаПоНормеВремени.СледующийПоЗначениюПоля("Период") Цикл
			НомерДня = День(ВыборкаПоНормеВремени.Период);
			ГоловнаяСтрокаСотрудника["ЧасовНорма" + НомерДня] = ВыборкаПоНормеВремени.НормаЧасов;	
			ГоловнаяСтрокаСотрудника["ВидВремениПоУмолчаниюОбозначение" + НомерДня] = ВыборкаПоНормеВремени.ВидВремениПоУмолчаниюОбозначение;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТабельДополнитьСтрокуПоСотруднику(ДанныеОВремени, ГоловнаяСтрока, КоличествоДобавляемыхСтрок)
	Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
		УчетРабочегоВремениРасширенныйКлиентСервер.ТабельНоваяСтрокаПоСотруднику(ДанныеОВремени, ГоловнаяСтрока);			
	КонецЦикла;	
КонецПроцедуры	

Функция ТабельПустаяТаблицаСотрудников()
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаСотрудников;
КонецФункции	

Процедура ТабельУстановитьВысотуСтрокПоСотрудникам(Форма, НоваяВысотаСтроки) Экспорт
	
	Если Форма.ВысотаСтроки <> НоваяВысотаСтроки Тогда
		ГоловныеСтроки = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельГоловныеСтрокиСотрудников(Форма.Объект.ДанныеОВремени);
		
		Если НоваяВысотаСтроки > Форма.ВысотаСтроки Тогда
			Для Каждого ГоловнаяСтрокаСотрудника Из ГоловныеСтроки Цикл
				СтрокиПоСотруднику = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Форма.Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник); 
				
				Если СтрокиПоСотруднику.Количество() < НоваяВысотаСтроки Тогда 
					Для НомерСтроки = Форма.ВысотаСтроки + 1 По НоваяВысотаСтроки Цикл
						УчетРабочегоВремениРасширенныйКлиентСервер.ТабельНоваяСтрокаПоСотруднику(Форма.Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника);
					КонецЦикла;	
				КонецЕсли;	
					
			КонецЦикла;	
			Форма.КоличествоПолностьюЗаполненныхСтрок = 0;
			
			ТабельЗаполнитьИтогиПоСотрудникамДокумента(Форма);
		Иначе
			Отказ = Ложь;
			КоличествоУдаляемыхСтрок = Форма.ВысотаСтроки - НоваяВысотаСтроки;
			НомерТекущейСтроки = 1;
			СтрокиПоСотруднику = Новый Массив(Форма.ВысотаСтроки);
			НомерСтрокиПоСотруднику = 0;
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаДанных Из Форма.Объект.ДанныеОВремени Цикл
				Если НомерТекущейСтроки = СтрокаДанных.НомерСтрокиСотрудник Тогда
					НомерСтрокиПоСотруднику = НомерСтрокиПоСотруднику + 1;
					СтрокиПоСотруднику[НомерСтрокиПоСотруднику - 1] = СтрокаДанных;
				Иначе
					КоличествоУдаляемыхСтрокПоСотруднику = 0;
                    ТабельЗаполнитьУдаляемыеСтрокиПоСотруднику(УдаляемыеСтроки, СтрокиПоСотруднику, КоличествоУдаляемыхСтрок, Форма.ВысотаСтроки, КоличествоУдаляемыхСтрокПоСотруднику);
					
					Если КоличествоУдаляемыхСтрокПоСотруднику <> КоличествоУдаляемыхСтрок Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;	
					
					СтрокиПоСотруднику = Новый Массив(Форма.ВысотаСтроки);
					НомерТекущейСтроки = СтрокаДанных.НомерСтрокиСотрудник;
					НомерСтрокиПоСотруднику = 1;
					
					СтрокиПоСотруднику[НомерСтрокиПоСотруднику - 1] = СтрокаДанных;
					
				КонецЕсли;	
			КонецЦикла;
			
			КоличествоУдаляемыхСтрокПоСотруднику = 0;
            ТабельЗаполнитьУдаляемыеСтрокиПоСотруднику(УдаляемыеСтроки, СтрокиПоСотруднику, КоличествоУдаляемыхСтрок, Форма.ВысотаСтроки, КоличествоУдаляемыхСтрокПоСотруднику);

			Если КоличествоУдаляемыхСтрокПоСотруднику <> КоличествоУдаляемыхСтрок Тогда
				Отказ = Истина;
			КонецЕсли;	
			
			Если Не Отказ Тогда
				Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					Форма.Объект.ДанныеОВремени.Удалить(Форма.Объект.ДанныеОВремени.Индекс(УдаляемаяСтрока));		
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		Форма.ВысотаСтроки = НоваяВысотаСтроки;
		
		НомерТекущейСтроки = 1;
		ВсеСтрокиЗаполнены = Истина;
		Для Каждого СтрокаДанных Из Форма.Объект.ДанныеОВремени Цикл
			Если СтрокаДанных.НомерСтрокиСотрудник = НомерТекущейСтроки Тогда
				Если СтрокаДанных.ПустаяСтрока Тогда
					ВсеСтрокиЗаполнены = Ложь;
				КонецЕсли;
			Иначе
				НомерТекущейСтроки = СтрокаДанных.НомерСтрокиСотрудник;
				Если ВсеСтрокиЗаполнены Тогда
					Форма.КоличествоПолностьюЗаполненныхСтрок = Форма.КоличествоПолностьюЗаполненныхСтрок + 1;
				КонецЕсли;
				ВсеСтрокиЗаполнены = Не СтрокаДанных.ПустаяСтрока;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ВсеСтрокиЗаполнены И (НомерТекущейСтроки > 1 Или Форма.Объект.ДанныеОВремени.Количество() = 1) Тогда
			Форма.КоличествоПолностьюЗаполненныхСтрок = Форма.КоличествоПолностьюЗаполненныхСтрок + 1;
		КонецЕсли;	
	КонецЕсли;	
	
	УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьИнфонадписьВысотаСтрок(Форма);
КонецПроцедуры		

Процедура ТабельЗаполнитьУдаляемыеСтрокиПоСотруднику(УдаляемыеСтроки, СтрокиПоСотруднику, КоличествоУдаляемыхСтрок, ВысотаСтроки, КоличествоУдаляемыхСтрокПоСотруднику)
	Сч = 1;
	ФлагПродолжать = Сч < ВысотаСтроки;
	Пока ФлагПродолжать Цикл
		Если СтрокиПоСотруднику[ВысотаСтроки - Сч] <> Неопределено 
			И СтрокиПоСотруднику[ВысотаСтроки - Сч].ПустаяСтрока
			И Не СтрокиПоСотруднику[ВысотаСтроки - Сч].ЭтоПерваяСтрокаПоСотруднику  Тогда
			
			УдаляемыеСтроки.Добавить(СтрокиПоСотруднику[ВысотаСтроки - Сч]);
			КоличествоУдаляемыхСтрокПоСотруднику = КоличествоУдаляемыхСтрокПоСотруднику + 1;
		КонецЕсли;
		Сч = Сч + 1;
		ФлагПродолжать = Сч < ВысотаСтроки И КоличествоУдаляемыхСтрокПоСотруднику < КоличествоУдаляемыхСтрок;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТабельПоместитьОписаниеВидовВремениВДанныеФормы(Форма) Экспорт
	ВидВремениЯвка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	
	БуквенныйКодИмяРеквизита = УчетРабочегоВремениРасширенный.БуквенныйКодИмяРеквизита(Форма.Объект.ПериодРегистрации);
	
	СоответствиеБуквенныхОбозначенийОписаниям = Новый Соответствие;
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	
	ДоступныеВидыВремени = Менеджер.ДоступныеДляВводаВидыВремени();
	
	Выборка = УчетРабочегоВремениРасширенный.СформироватьЗапросПоВидамВремени().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		Если ДоступныеВидыВремени.Получить(Выборка.ОсновноеВремя) <> Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Выборка[БуквенныйКодИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;	
		
		Описание = Новый ФиксированнаяСтруктура(Новый Структура("ВидВремени, Целосменное, Наименование", Выборка.ВидВремени, Выборка.Целосменное, Выборка.Наименование)); 
		СоответствиеБуквенныхОбозначенийОписаниям.Вставить(ВРег(Выборка[БуквенныйКодИмяРеквизита]), Описание);	
		
		Если Выборка.ВидВремени = ВидВремениЯвка Тогда
			Форма.ОбозначениеВидаВремениПоУмолчанию = ВРег(Выборка[БуквенныйКодИмяРеквизита]);
		КонецЕсли;	
	КонецЦикла;
	
	Форма.ОписаниеВидовВремени = Новый ФиксированноеСоответствие(СоответствиеБуквенныхОбозначенийОписаниям); 
КонецПроцедуры	

Процедура ТабельУдалитьСтрокиПоСотруднику(Форма, ИдентификаторУдаляемойСтроки) Экспорт
	Объект = Форма.Объект;
	
	ТекущаяСтрока = Объект.ДанныеОВремени.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
	
	Если ТекущаяСтрока <> Неопределено Тогда
	
		НомерПредыдущейСтроки = ТекущаяСтрока.НомерСтрокиСотрудник;
		
		ИндексОбрабатываемойСтроки = Объект.ДанныеОВремени.Индекс(ТекущаяСтрока);
		
		УдаляемыеСтроки = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ТекущаяСтрока.НомерСтрокиСотрудник);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл  
			Если УдаляемаяСтрока.ЭтоПерваяСтрокаПоСотруднику Тогда
				ИндексОбрабатываемойСтроки = Объект.ДанныеОВремени.Индекс(УдаляемаяСтрока);	
			КонецЕсли;	
		КонецЦикла;	
	
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл  
			Объект.ДанныеОВремени.Удалить(Объект.ДанныеОВремени.Индекс(УдаляемаяСтрока));
		КонецЦикла;	
		
		ОбщееКоличествоСтрок = Объект.ДанныеОВремени.Количество();
		
		Если ИндексОбрабатываемойСтроки < ОбщееКоличествоСтрок Тогда
			ДанныеТекущейСтроки = Объект.ДанныеОВремени[ИндексОбрабатываемойСтроки];
			ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки;
			НомерПредыдущейСтроки = ДанныеТекущейСтроки.НомерСтрокиСотрудник;
			ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
			Форма.Элементы.ДанныеОВремени.ТекущаяСтрока = ДанныеТекущейСтроки.ПолучитьИдентификатор();
		КонецЕсли;	
		
		Пока ИндексОбрабатываемойСтроки < ОбщееКоличествоСтрок Цикл 
			ДанныеТекущейСтроки = Объект.ДанныеОВремени[ИндексОбрабатываемойСтроки];
					
			Если ДанныеТекущейСтроки.ЭтоПерваяСтрокаПоСотруднику Тогда
				ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки + 1;
				НомерПредыдущейСтроки = ДанныеТекущейСтроки.НомерСтрокиСотрудник;
			Иначе
				ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки;
			КонецЕсли;	
			ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
		КонецЦикла;	
		
		УчетРабочегоВремениРасширенныйКлиентСервер.ТабельУстановитьИнфонадписьВысотаСтрок(Форма);
		
		Форма.Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ТабельЗаполнитьСтрокиПоСотруднику(Форма, ДанныеОВремениПоСотруднику, МассивСтрокПоСотруднику, КодыВидовВремени, ВысотаСтроки, ЗаполнятьТерриторииИУсловия = Ложь) Экспорт
	Объект = Форма.Объект;
	
	ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	ОбрабатываемаяДата = '00010101';	

	НормаЧасов = 0;
	МаксимальноеКоличествоВидовВремени = 0;
	МаксимальноеКоличествоЧасовНаДату = -1;
	ВидВремениПоУмолчанию = Неопределено;
	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремениПоСотруднику Цикл
		Если СтрокаДанныхОВремени.ВидУчетаВремени = ВидВремениРабочееВремя Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанныхОВремени.Дата <> ОбрабатываемаяДата Тогда 
			НомерДня = День(СтрокаДанныхОВремени.Дата);	
			НомерВидаВремениНаДату = 1;
			
			Если ВидВремениПоУмолчанию <> Неопределено Тогда
				МассивСтрокПоСотруднику[0]["ВидВремениПоУмолчаниюОбозначение" + День(ОбрабатываемаяДата)] = КодыВидовВремени.Получить(ВидВремениПоУмолчанию);	
			КонецЕсли;	
		Иначе
			НомерВидаВремениНаДату = НомерВидаВремениНаДату + 1;
		КонецЕсли;
		
		Если НомерВидаВремениНаДату > МассивСтрокПоСотруднику.Количество() Тогда
			СтрокаТабеля = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельНоваяСтрокаПоСотруднику(Объект.ДанныеОВремени, МассивСтрокПоСотруднику[0]);	
			МассивСтрокПоСотруднику.Добавить(СтрокаТабеля);
		Иначе
			СтрокаТабеля = МассивСтрокПоСотруднику[НомерВидаВремениНаДату - 1];		
		КонецЕсли;	
		
		СтрокаТабеля["ВидВремени" + НомерДня] = СтрокаДанныхОВремени.ВидУчетаВремени;
		СтрокаТабеля["Часов" + НомерДня] = СтрокаДанныхОВремени.Часы;
		
		Если ЗаполнятьТерриторииИУсловия Тогда
			СтрокаТабеля["Территория" + НомерДня] = СтрокаДанныхОВремени.Территория;
			СтрокаТабеля["УсловияТруда" + НомерДня] = СтрокаДанныхОВремени.УсловияТруда;		
		КонецЕсли;	
		
		Если НомерВидаВремениНаДату = 1 Тогда
			СтрокаТабеля["ЧасовНорма" + НомерДня] = СтрокаДанныхОВремени.НормаЧасов;
		КонецЕсли;	
				
		БуквенноеОбозначение = КодыВидовВремени.Получить(СтрокаДанныхОВремени.ВидУчетаВремени);
		
		СтрокаТабеля["Время" + НомерДня + "Представление"] = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельПредставлениеВремениПоВиду(БуквенноеОбозначение, СтрокаДанныхОВремени.Часы);  
		СтрокаТабеля.ПустаяСтрока = Ложь;
		
		ОбрабатываемаяДата = СтрокаДанныхОВремени.Дата;
		МаксимальноеКоличествоВидовВремени = Макс(МаксимальноеКоличествоВидовВремени, НомерВидаВремениНаДату);
		
		Если СтрокаДанныхОВремени.Часы > МаксимальноеКоличествоЧасовНаДату Тогда
			ВидВремениПоУмолчанию = СтрокаДанныхОВремени.ВидУчетаВремени;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ВидВремениПоУмолчанию <> Неопределено И ОбрабатываемаяДата <> '00010101' Тогда
		МассивСтрокПоСотруднику[0]["ВидВремениПоУмолчаниюОбозначение" + День(ОбрабатываемаяДата)] = КодыВидовВремени.Получить(ВидВремениПоУмолчанию);	
	КонецЕсли;	
	
	КоличествоСтрокПоСотруднику = МассивСтрокПоСотруднику.Количество();
	
	Сотрудник = МассивСтрокПоСотруднику[0].Сотрудник;
	
	Для Каждого СтрокаПоСотруднику Из МассивСтрокПоСотруднику Цикл
		СтрокаПоСотруднику.Сотрудник = Сотрудник;		
	КонецЦикла;	
		
	ВысотаСтроки = Макс(ВысотаСтроки, МаксимальноеКоличествоВидовВремени);
	
	ОбозначенияВидовВремени = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельОбозначенияВидовВремени(Форма.ОписаниеВидовВремени);

КонецПроцедуры	

Процедура ТабельЗаполнитьИтогиПоСотрудникамДокумента(Форма)
	ОбозначенияВидовВремени = УчетРабочегоВремениРасширенныйКлиентСервер.ТабельОбозначенияВидовВремени(Форма.ОписаниеВидовВремени);
	
	СтрокиПоСотруднику = Новый Массив;	
	ТекущийСотрудник = Неопределено;
	Для Каждого СтрокаДанныхОВремени Из Форма.Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник 
			И СтрокиПоСотруднику.Количество() > 0 Тогда
		
			УчетРабочегоВремениРасширенныйКлиентСервер.ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОбозначенияВидовВремени);	
			
			СтрокиПоСотруднику = Новый Массив;
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		Иначе	
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		КонецЕсли;		
	КонецЦикла;	
	
	Если СтрокиПоСотруднику.Количество() > 0 Тогда
		УчетРабочегоВремениРасширенныйКлиентСервер.ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОбозначенияВидовВремени);	
	КонецЕсли;	
КонецПроцедуры	

Функция ТабельНоваяСтрокаДанныхОВремени(ДанныеОВремени, Сотрудник, НомерСтрокиСотрудник, ВысотаСтроки)
	СтрокиПоСотруднику = Новый Массив;
	
	НоваяСтрока = ДанныеОВремени.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
	НоваяСтрока.ЭтоПерваяСтрокаПоСотруднику = Истина;
	НоваяСтрока.ЧетнаяСтрока = (НомерСтрокиСотрудник % 2 = 0); 
	НоваяСтрока.ПустаяСтрока = Истина;
	
	СтрокиПоСотруднику.Добавить(НоваяСтрока);
	
	Для Сч = 2 По ВысотаСтроки Цикл
		НоваяСтрока = ДанныеОВремени.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
		НоваяСтрока.ЭтоПерваяСтрокаПоСотруднику = Ложь;
		НоваяСтрока.ЧетнаяСтрока = (НомерСтрокиСотрудник % 2 = 0); 
		НоваяСтрока.ПустаяСтрока = Истина;
		
		СтрокиПоСотруднику.Добавить(НоваяСтрока);
	КонецЦикла;	
	
	Возврат СтрокиПоСотруднику;
КонецФункции

Процедура ТабельОчиститьСтрокиСотрудника(СтрокиПоСотруднику)
	Для Каждого СтрокаДанныхОВремени Из СтрокиПоСотруднику Цикл
		СтрокаДанныхОВремени.ВремяИтог = "";
		Для НомерДня = 1 По 31 Цикл
			СтрокаДанныхОВремени["Часов" + НомерДня] = 0;      
			СтрокаДанныхОВремени["ВидВремени" + НомерДня] = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
			СтрокаДанныхОВремени["Время" + НомерДня + "Представление"] = "";
			СтрокаДанныхОВремени["ЧасовНорма" + НомерДня] = 0;
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

Процедура ДанныеОВремениСортироватьПоВозрастанию(ДанныеОВремени, АльтернативнаяФорма = Ложь) Экспорт
	ДанныеОВремениСортировать(ДанныеОВремени, "Возр", АльтернативнаяФорма);	
КонецПроцедуры

Процедура ДанныеОВремениСортироватьПоУбыванию(ДанныеОВремени, АльтернативнаяФорма = Ложь) Экспорт
	ДанныеОВремениСортировать(ДанныеОВремени, "Убыв", АльтернативнаяФорма);
КонецПроцедуры

Процедура ДанныеОВремениСортировать(ДанныеОВремени, Направление, АльтернативнаяФорма)
	
	ТаблицаДляСортировки = ДанныеОВремени.Выгрузить();
	ТаблицаДляСортировки.Колонки.Добавить("КлючСортировки");
	ТаблицаДляСортировки.Колонки.Добавить("СотрудникПредставление");
	КолонкаСотрудник = ТаблицаДляСортировки.ВыгрузитьКолонку("Сотрудник");
	КолонкаНомерСтроки = ТаблицаДляСортировки.ВыгрузитьКолонку("НомерСтроки");
	
	СотрудникиПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(КолонкаСотрудник, "Наименование");
	Для каждого СтрокаТаблицы Из ТаблицаДляСортировки Цикл
		СтрокаТаблицы.СотрудникПредставление = СотрудникиПредставление.Получить(СтрокаТаблицы.Сотрудник);
	КонецЦикла; 
	
	ТаблицаДляСортировки.ЗагрузитьКолонку(КолонкаНомерСтроки, "КлючСортировки");
	ТаблицаДляСортировки.Сортировать("СотрудникПредставление " + Направление + ", КлючСортировки");
	ДанныеОВремени.Загрузить(ТаблицаДляСортировки);
	
	Если Не АльтернативнаяФорма Тогда
		
		НомерСтрокиСотрудник = 0;
		Для Каждого ОбрабатываемаяСтрока Из ДанныеОВремени Цикл
			
			Если ОбрабатываемаяСтрока.ЭтоПерваяСтрокаПоСотруднику Тогда
				НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;	
			КонецЕсли;
				
			ОбрабатываемаяСтрока.ЧетнаяСтрока = (НомерСтрокиСотрудник % 2 = 0);
			ОбрабатываемаяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
