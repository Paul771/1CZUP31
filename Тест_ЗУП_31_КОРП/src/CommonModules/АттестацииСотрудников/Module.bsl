
#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.31";
	Обработчик.Процедура = "АттестацииСотрудников.ПервоначальноеЗаполнениеВидовАттестаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.9";
	Обработчик.Процедура = "АттестацииСотрудников.ЗаполнитьДатуАттестацииВРезультатахАттестацииСотрудников";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.22";
	Обработчик.Процедура = "АттестацииСотрудников.ОтразитьРезультатыПодтвержденияКвалификацииВСпециальностяхФизическихЛиц";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "АттестацииСотрудников.УстановитьПараметрыНабораСвойствСправочников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("85d632d8-bfa4-45f5-93e9-68c772afbc1f");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников аттестации сотрудников. Дополнительные реквизиты в аттестации сотрудников временно недоступны.'");
	
КонецПроцедуры

Процедура ПервоначальноеЗаполнениеВидовАттестаций() Экспорт;
	СоздатьВидыАттестацииСотрудников()
КонецПроцедуры

Процедура СоздатьВидыАттестацииСотрудников() Экспорт
	
	Если АттестацииСотрудников.ИспользуетсяАттестацияСотрудников() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.СоздатьВидАттестацииГосударственныхСлужащих();
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
			Модуль.СоздатьВидАттестацииМедицинскихРаботников();
		КонецЕсли;
		
		СоздатьЕдинственныйВидАттестации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуАттестацииВРезультатахАттестацииСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Ссылка
	|ИЗ
	|	Документ.РезультатыАттестацииСотрудников.РезультатыАттестации КАК РезультатыАттестацииСотрудниковРезультатыАттестации
	|ГДЕ
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаАттестации = &ПустаяДата
	|	И РезультатыАттестацииСотрудниковРезультатыАттестации.Ссылка.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для каждого Строка Из ДокументОбъект.РезультатыАттестации Цикл
				Если Не ЗначениеЗаполнено(Строка.ДатаАттестации) Тогда
					Строка.ДатаАттестации = ДокументОбъект.Дата;
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьРезультатыПодтвержденияКвалификацииВСпециальностяхФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Ссылка,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Сотрудник,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаАттестации,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Специальность,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Категория,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.СерияДокумента,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.НомерДокумента,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.КемВыданДокумент,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Основание,
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.ДатаОкончания
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.РезультатыАттестацииСотрудников.РезультатыАттестации КАК РезультатыАттестацииСотрудниковРезультатыАттестации
	|ГДЕ
	|	РезультатыАттестацииСотрудниковРезультатыАттестации.Ссылка.ВидАттестации.ТипАттестации = ЗНАЧЕНИЕ(Перечисление.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности)
	|	И РезультатыАттестацииСотрудниковРезультатыАттестации.РезультатАттестации = ЗНАЧЕНИЕ(Перечисление.РезультатыПодтвержденияКвалификацииПоСпециальности.КвалификацияПодтверждена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальностиФизическихЛиц.ДокументРегистратор
	|ПОМЕСТИТЬ ВТСуществующиеДвижения
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпециальностиФизическихЛиц КАК СпециальностиФизическихЛиц
	|		ПО ВТДанныеДокументов.Ссылка = СпециальностиФизическихЛиц.ДокументРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	СпециальностиФизическихЛиц.ДокументРегистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеДокументов.Сотрудник,
	|	ВТДанныеДокументов.ДатаАттестации КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыеДанные = "ФизическоеЛицо";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТДанныеДокументов.Сотрудник,
	|	ВТДанныеДокументов.ДатаАттестации КАК Период,
	|	ВТДанныеДокументов.Специальность,
	|	ВТДанныеДокументов.Категория КАК РазрядКатегория,
	|	ВТДанныеДокументов.СерияДокумента КАК Серия,
	|	ВТДанныеДокументов.НомерДокумента КАК Номер,
	|	ВТДанныеДокументов.КемВыданДокумент КАК КемВыдан,
	|	ВТДанныеДокументов.Основание,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо,
	|	ВТДанныеДокументов.ДатаОкончания КАК ДействуетПо,
	|	ВТДанныеДокументов.Ссылка КАК ДокументРегистратор
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеДвижения КАК ВТСуществующиеДвижения
	|		ПО ВТДанныеДокументов.Ссылка = ВТСуществующиеДвижения.ДокументРегистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ВТДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ВТДанныеДокументов.ДатаАттестации = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ВТСуществующиеДвижения.ДокументРегистратор ЕСТЬ NULL ";
	
	СпециальностиФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	РегистрыСведений.СпециальностиФизическихЛиц.ЗарегистрироватьСпециальностиФизическихЛиц(СпециальностиФизическихЛиц);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствСправочников(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьАттестацииСотрудников.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыАттестацийСотрудников", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РешенияАттестационныхКомиссий", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбщихМеханизмов

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НаправлениеНаВнешнююАттестацию", 				"Дата", "КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриказОбАттестацииСотрудников", 					"Дата", "КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РезультатыАттестацииСотрудников", 				"Дата", "КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ФормированиеАттестационнойКомиссииСотрудников", 	"Дата", "КадровыйУчет", "Организация");
	
КонецПроцедуры

Процедура ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаРезультатыАттестацииСотрудников();
	ПараметрыЗапроса.КонецПериода = ДатаОтчета;
	Запрос = ЗапросРезультатыАттестацииСотрудников(ПараметрыЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорПоследнегоЗапроса = ПоследнийЗапросПакета.Операторы[0];
	ДобавитьУсловиеВыбора(ОператорПоследнегоЗапроса, "РезультатыАттестацийСотрудников.Сотрудник В (&Сотрудники)");
	ДобавитьУсловиеВыбора(ОператорПоследнегоЗапроса, "РезультатыАттестацийСотрудников.ВидАттестации.ТипАттестации = &ПодтверждениеСоответствияДолжности");
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	Запрос.УстановитьПараметр("ПодтверждениеСоответствияДолжности", Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности);
	
	ДанныеАттестаций = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДанныеСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ДанныеОбАттестации = Новый Структура("ДатаАттестации,РешениеКомиссии,Номер,Дата,Основание");
			
			ДанныеОбАттестации.Вставить("Период", 			Выборка.ДатаАттестации);
			ДанныеОбАттестации.Вставить("ДатаАттестации", 	Формат(Выборка.ДатаАттестации, "ДЛФ=D"));
			ДанныеОбАттестации.Вставить("Номер", 			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина));
			ДанныеОбАттестации.Вставить("Дата", 			Формат(Выборка.Дата, "ДЛФ=D"));
			
			ШаблонРешениеКомиссии =  "%1" + ?(ЗначениеЗаполнено(Выборка.РешениеКомиссии), ", %2","");
			ДанныеОбАттестации.Вставить("РешениеКомиссии", 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРешениеКомиссии, Выборка.РезультатАттестации, Выборка.РешениеКомиссии));
			
			ДанныеСотрудника.Добавить(ДанныеОбАттестации);
			
		КонецЦикла;
		
		ДанныеАттестаций.Вставить(Выборка.Сотрудник, ДанныеСотрудника);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеАттестаций", ДанныеАттестаций);
	
КонецПроцедуры

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РезультатыАттестацииСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СотрудникиПодлежащиеАттестации);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеДвижений

Процедура СформироватьДвиженияРезультатыАттестации(Движения, Отказ, РезультатыАттестации) Экспорт
	
	Для Каждого РезультатАттестации Из РезультатыАттестации Цикл
		
		НоваяСтрока = Движения.РезультатыАттестацийСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатАттестации);
		
		Движения.РезультатыАттестацийСотрудников.Записывать = Истина;
		
	КонецЦикла;
	
	Если Движения.РезультатыАттестацийСотрудников.Записывать Тогда
		Движения.РезультатыАттестацийСотрудников.Записать();
		Движения.РезультатыАттестацийСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВнеочередныеАттестацииСотрудников(Движения, Отказ, ВнеочередныеАттестации) Экспорт
	
	Для Каждого ВнеочереднаяАттестация Из ВнеочередныеАттестации Цикл
		
		НоваяСтрока = Движения.ВнеочередныеАттестацииСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВнеочереднаяАттестация);
		
		Движения.ВнеочередныеАттестацииСотрудников.Записывать = Истина;
		
	КонецЦикла;
	
	Если Движения.ВнеочередныеАттестацииСотрудников.Записывать Тогда
		Движения.ВнеочередныеАттестацииСотрудников.Записать();
		Движения.ВнеочередныеАттестацииСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонстантамиИФункциональнымиОпциями

Функция ИспользуетсяАттестацияСотрудников() Экспорт
	Возврат Константы.ИспользоватьАттестацииСотрудников.Получить();
КонецФункции

Процедура УстановитьИспользованиеАттестаций(Использовать) Экспорт
	Константы.ИспользоватьАттестацииСотрудников.Установить(Использовать);
КонецПроцедуры

Функция ГрафикАттестацииИКомиссияУтверждаютсяОднимДокументом() Экспорт
	Возврат Константы.ГрафикАттестацииИКомиссияУтверждаютсяОднимДокументом.Получить();
КонецФункции

Процедура УстановитьИспользованиеОтдельногоДокументаДляФормированияАттестационнойКомиссии(ИспользоватьОтдельныйДокумент) Экспорт
	Константы.ГрафикАттестацииИКомиссияУтверждаютсяОднимДокументом.Установить(НЕ ИспользоватьОтдельныйДокумент);
	Константы.ГрафикАттестацииИКомиссияУтверждаютсяРазнымиДокументами.Установить(ИспользоватьОтдельныйДокумент);
КонецПроцедуры

Процедура УстановитьНеобходимостьВыбораВидаАттестации() Экспорт
	
	ВыбораВидаАттестацииВключен = Константы.ВыбиратьВидАттестацииСотрудников.Получить();
	НеобходимоВыбиратьВидАттестации = ВидовАттестацииНесколько();
	
	Если ВыбораВидаАттестацииВключен <> НеобходимоВыбиратьВидАттестации Тогда
		Константы.ВыбиратьВидАттестацииСотрудников.Установить(НеобходимоВыбиратьВидАттестации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоставАттестационнойКомиссии

Функция СоставАттестационнойКомиссииПриказаОбАттестации(ПриказОбАттестации) Экспорт
	
	СоставыАттестационныхКомиссий = СоставыАттестационныхКомиссийПриказовОбАттестации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПриказОбАттестации));
	
	Возврат СоставыАттестационныхКомиссий.Получить(ПриказОбАттестации);
	
КонецФункции

Функция СоставыАттестационныхКомиссийПриказовОбАттестации(ПриказыОбАттестации) Экспорт
	
	СоставыАттестационныхКомиссий = Новый Соответствие();
	
	Для каждого ПриказОбАттестации Из ПриказыОбАттестации Цикл
		СоставыАттестационныхКомиссий.Вставить(ПриказОбАттестации, ПустаяТаблицаЧленовКомиссии());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", ПриказыОбАттестации);
	
	СоздатьВТСоставыАттестационныхКомиссии(ПриказыОбАттестации, Запрос.МенеджерВременныхТаблиц);
	СоздатьВТКадровыхДанныхЧленовКомиссии(Запрос.МенеджерВременныхТаблиц);
	
	СоставыКомиссийСКадровымиДанными = СоставыКомиссийСКадровымиДанными(Запрос);
	
	Пока СоставыКомиссийСКадровымиДанными.СледующийПоЗначениюПоля("ПриказОбАттестации") Цикл
		
		ТаблицаЧленовКомиссии = ПустаяТаблицаЧленовКомиссии();
		
		Пока СоставыКомиссийСКадровымиДанными.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЧленовКомиссии.Добавить(), СоставыКомиссийСКадровымиДанными);
		КонецЦикла;
		
		СоставыАттестационныхКомиссий.Вставить(СоставыКомиссийСКадровымиДанными.ПриказОбАттестации, ТаблицаЧленовКомиссии);
		
	КонецЦикла;
	
	Возврат СоставыАттестационныхКомиссий;
	
КонецФункции

Функция ФИОЧленаКомиссииПоРоли(СоставКомиссии, Роль, ПолныеФИО = Ложь) Экспорт
	
	ФИО = "";
	
	ПодходящийЧленКомиссии = СоставКомиссии.Найти(Роль, "РольВКомиссии");
	Если ПодходящийЧленКомиссии <> Неопределено Тогда
		Если ПолныеФИО Тогда
			ФИО = ПодходящийЧленКомиссии.ФИОПолные;
		Иначе
			ФИО = ПодходящийЧленКомиссии.ИОФамилия;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФИО;
	
КонецФункции

#КонецОбласти

#Область СотрудникиПодлежащиеАттестации

Функция ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапросаКомпоновки) Экспорт
	
	Запрос = Неопределено;
	
	Если ВРег(ИмяПредставления) = ВРег("СотрудникиПодлежащиеАттестации") Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСотрудникиПодлежащиеАттестации();
		Запрос = ЗапросСотрудникиПодлежащиеАттестации(ПараметрыЗапроса);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ДобавитьВыводВоВременнуюТаблицу(ПоследнийЗапросПакета, "Представления_СотрудникиПодлежащиеАттестации");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ИначеЕсли ВРег(ИмяПредставления) = ВРег("РезультатыАттестацииСотрудников") Тогда
		ПараметрыЗапроса = ПараметрыЗапросаРезультатыАттестацииСотрудников();
		Запрос = ЗапросРезультатыАттестацииСотрудников(ПараметрыЗапроса);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ДобавитьВыводВоВременнуюТаблицу(ПоследнийЗапросПакета, "Представления_РезультатыАттестацииСотрудников");
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция СотрудникиПодлежащиеАттестации(ВидыАттестации, Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСотрудникиПодлежащиеАттестации(Запрос.МенеджерВременныхТаблиц, ВидыАттестации, Организация, НачалоПериода, КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиПодлежащиеАттестации.Сотрудник КАК Сотрудник,
	|	СотрудникиПодлежащиеАттестации.Подразделение,
	|	СотрудникиПодлежащиеАттестации.Должность,
	|	СотрудникиПодлежащиеАттестации.Дата,
	|	СотрудникиПодлежащиеАттестации.Специальность,
	|	СотрудникиПодлежащиеАттестации.Категория
	|ИЗ
	|	ВТСотрудникиПодлежащиеАттестации КАК СотрудникиПодлежащиеАттестации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

Функция ЭтоВнешняяАттестация(ВидАттестации) Экспорт
	
	ЭтоВнешняяАттестация = Ложь;
	
	Если ЗначениеЗаполнено(ВидАттестации) Тогда
		ЭтоВнешняяАттестация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАттестации, "ЭтоВнешняяАттестация");
	КонецЕсли;
	
	Возврат ЭтоВнешняяАттестация;
	
КонецФункции

Функция ТипАттестации(ВидАттестации) Экспорт
	
	ТипАттестации = Неопределено;
	Если ЗначениеЗаполнено(ВидАттестации) Тогда
		ТипАттестации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАттестации, "ТипАттестации");
	КонецЕсли;
	
	Возврат ТипАттестации;
	
КонецФункции

Функция ЭтоАттестацияГосударственныхСлужащих(ВидАттестации) Экспорт
	
	ЭтоАттестацияГосударственныхСлужащих = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		ЭтоАттестацияГосударственныхСлужащих = Модуль.ЭтоАттестацияГосударственныхСлужащих(ВидАттестации) 
	КонецЕсли;
	
	Возврат ЭтоАттестацияГосударственныхСлужащих;
	
КонецФункции

Функция ЭтоАттестацияМедицинскихРаботников(ВидАттестации) Экспорт
	
	ЭтоАттестацияМедицинскихРаботников = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		ЭтоАттестацияМедицинскихРаботников = Модуль.ЭтоАттестацияМедицинскихРаботников(ВидАттестации) 
	КонецЕсли;
	
	Возврат ЭтоАттестацияМедицинскихРаботников;
	
КонецФункции

#Область МногофункциональныеДокументы

Функция ТипыМногофункциональныхДокументов() Экспорт 
	
	МногофункциональныеДокументы = Новый Соответствие;
	
	ОписаниеДокумента = ЗарплатаКадрыРасширенныйКлиентСервер.ОписаниеМногофункциональногоДокумента();
	ОписаниеДокумента.РеквизитСостояние = "ИзменитьОплату";
	ОписаниеДокумента.ВторойОтветственный = Неопределено;
	ОписаниеДокумента.ВидУчета = "ПлановыеНачисления";
	ОписаниеДокумента.СообщениеДокументНеУтвержден = НСтр("ru = '%1 - оплата труда не изменена.'");
	
	МногофункциональныеДокументы.Вставить(Тип("ДокументСсылка.РезультатыАттестацииСотрудников"), ОписаниеДокумента);
	
	Возврат МногофункциональныеДокументы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НаправлениеНаВнешнююАттестацию);
	СписокОбъектов.Добавить(Документы.ПриказОбАттестацииСотрудников);
	СписокОбъектов.Добавить(Документы.РезультатыАттестацииСотрудников);
	СписокОбъектов.Добавить(Документы.ФормированиеАттестационнойКомиссииСотрудников);
	
КонецПроцедуры

Процедура ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы) Экспорт 
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.РезультатыАттестацииСотрудников"));
	
КонецПроцедуры

#Область СоставАттестационнойКомиссии

Функция ПустаяТаблицаЧленовКомиссии()
	
	ТаблицаЧленовКомиссии = Новый ТаблицаЗначений();
	ТаблицаЧленовКомиссии.Колонки.Добавить("ЧленКомиссии", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаЧленовКомиссии.Колонки.Добавить("РольВКомиссии", Новый ОписаниеТипов("ПеречислениеСсылка.РолиЧленовАттестационнойКомиссии"));
	ТаблицаЧленовКомиссии.Колонки.Добавить("ПорядокРолей", 	ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ТаблицаЧленовКомиссии.Колонки.Добавить("ФИОПолные", 	ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаЧленовКомиссии.Колонки.Добавить("ИОФамилия", 	ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Возврат ТаблицаЧленовКомиссии;
	
КонецФункции

Процедура СоздатьВТСоставыАттестационныхКомиссии(ПриказыОбАттестации, МенеджерВременныхТаблиц)
	
	СхемаЗапроса = СхемаЗапросаПолученияСоставаАттестационнойКомиссии();
	ДобавитьВыводВоВременнуюТаблицу(СхемаЗапроса.ПакетЗапросов[0],  "ВТСоставыАттестационныхКомиссии");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ПриказыОбАттестации", ПриказыОбАттестации);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СхемаЗапросаПолученияСоставаАттестационнойКомиссии()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос		 = СхемаЗапроса.ПакетЗапросов[0];
	Оператор 	 = Запрос.Операторы[0];
	
	ИсточникСоставаКомиссии = ДобавитьИсточникКомиссии(СхемаЗапроса, Запрос, Оператор);
	
	ИсточникПриказов = ДобавитьДоступныйИсточник(Запрос, Оператор, "Документ.ПриказОбАттестацииСотрудников", "ПриказыОбАттестации");
	
	ИсточникСоставаКомиссии.Соединения.Очистить();
	ИсточникПриказов.Соединения.Очистить();
	
	ДобавитьСоединениеИсточников(ИсточникПриказов, ИсточникСоставаКомиссии, УсловиеСоединенияПриказаИСоставаКомиссии());
	
	ДобавитьВыбираемыеПоляСоставаАттестационнойКомиссии(Оператор);
	
	ДобавитьУсловиеВыбора(Оператор, "ПриказыОбАттестации.Ссылка В (&ПриказыОбАттестации)");
	
	Возврат СхемаЗапроса;
	
КонецФункции

Функция ДобавитьДоступныйИсточник(Запрос, Оператор, Путь, Псевдоним)
	Возврат Оператор.Источники.Добавить(Запрос.ДоступныеТаблицы.Найти(Путь), Псевдоним);
КонецФункции

Процедура ДобавитьСоединениеИсточников(ПриемникСоединения, ИсточникСоединения, Условие)
	ПриемникСоединения.Соединения.Добавить(ИсточникСоединения.Источник.Псевдоним, Условие);
КонецПроцедуры

Функция ДобавитьИсточникКомиссии(СхемаЗапроса, Запрос, Оператор)
	ТаблицаСодержащаяСоставКомиссии = ТаблицаСодержащаяСоставКомиссии(СхемаЗапроса, Запрос);
	Возврат Оператор.Источники.Добавить(ТаблицаСодержащаяСоставКомиссии, "СоставыКомиссии");
КонецФункции

Функция УсловиеСоединенияПриказаИСоставаКомиссии()
	
	Если СоставАттестационнойКомиссииУтверждаетсяОтдельнымДокументом() Тогда
		УсловиеСоединенияПриказаИСоставаКомиссии = "ПриказыОбАттестации.ПриказОФормированииКомиссии = СоставыКомиссии.Ссылка";
	Иначе
		УсловиеСоединенияПриказаИСоставаКомиссии = "ПриказыОбАттестации.Ссылка = СоставыКомиссии.Ссылка";
	КонецЕсли;
	
	Возврат УсловиеСоединенияПриказаИСоставаКомиссии;

КонецФункции

Процедура ДобавитьВыбираемыеПоляСоставаАттестационнойКомиссии(Оператор)
	
	Оператор.ВыбираемыеПоля.Добавить("ПриказыОбАттестации.Ссылка");
	Оператор.ВыбираемыеПоля.Добавить("СоставыКомиссии.ЧленКомиссии");
	Оператор.ВыбираемыеПоля.Добавить("СоставыКомиссии.РольВКомиссии");
	Оператор.ВыбираемыеПоля.Добавить("СоставыКомиссии.Ссылка.Дата");
	
КонецПроцедуры

Функция ТаблицаСодержащаяСоставКомиссии(СхемаЗапроса, Запрос)
	
	ИмяДокумента = ИмяДокументаСодержащегоСоставКомиссии();	
	ИмяТабличнойЧасти = "СоставАттестационнойКомиссии";
	
	ТаблицаДокумента = Запрос.ДоступныеТаблицы.Найти("Документ." + ИмяДокумента);
	ИмяДокументаИсточника = ТаблицаДокумента.Имя; 
	ИсточникДанныхСоставаКомиссии = Запрос.ДоступныеТаблицы.Найти(ИмяДокументаИсточника + ".СоставАттестационнойКомиссии");
	
	Возврат ИсточникДанныхСоставаКомиссии;
	
КонецФункции

Функция ИмяДокументаСодержащегоСоставКомиссии()
	
	Если СоставАттестационнойКомиссииУтверждаетсяОтдельнымДокументом() Тогда
		ИмяДокумента = "ФормированиеАттестационнойКомиссииСотрудников";
	Иначе
		ИмяДокумента = "ПриказОбАттестацииСотрудников";
	КонецЕсли;
	
	Возврат ИмяДокумента;
	
КонецФункции

Функция СоставАттестационнойКомиссииУтверждаетсяОтдельнымДокументом()
	Возврат ПолучитьФункциональнуюОпцию("ГрафикАттестацииИКомиссияУтверждаютсяРазнымиДокументами");
КонецФункции

Процедура СоздатьВТКадровыхДанныхЧленовКомиссии(МенеджерВременныхТаблиц, ИмяВТСоставКомиссии = "ВТСоставыАттестационныхКомиссии", ПоляОтбораЧленовКомиссии = "ЧленКомиссии,Дата", КадровыеДанные = "ФИОПолные,ИОФамилия" )
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ИмяВТСоставКомиссии, ПоляОтбораЧленовКомиссии);
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, Истина, КадровыеДанные);
КонецПроцедуры

Функция СоставыКомиссийСКадровымиДанными(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.Ссылка КАК ПриказОбАттестации,
	|	Состав.ЧленКомиссии,
	|	Состав.РольВКомиссии,
	|	ВЫБОР
	|		КОГДА Состав.РольВКомиссии = ЗНАЧЕНИЕ(Перечисление.РолиЧленовАттестационнойКомиссии.Председатель)
	|			ТОГДА 1
	|		КОГДА Состав.РольВКомиссии = ЗНАЧЕНИЕ(Перечисление.РолиЧленовАттестационнойКомиссии.ЗаместительПредседателя)
	|			ТОГДА 2
	|		КОГДА Состав.РольВКомиссии = ЗНАЧЕНИЕ(Перечисление.РолиЧленовАттестационнойКомиссии.Секретарь)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ПорядокРолей,
	|	ВТКадровыеДанныеФизическихЛиц.ФИОПолные,
	|	ВТКадровыеДанныеФизическихЛиц.ИОФамилия
	|ИЗ
	|	ВТСоставыАттестационныхКомиссии КАК Состав
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
	|		ПО Состав.ЧленКомиссии = ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И Состав.Дата = ВТКадровыеДанныеФизическихЛиц.Период
	|ГДЕ
	|	НЕ Состав.ЧленКомиссии ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриказОбАттестации,
	|	ПорядокРолей";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область ЗапросСотрудникиПодлежащиеАттестации

Функция ЗапросСотрудникиПодлежащиеАттестации(ПараметрыЗапроса)
	
	Запрос = КадровыйУчет.ЗапросВТСотрудникиОрганизации(Истина, "ВТСотрудникиОрганизации", ПараметрыПолученияСотрудниковОрганизацийДляАттестаций(ПараметрыЗапроса));
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТОписанияАттестаций());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТПриведенныеОписанияАттестаций());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТДолжностиВидовАттестаций());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСпециальностиВидовАттестаций());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСотрудникиПроходящиеАттестацию());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСледующиеАттестацииСотрудников());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТВнеочередныеАттестацииСотрудников());
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСотрудникиВключенныеВГрафикАттестации());
	
	ТекстЗапросаВТСотрудникиПодлежащиеАттестации = 
	"ВЫБРАТЬ
	|	СотрудникиПроходящиеАттестацию.Сотрудник КАК Сотрудник,
	|	СотрудникиПроходящиеАттестацию.Организация,
	|	СотрудникиПроходящиеАттестацию.Подразделение,
	|	СотрудникиПроходящиеАттестацию.Должность КАК Должность,
	|	СотрудникиПроходящиеАттестацию.ДатаПриема,
	|	СотрудникиПроходящиеАттестацию.ДатаРождения,
	|	СотрудникиПроходящиеАттестацию.Специальность,
	|	СотрудникиПроходящиеАттестацию.Категория,
	|	СотрудникиПроходящиеАттестацию.ДействуетПо,
	|	ЕСТЬNULL(ВнеочередныеАттестацииСотрудников.Дата, СледующиеАттестацииСотрудников.Дата) КАК Дата,
	|	СледующиеАттестацииСотрудников.Дата КАК ДатаСледующейАттестации,
	|	СледующиеАттестацииСотрудников.ДатаПоследнейАттестации,
	|	ВнеочередныеАттестацииСотрудников.Дата КАК ДатаВнеочереднойАттестации,
	|	СотрудникиПроходящиеАттестацию.ВидАттестации,
	|	ВЫБОР
	|		КОГДА СотрудникиВключенныеВГрафикАттестации.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВключенВГрафикАттестации,
	|	ЕСТЬNULL(СотрудникиВключенныеВГрафикАттестации.ГрафикАттестации, ЗНАЧЕНИЕ(Документ.ПриказОбАттестацииСотрудников.ПустаяСсылка)) КАК ГрафикАттестации
	|ИЗ
	|	ВТСотрудникиПроходящиеАттестацию КАК СотрудникиПроходящиеАттестацию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиВключенныеВГрафикАттестации КАК СотрудникиВключенныеВГрафикАттестации
	|		ПО СотрудникиПроходящиеАттестацию.Сотрудник = СотрудникиВключенныеВГрафикАттестации.Сотрудник
	|			И СотрудникиПроходящиеАттестацию.ВидАттестации = СотрудникиВключенныеВГрафикАттестации.ВидАттестации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнеочередныеАттестацииСотрудников КАК ВнеочередныеАттестацииСотрудников
	|		ПО СотрудникиПроходящиеАттестацию.Сотрудник = ВнеочередныеАттестацииСотрудников.Сотрудник
	|			И СотрудникиПроходящиеАттестацию.ВидАттестации = ВнеочередныеАттестацииСотрудников.ВидАттестации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеАттестацииСотрудников КАК СледующиеАттестацииСотрудников
	|		ПО СотрудникиПроходящиеАттестацию.Сотрудник = СледующиеАттестацииСотрудников.Сотрудник
	|			И СотрудникиПроходящиеАттестацию.ВидАттестации = СледующиеАттестацииСотрудников.ВидАттестации
	|			И СотрудникиПроходящиеАттестацию.Специальность = СледующиеАттестацииСотрудников.Специальность
	|ГДЕ
	|	(&КонецПериода = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), ДЕНЬ)
	|			ИЛИ (СледующиеАттестацииСотрудников.Дата <= &КонецПериода
	|				ИЛИ ВнеочередныеАттестацииСотрудников.Дата <= &КонецПериода))";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСотрудникиПодлежащиеАттестации);
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыЗапросаСотрудникиПодлежащиеАттестации()
	
	ПараметрыЗапроса = Новый Структура;	
	
	ПараметрыЗапроса.Вставить("НачалоПериода", 	'00010101');
	ПараметрыЗапроса.Вставить("КонецПериода", 	'00010101');
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизацийДляАттестаций(ПараметрыЗапроса)
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные 	= "Организация,Подразделение,ФизическоеЛицо,Должность,ДатаПриема,ДатаРождения";
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= ПараметрыЗапроса.НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 	= ПараметрыЗапроса.КонецПериода;

	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ТекстЗапросаВТПриведенныеОписанияАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.ВидАттестации,
	|	ВидыАттестацийСотрудников.ТипАттестации,
	|	ВидыАттестацийСотрудников.ЭтоВнешняяАттестация,
	|	ВидыАттестацийСотрудников.Периодичность,
	|	ВидыАттестацийСотрудников.КоличествоПериодов,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуВозрасту,
	|	ВЫБОР
	|		КОГДА ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуВозрасту
	|				И НЕ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&КонецПериода, ГОД, ВидыАттестацийСотрудников.ВозрастДоКоторогоСотрудникНеПодлежитАттестации * -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК МаксимальнаяДатаРождения,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМаксимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации,
	|	ВЫБОР
	|		КОГДА ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМаксимальномуВозрасту
	|				И НЕ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&КонецПериода, ГОД, ВидыАттестацийСотрудников.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации * -1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК МинимальнаяДатаРождения,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуСрокуРаботы,
	|	ВидыАттестацийСотрудников.ПериодичностьМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы,
	|	ВЫБОР
	|		КОГДА ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуСрокуРаботы
	|				И НЕ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА ВидыАттестацийСотрудников.ПериодичностьМинимальногоСрокаРаботы = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|						ТОГДА ДОБАВИТЬКДАТЕ(&КонецПериода, МЕСЯЦ, ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы * -1)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(&КонецПериода, ГОД, ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы * -1)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК МаксимальнаяДатаПриема,
	|	ВидыАттестацийСотрудников.АттестовыватьВсеДолжностиСпециальности,
	|	ВидыАттестацийСотрудников.ОтборПоДолжности
	|ПОМЕСТИТЬ ВТПриведенныеОписанияАттестаций
	|ИЗ
	|	ВТОписанияАттестаций КАК ВидыАттестацийСотрудников";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСотрудникиПроходящиеАттестацию()
	
	ТекстЗапроса = ТекстЗапросаВТСпециальностиСотрудников();
	
	ТекстЗапросаВТСотрудникиПроходящиеАттестацию = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиОрганизации.Сотрудник,
	|	ВТСотрудникиОрганизации.Организация,
	|	ВТСотрудникиОрганизации.Подразделение,
	|	ВТСотрудникиОрганизации.Должность,
	|	ВТСотрудникиОрганизации.ДатаПриема,
	|	ВЫБОР
	|		КОГДА ВТОписанияАттестаций.ПериодичностьМинимальногоСрокаРаботы = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВТСотрудникиОрганизации.ДатаПриема, МЕСЯЦ, ВТОписанияАттестаций.КоличествоПериодовМинимальногоСрокаРаботы)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТСотрудникиОрганизации.ДатаПриема, ГОД, ВТОписанияАттестаций.КоличествоПериодовМинимальногоСрокаРаботы)
	|	КОНЕЦ КАК ДатаПервойАттестации,
	|	ВТСотрудникиОрганизации.ДатаРождения,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка) КАК Специальность,
	|	ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка) КАК Категория,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетПо,
	|	ВТОписанияАттестаций.ВидАттестации КАК ВидАттестации
	|ПОМЕСТИТЬ ВТСотрудникиПроходящиеАттестацию
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДолжностиВидовАттестаций КАК ВТДолжностиВидовАттестаций
	|			ПО ВТОписанияАттестаций.ВидАттестации = ВТДолжностиВидовАттестаций.ВидАттестации
	|		ПО (ВТСотрудникиОрганизации.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ (ВТОписанияАттестаций.МинимальнаяДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ВТОписанияАттестаций.МинимальнаяДатаРождения <= ВТСотрудникиОрганизации.ДатаРождения))
	|			И (ВТСотрудникиОрганизации.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ (ВТОписанияАттестаций.МаксимальнаяДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ ВТОписанияАттестаций.МаксимальнаяДатаРождения >= ВТСотрудникиОрганизации.ДатаРождения))
	|			И (ВТОписанияАттестаций.МаксимальнаяДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТСотрудникиОрганизации.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТОписанияАттестаций.МаксимальнаяДатаПриема >= ВТСотрудникиОрганизации.ДатаПриема
	|					И ВТСотрудникиОрганизации.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (ВЫБОР
	|				КОГДА ВТОписанияАттестаций.АттестовыватьВсеДолжностиСпециальности
	|					ТОГДА ВЫБОР
	|							КОГДА ВТДолжностиВидовАттестаций.Должность ЕСТЬ NULL 
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ НЕ ВТСотрудникиОрганизации.Должность = ВТДолжностиВидовАттестаций.Должность
	|						КОНЕЦ
	|				ИНАЧЕ ВТСотрудникиОрганизации.Должность = ВТДолжностиВидовАттестаций.Должность
	|			КОНЕЦ)
	|ГДЕ
	|	(ВТОписанияАттестаций.ТипАттестации = ЗНАЧЕНИЕ(Перечисление.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности)
	|			ИЛИ ВТОписанияАттестаций.ОтборПоДолжности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиОрганизации.Сотрудник,
	|	ВТСотрудникиОрганизации.Организация,
	|	ВТСотрудникиОрганизации.Подразделение,
	|	ВТСотрудникиОрганизации.Должность,
	|	ВТСотрудникиОрганизации.ДатаПриема,
	|	ВТСотрудникиОрганизации.ДатаПриема,
	|	ВТСотрудникиОрганизации.ДатаРождения,
	|	ВТСпециальностиФизическихЛиц.Специальность,
	|	ВТСпециальностиФизическихЛиц.РазрядКатегория,
	|	ВТСпециальностиФизическихЛиц.ДействуетПо,
	|	ВТОписанияАттестаций.ВидАттестации
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпециальностиФизическихЛиц КАК ВТСпециальностиФизическихЛиц
	|		ПО ВТСотрудникиОрганизации.ФизическоеЛицо = ВТСпециальностиФизическихЛиц.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальностиВидовАттестаций КАК ВТСпециальностиВидовАттестаций
	|			ПО ВТОписанияАттестаций.ВидАттестации = ВТСпециальностиВидовАттестаций.ВидАттестации
	|		ПО (ВЫБОР
	|				КОГДА ВТОписанияАттестаций.АттестовыватьВсеДолжностиСпециальности
	|					ТОГДА ВЫБОР
	|							КОГДА ВТСпециальностиВидовАттестаций.Специальность ЕСТЬ NULL 
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ НЕ ВТСпециальностиФизическихЛиц.Специальность = ВТСпециальностиВидовАттестаций.Специальность
	|						КОНЕЦ
	|				ИНАЧЕ ВТСпециальностиФизическихЛиц.Специальность = ВТСпециальностиВидовАттестаций.Специальность
	|			КОНЕЦ)
	|ГДЕ
	|	ВТОписанияАттестаций.ТипАттестации = ЗНАЧЕНИЕ(Перечисление.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности)
	|	И НЕ ВТОписанияАттестаций.ОтборПоДолжности
	|	И ВТСпециальностиФизическихЛиц.ДействуетПо <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапроса, ТекстЗапросаВТСотрудникиПроходящиеАттестацию);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСпециальностиСотрудников()
	
	ТекстЗапроса =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиОрганизации.Сотрудник,
	|	ВТСотрудникиОрганизации.Организация,
	|	ВТСотрудникиОрганизации.Подразделение,
	|	ВТСотрудникиОрганизации.Должность,
	|	ВТСотрудникиОрганизации.ДатаПриема,
	|	ВТСотрудникиОрганизации.ДатаРождения,
	|	ВТСотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&КонецПериода КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляПолученияСпециальностей
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации";
	
	ОписаниеВТ = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляПериод,ИмяПоляФизическоеЛицо", "ВТСотрудникиДляПолученияСпециальностей", "Период", "ФизическоеЛицо");
	Запрос = КадровыйУчетРасширенный.ЗапросВТСпециальностиФизическихЛиц(Истина, ОписаниеВТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапроса, Запрос.Текст);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСледующиеАттестацииСотрудников()
	
	ТекстЗапросаВТСледующиеАттестацииСотрудников = ТекстЗапросаВТПоследниеАттестацииСотрудников();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТСотрудникиПроходящиеАттестацию.Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТСотрудникиПроходящиеАттестацию.ДатаПервойАттестации > ВЫБОР
	|				КОГДА ВТОписанияАттестаций.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ВТПоследниеАттестацииСотрудников.Дата, ВТСотрудникиПроходящиеАттестацию.ДатаПриема), МЕСЯЦ, ВТОписанияАттестаций.КоличествоПериодов)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ВТПоследниеАттестацииСотрудников.Дата, ВТСотрудникиПроходящиеАттестацию.ДатаПриема), ГОД, ВТОписанияАттестаций.КоличествоПериодов)
	|			КОНЕЦ
	|			ТОГДА ВТСотрудникиПроходящиеАттестацию.ДатаПервойАттестации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТОписанияАттестаций.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ВТПоследниеАттестацииСотрудников.Дата, ВТСотрудникиПроходящиеАттестацию.ДатаПриема), МЕСЯЦ, ВТОписанияАттестаций.КоличествоПериодов)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕСТЬNULL(ВТПоследниеАттестацииСотрудников.Дата, ВТСотрудникиПроходящиеАттестацию.ДатаПриема), ГОД, ВТОписанияАттестаций.КоличествоПериодов)
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата,
	|	ВТПоследниеАттестацииСотрудников.Дата КАК ДатаПоследнейАттестации,
	|	ВТСотрудникиПроходящиеАттестацию.ВидАттестации,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка) КАК Специальность
	|ПОМЕСТИТЬ ВТСледующиеАттестацииСотрудников
	|ИЗ
	|	ВТСотрудникиПроходящиеАттестацию КАК ВТСотрудникиПроходящиеАттестацию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеАттестацииСотрудников КАК ВТПоследниеАттестацииСотрудников
	|		ПО ВТСотрудникиПроходящиеАттестацию.Сотрудник = ВТПоследниеАттестацииСотрудников.Сотрудник
	|			И ВТСотрудникиПроходящиеАттестацию.ВидАттестации = ВТПоследниеАттестацииСотрудников.ВидАттестации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|		ПО ВТСотрудникиПроходящиеАттестацию.ВидАттестации = ВТОписанияАттестаций.ВидАттестации
	|ГДЕ
	|	(ВТОписанияАттестаций.ТипАттестации = ЗНАЧЕНИЕ(Перечисление.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности)
	|			ИЛИ ВТОписанияАттестаций.ОтборПоДолжности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСотрудникиПроходящиеАттестацию.Сотрудник,
	|	ВТСотрудникиПроходящиеАттестацию.ДействуетПо,
	|	ВТПоследниеАттестацииСотрудников.Дата,
	|	ВТСотрудникиПроходящиеАттестацию.ВидАттестации,
	|	ВТСотрудникиПроходящиеАттестацию.Специальность
	|ИЗ
	|	ВТСотрудникиПроходящиеАттестацию КАК ВТСотрудникиПроходящиеАттестацию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеАттестацииСотрудников КАК ВТПоследниеАттестацииСотрудников
	|		ПО ВТСотрудникиПроходящиеАттестацию.Сотрудник = ВТПоследниеАттестацииСотрудников.Сотрудник
	|			И ВТСотрудникиПроходящиеАттестацию.ВидАттестации = ВТПоследниеАттестацииСотрудников.ВидАттестации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|		ПО ВТСотрудникиПроходящиеАттестацию.ВидАттестации = ВТОписанияАттестаций.ВидАттестации
	|ГДЕ
	|	ВТОписанияАттестаций.ТипАттестации = ЗНАЧЕНИЕ(Перечисление.ТипыАттестацииСотрудников.ПодтверждениеКвалификацииПоСпециальности)
	|	И НЕ ВТОписанияАттестаций.ОтборПоДолжности";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаВТСледующиеАттестацииСотрудников, ТекстЗапроса);
	
	Возврат ТекстЗапросаВТСледующиеАттестацииСотрудников;
	
КонецФункции

Функция ТекстЗапросаВТПоследниеАттестацииСотрудников()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыАттестаций.Период КАК Дата,
	|	ВТСотрудникиПроходящиеАттестацию.Сотрудник,
	|	ВТСотрудникиПроходящиеАттестацию.ВидАттестации
	|ПОМЕСТИТЬ ВТПоследниеАттестацииСотрудников
	|ИЗ
	|	ВТСотрудникиПроходящиеАттестацию КАК ВТСотрудникиПроходящиеАттестацию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыАттестацийСотрудников.СрезПоследних КАК РезультатыАттестаций
	|		ПО ВТСотрудникиПроходящиеАттестацию.Сотрудник = РезультатыАттестаций.Сотрудник
	|			И ВТСотрудникиПроходящиеАттестацию.ВидАттестации = РезультатыАттестаций.ВидАттестации";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТВнеочередныеАттестацииСотрудников()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВнеочередныеАттестацииСотрудниковСрезПоследних.Сотрудник,
	|	ВнеочередныеАттестацииСотрудниковСрезПоследних.ДатаВнеочереднойАттестации КАК Дата,
	|	ВнеочередныеАттестацииСотрудниковСрезПоследних.ВидАттестации
	|ПОМЕСТИТЬ ВТВнеочередныеАттестацииСотрудников
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнеочередныеАттестацииСотрудников.СрезПоследних КАК ВнеочередныеАттестацииСотрудниковСрезПоследних
	|		ПО ВТСотрудники.Сотрудник = ВнеочередныеАттестацииСотрудниковСрезПоследних.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|		ПО (ВнеочередныеАттестацииСотрудниковСрезПоследних.ВидАттестации = ВТОписанияАттестаций.ВидАттестации)
	|ГДЕ
	|	НЕ ВнеочередныеАттестацииСотрудниковСрезПоследних.ДатаВнеочереднойАттестации ЕСТЬ NULL ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСотрудникиВключенныеВГрафикАттестации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПриказОбАттестацииСотрудниковСотрудники.Сотрудник,
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка.ВидАттестации КАК ВидАттестации,
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка КАК ГрафикАттестации
	|ПОМЕСТИТЬ ВТСотрудникиВключенныеВГрафикАттестации
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриказОбАттестацииСотрудников.Сотрудники КАК ПриказОбАттестацииСотрудниковСотрудники
	|		ПО ВТСотрудники.Сотрудник = ПриказОбАттестацииСотрудниковСотрудники.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|		ПО (ПриказОбАттестацииСотрудниковСотрудники.Ссылка.ВидАттестации = ВТОписанияАттестаций.ВидАттестации)
	|ГДЕ
	|	НЕ ПриказОбАттестацииСотрудниковСотрудники.Сотрудник ЕСТЬ NULL 
	|	И ПриказОбАттестацииСотрудниковСотрудники.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриказОбАттестацииСотрудниковСотрудники.Сотрудник,
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка.ВидАттестации,
	|	ПриказОбАттестацииСотрудниковСотрудники.Ссылка
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НаправлениеНаВнешнююАттестацию.Сотрудники КАК ПриказОбАттестацииСотрудниковСотрудники
	|		ПО ВТСотрудники.Сотрудник = ПриказОбАттестацииСотрудниковСотрудники.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриведенныеОписанияАттестаций КАК ВТОписанияАттестаций
	|		ПО (ПриказОбАттестацииСотрудниковСотрудники.Ссылка.ВидАттестации = ВТОписанияАттестаций.ВидАттестации)
	|ГДЕ
	|	НЕ ПриказОбАттестацииСотрудниковСотрудники.Сотрудник ЕСТЬ NULL 
	|	И ПриказОбАттестацииСотрудниковСотрудники.Ссылка.Проведен = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СоздатьВТСотрудникиПодлежащиеАттестации(МенеджерВременныхТаблиц, ВидыАттестации, Организация, НачалоПериода, КонецПериода)
	
	ПараметрыЗапроса = ПараметрыЗапросаСотрудникиПодлежащиеАттестации();
	ПараметрыЗапроса.НачалоПериода = НачалоПериода;
	ПараметрыЗапроса.КонецПериода = КонецПериода;
	Запрос = ЗапросСотрудникиПодлежащиеАттестации(ПараметрыЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ПоследнийЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ДобавитьВыводВоВременнуюТаблицу(ПоследнийЗапросПакета, 		"ВТСотрудникиПодлежащиеАттестации");
	ДобавитьУсловиеВыбора(ПоследнийЗапросПакета.Операторы[0], 	"СотрудникиПроходящиеАттестацию.Организация = &Организация");
	ДобавитьУсловиеВыбора(ПоследнийЗапросПакета.Операторы[0], 	"СотрудникиПроходящиеАттестацию.ВидАттестации В (&ВидыАттестации)");
	ДобавитьУсловиеВыбора(ПоследнийЗапросПакета.Операторы[0], 	"СотрудникиВключенныеВГрафикАттестации.Сотрудник ЕСТЬ NULL");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("ВидыАттестации", ВидыАттестации);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ЗапросРезультатыАттестацииСотрудников

Функция ЗапросРезультатыАттестацииСотрудников(ПараметрыЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыАттестацийСотрудников.Сотрудник КАК Сотрудник,
	|	РезультатыАттестацииСотрудников.Организация,
	|	РезультатыАттестацийСотрудников.ВидАттестации,
	|	ВнеочередныеАттестацииСотрудников.ДатаВнеочереднойАттестации,
	|	РезультатыАттестацийСотрудников.Период КАК ДатаАттестации,
	|	РезультатыАттестацииСотрудников.ПриказОбАттестации,
	|	РезультатыАттестацийСотрудников.РешениеКомиссии,
	|	РезультатыАттестацийСотрудников.РезультатАттестации,
	|	РезультатыАттестацийСотрудников.Регистратор,
	|	РезультатыАттестацииСотрудников.Номер,
	|	РезультатыАттестацииСотрудников.Дата
	|ИЗ
	|	Документ.РезультатыАттестацииСотрудников КАК РезультатыАттестацииСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыАттестацийСотрудников КАК РезультатыАттестацийСотрудников
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВнеочередныеАттестацииСотрудников КАК ВнеочередныеАттестацииСотрудников
	|			ПО РезультатыАттестацийСотрудников.Регистратор = ВнеочередныеАттестацииСотрудников.Регистратор
	|				И РезультатыАттестацийСотрудников.НомерСтроки = ВнеочередныеАттестацииСотрудников.НомерСтроки
	|		ПО РезультатыАттестацииСотрудников.Ссылка = РезультатыАттестацийСотрудников.Регистратор
	|ГДЕ
	|	(&НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РезультатыАттестацийСотрудников.Период > &НачалоПериода)
	|	И (&КонецПериода = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), ДЕНЬ)
	|			ИЛИ РезультатыАттестацийСотрудников.Период < &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыЗапроса.КонецПериода);
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыЗапросаРезультатыАттестацииСотрудников()
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("НачалоПериода", 	'00010101');
	ПараметрыЗапроса.Вставить("КонецПериода", 	'00010101');
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЕдинственныйВидАттестации

Функция ВидовАттестацииНесколько()
	
	ВидовАттестацииНесколько = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыАттестацийСотрудников.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВидовАттестацииНесколько = Выборка.Количество > 1;
	КонецЕсли;
	
	Возврат ВидовАттестацииНесколько;
	
КонецФункции

Процедура СоздатьВидАттестацииПоУмолчанию()
	
	ВидАттестации = Справочники.ВидыАттестацийСотрудников.СоздатьЭлемент();
	ВидАттестации.Наименование = НСтр("ru = 'Аттестация сотрудников'");
	ВидАттестации.ТипАттестации = Перечисления.ТипыАттестацииСотрудников.ПодтверждениеСоответствияДолжности;
	ВидАттестации.Периодичность = Перечисления.Периодичность.Год;
	ВидАттестации.КоличествоПериодов = 3;
	ВидАттестации.ИспользоватьОграничениеПоМаксимальномуВозрасту = Истина;
	ВидАттестации.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации = 60;
	ВидАттестации.ИспользоватьОграничениеПоМинимальномуСрокуРаботы = Истина;
	ВидАттестации.КоличествоПериодовМинимальногоСрокаРаботы = 1;
	ВидАттестации.ПериодичностьМинимальногоСрокаРаботы = Перечисления.Периодичность.Год;
	ВидАттестации.АттестовыватьВсеДолжностиСпециальности = Истина;
	ВидАттестации.Записать();
	
КонецПроцедуры

Процедура СоздатьЕдинственныйВидАттестации()
	
	Если СправочникВидыАттестацииПустой() Тогда
		СоздатьВидАттестацииПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникВидыАттестацииПустой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыАттестацийСотрудников.Ссылка
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников";
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область ПечатьАттестационныхЛистов

Процедура ДобавитьКомандуПечатиАттестационногоЛиста(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "АттестационныйЛист";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьФормАттестацииСотрудников";
	КомандаПечати.Представление = НСтр("ru = 'Аттестационный лист'");
	КомандаПечати.Порядок = 20;
	
КонецПроцедуры

Функция ПредставлениеСтажаСотрудникаДляАттестационногоЛиста(Лет, Месяцев) Экспорт
	
	ПредставлениеСтажа = "";
	
	Если ЗначениеЗаполнено(Лет) Тогда
		ПредставлениеСтажа = ПредставлениеСтажа + Лет + " лет";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Месяцев) Тогда
		Если НЕ ПустаяСтрока(ПредставлениеСтажа) Тогда
			ПредставлениеСтажа = ПредставлениеСтажа + " ";
		КонецЕсли;
		ПредставлениеСтажа = ПредставлениеСтажа + Месяцев + " месяцев";
	КонецЕсли;
	
	Возврат ПредставлениеСтажа;
	
КонецФункции

Функция ПредставлениеОбразованияСотрудникаДляАттестационногоЛиста(ДанныеОбОбразовании) Экспорт
	
	ОбразованиеСотрудника = "";
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.ВысшееОбразованиеОкончание) Тогда
		ОбразованиеСотрудника = ОбразованиеСотрудника + Формат(ДанныеОбОбразовании.ВысшееОбразованиеОкончание, "ДФ='yyyy ""г.""'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.ВысшееОбразованиеУчебноеЗаведение) Тогда
		Если НЕ ПустаяСтрока(ОбразованиеСотрудника) Тогда
			ОбразованиеСотрудника = ОбразованиеСотрудника + ", ";
		КонецЕсли;
		ОбразованиеСотрудника = ОбразованиеСотрудника + ДанныеОбОбразовании.ВысшееОбразованиеУчебноеЗаведение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.ВысшееОбразованиеСпециальность) Тогда
		Если НЕ ПустаяСтрока(ОбразованиеСотрудника) Тогда
			ОбразованиеСотрудника = ОбразованиеСотрудника + ", ";
		КонецЕсли;
		ОбразованиеСотрудника = ОбразованиеСотрудника + ДанныеОбОбразовании.ВысшееОбразованиеСпециальность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.ВысшееОбразованиеКвалификация) Тогда
		Если НЕ ПустаяСтрока(ОбразованиеСотрудника) Тогда
			ОбразованиеСотрудника = ОбразованиеСотрудника + ", ";
		КонецЕсли;
		ОбразованиеСотрудника = ОбразованиеСотрудника + ДанныеОбОбразовании.ВысшееОбразованиеКвалификация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.УченаяСтепень) Тогда
		Если НЕ ПустаяСтрока(ОбразованиеСотрудника) Тогда
			ОбразованиеСотрудника = ОбразованиеСотрудника + ", ";
		КонецЕсли;
		ОбразованиеСотрудника = ОбразованиеСотрудника + ДанныеОбОбразовании.УченаяСтепень;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбОбразовании.УченоеЗвание) Тогда
		Если НЕ ПустаяСтрока(ОбразованиеСотрудника) Тогда
			ОбразованиеСотрудника = ОбразованиеСотрудника + ", ";
		КонецЕсли;
		ОбразованиеСотрудника = ОбразованиеСотрудника + ДанныеОбОбразовании.УченоеЗвание;
	КонецЕсли;
	
	Возврат ОбразованиеСотрудника;
	
КонецФункции

#КонецОбласти

#Область ОписаниеАттестации

Функция ТекстЗапросаВТОписанияАттестаций()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаОписанияАттестаций());
	ДобавитьВыводВоВременнуюТаблицу(СхемаЗапроса.ПакетЗапросов[0], "ВТОписанияАттестаций");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ТекстЗапросаВТДолжностиВидовАттестаций()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаДолжностиВидовАттестаций());
	ДобавитьВыводВоВременнуюТаблицу(СхемаЗапроса.ПакетЗапросов[0], "ВТДолжностиВидовАттестаций");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ТекстЗапросаВТСпециальностиВидовАттестаций()
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаСпециальностиВидовАттестаций());
	ДобавитьВыводВоВременнуюТаблицу(СхемаЗапроса.ПакетЗапросов[0], "ВТСпециальностиВидовАттестаций");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ТекстЗапросаОписанияАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыАттестацийСотрудников.Ссылка КАК ВидАттестации,
	|	ВидыАттестацийСотрудников.ТипАттестации,
	|	ВидыАттестацийСотрудников.ЭтоВнешняяАттестация,
	|	ВидыАттестацийСотрудников.Периодичность,
	|	ВидыАттестацийСотрудников.КоличествоПериодов,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастДоКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМаксимальномуВозрасту,
	|	ВидыАттестацийСотрудников.ВозрастПослеКоторогоСотрудникНеПодлежитАттестации,
	|	ВидыАттестацийСотрудников.ИспользоватьОграничениеПоМинимальномуСрокуРаботы,
	|	ВидыАттестацийСотрудников.ПериодичностьМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.КоличествоПериодовМинимальногоСрокаРаботы,
	|	ВидыАттестацийСотрудников.АттестовыватьВсеДолжностиСпециальности,
	|	ЛОЖЬ КАК ОтборПоДолжности
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников КАК ВидыАттестацийСотрудников
	|ГДЕ
	|	ВидыАттестацийСотрудников.Предопределенный = ЛОЖЬ";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьТекстЗапросаОписанияАттестаций(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ДополнитьТекстЗапросаОписанияАттестаций(ТекстЗапроса);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДолжностиВидовАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыАттестацийСотрудниковИсключаемыеДолжности.Ссылка КАК ВидАттестации,
	|	ВидыАттестацийСотрудниковИсключаемыеДолжности.Должность
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников.ИсключаемыеДолжности КАК ВидыАттестацийСотрудниковИсключаемыеДолжности
	|ГДЕ
	|	ВидыАттестацийСотрудниковИсключаемыеДолжности.Ссылка.Предопределенный = ЛОЖЬ";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьТекстЗапросаДолжностиВидовАттестаций(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ДополнитьТекстЗапросаДолжностиВидовАттестаций(ТекстЗапроса);
		
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСпециальностиВидовАттестаций()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыАттестацийСотрудниковИсключаемыеСпециальности.Ссылка КАК ВидАттестации,
	|	ВидыАттестацийСотрудниковИсключаемыеСпециальности.Специальность
	|ИЗ
	|	Справочник.ВидыАттестацийСотрудников.ИсключаемыеСпециальности КАК ВидыАттестацийСотрудниковИсключаемыеСпециальности
	|ГДЕ
	|	ВидыАттестацийСотрудниковИсключаемыеСпециальности.Ссылка.Предопределенный = ЛОЖЬ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьВыводВоВременнуюТаблицу(Запрос, Имя)
	Запрос.ТаблицаДляПомещения = Имя;
КонецПроцедуры

Процедура ДобавитьУсловиеВыбора(Оператор, Условие)
	Оператор.Отбор.Добавить(Условие);
КонецПроцедуры

Процедура ДобавитьПоказателиАттестации(ТаблицаПоказателей) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ИспользоватьАттестацииСотрудников", 
		"Проводятся аттестации сотрудников", "Кадровый учет", "Аттестации сотрудников", "Ложь", 3, 4, 1);
	Отчеты.НастройкиПрограммыЗарплатаКадры.ДобавитьПоказатель(ТаблицаПоказателей, "Константы", "ГрафикАттестацииИКомиссияУтверждаютсяОднимДокументом", 
		"График аттестации и комиссия утверждаются", "Кадровый учет", "Аттестации сотрудников", "Ложь", 3, 4, 2);
	
КонецПроцедуры

#КонецОбласти