////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки электронного обучения.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БиблиотекаЭлектронногоОбучения";
	Описание.Версия = "3.2.1.50";
	
	// ВАЖНО! При изменении поставляемых данных обязательно
	// поменять версии обработчиков обновления, чтобы они обновились.	
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Начальное заполнение
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ЗаполнитьРазделенныеДанные";				
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ЗаполнитьОбщиеПоставляемыеДанные";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;	
	
	// Обновления общие
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ВерсияОбработчика("3.2.1.32");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ЗаполнитьРазделенныеДанные";				
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ВерсияОбработчика("3.2.1.32");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ЗаполнитьОбщиеПоставляемыеДанные";
	Обработчик.ОбщиеДанные = Истина;	
	Обработчик.МонопольныйРежим = Ложь;
	
	// Обновления до версии
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ВерсияОбработчика("3.2.1.1");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ВыполнитьОбновлениеСРедакции31ДоРедакции32";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ВерсияОбработчика("3.2.1.36");
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБЭО.ВыполнитьОбновлениеВерсии32136";	
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
		
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример реализации:
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
		
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Хранит дату изменения макетов ПоставляемыеФайлыЭлектронныхКурсов
// и ПоставляемыеШаблоныЭлектронныхКурсов
//
// Возвращаемое значение:
//  Дата - Дата изменения поставляемых шаблонов.
//
Функция ДатаИзмененияПоставляемыхМакетов() Экспорт
	
	// ВАЖНО! Необходимо менять дату при изменении любых
	// поставляемых данных (файлов или шаблонов).
	// Используется для обновления временных файлов
	// на клиентском компьютере пользователя.	
	
	Возврат ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ДатаИзмененияМакетов();
	
КонецФункции

Процедура ЗаполнитьОбщиеПоставляемыеДанные() Экспорт
	
	// Заполняем макеты курсов
	//
	
	// Распаковываем макеты
	
	ФайлыДляУдаления = Новый Массив;	
	
	ПутьКАрхивуСМакетами = ПолучитьИмяВременногоФайла("zip");
	ФайлыДляУдаления.Добавить(ПутьКАрхивуСМакетами);
	
	ДанныеАрхиваСМакетами = ПолучитьОбщийМакет("ПоставляемыеМакетыЭлектронныхКурсов");
	ДанныеАрхиваСМакетами.Записать(ПутьКАрхивуСМакетами);	
	
	ПутьКМакетам = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ПутьКМакетам);
	ФайлыДляУдаления.Добавить(ПутьКМакетам);
	
	Архиватор = Новый ЧтениеZipФайла(ПутьКАрхивуСМакетами);
	Архиватор.ИзвлечьВсе(ПутьКМакетам, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архиватор.Закрыть();
	
	НачатьТранзакцию();
	
	Попытка
	
		// Очищаем регистр с макетами
		
		НаборЗаписей = РегистрыСведений.МакетыЭлектронныхКурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		// Записываем новые макеты
		
		КоличествоЗагруженных = 0;
		КоличествоНеЗагруженных = 0;
		
		Для каждого Язык Из Перечисления.ЯзыкиИнтерфейсаЭлектронныхКурсов Цикл
		
			КороткийКодЯзыка = Перечисления.ЯзыкиИнтерфейсаЭлектронныхКурсов.ПростойКодИзСоставного(Язык);
			
			Для каждого Тема Из Перечисления.ТемыОформленияЭлектронныхКурсов Цикл
			
				КодТемы = Перечисления.ТемыОформленияЭлектронныхКурсов.КодТемы(Тема);
				
				ПутьКМакету = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКМакетам) + КороткийКодЯзыка;
				ПутьКМакету = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКМакету) + КодТемы;
				
				КаталогМакета = Новый Файл(ПутьКМакету);
				
				Если НЕ КаталогМакета.Существует() Тогда
					КоличествоНеЗагруженных = КоличествоНеЗагруженных + 1;
					Продолжить;
				КонецЕсли;
				
				ПутьКМакету = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКМакету);
				
				ПутьКАрхивуСМакетом = ПолучитьИмяВременногоФайла("zip");
				ФайлыДляУдаления.Добавить(ПутьКАрхивуСМакетом);
				
				Архиватор = Новый ЗаписьZipФайла(ПутьКАрхивуСМакетом,,,, УровеньСжатияZIP.Минимальный);
				Архиватор.Добавить(ПутьКМакету + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
				Архиватор.Записать();
				
				ЗаписьРегистра = РегистрыСведений.МакетыЭлектронныхКурсов.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.Язык = Язык;
				ЗаписьРегистра.Тема = Тема;
				ЗаписьРегистра.Макет = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПутьКАрхивуСМакетом));
				ЗаписьРегистра.ДатаОбновления = ТекущаяДатаСеанса();
				ЗаписьРегистра.Записать();
				
				КоличествоЗагруженных = КоличествоЗагруженных + 1;
				
			КонецЦикла;
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;	
	
	// Удаляем временные файлы
	
	Для каждого ПутьКФайлу Из ФайлыДляУдаления Цикл
	
		Попытка
			УдалитьФайлы(ПутьКФайлу);
		Исключение
			ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(НСтр("ru = 'Ошибка удаления временного файла'"), ПутьКФайлу);
		КонецПопытки;		
	
	КонецЦикла;
	
	// Если не все макеты загружены, то записываем это в журнал
	
	Если КоличествоНеЗагруженных > 0 Тогда
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(НСтр("ru = 'Загружены не все макеты электронных курсов'"), КоличествоНеЗагруженных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при первоначальном заполнении информационной базы.
//
Процедура ЗаполнитьРазделенныеДанные() Экспорт
			
	// Настройки 
	
	ШиринаВидеоПоУмолчанию = РегистрыСведений.НастройкиЭлектронныхКурсов.Значение("ШиринаВидеоПоУмолчанию");
	
	Если НЕ ЗначениеЗаполнено(ШиринаВидеоПоУмолчанию) Тогда
		РегистрыСведений.НастройкиЭлектронныхКурсов.Сохранить("ШиринаВидеоПоУмолчанию", 640);	
	КонецЕсли;
	
	// Выгружаем обязательные файлы в каталог ресурсов
	
	ПутьКОбщемуКаталогуНаВебСервере = РегистрыСведений.ОбщиеНастройкиЭлектронногоОбучения.Значение("ПутьКОбщемуКаталогуНаВебСервере");
	
	Если ЗначениеЗаполнено(ПутьКОбщемуКаталогуНаВебСервере) Тогда	
		
		ПутьККаталогуРесурсов = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ПутьККаталогуЭлектронныхКурсов(ПутьКОбщемуКаталогуНаВебСервере);
		ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыполнитьНачальноеЗаполнениеКаталогаЭлектронныхКурсов(ПутьККаталогуРесурсов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВерсияОбработчика(ВерсияБЭО)
	
	ОписаниеВсехПодсистем = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	
	Если ОписаниеВсехПодсистем.Порядок.Найти("БиблиотекаЭлектронногоОбучения") = Неопределено Тогда
		
		СоответствиеВерсий = Новый Соответствие;
		
		ИзучениеЭлектронныхКурсовПереопределяемый.ПриОпределенииСоответствияВерсийОбработчиковОбновлений(СоответствиеВерсий);
		
		Если ТипЗнч(СоответствиеВерсий) <> Тип("Соответствие") Тогда
			
			ВызватьИсключение НСтр("ru = 'При внедрении подсистемы электронного обучения в
			|родительскую подсистему требуется установить соответствие между версией
			|библиотеки электронного обучения и версией родительской подсистемы.'");
			
		КонецЕсли;
		
		ВерсияПотребителя = СоответствиеВерсий.Получить(ВерсияБЭО); 
		
		Если ВерсияПотребителя = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'Не установлено соответствие версии %1 подсистемы электронного обучения
			|и родительской подсистемы.'");						
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВерсияБЭО);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Возврат ВерсияПотребителя; 
		
	Иначе
		
		Возврат ВерсияБЭО;
		
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьОбновлениеСРедакции31ДоРедакции32() Экспорт
	
	// УдалитьДанныеТестовыхВопросов
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьДанныеТестовыхВопросов.СсылкаНаЭлементКурса КАК СсылкаНаЭлементКурса,
		|	УдалитьДанныеТестовыхВопросов.Поставщик КАК Поставщик,
		|	УдалитьДанныеТестовыхВопросов.Версия КАК Версия,
		|	УдалитьДанныеТестовыхВопросов.КодДанных КАК КодДанных,
		|	УдалитьДанныеТестовыхВопросов.ТекстовыеДанные КАК ТекстовыеДанные,
		|	УдалитьДанныеТестовыхВопросов.ФорматированныйДокумент КАК ФорматированныйДокумент,
		|	УдалитьДанныеТестовыхВопросов.ВерныйКомментарий КАК ВерныйКомментарий,
		|	УдалитьДанныеТестовыхВопросов.ОшибочныйКомментарий КАК ОшибочныйКомментарий,
		|	УдалитьДанныеТестовыхВопросов.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	РегистрСведений.УдалитьДанныеТестовыхВопросов КАК УдалитьДанныеТестовыхВопросов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДанныхТестовыхВопросов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДанныхТестовыхВопросов.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаДанныхТестовыхВопросов.КодДанных) = Тип("СправочникСсылка.ВариантыОтветовНаТестовыеВопросы")
			И ЗначениеЗаполнено(ВыборкаДанныхТестовыхВопросов.КодДанных) Тогда
			
			ВариантОтветаОбъект = ВыборкаДанныхТестовыхВопросов.КодДанных.ПолучитьОбъект();
			
			СуществующийТекстВарианта = ВариантОтветаОбъект.ТекстВарианта.Получить();
			Если НЕ ЗначениеЗаполнено(СуществующийТекстВарианта) Тогда			
				ВариантОтветаОбъект.ТекстВарианта = Новый ХранилищеЗначения(ВыборкаДанныхТестовыхВопросов.ТекстовыеДанные);
				ВариантОтветаОбъект.ВерныйКомментарий = Новый ХранилищеЗначения(ВыборкаДанныхТестовыхВопросов.ВерныйКомментарий);
				ВариантОтветаОбъект.ОшибочныйКомментарий = Новый ХранилищеЗначения(ВыборкаДанныхТестовыхВопросов.ОшибочныйКомментарий);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВариантОтветаОбъект);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ВыборкаДанныхТестовыхВопросов.КодДанных) = Тип("Строка")
			И ЗначениеЗаполнено(ВыборкаДанныхТестовыхВопросов.КодДанных) Тогда
			
			ВопросОбъект = ВыборкаДанныхТестовыхВопросов.СсылкаНаЭлементКурса.ПолучитьОбъект();
			
			Если НЕ ВопросОбъект.ИспользуетсяФорматированныйДокумент Тогда
				Продолжить; //Перенос текстовых данных вопроса не поддерживается
			КонецЕсли;
			
			Если ВыборкаДанныхТестовыхВопросов.КодДанных = "Вопрос" Тогда
			
				СуществующееЗадание = ВопросОбъект.Задание.Получить();
				
				Если ТипЗнч(СуществующееЗадание) <> Тип("ФорматированныйДокумент") Тогда
					ВопросОбъект.Задание = ВыборкаДанныхТестовыхВопросов.ФорматированныйДокумент;
				КонецЕсли;

			КонецЕсли;
			
			Если ВыборкаДанныхТестовыхВопросов.КодДанных = "Описание" Тогда
				
				СуществующееОписание = ВопросОбъект.Комментарий.Получить();
				
				Если ТипЗнч(СуществующееОписание) <> Тип("ФорматированныйДокумент") Тогда
					ВопросОбъект.Комментарий = ВыборкаДанныхТестовыхВопросов.ФорматированныйДокумент;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если ВыборкаДанныхТестовыхВопросов.КодДанных = "Ответ" Тогда
				
				СуществующийОтвет = ВопросОбъект.Ответ.Получить();
				
				Если ТипЗнч(СуществующийОтвет) <> Тип("ФорматированныйДокумент") Тогда
					ВопросОбъект.Ответ = ВыборкаДанныхТестовыхВопросов.ФорматированныйДокумент;
				КонецЕсли;					
				
			КонецЕсли;
			
			Если ВыборкаДанныхТестовыхВопросов.КодДанных = "Подсказка" Тогда
				
				СуществующаяПодсказка = ВопросОбъект.Подсказка.Получить();
				
				Если ТипЗнч(СуществующаяПодсказка) <> Тип("ФорматированныйДокумент") Тогда
					ВопросОбъект.Подсказка = ВыборкаДанныхТестовыхВопросов.ФорматированныйДокумент;
				КонецЕсли;				
				
			КонецЕсли;			
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВопросОбъект);
			
		Иначе
			
			Продолжить; // Неивестный код данных вопроса
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	// УдалитьКомментарииКЭлектроннымТестам
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомментарииКТестам.Владелец КАК Владелец,
		|	КомментарииКТестам.НачалоДиапазонаБаллов КАК НачалоДиапазонаБаллов,
		|	КомментарииКТестам.КонецДиапазонаБаллов КАК КонецДиапазонаБаллов,
		|	КомментарииКТестам.НачалоДиапазонаПопыток КАК НачалоДиапазонаПопыток,
		|	КомментарииКТестам.КонецДиапазонаПопыток КАК КонецДиапазонаПопыток,
		|	КомментарииКТестам.Комментарий КАК Комментарий,
		|	КомментарииКТестам.Ресурс КАК Ресурс
		|ИЗ
		|	Справочник.УдалитьКомментарииКЭлектроннымТестам КАК КомментарииКТестам
		|ГДЕ
		|	КомментарииКТестам.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКомментариевКТестам = РезультатЗапроса.Выбрать();
	
	МассивТестовСКомментариями = Новый Массив;
	
	Пока ВыборкаКомментариевКТестам.Следующий() Цикл
		Если ТипЗнч(ВыборкаКомментариевКТестам.Владелец) <> Тип("СправочникСсылка.ЭлектронныеТесты") Тогда
			// Тип владельца комментария теста определен неверно
		КонецЕсли;
		Если МассивТестовСКомментариями.Найти(ВыборкаКомментариевКТестам.Владелец) = Неопределено Тогда
			МассивТестовСКомментариями.Добавить(ВыборкаКомментариевКТестам.Владелец);
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого ТестСКомментарием Из МассивТестовСКомментариями Цикл
		
		Если ТестСКомментарием.Комментарии.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаКомментариевКТестам.Сбросить();
		
		Пока ВыборкаКомментариевКТестам.НайтиСледующий(Новый Структура("Владелец", ТестСКомментарием)) Цикл
			
			ЭлектронныйТестОбъект = ВыборкаКомментариевКТестам.Владелец.ПолучитьОбъект();
			
			НоваяСтрока = ЭлектронныйТестОбъект.Комментарии.Добавить();
			НоваяСтрока.НачалоДиапазонаБаллов = ВыборкаКомментариевКТестам.НачалоДиапазонаБаллов;
			НоваяСтрока.КонецДиапазонаБаллов = ВыборкаКомментариевКТестам.КонецДиапазонаБаллов; 
			НоваяСтрока.НачалоДиапазонаПопыток = ВыборкаКомментариевКТестам.НачалоДиапазонаПопыток; 
			НоваяСтрока.КонецДиапазонаПопыток = ВыборкаКомментариевКТестам.КонецДиапазонаПопыток; 
			НоваяСтрока.Комментарий = ВыборкаКомментариевКТестам.Комментарий; 
			НоваяСтрока.ПрисоединенныйЭлемент = ВыборкаКомментариевКТестам.Ресурс; 

		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлектронныйТестОбъект);
		
	КонецЦикла;
		
	// УдалитьТекстыЭлектронныхКурсов
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьТекстыЭлектронныхКурсов.Ссылка КАК Ссылка,
		|	УдалитьТекстыЭлектронныхКурсов.ИспользуетсяФорматированныйДокумент КАК ИспользуетсяФорматированныйДокумент,
		|	УдалитьТекстовыеДанныеЭлектронныхКурсов.ТекстовыеДанные КАК ТекстовыеДанные,
		|	УдалитьТекстовыеДанныеЭлектронныхКурсов.ФорматированныйДокумент КАК ФорматированныйДокумент,
		|	УдалитьТекстыЭлектронныхКурсов.Наименование КАК Наименование,
		|	УдалитьТекстыЭлектронныхКурсов.Родитель КАК Родитель,
		|	УдалитьТекстыЭлектронныхКурсов.Поставщик КАК Поставщик
		|ИЗ
		|	РегистрСведений.УдалитьТекстовыеДанныеЭлектронныхКурсов КАК УдалитьТекстовыеДанныеЭлектронныхКурсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьТекстыЭлектронныхКурсов КАК УдалитьТекстыЭлектронныхКурсов
		|		ПО УдалитьТекстовыеДанныеЭлектронныхКурсов.СсылкаНаЭлементКурса = УдалитьТекстыЭлектронныхКурсов.Ссылка
		|ГДЕ
		|	УдалитьТекстыЭлектронныхКурсов.ЭтоГруппа = ЛОЖЬ
		|	И УдалитьТекстыЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ
		|	И УдалитьТекстовыеДанныеЭлектронныхКурсов.КодДанных = ""ТекстСтраницы""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НовыйРесурсСТекстом = ЭлектронноеОбучениеСлужебный.ЭлементСправочникаПоИдентификатору("ЭлектронныеРесурсы", ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(НовыйРесурсСТекстом) Тогда
			Продолжить; // Уже перенесли
		КонецЕсли;
		
		// Ищем электронный курс
		
		ЭлектронныйКурсТекста = Неопределено;
	
		ЗапросГруппыЭлементов = Новый Запрос;
		ЗапросГруппыЭлементов.Текст = 
			"ВЫБРАТЬ
			|	ГруппыЭлементовЭлектронныхКурсов.ЭлектронныйКурс КАК ЭлектронныйКурс
			|ИЗ
			|	РегистрСведений.ГруппыЭлементовЭлектронныхКурсов КАК ГруппыЭлементовЭлектронныхКурсов
			|ГДЕ
			|	ГруппыЭлементовЭлектронныхКурсов.Группа = &Группа";
		
		ЗапросГруппыЭлементов.УстановитьПараметр("Группа", ВыборкаДетальныеЗаписи.Родитель);
		
		РезультатЗапросаГруппыЭлементов = ЗапросГруппыЭлементов.Выполнить();
		
		Если НЕ РезультатЗапросаГруппыЭлементов.Пустой() Тогда
			
			ВыборкаГруппыЭлементов = РезультатЗапросаГруппыЭлементов.Выбрать();		
			ВыборкаГруппыЭлементов.Следующий();
	        ЭлектронныйКурсТекста = ВыборкаГруппыЭлементов.ЭлектронныйКурс;
			
		КонецЕсли;
		
		// Создаем ресурс
					
		РесурсСТекстомОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
		РесурсСТекстомОбъект.УстановитьСсылкуНового(НовыйРесурсСТекстом);
		РесурсСТекстомОбъект.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Если ЗначениеЗаполнено(ЭлектронныйКурсТекста) Тогда
			РесурсСТекстомОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурсТекста, "СправочникСсылка.ЭлектронныеРесурсы");
		КонецЕсли;
		РесурсСТекстомОбъект.Поставщик = ВыборкаДетальныеЗаписи.Поставщик;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РесурсСТекстомОбъект);
		
		// Создаем элемент ресурса
					
		ЭлементРесурсаОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент(); // Запись элемента ресурса будет ниже
		ЭлементРесурсаОбъект.Владелец = НовыйРесурсСТекстом;
		ЭлементРесурсаОбъект.Наименование = ВыборкаДетальныеЗаписи.Наименование;		
		ЭлементРесурсаОбъект.Поставщик = ВыборкаДетальныеЗаписи.Поставщик;
		
		ЭлементРесурсаОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Text;
		ЭлементРесурсаОбъект.ИмяФайла = "index.html";	
		
		// Сохраняем документ в данные элемента ресурса
		
		Если ВыборкаДетальныеЗаписи.ИспользуетсяФорматированныйДокумент Тогда
			ДанныеДокумента = ВыборкаДетальныеЗаписи.ФорматированныйДокумент.Получить();
		Иначе
			Продолжить; // Функциональность по переносу текстовых документов не поддерживается
		КонецЕсли;
		
		ЭлементРесурсаОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДанныеДокумента, "ТекстСтраницы", "html");				
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементРесурсаОбъект);

		// Устанавливаем реквизит ЕдинственныйЭлемент у ресурса
		
		ЕдинственныйЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(РесурсСТекстомОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(ЕдинственныйЭлементРесурса) Тогда
			РесурсСТекстомОбъект.ЕдинственныйЭлемент = ЕдинственныйЭлементРесурса;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РесурсСТекстомОбъект);				
		КонецЕсли;
		
		// Заменяем ссылки на новый ресурс		
		
		СоответствиеСсылок = Новый Соответствие;
		СоответствиеСсылок.Вставить(ВыборкаДетальныеЗаписи.Ссылка, НовыйРесурсСТекстом);
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("СпособУдаления", "");
		ПараметрыЗамены.Вставить("УчитыватьПрикладныеПравила", Ложь);
		ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Ложь);
		ПараметрыЗамены.Вставить("ЗаменаПарыВТранзакции", Истина);
		ПараметрыЗамены.Вставить("ПривилегированнаяЗапись", Истина);
		
		ОбщегоНазначения.ЗаменитьСсылки(СоответствиеСсылок, ПараметрыЗамены);
		
	КонецЦикла;
	
	// УдалитьДанныеЭлементовЭлектронныхКурсов	
	
	ЗапросДанныхЭлементов = Новый Запрос;
	ЗапросДанныхЭлементов.Текст = 
		"ВЫБРАТЬ
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.СсылкаНаЭлементКурса КАК ЭлементРесурса,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.Поставщик КАК Поставщик,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.Версия КАК Версия,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.КодДанных КАК КодДанных,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.ТекстовыеДанные КАК ТекстовыеДанные,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.ДвоичныеДанные КАК ДвоичныеДанные,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.ДатаИзменения КАК ДатаИзменения,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.ДанныеОбмена КАК ДанныеОбмена,
		|	УдалитьДанныеЭлементовЭлектронныхКурсов.РасширениеФайла КАК РасширениеФайла
		|ИЗ
		|	РегистрСведений.УдалитьДанныеЭлементовЭлектронныхКурсов КАК УдалитьДанныеЭлементовЭлектронныхКурсов";
	
	ВыборкаДанныхЭлементов = ЗапросДанныхЭлементов.Выполнить().Выбрать();
	
	МассивЭлементовРесурсов = Новый массив;
	
	Пока ВыборкаДанныхЭлементов.Следующий() Цикл
		Если МассивЭлементовРесурсов.Найти(ВыборкаДанныхЭлементов.ЭлементРесурса) = Неопределено Тогда
			МассивЭлементовРесурсов.Добавить(ВыборкаДанныхЭлементов.ЭлементРесурса);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементРесурса Из МассивЭлементовРесурсов Цикл
		
		ЭлементРесурсаОбъект = ЭлементРесурса.ПолучитьОбъект();
		
		Если ЭлементРесурсаОбъект.ДанныеЭлемента.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДанныхЭлементов.Сбросить();
		
		Пока ВыборкаДанныхЭлементов.НайтиСледующий(Новый Структура("ЭлементРесурса", ЭлементРесурса)) Цикл
		
			НоваяСтрока = ЭлементРесурсаОбъект.ДанныеЭлемента.Добавить();
			НоваяСтрока.КодДанных = ВыборкаДанныхЭлементов.КодДанных;
			НоваяСтрока.ХранилищеДанных = ВыборкаДанныхЭлементов.ДвоичныеДанные;
			НоваяСтрока.ПрисоединенныйФайл = ВыборкаДанныхЭлементов.ПрисоединенныйФайл;
			НоваяСтрока.ДанныеОбмена = ВыборкаДанныхЭлементов.ДанныеОбмена; 
			НоваяСтрока.Расширение = ВыборкаДанныхЭлементов.РасширениеФайла;
			
		КонецЦикла;			
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЭлементРесурсаОбъект);
	
	КонецЦикла;	
	
	// УдалитьАктивностиУчащихсяЭлектронныхКурсов и УдалитьЭлектронноеТестирование
	//
	
	
	
	// Удаляем тестовые документы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзучениеЭлектронногоКурса.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса
		|ГДЕ
		|	ИзучениеЭлектронногоКурса.УдалитьЭтоТестовоеИзучение = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзучениеЭлектронногоКурса.Ссылка
		|ИЗ
		|	Документ.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса
		|ГДЕ
		|	ИзучениеЭлектронногоКурса.УдалитьЭтоРежимРедактирования = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		
		ДокументИзученияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументИзученияОбъект.УстановитьПометкуУдаления(Истина);
		
		// Удаляем все движения
		
		Для каждого Движение Из Метаданные.Документы.ИзучениеЭлектронногоКурса.Движения Цикл			
			НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Движение.ПолноеИмя()).СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Записывать = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);		
		КонецЦикла;		
		
	КонецЦикла;
	
	// Заполяем документ изучения
	
	ЗапросДокументовИзучения = Новый Запрос;
	ЗапросДокументовИзучения.Текст = 
		"ВЫБРАТЬ
		|	ИзучениеЭлектронногоКурса.Ссылка КАК Ссылка,
		|	ИзучениеЭлектронногоКурса.Проведен КАК Проведен,
		|	ИзучениеЭлектронногоКурса.Контекст КАК Контекст,
		|	ИзучениеЭлектронногоКурса.Учащийся КАК Учащийся,
		|	ИзучениеЭлектронногоКурса.ЭлектронныйКурс КАК ЭлектронныйКурс,
		|	ИзучениеЭлектронногоКурса.ДанныеИзучения КАК ДанныеИзучения,
		|	ИзучениеЭлектронногоКурса.УдалитьЗавершено КАК Завершено
		|ИЗ
		|	Документ.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса
		|ГДЕ
		|	ИзучениеЭлектронногоКурса.УдалитьЭтоТестовоеИзучение = ЛОЖЬ
		|	И ИзучениеЭлектронногоКурса.УдалитьЭтоРежимРедактирования = ЛОЖЬ";
	
	ВыборкаДокументовИзучения = ЗапросДокументовИзучения.Выполнить().Выбрать();
	
	ЗапросАктивностей = Новый Запрос;
	ЗапросАктивностей.Текст = 
		"ВЫБРАТЬ
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.Период КАК Период,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.Завершено КАК Завершено,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ЭлементСодержания КАК ЭлементСодержания,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ДатаНачала КАК ДатаНачала,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ДатаОкончания КАК ДатаОкончания,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ТипМатериала КАК ТипМатериала,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.ОбъектЭлектронногоКурса КАК ОбъектЭлектронногоКурса,
		|	УдалитьАктивностиУчащихсяЭлектронныхКурсов.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.УдалитьАктивностиУчащихсяЭлектронныхКурсов КАК УдалитьАктивностиУчащихсяЭлектронныхКурсов";
	
	ВыборкаАктивностей = ЗапросАктивностей.Выполнить().Выбрать();
	
		
	ЗапросТестирований = Новый Запрос;
	ЗапросТестирований.Текст = 
		"ВЫБРАТЬ
		|	УдалитьЭлектронноеТестирование.ИзучениеЭлектронногоКурса КАК ИзучениеЭлектронногоКурса,
		|	УдалитьЭлектронноеТестирование.ТестЗавершен КАК ТестЗавершен,
		|	УдалитьЭлектронноеТестирование.ЭлектронныйКурс КАК ЭлектронныйКурс,
		|	УдалитьЭлектронноеТестирование.ЭлементСодержания КАК ЭлементСодержания,
		|	УдалитьЭлектронноеТестирование.ЭлектронныйТест КАК ЭлектронныйТест,
		|	УдалитьЭлектронноеТестирование.ДатаНачала КАК ДатаНачала,
		|	УдалитьЭлектронноеТестирование.ИтоговыйРезультат КАК ИтоговыйРезультат,
		|	УдалитьЭлектронноеТестирование.ВремяВыполненияТеста КАК ВремяВыполненияТеста,
		|	УдалитьЭлектронноеТестирование.Ссылка КАК Ссылка,
		|	УдалитьЭлектронноеТестирование.Дата КАК Дата
		|ИЗ
		|	Документ.УдалитьЭлектронноеТестирование КАК УдалитьЭлектронноеТестирование";
	
	ВыборкаТестирований = ЗапросТестирований.Выполнить().Выбрать();
	
	МассивДвиженийИзучения = Новый Массив;
	
	Пока ВыборкаДокументовИзучения.Следующий() Цикл
		
		СуществующиеДанныеИзучения = ВыборкаДокументовИзучения.ДанныеИзучения.Получить();
		
		Если ЗначениеЗаполнено(СуществующиеДанныеИзучения) Тогда
			Продолжить; // Уже есть данные
		КонецЕсли;
		
		ДанныеИзученияСтруктура = Новый Структура;
		ДанныеИзученияСтруктура.Вставить("uuid", Строка(ВыборкаДокументовИзучения.Ссылка.УникальныйИдентификатор()));
		ДанныеИзученияСтруктура.Вставить("course",Строка(ВыборкаДокументовИзучения.ЭлектронныйКурс.УникальныйИдентификатор()));
		ДанныеИзученияСтруктура.Вставить("complete", ВыборкаДокументовИзучения.Завершено);
		ДанныеИзученияСтруктура.Вставить("score", Неопределено); // Будет заполнено ниже
		ДанныеИзученияСтруктура.Вставить("progress", Неопределено); // Будет заполнено ниже
		ДанныеИзученияСтруктура.Вставить("activities", Новый Массив);
		
		// Статичные активности
		
		МассивЭлементовСодержания = Новый Массив;
		ВыборкаАктивностей.Сбросить();
		Пока ВыборкаАктивностей.НайтиСледующий(Новый Структура("ИзучениеЭлектронногоКурса", ВыборкаДокументовИзучения.Ссылка)) Цикл
			Если МассивЭлементовСодержания.Найти(ВыборкаАктивностей.ЭлементСодержания) = Неопределено Тогда
				МассивЭлементовСодержания.Добавить(ВыборкаАктивностей.ЭлементСодержания);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ЭлементСодержания Из МассивЭлементовСодержания Цикл
		
			АктивностьСтруктура = Новый Структура;
			АктивностьСтруктура.Вставить("uuid", Неопределено); // Будет установлен далее
			АктивностьСтруктура.Вставить("slide", Строка(ЭлементСодержания.УникальныйИдентификатор()));
			АктивностьСтруктура.Вставить("type", "STATIC");
			АктивностьСтруктура.Вставить("complete", Ложь);
			АктивностьСтруктура.Вставить("start", Дата("00010101"));
			АктивностьСтруктура.Вставить("end",  Дата("00010101"));
			АктивностьСтруктура.Вставить("score",  0); // Всегда для статичной активности
			АктивностьСтруктура.Вставить("attempts",  Новый Массив);			
			
			ВыборкаАктивностей.Сбросить();
			
			Пока ВыборкаАктивностей.НайтиСледующий(Новый Структура("ИзучениеЭлектронногоКурса, ЭлементСодержания", ВыборкаДокументовИзучения.Ссылка, ЭлементСодержания)) Цикл
				
				АктивностьСтруктура.uuid = Строка(ВыборкаАктивностей.Идентификатор);
				
				Если ВыборкаАктивностей.Завершено Тогда
					АктивностьСтруктура.complete = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АктивностьСтруктура.start)
					ИЛИ ВыборкаАктивностей.ДатаНачала < АктивностьСтруктура.start Тогда
					
					АктивностьСтруктура.start = ВыборкаАктивностей.ДатаНачала;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АктивностьСтруктура.end)
					ИЛИ ВыборкаАктивностей.ДатаОкончания > АктивностьСтруктура.end Тогда
					
					АктивностьСтруктура.end = ВыборкаАктивностей.ДатаОкончания;
					
				КонецЕсли;
				
				СтруктураПопытки = Новый Структура;
				СтруктураПопытки.Вставить("start", ВыборкаАктивностей.ДатаНачала);
				СтруктураПопытки.Вставить("end", ВыборкаАктивностей.ДатаОкончания);
				
				АктивностьСтруктура.attempts.Добавить(СтруктураПопытки);				
				
			КонецЦикла;
			
			ДанныеИзученияСтруктура.activities.Добавить(АктивностьСтруктура);
			
		КонецЦикла;
		
		// Тесты
				
		МассивЭлементовСодержанияТестов = Новый Массив;
		ВыборкаТестирований.Сбросить();
		Пока ВыборкаТестирований.НайтиСледующий(Новый Структура("ИзучениеЭлектронногоКурса", ВыборкаДокументовИзучения.Ссылка)) Цикл
			Если МассивЭлементовСодержанияТестов.Найти(ВыборкаТестирований.ЭлементСодержания) = Неопределено Тогда
				МассивЭлементовСодержанияТестов.Добавить(ВыборкаТестирований.ЭлементСодержания);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ЭлементСодержания Из МассивЭлементовСодержанияТестов Цикл
			
			АктивностьСтруктура = Новый Структура;
			АктивностьСтруктура.Вставить("uuid", Неопределено);
			АктивностьСтруктура.Вставить("slide", Строка(ЭлементСодержания.УникальныйИдентификатор()));
			АктивностьСтруктура.Вставить("type", "QUIZ");
			АктивностьСтруктура.Вставить("complete", Ложь);
			АктивностьСтруктура.Вставить("start", Дата("00010101"));
			АктивностьСтруктура.Вставить("end",  Дата("00010101"));
			АктивностьСтруктура.Вставить("score", 0);
			АктивностьСтруктура.Вставить("quizAttempts", Новый Массив);
			АктивностьСтруктура.Вставить("attempts",  Новый Массив);			
			
			ВыборкаТестирований.Сбросить();
			
			Пока ВыборкаТестирований.НайтиСледующий(Новый Структура("ИзучениеЭлектронногоКурса, ЭлементСодержания", ВыборкаДокументовИзучения.Ссылка, ЭлементСодержания)) Цикл
				
				АктивностьСтруктура.uuid = Строка(ВыборкаТестирований.Ссылка.УникальныйИдентификатор());
				
				Если НЕ ЗначениеЗаполнено(АктивностьСтруктура.start)
					ИЛИ ВыборкаТестирований.ДатаНачала < АктивностьСтруктура.start Тогда
					
					АктивностьСтруктура.start = ВыборкаТестирований.ДатаНачала;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АктивностьСтруктура.end)
					ИЛИ ВыборкаТестирований.Дата > АктивностьСтруктура.end Тогда
					
					АктивностьСтруктура.end = ВыборкаТестирований.Дата;
					
				КонецЕсли;   
				
				Если ВыборкаТестирований.ТестЗавершен Тогда
					АктивностьСтруктура.complete = Истина;
				КонецЕсли;
				
				Если ВыборкаТестирований.ИтоговыйРезультат > АктивностьСтруктура.score Тогда
					АктивностьСтруктура.score = ВыборкаТестирований.ИтоговыйРезультат;
				КонецЕсли;
				
				ПопыткаТестированияСтруктура = Новый Структура;
				ПопыткаТестированияСтруктура.Вставить("uuid", Строка(ВыборкаТестирований.Ссылка.УникальныйИдентификатор()));
				ПопыткаТестированияСтруктура.Вставить("slide", Строка(ЭлементСодержания.УникальныйИдентификатор()));
				ПопыткаТестированияСтруктура.Вставить("quiz", Строка(ВыборкаТестирований.ЭлектронныйТест.УникальныйИдентификатор()));
				ПопыткаТестированияСтруктура.Вставить("complete", ВыборкаТестирований.ТестЗавершен);
				ПопыткаТестированияСтруктура.Вставить("start", ВыборкаТестирований.ДатаНачала);
				ПопыткаТестированияСтруктура.Вставить("end", ВыборкаТестирований.Дата);
				ПопыткаТестированияСтруктура.Вставить("score", ВыборкаТестирований.ИтоговыйРезультат);
				ПопыткаТестированияСтруктура.Вставить("pages", Новый Массив);
				

	
				ЗапросВопросов = Новый Запрос;
				ЗапросВопросов.Текст = 
					"ВЫБРАТЬ
					|	УдалитьЭлектронноеТестированиеВопросы.Вопрос КАК Вопрос,
					|	УдалитьЭлектронноеТестированиеВопросы.ВопросПоказан КАК ВопросПоказан,
					|	УдалитьЭлектронноеТестированиеВопросы.КоличествоПоказов КАК КоличествоПоказов,
					|	УдалитьЭлектронноеТестированиеВопросы.СтраницаТеста КАК СтраницаТеста,
					|	УдалитьЭлектронноеТестированиеВопросы.ВесВопроса КАК ВесВопроса,
					|	УдалитьЭлектронноеТестированиеВопросы.ДатаПервогоПоказаВопроса КАК ДатаПервогоПоказаВопроса,
					|	УдалитьЭлектронноеТестированиеВопросы.ДатаПоследнегоПоказаВопроса КАК ДатаПоследнегоПоказаВопроса,
					|	УдалитьЭлектронноеТестированиеВопросы.ДатаОтвета КАК ДатаОтвета,
					|	УдалитьЭлектронноеТестированиеВопросы.ВопросОтвечен КАК ВопросОтвечен,
					|	УдалитьЭлектронноеТестированиеВопросы.Результат КАК Результат,
					|	УдалитьЭлектронноеТестированиеВопросы.Идентификатор КАК Идентификатор
					|ИЗ
					|	Документ.УдалитьЭлектронноеТестирование.Вопросы КАК УдалитьЭлектронноеТестированиеВопросы
					|ГДЕ
					|	УдалитьЭлектронноеТестированиеВопросы.Ссылка = &ПопыткаТестирования";
				
				ЗапросВопросов.УстановитьПараметр("ПопыткаТестирования", ВыборкаТестирований.Ссылка);
				
				ВыборкаВопросов = ЗапросВопросов.Выполнить().Выбрать();
				
		
				ЗапросВариантов = Новый Запрос;
				ЗапросВариантов.Текст = 
					"ВЫБРАТЬ
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.Вопрос КАК Вопрос,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ВариантОтвета КАК ВариантОтвета,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.НомерВарианта КАК НомерВарианта,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.Выбран КАК Выбран,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ПозицияВарианта КАК ПозицияВарианта,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ВерныйВыбран КАК ВерныйВыбран,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ВерныйНеВыбран КАК ВерныйНеВыбран,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ОшибочныйВыбран КАК ОшибочныйВыбран,
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.ОшибочныйНеВыбран КАК ОшибочныйНеВыбран
					|ИЗ
					|	Документ.УдалитьЭлектронноеТестирование.ВариантыОтветов КАК УдалитьЭлектронноеТестированиеВариантыОтветов
					|ГДЕ
					|	УдалитьЭлектронноеТестированиеВариантыОтветов.Ссылка = &ПопыткаТестирования
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПозицияВарианта";
				
				ЗапросВариантов.УстановитьПараметр("ПопыткаТестирования", ВыборкаТестирований.Ссылка);
				
				ВыборкаВариантов = ЗапросВариантов.Выполнить().Выбрать();

	
				ЗапросСтраниц = Новый Запрос;
				ЗапросСтраниц.Текст = 
					"ВЫБРАТЬ
					|	УдалитьЭлектронноеТестированиеСтраницыТеста.СтраницаТеста КАК СтраницаТеста
					|ИЗ
					|	Документ.УдалитьЭлектронноеТестирование.СтраницыТеста КАК УдалитьЭлектронноеТестированиеСтраницыТеста
					|ГДЕ
					|	УдалитьЭлектронноеТестированиеСтраницыТеста.Ссылка = &ПопыткаТестирования";
				
				ЗапросСтраниц.УстановитьПараметр("ПопыткаТестирования", ВыборкаТестирований.Ссылка);
				
				ВыборкаСтраниц = ЗапросСтраниц.Выполнить().Выбрать();
				
				ВыборкаСтраниц.Сбросить();
				
				Пока ВыборкаСтраниц.Следующий() Цикл
					
					СтраницаТестаСтруктура = Новый Структура;
					СтраницаТестаСтруктура.Вставить("uuid", Строка(ВыборкаСтраниц.СтраницаТеста.УникальныйИдентификатор()));
					СтраницаТестаСтруктура.Вставить("questions", Новый Массив);					
					
					ВыборкаВопросов.Сбросить();
					
					Пока ВыборкаВопросов.НайтиСледующий(Новый Структура("СтраницаТеста", ВыборкаСтраниц.СтраницаТеста)) Цикл
						
						Если НЕ ВыборкаВопросов.ВопросПоказан Тогда
							Продолжить;
						КонецЕсли;
						
						ОтветНаВопросСтруктура = Новый Структура;
						ОтветНаВопросСтруктура.Вставить("uuid", Строка(ВыборкаВопросов.Идентификатор));
						ОтветНаВопросСтруктура.Вставить("question", Строка(ВыборкаВопросов.Вопрос.УникальныйИдентификатор()));
						ОтветНаВопросСтруктура.Вставить("complete", ВыборкаВопросов.ВопросОтвечен);
						ОтветНаВопросСтруктура.Вставить("score", ВыборкаВопросов.Результат);
						ОтветНаВопросСтруктура.Вставить("start", ВыборкаВопросов.ДатаПоследнегоПоказаВопроса);
						ОтветНаВопросСтруктура.Вставить("end", ВыборкаВопросов.ДатаОтвета);
						ОтветНаВопросСтруктура.Вставить("variants", Новый Массив);
						
						ВыборкаВариантов.Сбросить();
						
						Пока ВыборкаВариантов.НайтиСледующий(Новый Структура("Вопрос", ВыборкаВопросов.Вопрос)) Цикл
							
							ВариантОтветаСтруктура = Новый Структура;
							ВариантОтветаСтруктура.Вставить("variant", Строка(ВыборкаВариантов.ВариантОтвета.УникальныйИдентификатор()));
							ВариантОтветаСтруктура.Вставить("selected", ВыборкаВариантов.Выбран);
							ВариантОтветаСтруктура.Вставить("trueSelected", ВыборкаВариантов.ВерныйВыбран);
							ВариантОтветаСтруктура.Вставить("trueNotSelected", ВыборкаВариантов.ВерныйНеВыбран);
							ВариантОтветаСтруктура.Вставить("falseSelected", ВыборкаВариантов.ОшибочныйВыбран);
							ВариантОтветаСтруктура.Вставить("falseNotSelected", ВыборкаВариантов.ОшибочныйНеВыбран);
							
							ОтветНаВопросСтруктура.variants.Добавить(ВариантОтветаСтруктура);
							
						КонецЦикла;
						
						СтраницаТестаСтруктура.questions.Добавить(ОтветНаВопросСтруктура);
						
					КонецЦикла;
					
					ПопыткаТестированияСтруктура.pages.Добавить(СтраницаТестаСтруктура);
					
				КонецЦикла;
				
				
				АктивностьСтруктура.quizAttempts.Добавить(ПопыткаТестированияСтруктура);
				
				СтруктураПопытки = Новый Структура;
				СтруктураПопытки.Вставить("start", ПопыткаТестированияСтруктура.start);
				СтруктураПопытки.Вставить("end", ПопыткаТестированияСтруктура.end);
				
				АктивностьСтруктура.attempts.Добавить(СтруктураПопытки);
				
			КонецЦикла;
			
			
			ДанныеИзученияСтруктура.activities.Добавить(АктивностьСтруктура);

		КонецЦикла;
		
		// Считаем общий результат и прогресс			

		ЗапросВсехЭлементовСодержанияКурса = Новый Запрос;
		ЗапросВсехЭлементовСодержанияКурса.Текст = 
			"ВЫБРАТЬ
			|	СодержаниеЭлектронныхКурсов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СодержаниеЭлектронныхКурсов КАК СодержаниеЭлектронныхКурсов
			|ГДЕ
			|	СодержаниеЭлектронныхКурсов.ПометкаУдаления = ЛОЖЬ
			|	И СодержаниеЭлектронныхКурсов.ЭтоГруппа = ЛОЖЬ
			|	И СодержаниеЭлектронныхКурсов.Владелец = &ЭлектронныйКурс";
		
		ЗапросВсехЭлементовСодержанияКурса.УстановитьПараметр("ЭлектронныйКурс", ВыборкаДокументовИзучения.ЭлектронныйКурс);
		
		ВсеЭлементыСодержанияКурса = ЗапросВсехЭлементовСодержанияКурса.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		КоличествоСлайдов = ВсеЭлементыСодержанияКурса.Количество();
		КоличествоЗавершенныхСлайдов = 0;
		
		Для каждого ЭлементСодержанияКурса Из ВсеЭлементыСодержанияКурса Цикл
		
			Для каждого АктивностьСтруктура Из ДанныеИзученияСтруктура.activities Цикл			
				Если АктивностьСтруктура.slide = Строка(ЭлементСодержанияКурса.УникальныйИдентификатор())
					И АктивностьСтруктура.complete Тогда
					КоличествоЗавершенныхСлайдов = КоличествоЗавершенныхСлайдов + 1;
				КонецЕсли;			
			КонецЦикла;				
		
		КонецЦикла;
		
				
		Если КоличествоСлайдов > 0 Тогда
			ДанныеИзученияСтруктура.progress = Окр((КоличествоЗавершенныхСлайдов / КоличествоСлайдов)*100);
		Иначе
			ДанныеИзученияСтруктура.progress = 100; // Пустой курс
		КонецЕсли;
		
		Если ДанныеИзученияСтруктура.progress > 100 Тогда
			ДанныеИзученияСтруктура.progress = 100;
		КонецЕсли;
		
		Если ДанныеИзученияСтруктура.progress = 100 Тогда
			ДанныеИзученияСтруктура.complete = Истина;
		КонецЕсли;
		
		Если ДанныеИзученияСтруктура.complete Тогда
			
			МаксимальноеКоличествоБаллов = 0;
			РеальноеКоличествоБаллов = 0;
			Для каждого ЭлементСодержанияКурса Из ВсеЭлементыСодержанияКурса Цикл

				Для каждого АктивностьСтруктура Из ДанныеИзученияСтруктура.activities Цикл
					
					Если АктивностьСтруктура.slide = Строка(ЭлементСодержанияКурса.УникальныйИдентификатор()) 
						И АктивностьСтруктура.type = "QUIZ" Тогда
						МаксимальноеКоличествоБаллов = МаксимальноеКоличествоБаллов + 100;
						Если АктивностьСтруктура.complete Тогда
							РеальноеКоличествоБаллов = РеальноеКоличествоБаллов + АктивностьСтруктура.score; 
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
				
			Если МаксимальноеКоличествоБаллов > 0 Тогда
				ДанныеИзученияСтруктура.score = Окр((РеальноеКоличествоБаллов / МаксимальноеКоличествоБаллов)*100);
			Иначе
				ДанныеИзученияСтруктура.score = 100; // Зачет, если нет тестов
			КонецЕсли;				
			
		Иначе
			
			ДанныеИзученияСтруктура.score = 0;
			
		КонецЕсли;
		
		Если ДанныеИзученияСтруктура.score > 100 Тогда
			ДанныеИзученияСтруктура.score = 100;
		КонецЕсли;			
		
		// Записываем в БД данные изучения в новом формате
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеИзученияСтруктура);					
		
		ДанныеИзученияСтрока = ЗаписьJSON.Закрыть();
		
		ДокументИзученияОбъект = ВыборкаДокументовИзучения.Ссылка.ПолучитьОбъект();		
		ДокументИзученияОбъект.ДанныеИзучения = Новый ХранилищеЗначения(ДанныеИзученияСтрока);		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументИзученияОбъект);
		
		// Удаляем все движения
		
		Для каждого Движение Из Метаданные.Документы.ИзучениеЭлектронногоКурса.Движения Цикл			
			НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Движение.ПолноеИмя()).СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументовИзучения.Ссылка);
			НаборЗаписей.Записывать = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);		
		КонецЦикла;				
		
		// Добавляем новые движения
		
		Если ДокументИзученияОбъект.Проведен Тогда			
			ДокументИзученияОбъект.СформироватьДвижения();
			ДокументИзученияОбъект.Движения.Записать();		
		КонецЕсли;		
		
	КонецЦикла;

	// Помечаем на удаление устаревший документ УдалитьЭлектронноеТестирование
	
	ВыборкаТестирований.Сбросить();
	Пока ВыборкаТестирований.Следующий() Цикл
		ДокументТестированияОбъект = ВыборкаТестирований.Ссылка.ПолучитьОбъект();
		ДокументТестированияОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	// ГруппыЭлементовЭлектронныхКурсов
	//
	
	// Удаляем записи регистра с пустыми курсами и с ссылками на справочник УдалитьТекстыЭлектронныхКурсов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыЭлементовЭлектронныхКурсов.ЭлектронныйКурс КАК ЭлектронныйКурс,
		|	ГруппыЭлементовЭлектронныхКурсов.Группа КАК Группа
		|ИЗ
		|	РегистрСведений.ГруппыЭлементовЭлектронныхКурсов КАК ГруппыЭлементовЭлектронныхКурсов
		|ГДЕ
		|	ГруппыЭлементовЭлектронныхКурсов.ЭлектронныйКурс = ЗНАЧЕНИЕ(Справочник.ЭлектронныеКурсы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыЭлементовЭлектронныхКурсов.ЭлектронныйКурс,
		|	ГруппыЭлементовЭлектронныхКурсов.Группа
		|ИЗ
		|	РегистрСведений.ГруппыЭлементовЭлектронныхКурсов КАК ГруппыЭлементовЭлектронныхКурсов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ГруппыЭлементовЭлектронныхКурсов.Группа) = ТИП(Справочник.УдалитьТекстыЭлектронныхКурсов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйКурс.Установить(ВыборкаДетальныеЗаписи.ЭлектронныйКурс);
		НаборЗаписей.Отбор.Группа.Установить(ВыборкаДетальныеЗаписи.Группа);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ВыполнитьОбновлениеВерсии32136() Экспорт
	
	// Устанавливаем реквизит ЕдинственныйЭлемент
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеРесурсы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭлектронныеРесурсы КАК ЭлектронныеРесурсы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЕдинственныйЭлементРесурса = Справочники.ЭлектронныеРесурсы.ЕдинственныйЭлемент(ВыборкаДетальныеЗаписи.Ссылка);
		
		Если ЗначениеЗаполнено(ЕдинственныйЭлементРесурса) Тогда
			РесурсСТекстомОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			РесурсСТекстомОбъект.ЕдинственныйЭлемент = ЕдинственныйЭлементРесурса;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(РесурсСТекстомОбъект);				
		КонецЕсли;			
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти