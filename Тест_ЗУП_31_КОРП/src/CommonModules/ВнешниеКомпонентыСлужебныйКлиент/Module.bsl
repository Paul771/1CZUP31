
#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтоКомпонентаИзХранилища(Местоположение) Экспорт
	
	Возврат СтрНачинаетсяС(Местоположение, "e1cib/data/Справочник.ВнешниеКомпоненты.ХранилищеКомпоненты");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеВнешнейКомпоненты

// Вызывается после подготовки длительной операцией
//
Процедура ПодключитьКомпонентуПослеПодготовки(Результат, Контекст) Экспорт

	// Ответ: 
	// - Структура - Выполнено - результат в структуре.
	// - Неопределено - Отменено пользователем.
	Если Результат = Неопределено Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Контекст.АдресРезультатаПодготовкиКомпоненты); // Вызов сервера.
		Возврат;
	КонецЕсли;
	
	// В контексте АдресРезультата больше не нужен, теперь он актуализирован в Результат.АдресРезультата.
	Контекст.Удалить("АдресРезультатаПодготовкиКомпоненты");
	
	// Результат.Статус:
	// - "Ошибка" - описание в ОписаниеОшибки.
	// - "Выполнено" - результат в Результат.АдресРезультата.
	Если Результат.Статус = "Выполнено" Тогда
		
		Информация = ВнешниеКомпонентыСлужебныйВызовСервера.РезультатПодготовкиКомпонентыКПодключению(
			Результат.АдресРезультата); // Вызов сервера.
		
		Доступна = ПроверитьДоступностьКомпоненты(Информация);
		
		Если Доступна Тогда 
			
			Контекст.Вставить("Местоположение", Информация.Местоположение);
			ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпоненту(Контекст);
			
		Иначе 
			
			Оповещение = Новый ОписаниеОповещения(
				"ПодключитьКомпонентуЗавершениеНеДоступноВКлиенте", ЭтотОбъект, Контекст);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстПояснения", Контекст.ТекстПояснения);
			ПараметрыФормы.Вставить("ПоддерживаемыеКлиенты", Информация);
			
			ОткрытьФорму("ОбщаяФорма.ДоступныеВидыКлиентовВнешнейКомпоненты",
				ПараметрыФормы,,,,, Оповещение);
			
		КонецЕсли;
		
	Иначе 
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на клиенте
			           |из хранилища внешних компонент
			           |по причине:
			           |%2'"),
			Контекст.Идентификатор,
			Результат.КраткоеПредставлениеОшибки);
		
		ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

//
Процедура ПодключитьКомпонентуЗавершениеНеДоступноВКлиенте(Результат, Контекст) Экспорт
	
	ТекстОшибки = "";
	ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
	
КонецПроцедуры

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение                   - ОписаниеОповещения   - .
//      * Идентификатор                - Строка               - .
//      * ИдентификаторСозданияОбъекта - Строка, Неопределено - .
//
Процедура ПодключитьКомпонентуИзРеестраWindows(Контекст) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент()
		И Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуИзРеестраWindowsПослеПопыткиПодключения", ЭтотОбъект, Контекст,
		"ПодключитьКомпонентуИзРеестраWindowsПриОбработкеОшибки", ЭтотОбъект);
		
		НачатьПодключениеВнешнейКомпоненты(Оповещение, "AddIn." + Контекст.Идентификатор);
		
	Иначе 
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на клиенте
			           |из реестра Windows
			           |по причине:
			           |Подключить компоненту из реестра Windows возможно только в тонком или толстом клиентах Windows.'"),
		Контекст.Идентификатор);
		
		ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпонентуИзРеестраWindows.
Процедура ПодключитьКомпонентуИзРеестраWindowsПослеПопыткиПодключения(Подключено, Контекст) Экспорт
	
	Если Подключено Тогда 
		
		ИдентификаторСозданияОбъекта = Контекст.ИдентификаторСозданияОбъекта;
			
		Если ИдентификаторСозданияОбъекта = Неопределено Тогда 
			ИдентификаторСозданияОбъекта = Контекст.Идентификатор;
		КонецЕсли;
		
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + ИдентификаторСозданияОбъекта);
			Если ПодключаемыйМодуль = Неопределено Тогда 
				ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
			КонецЕсли;
		Исключение
			ПодключаемыйМодуль = Неопределено;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если ПодключаемыйМодуль = Неопределено Тогда 
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на клиенте
				           |из реестра Windows,
				           |по причине:
				           |%2'"),
				Контекст.Идентификатор,
				ТекстОшибки);
				
			ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
			
		Иначе 
			ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОПодключении(ПодключаемыйМодуль, Контекст);
		КонецЕсли;
		
	Иначе 
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на клиенте
			           |из реестра Windows
			           |по причине:
			           |Метод НачатьПодключениеВнешнейКомпоненты вернул Ложь.'"),
			Контекст.Идентификатор);
			
		ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпонентуИзРеестраWindows.
Процедура ПодключитьКомпонентуИзРеестраWindowsПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на клиенте
		           |из реестра Windows
		           |по причине:
		           |%2'"),
		Контекст.Идентификатор,
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
	ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаВнешнейКомпоненты

// Вызывается после подготовки длительной операцией
//
Процедура УстановитьКомпонентуПослеПодготовки(Результат, Контекст) Экспорт

	// Ответ: 
	// - Структура - Выполнено - результат в структуре.
	// - Неопределено - Отменено пользователем.
	Если Результат = Неопределено Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Контекст.АдресРезультатаПодготовкиКомпоненты); // Вызов сервера.
		Возврат;
	КонецЕсли;
	
	// В контексте АдресРезультата больше не нужен, теперь он актуализирован в Результат.АдресРезультата.
	Контекст.Удалить("АдресРезультатаПодготовкиКомпоненты");
	
	// Результат.Статус:
	// - "Ошибка" - описание в ОписаниеОшибки.
	// - "Выполнено" - результат в Результат.АдресРезультата.
	Если Результат.Статус = "Выполнено" Тогда
		
		Информация = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
	
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
		Доступна = ПроверитьДоступностьКомпоненты(Информация);
		
		Если Доступна Тогда 
			
			Контекст.Вставить("Местоположение", Информация.Местоположение);
			ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпоненту(Контекст);
			
		Иначе 
			
			ОповещениеФормы = Новый ОписаниеОповещения(
				"УстановитьКомпонентуПослеОтображенияДоступныхВидовКлиентов", ЭтотОбъект, Контекст);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстПояснения"       , Контекст.ТекстПояснения);
			ПараметрыФормы.Вставить("ПоддерживаемыеКлиенты", Информация);
			
			ОткрытьФорму("ОбщаяФорма.ДоступныеВидыКлиентовВнешнейКомпоненты", 
				ПараметрыФормы,,,,, ОповещениеФормы);
			
		КонецЕсли;
		
	Иначе 
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить внешнюю компоненту ""%1"" на клиенте 
			           |из хранилища внешних компонент
			           |по причине:
			           |%2'"),
			Контекст.Идентификатор,
			Результат.КраткоеПредставлениеОшибки);
		
		ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

//
Процедура УстановитьКомпонентуПослеОтображенияДоступныхВидовКлиентов(Результат, Контекст) Экспорт
	
	ТекстОшибки = "";
	ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпонентуОповеститьОбОшибке(ТекстОшибки, Контекст);
	
КонецПроцедуры

#КонецОбласти


// Параметры:
//  Информация - Структура - См. функцию.
//
Функция ПроверитьДоступностьКомпоненты(Информация)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Браузер = Неопределено;
	#Если ВебКлиент Тогда
		
		Строка = СистемнаяИнформация.ИнформацияПрограммыПросмотра;
		
		Если СтрНайти(Строка, "Chrome/") > 0 Тогда
			Браузер = "Chrome";
		ИначеЕсли СтрНайти(Строка, "MSIE") > 0 Тогда
			Браузер = "MSIE";
		ИначеЕсли СтрНайти(Строка, "Safari/") > 0 Тогда
			Браузер = "Safari";
		ИначеЕсли СтрНайти(Строка, "Firefox/") > 0 Тогда
			Браузер = "Firefox";
		КонецЕсли;
	#КонецЕсли
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Linux_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Linux_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Linux_x86_Chrome;
		КонецЕсли;
			
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Linux_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Linux_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Linux_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		
		Если Браузер = "Safari" Тогда
			Возврат Информация.MacOS_x86_64_Safari;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Windows_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Информация.Windows_x86_MSIE;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Windows_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Информация.Windows_x86_64_MSIE;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#Область ЗагрузкаВнешнейКомпоненты

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение    - ОписаниеОповещения   - .
//      * Идентификатор - Строка, Неопределено - .
//      * Версия        - Строка, Неопределено - .
//
Процедура ЗагрузитьКомпонентуИзФайла(Контекст) Экспорт 
	
	Если ВнешниеКомпонентыСлужебныйВызовСервера.ДоступнаЗагрузкаКомпонентыИзФайла() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии", Истина);
		ПараметрыФормы.Вставить("ВернутьРезультатЗагрузкиИзФайла"         , Истина);
		
		Если Контекст.Идентификатор <> Неопределено Тогда 
			Ссылка = ВнешниеКомпонентыСлужебныйВызовСервера.СсылкаПоИдентификатору(Контекст.Идентификатор, Контекст.Версия);
			Если Не Ссылка.Пустая() Тогда
				ПараметрыФормы.Вставить("Ключ", Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьКомпонентуИзФайлаПослеЗагрузки", ЭтотОбъект, Контекст);
		
		ОткрытьФорму("Справочник.ВнешниеКомпоненты.ФормаОбъекта", ПараметрыФормы,,,,, Оповещение);
		
	Иначе 
		
		ТекстОшибки = 
			НСтр("ru = 'Не удалось загрузить внешнюю компоненту в хранилище внешних компонент
			           |по причине:
			           |Требуются права администратора'");
		
		Результат = Новый Структура;
		Результат.Вставить("Загружено", Ложь);
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ЗагрузитьКомпонентуИзФайла.
Процедура ЗагрузитьКомпонентуИзФайлаПослеЗагрузки(Результат, Контекст) Экспорт
	
	// Результат: 
	// - Структура - Загружено.
	// - Неопределено - Закрыто окно. 
	
	Загружено = (ТипЗнч(Результат) = Тип("Структура"));
	
	Если Не Загружено Тогда 
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", "");
	КонецЕсли;
	
	Результат.Вставить("Загружено", Загружено);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВнешнейКомпоненты

// Параметры:
//  Ссылка - СправочникСсылка.ВнешниеКомпоненты - контейнер внешней компоненты в информационной базе.
//
Процедура СохранитьКомпонентуВФайл(Ссылка) Экспорт 
	
	Контекст =  Новый Структура;
	Контекст.Вставить("Ссылка", Ссылка);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьКомпонентуВФайлПослеПроверкиРасширенияРаботыСФайлами", 
		ЭтотОбъект, Контекст);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Продолжение процедуры СохранитьКомпонентуВФайл.
Процедура СохранитьКомпонентуВФайлПослеПроверкиРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	Местоположение = ПолучитьНавигационнуюСсылку(Контекст.Ссылка, "ХранилищеКомпоненты");
	ИмяФайла = ВнешниеКомпонентыСлужебныйВызовСервера.ИмяФайлаКомпоненты(Контекст.Ссылка);
	
	Если РасширениеПодключено Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения внешней компоненты'");
		Диалог.Фильтр    = НСтр("ru = 'Файлы внешних компонент (*.zip)|*.zip|Все файлы (*.*)|*.*'");
		Диалог.МножественныйВыбор = Ложь;
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, Местоположение));
		
		Оповещение = Новый ОписаниеОповещения("СохранитьКомпонентуВФайлПослеПолученияФайлов", ЭтотОбъект, Контекст);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, Диалог);
		
	Иначе 
		ПолучитьФайл(Местоположение, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СохранитьКомпонентуВФайл.
Процедура СохранитьКомпонентуВФайлПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы <> Неопределено 
		И ПолученныеФайлы.Количество() > 0 Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение в файл'"),,
			НСтр("ru = 'Внешняя компонента успешно сохранена в файл.'"), БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
