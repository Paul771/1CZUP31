#Область ПрограммныйИнтерфейс

// Открывает форму загрузки классификатора.
//
// Параметры:
//     Параметры - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//
Процедура ЗагрузитьАдресныйКлассификатор(Параметры = Неопределено) Экспорт
	
	ПараметрыОкна = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Источник", Ложь);
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОкна, Параметры);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из Параметры Цикл
			ПараметрыФормы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.АдресныйКлассификаторУстарел И Не ПараметрыФормы.Свойство("КодРегионаДляЗагрузки") Тогда
		ИмяФормы = "РегистрСведений.АдресныеОбъекты.Форма.АктуализацияУстаревшегоКлассификатора";
	Иначе
		ИмяФормы = "РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора";
	КонецЕсли;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,
		ПараметрыОкна.Источник,
		ПараметрыОкна.Уникальность,
		ПараметрыОкна.Окно,
		ПараметрыОкна.НавигационнаяСсылка);
	
КонецПроцедуры

// Открывает форму загрузки адресного классификатора.
//
// Параметры:
//  ОповещениеОЗакрытие - ОписаниеОповещения - оповещение, которое вызывается при закрытие формы загрузки адресного классификатора.
//  ПараметрыФормы - - Структура - параметры открытия формы:
//    * КодРегионаДляЗагрузки - Число, Массив - Если указан, то регион будет отмечен для загрузки.
//  ПараметрыОткрытия   - Структура - параметры открытия формы:
//    * Владелец            - Произвольный - Форма или элемент управления другой формы.
//    * Уникальность        - Произвольный - Ключ, значение которого будет использоваться для поиска уже открытых форм.
//    * Окно                - ОкноКлиентскогоПриложения, ВариантОткрытияОкна - Окно приложения, в котором будет открыта форма.
//    * НавигационнаяСсылка - Строка - Задает навигационную ссылку, возвращаемую формой.
//
Процедура ПоказатьФормуЗагрузкиАдресногоКлассификатора(ОповещениеОЗакрытие = Неопределено, ПараметрыФормы = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Владелец", Ложь);
	Если ПараметрыОткрытия <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ПараметрыОткрытия);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора", ПараметрыФормы,
		ПараметрыОткрытияФормы.Владелец, ПараметрыОткрытияФормы.Уникальность,
		ПараметрыОткрытияФормы.Окно, ПараметрыОткрытияФормы.НавигационнаяСсылка, ОповещениеОЗакрытие);
		
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПоказатьФормуЗагрузкиАдресногоКлассификатора.
// Проверяет наличие обновлений адресного классификатора на сайте
// для тех субъектов, которые ранее уже загружались.
//
// Параметры:
//     ПараметрыВыполнения - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//
Процедура ОткрытьФормуПроверкиОбновления(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПроверкаОбновления");
	ОткрытьФормуЗагрузкиАдресногоКлассификатора(ПараметрыФормы, ПараметрыВыполнения);
КонецПроцедуры

// Устарела. Следует использовать ПоказатьФормуЗагрузкиАдресногоКлассификатора.
// Проверяет наличие обновлений адресного классификатора на сайте 1С
//  для тех субъектов, которые ранее уже загружались.
//
// Параметры:
//  ПараметрыФормы - Структура - не используется, обратная совместимость.
//  ПараметрыВыполнения - ПараметрыВыполненияКоманды, Структура - параметры открытия формы.
//  ОповещениеОЗакрытие - ОписаниеОповещения - оповещение, которое вызывается при закрытие формы загрузки адресного классификатора.
//
Процедура ОткрытьФормуЗагрузкиАдресногоКлассификатора(ПараметрыФормы, ПараметрыВыполнения, ОповещениеОЗакрытие = Неопределено) Экспорт
	
	ПараметрыВыполненияФормы = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Источник", Ложь);
	Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура") Тогда
		ПараметрыВыполненияФормы = Новый Структура("Уникальность, Окно, НавигационнаяСсылка, Источник", Ложь);
		ЗаполнитьЗначенияСвойств(ПараметрыВыполненияФормы, ПараметрыВыполнения);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.АдресныеОбъекты.Форма.ЗагрузкаАдресногоКлассификатора", ПараметрыВыполнения,
		ПараметрыВыполненияФормы.Источник, ПараметрыВыполненияФормы.Уникальность,
		ПараметрыВыполненияФормы.Окно, ПараметрыВыполненияФормы.НавигационнаяСсылка, ОповещениеОЗакрытие);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АвторизоватьНаСайтеПоддержкиПользователей(ОповещениеОЗакрытии, ВладелецФормы) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ВладелецФормы);
	КонецЕсли;

КонецПроцедуры

// Вызывает диалог выбора каталога.
// 
// Параметры:
//     Форма - УправляемаяФорма - вызывающий объект.
//     ПутьКДанным          - Строка             - полное имя реквизита формы, содержащего текущее значение каталога.
//                                                 Например.
//                                                "РабочийКаталог" или "Объект.КаталогИзображений".
//     Заголовок            - Строка             - Заголовок для диалога.
//     СтандартнаяОбработка - Булево             - для использования в обработчике "ПриНачалаВыбора". Будет заполнено
//                                                 значением Ложь.
//     ОповещениеЗавершения - ОписаниеОповещения - вызывается после успешного помещения нового значения в реквизит.
//
Процедура ВыбратьКаталог(Знач Форма, Знач ПутьКДанным, Знач Заголовок = Неопределено, СтандартнаяОбработка = Ложь, ОповещениеЗавершения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыбратьКаталогЗавершениеКонтроляРасширенияРаботыСФайлами", ЭтотОбъект, Новый Структура);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("Форма",       Форма);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("ПутьКДанным", ПутьКДанным);
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("Заголовок",   Заголовок);
	
	ОповещениеПродолжения.ДополнительныеПараметры.Вставить("ОповещениеЗавершения",   ОповещениеЗавершения);
	
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеПродолжения, , Ложь);
КонецПроцедуры

// Завершение немодального выбора каталога.
//
Процедура ВыбратьКаталогЗавершениеКонтроляРасширенияРаботыСФайлами(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		// Отказ от установки расширения.
		Возврат;
	КонецЕсли;
	
	Форма       = ДополнительныеПараметры.Форма;
	ПутьКДанным = ДополнительныеПараметры.ПутьКДанным;
	Заголовок   = ДополнительныеПараметры.Заголовок;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Заголовок <> Неопределено Тогда
		Диалог.Заголовок = Заголовок;
	КонецЕсли;
	
	ТекущееЗначение  = Форма;
	ИмяРеквизита     = ПутьКДанным;
	
	ЧастиПути = СтрЗаменить(ПутьКДанным, ".", Символы.ПС);
	Для Позиция = 1 По СтрЧислоСтрок(ЧастиПути) Цикл
		ИмяРеквизита     = СтрПолучитьСтроку(ЧастиПути, Позиция);
		ТекущееЗначение  = ТекущееЗначение[ИмяРеквизита];
	КонецЦикла;
	
	Диалог.Каталог = ТекущееЗначение;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКаталогЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВыбратьКаталогЗавершениеОтображенияДиалогаВыбораФайла(Каталог, ДополнительныеПараметры) Экспорт
	
	Если Каталог <> Неопределено Тогда
		
		ДополнительныеПараметры.Форма[ДополнительныеПараметры.ПутьКДанным] = Каталог[0];
		
		Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Каталог[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка на доступность всех необходимых файлов для загрузки.
//
// Параметры:
//     КодыРегионов      - Массив    - содержит числовые значения - коды регионов-субъектов РФ (для последующей
//                                     загрузки).
//     Каталог           - Строка    - каталог с проверяемыми файлами.
//     ПараметрыЗагрузки - Структура - содержит поля.
//         * КодИсточникаЗагрузки - Строка - описывает набор анализируемых файлов. Возможные значения: "КАТАЛОГ",
//                                           "САЙТ", "ИТС".
//         * ПолеОшибки           - Строка - имя реквизита для привязки сообщений об ошибке.
//
// Возвращаемое значение: 
//     Структура - описание результата. Содержит поля.
//         * КодыРегионов    - Массив -       содержит числовые значения кодов регионов-субъектов для которых доступны
//                                      все файлы.
//         * ЕстьВсеФайлы    - Булево       - флаг того, что можно загружать все регионы.
//         * Ошибки          - Структура    - см. описание ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю.
//         * ФайлыПоРегионам - Соответствие - соответствие файлов регионам. Ключ может быть:
//                                          - числом (код региона), тогда значение - массив имен файлов, необходимых
//                                          для загрузки этого региона
//                                          - символом "*", тогда значение - массив имен файлов, необходимых для
//                                          загрузки всех регионов.
//
Процедура АнализДоступностиФайловКлассификатораВКаталоге(ОписаниеЗавершения, КодыРегионов, Каталог, ПараметрыЗагрузки) Экспорт
	
	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог);
	ПолеОшибки = ПараметрыЗагрузки.ПолеОшибки;
	
	Результат = Новый Структура;
	Результат.Вставить("КодыРегионов",    КодыРегионов);
	Результат.Вставить("ЕстьВсеФайлы",    Истина);
	Результат.Вставить("Ошибки",          Неопределено);
	Результат.Вставить("ФайлыПоРегионам", Новый Соответствие);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтсутствующиеФайлы", Новый Соответствие);
	ДополнительныеПараметры.Вставить("ОписаниеЗавершения", ОписаниеЗавершения);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("РабочийКаталог", РабочийКаталог);
	ДополнительныеПараметры.Вставить("ПолеОшибки", ПолеОшибки);
	ОписаниеОповещения = Новый ОписаниеОповещения("АнализДоступностиФайловКлассификатораВКаталогеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, 0);
	
КонецПроцедуры

Процедура АнализДоступностиФайловКлассификатораВКаталогеЗавершение(ИндексРегиона, ДополнительныеПараметры) Экспорт
	
	Если ИндексРегиона <= ДополнительныеПараметры.Результат.КодыРегионов.ВГраница() Тогда
		
		КодРегиона = ДополнительныеПараметры.Результат.КодыРегионов[ИндексРегиона];
		// Набор файлов для каждого региона.
		ДополнительныеПараметры.Результат.ФайлыПоРегионам[КодРегиона] = Новый Массив;
		
		ИмяФайла = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ".ZIP";
		ДополнительныеПараметры.Вставить("КодРегиона", КодРегиона);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		ДополнительныеПараметры.Вставить("ИндексРегиона", ИндексРегиона);
		ОписаниеОповещения = Новый ОписаниеОповещения("АнализДоступностиФайловКлассификатораВКаталогеПослеПоискаФайлов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПоискФайлов(ОписаниеОповещения, ДополнительныеПараметры.РабочийКаталог, МаскаФайла(ИмяФайла));
		
	Иначе // окончание цикла
		
		// Собираем все в один вызов
		Представления = АдресныйКлассификаторВызовСервера.ПредставлениеРегионаПоКоду(ДополнительныеПараметры.ОтсутствующиеФайлы);
		
		Для Каждого КлючЗначение Из Представления Цикл
			СообщениеОбОшибке = НСтр("ru = 'Для региона ""%1"" не найден файл данных ""%2""'") + Символы.ПС;
			СообщениеОбОшибке = СообщениеОбОшибке + НСтр("ru = 'Актуальные адресные сведения можно загрузить по адресу http://its.1c.ru/download/fias'");
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ДополнительныеПараметры.Результат.Ошибки, ДополнительныеПараметры.ПолеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, КлючЗначение.Значение, ДополнительныеПараметры.ОтсутствующиеФайлы[КлючЗначение.Ключ]), Неопределено);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеЗавершения, ДополнительныеПараметры.Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АнализДоступностиФайловКлассификатораВКаталогеПослеПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	СтруктураФайла = Новый Структура("Существует, Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение", Ложь);
	Если НайденныеФайлы.Количество() > 0 Тогда
		
		СтруктураФайла.Существует = Истина;
		ЗаполнитьЗначенияСвойств(СтруктураФайла, НайденныеФайлы[0]);
	КонецЕсли;
	
	Если СтруктураФайла.Существует Тогда
		ДополнительныеПараметры.Результат.ФайлыПоРегионам[ДополнительныеПараметры.КодРегиона].Добавить(СтруктураФайла.ПолноеИмя);
	Иначе
		ДополнительныеПараметры.Результат.ЕстьВсеФайлы = Ложь;
		ДополнительныеПараметры.ОтсутствующиеФайлы.Вставить(ДополнительныеПараметры.КодРегиона, ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;
	
	АнализДоступностиФайловКлассификатораВКаталогеЗавершение(ДополнительныеПараметры.ИндексРегиона + 1, ДополнительныеПараметры);
	
КонецПроцедуры

Функция МаскаФайла(ИмяФайла)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	НеУчитыватьРегистр = Платформа = ТипПлатформы.Windows_x86 Или Платформа = ТипПлатформы.Windows_x86_64;
	
	Если НеУчитыватьРегистр Тогда
		Маска = ВРег(ИмяФайла);
	Иначе
		Маска = "";
		Для Позиция = 1 По СтрДлина(ИмяФайла) Цикл
			Символ = Сред(ИмяФайла, Позиция, 1);
			ВерхнийРегистр = ВРег(Символ);
			НижнийРегистр  = НРег(Символ);
			Если ВерхнийРегистр = НижнийРегистр Тогда
				Маска = Маска + Символ;
			Иначе
				Маска = Маска + "[" + ВерхнийРегистр + НижнийРегистр + "]";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Маска;
	
КонецФункции

#КонецОбласти