////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму календаря пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь.
//
Процедура ПоказатьКалендарьПользователя(Пользователь) Экспорт
	
	ПараметрыФормы = Новый Структура("ВариантРаботыФормы, Пользователь",
		"КалендарьПользователя", Пользователь);
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.Календарь", ПараметрыФормы);
	
КонецПроцедуры

// Обрабатывает удаление элемента планировщика.
//
// Параметры:
//  Планировщик	 - Планировщик	 - планировщик.
//  Отказ		 - Булево		 - отказ.
//
Процедура ОбработкаПередУдалениемЭлемента(Планировщик, Отказ) Экспорт
	
	Отказ = Истина;
	
	ПометкаУдаления = Ложь;
	События = ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления, Ложь);
	ПовторяющиесяСобытия = ПолучитьПовторяющиесяСобытияВВыделеннойОбласти(Планировщик);
	Если События.Количество() = 0 И ПовторяющиесяСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкиУдаления(События, ПовторяющиесяСобытия, Не ПометкаУдаления);
	
КонецПроцедуры

// Обрабатывает начало редактирования элемента планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - планировщик.
//  НовыйЭлемент			 - Булево						 - признак создания нового элемента.
//  СтандартнаяОбработка	 - Булево						 - стандартная обработка.
//  ПользовательКалендаря	 - СправочникСсылка.Пользователи - пользователь, для календаря которого выполняется обработка.
//
Процедура ОбработкаПередНачаломРедактированиемЭлемента(Планировщик, НовыйЭлемент,
	СтандартнаяОбработка, ПользовательКалендаря) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если НовыйЭлемент Тогда
		ОбработкаНачалаСозданияЭлемента(Планировщик, ПользовательКалендаря);
		Возврат;
	КонецЕсли;
	
	ПоказатьЭлементПланировщика(Планировщик);
	
КонецПроцедуры

// Обрабатывает окончание редактирования элемента планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - планировщик.
//  НовыйЭлемент			 - Булево						 - признак создания нового элемента.
//  ОтменаРедактирования	 - Булево						 - отмена редактирования.
//  ДанныеФормыПланировщик	 - Планировщик					 - планировщик.
//  НастройкиОтображения	 - Структура 					 - настройки отображения календаря.
//  УникальныйИдентификатор	 - УникальныйИдентификатор		 - уникальный идентификатор элемента.
//  ПользовательКалендаря	 - СправочникСсылка.Пользователи - пользователь, для календаря которого выполняется обработка.
//
Процедура ОбработкаОкончанияРедактированияЭлемента(Планировщик, НовыйЭлемент, ОтменаРедактирования,
	ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор, ПользовательКалендаря) Экспорт
	
	Если НастройкиОтображения.ЗапретИзменения Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если НовыйЭлемент Тогда
			
			// Запрет массового копирования
			Если Планировщик.ВыделенныеЭлементы.Количество() <> 1 Тогда
				ОтменаРедактирования = Истина;
				Возврат;
			КонецЕсли;
			
			ОбработкаСозданиеЭлемента(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, ПользовательКалендаря);
			
		Иначе
			ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор);
		КонецЕсли;
		
	Исключение
		ОтменаРедактирования = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обрабатывает изменение цвета элемента планировщика.
//
// Параметры:
//  Планировщик	 - Планировщик						 - планировщик.
//  Цвет		 - ПеречислениеСсылка.ЦветаРабочегоКалендаря - новый цвет.
//
Процедура ОбработкаИзмененияЦвета(Планировщик, Цвет) Экспорт
	
	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененнаяЗаписьКалендаря = ВыделенныйЭлемент.Значение;
		ИзмененнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
		ИзмененнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	УстановитьЦветЗаписейКалендаря(ИзмененныеЗаписиКалендаря, Цвет, Истина);
	
КонецПроцедуры

// Обрабатывает создание элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  СтандартнаяОбработка - Булево		 - стандартная обработка.
//
Процедура ОбработкаПриАктивизации(Планировщик, СтандартнаяОбработка) Экспорт
	
	КонтекстноеМеню =
		Планировщик.КонтекстноеМеню.ПодчиненныеЭлементы["ПланировщикКонтекстноеМенюКомандыЭлемента"];
	ЕстьВыделенныеЭлементы = Планировщик.ВыделенныеЭлементы.Количество() <> 0;
	ЕстьТекущаяЗапись = Ложь;
	Для Каждого Элемент Из Планировщик.ВыделенныеЭлементы Цикл
		Если Элемент.Значение.ЭтоТекущаяЗапись Тогда
			ЕстьТекущаяЗапись = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ДоступностьКонтекстногоМеню = ЕстьВыделенныеЭлементы И Не ЕстьТекущаяЗапись;
	
	УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, ДоступностьКонтекстногоМеню);
	
КонецПроцедуры

// Обрабатывает создание элемента планировщика.
//
// Параметры:
//  Планировщик							 - Планировщик		 - планировщик.
//  Начало								 - Дата				 - дата начала нового элемента.
//  Конец								 - Дата				 - дата окончания нового элемента.
//  Значения							 - Массив			 - значения измерений нового элемента.
//  Текст								 - Строка			 - текст нового элемента.
//  СтандартнаяОбработка				 - Булево			 - стандартная обработка.
//  ИспользоватьБыстроеРедактирование	 - Булево			 - признак использования быстрого редактирования элемента.
//  ПользовательКалендаря				 - СправочникСсылка.Пользователи - пользователь, для календаря которого выполняется обработка.
//  НастройкиОтображения				 - Структура 					 - настройки отображения календаря.
//  УникальныйИдентификатор				 - УникальныйИдентификатор		 - идентификатор формы-владельца.
//
Процедура ОбработкаПередСозданием(Планировщик, Начало, Конец, Значения, Текст, СтандартнаяОбработка,
	ИспользоватьБыстроеРедактирование,
	ПользовательКалендаря,
	НастройкиОтображения,
	УникальныйИдентификатор) Экспорт
	
	Если ИспользоватьБыстроеРедактирование Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкиОтображения.ЗапретСоздания Тогда
		// Если выделили время, отличное от одной ячейки времени.
		Если (Конец - Начало) <> (НастройкиОтображения.РазмерЯчейкиВремени * 60) Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДляПользователя = Значения.Получить("Пользователь");
	Если ДляПользователя = Неопределено Тогда
		ДляПользователя = ПользовательКалендаря;
	КонецЕсли;
	
	ВесьДень = Ложь;
	Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		Если Начало <> Конец Тогда
			Конец = Конец - 1;
		КонецЕсли;
		ВесьДень = Истина;
	КонецЕсли;
	
	СоздатьЗаписьКалендаря(, Начало, Конец, ВесьДень, Текст, ДляПользователя);
	
КонецПроцедуры

// Обрабатывает выбора элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  СтандартнаяОбработка - Булево		 - стандартная обработка.
//
Процедура ОбработкаВыбораЭлемента(Планировщик, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЭлементПланировщика(Планировщик);
	
КонецПроцедуры

// Обрабатывает начало быстрого редактирования элемента планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  СтандартнаяОбработка - Булево		 - стандартная обработка.
//
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Планировщик, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обновляет отображение планировщика.
//
// Параметры:
//  Планировщик			 - Планировщик	 - планировщик.
//  НастройкиОтображения - Структура	 - настройки отображения планировщика.
//  ИзмененнаяНастройка	 - Строка		 - имя измененной настройки.
//
Процедура ОбновитьОтображениеПланировщика(Планировщик, НастройкиОтображения,
	ИзмененнаяНастройка = Неопределено) Экспорт
	
	Планировщик.ИнтервалыФона.Очистить();
	
	// Данные планировщика.
	ДанныеПланировщика = РаботаСРабочимКалендаремВызовСервера.ПолучитьДанныеПланировщика(
		НастройкиОтображения, ИзмененнаяНастройка);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика, Истина);
	
	// Настройки отображения.
	РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Обновляет элемент календаря в планировщике.
//
// Параметры:
//  Планировщик			 - Планировщик							 - планировщик.
//  НастройкиОтображения - Структура							 - настройки отображения планировщика.
//  Параметр			 - Массив, СправочникСсылка.ЗаписиРабочегоКалендаря	 - записи календаря, которые необходимо обновить.
//
Процедура ОбновитьЗаписиКалендаряВПланировщике(Планировщик, НастройкиОтображения, Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Массив") Тогда
		ЗаписиКалендаря = Параметр;
	Иначе
		ЗаписиКалендаря = Новый Массив;
		ЗаписиКалендаря.Добавить(Параметр);
	КонецЕсли;
	
	// Данные планировщика.
	УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря);
	ДанныеПланировщика = РаботаСРабочимКалендаремВызовСервера.ОбновитьДанныеПланировщика(НастройкиОтображения, ЗаписиКалендаря);
	ОбновитьДанныеПланировщика(
		Планировщик, НастройкиОтображения, ДанныеПланировщика);
	
	// Настройки отображения.
	РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(
		Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Открывает форму занятости пользователей.
//
// Параметры:
//  ОписаниеОповещения	 - ОписаниеОповещения	 - описание оповещения, которое будет вып
//  Пользователи		 - Массив				 - пользователи, для которых будет открыта форма занятости.
//  ДатаНачала			 - Дата					 - дата начала выбора занятости.
//  ДатаОкончания		 - Дата					 - дата окончания выбора занятости.
//  ИсключенияЗанятости	 - Массив				 - исключения занятости.
//
Процедура ОткрытьФормуЗанятостиПользователей(ОписаниеОповещения,
	Пользователи, ДатаНачала, ДатаОкончания, ИсключенияЗанятости) Экспорт
	
	НастройкаВыбораЗанятости =
		Новый Структура("Пользователи, ДатаНачала, ДатаОкончания, ИсключенияЗанятости");
	НастройкаВыбораЗанятости.Пользователи = Пользователи;
	НастройкаВыбораЗанятости.ДатаНачала = ДатаНачала;
	НастройкаВыбораЗанятости.ДатаОкончания = ДатаОкончания;
	НастройкаВыбораЗанятости.ИсключенияЗанятости = ИсключенияЗанятости;
	
	ПараметрыФормы = Новый Структура("НастройкаВыбораЗанятости");
	ПараметрыФормы.НастройкаВыбораЗанятости = НастройкаВыбораЗанятости;
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ЗанятостьПользователей",
		ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

// Открывать список записей календаря по предмету.
//
// Параметры:
//  Предмет						 - СправочникСсылка	 - предмет.
//  ПараметрыВыполненияКоманды	 - Структура		 - параметры выполнения команды.
//
Процедура ОткрытьСписокЗаписейКалендаряПоПредмету(Предмет,
	ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Отбор = Новый Структура("Предмет", Предмет);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	Если ПараметрыВыполненияКоманды <> Неопределено Тогда
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаСписка", ПараметрыФормы,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно);
	Иначе
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаСписка", ПараметрыФормы, , Предмет,);
	КонецЕсли;
	
КонецПроцедуры

// Создает событие календаря с заполнением предмета, даты начала, даты окончания по необходимости.
//
// Параметры:
//  Предмет			 - СправочникСсылка			 - предмет.
//  ДатаНачала		 - Дата						 - дата начала.
//  ДатаОкончания	 - Дата						 - дата окончания.
//  ВесьДень		 - Булево					 - признак длительность на весь день.
//  Описание		 - Строка					 - описание записи календаря.
//  Пользователь	 - СправочникСсылка.Пользователи - Пользователь записи календаря.
//
Процедура СоздатьЗаписьКалендаря(Предмет = Неопределено, ДатаНачала = Неопределено,
	ДатаОкончания = Неопределено, ВесьДень = Неопределено,
	Описание = Неопределено, Пользователь = Неопределено) Экспорт
	
	СтруктураОснование = Новый Структура;
	Если Предмет <> Неопределено Тогда
		СтруктураОснование.Вставить("Предмет", Предмет);
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		СтруктураОснование.Вставить("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	Если ВесьДень <> Неопределено Тогда
		СтруктураОснование.Вставить("ВесьДень", Предмет);
	КонецЕсли;
	Если Описание <> Неопределено Тогда
		СтруктураОснование.Вставить("Описание", Описание);
	КонецЕсли;
	Если Пользователь <> Неопределено Тогда
		СтруктураОснование.Вставить("Пользователь", Пользователь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы);
	
КонецПроцедуры

// Создает занятость с заполнением даты начала и даты окончания.
//
// Параметры:
//  ДатаНачала		 - Дата	 - дата начала.
//  ДатаОкончания	 - Дата	 - дата окончания.
//  ВесьДень		 - Булево	 - признак длительность на весь день.
//
Процедура СоздатьЗанятость(ДатаНачала = Неопределено,
	ДатаОкончания = Неопределено, ВесьДень = Ложь) Экспорт
	
	Если ВесьДень Тогда
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ДатаНачала);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = НачалоДня(ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("ДатаНачала, ДатаОкончания");
	СтруктураОснование.ДатаНачала = ДатаНачала;
	СтруктураОснование.ДатаОкончания = ДатаОкончания;
	
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФорму("РегистрСведений.ЗанятостьПользователя.Форма.ВводЗанятости", ПараметрыФормы);
	
КонецПроцедуры

// Обрабатывает выбор исключения повторения.
//
// Параметры:
//  ПовторяющеесяСобытие - СправочникСсылка.ЗаписиРабочегоКалендаря	 - повторяющееся событие.
//  ДатаИсключения		 - Дата										 - дата элемента повторяющегося события.
//
Процедура ОбработкаВыбораПовторяющегосяСобытия(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
	ПараметрыОбработчика.Вставить("ДатаИсключения", ДатаИсключения);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ОбработкаВыбораПовторяющегосяСобытияЗавершение",
			ЭтотОбъект, ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Это повторяющееся событие.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ИзменитьОдно", НСтр("ru = 'Изменить одно событие'"));
	Кнопки.Добавить("ИзменитьВсе", НСтр("ru = 'Изменить все'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "ИзменитьОдно");
	
КонецПроцедуры

// Создает элемент повторяющегося событие на конкретную дату.
//
// Параметры:
//  ПовторяющеесяСобытие - СправочникСсылка.ЗаписиРабочегоКалендаря	 - повторяющееся событие.
//  ДатаИсключения		 - Дата										 - дата элемента повторяющегося события.
//
Процедура СоздатьИсключениеПовторения(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	СтруктураОснование.ДатаИсключения = ДатаИсключения;
	
	ПараметрыФормы = Новый Структура("Основание, ПовторяющеесяСобытие, ДатаИсключения");
	ПараметрыФормы.Основание = СтруктураОснование;
	ПараметрыФормы.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	ПараметрыФормы.ДатаИсключения = ДатаИсключения;
	
	Уникальность = Строка(ПовторяющеесяСобытие.УникальныйИдентификатор()) + Строка(ДатаИсключения);
	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);
	
КонецПроцедуры

// Копирует существующее событие.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - копируемая запись календаря.
//
Процедура СкопироватьЗаписьКалендаря(ЗаписьКалендаря) Экспорт
	
	Параметры = Новый Структура("Основание", ЗаписьКалендаря);
	ОткрытьФормуЗаписиКалендаря(Параметры);
	
КонецПроцедуры

// Устанавливает цвет, которым отображается события в календаре пользователя и посылает уведомление.
//
// Параметры:
//  ЗаписиКалендаря					 - Массив		 - записи рабочего календаря.
//  Цвет							 - ПеречислениеСсылка.ЦветаРабочегоКалендаря - цвет.
//  СоздаватьИсключенияПовторения	 - Булево									 - признак того что для повторяющегося события будет цвет установлен для одного элемента.
//
Процедура УстановитьЦветЗаписейКалендаря(ЗаписиКалендаря,
	Цвет, СоздаватьИсключенияПовторения = Ложь) Экспорт
	
	МассивЗаписей = ПреобразоватьЗначениеВМассив(ЗаписиКалендаря);
	Если МассивЗаписей.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось изменить цвет, т.к. не выбраны записи календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СсылкиИзмененныхЗаписейКалендаря = РаботаСРабочимКалендаремВызовСервера.УстановитьЦветЗаписейКалендаря(
		МассивЗаписей, Цвет, СоздаватьИсключенияПовторения);
	
	Оповестить("Запись_ЗаписьКалендаря", СсылкиИзмененныхЗаписейКалендаря);
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
// Параметры:
//  Запись			 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря, для которой устанавливается пометка..
//  ПометкаУдаления	 - Булево									 - новая пометка удаления.
//
Процедура УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Запись", Запись);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение",
			ЭтотОбъект, ПараметрыОбработчика);
	
	Если ПометкаУдаления Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), Запись);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), Запись);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
//
// Параметры:
//  Записи				 - Массив	 - записи рабочего календаря, для которых устанавливается пометка
//  ПовторяющиесяСобытия - Массив	 - повторяющиеся записи рабочего календаря, для которых устанавливается пометка
//  ПометкаУдаления		 - Булево	 - новая пометка удаления.
//  ОбработанныеВопросы	 - Структура - обработанные вопросы.
//
Процедура УстановитьПометкиУдаления(Записи, ПовторяющиесяСобытия,
	ПометкаУдаления, ОбработанныеВопросы = Неопределено) Экспорт
	
	Если ТипЗнч(Записи) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
	ЕстьПовторяющиесяСобытия = (ПовторяющиесяСобытия.Количество() > 0);
	
	Если Записи.Количество() = 1 И Не ЕстьПовторяющиесяСобытия Тогда
		УстановитьПометкуУдаления(Записи[0], ПометкаУдаления);
		Возврат;
	ИначеЕсли Записи.Количество() = 0 И Не ЕстьПовторяющиесяСобытия Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбработанныеВопросы.Свойство("ИзмененаПометкаУдаления") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Записи", Записи);
		ПараметрыОбработчика.Вставить("ПовторяющиесяСобытия", ПовторяющиесяСобытия);
		ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	УстановленаПометкаУдаления = РаботаСРабочимКалендаремВызовСервера.УстановитьПометкиУдаления(
		Записи, ПовторяющиесяСобытия, ПометкаУдаления);
	
	СсылкиИзмененныхЗаписейКалендаря = Новый Массив;
	Для Каждого Запись Из Записи Цикл
		СсылкиИзмененныхЗаписейКалендаря.Добавить(Запись);
	КонецЦикла;
	Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытия Цикл
		СсылкиИзмененныхЗаписейКалендаря.Добавить(ПовторяющеесяСобытие.ЗаписьКалендаря);
	КонецЦикла;
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", СсылкиИзмененныхЗаписейКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает элемент календаря, содержащихся в выделенной области.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
// 
// Возвращаемое значение:
//  Массив - выделенные элементы.
//
Функция ВыделенныеЭлементы(Планировщик) Экспорт
	
	ВыделенныеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		ВыделенныеЭлементы.Добавить(ЗначениеЭлемента);
		
	КонецЦикла;
	
	Возврат ВыделенныеЭлементы;
	
КонецФункции

// Получает выделенные в плане дня элементы.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня.
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//  ВыбиратьДни - Булево - если выбраны только дни, то выбирать выделенные элементы этих дней.
//
// Возвращаемое значение:
//  Массив - выделенные элементы.
//
Функция ВыделенныеЭлементыПланДня(ЭлементПланДня, ПланДня, ВыбиратьДни = Ложь) Экспорт
	
	ВыделенныеЭлементы = Новый Массив;
	
	Для Каждого Элемент Из ЭлементПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементЗаписиКалендаря =
			РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ДанныеСтроки);
		ВыделенныеЭлементы.Добавить(ЭлементЗаписиКалендаря);
		
	КонецЦикла;
	
	Если ВыбиратьДни И ВыделенныеЭлементы.Количество() = 0 Тогда
		
		ВыделенныеДни = ВыделенныеДниПланДня(ЭлементПланДня, ПланДня);
		Для Каждого ВыделенныйДень Из ВыделенныеДни Цикл
			
			ЭлементыПланаДня = ПланДня.ПолучитьЭлементы();
			Для Каждого ЭлементПланаДня Из ЭлементыПланаДня Цикл
				
				Если ЭлементПланаДня.ДатаДень <> ВыделенныйДень Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементыВДне = ЭлементПланаДня.ПолучитьЭлементы();
				Для Каждого ЭлементВДне Из ЭлементыВДне Цикл
					
					ЭлементЗаписиКалендаря =
						РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЭлементВДне);
					ВыделенныеЭлементы.Добавить(ЭлементЗаписиКалендаря);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВыделенныеЭлементы;
	
КонецФункции

// Возвращает массив повторяющихся событий, содержащихся в выделенной области.
//
// Параметры:
//  Планировщик	 - Планировщик	 - планировщик.
// 
// Возвращаемое значение:
//  Массив - повторяющиеся события.
//
Функция ПолучитьПовторяющиесяСобытияВВыделеннойОбласти(Планировщик) Экспорт
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЭлемента.ВидЭлемента <>
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся") Тогда
			Продолжить;
		КонецЕсли;
		
		ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
		ПовторяющеесяСобытие.ЗаписьКалендаря = ЗначениеЭлемента.Ссылка;
		ПовторяющеесяСобытие.ДатаИсключения = ВыделенныйЭлемент.Начало;
		
		ДобавитьЗначениеВМассив(ПовторяющеесяСобытие, ПовторяющиесяСобытия);
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

// Открывает форму настройки повторения события.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись календаря.
// 
Процедура ОткрытьФормуНастройкиПовторения(ЗаписьКалендаря) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаписьКалендаря", ЗаписьКалендаря);
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.НастройкаПовторения", ПараметрыФормы);
	
КонецПроцедуры

// Устанавливает повторение события в соответствии с настройками.
//
// Параметры:
//  ЗаписьКалендаря		 - СправочникСсылка.ЗаписиРабочегоКалендаря	 - запись рабочего календаря.
//  НастройкиПовторения	 - Структура	 - настройки повторения.
//
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	РаботаСРабочимКалендаремВызовСервера.УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения);
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Оповестить("Запись_ЗаписьКалендаря", ЗаписьКалендаря);
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("ДокументСсылка.Бронь") Тогда
		Оповестить("Запись_Бронь", ЗаписьКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Формирует HTML представление события.
//
// Параметры:
//  Событие		 - СправочникСсылка	 - событие.
//  ДатаСобытия	 - Дата	 - дата события.
// 
// Возвращаемое значение:
//  Строка - HTML представление события.
//
Функция СформироватьHTMLПредставление(Событие, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Возврат РаботаСРабочимКалендаремВызовСервера.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	
КонецФункции

// Открывает форму настройку доступного времени.
//
Процедура ОткрытьФормуНастройкиДоступногоВремени() Экспорт
	
	ОткрытьФорму("РегистрСведений.ДоступноеВремяПользователя.Форма.НастройкаДоступногоВремени");
	
КонецПроцедуры

// Проверяет, заняты ли пользователи в указанное время.
//
// Параметры:
//  МассивПользователей			 - Массив	 - пользователи, для которых выполняется проверка.
//  ДатаНачала					 - Дата		 - дата начала проверки.
//  ДатаОкончания				 - Дата		 - дата окончания проверки.
//  ИспользоватьРабочийКалендарь - Булево	 - признак того что рабочий календарь используется.
//  ИсключенияЗанятости			 - Массив	 - исключения занятости.
//  ЗадаватьВопрос				 - Булево	 - признак того что следует задавать вопрос.
//  ОписаниеОповещения			 - ОписаниеОповещения	 - описание оповещения в случае вопроса.
// 
// Возвращаемое значение:
//  Булево - пользователи доступны.
//
Функция ПроверитьДоступностьПользователей(
	Знач МассивПользователей,
	ДатаНачала,
	ДатаОкончания,
	ИспользоватьРабочийКалендарь,
	ИсключенияЗанятости,
	ЗадаватьВопрос,
	ОписаниеОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьРабочийКалендарь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(МассивПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	ИначеЕсли ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания)
		Или МассивПользователей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДоступностьПользователей = РаботаСРабочимКалендаремВызовСервера.ПроверитьДоступностьПользователей(
		МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	
	Если Не ЗадаватьВопрос Тогда
		Возврат ДоступностьПользователей.ОбщаяЗанятость =
			ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Доступен");
	КонецЕсли;
	
	ПодписьЗанятыеПользователи = ПолучитьПодписьЗанятостиПользователей(
		ДоступностьПользователей.ПользователиОтсутствуют,
		ДоступностьПользователей.ПользователиПодВопросом,
		ДоступностьПользователей.ПользователиЗанятые);
	
	Если ДоступностьПользователей.ОбщаяЗанятость =
		ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Отсутствует") Тогда
		
		ТекстВопроса = НСтр("ru = 'В выбранное время отсутствуют некоторые пользователи. Продолжить?'")
			+ ПодписьЗанятыеПользователи;
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
			НСтр("ru = 'Проверка доступности'"));
		Возврат Ложь;
		
	ИначеЕсли ДоступностьПользователей.ОбщаяЗанятость =
		ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Занят") Тогда
		
		ТекстВопроса = НСтр("ru = 'Выбранное время является занятым. Продолжить?'")
			+ ПодписьЗанятыеПользователи;
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
			НСтр("ru = 'Проверка доступности'"));
		Возврат Ложь;
		
	ИначеЕсли ДоступностьПользователей.ОбщаяЗанятость =
		ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.ПодВопросом") Тогда
		
		ТекстВопроса = НСтр("ru = 'Доступность выбранного времени под вопросом. Продолжить?'")
			+ ПодписьЗанятыеПользователи;
		ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
			НСтр("ru = 'Проверка доступности'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, отсутствует ли пользователь при записи рабочего календаря.
//
// Параметры:
//	Форма 	- УправляемаяФорма - форма элемента записи рабочего календаря.
//	Отказ	- Булево - признак отказа от записи.
//	ИнформацияОбОтсутствии	 - Структура - со свойствами:
//		* ЕстьПредупреждения - Булево - признак наличия записей об отсутствии.
//		* Отсутствия - Массив - массив ссылок на регистраторы отсутствий.
//
// Возвращаемое значение:
//	Булево - признак того, что есть отсутствия.
//
Функция ПроверитьОтсутствиеПоЗаписиРабочегоКалендаря(Форма, Отказ, ИнформацияОбОтсутствии) Экспорт
	
	ЕстьОтсутствия = Ложь;
	РаботаСРабочимКалендаремКлиентПереопределяемый.ПриПроверкеОтсутствияПоЗаписиРабочегоКалендаря(Форма, Отказ, ИнформацияОбОтсутствии, ЕстьОтсутствия);
	
	Возврат ЕстьОтсутствия;
	
КонецФункции

// Показывает предупреждение об отсутствии для записи рабочего календаря.
//
// Параметры:
//	ИнформацияОбОтсутствии - Структура -информация об отсутствии.
//	ОписаниеОповещения - ОписаниеОповещения - описание оповещения для вызова показа вопроса.
//	Владелец - УправляемаяФорма - владелец формы предупреждения.
//
Процедура ПоказатьПредупреждениеОбОтсутствииПоЗаписиРабочегоКалендаря(
	ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец) Экспорт
	
	РаботаСРабочимКалендаремКлиентПереопределяемый.ПриПоказеПредупрежденияОбОтсутствииПоЗаписиРабочегоКалендаря(ИнформацияОбОтсутствии, ОписаниеОповещения, Владелец);
	
КонецПроцедуры

// Позволяет определить действия при начале выбора пользователя записи рабочего календаря.
//
// Параметры:
//	Элемент - ЭлементФормы - элемент, оповещаемый о выборе.
//	Пользователь - СправочникСсылка.Пользователи - ранее выбранное значение.
//	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ВыбратьПользователяЗаписиРабочегоКалендаря(Элемент, Пользователь, СтандартнаяОбработка) Экспорт
	
	РаботаСРабочимКалендаремКлиентПереопределяемый.ПриВыбореПользователяЗаписиРабочегоКалендаря(Элемент, Пользователь, СтандартнаяОбработка);
	
КонецПроцедуры

// Переносит элементы планировщика на указанную дату.
//
// Параметры:
//  Планировщик				 - ПолеФормы				 - поле планировщика.
//  ДанныеФормыПланировщик	 - Планировщик				 - планировщик.
//  НастройкиОтображения	 - Структура 				 - настройки отображения календаря.
//  Элементы 				 - Массив 					 - переносимые элементы планировщика.
//  ДатаПереноса			 - Дата						 - новая дата.
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - идентификатор формы-владельца.
//
Процедура ПеренестиЭлементыПланировщикаНаДату(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, Элементы, ДатаПереноса, УникальныйИдентификатор) Экспорт
	
	ИсключенияПовторения = Новый Массив;
	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		
		ИзмененнаяЗаписьКалендаря = Элемент.Значение;
		
		Если ИзмененнаяЗаписьКалендаря.ТипЗаписиКалендаря =
				ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			ИсключенияПовторения.Добавить(ИзмененнаяЗаписьКалендаря);
		КонецЕсли;
		
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	Результат = РаботаСРабочимКалендаремВызовСервера.ПеренестиЭлементыПланировщикаНаДату(ИзмененныеЗаписиКалендаря, ДатаПереноса, НастройкиОтображения);
	
	ОбработатьРезультатИзмененияЭлементовПланировщика(Результат, ИсключенияПовторения,
		ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор);
	
КонецПроцедуры

// Переносит элементы плана дня на указанную дату.
//
// Параметры:
//  ЭлементыЗаписейКалендаря	 - Массив	 - элементы записей календаря.
//  ДатаПереноса			 - Дата	 - новая дата.
//
Процедура ПеренестиЭлементыЗаписейКалендаряНаДату(ЭлементыЗаписейКалендаря, ДатаПереноса) Экспорт
	
	Результат = РаботаСРабочимКалендаремВызовСервера.ПеренестиЭлементыПланировщикаНаДату(ЭлементыЗаписейКалендаря, ДатаПереноса);
	
	Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
	
КонецПроцедуры

// Формирует данные выбора времени для полей ввода времени.
//
// Параметры:
//  ТекстВремя - Строка - строковое представление времени в формате "ХХ:ХХ", где Х - число или пробел.
//  ДанныеВыбора - СписокЗначений - список значений, который будет использоваться при обработке выбора.
//  Дата - Дата - дата, для которой формируются данные подбора. По умолчанию - без даты.
//  ИспользоватьТекущуюДату - Булево - при не заданной Дате позволяет использовать текущую дату.
//                                     Значение по умолчанию: Истина.
//
Процедура СформироватьДанныеВыбораВремени(ТекстВремя, ДанныеВыбора, Знач Дата = Неопределено,
	ИспользоватьТекущуюДату = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекстВремя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = Дата(1,1,1);
	КонецЕсли;
	
	Если ИспользоватьТекущуюДату И Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	// Определение количества введенных символов времени и введенного времени
	Если Сред(ТекстВремя, 5, 1) <> " " Тогда
		КоличествоСимволовДаты = 4;
	ИначеЕсли Сред(ТекстВремя, 4, 1) <> " " Тогда
		КоличествоСимволовДаты = 3;
	ИначеЕсли Сред(ТекстВремя, 2, 1) <> " " Тогда
		КоличествоСимволовДаты = 2;
	ИначеЕсли Сред(ТекстВремя, 1, 1) <> " " Тогда
		КоличествоСимволовДаты = 1;
	Иначе
		КоличествоСимволовДаты = 0;
	КонецЕсли;
	
	ВведенноеВремя = РаботаСРабочимКалендаремКлиентСервер.ПреобразоватьТекстКДате(Дата, ТекстВремя);
	Если ВведенноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных выбора
	ДанныеВыбора = Новый СписокЗначений;
	
	Если КоличествоСимволовДаты = 0 Тогда
		
		// Введено время 00:00. Включаем в данные выбора 00:00, 01:00, ... , 23:00.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 24);
		
	ИначеЕсли КоличествоСимволовДаты = 1 Тогда
		
		Если Час(ВведенноеВремя) = 20 Тогда
			// Введено время 20:00. Включаем в данные выбора 20:00, 21:00, 22:00, 23:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 4);
		Иначе
			// Введено время Х0:00. Включаем в данные выбора Х0:00, Х1:00, ... , Х9:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 10);
		КонецЕсли;
		
	ИначеЕсли КоличествоСимволовДаты = 2 Тогда
		
		// Введено время ХХ:00. Включаем в данные выбора ХХ:00, ХХ:10, ... , ХХ:50.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 600, 6);
		
	ИначеЕсли КоличествоСимволовДаты = 3 Тогда
		
		// Введено время ХХ:Х0. Включаем в данные выбора ХХ:Х0, ХХ:Х5.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 300, 2);
		
	ИначеЕсли КоличествоСимволовДаты = 4 Тогда 
		
		// Введено время ХХ:ХХ. Включаем в данные выбора ХХ:ХХ.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет доступность переданного массива времен.
//
// Параметры:
//  МассивВремен - Массив	 - времена, доступность которых изменяется.
//
Процедура ИзменитьДоступностьВремен(МассивВремен) Экспорт
	
	Состояние(НСтр("ru = 'Изменяется доступность времени. Пожалуйста подождите...'"));
	
	НоваяЗанятость = РаботаСРабочимКалендаремВызовСервера.ИзменитьДоступностьВремен(МассивВремен);
	
	Если НоваяЗанятость <> Неопределено Тогда
		
		Если НоваяЗанятость = ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Занят") Тогда
			ПредставлениеЗанятости = НСтр("ru = 'недоступное'");
		ИначеЕсли НоваяЗанятость =
			ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Доступен") Тогда
			ПредставлениеЗанятости = НСтр("ru = 'доступное'");
		КонецЕсли;
		
		Если МассивВремен.Количество() = 1 Тогда
			
			ДатаНачала = МассивВремен[0].ДатаНачала;
			ДатаОкончания = МассивВремен[0].ДатаОкончания;
			
			ПредставлениеВремяНачала = Формат(ДатаНачала, "ДФ=ЧЧ:мм");
			ПредставлениеВремяОкончания = Формат(ДатаОкончания, "ДФ=ЧЧ:мм");
			
			ТекстСостояние = 
				СтрШаблон(НСтр("ru = 'Время с %1 до %2 помечено как %3'"),
					ПредставлениеВремяНачала,
					ПредставлениеВремяОкончания,
					ПредставлениеЗанятости);
			
		Иначе
			
			ТекстСостояние = 
				СтрШаблон(НСтр("ru = 'Время помечено как %1'"), ПредставлениеЗанятости);
			
		КонецЕсли;
		
		Состояние(ТекстСостояние);
		
	Иначе
		
		Состояние(НСтр("ru = 'Не удалось установить занятость.'"));
		
	КонецЕсли;
	
	Оповестить("Запись_ДоступноеВремяПользователя");
	
КонецПроцедуры

// Выполняет печать карточек записей календаря.
//
// Параметры:
//  События - Массив - структуры записей календаря, которые необходимо распечатать.
//   * Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - ссылка на запись рабочего календаря.
//   * ДеньНачала - Дата - дата, к которой относится запись календаря.
//  ВладелецФормы - УправляемаяФорма - форма из которой производится печать.
//
Процедура Печать(События, ВладелецФормы) Экспорт
	
	Если События.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	МассивСсылокЗаписьКалендаря = Новый Массив;
	Для Каждого Событие Из События Цикл
		Если ТипЗнч(Событие.Ссылка) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
			Продолжить;
		КонецЕсли;
		МассивСсылокЗаписьКалендаря.Добавить(Событие.Ссылка);
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ЗаписиКалендаря", События);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.ЗаписиРабочегоКалендаря",
		"Карточка",
		МассивСсылокЗаписьКалендаря,
		ВладелецФормы,
		ПараметрыПечати);
	
КонецПроцедуры

// Обрабатывает изменение признака весь день у записи календаря.
// Если снимают признак - устанавливает длительность час с начала отображаемого времени в дне.
//
// Параметры:
//  Объект							 - ДанныеФормы	 - запись календаря.
//  НачальноеЗначениеДатаНачала		 - Дата			 - начальное значение даты начала.
//  НачальноеЗначениеДатаОкончания	 - Дата			 - начальное значение даты окончания.
//  ОтображатьВремяС				 - Число		 - настройка отображения времени в дне.
//
Процедура ПриИзмененииВесьДень(Объект,
	НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, ОтображатьВремяС) Экспорт
	
	Если Объект.ВесьДень Тогда
		РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
			Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
			НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, Ложь, Истина);
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ОтображатьВремяС * 3600;
	Объект.ДатаОкончания = Объект.ДатаНачала + 3600;
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
КонецПроцедуры

// Обрабатывает изменение цвета элемента плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы					 - элемент план дня.
//  ПланДня			 - ДанныеФормыКоллекция			 - план дня.
//  Цвет			 - ПеречислениеСсылка.ЦветаРабочегоКалендаря - новый цвет.
//
Процедура ОбработкаИзмененияЦветаПланДня(ЭлементПланДня, ПланДня, Цвет) Экспорт
	
	ЗаписиКалендаря = ВыделенныеЭлементыПланДня(ЭлементПланДня, ПланДня);
	УстановитьЦветЗаписейКалендаря(ЗаписиКалендаря, Цвет, Истина);
	
КонецПроцедуры

// Получает выделенное время в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент формы План дня.
// 
// Возвращаемое значение:
//  Структура - выделенное время в плане дня.
//
Функция ПолучитьВыделенноеВремя(ЭлементПланДня) Экспорт
	
	Время = Неопределено;
	
	ТекущиеДанные = ЭлементПланДня.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя();
		Время.ВесьДень = Ложь;
		Время.ДатаНачала = НачалоДня(ТекущиеДанные.ДатаДень)
			+ (РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ДатаСеанса) - НачалоДня(ДатаСеанса));
		Время.ДатаОкончания = Время.ДатаНачала + 3600;
		
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

// Выполняет создание записи календаря из плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы					 - элемент формы План дня.
//  НастройкиОтображения - Структура					 - настройки отображения.
//  Пользователь	 - СправочникСсылка.Пользователи - пользователь, в календаре которого будет создана запись.
//
Процедура СоздатьЗаписьКалендаряПланДня(ЭлементПланДня, НастройкиОтображения, Пользователь = Неопределено) Экспорт
	
	ТекущиеДанные = ЭлементПланДня.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СоздатьЗаписьКалендаря(, , , , , Пользователь);
	КонецЕсли;
	
	Если НачалоДня(ТекущиеДанные.ДатаДень) = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СоздатьЗаписьКалендаря(,,,,,Пользователь);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаНовойЗаписи = НачалоДня(ТекущиеДанные.ДатаДень) + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	СоздатьЗаписьКалендаря(, ДатаНачалаНовойЗаписи, ДатаОкончанияНовойЗаписи, Ложь, , Пользователь);
	
КонецПроцедуры

// Выполняет создание записи календаря из планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура					 - настройки отображения.
//  Пользователь		 - СправочникСсылка.Пользователи - пользователь, в календаре которого будет создана запись.
//
Процедура СоздатьЗаписьКалендаряПланировщик(НастройкиОтображения, Пользователь) Экспорт
	
	Если НастройкиОтображения.ОтображаемаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СоздатьЗаписьКалендаря(,,,,,Пользователь);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаНовойЗаписи = НастройкиОтображения.ОтображаемаяДата + НастройкиОтображения.ОтображатьВремяС * 3600;
	ДатаОкончанияНовойЗаписи = ДатаНачалаНовойЗаписи + 3600;
	СоздатьЗаписьКалендаря(, ДатаНачалаНовойЗаписи, ДатаОкончанияНовойЗаписи, Ложь, , Пользователь);
	
КонецПроцедуры

// Восстанавливает развернутые элементы плана дня.
//
// Параметры:
//  ЭлементПланДня		 - ТаблицаФормы													 - элемент плана дня.
//  ПланДня				 - ДанныеФормыКоллекция											 - данные плана дня.
//  СвернутыеЭлементы	 - Массив														 - развернутые элементы плана дня.
//  ТекущийЭлемент		 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - текущий элемент.
//  ТекущаяДата			 - Дата																	 - текущая дата элемента.
//
Процедура ВосстановитьСостояниеПланаДня(ЭлементПланДня, ПланДня, СвернутыеЭлементы, ТекущийЭлемент, ТекущаяДата) Экспорт
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		Свернут = Ложь;
		Для Каждого СвернутыйЭлемент Из СвернутыеЭлементы Цикл
			Если ЭлементДерева.ДатаДень = СвернутыйЭлемент Тогда
				ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
				Свернут = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Свернут Тогда
			ЭлементПланДня.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
		Иначе
			ЭлементПланДня.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ПланДня.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);
	
КонецПроцедуры

// Возвращает свернутые элементы плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент плана дня.
//  ПланДня			 - ДанныеФормыКоллекция	 - данные плана дня.
// 
// Возвращаемое значение:
//  Массив - развернутые элементы плана дня.
//
Функция ПолучитьСвернутыеЭлементыПланаДня(ЭлементПланДня, ПланДня) Экспорт
	
	СвернутыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		
		Если Не ЭлементПланДня.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
			СвернутыеЭлементы.Добавить(ЭлементДерева.ДатаДень);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СвернутыеЭлементы;
	
КонецФункции

// Обработка активизации области в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы														 - элемент плана дня.
//  ТекущийЭлемент	 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - текущий элемент.
//  ТекущаяДата		 - Дата																	 - текущая дата элемента.
//
Процедура ОбработкаАктивизацииОбластиПланДня(ЭлементПланДня, ТекущийЭлемент, ТекущаяДата) Экспорт
	
	НовыйТекущийЭлемент = ПолучитьТекущуюЗаписьКалендаря(ЭлементПланДня);
	НоваяТекущаяДата = ПолучитьТекущуюДатуПланДня(ЭлементПланДня);
	Если НовыйТекущийЭлемент <> ТекущийЭлемент
		Или НоваяТекущаяДата <> ТекущаяДата Тогда
		
		ТекущийЭлемент = НовыйТекущийЭлемент;
		ТекущаяДата = НоваяТекущаяДата;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора в плане дня.
//
// Параметры:
//  ЭлементПланДня		 - ТаблицаФормы	 - элемент плана дня.
//  ВыбраннаяСтрока		 - Число		 - идентификатор строки.
//  Поле				 - ПолеФормы	 - активное поле.
//  СтандартнаяОбработка - Булево		 - стандартная обработка.
//
Процедура ОбработкаВыбораПланДня(ЭлементПланДня, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		Если ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			ОбработкаВыбораПовторяющегосяСобытия(ДанныеСтроки.Ссылка, ДанныеСтроки.ДатаНачала);
		Иначе
			ПоказатьЗначение(, ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка перед началом добавления в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы				 - элемент плана дня.
//  Отказ			 - Булево					 - признак отказа от добавления объекта.
//  Копирование		 - Булево					 - определяет режим копирования.
//  Родитель		 - 							 - ссылка на элемент родителя.
//  Группа			 - 							 - признак добавления группы.
//  НастройкиОтображения - Структура					 - настройки отображения.
//  Пользователь	 - СправочникСсылка.Пользователи - пользователь, в календаре которого будет создана запись.
//
Процедура ОбработкаПередНачаломДобавленияПланДня(
	ЭлементПланДня, Отказ, Копирование, Родитель, Группа, НастройкиОтображения, Пользователь = Неопределено) Экспорт
	
	Отказ = Истина;
	
	Если НастройкиОтображения.ЗапретСоздания Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		СкопироватьЗаписьКалендаряПланДня(ЭлементПланДня);
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьКалендаряПланДня(ЭлементПланДня, НастройкиОтображения, Пользователь);
	
КонецПроцедуры

// Обработка перед началом изменения в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент плана дня.
//  Отказ			 - Булево		 - отказ.
//
Процедура ОбработкаПередНачаломИзмененияПланДня(ЭлементПланДня, Отказ) Экспорт
	
	Отказ = Истина;
	ОбработкаВыбораПланДня(ЭлементПланДня, ЭлементПланДня.ТекущаяСтрока, ЭлементПланДня.ТекущийЭлемент, Истина);
	
КонецПроцедуры

// Обработка перед удалением в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент плана дня.
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//  Отказ			 - Булево		 - отказ.
//
Процедура ОбработкаПередУдалениемПланДня(ЭлементПланДня, ПланДня, Отказ) Экспорт
	
	Отказ = Истина;
	УстановитьПометкуУдаленияПланДня(ЭлементПланДня, ПланДня);
	
КонецПроцедуры

// Обработка проверки перетаскивания в плане дня.
//
// Параметры:
//  ЭлементПланДня			 - ТаблицаФормы				 - элемент плана дня.
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - содержит системные параметры перетаскивания.
//  Выполнение				 - Булево					 - управляет выполнением перетаскивания.
//  НастройкиОтображения	- Структура					 - настройки отображения.
//
Процедура ОбработкаНачалаПеретаскиванияПланДня(ЭлементПланДня, ПараметрыПеретаскивания, Выполнение, НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ЗапретИзменения Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	ЗначениеПеретаскивания = Новый Массив;
	Для Каждого НомерСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(НомерСтроки);
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементЗаписиКалендаря =
			РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ДанныеСтроки);
		ЗначениеПеретаскивания.Добавить(ЭлементЗаписиКалендаря);
		
	КонецЦикла;
	
	Выполнение = ЗначениеПеретаскивания.Количество() <> 0;
	ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
	
КонецПроцедуры

// Обработка проверки перетаскивания в плане дня.
//
// Параметры:
//  ЭлементПланДня			 - ТаблицаФормы				 - элемент плана дня.
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - содержит системные параметры перетаскивания.
//  СтандартнаяОбработка	 - Булево					 - признак стандартной обработки события.
//  Строка					 - Число					 - содержит идентификатор строки над которой находится курсор.
//  Поле					 - ПолеФормы				 - поле, с которым связана данная колонка таблицы, над которой находится объект.
//  НастройкиОтображения - Структура					 - настройки отображения.
//
Процедура ОбработкаПроверкиПеретаскиванияПланДня(
	ЭлементПланДня, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ЗапретИзменения Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") 
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("Структура") 
		Или Не РаботаСРабочимКалендаремКлиентСервер.ЭтоЭлементЗаписиКалендаря(
			ПараметрыПеретаскивания.Значение[0]) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработка перетаскивания в плане дня.
//
// Параметры:
//  ЭлементПланДня			 - ТаблицаФормы				 - элемент плана дня.
//  ПараметрыПеретаскивания	 - ПараметрыПеретаскивания	 - содержит системные параметры перетаскивания.
//  СтандартнаяОбработка	 - Булево					 - признак стандартной обработки события.
//  Строка					 - Число					 - содержит идентификатор строки над которой находится курсор.
//  Поле					 - ПолеФормы				 - поле, с которым связана данная колонка таблицы, над которой находится объект.
//  НастройкиОтображения 	- Структура					 - настройки отображения.
//
Процедура ОбработкаПеретаскиванияПланДня(
	ЭлементПланДня, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, НастройкиОтображения) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НастройкиОтображения.ЗапретИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") 
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("Структура") 
		Или Не РаботаСРабочимКалендаремКлиентСервер.ЭтоЭлементЗаписиКалендаря(
			ПараметрыПеретаскивания.Значение[0]) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ЭлементПланДня.ДанныеСтроки(Строка);
	Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.ДатаДень) Тогда 
		Возврат;
	КонецЕсли;
	
	ПеренестиЭлементыЗаписейКалендаряНаДату(ПараметрыПеретаскивания.Значение, ДанныеСтроки.ДатаДень);
	
КонецПроцедуры

// Выполняет отработку выделенных записей календаря в планировщике.
//
// Параметры:
//  Планировщик	 - Планировщик	 - планировщик.
//
Процедура ОтработатьВыделенныеЗаписиКалендаря(Планировщик) Экспорт
	
	МассивЗаписей = Новый Массив;
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененнаяЗаписьКалендаря = ВыделенныйЭлемент.Значение;
		ИзмененнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
		ИзмененнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
		МассивЗаписей.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	Если МассивЗаписей.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отработать, т.к. не выбраны записи календаря.'"));
		Возврат;
	КонецЕсли;
	
	Результат =
		РаботаСРабочимКалендаремВызовСервера.ОтработатьВыделенныеЗаписиКалендаря(МассивЗаписей);
	
	Для Каждого Напоминание Из Результат.ОтключенныеНапоминания Цикл
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(Напоминание);
	КонецЦикла;
	
	Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
	
КонецПроцедуры

// Выполняет отработку выделенных записей календаря в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы					 - элемент план дня.
//  ПланДня			 - ДанныеФормыКоллекция			 - план дня.
//
Процедура ОтработатьВыделенныеЗаписиКалендаряПланДня(ЭлементПланДня, ПланДня) Экспорт
	
	ЗаписиКалендаря = ВыделенныеЭлементыПланДня(ЭлементПланДня, ПланДня);
	Если ЗаписиКалендаря.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отработать, т.к. не выбраны записи календаря.'"));
		Возврат;
	КонецЕсли;
	
	Результат =
		РаботаСРабочимКалендаремВызовСервера.ОтработатьВыделенныеЗаписиКалендаря(ЗаписиКалендаря);
	
	Для Каждого Напоминание Из Результат.ОтключенныеНапоминания Цикл
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(Напоминание);
	КонецЦикла;
	
	Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
	
КонецПроцедуры

// Показывает запись календаря в отдельной форме.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - запись календаря.
//  ПользовательКалендаря - СправочникСсылка.Пользователи - пользователь календаря.
//  ПредметЗаписи - ЛюбаяСсылка - ссылка на объект, который может быть предметом записи календаря.
//
Процедура ПоказатьЗаписьКалендаря(ЗаписьКалендаря, ПользовательКалендаря = Неопределено, ПредметЗаписи = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредметЗаписи) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаписьКалендаря);
		Уникальность = ЗаписьКалендаря.УникальныйИдентификатор();
		
		Если ЗначениеЗаполнено(ПользовательКалендаря) Тогда
			ПараметрыФормы.Вставить("ПользовательКалендаря", ПользовательКалендаря);
		КонецЕсли;
		
		ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);
		
	Иначе
		РаботаСРабочимКалендаремКлиентПереопределяемый.ПриПоказеЗаписиРабочегоКалендаря(ЗаписьКалендаря, ПользовательКалендаря, ПредметЗаписи)
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму записи календаря.
//
// Параметры:
//  Параметры	 - Структура	 - параметры формы.
//  Уникальность - Произвольный	 - уникальность формы.
//
Процедура ОткрытьФормуЗаписиКалендаря(Параметры, Уникальность = Неопределено) Экспорт
	
	Если Уникальность = Неопределено Тогда
		Уникальность = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ЗаписиРабочегоКалендаря.ФормаОбъекта",
		Параметры,,
		Уникальность,
		ВариантОткрытияОкна.ОтдельноеОкно,,,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Автообновление

// Открывает модальную форму настройки автообновления формы. При завершении диалога
// возвращает выбранные параметры автообновления.
//
// Параметры:
// Форма - уникальный идентификатор открытой формы.
//
Функция УстановитьПараметрыАвтообновленияФормы(
	Форма, НастройкиАвтообновления, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоОбновление", НастройкиАвтообновления.АвтоОбновление);
	ПараметрыФормы.Вставить("ПериодАвтоОбновления", НастройкиАвтообновления.ПериодАвтоОбновления);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФормы", Форма.ИмяФормы);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияПослеЗакрытияФормыНастройкиАвтообновления = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.НастройкаАвтообновления",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещенияПослеЗакрытияФормыНастройкиАвтообновления,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецФункции

Процедура УстановитьПараметрыАвтообновленияФормыЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияФормы(ПараметрыОповещения.ИмяФормы, Результат);
	КонецЕсли;
	
	Если ПараметрыОповещения.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив записей календаря, содержащихся в выделенной области.
//
Функция ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина)
	
	ВыделенныеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВключаяПовторяющиеся
			И ЗначениеЭлемента.ВидЭлемента =
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся") Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗначениеВМассив(ЗначениеЭлемента.Ссылка, ВыделенныеЭлементы);
		ПометкаУдаления = ПометкаУдаления Или ЗначениеЭлемента.ПометкаУдаления;
		
	КонецЦикла;
	
	Возврат ВыделенныеЭлементы;
	
КонецФункции

// Копирует текущую запись календаря в плане дня.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня.
//
Процедура СкопироватьЗаписьКалендаряПланДня(ЭлементПланДня)
	
	ЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря(ЭлементПланДня);
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СкопироватьЗаписьКалендаря(ЗаписьКалендаря);
	
КонецПроцедуры

// Устанавливает пометку удаления выделенных элементов в плане дня.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня.
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//
Процедура УстановитьПометкуУдаленияПланДня(ЭлементПланДня, ПланДня)
	
	ПометкаУдаления = Ложь;
	События = ПолучитьВыделенныеСобытияПланДня(ЭлементПланДня, ПланДня, ПометкаУдаления);
	ПовторяющиесяСобытия = ПолучитьВыделенныеПовторяющиесяСобытияПланДня(ЭлементПланДня, ПланДня);
	
	УстановитьПометкиУдаления(События, ПовторяющиесяСобытия, Не ПометкаУдаления);
	
КонецПроцедуры

// Возвращает текущую дату начала в плане дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент плана дня.
// 
// Возвращаемое значение:
//  Дата - текущая дата начала.
//
Функция ПолучитьТекущуюДатуПланДня(ЭлементПланДня)
	
	ДатаНачала = Дата(1,1,1);
	
	ТекущиеДанные = ЭлементПланДня.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат ДатаНачала;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ДатаНачала = НачалоДня(ТекущиеДанные.ДатаДень);
	Иначе
		ДатаНачала = НачалоДня(ТекущиеДанные.ДатаНачала);
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

// Возвращает текущую запись календаря из плана дня.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	 - элемент формы План дня.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЗаписиРабочегоКалендаря - текущая запись календаря в плане дня.
//
Функция ПолучитьТекущуюЗаписьКалендаря(ЭлементПланДня)
	
	ЗаписьКалендаря = Неопределено;
	
	ТекущиеДанные = ЭлементПланДня.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда
		ЗаписьКалендаря = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Возврат ЗаписьКалендаря;
	
КонецФункции

// Восстанавливает текущий элемент в дереве.
//
// Параметры:
//  ЭлементПланДня	 - ТаблицаФормы	  - элемент плана дня.
//  ЭлементыДерева	 - ДанныеФормыКоллекцияЭлементовДерева	  - данные плана дня.
//  ТекущийЭлемент	 - СправочникСсылка.ЗаписиРабочегоКалендаря, ДокументСсылка.Отсутствие	 - текущий элемент.
//  ТекущаяДата		 - Дата	  - текущая дата элемента.
//
Процедура ВосстановитьТекущийЭлементДерева(ЭлементПланДня, ЭлементыДерева, ТекущийЭлемент, ТекущаяДата)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Ссылка = ТекущийЭлемент И Не ЗначениеЗаполнено(ТекущаяДата) Тогда
			ТекущаяДата = ЭлементДерева.ДатаНачала;
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		Если ЭлементДерева.Ссылка = ТекущийЭлемент И НачалоДня(ЭлементДерева.ДатаНачала) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		Если ТекущийЭлемент = Неопределено
			И ЭлементДерева.ЭтоГруппа
			И НачалоДня(ЭлементДерева.ДатаДень) = ТекущаяДата Тогда
			ЭлементПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		ВосстановитьТекущийЭлементДерева(
			ЭлементПланДня, ЭлементДерева.ПолучитьЭлементы(), ТекущийЭлемент, ТекущаяДата);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает выделенные события в плане дня.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня.
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//  ПометкаУдаления - Булево - возвращаемое значение. Есть помеченные на удаление события.
//
// Возвращаемое значение:
//  Тип - текстовое описание содержания возвращаемого значения функции.
//
Функция ПолучитьВыделенныеСобытияПланДня(ЭлементПланДня, ПланДня, ПометкаУдаления)
	
	События = Новый Массив;
	
	Для Каждого Элемент Из ЭлементПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			Продолжить;
		КонецЕсли;
		
		События.Добавить(ДанныеСтроки.Ссылка);
		ПометкаУдаления = ПометкаУдаления Или ДанныеСтроки.ПометкаУдаления;
		
	КонецЦикла;
	
	Возврат События;
	
КонецФункции

// Получает выделенные повторяющиеся события в плане дня.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня.
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//
// Возвращаемое значение:
//  Массив - выделенные повторяющиеся события в плане дня.
//
Функция ПолучитьВыделенныеПовторяющиесяСобытияПланДня(ЭлементПланДня, ПланДня)
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для Каждого Элемент Из ЭлементПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипЗаписиКалендаря <> ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			Продолжить;
		КонецЕсли;
		
		ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
		ПовторяющеесяСобытие.ЗаписьКалендаря = ДанныеСтроки.Ссылка;
		ПовторяющеесяСобытие.ДатаИсключения = НачалоДня(ДанныеСтроки.ДатаНачала);
		
		ПовторяющиесяСобытия.Добавить(ПовторяющеесяСобытие);
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

// Получает выделенные в плане дня дни.
//
// Параметры:
//  ЭлементПланДня - ТаблицаФормы - элемент плана дня..
//  ПланДня - ДанныеФормыКоллекция - данные плана дня.
//
// Возвращаемое значение:
//  Массив - выделенные дни.
//
Функция ВыделенныеДниПланДня(ЭлементПланДня, ПланДня)
	
	ВыделенныеДни = Новый Массив;
	
	Для Каждого Элемент Из ЭлементПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если Не ДанныеСтроки.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ВыделенныеДни.Добавить(ДанныеСтроки.ДатаДень);
		
	КонецЦикла;
	
	Возврат ВыделенныеДни;
	
КонецФункции

// Обрабатывает редактирование элементов планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик				 - планировщик.
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - уникальный идентификатор элемента.
//
Процедура ОбработкаОкончанияРедактирования(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор)
	
	ИсключенияПовторения = Новый Массив;
	ИзмененныеЗаписиКалендаря = Новый Массив;
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ИзмененнаяЗаписьКалендаря = ВыделенныйЭлемент.Значение;
		
		Если ИзмененнаяЗаписьКалендаря.ЭтоТекущаяЗапись Тогда
			ПараметрОповещения = Новый Структура("ДатаНачала, ДатаОкончания");
			ПараметрОповещения.Вставить("ДатаНачала", ВыделенныйЭлемент.Начало);
			ПараметрОповещения.Вставить("ДатаОкончания", ВыделенныйЭлемент.Конец);
			Оповестить("ИзменениеДатыТекущейЗаписи", ПараметрОповещения, УникальныйИдентификатор);
			Продолжить;
		КонецЕсли;
		
		// Корректировка времени при перетаскивании в месяце.
		Если НастройкиОтображения.ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
			
			СмещениеНачала = ИзмененнаяЗаписьКалендаря.ДатаНачала - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаНачала);
			Если СмещениеНачала <> 0 Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало) + СмещениеНачала;
			КонецЕсли;
			
			СмещениеКонца = ИзмененнаяЗаписьКалендаря.ДатаОкончания - НачалоДня(ИзмененнаяЗаписьКалендаря.ДатаОкончания);
			Если СмещениеКонца <> 0 Тогда
				ВыделенныйЭлемент.Конец = НачалоДня(ВыделенныйЭлемент.Конец - 1) + СмещениеКонца;
			КонецЕсли;
			
		ИначеЕсли ИзмененнаяЗаписьКалендаря.ВесьДень Тогда
			Длительность = ВыделенныйЭлемент.Конец - ВыделенныйЭлемент.Начало;
			СмещениеНачала = ВыделенныйЭлемент.Начало - НачалоДня(ВыделенныйЭлемент.Начало);
			СмещениеКонца = КонецДня(ВыделенныйЭлемент.Конец) - ВыделенныйЭлемент.Конец;
			Если СмещениеНачала <= СмещениеКонца Тогда
				ВыделенныйЭлемент.Начало = НачалоДня(ВыделенныйЭлемент.Начало);
				ВыделенныйЭлемент.Конец = ВыделенныйЭлемент.Начало + Длительность;
			Иначе
				ВыделенныйЭлемент.Конец = КонецДня(ВыделенныйЭлемент.Конец);
				ВыделенныйЭлемент.Начало = ВыделенныйЭлемент.Конец - Длительность;
			КонецЕсли;
		КонецЕсли;
		ИзмененнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
		ИзмененнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
		
		Если ИзмененнаяЗаписьКалендаря.ТипЗаписиКалендаря =
			ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			ИсключенияПовторения.Добавить(ИзмененнаяЗаписьКалендаря);
		КонецЕсли;
		
		ИзмененныеЗаписиКалендаря.Добавить(ИзмененнаяЗаписьКалендаря);
		
	КонецЦикла;
	
	Если ИзмененныеЗаписиКалендаря.Количество() > 0 Тогда
		Результат = РаботаСРабочимКалендаремВызовСервера.СохранитьЗаписиКалендаря(
			ИзмененныеЗаписиКалендаря,
			НастройкиОтображения);
		ОбработатьРезультатИзмененияЭлементовПланировщика(
			Результат,
			ИсключенияПовторения,
			ДанныеФормыПланировщик,
			НастройкиОтображения,
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает начало создания элемента планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - планировщик.
//  ПользовательКалендаря	 - СправочникСсылка.Пользователи - пользователь, для календаря которого выполняется обработка.
//
Процедура ОбработкаНачалаСозданияЭлемента(Планировщик, ПользовательКалендаря)
	
	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ДляПользователя = ВыделенныйЭлемент.ЗначенияИзмерений.Получить("Пользователь");
	Если ДляПользователя = Неопределено Тогда
		ДляПользователя = ПользовательКалендаря;
	КонецЕсли;
	
	СоздатьЗаписьКалендаря(
		,
		ВыделенныйЭлемент.Начало,
		ВыделенныйЭлемент.Конец,
		Ложь,
		ВыделенныйЭлемент.Текст,
		ДляПользователя);
	
КонецПроцедуры

// Обрабатывает создание элементов планировщика.
//
// Параметры:
//  Планировщик				 - Планировщик					 - планировщик.
//  ПользовательКалендаря	 - СправочникСсылка.Пользователи - пользователь, для календаря которого выполняется обработка.
//
Процедура ОбработкаСозданиеЭлемента(Планировщик, ДанныеФормыПланировщик, НастройкиОтображения, ПользовательКалендаря)
	
	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ДляПользователя = ВыделенныйЭлемент.ЗначенияИзмерений.Получить("Пользователь");
	Если ДляПользователя = Неопределено Тогда
		ДляПользователя = ПользовательКалендаря;
	КонецЕсли;
	СозданнаяЗаписьКалендаря = Новый Структура("ДатаНачала, ДатаОкончания, Описание, Цвет, Пользователь");
	СозданнаяЗаписьКалендаря.ДатаНачала = ВыделенныйЭлемент.Начало;
	СозданнаяЗаписьКалендаря.ДатаОкончания = ВыделенныйЭлемент.Конец;
	СозданнаяЗаписьКалендаря.Описание = ВыделенныйЭлемент.Текст;
	СозданнаяЗаписьКалендаря.Цвет = ВыделенныйЭлемент.ЦветФона;
	СозданнаяЗаписьКалендаря.Пользователь = ДляПользователя;
	
	ЗначениеКопирования = Неопределено;
	Если ВыделенныйЭлемент.Значение <> Неопределено Тогда
		Если ТипЗнч(ВыделенныйЭлемент.Значение.Ссылка) =
			Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
			ЗначениеКопирования = ВыделенныйЭлемент.Значение.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Результат = РаботаСРабочимКалендаремВызовСервера.СоздатьЗаписьКалендаря(
		СозданнаяЗаписьКалендаря, ЗначениеКопирования, НастройкиОтображения);
	
	Если Результат.Напоминание <> Неопределено Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Результат.Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот",
			Результат.Напоминание, Результат.Напоминание.Источник);
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
	КонецЕсли;
	
	ВыделенныйЭлемент.Загрузить(Результат.НовыйЭлемент);
	
	ОбновитьДанныеПланировщика(ДанныеФормыПланировщик, НастройкиОтображения, Результат.ДанныеПланировщика);
	
КонецПроцедуры

// Удаляет записи календаря из планировщика.
//
// Параметры:
//  Планировщик		 - Планировщик	 - планировщик.
//  ЗаписиКалендаря	 - Массив		 - записи календаря.
//
Процедура УдалитьЗаписиКалендаряИзПланировщика(Планировщик, ЗаписиКалендаря)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Инд = 1 По КоличествоЭлементов Цикл
		Элемент = Планировщик.Элементы[КоличествоЭлементов - Инд];
		Если ЗаписиКалендаря.Найти(Элемент.Значение.Ссылка) <> Неопределено Тогда 
			Планировщик.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразует переданное значение в массив, если необходимо.
//
// Параметры:
//  Значение - СправочникСсылка	 - значение.
// 
// Возвращаемое значение:
//  Массив - массив.
//
Функция ПреобразоватьЗначениеВМассив(Значение)
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Массив = Новый Массив;
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Массив;
	КонецЕсли;
	
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

// Обновляет элемент календаря в планировщике.
//
// Параметры:
//  Планировщик						 - Планировщик	 - планировщик.
//  СтруктураЭлемента				 - Структура	 - структура элемента планировщика.
//  ОтображатьПомеченныеНаУдаление	 - Булево		 - отображение помеченных на удаление элементов.
//
Процедура ДобавитьЗаписьКалендаряВПланировщик(Планировщик, СтруктураЭлемента,
	ОтображатьПомеченныеНаУдаление)
	
	Если Не ОтображатьПомеченныеНаУдаление И СтруктураЭлемента.Значение.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементПланировщика = Планировщик.Элементы.Добавить(
		СтруктураЭлемента.Начало, СтруктураЭлемента.Конец);
	
	ТекущийЭлементПланировщика.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

// Добавляет интервал фона в планировщик.
//
// Параметры:
//  Планировщик						 - Планировщик	 - планировщик.
//  СтруктураЭлемента				 - Структура	 - структура элемента планировщика.
//
Процедура ДобавитьИнтервалФонаВПланировщик(Планировщик, СтруктураИнтервалаФона)
	
	ТекущийИнтервалФона = Планировщик.ИнтервалыФона.Добавить(
		СтруктураИнтервалаФона.Начало, СтруктураИнтервалаФона.Конец);
	ТекущийИнтервалФона.Цвет = СтруктураИнтервалаФона.Цвет;
	
КонецПроцедуры

// Обрабатывает выбор исключения повторения.
//
Процедура ОбработкаВыбораПовторяющегосяСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИзменитьОдно" Тогда 
		СоздатьИсключениеПовторения(
			ДополнительныеПараметры.ПовторяющеесяСобытие,
			ДополнительныеПараметры.ДатаИсключения);
	ИначеЕсли Результат = "ИзменитьВсе" Тогда 
		ПоказатьЗаписьКалендаря(ДополнительныеПараметры.ПовторяющеесяСобытие);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
//
Процедура УстановитьПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановленаПометкаУдаления = РаботаСРабочимКалендаремВызовСервера.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Запись,
		ДополнительныеПараметры.ПометкаУдаления);
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", ДополнительныеПараметры.Запись);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
//
Процедура УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления(Результат,
	ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("ИзмененаПометкаУдаления", Истина);
	
	УстановитьПометкиУдаления(
		ДополнительныеПараметры.Записи,
		ДополнительныеПараметры.ПовторяющиесяСобытия,
		ДополнительныеПараметры.ПометкаУдаления,
		ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

// Добавляет значение в массив, если данного значения нет в массиве.
//
// Параметры:
//  Значение - СправочникеСсылка - значение.
//  Массив	 - Массив			 - массив, в который будет добавлено значение.
//
Процедура ДобавитьЗначениеВМассив(Значение, Массив)
	
	Если ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ЗаписьКалендаря")
		И Значение.Свойство("ДатаИсключения") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.ЗаписьКалендаря = Значение.ЗаписьКалендаря
				И ЭлементМассива.ДатаИсключения = Значение.ДатаИсключения Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка")
		И Значение.Свойство("ДеньНачала") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.Ссылка = Значение.Ссылка
				И ЭлементМассива.ДеньНачала = Значение.ДеньНачала Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	Иначе
		
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Включает в список значений время с указанной периодичностью указанное количество раз.
//
// Параметры:
//  Время - Дата - время, с которого следует начать добавление в список.
//  ДанныеВыбора - СписокЗначений - список, в который следует добавить время.
//  Период - Число - период в секундах.
//  КоличествоПериодов - Число - количество времен, которое следует добавить.
//
// Пример:
//  ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 24)
//
Процедура ДобавитьВДанныеВыбораВремя(Знач Время, ДанныеВыбора, Период = 0, КоличествоПериодов = 1)
	
	Для НомерПериода = 1 По КоличествоПериодов Цикл
		ДанныеВыбора.Добавить(Время, Формат(Время, "ДФ=ЧЧ:мм; ДП=00:00"));
		Время = Время + Период;
	КонецЦикла;
	
КонецПроцедуры

// Формирует подпись пользователей под вопросом и занятых пользователей.
//
// Параметры:
//  ПользователиОтсутствуют	 - Массив	 - отсутствующие пользователи.
//  ПользователиПодВопросом	 - Массив	 - пользователи, занятость которых под вопросом.
//  ПользователиЗанятые		 - Массив	 - занятые пользователи.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление занятых пользователей.
//
Функция ПолучитьПодписьЗанятостиПользователей(
		ПользователиОтсутствуют, ПользователиПодВопросом, ПользователиЗанятые)
	
	КоличествоПользователейОтсутствуют = ПользователиОтсутствуют.Количество();
	КоличествоПользователейПодВопросом = ПользователиПодВопросом.Количество();
	КоличествоПользователейЗанятых = ПользователиЗанятые.Количество();
	ВсегоПользователейПодписи =
		КоличествоПользователейОтсутствуют
		+ КоличествоПользователейПодВопросом
		+ КоличествоПользователейЗанятых;
	Если ВсегоПользователейПодписи = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПодписьЗанятостиПользователей = Символы.ПС;
	
	Если КоличествоПользователейПодВопросом <> 0 Тогда
		ПодписьПользователейПодВопросом = СтрШаблон(НСтр("ru = 'Под вопросом: %1.'"),
			ПолучитьПодписьПользователей(ПользователиПодВопросом));
		ПодписьЗанятостиПользователей =
			ПодписьЗанятостиПользователей + Символы.ПС + ПодписьПользователейПодВопросом;
	КонецЕсли;
	
	Если КоличествоПользователейЗанятых <> 0 Тогда
		ПодписьПользователейЗанятых = СтрШаблон(НСтр("ru = 'Заняты: %1.'"),
			ПолучитьПодписьПользователей(ПользователиЗанятые));
		ПодписьЗанятостиПользователей =
			ПодписьЗанятостиПользователей + Символы.ПС + ПодписьПользователейЗанятых;
	КонецЕсли;
	
	Если КоличествоПользователейОтсутствуют <> 0 Тогда
		ПодписьПользователейОтсутствуют = СтрШаблон(НСтр("ru = 'Отсутствуют: %1.'"),
			ПолучитьПодписьПользователей(ПользователиОтсутствуют));
		ПодписьЗанятостиПользователей =
			ПодписьЗанятостиПользователей + Символы.ПС + ПодписьПользователейОтсутствуют;
	КонецЕсли;
	
	Возврат ПодписьЗанятостиПользователей;
	
КонецФункции

// Формирует подпись пользователей, ограниченную по количеству пользователей.
//
// Параметры:
//  ПользователиПодписи - Массив - пользователи, из которых формируется подпись.
//
// Возвращаемое значение:
//  Строка - текстовое представление пользователей.
//
Функция ПолучитьПодписьПользователей(ПользователиПодписи)
	
	КоличествоПользователей = ПользователиПодписи.Количество();
	Если КоличествоПользователей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МаксимальноеКоличествоОтображаемыхПользователей = 5;
	КоличествоОтображаемыхПользователейПриПревышении = 3;
	
	Если КоличествоПользователей > МаксимальноеКоличествоОтображаемыхПользователей Тогда
		КоличествоОтображаемыхПользователей = КоличествоОтображаемыхПользователейПриПревышении;
	Иначе
		КоличествоОтображаемыхПользователей = КоличествоПользователей;
	КонецЕсли;
	
	ПодписьПользователей = "";
	МассивПользователей  = Новый Массив;
	Для Индекс = 0 По КоличествоОтображаемыхПользователей - 1 Цикл
		Пользователь = ПользователиПодписи[Индекс];
		МассивПользователей.Добавить(Пользователь);
	КонецЦикла;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		ИнтеграцияС1СДокументооборотКлиентСервер.ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьПользователей, ", ", Пользователь);
	КонецЦикла;
	
	Если КоличествоПользователей > МаксимальноеКоличествоОтображаемыхПользователей Тогда
		
		НадписьПользователей = ПодписьКЧислу(
			КоличествоПользователей,
			НСтр("ru = 'пользователи'"),
			НСтр("ru = 'пользователя'"),
			НСтр("ru = 'пользователей'"));
		
		ПодписьПользователей = ПодписьПользователей
			+ " "
			+ СтрШаблон(НСтр("ru = 'и другие (всего %1 %2)'"),
				Формат(КоличествоПользователей, "ЧГ=0"),
				НадписьПользователей);
		
	КонецЕсли;
	
	Возврат ПодписьПользователей;
	
КонецФункции

// Возвращает подпись к числу предметов с учетом склонений русского языка.
//
// Параметры:
//  Число		 - Число - число предметов.
//  Предмет		 - Строка	 - форма слова вида "Предмет".
//  Предмета	 - Строка	 - форма слова вида "Предмета".
//  Предметов	 - Строка	 - форма слова вида "Предметов".
// 
// Возвращаемое значение:
//  Строка - форма слова, соответствующая числу.
//
Функция ПодписьКЧислу(Число, Предмет, Предмета, Предметов)
	
	ЧислоПоМодулю100 = Число % 100;
	ЧислоПоМодулю10 = Число % 10;
	Если ЧислоПоМодулю10 = 1 Тогда
		Если ЧислоПоМодулю100 = 11 Тогда
			Возврат Предметов;
		Иначе
			Возврат Предмет;
		КонецЕсли;
	ИначеЕсли ЧислоПоМодулю10 = 2 Или ЧислоПоМодулю10 = 3 Или ЧислоПоМодулю10 = 4 Тогда
		Если ЧислоПоМодулю100 = 12 Или ЧислоПоМодулю100 = 13 Или ЧислоПоМодулю100 = 14 Тогда
			Возврат Предметов;
		Иначе
			Возврат Предмета;
		КонецЕсли;
	Иначе
		Возврат Предметов;
	КонецЕсли;
	
КонецФункции

// Устанавливает доступность элементов контекстного меню.
//
// Параметры:
//  КонтекстноеМеню	 - ГруппаФормы	 - контекстное меню.
//  Доступность		 - Булево		 - новая доступность контекстного меню.
//
Процедура УстановитьДоступностьКонтекстногоМеню(КонтекстноеМеню, Доступность)
	
	Для Каждого ЭлементМеню Из КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
			УстановитьДоступностьКонтекстногоМеню(ЭлементМеню, Доступность)
		ИначеЕсли ТипЗнч(ЭлементМеню) = Тип("КнопкаФормы") Тогда
			ЭлементМеню.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновить данные в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - планировщик.
//  НастройкиОтображения - Структура - настройки отображения.
//  ДанныеПланировщика - Структура - данные планировщика.
//  ОчиститьЭлементы - Булево - признак необходимости очистить элементы перед обновлением.
//
Процедура ОбновитьДанныеПланировщика(Планировщик, НастройкиОтображения, ДанныеПланировщика, ОчиститьЭлементы = Ложь)
	
	Если ОчиститьЭлементы Тогда
		Планировщик.Элементы.Очистить();
	КонецЕсли;
	
	Для Каждого СтруктураЭлемента Из ДанныеПланировщика.Элементы Цикл
		ДобавитьЗаписьКалендаряВПланировщик(
			Планировщик,
			СтруктураЭлемента,
			НастройкиОтображения.ОтображатьПомеченныеНаУдаление);
	КонецЦикла;
	
	Если НастройкиОтображения.ОтображатьЗанятость И НастройкиОтображения.ОтображатьСобытия Тогда
		Планировщик.ИнтервалыФона.Очистить();
		Для Каждого СтруктураИнтервалаФона Из ДанныеПланировщика.ИнтервалыФона Цикл
			ДобавитьИнтервалФонаВПланировщик(
				Планировщик,
				СтруктураИнтервалаФона);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат изменения элементов планировщика.
//
Процедура ОбработатьРезультатИзмененияЭлементовПланировщика(Результат, ИсключенияПовторения, 
	ДанныеФормыПланировщик, НастройкиОтображения, УникальныйИдентификатор)
	
	Для Каждого НовоеИсключениеПовторения Из Результат.НовыеИсключенияПовторения Цикл
		
		Для Каждого ИсключениеПовторения Из ИсключенияПовторения Цикл
			
			Если ИсключениеПовторения.Ссылка = НовоеИсключениеПовторения.СтараяСсылка
				И ИсключениеПовторения.ДатаНачалаИсходная = НовоеИсключениеПовторения.ДатаНачалаИсходная Тогда
				
				ИсключениеПовторения.Ссылка = НовоеИсключениеПовторения.НоваяСсылка;
				ИсключениеПовторения.ВидЭлемента =
					ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие");
				ИсключениеПовторения.ТипЗаписиКалендаря =
					ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия");
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Результат.ОбновитьПринудительно Тогда
		Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря);
	Иначе
		ОбновитьДанныеПланировщика(ДанныеФормыПланировщик, НастройкиОтображения, Результат.ДанныеПланировщика);
		РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(
			ДанныеФормыПланировщик, НастройкиОтображения);
		Оповестить("Запись_ЗаписьКалендаря", Результат.СсылкиИзмененныхЗаписейКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает показа элемента планировщика.
//
// Параметры:
//  Планировщик	- Планировщик- планировщик.
//
Процедура ПоказатьЭлементПланировщика(Планировщик)
	
	ВыделенныйЭлемент = Планировщик.ВыделенныеЭлементы[0];
	ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
	
	Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЭлемента.ВидЭлемента =
		ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие") Тогда
		ПоказатьЗаписьКалендаря(ЗначениеЭлемента.Ссылка, ЗначениеЭлемента.Пользователь, ЗначениеЭлемента.Предмет);
	ИначеЕсли ЗначениеЭлемента.ВидЭлемента =
		ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся") Тогда
		ОбработкаВыбораПовторяющегосяСобытия(ЗначениеЭлемента.Ссылка, ВыделенныйЭлемент.Начало);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти