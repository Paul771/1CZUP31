
#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу с данными перерасчета на основании данных "первичных" начислений.
// Процедура предполагает стандартные структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются как сторнируемые начисления, так и записи зависимых 
// начислений ("отменяющие" сторно-записи и новые записи).
// Параметры предназначены для передачи сведений о документе, для которого формируются перерасчеты
// 		ПериодРегистрации.
//		Начисления - коллекция уже сформированных начислений.
//		НачисленияПерерасчет - таблица с перерасчетами, которая заполняется в процедуре
//		ДокументСсылка.
//
Процедура СформироватьДанныеПерерасчета(Организация, ПериодРегистрации, Начисления, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам = Неопределено, Объект = Неопределено) Экспорт
	// Удаляем из перерасчетов строки перерассчитываемых сотрудников
	УдалитьСтрокиСоответствующиеОтборуПоСотрудникам(НачисленияПерерасчет, ОтборПоСотрудникам);
	
	// Вычислим, требуется ли дополнять набор начислений строками по совместителям и подработкам
	// Получим виды расчета...
	ВидыРасчетов = Новый Массив;
	Если НЕ ОписаниеДокумента.ВидНачисленияВШапке  Тогда
		УникальныеВидыРасчетов = Новый Соответствие;
		Для Каждого СтрокаНачисления Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
				Продолжить;
			КонецЕсли;
			УникальныеВидыРасчетов[СтрокаНачисления.Начисление] = НеОпределено;
		КонецЦикла;
		Для Каждого ЭлементСоответствия Из УникальныеВидыРасчетов Цикл
			ВидыРасчетов.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
	Иначе
		ВидыРасчетов.Добавить(Объект[ОписаниеДокумента.ВидНачисленияИмя]);
	КонецЕсли;
	// ...узнаем их свойства...
	СвойстваНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетов, "ДублироватьДляВнутреннихСовместителейИПодработок, ДублироватьДляПодработок");
	ТребуетсяДополнениеСовместителями = Ложь;
	ТребуетсяДополнениеПодработками = Ложь;
	// ...вычислим ТребуетсяДополнениеСовместителями и ТребуетсяДополнениеПодработками
	Для Каждого СвойстваНачисления Из СвойстваНачислений Цикл
		ТребуетсяДополнениеСовместителями = ТребуетсяДополнениеСовместителями Или СвойстваНачисления.Значение.ДублироватьДляВнутреннихСовместителейИПодработок;
		ТребуетсяДополнениеПодработками = ТребуетсяДополнениеПодработками Или СвойстваНачисления.Значение.ДублироватьДляПодработок Или СвойстваНачисления.Значение.ДублироватьДляВнутреннихСовместителейИПодработок;
	КонецЦикла;
	
	// Если требуется дополнить набор совместителями и подработками - дополним и запомним добавленные строки.
	ДобавленныеНачисления = Новый Массив;
	Если (ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И ТребуетсяДополнениеПодработками) Или 
		ТребуетсяДополнениеСовместителями Тогда
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		// Для получения уникальных сотрудников
		УникальныеСотрудники = Новый Соответствие;
		Для Каждого СтрокаНачисления Из Начисления Цикл
			УникальныеСотрудники[СтрокаНачисления.Сотрудник] = НеОпределено;
		КонецЦикла;
		// Массив сотрудников для получения ссылок на физических лиц
		Сотрудники = Новый Массив;
		Для Каждого ЭлементСоответствия Из УникальныеСотрудники Цикл
			Сотрудники.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		
		Для Каждого СтрокаНачисления Из Начисления Цикл
			НоваяСтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, СтрокаНачисления);
			НоваяСтрокаНабора.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрокаНабора.Организация = Организация;
			НоваяСтрокаНабора.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачисления.Сотрудник];
			НоваяСтрокаНабора.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрокаНабора.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
		КонецЦикла;
		ДобавленныеЗаписи = Новый Массив;
		РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(НаборЗаписей, ДобавленныеЗаписи);
		Для Каждого ДобавленнаяЗапись Из ДобавленныеЗаписи Цикл
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавленнаяЗапись);
			НоваяСтрока.Начисление = ДобавленнаяЗапись.ВидРасчета;
			НоваяСтрока.ДатаНачала = ДобавленнаяЗапись.ПериодДействияНачало;
			НоваяСтрока.ДатаОкончания = ДобавленнаяЗапись.ПериодДействияКонец;
			ДобавленныеНачисления.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	// Сформируем список начислений опираясь на которые будем получать необходимые сторнирования и перерасчеты.
	НачисленияСотрудников = ПустаяТаблицаНачисленийЗаднимЧислом();
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
		Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
			НоваяСтрока.ВидРасчета = Объект[ОписаниеДокумента.ВидНачисленияИмя];
		Иначе
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		КонецЕсли;
	КонецЦикла;
	// Удалялем из НачисленияСотрудников все строки, не удовлетворяющие условию ОтборПоСотрудникам.
	Если ОтборПоСотрудникам <> НеОпределено Тогда
		УдалитьСтрокиНеСоответствующиеОтборуПоСотрудникам(НачисленияСотрудников, ОтборПоСотрудникам);
	КонецЕсли;
	
	// Выясним потребуется ли перерасчет
	ТребуетсяПерерасчет = ТребуетсяПерерасчет(ДокументСсылка, ПериодРегистрации, НачисленияСотрудников);
	Для Каждого ДобавленнаяЗапись Из ДобавленныеНачисления Цикл
		Начисления.Удалить(ДобавленнаяЗапись);
	КонецЦикла;
	Если Не ТребуетсяПерерасчет Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем коллекцию НачисленияПерерасчет
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДанныеПерерасчетаСлужебный(Организация, ПериодРегистрации, НачисленияСотрудников, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам, Объект);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  таблица с перерасчетами.
//		ДокументСсылка - ссылка на  документ, данные перерасчета которого формируются.
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправления(Организация, ПериодРегистрации, ИсправленныйДокумент, Начисления, НачисленияПерерасчет, ДокументСсылка, ОписаниеТаблицы, КонтролируемыеПоля, ОписаниеДокумента, Сотрудник = Неопределено, ДоначислитьЗарплатуПриНеобходимости = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДанныеПерерасчетаДляИсправленияСлужебный(Организация, ПериодРегистрации, ИсправленныйДокумент, Начисления, НачисленияПерерасчет, ДокументСсылка, ОписаниеТаблицы, КонтролируемыеПоля, ОписаниеДокумента, Сотрудник, ДоначислитьЗарплатуПриНеобходимости);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПустаяТаблицаНачисленийЗаднимЧислом() Экспорт
	
	НачисленияЗаднимЧислом = Новый ТаблицаЗначений;
	НачисленияЗаднимЧислом.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Регистратор", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("РегистраторПоказателей", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтрокиПоказателей", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("СторнируемыйДокумент", ОписаниеТиповСторнируемогоДокумента());
	
	Возврат НачисленияЗаднимЧислом;
	
КонецФункции

Функция ОписаниеТиповСторнируемогоДокумента() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.СторнируемыйДокумент.Тип;
КонецФункции

Процедура ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчет, ИсключаемыйРегистратор, ДанныеПерерасчетов = Неопределено, Показатели = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияЗаднимЧислом", НачисленияЗаднимЧислом);
	Запрос.УстановитьПараметр("ДанныеПерерасчетов", ДанныеПерерасчетов);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НачисленияЗаднимЧислом.ВидРасчета КАК ПланВидовРасчета.Начисления) КАК ВидРасчета,
	|	НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
	|	НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
	|	НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияЗаднимЧислом.РегистраторПоказателей КАК РегистраторПоказателей,
	|	НачисленияЗаднимЧислом.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	НачисленияЗаднимЧислом.Сторно КАК Сторно,
	|	НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
	|	НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТНачисленияЗаднимЧисломВрем
	|ИЗ
	|	&НачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом";
	
	Запрос.Выполнить();
	
	Если ДанныеПерерасчетов = НеОпределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ВидРасчета,
		|	NULL КАК Сотрудник,
		|	NULL КАК Регистратор,
		|	NULL КАК СторнируемыйДокумент,
		|	NULL КАК ИдентификаторСтроки,
		|	NULL КАК РегистраторПоказателей,
		|	NULL КАК ИдентификаторСтрокиПоказателей,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК НулевоеСторно,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействияНачало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТДанныеПерерасчетов";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеПерерасчетов.Начисление КАК ПланВидовРасчета.Начисления) КАК ВидРасчета,
		|	ДанныеПерерасчетов.Сотрудник КАК Сотрудник,
		|	&ИсключаемыйРегистратор КАК Регистратор,
		|	ДанныеПерерасчетов.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДанныеПерерасчетов.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	&ИсключаемыйРегистратор КАК РегистраторПоказателей,
		|	ДанныеПерерасчетов.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиПоказателей,
		|	ДанныеПерерасчетов.Сторно КАК Сторно,
		|	ВЫБОР
		|		КОГДА ДанныеПерерасчетов.Результат = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НулевоеСторно,
		|	ДанныеПерерасчетов.ПериодДействия КАК ПериодРегистрации,
		|	ДанныеПерерасчетов.ДатаНачала КАК ПериодДействияНачало,
		|	ДанныеПерерасчетов.ДатаОкончания КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТДанныеПерерасчетов
		|ИЗ
		|	&ДанныеПерерасчетов КАК ДанныеПерерасчетов";
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияЗаднимЧислом.ВидРасчета КАК ВидРасчета,
	|	НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
	|	НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
	|	НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияЗаднимЧислом.РегистраторПоказателей КАК РегистраторПоказателей,
	|	НачисленияЗаднимЧислом.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	НачисленияЗаднимЧислом.Сторно КАК Сторно,
	|	НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
	|	НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
	|	НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТНачисленияЗаднимЧислом
	|ИЗ
	|	ВТНачисленияЗаднимЧисломВрем КАК НачисленияЗаднимЧислом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПерерасчетов.ВидРасчета,
	|	ДанныеПерерасчетов.Сотрудник,
	|	ДанныеПерерасчетов.Регистратор,
	|	ДанныеПерерасчетов.СторнируемыйДокумент,
	|	ДанныеПерерасчетов.ИдентификаторСтроки,
	|	ДанныеПерерасчетов.РегистраторПоказателей,
	|	ДанныеПерерасчетов.ИдентификаторСтрокиПоказателей,
	|	ДанныеПерерасчетов.Сторно,
	|	ДанныеПерерасчетов.НулевоеСторно,
	|	ДанныеПерерасчетов.ПериодРегистрации,
	|	ДанныеПерерасчетов.ПериодДействияНачало,
	|	ДанныеПерерасчетов.ПериодДействияКонец
	|ИЗ
	|	ВТДанныеПерерасчетов КАК ДанныеПерерасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ФиксСторно КАК ФиксСторно,
	|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТВозможныеЗаписиДляПерерасчета
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисления
	|		ПО (ВедущиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияЗаднимЧислом КАК ДублирующиеНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
	|				ПО ДублирующиеНачисления.ВидРасчета = ПланВидовРасчетаНачисления.Ссылка
	|			ПО Начисления.ВидРасчета = ДублирующиеНачисления.ВидРасчета
	|				И Начисления.Сотрудник = ДублирующиеНачисления.Сотрудник
	|				И Начисления.ПериодДействияНачало = ДублирующиеНачисления.ПериодДействияНачало
	|				И (НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДублирующиеНачисления.ПериодДействияКонец, ДЕНЬ))
	|				И (ДублирующиеНачисления.Сторно)
	|				И (НЕ Начисления.Сторно)
	|		ПО (Начисления.ВидРасчета = ВедущиеНачисления.Ссылка)
	|			И (Начисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
	|			И (Начисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
	|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
	|			И (ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
	|					ТОГДА НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.ПериодДействияКонец
	|							И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.ПериодДействияНачало
	|				ИНАЧЕ НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
	|						И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
	|			КОНЕЦ)
	|			И (ДублирующиеНачисления.ВидРасчета ЕСТЬ NULL)
	|ГДЕ
	|	НЕ НачисленияЗаднимЧислом.НулевоеСторно
	|	И НЕ Начисления.Сторно
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ДокументОснование,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ФиксСторно,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.Результат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК Регистратор,
	|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВозможныеЗаписиДляПерерасчета.Сотрудник КАК Сотрудник,
	|	ВозможныеЗаписиДляПерерасчета.ВидРасчета КАК ВидРасчета,
	|	ВозможныеЗаписиДляПерерасчета.ДокументОснование КАК ДокументОснование,
	|	ВозможныеЗаписиДляПерерасчета.ПериодДействия КАК ПериодДействия,
	|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации КАК ПериодРегистрации,
	|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияПериоды
	|ИЗ
	|	ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчетаВспом
	|		ПО ВозможныеЗаписиДляПерерасчета.Сотрудник = ВозможныеЗаписиДляПерерасчетаВспом.Сотрудник
	|			И ВозможныеЗаписиДляПерерасчета.ВидРасчета = ВозможныеЗаписиДляПерерасчетаВспом.ВидРасчета
	|			И ВозможныеЗаписиДляПерерасчета.ПериодДействия = ВозможныеЗаписиДляПерерасчетаВспом.ПериодДействия
	|			И (ВозможныеЗаписиДляПерерасчета.Результат = -ВозможныеЗаписиДляПерерасчетаВспом.Результат)
	|			И (ВозможныеЗаписиДляПерерасчета.ФиксСторно
	|					И ВозможныеЗаписиДляПерерасчета.СторнируемыйДокумент = ВозможныеЗаписиДляПерерасчетаВспом.Регистратор
	|				ИЛИ НЕ ВозможныеЗаписиДляПерерасчета.ФиксСторно
	|					И ВозможныеЗаписиДляПерерасчета.Регистратор = ВозможныеЗаписиДляПерерасчетаВспом.СторнируемыйДокумент)
	|ГДЕ
	|	ВозможныеЗаписиДляПерерасчетаВспом.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПериоды.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(НачисленияПериоды.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(НачисленияПериоды.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТДляПолученияПериодовРегистрацииВремени
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НачисленияЗаднимЧислом.Сотрудник,
	|	НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ),
	|	КОНЕЦПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ)
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом";
	
	Запрос.Выполнить();
	
	ОписаниеНабораСотрудников = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
	ОписаниеНабораСотрудников.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
	ОписаниеНабораСотрудников.ТаблицаИстчоникДанных = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(
		Запрос.МенеджерВременныхТаблиц, ПериодРегистрации, ОписаниеНабораСотрудников);
	
	ОписаниеТаблицыФильтра = МенеджерДанныхУчетаВремени.ОписаниеФильтраВТИнтервалыДействияИсточниковДанныхУчетаВремени();
	ОписаниеТаблицыФильтра.ИмяТаблицы = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени.СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремени(ОписаниеТаблицыФильтра);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПериоды.СторнируемыйДокумент,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА Начисления.ДокументОснование ССЫЛКА Документ.НазначениеПлановогоНачисления
	|				ИЛИ Начисления.ДокументОснование ССЫЛКА Документ.Совмещение
	|			ТОГДА Начисления.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОснование,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.ВидРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	Начисления.Результат КАК Результат,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
	|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
	|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
	|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремениСторноЗаписей,
	|	Начисления.ОбщийГрафик КАК ОбщийГрафикСторноЗаписей,
	|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы) КАК ГрафикРаботыЗаписейПерерасчета,
	|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма) КАК ГрафикРаботыНормаЗаписейПерерасчета,
	|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени, Начисления.ПериодРегистрацииВремени) КАК ПериодРегистрацииВремениЗаписейПерерасчета,
	|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени, Начисления.ПериодРегистрацииНормыВремени) КАК ПериодРегистрацииНормыВремениЗаписейПерерасчета,
	|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик, Начисления.ОбщийГрафик) КАК ОбщийГрафикЗаписейПерерасчета,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	Начисления.Организация,
	|	НачисленияПериоды.Регистратор КАК Регистратор,
	|	НачисленияПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = НачисленияПериоды.Регистратор)
	|			И (Начисления.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
	|			И (Начисления.Результат <> 0)
	|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
	|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
	|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПериоды.Сотрудник)
	|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = НачисленияПериоды.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПериоды.Регистратор)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета.РеквизитДопУпорядочивания,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ Начисления.БазовыйПериодНачало
	|	КОНЕЦ,
	|	НачисленияПериоды.Регистратор,
	|	НачисленияПериоды.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПериоды.Сотрудник,
	|	НачисленияПериоды.ВидРасчета,
	|	НачисленияПериоды.ПериодДействия
	|ПОМЕСТИТЬ ВТРазличныеНачисленияПериоды
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды";
	
	Запрос.Текст = ТекстЗапроса;
	Результаты = Запрос.ВыполнитьПакет();
	
	// Получим регистраторы и идентификаторы строк для распределения результатов начислений.
	ДокументыРаспределенияРезультатовНачислений = Результаты[0].Выгрузить().Скопировать(, "Регистратор, ИдентификаторСтроки");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПерерасчета.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
	|	Начисления.ДокументОснование,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	НачисленияПерерасчета.Сторно,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ГрафикРаботы
	|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы)
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ГрафикРаботыНорма
	|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма)
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ПериодРегистрацииВремени
	|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени
	|	КОНЕЦ КАК ПериодРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ПериодРегистрацииНормыВремени
	|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени
	|	КОНЕЦ КАК ПериодРегистрацииНормыВремени,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ОбщийГрафик
	|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик
	|	КОНЕЦ КАК ОбщийГрафик,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.НулевоеСторно
	|				ИЛИ НЕ НачисленияПериоды.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НулевоеСторно,
	|	Начисления.Организация,
	|	Начисления.ФиксСтрока,
	|	Начисления.ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени,
	|	Начисления.ФиксРасчет,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	НачисленияПерерасчета.РегистраторПоказателей КАК Регистратор,
	|	НачисленияПерерасчета.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтроки,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияПерерасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазличныеНачисленияПериоды КАК НачисленияПериоды
	|		ПО НачисленияПерерасчета.Сотрудник = НачисленияПериоды.Сотрудник
	|			И НачисленияПерерасчета.ВидРасчета = НачисленияПериоды.ВидРасчета
	|			И (НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ) = НачисленияПериоды.ПериодДействия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = НачисленияПерерасчета.Регистратор)
	|			И (Начисления.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
	|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПерерасчета.Сотрудник)
	|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = НачисленияПерерасчета.ВидРасчета)
	|			И (НачисленияПериоды.Сотрудник ЕСТЬ NULL )
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПерерасчета.РегистраторПоказателей)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтрокиПоказателей)
	|			И (НачисленияПериоды.Сотрудник ЕСТЬ NULL )
	|ГДЕ
	|	НЕ(Начисления.ВидРасчета.ТребуетсяРасчетБазы
	|				И НЕ Начисления.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.РеквизитДопУпорядочивания,
	|	Начисления.ДокументОснование,
	|	Начисления.Сторно УБЫВ,
	|	Начисления.ПериодДействияНачало,
	|	НачисленияПерерасчета.Регистратор,
	|	НачисленияПерерасчета.ИдентификаторСтроки,
	|	Показатели.НомерСтроки";
	
	РезультатыПоказателей = Запрос.Выполнить();
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Если ДанныеПерерасчетов = Неопределено Тогда
		ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	КонецЕсли;
	
	// Дополним регистраторы и получим распределения результатов начислений
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыПоказателей.Выгрузить().Скопировать(, "Регистратор, ИдентификаторСтроки"), ДокументыРаспределенияРезультатовНачислений);
	
	Запрос.УстановитьПараметр("ДокументыРаспределения", ДокументыРаспределенияРезультатовНачислений);
	
	МассивДокументовРаспределениеРезультатовНачислений = Новый Массив;
	ТекстЗапроса = "";
	Для Каждого СтрокаТаблицыДокументов Из ДокументыРаспределенияРезультатовНачислений Цикл
		
		Если МассивДокументовРаспределениеРезультатовНачислений.Найти(СтрокаТаблицыДокументов.Регистратор) <> Неопределено
			Или Метаданные.Документы[СтрокаТаблицыДокументов.Регистратор.Метаданные().Имя].ТабличныеЧасти.Найти("РаспределениеРезультатовНачислений") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДокументовРаспределениеРезультатовНачислений.Добавить(СтрокаТаблицыДокументов.Регистратор);
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		ИмяТаблицыДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(СтрокаТаблицыДокументов.Регистратор);
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РаспределениеРезультатовНачислений.Ссылка КАК Регистратор,
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.Территория,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования,
		|	РаспределениеРезультатовНачислений.СтатьяРасходов,
		|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
		|	РаспределениеРезультатовНачислений.Результат
		|ИЗ
		|	ВТДокументыРаспределения КАК ДокументыРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыРаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|		ПО (РаспределениеРезультатовНачислений.Ссылка = ДокументыРаспределения.Регистратор)
		|			И (РаспределениеРезультатовНачислений.ИдентификаторСтроки = ДокументыРаспределения.ИдентификаторСтроки)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыРаспределениеРезультатовНачислений", ИмяТаблицыДокумента + ".РаспределениеРезультатовНачислений");
		
	КонецЦикла;
	
	Если МассивДокументовРаспределениеРезультатовНачислений.Количество() = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Регистратор,
		|	NULL КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДокументыРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	NULL КАК Регистратор,
		|	NULL КАК ИдентификаторСтроки";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыРаспределения.Регистратор КАК Регистратор,
		|	ДокументыРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТТаблицаРаспределения
		|ИЗ
		|	&ДокументыРаспределения КАК ДокументыРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРаспределения.Регистратор КАК Регистратор,
		|	ТаблицаРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДокументыРаспределения
		|ИЗ
		|	ВТТаблицаРаспределения КАК ТаблицаРаспределения
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРаспределения.Регистратор,
		|	ТаблицаРаспределения.ИдентификаторСтроки"
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРаспределенияРезультатовНачислений = Запрос.Выполнить().Выгрузить();
	ТаблицаРаспределенияРезультатовНачислений.Индексы.Добавить("Регистратор,ИдентификаторСтроки");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор,
	|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.Территория,
	|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей,
	|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	РаспределениеПоТерриториямУсловиямТруда.Результат
	|ИЗ
	|	ВТДокументыРаспределения КАК ДокументыРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	|		ПО (РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение = ДокументыРаспределения.Регистратор)
	|			И (РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки = ДокументыРаспределения.ИдентификаторСтроки)";
	
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = Запрос.Выполнить().Выгрузить();
	ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.Индексы.Добавить("Регистратор,ИдентификаторСтроки");
	
	Выборка = РезультатыПоказателей.Выбрать();
	ИдентификаторСтрокиВидаРасчета = 0;
	Если Показатели = Неопределено Тогда
		НомерПоказателя = 0;
		Пока Выборка.Следующий() Цикл
			Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
				Или ТекущийРегистратор <> Выборка.Регистратор 
				Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
				НомерПоказателя = 1;
				НовыйПерерасчет = ДанныеПерерасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
				НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
				НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
				НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
				Если Выборка.НулевоеСторно Тогда
					НовыйПерерасчет.Результат = 0;
					НовыйПерерасчет.ФиксСторно = Истина;
				Иначе
					// Прикладываем распределение результатов начислений
					ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет, ТаблицаРаспределенияРезультатовНачислений, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям
					ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
				КонецЕсли;
			КонецЕсли;
			НовыйПерерасчет["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НовыйПерерасчет["Значение" + НомерПоказателя] = Выборка.Значение;
			
			НомерПоказателя = НомерПоказателя + 1;
			ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			ТекущийРегистратор = Выборка.Регистратор;
			ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
			
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
				Или ТекущийРегистратор <> Выборка.Регистратор 
				Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
				НовыйПерерасчет = ДанныеПерерасчетов.Добавить();
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
				НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
				НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
				НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
				Если Выборка.НулевоеСторно Тогда
					НовыйПерерасчет.Результат = 0;
					НовыйПерерасчет.ФиксСторно = Истина;
				Иначе
					// Прикладываем распределение результатов начислений
					ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет, ТаблицаРаспределенияРезультатовНачислений, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям
					ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
				КонецЕсли;
				НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			КонецЕсли;
			НоваяСтрокаПоказателей = Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Выборка.Показатель;
			НоваяСтрокаПоказателей.Значение = Выборка.Значение;
			НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			ТекущийРегистратор = Выборка.Регистратор;
			ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
			
		КонецЦикла;
	КонецЕсли;
	
	// Новые записи зависимых начислений.
	НовыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	
	// Запоминаем строки, в которых затем потребуется скорректировать период базовых начислений.
	СтрокиБазовыйПериод = Новый Соответствие;
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийВидРасчета = Неопределено;
	ТекущийДокументОснование = Неопределено;
	ТекущийСотрудник = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Выборка = Результаты[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
			Или ТекущийРегистратор <> Выборка.Регистратор 
			Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			НомерПоказателя = 1;
			
			// Сторнирование прежних зависимых начислений.
			НовыйПерерасчетСторно = ДанныеПерерасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПерерасчетСторно, Выборка);
			НовыйПерерасчетСторно.ДатаНачала = Выборка.ПериодДействияНачало;
			НовыйПерерасчетСторно.ДатаОкончания = Выборка.ПериодДействияКонец;
			НовыйПерерасчетСторно.НачалоБазовогоПериода = Выборка.БазовыйПериодНачало;
			НовыйПерерасчетСторно.ОкончаниеБазовогоПериода = Выборка.БазовыйПериодКонец;
			НовыйПерерасчетСторно.Начисление = Выборка.ВидРасчета;
			
			НовыйПерерасчетСторно.Результат = - Выборка.Результат;
			НовыйПерерасчетСторно.РезультатВТомЧислеЗаСчетФБ = - Выборка.РезультатВТомЧислеЗаСчетФБ;
			НовыйПерерасчетСторно.ОтработаноДней = - Выборка.ОтработаноДней;
			НовыйПерерасчетСторно.ОтработаноЧасов = - Выборка.ОтработаноЧасов;
			НовыйПерерасчетСторно.СторнируемыйДокумент = Выборка.СторнируемыйДокумент;
			НовыйПерерасчетСторно.ФиксРасчет = Истина;
			НовыйПерерасчетСторно.ФиксСторно = Истина;
			
			НовыйПерерасчетСторно.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремениСторноЗаписей;
			НовыйПерерасчетСторно.ГрафикРаботы = Выборка.ГрафикРаботыСторноЗаписей;
			НовыйПерерасчетСторно.ГрафикРаботыНорма = Выборка.ГрафикРаботыНормаСторноЗаписей;
			НовыйПерерасчетСторно.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			Если Выборка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
				БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
				СтрокиБазовыйПериод.Вставить(НовыйПерерасчетСторно, БазовыйПериод);
			КонецЕсли;
			
			// Прикладываем распределение результатов начислений
			ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчетСторно, ТаблицаРаспределенияРезультатовНачислений, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
			// Прикладываем распределение по территориям
			ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчетСторно, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
			
			Если ТекущийВидРасчета <> Выборка.ВидРасчета 
				Или ТекущийДокументОснование <> Выборка.ДокументОснование 
				Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало
				Или ТекущийСотрудник <> Выборка.Сотрудник Тогда
				НовыйПерерасчет = НовыеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
				
				// Прикладываем распределение результатов начислений
				ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет, ТаблицаРаспределенияРезультатовНачислений, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
				// Прикладываем распределение по территориям
				ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, Выборка.Регистратор, Выборка.ИдентификаторСтроки);
				
				НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
				НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
				НовыйПерерасчет.НачалоБазовогоПериода = Выборка.БазовыйПериодНачало;
				НовыйПерерасчет.ОкончаниеБазовогоПериода = Выборка.БазовыйПериодКонец;
				НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
			
				НовыйПерерасчет.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремениЗаписейПерерасчета;
				НовыйПерерасчет.ГрафикРаботы = Выборка.ГрафикРаботыЗаписейПерерасчета;
				НовыйПерерасчет.ГрафикРаботыНорма = Выборка.ГрафикРаботыНормаЗаписейПерерасчета;
				
				НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
				Если Выборка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
					// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
					БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Выборка.БазовыйПериодНачало, Выборка.БазовыйПериодКонец);
					СтрокиБазовыйПериод.Вставить(НовыйПерерасчет, БазовыйПериод);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Показатели <> НеОпределено Тогда
			НоваяСтрокаПоказателей = Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Выборка.Показатель;
			НоваяСтрокаПоказателей.Значение = Выборка.Значение;
			НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		Иначе
			НовыйПерерасчетСторно["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НовыйПерерасчетСторно["Значение" + НомерПоказателя] = Выборка.Значение;
			НовыйПерерасчет["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НовыйПерерасчет["Значение" + НомерПоказателя] = Выборка.Значение;
			
			НомерПоказателя = НомерПоказателя + 1;
		КонецЕсли;
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		ТекущийРегистратор = Выборка.Регистратор;
		ТекущийВидРасчета = Выборка.ВидРасчета;
		ТекущийДокументОснование = Выборка.ДокументОснование;
		ТекущийСотрудник = Выборка.Сотрудник;
		ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
		
	КонецЦикла;
	
	Если ДанныеПерерасчетов.Количество() <> 0 Или НовыеНачисления.Количество() <> 0 Тогда
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
		
		// Заполняем сведения о сотрудниках в данных перерасчета.
		ДополнитьСтрокиНачислений(МенеджерРасчета, ДанныеПерерасчетов, Организация, Истина, Ложь); 
		
		// Получить значения показателей.
		ДополнитьСтрокиНачислений(МенеджерРасчета, НовыеНачисления, Организация);
		
		// Заполняем даты базовым периодом.
		Для Каждого Строка Из СтрокиБазовыйПериод Цикл
			ЗаполнитьЗначенияСвойств(Строка.Ключ, Строка.Значение);
		КонецЦикла;
	
		// Переносим строки в таблицу значений ДанныеПерерасчетов.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеНачисления, ДанныеПерерасчетов);
		
		// Удаляем добавляемые зависимые начисления из НачисленияПерерасчет
		СтруктураПоиска = Новый Структура("Сотрудник,Начисление,ПериодДействия");
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаПерерасчета Из ДанныеПерерасчетов Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПерерасчета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиКУдалению, НачисленияПерерасчет.НайтиСтроки(СтруктураПоиска), Истина);
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			НачисленияПерерасчет.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(ДанныеПерерасчетов, "ДатаНачала", "ДатаОкончания", "", "ИдентификаторСтрокиВидаРасчета");
	
	// Переносим строки в коллекцию НачисленияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, НачисленияПерерасчет);
	
КонецПроцедуры

Процедура ДополнитьСтрокиНачислений(МенеджерРасчета, НачисленияЗаПериод, Организация,ЗаполнятьСведенияДляРасчета = Истина, ЗаполнятьЗначенияПоказателей = Истина)
	
	Начисления = МенеджерРасчета.ТаблицаНачислений();
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из НачисленияЗаПериод Цикл
		НоваяСтрока = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(Начисления);
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		РасчетЗарплатыРасширенныйФормы.ПоказателиВМенеджерРасчета(НоваяСтрока, СтрокаРасчета, "Начисления");
		РасчетЗарплатыРасширенныйФормы.РезультатРаспределенияВМенеджерРасчета(НоваяСтрока, СтрокаРасчета);
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
			НоваяСтрока,
			СтрокаРасчета,
			,
			МенеджерРасчета,
			Организация);
	КонецЦикла; 
	
	Если ЗаполнятьСведенияДляРасчета Тогда
		МенеджерРасчета.ЗаполнитьСведенияНачисленийДляРасчета(Начисления);
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	КонецЕсли;
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеПерерасчета(Организация, КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор,
	|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.Территория,
	|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей,
	|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	РаспределениеПоТерриториямУсловиямТруда.Результат
	|ИЗ
	|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение = &ИсправленныйДокумент";
	
	РаспределениеПоТерриториямУсловиямТруда = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		СтрокиРаспределенияПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда.НайтиСтроки(СтруктураПоиска);
		Если СтрокиРаспределенияПоТерриториямУсловиямТруда.Количество() > 0 Тогда
			
			СтрокиРаспределения = Новый Массив;
			Для каждого СтрокаРаспределенияПоТерриториямУсловиямТруда Из СтрокиРаспределенияПоТерриториямУсловиямТруда Цикл
				
				ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
				ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияПоТерриториямУсловиямТруда);
				ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
				СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
				
			КонецЦикла;
			СтрокаПерерасчет.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаСторноПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, Регистратор, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
			ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
			ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
			ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
			СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
			
		КонецЦикла;
		СтрокаСторноПерерасчет.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент, ОписаниеТаблицы = Неопределено)
	
	Если ОписаниеТаблицы = Неопределено Тогда
		ОписаниеТаблицы = Новый Структура("ПутьКДаннымРаспределениеРезультатов", "Объект.РаспределениеРезультатовНачислений");
	КонецЕсли;
	
	Если Не ОписаниеТаблицы.Свойство("ПутьКДаннымРаспределениеРезультатов") Или Не ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов, ".");
	ИмяТаблицыРаспределения = МассивПодстрок[МассивПодстрок.ВГраница()];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеРезультатовНачислений.*
	|ИЗ
	|	#РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
	|ГДЕ
	|	РаспределениеРезультатовНачислений.Ссылка = &ИсправленныйДокумент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовНачислений", ИмяТаблицы + "." + ИмяТаблицыРаспределения);
	
	РаспределениеРезультатовНачислений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		СтрокиРаспределенияНачислений = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
		Если СтрокиРаспределенияНачислений.Количество() > 0 Тогда
			
			СтрокиРаспределения = Новый Массив;
			Для каждого СтрокаРаспределенияНачислений Из СтрокиРаспределенияНачислений Цикл
				
				ИменаКолонокТаблицыРаспределенияНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
				ОписаниеСтрок = Новый Структура(ИменаКолонокТаблицыРаспределенияНачислений);
				ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачислений);
				ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
				СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
				
			КонецЦикла;
			СтрокаПерерасчет.РезультатРаспределения = Новый ФиксированныйМассив(СтрокиРаспределения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияНачисления(СтрокаПерерасчет, РаспределениеРезультатовНачислений, Регистратор, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачислений = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачислений.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачислений Из СтрокиРаспределенияНачислений Цикл
			
			ОписаниеТаблицы = Новый Структура("ПутьКДаннымРаспределениеРезультатов", "Объект.РаспределениеРезультатовНачислений");
			ИменаКолонокТаблицыРаспределенияНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
			ОписаниеСтрок = Новый Структура(ИменаКолонокТаблицыРаспределенияНачислений);
			ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачислений);
			ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
			СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
			
		КонецЦикла;
		СтрокаПерерасчет.РезультатРаспределения = Новый ФиксированныйМассив(СтрокиРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидРасчетаЯвляетсяВытесняющим(ВидРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияВытесняющиеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета";
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДанныеПерерасчетаСлужебный(Организация, ПериодРегистрации, Начисления, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам, Объект)
	Перем ПредыдущаяСтрока;
	
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления();
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		НачисленияНабор.Отбор.Регистратор.Установить(ДокументСсылка);
		НачисленияНабор.Записать(); 
	КонецЕсли;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор.Отбор.Регистратор.Установить(ВременнаяСсылка);
	НачисленияНабор.ДополнительныеСвойства.Удалить("ЭтоВременныйНаборЗаписей");
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, НоваяСтрока);
		
	КонецЦикла;
	
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	СторноЗаписи.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	СторноЗаписи.Сортировать("Сотрудник,ВидРасчета,ПериодРегистрации,ПериодДействияНачалоСторно,Результат", Новый СравнениеЗначений());
	СторноЗаписи.ЗаполнитьЗначения(Ложь, "ФиксРасчет, ФиксРасчетВремени");
	ПерваяЗапись = Истина;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		// Записи с нулевыми идентификаторами - "технические" записи подработок и внутренних совместителей.
		Если СтрокаСторно.ИдентификаторСтроки = 0 Тогда
			СтрокаСторно.НулевоеСторно = Истина;
		КонецЕсли;
		Если ПерваяЗапись Тогда
			ПерваяЗапись = Ложь;
		Иначе
			Если СтрокаСторно.Сотрудник = ПредыдущаяСтрока.Сотрудник И 
				СтрокаСторно.ВидРасчета = ПредыдущаяСтрока.ВидРасчета И 
				СтрокаСторно.ПериодРегистрации = ПредыдущаяСтрока.ПериодРегистрации И 
				СтрокаСторно.ПериодДействияНачалоСторно = ПредыдущаяСтрока.ПериодДействияНачалоСторно И 
				СтрокаСторно.Результат = - ПредыдущаяСтрока.Результат Тогда
				// обе строки - "нулевое" сторно
				СтрокаСторно.НулевоеСторно = Истина;
				ПредыдущаяСтрока.НулевоеСторно = Истина;
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаСторно;
	КонецЦикла;
		
	НачисленияНабор.Очистить();
	НачисленияНабор.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
	НачисленияНабор.Записать();
	
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(РегистраторНаборДляЗаполненияПерерасчета);
	
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаСторно);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		СтрокаНачисленийЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	// Записать сторно-записи перед получением данных для расчета.
	НаборДляЗаполненияПерерасчета.Записать();
	
	НачисленияПерерасчетНовые = НачисленияПерерасчет.Выгрузить().СкопироватьКолонки();
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчетНовые, РегистраторНаборДляЗаполненияПерерасчета,,);
	
	СтруктураОтбора = Новый Структура("ФиксРасчет, ФиксСторно", Истина, Истина);
	ФиксСторноСтрокиНовые = НачисленияПерерасчетНовые.Скопировать(СтруктураОтбора);
	НайденныеСтроки = НачисленияПерерасчетНовые.НайтиСтроки(СтруктураОтбора);
	УдалитьСтрокиСОтборомПоСотрудникам(НачисленияПерерасчетНовые, НайденныеСтроки, ОтборПоСотрудникам);
	
	// Заменим строки объекта на рассчитанные записи перерасчета
	КлючевыеКолонки = "Сотрудник";
	Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
		КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
	КонецЕсли;
	УсловияЗаменыСтрок = РасчетЗарплатыРасширенный.УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНаНовыеДанные(НачисленияПерерасчет, НачисленияПерерасчетНовые, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	
	// Восстановим сторнированные строки
	Для каждого ФиксСторноСтрокаНовая Из ФиксСторноСтрокиНовые Цикл
		НоваяСтрокаНачисленияПерерасчет = НачисленияПерерасчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияПерерасчет, ФиксСторноСтрокаНовая);
	КонецЦикла;
	
	Если Не ОтменятьТранзакцию Тогда
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
	КонецЕсли;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиСОтборомПоСотрудникам(НачисленияПерерасчет, НайденныеСтроки, ОтборПоСотрудникам)
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СоответствуетУсловиям = Истина;
		Если ОтборПоСотрудникам <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ОтборПоСотрудникам Цикл
				ИмяОтбора = КлючИЗначение.Ключ;
				ЗначениеОтбора = КлючИЗначение.Значение;
				Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					СоответствуетУсловиям = ЗначениеОтбора.Найти(НайденнаяСтрока[ИмяОтбора]) <> Неопределено;
				Иначе
					СоответствуетУсловиям = НайденнаяСтрока[ИмяОтбора] = ЗначениеОтбора;
				КонецЕсли;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НачисленияПерерасчет.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиСоответствующиеОтборуПоСотрудникам(НаборСтрок, ОтборПоСотрудникам)
	Если ОтборПоСотрудникам <> Неопределено Тогда
		УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Ложь);
	КонецЕсли;
КонецПроцедуры
	
Процедура УдалитьСтрокиНеСоответствующиеОтборуПоСотрудникам(НаборСтрок, ОтборПоСотрудникам)
	Если ОтборПоСотрудникам <> Неопределено Тогда
		УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Истина);
	Иначе
		НаборСтрок.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Инверсия);
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из НаборСтрок Цикл
		СоответствуетУсловиям = Истина;
		Для Каждого КлючИЗначение Из ОтборПоСотрудникам Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				СоответствуетУсловиям = (ЗначениеОтбора.Найти(Строка[ИмяОтбора]) <> Неопределено) И СоответствуетУсловиям;
			Иначе
				СоответствуетУсловиям = (Строка[ИмяОтбора] = ЗначениеОтбора) И СоответствуетУсловиям;
			КонецЕсли;
		КонецЦикла;
		Если Инверсия И Не СоответствуетУсловиям Тогда
			СтрокиКУдалению.Добавить(Строка);
		ИначеЕсли Не Инверсия И СоответствуетУсловиям Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НаборСтрок.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет требуется ли выполнять проверку необходимости сторнирования.
Функция ТребуетсяПерерасчет(Регистратор, ПериодРегистрации, НачисленияСотрудников)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начисления", НачисленияСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
		|			И (СотрудникиПериоды.ПериодДействия = Начисления.ПериодДействия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВытесняющиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВытесняющиеВидыРасчета.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВедущиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВедущиеВидыРасчета.ВидРасчета)
		|ГДЕ
		|	Начисления.Регистратор <> &Регистратор
		|	И Начисления.ПериодРегистрации < &ПериодРегистрации
		|	И (НЕ ВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ВедущиеВидыРасчета.Ссылка ЕСТЬ NULL)";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Процедура СформироватьДанныеПерерасчетаДляИсправленияСлужебный(Организация, ПериодРегистрации, ИсправленныйДокумент, Начисления, НачисленияПерерасчет, ДокументСсылка, ОписаниеТаблицы, КонтролируемыеПоля, ОписаниеДокумента, Сотрудник, ДоначислитьЗарплатуПриНеобходимости)
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПредыдущийНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления();
		ПредыдущийНабор.Отбор.Регистратор.Установить(ДокументСсылка);
		ПредыдущийНабор.Записать(); 
	КонецЕсли;
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	
	ДокументБезДатаНачала = Ложь;
	ДокументБезВТомЧислеЗаСчетФБ = Ложь;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("ДатаНачала") = Неопределено Тогда
		ДокументБезДатаНачала = Истина;
	КонецЕсли;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("РезультатВТомЧислеЗаСчетФБ") = Неопределено Тогда
		ДокументБезВТомЧислеЗаСчетФБ = Истина;
	КонецЕсли;
	
	НачислениеДокумента = Неопределено;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка);
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	
	ТекстОсновногоЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка.РеквизитПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Результат + ЕСТЬNULL(РегистрНачисления.Результат, 0) КАК Результат,
	|	Начисления.ОтработаноДней + ЕСТЬNULL(РегистрНачисления.ОтработаноДней, 0) КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов + ЕСТЬNULL(РегистрНачисления.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	*
	|ИЗ
	|	#Таблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрНачисления
	|		ПО (РегистрНачисления.СторнируемыйДокумент = &ИсправленныйДокумент)
	|			И (РегистрНачисления.ВидРасчета = Начисления.Ссылка.ВидРасчета)
	|			И (РегистрНачисления.Сотрудник = Начисления.Сотрудник)
	|			И (РегистрНачисления.ДокументОснование = Начисления.ДокументОснование)
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ДатаНачала) КАК НачалоСтарогоПериода,
	|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ОкончаниеСтарогоПериода,
	|	Начисления.Ссылка.ВидРасчета КАК Начисление
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Ссылка.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент";
	
	ОбработатьТекстЗапроса(ТекстОсновногоЗапроса, ИмяТаблицы, ОписаниеТаблицы, Сотрудник, ДокументБезДатаНачала);
	
	Запрос = Новый Запрос(ТекстОсновногоЗапроса);
	Если Сотрудник <> Неопределено Тогда
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаДанныеИсправленногоДокумента = Результаты[0].Выбрать();
	УчитыватьСуммуВычета = Результаты[0].Колонки.Найти("СуммаВычета") <> Неопределено;
	ВыборкаДатыПериода = Результаты[1].Выбрать();
	// Не нашлось в исправленном документе сотрудников по которым формируются перерасчеты.
	Если ВыборкаДатыПериода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ВыборкаСтарыеСотрудники = Результаты[2].Выбрать();
	
	ВыборкаДатыПериода.Следующий();
	НачалоСтарогоПериода = ВыборкаДатыПериода.НачалоСтарогоПериода;
	ОкончаниеСтарогоПериода = ВыборкаДатыПериода.ОкончаниеСтарогоПериода;
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		НачислениеДокумента = ВыборкаДатыПериода.Начисление;
	КонецЕсли;
	
	// "старые" сотрудники
	// таблица для использования в РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты.
	ТаблицаСтарыхСотрудников = Новый ТаблицаЗначений;
	ТаблицаСтарыхСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСтарыхСотрудников.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	// Организации и физлица старых сотрудников.
	ГоловныеОрганизацииСотрудников = Новый Соответствие;
	ФизическиеЛицаСотрудников = Новый Соответствие;
	
	Сотрудники = Новый Массив;
	Пока ВыборкаСтарыеСотрудники.Следующий() Цикл
		ГоловныеОрганизацииСотрудников[ВыборкаСтарыеСотрудники.Сотрудник] = ВыборкаСтарыеСотрудники.ГоловнаяОрганизация;
		ФизическиеЛицаСотрудников[ВыборкаСтарыеСотрудники.Сотрудник] = ВыборкаСтарыеСотрудники.ФизическоеЛицо;
		Сотрудники.Добавить(ВыборкаСтарыеСотрудники.Сотрудник);
	КонецЦикла;
	
	ТребуетсяВосстановлениеНачислений = Ложь;
	Если ДоначислитьЗарплатуПриНеобходимости Тогда
		Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
			ВидРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, ОписаниеДокумента.ВидНачисленияИмя);
			ТребуетсяВосстановлениеНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРасчета, "ЗачетНормыВремени");
		Иначе
			ТекстЗапросаПроверкиВосстановленияНачислений = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#Таблица КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрНачисления
			|		ПО Начисления.Сотрудник = РегистрНачисления.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = РегистрНачисления.ПериодДействия)
			|			И Начисления.ДатаНачала < РегистрНачисления.ПериодДействияКонец
			|			И Начисления.ДатаОкончания > РегистрНачисления.ПериодДействияНачало
			|ГДЕ
			|	Начисления.Ссылка.ВидРасчета.ЗачетНормыВремени
			|	И Начисления.Ссылка = &ИсправленныйДокумент
			|	И РегистрНачисления.Регистратор <> &ИсправленныйДокумент";
			ОбработатьТекстЗапроса(ТекстЗапросаПроверкиВосстановленияНачислений, ИмяТаблицы, ОписаниеТаблицы, Сотрудник, ДокументБезДатаНачала);
			Запрос.Текст = ТекстЗапросаПроверкиВосстановленияНачислений;
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				ТребуетсяВосстановлениеНачислений = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		// Получим данные плановых начислений за исправляемый период.
		Если ЗначениеЗаполнено(НачалоСтарогоПериода) И ЗначениеЗаполнено(ОкончаниеСтарогоПериода) Тогда
			// Скорректируем исправляемый период 
			// В начале он состоит из одного интервала.
			ИсправляемыйПериод = Новый Массив;
			НовыйИнтервал = ИнтервалПериода(НачалоСтарогоПериода, ОкончаниеСтарогоПериода);
			ИсправляемыйПериод.Добавить(НовыйИнтервал);
			Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
				ВидРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, ОписаниеДокумента.ВидНачисленияИмя);
				ВидНачисленияШапкиИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			КонецЕсли;
			Для Каждого СтрокаНачисления Из Начисления Цикл
				Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
					ВидНачисленияИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
				Иначе
					ВидНачисленияИнфо = ВидНачисленияШапкиИнфо;
				КонецЕсли;
				// В исправляемый период не входят интервалы в которые уже начислены плановые начисления
				// текущим документом-исправлением.
				Если 	ВидНачисленияИнфо.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете 
					Или ВидНачисленияИнфо.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете Тогда
					УдаляемыеИнтервалы = Новый Массив;
					НовыеИнтервалы = Новый Массив;
					НачалоНачисления = СтрокаНачисления.ДатаНачала;
					ОкончаниеНачисления = КонецДня(СтрокаНачисления.ДатаОкончания);
					Индекс = 0;
					Пока Индекс < ИсправляемыйПериод.Количество() Цикл
						Интервал = ИсправляемыйПериод[Индекс];
						// если начисление "задевает" интервал 
						Если НачалоНачисления < Интервал.ДатаОкончания И ОкончаниеНачисления > Интервал.ДатаНачала Тогда
							Если НачалоНачисления <= Интервал.ДатаНачала И ОкончаниеНачисления >= Интервал.ДатаОкончания Тогда 
								// Полностью покрыли интервал - удяляем
								УдаляемыеИнтервалы.Добавить(Индекс);
							ИначеЕсли НачалоНачисления <= Интервал.ДатаНачала И ОкончаниеНачисления < Интервал.ДатаОкончания Тогда
								// отрезали начало
								Интервал.ДатаНачала = ОкончаниеНачисления + 1;
							ИначеЕсли НачалоНачисления > Интервал.ДатаНачала И ОкончаниеНачисления >= Интервал.ДатаОкончания Тогда
								// отрезали конец
								Интервал.ДатаОкончания = НачалоНачисления - 1;
							Иначе
								// Вырезание середины интервала
								// добавляем новый интервал (вторая часть после "разрезания").
								НовыйИнтервал = ИнтервалПериода(ОкончаниеНачисления + 1, Интервал.ДатаОкончания);
								НовыеИнтервалы.Добавить(НовыйИнтервал);
								// ...и корректируем текущий интервал (первая часть после "разрезания")
								Интервал.ДатаОкончания = НачалоНачисления - 1;
							КонецЕсли;
						КонецЕсли;
						Индекс = Индекс + 1;
					КонецЦикла;
					// Удалим интервалы
					Для Каждого УдаляемыйИнтервал Из УдаляемыеИнтервалы Цикл
						ИсправляемыйПериод.Удалить(УдаляемыйИнтервал);
					КонецЦикла;
					// Добавим новые
					Для Каждого НовыйИнтервал Из НовыеИнтервалы Цикл
						ИсправляемыйПериод.Добавить(НовыйИнтервал);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
			МенеджерРасчета.УстановитьНастройкиРасчетаПоУмолчанию();
			МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
			МенеджерРасчета.ИсправленныйДокумент = ИсправленныйДокумент;
			ТаблицаСотрудников = МенеджерРасчета.ТаблицаСотрудников();
			Для Каждого Интервал Из ИсправляемыйПериод Цикл
				Для Каждого СотрудникМассива Из Сотрудники Цикл
					НоваяСтрока = ТаблицаСотрудников.Добавить();
					НоваяСтрока.Сотрудник = СотрудникМассива;
					НоваяСтрока.ДатаНачала = Интервал.ДатаНачала;
					НоваяСтрока.ДатаОкончания = Интервал.ДатаОкончания;
				КонецЦикла;
			КонецЦикла;
			МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(ТаблицаСотрудников);
			ПлановыеНачисления = МенеджерРасчета.Зарплата.Начисления;
		Иначе
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
			МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
			МенеджерРасчета.ИсправленныйДокумент = ИсправленныйДокумент;
			ПлановыеНачисления = МенеджерРасчета.ТаблицаНачислений();
		КонецЕсли;
	КонецЕсли;
	
	// "новые" сотрудники
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	// 1. 
	// Получаем записи, которые, возможно, нужно сторнировать из-за расширения периода начисления.
	
	// Для чего временно удаляем движения регистра "Начисления".
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ТекущийНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		ТекущийНабор.Отбор.Регистратор.Установить(ДокументСсылка);
		ТекущийНабор.Записывать = Истина;
		ТекущийНабор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		ТекущийНабор.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
		ТекущийНабор.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ТекущийНабор.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ТекущийНабор.Записать();
	КонецЕсли;
	
	// "Новые" записи документа
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если Не ДокументБезДатаНачала Тогда
			Если СтрокаНачисления.ДатаНачала >= ПериодРегистрации Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.ВидРасчета = НачислениеДокумента;
		Иначе
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		КонецЕсли;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаНачисления.ПериодДействия);
		Иначе
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	НачисленияНабор.Очистить();
	
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(РегистраторНаборДляЗаполненияПерерасчета);
	
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаСторно);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		СтрокаНачисленийЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	// 2.
	// Выявляем начисления, которые необходимо доначислить в связи с исправлением.
	// Необходимо восстановить начисления в "старых" периодах по "старым" сотрудникам.
	
	ВременнаяСсылкаФизлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	ВременныйПериодРегистрации = ПериодРегистрации;
	ВременныйСледующийПериодРегистрации = ДобавитьМесяц(ВременныйПериодРегистрации, 1);
	
	ЗначенияПоказателейНабор = РегистрыСведений.ЗначенияПоказателейНачислений.СоздатьНаборЗаписей();
	ЗначенияПоказателейНабор.Отбор.Регистратор.Установить(РегистраторНаборДляЗаполненияПерерасчета);
	
	// Добавим во временный набор новые, исправленные записи.
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			Начисление = НачислениеДокумента;
		Иначе
			Начисление = СтрокаНачисления.Начисление;
		КонецЕсли;
		ВидНачисленияИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
		// Записи, представляющие собой плановые начисления пропускаем
		Если 	ВидНачисленияИнфо.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете 
			Или ВидНачисленияИнфо.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо; // ссылка на физлицо
		// Головная организация "нового" сотрудника.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "новый" сотрудник.
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ВидРасчета = Начисление;
		НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
		ИспользованиеПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРасчета, "ИспользованиеПериода");
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = ПериодРегистрации;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
		ИначеЕсли ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
		Иначе
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаНачисления.ПериодДействия);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		// Добавим во временный набор плановые начисления исправляемого периода.
		Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
			НоваяСтрока = НачисленияНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
			НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
			// Настоящая головная организация.
			НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[СтрокаНачисления.Сотрудник];
			НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "старый" сотрудник.
			НоваяСтрока.Регистратор = ВременнаяСсылка;
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
			// Сохраним показатели во временный набор записей.
			Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
				НоваяСтрокаПоказателя = ЗначенияПоказателейНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаПоказателя);
				НоваяСтрокаПоказателя.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
				НоваяСтрокаПоказателя.РегистраторИзмерение = РегистраторНаборДляЗаполненияПерерасчета;
			КонецЦикла;
		КонецЦикла;
		НачисленияНабор.Записать();
	КонецЕсли;
	
	ВременнаяСсылкаПолучениеДополнения = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеДополнения = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеДополнения);
	
	ДанныеПерерасчетовСторно = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых 
	// начислений, которые потребуется доначислить.
	Пока ВыборкаДанныеИсправленногоДокумента.Следующий() Цикл
		// Заполнение набора записей для получения доначислений из-за смещения периода.
		НоваяСтрока = НачисленияНаборПолучениеДополнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанныеИсправленногоДокумента);
		// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
		// Настоящая головная организация
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[ВыборкаДанныеИсправленногоДокумента.Сотрудник];
		// НоваяСтрока.Сотрудник 			// "старого" сотрудника оставляем.
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеДополнения;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.ВидРасчета = НачислениеДокумента;
		Иначе
			НоваяСтрока.ВидРасчета = ВыборкаДанныеИсправленногоДокумента.Начисление;
		КонецЕсли;
		ИспользованиеПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРасчета, "ИспользованиеПериода");
		НоваяСтрока.ПериодРегистрации = ВременныйСледующийПериодРегистрации;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации);
		ИначеЕсли ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НоваяСтрока.ПериодДействияНачало = ВыборкаДанныеИсправленногоДокумента.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(ВыборкаДанныеИсправленногоДокумента.ДатаОкончания);
		Иначе
			НоваяСтрока.ПериодДействияНачало = ВыборкаДанныеИсправленногоДокумента.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодДействия);
		КонецЕсли;
		
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетовСторно.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, ВыборкаДанныеИсправленногоДокумента);
		НоваяСтрокаПерерасчета.Результат = - ВыборкаДанныеИсправленногоДокумента.Результат;
		Если УчитыватьСуммуВычета Тогда
			НоваяСтрокаПерерасчета.СуммаВычета = - ВыборкаДанныеИсправленногоДокумента.СуммаВычета;
		КонецЕсли;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрокаПерерасчета.Начисление = НачислениеДокумента;
		Иначе
			НоваяСтрокаПерерасчета.Начисление = ВыборкаДанныеИсправленногоДокумента.Начисление;
		КонецЕсли;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрокаПерерасчета.ДатаНачала = ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации;
			НоваяСтрокаПерерасчета.ДатаОкончания = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации);
		ИначеЕсли ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НоваяСтрокаПерерасчета.ДатаНачала = ВыборкаДанныеИсправленногоДокумента.ДатаНачала;
			НоваяСтрокаПерерасчета.ДатаОкончания = КонецДня(ВыборкаДанныеИсправленногоДокумента.ДатаОкончания);
		Иначе
			НоваяСтрокаПерерасчета.ДатаНачала = ВыборкаДанныеИсправленногоДокумента.ПериодДействия;
			НоваяСтрокаПерерасчета.ДатаОкончания = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодДействия);
		КонецЕсли;
		
		Если Не ДокументБезВТомЧислеЗаСчетФБ Тогда
			НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ = - ВыборкаДанныеИсправленногоДокумента.РезультатВТомЧислеЗаСчетФБ;
		КонецЕсли;
		Если Не ДокументБезДатаНачала Тогда
			НоваяСтрокаПерерасчета.ОтработаноДней = - ВыборкаДанныеИсправленногоДокумента.ОтработаноДней;
			НоваяСтрокаПерерасчета.ОтработаноЧасов = - ВыборкаДанныеИсправленногоДокумента.ОтработаноЧасов;
			НоваяСтрокаПерерасчета.ОплаченоДней = - ВыборкаДанныеИсправленногоДокумента.ОплаченоДней;
			НоваяСтрокаПерерасчета.ОплаченоЧасов = - ВыборкаДанныеИсправленногоДокумента.ОплаченоЧасов;
		КонецЕсли;
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина;  // по умолчанию сторнируемые строки не пересчитываем
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = ВыборкаДанныеИсправленногоДокумента.Ссылка;
		
	КонецЦикла;
	
	// Вычисляем изменлся ли ФПД сторнируемых строк и если да - делаем строки рассчитываемыми (ФиксСторно = Ложь).
	ВременнаяСсылкаПолучениеФПД = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеФПД = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеФПД);
	Для Каждого Строка Из ДанныеПерерасчетовСторно Цикл
		НоваяСтрока = НачисленияНаборПолучениеФПД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеФПД;
	КонецЦикла;
	НачисленияНаборПолучениеФПД.Записать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылкаПолучениеФПД);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТНовыйФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК НачисленияФактическийПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = &Регистратор)
	|			И (Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
	|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
	|	НачисленияФактическийПериодДействия.Сторно КАК Сторно,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТСтарыйФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &ИсправленныйДокумент) КАК НачисленияФактическийПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = &ИсправленныйДокумент)
	|			И (Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыйФПД.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(НовыйФПД.ДатаНачала) КАК ПериодДействияНачало,
	|	МАКСИМУМ(НовыйФПД.ДатаОкончания) КАК ПериодДействияКонец,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НовыйФПД.ДатаНачала = СтарыйФПД.ДатаНачала
	|						И НовыйФПД.ДатаОкончания = СтарыйФПД.ДатаОкончания
	|					ИЛИ НовыйФПД.ВидРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ФПДСовпадает
	|ПОМЕСТИТЬ ВТПоверочныйФПД
	|ИЗ
	|	ВТНовыйФПД КАК НовыйФПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыйФПД КАК СтарыйФПД
	|		ПО НовыйФПД.Сотрудник = СтарыйФПД.Сотрудник
	|			И НовыйФПД.ВидРасчета = СтарыйФПД.ВидРасчета
	|			И (НЕ СтарыйФПД.Сторно)
	|			И НовыйФПД.ПериодДействияКонец = СтарыйФПД.ПериодДействияКонец
	|			И НовыйФПД.ПериодДействияНачало = СтарыйФПД.ПериодДействияНачало
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыйФПД.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПоверочныйФПД.ФПДСовпадает
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ ПоверочныйФПД.ПериодДействияНачало
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ПоверочныйФПД.ФПДСовпадает
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ ПоверочныйФПД.ПериодДействияКонец
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ПоверочныйФПД.ФПДСовпадает КАК СтрокаНеИзменилась
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоверочныйФПД КАК ПоверочныйФПД
	|		ПО Начисления.НомерСтроки = ПоверочныйФПД.НомерСтроки
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		Строка = ДанныеПерерасчетовСторно[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, Строка);
		НоваяСтрокаПерерасчета.ДатаНачала = Выборка.ПериодДействияНачало;
		НоваяСтрокаПерерасчета.ДатаОкончания = Выборка.ПериодДействияКонец;
		// если ФПД сторнируемой строки изменился - считаем её
		Если Не Выборка.СтрокаНеИзменилась Тогда
			НоваяСтрокаПерерасчета.ФиксСторно = Ложь;
		КонецЕсли;
	КонецЦикла;
	НачисленияНаборПолучениеФПД.Очистить();
	НачисленияНаборПолучениеФПД.Записать();
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент, ОписаниеТаблицы);
	ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// То, что сторнировалось бы при вводе прежнего начисления, это и есть то, что нужно 
	// доначислить сейчас, при его "отмене".
	ЗаписиДоначисления = НачисленияНаборПолучениеДополнения.ПолучитьДополнение();
	
	Для Каждого СтрокаДоначисления Из ЗаписиДоначисления Цикл
		Если НачалоМесяца(СтрокаДоначисления.ПериодДействияНачалоСторно) >= ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаДоначисления);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаДоначисления.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Ложь;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоначисления);
		НоваяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Ложь;
		НоваяСтрока.ПериодРегистрации = СтрокаДоначисления.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	НачисленияНабор.Очистить();
	НачисленияНабор.Записать();
	
	НаборДляЗаполненияПерерасчета.Записать();
	ЗначенияПоказателейНабор.Записать();
	
	// 3.
	// Получим начисления, зависимые от введенных сторно и доначислений.
	НачисленияПерерасчетНовые = НачисленияПерерасчет.Выгрузить().СкопироватьКолонки();
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчетНовые, РегистраторНаборДляЗаполненияПерерасчета, ДанныеПерерасчетов, );
	
	КлючевыеКолонки = "Сотрудник,Начисление";
	УсловияЗаменыСтрок = РасчетЗарплатыРасширенный.УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
	ОтборПоСотрудникам = Неопределено;
	Если Сотрудник <> Неопределено Тогда
		Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
			// Значит была ссылка на одного сотрудника.
			ОтборПоСотрудникам = Новый Структура("Сотрудник", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));
		Иначе
			ОтборПоСотрудникам = Новый Структура("Сотрудник", Сотрудник);
		КонецЕсли;
	КонецЕсли;
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНаНовыеДанные(НачисленияПерерасчет, НачисленияПерерасчетНовые, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	
	Если Не ОтменятьТранзакцию Тогда
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
		Если ТребуетсяВосстановлениеНачислений Тогда
			ЗначенияПоказателейНабор.Очистить();
			ЗначенияПоказателейНабор.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьТекстЗапроса(ТекстЗапроса, ИмяТаблицы, ОписаниеТаблицы, Сотрудник, ДокументБезДатаНачала)
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Таблица", ИмяТаблицы + ".Начисления");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеквизитПериодРегистрации", ОписаниеТаблицы.ИмяРеквизитаПериод);
	Если ПустаяСтрока(ОписаниеТаблицы.ИмяРеквизитаДокументОснование) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РегистрНачисления.ДокументОснование = Начисления.ДокументОснование)", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РегистрНачисления.ДокументОснование = Начисления.ДокументОснование)", "И (РегистрНачисления.ДокументОснование = Начисления." + ОписаниеТаблицы.ИмяРеквизитаДокументОснование + ")");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаОтработаноДней) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.ОтработаноДней + ЕСТЬNULL(РегистрНачисления.ОтработаноДней, 0) КАК ОтработаноДней", "0 КАК ОтработаноДней");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаОтработаноЧасов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.ОтработаноЧасов + ЕСТЬNULL(РегистрНачисления.ОтработаноЧасов, 0) КАК ОтработаноЧасов", "0 КАК ОтработаноЧасов");
	КонецЕсли;
	Если ДокументБезДатаНачала Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.ДатаНачала", "Начисления.Ссылка." + ОписаниеТаблицы.ИмяРеквизитаПериод);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.ДатаОкончания", "КОНЕЦПЕРИОДА(Начисления.Ссылка." + ОписаниеТаблицы.ИмяРеквизитаПериод + ", МЕСЯЦ)");
	КонецЕсли;
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		// Удаляем фрагменты запроса связанные с получением начисление из "шапки" документа.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",
		|	Начисления.Ссылка.ВидРасчета КАК Начисление", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РегистрНачисления.ВидРасчета = Начисления.Ссылка.ВидРасчета)", "И (РегистрНачисления.ВидРасчета = Начисления." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета + ")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Ссылка.ВидРасчета", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.Ссылка.ВидРасчета.ЗачетНормыВремени", "Начисления." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета + ".ЗачетНормыВремени");
	Иначе
		// Получаем начисление из "шапки" документа.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.Ссылка.ВидРасчета", "Начисления.Ссылка." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
	КонецЕсли;
	Если Сотрудник <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.Ссылка = &ИсправленныйДокумент",
		"Начисления.Ссылка = &ИсправленныйДокумент И Начисления.Сотрудник В(&Сотрудник)");
	КонецЕсли;
	
КонецПроцедуры

// Переносит значения показателей, зарегистрированные "при" сторнируемом документе в таблицу Начисления.
//
// Параметры:
//	Начисления - таблица значений см. РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления.
//
Процедура ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(Начисления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Начисление,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = Начисления.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = Начисления.СторнируемыйДокумент)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	
	ОтборСтрок = Новый Структура("СторнируемыйДокумент, ИдентификаторСтрокиВидаРасчета");
	
	НомерПоказателя = 0;
	Пока Выборка.Следующий() Цикл
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтрокиВидаРасчета 
			Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент Тогда
			НомерПоказателя = 1;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
			НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НайденнаяСтрока["Значение" + НомерПоказателя] = Выборка.Значение;
		КонецЦикла;
		НомерПоказателя = НомерПоказателя + 1;
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтрокиВидаРасчета;
		ТекущийРегистратор = Выборка.СторнируемыйДокумент;
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  - таблица с показателями перерасчета.
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправленияПособий(ИсправленныйДокумент, ПериодРегистрации, Пособия, ПособияПерерасчет, НачисленияПерерасчет, ОписаниеТаблицыПособияПерерасчеты, Сотрудник = Неопределено) Экспорт
	
	ПособияПерерасчет.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент");
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы + ".Пособия");
	
	Если Сотрудник <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка = &ИсправленныйДокумент",
			"Начисления.Ссылка = &ИсправленныйДокумент И Начисления.Сотрудник В(&Сотрудник)");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаПособия(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых 
	// начислений, которые потребуется доначислить.
	Пока Выборка.Следующий() Цикл
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, Выборка);
		
		НоваяСтрокаПерерасчета.Результат 								= - Выборка.Результат;
		НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ 				= - Выборка.РезультатВТомЧислеЗаСчетФБ;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаПервымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаПервымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаВторымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаВторымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаВторымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаВторымРебенком;
		
		НоваяСтрокаПерерасчета.Начисление = Выборка.Начисление;
		
		НоваяСтрокаПерерасчета.ДатаНачала = Выборка.ДатаНачала;
		НоваяСтрокаПерерасчета.ДатаОкончания = Выборка.ДатаОкончания;
		НоваяСтрокаПерерасчета.ОплаченоДней = - Выборка.ОплаченоДней;
		НоваяСтрокаПерерасчета.ОплаченоЧасов = - Выборка.ОплаченоЧасов;
		
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = Выборка.Ссылка;
		НоваяСтрокаПерерасчета.ФиксРасчет = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина;
		НоваяСтрокаПерерасчета.ФиксРасчетВремени = Истина;
		
	КонецЦикла;
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыПособияПерерасчеты.НомерТаблицы * 1000000 + 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// Переносим строки в коллекцию ПособияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, ПособияПерерасчет);
	
КонецПроцедуры

Функция ИнтервалПериода(ДатаНачала, ДатаОкончания)
	Интервал = Новый Структура("ДатаНачала, ДатаОкончания");
	Интервал.ДатаНачала = ДатаНачала;
	Интервал.ДатаОкончания = ДатаОкончания;
	Возврат Интервал;
	
КонецФункции

#КонецОбласти
