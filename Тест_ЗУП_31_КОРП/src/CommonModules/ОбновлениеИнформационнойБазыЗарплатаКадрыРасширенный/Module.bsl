
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для ее использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// ее свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыРасширенная";
	Описание.Версия = "3.1.6.6";
	
КонецПроцедуры

#Область ОбработчикиСобытийОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьРеквизитДопУпорядочиванияИерархическогоПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьРолиСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеНесколькихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьПризнакОбработкиВторымОтветственнымВМногофункциональныхДокументах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииПоМетаданным";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьРеквизитПредставлениеПериодаВРасчетныхДокументах";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаменитьОбъектыСИдентификаторомНаПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьРегистрОтработанноеВремяПоСотрудникамАвансом";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьВидОрганизации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.2";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.10";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьСпособРасчетаОплачиваемогоУчебногоОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.14.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьПризнакРассчитанностиОтпусковИКомандировок";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.РегламентированныеОтчеты) Тогда
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.17";
	Обработчик.Процедура = "Справочники.РегламентированныеОтчеты.ЗаполнитьСписокРегламентированныхОтчетов";
	Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.34";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.37";
	Обработчик.Процедура = "УчетСтажаПФРРасширенный.ЗаполнитьПервоначальныеДанныеУчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьОсновнойОтпуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаменитьСсылкиНаБанки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.8";
	Обработчик.Процедура = "РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.134";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УточнитьНаименованияОтпусковЗаСвойСчет";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.165";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьТерриториюВыполненияРаботВОрганизацииВНачисленияУдержанияПоКонтрагентамАкционерам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.50";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.81";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ЗаполнитьСпособРасчетаВидовОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.90";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьПолеМесяцВРегистреНачисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.89";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьПериодРегистрацииВРегистрацииПрочихДоходов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.109";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ПроверитьОбновитьСтраховыеВзносыПоФизическимЛицам";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9267f79f-8741-4d0c-97e3-fb07d3733103");
	Обработчик.Комментарий = НСтр("ru = 'Выполняется проверка и исправление ошибок регистрации страховые взносы по физическим лицам.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеПараметровНаборовСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.21";
	Обработчик.Процедура = "РегистрыСведений.ПодчиненностьПодразделенийОрганизаций.ЗаполнитьПодчиненностьПодразделений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.38";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ОбновитьВидНачисленияДляПособияНаПогребениеСотруднику";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.43";
	Обработчик.Процедура = "РегистрыСведений.ПодчиненностьПодразделенийОрганизаций.ЗаполнитьОрганизацию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.37";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьЦелевоеВремяКлючевыхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.44";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cec9e2a3-b3e6-4ea8-9b05-3bfdd1036f2e");
	Обработчик.Комментарий = НСтр("ru='Перенос данных о корректировках выплаты'");
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ОбновитьКорректировкиВыплатыКЗачету";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.51";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("87f13115-e3ce-455a-ae23-1e58ed4551ac");
	Обработчик.Процедура = "РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ЗаполнитьИнтервальныйРегистр";
	Обработчик.Комментарий = НСтр("ru='Заполнение интервальных данных регистра ""Значения периодических показателей сотрудников""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.51";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8f9cd14a-c497-45e3-b9c2-350a416ce52a");
	Обработчик.Процедура = "РегистрыСведений.ГрафикРаботыСотрудников.ЗаполнитьИнтервальныйРегистр";
	Обработчик.Комментарий = НСтр("ru='Заполнение интервальных данных регистра ""График работы сотрудников""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.73";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.104";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e9ff70cb-4332-48e1-88fe-e8ceab15c55c");
	Обработчик.Процедура = "УчетСтажаПФРРасширенный.ЗаполнитьДатыОкончанияВторичногоРегистраПоДоговорамГПХ";
	Обработчик.Комментарий = НСтр("ru='Заполнение даты окончания в регистре ""Периоды стажа ПФР"" по договорам ГПХ'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.115";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ОбновитьРегистрациюДоходовПоДоговорамПодряда";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d0edbf4f-5de0-4446-a7da-3f5045ccb957"); 
	Обработчик.Комментарий = НСтр("ru = 'Обновление регистрации доходов по договорам в учете страховых взносов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.127";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьПолеДоначислитьЗарплатуПриНеобходимости";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d849937a-6bc7-4ae0-941a-7b52e80d7e56"); 
	Обработчик.Комментарий = НСтр("ru = 'Заполнение поля ""Доначислить зарплату при необходимости"" в документах.'");
	
	РасчетЗарплатыРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетРабочегоВремениРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КадровыйУчетРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УправлениеШтатнымРасписанием.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСреднегоЗаработка.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ИсполнительныеЛисты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ЗаймыСотрудникам.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СостоянияСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СтатистикаПерсоналаРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОбменСБанкамиПоЗарплатнымПроектамРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтраховыхВзносовРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	РазрядыКатегорииДолжностей.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КонтрактыДоговорыСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ПерерасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОстаткиОтпусков.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.131";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "УчетСтажаПФРРасширенный.ЗаполнитьПолеГоловнаяОрганизацияВРегистреИспр";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eb1783cb-7a7b-48d2-8aeb-8f3652c5bc5f"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.132";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "УчетСтажаПФРРасширенный.ЗаполнитьПолеСотрудникВРегистрахУчетаИспр";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bccec9f5-5dc8-47c6-be44-4cab4b8caf73"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.56";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ЗаполнитьДатуПеречисленияНДФЛДокументыНезарплатныхДоходов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d1eb5e27-8585-4bcb-b3e3-b1a50269a5d1");
	
	// ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы
	
	// ЗарплатаКадрыПриложения.ПереносДанных
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПереносДанных");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПереносДанных
	
	// ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	
	// ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	
	// ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	
	// ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетХозрасчетныхОрганизаций");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	
	// ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыБазоваяВерсия");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	
	// ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью
	
	// ЗарплатаКадрыПриложения.КадровыйРезерв
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КадровыйРезерв
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбучениеРазвитие
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	
	// ЗарплатаКадрыПриложения.Дивиденды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Дивиденды
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЦепочкиДокументов");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЦепочкиДокументов
	
	// Медицина.ТарификационнаяОтчетностьУчрежденийФМБА
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец Медицина.ТарификационнаяОтчетностьУчрежденийФМБА
	
	// Медицина.ФедеральныйРегистрМедицинскихРаботников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец Медицина.ФедеральныйРегистрМедицинскихРаботников

	// ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	
	// ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы
	
	// ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонтрагентыСлужебный");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбновлениеИнформационнойБазыБЭО");
		Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Чатботы");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РаботаСРабочимКалендаремБЗК");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияРекрутинговыхСайтовРедакция3");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьФункциональныеОпцииПоМетаданным() Экспорт
	
	ИспользоватьВХО = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации");
	ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры = Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Получить();
	Если ИспользоватьВХО <> ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры Тогда
		Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Установить(ИспользоватьВХО);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров() Экспорт

	Константы.ИспользоватьКадровыйУчет.Установить(Истина);

	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	НеИспользоватьНачислениеЗарплаты = Константы.НеИспользоватьНачислениеЗарплаты.Получить();
	Если ИспользоватьНачислениеЗарплаты <> НеИспользоватьНачислениеЗарплаты Тогда
		Возврат;                 
	КонецЕсли;
	Константы.ИспользоватьНачислениеЗарплаты.Установить(Не ИспользоватьНачислениеЗарплаты);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДопУпорядочиванияИерархическогоПодразделений() Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПодразделениеОбъект.Записать();
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРолиСотрудников() Экспорт
	
	ЗарплатаКадрыРасширенный.ЗаполнитьРолиСотрудников();
	
КонецПроцедуры

Процедура УстановитьИспользованиеНесколькихОрганизаций() Экспорт 
	
	Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	
КонецПроцедуры

Процедура УстановитьПризнакОбработкиВторымОтветственнымВМногофункциональныхДокументах() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлановыеНачисления.Регистратор
	               |ИЗ
	               |	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ПлановыеНачисления.Регистратор ССЫЛКА Документ.ВозвратИзОтпускаПоУходуЗаРебенком
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеНачисления.Регистратор КАК Документ.ВозвратИзОтпускаПоУходуЗаРебенком).НачисленияУтверждены
	               |			КОГДА ПлановыеНачисления.Регистратор ССЫЛКА Документ.КадровыйПеревод
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеНачисления.Регистратор КАК Документ.КадровыйПеревод).НачисленияУтверждены
	               |			КОГДА ПлановыеНачисления.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеНачисления.Регистратор КАК Документ.ОтпускПоУходуЗаРебенком).НачисленияУтверждены
	               |			КОГДА ПлановыеНачисления.Регистратор ССЫЛКА Документ.ПриемНаРаботу
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеНачисления.Регистратор КАК Документ.ПриемНаРаботу).НачисленияУтверждены
	               |			КОГДА ПлановыеНачисления.Регистратор ССЫЛКА Документ.ПриказНаДоплатуДоСреднегоЗаработка
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеНачисления.Регистратор КАК Документ.ПриказНаДоплатуДоСреднегоЗаработка).РазмерДоплатыУтвержден
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	ЗначенияРеквизитов = Новый Структура("НачисленияУтверждены, РазмерДоплатыУтвержден", Истина, Истина);
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлановыеАвансы.Регистратор
	               |ИЗ
	               |	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ПлановыеАвансы.Регистратор ССЫЛКА Документ.ВозвратИзОтпускаПоУходуЗаРебенком
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеАвансы.Регистратор КАК Документ.ВозвратИзОтпускаПоУходуЗаРебенком).НачисленияУтверждены
	               |			КОГДА ПлановыеАвансы.Регистратор ССЫЛКА Документ.КадровыйПеревод
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеАвансы.Регистратор КАК Документ.КадровыйПеревод).НачисленияУтверждены
	               |			КОГДА ПлановыеАвансы.Регистратор ССЫЛКА Документ.ПриемНаРаботу
	               |				ТОГДА ВЫРАЗИТЬ(ПлановыеАвансы.Регистратор КАК Документ.ПриемНаРаботу).НачисленияУтверждены
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	ЗначенияРеквизитов = Новый Структура("НачисленияУтверждены", Истина);
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Начисления.Регистратор
	               |ИЗ
	               |	РегистрРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.БольничныйЛист
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.БольничныйЛист).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.Командировка
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.Командировка).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.ОплатаПоСреднемуЗаработку
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.ОплатаПоСреднемуЗаработку).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.Отпуск
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.Отпуск).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.Премия
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.Премия).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.Увольнение
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.Увольнение).ДокументРассчитан
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.ОтпускБезСохраненияОплаты
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.ОтпускБезСохраненияОплаты).ПерерасчетВыполнен
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.ПрогулНеявка
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.ПрогулНеявка).ПерерасчетВыполнен
	               |			КОГДА Начисления.Регистратор ССЫЛКА Документ.ПростойСотрудников
	               |				ТОГДА ВЫРАЗИТЬ(Начисления.Регистратор КАК Документ.ПростойСотрудников).ПерерасчетВыполнен
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	ЗначенияРеквизитов = Новый Структура("ДокументРассчитан, ПерерасчетВыполнен", Истина, Истина);
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РабочееВремяСотрудников.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК РабочееВремяСотрудников
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РабочееВремяСотрудников.Регистратор ССЫЛКА Документ.РаботаСверхурочно
	               |				ТОГДА ВЫРАЗИТЬ(РабочееВремяСотрудников.Регистратор КАК Документ.РаботаСверхурочно).ВремяУчтено
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ = ЛОЖЬ";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	ЗначенияРеквизитов = Новый Структура("ВремяУчтено", Истина);
	
	Пока Выборка.Следующий() Цикл 
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеМногофункциональностиВДокументах();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПредставлениеПериодаВРасчетныхДокументах() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	БольничныйЛист.Ссылка КАК Ссылка,
	               |	БольничныйЛист.ДатаНачала КАК ДатаНачала,
	               |	БольничныйЛист.ДатаОкончания КАК ДатаОкончания,
	               |	ЛОЖЬ КАК ОднаДата,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСобытия
	               |ИЗ
	               |	Документ.БольничныйЛист КАК БольничныйЛист
	               |ГДЕ
	               |	БольничныйЛист.Проведен
	               |	И БольничныйЛист.ПредставлениеПериода = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Командировка.Ссылка,
	               |	Командировка.ДатаНачала,
	               |	Командировка.ДатаОкончания,
	               |	ЛОЖЬ,
	               |	ДАТАВРЕМЯ(1, 1, 1)
	               |ИЗ
	               |	Документ.Командировка КАК Командировка
	               |ГДЕ
	               |	Командировка.Проведен
	               |	И Командировка.ПредставлениеПериода = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОплатаПоСреднемуЗаработку.Ссылка,
	               |	ОплатаПоСреднемуЗаработку.ДатаНачала,
	               |	ОплатаПоСреднемуЗаработку.ДатаОкончания,
	               |	ЛОЖЬ,
	               |	ДАТАВРЕМЯ(1, 1, 1)
	               |ИЗ
	               |	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	               |ГДЕ
	               |	ОплатаПоСреднемуЗаработку.Проведен
	               |	И ОплатаПоСреднемуЗаработку.ПредставлениеПериода = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Отпуск.Ссылка,
	               |	Отпуск.ДатаНачалаПериодаОтсутствия,
	               |	Отпуск.ДатаОкончанияПериодаОтсутствия,
	               |	ЛОЖЬ,
	               |	ДАТАВРЕМЯ(1, 1, 1)
	               |ИЗ
	               |	Документ.Отпуск КАК Отпуск
	               |ГДЕ
	               |	Отпуск.Проведен
	               |	И Отпуск.ПредставлениеПериода = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускБезСохраненияОплаты.Ссылка,
	               |	ОтпускБезСохраненияОплаты.ДатаНачала,
	               |	ОтпускБезСохраненияОплаты.ДатаОкончания,
	               |	ЛОЖЬ,
	               |	ДАТАВРЕМЯ(1, 1, 1)
	               |ИЗ
	               |	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	               |ГДЕ
	               |	ОтпускБезСохраненияОплаты.Проведен
	               |	И ОтпускБезСохраненияОплаты.ПредставлениеПериода = """"
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕдиновременноеПособиеЗаСчетФСС.Ссылка КАК Ссылка,
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ИСТИНА,
	               |	ЕдиновременноеПособиеЗаСчетФСС.ДатаСобытия КАК ДатаСобытия
	               |ИЗ
	               |	Документ.ЕдиновременноеПособиеЗаСчетФСС КАК ЕдиновременноеПособиеЗаСчетФСС
	               |ГДЕ
	               |	ЕдиновременноеПособиеЗаСчетФСС.Проведен
	               |	И ЕдиновременноеПособиеЗаСчетФСС.ПредставлениеПериода = """"
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Увольнение.Ссылка КАК Ссылка,
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	ИСТИНА,
	               |	Увольнение.ДатаУвольнения КАК ДатаУвольнения
	               |ИЗ
	               |	Документ.Увольнение КАК Увольнение
	               |ГДЕ
	               |	Увольнение.Проведен
	               |	И Увольнение.ПредставлениеПериода = """"
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПрогулНеявка.Ссылка,
	               |	ПрогулНеявка.ДатаНачала,
	               |	ПрогулНеявка.ДатаОкончания,
	               |	ПрогулНеявка.ОтсутствиеВТечениеЧастиСмены,
	               |	ПрогулНеявка.ДатаОтсутствия
	               |ИЗ
	               |	Документ.ПрогулНеявка КАК ПрогулНеявка
	               |ГДЕ
	               |	ПрогулНеявка.Проведен
	               |	И ПрогулНеявка.ПредставлениеПериода = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПростойСотрудников.Ссылка,
	               |	ПростойСотрудников.ДатаНачала,
	               |	ПростойСотрудников.ДатаОкончания,
	               |	ПростойСотрудников.ВнутрисменныйПростой,
	               |	ПростойСотрудников.ДатаПростоя
	               |ИЗ
	               |	Документ.ПростойСотрудников КАК ПростойСотрудников
	               |ГДЕ
	               |	ПростойСотрудников.Проведен
	               |	И ПростойСотрудников.ПредставлениеПериода = """"";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОднаДата Тогда 
			ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(Выборка.ДатаСобытия);
		Иначе 
			ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(Выборка.ДатаНачала, Выборка.ДатаОкончания);
		КонецЕсли;
		
		Если ПредставлениеПериода <> "" Тогда 
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПредставлениеПериода = ПредставлениеПериода;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьОбъектыСИдентификаторомНаПредопределенные() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтпусков.Ссылка КАК Ссылка,
	               |	ВидыОтпусков.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.ВидыОтпусков КАК ВидыОтпусков
	               |ГДЕ
	               |	ВидыОтпусков.УдалитьИдентификаторОбъекта <> """"
	               |	И НЕ ВидыОтпусков.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков." + Выборка.Идентификатор) = Неопределено Тогда 
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ИмяПредопределенныхДанных = Выборка.Идентификатор;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		    ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка,
	               |	ВидыИспользованияРабочегоВремени.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	               |ГДЕ
	               |	ВидыИспользованияРабочегоВремени.УдалитьИдентификаторОбъекта <> """"
	               |	И НЕ ВидыИспользованияРабочегоВремени.Предопределенный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + Выборка.Идентификатор) = Неопределено Тогда 
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ИмяПредопределенныхДанных = Выборка.Идентификатор;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		    ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПредопределенныеПоказатели = ЗарплатаКадрыРасширенныйПовтИсп.ИменаПредопределенныхПоказателей();
	
	Запрос.УстановитьПараметр("ПредопределенныеПоказатели", ПредопределенныеПоказатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка,
	               |	ПоказателиРасчетаЗарплаты.УдалитьИдентификаторОбъекта КАК Идентификатор
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.УдалитьИдентификаторОбъекта В(&ПредопределенныеПоказатели)
	               |	И НЕ ПоказателиРасчетаЗарплаты.Предопределенный";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Если ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + Выборка.Идентификатор) = Неопределено Тогда 
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ИмяПредопределенныхДанных = Выборка.Идентификатор;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		    ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьРегистрОтработанноеВремяПоСотрудникамАвансом() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияУдержанияПоСотрудникамАвансом.Период,
	               |	НачисленияУдержанияПоСотрудникамАвансом.Регистратор,
	               |	НачисленияУдержанияПоСотрудникамАвансом.Организация,
	               |	НачисленияУдержанияПоСотрудникамАвансом.ФизическоеЛицо,
	               |	НачисленияУдержанияПоСотрудникамАвансом.Сотрудник,
	               |	НачисленияУдержанияПоСотрудникамАвансом.Подразделение,
	               |	НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание КАК Начисление,
	               |	НачисленияУдержанияПоСотрудникамАвансом.УдалитьОтработаноДней КАК ОтработаноДней,
	               |	НачисленияУдержанияПоСотрудникамАвансом.УдалитьОтработаноЧасов КАК ОтработаноЧасов,
	               |	НачисленияУдержанияПоСотрудникамАвансом.УдалитьОплаченоДней КАК ОплаченоДней,
	               |	НачисленияУдержанияПоСотрудникамАвансом.УдалитьОплаченоЧасов КАК ОплаченоЧасов,
	               |	НачисленияУдержанияПоСотрудникамАвансом.ГруппаНачисленияУдержанияВыплаты,
	               |	НачисленияУдержанияПоСотрудникамАвансом.ПериодДействия
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
	               |ГДЕ
	               |	НЕ(НачисленияУдержанияПоСотрудникамАвансом.УдалитьОтработаноДней = 0
	               |				И НачисленияУдержанияПоСотрудникамАвансом.УдалитьОтработаноЧасов = 0
	               |				И НачисленияУдержанияПоСотрудникамАвансом.УдалитьОплаченоДней = 0
	               |				И НачисленияУдержанияПоСотрудникамАвансом.УдалитьОплаченоЧасов = 0)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникамАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОсновнойОтпуск() Экспорт
	
	ОсновнойОтпускСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	
	Если ОсновнойОтпускСсылка = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не обнаружен предопределенный элемент Справочник.ВидыОтпусков.Основной'");
	КонецЕсли;
	
	ВидОтпуска = ОсновнойОтпускСсылка.ПолучитьОбъект();
	ВидОтпуска.ОсновнойОтпуск = Истина;
	ВидОтпуска.Записать();
	
КонецПроцедуры

Процедура УстановитьВидОрганизации() Экспорт
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	Если РаботаВХозрасчетнойОрганизации = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Константы.РаботаВХозрасчетнойОрганизации.Установить(РаботаВХозрасчетнойОрганизации);
	Константы.РаботаВБюджетномУчреждении.Установить(Не РаботаВХозрасчетнойОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьСпособРасчетаОплачиваемогоУчебногоОтпуска() Экспорт
	ОплачиваемыйУчебныйОтпуск = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
	Если НЕ ОплачиваемыйУчебныйОтпуск = Неопределено Тогда
		ОплачиваемыйУчебныйОтпускОбъект = ОплачиваемыйУчебныйОтпуск.ПолучитьОбъект();
		ОплачиваемыйУчебныйОтпускОбъект.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях;
		ОплачиваемыйУчебныйОтпускОбъект.ОбменДанными.Загрузка = Истина;
		ОплачиваемыйУчебныйОтпускОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата() Экспорт

	Константы.ИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата.Установить(Константы.ИспользоватьСтатьиФинансированияЗарплата.Получить() И Константы.ИспользоватьНачислениеЗарплаты.Получить());

КонецПроцедуры

Процедура УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций() Экспорт
				
	Константы.ИспользоватьНачислениеЗарплатыВНесколькихОрганизациях.Установить(ЗарплатаКадрыРасширенный.ИспользоватьНачислениеЗарплатыНесколькихОрганизаций());
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях() Экспорт
										
	Константы.РаботаВНесколькихХозрасчетныхОрганизациях.Установить(ЗарплатаКадрыРасширенный.РаботаВНесколькихХозрасчетныхОрганизациях());
	
КонецПроцедуры

Процедура ЗаполнитьПризнакРассчитанностиОтпусковИКомандировок() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	НЕ Отпуск.ДокументРассчитан
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Командировка.Ссылка
		|ИЗ
		|	Документ.Командировка КАК Командировка
		|ГДЕ
		|	НЕ Командировка.ДокументРассчитан";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДокументРассчитан = Истина;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов() Экспорт 
	КоллекцияОписаний = Новый Массив;
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ИмяДокумента", "Увольнение");
	ОписаниеДокумента.Вставить("ИмяПоляПериодРегистрации", "ПериодРегистрации");
	ОписаниеДокумента.Вставить("ИмяТаблицыВзносов", "Взносы");

	КоллекцияОписаний.Добавить(ОписаниеДокумента);
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ИмяДокумента", "ОтпускПоУходуЗаРебенком");
	ОписаниеДокумента.Вставить("ИмяПоляПериодРегистрации", "ПериодРегистрации");
	ОписаниеДокумента.Вставить("ИмяТаблицыВзносов", "Взносы");
	
	КоллекцияОписаний.Добавить(ОписаниеДокумента);
	
	Для Каждого ОписаниеДокумента Из КоллекцияОписаний Цикл
		УчетСтраховыхВзносов.ЗаполнитьПолеДатаПолученияДоходаПоОписаниюДокумента(ОписаниеДокумента);		
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям() Экспорт
	ЗарплатаКадрыРасширенный.ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям();	
КонецПроцедуры	

Процедура ЗаменитьРазделенныеДанныеОбщими() Экспорт
	
	ИзмененныеОбъекты = Новый Соответствие;
	
	// 1. Справочник.ВидыВычетовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыВычетовНДФЛ, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.БольничныйЛист.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ВыплатаБывшимСотрудникам.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.ДоговорАвторскогоЗаказа.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.Реквизиты.КодВычетаЛичный);
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ТабличныеЧасти.ВычетыНаДетей.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Командировка.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.МатериальнаяПомощь.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НачисленияПоДоговорам.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.ПредоставленныеВычеты.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОплатаПоСреднемуЗаработку.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Отпуск.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускБезСохраненияОплаты.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускБезСохраненияОплаты.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.ОплатаТруда.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ОтпускПоУходуЗаРебенком.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.Сотрудники.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетНДФЛ.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Премия.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.ПрогулНеявка.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПрогулНеявка.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.ПростойСотрудников.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РазовоеНачисление.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.РегистрацияПрочихДоходов.Реквизиты.КодВычетаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОВычетах.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СторнированиеНачислений.ТабличныеЧасти.ДоначисленияИПерерасчеты.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.СторнированиеНачислений.ТабличныеЧасти.Сторнировано.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НДФЛ.Реквизиты.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.Начисления.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.НачисленияПерерасчет.Реквизиты.КодВычета);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.ТабличныеЧасти.ПримененныеВычетыНаДетейИИмущественные.Реквизиты.КодВычета);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ.Измерения.КодВычета);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВЗановоСозданномПодчиненномРегистреСведений(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ.Ресурсы.КодВычетаЛичный);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛИспр.Ресурсы.КодВычетаЛичный);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодВычета);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 2. Справочник.ВидыДоходовНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовНДФЛ, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.ВидыВыплатБывшимСотрудникам.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыДоговоровАвторскогоЗаказа.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыПрочихДоходовФизическихЛиц.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НачисленияПоДоговорам.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ.ТабличныеЧасти.НДФЛУдержанный.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.КодДоходаНДФЛ);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.СведенияОДоходах.Реквизиты.КодДохода);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаНДФЛ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ.Измерения.КодДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Поля, СоответствиеСсылок);
	
	// 3. Справочник.ВидыДоходовПоСтраховымВзносам
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыДоходовПоСтраховымВзносам, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.ВидыВыплатБывшимСотрудникам.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыДоговоровАвторскогоЗаказа.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Справочники.ВидыПрочихДоходовФизическихЛиц.Реквизиты.КодДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.Документы.АктПроверкиСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ОперацияУчетаПоСтраховымВзносам.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПерерасчетСтраховыхВзносов.ТабличныеЧасти.СведенияОДоходах.Реквизиты.ВидДохода);
	Реквизиты.Добавить(Метаданные.Документы.ПризПодарок.Реквизиты.ВидДоходаСтраховыеВзносы);
	Реквизиты.Добавить(Метаданные.ПланыВидовРасчета.Начисления.Реквизиты.КодДоходаСтраховыеВзносы);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам.Ресурсы.КодДоходаСтраховыеВзносы);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПлановыеНачисленияПоДоговорам, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.Измерения.ВидДохода);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы, Поля, СоответствиеСсылок);
	
	// 4. Справочник.ВидыОбщественноПолезнойДеятельностиСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 5. Справочник.ВидыТарифовСтраховыхВзносов
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ВидыТарифовСтраховыхВзносов, "ИмяПредопределенныхДанных");
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.Ресурсы.ВидТарифа);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов, Поля, СоответствиеСсылок);
	
	// 6. Справочник.ОснованияДосрочногоНазначенияПенсии
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсии, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.Должности.Реквизиты.ОснованиеДосрочногоНазначенияПенсии);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ВидДеятельности);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ОснованиеВыслугиЛет);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	// 7. Справочник.ОснованияДосрочногоНазначенияПенсииДляСЗВК
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеВыслугиЛет);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 8. Справочник.ОснованияИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияИсчисляемогоСтраховогоСтажа, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОснованиеИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 9. Справочник.ОснованияУвольнения
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОснованияУвольнения, "Наименование");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПереводКДругомуРаботодателю.Реквизиты.СтатьяТКРФ);
	Реквизиты.Добавить(Метаданные.Документы.Увольнение.Реквизиты.СтатьяТКРФ);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 10. Справочник.ОсобыеУсловияТрудаДляСЗВКПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаДляСЗВКПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 11. Справочник.ОсобыеУсловияТрудаПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ОсобыеУсловияТрудаПФР, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Справочники.Должности.Реквизиты.ОсобыеУсловияТрудаПФР);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена по наборам записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ОсобыеУсловияТруда);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	// 12. Справочник.ПараметрыИсчисляемогоСтраховогоСтажа
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ПараметрыИсчисляемогоСтраховогоСтажа, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТретийПараметрИсчисляемогоСтажа);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// 13. Справочник.СтатусыНалогоплательщиковПоНДФЛ
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ, "ИмяПредопределенныхДанных");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия.Реквизиты.СтатусНалогоплательщикаПолучателя);
	Реквизиты.Добавить(Метаданные.Документы.СправкаНДФЛ.Реквизиты.СтатусНалогоплательщика);
	Реквизиты.Добавить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.ТабличныеЧасти.Сотрудники.Реквизиты.СтатусНалогоплательщика);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена в наборах записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Ресурсы.Статус);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ, Поля, СоответствиеСсылок);
	
	// 14. Справочник.ТерриториальныеУсловияПФР
	СоответствиеСсылок = СоответствиеСсылок(Метаданные.Справочники.ТерриториальныеУсловияПФР, "Код");
	МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеСсылок, "Ключ");
	
	// Замена по ссылочным объектам
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Метаданные.Документы.Командировка.Реквизиты.ТерриториальныеУсловияНаПериодКомандировки);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.Сотрудники.Реквизиты.ТерриториальныеУсловияНа31_12_2001);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСЗВ_К.ТабличныеЧасти.СведенияДляОценкиПенсионныхПрав.Реквизиты.КодСтажа);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаДокументовСПВ_2.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	Реквизиты.Добавить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеЧасти.ЗаписиОСтаже.Реквизиты.ТерриториальныеУсловия);
	ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, Реквизиты, ИзмененныеОбъекты);
	
	// Замена в наборах записей
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПараметрыПериодовСтажаПФРИспр, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ПериодыСтажаПФР.Ресурсы.ТерриториальныеУсловия);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ПериодыСтажаПФР, Поля, СоответствиеСсылок);
	
	Поля = Новый Массив;
	Поля.Добавить(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР.Ресурсы.ТерриториальныеУсловияПФР);
	ЗаменитьСсылкиВРегистре(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР, Поля, СоответствиеСсылок);
	
	// Записываем ссылочные объекты
	Для Каждого КлючИЗначение Из ИзмененныеОбъекты Цикл
		Объект = КлючИЗначение.Значение;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиНаБанки() Экспорт
	
	Если Метаданные.Справочники.Найти("УдалитьБанки") <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если Не ОбщегоНазначения.РазделениеВключено()
			И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КлассификаторБанков) Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	БанковскиеСчетаКонтрагентов.УдалитьБанк.Код КАК БИК,
				|	БанковскиеСчетаКонтрагентов.УдалитьБанк.Наименование КАК Наименование,
				|	""БанковскиеСчетаКонтрагентов"" КАК ТипИсточника,
				|	СУММА(1) КАК Количество
				|ПОМЕСТИТЬ ВТПоИсточникам
				|ИЗ
				|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
				|ГДЕ
				|	БанковскиеСчетаКонтрагентов.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	БанковскиеСчетаКонтрагентов.УдалитьБанк.Код,
				|	БанковскиеСчетаКонтрагентов.УдалитьБанк.Наименование
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗарплатныеПроекты.УдалитьБанк.Код,
				|	ЗарплатныеПроекты.УдалитьБанк.Наименование,
				|	""ЗарплатныеПроекты"",
				|	СУММА(1)
				|ИЗ
				|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
				|ГДЕ
				|	ЗарплатныеПроекты.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗарплатныеПроекты.УдалитьБанк.Код,
				|	ЗарплатныеПроекты.УдалитьБанк.Наименование
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВедомостьНаВыплатуЗарплатыПеречислением.УдалитьБанк.Код,
				|	ВедомостьНаВыплатуЗарплатыПеречислением.УдалитьБанк.Наименование,
				|	""ВедомостьНаВыплатуЗарплатыПеречислением"",
				|	СУММА(1)
				|ИЗ
				|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ВедомостьНаВыплатуЗарплатыПеречислением
				|ГДЕ
				|	ВедомостьНаВыплатуЗарплатыПеречислением.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ВедомостьНаВыплатуЗарплатыПеречислением.УдалитьБанк.Код,
				|	ВедомостьНаВыплатуЗарплатыПеречислением.УдалитьБанк.Наименование
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк.Код,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк.Наименование,
				|	""ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам"",
				|	СУММА(1)
				|ИЗ
				|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
				|ГДЕ
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк.Код,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк.Наименование
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.УдалитьБанк.Код,
				|	ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.УдалитьБанк.Наименование,
				|	""ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов"",
				|	СУММА(1)
				|ИЗ
				|	Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов КАК ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов
				|ГДЕ
				|	ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.УдалитьБанк.Наименование,
				|	ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.УдалитьБанк.Код
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.УдалитьБанк.Код,
				|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.УдалитьБанк.Наименование,
				|	""ЗаявлениеВФССОВозмещенииРасходовНаПогребение"",
				|	СУММА(1)
				|ИЗ
				|	Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение КАК ЗаявлениеВФССОВозмещенииРасходовНаПогребение
				|ГДЕ
				|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.УдалитьБанк.Код,
				|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.УдалитьБанк.Наименование
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьБанк.Код,
				|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьБанк.Наименование,
				|	""ЗаявлениеСотрудникаНаВыплатуПособия"",
				|	СУММА(1)
				|ИЗ
				|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудникаНаВыплатуПособия
				|ГДЕ
				|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьБанк.Код,
				|	ЗаявлениеСотрудникаНаВыплатуПособия.УдалитьБанк.Наименование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоИсточникам.БИК,
				|	ПоИсточникам.Наименование,
				|	ПоИсточникам.ТипИсточника,
				|	СУММА(ПоИсточникам.Количество) КАК Количество
				|ПОМЕСТИТЬ ПоИсточникам
				|ИЗ
				|	ВТПоИсточникам КАК ПоИсточникам
				|
				|СГРУППИРОВАТЬ ПО
				|	ПоИсточникам.БИК,
				|	ПоИсточникам.Наименование,
				|	ПоИсточникам.ТипИсточника
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПоИсточникам.БИК,
				|	ПоИсточникам.Наименование,
				|	ПоИсточникам.ТипИсточника,
				|	ПоИсточникам.Количество,
				|	ВЫБОР
				|		КОГДА КлассификаторБанков.Ссылка ЕСТЬ NULL 
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЕстьВКлассификаторе
				|ПОМЕСТИТЬ ВТИспользуемыеБанки
				|ИЗ
				|	ПоИсточникам КАК ПоИсточникам
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
				|		ПО ПоИсточникам.БИК = КлассификаторБанков.Код
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИспользуемыеБанки.БИК,
				|	МАКСИМУМ(ИспользуемыеБанки.Наименование) КАК Наименование
				|ИЗ
				|	ВТИспользуемыеБанки КАК ИспользуемыеБанки
				|ГДЕ
				|	НЕ ИспользуемыеБанки.ЕстьВКлассификаторе
				|
				|СГРУППИРОВАТЬ ПО
				|	ИспользуемыеБанки.БИК";
				
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					КлассификаторБанковОбъект = Справочники.КлассификаторБанков.СоздатьЭлемент();
					КлассификаторБанковОбъект.Код = Выборка.БИК;
					КлассификаторБанковОбъект.Наименование = Выборка.Наименование;
					КлассификаторБанковОбъект.ДеятельностьПрекращена = Истина;
					
					КлассификаторБанковОбъект.ОбменДанными.Загрузка = Истина;
					КлассификаторБанковОбъект.Записать();
					
				КонецЦикла; 
				
			КонецЕсли;
		
		КонецЕсли;
		
		// Заполнение ссылок
		
		// Ссылочные объекты
		ЗаменитьСсылкиНаБанкиВОбъектах("Справочник.БанковскиеСчетаКонтрагентов");
		ЗаменитьСсылкиНаБанкиВОбъектах("Справочник.ЗарплатныеПроекты");
		ЗаменитьСсылкиНаБанкиВОбъектах("Документ.ВедомостьНаВыплатуЗарплатыПеречислением");
		ЗаменитьСсылкиНаБанкиВОбъектах("Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов");
		ЗаменитьСсылкиНаБанкиВОбъектах("Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение");
		ЗаменитьСсылкиНаБанкиВОбъектах("Документ.ЗаявлениеСотрудникаНаВыплатуПособия");
		
		// Регистр сведений ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо
			|ИЗ
			|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
			|		ПО (ВЫРАЗИТЬ(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк КАК Справочник.УдалитьБанки).Код = КлассификаторБанков.Код)
			|ГДЕ
			|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
			|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо,
				|	ВЫБОР
				|		КОГДА ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
				|			ТОГДА ЕСТЬNULL(КлассификаторБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка))
				|		ИНАЧЕ ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Банк
				|	КОНЕЦ КАК Банк,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект,
				|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ
				|ИЗ
				|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
				|		ПО (ВЫРАЗИТЬ(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.УдалитьБанк КАК Справочник.УдалитьБанки).Код = КлассификаторБанков.Код)";
			
			НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УточнитьНаименованияОтпусковЗаСвойСчет() Экспорт
	Отпуск = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыПоТКРФ");
	Если НЕ Отпуск = Неопределено Тогда
		ОтпускОбъект = Отпуск.ПолучитьОбъект();
		ОтпускОбъект.ОбменДанными.Загрузка = Истина;
		ОтпускОбъект.Наименование		= НСтр("ru = 'Отпуск без оплаты в соотв. с частью 2 статьи 128 ТК РФ'");
		ОтпускОбъект.НаименованиеПолное	= НСтр("ru = 'Отпуск без оплаты в соотв. с частью 2 статьи 128 ТК РФ'");
		ОтпускОбъект.Записать();
	КонецЕсли;
	Отпуск = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
	Если НЕ Отпуск = Неопределено Тогда
		ОтпускОбъект = Отпуск.ПолучитьОбъект();
		ОтпускОбъект.ОбменДанными.Загрузка = Истина;
		ОтпускОбъект.Наименование		= НСтр("ru = 'Отпуск без оплаты в соотв. с частью 1 статьи 128 ТК РФ'");
		ОтпускОбъект.НаименованиеПолное	= НСтр("ru = 'Отпуск без оплаты в соотв. с частью 1 статьи 128 ТК РФ'");
		ОтпускОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТерриториюВыполненияРаботВОрганизацииВНачисленияУдержанияПоКонтрагентамАкционерам() Экспорт

	НДФЛ = ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НДФЛ", НДФЛ);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации.Ссылка ЕСТЬ NULL 
	|	И НачисленияУдержания.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И НачисленияУдержания.НачислениеУдержание В(&НДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Период,
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Сумма,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ДокументОснование,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации.Ссылка ЕСТЬ NULL 
	|				И НачисленияУдержания.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|				И НачисленияУдержания.НачислениеУдержание В (&НДФЛ)
	|			ТОГДА НачисленияУдержания.Подразделение
	|		ИНАЧЕ НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации
	|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы() Экспорт 
	
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	
	Если РаботаВХозрасчетнойОрганизации = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКонстант = "ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	УстанавливаемыеЗначения = Новый Структура(ИменаКонстант);
	УстанавливаемыеЗначения.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = Истина;
	
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	
	УстанавливатьЗначения = Ложь;
	Для Каждого КлючИЗначение Из УстанавливаемыеЗначения Цикл
		Если НаборКонстант[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			УстанавливатьЗначения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не УстанавливатьЗначения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НаборКонстант, УстанавливаемыеЗначения);
	НаборКонстант.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПолеМесяцВРегистреНачисления() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Регистратор
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Набор.Прочитать();
		Набор.Записать(,Истина);
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьПериодРегистрацииВРегистрацииПрочихДоходов() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияПрочихДоходов.Ссылка,
	|	НАЧАЛОПЕРИОДА(РегистрацияПрочихДоходов.ПланируемаяДатаВыплаты, МЕСЯЦ) КАК ПериодРегистрации
	|ИЗ
	|	Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|ГДЕ
	|	РегистрацияПрочихДоходов.ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПериодРегистрации = Выборка.ПериодРегистрации;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОбновитьСтраховыеВзносыПоФизическимЛицам(ПараметрыОбновления) Экспорт
	
	Если Не ПараметрыОбновления.Свойство("ПериодыПроверки") Тогда
		ПараметрыОбновления.Вставить("ПериодыПроверки");
	КонецЕсли;
			
	Если ПараметрыОбновления.ПериодыПроверки = Неопределено Тогда
		
		// первый запуск обработчика
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраховыеВзносы.Организация КАК Организация,
		|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) КАК Период,
		|	СУММА(СтраховыеВзносы.ПФРПоСуммарномуТарифу + СтраховыеВзносы.ПФРПоСуммарномуТарифуЕНВД + СтраховыеВзносы.ПФРПоСуммарномуТарифуСПревышения) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(СтраховыеВзносы.ПФРСтраховая + СтраховыеВзносы.ПФРСтраховаяЕНВД + СтраховыеВзносы.ПФРСтраховаяСПревышения) КАК ПФРСтраховая,
		|	СУММА(СтраховыеВзносы.ПФРНакопительная + СтраховыеВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительная,
		|	СУММА(СтраховыеВзносы.ФСС + СтраховыеВзносы.ФССЕНВД) КАК ФСС,
		|	СУММА(СтраховыеВзносы.ФФОМС + СтраховыеВзносы.ФФОМСЕНВД) КАК ФФОМС,
		|	СУММА(СтраховыеВзносы.ТФОМС + СтраховыеВзносы.ТФОМСЕНВД) КАК ТФОМС,
		|	СУММА(СтраховыеВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(СтраховыеВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(СтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи
		|ПОМЕСТИТЬ ВТИсчисленныеВзносы
		|ИЗ
		|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК СтраховыеВзносы
		|
		|СГРУППИРОВАТЬ ПО
		|	СтраховыеВзносы.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ),
		|	СтраховыеВзносы.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Период,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтраховыеВзносы.Организация КАК Организация,
		|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) КАК Период,
		|	СУММА(СтраховыеВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(СтраховыеВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(СтраховыеВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(СтраховыеВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(СтраховыеВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(СтраховыеВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(СтраховыеВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(СтраховыеВзносы.ФСС) КАК ФСС,
		|	СУММА(СтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи
		|ПОМЕСТИТЬ ВТСтраховыеВзносы
		|ИЗ
		|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
		|
		|СГРУППИРОВАТЬ ПО
		|	СтраховыеВзносы.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ),
		|	СтраховыеВзносы.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Период,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсчисленныеВзносы.Период КАК Период
		|ИЗ
		|	ВТИсчисленныеВзносы КАК ИсчисленныеВзносы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтраховыеВзносы КАК СтраховыеВзносы
		|		ПО ИсчисленныеВзносы.Организация = СтраховыеВзносы.Организация
		|			И ИсчисленныеВзносы.Период = СтраховыеВзносы.Период
		|			И ИсчисленныеВзносы.ФизическоеЛицо = СтраховыеВзносы.ФизическоеЛицо
		|ГДЕ
		|	(ЕСТЬNULL(ИсчисленныеВзносы.ПФРПоСуммарномуТарифу, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРПоСуммарномуТарифу, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРСтраховая, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРСтраховая, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНакопительная, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНакопительная, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ФСС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ФСС, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ФФОМС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ФФОМС, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ТФОМС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ТФОМС, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНаДоплатуЛетчикам, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНаДоплатуЛетчикам, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНаДоплатуШахтерам, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНаДоплатуШахтерам, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, 0)
		|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, 0))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтраховыеВзносы.Период
		|ИЗ
		|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
		|ГДЕ
		|	СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И СтраховыеВзносы.Начисление = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыОбновления.ПериодыПроверки = Результат.Выгрузить().ВыгрузитьКолонку("Период");
		
	КонецЕсли;
	
	Если ПараметрыОбновления.ПериодыПроверки.Количество() = 0 Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПериодПроверки = ПараметрыОбновления.ПериодыПроверки[0];
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПериодПроверки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеВзносы.Организация КАК Организация,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) КАК Период,
	|	СУММА(СтраховыеВзносы.ПФРПоСуммарномуТарифу + СтраховыеВзносы.ПФРПоСуммарномуТарифуЕНВД + СтраховыеВзносы.ПФРПоСуммарномуТарифуСПревышения) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(СтраховыеВзносы.ПФРСтраховая + СтраховыеВзносы.ПФРСтраховаяЕНВД + СтраховыеВзносы.ПФРСтраховаяСПревышения) КАК ПФРСтраховая,
	|	СУММА(СтраховыеВзносы.ПФРНакопительная + СтраховыеВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительная,
	|	СУММА(СтраховыеВзносы.ФСС + СтраховыеВзносы.ФССЕНВД) КАК ФСС,
	|	СУММА(СтраховыеВзносы.ФФОМС + СтраховыеВзносы.ФФОМСЕНВД) КАК ФФОМС,
	|	СУММА(СтраховыеВзносы.ТФОМС + СтраховыеВзносы.ТФОМСЕНВД) КАК ТФОМС,
	|	СУММА(СтраховыеВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
	|	СУММА(СтраховыеВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
	|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 + СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 + СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(СтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СтраховыеВзносы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТИсчисленныеВзносы
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК СтраховыеВзносы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) = &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ),
	|	СтраховыеВзносы.Организация,
	|	СтраховыеВзносы.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносы.Организация КАК Организация,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) КАК Период,
	|	СУММА(СтраховыеВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(СтраховыеВзносы.ПФРСтраховая) КАК ПФРСтраховая,
	|	СУММА(СтраховыеВзносы.ПФРНакопительная) КАК ПФРНакопительная,
	|	СУММА(СтраховыеВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
	|	СУММА(СтраховыеВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
	|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(СтраховыеВзносы.ФФОМС) КАК ФФОМС,
	|	СУММА(СтраховыеВзносы.ТФОМС) КАК ТФОМС,
	|	СУММА(СтраховыеВзносы.ФСС) КАК ФСС,
	|	СУММА(СтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СтраховыеВзносы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТСтраховыеВзносы
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) = &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ),
	|	СтраховыеВзносы.Организация,
	|	СтраховыеВзносы.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеВзносы.Организация КАК Организация,
	|	ИсчисленныеВзносы.ФизическоеЛицо
	|ИЗ
	|	ВТИсчисленныеВзносы КАК ИсчисленныеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтраховыеВзносы КАК СтраховыеВзносы
	|		ПО ИсчисленныеВзносы.ФизическоеЛицо = СтраховыеВзносы.ФизическоеЛицо
	|			И ИсчисленныеВзносы.Регистратор = СтраховыеВзносы.Регистратор
	|ГДЕ
	|	(ЕСТЬNULL(ИсчисленныеВзносы.ПФРПоСуммарномуТарифу, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРПоСуммарномуТарифу, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРСтраховая, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРСтраховая, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНакопительная, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНакопительная, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ФСС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ФСС, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ФФОМС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ФФОМС, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ТФОМС, 0) <> ЕСТЬNULL(СтраховыеВзносы.ТФОМС, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНаДоплатуЛетчикам, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНаДоплатуЛетчикам, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРНаДоплатуШахтерам, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРНаДоплатуШахтерам, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, 0)
	|			ИЛИ ЕСТЬNULL(ИсчисленныеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, 0) <> ЕСТЬNULL(СтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, 0))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтраховыеВзносы.Регистратор,
	|	СтраховыеВзносы.Организация,
	|	СтраховыеВзносы.ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|ГДЕ
	|	СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И НАЧАЛОПЕРИОДА(СтраховыеВзносы.Период, МЕСЯЦ) = &Период
	|	И СтраховыеВзносы.Начисление = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	
	ТаблицаФизилиц = Результат.Выгрузить();
	
	ОтборРегистраторов = Новый Структура("Организация");
	ОтборФизлиц = Новый Структура("ФизическоеЛицо");
	
	Выборка = Результат.Выбрать();
	ВсеДанныеОбработаны = Истина;
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		НачатьТранзакцию();
		
		ТекущаяОрганизация = Выборка.Организация;
		
		ОтборРегистраторов.Организация = ТекущаяОрганизация;
		
		ТабРегистраторов = ТаблицаФизилиц.Скопировать(ОтборРегистраторов);
		ТабРегистраторов.Свернуть("Регистратор");
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ИсчисленныеСтраховыеВзносы.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных  = ТабРегистраторов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.СведенияОДоходахСтраховыеВзносы.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных  = ТабРегистраторов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.СтраховыеВзносыПоФизическимЛицам.НаборЗаписей");
		ЭлементБлокировки.ИсточникДанных  = ТабРегистраторов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
		
		Попытка
			БлокировкаДанных.Заблокировать();
		Исключение
			// не удалось заблокировать объекты, пропускаем
			ВсеДанныеОбработаны = Ложь;
			Продолжить;
		КонецПопытки;
		
		ТаблицаДвижений = Новый ТаблицаЗначений;
		ТаблицаДвижений.Колонки.Добавить("Регистратор");
		ТаблицаДвижений.Колонки.Добавить("ИсчисленныеСтраховыеВзносы", Новый ОписаниеТипов("ТаблицаЗначений"));
		ТаблицаДвижений.Колонки.Добавить("СведенияОДоходахСтраховыеВзносы", Новый ОписаниеТипов("ТаблицаЗначений"));
		ТаблицаДвижений.Колонки.Добавить("ФизическиеЛица", Новый ОписаниеТипов("ТаблицаЗначений"));
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			ТекущийРегистратор = Выборка.Регистратор;
			
			НаборИсчисленныеСтраховыеВзносы = РегистрыНакопления.ИсчисленныеСтраховыеВзносы.СоздатьНаборЗаписей();
			НаборИсчисленныеСтраховыеВзносы.Отбор.Регистратор.Установить(ТекущийРегистратор);
			НаборИсчисленныеСтраховыеВзносы.Прочитать();
			ИсчисленныеСтраховыеВзносы = НаборИсчисленныеСтраховыеВзносы.Выгрузить();
			ИсчисленныеСтраховыеВзносыАрхив = ИсчисленныеСтраховыеВзносы.СкопироватьКолонки();
			
			НаборСведенияОДоходахСтраховыеВзносы = РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.СоздатьНаборЗаписей();
			НаборСведенияОДоходахСтраховыеВзносы.Отбор.Регистратор.Установить(ТекущийРегистратор);
			НаборСведенияОДоходахСтраховыеВзносы.Прочитать();
			СведенияОДоходахСтраховыеВзносы = НаборСведенияОДоходахСтраховыеВзносы.Выгрузить();
			СведенияОДоходахСтраховыеВзносыАрхив = СведенияОДоходахСтраховыеВзносы.СкопироватьКолонки();
			
			НаборСтраховыеВзносыПоФизическимЛицам = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
			НаборСтраховыеВзносыПоФизическимЛицам.Отбор.Регистратор.Установить(ТекущийРегистратор);
			НаборСтраховыеВзносыПоФизическимЛицам.Прочитать();
			СтраховыеВзносыПоФизическимЛицам = НаборСтраховыеВзносыПоФизическимЛицам.Выгрузить();
			
			ТабФизическиеЛица = Новый ТаблицаЗначений;
			ТабФизическиеЛица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
			
			Пока Выборка.Следующий() Цикл
				
				ОтборФизлиц.ФизическоеЛицо = Выборка.ФизическоеЛицо;
				ЗаполнитьЗначенияСвойств(ТабФизическиеЛица.Добавить(), Выборка);
				
				НайденныеСтроки = ИсчисленныеСтраховыеВзносы.НайтиСтроки(ОтборФизлиц);
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(ИсчисленныеСтраховыеВзносыАрхив.Добавить(),СтрокаТЗ);
					ИсчисленныеСтраховыеВзносы.Удалить(СтрокаТЗ);
				КонецЦикла;
				
				НайденныеСтроки = СведенияОДоходахСтраховыеВзносы.НайтиСтроки(ОтборФизлиц);
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(СведенияОДоходахСтраховыеВзносыАрхив.Добавить(),СтрокаТЗ);
					СведенияОДоходахСтраховыеВзносы.Удалить(СтрокаТЗ);
				КонецЦикла;
				
				НайденныеСтроки = СтраховыеВзносыПоФизическимЛицам.НайтиСтроки(ОтборФизлиц);
				Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
					СтраховыеВзносыПоФизическимЛицам.Удалить(СтрокаТЗ);
				КонецЦикла;
				
			КонецЦикла;
			
			НаборИсчисленныеСтраховыеВзносы.Загрузить(ИсчисленныеСтраховыеВзносы);
			НаборИсчисленныеСтраховыеВзносы.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборИсчисленныеСтраховыеВзносы.ОбменДанными.Загрузка = Истина;
			НаборИсчисленныеСтраховыеВзносы.Записать();
			
			НаборСведенияОДоходахСтраховыеВзносы.Загрузить(СведенияОДоходахСтраховыеВзносы);
			НаборСведенияОДоходахСтраховыеВзносы.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборСведенияОДоходахСтраховыеВзносы.ОбменДанными.Загрузка = Истина;
			НаборСведенияОДоходахСтраховыеВзносы.Записать();
			
			НаборСтраховыеВзносыПоФизическимЛицам.Загрузить(СтраховыеВзносыПоФизическимЛицам);
			НаборСтраховыеВзносыПоФизическимЛицам.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборСтраховыеВзносыПоФизическимЛицам.ОбменДанными.Загрузка = Истина;
			НаборСтраховыеВзносыПоФизическимЛицам.Записать();
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Регистратор = ТекущийРегистратор;
			НоваяСтрока.ИсчисленныеСтраховыеВзносы = ИсчисленныеСтраховыеВзносыАрхив;
			НоваяСтрока.СведенияОДоходахСтраховыеВзносы = СведенияОДоходахСтраховыеВзносыАрхив;
			НоваяСтрока.ФизическиеЛица = ТабФизическиеЛица;
			
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ТаблицаДвижений Цикл
			
			Регистратор = СтрокаТЗ.Регистратор;
			
			Набор = РегистрыНакопления.ИсчисленныеСтраховыеВзносы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Загрузить(СтрокаТЗ.ИсчисленныеСтраховыеВзносы);
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи", Ложь);
			Набор.Записать(Ложь);
			
			Набор = РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Загрузить(СтрокаТЗ.СведенияОДоходахСтраховыеВзносы);
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи", Ложь);
			Набор.Записать(Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ФизическиеЛица", СтрокаТЗ.ФизическиеЛица);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|ИЗ
			|	&ФизическиеЛица КАК ФизическиеЛица";
			Запрос.Выполнить();
			
			УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОВзносах(ТекущаяОрганизация, ПериодПроверки, Запрос.МенеджерВременныхТаблиц);
			ИмяВременнойТаблицы = Неопределено;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
				РегистраторОбъект = Регистратор.ПолучитьОбъект();
				ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСтраховыеВзносыПоИсточникамФинансирования(РегистраторОбъект.Движения, ТекущаяОрганизация, ПериодПроверки, Регистратор, Запрос.МенеджерВременныхТаблиц);
				ИмяВременнойТаблицы = "ВТСтраховыеВзносыПоИсточникамФинансирования";
			КонецЕсли;
			СтраховыеВзносыПоФизическимЛицам = УчетСтраховыхВзносов.СтраховыеВзносыПоФизическимЛицам(ТекущаяОрганизация, ПериодПроверки, Регистратор, Запрос.МенеджерВременныхТаблиц, ИмяВременнойТаблицы);
			
			НаборЗаписей = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			Для каждого СтрокаДанных Из СтраховыеВзносыПоФизическимЛицам Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				НоваяСтрока.Организация = ТекущаяОрганизация;
				НоваяСтрока.Период = ПериодПроверки;
			КонецЦикла;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи", Ложь);
			НаборЗаписей.Записать(Ложь);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию()
		
	КонецЦикла;
	
	Если ВсеДанныеОбработаны Тогда
		// удаляем период, который обрабатывали
		ПараметрыОбновления.ПериодыПроверки.Удалить(0);
	КонецЕсли;
	
	Если ПараметрыОбновления.ПериодыПроверки.Количество() = 0 Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметровНаборовСвойств() Экспорт
	
	УдалитьДублиПредопределенныеНаборыДополнительныхРеквизитовИСведений("Начисление", "ПланВидовРасчета_Начисления");
	УдалитьДублиПредопределенныеНаборыДополнительныхРеквизитовИСведений("Удержание", "ПланВидовРасчета_Удержания");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("ПланВидовРасчета_Начисления", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("ПланВидовРасчета_Удержания", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	
КонецПроцедуры

Процедура УдалитьДублиПредопределенныеНаборыДополнительныхРеквизитовИСведений(НаименованиеЭлемента, ИмяПредопределенныхДанныхЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеНабора", НаименованиеЭлемента);
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанныхЭлемента", ИмяПредопределенныхДанныхЭлемента);
	
	// Удаление элементов с разными ссылками и одинаковым именем предопределенных данных.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаборыДополнительныхРеквизитовИСведений.Ссылка) КАК КолвоСсылок,
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|ПОМЕСТИТЬ КолвоРазныхСсылокПоИмениПредопределенного
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА
	|	И НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанныхЭлемента
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолвоРазныхСсылокПоИмениПредопределенного.ИмяПредопределенныхДанных
	|ПОМЕСТИТЬ ЗадублированныеИменаПредопределенных
	|ИЗ
	|	КолвоРазныхСсылокПоИмениПредопределенного КАК КолвоРазныхСсылокПоИмениПредопределенного
	|ГДЕ
	|	КолвоРазныхСсылокПоИмениПредопределенного.КолвоСсылок > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадублированныеИменаПредопределенных.ИмяПредопределенныхДанных,
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	ЗадублированныеИменаПредопределенных КАК ЗадублированныеИменаПредопределенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|		ПО ЗадублированныеИменаПредопределенных.ИмяПредопределенныхДанных = НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Ссылка";
	
	МассивИмен = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяПредопределенныхДанных = Выборка.ИмяПредопределенныхДанных;
		
		Если МассивИмен.Найти(ИмяПредопределенныхДанных) = Неопределено Тогда
			// Ссылки упорядочены, первую не удаляем
			МассивИмен.Добавить(ИмяПредопределенныхДанных);
			Если ИмяПредопределенныхДанных <> ИмяПредопределенныхДанныхЭлемента Тогда
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СпрОбъект.ИмяПредопределенныхДанных = ИмяПредопределенныхДанныхЭлемента;
				СпрОбъект.ПометкаУдаления = Ложь;
				СпрОбъект.ОбменДанными.Загрузка = Истина;
				СпрОбъект.Записать();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ИмяПредопределенныхДанных = "";
		СпрОбъект.ПометкаУдаления = Истина;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		
		СпрОбъект.Записать();
	КонецЦикла;
	
	// Удаление элементов с одинаковыми ссылками и одинаковым именем предопределенных данных.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаборыДополнительныхРеквизитовИСведений.Ссылка) КАК КолвоРазличных,
	|	КОЛИЧЕСТВО(НаборыДополнительныхРеквизитовИСведений.Ссылка) КАК КолвоОбщее,
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|ПОМЕСТИТЬ КолвоСсылокПоИмениПредопределенного
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА
	|	И НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанныхЭлемента
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолвоСсылокПоИмениПредопределенного.ИмяПредопределенныхДанных
	|ПОМЕСТИТЬ ИменаПредопределенных
	|ИЗ
	|	КолвоСсылокПоИмениПредопределенного КАК КолвоСсылокПоИмениПредопределенного
	|ГДЕ
	|	КолвоСсылокПоИмениПредопределенного.КолвоРазличных = 1
	|	И КолвоСсылокПоИмениПредопределенного.КолвоОбщее > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	|	ИменаПредопределенных.ИмяПредопределенныхДанных,
	|	ВЫБОР
	|		КОГДА НЕ НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	ИменаПредопределенных КАК ИменаПредопределенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|		ПО ИменаПредопределенных.ИмяПредопределенныхДанных = НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Ссылка";
	
	МассивСсылок = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Добавление элементов с именем предопределенных данных
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка,
		|	НаборыДополнительныхРеквизитовИСведений.Предопределенный,
		|	ВЫБОР
		|		КОГДА НаборыДополнительныхРеквизитовИСведений.Предопределенный
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанныхЭлемента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			СпрОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
			СпрОбъект.ИмяПредопределенныхДанных = ИмяПредопределенныхДанныхЭлемента;
			СпрОбъект.Наименование = НаименованиеЭлемента;
			СпрОбъект.Используется = Истина;
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СпрСсылка = Выборка.Ссылка;
				Если МассивСсылок.Найти(СпрСсылка) = Неопределено Тогда
					// Ссылки одинаковые, первую не удаляем
					МассивСсылок.Добавить(СпрСсылка);
					Если СпрСсылка.ИмяПредопределенныхДанных <> ИмяПредопределенныхДанныхЭлемента Тогда
						СпрОбъект = СпрСсылка.ПолучитьОбъект();
						СпрОбъект.ИмяПредопределенныхДанных = ИмяПредопределенныхДанныхЭлемента;
						СпрОбъект.ПометкаУдаления = Ложь;
						СпрОбъект.ОбменДанными.Загрузка = Истина;
						СпрОбъект.Записать();
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
				СпрОбъект.ИмяПредопределенныхДанных = "";
				СпрОбъект.ОбменДанными.Загрузка = Истина;
				СпрОбъект.Удалить();
			КонецЦикла;
		КонецЕсли;
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СпрСсылка = Выборка.Ссылка;
			
			Если МассивСсылок.Найти(СпрСсылка) = Неопределено Тогда
				// Ссылки одинаковые, первую не удаляем
				МассивСсылок.Добавить(СпрСсылка);
				Если СпрСсылка.ИмяПредопределенныхДанных <> ИмяПредопределенныхДанныхЭлемента Тогда
					СпрОбъект = СпрСсылка.ПолучитьОбъект();
					СпрОбъект.ИмяПредопределенныхДанных = ИмяПредопределенныхДанныхЭлемента;
					СпрОбъект.ПометкаУдаления = Ложь;
					СпрОбъект.ОбменДанными.Загрузка = Истина;
					СпрОбъект.Записать();
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			СпрОбъект.ИмяПредопределенныхДанных = "";
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидНачисленияДляПособияНаПогребениеСотруднику() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|	И НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ЕдиновременноеПособиеЗаСчетФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.Подразделение,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику)
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание
	|	КОНЕЦ КАК НачислениеУдержание,
	|	НачисленияУдержанияПоСотрудникам.Сумма,
	|	НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
	|	НачисленияУдержанияПоСотрудникам.ДокументОснование,
	|	НачисленияУдержанияПоСотрудникам.Контрагент,
	|	НачисленияУдержанияПоСотрудникам.ДатаНачала,
	|	НачисленияУдержанияПоСотрудникам.ДатаОкончания,
	|	НачисленияУдержанияПоСотрудникам.ДанныеМежрасчетногоПериода,
	|	НачисленияУдержанияПоСотрудникам.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРегистраторы КАК РегистраторыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ПО РегистраторыКОбработке.Регистратор = НачисленияУдержанияПоСотрудникам.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|	И НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ЕдиновременноеПособиеЗаСчетФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачисленияУдержанияПоСотрудникам.Период,
	|	БухучетНачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	БухучетНачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки,
	|	БухучетНачисленияУдержанияПоСотрудникам.Организация,
	|	БухучетНачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|	БухучетНачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|	БухучетНачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|	БухучетНачисленияУдержанияПоСотрудникам.Сотрудник,
	|	БухучетНачисленияУдержанияПоСотрудникам.Подразделение,
	|	ВЫБОР
	|		КОГДА БухучетНачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику)
	|		ИНАЧЕ БухучетНачисленияУдержанияПоСотрудникам.НачислениеУдержание
	|	КОНЕЦ КАК НачислениеУдержание,
	|	БухучетНачисленияУдержанияПоСотрудникам.Сумма,
	|	БухучетНачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты,
	|	БухучетНачисленияУдержанияПоСотрудникам.ПериодДействия,
	|	БухучетНачисленияУдержанияПоСотрудникам.ДокументОснование,
	|	БухучетНачисленияУдержанияПоСотрудникам.Контрагент,
	|	БухучетНачисленияУдержанияПоСотрудникам.ДатаНачала,
	|	БухучетНачисленияУдержанияПоСотрудникам.ДатаОкончания,
	|	БухучетНачисленияУдержанияПоСотрудникам.ИдентификаторСтроки,
	|	БухучетНачисленияУдержанияПоСотрудникам.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисленияУдержанияПоСотрудникам.ОблагаетсяЕНВД,
	|	БухучетНачисленияУдержанияПоСотрудникам.ВидОперации,
	|	БухучетНачисленияУдержанияПоСотрудникам.НеУчитыватьВРаспределенииПриОкончательномРасчете,
	|	БухучетНачисленияУдержанияПоСотрудникам.ТерриторияВыполненияРаботВОрганизации
	|ИЗ
	|	ВТРегистраторы КАК РегистраторыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисленияУдержанияПоСотрудникам
	|		ПО РегистраторыКОбработке.Регистратор = БухучетНачисленияУдержанияПоСотрудникам.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|	И НачисленияУдержанияПоСотрудникам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|	И НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.ЕдиновременноеПособиеЗаСчетФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Период,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Регистратор,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.НомерСтроки,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Организация,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ФизическоеЛицо,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.СтатьяФинансирования,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.СтатьяРасходов,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Сумма,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ГруппаНачисленияУдержанияВыплаты,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Сотрудник,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Подразделение,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ДокументОснование,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ИдентификаторСтроки,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА БухучетНачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|				И БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПособиеНаПогребение)
	|		ИНАЧЕ БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ВидОперации
	|	КОНЕЦ КАК ВидОперации,
	|	БухучетНачисленияУдержанияПоКонтрагентамАкционерам.ТерриторияВыполненияРаботВОрганизации
	|ИЗ
	|	ВТРегистраторы КАК РегистраторыКОбработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам КАК БухучетНачисленияУдержанияПоКонтрагентамАкционерам
	|		ПО РегистраторыКОбработке.Регистратор = БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

// Формирует состав ключевых показателей (в случае их отсутствия), а также устанавливает
// целевое время их заполнения для условной ИБ.
//
Процедура ЗаполнитьЦелевоеВремяКлючевыхОпераций() Экспорт

	КлючевыеОперации = Новый Массив;
	
	#Область УстановитьЦелевоеВремяКлючевыхОпераций
	
	#Область ДокументБольничныйЛист
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаБольничныйЛист");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументВедомостьНаВыплатуЗарплатыВБанк
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеПодробныхДанныхПоСотрудникуВФормеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаВедомостьНаВыплатуЗарплатыВБанк");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументВедомостьНаВыплатуЗарплатыВКассу
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаВедомостьНаВыплатуЗарплатыВКассу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИзменениеГрафикаРаботыСписком
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИзменениеГрафикаРаботыСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИзменениеПлановыхНачислений
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеЗначенийПоказателейВФормеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИзменениеПлановыхНачислений");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область ДокументИзменениеШтатногоРасписания
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОбработкаВыбораПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ВводНовойПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСДаннымиПоПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СортировкаПозицийШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СохранениеДанныхПозицииШРДокументаИзменениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИндексацияЗаработка
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИндексацияЗаработка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументИндивидуальныйГрафик
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаИндивидуальныйГрафик");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументКадровыйПеревод
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеПозицииШРВФормеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаКадровыйПеревод");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументКомандировка
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаКомандировка");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументМатериальнаяПомощь
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаМатериальнаяПомощь");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументНачислениеЗаПервуюПоловинуМесяца
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 300);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 150);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаНДФЛ");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаЗаймы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаВзносы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗаПервуюПоловинуМесяцаБухучет");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПерерасчетСотрудникаВФормеДокументаНачислениеЗаПервуюПоловинуМесяца");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 20);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументНачислениеЗарплаты
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 300);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 150);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыНДФЛ");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыЗаймы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыВзносы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаНачислениеЗарплатыБухучет");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 30);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПерерасчетСотрудникаВФормеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ФормированиеРасчетногоЛисткаИзФормыДокументаНачислениеЗарплаты");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 10);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументОплатаПоСреднемуЗаработку
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаОплатаПоСреднемуЗаработку");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументОтпуск 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаОтпуск");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПремия
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаПремия");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПриемНаРаботу
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеПозицииШРВФормеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПриемНаРаботу");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументПриемНаРаботуСписком
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеДанныхПоСотрудникуВФормеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаПриемНаРаботуСписком");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументРаботаВВыходныеИПраздничныеДни
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаРаботаВВыходныеИПраздничныеДни");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументРаботаСверхурочно
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаРаботаСверхурочно");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументТабельУчетаРабочегоВремени
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаполнениеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеДокументаТабельУчетаРабочегоВремени");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументУвольнение 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ИзменениеСотрудникаВФормеДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "РасчетДокументаУвольнение");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ДокументУтверждениеШтатногоРасписания 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПроведениеДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ВводНовойПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСДаннымиПоПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СортировкаПозицийШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СохранениеДанныхПозицииШРДокументаУтверждениеШтатногоРасписания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ЖурналДокументовКадровыеДокументы 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "УстановкаОтбораПоСотрудникуЖурналаДокументовКадровыеДокументы");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область ОбработкаКвартальнаяОтчетностьВПФР 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПриАктивизацииСтрокиВФормеКвартальнаяОтчетностьВПФР");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "СозданиеНовогоРСВ1");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 90);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОбщаяФормаВводДанныхДляРасчетаСреднегоЗаработкаФСС 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПересчетДанныхВФормеВводДанныхДляРасчетаСреднегоЗаработкаФСС");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОбщаяФормаВводДанныхДляРасчетаСреднегоЗаработкаОбщий 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПересчетДанныхВФормеВводДанныхДляРасчетаСреднегоЗаработкаОбщий");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализВзносовВФонды
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализВзносовВФонды.АнализВзносовВФонды.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийПолныйСводНачисленийУдержанийИВыплат
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.ПолныйСводНачисленийУдержанийИВыплат.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийРасчетныйЛисток
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.РасчетныйЛисток.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетАнализНачисленийИУдержанийТ51
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.АнализНачисленийИУдержаний.Т51.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 15);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетУнифицированнаяФормаТ2
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.УнифицированнаяФормаТ2.Т2.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетТрудовойДоговор
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОтчетТрудовойДоговорФормирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетШтатноеРасписаниеНачисленияШтатноеРасписаниеКроссТаблица
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.ШтатноеРасписаниеНачисления.ШтатноеРасписаниеКроссТаблица.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ОтчетШтатноеРасписаниеНачисленияШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "Отчет.ШтатноеРасписаниеНачисления.ШтатноеРасписаниеКроссТаблицаИспользуетсяВилкаСтавок.Формирование");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ПланВидовРасчетаНачисления 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 3);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаПланаВидовРасчетаНачисления");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область ПланВидовРасчетаУдержания 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаПланаВидовРасчетаУдержания");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникГрафикиРаботыСотрудников
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаГрафикиРаботыСотрудников");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникДолжности 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаДолжности");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникОрганизации 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаОрганизации");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникПодразделенияОрганизаций 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаПодразделенияОрганизаций");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти

	#Область СправочникСотрудники 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "АктивацияПодразделенияВФормеВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.5);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ПодборСотрудникаВФормеВыбораСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 0.2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСпискаСправочникаСотрудники");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникФизическиеЛица 
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаФизическиеЛица");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#Область СправочникШтатноеРасписание
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ЗаписьЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыНовогоЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 1);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыЭлементаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	КлючеваяОперация.Вставить("ИмяКлючевойОперации", "ОткрытиеФормыСпискаСправочникаШтатноеРасписание");
	КлючеваяОперация.Вставить("ЦелевоеВремя", 2);
	КлючевыеОперации.Добавить(КлючеваяОперация);
	КлючеваяОперация = Новый Структура;
	#КонецОбласти
	
	#КонецОбласти	

	ОценкаПроизводительности.СоздатьКлючевыеОперации(КлючевыеОперации);
	
КонецПроцедуры

Процедура ОбновитьКорректировкиВыплатыКЗачету(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеРезультатовУдержаний.Ссылка КАК Ссылка,
	|	РаспределениеРезультатовУдержаний.Сотрудник КАК Сотрудник,
	|	РаспределениеРезультатовУдержаний.СтатьяФинансирования,
	|	РаспределениеРезультатовУдержаний.СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА РаспределениеРезультатовУдержаний.Результат < 0
	|				ТОГДА -РаспределениеРезультатовУдержаний.Результат
	|			ИНАЧЕ РаспределениеРезультатовУдержаний.Результат
	|		КОНЕЦ) КАК Результат,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаспределениеРезультатовУдержаний.Результат < 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНДФЛКЗачету
	|ПОМЕСТИТЬ ВТРаспределениеРезультатовУдержаний
	|ИЗ
	|	Документ.НачислениеЗарплаты.РаспределениеРезультатовУдержаний КАК РаспределениеРезультатовУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.КорректировкиВыплаты КАК КорректировкиВыплаты
	|		ПО РаспределениеРезультатовУдержаний.Ссылка = КорректировкиВыплаты.Ссылка
	|			И РаспределениеРезультатовУдержаний.ИдентификаторСтроки = КорректировкиВыплаты.ИдентификаторСтроки
	|ГДЕ
	|	РаспределениеРезультатовУдержаний.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеРезультатовУдержаний.Ссылка,
	|	РаспределениеРезультатовУдержаний.Сотрудник,
	|	РаспределениеРезультатовУдержаний.СтатьяФинансирования,
	|	РаспределениеРезультатовУдержаний.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаспределениеРезультатовУдержаний.Результат < 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспределениеРезультатовУдержаний.Ссылка,
	|	РаспределениеРезультатовУдержаний.Сотрудник,
	|	РаспределениеРезультатовУдержаний.ИдентификаторСтроки,
	|	РаспределениеРезультатовУдержаний.Результат
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспределениеРезультатовУдержаний КАК ВТРаспределениеРезультатовУдержаний
	|		ПО ЗарплатаКВыплате.Регистратор = ВТРаспределениеРезультатовУдержаний.Ссылка
	|			И ЗарплатаКВыплате.Сотрудник = ВТРаспределениеРезультатовУдержаний.Сотрудник
	|			И ЗарплатаКВыплате.СтатьяФинансирования = ВТРаспределениеРезультатовУдержаний.СтатьяФинансирования
	|			И ЗарплатаКВыплате.СтатьяРасходов = ВТРаспределениеРезультатовУдержаний.СтатьяРасходов
	|			И ЗарплатаКВыплате.СуммаКВыплате = ВТРаспределениеРезультатовУдержаний.Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.РаспределениеРезультатовУдержаний КАК РаспределениеРезультатовУдержаний
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.КорректировкиВыплаты КАК КорректировкиВыплаты
	|			ПО РаспределениеРезультатовУдержаний.Ссылка = КорректировкиВыплаты.Ссылка
	|				И РаспределениеРезультатовУдержаний.ИдентификаторСтроки = КорректировкиВыплаты.ИдентификаторСтроки
	|		ПО (ВТРаспределениеРезультатовУдержаний.Ссылка = РаспределениеРезультатовУдержаний.Ссылка)
	|			И (ВТРаспределениеРезультатовУдержаний.Сотрудник = РаспределениеРезультатовУдержаний.Сотрудник)
	|ГДЕ
	|	РаспределениеРезультатовУдержаний.Результат < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаспределениеРезультатовУдержаний.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			ИмяОбласти = Выборка.Ссылка.Метаданные().ПолноеИмя();
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ИмяОбласти, "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Пока Выборка.Следующий() Цикл
				СтруктураОтбора = Новый Структура("ИдентификаторСтроки, Результат", Выборка.ИдентификаторСтроки, Выборка.Результат);
				НайденныеСтроки = ДокументОбъект.РаспределениеРезультатовУдержаний.НайтиСтроки(СтруктураОтбора);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.Результат < 0 Тогда
						НайденнаяСтрока.Результат = -НайденнаяСтрока.Результат;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураОтбора = Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
				НайденныеСтроки = ДокументОбъект.КорректировкиВыплаты.НайтиСтроки(СтруктураОтбора);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.КорректировкаВыплаты < 0 Тогда
						НайденнаяСтрока.КорректировкаВыплаты = -НайденнаяСтрока.КорректировкаВыплаты;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных() Экспорт
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	// По умолчанию при обновлении устанавливаем значение "Удержание"
	ТекущееИспользование = Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных;
	Если Не ЗначениеЗаполнено(ТекущееИспользование) Тогда
		Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных = Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.Удержание;
		Настройки.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРегистрациюДоходовПоДоговорамПодряда(ПараметрыОбновления) Экспорт

	Если ЗарплатаКадры.ИспользоватьСтатьиФинансированияЗарплата() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПоДоговорам.Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.НачислениеПоДоговорам.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|ГДЕ
	|	НачисленияПоДоговорам.ИдентификаторСтроки = 0
	|	И НачисленияПоДоговорам.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|ГДЕ
	|	НачисленияПоДоговорам.ИдентификаторСтроки = 0
	|	И НачисленияПоДоговорам.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходахСтраховыеВзносы.Регистратор КАК Регистратор,
	|		СУММА(СведенияОДоходахСтраховыеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК СведенияОДоходахСтраховыеВзносы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|			ПО СведенияОДоходахСтраховыеВзносы.Регистратор = ДокументыКОбработке.Ссылка
	|				И (СведенияОДоходахСтраховыеВзносы.Начисление В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СведенияОДоходахСтраховыеВзносы.Регистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияПоДоговорам.Ссылка,
	|		-СУММА(НачисленияПоДоговорам.Результат)
	|	ИЗ
	|		Документ.НачислениеПоДоговорам.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|			ПО НачисленияПоДоговорам.Ссылка = ДокументыКОбработке.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачисленияПоДоговорам.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияПоДоговорам.Ссылка,
	|		-СУММА(НачисленияПоДоговорам.Результат)
	|	ИЗ
	|		Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|			ПО НачисленияПоДоговорам.Ссылка = ДокументыКОбработке.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачисленияПоДоговорам.Ссылка) КАК Документы
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Документы.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОбработке.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДокументыКОбработке КАК ДокументыКОбработке
	|ИТОГИ ПО
	|	Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатЗапроса = Результат[Результат.ВГраница()];
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Регистраторы = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
	
	ДопПараметры = Новый Структура("Организация, МесяцНачисления");
	Движения     = Новый Структура("СведенияОДоходахСтраховыеВзносы");
	Отбор		 = Новый Структура("Начисление");
	ИменаВТ 	 = Новый Массив();
	ИменаВТ.Добавить("ВТЗаписиНачисленийПоДоговорам");
	ИменаВТ.Добавить("ВТНачисленияСтраховыеВзносы");
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.НачислениеПоДоговорам") Тогда
			ИмяПространстваБлокировки = "Документ.НачислениеПоДоговорам";
			ИмяДокумента = "Документ.НачислениеПоДоговорам";
		Иначе
			ИмяПространстваБлокировки = "Документ.НачислениеЗарплаты";
			ИмяДокумента = "Документ.НачислениеЗарплаты";
		КонецЕсли;
		
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировки);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СведенияОДоходахСтраховыеВзносы.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
		
		Попытка 
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , Выборка.Ссылка, ИмяПространстваБлокировки);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИдентификаторСтроки = 1000000 + 1;
		Для каждого СтрокаТЧ Из ДокументОбъект.НачисленияПоДоговорам Цикл
			СтрокаТЧ.ИдентификаторСтроки = ИдентификаторСтроки;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
		Если Регистраторы.Найти(Выборка.Ссылка) <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Ссылка.Организация,
			|	Начисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
			|	Начисления.Ссылка КАК ДокументСсылка,
			|	Начисления.ИдентификаторСтроки,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение КАК Подразделение,
			|	ВЫБОР
			|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
			|	КОНЕЦ КАК Начисление,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.СуммаВычета КАК СуммаВычета,
			|	Начисления.КодДохода КАК КодДохода,
			|	Начисления.КодВычета КАК КодВычета,
			|	Начисления.ДокументОснование КАК Договор,
			|	Начисления.ДокументОснование КАК ДокументОснование,
			|	Начисления.ДатаНачала,
			|	Начисления.ДатаОкончания,
			|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
			|	Начисления.Подразделение КАК ТерриторияВыполненияРаботВОрганизации
			|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", ИмяДокумента + ".НачисленияПоДоговорам");
			Запрос.Выполнить();
			
			ДопПараметры.Организация 	   = ДокументОбъект.Организация;
			ДопПараметры.МесяцНачисления   = ДокументОбъект.МесяцНачисления;
			
			НаборСведенияОДоходахСтраховыеВзносы = РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.СоздатьНаборЗаписей();
			НаборСведенияОДоходахСтраховыеВзносы.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборСведенияОДоходахСтраховыеВзносы.Прочитать();
			СведенияОДоходахСтраховыеВзносы = НаборСведенияОДоходахСтраховыеВзносы.Выгрузить();
			
			Отбор.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа;
			СтрокиКУдалению = СведенияОДоходахСтраховыеВзносы.НайтиСтроки(Отбор);
			Для Каждого Строка Из СтрокиКУдалению Цикл
				СведенияОДоходахСтраховыеВзносы.Удалить(Строка);
			КонецЦикла;
			
			Отбор.Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги;
			СтрокиКУдалению = СведенияОДоходахСтраховыеВзносы.НайтиСтроки(Отбор);
			Для Каждого Строка Из СтрокиКУдалению Цикл
				СведенияОДоходахСтраховыеВзносы.Удалить(Строка);
			КонецЦикла;
			
			НаборСведенияОДоходахСтраховыеВзносы.Загрузить(СведенияОДоходахСтраховыеВзносы);
			Движения.СведенияОДоходахСтраховыеВзносы = НаборСведенияОДоходахСтраховыеВзносы;
			
			ОтражениеЗарплатыВБухучетеРасширенный.ДанныеДляПроведенияСоздатьВТНачисленияСтраховыеВзносы(Запрос.МенеджерВременныхТаблиц, ДопПараметры, "ВТНачисленияСтраховыеВзносы");
			СведенияОДоходахСтраховыеВзносыПоДоговорам = УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы(ДопПараметры.Организация, ДопПараметры.МесяцНачисления, Запрос.МенеджерВременныхТаблиц);
			УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Ложь, ДопПараметры.Организация, ДопПараметры.МесяцНачисления, СведенияОДоходахСтраховыеВзносыПоДоговорам, Ложь);
			
			Движения.СведенияОДоходахСтраховыеВзносы.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Движения.СведенияОДоходахСтраховыеВзносы.ОбменДанными.Загрузка = Истина;
			Движения.СведенияОДоходахСтраховыеВзносы.Записать();
			
			ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, ИменаВТ);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	

КонецПроцедуры

Процедура ЗаполнитьПолеДоначислитьЗарплатуПриНеобходимости(ПараметрыОбновления = Неопределено) Экспорт
	
	ЗаданияОбработки = Новый Массив;
	ИмяРеквизита = "ДоначислитьЗарплатуПриНеобходимости";
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		ЕстьРеквизит = МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
		
		ИменаТабЧастей = Неопределено;
		Для Каждого ТабЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				Если ИменаТабЧастей = Неопределено Тогда
					ИменаТабЧастей = Новый Массив;
				КонецЕсли;
				ИменаТабЧастей.Добавить(ТабЧасть.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьРеквизит Или ИменаТабЧастей <> Неопределено Тогда
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ИмяДокумента", МетаданныеДокумента.Имя);
			ПараметрыДокумента.Вставить("ЕстьРеквизит", ЕстьРеквизит);
			ПараметрыДокумента.Вставить("ЕстьРеквизитТабЧасти", ИменаТабЧастей <> Неопределено);
			Если ПараметрыДокумента.ЕстьРеквизитТабЧасти Тогда
				ПараметрыДокумента.Вставить("ИменаТабЧастей", ИменаТабЧастей);
			КонецЕсли;
			ПараметрыДокумента.Вставить("ЕстьРежимИсправления", МетаданныеДокумента.Реквизиты.Найти("ИсправленныйДокумент") <> Неопределено);
			ЗаданияОбработки.Добавить(ПараметрыДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Документ.Ссылка
	|ИЗ
	|	Документ.%1 КАК Документ
	|ГДЕ
	|	Документ.%2 = ЛОЖЬ";
	
	ШаблонЗапросаТабЧасть =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ТабЧастьДокумента.Ссылка
	|ИЗ
	|	Документ.%1.%2 КАК ТабЧастьДокумента
	|ГДЕ
	|	ТабЧастьДокумента.%3 = ЛОЖЬ";
	
	ДопУсловия = "
	|	И Документ.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.%1.ПустаяСсылка)";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, " ПЕРВЫЕ 1000", "");
		ШаблонЗапросаТабЧасть = СтрЗаменить(ШаблонЗапросаТабЧасть, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ВыполненноЗаданий = 0;
	
	Для Каждого Задание Из ЗаданияОбработки Цикл
		
		Запрос.Текст = "";
		
		Если Задание.ЕстьРеквизит Тогда
			Запрос.Текст = СтрШаблон(ШаблонЗапроса, Задание.ИмяДокумента, ИмяРеквизита);
			
			Если Задание.ЕстьРежимИсправления Тогда
				Запрос.Текст = Запрос.Текст + СтрШаблон(ДопУсловия, Задание.ИмяДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если Задание.ЕстьРеквизитТабЧасти Тогда
			Для Каждого ИмяТабЧасти Из Задание.ИменаТабЧастей Цикл
				
				Если Не ПустаяСтрока(Запрос.Текст) Тогда
					Запрос.Текст = Запрос.Текст + "
						|ОБЪЕДИНИТЬ
						|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + СтрШаблон(ШаблонЗапросаТабЧасть, Задание.ИмяДокумента, ИмяТабЧасти, ИмяРеквизита);
			КонецЦикла;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВыполненноЗаданий = ВыполненноЗаданий + 1;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			ОбработаноОбъектов = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления,
					"Документ." + Задание.ИмяДокумента, "Ссылка", Выборка.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если Задание.ЕстьРеквизит Тогда 
					ДокументОбъект[ИмяРеквизита] = Истина;
				КонецЕсли;
				
				Если Задание.ЕстьРеквизитТабЧасти Тогда
					Для Каждого ИмяТабЧасти Из Задание.ИменаТабЧастей Цикл
						Для Каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
							Если СтрокаТабЧасти[ИмяРеквизита] = Ложь Тогда
								СтрокаТабЧасти[ИмяРеквизита] = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
				
				ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
				ОбработаноОбъектов = ОбработаноОбъектов + 1;
			КонецЦикла;
			
			Если ОбработаноОбъектов < 1000 И ОбработаноОбъектов = Выборка.Количество() Тогда
				ВыполненноЗаданий = ВыполненноЗаданий + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления,
		"ОбработкаЗавершена", ЗаданияОбработки.Количество() = ВыполненноЗаданий);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПеречисленияНДФЛДокументыНезарплатныхДоходов(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	ОбработкаВыполнялась = Ложь;
	
	ОписаниеТаблиц = Новый Структура;
	ОписаниеТаблиц.Вставить("ВыплатаБывшимСотрудникам","ПланируемаяДатаВыплаты");
	ОписаниеТаблиц.Вставить("РегистрацияПрочихДоходов","ПланируемаяДатаВыплаты");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		ОписаниеТаблиц.Вставить("ДивидендыФизическимЛицам","ДатаВыплаты");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	&ИмяПоляДата КАК ДатаПлатежаНДФЛ
	|ИЗ
	|	#ИмяТаблицыДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.ДатаПлатежаНДФЛ = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ТаблицаДокументов.РегистрироватьВыплатуВедомостью
	|	И ТаблицаДокументов.Проведен";
	
	Для каждого КлючИЗначение Из ОписаниеТаблиц Цикл
		
		ИмяТаблицыДокументов = КлючИЗначение.Ключ;
		ИмяПоляДата          = КлючИЗначение.Значение;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяПоляДата","ТаблицаДокументов."+ИмяПоляДата);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыДокументов","Документ."+ИмяТаблицыДокументов);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработкаВыполнялась = Истина;
		
		Выборка = Результат.Выбрать();
		ИмяПространстваБлокировки = "Документ." + ИмяТаблицыДокументов;
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, ИмяПространстваБлокировки, "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДатаПлатежаНДФЛ = Выборка.ДатаПлатежаНДФЛ;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОбработкаВыполнялась Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина)
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

Процедура ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты)
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты);
КонецПроцедуры

Процедура ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок);
КонецПроцедуры

Функция СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча)
	Возврат ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча);
КонецФункции

Процедура ЗаменитьСсылкиНаБанкиВОбъектах(ПолноеИмяОбъектаМетаданных)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокСсылок.Ссылка,
		|	КлассификаторБанков.Ссылка КАК Банк
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК СписокСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО СписокСсылок.УдалитьБанк.Код = КлассификаторБанков.Код
		|ГДЕ
		|	СписокСсылок.УдалитьБанк <> ЗНАЧЕНИЕ(Справочник.УдалитьБанки.ПустаяСсылка)
		|	И СписокСсылок.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектСБанком = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСБанком.Банк = Выборка.Банк;
		
		ОбъектСБанком.ОбменДанными.Загрузка = Истина;
		ОбъектСБанком.Записать();
		
	КонецЦикла; 
		
КонецПроцедуры

#КонецОбласти