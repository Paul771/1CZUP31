
#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьЗначениеСтрокиПериодовПрограммыОбучения(Форма, ТекущиеДанные, ИмяРеквизитаЧислаКолонок)
	
	Для Сч = 1 По ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаЧислаКолонок) Цикл
		ТекущиеДанные["ПериодПлана" + Строка(Сч)] = (ТекущиеДанные.Начало <= Сч И Сч <= ТекущиеДанные.Окончание);
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьЗначенияПериодовПрограммыОбучения(Форма, СтруктураИменРеквизитов = Неопределено) Экспорт
	
	Если СтруктураИменРеквизитов = Неопределено Тогда
		СтруктураИменРеквизитов = ОбучениеРазвитиеКлиентСервер.ОписаниеСтруктурыИменРеквизитовПрограммыОбучения();
	КонецЕсли;

	ПрограммаОбучения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СтруктураИменРеквизитов.ИмяРеквизитаПрограммаОбучения);
	
	Для каждого СтрокаПлана Из ПрограммаОбучения Цикл
		УстановитьЗначениеСтрокиПериодовПрограммыОбучения(Форма, СтрокаПлана, СтруктураИменРеквизитов.ИмяРеквизитаЧислаКолонок);
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьВсегоУчебныхЧасов(Форма, ИмяРеквизитаПрограммаОбучения = "Объект.ПрограммаОбучения") Экспорт
	
	ПрограммаОбучения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаПрограммаОбучения);
	
	Форма.ВсегоУчебныхЧасов = 0;
	Для каждого СтрокаПлана Из ПрограммаОбучения Цикл
		Форма.ВсегоУчебныхЧасов = Форма.ВсегоУчебныхЧасов + СтрокаПлана.КоличествоУчебныхЧасов;
	КонецЦикла; 

КонецПроцедуры

Процедура АктуализироватьНачалоОкончаниеПериодовПрограммыОбучения(Форма, СтруктураИменРеквизитов = Неопределено) Экспорт
	
	Если СтруктураИменРеквизитов = Неопределено Тогда
		СтруктураИменРеквизитов = ОбучениеРазвитиеКлиентСервер.ОписаниеСтруктурыИменРеквизитовПрограммыОбучения();
	КонецЕсли;

	ПрограммаОбучения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СтруктураИменРеквизитов.ИмяРеквизитаПрограммаОбучения);
	ПродолжительностьПланаОбучения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СтруктураИменРеквизитов.ИмяРеквизитаЧислаКолонок);
	
	Для каждого СтрокаПлана Из ПрограммаОбучения Цикл
		Если ПродолжительностьПланаОбучения < СтрокаПлана.Начало Тогда
			СтрокаПлана.Начало = 0;
		КонецЕсли;
		Если ПродолжительностьПланаОбучения < СтрокаПлана.Окончание Тогда
			СтрокаПлана.Окончание = ?(СтрокаПлана.Начало = 0, 0, ПродолжительностьПланаОбучения);
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура ИзменениеПериодовПрограммыОбучения(Форма, ТекущиеДанные, ЧислоСтрокой, СтруктураИменРеквизитов = Неопределено) Экспорт

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НомерКолонкиНажатия = Число(ЧислоСтрокой);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если СтруктураИменРеквизитов = Неопределено Тогда
		СтруктураИменРеквизитов = ОписаниеСтруктурыИменРеквизитовПрограммыОбучения();
	КонецЕсли;
	
	УстановитьНачалоУказанияИнтервала(Форма, ТекущиеДанные, СтруктураИменРеквизитов.ИмяРеквизитаПрограммаОбучения);
	УстановитьНачалоОкончаниеВСтрокеПрограммыОбучения(Форма, ТекущиеДанные, НомерКолонкиНажатия);
	УстановитьЗначениеСтрокиПериодовПрограммыОбучения(Форма, ТекущиеДанные, СтруктураИменРеквизитов.ИмяРеквизитаЧислаКолонок);

КонецПроцедуры

Процедура УстановитьЗаголовкиКолонкамПрограммыОбучения(Форма, СтруктураИменРеквизитов = Неопределено) Экспорт 

	Если СтруктураИменРеквизитов = Неопределено Тогда
		СтруктураИменРеквизитов = ОбучениеРазвитиеКлиентСервер.ОписаниеСтруктурыИменРеквизитовПрограммыОбучения();
	КонецЕсли;
	
	Периодичность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СтруктураИменРеквизитов.ИмяРеквизитаРазмерностьПродолжительностиПланаОбучения);
	НаименованиеРазмерности = КраткоеНаименованиеПериодичности(Периодичность);
	
	Для Сч = 1 По ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СтруктураИменРеквизитов.ИмяРеквизитаЧислаКолонок) Цикл
		ИмяКолонки = "ПериодПлана" + Строка(Сч);
		КолонкаЭлемент = Форма.Элементы.Найти(ИмяКолонки);
		Если КолонкаЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КолонкаЭлемент.Заголовок = Строка(Сч) + " " + НаименованиеРазмерности;
	КонецЦикла; 

КонецПроцедуры

Функция ОписаниеСтруктурыИменРеквизитовПрограммыОбучения() Экспорт 

	СтруктураИменРеквизитов = Новый Структура;
	
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаПрограммаОбучения", "Объект.ПрограммаОбучения");
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаЧислаКолонок", "Объект.ПродолжительностьПланаОбучения");
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаРазмерностьПродолжительностиПланаОбучения", "Объект.РазмерностьПродолжительностиПланаОбучения");
	
	Возврат СтруктураИменРеквизитов;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФункцииПроверкиДоступностиКомандЗаявокПоТекущемуСтатусу

Функция ЗаявкаДоступноНаправитьНаСогласование(СтатусыЗаявок) Экспорт

	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.ПустаяСсылка")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

Функция ЗаявкаДоступноСогласовать(СтатусыЗаявок) Экспорт

	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

Функция ЗаявкаДоступноОтменитьСогласование(СтатусыЗаявок) Экспорт

	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

Функция ЗаявкаДоступноОтменитьОтклонение(СтатусыЗаявок) Экспорт
	
	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Отклонено")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

Функция ЗаявкаДоступноОтклонить(СтатусыЗаявок) Экспорт

	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается")) <> Неопределено;
	ЕстьЗначение = ЕстьЗначение ИЛИ СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

Функция ЗаявкаДоступноВернутьНаПодготовку(СтатусыЗаявок) Экспорт

	ЕстьЗначение = СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Рассматривается")) <> Неопределено;
	ЕстьЗначение = ЕстьЗначение ИЛИ СтатусыЗаявок.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СостоянияСогласования.Согласовано")) <> Неопределено;
		
	Возврат ЕстьЗначение;

КонецФункции

#КонецОбласти 

#Область ПрограммаОбучения

Процедура ПроверитьМаксимальнуюПродолжительностьПланаОбучения(Форма, ИмяРеквизитаЧислоКолонок) Экспорт
	
	ЧислоКолонок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаЧислоКолонок);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизитаЧислоКолонок, Мин(ЧислоКолонок, 12));
	
КонецПроцедуры

Процедура УстановитьНачалоУказанияИнтервала(Форма, ТекущиеДанные, ИмяРеквизитаПрограммаОбучения)

	ПрограммаОбучения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаПрограммаОбучения);
	
	Для каждого СтрокаПлана Из ПрограммаОбучения Цикл
		Если СтрокаПлана = ТекущиеДанные Тогда
			СтрокаПлана.НачалоУказанияИнтервала = Не ТекущиеДанные.НачалоУказанияИнтервала;
		Иначе
			СтрокаПлана.НачалоУказанияИнтервала = Ложь;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьНачалоОкончаниеВСтрокеПрограммыОбучения(Форма, ТекущиеДанные, НомерКолонкиНажатия)

	Если ТекущиеДанные.НачалоУказанияИнтервала Тогда
		ТекущиеДанные.Начало = НомерКолонкиНажатия;
		ТекущиеДанные.Окончание = НомерКолонкиНажатия;
	Иначе
		ТекущиеДанные.Начало = Мин(ТекущиеДанные.Начало, НомерКолонкиНажатия);
		ТекущиеДанные.Окончание = Макс(ТекущиеДанные.Окончание, НомерКолонкиНажатия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ШтатноеРасписаниеУстановитьДоступностьЭлементовПрограммыОбучения(Форма) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрограммаОбученияНастройкиГруппа",
		"ТолькоПросмотр",
		Форма.ПрограммаОбученияСоответствуютПрофилюДолжностиЧисло = 1);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПрограммаОбученияПодборПрограммыОбученияПоХарактеристикам",
		"Доступность",
		Форма.ПрограммаОбученияСоответствуютПрофилюДолжностиЧисло <> 1);

КонецПроцедуры

Функция ОписаниеСтруктурыИменРеквизитовПрограммыОбученияШтатногоРасписания() Экспорт 

	СтруктураИменРеквизитов = ОписаниеСтруктурыИменРеквизитовПрограммыОбучения();
	
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаПрограммаОбучения", "ПрограммаОбучения");
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаЧислаКолонок", "ПродолжительностьПланаОбучения");
	СтруктураИменРеквизитов.Вставить("ИмяРеквизитаРазмерностьПродолжительностиПланаОбучения", "РазмерностьПродолжительностиПланаОбучения");
	
	Возврат СтруктураИменРеквизитов;

КонецФункции

#КонецОбласти

Функция КраткоеНаименованиеПериодичности(Размерность)

	Если Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Возврат НСтр("ru = 'г.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Возврат НСтр("ru = 'дек.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Возврат НСтр("ru = 'дн.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Возврат НСтр("ru = 'кв.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Возврат НСтр("ru = 'мес.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Возврат НСтр("ru = 'нед.'");
	ИначеЕсли Размерность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Возврат НСтр("ru = 'пол.'");
	Иначе
		Возврат "";
	КонецЕсли;	

КонецФункции

#КонецОбласти