///////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция формирует описание таблицы данных для функции расчета остатка отпуска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками, описанными в тексте метода.
//
Функция ОписаниеТаблицыДанных() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Сотрудник и дата, на которую определяется остаток отпуска. Это ключ, который должен быть уникальным для каждой
	// строки.
	ТаблицаДанных.Колонки.Добавить("Сотрудник",						Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ДатаОстатков",					Новый ОписаниеТипов("Дата"));
	
	// Остатки отпуска на указанную дату.
	// Если ЭтоРасчетПриУвольнении = Истина, тогда алгоритм будет игнорировать движения, сделанные расчетом при увольнении.
	ТаблицаДанных.Колонки.Добавить("ЭтоРасчетПриУвольнении",		Новый ОписаниеТипов("Булево"));
	
	// График отпусков на год.
	// Фактические отпуска учитываются до даты документа, после даты документа только запланированные, если
	// ЭтоЗапланированныйОтпуск = Истина.
	ТаблицаДанных.Колонки.Добавить("ЭтоЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДатаДокумента",					Новый ОписаниеТипов("Дата"));
	
	// График отпусков и Отпуска организаций.
	// Если указан период отпуска, то для него по производственному календарю будет посчитано количество календарных дней
	// отпуска и рабочие года, за которые эти остатки были и будут заработаны.
	// Для каждого периода в поле Примечание будет добавлена информация о том, как остатки отпуска будут израсходованы на
	// указанный период. ДатаОкончания = ДатаОстатков всегда.
	ТаблицаДанных.Колонки.Добавить("ДатаНачала",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ТекущийРегистратор",			Документы.ТипВсеСсылки());
	
	// Отбор по виду ежегодного отпуска.
	ТаблицаДанных.Колонки.Добавить("ОтборПоВидуЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - перечисленные через запятую имена полей
//				таблицы фильтра (Сотрудник, НачалоПериода, ОкончаниеПериода).
//		ИмяВТФактическиеОтпускаСотрудников - имя создаваемой временной таблицы.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников.
//			ПоляОтбораСотрудников - Структура
//			ИмяВТФактическиеОтпускаСотрудников
//
Функция ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,НачалоПериода,ОкончаниеПериода", ИмяВТФактическиеОтпускаСотрудников = "ВТФактическиеОтпускаСотрудников") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц",				МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников",	ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников",					ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТФактическиеОтпускаСотрудников",		ИмяВТФактическиеОтпускаСотрудников);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Создает и помещает в менеджер временных таблиц
//	таблицу ВТФактическиеОтпускаСотрудников с данными фактических отпусков
//	сотрудников за период. Список сотрудников и периодов,
//	по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
//	таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
//	колонки имена которых переданы в метод ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная
//				методом ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//		ТолькоРазрешенные - Булево
//	
// Помещает в менеджер таблицу ВТФактическиеОтпускаСотрудников,
//	содержащую данные о времени сотрудников по производственным календарям с полями:
//		Сотрудник,
//		ВидЕжегодногоОтпуска,
//		ДатаНачала,
//		ДатаОкончания,
//		КоличествоДней,
//		ЭтоКомпенсация,
//		Регистратор,
//		РабочийПериодС,
//		РабочийПериодПо,
//		Основание
//
Процедура СоздатьВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные);
	Запрос.МенеджерВременныхТаблиц	= ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует справку по отпускам сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ЭтоРасчетПриУвольнении	- Если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
//
// Возвращаемое значение:
//	Табличный документ, в котором находится справка по отпускам.
//
Функция СправкаПоОтпускамСотрудника(Знач СписокСотрудников, Знач ДатаОстатков = '00010101', Знач ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников) Или ТипЗнч(СписокСотрудников) = Тип("Массив") И СписокСотрудников.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ТипЗнч(СписокСотрудников) <> Тип("Массив") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокСотрудников);
	КонецЕсли;
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	ФорматЧисла = "ЧДЦ=2; ЧРД=; ЧРГ=,";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
		
	ТаблицаСобытий = ТаблицаСобытийДляСправки(СписокСотрудников, ДатаОстатков, ЭтоРасчетПриУвольнении);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакетаДляПечати());
	
	ПервыйСотрудник = Истина;
	Для Каждого Результат Из ТаблицаСобытий Цикл
		
		Если Не ПервыйСотрудник Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСотрудник = Ложь;
		
		// Шапка отчета: место работы сотрудника и дата приема.
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Заполнить(Результат);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакета.Параметры.ТекущееПодразделение) Тогда
			ОбластьМакета.Параметры.ТекущееПодразделение = ОбластьМакета.Параметры.ТекущееПодразделение.ПолноеНаименование();
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Определяем виды отпусков, которые будут отображаться в справке.
		ТаблицаВидовОтпусковСотрудника = Неопределено;
		Для каждого СтрокаСобытий Из Результат.ДанныеСобытий Цикл
			
			Если ЗначениеЗаполнено(СтрокаСобытий.ПраваНаОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ПраваНаОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.НачальныеОстаткиОтпусков) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.НачальныеОстаткиОтпусков, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.ФактическиеОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ФактическиеОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТаблицаВидовОтпусковСотрудника = Неопределено ИЛИ ТаблицаВидовОтпусковСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыОтпусковСотрудника = ТаблицаВидовОтпусковСотрудника.ВыгрузитьКолонку("ВидОтпуска");
				
		// Шапка таблицы.
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|Тело");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			// Выводим их.
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|ВидОтпуска");
			ОбластьМакета.Параметры.ВидОтпуска = ВидОтпуска;
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла; 
		
		// Цикл по событиям.
		Для каждого СобытиеОтпусков Из Результат.ДанныеСобытий Цикл
			
			ЕстьНачальныеОстатки = (НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено И СобытиеОтпусков.НачальныеОстаткиОтпусков.Количество() > 0);
			
			// Вывод события-шапки.
			Если СобытиеОтпусков.ПоследнееСобытие Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|Тело");
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.ДокументСобытие) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСРасшифровкой|Тело");
				ОбластьМакета.Параметры.ТекстРасшифровка = СобытиеОтпусков.ДокументСобытие;
			Иначе	
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Тело");
			КонецЕсли;
			
			ОбластьМакета.Параметры.Период = Формат(СобытиеОтпусков.ДатаСобытия, ФорматДаты);
			ОбластьМакета.Параметры.Событие = СобытиеОтпусков.Событие;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				Если ЕстьНачальныеОстатки Тогда
					// Если есть остатки - выводим.
					ОбластьМакета = Макет.ПолучитьОбласть("НачальныеОстатки|ВидОтпуска");
					ОстатокОтпуска = 0;
					Для каждого НачальныйОстатокОтпуска Из СобытиеОтпусков.НачальныеОстаткиОтпусков Цикл
						Если НачальныйОстатокОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							ОстатокОтпуска = ОстатокОтпуска + НачальныйОстатокОтпуска.КоличествоДней;
						КонецЕсли;
					КонецЦикла; 
					ОбластьМакета.Параметры.КоличествоДней = Формат(ОстатокОтпуска, ФорматЧисла);
				ИначеЕсли СобытиеОтпусков.ПоследнееСобытие Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|ВидОтпуска");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка|ВидОтпуска");
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
			
			// Вывод прав на отпуск.
			Если ЗначениеЗаполнено(СобытиеОтпусков.ПраваНаОтпуска) Тогда
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ПраваНаОтпуск = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.ПраваНаОтпуска, ВидОтпуска);
					Если ПраваНаОтпуск = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПравоНаОтпуск = ПраваНаОтпуск[0];
					Если СобытиеОтпусков.Событие = НСтр("ru = 'Введены начальные данные'") 
						И ПравоНаОтпуск.КоличествоДнейОтпускаВГод = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Право на отпуск %1 - %2 дн.'"),
						ПравоНаОтпуск.ВидЕжегодногоОтпускаНаименование,
						ПравоНаОтпуск.КоличествоДнейОтпускаВГод);
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла; 
			КонецЕсли;
			
			// Если это остатки - выводим информацию по годам.
			Если НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остатки отпусков введены за периоды работы:'");
				ТабДокумент.Вывести(ОбластьМакета);
				
				ПредыдущийВидОтпуска = Неопределено;
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ОстаткиОтпуска = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.НачальныеОстаткиОтпусков, ВидОтпуска);
					Если ОстаткиОтпуска = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого ОстатокОтпуска Из ОстаткиОтпуска Цикл
						Если ПредыдущийВидОтпуска = Неопределено ИЛИ ОстатокОтпуска.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
							ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"	" + НСтр("ru = 'для отпуска ""%1"":'"),
								ОстатокОтпуска.ВидЕжегодногоОтпускаНаименование);
							ТабДокумент.Вывести(ОбластьМакета);
						КонецЕсли;
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru = '%1 - %2'"),
							Формат(ОстатокОтпуска.РабочийГодНачало,ФорматДаты),
							Формат(ОстатокОтпуска.РабочийГодОкончание,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
						
						ПредыдущийВидОтпуска = ОстатокОтпуска.ВидЕжегодногоОтпуска;
						
					КонецЦикла;
					
				КонецЦикла; 
			КонецЕсли;
			
			// Вывод накопленных дней
			Если Не ЕстьНачальныеОстатки Тогда
				Если ЗначениеЗаполнено(СобытиеОтпусков.НакопленоСПредыдущегоСобытия) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|Тело");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Накоплено за период %1 - %2'"),
						Формат(СобытиеОтпусков.ДатаПредыдущегоСобытия, ФорматДаты),
						Формат(?(СобытиеОтпусков.Событие = НСтр("ru='Отпуск по уходу за ребенком'"), СобытиеОтпусков.ДатаСобытия - 86400, СобытиеОтпусков.ДатаСобытия), ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
					
					Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
						КоличествоДней = 0;
						Для каждого НакоплениеОтпуска Из СобытиеОтпусков.НакопленоСПредыдущегоСобытия Цикл
							Если НакоплениеОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
								КоличествоДней = НакоплениеОтпуска.КоличествоДнейЗаПериод;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Параметры.КоличествоДней = ?(КоличествоДней = 0, "", "+"+Формат(КоличествоДней, ФорматЧисла));
						ТабДокумент.Присоединить(ОбластьМакета);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Вывод событий-отпусков
			Если ЗначениеЗаполнено(СобытиеОтпусков.ФактическиеОтпуска) Тогда
				// Вывод фактических отпусков
				// Определяем дату окончания в случае если отпусков несколько.
				ЕстьКомпенсация = Ложь;
				ЕстьРеальныйОтпуск = Ложь;
				ДнейКомпенсации = 0;
				
				ПериодыОтпуска = Новый ТаблицаЗначений;
				ПериодыОтпуска.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
				ПериодыОтпуска.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
				
				ДатаОкончанияОтпуска = СобытиеОтпусков.ДатаСобытия;
				Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
					
					ЕстьКомпенсация = ЕстьКомпенсация ИЛИ ФактическийОтпуск.Компенсация;
					ЕстьРеальныйОтпуск = ЕстьРеальныйОтпуск ИЛИ НЕ ФактическийОтпуск.Компенсация;
					
					Если ФактическийОтпуск.Компенсация Тогда
						ДнейКомпенсации = ДнейКомпенсации + ФактическийОтпуск.КоличествоДнейОтпуска;
					КонецЕсли;
					
					Для Каждого СтрокаПериода Из ФактическийОтпуск.ПериодыОтпуска Цикл 
						ЗаполнитьЗначенияСвойств(ПериодыОтпуска.Добавить(), СтрокаПериода);
					КонецЦикла;
					
				КонецЦикла; 
				
				ПериодыОтпуска.Свернуть("ДатаНачала,ДатаОкончания");
				ПредставлениеПериода = "";
				Для Каждого СтрокаПериода Из ПериодыОтпуска Цикл 
					ПредставлениеПериода = ПредставлениеПериода + ?(ПредставлениеПериода = "", "", "; ")
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2'"), 
						Формат(СтрокаПериода.ДатаНачала, ФорматДаты), Формат(СтрокаПериода.ДатаОкончания, ФорматДаты));
				КонецЦикла;
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|Тело");
				Если ЕстьКомпенсация И ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1 (+ %2 дн. компенсации)'"), ПредставлениеПериода, Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьКомпенсация И Не ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Компенсация отпуска (%1 дн.)'"), Формат(ДнейКомпенсации, ФорматЧисла));
				ИначеЕсли ЕстьРеальныйОтпуск И Не ЕстьКомпенсация Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Период отпуска: %1'"), ПредставлениеПериода);
				КонецЕсли;
				
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = 0;
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|ВидОтпуска");
					Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
						Если ФактическийОтпуск.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							КоличествоДней = КоличествоДней + ФактическийОтпуск.КоличествоДнейОтпуска;
						КонецЕсли;
					КонецЦикла;
					Если КоличествоДней > 0 Тогда
						ОбластьМакета.Параметры.КоличествоДней = "-"+Формат(КоличествоДней,ФорматЧисла);
					ИначеЕсли КоличествоДней < 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Параметры.КоличествоДней = "+"+Формат(-КоличествоДней,ФорматЧисла);
					Иначе
						ОбластьМакета.Параметры.КоличествоДней = "";
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьМакета);
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.Отклонения) Тогда
				ОтпускОтклонение = СобытиеОтпусков.Отклонения;
				// Вывод отпусков-отклонений.
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Период отпуска: %1 - %2'"),
					Формат(ОтпускОтклонение.ДатаНачалаОтсутствия,ФорматДаты),
					Формат(ОтпускОтклонение.ДатаОкончанияОтсутствия,ФорматДаты));
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Если ОтпускОтклонение.КоличествоДнейПродления = Null Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата окончания рабочего года определена как %1'"),
							Формат(ОтпускОтклонение.ДатаНачалаОтсутствия - 86400, ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
				ИначеЕсли ОтпускОтклонение.КоличествоДнейПродления > 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					Если СобытиеОтпусков.РабочиеГодаОтпусков.Количество() > 0 Тогда
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'На %1 дн. продлены рабочие года отпусков:'"), ОтпускОтклонение.КоличествоДнейПродления);
					Иначе
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'На %1 дн. продлен рабочий год отпуска:'"), ОтпускОтклонение.КоличествоДнейПродления);
					КонецЕсли;
					ТабДокумент.Вывести(ОбластьМакета);
					
					Для каждого РабочийГод Из СобытиеОтпусков.РабочиеГодаОтпусков Цикл
						Если ВидыОтпусковСотрудника.Найти(РабочийГод.ВидОтпуска) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru = 'для отпуска %1: %2 - %3'"),
							РабочийГод.ВидОтпуска,
							Формат(РабочийГод.РабочийГодДатаНачала,ФорматДаты),
							Формат(РабочийГод.РабочийГодДатаОкончания,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЦикла; 
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла; 
		
		СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат.ДанныеОстатков);
		
		ОстаткиОтпусковПоВидуОтпуска = СтруктураОстатковОтпусков.ОстаткиОтпусковПоВидуОтпуска;
		ПоложительныеОстатки				 = СтруктураОстатковОтпусков.ПоложительныеОстатки;
		АвансовыеОтпуска			 = СтруктураОстатковОтпусков.ОтрицательныеОстатки;
		
		Если СтруктураОстатковОтпусков.ЕстьОстатки Тогда
			// Подвал отчета: текущий остаток отпуска.
			ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|Тело");
			ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остаток отпуска'");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывод остатков отпусков.
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			СтрокаДней = ОстаткиОтпусковПоВидуОтпуска.Найти(ВидОтпуска, "ВидЕжегодногоОтпуска");
			ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|ВидОтпуска");
			ОбластьМакета.Параметры.КоличествоДней = ?(СтрокаДней= Неопределено, "", Формат(СтрокаДней.КоличествоДней,ФорматЧисла));
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла;
		
		// Вывод рабочих лет.
		Если ПоложительныеОстатки.Количество() > 0 Тогда
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Остатки отпусков накоплены за следующие периоды работы:'");
			ТабДокумент.Вывести(ОбластьМакета);
			ПредыдущийВидОтпуска = Неопределено;
			Для каждого СтрокаОстатков Из ПоложительныеОстатки Цикл
				Если СтрокаОстатков.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"	" + НСтр("ru = 'для отпуска ""%1"":'"),
						СтрокаОстатков.ВидОтпускаНаименование);
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"		" + НСтр("ru = '%1 - %2 (%3 дн.)'"),
					Формат(СтрокаОстатков.РабочийГодС, ФорматДаты),
					Формат(СтрокаОстатков.РабочийГодПо, ФорматДаты),
					Формат(СтрокаОстатков.КоличествоДней, ФорматЧисла));
				ТабДокумент.Вывести(ОбластьМакета);
				ПредыдущийВидОтпуска = СтрокаОстатков.ВидЕжегодногоОтпуска;
			КонецЦикла;
		КонецЕсли;
		
		Если АвансовыеОтпуска.Количество() > 0 Тогда
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru = 'Были использованы авансом отпуска за следующие периоды работы:'");
			ТабДокумент.Вывести(ОбластьМакета);
			ПредыдущийВидОтпуска = Неопределено;
			Для каждого СтрокаОстатков Из АвансовыеОтпуска Цикл
				Если СтрокаОстатков.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"	" + НСтр("ru = 'для отпуска ""%1"":'"),
						СтрокаОстатков.ВидОтпускаНаименование);
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"		" + НСтр("ru = '%1 - %2'"),
					Формат(СтрокаОстатков.РабочийГодС, ФорматДаты),
					Формат(СтрокаОстатков.РабочийГодПо, ФорматДаты));
				ТабДокумент.Вывести(ОбластьМакета);
				ПредыдущийВидОтпуска = СтрокаОстатков.ВидЕжегодногоОтпуска;
			КонецЦикла;
		КонецЕсли;
		
		// Вывод разделителя.
		ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
		ОбластьМакета.Параметры.Текст  = "";
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции

// Возвращает структуру, которая используется для передачи параметров для функции ОстаткиОтпусков().
// 	- ДатаОстатков 				- дата, на которую происходит расчет остатков.
// 	- Сотрудники				- массив сотрудников или одиночное значение типа СправочникСсылка.Сотрудники
// 	- ВидыОтпусков				- массив видов отпусков или одиночное значение типа СправочникСсылка.ВидыОтпусков
// 	- ИсключаемыеРегистраторы 	- массив ссылок регистраторов или одиночное значение типа ДокументСсылка.
//
Функция ОписаниеПараметровДляОстаткиОтпусков() Экспорт

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаОстатков", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Сотрудники");
	СтруктураПараметров.Вставить("ВидыОтпусков");
	СтруктураПараметров.Вставить("ИсключаемыеРегистраторы");
	СтруктураПараметров.Вставить("ЭтоРасчетПриУвольнении", Ложь);
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция, отвечающая за расчет отпусков, положенных сотруднику.
// Предоставляет данные для специализированных функций служебного программного интерфейса.
// Не должна вызываться напрямую из библиотек зарплатно-кадровой функциональности.
//
// Параметры
//	СтруктураПараметров - тип Структура, со следующими полями (см. ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков()).
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - остатки отпусков сотрудников в разрезе рабочих лет, таблица значений с колонками:
//		* Сотрудник					- сотрудник
//		* ВидОтпуска				- вид отпуска
//		* ВидОтпускаНаименование    - наименование вида отпуска
//		* РабочийГодДатаНачала		- начало рабочего года
//		* РабочийГодДатаОкончания	- конец рабочего года
//		* Дни                       - остаток отпуска.
//
Функция ОстаткиОтпусков(ПараметрыОстатков) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.Сотрудники)
		И ТипЗнч(ПараметрыОстатков.Сотрудники) <> Тип("Массив") Тогда
		
		СотрудникМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.Сотрудники);
		ПараметрыОстатков.Сотрудники = СотрудникМассив;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.ВидыОтпусков)
		И ТипЗнч(ПараметрыОстатков.ВидыОтпусков) <> Тип("Массив") Тогда
		
		ВидыОтпусковМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.ВидыОтпусков);
		ПараметрыОстатков.ВидыОтпусков = ВидыОтпусковМассив;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОстатков.ИсключаемыеРегистраторы)
		И ТипЗнч(ПараметрыОстатков.ИсключаемыеРегистраторы) <> Тип("Массив") Тогда
		
		РегистраторМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОстатков.ИсключаемыеРегистраторы);
		ПараметрыОстатков.ИсключаемыеРегистраторы = РегистраторМассив;
		
	КонецЕсли;
	
	// Заполняем регистр ЗаработанныеПраваНаОтпуска.
    ОстаткиОтпусков.РасчетЗаработанныхОтпусков(ПараметрыОстатков.Сотрудники, ПараметрыОстатков.ДатаОстатков, ПараметрыОстатков.ЭтоРасчетПриУвольнении);
	
	ПараметрыТаблицыОстатков = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОстатков);
	ТаблицаРасчета = ТаблицаОстатковОтпусков(ПараметрыТаблицыОстатков);
	
	Возврат ТаблицаРасчета;
	
КонецФункции

#Область ЗаполнениеТабличныхЧастейПравамиНаОтпуска

// Описатель параметров для ЗаполнитьПоложеннымиПравамиСотрудника() и ЗаполнитьДействующимиПравамиСотрудника().
//
Функция ОписаниеПараметровДанныхКадровогоДокумента() Экспорт
	
	ДанныеДокумента = Новый Структура;
	
	ДанныеДокумента.Вставить("Регистратор");
	ДанныеДокумента.Вставить("Сотрудник");
	ДанныеДокумента.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	Возврат ДанныеДокумента;
	
КонецФункции

// Описатель параметров для ЗаполнитьПоложеннымиПравамиСотрудника()
//
Функция ОписаниеПараметровДанныхПозиции() Экспорт

	ДанныеПозиции = Новый Структура;
	
	ДанныеПозиции.Вставить("ДолжностьПоШтатномуРасписанию");
	ДанныеПозиции.Вставить("Подразделение");
	ДанныеПозиции.Вставить("Должность");
	ДанныеПозиции.Вставить("Территория");
	
	Возврат ДанныеПозиции;

КонецФункции

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
// 	ДанныеНовойПозиции		 - набор параметров устанавливаемой позиции.
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции().
// 	ДанныеПрошлойПозиции	 - набор параметров прошлой позиции, на основании которых были сформированы текущие права на отпуска сотрудника.
//								Необязательный.
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции().
//
Процедура ЗаполнитьПоложеннымиПравамиСотрудника(ТабличнаяЧастьОбъекта, ДанныеДокумента, ДанныеНовойПозиции, ДанныеПрошлойПозиции = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.ДатаСобытия) Тогда
		ДанныеДокумента.ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	// Получаем действующие права.
	ДействующиеПрава = ДействующиеПраваСотрудника(ДанныеДокумента.Сотрудник, ДанныеДокумента.ДатаСобытия, ДанныеДокумента.Регистратор);
	
	// Получаем пул отпусков по данным текущей позиции.	
	ОтпускаПоПозиции = ОтпускаПоПозиции(ДанныеДокумента, ДанныеНовойПозиции);
	ОтпускаПоТерритории = ОтпускаПоТерритории(ДанныеНовойПозиции.Территория, ДанныеДокумента.ДатаСобытия);
	
	// В том случае, если есть предыдущие права - необходимо понять, какие из действующих прав были обусловлены
	// предыдущими данными позиции (ДолжностьШР, Подразделение, Должность, Территория).
	// В том случае, если они не присутствуют в правах новой позиции - удалить из назначаемых прав.
	Если ДанныеПрошлойПозиции <> Неопределено Тогда
		НаборПредыдущихПрав = ДействующиеПрава.Скопировать();
		
		МассивПрав = Новый Массив;
		МассивПрав.Добавить(ОтпускаПоПозиции(ДанныеДокумента, ДанныеПрошлойПозиции));
		МассивПрав.Добавить(ОтпускаПоТерритории(ДанныеПрошлойПозиции.Территория, ДанныеДокумента.ДатаСобытия));
		ПредыдущиеПраваПозиции = ОбъединитьПулыПравНаОтпуска(МассивПрав);
		
		МассивПрав = Новый Массив;
		МассивПрав.Добавить(ОтпускаПоПозиции);
		МассивПрав.Добавить(ОтпускаПоТерритории);
		НовыеПраваПозиции = ОбъединитьПулыПравНаОтпуска(МассивПрав);
		
		УдалитьНеактуальныеОтпускаПозицииИзДействующихПрав(ДействующиеПрава, ПредыдущиеПраваПозиции, НовыеПраваПозиции);
	Иначе
		ПредыдущиеПрава = Неопределено;
	КонецЕсли;
	
	МассивПрав = Новый Массив;
	МассивПрав.Добавить(ДействующиеПрава);
	МассивПрав.Добавить(ОтпускаПоПозиции);
	МассивПрав.Добавить(ОтпускаПоТерритории);
	МассивПрав.Добавить(ЛичныеЕжегодныеОтпуска(ДанныеДокумента.Сотрудник));
	
	ИтоговаяТаблицаПрав = ОбъединитьПулыПравНаОтпуска(МассивПрав);
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ИтоговаяТаблицаПрав, НаборПредыдущихПрав);
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
//
Процедура ЗаполнитьДействующимиПравамиСотрудника(ТабличнаяЧастьОбъекта, ДанныеДокумента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеДокумента.ДатаСобытия) Тогда
		ДанныеДокумента.ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	ДействующиеПрава = ДействующиеПраваСотрудника(ДанныеДокумента.Сотрудник, ДанныеДокумента.ДатаСобытия, ДанныеДокумента.Регистратор);	
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ДействующиеПрава, ДействующиеПрава);
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта	 - табличная часть для заполнения.
// 	ДанныеДокумента			 - данные кадрового документа
//								тип Структура, см. ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента().
//
Процедура ЗаполнитьПоложеннымиПравамиПозициюШР(ТабличнаяЧастьОбъекта, Подразделение, Должность, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта.Очистить();
	
	ПоложенныеОтпуска = ЕжегодныеОтпускаДляПозицииШтатногоРасписания(Подразделение, Должность, ДатаСобытия);
	
	ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, ПоложенныеОтпуска);
	
КонецПроцедуры

#КонецОбласти 

// Получение остатка отпуска

// Функция рассчитывает остаток отпуска для одного сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ИсключаемыйРегистратор	- необязательный, регистратор, исключаемый из расчета.
//	ЭтоРасчетПриУвольнении	- необязательный, если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
// Возвращаемое значение:
//	Структура с остатком, рабочим периодом остатка, текстовым представлением остатка и вложенными структурами с
//	остатками в разрезе отпусков и рабочих лет.
//
Функция ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаОстатков = '00010101', ИсключаемыйРегистратор = Неопределено, ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ОстатокНаДату", 0);
	ВозвращаемаяСтруктура.Вставить("РабочийГодС", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("РабочийГодПо", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("Примечание", "");
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеВидовОтпусков", Новый Массив);
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков", Новый Массив);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ВозвращаемаяСтруктура; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыОтбора = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыОтбора.ДатаОстатков			= НачалоДня(ДатаОстатков);
	ПараметрыОтбора.Сотрудники 				= Сотрудник;
	ПараметрыОтбора.ИсключаемыеРегистраторы	= ИсключаемыйРегистратор;
	ПараметрыОтбора.ЭтоРасчетПриУвольнении	= ЭтоРасчетПриУвольнении;
	
	Результат = ОстаткиОтпусков(ПараметрыОтбора);
	СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат, Сотрудник);
	
	ОбщиеОстаткиСотрудника = СтруктураОстатковОтпусков.ОстаткиОтпусков;
	Если ОбщиеОстаткиСотрудника.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, ОбщиеОстаткиСотрудника[0]);
		ВозвращаемаяСтруктура.ОстатокНаДату = ОбщиеОстаткиСотрудника[0].КоличествоДней;
	КонецЕсли;
	ВозвращаемаяСтруктура.Примечание = Строка(ВозвращаемаяСтруктура.ОстатокНаДату) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней", ВозвращаемаяСтруктура.ОстатокНаДату);
	
	ВозвращаемаяСтруктура.ОстаткиВРазрезеВидовОтпусков = СтруктураОстатковОтпусков.ОстаткиОтпусковПоВидуОтпуска;
	ВозвращаемаяСтруктура.ОстаткиВРазрезеРабочихЛетИВидовОтпусков = СтруктураОстатковОтпусков.ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция рассчитывает сводные остатки отпусков для списка сотрудников. Остаток рассчитывается на конец дня.
//
// Параметры:
//	Сотрудники				- список сотрудников;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ВидыОтпусков			- массив элементов справочника ВидыОтпусков, по которым необходимы остатки, если не указано
//								остатки получаются по всем видам отпусков.
//
Функция ОстаткиОтпусковСотрудниковНаДату(Сотрудники, ДатаОстатков = '00010101', ВидыОтпусков = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтруктураПараметров = ОписаниеПараметровДляОстаткиОтпусков();
	СтруктураПараметров.Сотрудники	 = Сотрудники;
	СтруктураПараметров.ДатаОстатков = НачалоДня(ДатаОстатков);
	СтруктураПараметров.ВидыОтпусков = ВидыОтпусков;
	
	Результат = ОстаткиОтпусков(СтруктураПараметров);
	СтруктураОстатковОтпусков = РазложитьТаблицуОстатковОтпусков(Результат);
	
	СводныеОстатки = СтруктураОстатковОтпусков.ОстаткиОтпусков;
	
	Возврат СводныеОстатки;
	
КонецФункции

// Возвращает структуру для передачи параметров в РабочийПериодОтпуска()
//
Функция ПараметрыПолученияРабочегоПериодаОтпуска() Экспорт 

	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Сотрудник");
	ПараметрыПолучения.Вставить("ТекущийРегистратор");
	ПараметрыПолучения.Вставить("ВидОтпуска");
	ПараметрыПолучения.Вставить("ДатаНачала");
	ПараметрыПолучения.Вставить("ДатаОкончания");
	ПараметрыПолучения.Вставить("ДатаКомпенсации", Дата("00010101"));
	ПараметрыПолучения.Вставить("КоличествоДнейКомпенсации", 0);
	Возврат ПараметрыПолучения;

КонецФункции
            
// Функция определяет общий рабочий период для указанного отпуска с учетом компенсации.
//
// Параметры:
//	Структура со следующими полями (см. ПараметрыПолученияРабочегоПериодаОтпуска()):
//		Сотрудник					- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//		ТекущийРегистратор			- При определении рабочего периода движения, сделанные переданным регистратором, будут
//		                     			проигнорированы.
//		ВидОтпуска					- Вид ежегодного отпуска.
//		ДатаНачала					- Дата начала отпуска.
//		ДатаОкончания				- Дата окончания отпуска.
//		ДатаКомпенсации				- Дата компенсации отпуска.
//		КоличествоДнейКомпенсации	- Количество дней компенсации отпуска.
//
// Возвращаемое значение:
//	Структура с периодом рабочего года.
//
Функция РабочийПериодОтпуска(СтруктураПараметров) Экспорт
	
	ДатаОстатков = СтруктураПараметров.ДатаНачала;
	Если ДатаОстатков = Дата(1, 1, 1) Тогда
		ДатаОстатков = СтруктураПараметров.ДатаКомпенсации;
	КонецЕсли;
	
	ОписаниеВидаОтпуска = ОписаниеВидаОтпуска(СтруктураПараметров.ВидОтпуска, ОтпускСотрудникаВРабочихДняхПоДоговору(СтруктураПараметров.Сотрудник, ДатаОстатков));
	ЕжегодныйОтпуск = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ВидОтпуска, "ОтпускЯвляетсяЕжегодным");
	
	КоличествоДнейОтпуска = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
		СтруктураПараметров.Сотрудник,
		СтруктураПараметров.ДатаНачала,
		СтруктураПараметров.ДатаОкончания,
		ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням,
		ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		
	РасходуетсяДней = КоличествоДнейОтпуска + СтруктураПараметров.КоличествоДнейКомпенсации;
	
	ПараметрыВызова = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыВызова.Сотрудники = СтруктураПараметров.Сотрудник;
	ПараметрыВызова.ДатаОстатков = НачалоДня(ДатаОстатков);
	ПараметрыВызова.ВидыОтпусков = СтруктураПараметров.ВидОтпуска;
	ПараметрыВызова.ИсключаемыеРегистраторы = СтруктураПараметров.ТекущийРегистратор;
	
	ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	
	ОбщийОстатокОтпуска = ОстаткиОтпусковСотрудника.Итог("Дни");
	Если РасходуетсяДней > ОбщийОстатокОтпуска Тогда
		// Остатков отпуска на текущий момент не хватает, необходимо посчитать "будущие" остатки.
		// Чтобы не получить бесконечную итерацию, устанавливаем максимальную дату "заглядывания в будущее".
		// 1. получаем остатки на максимальную дату.
		МаксимальнаяДата = Дата(Год(ТекущаяДатаСеанса()) + 5, Месяц(ТекущаяДатаСеанса()), День(ТекущаяДатаСеанса()));
		Для каждого ОстатокОтпуска Из ОстаткиОтпусковСотрудника Цикл
			МаксимальнаяДата = Макс(МаксимальнаяДата, ОстатокОтпуска.РабочийГодДатаОкончания);
		КонецЦикла;
		ПараметрыВызова.ДатаОстатков = МаксимальнаяДата;
		ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	КонецЕсли;	
		
	РабочийГодПериодаС = '00010101';
	РабочийГодПериодаПо = '00010101';
	Для каждого ОстатокОтпуска Из ОстаткиОтпусковСотрудника Цикл
		Если РасходуетсяДней <= 0 Тогда
			Прервать;
		КонецЕсли;
		Если ОстатокОтпуска.Дни < 0 Тогда
			РабочийГодПериодаС = ОстатокОтпуска.РабочийГодДатаНачала;
			РабочийГодПериодаПо = ОстатокОтпуска.РабочийГодДатаОкончания;
			Прервать;
		КонецЕсли;
		Если РабочийГодПериодаС = '00010101' Тогда
			РабочийГодПериодаС = ОстатокОтпуска.РабочийГодДатаНачала;
		КонецЕсли;
		РабочийГодПериодаПо = ОстатокОтпуска.РабочийГодДатаОкончания;
		РасходуетсяДней = РасходуетсяДней - ОстатокОтпуска.Дни;
	КонецЦикла; 
	
	// Если расход идет авансом, то:
	Если РасходуетсяДней > 0 Тогда
		Если РабочийГодПериодаС = '00010101' Тогда
			РабочийГодПериодаС = ?(РабочийГодПериодаПо = '00010101', НачалоДня(ДатаОстатков), КонецДня(РабочийГодПериодаПо) + 1);
		КонецЕсли;
		Если РабочийГодПериодаПо = '00010101' Тогда
			РабочийГодПериодаПо = ДобавитьМесяц(РабочийГодПериодаС, 12) - 1;
		Иначе
			РабочийГодПериодаПо = ДобавитьМесяц(РабочийГодПериодаПо, 12);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("РабочийГодС, РабочийГодПо", РабочийГодПериодаС, РабочийГодПериодаПо);
	
КонецФункции

// Функция определяет общий рабочий период для всех указанных отпусков и компенсаций.
//
// Параметры:
//	Сотрудник			- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ТекущийРегистратор	- При определении рабочего периода движения, сделанные переданным регистратором, будут
//	                     проигнорированы.
//	СписокОтпусков		- Таблица значений со списком отпусков:
//		ДатаНачала			- Дата начала отпуска.
//		ДатаОкончания		- Дата окончания отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//	СписокКомпенсаций	- Таблица значений со списком компенсаций.
//		ДатаКомпенсации		- Дата компенсации отпуска.
//		КоличествоДней		- Количество дней компенсации отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//
// Возвращаемое значение:
//	Структура с периодом общего для всех отпусков рабочего года.
//
Функция РабочиеПериодыСпискаОтпусков(Сотрудник, ТекущийРегистратор, СписокОтпусков, СписокКомпенсаций) Экспорт
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	ДатаОстатков = Дата(1, 1, 1);
	Для Каждого Отпуск Из СписокОтпусков Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Отпуск.ДатаНачала Тогда
			ДатаОстатков = Отпуск.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Компенсация.ДатаКомпенсации Тогда
			ДатаОстатков = Компенсация.ДатаКомпенсации;
		КонецЕсли;
	КонецЦикла;
	
	МассивОтпусков = Новый Массив;
	Для Каждого Отпуск Из СписокОтпусков Цикл
		МассивОтпусков.Добавить(Отпуск.ВидОтпуска);
	КонецЦикла;
	
	МассивКомпенсаций = Новый Массив;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		МассивКомпенсаций.Добавить(Компенсация.ВидОтпуска);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпусков, МассивКомпенсаций, Истина);
	
	ПараметрыВызова = ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыВызова.Сотрудники = Сотрудник;
	ПараметрыВызова.ДатаОстатков = НачалоДня(Дата(Год(ДатаОстатков) + 5, Месяц(ДатаОстатков), День(ДатаОстатков)));
	ПараметрыВызова.ВидыОтпусков = МассивОтпусков;
	ПараметрыВызова.ИсключаемыеРегистраторы = ТекущийРегистратор;
	
	ОстаткиОтпусковСотрудника = ОстаткиОтпусков(ПараметрыВызова);
	
	РабочиеПериодыПоВидамОтпусков = Новый Соответствие;
	
	ВидОтпуска = Неопределено;
	
	Для Каждого Результат Из ОстаткиОтпусковСотрудника Цикл
		
		Если ВидОтпуска <> Результат.ВидОтпуска Тогда
			РабочийГодС		= '00010101';
			РабочийГодПо	= '00010101';
			
			КоличествоДней = 0;
			СтрокиОтпуска = СписокОтпусков.НайтиСтроки(Новый Структура("ВидОтпуска", Результат.ВидОтпуска));
			Для Каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				КоличествоДней = КоличествоДней + СтрокаОтпуска.КоличествоДней;
			КонецЦикла;			
			СтрокиКомпенсации = СписокКомпенсаций.НайтиСтроки(Новый Структура("ВидОтпуска", Результат.ВидОтпуска));
			Для Каждого СтрокаКомпенсации Из СтрокиКомпенсации Цикл
				КоличествоДней = КоличествоДней + СтрокаКомпенсации.КоличествоДней;
			КонецЦикла;		
			
			ВидОтпуска = Результат.ВидОтпуска;
		КонецЕсли; 
		
		Если КоличествоДней <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РабочийГодС) Или РабочийГодС > Результат.РабочийГодДатаНачала Тогда
			РабочийГодС		= Результат.РабочийГодДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РабочийГодПо) Или РабочийГодПо < Результат.РабочийГодДатаОкончания Тогда
			РабочийГодПо	= Результат.РабочийГодДатаОкончания;
		КонецЕсли;
		РабочиеПериодыПоВидамОтпусков.Вставить(
			Результат.ВидОтпуска,
			Новый Структура("РабочийГодС, РабочийГодПо", РабочийГодС, РабочийГодПо));
		КоличествоДней = КоличествоДней - Результат.Дни;
	КонецЦикла;
		
	Возврат РабочиеПериодыПоВидамОтпусков;
	
КонецФункции

// Функция возвращает имя макета для подсистемы Печать.
//
Функция ИмяМакетаДляПечати() Экспорт
	
	Возврат "ОбщийМакет.ПФ_MXL_СправкаПоОтпускамСотрудника";
	
КонецФункции

// Процедура заполняет объект ежегодными отпусками, которые предоставляются всем сотрудникам.
//
// Параметры:
//	Объект	- ДокументОбъект, в котором есть ТЧ ЕжегодныеОтпуска.
//  ОчищатьПередЗаполнением - Булево.
//
Процедура ЗаполнитьОбщимиЕжегоднымиОтпусками(Объект, ОчищатьПередЗаполнением = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))
	|	И НЕ ВидыОтпусков.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтпусков.Предопределенный УБЫВ,
	|	ВидыОтпусков.Наименование";
	
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	Если ОчищатьПередЗаполнением Тогда
		Объект.ЕжегодныеОтпуска.Загрузить(ТаблицаОтпусков);
	Иначе
		
		Для каждого СтрокаТаблицыОтпусков Из ТаблицаОтпусков Цикл
			ЗаполнитьЗначенияСвойств(Объект.ЕжегодныеОтпуска.Добавить(), СтрокаТаблицыОтпусков);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках сотрудника и выводит в документе сведения
//  об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть Сотрудник и ТЧ ЕжегодныеОтпуска.
//	ИмяРеквизитаДатаСобытия	- Имя реквизита из переменной Объект, по которому необходимо определять дату получения
//	                          данных.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахСотрудника(Объект, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаСотрудника(Объект.Сотрудник, Объект[ИмяРеквизитаДатаСобытия], Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтруктураПоиска = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые указаны в штатном расписании.
//
// Параметры:
//	Объект									- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ЗаполнитьЕжегоднымиОтпускамиШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Позиции = Объект.Позиции.ВыгрузитьКолонку("Позиция");
	ЕжегодныеОтпускаПозиций = ЕжегодныеОтпускаПозицииШтатногоРасписания(Позиции, ДатаВступленияВСилу, Объект.Ссылка);
	Если ЕжегодныеОтпускаПозиций.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиции", Позиции);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&Позиции)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ВидЕжегодногоОтпуска";
			
		ЕжегодныеОтпускаПозиций = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ДополнитьСведениями = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		
		ОтпускаПозиции = ЕжегодныеОтпускаПозиций.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", СтрокаПозиции.Позиция));
		Для Каждого СтрокаОтпускаПоПозиции Из ОтпускаПозиции Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции);
			СтруктураПоиска.Вставить("ВидЕжегодногоОтпуска", СтрокаОтпускаПоПозиции.ВидЕжегодногоОтпуска);
			
			СтрокиОтпускаПозиции = Объект.ЕжегодныеОтпуска.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОтпускаПозиции.Количество() = 0 Тогда
				
				СтрокаОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтпуска, СтрокаОтпускаПоПозиции);
				СтрокаОтпуска.ИдентификаторСтрокиПозиции	= СтрокаПозиции.ИдентификаторСтрокиПозиции;
				
			ИначеЕсли СтрокиОтпускаПозиции[0].КоличествоДнейВГод = 0 Тогда
				
				СтрокаОтпуска = СтрокиОтпускаПозиции[0];
				СтрокаОтпуска.КоличествоДнейВГод = СтрокаОтпускаПоПозиции.КоличествоДнейВГод;
				
			КонецЕсли;
			
			Если ДополнитьСведениями Тогда
				СтрокаОтпуска.ДействующийОтпуск			= Истина;
				СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
				ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках штатного расписания и выводит в документе
// сведения об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаПозицииШтатногоРасписания(Объект.Позиции.Выгрузить(, "Позиция"), ДатаВступленияВСилу, Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтрокиПозиции = Объект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаОтпуска.ИдентификаторСтрокиПозиции));
		Если СтрокиПозиции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ПозицияШтатногоРасписания, ВидЕжегодногоОтпуска", СтрокиПозиции[0].Позиция, СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает условное оформление в форме для ТЧ "Ежегодные отпуска".
//
// Параметры:
//	Форма	- Форма с ТЧ ЕжегодныеОтпуска.
//
Процедура УстановитьУсловноеОформлениеЕжегодныхОтпусков(Форма) Экспорт
	
	СтруктураОпределения = Новый Структура("Объект",Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураОпределения,Форма);
	Если СтруктураОпределения.Объект = Неопределено Тогда
		СтрокаОтпусков = "ЕжегодныеОтпуска";
	Иначе
		СтрокаОтпусков = "Объект.ЕжегодныеОтпуска";
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".КоличествоДнейВГод");
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ТекущееКоличествоДнейВГод");
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ЕжегодныеОтпуска.Действие" );
		ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ДействующийОтпуск");
		ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".Действие");
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Отменить;
	
КонецПроцедуры

// Функция возвращает количество дней отпуска в год по умолчанию.
//
// Параметры:
//	ВидЕжегодногоОтпуска - СправочникСсылка.ВидОтпуска - вид отпуска, для которого необходимо получить количество дней
//	                                                     по умолчанию.
//
Функция КоличествоДнейОтпускаВГодПоУмолчанию(ВидЕжегодногоОтпуска) Экспорт
	
	Если ВидЕжегодногоОтпуска = Неопределено Или ВидЕжегодногоОтпуска.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска,КоличествоДнейВГод");
	Если РеквизитыОбъекта.ХарактерЗависимостиДнейОтпуска <> ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит") Тогда
		Возврат Неопределено;
	Иначе
		Возврат РеквизитыОбъекта.КоличествоДнейВГод;
	КонецЕсли;
	
КонецФункции

// Формирует форматированную строку с информацией о ежегодных отпусках сотрудника.
// Параметры:
// 	ТаблицаОтпусков - таблица значений с правами на отпуск сотрудника.
// 	ТолькоПросмотр - состояние открытия формы.
// 	РежимФормирования - режим формирования надписи.
//		* 0 - простой список отпусков
//		* 1 - расширенное представление, с учетом изменений
//		* 2 - краткий вывод измененных отпусков.
//
Функция НадписьПраваНаОтпуск(ТаблицаОтпусков, ТолькоПросмотр, РежимФормирования = 0) Экспорт
	
	МассивФорматированнойСтроки = ПредставлениеПраваНаОтпускПоКоллекцииСтрок(ТаблицаОтпусков, ТолькоПросмотр, РежимФормирования);
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированнойСтроки);

КонецФункции

// Проведение по регистрам

// Заполняет движения видами ежегодных отпусков по штатному расписанию
//		ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		ПозицияШтатногоРасписания
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияЕжегодныхОтпусковПоШтатномуРасписанию(Движения, ДатаСобытия, ЕжегодныеОтпуска) Экспорт
	
	Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Записывать = Истина;
	Пока ЕжегодныеОтпуска.Следующий() Цикл
		НоваяСтрока = Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Добавить();
		НоваяСтрока.Дата						= ДатаСобытия;
		НоваяСтрока.ПозицияШтатногоРасписания	= ЕжегодныеОтпуска.ПозицияШтатногоРасписания;
		НоваяСтрока.ВидЕжегодногоОтпуска		= ЕжегодныеОтпуска.ВидЕжегодногоОтпуска;
		НоваяСтрока.КоличествоДнейВГод			= ЕжегодныеОтпуска.КоличествоДнейВГод;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		ПоложенныеВидыЕжегодныхОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияПоложенныхЕжегодныхОтпусков(РегистраторСсылка, Движения, ЕжегодныеОтпуска) Экспорт
	
	ИспользуемВозвратныеСобытия = Ложь;
	Если ЕжегодныеОтпуска.Колонки.Найти("ДействуетДо") <> Неопределено Тогда
		Для Каждого СтрокаОтпуск Из ЕжегодныеОтпуска Цикл
			Если ЗначениеЗаполнено(СтрокаОтпуск.ДействуетДо) Тогда
				ИспользуемВозвратныеСобытия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЕстьИспользуется = ЕжегодныеОтпуска.Колонки.Найти("Используется") <> Неопределено;
	
	Если НЕ ИспользуемВозвратныеСобытия Тогда
		// Просто записываем данные в регистр.
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = Строка.ДатаСобытия;
			Если ЕстьИспользуется Тогда
				НоваяСтрока.Используется = Строка.Используется;
			Иначе
				НоваяСтрока.Используется = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИспользованиеПоОкончанииОпределено = ЕжегодныеОтпуска.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
		
		// Формируем движения с учетом текущего состояния регистра.
		// Формируем таблицу измерений.
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		
		Для Каждого СтрокаДвижений Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = ИзмеренияДаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
			НоваяСтрока.Период = СтрокаДвижений.ДатаСобытия;
		КонецЦикла;
		
		// Смотрим картину на дату проведения.
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, ИзмеренияДаты, РегистраторСсылка, Ложь);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЗависитОтСтажа
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ПоложенныеОтпуска.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется");	
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеПрава = Запрос.Выполнить().Выгрузить();
		
		// необходимо обработать возвратные стажевые движения
		ТаблицаВозвратныхПравЗависящихОтСтажа = Новый ТаблицаЗначений;
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
		
		СтрокиНабораВозвратныхПравЗависящихОтСтажа = Новый Массив;
		
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл
			
			// Движения с возвратным значениями записываются всегда.
			// Движения не меняющие состав начислений записываются в случаях изменения состояния.
			Если НЕ ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", Строка.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", Строка.ВидЕжегодногоОтпуска);
				
				СтрокиПредыдущихЗначений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
					Если СтрокиПредыдущихЗначений[0].КоличествоДнейВГод = Строка.КоличествоДнейВГод
						И СтрокиПредыдущихЗначений[0].Используется = Строка.Используется Тогда
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			НоваяСтрока.Период = Строка.ДатаСобытия;
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска = Строка.ВидЕжегодногоОтпуска;
			НоваяСтрока.КоличествоДнейВГод = Строка.КоличествоДнейВГод;
			НоваяСтрока.Используется = Строка.Используется;
			
			// Записываем возвратную информацию.
			Если ЗначениеЗаполнено(Строка.ДействуетДо)
				И Строка.ДействуетДо > НоваяСтрока.Период Тогда
				
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", НоваяСтрока.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", НоваяСтрока.ВидЕжегодногоОтпуска);
				СтруктураОтбораСтрок.Вставить("Используется", Истина);
				
				СтрокиДействующихНачислений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиДействующихНачислений.Количество() > 0 Тогда
					
					НоваяСтрока.ИспользуетсяПоОкончании = Истина;
					НоваяСтрока.КоличествоДнейВГодПоОкончании = СтрокиДействующихНачислений[0].КоличествоДнейВГод;
					
					Если СтрокиДействующихНачислений[0].ЗависитОтСтажа Тогда
						
						СтрокаПрава = ТаблицаВозвратныхПравЗависящихОтСтажа.Добавить();
						СтрокаПрава.НачалоПериода = СтрокиДействующихНачислений[0].ПериодЗаписи;
						СтрокаПрава.ОкончаниеПериода = НоваяСтрока.ДействуетДо;
						СтрокаПрава.Сотрудник = НоваяСтрока.Сотрудник;
						СтрокаПрава.ВидЕжегодногоОтпуска = НоваяСтрока.ВидЕжегодногоОтпуска;
						
						СтрокиНабораВозвратныхПравЗависящихОтСтажа.Добавить(НоваяСтрока);
						
					КонецЕсли;
					
					Если ИспользованиеПоОкончанииОпределено Тогда
						НоваяСтрока.ИспользуетсяПоОкончании = Строка.ИспользуетсяПоОкончании;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
		// Если есть стажевые движения
		Если ТаблицаВозвратныхПравЗависящихОтСтажа.Количество() > 0 Тогда
			ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаВозвратныхПравЗависящихОтСтажа, СтрокиНабораВозвратныхПравЗависящихОтСтажа);
		КонецЕсли; 
		
	КонецЕсли;
	
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записать();
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		НачальныеОстаткиОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		НачалоРабочегоГода
//		ДатаНачальныхОстатков
//		КоличествоДней
//
Процедура СформироватьДвиженияНачальныхОстатковОтпусков(Движения, ЕжегодныеОтпуска) Экспорт
	
	Для Каждого СтрокаДанных Из ЕжегодныеОтпуска Цикл
		
		Если СтрокаДанных.ДатаОстатка = Дата(1, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движения.НачальныеОстаткиОтпусков.Добавить(), СтрокаДанных);
		
	КонецЦикла;
	Движения.НачальныеОстаткиОтпусков.Записать();
	Движения.НачальныеОстаткиОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Формирует структуру параметров для СформироватьДвиженияФактическихОтпусков.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	ДатаРегистрации
//	Начисления	- таблица начислений из данных для проведения.
//
Функция ПараметрыДляСформироватьДвиженияФактическихОтпусков() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаРегистрации", '00010101');
	Параметры.Вставить("Начисления", Неопределено);
	Параметры.Вставить("РабочиеПериоды", Неопределено);
	Параметры.Вставить("Основания", Неопределено);
	Параметры.Вставить("ПериодНачисления", '00010101');
	Параметры.Вставить("ДатыНачалаКомпенсаций", Неопределено);

	Возврат Параметры;

КонецФункции

// Заполняет движения периодами фактических отпусков
//		ФактическиеОтпуска.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков().
//
Процедура СформироватьДвиженияФактическихОтпусков(Движения, Отказ, Параметры) Экспорт
	
	Начисления = Параметры.Начисления;
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Если Параметры.ДатыНачалаКомпенсаций = Неопределено Тогда
		
		Начисления.Сортировать("Сотрудник, ДатаОкончания УБЫВ", Новый СравнениеЗначений);
		
		ДатыНачалаКомпенсаций = Новый Соответствие;
		Для Каждого СтрокаДанных Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
				Продолжить;
			КонецЕсли;
			Если ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДатыНачалаКомпенсаций.Вставить(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОкончания);
		КонецЦикла;
		
	Иначе
		ДатыНачалаКомпенсаций = Параметры.ДатыНачалаКомпенсаций;
	КонецЕсли;
	
	Начисления.Сортировать("Сотрудник, ДатаНачала", Новый СравнениеЗначений);
	
	ДатыНачалаОтпусков = Новый Соответствие;
	Для Каждого СтрокаДанных Из Начисления Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		Если ДатыНачалаОтпусков.Получить(СтрокаДанных.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
			Продолжить;
		КонецЕсли;
		ДатыНачалаОтпусков.Вставить(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаНачала);
	КонецЦикла;
	
	// Заполняем движения.
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	// Сортируем таблицу начислений под используемый алгоритм, сторно-записи сортируем внутри сотрудников.
	Начисления.Сортировать("Сотрудник, ВидЕжегодногоОтпуска, Сторно, ДатаНачала", Новый СравнениеЗначений);
	
	ПредыдущийСотрудник				= Неопределено;
	ПредыдущийВидЕжегодногоОтпуска	= Неопределено;
	ПредыдущаяДатаОкончания			= Неопределено;
	Для Каждого СтрокаДанных Из Начисления Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСотрудник <> СтрокаДанных.Сотрудник Или ПредыдущийВидЕжегодногоОтпуска <> СтрокаДанных.ВидЕжегодногоОтпуска Или КонецДня(ПредыдущаяДатаОкончания) + 1 <> НачалоДня(СтрокаДанных.ДатаНачала) Тогда
			НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
			// Измерения
			НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
			// Ресурсы
			НоваяСтрока.Количество				= 0;
			// Реквизиты
			НоваяСтрока.ДатаРегистрации			= Параметры.ДатаРегистрации;
			НоваяСтрока.Компенсация				= СтрокаДанных.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
			Если НоваяСтрока.Компенсация Тогда
				НоваяСтрока.ДатаНачала			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			Иначе
				НоваяСтрока.ДатаНачала			= СтрокаДанных.ДатаНачала;
			КонецЕсли;
			
			// Необязательные реквизиты
			РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
			Если РабочийПериодСотрудника = Неопределено Тогда
				РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли; 
			
			Если РабочийПериод <> Неопределено Тогда
				НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
				НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
			КонецЕсли;
			
			ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
			Если ОснованияСотрудников = Неопределено Тогда
				Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли;
			
			НоваяСтрока.Основание				= Основание;
			
		КонецЕсли;
		
		// Ресурсы
		НоваяСтрока.Количество					= НоваяСтрока.Количество + СтрокаДанных.ОплаченоДней;
		
		Если НоваяСтрока.Компенсация Тогда
			// Свойства
			НоваяСтрока.Период					= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
		Иначе
			// Свойства
			НоваяСтрока.Период					= ДатыНачалаОтпусков.Получить(СтрокаДанных.Сотрудник);
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаОкончания;
		КонецЕсли;
		
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		ПредыдущийСотрудник				= НоваяСтрока.Сотрудник;
		ПредыдущийВидЕжегодногоОтпуска	= НоваяСтрока.ВидЕжегодногоОтпуска;
		ПредыдущаяДатаОкончания			= НоваяСтрока.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения удержаниями за неотработанный отпуск
//		ФактическиеОтпуска.
//
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков().
//
Процедура СформироватьДвиженияФактическихОтпусковПоУдержаниям(Движения, Параметры) Экспорт
	
	Удержания = Параметры.Начисления;
	
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из Удержания Цикл
		
		НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
		
		// Свойства
		НоваяСтрока.Период					= СтрокаДанных.ДатаУвольнения;
		// Измерения
		НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
		НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
		// Ресурсы
		НоваяСтрока.Количество				= СтрокаДанных.КоличествоДнейКомпенсации * (-1);
		// Реквизиты
		НоваяСтрока.ДатаРегистрации			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаНачала				= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.Компенсация				= Истина;
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		// Необязательные реквизиты
		РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
		Если РабочийПериодСотрудника = Неопределено Тогда
			РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		Если РабочийПериод <> Неопределено Тогда
			НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
			НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
		КонецЕсли;
		
		ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
		Если ОснованияСотрудников = Неопределено Тогда
			Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		НоваяСтрока.Основание				= Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		
	КонецЦикла;
	
КонецПроцедуры

// Работа с регистром ЗаработанныеПраваНаОтпуска

// Обслуживает регламентное задание РасчетЗаработанныхОтпусков.
// Производит заполнение регистра "ЗаработанныеПраваНаОтпуска".
Процедура РасчетЗаработанныхОтпусков(МассивСотрудников = Неопределено, Знач ДатаРасчета = Неопределено, ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Если массив сотрудников не задан - надо рассчитать всех сотрудников.
	Если МассивСотрудников = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.НачалоПериода = ДатаРасчета;
		ПараметрыПолучения.ОкончаниеПериода = ДатаРасчета;
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
		МассивСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РассчитатьЗаработанныеОтпускаСпискуСотрудников(МассивСотрудников, ДатаРасчета, ЭтоРасчетПриУвольнении);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет записи регистра ЗаработанныеПраваНаОтпуска согласно переданной таблице значений.
// Колонки таблицы значений
//	Сотрудник
//	ВидЕжегодногоОтпуска
//	Период - начало периода, начиная с которого необходимо удалить записи.
Процедура УдалитьЗаписиЗаработанныхОтпусков(ТаблицаУдаляемыхЗаписей) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СбрасываемСотрудникаЦеликом =  ТаблицаУдаляемыхЗаписей.Колонки.Найти("ВидЕжегодногоОтпуска") = Неопределено;
	
	Для каждого СтрокаУдаляемыхЗаписей Из ТаблицаУдаляемыхЗаписей Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Период,
		|	ЗаработанныеПраваНаОтпуска.Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
		|	ЗаработанныеПраваНаОтпуска.ДатаНачала,
		|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|ГДЕ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник = &Сотрудник
		|	И ЗаработанныеПраваНаОтпуска.Период < &Период";
		
		Если НЕ СбрасываемСотрудникаЦеликом Тогда
		
			Запрос.Текст = Запрос.Текст + "	И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = &ВидЕжегодногоОтпуска";
			Запрос.УстановитьПараметр("ВидЕжегодногоОтпуска", СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
		    НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", СтрокаУдаляемыхЗаписей.Период);
		Запрос.УстановитьПараметр("Сотрудник", СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла; 	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Корректирует расчет вида отпуска ОтпускПострадавшимВАварииЧАЭС, проставляя ему "ОплаченоДней".
//
Процедура ПеренестиРезультатыРасчетаОтпускаЧАЭС(СтрокаДанных, ИсходныеДанные) Экспорт

	Если НЕ ТипЗнч(СтрокаДанных) = Тип("ДанныеФормыЭлементКоллекции")
		ИЛИ НЕ СтрокаДанных.Свойство("Начисление") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтпуска = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаДанных.Начисление).ВидОтпуска;
	Если НЕ ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.ОплаченоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаНачала, СтрокаДанных.ДатаОкончания, Истина, Истина);

КонецПроцедуры

// Возвращает массив видов отпусков не подлежащих компенсации при увольнении
// 
// Возвращаемое значение:
//  ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении - Массив.
//
Функция ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении() Экспорт
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении = Новый Массив;
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Возврат ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении;
КонецФункции

#Область ОбработчикиОбновления
	
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.22";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьДатуНачалаКомпенсацииОтпуска";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.24";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьОстаткиОтпусковПоРабочимГодам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.31";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьПериодКомпенсацииОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.67";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьХарактерЗависимостиДнейОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.33";
	Обработчик.Процедура = "ОстаткиОтпусков.ОбработатьВозвратныеРеквизитыПрав";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.42";
	Обработчик.Процедура = "ОстаткиОтпусков.УстановитьСдвигСекундДляВводаНачальныхОстатковОтпусков";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.55";
	Обработчик.Процедура = "ОстаткиОтпусков.ОбработатьНулевойПериодВПоложенныеВидыЕжегодныхОтпусков";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.55";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьОтрицательноеКоличествоДнейЗаПериод";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.58";
	Обработчик.Процедура = "ОстаткиОтпусков.ОчиститьЗаработанныеОтпускаДекретниц";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.71";
	Обработчик.Процедура = "ОстаткиОтпусков.УстановитьКорректныеПараметрыСпецОтпусков";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.88";
	Обработчик.Процедура = "ОстаткиОтпусков.УстановитьКорректныйПериодДляОтпусковСКомпенсациями";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.99";
	Обработчик.Процедура = "ОстаткиОтпусков.ОчиститьЗаработанныеПраваУСотрудниковСВводомОстатков";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.118";
	Обработчик.Процедура = "ОстаткиОтпусков.ОчиститьОстаткиОтпусковПоРабочимГодамСНесуществующимиСотрудниками";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.8";
	Обработчик.Процедура = "РегистрыСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.УдалитьСведенияСНезаполненнымКоличествомДнейОтпуска";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.17";
	Обработчик.Процедура = "ОстаткиОтпусков.ФактическиеОтпускаЗаполнитьПериодНачисления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.23";
	Обработчик.Процедура = "ОстаткиОтпусков.ДополнитьВводыОстатковОтпусковНулевымиОстатками";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.25";
	Обработчик.Процедура = "ОстаткиОтпусков.ПереместитьПериодСписанияФактическихОтпусковУУвольнений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.2";
	Обработчик.Процедура = "ОстаткиОтпусков.ОчиститьЗаработанныеПрава";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.26.26";
	Обработчик.Процедура = "ОстаткиОтпусков.ДополнитьШтатноеРасписаниеЕжегоднымиОтпусками";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.102";
	Обработчик.Процедура = "ОстаткиОтпусков.ОчиститьЗаработанныеВредныеИСеверныеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("297ce182-937d-416a-847f-15d23abc83d6");
	Обработчик.Комментарий = НСтр("ru = 'Очистка данных вредных и северных отпусков.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.103";
	Обработчик.Процедура = "ОстаткиОтпусков.ПересчитатьВредныеИСеверныеОтпуска";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("59bdbac0-8e7e-434b-aae5-3b2a8b8e3056");
	Обработчик.Комментарий = НСтр("ru = 'Пересчет вредных и северных отпусков.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.41";
	Обработчик.Процедура = "ОстаткиОтпусков.ЗаполнитьСсылкуНаОтпускВДокументахОтпускаСотрудников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2796ecf8-56dd-48bc-a7ec-f57281ca3e5d");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документа Отпуска сотрудников.'");
	
КонецПроцедуры

Процедура ЗаполнитьДатуНачалаКомпенсацииОтпуска() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Регистратор КАК ДокументОснование,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ФактическиеОтпуска.ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.МоментВремени
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Если Выборка.Компенсация Тогда
				СтрокаНабора.ДатаНачала = СтрокаНабора.ДатаОкончания;
			КонецЕсли;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодам() Экспорт

	ЗаполнитьОстаткиОтпусковПоРабочимГодамУВводНачальныхОстатковОтпусков();
	ЗаполнитьОстаткиОтпусковПоРабочимГодамУНачальнаяШтатнаяРасстановка();
	ОбработатьЗаписиРегистраНачальныеОстаткиОтпусков();

КонецПроцедуры

Процедура ЗаполнитьПериодКомпенсацииОтпуска() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Регистратор КАК ДокументОснование,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ФактическиеОтпуска.ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.МоментВремени
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Если Выборка.Компенсация И Выборка.ДатаОкончания <> Дата(1,1,1) Тогда
				СтрокаНабора.Период = СтрокаНабора.ДатаОкончания;
			КонецЕсли;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьХарактерЗависимостиДнейОтпуска() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтпускОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОтпускОбъект.ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит");
		ОтпускОбъект.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбработатьВозвратныеРеквизитыПрав() Экспорт

	ЗаполнитьИспользуетсяДляПоложенныеВидыЕжегодныхОтпусков();
	ЗаполнитьВозвратныеРеквизитыПравИзВозвратныхДокументов();
	ЗаполнитьКоличествоДнейВГодПоОкончанииДляВторичныхЗаписей();

КонецПроцедуры

Процедура УстановитьСдвигСекундДляВводаНачальныхОстатковОтпусков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период = НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ)
		|	И ПоложенныеВидыЕжегодныхОтпусков.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ЗарплатаКадрыРасширенныйСобытия.УстановитьСдвигПериодаРегистраСПериодичностьюСекунда(НаборЗаписей, Ложь, Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОтрицательноеКоличествоДнейЗаПериод() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.Период КАК Период
		|ПОМЕСТИТЬ ВТОтрицательныеПрава
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|ГДЕ
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтрицательныеПрава.Сотрудник КАК Сотрудник,
		|	ВТОтрицательныеПрава.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТОтрицательныеПрава.Период КАК Период,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаработанныеПраваНаОтпускаПредыдущие.Период, ВТОтрицательныеПрава.Период)) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПраваСПредыдущими
		|ИЗ
		|	ВТОтрицательныеПрава КАК ВТОтрицательныеПрава
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпускаПредыдущие
		|		ПО ВТОтрицательныеПрава.Сотрудник = ЗаработанныеПраваНаОтпускаПредыдущие.Сотрудник
		|			И ВТОтрицательныеПрава.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпускаПредыдущие.ВидЕжегодногоОтпуска
		|			И ВТОтрицательныеПрава.Период > ЗаработанныеПраваНаОтпускаПредыдущие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОтрицательныеПрава.Сотрудник,
		|	ВТОтрицательныеПрава.ВидЕжегодногоОтпуска,
		|	ВТОтрицательныеПрава.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваСПредыдущими.Сотрудник КАК Сотрудник,
		|	ВТПраваСПредыдущими.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТПраваСПредыдущими.Период КАК Период,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней,
		|	ЗаработанныеПраваНаОтпускаПредыдущие.КоличествоДней КАК КоличествоДнейПредыдущее,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод КАК КоличествоДнейЗаПериод,
		|	ВЫБОР
		|		КОГДА ВТПраваСПредыдущими.Период = ВТПраваСПредыдущими.ПериодПредыдущий
		|			ТОГДА ЗаработанныеПраваНаОтпуска.КоличествоДней - ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|		ИНАЧЕ ЗаработанныеПраваНаОтпуска.КоличествоДней - ЗаработанныеПраваНаОтпускаПредыдущие.КоличествоДней - ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|	КОНЕЦ КАК Разница
		|ПОМЕСТИТЬ ВТЗаписиРегистра
		|ИЗ
		|	ВТПраваСПредыдущими КАК ВТПраваСПредыдущими
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО ВТПраваСПредыдущими.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И ВТПраваСПредыдущими.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|			И ВТПраваСПредыдущими.Период = ЗаработанныеПраваНаОтпуска.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпускаПредыдущие
		|		ПО ВТПраваСПредыдущими.Сотрудник = ЗаработанныеПраваНаОтпускаПредыдущие.Сотрудник
		|			И ВТПраваСПредыдущими.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпускаПредыдущие.ВидЕжегодногоОтпуска
		|			И ВТПраваСПредыдущими.ПериодПредыдущий = ЗаработанныеПраваНаОтпускаПредыдущие.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаписиРегистра.Период КАК Период,
		|	ВТЗаписиРегистра.Сотрудник КАК Сотрудник,
		|	ВТЗаписиРегистра.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТЗаписиРегистра.Разница
		|ИЗ
		|	ВТЗаписиРегистра КАК ВТЗаписиРегистра
		|ГДЕ
		|	(ВТЗаписиРегистра.Разница > 0.01
		|			ИЛИ ВТЗаписиРегистра.Разница < -0.01)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
		МенеджерЗаписи.ВидЕжегодногоОтпуска = Выборка.ВидЕжегодногоОтпуска;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.КоличествоДнейЗаПериод = Выборка.Разница;
		МенеджерЗаписи.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьНулевойПериодВПоложенныеВидыЕжегодныхОтпусков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТНулевыеЗаписи
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНулевыеЗаписи.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТНулевыеЗаписи КАК ВТНулевыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВводНачальныхОстатковОтпусков.Ссылка КАК Регистратор,
		|	ВводНачальныхОстатковОтпусков.ДатаОстатков КАК ДатаДвижения
		|ПОМЕСТИТЬ ВТДатыДокументов
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|		ПО ВТРегистраторы.Регистратор = ВводНачальныхОстатковОтпусков.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ПО ВТРегистраторы.Регистратор = КадровыйПеревод.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПереводСписком.Ссылка,
		|	КадровыйПереводСписком.ДатаСобытия
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком КАК КадровыйПереводСписком
		|		ПО ВТРегистраторы.Регистратор = КадровыйПереводСписком.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановка.Ссылка,
		|	НачальнаяШтатнаяРасстановка.Месяц
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка КАК НачальнаяШтатнаяРасстановка
		|		ПО ВТРегистраторы.Регистратор = НачальнаяШтатнаяРасстановка.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереносДанных.Ссылка,
		|	ПереносДанных.ПериодРегистрации
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносДанных КАК ПереносДанных
		|		ПО ВТРегистраторы.Регистратор = ПереносДанных.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО ВТРегистраторы.Регистратор = ПриемНаРаботу.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемНаРаботуСписком.Ссылка,
		|	ПриемНаРаботуСписком.ДатаСобытия
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком КАК ПриемНаРаботуСписком
		|		ПО ВТРегистраторы.Регистратор = ПриемНаРаботуСписком.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор,
		|	ВТДатыДокументов.ДатаДвижения КАК Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыДокументов КАК ВТДатыДокументов
		|		ПО ВТРегистраторы.Регистратор = ВТДатыДокументов.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНулевыеЗаписи.Сотрудник,
		|	ВТНулевыеЗаписи.ВидЕжегодногоОтпуска
		|ИЗ
		|	ВТНулевыеЗаписи КАК ВТНулевыеЗаписи";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	// Удаляем записи вторичного регистра.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(Выборка.ВидЕжегодногоОтпуска);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьЗаработанныеОтпускаДекретниц()Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСостоянийСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|ГДЕ
		|	ДанныеСостоянийСотрудников.Состояние = &ВОтпускеПоУходу";
	
	Запрос.УстановитьПараметр("ВОтпускеПоУходу", ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком"));
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСотрудников = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	РассчитатьЗаработанныеОтпускаСпискуСотрудников(МассивСотрудников, ТекущаяДатаСеанса());

КонецПроцедуры

Процедура УстановитьКорректныеПараметрыСпецОтпусков() Экспорт 
	УстановитьХарактерЗависимостиИСпособРасчета(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный"));
	УстановитьХарактерЗависимостиИСпособРасчета(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность"));
КонецПроцедуры

Процедура УстановитьКорректныйПериодДляОтпусковСКомпенсациями() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТОтпускаСКомпенсацией
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|	И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Отпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ) КАК ДатаКомпенсации,
		|	Отпуск.ДатаНачалаСобытия КАК ДатаОтпуска
		|ПОМЕСТИТЬ ВТДокументыПериодРегистрации
		|ИЗ
		|	ВТОтпускаСКомпенсацией КАК ВТОтпускаСКомпенсацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|		ПО ВТОтпускаСКомпенсацией.Регистратор = Отпуск.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор,
		|	ДокументыПериодРегистрации.ДатаКомпенсации,
		|	ДокументыПериодРегистрации.ДатаОтпуска
		|ПОМЕСТИТЬ ВТНекорректныеРегистраторы
		|ИЗ
		|	ВТДокументыПериодРегистрации КАК ДокументыПериодРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО (ДокументыПериодРегистрации.Ссылка = (ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)))
		|			И (ФактическиеОтпуска.Компенсация)
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ДокументыПериодРегистрации.ДатаКомпенсации, ДЕНЬ) <> КОНЕЦПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Регистратор,
		|	ДокументыПериодРегистрации.ДатаКомпенсации,
		|	ДокументыПериодРегистрации.ДатаОтпуска
		|ИЗ
		|	ВТДокументыПериодРегистрации КАК ДокументыПериодРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО (ДокументыПериодРегистрации.Ссылка = (ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)))
		|			И (НЕ ФактическиеОтпуска.Компенсация)
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ДокументыПериодРегистрации.ДатаОтпуска, ДЕНЬ) <> КОНЕЦПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаОтпуска, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	ФактическиеОтпуска.Регистратор КАК Регистратор,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ ФактическиеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ ФактическиеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНекорректныеРегистраторы КАК ВТНекорректныеРегистраторы
		|		ПО ((ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)) = ВТНекорректныеРегистраторы.Регистратор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьЗаработанныеПраваУСотрудниковСВводомОстатков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало КАК РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание КАК РабочийГодОкончание,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, ГОД, 1), ДЕНЬ, -1) КАК РабочийГодОкончаниеПредполагаемый
		|ПОМЕСТИТЬ ВТНеправильныеПериоды
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, ГОД, 1), ДЕНЬ, -1), ДЕНЬ) <> НАЧАЛОПЕРИОДА(НачальныеОстаткиОтпусков.РабочийГодОкончание, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНеправильныеПериоды.Сотрудник
		|ИЗ
		|	ВТНеправильныеПериоды КАК ВТНеправильныеПериоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьШтатноеРасписаниеЕжегоднымиОтпусками() Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
	
	СформироватьВТОтпускаШтатного(Запрос);
	
	ЕстьСпецОтпуска = СформироватьВТДополненияШтатногоСпецОтпусками(Запрос);
	
	// Объединяем общие отпуска и спецотпуска в один пул.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТОбщиеЕжегодныеОтпуска
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	НЕ ВидыОтпусков.ПометкаУдаления
		|	И НЕ ВидыОтпусков.Недействителен
		|	И (ВидыОтпусков.КоличествоДнейВГод > 0
		|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))
		|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтпускаШтатного.ПозицияШР,
		|	ВТОтпускаШтатного.ВидЕжегодногоОтпуска,
		|	ВТОтпускаШтатного.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТДополненноеШтатное
		|ИЗ
		|	ВТОтпускаШтатного КАК ВТОтпускаШтатного";
		
	Если ЕстьСпецОтпуска Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТДобавляемыеСпецОтпуска.ПозицияШР,
			|	ВТДобавляемыеСпецОтпуска.ВидЕжегодногоОтпуска,
			|	ВТДобавляемыеСпецОтпуска.КоличествоДнейОтпускаВГод
			|ИЗ
			|	ВТДобавляемыеСпецОтпуска КАК ВТДобавляемыеСпецОтпуска";
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
	
	Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТОтпускаШтатного.ПозицияШР
		|ПОМЕСТИТЬ ВТПозицииШР
		|ИЗ
		|	ВТОтпускаШтатного КАК ВТОтпускаШтатного
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПозицииШР.ПозицияШР,
		|	ВТОбщиеЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТОбщиеЕжегодныеОтпуска.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТПозицииШРСЕжегоднымиОтпусками
		|ИЗ
		|	ВТПозицииШР КАК ВТПозицииШР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщиеЕжегодныеОтпуска КАК ВТОбщиеЕжегодныеОтпуска
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПозицииШРСЕжегоднымиОтпусками.ПозицияШР,
		|	ВТПозицииШРСЕжегоднымиОтпусками.ВидЕжегодногоОтпуска,
		|	ВТПозицииШРСЕжегоднымиОтпусками.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТДобавляемыеЕжегодныеОтпуска
		|ИЗ
		|	ВТПозицииШРСЕжегоднымиОтпусками КАК ВТПозицииШРСЕжегоднымиОтпусками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополненноеШтатное КАК ВТДополненноеШтатное
		|		ПО ВТПозицииШРСЕжегоднымиОтпусками.ПозицияШР = ВТДополненноеШтатное.ПозицияШР
		|			И ВТПозицииШРСЕжегоднымиОтпусками.ВидЕжегодногоОтпуска = ВТДополненноеШтатное.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ВТДополненноеШтатное.ПозицияШР ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДобавляемыеЕжегодныеОтпуска.ПозицияШР,
		|	ВТДобавляемыеЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТДобавляемыеЕжегодныеОтпуска.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТИтоговыеДобавляемыеОтпуска
		|ИЗ
		|	ВТДобавляемыеЕжегодныеОтпуска КАК ВТДобавляемыеЕжегодныеОтпуска";
		
	Если ЕстьСпецОтпуска Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТДобавляемыеСпецОтпуска.ПозицияШР,
			|	ВТДобавляемыеСпецОтпуска.ВидЕжегодногоОтпуска,
			|	ВТДобавляемыеСпецОтпуска.КоличествоДнейОтпускаВГод
			|ИЗ
			|	ВТДобавляемыеСпецОтпуска КАК ВТДобавляемыеСпецОтпуска";
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		ДополнитьОтпускамиДокументыРегистрИСправочник(Запрос);
	Иначе
		ДополнитьОтпускамиСправочник(Запрос);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьВредныеИСеверныеОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	ОтпускЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	ОтпускСеверный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	
	ВидыЕжегодныхОтпусков = Новый Массив;
	ВидыЕжегодныхОтпусков.Добавить(ОтпускЗаВредность);
	ВидыЕжегодныхОтпусков.Добавить(ОтпускСеверный);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидыЕжегодныхОтпусков", ВидыЕжегодныхОтпусков);	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиКРасчету
	               |ИЗ
	               |	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	               |ГДЕ
	               |	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска В(&ВидыЕжегодныхОтпусков)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НачальныеОстаткиОтпусков.Сотрудник
	               |ИЗ
	               |	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	               |ГДЕ
	               |	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска В(&ВидыЕжегодныхОтпусков)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	СотрудникиКРасчету.Сотрудник
	               |ИЗ
	               |	ВТСотрудникиКРасчету КАК СотрудникиКРасчету
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |		ПО СотрудникиКРасчету.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
	               |			И (ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска В (&ВидыЕжегодныхОтпусков))
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.Сотрудник ЕСТЬ NULL ";
	
	Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления() = "Монопольно" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", "");
	КонецЕсли;
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Если СписокСотрудников.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	ДатаРасчета = НачалоДня(ТекущаяДатаСеанса());
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= ДатаРасчета;
		Строка.ЭтоРасчетПриУвольнении	= Ложь;
		Строка.ИндексСтроки = ТаблицаДанных.Индекс(Строка);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, Ложь);
	ИсходныеДанные = ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполняем результирующую таблицу уже рассчитанными данными из регистра.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЗаработанныеПраваНаОтпуска.ДатаНачала КАК ДатаНачала,
	|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
	|ИЗ
	|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеРассчитанныеВидыОтпусковСотрудников КАК НеРассчитанныеСотрудники
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = НеРассчитанныеСотрудники.Сотрудник
	|			И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = НеРассчитанныеСотрудники.ВидЕжегодногоОтпуска
	|ГДЕ
	|	НеРассчитанныеСотрудники.Сотрудник ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачала,
	|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПраваНаОтпускаСотрудников = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ПраваНаОтпускаСотрудника = ПраваНаОтпускаСотрудников[Выборка.Сотрудник];
		Если ПраваНаОтпускаСотрудника = Неопределено Тогда 
			ПраваНаОтпускаСотрудника = Новый Соответствие;
			ПраваНаОтпускаСотрудников.Вставить(Выборка.Сотрудник, ПраваНаОтпускаСотрудника);
		КонецЕсли;
		Пока Выборка.СледующийПоЗначениюПоля("ВидЕжегодногоОтпуска") Цикл
			ПраваСотрудникаНаВидОтпуска = ПраваНаОтпускаСотрудника[Выборка.ВидЕжегодногоОтпуска];
			Если ПраваСотрудникаНаВидОтпуска = Неопределено Тогда 
				ПраваСотрудникаНаВидОтпуска = ПустаяТаблицаЗаработанныхДней();
			    ПраваНаОтпускаСотрудника.Вставить(Выборка.ВидЕжегодногоОтпуска, ПраваСотрудникаНаВидОтпуска);
			КонецЕсли;
			Пока Выборка.Следующий() Цикл 
				ЗаполнитьЗначенияСвойств(ПраваСотрудникаНаВидОтпуска.Добавить(), Выборка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбработанныеСотрудники = Новый Массив;
	
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаНачальныхОстатков		= ИсходныеДанные.НачальныеОстатки;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	ТаблицаПереквалификацииДней		= ИсходныеДанные.ПереквалификацияДней;
	
	Если Не ПодготовитьОбновлениеДанныхПоИсточникуДанных(ПараметрыОбновления, "РегистрСведений.ЗаработанныеПраваНаОтпуска", "Сотрудник", ТаблицаДанных, "Сотрудник") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СотрудникБезПрава Из ИсходныеДанные.СотрудникиБезПраваНаОтпуск Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
		НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникБезПрава.Сотрудник);
		
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпуска Цикл
			
			ПраваОтпускаВРегистре = Неопределено;
			ПраваНаОтпускаСотрудника = ПраваНаОтпускаСотрудников[СотрудникБезПрава.Сотрудник];
			Если ПраваНаОтпускаСотрудника <> Неопределено Тогда 
				ПраваОтпускаВРегистре = ПраваНаОтпускаСотрудника[СтрокаВидаОтпуска.ВидЕжегодногоОтпуска];
			КонецЕсли;
			
			Если ПраваОтпускаВРегистре = Неопределено Тогда
			
				ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
				
				СтруктураПараметров = ОписаниеПараметровДляРассчитатьПраваНаОтпуск();
				СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска	= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.НачальныеОстаткиПоВидуОтпуска = ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.ТаблицаОтклонений = ТаблицаОтклонений;
				СтруктураПараметров.ТаблицаПереквалификацииДней = ТаблицаПереквалификацииДней;
				
				ПерерывыПредоставленияРаздвигаютГод = НЕ (СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность")
					ИЛИ СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный"));
					
				РабочиеГода = РассчитатьПравоНаОтпуск(СотрудникБезПрава, СтрокаВидаОтпуска, СтруктураПараметров, ПерерывыПредоставленияРаздвигаютГод);
				
				// Дополним набор рассчитанными правами.
				ДополнитьНаборРассчитаннымиПравами(ОтборПоСотрудникуИВидуОтпуска, НаборЗаписей, РабочиеГода);
				
			Иначе
				// Дополним набор существующими правами.
				ДополнитьНаборПравамиИзТаблицы(НаборЗаписей, ПраваОтпускаВРегистре);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
		ТаблицаНабораЗаписей.Свернуть("ВидЕжегодногоОтпуска, ДатаНачала, ДатаОкончания, КоличествоДней, КоличествоДнейЗаПериод, Период, Сотрудник");
		
		НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		СотрудникОбработан = Ложь;
		
		Если ОтпускСеверный <> Неопределено Тогда
			Отбор = Новый Структура("ВидЕжегодногоОтпуска", ОтпускСеверный);
			Если ТаблицаНабораЗаписей.НайтиСтроки(Отбор).Количество() > 0 Тогда 
				СотрудникОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СотрудникОбработан И ОтпускЗаВредность <> Неопределено Тогда
			Отбор = Новый Структура("ВидЕжегодногоОтпуска", ОтпускЗаВредность);
			Если ТаблицаНабораЗаписей.НайтиСтроки(Отбор).Количество() > 0 Тогда 
				СотрудникОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СотрудникОбработан Тогда 
			ОбработанныеСотрудники.Добавить(СотрудникБезПрава.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	НеобработанныеСотрудники = ОбщегоНазначенияКлиентСервер.СократитьМассив(СписокСотрудников, ОбработанныеСотрудники);
	
	Для Каждого Сотрудник Из НеобработанныеСотрудники Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаРасчета;
		НоваяЗапись.Сотрудник = Сотрудник;
		НоваяЗапись.ВидЕжегодногоОтпуска = ?(ОтпускСеверный = Неопределено, ОтпускЗаВредность, ОтпускСеверный);
		
		НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(НоваяЗапись.ВидЕжегодногоОтпуска);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
		
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ОчиститьОстаткиОтпусковПоРабочимГодамСНесуществующимиСотрудниками() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка,
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Сотрудник
		|ПОМЕСТИТЬ ВТПустыеСтроки
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.ОстаткиОтпусковПоРабочимГодам КАК НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
		|		ПО НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка = НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
		|			И НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Сотрудник = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТПустыеСтроки.Ссылка
		|ПОМЕСТИТЬ ВТОбрабатываемыеРегистраторы
		|ИЗ
		|	ВТПустыеСтроки КАК ВТПустыеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.НомерСтроки,
		|	НачальныеОстаткиОтпусков.Активность,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.УдалитьРабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней
		|ПОМЕСТИТЬ ВТДвиженияРегистраторов
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбрабатываемыеРегистраторы КАК ВТОбрабатываемыеРегистраторы
		|		ПО НачальныеОстаткиОтпусков.Регистратор = ВТОбрабатываемыеРегистраторы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвиженияРегистраторов.Регистратор КАК Регистратор,
		|	ВТДвиженияРегистраторов.НомерСтроки,
		|	ВТДвиженияРегистраторов.Активность,
		|	ВТДвиженияРегистраторов.Сотрудник,
		|	ВТДвиженияРегистраторов.ВидЕжегодногоОтпуска,
		|	ВТДвиженияРегистраторов.ДатаОстатка,
		|	ВТДвиженияРегистраторов.РабочийГодНачало,
		|	ВТДвиженияРегистраторов.УдалитьРабочийГодНачало,
		|	ВТДвиженияРегистраторов.РабочийГодОкончание,
		|	ВТДвиженияРегистраторов.КоличествоДней,
		|	ВЫБОР
		|		КОГДА ВТПустыеСтроки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеПереносить
		|ИЗ
		|	ВТДвиженияРегистраторов КАК ВТДвиженияРегистраторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПустыеСтроки КАК ВТПустыеСтроки
		|		ПО ВТДвиженияРегистраторов.Регистратор = ВТПустыеСтроки.Ссылка
		|			И ВТДвиженияРегистраторов.Сотрудник = ВТПустыеСтроки.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПустыеСтроки.Ссылка КАК Регистратор,
		|	ВТПустыеСтроки.Сотрудник
		|ИЗ
		|	ВТПустыеСтроки КАК ВТПустыеСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Обрабатываем документы.
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			СтрокиОстаткиОтпусковПоРабочимГодам = ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			Для каждого СтрокаОстаткиОтпусковПоРабочимГодам Из СтрокиОстаткиОтпусковПоРабочимГодам Цикл
				ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Удалить(СтрокаОстаткиОтпусковПоРабочимГодам);
			КонецЦикла;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// Обрабатываем движения по остаткам отпусков
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеПереносить Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьХарактерЗависимостиИСпособРасчета(ВидОтпуска)
	
	ЗависитОтРабочегоМеста = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтРабочегоМеста");
	ВКалендарныхДнях = ПредопределенноеЗначение("Перечисление.СпособыРасчетаОтпуска.ВКалендарныхДнях");
	Если ВидОтпуска <> Неопределено Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ХарактерЗависимостиДнейОтпуска") <> ЗависитОтРабочегоМеста
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "СпособРасчетаОтпуска") <> ВКалендарныхДнях Тогда
			ВидОтпускаОбъект = ВидОтпуска.ПолучитьОбъект();
			ВидОтпускаОбъект.ХарактерЗависимостиДнейОтпуска = ЗависитОтРабочегоМеста;
			ВидОтпускаОбъект.СпособРасчетаОтпуска = ВКалендарныхДнях;
			ВидОтпускаОбъект.ОбменДанными.Загрузка = Истина;
			ВидОтпускаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодамУВводНачальныхОстатковОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВводНачальныхОстатковОтпусков.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков.ОстаткиОтпусковПоРабочимГодам КАК ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам
		|		ПО ВводНачальныхОстатковОтпусков.Ссылка = ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам.Ссылка
		|ГДЕ
		|	ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам.Ссылка ЕСТЬ NULL 
		|	И ВводНачальныхОстатковОтпусков.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковОтпусков.Сотрудник,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.ОстатокНаДатуОстатков,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.УдалитьРабочийГодНачало,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.УдалитьРабочийГодОкончание,
		|	ВводНачальныхОстатковОтпусков.Ссылка,
		|	ВводНачальныхОстатковОтпусков.ДатаОстатков
		|ПОМЕСТИТЬ ВТДокументыОстатков
		|ИЗ
		|	ВТНеобработанныеДокументы КАК НеобработанныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков.ЕжегодныеОтпуска КАК ВводНачальныхОстатковОтпусковЕжегодныеОтпуска
		|			ПО ВводНачальныхОстатковОтпусков.Ссылка = ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.Ссылка
		|		ПО НеобработанныеДокументы.Ссылка = ВводНачальныхОстатковОтпусков.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.Период) КАК Период
		|ПОМЕСТИТЬ ВТУказателиПоследнихПрав
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыОстатков КАК ДокументыОстатков
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ДокументыОстатков.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ДокументыОстатков.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период <= ДокументыОстатков.ДатаОстатков
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыОстатков.Ссылка КАК Ссылка,
		|	ДокументыОстатков.ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод, 0) КАК КоличествоДнейВГод,
		|	ДокументыОстатков.ОстатокНаДатуОстатков
		|ИЗ
		|	ВТДокументыОстатков КАК ДокументыОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУказателиПоследнихПрав КАК УказателиПоследнихПрав
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|			ПО УказателиПоследнихПрав.Сотрудник = ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
		|				И УказателиПоследнихПрав.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|				И УказателиПоследнихПрав.Период = ПоложенныеВидыЕжегодныхОтпусков.Период
		|		ПО ДокументыОстатков.Сотрудник = УказателиПоследнихПрав.Сотрудник
		|			И ДокументыОстатков.ВидЕжегодногоОтпуска = УказателиПоследнихПрав.ВидЕжегодногоОтпуска
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыОстатков.Ссылка КАК Ссылка,
		|	ДокументыОстатков.ВидЕжегодногоОтпуска,
		|	ДокументыОстатков.УдалитьРабочийГодНачало КАК РабочийГодНачало,
		|	ДокументыОстатков.УдалитьРабочийГодОкончание КАК РабочийГодОкончание,
		|	ДокументыОстатков.ДатаОстатков КАК ДатаОстатков,
		|	ДокументыОстатков.ОстатокНаДатуОстатков КАК Остаток
		|ИЗ
		|	ВТДокументыОстатков КАК ДокументыОстатков
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДокументов = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОстаткиОтпусковПоРабочимГодам = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		// Обрабатываем ТЧ ЕжегодныеОтпуска
		ВыборкаЕжегодныеОтпуска = ВыборкаДокументов.Выбрать();
		Пока ВыборкаЕжегодныеОтпуска.Следующий() Цикл
			СтрокиОтпуска = ДокументОбъект.ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", ВыборкаЕжегодныеОтпуска.ВидЕжегодногоОтпуска));
			Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				СтрокаОтпуска.КоличествоДнейВГод = ВыборкаЕжегодныеОтпуска.КоличествоДнейВГод;
			КонецЦикла; 
		КонецЦикла;
		// Обрабатываем ТЧ ОстаткиОтпусковПоРабочимГодам
		Пока ВыборкаОстаткиОтпусковПоРабочимГодам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаДокументов.Ссылка)) Цикл
			РабочийГодНачало = ВыборкаОстаткиОтпусковПоРабочимГодам.РабочийГодНачало;
			РабочийГодОкончание = ВыборкаОстаткиОтпусковПоРабочимГодам.РабочийГодОкончание;
			Пока РабочийГодОкончание < ВыборкаОстаткиОтпусковПоРабочимГодам.ДатаОстатков Цикл 
				РабочийГодНачало = РабочийГодОкончание + 86400;
				РабочийГодОкончание = ДобавитьМесяц(РабочийГодОкончание, 12);
			КонецЦикла;
			НоваяСтрока = ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОстаткиОтпусковПоРабочимГодам);
			НоваяСтрока.РабочийГодНачало = РабочийГодНачало;
			НоваяСтрока.РабочийГодОкончание = РабочийГодОкончание;
		КонецЦикла; 
		
		// Делаем новые для него движения
		ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведенияЕжегодныеОтпуска(ДокументОбъект));
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Функция ДанныеДляПроведенияЕжегодныеОтпуска(ДокументОбъект)

	ТаблицаДвиженийПрав = Новый ТаблицаЗначений;
	ТаблицаДвиженийПрав.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвиженийПрав.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаДвиженийПрав.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаДвиженийПрав.Колонки.Добавить("КоличествоДнейВГод", Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаПрава Из ДокументОбъект.ЕжегодныеОтпуска Цикл
		Если СтрокаПрава.КоличествоДнейВГод > 0 Тогда
			НовоеДвижение = ТаблицаДвиженийПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаПрава);
			НовоеДвижение.Сотрудник = ДокументОбъект.Сотрудник;
			НовоеДвижение.ДатаСобытия = ДокументОбъект.ДатаОстатков;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаДвиженийПрав;

КонецФункции

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодамУНачальнаяШтатнаяРасстановка()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановка.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка КАК НачальнаяШтатнаяРасстановка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.ОстаткиОтпусковПоРабочимГодам КАК НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам
		|		ПО НачальнаяШтатнаяРасстановка.Ссылка = НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Ссылка КАК Ссылка,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Сотрудник,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.ДатаОстатка,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.УдалитьРабочийГодНачало КАК РабочийГодНачало,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.УдалитьРабочийГодОкончание КАК РабочийГодОкончание,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.КоличествоДней КАК Остаток
		|ИЗ
		|	ВТНеобработанныеДокументы КАК ВТНеобработанныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.ЕжегодныеОтпуска КАК НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска
		|		ПО ВТНеобработанныеДокументы.Ссылка = НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Ссылка
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.КоличествоДней > 0
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		// Обрабатываем ТЧ ОстаткиОтпусковПоРабочимГодам
		ВыборкаОстаткиОтпусковПоРабочимГодам = ВыборкаДокументов.Выбрать();
		Пока ВыборкаОстаткиОтпусковПоРабочимГодам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить(), ВыборкаОстаткиОтпусковПоРабочимГодам);
		КонецЦикла; 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьЗаписиРегистраНачальныеОстаткиОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстаткиОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|ГДЕ
		|	НачальныеОстаткиОтпусков.РабочийГодНачало = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор КАК ДокументОснование,
		|	НачальныеОстаткиОтпусков.НомерСтроки,
		|	НачальныеОстаткиОтпусков.Активность,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней,
		|	НачальныеОстаткиОтпусков.УдалитьРабочийГодНачало
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ПО ВТРегистраторы.Регистратор = НачальныеОстаткиОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.РабочийГодНачало = Выборка.УдалитьРабочийГодНачало;
			// Рабочий год должен включать дату остатков
			РабочийГодНачало = СтрокаНабора.РабочийГодНачало;
			РабочийГодОкончание = СтрокаНабора.РабочийГодОкончание;
			Пока РабочийГодОкончание < СтрокаНабора.ДатаОстатка Цикл 
				РабочийГодНачало = РабочийГодОкончание + 86400;
				РабочийГодОкончание = ДобавитьМесяц(РабочийГодОкончание, 12);
			КонецЦикла;
			СтрокаНабора.РабочийГодНачало = РабочийГодНачало;
			СтрокаНабора.РабочийГодОкончание = РабочийГодОкончание;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьИспользуетсяДляПоложенныеВидыЕжегодныхОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	НЕ ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|	И НЕ ПоложенныеВидыЕжегодныхОтпусков.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК ДокументОснование,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Используется = НЕ Выборка.ПересчетНеТребуется;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВозвратныеРеквизитыПравИзВозвратныхДокументов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания
		|ПОМЕСТИТЬ ВТВозвратныеРегистраторы
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ВТВозвратныеРегистраторы.Сотрудник,
		|	ВТВозвратныеРегистраторы.ДатаНачала,
		|	ВТВозвратныеРегистраторы.ДатаОкончания
		|ПОМЕСТИТЬ ВТСписокНеобработанныхДвижений
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВозвратныеРегистраторы КАК ВТВозвратныеРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТВозвратныеРегистраторы.Ссылка
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТВозвратныеРегистраторы.Сотрудник
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСписокНеобработанныхДвижений.Регистратор
		|ПОМЕСТИТЬ ВТСписокНеобработанныхРегистраторов
		|ИЗ
		|	ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСписокНеобработанныхДвижений.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ВТСписокНеобработанныхДвижений.ДатаНачала,
		|	ВТСписокНеобработанныхДвижений.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТСотрудникиВидыОтпуска
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхДвижений.Регистратор
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСписокНеобработанныхДвижений.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиВидыОтпуска.Регистратор,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.Период) КАК Период
		|ПОМЕСТИТЬ ВТУказателиПоследних
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиВидыОтпуска КАК ВТСотрудникиВидыОтпуска
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСотрудникиВидыОтпуска.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТСотрудникиВидыОтпуска.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период <= ВТСотрудникиВидыОтпуска.ДатаНачала
		|			И ПоложенныеВидыЕжегодныхОтпусков.Регистратор <> ВТСотрудникиВидыОтпуска.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ВТСотрудникиВидыОтпуска.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУказателиПоследних.Сотрудник,
		|	ВТУказателиПоследних.ВидЕжегодногоОтпуска,
		|	ВТУказателиПоследних.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется
		|ПОМЕСТИТЬ ВТПраваСотрудниковДоРегистраторов
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследних КАК ВТУказателиПоследних
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТУказателиПоследних.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТУказателиПоследних.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период = ВТУказателиПоследних.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаОкончания, ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо) КАК ДействуетДо,
		|	ЕСТЬNULL(ВТПраваСотрудниковДоРегистраторов.Используется, ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании) КАК ИспользуетсяПоОкончании,
		|	ЕСТЬNULL(ВТПраваСотрудниковДоРегистраторов.КоличествоДнейВГод, ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании) КАК КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхРегистраторов КАК ВТСписокНеобработанныхРегистраторов
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхРегистраторов.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваСотрудниковДоРегистраторов КАК ВТПраваСотрудниковДоРегистраторов
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТПраваСотрудниковДоРегистраторов.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТПраваСотрудниковДоРегистраторов.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТПраваСотрудниковДоРегистраторов.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхДвижений.Регистратор
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСписокНеобработанныхДвижений.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			// Если это вторичная запись, сделанная вне пределов действия данного возвратного документа, обрабатывать ее не надо.
			Если Выборка.ВторичнаяЗапись И Выборка.Период > Выборка.ДатаОкончания Тогда
				СтрокаНабора.ДействуетДо = Дата(1,1,1);
				СтрокаНабора.КоличествоДнейВГодПоОкончании = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейВГодПоОкончанииДляВторичныхЗаписей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|	И ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод) КАК КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТСводныеИтоги
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТРегистраторы.Регистратор
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|	И ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК ДокументОснование,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ВЫБОР
		|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании
		|		ИНАЧЕ ВТСводныеИтоги.КоличествоДнейВГод
		|	КОНЕЦ КАК КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеИтоги КАК ВТСводныеИтоги
		|			ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСводныеИтоги.Сотрудник
		|				И ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСводныеИтоги.Регистратор
		|				И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТСводныеИтоги.ВидЕжегодногоОтпуска
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактическиеОтпускаЗаполнитьПериодНачисления() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическиеОтпуска.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка КАК Регистратор,
	|	ДокументыОтклонений.ПериодРегистрации КАК ПериодНачисления
	|ПОМЕСТИТЬ ВТПериодыНачислений
	|ИЗ
	|	Документ.БольничныйЛист КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Командировка КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Отпуск КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ПрогулНеявка КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.СторнированиеНачислений КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.УвольнениеСписком КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Увольнение КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Период,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ФактическиеОтпуска.НомерСтроки КАК НомерСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ПериодыНачислений.ПериодНачисления, ФактическиеОтпуска.Период)
	|		ИНАЧЕ ФактическиеОтпуска.ПериодНачисления
	|	КОНЕЦ КАК ПериодНачисления
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	|		ПО ФактическиеОтпуска.Регистратор = ПериодыНачислений.Регистратор
	|ГДЕ
	|	ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьВводыОстатковОтпусковНулевымиОстатками()Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаОстатка
		|ПОМЕСТИТЬ ВТУказателиПоследнихОстатков
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	ВЫБОР
		|		КОГДА НачальныеОстаткиОтпусков.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Очищать
		|ПОМЕСТИТЬ ВТНачальныеОстатки
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследнихОстатков КАК ВТУказателиПоследнихОстатков
		|		ПО НачальныеОстаткиОтпусков.Сотрудник = ВТУказателиПоследнихОстатков.Сотрудник
		|			И НачальныеОстаткиОтпусков.ДатаОстатка = ВТУказателиПоследнихОстатков.ДатаОстатка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Сотрудник,
		|	НачальныеОстатки.Регистратор,
		|	НачальныеОстатки.ДатаОстатка
		|ПОМЕСТИТЬ ВТРегистраторыНачальныхОстатков
		|ИЗ
		|	ВТНачальныеОстатки КАК НачальныеОстатки
		|ГДЕ
		|	НЕ НачальныеОстатки.Очищать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТПраваСотрудниковДоВвода
		|ИЗ
		|	ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТНачальныеОстатки.Сотрудник = ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
		|			И ВТНачальныеОстатки.ДатаОстатка > ПоложенныеВидыЕжегодныхОтпусков.Период
		|			И (НЕ ВТНачальныеОстатки.Очищать)
		|			И (НЕ ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись)
		|			И (ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваСотрудниковДоВвода.Сотрудник,
		|	ВТПраваСотрудниковДоВвода.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТОтсутствующиеОстатки
		|ИЗ
		|	ВТПраваСотрудниковДоВвода КАК ВТПраваСотрудниковДоВвода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|		ПО ВТПраваСотрудниковДоВвода.Сотрудник = ВТНачальныеОстатки.Сотрудник
		|			И ВТПраваСотрудниковДоВвода.ВидЕжегодногоОтпуска = ВТНачальныеОстатки.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ВТНачальныеОстатки.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистраторыНачальныхОстатков.Регистратор,
		|	РегистраторыНачальныхОстатков.Сотрудник,
		|	РегистраторыНачальныхОстатков.ДатаОстатка,
		|	ОтсутствующиеОстатки.ВидЕжегодногоОтпуска,
		|	РегистраторыНачальныхОстатков.ДатаОстатка КАК РабочийГодНачало,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РегистраторыНачальныхОстатков.ДатаОстатка, ГОД, 1), ДЕНЬ, -1) КАК РабочийГодОкончание
		|ПОМЕСТИТЬ ДобавляемыеЗаписи
		|ИЗ
		|	ВТОтсутствующиеОстатки КАК ОтсутствующиеОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыНачальныхОстатков КАК РегистраторыНачальныхОстатков
		|		ПО ОтсутствующиеОстатки.Сотрудник = РегистраторыНачальныхОстатков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДобавляемыеЗаписи.Регистратор,
		|	ДобавляемыеЗаписи.Сотрудник,
		|	ДобавляемыеЗаписи.ДатаОстатка,
		|	ДобавляемыеЗаписи.ВидЕжегодногоОтпуска,
		|	ДобавляемыеЗаписи.РабочийГодНачало,
		|	ДобавляемыеЗаписи.РабочийГодОкончание
		|ИЗ
		|	ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|		ПО НачальныеОстаткиОтпусков.Регистратор = ДобавляемыеЗаписи.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДобавляемыеЗаписи.Регистратор,
		|	ДобавляемыеЗаписи.Сотрудник,
		|	ДобавляемыеЗаписи.ВидЕжегодногоОтпуска,
		|	ДобавляемыеЗаписи.ДатаОстатка,
		|	ДобавляемыеЗаписи.РабочийГодНачало,
		|	ДобавляемыеЗаписи.РабочийГодОкончание,
		|	0
		|ИЗ
		|	ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачальныеОстатки.Сотрудник,
		|	ВТНачальныеОстатки.ВидЕжегодногоОтпуска,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ИЗ
		|	ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|ГДЕ
		|	ВТНачальныеОстатки.Очищать";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаДобавление = РезультатыЗапроса[РезультатыЗапроса.Количество()-3];
	РезультатЗапросаДобавлениеНаборыЗаписей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2];
	ВыборкаНаборыЗаписей = РезультатЗапросаДобавлениеНаборыЗаписей.Выбрать();
	
	РезультатЗапросаОчистка = РезультатыЗапроса[РезультатыЗапроса.Количество()-1];
	
	Выборка = РезультатЗапросаДобавление.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		    // Добавляем строку в документ-регистратор
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков")
				ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
				
				ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
				
				НоваяСтрока = ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Остаток = 0;
				
			КонецЕсли;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
			// Добавляем строку в набор
			НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока ВыборкаНаборыЗаписей.НайтиСледующий(Новый Структура("Регистратор", Выборка.Регистратор)) Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаНаборыЗаписей);
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки; 
		
	КонецЦикла;
	
	// + удаляем записи во вторичном регистре для тех нач.остатков, которые были введены Переносом и которые теперь
	// необходимо пересчитать заново.
	Если НЕ РезультатЗапросаОчистка.Пустой() Тогда
		УдалитьЗаписиЗаработанныхОтпусков(РезультатЗапросаОчистка.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьПериодСписанияФактическихОтпусковУУвольнений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТДокументыУвольнения
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|	И (ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Увольнение
		|			ИЛИ ФактическиеОтпуска.Регистратор ССЫЛКА Документ.УвольнениеСписком)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Увольнение.Ссылка КАК Регистратор,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	КОНЕЦПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТНовыеДатыКомпенсаций
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыУвольнения КАК ВТДокументыУвольнения
		|		ПО Увольнение.Ссылка = ВТДокументыУвольнения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО Увольнение.Ссылка = ФактическиеОтпуска.Регистратор
		|			И Увольнение.Сотрудник = ФактическиеОтпуска.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	КОНЕЦПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ)
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыУвольнения КАК ВТДокументыУвольнения
		|		ПО Увольнение.Ссылка = ВТДокументыУвольнения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО Увольнение.Ссылка = ФактическиеОтпуска.Регистратор
		|			И Увольнение.Сотрудник = ФактическиеОтпуска.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНовыеДатыКомпенсаций.Регистратор
		|ПОМЕСТИТЬ ВТОбрабатываемыеРегистраторы
		|ИЗ
		|	ВТНовыеДатыКомпенсаций КАК ВТНовыеДатыКомпенсаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.Период) КАК Период,
		|	ФактическиеОтпуска.Регистратор КАК Регистратор,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.ДатаОкончания) КАК ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.ПериодНачисления
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбрабатываемыеРегистраторы КАК ВТОбрабатываемыеРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТОбрабатываемыеРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеДатыКомпенсаций КАК ВТНовыеДатыКомпенсаций
		|		ПО ФактическиеОтпуска.Регистратор = ВТНовыеДатыКомпенсаций.Регистратор
		|			И ФактическиеОтпуска.Сотрудник = ВТНовыеДатыКомпенсаций.Сотрудник
		|			И (ФактическиеОтпуска.Компенсация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСсылкуНаОтпускВДокументахОтпускаСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускаСотрудниковСотрудники.Ссылка КАК Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник КАК Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	ОтпускаСотрудниковСотрудники.ДатаНачала КАК ДатаНачала,
	               |	ОтпускаСотрудниковСотрудники.ДатаОкончания КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТОтпускаСотрудниковДокумента
	               |ИЗ
	               |	Документ.ОтпускаСотрудников.Сотрудники КАК ОтпускаСотрудниковСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ДокументОтпуск
	               |		ПО ОтпускаСотрудниковСотрудники.Отпуск = ДокументОтпуск.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	               |		ПО ОтпускаСотрудниковСотрудники.Отпуск = ОтпускБезСохраненияОплаты.Ссылка
	               |ГДЕ
	               |	ДокументОтпуск.Ссылка ЕСТЬ NULL
	               |	И ОтпускБезСохраненияОплаты.Ссылка ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтпускаСотрудниковСотрудники.Ссылка КАК Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник КАК Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	МАКСИМУМ(Отпуск.Ссылка) КАК Отпуск
	               |ПОМЕСТИТЬ ВТПроведенныеОтпуска
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = Отпуск.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = Отпуск.ДатаНачалаОсновногоОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = Отпуск.ДатаОкончанияОсновногоОтпуска
	               |			И (ОтпускаСотрудниковСотрудники.ВидОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной))
	               |			И (Отпуск.ПредоставитьОсновнойОтпуск
	               |					И Отпуск.КоличествоДнейОсновногоОтпуска > 0
	               |				ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
	               |					И Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска > 0)
	               |			И (Отпуск.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска,
	               |	МАКСИМУМ(ОтпускДополнительныеОтпуска.Ссылка)
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = ОтпускДополнительныеОтпуска.Ссылка.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ВидОтпуска = ОтпускДополнительныеОтпуска.ВидОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = ОтпускДополнительныеОтпуска.ДатаНачала
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = ОтпускДополнительныеОтпуска.ДатаОкончания
	               |			И (ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
	               |			И (ОтпускДополнительныеОтпуска.Ссылка.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска,
	               |	МАКСИМУМ(Отпуск.Ссылка)
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК Отпуск
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = Отпуск.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ВидОтпуска = Отпуск.ВидОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = Отпуск.ДатаНачала
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = Отпуск.ДатаОкончания
	               |			И (Отпуск.Проведен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтпускаСотрудниковСотрудники.Ссылка КАК Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник КАК Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	МАКСИМУМ(Отпуск.Ссылка) КАК Отпуск
	               |ПОМЕСТИТЬ ВТНеПроведенныеОтпуска
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = Отпуск.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = Отпуск.ДатаНачалаОсновногоОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = Отпуск.ДатаОкончанияОсновногоОтпуска
	               |			И (ОтпускаСотрудниковСотрудники.ВидОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной))
	               |			И (Отпуск.ПредоставитьОсновнойОтпуск
	               |					И Отпуск.КоличествоДнейОсновногоОтпуска > 0
	               |				ИЛИ Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
	               |					И Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска > 0)
	               |			И (НЕ Отпуск.Проведен)
	               |			И (НЕ Отпуск.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска,
	               |	МАКСИМУМ(ОтпускДополнительныеОтпуска.Ссылка)
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = ОтпускДополнительныеОтпуска.Ссылка.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ВидОтпуска = ОтпускДополнительныеОтпуска.ВидОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = ОтпускДополнительныеОтпуска.ДатаНачала
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = ОтпускДополнительныеОтпуска.ДатаОкончания
	               |			И (ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск)
	               |			И (НЕ ОтпускДополнительныеОтпуска.Ссылка.Проведен)
	               |			И (НЕ ОтпускДополнительныеОтпуска.Ссылка.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска,
	               |	МАКСИМУМ(Отпуск.Ссылка)
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК Отпуск
	               |		ПО ОтпускаСотрудниковСотрудники.Сотрудник = Отпуск.Сотрудник
	               |			И ОтпускаСотрудниковСотрудники.ВидОтпуска = Отпуск.ВидОтпуска
	               |			И ОтпускаСотрудниковСотрудники.ДатаНачала = Отпуск.ДатаНачала
	               |			И ОтпускаСотрудниковСотрудники.ДатаОкончания = Отпуск.ДатаОкончания
	               |			И (НЕ Отпуск.Проведен)
	               |			И (НЕ Отпуск.ПометкаУдаления)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтпускаСотрудниковСотрудники.Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки,
	               |	ОтпускаСотрудниковСотрудники.Сотрудник,
	               |	ОтпускаСотрудниковСотрудники.ВидОтпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтпускаСотрудниковСотрудники.Ссылка КАК Ссылка,
	               |	ОтпускаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки,
	               |	ВЫБОР
	               |		КОГДА НЕ ПроведенныеОтпуска.Отпуск ЕСТЬ NULL
	               |			ТОГДА ПроведенныеОтпуска.Отпуск
	               |		КОГДА НЕ НеПроведенныеОтпуска.Отпуск ЕСТЬ NULL
	               |			ТОГДА НеПроведенныеОтпуска.Отпуск
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	               |	КОНЕЦ КАК Отпуск
	               |ИЗ
	               |	ВТОтпускаСотрудниковДокумента КАК ОтпускаСотрудниковСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроведенныеОтпуска КАК ПроведенныеОтпуска
	               |		ПО ОтпускаСотрудниковСотрудники.Ссылка = ПроведенныеОтпуска.Ссылка
	               |			И ОтпускаСотрудниковСотрудники.НомерСтроки = ПроведенныеОтпуска.НомерСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеПроведенныеОтпуска КАК НеПроведенныеОтпуска
	               |		ПО ОтпускаСотрудниковСотрудники.Ссылка = НеПроведенныеОтпуска.Ссылка
	               |			И ОтпускаСотрудниковСотрудники.НомерСтроки = НеПроведенныеОтпуска.НомерСтроки
	               |ГДЕ
	               |	(НЕ ПроведенныеОтпуска.Отпуск ЕСТЬ NULL
	               |			ИЛИ НЕ НеПроведенныеОтпуска.Отпуск ЕСТЬ NULL)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ОтпускаСотрудников", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл 
			СтрокаСотрудника = ДокументОбъект.Сотрудники[Выборка.НомерСтроки - 1];
			СтрокаСотрудника.Отпуск = Выборка.Отпуск;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СведенияОЕжегодныхОтпускахСотрудников

Функция ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЕжегодныхОтпусках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЕжегодныхОтпусках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЕжегодныхОтпусках(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КоличествоДнейОтпускаОбщее")
		Или ИмяПоля = ВРег("КоличествоДнейОсновногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЧАЭС")
		Или ИмяПоля = ВРег("КоличествоДнейСеверногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЗаВредность");
		
КонецФункции

Функция ПутьКДаннымСведенийОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ПутьКДанным = "КоличестваДнейЕжегодныхОтпусковСотрудников." + ИмяПоля;
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОЕжегодныхОтпусках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод КАК КоличествоДнейОсновногоОтпуска,
		|	ОтпускаЧАЭС.КоличествоДнейВГод КАК КоличествоДнейОтпускаЧАЭС,
		|	СеверныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейСеверногоОтпуска,
		|	ОтпускаЗаВредность.КоличествоДнейВГод КАК КоличествоДнейОтпускаЗаВредность,
		|	СУММА(ЕСТЬNULL(ВсеОтпуска.КоличествоДнейВГод, 0)) КАК КоличествоДнейОтпускаОбщее
		|ПОМЕСТИТЬ ВТКоличестваДнейЕжегодныхОтпусковСотрудников
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ВсеОтпуска
		|		ПО ТаблицаОтборов.Период = ВсеОтпуска.Период
		|			И ТаблицаОтборов.Сотрудник = ВсеОтпуска.Сотрудник}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОсновнойОтпуск
		|		ПО ТаблицаОтборов.Период = ОсновнойОтпуск.Период
		|			И ТаблицаОтборов.Сотрудник = ОсновнойОтпуск.Сотрудник
		|			И (ОсновнойОтпуск.ВидЕжегодногоОтпуска = &ОтпускОсновной)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЧАЭС
		|		ПО ТаблицаОтборов.Период = ОтпускаЧАЭС.Период
		|			И ТаблицаОтборов.Сотрудник = ОтпускаЧАЭС.Сотрудник
		|			И (ОтпускаЧАЭС.ВидЕжегодногоОтпуска = &ОтпускПострадавшимВАварииЧАЭС)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК СеверныеОтпуска
		|		ПО ТаблицаОтборов.Период = СеверныеОтпуска.Период
		|			И ТаблицаОтборов.Сотрудник = СеверныеОтпуска.Сотрудник
		|			И (СеверныеОтпуска.ВидЕжегодногоОтпуска = &ОтпускСеверный)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЗаВредность
		|		ПО ТаблицаОтборов.Период = ОтпускаЗаВредность.Период
		|			И ТаблицаОтборов.Сотрудник = ОтпускаЗаВредность.Сотрудник
		|			И (ОтпускаЗаВредность.ВидЕжегодногоОтпуска = &ОтпускЗаВредность)}
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод,
		|	ОтпускаЧАЭС.КоличествоДнейВГод,
		|	СеверныеОтпуска.КоличествоДнейВГод,
		|	ОтпускаЗаВредность.КоличествоДнейВГод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЕжегодныеОтпускаСотрудников";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ОтпускОсновной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	Запрос.УстановитьПараметр("ОтпускОсновной", ?(ОтпускОсновной = Неопределено, NULL, ОтпускОсновной));
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, NULL, ОтпускПострадавшимВАварииЧАЭС));
	
	ОтпускСеверный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	Запрос.УстановитьПараметр("ОтпускСеверный", ?(ОтпускСеверный = Неопределено, NULL, ОтпускСеверный));
	
	ОтпускЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	Запрос.УстановитьПараметр("ОтпускЗаВредность", ?(ОтпускЗаВредность = Неопределено, NULL, ОтпускЗаВредность));
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличестваДнейЕжегодныхОтпусковСотрудников КАК КоличестваДнейЕжегодныхОтпусковСотрудников
		|	ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Сотрудник
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТКоличестваДнейЕжегодныхОтпусковСотрудников");
	
КонецПроцедуры

Функция ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор = Неопределено, ИмяВТЕжегодныеОтпускаСотрудников = "ВТЕжегодныеОтпускаСотрудников") Экспорт
	
	// Действующие отпуска сотрудников
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		"Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить(
		"Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ИндексироватьПо = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВидЕжегодногоОтпуска");
	
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы,	"Регистратор", "<>", ИсключаемыйРегистратор);
			
	КонецЕсли; 
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПоложенныеВидыЕжегодныхОтпусков",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		"ВТДействующиеОтпуска");
	
	// Специальные отпуска сотрудников
	
	ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗапросВТСпециальныеОтпуска = ЗапросВТСпециальныеОтпускаФизическихЛиц(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТСпециальныеОтпуска);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.КоличествоДнейВГод,
		|	ВидыОтпусков.Предопределенный,
		|	ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам,
		|	ВидыОтпусков.Наименование
		|ПОМЕСТИТЬ ВТОтпускаСотрудниковПоложенныеВсем
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВидыОтпусков.ПометкаУдаления
		|	И НЕ ВидыОтпусков.Недействителен
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействующиеОтпуска.Период,
		|	ДействующиеОтпуска.Сотрудник КАК Сотрудник,
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска,
		|	ДействующиеОтпуска.КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТЕжегодныеОтпускаСотрудников
		|ИЗ
		|	ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.Используется
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.Сотрудник,
		|	СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска,
		|	СпециальныеОтпускаСотрудников.КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Предопределенный,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Наименование
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|			ПО (ВЫРАЗИТЬ(ДействующиеОтпуска.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|				И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ПО ТаблицаОтборов.Период = СпециальныеОтпускаСотрудников.Период
		|			И (ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Период,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.КоличествоДнейВГод,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Предопределенный,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ПредоставлятьОтпускВсемСотрудникам,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Наименование
		|ИЗ
		|	ВТОтпускаСотрудниковПоложенныеВсем КАК ЕжегодныеОтпускаСотрудниковПоложенныеВсем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|		ПО ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник = ДействующиеОтпуска.Сотрудник
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|		ПО (ВЫРАЗИТЬ(ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|	И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДействующиеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСпециальныеОтпускаФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтпускаСотрудниковПоложенныеВсем";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТЕжегодныеОтпускаСотрудников", ИмяВТЕжегодныеОтпускаСотрудников);

	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальныеОтпускаФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальныеОтпускаФизическихЛиц = "ВТСпециальныеОтпускаФизическихЛиц")
	
	Запрос = Новый Запрос;
	
	ИспользоватьЧАЭС = ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС");
	Запрос.УстановитьПараметр("ИспользоватьЧАЭС", ИспользоватьЧАЭС);
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, NULL, ОтпускПострадавшимВАварииЧАЭС));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска КАК КоличествоДнейВГод,
		|	&ОтпускПострадавшимВАварииЧАЭС КАК ВидЕжегодногоОтпуска,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТСпециальныеОтпускаФизическихЛиц
		|ИЗ
		|	РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска > 0
		|	И &ИспользоватьЧАЭС";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСпециальныеОтпускаФизическихЛиц", ИмяВТСпециальныеОтпускаФизическихЛиц);

	Возврат Запрос;
		
КонецФункции

#КонецОбласти

// Возвращает признак того, является ли сотрудник работающим по специфическому трудовому договору
// (см. ст. 291 и ст. 295 ТК РФ), которые подразумевают предоставление основного отпуска в рабочих днях.
// Признак возвращается на дату среза.
// 
Функция ОтпускСотрудникаВРабочихДняхПоДоговору(Сотрудник, ДатаСреза) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаСреза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник),
		"ДатаПриема,ДатаОкончания,СрочныйДоговор,СезонныйДоговор,КраткосрочныйТрудовойДоговор,ЯвляетсяСудьей",
		ДатаСреза);
	
	Если КадровыеДанныеСотрудников.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
	
	// Если это не срочный договор - значит он уже и не краткосрочный и не сезонный.
	Если НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.СрочныйДоговор) ИЛИ НЕ КадровыеДанныеСотрудника.СрочныйДоговор Тогда
		Если НЕ КадровыеДанныеСотрудника.ЯвляетсяСудьей Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаОкончания)
		ИЛИ НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаПриема) Тогда
		СрочныйДоговорДействует = Истина;
	Иначе
		СрочныйДоговорДействует = НачалоДня(КадровыеДанныеСотрудника.ДатаПриема) <= ДатаСреза
			И ДатаСреза <= КонецДня(КадровыеДанныеСотрудника.ДатаОкончания);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.КраткосрочныйТрудовойДоговор) Тогда
		КраткосрочныйТД = Ложь;
	Иначе
		КраткосрочныйТД = КадровыеДанныеСотрудника.КраткосрочныйТрудовойДоговор И СрочныйДоговорДействует;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.СезонныйДоговор) Тогда
		СезонныйТД = Ложь;
	Иначе
		СезонныйТД = КадровыеДанныеСотрудника.СезонныйДоговор И СрочныйДоговорДействует;
	КонецЕсли;	
	
	Возврат КраткосрочныйТД ИЛИ СезонныйТД ИЛИ КадровыеДанныеСотрудника.ЯвляетсяСудьей;

КонецФункции

Функция ОписаниеВидаОтпуска(ВидОтпуска, ОтпускВРабочихДняхПоДоговору = Ложь) Экспорт
	
	СпособРасчетаПоКалендарнымДням = Истина;
	ЕжегодныйОтпуск = Истина;
	
	Если ЗначениеЗаполнено(ВидОтпуска) Тогда
		РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтпуска, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным");
		
		СпособРасчетаПоКалендарнымДням = 
			РеквизитыОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях 
			ИЛИ (РеквизитыОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора И НЕ ОтпускВРабочихДняхПоДоговору);
		
		ЕжегодныйОтпуск = РеквизитыОтпуска.ОтпускЯвляетсяЕжегодным;
		
	КонецЕсли;
	
	Возврат Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск", СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск); 
	
КонецФункции

// Формирует временную таблицу, на основе переданной, с признаком того, попадает ли сотрудник под ст. 291 и ст. 295 ТК
// РФ на дату среза. Параметры
// 	МенеджерВременныхТаблиц - менеджер временных таблиц, обязательно содержащий ВТ "ВТКадровыеДанныеСотрудников" со следующими полями
// 		- ДатаПриема
// 		- ДатаОкончания
// 		- СрочныйДоговор
// 		- СезонныйДоговор
// 	ИмяВТСотрудники - Строка, имя ВТ с отбором Сотрудник-Дата
// 	ИменаПолей      - Строка, имена полей Сотрудника и Даты в ВТ отбора
// 	ИмяВТРезультата - Строка, имя создаваемой внутренней таблицы.
//
Процедура СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях(МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей, ПолучатьКадровыеДанные = Истина, ИмяВТРезультата = "ВТДоговорыСотрудниковСОтпускомВРабочихДнях") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПолучатьКадровыеДанные Тогда
		ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковДляОтпусковВРабочихДнях";
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей);
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТКадровыеДанныеСотрудников;
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
			"ДатаПриема,ДатаОкончания,СрочныйДоговор,СезонныйДоговор,ЯвляетсяСудьей");
	Иначе
		ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТКадровыеДанныеСотрудников.Сотрудник,
		|	ВТКадровыеДанныеСотрудников.Период,
		|	ВТКадровыеДанныеСотрудников.ЯвляетсяСудьей,
		|	ВТКадровыеДанныеСотрудников.СезонныйДоговор,
		|	ВЫБОР
		|		КОГДА НЕ ВТКадровыеДанныеСотрудников.СрочныйДоговор
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ДОБАВИТЬКДАТЕ(ВТКадровыеДанныеСотрудников.ДатаПриема, МЕСЯЦ, 2) > ВТКадровыеДанныеСотрудников.ДатаОкончания
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КраткосрочныйДоговор,
		|	ВТКадровыеДанныеСотрудников.ДатаПриема КАК ДатаНачалаДействия,
		|	ВТКадровыеДанныеСотрудников.ДатаОкончания КАК ДатаОкончанияДействия
		|ПОМЕСТИТЬ ВТДанныеДоговоровСотрудников
		|ИЗ
		|	%ВТКадровыеДанныеСотрудников% КАК ВТКадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговоровСотрудников.Сотрудник,
		|	ДанныеДоговоровСотрудников.Период,
		|	ДанныеДоговоровСотрудников.ЯвляетсяСудьей,
		|	ДанныеДоговоровСотрудников.СезонныйДоговор,
		|	ДанныеДоговоровСотрудников.КраткосрочныйДоговор,
		|	ВЫБОР
		|		КОГДА НЕ ДанныеДоговоровСотрудников.СезонныйДоговор
		|				И НЕ ДанныеДоговоровСотрудников.КраткосрочныйДоговор
		|				И НЕ ДанныеДоговоровСотрудников.ЯвляетсяСудьей
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеДоговоровСотрудников.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДоговоровСотрудников.Период >= ДанныеДоговоровСотрудников.ДатаНачалаДействия
		|						И ДанныеДоговоровСотрудников.Период <= ДанныеДоговоровСотрудников.ДатаОкончанияДействия
		|					ТОГДА ИСТИНА
		|				КОГДА ДанныеДоговоровСотрудников.ЯвляетсяСудьей
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ОтпускВРабочихДняхПоДоговору
		|ПОМЕСТИТЬ %ВТДоговорыСотрудниковСОтпускомВРабочихДнях%
		|ИЗ
		|	ВТДанныеДоговоровСотрудников КАК ДанныеДоговоровСотрудников";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТДоговорыСотрудниковСОтпускомВРабочихДнях%", ИмяВТРезультата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТКадровыеДанныеСотрудников%", ИмяВТКадровыеДанныеСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТДанныеДоговоровСотрудников");
	Если ПолучатьКадровыеДанные Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ИмяВТКадровыеДанныеСотрудников);
	КонецЕсли;
	
	Запрос.Выполнить();
		
КонецПроцедуры

// Программная обертка вокруг СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях
// Параметры:
// 	ТаблицаСотрудников - ТаблицаЗначений с колонками:
// 		- Сотрудник - СправочникСсылка.Сотрудники
// 		- Период    - Дата
// Возвращаемое значение:
// 	ТаблицаСотрудников - ТаблицаЗначений с колонками:
// 		- Сотрудник 					- СправочникСсылка.Сотрудники
// 		- Период					    - Дата
// 		- ОтпускВРабочихДняхПоДоговору 	- булево.
//
Функция ДоговорыСотрудниковСОтпускомВРабочихДнях(ТаблицаСотрудников) Экспорт 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Выполнить();

	СоздатьВТДоговорыСотрудниковСОтпускомВРабочихДнях(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники", "Сотрудник,Период");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыСотрудников.Сотрудник,
		|	ДоговорыСотрудников.Период,
		|	ДоговорыСотрудников.ОтпускВРабочихДняхПоДоговору
		|ИЗ
		|	ВТДоговорыСотрудниковСОтпускомВРабочихДнях КАК ДоговорыСотрудников";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает "Истина" в том случае, если в переданном массиве отпусков содержатся только отпуска по рабочим дням.
//
Функция СодержатсяТолькоОтпускаПоРабочимДням(МассивВидовОтпусков, Сотрудник, ДатаСреза = '00010101') Экспорт
	
	Если МассивВидовОтпусков.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ДатаСреза) Тогда
		ДатаСреза = ТекущаяДатаСеанса();
	КонецЕсли;
	ОтпускВРабочихДняхПоДоговору = ОтпускСотрудникаВРабочихДняхПоДоговору(Сотрудник, ДатаСреза);	
	
	ЕстьКалендарныеДни = Ложь;
	
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовОтпусков, "СпособРасчетаОтпуска");
	
	Для каждого ЗначениеРеквизита Из ЗначенияРеквизита Цикл
		Если ЗначениеРеквизита.Значение = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора Тогда
			ЕстьКалендарныеДни = Не ОтпускВРабочихДняхПоДоговору;
		ИначеЕсли ЗначениеРеквизита.Значение = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях Тогда
			ЕстьКалендарныеДни = Истина;
		КонецЕсли;
		Если ЕстьКалендарныеДни Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Не ЕстьКалендарныеДни;
	
КонецФункции

// Процедура создает временную таблицу со списком сотрудников и периодов 
// 
Процедура СоздатьВТСотрудникиТребовавшиеПереквалификациюДней(МенеджерВременныхТаблиц, ИмяВТСотрудники, ИмяВТКадровыеДанныеСотрудников = "")

	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"СведенияКонтрактаДоговораСотрудника",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудники,"Сотрудник"),
		ПараметрыПостроения,
		"ВТСведенияКонтрактаДоговораСотрудника");
		
	Если Не ЗначениеЗаполнено(ИмяВТКадровыеДанныеСотрудников) Тогда
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, "Сотрудник,ДатаНачала");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ДатаПриема");
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияДоговораСотрудника.Сотрудник,
		|	ВЫБОР
		|		КОГДА СведенияДоговораСотрудника.СрочныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА СведенияДоговораСотрудника.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ЛОЖЬ
		|					КОГДА КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ЛОЖЬ
		|					КОГДА ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаПриема, МЕСЯЦ, 2) > СведенияДоговораСотрудника.ДатаОкончания
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КраткосрочныйДоговор,
		|	СведенияДоговораСотрудника.СезонныйДоговор,
		|	СведенияДоговораСотрудника.Период КАК ДатаНачала,
		|	СведенияДоговораСотрудника.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДетальныеЗаписи
		|ИЗ
		|	ВТСведенияКонтрактаДоговораСотрудника КАК СведенияДоговораСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО СведенияДоговораСотрудника.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник,
		|	МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор) КАК КраткосрочныйДоговор,
		|	МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.СезонныйДоговор) КАК СезонныйДоговор
		|ПОМЕСТИТЬ ВТСотрудникиКВыдаче
		|ИЗ
		|	ВТСотрудникиДетальныеЗаписи КАК ВТСотрудникиДетальныеЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор)
		|		ИЛИ МАКСИМУМ(ВТСотрудникиДетальныеЗаписи.СезонныйДоговор))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудникиДетальныеЗаписи.Сотрудник,
		|	ВТСотрудникиДетальныеЗаписи.ДатаНачала,
		|	ВТСотрудникиДетальныеЗаписи.ДатаОкончания,
		|	ВТСотрудникиДетальныеЗаписи.КраткосрочныйДоговор,
		|	ВТСотрудникиДетальныеЗаписи.СезонныйДоговор
		|ПОМЕСТИТЬ ВТСотрудникиТребовавшиеПереквалификациюДней
		|ИЗ
		|	ВТСотрудникиДетальныеЗаписи КАК ВТСотрудникиДетальныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКВыдаче КАК ВТСотрудникиКВыдаче
		|		ПО ВТСотрудникиДетальныеЗаписи.Сотрудник = ВТСотрудникиКВыдаче.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиДетальныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКВыдаче";
		
	Запрос.Выполнить();

КонецПроцедуры

Функция ЕстьСтажевыеОтпуска() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОтпусков.Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Функция формирует таблицу событий, связанных с ежегодными отпусками сотрудника,
// которая затем используется для печати справки по отпускам.
//
// В качестве таблицы данных нужно передать заполненную таблицу значений, по описанию из процедуры
// ОписаниеТаблицыДанных().
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками, описанными в тексте метода.
//
Функция ТаблицаСобытийДляСправки(Сотрудники, ДатаОстатков, ЭтоРасчетПриУвольнении) Экспорт
	
	// Получаем исходные данные
	ТаблицаДанных = ОписаниеТаблицыДанных();
	Для Каждого Сотрудник Из Сотрудники Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник							= Сотрудник;
		Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
		Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, Истина);
	ИсходныеДанные = ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	ТаблицаЗаработанныхДнейОтпусков	= ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц);
	
	ДополненнаяТаблицаДанных		= ИсходныеДанные.Данные;
	
	// Получаем таблицу остатков.
	ПараметрыОтпусков = ОписаниеПараметровДляТаблицаОстатковОтпусков();
	ПараметрыОтпусков.Сотрудники = Сотрудники;
	ПараметрыОтпусков.ДатаОстатков = КонецДня(ДатаОстатков);
	
	ТаблицаОстатков = ТаблицаОстатковОтпусков(ПараметрыОтпусков); 
	
	// Формируем права в разрезе событий.
	СоздатьВТСобытияПравНаОтпуска(МенеджерВременныхТаблиц);
	
	// Заполняем таблицу результата.
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("Сотрудник");
	ТаблицаРезультата.Колонки.Добавить("ТекущаяОрганизация");
	ТаблицаРезультата.Колонки.Добавить("ТекущееПодразделение");
	ТаблицаРезультата.Колонки.Добавить("ТекущаяДолжность");
	ТаблицаРезультата.Колонки.Добавить("ДанныеОстатков", Новый ОписаниеТипов("Массив"));
	ТаблицаРезультата.Колонки.Добавить("ДанныеСобытий", Новый ОписаниеТипов("Массив"));
	
	// Цикл по сотрудникам.
	Для Каждого СтрокаДанных Из ДополненнаяТаблицаДанных Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДанных);
		
		// Формируем таблицу событий сотрудника.
		ТаблицаСобытий = ПустаяТаблицаСобытий();
		
		ПраваСотрудника = СобытияИзмененийПравСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраваСотрудника, ТаблицаСобытий);
		
		ОтпускаСотрудника = СобытияОтпусковСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтпускаСотрудника, ТаблицаСобытий);
		
		ОтклоненияСотрудника = СобытияОтклоненийСотрудника(МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтклоненияСотрудника, ТаблицаСобытий);
				
		// Добавляем "событие" сегодня
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.ДатаСобытия = СтрокаДанных.ДатаОстатков;
		НовоеСобытие.Событие = НСтр("ru = 'Сегодня'");
		НовоеСобытие.ПоследнееСобытие = Истина;
		
		ТаблицаСобытий.Сортировать("ДатаСобытия");
		
		// Присвоим начальным событиям "человеческие" имена.
		ЗаменитьРеквизитыСобытийПоНачальнымОстаткамСотрудника(ТаблицаСобытий, МенеджерВременныхТаблиц, СтрокаДанных.Сотрудник);
		
		// Дополним таблицу информацией по заработанным дням.
		ЗаработанныеОтпускаСотрудника = ТаблицаЗаработанныхДнейОтпусков.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		ТаблицаЗаработанныхДнейОтпусковСотрудника = ПустаяТаблицаЗаработанныхДней();
		
		ЗаполнитьЗаработанныеДниВТаблицеСобытий(ТаблицаСобытий, ЗаработанныеОтпускаСотрудника, ТаблицаЗаработанныхДнейОтпусковСотрудника);
		
		СтрокаРезультата.ДанныеСобытий = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСобытий);
		// Для вывода остатков - добавим в таблицу информацию по остаткам рабочих лет.
		СтрокаРезультата.ДанныеОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Получение остатка отпуска

// Возвращает структуру, которая используется для передачи параметров для функции ОстаткиОтпусков.
// 	- ДатаОстатков - дата, на которую происходит расчет остатков.
// 	- Сотрудники - массив сотрудников или одиночное значение типа СправочникСсылка.Сотрудники
// 	- ВидыОтпусков - массив видов отпусков или одиночное значение типа СправочникСсылка.ВидыОтпусков
// 	- ИсключаемыеРегистраторы - массив ссылок регистраторов или одиночное значение типа ДокументСсылка.
//
Функция ОписаниеПараметровДляТаблицаОстатковОтпусков()

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДатаОстатков", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Сотрудники");
	СтруктураПараметров.Вставить("ВидыОтпусков");
	СтруктураПараметров.Вставить("ИсключаемыеРегистраторы");
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция возвращает результат компоновки отчета ОстаткиОтпусков в виде таблицы значений.
//
// Параметры
//	СтруктураПараметров - тип Структура, со следующими полями (см. ОстаткиОтпусков.ОписаниеПараметровДляТаблицаОстатковОтпусков()).
//		* ДатаОстатков				- дата, на которую вычисляются остатки, тип Дата
//		* Сотрудники 				- список сотрудников, тип Массив или СправочникСсылка.Сотрудники
//		* ВидыОтпусков 				- список видов отпусков, тип Массив или СправочникСсылка.ВидыОтпусков
//		* ИсключаемыеРегистраторы	- список регистраторов, исключаемых при расчете остатков, тип Массив или ДокументСсылка.
//
// Возвращаемое значение:
//  ТаблицаЗначений - остатки отпусков сотрудников в разрезе рабочих лет, таблица значений с колонками:
//		* Сотрудник					- сотрудник
//		* ВидОтпуска				- вид отпуска
//		* ВидОтпускаНаименование    - наименование вида отпуска
//		* РабочийГодДатаНачала		- начало рабочего года
//		* РабочийГодДатаОкончания	- конец рабочего года
//		* Дни                       - остаток отпуска.
//
Функция ТаблицаОстатковОтпусков(СтруктураПараметров) Экспорт
	
	ОтчетОстаткиОтпусков = Отчеты.ОстаткиОтпусков.Создать();
	НастройкиДанныеРасчета = ОтчетОстаткиОтпусков.СхемаКомпоновкиДанных.ВариантыНастроек.ДанныеРасчета.Настройки;
	ОтчетОстаткиОтпусков.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиДанныеРасчета);
	НастройкиОтчета = ОтчетОстаткиОтпусков.КомпоновщикНастроек.ПолучитьНастройки();
	
	ДатаОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	ДатаОтчета.Значение = СтруктураПараметров.ДатаОстатков;
	ДатаОтчета.Использование = Истина;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ИсключаемыеРегистраторы) Тогда
		РегистраторИсключение = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НеучитываемыйРегистраторОтпусков"));
		РегистраторИсключение.Значение = СтруктураПараметров.ИсключаемыеРегистраторы;
		РегистраторИсключение.Использование = Истина;
	КонецЕсли;
	
	Отбор = НастройкиОтчета.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ЭтоОтпуск", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Дни", ВидСравненияКомпоновкиДанных.НеРавно, 0);
	Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудники) И (СтруктураПараметров.Сотрудники.Количество() > 0) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураПараметров.Сотрудники);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураПараметров.ВидыОтпусков) И (СтруктураПараметров.ВидыОтпусков.Количество() > 0) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "ВидОтпуска", ВидСравненияКомпоновкиДанных.ВСписке, СтруктураПараметров.ВидыОтпусков);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОстаткиОтпусков.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатКомпоновки = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат РезультатКомпоновки;

КонецФункции

Функция ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпускаОтбор.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпускаОтбор.НачалоПериода КАК НачалоПериода,
	|	ФактическиеОтпускаОтбор.ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТОтборСУчетомОстатков
	|ИЗ
	|	ВТФактическиеОтпускаОтбор КАК ФактическиеОтпускаОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ФактическиеОтпуска.Регистратор
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборСУчетомОстатков КАК ФактическиеОтпускаОтбор
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаОтбор.Сотрудник
	|			И ФактическиеОтпуска.ДатаОкончания >= ФактическиеОтпускаОтбор.НачалоПериода
	|			И (ФактическиеОтпуска.ДатаНачала <= ФактическиеОтпускаОтбор.ОкончаниеПериода
	|				ИЛИ ФактическиеОтпускаОтбор.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ФактическиеОтпуска.Регистратор,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнируемаяЗапись,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.Количество < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторноЗапись
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачала = ФактическиеОтпускаСторно.ДатаНачала
	|			И ФактическиеОтпуска.ДатаОкончания = ФактическиеОтпускаСторно.ДатаОкончания
	|			И (ФактическиеОтпуска.Количество = -ФактическиеОтпускаСторно.Количество)
	|			И ФактическиеОтпуска.Регистратор <> ФактическиеОтпускаСторно.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ФактическиеОтпуска.Количество КАК КоличествоДней,
	|	ФактическиеОтпуска.Компенсация КАК ЭтоКомпенсация,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ФактическиеОтпуска.ВРабочихДнях КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ФактическиеОтпуска.Основание КАК Основание
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСотрудников
	|{ВЫБРАТЬ
	|	Сотрудник.*,
	|	ВидЕжегодногоОтпуска.*,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	КоличествоДней,
	|	ЭтоКомпенсация,
	|	Регистратор,
	|	ВРабочихДнях,
	|	РабочийПериодС,
	|	РабочийПериодПо,
	|	Основание}
	|ИЗ
	|	ВТФактическиеОтпускаСоСторноПризнаками КАК ФактическиеОтпуска
	|ГДЕ
	|	НЕ ФактическиеОтпуска.СторнируемаяЗапись
	|	И НЕ ФактическиеОтпуска.СторноЗапись
	|{ГДЕ
	|	ФактическиеОтпуска.Сотрудник.*,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска.*,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Если Не ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаСотрудников", ОписательВременныхТаблиц.ИмяВТФактическиеОтпускаСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаОтбор", ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.Сотрудник", "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.НачалоПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.НачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.ОкончаниеПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.ОкончаниеПериода);
	
	Возврат Запрос;
	
КонецФункции

// Функция готовит 2 виртуальных таблицы по сотрудникам, для которых необходимо рассчитать право на отпуск.
// 	ВТНеРассчитанныеСотрудники, с полями:
// 		* Сотрудник
// 		* ДатаОстатков
// 		* ЭтоРасчетПриУвольнении
// 	ВТНеРассчитанныеВидыОтпусковСотрудников, с полями:
// 		* Сотрудник,
// 		* ВидЕжегодногоОтпуска,
// 		* ДатаНачала,
// 		* ДатаОкончания,
// 		* ЭтоРасчетПриУвольнении.
//
Процедура СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, РассчитатьПравоНаОтпускаВсемСотрудникам)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаДанных",	ТаблицаДанных);
	
	// Упаковываем ТЗ в ВТ.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОкончания,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК Период,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТЗ
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТТЗ.Сотрудник,
		|	МАКСИМУМ(ВТТЗ.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ВТТЗ.ДатаОкончания) КАК ДатаОкончания,
		|	МАКСИМУМ(ВТТЗ.Период) КАК Период,
		|	МАКСИМУМ(ВТТЗ.ЭтоРасчетПриУвольнении) КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТаблицаДанных
		|ИЗ
		|	ВТТЗ КАК ВТТЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТТЗ.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТЗ";
	Запрос.Выполнить();
	
	// Формируем виды отпусков для расчета.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПоложенныеВидыЕжегодныхОтпусков",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТаблицаДанных", "Сотрудник"),,
		"ВТПраваНаОтпуска");

	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(НачальныеОстаткиОтпусков.РабочийГодНачало) КАК ДатаНачалаРасчета,
		|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТНачальныеОстатки
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО НачальныеОстаткиОтпусков.Сотрудник = ТаблицаДанных.Сотрудник
		|			И НачальныеОстаткиОтпусков.ДатаОстатка <= ТаблицаДанных.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МИНИМУМ(ПраваНаОтпуска.ПериодЗаписи) КАК ПериодПервогоПрава
		|ПОМЕСТИТЬ ВТПервыеДействующиеПрава
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО ПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
		|			И ПраваНаОтпуска.Период <= ТаблицаДанных.ДатаОкончания
		|ГДЕ
		|	ПраваНаОтпуска.Используется
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ТаблицаДанных.ДатаОкончания) КАК ТаблицаДанныхДатаОкончания,
		|	МАКСИМУМ(ПраваНаОтпуска.ПериодЗаписи) КАК ПериодПоследнегоПрава
		|ПОМЕСТИТЬ ВТУказателиПоследнихДействующихПрав
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО ПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
		|			И ПраваНаОтпуска.Период <= ТаблицаДанных.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.Используется КАК Используется,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.Используется
		|			ТОГДА УказателиПоследних.ТаблицаДанныхДатаОкончания
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПраваНаОтпуска.ПериодЗаписи, ДЕНЬ)
		|	КОНЕЦ КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТДействующиеПраваДатаОкончанияРасчета
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследнихДействующихПрав КАК УказателиПоследних
		|		ПО ПраваНаОтпуска.Сотрудник = УказателиПоследних.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = УказателиПоследних.ВидЕжегодногоОтпуска
		|			И ПраваНаОтпуска.ПериодЗаписи = УказателиПоследних.ПериодПоследнегоПрава
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.Используется КАК Используется,
		|	ЕСТЬNULL(ПервыеДействующиеПрава.ПериодПервогоПрава, ПраваНаОтпуска.ДатаОкончанияРасчета) КАК ДатаНачалаРасчета,
		|	ПраваНаОтпуска.ДатаОкончанияРасчета КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТДействующиеПраваНаОтпуска
		|ИЗ
		|	ВТДействующиеПраваДатаОкончанияРасчета КАК ПраваНаОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеДействующиеПрава КАК ПервыеДействующиеПрава
		|		ПО ПраваНаОтпуска.Сотрудник = ПервыеДействующиеПрава.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ПервыеДействующиеПрава.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПраваНаОтпуска.Сотрудник, НачальныеОстатки.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ПраваНаОтпуска.ВидЕжегодногоОтпуска, НачальныеОстатки.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ПраваНаОтпуска.Используется, ИСТИНА) КАК Используется,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ДатаНачалаРасчета ЕСТЬ NULL
		|			ТОГДА НачальныеОстатки.ДатаНачалаРасчета
		|		КОГДА НачальныеОстатки.ДатаНачалаРасчета ЕСТЬ NULL
		|			ТОГДА ПраваНаОтпуска.ДатаНачалаРасчета
		|		КОГДА ПраваНаОтпуска.ДатаНачалаРасчета > НачальныеОстатки.ДатаНачалаРасчета
		|			ТОГДА НачальныеОстатки.ДатаНачалаРасчета
		|		ИНАЧЕ ПраваНаОтпуска.ДатаНачалаРасчета
		|	КОНЕЦ КАК ДатаНачалаРасчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПраваНаОтпуска.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(НачальныеОстатки.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ЕСТЬNULL(ПраваНаОтпуска.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|		ИНАЧЕ ЕСТЬNULL(НачальныеОстатки.ДатаОкончанияРасчета, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК ДатаОкончанияРасчета
		|ПОМЕСТИТЬ ВТСотрудникиСДаннымиДляРасчета
		|ИЗ
		|	ВТДействующиеПраваНаОтпуска КАК ПраваНаОтпуска
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК НачальныеОстатки
		|		ПО ПраваНаОтпуска.Сотрудник = НачальныеОстатки.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = НачальныеОстатки.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСДаннымиДляРасчета.Сотрудник КАК Сотрудник,
		|	СотрудникиСДаннымиДляРасчета.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	СотрудникиСДаннымиДляРасчета.Используется КАК Используется,
		|	СотрудникиСДаннымиДляРасчета.ДатаНачалаРасчета КАК ДатаНачалаРасчета,
		|	СотрудникиСДаннымиДляРасчета.ДатаОкончанияРасчета КАК ДатаОкончанияРасчета,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТСотрудникиПолнаяТаблицаДляРасчета
		|ИЗ
		|	ВТСотрудникиСДаннымиДляРасчета КАК СотрудникиСДаннымиДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
		|		ПО СотрудникиСДаннымиДляРасчета.Сотрудник = ТаблицаДанных.Сотрудник";
		
	Если РассчитатьПравоНаОтпускаВсемСотрудникам Тогда
		Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ТаблицаДанных.Сотрудник КАК Сотрудник,
			|	ТаблицаДанных.ДатаОкончания КАК ДатаОстатков,
			|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеСотрудники
			|ИЗ
			|	ВТТаблицаДанных КАК ТаблицаДанных
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ДатаОстатков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СотрудникиПолнаяТаблица.Сотрудник КАК Сотрудник,
			|	СотрудникиПолнаяТаблица.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	СотрудникиПолнаяТаблица.ДатаНачалаРасчета КАК ДатаНачала,
			|	СотрудникиПолнаяТаблица.ДатаОкончанияРасчета КАК ДатаОкончания,
			|	СотрудникиПолнаяТаблица.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеВидыОтпусковСотрудников
			|ИЗ
			|	ВТСотрудникиПолнаяТаблицаДляРасчета КАК СотрудникиПолнаяТаблица";
			
	Иначе
		Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
			|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	МАКСИМУМ(ЗаработанныеПраваНаОтпуска.Период) КАК Период
			|ПОМЕСТИТЬ ВТПоследниеРассчитанныеЗаписи
			|ИЗ
			|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПолнаяТаблицаДляРасчета КАК ПроверяемыеСотрудники
			|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ПроверяемыеСотрудники.Сотрудник
			|			И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = ПроверяемыеСотрудники.ВидЕжегодногоОтпуска
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаработанныеПраваНаОтпуска.Сотрудник,
			|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПроверяемыеСотрудники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ПроверяемыеСотрудники.Используется КАК Используется,
			|	ВЫБОР
			|		КОГДА ЗаработанныеПраваНаОтпуска.Период ЕСТЬ NULL
			|			ТОГДА ПроверяемыеСотрудники.ДатаНачалаРасчета
			|		КОГДА ЗаработанныеПраваНаОтпуска.Период > ПроверяемыеСотрудники.ДатаНачалаРасчета
			|			ТОГДА ЗаработанныеПраваНаОтпуска.Период
			|		ИНАЧЕ ПроверяемыеСотрудники.ДатаНачалаРасчета
			|	КОНЕЦ КАК ДатаНачала,
			|	ПроверяемыеСотрудники.ДатаОкончанияРасчета КАК ДатаОкончания,
			|	ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТСотрудникиРегистр
			|ИЗ
			|	ВТСотрудникиПолнаяТаблицаДляРасчета КАК ПроверяемыеСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеРассчитанныеЗаписи КАК ЗаработанныеПраваНаОтпуска
			|		ПО ПроверяемыеСотрудники.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
			|			И ПроверяемыеСотрудники.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеСотрудники.Сотрудник КАК Сотрудник,
			|	ПроверяемыеСотрудники.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ПроверяемыеСотрудники.ДатаНачала КАК ДатаНачала,
			|	ПроверяемыеСотрудники.ДатаОкончания КАК ДатаОкончания,
			|	ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТРегистрНеРассчитанныеСотрудники
			|ИЗ
			|	ВТСотрудникиРегистр КАК ПроверяемыеСотрудники
			|ГДЕ
			|	(ПроверяемыеСотрудники.ДатаНачала < ПроверяемыеСотрудники.ДатаОкончания
			|			ИЛИ НЕ ПроверяемыеСотрудники.Используется
			|				И ПроверяемыеСотрудники.ДатаНачала > ПроверяемыеСотрудники.ДатаОкончания
			|			ИЛИ ПроверяемыеСотрудники.ЭтоРасчетПриУвольнении)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РегистрНеРассчитанныеСотрудники.Сотрудник КАК Сотрудник,
			|	ТаблицаДанных.ДатаОкончания КАК ДатаОстатков,
			|	РегистрНеРассчитанныеСотрудники.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеСотрудники
			|ИЗ
			|	ВТРегистрНеРассчитанныеСотрудники КАК РегистрНеРассчитанныеСотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
			|		ПО РегистрНеРассчитанныеСотрудники.Сотрудник = ТаблицаДанных.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ДатаОстатков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СотрудникиРегистр.Сотрудник КАК Сотрудник,
			|	СотрудникиРегистр.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	СотрудникиРегистр.ДатаНачала КАК ДатаНачала,
			|	СотрудникиРегистр.ДатаОкончания КАК ДатаОкончания,
			|	СотрудникиРегистр.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении
			|ПОМЕСТИТЬ ВТНеРассчитанныеВидыОтпусковСотрудников
			|ИЗ
			|	ВТРегистрНеРассчитанныеСотрудники КАК СотрудникиРегистр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК НеРассчитанныеСотрудники
			|		ПО СотрудникиРегистр.Сотрудник = НеРассчитанныеСотрудники.Сотрудник";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТТаблицаДанных");
	ИменаВТ.Добавить("ВТПраваНаОтпуска");
	ИменаВТ.Добавить("ВТНачальныеОстатки");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
КонецПроцедуры

// Функция собирает из ИБ все данные, необходимые для расчета остатков, и создает следующие ВТ
// 	- ВТСписокСотрудников
// 	- ВТИсходныеДанные
// 	- ВТВидыОтпусков
// 	- ВТНачальныеОстатки
// 	- ВТОтклонения
// 	- ВТПраваНаОтпуска
// 	- ВТФактическиеОтпуска.
//
Процедура СоздатьВТИсходныхДанныхДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц)
	
	// Для расчета права на отпуск необходимо собрать следующие данные:
	//	0. В МенеджерВременныхТаблиц должна быть таблица ВТНеРассчитанныеСотрудники,
	//     в которой содержатся все сотрудники, для которых нужно считать право на отпуск;
	//	1. Даты приема и увольнения сотрудников;
	//	2. Начальные остатки;
	//	3. Отсутствия, увеличивающие рабочий год;
	//	4. Изменения права на отпуск.
	
	// Для расчета остатков отпусков необходимо собрать следующие данные:
	//	1. Посчитанное право на отпуска;
	//	2. Начальные остатки;
	//	3. Фактические отпуска.
	

	// заполним таблицу "прерывающих" периодов
	ОтборПоПериодам = Перечисления.СостоянияСотрудника.СостоянияПрерывающиеПравоНаОтпуск();
	ПериодыПрерывающиеПравоНаОтпуск = СостоянияСотрудников.СостоянияСотрудников(ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"), ОтборПоПериодам);
	
	// Для вывода справки по отпуску необходимо собирать сведения для расчета права на отпуск даже если в ИБ хранятся
	// актуальные сведения о праве.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ПериодыПрерывающиеПравоНаОтпуск", ПериодыПрерывающиеПравоНаОтпуск);
	
	// Формируем временную таблицу по переданным в функцию данным.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДанных.ДатаНачала КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК Справочник.ВидыОтпусков) КАК ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки,
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СостоянияСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(СостоянияСотрудников.Начало, ДЕНЬ) КАК ДатаНачалаОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СостоянияСотрудников.Окончание
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СостоянияСотрудников.Окончание, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя)
	|				ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству)
	|				ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый)
	|				ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	СостоянияСотрудников.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТПериодыПрерывающиеПравоНаОтпуск
	|ИЗ
	|	&ПериодыПрерывающиеПравоНаОтпуск КАК СостоянияСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	Сотрудники.ДатаОстатков КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОписаниеФильтраСоздатьВТИмяРегистра
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК Сотрудники";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник,ДатаОстатков");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
		"ДатаПриема,ДатаУвольнения,ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,Пол,КраткосрочныйТрудовойДоговор");
		
	ОписательВременныхТаблиц = УчетРабочегоВремениРасширенный.ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник", "ДатаНачалаПериода", "ДатаОкончанияПериода");
	УчетРабочегоВремениРасширенный.СоздатьВТКалендарноеВремяСотрудников(ОписательВременныхТаблиц, Ложь);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОписаниеФильтраСоздатьВТИмяРегистра","Сотрудник");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПоложенныеВидыЕжегодныхОтпусков",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПоложенныеВидыЕжегодныхОтпусков");
		
	СоздатьВТСотрудникиТребовавшиеПереквалификациюДней(МенеджерВременныхТаблиц, "ВТОписаниеФильтраСоздатьВТИмяРегистра", "ВТКадровыеДанныеСотрудников");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатковПоВидамОтпусков
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|		ПО ТаблицаДанных.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТДатаНачальныхОстатковПоВидамОтпусков.ДатаНачальногоОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатков
	|ИЗ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков КАК ВТДатаНачальныхОстатковПоВидамОтпусков
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.Период КАК ДатаВхожденияВРабочийГод,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.Компенсация
	|			ТОГДА ФактическиеОтпуска.ДатаОкончания
	|		ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ФактическиеОтпуска.Регистратор) КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодСИзДокумента,
	|	КОНЕЦПЕРИОДА(ФактическиеОтпуска.РабочийПериодПо, ДЕНЬ) КАК РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.Основание КАК ОснованиеИзДокумента
	|ПОМЕСТИТЬ ВТВсеФактическиеОтпуска
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО ФактическиеОтпуска.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И ФактическиеОтпуска.Период < ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО ФактическиеОтпуска.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО ТаблицаДанных.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаДанных.ДатаДокумента >= ФактическиеОтпуска.Период
	|				КОГДА НЕ ТаблицаДанных.ЭтоРасчетПриУвольнении
	|						И НЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.ДатаОстатков >= ФактическиеОтпуска.Период
	|			КОНЕЦ)
	|			И (НЕ(ТаблицаДанных.ЭтоРасчетПриУвольнении
	|					И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Увольнение))
	|			И ТаблицаДанных.ТекущийРегистратор <> ФактическиеОтпуска.Регистратор
	|			И (ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска)
	|			И (ТаблицаДанных.ДатаНачалаПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаНачалаПериода = ВЫБОР
	|						КОГДА ФактическиеОтпуска.Компенсация
	|							ТОГДА ФактическиеОтпуска.ДатаОкончания
	|						ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|					КОНЕЦ)
	|			И (ТаблицаДанных.ДатаОкончанияПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаОкончанияПериода = ФактическиеОтпуска.ДатаОкончания)
	|ГДЕ
	|	ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.КоличествоДнейОтпуска > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнируемаяЗапись,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.КоличествоДнейОтпуска < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторноЗапись
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|ИЗ
	|	ВТВсеФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = ФактическиеОтпускаСторно.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = ФактическиеОтпускаСторно.ДатаОкончанияОтпуска
	|			И (ФактическиеОтпуска.КоличествоДнейОтпуска = -ФактическиеОтпускаСторно.КоличествоДнейОтпуска)
	|			И ФактическиеОтпуска.Документ <> ФактическиеОтпускаСторно.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.Используется
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка < ПоложенныеВидыЕжегодныхОтпусков.Период
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПравоДоВводаОстатка,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПоложенныеВидыЕжегодныхОтпусков.Регистратор) КАК ПредставлениеДокумента,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
	|	НачальныеОстаткиПоВидам.ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТВсеПраваНаОтпуска
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СотрудникиБезПраваНаОтпуск.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК НачальныеОстаткиПоВидам
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = НачальныеОстаткиПоВидам.Сотрудник
	|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = НачальныеОстаткиПоВидам.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО (СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ПраваНаОтпуска.Период) КАК Период
	|ПОМЕСТИТЬ ВТУказателиСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПраваНаОтпуска.ДатаНачальногоОстатка > ПраваНаОтпуска.Период
	|			ТОГДА ПраваНаОтпуска.ДатаНачальногоОстатка
	|		ИНАЧЕ ПраваНаОтпуска.Период
	|	КОНЕЦ КАК Период,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка,
	|	ПраваНаОтпуска.Используется,
	|	ПраваНаОтпуска.Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется
	|ПОМЕСТИТЬ ВТСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиСрезПоследнихПравДоВводаОстатка КАК ВТУказателиСрезПоследнихПравДоВводаОстатка
	|		ПО ПраваНаОтпуска.Сотрудник = ВТУказателиСрезПоследнихПравДоВводаОстатка.Сотрудник
	|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ВТУказателиСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска
	|			И ПраваНаОтпуска.Период = ВТУказателиСрезПоследнихПравДоВводаОстатка.Период
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиСПереквалификацией.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиСПереквалификацией
	|ИЗ
	|	ВТСотрудникиТребовавшиеПереквалификациюДней КАК СотрудникиСПереквалификацией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(СотрудникиБезПраваНаОтпуск.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
	|	СотрудникиБезПраваНаОтпуск.ДатаОстатков,
	|	СотрудникиБезПраваНаОтпуск.ЭтоРасчетПриУвольнении,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки,
	|	ВЫБОР
	|		КОГДА ВТСотрудникиСПереквалификацией.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТребуетПереквалификацииДней
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСПереквалификацией КАК ВТСотрудникиСПереквалификацией
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ВТСотрудникиСПереквалификацией.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
	|			ТОГДА ВЫБОР
	|					КОГДА ТекущиеКадровыеДанныеСотрудников.КраткосрочныйТрудовойДоговор
	|						ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|					ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|					ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|				ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДнейВПериоде,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема ЕСТЬ NULL 
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ДатаНачальныхОстатков.ДатаНачальногоОстатка, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|	КОНЕЦ КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУволен,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.Пол КАК Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ТаблицаДанных.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарноеВремяСотрудников КАК КалендарноеВремяСотрудников
	|		ПО ТаблицаДанных.Сотрудник = КалендарноеВремяСотрудников.Сотрудник
	|			И ТаблицаДанных.ДатаНачалаПериода = КалендарноеВремяСотрудников.ДатаНачала
	|			И (ТаблицаДанных.ДатаОкончанияПериода = НАЧАЛОПЕРИОДА(КалендарноеВремяСотрудников.ДатаОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО ТаблицаДанных.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.НаименованиеПолное = """"
	|			ТОГДА ВидыЕжегодныхОтпусков.Наименование
	|		ИНАЧЕ ВидыЕжегодныхОтпусков.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнойОтпуск,
	|	ВидыЕжегодныхОтпусков.НакопительныйОтпуск КАК НакопительныйОтпуск
	|ПОМЕСТИТЬ ВТВидыОтпусков
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления
	|	И ВидыЕжегодныхОтпусков.ОтпускЯвляетсяЕжегодным
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = &ОсновнойОтпуск
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстаткиОтпусков.КоличествоДней,
	|	НачальныеОстаткиОтпусков.РабочийГодНачало,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.РабочийГодНачало <= НачальныеОстаткиОтпусков.РабочийГодОкончание
	|			ТОГДА НачальныеОстаткиОтпусков.РабочийГодОкончание
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, МЕСЯЦ, 12), ДЕНЬ, -1)
	|	КОНЕЦ КАК РабочийГодОкончание,
	|	НачальныеОстаткиОтпусков.ДатаОстатка,
	|	НачальныеОстаткиОтпусков.Регистратор
	|ПОМЕСТИТЬ ВТНачальныеОстатки
	|ИЗ
	|	ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО НачальныеОстаткиОтпусков.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И НачальныеОстаткиОтпусков.ДатаОстатка = ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|				И (НачальныеОстаткиОтпусков.РабочийГодНачало <> ДАТАВРЕМЯ(1, 1, 1))
	|				И (НачальныеОстаткиОтпусков.РабочийГодОкончание <> ДАТАВРЕМЯ(1, 1, 1))
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейОтсутствия,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейПродления,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	ПериодыПрерывающиеПравоНаОтпуск.Состояние
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	ВТПериодыПрерывающиеПравоНаОтпуск КАК ПериодыПрерывающиеПравоНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеРассчитанныеСотрудники КАК СотрудникиБезПраваНаОтпуск
	|		ПО ПериодыПрерывающиеПравоНаОтпуск.Сотрудник = СотрудникиБезПраваНаОтпуск.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ПраваНаОтпуска.Период, ДЕНЬ) КАК ДатаДействия,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ПраваНаОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.Используется КАК Предоставляется,
	|	ПраваНаОтпуска.Регистратор КАК Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется КАК ПересчетНеТребуется
	|ПОМЕСТИТЬ ВТПраваНаОтпуска
	|ИЗ
	|	ВТВсеПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	НЕ ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСрезПоследнихПравДоВводаОстатка.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТСрезПоследнихПравДоВводаОстатка.Период, ДЕНЬ),
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ВТСрезПоследнихПравДоВводаОстатка.КоличествоДнейОтпускаВГод,
	|	ВТСрезПоследнихПравДоВводаОстатка.Используется,
	|	ВТСрезПоследнихПравДоВводаОстатка.Регистратор,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПредставлениеДокумента,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВторичнаяЗапись,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПересчетНеТребуется
	|ИЗ
	|	ВТСрезПоследнихПравДоВводаОстатка КАК ВТСрезПоследнихПравДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереквалификацияДней.Сотрудник,
	|	ПереквалификацияДней.ДатаНачала,
	|	ПереквалификацияДней.ДатаОкончания,
	|	ПереквалификацияДней.КраткосрочныйДоговор,
	|	ПереквалификацияДней.СезонныйДоговор
	|ПОМЕСТИТЬ ВТПереквалификацияДней
	|ИЗ
	|	ВТСотрудникиТребовавшиеПереквалификациюДней КАК ПереквалификацияДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	ВТФактическиеОтпускаСоСторноПризнаками КАК ФактическиеОтпуска
	|ГДЕ
	|	НЕ ФактическиеОтпуска.СторнируемаяЗапись
	|	И НЕ ФактическиеОтпуска.СторноЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатаНачальныхОстатковПоВидамОтпусков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатаНачальныхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсеФактическиеОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсеПраваНаОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУказателиСрезПоследнихПравДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСрезПоследнихПравДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиСПереквалификацией";
	
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Запрос.Выполнить();
	
КонецПроцедуры

// Выгружает ВТ из СоздатьВТИсходныхДанныхДляРасчетаОстатков() в структуру с таблицами значений.
//
Функция ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц)
	
	СоздатьВТИсходныхДанныхДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.СотрудникНаименование,
	|	Сотрудники.ДатаОстатков,
	|	Сотрудники.ЭтоРасчетПриУвольнении,
	|	Сотрудники.ДатаПриема,
	|	Сотрудники.ДатаУвольнения,
	|	Сотрудники.ВведеныНачальныеОстатки,
	|	Сотрудники.ТребуетПереквалификацииДней
	|ИЗ
	|	ВТСписокСотрудников КАК Сотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.СотрудникНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки,
	|	ТаблицаДанных.Сотрудник,
	|	ТаблицаДанных.СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода,
	|	ТаблицаДанных.КоличествоДнейВПериоде,
	|	ТаблицаДанных.ДатаПриема,
	|	ТаблицаДанных.ДатаУвольнения,
	|	ТаблицаДанных.СотрудникУволен,
	|	ТаблицаДанных.ВведеныНачальныеОстатки,
	|	ТаблицаДанных.ТекущаяОрганизация,
	|	ТаблицаДанных.ТекущееПодразделение,
	|	ТаблицаДанных.ТекущаяДолжность,
	|	ТаблицаДанных.Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска
	|ИЗ
	|	ВТИсходныеДанные КАК ТаблицаДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.СотрудникНаименование,
	|	ТаблицаДанных.ДатаОстатков,
	|	ТаблицаДанных.ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтпусков.ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыОтпусков.ВидЕжегодногоОтпускаНаименование,
	|	ВидыОтпусков.КоличествоДнейВГод,
	|	ВидыОтпусков.ОсновнойОтпуск,
	|	ВидыОтпусков.НакопительныйОтпуск
	|ИЗ
	|	ВТВидыОтпусков КАК ВидыОтпусков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтпусков.ПриоритетВидаЕжегодногоОтпуска,
	|	ВидыОтпусков.ВидЕжегодногоОтпускаНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныеОстатки.Сотрудник,
	|	НачальныеОстатки.ВидЕжегодногоОтпуска,
	|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование,
	|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстатки.КоличествоДней,
	|	НачальныеОстатки.РабочийГодНачало,
	|	НачальныеОстатки.РабочийГодОкончание,
	|	НачальныеОстатки.ДатаОстатка,
	|	НачальныеОстатки.Регистратор
	|ИЗ
	|	ВТНачальныеОстатки КАК НачальныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачальныеОстатки.Сотрудник,
	|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование,
	|	НачальныеОстатки.РабочийГодНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отклонения.Сотрудник,
	|	Отклонения.КоличествоДнейОтсутствия,
	|	Отклонения.КоличествоДнейПродления,
	|	Отклонения.ДатаНачалаОтсутствия,
	|	Отклонения.ДатаОкончанияОтсутствия,
	|	Отклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	Отклонения.Состояние
	|ИЗ
	|	ВТОтклонения КАК Отклонения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отклонения.Сотрудник,
	|	Отклонения.ДатаНачалаОтсутствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ДатаДействия,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.Предоставляется,
	|	ПраваНаОтпуска.Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется
	|ИЗ
	|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.ДатаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереквалификацияДней.Сотрудник КАК Сотрудник,
	|	ПереквалификацияДней.ДатаНачала КАК ДатаНачала,
	|	ПереквалификацияДней.ДатаОкончания,
	|	ПереквалификацияДней.КраткосрочныйДоговор,
	|	ПереквалификацияДней.СезонныйДоговор
	|ИЗ
	|	ВТПереквалификацияДней КАК ПереквалификацияДней
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачала УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ПриоритетВидаЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоПакетов = МассивРезультатов.Количество();
	
	СотрудникиБезПраваНаОтпуск	= МассивРезультатов[КоличествоПакетов-8].Выгрузить();
	
	Данные						= МассивРезультатов[КоличествоПакетов-7].Выгрузить();
	
	ВидыОтпусков				= МассивРезультатов[КоличествоПакетов-6].Выгрузить();
	
	НачальныеОстатки			= МассивРезультатов[КоличествоПакетов-5].Выгрузить();
	НачальныеОстатки.Индексы.Добавить("Сотрудник");
	НачальныеОстатки.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	Отклонения					= МассивРезультатов[КоличествоПакетов-4].Выгрузить();
	Отклонения.Индексы.Добавить("Сотрудник");
	
	ПраваНаЕжегодныйОтпуск		= МассивРезультатов[КоличествоПакетов-3].Выгрузить();
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник");
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	ПереквалификацияДней = МассивРезультатов[КоличествоПакетов-2].Выгрузить();
	ПереквалификацияДней.Индексы.Добавить("Сотрудник");
	
	ФактическиеОтпуска			= МассивРезультатов[КоличествоПакетов-1].Выгрузить();
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодС",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодПо",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейПрошлыхЛет",	Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейАвансом",		Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ОсталосьСписать",				Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ФактическиеОтпуска.Индексы.Добавить("Сотрудник");
	ФактическиеОтпуска.Индексы.Добавить("ДатаОстатков");
	ФактическиеОтпуска.Индексы.Добавить("ИндексСтроки");
	ФактическиеОтпуска.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СотрудникиБезПраваНаОтпуск", СотрудникиБезПраваНаОтпуск);
	ВозвращаемаяСтруктура.Вставить("Данные", Данные);
	ВозвращаемаяСтруктура.Вставить("ВидыОтпусков", ВидыОтпусков);
	ВозвращаемаяСтруктура.Вставить("НачальныеОстатки", НачальныеОстатки);
	ВозвращаемаяСтруктура.Вставить("Отклонения", Отклонения);
	ВозвращаемаяСтруктура.Вставить("Права", ПраваНаЕжегодныйОтпуск);
	ВозвращаемаяСтруктура.Вставить("ПереквалификацияДней", ПереквалификацияДней);
	ВозвращаемаяСтруктура.Вставить("ФактическиеОтпуска", ФактическиеОтпуска);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция считает заработанное право на ежегодные отпуска.
//
Функция ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ДатаНачала и ДатаОкончания - границы рабочего года.
	// Период - дата рабочего месяца.
	// КоличествоДней - количество дней отпуска, которые сотрудник заработал с даты приема на работу или даты ввода
	//                  остатков на дату рабочего месяца.
	ИтоговаяТаблицаЗаработанныхПрав = ПустаяТаблицаЗаработанныхДней();
	ДополнениеЗаработанныхПрав = ИтоговаяТаблицаЗаработанныхПрав.СкопироватьКолонки();
	
	// Заполняем результирующую таблицу уже рассчитанными данными из регистра.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЗаработанныеПраваНаОтпуска.ДатаНачала КАК ДатаНачала,
	|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
	|ИЗ
	|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаДанных КАК ТаблицаДанных
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеРассчитанныеВидыОтпусковСотрудников КАК НеРассчитанныеСотрудники
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = НеРассчитанныеСотрудники.Сотрудник
	|			И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = НеРассчитанныеСотрудники.ВидЕжегодногоОтпуска
	|ГДЕ
	|	НеРассчитанныеСотрудники.Сотрудник ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачала,
	|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ИтоговаяТаблицаЗаработанныхПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаНачальныхОстатков		= ИсходныеДанные.НачальныеОстатки;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	ТаблицаПереквалификацииДней		= ИсходныеДанные.ПереквалификацияДней;
	
	НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
	
	Для Каждого СотрудникБезПрава Из ИсходныеДанные.СотрудникиБезПраваНаОтпуск Цикл
		
		ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
		НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникБезПрава.Сотрудник);
		
		ЗаписатьНабор = Ложь;
		
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпуска Цикл
			
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			ПраваОтпускаВРегистре = ИтоговаяТаблицаЗаработанныхПрав.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			Если ПраваОтпускаВРегистре.Количество() = 0 Тогда
				
				СтруктураПараметров = ОписаниеПараметровДляРассчитатьПраваНаОтпуск();
				СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска	= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.НачальныеОстаткиПоВидуОтпуска = ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
				СтруктураПараметров.ТаблицаОтклонений = ТаблицаОтклонений;
				СтруктураПараметров.ТаблицаПереквалификацииДней = ТаблицаПереквалификацииДней;
				
				ПерерывыПредоставленияРаздвигаютГод = Не (СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность")
					Или СтрокаВидаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный"));
					
				РабочиеГода = РассчитатьПравоНаОтпуск(СотрудникБезПрава, СтрокаВидаОтпуска, СтруктураПараметров, ПерерывыПредоставленияРаздвигаютГод);
				
				// Дополним набор рассчитанными правами.
				ДополнитьНаборРассчитаннымиПравами(ОтборПоСотрудникуИВидуОтпуска, НаборЗаписей, РабочиеГода);
				
				// Дополняем результирующую таблицу.
				Для Каждого СтрокаНабора Из НаборЗаписей Цикл
					Если СтрокаНабора.ВидЕжегодногоОтпуска <> СтрокаВидаОтпуска.ВидЕжегодногоОтпуска Тогда 
						Продолжить;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ДополнениеЗаработанныхПрав.Добавить(), СтрокаНабора);
				КонецЦикла;
				
				ЗаписатьНабор = Истина;
				
			Иначе
				// Дополним набор существующими правами.
				ДополнитьНаборПравамиИзТаблицы(НаборЗаписей, ПраваОтпускаВРегистре);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаписатьНабор Тогда 
			ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаНабораЗаписей.Свернуть("ВидЕжегодногоОтпуска, ДатаНачала, ДатаОкончания, КоличествоДней, КоличествоДнейЗаПериод, Период, Сотрудник");
			НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	Если ДополнениеЗаработанныхПрав.Количество() > 0 Тогда 
		ИтоговаяТаблицаЗаработанныхПрав.Индексы.Удалить(0);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнениеЗаработанныхПрав, ИтоговаяТаблицаЗаработанныхПрав);
		ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник,ВидЕжегодногоОтпуска");
	КонецЕсли;
	ИтоговаяТаблицаЗаработанныхПрав.Индексы.Добавить("Сотрудник");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТОтклонения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанныеОтклонения.ДатаНачалаОтсутствия,
	|	ИсходныеДанныеОтклонения.ДатаОкончанияОтсутствия,
	|	ИсходныеДанныеОтклонения.КоличествоДнейОтсутствия,
	|	ИсходныеДанныеОтклонения.КоличествоДнейПродления,
	|	ИсходныеДанныеОтклонения.Состояние,
	|	ИсходныеДанныеОтклонения.Сотрудник,
	|	ИсходныеДанныеОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты
	|ПОМЕСТИТЬ ВТОтклонения
	|ИЗ
	|	&ИсходныеДанныеОтклонения КАК ИсходныеДанныеОтклонения";
	
	Запрос.УстановитьПараметр("ИсходныеДанныеОтклонения", ИсходныеДанные.Отклонения);
	Запрос.Выполнить();
	
	Возврат ИтоговаяТаблицаЗаработанныхПрав;
	
КонецФункции

Функция ОписаниеПараметровДляРассчитатьПраваНаОтпуск()

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ПраваНаЕжегодныйОтпускПоВидуОтпуска");
	СтруктураПараметров.Вставить("НачальныеОстаткиПоВидуОтпуска");
	СтруктураПараметров.Вставить("ТаблицаОтклонений");
	СтруктураПараметров.Вставить("ТаблицаПереквалификацииДней");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция РассчитатьПравоНаОтпуск(СотрудникБезПрава, СтрокаВидаОтпуска, СтруктураПараметров, ПерерывыПредоставленияРаздвигаютГод = Истина)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
	ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
	
	ТаблицаПереквалификацииДней = СтруктураПараметров.ТаблицаПереквалификацииДней;
	ПраваНаЕжегодныйОтпускПоВидуОтпуска	= СтруктураПараметров.ПраваНаЕжегодныйОтпускПоВидуОтпуска;
	НачальныеОстаткиПоВидуОтпуска = СтруктураПараметров.НачальныеОстаткиПоВидуОтпуска;
	
	ТаблицаОтклонений = СтруктураПараметров.ТаблицаОтклонений;
	ОтклоненияПоСотруднику = ТаблицаОтклонений.НайтиСтроки(ОтборПоСотруднику);
	ТаблицаОтклоненийПоВидуОтпуска = ТаблицаОтклонений.СкопироватьКолонки();
	ТаблицаОтклоненийПоВидуОтпуска.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	
	РабочиеГода = Новый ТаблицаЗначений;
	РабочиеГода.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
	РабочиеГода.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	РабочиеГода.Колонки.Добавить("РабочиеМесяцы",	Новый ОписаниеТипов("ТаблицаЗначений"));
	
	УдалитьДублиПрав(ПраваНаЕжегодныйОтпускПоВидуОтпуска);
	
	ЕстьОстаткиПоВидуОтпуска = (НачальныеОстаткиПоВидуОтпуска.Количество() > 0);
	ДатаОстаткаПоВидуОтпуска = ?(ЕстьОстаткиПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска[0].ДатаОстатка, '00010101');
	
	// Необходимо определить периоды, в которые сотруднику положен отпуск.
	// По умолчанию один период с даты приема на работу или даты начальных остатков остатков по дату увольнения или дату
	// получения остатка.
	// Периоды предоставления вида отпуска объединяем в один большой, на перерывы в предоставлениях делаем строки отклонений.
	ПериодыПредоставленияОтпусков = Новый ТаблицаЗначений;
	ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаНачала",	Новый ОписаниеТипов("Дата"));
	ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	ПериодПредоставленияИтоговый = Новый СтандартныйПериод;
	
	// Добавим в периоды предоставления информацию по остаткам
	Если ЕстьОстаткиПоВидуОтпуска Тогда
		Для каждого НачальныйОстаток Из НачальныеОстаткиПоВидуОтпуска Цикл
			СтрокаПериода = ПериодыПредоставленияОтпусков.Добавить();
			СтрокаПериода.ДатаНачала	= НачальныйОстаток.РабочийГодНачало;
			СтрокаПериода.ДатаОкончания	= Мин(НачальныйОстаток.РабочийГодОкончание, КонецДня(НачальныйОстаток.ДатаОстатка));
			ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
		КонецЦикла; 
	КонецЕсли;
	
	// Определяем "честные" периоды.
	ДобавитьНовыйПериод = Истина;
	КоличествоПрав = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество();
	Для Номер = 1 По КоличествоПрав Цикл
		ПравоНаОтпуск = ПраваНаЕжегодныйОтпускПоВидуОтпуска[КоличествоПрав - Номер];
		Если ДобавитьНовыйПериод И ПравоНаОтпуск.Предоставляется Тогда
			СтрокаПериода = ПериодыПредоставленияОтпусков.Добавить();
			СтрокаПериода.ДатаНачала	= ПравоНаОтпуск.ДатаДействия;
			ДобавитьНовыйПериод	= Ложь;
		ИначеЕсли Не ДобавитьНовыйПериод И НЕ ПравоНаОтпуск.Предоставляется Тогда
			СтрокаПериода.ДатаОкончания	= ПравоНаОтпуск.ДатаДействия - 1;
			ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
			ДобавитьНовыйПериод	= Истина;
		КонецЕсли;
	КонецЦикла;
	// Если сотрудник уволен, то дата окончания последнего рабочего года должна быть равна дате увольнения.
	Если Не ДобавитьНовыйПериод И Не ЗначениеЗаполнено(СтрокаПериода.ДатаОкончания) Тогда
		ОбрезатьДатуОкончанияРабочегоГода(СтрокаПериода.ДатаОкончания, СотрудникБезПрава);
	КонецЕсли;
	
	Если ПериодыПредоставленияОтпусков.Количество() = 0 Тогда
		Возврат РабочиеГода;
	КонецЕсли;
	
	Если ПерерывыПредоставленияРаздвигаютГод Тогда
		// Объединяем их в один, в перерывах регистрируем "отклонения".
		ПрошлыйПериод = Неопределено;
		Для каждого ПериодПредоставленияОтпуска Из ПериодыПредоставленияОтпусков Цикл
			Если ПериодыПредоставленияОтпусков.Индекс(ПериодПредоставленияОтпуска) <> 0 Тогда
				Если КонецДня(ПрошлыйПериод.ДатаОкончания)+1 <> НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) Тогда
					ДнейРазрыва = (НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) - НачалоДня(ПрошлыйПериод.ДатаОкончания)) / 86400;
					НовоеОтклонение = ТаблицаОтклоненийПоВидуОтпуска.Добавить();
					НовоеОтклонение.Сотрудник = СотрудникБезПрава.Сотрудник;
					НовоеОтклонение.ВидОтпуска = СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					НовоеОтклонение.КоличествоДнейОтсутствия = ДнейРазрыва;
					НовоеОтклонение.КоличествоДнейПродления = ДнейРазрыва;
					НовоеОтклонение.ДатаНачалаОтсутствия = КонецДня(ПрошлыйПериод.ДатаОкончания)+1;
					НовоеОтклонение.ДатаОкончанияОтсутствия = НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала)-1;
					НовоеОтклонение.ЯвляетсяОтпускомБезСохраненияЗарплаты = Ложь;
					НовоеОтклонение.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		    ПрошлыйПериод = ПериодПредоставленияОтпуска;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем непрерывный интервал прав.
	НепрерывноеПравоНаЕжегодныйОтпуск = Новый Массив;
	Для каждого ПравоНаОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
		ПерваяЗапись = (ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск) + 1 = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество());
		Если ПерерывыПредоставленияРаздвигаютГод
			И НЕ ПравоНаОтпуск.Предоставляется
			И НЕ ПерваяЗапись Тогда
		    Продолжить;
		КонецЕсли;
		НепрерывноеПравоНаЕжегодныйОтпуск.Добавить(ПравоНаОтпуск);
	КонецЦикла; 
	УдалитьДублиПрав(НепрерывноеПравоНаЕжегодныйОтпуск);
	
	// Получаем итоговые отклонения по сотруднику.
	Для каждого ОтклонениеПоСотруднику Из ОтклоненияПоСотруднику Цикл
		// Если дата начала отклонения раньше даты ввода остатка вида отпуска,
		// то предполагается, что это отклонение уже учтено при вводе остатков.
		Если ОтклонениеПоСотруднику.ДатаНачалаОтсутствия <= ДатаОстаткаПоВидуОтпуска Тогда
			Если ЗначениеЗаполнено(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) 
				И ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия <= ДатаОстаткаПоВидуОтпуска Тогда
				Продолжить;
			Иначе 
				ОтклонениеПоСотруднику.ДатаНачалаОтсутствия = ДатаОстаткаПоВидуОтпуска + 86400;
				Если ЗначениеЗаполнено(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) Тогда 
					ОтклонениеПоСотруднику.КоличествоДнейПродления = Макс((НачалоДня(ОтклонениеПоСотруднику.ДатаОкончанияОтсутствия) - ОтклонениеПоСотруднику.ДатаНачалаОтсутствия) / 86400 + 1, 0);
					ОтклонениеПоСотруднику.КоличествоДнейОтсутствия = ОтклонениеПоСотруднику.КоличествоДнейПродления;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаОтклоненийПоВидуОтпуска.Добавить(), ОтклонениеПоСотруднику);
	КонецЦикла; 
	ТаблицаОтклоненийПоВидуОтпуска.Сортировать("ДатаНачалаОтсутствия");
	
	// Формируем итоговый период.
	ПериодПредоставленияИтоговый.ДатаНачала = ПериодыПредоставленияОтпусков[0].ДатаНачала;
	ПериодПредоставленияИтоговый.ДатаОкончания = ПериодыПредоставленияОтпусков[ПериодыПредоставленияОтпусков.Количество()-1].ДатаОкончания;
	
	// Формируем рабочие года, "нарезаем" даты образования прав.
	СформироватьРабочиеГода(СотрудникБезПрава, РабочиеГода, ТаблицаОтклонений, ТаблицаОтклоненийПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска, ЕстьОстаткиПоВидуОтпуска, ПериодПредоставленияИтоговый);
	
	// Для каждого рабочего месяца определим количество дней отпуска, заработанное на дату рабочего месяца.
	РассчитатьКоличествоДнейОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, НепрерывноеПравоНаЕжегодныйОтпуск, ТаблицаПереквалификацииДней);
	
	Возврат РабочиеГода;
	
КонецФункции

Процедура СформироватьРабочиеГода(СотрудникБезПрава, РабочиеГода, ТаблицаОтклонений, ТаблицаОтклоненийПоВидуОтпуска, НачальныеОстаткиПоВидуОтпуска, ЕстьОстаткиПоВидуОтпуска, ПериодПредоставленияИтоговый)

	ПоловиныМесяцевОбычные = Новый Массив;
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(14);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	
	ДлинаСуток = 86400;
	
	ДатаНачалаРабочегоГода		= ПериодПредоставленияИтоговый.ДатаНачала;
	ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
	// Если введены начальные остатки, а рабочий год заканчивается до даты ввода остатков,
	//  необходимо определить тот рабочий год, в который дата начальных остатков попадает.
	// Предполагается что остатки продляют только первый период предоставления.
	Если ЕстьОстаткиПоВидуОтпуска Тогда
		СтрокаОстатков = НачальныеОстаткиПоВидуОтпуска[0];
		Если ЗначениеЗаполнено(СтрокаОстатков.РабочийГодНачало) И ЗначениеЗаполнено(СтрокаОстатков.РабочийГодОкончание) Тогда
			ДатаНачалаРабочегоГода		= СтрокаОстатков.РабочийГодНачало;
			ДатаОкончанияРабочегоГода	= КонецДня(СтрокаОстатков.РабочийГодОкончание);
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем рабочие года с учетом отклонений.
	// Каждый рабочий год разобьем на рабочие месяцы.
	// Рабочий месяц состоит из даты, в которую сотрудник получает отпуск за отработанный месяц и количество дней за
	// этот месяц.
	МаксимальнаяДатаОкончания = ?(ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания), ПериодПредоставленияИтоговый.ДатаОкончания, СотрудникБезПрава.ДатаОстатков);
	Пока ДатаНачалаРабочегоГода <= МаксимальнаяДатаОкончания Цикл
		
		РабочийГод = РабочиеГода.Добавить();
		РабочийГод.ДатаНачала				= ДатаНачалаРабочегоГода;
		Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаОкончанияРабочегоГода > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
			ДатаОкончанияРабочегоГода	= ПериодПредоставленияИтоговый.ДатаОкончания;
		КонецЕсли;
		РабочийГод.ДатаОкончания			= ДатаОкончанияРабочегоГода;
						
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("Заполнен",		Новый ОписаниеТипов("Булево"));
		РабочийГод.РабочиеМесяцы.Колонки.Добавить("ОтложеноДней",	Новый ОписаниеТипов("Число"));
		
		// Если для сотрудника введены остатки, добавим остаток как право последним днем.
		НачалоПериода	= РабочийГод.ДатаНачала;
		
		Если ЕстьОстаткиПоВидуОтпуска Тогда
			Для Каждого СтрокаОстатков Из НачальныеОстаткиПоВидуОтпуска Цикл
				
				// В том случае, если есть начальные остатки по данному виду отпуска
				// приводим рабочие года в соответствии с периодом, заданным в остатках.
				Если НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СтрокаОстатков.РабочийГодНачало) Тогда
					РабочийГод.ДатаОкончания = СтрокаОстатков.РабочийГодОкончание;
					ОбрезатьДатуОкончанияРабочегоГода(РабочийГод.ДатаОкончания, СотрудникБезПрава);
				КонецЕсли;
				
				ДатаЗаписиОстатка = Мин(СтрокаОстатков.РабочийГодОкончание, СтрокаОстатков.ДатаОстатка);
				Если РабочийГод.ДатаНачала > ДатаЗаписиОстатка ИЛИ ДатаЗаписиОстатка > РабочийГод.ДатаОкончания Тогда
					Продолжить;
				КонецЕсли;
				
				РабочийМесяц = РабочийГод.РабочиеМесяцы.Добавить();
				РабочийМесяц.ДатаМесяца		= ДатаЗаписиОстатка;
				РабочийМесяц.КоличествоДней	= СтрокаОстатков.КоличествоДней;
				РабочийМесяц.Заполнен = Истина;
				
				ДробнаяЧасть = СтрокаОстатков.КоличествоДней - Цел(СтрокаОстатков.КоличествоДней);
				Если ДробнаяЧасть = 0.33 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.003;
				ИначеЕсли ДробнаяЧасть = 0.66 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.006;
				ИначеЕсли ДробнаяЧасть = 0.99 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.009;
				КонецЕсли;
				
				НачалоПериода	= Мин(ДатаЗаписиОстатка, НачалоПериода);
				
			КонецЦикла;
		КонецЕсли;
		
		Если РабочийГод.ДатаОкончания < Дата(2006, 10, 6) Тогда
			КоличествоДнейВключаемых = 7;
		Иначе
			КоличествоДнейВключаемых = 14;
		КонецЕсли;
						
		// Заполним рабочие месяца датами по умолчанию.
		ПервыйРабочийГод = (НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СотрудникБезПрава.ДатаПриема));
		
		КонецПериода	= ДобавитьМесяц(НачалоПериода, 1) - 1;
		НомерМесяца = 1;
		ДеньМесяца = День(НачалоПериода);
		
		Пока НачалоПериода < РабочийГод.ДатаОкончания
			ИЛИ (ПервыйРабочийГод И НомерМесяца = 12) Цикл
			
			Если ПервыйРабочийГод И НомерМесяца = 12 Тогда
				// П. 28 правил об очередных и дополнительных отпусках.
				ДатаМесяца = НачалоПериода - ДлинаСуток;
			Иначе
				// Определяем источник половины месяца.
				ПоловинаМесяца1 = ПоловиныМесяцевОбычные[Месяц(НачалоПериода)-1] + ?(ЭтоВисокосныйМесяц(НачалоПериода), 0.5, 0);
				ПоловинаМесяца2 = ПоловиныМесяцевОбычные[Месяц(КонецПериода)-1]	 + ?(ЭтоВисокосныйМесяц(КонецПериода), 0.5, 0);
				
				ВПервомМесяцеОтработанаПоловина = (ПоловинаМесяца1 +1 >= День(НачалоПериода));
				
				Если ВПервомМесяцеОтработанаПоловина И День(КонецПериода) >= ПоловинаМесяца2 Тогда
					ПоловинаМесяца = Окр((ПоловинаМесяца1 + ПоловинаМесяца2) / 2);
				Иначе
					ПоловинаМесяца = Окр(?(ВПервомМесяцеОтработанаПоловина, ПоловинаМесяца1, ПоловинаМесяца2));
				КонецЕсли;
				
				ДатаМесяца = НачалоПериода - ДлинаСуток + ПоловинаМесяца * ДлинаСуток;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаМесяца > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
				Прервать;
			КонецЕсли;
			
			Если ДатаМесяца > РабочийГод.ДатаОкончания Тогда // Дата месяца не попала в текущий рабочий год.
				Прервать;
			КонецЕсли;
			
			// Перед добавлением месяца проверим что он не добавлен остатками.
			ОтборМесяцев = Новый Структура("ДатаМесяца", ДатаМесяца);
			Если РабочийГод.РабочиеМесяцы.НайтиСтроки(ОтборМесяцев).Количество() = 0 Тогда
				РабочийГод.РабочиеМесяцы.Добавить().ДатаМесяца = ДатаМесяца;
			КонецЕсли;
			
			НачалоПериода = ДобавитьМесяц(НачалоПериода, 1);
			Если День(НачалоПериода) < ДеньМесяца Тогда 
				НачалоПериода = Дата(Год(НачалоПериода), Месяц(НачалоПериода), Мин(ДеньМесяца, День(КонецМесяца(НачалоПериода))));
			КонецЕсли;
			КонецПериода = ДобавитьМесяц(НачалоПериода, 1) - 1;
			
			НомерМесяца = НомерМесяца + 1;
		КонецЦикла;
		
		// Продлим рабочие года, изменив дату окончания рабочего года и подвинув каждую дату рабочего месяца.
		ОтклоненияДляУдаления = Новый Массив;
		Для Каждого СтрокаОтклонения Из ТаблицаОтклоненийПоВидуОтпуска Цикл
			Если РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
				Продолжить;
			КонецЕсли;
			
			Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
				Если ЗначениеЗаполнено(СтрокаОтклонения.ДатаОкончанияОтсутствия)
					И СтрокаОтклонения.ДатаОкончанияОтсутствия < РабочийГод.ДатаНачала Тогда 
					Продолжить;
				Иначе 
					СтрокаОтклонения.ДатаНачалаОтсутствия = РабочийГод.ДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
			КоличествоДнейВключаемыхБыло = 0;
			Если СтрокаОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты Тогда
				
				КоличествоДнейВключаемыхБыло = КоличествоДнейВключаемых;
				КоличествоДнейПродления = Макс(СтрокаОтклонения.КоличествоДнейОтсутствия - КоличествоДнейВключаемых, 0);
				КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - СтрокаОтклонения.КоличествоДнейОтсутствия, 0);
				
				СтрокаОтклонения.КоличествоДнейПродления = КоличествоДнейПродления;
				
				СтруктураПоиска = Новый Структура("Сотрудник, Состояние, ДатаНачалаОтсутствия, ДатаОкончанияОтсутствия, ЯвляетсяОтпускомБезСохраненияЗарплаты, Состояние");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОтклонения);
				НайденныеСтроки = ТаблицаОтклонений.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].КоличествоДнейПродления = КоличествоДнейПродления;
				КонецЕсли;
				
			КонецЕсли;
			
			// Увеличение рабочего года
			Если СтрокаОтклонения.КоличествоДнейПродления = NULL Тогда
			// Даты окончания нет, сотрудник ушел надолго, что с ним - мы не знаем, расчет прекращаем датой начала отсутствия.
				РабочийГод.ДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия - ДлинаСуток;
				МаксимальнаяДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия - ДлинаСуток;
			ИначеЕсли СтрокаОтклонения.КоличествоДнейПродления > 0 Тогда
			// Отсутствие с известной датой окончания - сдвигаем дату года и месяцы.
				РабочийГод.ДатаОкончания		= РабочийГод.ДатаОкончания + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
				Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И РабочийГод.ДатаОкончания > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
					РабочийГод.ДатаОкончания	= ПериодПредоставленияИтоговый.ДатаОкончания;
				КонецЕсли;
				// Сдвиг всех рабочих месяцев после даты начала продления.
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.ДатаМесяца >= СтрокаОтклонения.ДатаНачалаОтсутствия + КоличествоДнейВключаемыхБыло * ДлинаСуток Тогда
						РабочийМесяц.ДатаМесяца = РабочийМесяц.ДатаМесяца + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ОтклоненияДляУдаления.Добавить(СтрокаОтклонения);
		КонецЦикла;
		
		Для Каждого СтрокаОтклонения Из ОтклоненияДляУдаления Цикл
			ТаблицаОтклоненийПоВидуОтпуска.Удалить(СтрокаОтклонения);
		КонецЦикла;
		
		// Удаление рабочих месяцев, вышедших за дату окончания рабочего года.
		РабочиеМесяцыДляУдаления = Новый Массив;
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			Если РабочийМесяц.ДатаМесяца > РабочийГод.ДатаОкончания Тогда
				РабочиеМесяцыДляУдаления.Добавить(РабочийМесяц);
			КонецЕсли;
		КонецЦикла;
		Для Каждого РабочийМесяц Из РабочиеМесяцыДляУдаления Цикл
			РабочийГод.РабочиеМесяцы.Удалить(РабочийМесяц);
		КонецЦикла;
		
		РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца");
		
		ДатаНачалаРабочегоГода		= КонецДня(РабочийГод.ДатаОкончания) + 1;
		ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
	КонецЦикла;

КонецПроцедуры

// Заполнение ТЧ "Ежегодные отпуска в документах".

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор) Экспорт
 
	ОтпускаСотрудников = Новый Соответствие;
	
	// Создание таблицы - отбора сотрудников
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		| ТаблицаСотрудников.Период,
		| ТаблицаСотрудников.Сотрудник
		|ПОМЕСТИТЬ ВТТаблицаСотрудниковДляПолученияЕжегодныхОтпусков
		|ИЗ
		| &ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",  ТаблицаСотрудников);
	
	// Получение запроса по ежегодным отпускам сотрудников
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТТаблицаСотрудниковДляПолученияЕжегодныхОтпусков");
	ЗапросВТЕжегодныеОтпуска = ЗапросВТЕжегодныеОтпускаСотрудников(Ложь, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор, "ВТЕжегодныеОтпускаСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТЕжегодныеОтпуска);
	
	ФинальныйЗапрос = Новый Запрос;
	ФинальныйЗапрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейВГод,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование
		|ИЗ
		|	ВТЕжегодныеОтпускаСотрудников КАК ПраваНаОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный УБЫВ,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам УБЫВ,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ФинальныйЗапрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОтпускаСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ОписаниеОтпуска = Новый Структура("ВидЕжегодногоОтпуска,КоличествоДнейВГод,ВидЕжегодногоОтпускаПредопределенный,ВидЕжегодногоОтпускаНаименование");
			ЗаполнитьЗначенияСвойств(ОписаниеОтпуска, Выборка);
			ОтпускаСотрудника.Добавить(ОписаниеОтпуска);
			
		КонецЦикла;
		
		ОтпускаСотрудников.Вставить(Выборка.Сотрудник, ОтпускаСотрудника);
		
	КонецЦикла; 
	
	Возврат ОтпускаСотрудников;
 
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудника(Сотрудник, ДатаСобытия, Регистратор) Экспорт
	
	// Формируем таблицу фильтров.
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НоваяСтрока = ТаблицаОтборов.Добавить();
	НоваяСтрока.Период = ДатаСобытия;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	ЕжегодныеОтпуска = ЕжегодныеОтпускаСотрудников(ТаблицаОтборов, Регистратор);
	
	// Формируем таблицу результата.
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаСотрудников.Колонки.Добавить("КоличествоДнейВГод", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	
	МассивОтпусков = ЕжегодныеОтпуска.Получить(Сотрудник);
	Если МассивОтпусков <> Неопределено Тогда
		Для каждого ВидОтпуска Из МассивОтпусков Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ВидОтпуска);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного списка позиций штатного
// расписания.
//
Функция ЕжегодныеОтпускаПозицииШтатногоРасписания(СписокПозиций, ДатаСобытия, Регистратор = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций",	СписокПозиций);
	Запрос.УстановитьПараметр("ДатаСобытия",	ДатаСобытия);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТСрезПоследних
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания В(&СписокПозиций)
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата <= &ДатаСобытия
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Регистратор <> &Регистратор
			|	И НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПометкаУдаления
			|	И НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Недействителен
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
			|		ПО ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания = СрезПоследних.ПозицияШтатногоРасписания
			|			И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата = СрезПоследних.Дата
			|			И (НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПометкаУдаления)
			|			И (НЕ ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Недействителен)
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска";
		
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&СписокПозиций)
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ГруппаПозицийПодразделения
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.Утверждена
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаУтверждения <= &ДатаСобытия
			|	И (ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия >= &ДатаСобытия
			|			ИЛИ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПометкаУдаления
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.Недействителен
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ОтпускЯвляетсяЕжегодным
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения по регистрам

// Процедура принудительно рассчитывает заработанные права на ежегодные отпуска по списку сотрудников и записывает
// рассчитанные сведения в регистр.
//
Процедура РассчитатьЗаработанныеОтпускаСпискуСотрудников(СписокСотрудников, ДатаРасчета, ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников)
		Или СписокСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник				= Сотрудник;
		Строка.ДатаОстатков				= НачалоДня(ДатаРасчета);
		Строка.ЭтоРасчетПриУвольнении	= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТНеРассчитанныхСотрудников(ТаблицаДанных, МенеджерВременныхТаблиц, Ложь);
	Если ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТНеРассчитанныеСотрудники") Тогда 
		ИсходныеДанные = ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
		ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

// Получение временной таблицы фактических отпусков.

// Возвращает структуру описания полей отбора для методов получения фактических отпусков сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать три имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "НачалоПериода",
//							третье "ОкончаниеПериода".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				НачалоПериода
//				ОкончаниеПериода
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "НачалоПериода,ОкончаниеПериода")
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",");
	Возврат Новый Структура("Сотрудник,НачалоПериода,ОкончаниеПериода", СокрЛП(МассивИменПолейОтбораСотрудников[0]), СокрЛП(МассивИменПолейОтбораСотрудников[1]), СокрЛП(МассивИменПолейОтбораСотрудников[2]));
	
КонецФункции

// Возвращает строку, содержащую своднуюИнформацию об отпусках сотрудника
// Параметры:
//	КоллекцияСтрок - Таблица значений с правами сотрудника на отпуск.
// 	ТолькоПросмотр - состояние открытия формы.
// 	РежимФормирования - режим формирования надписи.
//		* 0 - простой список отпусков
//		* 1 - расширенное представление, с учетом изменений
//		* 2 - краткий вывод измененных отпусков.
//
Функция ПредставлениеПраваНаОтпускПоКоллекцииСтрок(КоллекцияСтрок, ТолькоПросмотр, РежимФормирования)
	
	Если РежимФормирования = 2 И КоллекцияСтрок.Количество() > 0 Тогда
		// Для вывода краткой информации с изменениями - удалим отмененные отпуска
		МассивСтрокДляУдаления = Новый Массив;
		Для каждого СтрокаОтпуска Из КоллекцияСтрок Цикл
			Если СтрокаОтпуска.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить") Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаОтпуска);
			КонецЕсли;
		КонецЦикла; 
		Для каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
			КоллекцияСтрок.Удалить(КоллекцияСтрок.Найти(УдаляемаяСтрока));
		КонецЦикла; 
	КонецЕсли;
			
	МассивФорматированныхСтрок = Новый Массив;
	
	ПредставлениеПрава = "";
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		ПредставлениеПрава = НСТр("ru='Права на отпуск не заданы.'");
		МассивФорматированныхСтрок.Добавить(ПредставлениеПрава);
	ИначеЕсли КоллекцияСтрок.Количество() = 1 Тогда
		
		СтрокаОтпуска = КоллекцияСтрок[0];
		
		Заголовок = ?(РежимФормирования = 2, НСтр("ru = 'Изменено право на отпуск'"), НСтр("ru = 'Имеет право на ежегодный отпуск'"));
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Заголовок + " ",,WebЦвета.Черный));
		
		ЦветПрава = WebЦвета.Черный;
		Если РежимФормирования = 1 Тогда
			ПредставлениеПрава = КомментарийИзменения(СтрокаОтпуска);
		Иначе
			Если ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
				ПредставлениеПрава = "";
			Иначе
				Если СтрокаОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
					ПредставлениеПрава = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='(%1) дн.'"),
						СтрокаОтпуска.КоличествоДнейВГод);
				Иначе
					ПредставлениеПрава = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2) дн.'"),
						СтрокаОтпуска.ВидЕжегодногоОтпуска,
						СтрокаОтпуска.КоличествоДнейВГод);
					ЦветПрава = WebЦвета.ТемноГрифельноСиний;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",, ЦветПрава));
		
	ИначеЕсли КоллекцияСтрок.Количество() > 1 Тогда
		
		ПредставлениеПрава = "";
		НачалоНовойСтроки = Истина;
		
		Для каждого СтрокаТЧЕжегодныеОтпуска Из КоллекцияСтрок Цикл
			
			Если РежимФормирования = 1 Тогда
				ПредставлениеСтроки = КомментарийИзменения(СтрокаТЧЕжегодныеОтпуска);
			Иначе
				Если ЭтоСтажевыйОтпуск(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска) Тогда
					ПредставлениеСтроки = Строка(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска);
				Иначе
					ПредставлениеСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2) дн.'"),
						СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
						СтрокаТЧЕжегодныеОтпуска.КоличествоДнейВГод);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				ПредставлениеПрава = ПредставлениеСтроки + ", " + ПредставлениеПрава;
			Иначе
				ПредставлениеПрава = ПредставлениеПрава + ?(НачалоНовойСтроки, "", ", ") + ПредставлениеСтроки;
				НачалоНовойСтроки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Заголовок = ?(РежимФормирования = 2, НСтр("ru = 'Изменены права на отпуска'"), НСтр("ru = 'Имеет право на ежегодные отпуска'"));
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ",,WebЦвета.Черный));
		
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",,WebЦвета.ТемноГрифельноСиний));
		
	КонецЕсли;
	
	Возврат МассивФорматированныхСтрок;
	
КонецФункции

// Формирует расширенное представление строки ежедневных отпусков.
Функция КомментарийИзменения(РасширеннаяСтрокаОтпуска)

	Если РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Отменить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru='отменено право на отпуск %1'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru='добавлено право на отпуск %1'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.КоличествоДнейВГод <> РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод
		И НЕ ЭтоСтажевыйОтпуск(РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
		НачалоСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='изменено право на отпуск %1 (%2 дн.'"),
			РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска,
			РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
		Если РасширеннаяСтрокаОтпуска.КоличествоДнейВГод > РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод Тогда
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на %1 дн. больше)'"),
				(РасширеннаяСтрокаОтпуска.КоличествоДнейВГод - РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод));
		Иначе	
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на %1 дн. меньше)'"),
				(РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод - РасширеннаяСтрокаОтпуска.КоличествоДнейВГод));
		КонецЕсли;
		ПредставлениеСтроки = НачалоСтроки + КонецСтроки;
	Иначе
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска("%1", РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	КонецЕсли;

	Возврат ПредставлениеСтроки;
	
КонецФункции

Функция ПредставлениеСтрокиОтпуска(ТекстКомментария, ВидЕжегодногоОтпуска, КоличествоДнейВГод)

	ТестСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, ВидЕжегодногоОтпуска);
	Если НЕ ЭтоСтажевыйОтпуск(ВидЕжегодногоОтпуска) Тогда
		ТестСтроки = ТестСтроки + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1 дн.)'"), КоличествоДнейВГод);
	КонецЕсли;
	
	Возврат ТестСтроки;

КонецФункции

// Удаляет дубли прав и формирует таблицу отпусков.
// 
Процедура СоздатьВТСобытияПравНаОтпуска(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ДатаДействия,
		|	МАКСИМУМ(ЕСТЬNULL(ПраваНаОтпускаПредыдущее.ДатаДействия, ПраваНаОтпуска.ДатаДействия)) КАК ПредыдущаяДатаДействия,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТПредыдущиеУказатели
		|ИЗ
		|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпускаПредыдущее
		|		ПО ПраваНаОтпуска.Сотрудник = ПраваНаОтпускаПредыдущее.Сотрудник
		|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ПраваНаОтпускаПредыдущее.ВидЕжегодногоОтпуска
		|			И ПраваНаОтпуска.ДатаДействия > ПраваНаОтпускаПредыдущее.ДатаДействия
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.ДатаДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваНаОтпуска.Сотрудник,
		|	ПраваНаОтпуска.ДатаДействия,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
		|	ПраваНаОтпуска.ПриоритетВидаЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод,
		|	ПраваНаОтпуска.Предоставляется,
		|	ПраваНаОтпуска.Регистратор,
		|	ПраваНаОтпуска.ПредставлениеДокумента,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ВторичнаяЗапись
		|			ТОГДА &ИзмененоПраво
		|		ИНАЧЕ ПраваНаОтпуска.ПредставлениеДокумента
		|	КОНЕЦ КАК Событие,
		|	ВЫБОР
		|		КОГДА ПраваНаОтпуска.ВторичнаяЗапись
		|			ТОГДА NULL
		|		ИНАЧЕ ПраваНаОтпуска.Регистратор
		|	КОНЕЦ КАК ДокументСобытие,
		|	ПраваНаОтпуска.ВторичнаяЗапись,
		|	ПраваНаОтпуска.ПересчетНеТребуется,
		|	ВЫБОР
		|		КОГДА ВТПредыдущиеУказатели.ДатаДействия = ВТПредыдущиеУказатели.ПредыдущаяДатаДействия
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ПраваНаОтпуска.КоличествоДнейОтпускаВГод - ПраваНаОтпускаПредыдущее.КоличествоДнейОтпускаВГод = 0
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК ДублирующаяЗапись
		|ПОМЕСТИТЬ ВТПраваНаОтпускаБезДублей
		|ИЗ
		|	ВТПредыдущиеУказатели КАК ВТПредыдущиеУказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпуска
		|		ПО ВТПредыдущиеУказатели.Сотрудник = ПраваНаОтпуска.Сотрудник
		|			И ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска = ПраваНаОтпуска.ВидЕжегодногоОтпуска
		|			И (НАЧАЛОПЕРИОДА(ВТПредыдущиеУказатели.ДатаДействия, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПраваНаОтпуска.ДатаДействия, ДЕНЬ))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПраваНаОтпуска КАК ПраваНаОтпускаПредыдущее
		|		ПО ВТПредыдущиеУказатели.Сотрудник = ПраваНаОтпускаПредыдущее.Сотрудник
		|			И ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска = ПраваНаОтпускаПредыдущее.ВидЕжегодногоОтпуска
		|			И (НАЧАЛОПЕРИОДА(ВТПредыдущиеУказатели.ПредыдущаяДатаДействия, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПраваНаОтпускаПредыдущее.ДатаДействия, ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваНаОтпускаБезДублей.Сотрудник КАК Сотрудник,
		|	ВТПраваНаОтпускаБезДублей.ДатаДействия КАК ДатаСобытия,
		|	ВТПраваНаОтпускаБезДублей.Событие,
		|	ВТПраваНаОтпускаБезДублей.ДокументСобытие,
		|	ВТПраваНаОтпускаБезДублей.ВидЕжегодногоОтпуска,
		|	ВТПраваНаОтпускаБезДублей.ВидЕжегодногоОтпускаНаименование,
		|	ВТПраваНаОтпускаБезДублей.ПриоритетВидаЕжегодногоОтпуска,
		|	ВТПраваНаОтпускаБезДублей.Предоставляется,
		|	ВТПраваНаОтпускаБезДублей.КоличествоДнейОтпускаВГод
		|ПОМЕСТИТЬ ВТСобытияПравНаОтпуска
		|ИЗ
		|	ВТПраваНаОтпускаБезДублей КАК ВТПраваНаОтпускаБезДублей
		|ГДЕ
		|	ВТПраваНаОтпускаБезДублей.ДублирующаяЗапись = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПредыдущиеУказатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПраваНаОтпускаБезДублей";
	
	Запрос.УстановитьПараметр("ИзмененоПраво", НСтр("ru = 'Изменено право на отпуск'"));
	Запрос.Выполнить();

КонецПроцедуры

// Формирует таблицу событий изменения прав сотрудника.
//
Функция СобытияИзмененийПравСотрудника(МенеджерВременныхТаблиц, Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПрава.Сотрудник,
		|	ВТПрава.ДатаСобытия,
		|	ВТПрава.Событие,
		|	ВТПрава.ДокументСобытие,
		|	ВТПрава.ВидЕжегодногоОтпуска,
		|	ВТПрава.ВидЕжегодногоОтпускаНаименование,
		|	ВТПрава.Предоставляется,
		|	ВТПрава.КоличествоДнейОтпускаВГод
		|ИЗ
		|	ВТСобытияПравНаОтпуска КАК ВТПрава
		|ГДЕ
		|	ВТПрава.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТПрава.ДатаСобытия,
		|	ВТПрава.ПриоритетВидаЕжегодногоОтпуска,
		|	ВТПрава.ВидЕжегодногоОтпускаНаименование";
	
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	ВыборкаСобытий = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
	
	Пока ВыборкаСобытий.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		НовоеСобытие = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСобытие, ВыборкаСобытий);
		ПраваНаОтпуска = Новый Массив;
		Пока ВыборкаСобытий.Следующий() Цикл
			Событие = Новый Структура("ВидЕжегодногоОтпуска, ВидЕжегодногоОтпускаНаименование, Предоставляется, КоличествоДнейОтпускаВГод");
			ЗаполнитьЗначенияСвойств(Событие, ВыборкаСобытий);
			ПраваНаОтпуска.Добавить(Событие);
		КонецЦикла;
		НовоеСобытие.ПраваНаОтпуска = ПраваНаОтпуска;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует таблицу событий отпусков сотрудника.
//
Функция СобытияОтпусковСотрудника(МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Отпуска = Новый Массив;
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Отпуска.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Отпуска", Отпуска);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.Документ КАК ДокументСобытие,
		|	ФактическиеОтпуска.ДатаНачалаОтпуска КАК ДатаНачалаОтпуска,
		|	ФактическиеОтпуска.ДатаОкончанияОтпуска КАК ДатаОкончанияОтпуска,
		|	СостоянияСотрудников.Период КАК ДатаНачала,
		|	СостоянияСотрудников.ДействуетДо КАК ДатаОкончания
		|ИЗ
		|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ПО ФактическиеОтпуска.Сотрудник = СостоянияСотрудников.Сотрудник
		|			И ФактическиеОтпуска.ДатаНачалаОтпуска <= СостоянияСотрудников.Период
		|			И ФактическиеОтпуска.ДатаОкончанияОтпуска >= СостоянияСотрудников.ДействуетДо
		|			И (СостоянияСотрудников.Состояние В (&Отпуска))
		|ГДЕ
		|	ФактическиеОтпуска.Сотрудник = &Сотрудник";
	
	ПериодыОтпусков = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод КАК ДатаСобытия,
		|	ФактическиеОтпуска.ПредставлениеДокумента КАК Событие,
		|	ФактическиеОтпуска.Документ КАК ДокументСобытие,
		|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
		|	ФактическиеОтпуска.КоличествоДнейОтпуска,
		|	ФактическиеОтпуска.ДатаНачалаОтпуска,
		|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ПредставлениеДокумента,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
		|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
		|	ФактическиеОтпуска.ОснованиеИзДокумента
		|ИЗ
		|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСобытие,
		|	ДатаСобытия";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	
	Отбор = Новый Структура("ДокументСобытие,ДатаНачалаОтпуска,ДатаОкончанияОтпуска");
	
	Пока Выборка.СледующийПоЗначениюПоля("ДокументСобытие") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
			
			НовоеСобытие = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСобытие, Выборка);
			
			ФактическиеОтпуска = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				ПериодыОтпуска = Новый Массив;
				ЗаполнитьЗначенияСвойств(Отбор, Выборка);
				НайденныеСтроки = ПериодыОтпусков.НайтиСтроки(Отбор);
				Для Каждого СтрокаПериода Из НайденныеСтроки Цикл 
					ПериодОтпуска = Новый Структура("ДатаНачала,ДатаОкончания", СтрокаПериода.ДатаНачала, СтрокаПериода.ДатаОкончания);
					ПериодыОтпуска.Добавить(ПериодОтпуска);
				КонецЦикла;
				
				Событие = Новый Структура("
                      |	ДатаОстатков,
                      |	ВидЕжегодногоОтпуска,
                      |	ВидЕжегодногоОтпускаНаименование,
                      |	КоличествоДнейОтпуска,
                      |	ДатаВхожденияВРабочийГод,
                      |	ДатаНачалаОтпуска,
                      |	ДатаОкончанияОтпуска,
                      |	Компенсация,
                      |	ДатаРегистрации,
                      |	РабочийПериодСИзДокумента,
                      |	РабочийПериодПоИзДокумента,
                      |	ОснованиеИзДокумента,
                      |	ПериодыОтпуска");
				ЗаполнитьЗначенияСвойств(Событие, Выборка);
				Событие.ПериодыОтпуска = ПериодыОтпуска;
				ФактическиеОтпуска.Добавить(Событие);
				
			КонецЦикла;
			
			НовоеСобытие.ФактическиеОтпуска = ФактическиеОтпуска;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

Функция СобытияОтклоненийСотрудника(МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отклонения.ДатаНачалаОтсутствия КАК ДатаСобытия,
		|	Отклонения.Состояние,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Отклонения.Состояние) КАК Событие,
		|	Отклонения.ДатаНачалаОтсутствия,
		|	Отклонения.ДатаОкончанияОтсутствия,
		|	Отклонения.КоличествоДнейОтсутствия,
		|	Отклонения.КоличествоДнейПродления,
		|	Отклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК ВидОтпуска,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК РабочийГодДатаНачала,
		|	ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК РабочийГодДатаОкончания
		|ИЗ
		|	ВТОтклонения КАК Отклонения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО Отклонения.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И Отклонения.ДатаНачалаОтсутствия >= ЗаработанныеПраваНаОтпуска.ДатаНачала
		|			И Отклонения.ДатаНачалаОтсутствия <= ЗаработанныеПраваНаОтпуска.ДатаОкончания
		|ГДЕ
		|	Отклонения.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("Отклонения");
	ТаблицаСобытий.Колонки.Добавить("РабочиеГодаОтпусков");
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		
		НовоеСобытие = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСобытие, Выборка);
		
		ОтклонениеСотрудника = Новый Структура("
			|ДатаНачалаОтсутствия,
			|ДатаОкончанияОтсутствия,
			|КоличествоДнейОтсутствия,
			|КоличествоДнейПродления,
			|ЯвляетсяОтпускомБезСохраненияЗарплаты");
			
		ЗаполнитьЗначенияСвойств(ОтклонениеСотрудника, Выборка);
		НовоеСобытие.Отклонения = ОтклонениеСотрудника;
		
		МассивРабочихЛет = Новый Массив;
		Пока Выборка.Следующий() Цикл
			РабочийГод = Новый Структура("ВидОтпуска, РабочийГодДатаНачала, РабочийГодДатаОкончания");
			ЗаполнитьЗначенияСвойств(РабочийГод, Выборка);
			МассивРабочихЛет.Добавить(РабочийГод);
		КонецЦикла;
		НовоеСобытие.РабочиеГодаОтпусков = МассивРабочихЛет;
		
	КонецЦикла;
	
	Возврат ТаблицаСобытий;

КонецФункции

Процедура ЗаменитьРеквизитыСобытийПоНачальнымОстаткамСотрудника(ТаблицаСобытий, МенеджерВременныхТаблиц, Сотрудник)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачальныеОстатки.ДатаОстатка КАК ДатаСобытия,
		|	НачальныеОстатки.ВидЕжегодногоОтпуска,
		|	НачальныеОстатки.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
		|	НачальныеОстатки.ПриоритетВидаЕжегодногоОтпуска КАК ПриоритетВидаЕжегодногоОтпуска,
		|	НачальныеОстатки.КоличествоДней,
		|	НачальныеОстатки.РабочийГодНачало,
		|	НачальныеОстатки.РабочийГодОкончание,
		|	НачальныеОстатки.Регистратор
		|ИЗ
		|	ВТНачальныеОстатки КАК НачальныеОстатки
		|ГДЕ
		|	НачальныеОстатки.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	ПриоритетВидаЕжегодногоОтпуска,
		|	ВидЕжегодногоОтпускаНаименование";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
		Событие = ТаблицаСобытий.Найти(Выборка.ДатаСобытия, "ДатаСобытия");
		Если Событие <> Неопределено Тогда
			Событие.Событие = НСтр("ru = 'Введены начальные данные'");
			Событие.ДокументСобытие = Выборка.Регистратор;
			ОстаткиНаДату = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ОстаткиВРазрезе = Новый Структура("
						|ВидЕжегодногоОтпуска,
						|ВидЕжегодногоОтпуска,
						|ВидЕжегодногоОтпускаНаименование,
						|КоличествоДней,
						|РабочийГодНачало,
						|РабочийГодОкончание");
				ЗаполнитьЗначенияСвойств(ОстаткиВРазрезе, Выборка);
				ОстаткиНаДату.Добавить(ОстаткиВРазрезе);
			КонецЦикла;
			Событие.НачальныеОстаткиОтпусков = ОстаткиНаДату;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьЗаработанныеДниВТаблицеСобытий(ТаблицаСобытий, ЗаработанныеОтпускаСотрудника, ТаблицаЗаработанныхДнейОтпусковСотрудника)
	
	Для каждого СтрокаНакопленныхДней Из ЗаработанныеОтпускаСотрудника Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗаработанныхДнейОтпусковСотрудника.Добавить(), СтрокаНакопленныхДней);
	КонецЦикла; 
	
	Если ТаблицаСобытий.Количество() > 0 Тогда
		ДатаПредыдущегоСобытия = ТаблицаСобытий[0].ДатаСобытия;
	КонецЕсли;
	
	Для каждого Событие Из ТаблицаСобытий Цикл
		Событие.ДатаПредыдущегоСобытия = ДатаПредыдущегоСобытия;
		Событие.НакопленоСПредыдущегоСобытия = МассивНакопленныхОтпусков(Событие.ДатаСобытия, Событие.ДатаПредыдущегоСобытия, ТаблицаЗаработанныхДнейОтпусковСотрудника);
		ДатаПредыдущегоСобытия = Событие.ДатаСобытия;
	КонецЦикла; 

КонецПроцедуры

// Считает накопленные права на отпуск за период.
Функция МассивНакопленныхОтпусков(ДатаСобытия, ДатаПредыдущегоСобытия,ТаблицаНакопленныхПрав);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаНакопленныхПрав.ВидЕжегодногоОтпуска,
	                      |	ТаблицаНакопленныхПрав.ДатаНачала,
	                      |	ТаблицаНакопленныхПрав.ДатаОкончания,
	                      |	ТаблицаНакопленныхПрав.Период,
	                      |	ТаблицаНакопленныхПрав.КоличествоДней,
	                      |	ТаблицаНакопленныхПрав.КоличествоДнейЗаПериод
	                      |ПОМЕСТИТЬ ВТНакопленныеДни
	                      |ИЗ
	                      |	&ТаблицаНакопленныхПрав КАК ТаблицаНакопленныхПрав
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПериод
	                      |ПОМЕСТИТЬ ВТНакоплено
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказатели КАК ВТУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТПредыдущиеУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаПредыдущегоСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПредыдущийПериод
	                      |ПОМЕСТИТЬ ВТНакопленоПредыдущее
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредыдущиеУказатели КАК ВТПредыдущиеУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТПредыдущиеУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакоплено.ВидЕжегодногоОтпуска,
	                      |	ВТНакоплено.НакопленоЗаПериод - ЕСТЬNULL(ВТНакопленоПредыдущее.НакопленоЗаПредыдущийПериод, 0) КАК КоличествоДнейЗаПериод
	                      |ИЗ
	                      |	ВТНакоплено КАК ВТНакоплено
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленоПредыдущее КАК ВТНакопленоПредыдущее
	                      |		ПО ВТНакоплено.ВидЕжегодногоОтпуска = ВТНакопленоПредыдущее.ВидЕжегодногоОтпуска");
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ДатаПредыдущегоСобытия", ДатаПредыдущегоСобытия);
	Запрос.УстановитьПараметр("ТаблицаНакопленныхПрав", ТаблицаНакопленныхПрав);
	
	МассивНакопленныхОтпусков = Новый Массив;
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтруктураВидаОтпуска = Новый Структура;
		СтруктураВидаОтпуска.Вставить("ВидЕжегодногоОтпуска", ВыборкаЗапроса.ВидЕжегодногоОтпуска);
		СтруктураВидаОтпуска.Вставить("КоличествоДнейЗаПериод", ВыборкаЗапроса.КоличествоДнейЗаПериод);
		МассивНакопленныхОтпусков.Добавить(СтруктураВидаОтпуска);
	КонецЦикла;
	
	Возврат МассивНакопленныхОтпусков;

КонецФункции

// Заполняет строки табличной части прав отпусков сводной информацией об остатках отпусков из второй табличной части.
Процедура ЗаполнитьОстатокПоОстаткамОтпусков(Сотрудник, ТЧЕжегодныеОтпуска, ТЧОстаткиОтпусков) Экспорт

	СвернутыеОстатки = ТЧОстаткиОтпусков.Скопировать(,"ВидЕжегодногоОтпуска, Остаток, ДатаОстатка");
	СвернутыеОстатки.Свернуть("ВидЕжегодногоОтпуска, ДатаОстатка", "Остаток");
	
	Для каждого Остаток Из СвернутыеОстатки Цикл
		МассивСтрок = ТЧЕжегодныеОтпуска.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", Сотрудник, Остаток.ВидЕжегодногоОтпуска));
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОтпуска = МассивСтрок[0];
		Иначе
			СтрокаОтпуска = ТЧЕжегодныеОтпуска.Добавить();
			СтрокаОтпуска.Сотрудник = Сотрудник;
			СтрокаОтпуска.ВидЕжегодногоОтпуска = Остаток.ВидЕжегодногоОтпуска;
			СтрокаОтпуска.ДатаОстатка = Остаток.ДатаОстатка;
		КонецЕсли;
		СтрокаОтпуска.КоличествоДней = Остаток.Остаток;
	КонецЦикла; 

КонецПроцедуры

// Проверяем корректность заполнения документов ввода остатков отпусков в разрезе рабочих лет.
//
Функция ДокументВводаОстатковОтпусковЗаполненКорректно(Форма) Экспорт
	
	Ошибки = Неопределено;
	ПроверкаДляФормы = ТипЗнч(Форма)=Тип("УправляемаяФорма");
	Если ПроверкаДляФормы Тогда
		ПутьКДаннымФормы = "";
	Иначе
		ПутьКДаннымФормы = "Объект.";
	КонецЕсли;
	
	ПутьКДанным = ПутьКДаннымФормы + "ЕжегодныеОтпуска[%1]";
	ПутьКДаннымПоГодам = ПутьКДаннымФормы + "ОстаткиОтпусковПоРабочимГодам[%1]";
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДаннымФормы + "ДатаОстатков",
			НСтр("ru='Не заполнена дата остатков.'"),
			"");
	КонецЕсли;
	
	Для каждого СтрокаОтпуска Из Форма.ЕжегодныеОтпуска Цикл
		НомерСтроки = Форма.ЕжегодныеОтпуска.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				НСтр("ru='Не заполнен вид ежегодного отпуска'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		ПараметрыОтбора = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		Если Форма.ЕжегодныеОтпуска.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Вид отпуска ""%1"" использован в нескольких строках'"),СтрокаОтпуска.ВидЕжегодногоОтпуска),
				"",
				НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаОтпуска Из Форма.ОстаткиОтпусковПоРабочимГодам Цикл
		НомерСтроки = Форма.ОстаткиОтпусковПоРабочимГодам.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".ВидЕжегодногоОтпуска",
				НСтр("ru='Не заполнен вид ежегодного отпуска'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru='Не заполнена дата начала периода.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодОкончание) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодОкончание",
				НСтр("ru='Не заполнена дата окончания периода.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если СтрокаОтпуска.РабочийГодОкончание < СтрокаОтпуска.РабочийГодНачало Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru='Не верно заполнен период работы, за который предоставлялся последний отпуск.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	ПроверитьПрерыванияПериодовПоВидуОтпуска(Форма.ОстаткиОтпусковПоРабочимГодам, ПутьКДаннымПоГодам, Ошибки);
	ПроверитьКорректностьДатПоследнегоПериода(Форма.ОстаткиОтпусковПоРабочимГодам, Форма.ДатаОстатков, ПутьКДаннымПоГодам, Ошибки);
	
	ЕстьОшибки = НЕ Ошибки = Неопределено;
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияЕжегодныхОтпусковПозицийВДокументе(ТабличнаяЧастьПозиции, ТабличнаяЧастьЕжегодныеОтпуска, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	ВидыОтпусковПозиций = Новый Соответствие;
	
	Ошибки = Неопределено;
	Для каждого СтрокаПозиции Из ТабличнаяЧастьПозиции Цикл
		
		ЕжегодныеОтпускаПозиции = ТабличнаяЧастьЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
		Если ЕжегодныеОтпускаПозиции.Количество() > 0 Тогда
			
			ВидыОтпусковПозиции = ВидыОтпусковПозиций.Получить(СтрокаПозиции.ИдентификаторСтрокиПозиции);
			Если ВидыОтпусковПозиции = Неопределено Тогда
				ВидыОтпусковПозиции = Новый Соответствие;
			КонецЕсли;
			
			Для каждого ЕжегодныйОтпуск Из ЕжегодныеОтпускаПозиции Цикл
				
				ХарактерЗависимостиДнейОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска");
				Если ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит")
					И ЕжегодныйОтпуск.КоличествоДнейВГод = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Для вида отпуска %1 не заполнено количество дней в год.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Позиции[%1].Должность",
						ТекстСообщения,
						"",
						ТабличнаяЧастьПозиции.Индекс(СтрокаПозиции));
					
				КонецЕсли;
				
				Если ВидыОтпусковПозиции.Получить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска) = Неопределено Тогда
					ВидыОтпусковПозиции.Вставить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, Истина);
				Иначе
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Повторяется вид отпуска %1.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Позиции[%1].Должность",
						ТекстСообщения,
						"",
						ТабличнаяЧастьПозиции.Индекс(СтрокаПозиции));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЕжегодныеОтпуска.КоличествоДнейВГод");
	
	ЕстьОшибки = (НЕ Ошибки = Неопределено);
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяем корректность заполнения ТЧ ЕжегодныеОтпуска в документах и справочниках.
//
Процедура ОбработкаПроверкиЗаполненияТЧЕжегодныеОтпуска(ТабличнаяЧасть, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	ВидыОтпусковПозиции = Новый Соответствие;
	Ошибки = Неопределено;
	
	Для каждого ЕжегодныйОтпуск Из ТабличнаяЧасть Цикл
		
		ХарактерЗависимостиДнейОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска");
		Если ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит")
			И ЕжегодныйОтпуск.КоличествоДнейВГод = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ЕжегодныеОтпуска[%1].КоличествоДнейВГод",
				НСтр("ru = 'Не заполнено количество дней в год.'"),
				"",
				ТабличнаяЧасть.Индекс(ЕжегодныйОтпуск));
			
		КонецЕсли;
		
		Если ВидыОтпусковПозиции.Получить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска) = Неопределено Тогда
			ВидыОтпусковПозиции.Вставить(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, Истина);
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Повторяется вид отпуска %1.'"), ЕжегодныйОтпуск.ВидЕжегодногоОтпуска);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ЕжегодныеОтпуска[%1].ВидЕжегодногоОтпуска",
				ТекстСообщения,
				"",
				ТабличнаяЧасть.Индекс(ЕжегодныйОтпуск));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЕжегодныеОтпуска.КоличествоДнейВГод");
	
	ЕстьОшибки = (НЕ Ошибки = Неопределено);
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПрерыванияПериодовПоВидуОтпуска(ДанныеФормы, ПутьКДанным, Ошибки) Экспорт

	ТаблицаЗначений = ДанныеФормы.Выгрузить();
	ТаблицаЗначений.Сортировать("ВидЕжегодногоОтпуска, РабочийГодНачало");
	
	Для каждого СтрокаОстатка Из ТаблицаЗначений Цикл
	
		Если ТаблицаЗначений.Индекс(СтрокаОстатка) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТаблицаЗначений[ТаблицаЗначений.Индекс(СтрокаОстатка)-1];
			
		Если ПредыдущаяСтрока.ВидЕжегодногоОтпуска <> СтрокаОстатка.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(КонецДня(ПредыдущаяСтрока.РабочийГодОкончание)+1) <> НачалоДня(СтрокаОстатка.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Периоды отпуска ""%1"" указаны неверно. Периоды не должны прерываться или накладываться друг на друга.'"), СтрокаОстатка.ВидЕжегодногоОтпуска),
				"",ТаблицаЗначений.Индекс(СтрокаОстатка));
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПроверитьКорректностьДатПоследнегоПериода(ДанныеФормы, ДатаОстатков, ПутьКДанным, Ошибки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ВидЕжегодногоОтпуска,
		|	ТЗ.РабочийГодНачало,
		|	ТЗ.РабочийГодОкончание
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ВТОстатки.РабочийГодОкончание) КАК РабочийГодОкончание
		|ПОМЕСТИТЬ ВТПоследниеРабочиеГода
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстатки.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	ВТОстатки.РабочийГодНачало,
		|	ВТОстатки.РабочийГодОкончание,
		|	ВЫБОР
		|		КОГДА &ДатаОстатков МЕЖДУ ВТОстатки.РабочийГодНачало И ВТОстатки.РабочийГодОкончание
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВведенНеКорректно
		|ПОМЕСТИТЬ ИтоговыеПериоды
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеРабочиеГода КАК ВТПоследниеРабочиеГода
		|		ПО ВТОстатки.ВидЕжегодногоОтпуска = ВТПоследниеРабочиеГода.ВидЕжегодногоОтпуска
		|			И ВТОстатки.РабочийГодОкончание = ВТПоследниеРабочиеГода.РабочийГодОкончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеПериоды.ВидЕжегодногоОтпуска
		|ИЗ
		|	ИтоговыеПериоды КАК ИтоговыеПериоды
		|ГДЕ
		|	ИтоговыеПериоды.ВведенНеКорректно";
	Запрос.УстановитьПараметр("ТЗ", ДанныеФормы.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДанным,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Последний период остатков отпуска ""%1"" должен захватывать дату остатков.'"),ВыборкаДетальныеЗаписи.ВидЕжегодногоОтпуска),
			"");
	КонецЦикла;

КонецПроцедуры

#Область СтажевыеОтпуска

Процедура СоздатьВТВидыОтпусковЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТВидыОтпусковЗависящиеОтСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ЭтоСтажевыйОтпуск(ВидОтпуска) Экспорт
	ХарактерЗависимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ХарактерЗависимостиДнейОтпуска");
	Возврат (ХарактерЗависимости = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа"));
КонецФункции 

#Область ФормыСтажевыхОтпусков

// Возвращает структуру с параметрами для ДополнитьТабличнуюЧастьСтажевымиЭлементами.
//
Функция ПараметрыДляДополнитьТабличнуюЧастьСтажевымиЭлементами() Экспорт 

	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Форма");
	ПараметрыВызова.Вставить("ИмяТаблицы");
	ПараметрыВызова.Вставить("ТабличнаяЧастьВОбъекте", Ложь);
	ПараметрыВызова.Вставить("ЗаполнятьРеквизитыПоСотруднику", Ложь);
	ПараметрыВызова.Вставить("Сотрудник");
	ПараметрыВызова.Вставить("ДатаСреза");

	Возврат ПараметрыВызова;
	
КонецФункции

// Дополняет форму "виртуальными" колонками, необходимыми для стажевых отпусков
// 
Процедура ДополнитьТабличнуюЧастьСтажевымиЭлементами(ПараметрыВызова) Экспорт

	ПутьКТаблице = ?(ПараметрыВызова.ТабличнаяЧастьВОбъекте, "Объект.", "") + ПараметрыВызова.ИмяТаблицы;
	
	Форма = ПараметрыВызова.Форма;
	
	// Добавляем реквизит
	МассивРеквизитов = Новый Массив;
	Если Форма.Элементы.Найти("ОписаниеСтажевыхПоказателей") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОписаниеСтажевыхПоказателей", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	Если Форма.Элементы.Найти("ОтпускЗависитОтСтажа") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОтпускЗависитОтСтажа", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКТаблице);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, МассивРеквизитов, МассивИменРеквизитовФормы);
	
	Если ПараметрыВызова.ТабличнаяЧастьВОбъекте Тогда
		ТЧЕжегодныеОтпуска = Форма.Объект[ПараметрыВызова.ИмяТаблицы];
	Иначе
		ТЧЕжегодныеОтпуска = Форма[ПараметрыВызова.ИмяТаблицы];
	КонецЕсли; 
	
	Если ПараметрыВызова.ЗаполнятьРеквизитыПоСотруднику Тогда
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска, ПараметрыВызова.Сотрудник, ПараметрыВызова.ДатаСреза);
		
		// Добавляем элементы формы
		ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Найти(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		Если ПолеОписаниеСтажевыхПоказателей = Неопределено Тогда
			ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Добавить(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей", Тип("ПолеФормы"), Форма.Элементы["ЕжегодныеОтпускаГруппаВидОтпуска"]);
			ПолеОписаниеСтажевыхПоказателей.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеОписаниеСтажевыхПоказателей.ТолькоПросмотр = Истина;
			ПолеОписаниеСтажевыхПоказателей.ОтображатьВШапке = Ложь;
			ПолеОписаниеСтажевыхПоказателей.Ширина = 11;
			ПолеОписаниеСтажевыхПоказателей.РастягиватьПоГоризонтали = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГиперссылкаЯчейки = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеОписаниеСтажевыхПоказателей.ПутьКДанным = ПутьКТаблице + ".ОписаниеСтажевыхПоказателей";
		КонецЕсли;
		
		// Добавляем условное оформление
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		
	Иначе
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска);
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "КоличествоДнейВГод");
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(СтрокаОтпуска, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт

	ДатаСреза = ?(ДатаСреза = Неопределено, Дата(1,1,1), ДатаСреза);
	
	СтрокаОтпуска.ОтпускЗависитОтСтажа = ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска);
	Если СтрокаОтпуска.ОтпускЗависитОтСтажа Тогда
		
		СтрокаОтпуска.КоличествоДнейВГод = 0;
		
		Если Сотрудник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Получим стажи сотрудника.
		ВидСтажаОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтпуска.ВидЕжегодногоОтпуска, "ВидСтажа");
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		СтрокаСотрудник = ТаблицаСотрудников.Добавить();
		СтрокаСотрудник.Сотрудник = Сотрудник;
		СтрокаСотрудник.Период = ДатаСреза;
		
		СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(ТаблицаСотрудников);
		СтажиСотрудника = СтажиСотрудников.Получить(Сотрудник);
		НужныйОтпускуСтажСотрудника = СтажиСотрудника.Получить(ВидСтажаОтпуска);
		
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставленияКомандыВводаСтажейСотрудника(
						СтажиСотрудника, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидСтажаОтпуска));
	Иначе
						
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ДанныеТЧФормы, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт
	
	Для каждого ПравоНаОтпуск Из ДанныеТЧФормы Цикл
		ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(ПравоНаОтпуск, Сотрудник, ДатаСреза);
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область ДвиженияСтажевыхОтпусков

// Процедура проверяет взаимосвязи вторичных стажевых движений по регистру сведений ПоложенныеВидыЕжегодныхОтпусков.
// В случае необходимости - корректирует записи прошлых документов.
//
Процедура ОчиститьПредыдущиеДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись отдельного набора в котором не нужно проводить обработку
	// начислений зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	// Выбираем движения отпусков, зависящих от стажа.
	МенеджерВременныхТаблицТекущий = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	
	СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Источник, МенеджерВременныхТаблицТекущий);

	Если Не ЕстьСтрокиВоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа") Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем движения, которые "наползают" на Источник.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий КАК Регистратор
		|ПОМЕСТИТЬ ВТОбновляемыеРегистраторы
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.Добавляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеРегистраторы КАК ВТОбновляемыеРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТОбновляемыеРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СведенияОДвиженииПоложенныхОтпусков.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|			И НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ)
		|			И (ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись)
		|			И (СведенияОДвиженииПоложенныхОтпусков.Добавляется)
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Период ЕСТЬ NULL 
		|ИТОГИ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоРегистраторам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
			
			ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаПоЗаписям);
			КонецЦикла; 
			
			Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблицТекущий);
	
КонецПроцедуры

// Процедура дополняет стажевые движения вторичными стажевыми записями.
//
Процедура ДополнитьДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	// Запись отдельного набора в котором не нужно проводить обработку
	// отпусков зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли; 
	
	// МенеджерВременныхТаблиц должен быть сформирован ПередЗаписью
	Если НЕ Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	МенеджерВременныхТаблицТекущий = Источник.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Источник.ДополнительныеСвойства.Удалить("МенеджерВременныхТаблиц");
	
	// В случае, если есть зависящие от стажа отпуска, генерируем вторичные стажевые записи.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Источник, МенеджерВременныхТаблицТекущий) Тогда
			Источник.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Источник.ОбменДанными.Загрузка = Истина;
			Источник.Записать();
		КонецЕсли; 
	КонецЕсли;

	// В случае если движения удаляются - надо "продлить" вторичные движения предыдущего регистратора.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий КАК Регистратор
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Получим набор записей предыдущего регистратора.
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Прочитать();
			// Генерируем для него вторичные стажевые записи.
			МенеджерВременныхТаблицПоНаборуЗаписей = Новый МенеджерВременныхТаблиц;
			СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Набор, МенеджерВременныхТаблицПоНаборуЗаписей);
			Если Не ЕстьСтрокиВоВременнойТаблице(МенеджерВременныхТаблицПоНаборуЗаписей, "ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа") Тогда
				Продолжить;
			КонецЕсли; 
			Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Набор, МенеджерВременныхТаблицПоНаборуЗаписей) Тогда
				Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
				Набор.Записать();
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт
		
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЗаписываемыйНабор = НаборЗаписей.Выгрузить();
	
	// Устанавливаем время.
	ВремяРегистрацииДокумента = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	Если ВремяРегистрацииДокумента = Неопределено Тогда
		СотрудникиДаты = ЗаписываемыйНабор.Скопировать(, "Период, Сотрудник");
		СотрудникиДаты.Колонки.Период.Имя = "ДатаСобытия";
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, СотрудникиДаты);
	КонецЕсли;
	Для Каждого СтрокаДвижений Из ЗаписываемыйНабор Цикл
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(НачалоДня(СтрокаДвижений.Период));
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			СтрокаДвижений.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидОтпуска
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	МассивВидовОтпусков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
	
	ЕстьВНабореСтажевыйОтпуск = Ложь;
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		
		Если МассивВидовОтпусков.Найти(СтрокаНабора.ВидЕжегодногоОтпуска) <> Неопределено Тогда
			ЕстьВНабореСтажевыйОтпуск = Истина;
		КонецЕсли;		
		
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле
	|ИЗ
	|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	|ГДЕ
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
	|	И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска В(&ВидыОтпусковЗависящихОтСтажа)";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ВидыОтпусковЗависящихОтСтажа", МассивВидовОтпусков);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ЕстьВНабореСтажевыйОтпуск 
		И РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка) КАК ВидЕжегодногоОтпуска,
		|	ЛОЖЬ КАК Используется,
		|	0 КАК КоличествоДнейВГод,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ЛОЖЬ КАК ИспользуетсяПоОкончании,
		|	0 КАК КоличествоДнейВГодПоОкончании,
		|	ЛОЖЬ КАК ПересчетНеТребуется,
		|	ЛОЖЬ КАК ВторичнаяЗапись,
		|	ЛОЖЬ КАК Добавляется,
		|	ЛОЖЬ КАК Удаляется,
		|	ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковОтпусков.ПустаяСсылка) КАК РегистраторПредыдущий,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПоследующегоРегистратора,
		|	ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатковОтпусков.ПустаяСсылка) КАК РегистраторПоследующий
		|ПОМЕСТИТЬ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа";

		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;	
	
	СоздатьВТВидыОтпусковЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", ЗаписываемыйНабор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписываемыйНабор.Период,
		|	&Регистратор КАК Регистратор,
		|	ЗаписываемыйНабор.Сотрудник,
		|	ЗаписываемыйНабор.ВидЕжегодногоОтпуска,
		|	ЗаписываемыйНабор.Используется,
		|	ЗаписываемыйНабор.КоличествоДнейВГод,
		|	ЗаписываемыйНабор.ДействуетДо,
		|	ЗаписываемыйНабор.ИспользуетсяПоОкончании,
		|	ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании,
		|	ЗаписываемыйНабор.ПересчетНеТребуется,
		|	ЗаписываемыйНабор.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТЗаписываемыйНабор
		|ИЗ
		|	&ЗаписываемыйНабор КАК ЗаписываемыйНабор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Регистратор, ЗаписываемыйНабор.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ТекущийНабор.ВидЕжегодногоОтпуска, ЗаписываемыйНабор.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ТекущийНабор.Используется, ЗаписываемыйНабор.Используется) КАК Используется,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГод, ЗаписываемыйНабор.КоличествоДнейВГод) КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ТекущийНабор.ДействуетДо, ЗаписываемыйНабор.ДействуетДо) КАК ДействуетДо,
		|	ЕСТЬNULL(ТекущийНабор.ИспользуетсяПоОкончании, ЗаписываемыйНабор.ИспользуетсяПоОкончании) КАК ИспользуетсяПоОкончании,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГодПоОкончании, ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании) КАК КоличествоДнейВГодПоОкончании,
		|	ЕСТЬNULL(ЗаписываемыйНабор.ПересчетНеТребуется, ЛОЖЬ) КАК ПересчетНеТребуется,
		|	ЕСТЬNULL(ТекущийНабор.ВторичнаяЗапись, ЗаписываемыйНабор.ВторичнаяЗапись) КАК ВторичнаяЗапись,
		|	ВЫБОР
		|		КОГДА ТекущийНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавляется,
		|	ВЫБОР
		|		КОГДА ЗаписываемыйНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаляется
		|ПОМЕСТИТЬ ВТЗаписиСОтпускамиЗависящимиОтСтажа
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНабор КАК ЗаписываемыйНабор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|			ПО ЗаписываемыйНабор.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|			И ТекущийНабор.ВидЕжегодногоОтпуска = ЗаписываемыйНабор.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период) КАК ПериодПредыдущегоРегистратора,
		|	МИНИМУМ(ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период) КАК ПериодПоследующегоРегистратора
		|ПОМЕСТИТЬ ВТПериодыРегистрации
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период > ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период < ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|			И (НЕ ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВторичнаяЗапись)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Используется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГод,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ДействуетДо,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ИспользуетсяПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГодПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ПересчетНеТребуется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВторичнаяЗапись,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Добавляется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Удаляется,
		|	ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор КАК РегистраторПредыдущий,
		|	ПериодыРегистрации.ПериодПоследующегоРегистратора,
		|	ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор КАК РегистраторПоследующий
		|ПОМЕСТИТЬ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРегистрации КАК ПериодыРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|			ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|			ПО ПериодыРегистрации.ПериодПоследующегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Период = ПериодыРегистрации.Период
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПериодыРегистрации.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПериодыРегистрации.ВидЕжегодногоОтпуска";

	Запрос.Выполнить();

КонецПроцедуры

// Дополняет набор движений по регистру ПоложенныеВидыЕжегодныхОтпусков вторичными стажевыми записями.
//
Функция ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ПерезаполнитьНабор = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ) КАК НачалоПериода,
		|	СведенияОДвиженииПоложенныхОтпусков.Сотрудник,
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияОДвиженииПоложенныхОтпусков.ПериодПоследующегоРегистратора, &ТекущаяДата), ДЕНЬ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.ПересчетНеТребуется";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	Если ТаблицаДополненныхСтажевыхЗаписей.Количество() > 0 Тогда
		Если ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей) Тогда
			ПерезаполнитьНабор = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПерезаполнитьНабор Тогда
		НаборЗаписей.Загрузить(ТаблицаНабора);
	КонецЕсли; 
	
	Возврат ПерезаполнитьНабор;
	
КонецФункции

Функция ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, ИмяВТДополняемыеОтпуска)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТВидыОтпусков
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
		
	СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДополняемыеОтпуска.Сотрудник,
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГод,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТСотрудникиИШкалаСтажа
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями КАК ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|		ПО ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска = ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.НачалоПериода КАК Период,
		|	Сотрудники.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДополняемыеОтпуска КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц);
	
	// Накладываем шкалу изменения стажей сотрудников на шкалу прав на отпуска.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее КАК КоличествоДнейВГод,
		|	МИНИМУМ(ВТПериодыИзмененияСтажа.ДатаСтажа) КАК ДатаСтажа
		|ПОМЕСТИТЬ ВТПериодыСтажаСотрудниковСПоказателями
		|ИЗ
		|	ВТСотрудникиИШкалаСтажа КАК ВТСотрудникиИШкалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ВТПериодыИзмененияСтажа
		|		ПО ВТСотрудникиИШкалаСтажа.Сотрудник = ВТПериодыИзмененияСтажа.Сотрудник
		|			И ВТСотрудникиИШкалаСтажа.ВидСтажа = ВТПериодыИзмененияСтажа.ВидСтажа
		|			И ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа <= ВТПериодыИзмененияСтажа.ЗначениеСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа,
		|	МАКСИМУМ(ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажа
		|ПОМЕСТИТЬ ВТУказателиМаксимальныхПериодов
		|ИЗ
		|	ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|ГДЕ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа КАК Период,
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВидЕжегодногоОтпуска,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТПериодыСтажаСотрудниковСПоказателями.КоличествоДнейВГод
		|ИЗ
		|	ВТУказателиМаксимальныхПериодов КАК ВТУказателиМаксимальныхПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|		ПО ВТУказателиМаксимальныхПериодов.Сотрудник = ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник
		|			И ВТУказателиМаксимальныхПериодов.ВерхняяГраницаИнтервалаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа
		|			И ВТУказателиМаксимальныхПериодов.ДатаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей)
	
	// Нормализуем время, читаем сдвиг
	ТаблицаНабора.Колонки.Добавить("ДатаНачалаДня", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТаблицы Из ТаблицаНабора Цикл
		СтрокаТаблицы.ДатаНачалаДня = НачалоДня(СтрокаТаблицы.Период);
	КонецЦикла; 
	
	ТаблицаДополненныхСтажевыхЗаписей.Сортировать("Сотрудник, Период, ВидЕжегодногоОтпуска", Новый СравнениеЗначений);
	ПерезаполнитьНабор = Ложь;
	
	Для каждого СтрокаТаблицы Из ТаблицаДополненныхСтажевыхЗаписей Цикл
		
		НайденныеСтрокиОтпусков = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачалаДня, ВидЕжегодногоОтпуска", СтрокаТаблицы.Сотрудник, НачалоДня(СтрокаТаблицы.Период), СтрокаТаблицы.ВидЕжегодногоОтпуска));
		Если НайденныеСтрокиОтпусков.Количество() > 0 Тогда
			СтрокаОтпуска = НайденныеСтрокиОтпусков[0];
			Если СтрокаОтпуска.КоличествоДнейВГод <> СтрокаТаблицы.КоличествоДнейВГод Тогда
				СтрокаОтпуска.КоличествоДнейВГод = СтрокаТаблицы.КоличествоДнейВГод;
				ПерезаполнитьНабор = Истина;
			КонецЕсли;
		Иначе
			// Ищем первичную запись
			НайденнаяПервичнаяЗапись = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска, ВторичнаяЗапись", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ВидЕжегодногоОтпуска, Ложь));
			Если НайденнаяПервичнаяЗапись.Количество() > 0 Тогда
				
				ПерезаполнитьНабор = Истина;
				НоваяСтрока = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяПервичнаяЗапись[0]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ДатаНачалаДня = НачалоДня(НоваяСтрока.Период);
				НоваяСтрока.Период = НоваяСтрока.ДатаНачалаДня;
				НоваяСтрока.ВторичнаяЗапись = Истина;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ДействуетДо)
					И НоваяСтрока.Период >= НоваяСтрока.ДействуетДо Тогда
					
					НоваяСтрока.ДействуетДо = '00010101';
					НоваяСтрока.КоличествоДнейВГодПоОкончании = 0;
					НоваяСтрока.ИспользуетсяПоОкончании = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ПерезаполнитьНабор;
		
КонецФункции

// Процедура формирует ВТ видов стажевых отпусков с развернутым представлением, необходимым для соединения с ВТПериодыИзмененияСтажа.
// 
Процедура СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(МенеджерВременныхТаблиц, ИмяВТВидовОтпусков = "ВТВидыОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТСтажевыеОтпуска
		|ИЗ
		|	ВТВидыОтпусков КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОтпусковШкалаОценкиСтажа.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
		|			ТОГДА 9999
		|		ИНАЧЕ ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа
		|	КОНЕЦ КАК ВерхняяГраницаИнтервалаСтажа,
		|	ВидыОтпусковШкалаОценкиСтажа.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТИнтервалыСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков.ШкалаОценкиСтажа КАК ВидыОтпусковШкалаОценкиСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|		ПО ВидыОтпусковШкалаОценкиСтажа.Ссылка = СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска,
		|	0,
		|	0
		|ИЗ
		|	ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	МИНИМУМ(ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажаСледующая
		|ПОМЕСТИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|ИЗ
		|	ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажа.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа < ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа,
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа,
		|	ВТИнтервалыСтажа.КоличествоДнейВГод КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ВТИнтервалыСтажаСледующие.КоличествоДнейВГод, ВТИнтервалыСтажа.КоличествоДнейВГод) КАК КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|ИЗ
		|	ВТИнтервалыСтажаСУказателямиСледующих КАК ВТИнтервалыСтажаСУказателямиСледующих
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажа.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа = ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажаСледующая = ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтажевыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВидыОтпусков", ИмяВТВидовОтпусков);		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

Процедура ДополнитьТаблицуОтпусков(ТаблицаДополнение, ТаблицаОтпусков = Неопределено)

	Если ТаблицаОтпусков = Неопределено Тогда
		ТаблицаОтпусков = Новый ТаблицаЗначений;
		ТаблицаОтпусков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаОтпусков.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	Для каждого СтрокаДополнения Из ТаблицаДополнение Цикл
		Если ТаблицаОтпусков.Найти(СтрокаДополнения.ВидЕжегодногоОтпуска, "ВидОтпуска") = Неопределено Тогда
			НовыйОтпуск = ТаблицаОтпусков.Добавить();
			НовыйОтпуск.ВидОтпуска = СтрокаДополнения.ВидЕжегодногоОтпуска;
			НовыйОтпуск.Приоритет = ?(СтрокаДополнения.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"),1,2);
		КонецЕсли;
	КонецЦикла; 

	ТаблицаОтпусков.Сортировать("Приоритет,ВидОтпуска");
	
КонецПроцедуры

Функция НайтиВидОтпускаВМассивеСтруктур(МассивСтруктур, ВидОтпуска)

	ВозвращаемыйМассив = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из МассивСтруктур Цикл
		Если ВидОтпуска = ЭлементСтруктуры.ВидЕжегодногоОтпуска Тогда
			ВозвращаемыйМассив.Добавить(ЭлементСтруктуры);
		КонецЕсли;
	КонецЦикла; 
	
	Если ВозвращаемыйМассив.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВозвращаемыйМассив;
	КонецЕсли;

КонецФункции

Процедура ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаПравЗависящихОтСтажа, СтрокиПравЗависящихОтСтажа)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПравЗависящихОтСтажа.НачалоПериода,
		|	ТаблицаПравЗависящихОтСтажа.Сотрудник,
		|	ТаблицаПравЗависящихОтСтажа.ВидЕжегодногоОтпуска,
		|	ТаблицаПравЗависящихОтСтажа.ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	&ТаблицаПравЗависящихОтСтажа КАК ТаблицаПравЗависящихОтСтажа";
	Запрос.УстановитьПараметр("ТаблицаПравЗависящихОтСтажа", ТаблицаПравЗависящихОтСтажа);	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(Запрос.МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	
	Если ТаблицаДополненныхСтажевыхЗаписей <> Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДополненныхСтажевыхЗаписей.Сотрудник,
			|	ТаблицаДополненныхСтажевыхЗаписей.ВидЕжегодногоОтпуска,
			|	ТаблицаДополненныхСтажевыхЗаписей.КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТДвижения
			|ИЗ
			|	&ТаблицаДополненныхСтажевыхЗаписей КАК ТаблицаДополненныхСтажевыхЗаписей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска,
			|	МАКСИМУМ(ВТДвижения.КоличествоДнейВГод) КАК КоличествоДнейВГод
			|ИЗ
			|	ВТДвижения КАК ВТДвижения
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска";
		Запрос.УстановитьПараметр("ТаблицаДополненныхСтажевыхЗаписей", ТаблицаДополненныхСтажевыхЗаписей);	
		ТаблицаЗначенийПоОкончании = Запрос.Выполнить().Выгрузить();
	
		Для каждого СтрокаНабора Из СтрокиПравЗависящихОтСтажа Цикл
			НайденныеСтроки = ТаблицаЗначенийПоОкончании.НайтиСтроки(Новый Структура("Сотрудник,ВидЕжегодногоОтпуска", СтрокаНабора.Сотрудник, СтрокаНабора.ВидЕжегодногоОтпуска));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНабора.КоличествоДнейВГодПоОкончании = НайденныеСтроки[0].КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу с правами сотрудников на ежегодные отпуска.
// Создает ВТ со следующими колонками:
// 		Сотрудник
// 		ВидЕжегодногоОтпуска
// 		КоличествоДнейВГод
// Параметры:
// 		МенеджерВременныхТаблиц
// 		ОписаниеФильтра
//			- Таблица значений, с колонками совпадающими с измерениями регистра ПоложенныеВидыЕжегодныхОтпусков.
//			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
// 		РегистраторСсылка - исключаемый регистратор
// 		ИмяВТ - имя создаваемой временной таблицы.
//
Процедура СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, Знач ОписаниеФильтра, РегистраторСсылка = Неопределено, ТолькоАктуальные = Истина, ИмяВТ = "ВТПоложенныеВидыЕжегодныхОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(ОписаниеФильтра) = Тип("ТаблицаЗначений") Тогда
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра);
	КонецЕсли;
	
	// Формируем ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Истина;
	Если РегистраторСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторСсылка);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПоложенныеВидыЕжегодныхОтпусков",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоложенныеВидыЕжегодныхОтпусков.Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПериодЗаписи,
	|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
	|ПОМЕСТИТЬ ВТПоложенныеВидыЕжегодныхОтпусков
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних КАК ПоложенныеВидыЕжегодныхОтпусков";
	
	Если ТолькоАктуальные Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПоложенныеВидыЕжегодныхОтпусков", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

// Удаляет записи о правах на ежегодный отпуск, у которых количество дней не меняется по сравнению с
// предыдущей записью.
Процедура УдалитьДублиПрав(МассивПрав)

	Если МассивПрав.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееПраво = МассивПрав[0];
	ПраваНаОтпускДляУдаления	= Новый Массив;
	
	Для Каждого ПравоНаОтпуск Из МассивПрав Цикл
		Если МассивПрав.Найти(ПравоНаОтпуск) = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПредыдущееПраво.ВидЕжегодногоОтпуска <> ПравоНаОтпуск.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоНаОтпуск.КоличествоДнейОтпускаВГод = ПредыдущееПраво.КоличествоДнейОтпускаВГод Тогда
			ПраваНаОтпускДляУдаления.Добавить(ПредыдущееПраво);
		КонецЕсли;
		ПредыдущееПраво = ПравоНаОтпуск;
	КонецЦикла;
	
	Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
		МассивПрав.Удалить(МассивПрав.Найти(ПравоНаОтпуск));
	КонецЦикла;

КонецПроцедуры

Функция КоличествоДнейОтпускаПоТерриториальнымУсловиямПФР(ТерриториальныеУсловия)
	
	Если ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ Тогда
		Возврат 24;
	ИначеЕсли ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
		Возврат 16
	ИначеЕсли ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.ПРОЧ Тогда
		Возврат 8;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СправкаПоОтпускам);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОстаткиОтпусков);
	
КонецПроцедуры

Процедура ОчиститьЗаработанныеПрава() Экспорт

	// Очищаем.
	НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();
	
	// Рассчитываем.
	РасчетЗаработанныхОтпусков();
	
КонецПроцедуры

// Раскладывает таблицу остатков в разные коллекции для различных потребителей.
// Параметры:
//  ОстаткиОтпусков - таблица значений, см. возвращаемую таблицу ОстаткиОтпусков.ОстаткиОтпусков().
//  Сотрудник 		- Необязательный, отбор по сотрудника.
//  ВидОтпуска 		- Необязательный, отбор по виду отпуска.
//
Функция РазложитьТаблицуОстатковОтпусков(ОстаткиОтпусков, Сотрудник = Неопределено, ВидОтпуска = Неопределено)

	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОстатков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаОстатков.Колонки.Добавить("ВидОтпускаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОстатков.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ТаблицаОстатков.Колонки.Добавить("РабочийГодДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("РабочийГодДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаОстатка Из ОстаткиОтпусков Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОстатков.Добавить(), СтрокаОстатка);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОстатков.Сотрудник,
		|	ТаблицаОстатков.ВидОтпуска КАК ВидЕжегодногоОтпуска,
		|	ТаблицаОстатков.ВидОтпускаНаименование,
		|	ТаблицаОстатков.Дни КАК КоличествоДней,
		|	ТаблицаОстатков.РабочийГодДатаНачала КАК РабочийГодС,
		|	ТаблицаОстатков.РабочийГодДатаОкончания КАК РабочийГодПо
		|ПОМЕСТИТЬ ВТОстаткиОтпусков
		|ИЗ
		|	&ТаблицаОстатков КАК ТаблицаОстатков
		|ГДЕ
		|	ТаблицаОстатков.Дни <> 0
		|	И &УсловиеПоСотруднику
		|	И &УсловиеПоВидуОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	СУММА(ВТОстаткиОтпусков.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ВТОстаткиОтпусков.РабочийГодС) КАК РабочийГодС,
		|	МАКСИМУМ(ВТОстаткиОтпусков.РабочийГодПо) КАК РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	СУММА(ВТОстаткиОтпусков.КоличествоДней) КАК КоличествоДней,
		|	МИНИМУМ(ВТОстаткиОтпусков.РабочийГодС) КАК РабочийГодС,
		|	МАКСИМУМ(ВТОстаткиОтпусков.РабочийГодПо) КАК РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|ГДЕ
		|	ВТОстаткиОтпусков.КоличествоДней > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстаткиОтпусков.Сотрудник,
		|	ВТОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	ВТОстаткиОтпусков.ВидОтпускаНаименование,
		|	ВТОстаткиОтпусков.КоличествоДней,
		|	ВТОстаткиОтпусков.РабочийГодС,
		|	ВТОстаткиОтпусков.РабочийГодПо
		|ИЗ
		|	ВТОстаткиОтпусков КАК ВТОстаткиОтпусков
		|ГДЕ
		|	ВТОстаткиОтпусков.КоличествоДней < 0";
	
	Если Сотрудник = Неопределено Тогда
	    ТекстУсловияОтбораПоСотруднику = "ИСТИНА"
	Иначе
		Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
			СотрудникОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
		Иначе
			СотрудникОтбор = Сотрудник;
		КонецЕсли;
		ТекстУсловияОтбораПоСотруднику = "Сотрудник В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", СотрудникОтбор);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", ТекстУсловияОтбораПоСотруднику);
	
	Если ВидОтпуска = Неопределено Тогда
	    ТекстУсловияОтбораПоВидуОтпуска = "ИСТИНА"
	Иначе
		Если ТипЗнч(ВидОтпуска) <> Тип("Массив") Тогда
			ВидОтпускаОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидОтпуска);
		Иначе
			ВидОтпускаОтбор = ВидОтпуска;
		КонецЕсли;
		ТекстУсловияОтбораПоВидуОтпуска = "ВидОтпуска В(&ВидыОтпуска)";
		Запрос.УстановитьПараметр("ВидыОтпуска", ВидОтпускаОтбор);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуОтпуска", ТекстУсловияОтбораПоВидуОтпуска);
	
	Запрос.УстановитьПараметр("ТаблицаОстатков", ТаблицаОстатков);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Запросов = РезультатПакета.Количество();
	
	СтруктураОстатковОтпусков = Новый Структура;
	СтруктураОстатковОтпусков.Вставить("ОстаткиОтпусков", РезультатПакета[Запросов - 5].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОстаткиОтпусковПоВидуОтпуска", РезультатПакета[Запросов - 4].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков", РезультатПакета[Запросов - 3].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ПоложительныеОстатки", РезультатПакета[Запросов - 2].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ОтрицательныеОстатки", РезультатПакета[Запросов - 1].Выгрузить());
	СтруктураОстатковОтпусков.Вставить("ЕстьОстатки", (НЕ РезультатПакета[Запросов - 1].Пустой()) ИЛИ (НЕ РезультатПакета[Запросов - 2].Пустой()));
	
	Возврат СтруктураОстатковОтпусков;

КонецФункции

Функция ПустаяТаблицаЗаработанныхДней()
	
	ТаблицаЗаработанныхДней = Новый ТаблицаЗначений;
	
	ТаблицаЗаработанныхДней.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("Период",					Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДней.Колонки.Добавить("КоличествоДней",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)));
	ТаблицаЗаработанныхДней.Колонки.Добавить("КоличествоДнейЗаПериод",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 5)));

	Возврат ТаблицаЗаработанныхДней;
	
КонецФункции

Функция ПустаяТаблицаСобытий()

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ПоследнееСобытие", Новый ОписаниеТипов("Булево"));
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
	ТаблицаСобытий.Колонки.Добавить("НачальныеОстаткиОтпусков");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	ТаблицаСобытий.Колонки.Добавить("Отклонения");
	ТаблицаСобытий.Колонки.Добавить("ПродлениеРабочегоГода");
	ТаблицаСобытий.Колонки.Добавить("ДатаПредыдущегоСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("НакопленоСПредыдущегоСобытия");
	ТаблицаСобытий.Колонки.Добавить("РабочиеГодаОтпусков");

	Возврат ТаблицаСобытий;
	
КонецФункции

Функция ПустаяТаблицаОтпусков()
	
	ТаблицаОтпусков = Новый ТаблицаЗначений;
	
	ТаблицаОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаОтпусков.Колонки.Добавить("КоличествоДнейВГод");
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

Функция ЭтоВисокосныйМесяц(ДатаГода)
	
	Если Месяц(ДатаГода) = 2 Тогда
		ПроверяемыйГод = Год(ДатаГода);
		Возврат ПроверяемыйГод / 400 = Цел(ПроверяемыйГод / 400)
			ИЛИ ПроверяемыйГод / 4 = Цел(ПроверяемыйГод / 4)
			И ПроверяемыйГод / 100 <> Цел(ПроверяемыйГод / 100);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбрезатьДатуОкончанияРабочегоГода(ДатаОкончания, СотрудникБезПрава)

	Если СотрудникБезПрава.ЭтоРасчетПриУвольнении Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания	= Мин(ДатаОкончания, КонецДня(СотрудникБезПрава.ДатаОстатков));
		Иначе
			ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаОстатков);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СотрудникБезПрава.ДатаУвольнения) Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания	= Мин(ДатаОкончания, КонецДня(СотрудникБезПрава.ДатаУвольнения));
		Иначе
			ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаУвольнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#Область ДляДополнитьШтатноеРасписаниеЕжегоднымиОтпусками
	
Процедура СформироватьВТОтпускаШтатного(Запрос)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШР,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата <= &ДатаСреза
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШР КАК ПозицияШР,
			|	МАКСИМУМ(ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТИсторияОтпусковУказателиПоследних
			|ИЗ
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШР КАК ПозицияШР,
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТПраваНаОтпускаВРегистре
			|ИЗ
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсторияОтпусковУказателиПоследних КАК ВТИсторияОтпусковУказателиПоследних
			|		ПО ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШР = ВТИсторияОтпусковУказателиПоследних.ПозицияШР
			|			И ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата = ВТИсторияОтпусковУказателиПоследних.Дата
			|ГДЕ
			|	ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШтатноеРасписание.Ссылка КАК ПозицияШР,
			|	ШтатноеРасписание.Должность КАК Должность,
			|	ШтатноеРасписание.Владелец КАК Организация,
			|	ШтатноеРасписание.Подразделение КАК Подразделение,
			|	ЕСТЬNULL(ВТПраваНаОтпускаВРегистре.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК ВидЕжегодногоОтпуска,
			|	ЕСТЬNULL(ВТПраваНаОтпускаВРегистре.КоличествоДнейВГод, 0) КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТОтпускаШтатного
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаОтпускаВРегистре КАК ВТПраваНаОтпускаВРегистре
			|		ПО ШтатноеРасписание.Ссылка = ВТПраваНаОтпускаВРегистре.ПозицияШР
			|ГДЕ
			|	НЕ ШтатноеРасписание.ГруппаПозицийПодразделения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТИсторияОтпусковУказателиПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПраваНаОтпускаВРегистре";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтатноеРасписание.Ссылка КАК ПозицияШР,
			|	ШтатноеРасписание.Должность КАК Должность,
			|	ШтатноеРасписание.Владелец КАК Организация,
			|	ШтатноеРасписание.Подразделение КАК Подразделение,
			|	ЕСТЬNULL(ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска, ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)) КАК ВидЕжегодногоОтпуска,
			|	ЕСТЬNULL(ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод, 0) КАК КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТОтпускаШтатного
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|		ПО ШтатноеРасписание.Ссылка = ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка
			|ГДЕ
			|	НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
		
	КонецЕсли;
	Запрос.Выполнить();

КонецПроцедуры

Функция СформироватьВТДополненияШтатногоСпецОтпусками(Запрос)

	ОтпускЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	ОтпускСеверный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	
	Если НЕ ЗначениеЗаполнено(ОтпускСеверный) И НЕ ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВредныйОтпуск", ОтпускЗаВредность);
	Запрос.УстановитьПараметр("СеверныйОтпуск", ОтпускСеверный);
	
	Если ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Должности.Ссылка КАК Должность,
			|	Должности.КоличествоДнейДополнительногоОтпускаВГод КАК КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТВредныеОтпуска
			|ИЗ
			|	Справочник.Должности КАК Должности
			|ГДЕ
			|	Должности.КоличествоДнейДополнительногоОтпускаВГод > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТОтпускаШтатного.ПозицияШР
			|ПОМЕСТИТЬ ВТПозицииСВреднойДолжностью
			|ИЗ
			|	ВТОтпускаШтатного КАК ВТОтпускаШтатного
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВредныеОтпуска КАК ВТВредныеОтпуска
			|		ПО ВТОтпускаШтатного.Должность = ВТВредныеОтпуска.Должность
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТОтпускаШтатного.ПозицияШР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТОтпускаШтатного.ПозицияШР,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТОтпускаШтатного.ВидЕжегодногоОтпуска = &ВредныйОтпуск
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ЕстьВредныйОтпуск
			|ПОМЕСТИТЬ ВТДополняемыеПозиции
			|ИЗ
			|	ВТПозицииСВреднойДолжностью КАК ВТПозицииСВреднойДолжностью
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтпускаШтатного КАК ВТОтпускаШтатного
			|		ПО ВТПозицииСВреднойДолжностью.ПозицияШР = ВТОтпускаШтатного.ПозицияШР
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТОтпускаШтатного.ПозицияШР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДополняемыеПозиции.ПозицияШР
			|ПОМЕСТИТЬ ВТДополняемыеВредностью
			|ИЗ
			|	ВТДополняемыеПозиции КАК ВТДополняемыеПозиции
			|ГДЕ
			|	НЕ ВТДополняемыеПозиции.ЕстьВредныйОтпуск
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДополняемыеВредностью.ПозицияШР,
			|	&ВредныйОтпуск КАК ВидЕжегодногоОтпуска,
			|	ВТВредныеОтпуска.КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТОтпускаЗаВредность
			|ИЗ
			|	ВТДополняемыеВредностью КАК ВТДополняемыеВредностью
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВредныеОтпуска КАК ВТВредныеОтпуска
			|			ПО ШтатноеРасписание.Должность = ВТВредныеОтпуска.Должность
			|		ПО ВТДополняемыеВредностью.ПозицияШР = ШтатноеРасписание.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТВредныеОтпуска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТПозицииСВреднойДолжностью
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДополняемыеПозиции
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТДополняемыеВредностью";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтпускСеверный) Тогда
		
		// Формируем список организаций, для которых включено ведение северных отпусков.
		ЗапросОрганизаций = Новый Запрос;
		ЗапросОрганизаций.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадры.Организация
		|ИЗ
		|	РегистрСведений.НастройкиЗарплатаКадры КАК НастройкиЗарплатаКадры
		|ГДЕ
		|	НастройкиЗарплатаКадры.ПрименятьСевернуюНадбавку";
		СеверныеОрганизации = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
		// Формируем таблицу зависимости территориальных условий и количества дней северного отпуска в год.
		ТаблицаТеррУсловий = Новый ТаблицаЗначений;
		ТаблицаТеррУсловий.Колонки.Добавить("ТерриториальныеУсловияПФР", Новый ОписаниеТипов("СправочникСсылка.ТерриториальныеУсловияПФР"));
		ТаблицаТеррУсловий.Колонки.Добавить("КоличествоДнейОтпускаВГод", Новый ОписаниеТипов("Число"));
		
		ЗапросТеррУсловий = Новый Запрос;
		ЗапросТеррУсловий.Текст = 
		"ВЫБРАТЬ
		|	ТерриториальныеУсловияПФР.Ссылка
		|ИЗ
		|	Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР";
		
		РезультатЗапроса = ЗапросТеррУсловий.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТеррУсловий = ТаблицаТеррУсловий.Добавить();
			СтрокаТеррУсловий.ТерриториальныеУсловияПФР = Выборка.Ссылка;
			СтрокаТеррУсловий.КоличествоДнейОтпускаВГод = КоличествоДнейОтпускаПоТерриториальнымУсловиямПФР(Выборка.Ссылка);
		КонецЦикла;
		
		// Формируем итоговый запрос.
		Запрос.УстановитьПараметр("СеверныеОрганизации", СеверныеОрганизации);
		Запрос.УстановитьПараметр("ТаблицаТеррУсловий", ТаблицаТеррУсловий);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТеррУсловия.ТерриториальныеУсловияПФР,
			|	ТеррУсловия.КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТТеррУсловия
			|ИЗ
			|	&ТаблицаТеррУсловий КАК ТеррУсловия
			|ГДЕ
			|	ТеррУсловия.КоличествоДнейОтпускаВГод > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница КАК Организация,
			|	ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР
			|ПОМЕСТИТЬ ВТСеверныйОрганизации
			|ИЗ
			|	РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних(&ДатаСреза, ) КАК ТерриториальныеУсловияПФРСрезПоследних
			|ГДЕ
			|	ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница.Ссылка ССЫЛКА Справочник.Организации
			|	И ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница.Ссылка В(&СеверныеОрганизации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница КАК Подразделение,
			|	ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР
			|ПОМЕСТИТЬ ВТСеверныйПодразделения
			|ИЗ
			|	РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних(&ДатаСреза, ) КАК ТерриториальныеУсловияПФРСрезПоследних
			|ГДЕ
			|	ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций
			|	И ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница.Владелец В(&СеверныеОрганизации)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТСеверныйОрганизации.Организация,
			|	ВТТеррУсловия.КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТСеверныеОтпускаОрганизаций
			|ИЗ
			|	ВТСеверныйОрганизации КАК ВТСеверныйОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТеррУсловия КАК ВТТеррУсловия
			|		ПО ВТСеверныйОрганизации.ТерриториальныеУсловияПФР = ВТТеррУсловия.ТерриториальныеУсловияПФР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТСеверныйПодразделения.Подразделение,
			|	ВТТеррУсловия.КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТСеверныеОтпускаПодразделений
			|ИЗ
			|	ВТСеверныйПодразделения КАК ВТСеверныйПодразделения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТеррУсловия КАК ВТТеррУсловия
			|		ПО ВТСеверныйПодразделения.ТерриториальныеУсловияПФР = ВТТеррУсловия.ТерриториальныеУсловияПФР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТОтпускаШтатного.ПозицияШР
			|ПОМЕСТИТЬ ВТСеверныеПозицииШР
			|ИЗ
			|	ВТОтпускаШтатного КАК ВТОтпускаШтатного
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСеверныеОтпускаОрганизаций КАК ВТСеверныеОтпускаОрганизаций
			|		ПО ВТОтпускаШтатного.Организация = ВТСеверныеОтпускаОрганизаций.Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТОтпускаШтатного.ПозицияШР
			|ИЗ
			|	ВТОтпускаШтатного КАК ВТОтпускаШтатного
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСеверныеОтпускаПодразделений КАК ВТСеверныеОтпускаПодразделений
			|		ПО ВТОтпускаШтатного.Подразделение = ВТСеверныеОтпускаПодразделений.Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТСеверныеПозицииШР.ПозицияШР,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТОтпускаШтатного.ВидЕжегодногоОтпуска = &СеверныйОтпуск
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ЕстьСеверныйОтпуск
			|ПОМЕСТИТЬ ВТДополняемыеПозиции
			|ИЗ
			|	ВТСеверныеПозицииШР КАК ВТСеверныеПозицииШР
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтпускаШтатного КАК ВТОтпускаШтатного
			|		ПО ВТСеверныеПозицииШР.ПозицияШР = ВТОтпускаШтатного.ПозицияШР
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТСеверныеПозицииШР.ПозицияШР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДополняемыеПозиции.ПозицияШР
			|ПОМЕСТИТЬ ВТДополняемыеСевернымОтпуском
			|ИЗ
			|	ВТДополняемыеПозиции КАК ВТДополняемыеПозиции
			|ГДЕ
			|	НЕ ВТДополняемыеПозиции.ЕстьСеверныйОтпуск
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДополняемыеСевернымОтпуском.ПозицияШР,
			|	&СеверныйОтпуск КАК ВидЕжегодногоОтпуска,
			|	ЕСТЬNULL(ВТСеверныеОтпускаПодразделений.КоличествоДнейОтпускаВГод, ЕСТЬNULL(ВТСеверныеОтпускаОрганизаций.КоличествоДнейОтпускаВГод, 0)) КАК КоличествоДнейОтпускаВГод
			|ПОМЕСТИТЬ ВТСеверныеОтпуска
			|ИЗ
			|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДополняемыеСевернымОтпуском КАК ВТДополняемыеСевернымОтпуском
			|		ПО ШтатноеРасписание.Ссылка = ВТДополняемыеСевернымОтпуском.ПозицияШР
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСеверныеОтпускаОрганизаций КАК ВТСеверныеОтпускаОрганизаций
			|		ПО ШтатноеРасписание.Владелец = ВТСеверныеОтпускаОрганизаций.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСеверныеОтпускаПодразделений КАК ВТСеверныеОтпускаПодразделений
			|		ПО ШтатноеРасписание.Подразделение = ВТСеверныеОтпускаПодразделений.Подразделение";
			
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ТекстВредныхОтпусков = 
		"ВЫБРАТЬ
		|	ВТОтпускаЗаВредность.ПозицияШР,
		|	ВТОтпускаЗаВредность.ВидЕжегодногоОтпуска,
		|	ВТОтпускаЗаВредность.КоличествоДнейОтпускаВГод
		|%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%
		|ИЗ
		|	ВТОтпускаЗаВредность КАК ВТОтпускаЗаВредность";
	
	ТекстСеверныхОтпусков = 
		"ВЫБРАТЬ
		|	ВТСеверныеОтпуска.ПозицияШР,
		|	ВТСеверныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТСеверныеОтпуска.КоличествоДнейОтпускаВГод
		|%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%
		|ИЗ
		|	ВТСеверныеОтпуска КАК ВТСеверныеОтпуска";
	
	ТекстЗапроса = "";
	
	Если ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		ТекстВредныхОтпусков = СтрЗаменить(ТекстВредныхОтпусков, "%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%", "ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска");
		ТекстСеверныхОтпусков = СтрЗаменить(ТекстСеверныхОтпусков, "%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%", "");
		ТекстЗапроса = ТекстЗапроса + ТекстВредныхОтпусков;
	Иначе
		ТекстВредныхОтпусков = СтрЗаменить(ТекстВредныхОтпусков, "%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%", "");
		ТекстСеверныхОтпусков = СтрЗаменить(ТекстСеверныхОтпусков, "%ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска%", "ПОМЕСТИТЬ ВТДобавляемыеСпецОтпуска");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтпускЗаВредность) И ЗначениеЗаполнено(ОтпускСеверный) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтпускСеверный) Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстСеверныхОтпусков;
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьОтпускамиДокументыРегистрИСправочник(Запрос)

	// Получим документы и движения.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеШтатногоРасписанияПозиции.Ссылка КАК Регистратор,
		|	ИзменениеШтатногоРасписания.ДатаВступленияВСилу,
		|	ИзменениеШтатногоРасписанияПозиции.Позиция
		|ПОМЕСТИТЬ ВТВсеРегистраторыПозиций
		|ИЗ
		|	Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания КАК ИзменениеШтатногоРасписания
		|		ПО ИзменениеШтатногоРасписанияПозиции.Ссылка = ИзменениеШтатногоРасписания.Ссылка
		|			И (ИзменениеШтатногоРасписания.ДатаВступленияВСилу <= &ДатаСреза)
		|			И (ИзменениеШтатногоРасписания.Проведен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоговыеДобавляемыеОтпуска КАК ВТИтоговыеДобавляемыеОтпуска
		|		ПО ИзменениеШтатногоРасписанияПозиции.Позиция = ВТИтоговыеДобавляемыеОтпуска.ПозицияШР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УтверждениеШтатногоРасписанияПозиции.Ссылка,
		|	УтверждениеШтатногоРасписания.МесяцВступленияВСилу,
		|	УтверждениеШтатногоРасписанияПозиции.Позиция
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания КАК УтверждениеШтатногоРасписания
		|		ПО УтверждениеШтатногоРасписанияПозиции.Ссылка = УтверждениеШтатногоРасписания.Ссылка
		|			И (УтверждениеШтатногоРасписания.МесяцВступленияВСилу <= &ДатаСреза)
		|			И (УтверждениеШтатногоРасписания.Проведен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоговыеДобавляемыеОтпуска КАК ВТИтоговыеДобавляемыеОтпуска
		|		ПО УтверждениеШтатногоРасписанияПозиции.Позиция = ВТИтоговыеДобавляемыеОтпуска.ПозицияШР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВсеРегистраторыПозиций.Позиция,
		|	МАКСИМУМ(ВТВсеРегистраторыПозиций.ДатаВступленияВСилу) КАК ДатаВступленияВСилу
		|ПОМЕСТИТЬ ВТУказателиПоследнихРегистраторов
		|ИЗ
		|	ВТВсеРегистраторыПозиций КАК ВТВсеРегистраторыПозиций
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТВсеРегистраторыПозиций.Позиция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВсеРегистраторыПозиций.Регистратор,
		|	ВТВсеРегистраторыПозиций.ДатаВступленияВСилу КАК Дата,
		|	ВТВсеРегистраторыПозиций.Позиция
		|ПОМЕСТИТЬ ВТРегистраторыПозиций
		|ИЗ
		|	ВТВсеРегистраторыПозиций КАК ВТВсеРегистраторыПозиций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследнихРегистраторов КАК ВТУказателиПоследнихРегистраторов
		|		ПО ВТВсеРегистраторыПозиций.Позиция = ВТУказателиПоследнихРегистраторов.Позиция
		|			И ВТВсеРегистраторыПозиций.ДатаВступленияВСилу = ВТУказателиПоследнихРегистраторов.ДатаВступленияВСилу
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговыеДобавляемыеОтпуска.ПозицияШР,
		|	ВТИтоговыеДобавляемыеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТИтоговыеДобавляемыеОтпуска.КоличествоДнейВГод,
		|	ВТРегистраторыПозиций.Регистратор,
		|	ВТРегистраторыПозиций.Дата
		|ПОМЕСТИТЬ ВТИтоговыеДобавляемыеОтпускаСРегистраторами
		|ИЗ
		|	ВТИтоговыеДобавляемыеОтпуска КАК ВТИтоговыеДобавляемыеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыПозиций КАК ВТРегистраторыПозиций
		|		ПО ВТИтоговыеДобавляемыеОтпуска.ПозицияШР = ВТРегистраторыПозиций.Позиция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.Регистратор
		|ПОМЕСТИТЬ ВТМодифицируемыеРегистраторы
		|ИЗ
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами КАК ВТИтоговыеДобавляемыеОтпускаСРегистраторами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменениеШтатногоРасписания.Ссылка КАК Регистратор,
		|	ИзменениеШтатногоРасписания.ДатаВступленияВСилу КАК Дата,
		|	ИзменениеШтатногоРасписанияПозиции.Позиция,
		|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Действие,
		|	ИзменениеШтатногоРасписанияЕжегодныеОтпуска.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТОбщийИтоговыйНабор
		|ИЗ
		|	Документ.ИзменениеШтатногоРасписания.ЕжегодныеОтпуска КАК ИзменениеШтатногоРасписанияЕжегодныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
		|		ПО ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = ИзменениеШтатногоРасписанияПозиции.Ссылка
		|			И ИзменениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания КАК ИзменениеШтатногоРасписания
		|		ПО ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = ИзменениеШтатногоРасписания.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМодифицируемыеРегистраторы КАК ВТМодифицируемыеРегистраторы
		|		ПО ИзменениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = ВТМодифицируемыеРегистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УтверждениеШтатногоРасписания.Ссылка,
		|	УтверждениеШтатногоРасписания.МесяцВступленияВСилу,
		|	УтверждениеШтатногоРасписанияПозиции.Позиция,
		|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Действие,
		|	УтверждениеШтатногоРасписанияЕжегодныеОтпуска.КоличествоДнейВГод
		|ИЗ
		|	Документ.УтверждениеШтатногоРасписания.ЕжегодныеОтпуска КАК УтверждениеШтатногоРасписанияЕжегодныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.Позиции КАК УтверждениеШтатногоРасписанияПозиции
		|		ПО УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = УтверждениеШтатногоРасписанияПозиции.Ссылка
		|			И УтверждениеШтатногоРасписанияЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = УтверждениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания КАК УтверждениеШтатногоРасписания
		|		ПО УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = УтверждениеШтатногоРасписания.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМодифицируемыеРегистраторы КАК ВТМодифицируемыеРегистраторы
		|		ПО УтверждениеШтатногоРасписанияЕжегодныеОтпуска.Ссылка = ВТМодифицируемыеРегистраторы.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.Регистратор,
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.Дата,
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.ПозицияШР,
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.ВидЕжегодногоОтпуска,
		|	ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Утвердить),
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами.КоличествоДнейВГод
		|ИЗ
		|	ВТИтоговыеДобавляемыеОтпускаСРегистраторами КАК ВТИтоговыеДобавляемыеОтпускаСРегистраторами
		|ГДЕ
		|	(ВТИтоговыеДобавляемыеОтпускаСРегистраторами.Регистратор ССЫЛКА Документ.ИзменениеШтатногоРасписания
		|			ИЛИ ВТИтоговыеДобавляемыеОтпускаСРегистраторами.Регистратор ССЫЛКА Документ.УтверждениеШтатногоРасписания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОбщийИтоговыйНабор.Регистратор КАК Регистратор,
		|	ВТОбщийИтоговыйНабор.Дата,
		|	ВТОбщийИтоговыйНабор.Позиция КАК Позиция,
		|	ВТОбщийИтоговыйНабор.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ВТОбщийИтоговыйНабор.Действие) КАК Действие,
		|	МАКСИМУМ(ВТОбщийИтоговыйНабор.КоличествоДнейВГод) КАК КоличествоДнейВГод
		|ИЗ
		|	ВТОбщийИтоговыйНабор КАК ВТОбщийИтоговыйНабор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОбщийИтоговыйНабор.Регистратор,
		|	ВТОбщийИтоговыйНабор.Дата,
		|	ВТОбщийИтоговыйНабор.Позиция,
		|	ВТОбщийИтоговыйНабор.ВидЕжегодногоОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Позиция";
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НачатьТранзакцию();
		Отказ = Ложь;
		
		// Обновляем регистратор.
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ЕжегодныеОтпуска.Очистить();
		
		// Обновляем его движения по отпускам.
		НаборЗаписей = РегистрыСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
			
			СтрокаПозицииШР = ДокументОбъект.Позиции.Найти(Выборка.Позиция, "Позиция");
			Если СтрокаПозицииШР = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Необходимо также обновить и справочник.
			ПозицияШРОбъект = Выборка.Позиция.ПолучитьОбъект();
			ПозицияШРОбъект.ЕжегодныеОтпуска.Очистить();
			
			Пока Выборка.Следующий() Цикл
				
				// Документ.
				НовыйОтпуск = ДокументОбъект.ЕжегодныеОтпуска.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйОтпуск, Выборка);
				НовыйОтпуск.ИдентификаторСтрокиПозиции = СтрокаПозицииШР.ИдентификаторСтрокиПозиции;
				
				Если Выборка.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить") Тогда
					Продолжить;
				КонецЕсли;
				
				// Регистр.
				НовыйОтпуск = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйОтпуск, Выборка);
				НовыйОтпуск.ПозицияШтатногоРасписания = СтрокаПозицииШР.Позиция;
				
				// Справочник.
				ЗаполнитьЗначенияСвойств(ПозицияШРОбъект.ЕжегодныеОтпуска.Добавить(), Выборка);
				
			КонецЦикла;
			
			Попытка
				ПозицияШРОбъект.ОбменДанными.Загрузка = Истина;
				ПозицияШРОбъект.Записать();
			Исключение
				Отказ = Истина;
				Прервать;
			КонецПопытки; 
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать(Истина);
			Исключение
				Отказ = Истина;
			КонецПопытки; 
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьОтпускамиСправочник(Запрос)

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТИтоговыеДобавляемыеОтпуска.ПозицияШР,
		|	ВТИтоговыеДобавляемыеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТИтоговыеДобавляемыеОтпуска.КоличествоДнейВГод
		|ИЗ
		|	ВТИтоговыеДобавляемыеОтпуска КАК ВТИтоговыеДобавляемыеОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТИтоговыеДобавляемыеОтпуска.ПозицияШР";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.СледующийПоЗначениюПоля("ПозицияШР") Цикл
		
		ПозицияШРОбъект = Выборка.ПозицияШР.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПозицияШРОбъект.ЕжегодныеОтпуска.Добавить(), Выборка);
		КонецЦикла;
		
		Попытка
			ПозицияШРОбъект.ОбменДанными.Загрузка = Истина;
			ПозицияШРОбъект.Записать();
		Исключение
			Продолжить;
		КонецПопытки; 
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеТабличныхЧастейПравамиНаОтпуска

// Функция возвращает актуальную таблицу прав на ежегодные отпуска для сотрудника
//
Функция ДействующиеПраваСотрудника(Сотрудник, ДатаСреза, ИсключаемыйРегистратор)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Формируем движения с учетом текущего состояния регистра.
	// Формируем таблицу измерений.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Период = ДатаСреза;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	СоздатьВТПоложенныеВидыЕжегодныхОтпусков(Запрос.МенеджерВременныхТаблиц, ИзмеренияДаты, ИсключаемыйРегистратор);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ПраваНаОтпуска.КоличествоДнейВГод
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПраваНаОтпуска";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция возвращает таблицу действующих ежегодных отпусков для всех сотрудников
//
Функция ОбщиеЕжегодныеОтпуска()

	// Заполнение ежегодными отпусками, которые предоставляются всем сотрудникам.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод,
	|	ВидыОтпусков.Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
	|	ВидыОтпусков.Наименование КАК ВидЕжегодногоОтпускаНаименование
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И НЕ ВидыОтпусков.Недействителен
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция возвращает "персональные" ежегодные отпуска сотрудника.
//
Функция ЛичныеЕжегодныеОтпуска(Сотрудник)

	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	ОтпускЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Если Не ЗначениеЗаполнено(ОтпускЧАЭС) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЧАЭС, "ПометкаУдаления, Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Для каждого СпециальноеПраво Из КадровыйУчетРасширенный.ПраваНаСпециальныеОтпускаСотрудника(Сотрудник) Цикл
		НоваяСтрока = ТаблицаОтпусков.Добавить();
		НоваяСтрока.ВидЕжегодногоОтпуска = СпециальноеПраво.ВидОтпуска;
		НоваяСтрока.КоличествоДнейВГод = СпециальноеПраво.КоличествоДней;
	КонецЦикла;
	
	Возврат ТаблицаОтпусков;

КонецФункции

Функция ОтпускаПоПозиции(ДанныеДокумента, ДанныеНовойПозиции)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		// Если используется ШР, просто возвращаем текущий "набор" прав ШР.
		Возврат ЕжегодныеОтпускаПозицииШтатногоРасписания(ДанныеНовойПозиции.ДолжностьПоШтатномуРасписанию, ДанныеДокумента.ДатаСобытия);
	Иначе
		// Если ШР не используется - возвращаем набор прав по позиции
		Возврат ЕжегодныеОтпускаДляПозицииШтатногоРасписания(ДанныеНовойПозиции.Подразделение, ДанныеНовойПозиции.Должность, ДанныеДокумента.ДатаСобытия);
	КонецЕсли;

КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются должностью.
//
Функция ОтпускаПоДолжности(Должность)
	
	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	ОтпускЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	Если НЕ ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЗаВредность, "ПометкаУдаления,Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Должность) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
			
	Если ТипЗнч(Должность) = Тип("СправочникСсылка.Должности") Тогда
		ДолжностьСВредностью = Должность;
	Иначе
		ДолжностьСВредностью = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность");
	КонецЕсли; 
	
	РеквизитыДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьСВредностью, "ВыплачиваетсяНадбавкаЗаВредность,КоличествоДнейДополнительногоОтпускаВГод");
	Если РеквизитыДолжности.ВыплачиваетсяНадбавкаЗаВредность Тогда
		СтрокаВредногоОтпуска = ТаблицаОтпусков.Добавить();
		СтрокаВредногоОтпуска.ВидЕжегодногоОтпуска = ОтпускЗаВредность;
		СтрокаВредногоОтпуска.КоличествоДнейВГод = РеквизитыДолжности.КоличествоДнейДополнительногоОтпускаВГод;
	КонецЕсли; 
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются подразделением.
//
Функция ОтпускаПоПодразделению(Подразделение, ДатаСобытия)
	
	Возврат ОтпускПоТерриториальнымУсловиям(Подразделение, ДатаСобытия);
	
КонецФункции

// Функция возвращает набор прав на отпуска, которые обуславливаются подразделением.
//
Функция ОтпускаПоТерритории(Территория, ДатаСобытия)
	
	Возврат ОтпускПоТерриториальнымУсловиям(Территория, ДатаСобытия);
	
КонецФункции

// Функция возвращает право на "серверный" отпуск.
//
Функция ОтпускПоТерриториальнымУсловиям(СтруктурнаяЕдиница, Знач ДатаСобытия)
	
	ТаблицаОтпусков = ПустаяТаблицаОтпусков();
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	СеверныйОтпуск = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный");
	Если НЕ ЗначениеЗаполнено(СеверныйОтпуск) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СеверныйОтпуск, "ПометкаУдаления,Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "Владелец");
	ПараметрыФО = Новый Структура("Организация", Организация);
	Если НЕ ПолучитьФункциональнуюОпцию("ПрименятьСевернуюНадбавку", ПараметрыФО) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
		
	ТаблицаНастроек = РегистрыСведений.ТерриториальныеУсловияПФР.СрезПоследних(ДатаСобытия, Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница));
	Если ТаблицаНастроек.Количество() > 0 Тогда
		ТерриториальныеУсловия = ТаблицаНастроек[0].ТерриториальныеУсловияПФР;
	Иначе
		ТерриториальныеУсловия = Неопределено;
	КонецЕсли;
	
	СтрокаСеверногоОтпуска = ТаблицаОтпусков.Добавить();
	СтрокаСеверногоОтпуска.ВидЕжегодногоОтпуска = СеверныйОтпуск;
	СтрокаСеверногоОтпуска.КоличествоДнейВГод = КоличествоДнейОтпускаПоТерриториальнымУсловиямПФР(ТерриториальныеУсловия);
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

Функция ЕжегодныеОтпускаДляПозицииШтатногоРасписания(Подразделение, Должность, ДатаСобытия)
	
	МассивОтпусков = Новый Массив;
	
	МассивОтпусков.Добавить(ОбщиеЕжегодныеОтпуска());
	МассивОтпусков.Добавить(ОтпускаПоДолжности(Должность));
	МассивОтпусков.Добавить(ОтпускаПоПодразделению(Подразделение, ДатаСобытия));
	
	Возврат ОбъединитьПулыПравНаОтпуска(МассивОтпусков);
	
КонецФункции

// Процедура объединяем таблицы прав на отпуска в одну.
// При совпадении видов отпусков приоритет имеют те таблицы прав, которые имеют больший индекс в массиве.
//
Функция ОбъединитьПулыПравНаОтпуска(МассивТаблицПрав)

	ИтоговаяТаблицаПрав = ПустаяТаблицаОтпусков();
	
	Для каждого ТаблицаПрав Из МассивТаблицПрав Цикл
		Для каждого ПравоНаОтпуск Из ТаблицаПрав Цикл
			СтрокаОтпуска = ИтоговаяТаблицаПрав.Найти(ПравоНаОтпуск.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			Если СтрокаОтпуска = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ИтоговаяТаблицаПрав.Добавить(), ПравоНаОтпуск);
			Иначе
				СтрокаОтпуска.КоличествоДнейВГод = ПравоНаОтпуск.КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаПрава Из ИтоговаяТаблицаПрав Цикл
		Если НЕ ЭтоСтажевыйОтпуск(СтрокаПрава.ВидЕжегодногоОтпуска)
			И СтрокаПрава.КоличествоДнейВГод = 0 Тогда
			
			УдаляемыеСтроки.Добавить(СтрокаПрава);
			
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ИтоговаяТаблицаПрав.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаПрав;
	
КонецФункции

Процедура УдалитьНеактуальныеОтпускаПозицииИзДействующихПрав(ДействующиеПрава, ПредыдущиеПрава, НовыеПрава)

	МассивДляУдаления = Новый Массив;
	Для каждого ДействующееПраво Из ДействующиеПрава Цикл
		Если ПредыдущиеПрава.Найти(ДействующееПраво.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") <> Неопределено 
			И НовыеПрава.Найти(ДействующееПраво.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") = Неопределено Тогда
		
			МассивДляУдаления.Добавить(ДействующееПраво);
		
		КонецЕсли;
	КонецЦикла;

	Для каждого УдаляемаяСтрока Из МассивДляУдаления Цикл
		ДействующиеПрава.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПравамиНаОтпуска(ТабличнаяЧастьОбъекта, НазначаемыеПрава, ПредыдущиеПрава = Неопределено)

	ТаблицаПрав = Новый ТаблицаЗначений;
	ТаблицаПрав.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаПрав.Колонки.Добавить("ПриоритетВидаОтпуска");
	ТаблицаПрав.Колонки.Добавить("КоличествоДнейВГод");
	ТаблицаПрав.Колонки.Добавить("ДействующийОтпуск");
	ТаблицаПрав.Колонки.Добавить("Действие");
	ТаблицаПрав.Колонки.Добавить("ТекущееКоличествоДнейВГод");
	ТаблицаПрав.Колонки.Добавить("Комментарий");
	
	Если ПредыдущиеПрава = Неопределено Тогда
		Для Каждого СтрокаПрав Из НазначаемыеПрава Цикл
			НоваяСтрока = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПрав);
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), 1, 2);
		КонецЦикла;
	Иначе
		
		Для Каждого СтрокаПрав Из НазначаемыеПрава Цикл
			НоваяСтрока = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПрав);
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"), 1, 2);
			ПредыдущаяСтрока = ПредыдущиеПрава.Найти(СтрокаПрав.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			Если ПредыдущаяСтрока = Неопределено Тогда
				НоваяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Утвердить");
				НоваяСтрока.ДействующийОтпуск = Ложь;
			Иначе
				НоваяСтрока.ТекущееКоличествоДнейВГод = ПредыдущаяСтрока.КоличествоДнейВГод;
				НоваяСтрока.ДействующийОтпуск = Истина;
			КонецЕсли;
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(НоваяСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаПрав Из ПредыдущиеПрава Цикл
			Если ТаблицаПрав.Найти(СтрокаПрав.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаПрав.Добавить();
			НоваяСтрока.ВидЕжегодногоОтпуска = СтрокаПрав.ВидЕжегодногоОтпуска;
			НоваяСтрока.ПриоритетВидаОтпуска = ?(НоваяСтрока.ВидЕжегодногоОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"), 1, 2);
			НоваяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить");
			НоваяСтрока.КоличествоДнейВГод = СтрокаПрав.КоличествоДнейВГод;
			НоваяСтрока.ТекущееКоличествоДнейВГод = СтрокаПрав.КоличествоДнейВГод;
			НоваяСтрока.ДействующийОтпуск = Истина;
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПрав.Сортировать("ПриоритетВидаОтпуска, ВидЕжегодногоОтпуска");
	
	Для каждого СтрокаПрава Из ТаблицаПрав Цикл
		ЗаполнитьЗначенияСвойств(ТабличнаяЧастьОбъекта.Добавить(), СтрокаПрава);
	КонецЦикла; 
	
КонецПроцедуры

Процедура РассчитатьКоличествоДнейОтпуска(СотрудникБезПрава, СтрокаВидаОтпуска, РабочиеГода, МассивПравНаОтпуск, ТаблицаПереквалификацииДней)

	Если РабочиеГода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаВидаОтпуска.НакопительныйОтпуск Тогда
		ДатаНачалаОтсчета = РабочиеГода[0].ДатаНачала;
		ДатаОкончанияОтсчета = РабочиеГода[РабочиеГода.Количество()-1].ДатаОкончания;
		// Для накопительных отпусков необходимо получить данные учета рабочего времени.
		ТаблицаУчетаВремени = ТаблицаДанныхУчетаРабочегоВремени(СотрудникБезПрава.Сотрудник, ДатаНачалаОтсчета, ДатаОкончанияОтсчета);
	КонецЕсли;
	
	Для Каждого РабочийГод Из РабочиеГода Цикл
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			
			Если НЕ РабочийМесяц.Заполнен Тогда
				
				Если СтрокаВидаОтпуска.НакопительныйОтпуск Тогда
				    ДнейОтпускаВМесяц = НакопленноеПравоНаОтпускСотрудника(СотрудникБезПрава.Сотрудник, ТаблицаУчетаВремени, МассивПравНаОтпуск, ДатаНачалаОтсчета, РабочийМесяц.ДатаМесяца);
				Иначе
					ДнейОтпускаВМесяц = МесячноеКадровоеПравоНаОтпускСотрудника(МассивПравНаОтпуск, РабочийМесяц.ДатаМесяца);
				КонецЕсли;
				
				// Проверим действие на сотрудника ст. 291 и 295 ТК РФ.
				УстановитьДирективно2РабочихДня = Ложь;
				Если СотрудникБезПрава.ТребуетПереквалификацииДней И СтрокаВидаОтпуска.ОсновнойОтпуск Тогда
					СведенияДоговораСотрудника = ТаблицаПереквалификацииДней.НайтиСтроки(Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник));
					Для каждого СтрокаСведений Из СведенияДоговораСотрудника Цикл
						Если Не ЗначениеЗаполнено(СтрокаСведений.ДатаОкончания) Тогда
							СрочныйДоговорДействует = Истина;
						Иначе
							СрочныйДоговорДействует = НачалоДня(СтрокаСведений.ДатаНачала) <= РабочийМесяц.ДатаМесяца
								И РабочийМесяц.ДатаМесяца <= КонецДня(СтрокаСведений.ДатаОкончания);
						КонецЕсли;
						УстановитьДирективно2РабочихДня = СрочныйДоговорДействует
													И (СтрокаСведений.КраткосрочныйДоговор ИЛИ СтрокаСведений.СезонныйДоговор);
						Если СтрокаСведений.ДатаНачала <= РабочийМесяц.ДатаМесяца Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если УстановитьДирективно2РабочихДня Тогда
					РабочийМесяц.КоличествоДней = 2;
					РабочийМесяц.ОтложеноДней = ДнейОтпускаВМесяц - 2;
				Иначе
					РабочийМесяц.КоличествоДней	= ДнейОтпускаВМесяц;
				КонецЕсли; 
				РабочийМесяц.Заполнен = Истина;
				
			КонецЕсли;
						
			ДатаНачалаОтсчета = КонецДня(РабочийМесяц.ДатаМесяца) + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	// В случае, если действовали ст. 291 или 295 ТК РФ и есть "отложенные дни" - запишем их в первый месяц, следующий
	// после окончания ее действия.
	Для Каждого РабочийГод Из РабочиеГода Цикл
		СтекЗадержанныхДней = 0;
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			Если РабочийМесяц.ОтложеноДней = 0 Тогда
				Если СтекЗадержанныхДней <> 0 Тогда
					РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + СтекЗадержанныхДней;
					СтекЗадержанныхДней = 0;
				КонецЕсли;
			Иначе
				СтекЗадержанныхДней = СтекЗадержанныхДней + РабочийМесяц.ОтложеноДней;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьНаборПравамиИзТаблицы(НаборЗаписей, ТаблицаИзРегистра)

	Для Каждого СтрокаПрава Из ТаблицаИзРегистра Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаПрава);
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьНаборРассчитаннымиПравами(ОтборПоСотрудникуИВидуОтпуска, НаборЗаписей, РабочиеГода)

	ПравоСНачалаРаботы = 0;
	Для Каждого РабочийГод Из РабочиеГода Цикл
		Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
			
			СтрокаПрава = НаборЗаписей.Добавить();
			СтрокаПрава.Сотрудник				= ОтборПоСотрудникуИВидуОтпуска.Сотрудник;
			СтрокаПрава.ВидЕжегодногоОтпуска	= ОтборПоСотрудникуИВидуОтпуска.ВидЕжегодногоОтпуска;
			СтрокаПрава.ДатаНачала				= РабочийГод.ДатаНачала;
			СтрокаПрава.ДатаОкончания			= РабочийГод.ДатаОкончания;
			СтрокаПрава.Период					= РабочийМесяц.ДатаМесяца;
			СтрокаПрава.КоличествоДнейЗаПериод	= РабочийМесяц.КоличествоДней;
			
			ПравоСНачалаРаботы					= ПравоСНачалаРаботы + РабочийМесяц.КоличествоДней;
			СтрокаПрава.КоличествоДней			= ПравоСНачалаРаботы;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция МесячноеКадровоеПравоНаОтпускСотрудника(МассивПрав, ДатаСреза)

	// Подразумеваем что массив прав отсортирован по убыванию даты.
	Для каждого ПравоНаЕжегодныйОтпуск Из МассивПрав Цикл
		Если ПравоНаЕжегодныйОтпуск.ДатаДействия <= ДатаСреза Тогда
			Возврат ПравоНаЕжегодныйОтпуск.КоличествоДнейОтпускаВГод / 12;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат 0;
	
КонецФункции

Функция НакопленноеПравоНаОтпускСотрудника(Сотрудник, ТаблицаУчетаВремени, МассивПрав, ДатаНачала, ДатаОкончания)

	ДнейВПериоде = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/86400 + 1;
	НакопленноеПраво = 0;
	
	Для СчДней = 1 По ДнейВПериоде Цикл
		ДатаСреза = ДатаНачала + (СчДней - 1)*86400;
		
		СтрокиУчетаВремени = ТаблицаУчетаВремени.НайтиСтроки(Новый Структура("ДатаДень", ДатаСреза));
		Если СтрокиУчетаВремени.Количество() > 0 Тогда
			ДанныеУчетаВремени = СтрокиУчетаВремени[0];
			Если НЕ ДанныеУчетаВремени.Учитывать Тогда
				ДневноеПраво = 0;
			Иначе
				Если ДанныеУчетаВремени.УсловияТрудаУказаны Тогда
					ДневноеПраво = ДанныеУчетаВремени.КоличествоДнейВМесяц;
				Иначе
					ДневноеПраво = МесячноеКадровоеПравоНаОтпускСотрудника(МассивПрав, ДатаСреза);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДневноеПраво = МесячноеКадровоеПравоНаОтпускСотрудника(МассивПрав, ДатаСреза);
		КонецЕсли;
		
		НакопленноеПраво = НакопленноеПраво + ДневноеПраво;
	КонецЦикла; 
	
	Возврат НакопленноеПраво/ДнейВПериоде;
	
КонецФункции

Функция ТаблицаДанныхУчетаРабочегоВремени(Сотрудник, ДатаНачала, ДатаОкончания)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Сотрудник КАК Сотрудник,
		|	&ДатаНачала КАК ДатаНачала,
		|	&ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Запрос.Выполнить();
	
	ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТУчетРабочегоВремени";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
	ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(ДатаОкончания);
	ПараметрыЗаполнения.ДатаНачала = ДатаНачала;
	ПараметрыЗаполнения.ДатаОкончания = ДатаОкончания;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ДатаНачала);
	ПараметрыЗаполнения.МесяцДатаОкончания = НачалоМесяца(ДатаОкончания);
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = Истина;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТУчетРабочегоВремени.Сотрудник КАК Сотрудник,
		|	ВТУчетРабочегоВремени.Дата КАК ДатаДень,
		|	ВТУчетРабочегоВремени.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА ВТУчетРабочегоВремени.ВидУчетаВремени В (&УчитываемыеВидыВремени)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Учитывать,
		|	ВЫБОР
		|		КОГДА ВТУчетРабочегоВремени.ВидУчетаВремени В (&Выходные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Выходной,
		|	ВЫРАЗИТЬ(ВТУчетРабочегоВремени.УсловияТруда КАК Справочник.УсловияТруда) КАК УсловияТруда,
		|	ВЫБОР
		|		КОГДА ВТУчетРабочегоВремени.УсловияТруда = ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УсловияТрудаУказаны,
		|	ВТУчетРабочегоВремени.Дни,
		|	ВТУчетРабочегоВремени.Часы,
		|	ЕСТЬNULL(СправочникУсловияТруда.КоличествоДнейДополнительногоОтпускаВГод, 0) / 12 КАК КоличествоДнейВМесяц
		|ПОМЕСТИТЬ ВТДетальноеВремя
		|ИЗ
		|	ВТУчетРабочегоВремени КАК ВТУчетРабочегоВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УсловияТруда КАК СправочникУсловияТруда
		|		ПО ВТУчетРабочегоВремени.УсловияТруда = СправочникУсловияТруда.Ссылка
		|ГДЕ
		|	ВТУчетРабочегоВремени.ВидУчетаВремени <> &РабочееВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень,
		|	МАКСИМУМ(ВТДетальноеВремя.Выходной) КАК Выходной
		|ПОМЕСТИТЬ ВТДниПоУсловиямТруда
		|ИЗ
		|	ВТДетальноеВремя КАК ВТДетальноеВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВТДетальноеВремя.УсловияТрудаУказаны) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень,
		|	МАКСИМУМ(ВТДетальноеВремя.Учитывать) КАК Учитывать
		|ПОМЕСТИТЬ ВТДниПоКД
		|ИЗ
		|	ВТДетальноеВремя КАК ВТДетальноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниПоУсловиямТруда КАК ВТДниПоУсловиямТруда
		|		ПО ВТДетальноеВремя.Сотрудник = ВТДниПоУсловиямТруда.Сотрудник
		|			И ВТДетальноеВремя.ДатаДень = ВТДниПоУсловиямТруда.ДатаДень
		|ГДЕ
		|	ВТДниПоУсловиямТруда.Сотрудник ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДниПоУсловиямТруда.Сотрудник,
		|	ВТДниПоУсловиямТруда.ДатаДень,
		|	МАКСИМУМ(ВТДетальноеВремя.КоличествоДнейВМесяц) КАК КоличествоДнейВМесяц
		|ПОМЕСТИТЬ ВТВыходныеПоУсловиямТруда
		|ИЗ
		|	ВТДниПоУсловиямТруда КАК ВТДниПоУсловиямТруда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДетальноеВремя КАК ВТДетальноеВремя
		|		ПО ВТДниПоУсловиямТруда.Сотрудник = ВТДетальноеВремя.Сотрудник
		|			И ВТДниПоУсловиямТруда.ДатаДень = ВТДетальноеВремя.ДатаДень
		|ГДЕ
		|	ВТДниПоУсловиямТруда.Выходной
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДниПоУсловиямТруда.Сотрудник,
		|	ВТДниПоУсловиямТруда.ДатаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДниПоУсловиямТруда.Сотрудник,
		|	ВТДниПоУсловиямТруда.ДатаДень
		|ПОМЕСТИТЬ ВТРабочиеДниПоУсловиямТруда
		|ИЗ
		|	ВТДниПоУсловиямТруда КАК ВТДниПоУсловиямТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеПоУсловиямТруда КАК ВТВыходныеПоУсловиямТруда
		|		ПО ВТДниПоУсловиямТруда.Сотрудник = ВТВыходныеПоУсловиямТруда.Сотрудник
		|			И ВТДниПоУсловиямТруда.ДатаДень = ВТВыходныеПоУсловиямТруда.ДатаДень
		|ГДЕ
		|	ВТВыходныеПоУсловиямТруда.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень,
		|	СУММА(ВТДетальноеВремя.Часы) КАК Часы,
		|	МАКСИМУМ(ВТДетальноеВремя.УсловияТрудаУказаны) КАК УсловияТрудаУказаны
		|ПОМЕСТИТЬ ВТВсегоЧасов
		|ИЗ
		|	ВТДетальноеВремя КАК ВТДетальноеВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеДниПоУсловиямТруда КАК ВТРабочиеДниПоУсловиямТруда
		|		ПО ВТДетальноеВремя.Сотрудник = ВТРабочиеДниПоУсловиямТруда.Сотрудник
		|			И ВТДетальноеВремя.ДатаДень = ВТРабочиеДниПоУсловиямТруда.ДатаДень
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень,
		|	СУММА(ВЫБОР
		|			КОГДА ВТДетальноеВремя.Учитывать
		|					И ВТДетальноеВремя.УсловияТруда.КоличествоДнейДополнительногоОтпускаВГод > 0
		|				ТОГДА ВТДетальноеВремя.Часы
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВредныеЧасы
		|ПОМЕСТИТЬ ВТВредныеЧасы
		|ИЗ
		|	ВТДетальноеВремя КАК ВТДетальноеВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеДниПоУсловиямТруда КАК ВТРабочиеДниПоУсловиямТруда
		|		ПО ВТДетальноеВремя.Сотрудник = ВТРабочиеДниПоУсловиямТруда.Сотрудник
		|			И ВТДетальноеВремя.ДатаДень = ВТРабочиеДниПоУсловиямТруда.ДатаДень
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВредныеЧасы.Сотрудник,
		|	ВТВредныеЧасы.ДатаДень,
		|	ВЫБОР
		|		КОГДА ВТВсегоЧасов.Часы = 0
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТВредныеЧасы.ВредныеЧасы / ВТВсегоЧасов.Часы >= 0.8
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВредныйДень,
		|	ВТВсегоЧасов.Часы КАК ВсегоЧасов
		|ПОМЕСТИТЬ ВТУчитываемыеВредныеДни
		|ИЗ
		|	ВТВсегоЧасов КАК ВТВсегоЧасов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВредныеЧасы КАК ВТВредныеЧасы
		|		ПО ВТВсегоЧасов.Сотрудник = ВТВредныеЧасы.Сотрудник
		|			И ВТВсегоЧасов.ДатаДень = ВТВредныеЧасы.ДатаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень,
		|	СУММА(ВЫБОР
		|			КОГДА ВТУчитываемыеВредныеДни.ВсегоЧасов = 0
		|				ТОГДА 0
		|			КОГДА ВТУчитываемыеВредныеДни.ВредныйДень
		|				ТОГДА ВТДетальноеВремя.Часы / ВТУчитываемыеВредныеДни.ВсегоЧасов * ВТДетальноеВремя.КоличествоДнейВМесяц
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоДнейВМесяц
		|ПОМЕСТИТЬ ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда
		|ИЗ
		|	ВТДетальноеВремя КАК ВТДетальноеВремя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчитываемыеВредныеДни КАК ВТУчитываемыеВредныеДни
		|		ПО ВТДетальноеВремя.Сотрудник = ВТУчитываемыеВредныеДни.Сотрудник
		|			И ВТДетальноеВремя.ДатаДень = ВТУчитываемыеВредныеДни.ДатаДень
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДетальноеВремя.Сотрудник,
		|	ВТДетальноеВремя.ДатаДень
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТВыходныеПоУсловиямТруда.Сотрудник,
		|	ВТВыходныеПоУсловиямТруда.ДатаДень,
		|	ВТВыходныеПоУсловиямТруда.КоличествоДнейВМесяц
		|ИЗ
		|	ВТВыходныеПоУсловиямТруда КАК ВТВыходныеПоУсловиямТруда
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда.Сотрудник,
		|	ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда.ДатаДень,
		|	ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда.КоличествоДнейВМесяц,
		|	ИСТИНА КАК Учитывать,
		|	ИСТИНА КАК УсловияТрудаУказаны
		|ИЗ
		|	ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда КАК ВТИтоговоеДневноеПравоВДняхПоУсловиямТруда
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДниПоКД.Сотрудник,
		|	ВТДниПоКД.ДатаДень,
		|	0,
		|	ВТДниПоКД.Учитывать,
		|	ЛОЖЬ
		|ИЗ
		|	ВТДниПоКД КАК ВТДниПоКД";
		
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Выходные", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни")));
	Запрос.УстановитьПараметр("УчитываемыеВидыВремени", ВидыВремениУчитываемыеДляВредногоОтпуска());
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультат;

КонецФункции

#КонецОбласти

Функция ВидыВремениУчитываемыеДляВредногоОтпуска() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыИспользованияРабочегоВремени.Ссылка КАК ВидВремени
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
		|ГДЕ
		|	ВидыИспользованияРабочегоВремени.РабочееВремя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыИспользованияРабочегоВремени.Ссылка
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
		|ГДЕ
		|	ВидыИспользованияРабочегоВремени.ОсновноеВремя = &Выходные";
	
	Запрос.УстановитьПараметр("Выходные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидВремени");

КонецФункции

Функция ЕстьСтрокиВоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТ) 
	
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ * 
		|ИЗ " + ИмяВТ + " КАК ВТ";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОчиститьЗаработанныеВредныеИСеверныеОтпуска(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОтпускЗаВредность", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность"));
	Запрос.УстановитьПараметр("ОтпускСеверный", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный"));
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = &ОтпускЗаВредность
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
	               |ИЗ
	               |	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	               |ГДЕ
	               |	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = &ОтпускСеверный";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗаработанныеПраваНаОтпуска", "ВидЕжегодногоОтпуска", Выборка.ВидЕжегодногоОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(Выборка.ВидЕжегодногоОтпуска);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьОбновлениеДанныхПоИсточникуДанных(ПараметрыОбновления, ИмяПространстваБлокировки, ПолеБлокировки, ИсточникДанных, ПолеИсточника) Экспорт
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировки);
	ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПолеБлокировки, ПолеИсточника);	
	Попытка 
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы.Ошибка блокировки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , ИмяПространстваБлокировки);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

#КонецОбласти
