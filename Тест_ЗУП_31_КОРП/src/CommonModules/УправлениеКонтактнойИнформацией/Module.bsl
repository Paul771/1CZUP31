#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление, изменение и получение контактной информации.

// Возвращает таблицу, содержащую контактную информацию нескольких объектов. 
//
// Параметры:
//    СсылкиИлиОбъекты         - Массив - владельцы контактной информации.
//    ТипыКонтактнойИнформации - Массив, ПеречислениеСсылка.ТипыКонтактнойИнформации - Если указаны, то будет получена
//        контактную информацию только этих типов.
//    ВидыКонтактнойИнформации - Массив, СправочникСсылка.ВидыКонтактнойИнформации   - Если указаны, то будет получена
//        контактную информацию только этих видов.
//    Дата                     - Дата   - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//
// Возвращаемое значение:
//  ТаблицаЗначений -  таблица с контактной информацией объектов содержащая колонки:
//    * СсылкиИлиОбъекты - Ссылка - Владелец контактной информации.
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//    * ЗначенияПолей    - Строка - XML соответствующий XDTO пакету КонтактнаяИнформация или Адрес.
//    * Представление    - Строка - Представление контактной информации.
//    * Дата             - Дата - Дата с которой действует запись контактной информации.
//
Функция КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, Знач ТипыКонтактнойИнформации = Неопределено, Знач ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(ТипыКонтактнойИнформации) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		ТипыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипыКонтактнойИнформации);
	КонецЕсли;
	
	Если ТипЗнч(ВидыКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыКонтактнойИнформации);
	КонецЕсли;
	
	СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, СсылкиИлиОбъекты, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата);
	
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		ДействуетС = "КонтактнаяИнформация.ДействуетС";
	Иначе
		ДействуетС = "ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	" + ДействуетС +" КАК Дата,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу, содержащую контактную информацию объекта.
//
// Параметры:
//  СсылкаИлиОбъект          - ЛюбаяСсылка, Объект - Ссылка или объект-владелец контактной информации (организация,
//                                            контрагент, партнер и т.д.).
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - Необязательный, отбор по виду контактной информации.
//  Дата                     - Дата - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//  ТолькоПредставление      - Булево - Если Истина, то возвращает только представление, иначе таблицу значений.
//                                      Для получения представление рекомендуется использовать см. функцию ПредставлениеКонтактнойИнформацииОбъекта.
// 
// Возвращаемое значение:
//  Строка - строковое представление значения, если параметр ТолькоПредставление установлен в Истина, иначе
//  ТаблицаЗначений - таблица с контактной информацией объекта содержащая колонки:
//    * СсылкиИлиОбъекты - Ссылка - Владелец контактной информации.
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации   - Вид контактной информации.
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//    * ЗначенияПолей    - Строка - XML соответствующий XDTO пакету КонтактнаяИнформация или Адрес.
//    * Представление    - Строка - Представление контактной информации.
//    * Дата             - Дата   - Дата с которой действует запись контактной информации.
//
Функция КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидКонтактнойИнформации = Неопределено, Дата = Неопределено, ТолькоПредставление = Истина) Экспорт
	
	ТипОбъекта = ТипЗнч(СсылкаИлиОбъект);
	Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		Результат = НоваяКонтактнаяИнформация();
		Если МетаданныеОбъекта <> Неопределено 
			И МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			
			Для каждого СтрокаКонтактнаяИнформация Из СсылкаИлиОбъект.КонтактнаяИнформация Цикл
				Если ВидКонтактнойИнформации = Неопределено 
					ИЛИ СтрокаКонтактнаяИнформация.Вид = ВидКонтактнойИнформации Тогда
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтактнаяИнформация);
					НоваяСтрока.Объект = СсылкаИлиОбъект;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТолькоПредставление Тогда
			Если Результат.Количество() > 0 Тогда
				Возврат Результат[0].Представление;
			КонецЕсли;
			Возврат "";
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ТолькоПредставление Тогда
		// Оставлено для обратной совместимости.
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаИлиОбъект.Ссылка);
		
		Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			Возврат "";
		КонецЕсли;
		
		КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов,, ВидКонтактнойИнформации, Дата);
		
		Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
			Возврат КонтактнаяИнформацияОбъекта[0].Представление;
		КонецЕсли;
		
		Возврат "";
	Иначе
		СсылкиИлиОбъекты = Новый Массив;
		СсылкиИлиОбъекты.Добавить(СсылкаИлиОбъект);
		
		Если ТипЗнч(ВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ВидыКонтактнойИнформации = Новый Массив;
			ВидыКонтактнойИнформации.Добавить(ВидКонтактнойИнформации);
			ТипыКонтактнойИнформации = Новый Массив;
			ТипыКонтактнойИнформации.Добавить(ВидКонтактнойИнформации.Тип);
		Иначе
			ВидыКонтактнойИнформации = Неопределено;
		КонецЕсли;
		
		Возврат КонтактнаяИнформацияОбъектов(СсылкиИлиОбъекты, ТипыКонтактнойИнформации, ВидыКонтактнойИнформации, Дата);
	КонецЕсли;
	
КонецФункции

// Возвращает представление контактной информации объекта.
//
// Параметры:
//  СсылкаИлиОбъект         - Произвольный - Владелец контактной информации.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//  Разделитель             - Строка - Разделитель, который добавляется в представление между записями контактной информации.
//                                     По умолчанию это запятая с последующем пробелом, для исключения
//                                     пробела необходимо использовать признак БезПробелов у параметра ДополнительныеПараметры.
//  Дата                    - Дата - Дата с которой действует запись контактной информации. Если контактная информация
//                                   хранит историю изменения, то передача даты обязательна.
//  ДополнительныеПараметры - Структура - Необязательные параметры для формирования представления контактной информации.
//   * ТолькоПервая         - Булево - Если Истина, то будет возвращено представление только основной(первой) записи
//                                     контактной информации. По умолчанию - Ложь;
//   * БезПробелов          - Булево - Если Истина, то после разделителя не будет автоматически добавляется пробел.
//                                     По умолчанию - Ложь;
// 
// Возвращаемое значение:
//  Строка - Сформированное представление контактной информации.
//
Функция ПредставлениеКонтактнойИнформацииОбъекта(СсылкаИлиОбъект, ВидКонтактнойИнформации, Разделитель = ",", Дата = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТолькоПервая = Ложь;
	БезПробелов = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ТолькоПервая") Тогда
			ТолькоПервая = ДополнительныеПараметры.ТолькоПервая;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("БезПробелов") Тогда
			БезПробелов = ДополнительныеПараметры.БезПробелов;
		КонецЕсли;
	КонецЕсли;
	РазделительВПредставлении = ?(БезПробелов, Разделитель, Разделитель + " ");
	
	ПервыйПроход = Истина;
	КонтактнаяИнформация = КонтактнаяИнформацияОбъекта(СсылкаИлиОбъект, ВидКонтактнойИнформации, Дата, Ложь);
	Для каждого ЗаписьКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если ПервыйПроход Тогда
			Представление = ЗаписьКонтактнойИнформации.Представление;
			Если ТолькоПервая Тогда
				Возврат Представление;
			КонецЕсли;
			ПервыйПроход = Ложь;
		Иначе
			Представление = Представление + РазделительВПредставлении + ЗаписьКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Формирует новую таблицу контактной информации.
//
// Параметры:
//  КолонкаОбъект - Булево - Если Истина, то таблица будет содержать колонку "Объект".
//                           Это нужно, если в таблице необходимо хранить контактной информацию для нескольких объектов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат. Колонки:
//       * Объект        - ЛюбаяСсылка - Ссылка на владельца контактной информации.
//       * Вид           - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//       * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//       * ЗначенияПолей - Строка - XML соответствующий XDTO пакету КонтактнаяИнформация или Адрес.
//       * Представление - Строка - Представление контактной информации.
//       * Дата          - Дата   - Дата с которой действует запись контактной информации.
//
Функция НоваяКонтактнаяИнформация(КолонкаОбъект = Истина) Экспорт
	
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	
	Если КолонкаОбъект Тогда
		КонтактнаяИнформация.Колонки.Добавить("Объект");
	КонецЕсли;
	
	КонтактнаяИнформация.Колонки.Добавить("Представление", ОписаниеТиповСтрока500);
	КонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей", Новый ОписаниеТипов("Строка"));
	КонтактнаяИнформация.Колонки.Добавить("Вид",           Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	КонтактнаяИнформация.Колонки.Добавить("Тип",           Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	КонтактнаяИнформация.Колонки.Добавить("Дата",          Новый ОписаниеТипов("Дата"));
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

// Добавляет контактную информацию к объекту по представлению или XML.
//
// Параметры:
//  СсылкаИлиОбъект          - Произвольный - Ссылка или объект владельца содержащего контактную информацию.
//                                            Для ссылки после добавления контактной информации владелец будет записан.
//                                            Если передан объект, то контактная информация будет добавлена без записи.
//                                            Для сохранения изменений объект необходимо будет записать отдельно.
//  ЗначениеИлиПредставление - Строка - Представление или XML соответствующего XDTO пакету КонтактнаяИнформация или Адрес.
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - Вид добавляемой контактной информации.
//  Дата                     - Дата    - Дата, с которой будет действовать запись контактной информации.
//                                       Требуется для контактной информации, у которой хранится история изменений.
//                                       Если значение не указано, то принимается текущая дата сеанса.
//  Замещать                 - Булево - Если Истина(по умолчанию), то будет заменена вся контактная информация по
//                                      переданном виду контактной информации.
//                                      Если Ложь, то запись будет добавлена. Если вид контактной информации не разрешает
//                                      ввод нескольких значений, а контактная информация объекта уже содержит запись,
//                                      то запись не будет добавлена.
//
Процедура ДобавитьКонтактнуюИнформацию(СсылкаИлиОбъект, ЗначениеИлиПредставление, ВидКонтактнойИнформации, Дата = Неопределено, Замещать = Истина) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(СсылкаИлиОбъект)) Тогда
		Объект = СсылкаИлиОбъект.ПолучитьОбъект();
		Записывать = Истина;
	Иначе
		Объект = СсылкаИлиОбъект;
		Записывать = Ложь;
	КонецЕсли;
	КонтактнаяИнформация = Объект.КонтактнаяИнформация;
	ЭтоКонтактнаяИнформацияВXML = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначениеИлиПредставление);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	Если МетаданныеОбъекта = Неопределено
		Или МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Добавление контактной информации невозможно, у объекта нет таблицы с контактной информацией.'");;
	КонецЕсли;
	
	ФорматКонтактнойИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКонтактнойИнформации, "Тип, ВключатьСтрануВПредставление, ПроверятьПоФИАС");
	Если ЭтоКонтактнаяИнформацияВXML Тогда
		ФорматКонтактнойИнформации.Вставить("ФорматАдреса", ?(ФорматКонтактнойИнформации.ПроверятьПоФИАС, "ФИАС", "КЛАДР"));
		Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ЗначениеИлиПредставление, ФорматКонтактнойИнформации);
		ЗначенияПолей = ЗначениеИлиПредставление;
	Иначе
		КонтактнаяИнформацияXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ЗначениеИлиПредставление, ВидКонтактнойИнформации);
		ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
		Представление = ЗначениеИлиПредставление;
	КонецЕсли;
	
	Если Замещать Тогда
		НайденныеСтроки = НайтиСтрокиКонтактнойИнформации(ВидКонтактнойИнформации, Дата, КонтактнаяИнформация);
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	Иначе
		Если ЭтоКонтактнаяИнформацияВXML Тогда
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Найти(ЗначениеИлиПредставление, "ЗначенияПолей")
		Иначе
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Найти(ЗначениеИлиПредставление, "Представление")
		КонецЕсли;
		Если СтрокаКонтактнойИнформации = Неопределено Тогда
			Если ЗапрещенВводНесколькихЗначений(ВидКонтактнойИнформации, КонтактнаяИнформация, Дата) Тогда
				Возврат;
			КонецЕсли;
			СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКонтактнойИнформации.Представление  = Представление;
	СтрокаКонтактнойИнформации.ЗначенияПолей  = ЗначенияПолей;
	СтрокаКонтактнойИнформации.Вид            = ВидКонтактнойИнформации;
	СтрокаКонтактнойИнформации.Тип            = ФорматКонтактнойИнформации.Тип;
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений И ЗначениеЗаполнено(Дата) Тогда
		СтрокаКонтактнойИнформации.ДействуетС = Дата;
	КонецЕсли;
	
	ОбъектКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКонтактнойИнформации.ЗначенияПолей, ВидКонтактнойИнформации);
	ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, ОбъектКонтактнойИнформации, ФорматКонтактнойИнформации.Тип);
	
	Если Записывать Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Добавляет или изменяет контактную информацию для нескольких владельцев контактной информации.
//
// Параметры:
//  КонтактнаяИнформация - ТаблицаЗначений - Таблица содержащая контактную информацию
//                                           Описание колонок см. функцию НоваяКонтактнаяИнформация.
//                                           Важно! Если в колонке Объект указана ссылка, то после добавления
//                                           контактной информации владелец будет записан. 
//                                           В случае, если колонка Объект содержит объект владельца контактной информации,
//                                           то для сохранения изменений объекты необходимо будет записать отдельно.
//  Замещать             - Булево -  Если Истина(по умолчанию), то будет заменена вся
//                                   вся контактная информация по переданном виду контактной информации.
//                                   Если Ложь, то запись будет добавлена. Если вид контактной информации не разрешает
//                                   ввод нескольких значений, а контактная информация объекта уже содержит запись,
//                                   то запись не будет добавлена.
//
Процедура УстановитьКонтактнуюИнформациюОбъектов(КонтактнаяИнформация, Замещать = Истина) Экспорт
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВладельцыКонтактнойИнформации = Новый Соответствие;
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ПараметрыКонтактнойИнформации = ВладельцыКонтактнойИнформации[СтрокаКонтактнойИнформации.Объект];
		Если ПараметрыКонтактнойИнформации = Неопределено Тогда
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаКонтактнойИнформации.Объект));
			Если МетаданныеОбъекта = Неопределено
				Или МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Добавление контактной информации невозможно, у объекта нет таблицы с контактной информацией.'");;
			КонецЕсли;
			
			ПараметрыКонтактнойИнформации = Новый Структура;
			ЭтоСсылка = ОбщегоНазначения.ЗначениеСсылочногоТипа(СтрокаКонтактнойИнформации.Объект);
			ПараметрыКонтактнойИнформации.Вставить("ЭтоСсылка", ЭтоСсылка);
			ПараметрыКонтактнойИнформации.Вставить("Периодическая", МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено);
			
			ВладельцыКонтактнойИнформации.Вставить(СтрокаКонтактнойИнформации.Объект, ПараметрыКонтактнойИнформации);
		КонецЕсли;
		
		ОбработатьСтрокуКонтактнойИнформации(СтрокаКонтактнойИнформации);
		
	КонецЦикла;
	
	Для каждого ВладелецКонтактнойИнформации Из ВладельцыКонтактнойИнформации Цикл
		Отбор = Новый Структура("Объект", ВладелецКонтактнойИнформации.Ключ);
		СтрокиКонтактнойИнформацииОбъекта = КонтактнаяИнформация.НайтиСтроки(Отбор);
		
		Если ВладелецКонтактнойИнформации.Значение["ЭтоСсылка"] Тогда
			Объект = ВладелецКонтактнойИнформации.Ключ.ПолучитьОбъект();
		Иначе
			Объект = ВладелецКонтактнойИнформации.Ключ;
		КонецЕсли;
		
		Если Замещать Тогда
			Объект.КонтактнаяИнформация.Очистить();
		КонецЕсли;
		
		Для каждого СтрокаКонтактнойИнформацииОбъекта Из СтрокиКонтактнойИнформацииОбъекта Цикл
			
			ХранитьИсториюИзменений = ВладелецКонтактнойИнформации.Значение["Периодическая"] И СтрокаКонтактнойИнформацииОбъекта.Вид.ХранитьИсториюИзменений;
			
			Если Замещать Тогда
				
				Если ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
				
			Иначе
				
				Отбор = Новый Структура();
				Отбор.Вставить("Вид", СтрокаКонтактнойИнформацииОбъекта.Вид);
				
				Если ХранитьИсториюИзменений Тогда
					Отбор.Вставить("ДействуетС", СтрокаКонтактнойИнформацииОбъекта.Дата);
					НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
				Иначе
					Отбор.Вставить("ЗначенияПолей", СтрокаКонтактнойИнформацииОбъекта.ЗначенияПолей);
					НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
				КонецЕсли;
				
				Если НЕ ХранитьИсториюИзменений
					 И ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата)
					 ИЛИ НайденныеСтроки.Количество() > 0 Тогда
						Продолжить;
				КонецЕсли;
				
				СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
			КонецЕсли;
			
			ЗаполнитьКонтактнуюИнформациюОбъектаИзСтроки(СтрокаКонтактнойИнформацииОбъекта, ХранитьИсториюИзменений, СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Если ВладелецКонтактнойИнформации.Значение["ЭтоСсылка"] Тогда
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет или изменяет контактную информацию у владельца контактной информации.
//
// Параметры:
//  СсылкаИлиОбъект      - Произвольный    - Ссылка или объект владельца содержащего контактную информацию.
//                                           Для ссылки после добавления контактной информации владелец будет записан.
//                                           Если передан объект, то контактная информация будет добавлена без записи.
//                                           Для сохранения изменений объект необходимо будет записать отдельно.
//  КонтактнаяИнформация - ТаблицаЗначений - Таблица, содержащая контактную информацию
//                                           Описание колонок см. функцию НоваяКонтактнаяИнформация.
//                                           Важно! Если передана пустая таблица значений и указан режим замещения, то
//                                           произойдет очистка всей контактной информации владельца контактной информации.
//  Замещать             - Булево          - Если Истина(по умолчанию), то будет заменена
//                                           вся контактная информация по переданном виду контактной информации.
//                                           Если Ложь, то запись будет добавлена. Если вид контактной информации 
//                                           не разрешает ввод нескольких значений, а контактная информация объекта
//                                           уже содержит запись, то запись не будет добавлена.
//
Процедура УстановитьКонтактнуюИнформациюОбъекта(СсылкаИлиОбъект, Знач КонтактнаяИнформация, Замещать = Истина) Экспорт
	
	ЭтоСсылка = ОбщегоНазначения.ЗначениеСсылочногоТипа(СсылкаИлиОбъект);
	Объект =?(ЭтоСсылка,  СсылкаИлиОбъект.ПолучитьОбъект(), СсылкаИлиОбъект);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаИлиОбъект));
	Если МетаданныеОбъекта = Неопределено
		Или МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Добавление контактной информации невозможно, у объекта нет таблицы с контактной информацией.'");;
	КонецЕсли;
	
	// Очистка контактной информации пустой таблицей.
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Если Замещать Тогда
			Объект.КонтактнаяИнформация.Очистить();
			Если ЭтоСсылка Тогда
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Периодическая = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено;
	
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ОбработатьСтрокуКонтактнойИнформации(СтрокаКонтактнойИнформации);
	КонецЦикла;
	
	Если Замещать Тогда
		Если Периодическая Тогда
			Для каждого СтрокаКонтактнойИнформацииОбъекта Из КонтактнаяИнформация Цикл
				НайденныеСтроки = НайтиСтрокиКонтактнойИнформации(СтрокаКонтактнойИнформацииОбъекта.Вид, СтрокаКонтактнойИнформацииОбъекта.Дата, Объект.КонтактнаяИнформация);
				Для каждого Строка Из НайденныеСтроки Цикл
					Объект.КонтактнаяИнформация.Удалить(Строка);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Объект.КонтактнаяИнформация.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаКонтактнойИнформацииОбъекта Из КонтактнаяИнформация Цикл
		
		ХранитьИсториюИзменений = Периодическая И СтрокаКонтактнойИнформацииОбъекта.Вид.ХранитьИсториюИзменений;
		
		Если Замещать Тогда
			
			Если ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
			
		Иначе
			
			Отбор = Новый Структура();
			Отбор.Вставить("Вид", СтрокаКонтактнойИнформацииОбъекта.Вид);
			
			Если ХранитьИсториюИзменений Тогда
				Отбор.Вставить("ДействуетС", СтрокаКонтактнойИнформацииОбъекта.Дата);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			Иначе
				Отбор.Вставить("ЗначенияПолей", СтрокаКонтактнойИнформацииОбъекта.ЗначенияПолей);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			КонецЕсли;
			
			Если НЕ ХранитьИсториюИзменений
				 И ЗапрещенВводНесколькихЗначений(СтрокаКонтактнойИнформацииОбъекта.Вид, Объект.КонтактнаяИнформация, СтрокаКонтактнойИнформацииОбъекта.Дата)
				 ИЛИ НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
			КонецЕсли;
			
			СтрокаКонтактнойИнформации = Объект.КонтактнаяИнформация.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьКонтактнуюИнформациюОбъектаИзСтроки(СтрокаКонтактнойИнформацииОбъекта, ХранитьИсториюИзменений, СтрокаКонтактнойИнформации);
		
	КонецЦикла;
	
	Если ЭтоСсылка Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с контактной информацией из других подсистем.

// Преобразует все входящие форматы контактной информации в XML.
//
// Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, СписокЗначений - Описание полей контактной информации.
//    Представление - Строка - Представление контактной информации. Используется, если невозможно определить
//                    представление из параметра ЗначенияПолей (например, отсутствует поле "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации -
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
// Возвращаемое значение:
//     Строка - Контактная информация в виде XML советующего структуре XDTO пакетов КонтактнаяИнформация и Адрес.
//
Функция КонтактнаяИнформацияВXML(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйВид = Неопределено) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.ПривестиКонтактнуюИнформациюXML(Новый Структура(
	"ЗначенияПолей, Представление, ВидКонтактнойИнформации",
	ЗначенияПолей, Представление, ОжидаемыйВид));
	Возврат Результат.ДанныеXML;
	
КонецФункции

// Возвращает тип контактной информации.
//
// Параметры:
//    XMLСтрока - Строка - Контактная информация в виде XML советующего структуре XDTO пакетов КонтактнаяИнформация и Адрес.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ТипыКонтактнойИнформации - соответствующий тип.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ТипКонтактнойИнформации(XMLСтрока);
КонецФункции

// Преобразует представление контактной информации в XML строку соответствующую структуре
// XDTO пакетам КонтактнаяИнформация и Адрес.
// Для адресов, введенных в свободной форме, корректное преобразование не гарантируется.
//
//  Параметры:
//      Представление - Строка  - Строковое представление контактной информации, выводимое пользователю.
//      ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации,
//                      Структура - Вид или тип контактной информации.
//
// Возвращаемое значение:
//      Строка - Контактная информация в виде XML советующего структуре XDTO пакетов КонтактнаяИнформация и Адрес.
//
Функция КонтактнаяИнформацияXMLПоПредставлению(Представление, ОжидаемыйВид) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(
	УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ОжидаемыйВид));
	
КонецФункции

// Возвращает представление контактной информации (адреса, телефона, электронной почты и т.п.).
//
// Параметры:
//    XMLСтрока               - Строка, ОбъектXDTO  - Строка XML или объект XDTO соответствующие XDTO пакетам
//                                                    КонтактнаяИнформация или Адрес.
//    ВидКонтактнойИнформации - Структура - Дополнительные параметры, влияющие на формирование представления адреса:
//      * ВключатьСтрануВПредставление - Булево - В представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - Варианты "ФИАС" или "КЛАДР".
//                                                Если указано "КЛАДР", то в представление адреса
//                                                не включаются значения уровней округ и внутригородской район.
//
// Возвращаемое значение:
//    Строка - Представление контактной информации.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(XMLСтрока, ВидКонтактнойИнформации);
	
КонецФункции

// Возвращает комментарий контактной информации.
//
// Параметры:
//  XMLСтрока - ОбъектXDTO, Строка - Строка XML или объект XDTO соответствующие XDTO пакетам
//                                   КонтактнаяИнформация или Адрес.
//
// Возвращаемое значение:
//  Строка - Комментарий контактной информации или пустая строка,
//           если значение параметра XMLСтрока не является контактной информацией.
//
Функция КомментарийКонтактнойИнформации(XMLСтрока) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат "";
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Возврат ОбъектXDTO.Комментарий;
	
КонецФункции

// Устанавливает новый комментарий для контактной информации.
//
// Параметры:
//   XMLСтрока   - ОбъектXDTO, Строка - Строка XML или объект XDTO соответствующие XDTO пакетам
//                                      КонтактнаяИнформация или Адрес.
//   Комментарий - Строка             - Новое значение комментария.
//
Процедура УстановитьКомментарийКонтактнойИнформации(XMLСтрока, Знач Комментарий) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	ОбъектXDTO.Комментарий = Комментарий;
	Если ЭтоСтрока Тогда
		XMLСтрока = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает информацию о стране адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
// Если передана пустая строка, то возвращается пустая структура.
// Если страна не найдена в справочнике, но найдена в классификаторе ОКСМ, то поле "Ссылка" результата не будет заполнена.
// Если страна не найдена ни в адресе, ни в классификаторе ОКСМ, то будет заполнено только поле "Наименование".
//
// Параметры:
//    XMLСтрока - Строка - Строка XML соответствующая XDTO пакетам КонтактнаяИнформация или Адрес.
//
// Возвращаемое значение:
//    Структура - Описание страны адреса. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - Ссылка на элемент справочника страны мира.
//        * Наименование       - Строка - Наименование страны.
//        * Код                - Строка - Код страны.
//        * НаименованиеПолное - Строка - Полное наименование страны.
//        * КодАльфа2          - Строка - Двузначный буквенный код страны альфа-2.
//        * КодАльфа3          - Строка - Трехзначный буквенный код страны альфа-3.
//
Функция СтранаАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Результат = Новый Структура("Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3");
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Читаем наименование страны
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить страну, ожидается адрес.'");
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Адрес.Страна);
	ДанныеСтраны = ДанныеСтраныМира(, Результат.Наименование);
	Возврат ?(ДанныеСтраны = Неопределено, Результат, ДанныеСтраны);
КонецФункции

// Возвращает домен сетевого адреса для веб-ссылки или адреса электронной почты.
//
// Параметры:
//    XMLСтрока - Строка - Строка XML контактной информации соответствующая XDTO пакету КонтактнаяИнформация.
//
// Возвращаемое значение:
//    Строка - Домен адреса.
//
Функция ДоменАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = СтрНайти(ДоменАдреса, "://");
			Если Позиция > 0 Тогда
				ДоменАдреса = Сред(ДоменАдреса, Позиция + 3);
			КонецЕсли;
			Позиция = СтрНайти(ДоменАдреса, "/");
			Возврат ?(Позиция = 0, ДоменАдреса, Лев(ДоменАдреса, Позиция - 1));
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = СтрНайти(ДоменАдреса, "@");
			Возврат ?(Позиция = 0, ДоменАдреса, Сред(ДоменАдреса, Позиция + 1));
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Невозможно определить домен, ожидается электронная почта или веб-ссылка.'");
КонецФункции

// Возвращает строку с номером телефона без кода и дополнительного номера.
//
// Параметры:
//    XMLСтрока - Строка - Строка XML контактной информации соответствующая XDTO пакету КонтактнаяИнформация.
//
// Возвращаемое значение:
//    Строка - Номер телефона.
//
Функция НомерТелефонаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Невозможно определить номер, ожидается телефона или факс.'");
КонецФункции

// Сравнивает два экземпляра контактной информации.
//
// Параметры:
//    Данные1 - ОбъектXTDO - Объект с контактной информацией.
//            - Строка     - Контактная информация в формате XML.
//            - Структура  - Описание контактной информацию. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,
//                                             ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура -
//                                             Используется в случае, если не удалось вычислить тип из ЗначенияПолей.
//    Данные2 - ОбъектXTDO, Строка, Структура - аналогично Данные1.
//
// Возвращаемое значение:
//     ТаблицаЗначений: - таблица отличающихся полей со следующими колонками:
//        * Путь      - Строка - XPath, идентифицирующий различающееся значение. Значение "ТипКонтактнойИнформации"
//                               означает, что переданные экземпляры контактной информации различаются типом.
//        * Описание  - Строка - описание отличающегося реквизита в терминах предметной области.
//        * Значение1 - Строка - значение, соответствующая объекту, переданному в параметре Данные1.
//        * Значение2 - Строка - значение, соответствующая объекту, переданному в параметре Данные2.
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.РазличияКонтактнойИнформации(Данные1, Данные2);
КонецФункции

// Создает временную таблицу с контактной информацией нескольких объектов.
//
// Параметры:
//    МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - В менеджере создается временная таблица
//     ВТКонтактнаяИнформация с полями:
//     * Объект        - Ссылка - владелец контактной информации.
//     * Вид           - СправочникСсылка.ВидыКонтактнойИнформации - Ссылка на вид контактной информации.
//     * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//     * ЗначенияПолей - Строка - XML соответствующий XDTO пакету КонтактнаяИнформация или Адрес.
//     * Представление - Строка - Представление контактной информации.
//    МассивОбъектов           - Массив - Владельцы контактной информации.
//    ТипыКонтактнойИнформации - Массив - Если указаны, то временная таблица будет содержать только контактную
//                                        информацию этих типов.
//    ВидыКонтактнойИнформации - Массив - Если указаны, то временная таблица будет содержать только контактную
//                                        информацию этих видов.
//    Дата                     - Дата   - Дата, с которой действует запись контактной информации, используется при
//                                        хранении истории изменения контактной информации. Если владелец хранит историю
//                                        изменений, то при несоответствии параметра дате будет вызвано исключение.
//
Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКонтактнойИнформации = Неопределено, ВидыКонтактнойИнформации = Неопределено, Дата = Неопределено) Экспорт
	
	Если ТипЗнч(МассивОбъектов) <> Тип("Массив") ИЛИ МассивОбъектов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	ОбъектыСГруппировкойПоТипам = Новый Соответствие;
	Для каждого Ссылка Из МассивОбъектов Цикл
		ТипОбъекта = ТипЗнч(Ссылка);
		НайденныйОбъект = ОбъектыСГруппировкойПоТипам.Получить(ТипОбъекта);
		Если НайденныйОбъект = Неопределено Тогда
			НаборСсылок = Новый Массив;
			НаборСсылок.Добавить(Ссылка);
			ОбъектыСГруппировкойПоТипам.Вставить(ТипОбъекта, НаборСсылок);
		Иначе
			НайденныйОбъект.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	ТекстЗапросаПодготовкаДанных = "";
	СтрокаРАЗРЕШЕННЫЕ = " РАЗРЕШЕННЫЕ ";
	СтрокаВременнойТаблицы = "ПОМЕСТИТЬ ВТКонтактнаяИнформация";
	
	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		Если МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
			ВызватьИсключение  МетаданныеОбъекта.Имя + " " + НСтр("ru = 'не содержит контактную информацию.'");
		КонецЕсли;
		ИмяТаблицы = МетаданныеОбъекта.Имя;
		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			ТекстЗапросаПодготовкаДанных = ТекстЗапросаПодготовкаДанных + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
			|ПОМЕСТИТЬ СрезКонтактнойИнформации" + ИмяТаблицы + "
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов" + ИмяТаблицы + ")
			|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
			|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			|	И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид, КонтактнаяИнформация.Ссылка
			|;"
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для каждого ОбъектСКонтактнойИнформацией Из ОбъектыСГруппировкойПоТипам Цикл
		ТекстЗапроса = ТекстЗапроса + ?(НЕ ПустаяСтрока(ТекстЗапроса), Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС, "");
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ОбъектСКонтактнойИнформацией.Ключ);
		ИмяТаблицы = МетаданныеОбъекта.Имя;
		
		Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
			Если ТипЗнч(Дата) <> Тип("Дата") Тогда
				ВызватьИсключение НСтр("ru = 'Для получения контактной информации, хранящей историю изменений,
					|требуется указывать дату, с которой действует запись контактной информации.'");
			КонецЕсли;
			
			УсловияОтбора = ?(ВидыКонтактнойИнформации = Неопределено, "", " КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)");
			Если ПустаяСтрока(УсловияОтбора) Тогда
				УсловиеИ = "";
			Иначе
				УсловиеИ = " И ";
			КонецЕсли;
			УсловияОтбора = УсловияОтбора + ?(ТипыКонтактнойИнформации = Неопределено, "", УсловиеИ + " КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)");
			Если НЕ ПустаяСтрока(УсловияОтбора) Тогда
				УсловияОтбора = " ГДЕ " + УсловияОтбора;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаРАЗРЕШЕННЫЕ + "
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.ЗначенияПолей
			|	" + СтрокаВременнойТаблицы + "
			|ИЗ
			|	СрезКонтактнойИнформации" + ИмяТаблицы + " КАК СрезКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
			|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
			|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка " + УсловияОтбора;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаРАЗРЕШЕННЫЕ + "
			|	КонтактнаяИнформация.Ссылка КАК Объект,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.Тип КАК Тип,
			|	ДАТАВРЕМЯ(1,1,1) КАК ДействуетС,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
			|	" + СтрокаВременнойТаблицы + "
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			| КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
			| И КонтактнаяИнформация.Ссылка В (&МассивОбъектов" + ИмяТаблицы + ")
			|	" + ?(ТипыКонтактнойИнформации = Неопределено, "", "И КонтактнаяИнформация.Тип В (&ТипыКонтактнойИнформации)") + "
			|	" + ?(ВидыКонтактнойИнформации = Неопределено, "", "И КонтактнаяИнформация.Вид В (&ВидыКонтактнойИнформации)") + "
			|";
		КонецЕсли;
		СтрокаРАЗРЕШЕННЫЕ ="";
		СтрокаВременнойТаблицы = "";
		
		Запрос.УстановитьПараметр("МассивОбъектов" + ИмяТаблицы, ОбъектСКонтактнойИнформацией.Значение);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаПодготовкаДанных + ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДействуетС", Дата);
	Запрос.УстановитьПараметр("ТипыКонтактнойИнформации", ТипыКонтактнойИнформации);
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);
	Запрос.Выполнить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страны мира

// Возвращает данные о стране по справочнику стран мира или классификатору ОКСМ.
//
// Параметры:
//    КодСтраны    - Строка, Число - Код страны по классификатору ОКСМ. Если не указано, то поиск по коду не производится.
//    Наименование - Строка - Наименование страны. Если не указано, то поиск по наименованию не производится.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - Соответствующий элемент страны мира.
//        * Наименование       - Строка - Наименование страны.
//        * Код                - Строка - Код страны.
//        * НаименованиеПолное - Строка - Полное наименование страны.
//        * КодАльфа2          - Строка - Двузначный буквенный код страны альфа-2.
//        * КодАльфа3          - Строка - Трехзначный буквенный код страны альфа-3.
//        * УчастникЕАЭС       - Булево - Страна-участник ЕАЭС.
//    Неопределено - страна не найдена ни в адресе, ни в классификаторе ОКСМ.
//
Функция ДанныеСтраныМира(Знач КодСтраны = Неопределено, Знач Наименование = Неопределено) Экспорт
	Результат = Неопределено;
	
	Если КодСтраны = Неопределено И Наименование = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НормализованныйКод = КодСтраныМира(КодСтраны);
	Если КодСтраны = Неопределено Тогда
		УсловиеПоиска = "ИСТИНА";
		ФильтрКлассификатора = Новый Структура;
	Иначе
		УсловиеПоиска = "Код=" + КонтрольКавычекВСтроке(НормализованныйКод);
		ФильтрКлассификатора = Новый Структура("Код", НормализованныйКод);
	КонецЕсли;
	
	Если Наименование<>Неопределено Тогда
		УсловиеПоиска = УсловиеПоиска + " И Наименование=" + КонтрольКавычекВСтроке(Наименование);
		ФильтрКлассификатора.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	Результат = Новый Структура("Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3, УчастникЕАЭС");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3, УчастникЕАЭС
	|ИЗ
	|	Справочник.СтраныМира
	|ГДЕ
	|	" + УсловиеПоиска + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Иначе
		ДанныеКлассификатора = ТаблицаКлассификатора();
		СтрокиДанных = ДанныеКлассификатора.НайтиСтроки(ФильтрКлассификатора);
		Если СтрокиДанных.Количество()=0 Тогда
			Результат = Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, СтрокиДанных[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает данные страны по коду.
//
// Параметры:
//  Код     - Строка, Число - Код ОКСМ страны.
//  ТипКода - Строка - Варианты: КодСтраны (по умолчанию), Альфа2, Альфа3.
// 
// Возвращаемое значение:
//  Структура - описание страны. Содержит поля:
//     * Наименование       - Строка - Наименование страны.
//     * Код                - Строка - Код страны.
//     * НаименованиеПолное - Строка - Полное наименование страны.
//     * КодАльфа2          - Строка - Двузначный буквенный код страны альфа-2.
//     * КодАльфа3          - Строка - Трехзначный буквенный код страны альфа-3.
//     * УчастникЕАЭС       - Булево - Страна-участник ЕАЭС.
//  Неопределено - страна не найдена ни в адресе, ни в классификаторе ОКСМ.
//
Функция ДанныеКлассификатораСтранМираПоКоду(Знач Код, Знач ТипКода = "КодСтраны") Экспорт
	
	ДанныеКлассификатора = ТаблицаКлассификатора();
	Если СтрСравнить(ТипКода, "Альфа2") = 0 Тогда
		СтрокаДанных = ДанныеКлассификатора.Найти(ВРег(Код), "КодАльфа2");
	ИначеЕсли СтрСравнить(ТипКода, "Альфа3") = 0 Тогда
		СтрокаДанных = ДанныеКлассификатора.Найти(ВРег(Код), "КодАльфа3");
	Иначе
		СтрокаДанных = ДанныеКлассификатора.Найти(КодСтраныМира(Код), "Код");
	КонецЕсли;
	
	Если СтрокаДанных=Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура("Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3, УчастникЕАЭС");
		ЗаполнитьЗначенияСвойств(Результат, СтрокаДанных);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные о стране по наименованию страны.
//
// Параметры:
//    Наименование - Строка - Наименование страны.
//
// Возвращаемое значение:
//    Структура - Описание страны. Содержит поля:
//       * Наименование       - Строка - Наименование страны.
//       * Код                - Строка - Код страны.
//       * НаименованиеПолное - Строка - Полное наименование страны.
//       * КодАльфа2          - Строка - Двузначный буквенный код страны альфа-2.
//       * КодАльфа3          - Строка - Трехзначный буквенный код страны альфа-3.
//       * УчастникЕАЭС       - Булево - Страна-участник ЕАЭС.
//    Неопределено - Страна не найдена в классификаторе.
//
Функция ДанныеКлассификатораСтранМираПоНаименованию(Знач Наименование) Экспорт
	ДанныеКлассификатора = ТаблицаКлассификатора();
	СтрокаДанных = ДанныеКлассификатора.Найти(Наименование, "Наименование");
	Если СтрокаДанных=Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура("Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3, УчастникЕАЭС");
		ЗаполнитьЗначенияСвойств(Результат, СтрокаДанных);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает ссылку на элемент справочника страны мира по коду или наименованию.
// Если элемент справочника СтраныМиры не найден, то он будет создан на основании данных заполнения.
//
// Параметры:
//  КодИлиНаименование - Строка    - Код страны, код альфа2, код альфа3 или наименование страны.
//  ДанныеЗаполнения   - Структура - Необязательный. Данные для заполнения в случае создания нового элемента.
//                                   Ключи структуры соответствуют реквизитам справочника СтраныМира.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - Ссылка на элемент справочника СтраныМиры.
//                                Если найдено несколько значений, то будет возвращено первое.
//                                Если ничего не найдено, данные заполнения не указаны, то возвращается пустая ссылка.
//
Функция СтранаМираПоКодуИлиНаименованию(КодИлиНаименование, ДанныеЗаполнения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	(СтраныМира.Код = &КодИлиНаименование
	|			ИЛИ СтраныМира.КодАльфа2 = &КодИлиНаименование
	|			ИЛИ СтраныМира.КодАльфа3 = &КодИлиНаименование
	|			ИЛИ СтраныМира.Наименование = &КодИлиНаименование
	|			ИЛИ СтраныМира.НаименованиеПолное = &КодИлиНаименование)";
	
	Запрос.УстановитьПараметр("КодИлиНаименование", КодИлиНаименование);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	КонецЕсли;
	
	ДанныеКлассификатора = ТаблицаКлассификатора();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаКлассификатор.Код,
	|	ТаблицаКлассификатор.КодАльфа2,
	|	ТаблицаКлассификатор.КодАльфа3,
	|	ТаблицаКлассификатор.Наименование,
	|	ТаблицаКлассификатор.НаименованиеПолное,
	|	ТаблицаКлассификатор.УчастникЕАЭС,
	|	ТаблицаКлассификатор.Неактуальный
	|ПОМЕСТИТЬ ТаблицаКлассификатор
	|ИЗ
	|	&ТаблицаКлассификатор КАК ТаблицаКлассификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтранаМира.Код,
	|	СтранаМира.КодАльфа2,
	|	СтранаМира.КодАльфа3,
	|	СтранаМира.Наименование,
	|	СтранаМира.НаименованиеПолное,
	|	СтранаМира.УчастникЕАЭС,
	|	СтранаМира.Неактуальный
	|ИЗ
	|	ТаблицаКлассификатор КАК СтранаМира
	|ГДЕ
	|	(СтранаМира.Код = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа2 = &КодИлиНаименование
	|			ИЛИ СтранаМира.КодАльфа3 = &КодИлиНаименование
	|			ИЛИ СтранаМира.Наименование = &КодИлиНаименование
	|			ИЛИ СтранаМира.НаименованиеПолное = &КодИлиНаименование)";
	
	Запрос.УстановитьПараметр("ТаблицаКлассификатор", ДанныеКлассификатора);
	Запрос.УстановитьПараметр("КодИлиНаименование",   КодИлиНаименование);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		ДанныеЗаполнения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса);
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено 
		ИЛИ НЕ ДанныеЗаполнения.Свойство("Наименование")
		ИЛИ ПустаяСтрока(ДанныеЗаполнения.Наименование) Тогда
		Возврат Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектСтраны = Справочники.СтраныМира.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектСтраны, ДанныеЗаполнения);
	ОбъектСтраны.Записать();
	Возврат ОбъектСтраны.Ссылка;
	
КонецФункции

// Возвращает список стран Евразийского экономического союза (ЕАЭС).
//
// Возвращаемое значение:
//  - ТаблицаЗначений - Список стран Евразийского экономического союза (ЕАЭС).
//     * Ссылка             - СправочникСсылка.СтраныМира - Ссылка на элемент справочника страны.
//     * Наименование       - Строка - Наименование страны.
//     * Код                - Строка - Код страны.
//     * НаименованиеПолное - Строка - Полное наименование страны.
//     * КодАльфа2          - Строка - Двузначный буквенный код страны альфа-2.
//     * КодАльфа3          - Строка - Трехзначный буквенный код страны альфа-3.
Функция СтраныУчастникиЕАЭС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка,
		|	СтраныМира.Наименование КАК Наименование,
		|	СтраныМира.Код КАК Код,
		|	СтраныМира.НаименованиеПолное КАК НаименованиеПолное,
		|	СтраныМира.КодАльфа2 КАК КодАльфа2,
		|	СтраныМира.КодАльфа3 КАК КодАльфа3
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.УчастникЕАЭС = ИСТИНА";
	
	СтраныЕАЭС = Запрос.Выполнить().Выгрузить();
	
	ДанныеКлассификатора = ТаблицаКлассификатора();
	
	Для каждого Страна Из ДанныеКлассификатора Цикл
		Если Страна.УчастникЕАЭС Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Наименование", Страна.Наименование);
			Отбор.Вставить("Код", Страна.Код);
			Отбор.Вставить("НаименованиеПолное", Страна.НаименованиеПолное);
			Отбор.Вставить("КодАльфа2", Страна.КодАльфа2);
			Отбор.Вставить("КодАльфа3", Страна.КодАльфа3);
			НайденныеСтроки = СтраныЕАЭС.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = СтраныЕАЭС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтраныЕАЭС;

КонецФункции

// Определяет является ли страна-участником Евразийского экономического союза (ЕАЭС).
//
// Параметры:
//  Страна - Строка, СправочникСсылка.СтраныМира - Код страны, код альфа2, код альфа3,
//                  наименование страны или ссылка на элемент справочника страны мира.
// Возвращаемое значение:
//    Булево - Если Истина, то страна является государством-участником ЕАЭС.
Функция ЭтоСтранаУчастникЕАЭС(Страна) Экспорт
	
	Если ТипЗнч(Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтраныМира.УчастникЕАЭС КАК УчастникЕАЭС
			|ИЗ
			|	Справочник.СтраныМира КАК СтраныМира
			|ГДЕ
			|	СтраныМира.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Страна);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтрокаРезультата = РезультатЗапроса.Выбрать();
			Если СтрокаРезультата.Следующий() Тогда
				Возврат (СтрокаРезультата.УчастникЕАЭС = ИСТИНА);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НайденнаяСтрана =  СтранаМираПоКодуИлиНаименованию(Страна);
		Если ЗначениеЗаполнено(НайденнаяСтрана) Тогда
			Возврат НайденнаяСтрана.УчастникЕАЭС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта вызываемые при внедрении подсистемы.

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект               - Произвольный - Объект-владелец контактной информации. Если это ссылка, то контактная информация
//                                          будет получена из объекта по ссылке, иначе из таблицы КонтактнаяИнформация объекта.
//    ДополнительныеПараметры - Структура - Описание настроек контактной информации - см. ПараметрыКонтактнойИнформации.
//                                          Предыдущие название параметра ИмяЭлементаДляРазмещения. Устарел, следует
//                                          использовать ДополнительныеПараметры. Группа, куда будут размещены элементы
//                                          контактной информации.
//    УдалитьПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Устарел, следует использовать ДополнительныеПараметры.
//                                                             Может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//    УдалитьИсключаемыеВиды - Массив  - Устарел,следует использовать ДополнительныеПараметры.
//    УдалитьОтложеннаяИнициализация - Массив - Устарел,следует использовать ДополнительныеПараметры.
//
Процедура ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры = Неопределено, УдалитьПоложениеЗаголовкаКИ = "",
	Знач УдалитьИсключаемыеВиды = Неопределено, УдалитьОтложеннаяИнициализация = Ложь) Экспорт
	
	ТипПомещения = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ДополнительныеПараметры.Свойство("ТипПомещения", ТипПомещения);
		ОтложеннаяИнициализация  = ?(ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация"), ДополнительныеПараметры.ОтложеннаяИнициализация, Ложь);
		ПоложениеЗаголовкаКИ     = ?(ДополнительныеПараметры.Свойство("ПоложениеЗаголовкаКИ"), ДополнительныеПараметры.ПоложениеЗаголовкаКИ, "");
		ИсключаемыеВиды          = ?(ДополнительныеПараметры.Свойство("ИсключаемыеВиды"), ДополнительныеПараметры.ИсключаемыеВиды, Неопределено);
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры.Свойство("ИмяЭлементаДляРазмещения"), ДополнительныеПараметры.ИмяЭлементаДляРазмещения, "ГруппаКонтактнаяИнформация");
	Иначе
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры = Неопределено, "ГруппаКонтактнаяИнформация", ДополнительныеПараметры);
		ОтложеннаяИнициализация  = УдалитьОтложеннаяИнициализация;
		ИсключаемыеВиды          = УдалитьИсключаемыеВиды;
		ПоложениеЗаголовкаКИ     = УдалитьПоложениеЗаголовкаКИ;
	КонецЕсли;
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, ДобавляемыеРеквизиты);
	
	// Кэширование часто используемых значений
	СсылкаНаОбъект             = Объект.Ссылка;
	МетаданныеОбъекта          = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяОбъекта                 = МетаданныеОбъекта.Имя;
	
	ГруппаВидовКонтактнойИнформации  = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКонтактнойИнформации, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		СкрытьКонтактнуюИнформацию(Форма, ДобавляемыеРеквизиты, ИмяЭлементаДляРазмещения, ИсключаемыеВиды, 
			ОтложеннаяИнициализация, ПоложениеЗаголовкаКИ, СсылкаНаОбъект);
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта           = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ЕстьКолонкаДействуетС      = (РеквизитыОбъекта.Найти("ДействуетС") <> Неопределено);
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти = (РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, 
		|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
		|	КонтактнаяИнформация.ЗначенияПолей,
		|	"""" КАК ДействуетС,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ " +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС";
		
		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
			"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;
		
		Если ЕстьКолонкаДействуетС Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """"" КАК ДействуетС", "КонтактнаяИнформация.ДействуетС КАК ДействуетС");
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		
		Если ЕстьКолонкаДействуетС Тогда
			ТипБулево = Новый ОписаниеТипов("Булево");
			КонтактнаяИнформация.Колонки.Добавить("ХранитьИсториюИзменений", ТипБулево);
			КонтактнаяИнформация.Колонки.Добавить("ЭтоИсторическаяКонтактнаяИнформация", ТипБулево);
			КонтактнаяИнформация.Сортировать("Вид, ДействуетС");
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
				СтрокаКонтактнойИнформации.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.Вид.ХранитьИсториюИзменений;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьКолонкаДействуетС Тогда
		ПредыдущийВид = Неопределено;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
				И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
				Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
				НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
				ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
						НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					КонецЕсли;
				КонецЦикла;
				ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
			КонецЕсли;
		КонецЦикла;
		ТекстЗапросаИсторическаяИнформация = " КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация КАК ЭтоИсторическаяКонтактнаяИнформация,
		|	КонтактнаяИнформация.ДействуетС                  КАК ДействуетС,";
	Иначе
		ТекстЗапросаИсторическаяИнформация = "ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,0 КАК ДействуетС, ";
	КонецЕсли;
	
	ТекстЗапроса = " ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки, " + ТекстЗапросаИсторическаяИнформация + "
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ВидПоляДругое                КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                        КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО 
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.Используется
	|	И ЕстьNULL(ВидыКонтактнойИнформации.Родитель.Используется, Истина)
	|	И (
	|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
		"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКонтактнойИнформации);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	СоздатьРеквизитыКонтактнойИнформации(Форма, ДобавляемыеРеквизиты, ИмяОбъекта, ИсключаемыеВиды, КонтактнаяИнформация, ОтложеннаяИнициализация);
	
	ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
		ОтложеннаяИнициализация, ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Владелец = СсылкаНаОбъект;
	ПараметрыКонтактнойИнформации.ПараметрыАдреса.ТипПомещения = ТипПомещения;
	
	// Кэш значений всех видов контактной информации у данного объекта.
	ДанныеВидовКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.ДанныеВидовКонтактнойИнформации(
		КонтактнаяИнформация.ВыгрузитьКолонку("Вид"));
		
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			СоздатьЭлементыТабличнойЧасти(Форма, ИмяОбъекта, ИмяЭлементаДляРазмещения, СтрокаКИ, ДанныеВидовКонтактнойИнформации);
			Продолжить;
		КонецЕсли;
		
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ,, 
				СтатическийЭлемент, ИмяЭлементаДляРазмещения);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ,, 
			НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, ИмяЭлементаДляРазмещения);
		
		Если СтатическийЭлемент Тогда
			СозданныеЭлементы.Удалить(ИндексЭлемента);
		Иначе
			
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
				ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ));
			
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения);
	
	Если Не ОтложеннаяИнициализация 
		И Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения);
	Иначе
		ДобавитьПояснениеПоСбросуНастроекФормы(Форма, ИмяЭлементаДляРазмещения, ОтложеннаяИнициализация);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    ИмяЭлементаДляРазмещения - Строка - группа, куда будут размещены элементы контактной информации.
//
Процедура ПриЧтенииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(Параметры.ПоложениеЗаголовка), ПредопределенноеЗначение(Параметры.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		СтатическиеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.ИсключаемыеВиды);
		ИменаТабличныхЧастейПоВидамКИ = Неопределено;
		
		Отбор = Новый Структура("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
					ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;
				
				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
				
			ИначеЕсли НЕ РеквизитФормы.Свойство("ЭтоИсторическаяКонтактнаяИнформация")
				ИЛИ НЕ РеквизитФормы.ЭтоИсторическаяКонтактнаяИнформация Тогда
				
				Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);
				
				Если Индекс = Неопределено Тогда // Реквизит создается динамически.
					Если Не ОтложеннаяИнициализация И ЗначениеЗаполнено(РеквизитФормы.ИмяРеквизита) Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(Индекс);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(РеквизитФормы);
		КонецЦикла;
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Параметры.ИсключаемыеВиды, ОтложеннаяИнициализация);
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПослеЗаписиНаСервере(Форма, Объект) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	
	// Только для контактной информации в составе табличной части.
	Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
	СтрокиТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор);
	ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(СтрокиТабличнойЧасти, ИмяОбъекта);
	
	Для Каждого СтрокаТаблицы Из СтрокиТабличнойЧасти Цикл
		ВидИнформации = СтрокаТаблицы.Вид;
		ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
		ТабличнаяЧастьФормы = Форма.Объект[ИменаТабличныхЧастейПоВидамКИ[ВидИнформации]];
		
		Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Вид", ВидИнформации);
			Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти);
			НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 1 Тогда
				
				СтрокаКИ = НайденныеСтроки[0];
				СтрокаТабличнойЧастиФормы[ИмяРеквизита] = СтрокаКИ.Представление;
				СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = СтрокаКИ.ЗначенияПолей;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    Отказ  - Булево - Если Истина, то во время проверки были обнаружены ошибки.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор , "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Представление = Форма[ИмяРеквизита];
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено.'"), ВидИнформации.Наименование),,, ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.ЗначенияПолей,
				ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    Отказ  - Булево - Если Истина, то объект не был записан, т.к. во время записи возникли ошибки.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();	
	ГруппаВидовКонтактнойИнформации = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		
		Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
				Если ПустаяСтрока(СтрокаТаблицы.Представление)
					ИЛИ СтрокаТаблицы.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(Отбор, "Вид");
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъектаМетаданных);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				
				ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				
			КонецЦикла;
			
		Иначе
			Если ВидИнформации.Родитель <> ГруппаВидовКонтактнойИнформации Тогда
				Продолжить;
			КонецЕсли;
			
			ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации,, ДействуетС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
// Вызывается из модуля формы объекта-владельца контактной информации.
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект    - Произвольный     - Объект-владелец контактной информации.
//    Результат - Произвольный     - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
// Возвращаемое значение:
//    Неопределено - значение не используется, обратная совместимость.
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ИмяЭлементаДляРазмещения);
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, Результат.ИмяЭлементаДляРазмещения);
	ИначеЕсли Результат.Свойство("ПоменятьМестамиЭлементы") Тогда
		ЗначениеПервогоЭлемента = Форма[Результат.ПервыйЭлемент];
		Форма[Результат.ПервыйЭлемент] = Форма[Результат.ВторойЭлемент];
		Форма[Результат.ВторойЭлемент] = ЗначениеПервогоЭлемента ;
		
		// Перемещение комментариев, если они есть.
		Отбор = Новый Структура("ИмяРеквизита", Результат.ПервыйЭлемент);
		ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		НайденнаяСтрокаПервыйЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Отбор = Новый Структура("ИмяРеквизита", Результат.ВторойЭлемент);
		НайденнаяСтрокаВторойЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		
		КомментарийПервыйЭлемент = НайденнаяСтрокаПервыйЭлемент.Комментарий;
		НайденнаяСтрокаПервыйЭлемент.Комментарий = НайденнаяСтрокаВторойЭлемент.Комментарий;
		НайденнаяСтрокаВторойЭлемент.Комментарий = КомментарийПервыйЭлемент;
		Форма.Элементы[Результат.ПервыйЭлемент].РасширеннаяПодсказка.Заголовок = НайденнаяСтрокаПервыйЭлемент.Комментарий;
		Форма.Элементы[Результат.ВторойЭлемент].РасширеннаяПодсказка.Заголовок = НайденнаяСтрокаВторойЭлемент.Комментарий;
	КонецЕсли;
	
	Если Результат.Свойство("ОбновитьКонтекстноеМеню") Тогда
		Если Результат.Свойство("ИмяЭлементаДляРазмещения") Тогда
			ОбновитьКонтекстноеМеню(Форма, Результат.ИмяЭлементаДляРазмещения);
		Иначе
			Для каждого ИмяЭлементаРазмещения Из Форма.ПараметрыКонтактнойИнформации Цикл
				ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаРазмещения.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Обработчик подписки события "ОбработкаЗаполнения".
//
// Параметры:
//  Источник             - Произвольный - Объект, содержащий контактную информацию.
//  ДанныеЗаполнения     - Структура - данные с контактной информацией для заполнения объекта.
//  ТекстЗаполнения      - Строка - Не используется.
//  СтандартнаяОбработка - Булево - Не используется.
//
Процедура ОбработкаЗаполненияКонтактнойИнформации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик подписки события "ПередЗаписью" для обновления контактной информации для списков.
//
// Параметры:
//  Объект - Произвольный - Объект, содержащий контактную информацию.
//  Отказ  - Булево       - Не используется, обратная совместимость.
//
Процедура ОбработкаОбновленияКонтактнойИнформации(Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформациюДляСписков(Объект);
	
КонецПроцедуры

// Обработчик подписки события "ОбработкаЗаполнения" для документов.
//
// Параметры:
//  Источник             - Произвольный         - Объект, содержащий контактную информацию.
//  ДанныеЗаполнения     - Структура            - Данные с контактной информацией для заполнения объекта.
//  ТекстЗаполнения      - Строка, Неопределено - Данные заполнения реквизита Наименование.
//  СтандартнаяОбработка - Булево               - Не используется.
//
Процедура ОбработкаЗаполненияКонтактнойИнформацииДокумента(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Выполняет отложенную инициализацию реквизитов и элементов контактной информации.
//
// Параметры:
//  Форма                    - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект                   - Произвольный - Объект-владелец контактной информации.
//  ИмяЭлементаДляРазмещения - Строка - Имя группы где размещена контактная информация.
//
Процедура ВыполнитьОтложеннуюИнициализацию(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	КонтактнаяИнформацияЗаглушка = Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка"); // временный элемент
	Если КонтактнаяИнформацияЗаглушка <> Неопределено Тогда
		Форма.Элементы.Удалить(КонтактнаяИнформацияЗаглушка);
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(, "Вид, Представление, ЗначенияПолей, Комментарий");
	Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), ПредопределенноеЗначение(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ПараметрыКонтактнойИнформации.ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	Для Каждого ВидКонтактнойИнформации Из ПараметрыКонтактнойИнформации.ИсключаемыеВиды Цикл
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
		МассивСтрок = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СохраненноеЗначение = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор)[0];
			ТекущееЗначение = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(ТекущееЗначение, СохраненноеЗначение);
			Форма[ТекущееЗначение.ИмяРеквизита] = СохраненноеЗначение.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ПустаяДекорацияКонтактнаяИнформация") <> Неопределено Тогда
		Форма.Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции и конструкторы.

// Описание параметров контактной информацией используемых в обработчике ПриСозданииНаСервере.
// 
// Возвращаемое значение:
//  Структура - параметры контактной информации.
//   * Индекс                   - Строка - Индекс адреса.
//   * Страна                   - Строка - Страна адреса.
//   * ТипПомещения             - Строка - Наименование  типа помещения, который будет установлен
//                                         в форме ввода нового адреса. По умолчанию, "Квартира".
//   * ИмяЭлементаДляРазмещения - Строка - Группа, куда будут размещены элементы контактной информации.
//   * ИсключаемыеВиды - Массив - Виды контактной информации, которые не требуется отображать на форме.
//   * ОтложеннаяИнициализация  - Булево - Если Истина, то создание полей контактной информации на форме будет отложено.
//   * ПоложениеЗаголовкаКИ     -  ПоложениеЗаголовкаЭлементаФормы - Может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//
Функция ПараметрыКонтактнойИнформации() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТипПомещения", "Квартира");
	Результат.Вставить("Индекс", Неопределено);
	Результат.Вставить("Страна", Неопределено);
	Результат.Вставить("ОтложеннаяИнициализация", Ложь);
	Результат.Вставить("ПоложениеЗаголовкаКИ", "");
	Результат.Вставить("ИсключаемыеВиды", Неопределено);
	Результат.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	
	Возврат Результат;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Проверка и сведения об адресе

// Проверяет контактную информацию.
//
// Параметры:
//  Представление  - Строка - Представление контактной информации. Используется, если невозможно определить
//                           представление из параметра ЗначенияПолей (отсутствие поля "Представление").
//  ЗначенияПолей  - Строка, Структура, Соответствие, СписокЗначений - Описание полей контактной информации.
//  ВидИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - Используется для определения типа, если его невозможно
//                                                               определить по параметру ЗначенияПолей.
//  ТипИнформации  - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//  ИмяРеквизита   - Строка - Имя реквизита на форме.
//  Комментарий    - Строка - Текст комментария.
//  ПутьКРеквизиту - Строка - Путь к реквизиту.
// 
// Возвращаемое значение:
//  Число - уровень ошибок, 0 - ошибки отсутствуют.
//
Функция ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "") Экспорт
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Устанавливает свойства вида контактной информации.
// Примечание. При использовании параметра Порядок следует внимательно следить за уникальностью назначаемого значения.
//  Если после выполнения обновления значения порядка окажутся неуникальными в пределах группы, то настройка порядка
//  пользователем будет невозможна.
//  В общем случае рекомендуется не использовать этот параметр (порядок не изменится), либо заполнять его значением
//  0 (порядок будет назначен автоматически в подсистеме "Настройка порядка элементов" при выполнении процедуры).
//  Для размещения видов КИ в определенной последовательности относительно друг друга без явного размещения в начале
//  списка достаточно вызывать данную процедуру в нужной последовательности для каждого вида КИ с указанием порядка 0.
//  Если добавляется предопределенный вид КИ к уже существующим в ИБ, не рекомендуется назначать порядок в явном виде.
//
// Параметры:
//    Параметры - Структура - содержит структуру с полями:
//        * Вид - СправочникСсылка.ВидыКонтактнойИнформации, Строка   - Ссылка на вид контактной информации или
//                                                                      идентификатор предопределенного элемента.
//        * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации или его
//                                                                      идентификатор.
//        * Порядок - Число, Неопределено                             - Порядок вида контактной информации, положение в
//                                                                      списке относительно других элементов:
//                                                                          Неопределено - не переназначать;
//                                                                          0            - назначить автоматически;
//                                                                          Число > 0    - назначить указанный порядок.
//        * МожноИзменятьСпособРедактирования - Булево                - Истина, если есть возможность изменять способ
//                                                                      редактирования только в диалоге, Ложь - иначе.
//        * РедактированиеТолькоВДиалоге - Булево                     - Истина, если редактировать только в диалоге,
//                                                                      Ложь - иначе.
//        * ОбязательноеЗаполнение                                    - Булево - Истина, если требуется обязательное
//                                                                      заполнение поля, Ложь - иначе.
//        * РазрешитьВводНесколькихЗначений - Булево                  - Признак возможности использования дополнительных
//                                                                      полей ввода для данного вида.
//        * ЗапретитьРедактированиеПользователем - Булево             - Признак недоступности редактирования
//                                                                      пользователем свойства вида контактной
//                                                                      информации.
//        * ХранитьИсториюИзменений - Булево -                          Признак хранения истории изменений вида
//                                                                      контактной информации.
//                                                                      Значение по умолчанию Ложь.
//        * Используется - Булево -                                     Признак использования вида контактной информации.
//                                                                      Значение по умолчанию Истина.
//        * ВидПоляДругое - Строка -                                    Внешний вид поля типа "Другое". Возможные значения:
//                                                                      МногострочноеШирокое, ОднострочноеШирокое, ОднострочноеУзкое.
//                                                                      Значение по умолчанию - ОднострочноеШирокое.
//        * НастройкиПроверки - Структура, Неопределено               - Настройки проверки вида контактной информации.
//            Для типа Адрес - Структура, содержащая поля:
//                * ТолькоНациональныйАдрес        - Булево - Истина, если возможен ввод только российских адресов.
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                * ПроверятьПоФИАС              - Булево - Истина, если требуется проверка адреса по ФИАС, иначе
//                                                          проверка по КЛАДР (только если ТолькоНациональныйАдрес = Истина
//                                                          и ПроверятьКорректность = Истина).
//                * ЗапрещатьВводНекорректного   - Булево - Устарел. Все переданные значения игнорируются.
//                                                          Для запрета пользователю записывать некорректные адреса,
//                                                          следует использовать параметр ПроверятьКорректность.
//                * СкрыватьНеактуальныеАдреса   - Булево - Истина, если не требуется показывать неактуальные адреса при
//                                                          вводе (только если ТолькоНациональныйАдрес = Истина).
//                * ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в
//                                                          представление адреса.
//            Для типа АдресЭлектроннойПочты - Структура, содержащая поля:
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес электронной почты.
//                * ЗапрещатьВводНекорректного   - Булево - Устарел. Все переданные значения игнорируются.
//                                                          Для запрета пользователю записывать некорректные адреса,
//                                                          следует использовать параметр ПроверятьКорректность.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено.
//
Процедура УстановитьСвойстваВидаКонтактнойИнформации(Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Вид) = Тип("Строка") Тогда
		Объект = Справочники.ВидыКонтактнойИнформации[Параметры.Вид].ПолучитьОбъект();
	Иначе
		Объект = Параметры.Вид.ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Тип                                  = Параметры.Тип;
	Объект.МожноИзменятьСпособРедактирования    = Параметры.МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге         = Параметры.РедактированиеТолькоВДиалоге;
	Объект.ОбязательноеЗаполнение               = Параметры.ОбязательноеЗаполнение;
	Объект.РазрешитьВводНесколькихЗначений      = Параметры.РазрешитьВводНесколькихЗначений;
	Объект.ЗапретитьРедактированиеПользователем = Параметры.ЗапретитьРедактированиеПользователем;
	Объект.Используется                         = Параметры.Используется;
	Объект.ХранитьИсториюИзменений              = Параметры.ХранитьИсториюИзменений;
	
	Если Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Объект.ВидПоляДругое = Параметры.ВидПоляДругое;
	КонецЕсли;
	
	НастройкиПроверки = Параметры.НастройкиПроверки;
	ПроверятьНастройки = ТипЗнч(НастройкиПроверки) = Тип("Структура");
	
	Если ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Объект.ТелефонCДобавочнымНомером = НастройкиПроверки.ТелефонCДобавочнымНомером;
	Иначе
		УстановитьЗначенияРеквизитовПроверки(Объект);
	КонецЕсли;
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.ПроверитьПараметрыВидаКонтактнойИнформации(Объект);
	
	Если Результат.ЕстьОшибки Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;
	
	Если Параметры.Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Параметры.Порядок;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Возвращает структуру параметров вида контактной информации для определенного типа.
// 
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации, Строка - тип контактной информации для
//                                                                заполнения свойства НастройкиПроверки.
// 
// Возвращаемое значение:
//    Структура - содержит структуру с полями:
//        * Вид - СправочникСсылка.ВидыКонтактнойИнформации, Строка   - Ссылка на вид контактной информации или
//                                                                      идентификатор предопределенного элемента.
//        * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации или его
//                                                                      идентификатор.
//        * Порядок - Число, Неопределено                             - Порядок вида контактной информации, положение в
//                                                                      списке относительно других элементов:
//                                                                          Неопределено - не переназначать;
//                                                                          0            - назначить автоматически;
//                                                                          Число > 0    - назначить указанный порядок.
//        * МожноИзменятьСпособРедактирования - Булево                - Истина, если есть возможность изменять способ
//                                                                      редактирования только в диалоге, Ложь - иначе.
//        * РедактированиеТолькоВДиалоге - Булево                     - Истина, если редактировать только в диалоге,
//                                                                      Ложь - иначе.
//        * ОбязательноеЗаполнение                                    - Булево - Истина, если требуется обязательное
//                                                                      заполнение поля, Ложь - иначе.
//        * РазрешитьВводНесколькихЗначений - Булево                  - Признак возможности использования дополнительных
//                                                                      полей ввода для данного вида.
//        * ЗапретитьРедактированиеПользователем - Булево             - Признак недоступности редактирования
//                                                                      пользователем свойства вида контактной
//                                                                      информации.
//        * Используется - Булево -                                     Признак использования вида контактной информации.
//                                                                      Значение по умолчанию Истина.
//        * НастройкиПроверки - Структура, Неопределено               - Настройки проверки вида контактной информации.
//            Для типа Адрес - Структура, содержащая поля:
//                * ТолькоНациональныйАдрес        - Булево - Истина, если возможен ввод только российских адресов.
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес (только если ТолькоНациональныйАдрес = Истина).
//                * ПроверятьПоФИАС              - Булево - Истина, если требуется проверка адреса по ФИАС, иначе
//                                                          проверка по КЛАДР (только если ТолькоНациональныйАдрес = Истина
//                                                          и ПроверятьКорректность = Истина).
//                * СкрыватьНеактуальныеАдреса   - Булево - Истина, если не требуется показывать неактуальные адреса при
//                                                          вводе (только если ТолькоНациональныйАдрес = Истина).
//                * ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в
//                                                          представление адреса.
//            Для типа АдресЭлектроннойПочты - Структура, содержащая поля:
//                * ПроверятьКорректность        - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес электронной почты.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено.
//
Функция ПараметрыВидаКонтактнойИнформации(Тип = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации[Тип];
	Иначе
		УстанавливаемыйТип = Тип;
	КонецЕсли;
	
	ПараметрыВида = Новый Структура;
	ПараметрыВида.Вставить("Вид");
	ПараметрыВида.Вставить("Тип", УстанавливаемыйТип);
	ПараметрыВида.Вставить("Порядок");
	ПараметрыВида.Вставить("МожноИзменятьСпособРедактирования", Ложь);
	ПараметрыВида.Вставить("РедактированиеТолькоВДиалоге", Ложь);
	ПараметрыВида.Вставить("ОбязательноеЗаполнение", Ложь);
	ПараметрыВида.Вставить("РазрешитьВводНесколькихЗначений", Ложь);
	ПараметрыВида.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	ПараметрыВида.Вставить("ХранитьИсториюИзменений", Ложь);
	ПараметрыВида.Вставить("Используется", Истина);
	
	Если УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ТолькоНациональныйАдрес", Ложь);
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
		НастройкиПроверки.Вставить("ПроверятьПоФИАС", Ложь);
		НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
		НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", Ложь);
		НастройкиПроверки.Вставить("УказыватьОКТМО", Ложь);
	ИначеЕсли УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
	ИначеЕсли УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", Истина);
	Иначе
		Если УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			ПараметрыВида.Вставить("ВидПоляДругое", "ОднострочноеШирокое");
		КонецЕсли;
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	ПараметрыВида.Вставить("НастройкиПроверки", НастройкиПроверки);
	
	Возврат ПараметрыВида;
	
КонецФункции

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//    Объект - ЛюбаяСсылка - номер телефона или факса.
//    ЗначенияПолей - Строка - контактная информация в формате XML.
//    ВидИнформации - Справочник.ВидыКонтактнойИнформация - ссылка на вид контактной информации.
//    ТипИнформации - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//    ИдентификаторСтроки - Число - идентификатор строки табличной части.
//    Дата - Дата - Дата с которой действует запись контактной информации,
//                  используется при хранение истории изменения контактной информации.
Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0, Дата = Неопределено) Экспорт
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ВидИнформации);
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	Если ЗначениеЗаполнено(Дата) Тогда
		НоваяСтрока.ДействуетС    = Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	ЗаполнитьТехническиеПоляКонтактнойИнформации(НоваяСтрока, ОбъектКИ, ТипИнформации);
	
КонецПроцедуры

// Обновляет представление в поле агрегате ВидДляСписка для вывода в контактной информации
//  в динамических списках и отчетах.
//
// Параметры:
//  Объект - ОбъектСсылка - ссылка на объект конфигурации, содержащий табличную часть контактная информация.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписков(Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда
		УправлениеКонтактнойИнформациейСлужебный.ОбновитьКонтактнуюИнформациюДляСписков();
	Иначе
		Если Объект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
			УправлениеКонтактнойИнформациейСлужебный.ОбновитьКонтактнуюИнформациюДляСписковДляОбъекта(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отложенное обновление контактной информации для списков.
//
// Параметры:
//  Параметры	 - Структура - Параметры обработчика обновления.
//  РазмерПорции - Число -  Необязательный параметр размер порции обрабатываемых данных за один запуск.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписковОтложенно(Параметры, РазмерПорции = 1000) Экспорт
	
	ОбъектыСВидомДляСписка = Неопределено;
	Параметры.Свойство("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		// расчет количества
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ОбъектыСВидомДляСписка = Новый Массив;
		ТекстЗапроса = "";
		Разделитель = "";
		
		ШаблонЗапроса = "ВЫБРАТЬ
		| КОЛИЧЕСТВО(ТаблицаСКонтактнойИнформацией.Ссылка) КАК Количество,
		| ТИПЗНАЧЕНИЯ(ТаблицаСКонтактнойИнформацией.Ссылка) КАК Ссылка
		|ИЗ
		| %1.%2 КАК ТаблицаСКонтактнойИнформацией
		| СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(ТаблицаСКонтактнойИнформацией.Ссылка)";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
				
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					КонтактнаяИнформация = Метаданные.Справочники[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
					Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
						ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Справочник", ИмяОбъекта);
						Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Документ") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 9);
				
				Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
					КонтактнаяИнформация = Метаданные.Документы[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
					Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
						ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Документ", ИмяОбъекта);
						Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Параметры.ОбработкаЗавершена = Ложь;
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Количество = 0;
		ОбъектыСВидомДляСписка = Новый Массив;
		Пока РезультатЗапроса.Следующий() Цикл
			Количество = Количество + РезультатЗапроса.Количество;
			ОбъектыСВидомДляСписка.Добавить(РезультатЗапроса.Ссылка);
		КонецЦикла;
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Количество;
		Параметры.Вставить("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	КонецЕсли;
	
	Если ОбъектыСВидомДляСписка = Неопределено ИЛИ ОбъектыСВидомДляСписка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаСВидомДляСписка = Метаданные.НайтиПоТипу(ОбъектыСВидомДляСписка.Получить(0)).ПолноеИмя();
	ТекстЗапроса = " ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0") + "
	|	КонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	" + ПолноеИмяОбъектаСВидомДляСписка + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформация.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА КонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	|				ТОГДА 0
	|				ИНАЧЕ 1
	|		КОНЕЦ) = 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Количество = РезультатЗапроса.Количество();
	Если Количество > 0 Тогда
		Пока РезультатЗапроса.Следующий() Цикл
			Объект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
			ОбновитьКонтактнуюИнформациюДляСписков(Объект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЦикла;
		Если Количество < 1000 Тогда
			ОбъектыСВидомДляСписка.Удалить(0);
		КонецЕсли;
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Количество;
	Иначе
		ОбъектыСВидомДляСписка.Удалить(0);
	КонецЕсли;
	
	Если ОбъектыСВидомДляСписка.Количество() > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ОбъектыСВидомДляСписка", ОбъектыСВидомДляСписка);
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обратная совместимость.

// Устарела. Следует использовать РаботаСАдресами.ПредыдущийФорматКонтактнойИнформацииXML.
// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - XML контактной информации.
//    СокращенныйСоставПолей - Булево - если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка  - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.ПредыдущийФорматКонтактнойИнформацииXML(Данные, СокращенныйСоставПолей);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML.
// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - XML контактной информации или пары ключ-значение.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры контактной информации. 
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - текстовое представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(Данные, ВидКонтактнойИнформации);
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.АдресВФорматеКЛАДР.
// Преобразует адреса нового формата XML ФИАС в адрес формата КЛАДР.
//
// Параметры:
//   Данные                  - Строка - XML контактной информации или пары ключ-значение.
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - текстовое представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//        ** АдресРФ          - Булево - Если Истина, то адрес российский.
//        ** Представление    - Строка - текстовое представление адреса.
//
Функция АдресВФорматеКЛАДР(Знач Данные) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.АдресВФорматеКЛАДР(Данные);
	КонецЕсли;
	
	Возврат Новый Структура;
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.СведенияОбАдресах.
// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
// Параметры:
//   Адреса                  - Массив - XDTO объекты или строки XML контактной информации.
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Массив - содержит массив структур, содержимое структуры см. описание функции РаботаСАдресами.СведенияОбАдресе.
//
Функция СведенияОбАдресах(Адреса, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.СведенияОбАдресах(Адреса, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.СведенияОбАдресе.
// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
// Параметры:
//   Адрес                  - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации.
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * КодРегиона       - Строка - код региона РФ.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа.
//        * ОкругСокращение  - Строка - сокращение округа.
//        * Район            - Строка - текстовое представление района.
//        * РайонСокращение  - Строка - сокращение района.
//        * Город            - Строка - текстовое представление города.
//        * ГородСокращение  - Строка - сокращение города.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района.
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории.
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории.
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории.
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории.
//        * Здание - Структура - структура с информацией о здании адреса.
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - код КЛАДР региона.
//           ** Район           - Строка    - код КЛАДР район.
//           ** Город           - Строка    - код КЛАДР города.
//           ** НаселенныйПункт - Строка    - код КЛАДР населенного пункта.
//           ** Улица           - Строка    - код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.РегионАдресаКонтактнойИнформации.
// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция РегионАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.РегионАдресаКонтактнойИнформации(XMLСтрока);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.ГородАдресаКонтактнойИнформации.
// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция ГородАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Возврат МодульРаботаСАдресами.ГородАдресаКонтактнойИнформации(XMLСтрока);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Устарела. Следует использовать УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта.
// Получить значения определенного типа контактной информации у объекта.
//
// Параметры:
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент,
//                                            партнер и т.д.).
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип получаемой контактной информации.
//
// Возвращаемое значение:
//    ТаблицаЗначений - колонки.
//        * Значение - строка - строковое представление значения.
//        * Вид      - строка - представление вида контактной информации.
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформацияОбъекта", КонтактнаяИнформацияОбъекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление,
	|	КонтактнаяИнформацияОбъекта.Вид
	|ПОМЕСТИТЬ ВТКонтактнаяИнформацияОбъекта
	|ИЗ
	|	&КонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияОбъекта.Вид) КАК Вид
	|ИЗ
	|	ВТКонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Устарела. Следует использовать УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта.
//  Возвращает значения всей контактной информации определенного вида для объекта-владельца.
//
//  Параметры:
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                              контрагент, партнер и т.д.).
//    ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//    Дата                    - Дата - Необязательный, дата с которой действует запись контактной информации,
//                                     используется при хранении истории изменения контактной информации.
//
//  Возвращаемое значение:
//      Таблица значений -информация. Колонками: 
//          * НомерСтроки     - Число     - номер строки дополнительной табличной части объекта-владельца.
//          * Представление   - Строка    - представление КИ, введенное пользователем.
//          * СтруктураПолей  - Структура - пары ключ-значение данных информации.
//
Функция ТаблицаКонтактнойИнформацииОбъекта(Ссылка, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Запрос = Новый Запрос;
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
		ДействуетС = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
		|ПОМЕСТИТЬ СрезКонтактнойИнформации
		|ИЗ
		|	%1.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
		|	И КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|	И КонтактнаяИнформация.Вид = &Вид
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	СрезКонтактнойИнформации КАК СрезКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ %1.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
		|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
		|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка 
		|УПОРЯДОЧИТЬ ПО 
		| КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти", МетаданныеОбъекта.ПолноеИмя());
		
		Запрос.УстановитьПараметр("ДействуетС", ДействуетС);
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ 
		|	КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
		|	КонтактнаяИнформация.Представление                     КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей                     КАК ЗначенияПолей
		|ИЗ
		|	%1.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид
		|УПОРЯДОЧИТЬ ПО 
		| КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти", МетаданныеОбъекта.ПолноеИмя());
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("СтруктураПолей");
	Результат.Индексы.Добавить("НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка, "НомерСтроки, Представление");
		СтрокаДанных.СтруктураПолей = ПредыдущаяСтруктураКонтактнойИнформацииXML(
		Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
	КонецЦикла;
	
	Возврат  Результат;
КонецФункции

// Устарела. Следует использовать УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъектов.
// Заполняет контактную информацию в объектах.
//
// Параметры:
//  ДанныеЗаполнения - ТаблицаЗначений - описывает объекты для для заполнения. Содержит колонки:
//     * Приемник    - Произвольный - ссылка или объект, в котором нужно заполнить КИ.
//     * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации  - вид контактной информации, заполняемый в приемнике.
//     * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//     * КлючСтроки  - Структура - фильтр для поиска строки в табличной части,
//                                 где Ключ - имя колонки в табличной части, Значение - значение отбора.
//  Дата       - Дата - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если не указано, то будет установленная текущая дата.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения, Дата = Неопределено) Экспорт
	
	ПредыдущийПриемник = Неопределено;
	ДанныеЗаполнения.Сортировать("Приемник, ВидКИ");
	
	Для Каждого СтрокаЗаполнения Из ДанныеЗаполнения Цикл
		
		Приемник = СтрокаЗаполнения.Приемник;
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Приемник)) Тогда
			Приемник = Приемник.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПредыдущийПриемник <> Неопределено И ПредыдущийПриемник <> Приемник Тогда
			Если ПредыдущийПриемник.Ссылка = Приемник.Ссылка Тогда
				Приемник = ПредыдущийПриемник;
			Иначе
				ПредыдущийПриемник.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ВидКИ = СтрокаЗаполнения.ВидКИ;
		ИмяОбъектаПриемника = Приемник.Метаданные().Имя;
		ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъектаПриемника);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ,, Дата);
		Иначе
			Если ТипЗнч(СтрокаЗаполнения.КлючСтроки) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗаполнения.КлючСтроки.Свойство("НомерСтроки") Тогда
				КоличествоСтрокТабличнойЧасти = Приемник[ИмяТабличнойЧасти].Количество();
				НомерСтроки = СтрокаЗаполнения.КлючСтроки.НомерСтроки;
				Если НомерСтроки > 0 И НомерСтроки <= КоличествоСтрокТабличнойЧасти Тогда
					СтрокаТабличнойЧасти = Приемник[ИмяТабличнойЧасти][НомерСтроки - 1];
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти, Дата);
				КонецЕсли;
			Иначе
				СтрокиТабличнойЧасти = Приемник[ИмяТабличнойЧасти].НайтиСтроки(СтрокаЗаполнения.КлючСтроки);
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти, Дата);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийПриемник = Приемник;
		
	КонецЦикла;
	
	Если ПредыдущийПриемник <> Неопределено Тогда
		ПредыдущийПриемник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Следует использовать УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта.
// Заполняет контактную информацию объекта.
//
// Параметры:
//  Приемник    - Произвольный - Ссылка или объект, в котором нужно заполнить КИ.
//  ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации, заполняемый в приемнике.
//  СтруктураКИ - Структура - Заполненная структура контактной информации.
//  КлючСтроки  - Структура - Отбор для поиска строки в табличной части.
//    * Ключ - Строка - Имя колонки в табличной части.
//    * Значение  - Строка - Значение отбора.
//  Дата        - Дата - Необязательный, дата с которой действует запись контактной информации,
//                       используется при хранении истории изменения контактной информации.
//                       Если не указано, то будет установленная текущая дата.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъекта(Приемник, ВидКИ, СтруктураКИ, КлючСтроки = Неопределено, Дата = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("Приемник");
	ДанныеЗаполнения.Колонки.Добавить("ВидКИ");
	ДанныеЗаполнения.Колонки.Добавить("СтруктураКИ");
	ДанныеЗаполнения.Колонки.Добавить("КлючСтроки");
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	СтрокаЗаполнения.Приемник = Приемник;
	СтрокаЗаполнения.ВидКИ = ВидКИ;
	СтрокаЗаполнения.СтруктураКИ = СтруктураКИ;
	СтрокаЗаполнения.КлючСтроки = КлючСтроки;
	
	ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения, Дата);
	
КонецПроцедуры

// Устарела. Следует использовать РаботаСАдресами.ПроверитьАдрес.
// Проверяет адрес на соответствие требованиям к адресной информации.
//
// Параметры:
//   АдресВXML                      - Строка -  строка XML контактной информации.
//   ПараметрыПроверки              - Структура, СправочникСсылка.ВидыКонтактнойИнформации - флаги проверки адреса.
//          ТолькоНациональныйАдрес - Булево - Адрес должен быть только Российским. По умолчанию ИСТИНА.
//          ФорматАдреса            - Строка - По какому классификатору проверять "КЛАДР" или "ФИАС". По умолчанию "КЛАДР".
// Возвращаемое значение:
//   Структура - содержит структуру с полями:
//        * Результат    - Строка - результат проверки: "Корректный", "НеПроверен", "СодержитОшибки".
//        * СписокОшибок - СписокЗначений - Информация о ошибках.
Функция ПроверитьАдрес(Знач АдресВXML, ПараметрыПроверки = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдресВXML(АдресВXML, ПараметрыПроверки);
КонецФункции

// Устарела. Следует использовать ПараметрыКонтактнойИнформации.
// Описание параметров контактной информацией используемых в обработчике ПриСозданииНаСервере.
// 
// Возвращаемое значение:
//  Структура - параметры контактной информации.
//   * Индекс                   - Строка - Индекс адреса.
//   * Страна                   - Строка - Страна адреса.
//   * ТипПомещения             - Строка - Наименование  типа помещения, который будет установлен
//                                         в форме ввода нового адреса. По умолчанию, "Квартира".
//   * ИмяЭлементаДляРазмещения - Строка - Группа, куда будут размещены элементы контактной информации.
//   * ИсключаемыеВиды - Массив - Виды контактной информации, которые не требуется отображать на форме.
//   * ОтложеннаяИнициализация  - Булево - Если Истина, то создание полей контактной информации на форме будет отложено.
//   * ПоложениеЗаголовкаКИ     -  ПоложениеЗаголовкаЭлементаФормы - Может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//
Функция ПараметрыКонтактнойИнформацией() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТипПомещения", "Квартира");
	Результат.Вставить("Индекс", Неопределено);
	Результат.Вставить("Страна", Неопределено);
	Результат.Вставить("ОтложеннаяИнициализация", Ложь);
	Результат.Вставить("ПоложениеЗаголовкаКИ", "");
	Результат.Вставить("ИсключаемыеВиды", Неопределено);
	Результат.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает доступность элементов контактной информации на форме.
//
// Параметры:
//    Форма - УправляемаяФорма - передаваемая форма.
//    Элементы - Соответствие -  Список видов контактной информации, для которых устанавливается доступ.
//        ** Ключ     - ОбъектМетаданных - Подсистема, в которой размещается отчет или вариант отчета.
//        ** Значение - Булево           - Если ЛОЖЬ, то элемент доступен только для просмотра.
//
Процедура УстановитьДоступностьЭлементовКонтактнойИнформации(Форма, Элементы, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	Для каждого Элемент Из Элементы Цикл
		
		Отбор = Новый Структура("Вид", Элемент.Ключ);
		НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки <> Неопределено Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЭлементКИ = Форма.Элементы[НайденнаяСтрока.ИмяРеквизита];
				ЭлементКИ.ТолькоПросмотр = НЕ Элемент.Значение;
			КонецЦикла;
			// Если у элемента только просмотр, то удаляем возможность добавления этого элемента на форму.
			ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
			Если НЕ Элемент.Значение Тогда
				Для каждого ЭлементКонтекстногоМеню Из ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов Цикл
					Если ЭлементКонтекстногоМеню.Значение.Ссылка = Элемент.Ключ Тогда
						ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Удалить(ЭлементКонтекстногоМеню);
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти("КонтактнаяИнформацияДобавитьПолеВвода") <> Неопределено Тогда
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		Если ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Количество() = 0 Тогда
			// Делаем кнопку Добавить недоступной, т.к. контекстное меню пустое. 
			Форма.Элементы.КонтактнаяИнформацияДобавитьПолеВвода.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет список колонки для загрузки данных колонками контактной информации.
//
// Параметры:
//  МетаданныеСправочника	 - ОбъектМетаданных - Метаданные справочника.
//  ИнформацияПоКолонкам	 - ТаблицаЗначение - колонки макета.
//
Процедура КолонкиДляЗагрузкиДанных(МетаданныеСправочника, ИнформацияПоКолонкам) Экспорт
	
	Если МетаданныеСправочника.ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = ИнформацияПоКолонкам.Количество() + 1;
	
	ВидыКонтактнойИнформации = ВидыКонтактнойИнформацияОбъекта(Справочники[МетаданныеСправочника.Имя].ПустаяСсылка());
	
	Для каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		ИмяКолонки = "КонтактнаяИнформация_" + СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВидКонтактнойИнформации.Наименование);
		Если ИнформацияПоКолонкам.Найти(ИмяКолонки, "ИмяКолонки") = Неопределено Тогда
			СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
			СтрокаИнфоПроКолонки.ИмяКолонки = ИмяКолонки;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки = ВидКонтактнойИнформации.Представление;
			СтрокаИнфоПроКолонки.ТипКолонки = Новый ОписаниеТипов("Строка");
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Ложь;
			СтрокаИнфоПроКолонки.Позиция = Позиция;
			СтрокаИнфоПроКолонки.Группа = НСтр("ru = 'Контактная информация'");
			СтрокаИнфоПроКолонки.Видимость = Истина;
			СтрокаИнфоПроКолонки.Ширина = 30;
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Виды контактной информация объекта.
//
// Параметры:
//  ВладелецКонтактнойИнформации - Ссылка на владельца контактной информации.
//                                 Объект владельца контактной информации.
//                                 ДанныеФормыСтруктура (по типу объекта владельца свойств).
// Возвращаемое значение:
//  ТаблицаЗначений -  виды контактной информации.
//
Функция ВидыКонтактнойИнформацияОбъекта(ВладелецКонтактнойИнформации) Экспорт
	
	Если ТипЗнч(ВладелецКонтактнойИнформации) = Тип("ДанныеФормыСтруктура") Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ВладелецКонтактнойИнформации)) Тогда
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации);
	Иначе
		ТипСсылки = ТипЗнч(ВладелецКонтактнойИнформации.Ссылка)
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипСсылки);
	ПолноеИмяОбъектаМетаданных = МетаданныеСправочника.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА
	|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл 
		Если СтрСравнить(РезультатЗапроса.ИмяПредопределенныхДанных, ИмяГруппыВидовКИ) = 0 Тогда
			ГруппаВидовКИ = РезультатЗапроса.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ГруппаВидовКИ) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Представление,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|	И ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции

// Возвращает полные данные ОКСМ классификатора.
//
// Возвращаемое значение:
//     ТаблицаЗначений - данные классификатора с колонками:
//         * Код                - Строка - данные страны.
//         * Наименование       - Строка - данные страны.
//         * НаименованиеПолное - Строка - данные страны.
//         * КодАльфа2          - Строка - данные страны.
//         * КодАльфа3          - Строка - данные страны.
//
//     Таблица значений проиндексирована по полям "Код", "Наименование".
//
Функция ТаблицаКлассификатора() Экспорт
	Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
КонецФункции

// Возвращает тип контактной информации.
//
// Параметры:
//    Наименование - Строка - Тип контактной информация в виде строки.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ТипыКонтактнойИнформации - соответствующий тип.
//
Функция ТипКонтактнойИнформацииПоНаименованию(Знач Наименование) Экспорт
	Возврат Перечисления.ТипыКонтактнойИнформации[Наименование];
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура СоздатьРеквизитыКонтактнойИнформации(Знач Форма, Знач ДобавляемыеРеквизиты, Знач ИмяОбъекта, Знач ИсключаемыеВиды, 
	Знач КонтактнаяИнформация, Знач ОтложеннаяИнициализация)
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	ПредыдущийВид      = Неопределено;
	ПорядковыйНомер    = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Позиция = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Позиция + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ТекущийВид = СтрокаКИ.Вид;
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x")
						+ ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), 
						ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);
				Продолжить;
			КонецЕсли;
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
				ПорядковыйНомер = 1;
			Иначе
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			Индекс = СозданныеРеквизиты.Найти(ТекущийВид);
			Если Индекс = Неопределено Тогда
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x")
					+ ПорядковыйНомер;
				Если Не ОтложеннаяИнициализация Тогда
					ДобавляемыеРеквизиты.Добавить(
						Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

Процедура СкрытьКонтактнуюИнформацию(Знач Форма, Знач ДобавляемыеРеквизиты, Знач ИмяЭлементаДляРазмещения, Знач ИсключаемыеВиды, 
	Знач ОтложеннаяИнициализация, Знач ПоложениеЗаголовкаКИ, Знач СсылкаНаОбъект)
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	ДобавленныеРеквизиты = Новый Массив;
	Для Каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
		Если ПустаяСтрока(ДобавляемыйРеквизит.Путь) Тогда
			ДобавленныеРеквизиты.Добавить(ДобавляемыйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
		ОтложеннаяИнициализация, ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.ДобавленныеРеквизиты = ДобавленныеРеквизиты;
	ПараметрыКонтактнойИнформации.Владелец = СсылкаНаОбъект;
	
	Если Не ПустаяСтрока(ИмяЭлементаДляРазмещения) Тогда
		Форма.Элементы[ИмяЭлементаДляРазмещения].Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Знач Форма, Знач ИмяЭлементаДляРазмещения)
	
	Описание = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
	ГруппаКоманды             = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения, Форма, Описание, ИмяЭлементаДляРазмещения);
	ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	
	ИмяКоманды          = "КонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения;
	Команда             = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Подсказка   = Описание;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка    = БиблиотекаКартинок.ДобавитьЭлементСписка;
	Команда.Действие    = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	
	Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	
	Кнопка             = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
	Кнопка.Доступность = НЕ Форма.Элементы[ИмяЭлементаДляРазмещения].ТолькоПросмотр;
	Кнопка.Заголовок   = НСтр("ru = 'Добавить'");
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.ИмяКоманды                 = ИмяКоманды;
	Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(ИмяКоманды, 2, Ложь);

КонецПроцедуры

Процедура ДобавитьПояснениеПоСбросуНастроекФормы(Знач Форма, Знач ИмяЭлементаДляРазмещения, Знач ОтложеннаяИнициализация)
	
	ГруппаДляРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	// Если отложенная инициализация и на странице нет элементов, то платформа скрывает страницу,
	// поэтому надо создавать временный элемент, который при переходе на страницу удаляется.
	Если ОтложеннаяИнициализация
		И ГруппаДляРазмещения.Вид = ВидГруппыФормы.Страница 
		И Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка") = Неопределено Тогда
		
		ГруппаСтраниц = ГруппаДляРазмещения.Родитель;
		ЗаголовокСтраницы = ?(ЗначениеЗаполнено(ГруппаДляРазмещения.Заголовок), ГруппаДляРазмещения.Заголовок, ГруппаДляРазмещения.Имя);
		ЗаголовокГруппыСтраниц = ?(ЗначениеЗаполнено(ГруппаСтраниц.Заголовок), ГруппаСтраниц.Заголовок, ГруппаСтраниц.Имя);
		
		ПредупреждениеОРазмещении = НСтр("ru = 'Для отображения контактной информации необходимо разместить группу ""%1"" не первым элементом (после любой другой группы) в группе ""%2"" (меню Еще - Изменить форму).'");
		ПредупреждениеОРазмещении = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредупреждениеОРазмещении,
		ЗаголовокСтраницы, ЗаголовокГруппыСтраниц);
		ТекстПодсказки = НСтр("ru = 'Также можно установить стандартные настройки формы:
		|   • в меню Еще выбрать пункт Изменить форму...;
		|   • в открывшейся форме ""Настройка формы"" в меню Еще выбрать пункт ""Установить стандартные настройки"".'");
		
		Декорация = Форма.Элементы.Добавить("КонтактнаяИнформацияЗаглушка", Тип("ДекорацияФормы"), ГруппаДляРазмещения);
		Декорация.Заголовок              = ПредупреждениеОРазмещении;
		Декорация.ОтображениеПодсказки   = ОтображениеПодсказки.Кнопка;
		Декорация.Подсказка              = ТекстПодсказки;
		Декорация.ЦветТекста             = ЦветаСтиля.ПоясняющийОшибкуТекст;
		Декорация.АвтоМаксимальнаяВысота = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция ЗаголовокСлева(Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		ПоложениеЗаголовкаКИ = ПредопределенноеЗначение(ПоложениеЗаголовкаКИ);
	Иначе
		ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Если ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
	ПолеВвода.РасширеннаяПодсказка.Заголовок = НайденнаяСтрока.Комментарий;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено)
	
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");
	
	Если ДобавлениеНовогоЗначения Тогда
		Результат.Свойство("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		
		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, РедактированиеТолькоВДиалоге, ВидПоляДругое");
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);
	
	Если ДобавлениеНовогоЗначения Тогда
		
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
		
		КоличествоСтрокВида = НайденныеСтроки.Количество();
		Если КоличествоСтрокВида > 0 Тогда
			ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
			ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		Иначе
			ИндексДобавляемойСтроки = 0;
		КонецЕсли;
		
		ЭтоПоследняяСтрока = Ложь;
		Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		КонецЕсли;
		
		НоваяСтрока  = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
			"КонтактнаяИнформацияПоле",
			СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x"),
			КоличествоСтрокВида + 1);
		НоваяСтрока.ИмяРеквизита              = ИмяРеквизита;
		НоваяСтрока.Вид                       = ДобавляемыйВид;
		НоваяСтрока.Тип                       = ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ИнформацияОВидеКИ.Наименование, Истина));
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЕстьКомментарий = Ложь;
		ОбязательноеЗаполнение = Ложь;
	Иначе
		ЭтоПоследняяСтрока = СледующаяСтрока = Неопределено;
		ИмяРеквизита = ИнформацияОВидеКИ.ИмяРеквизита;
		ЕстьКомментарий = ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение;
	КонецЕсли;
	
	// Отрисовка на форме
	ГруппаСтроки = Группа("Группа" + ИмяРеквизита, Форма, ДобавляемыйВид.Наименование, ИмяЭлементаДляРазмещения);
	
	Родитель = Родитель(Форма, ИмяЭлементаДляРазмещения);
	Если Не ЭтоПоследняяСтрока Тогда
		Если СледующаяСтрока = Неопределено Тогда
			ИмяСледующейГруппы = "Группа" + ПоследняяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяСледующейГруппы) <> Неопределено Тогда
				ИндексСледующейГруппы = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппы]) + 1;
				СледующаяГруппа = Родитель.ПодчиненныеЭлементы.Получить(ИндексСледующейГруппы);
			КонецЕсли;
		Иначе
			ИмяГруппы = "Группа" + СледующаяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
				СледующаяГруппа = Форма.Элементы[ИмяГруппы];
			КонецЕсли;
		КонецЕсли;
		Форма.Элементы.Переместить(ГруппаСтроки, Родитель, СледующаяГруппа);
	ИначеЕсли ДобавлениеНовогоЗначения Тогда
		СледующаяГруппа = Форма.Элементы[Результат.ИмяКоманды].Родитель;
		Форма.Элементы.Переместить(ГруппаСтроки, Родитель, СледующаяГруппа);
	КонецЕсли;
	
	// Обработка ситуации, когда на форме выводится одновременно множественная динамическая и статическая контактная информация.
	ИмяСледующейГруппыТекущегоВида = "Группа" + ИмяРеквизита;
	Если Форма.Элементы.Найти(ИмяСледующейГруппыТекущегоВида) <> Неопределено Тогда
		
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтрокиТекущегоВида = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
		Если НайденныеСтрокиТекущегоВида.Количество() > 0 Тогда
			ТекущийВид = НайденныеСтрокиТекущегоВида[0].Вид;
		КонецЕсли;
		
		ИндексПредыдущейГруппыВида = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппыТекущегоВида]) - 1;
		Если ИндексПредыдущейГруппыВида >= 0 Тогда
			ПредыдущаяГруппаВида = Родитель.ПодчиненныеЭлементы.Получить(ИндексПредыдущейГруппыВида);
			
			Если ПредыдущаяГруппаВида <> Неопределено Тогда
			
			Отбор = Новый Структура("ИмяРеквизита", СтрЗаменить(ПредыдущаяГруппаВида.Имя, "Группа", ""));
			НайденныеСтрокиПредыдущегоВида = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
			Если НайденныеСтрокиПредыдущегоВида.Количество() > 0 Тогда
				ПредыдущийВид = НайденныеСтрокиПредыдущегоВида[0].Вид;
			КонецЕсли;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ЭтоНовыйВидКИ = Истина;
			КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоНовыйВидКИ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПолеВвода = СоздатьПолеВвода(Форма, ГруппаСтроки, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);
	Если ЕстьКомментарий Тогда
		ПолеВвода.РасширеннаяПодсказка.Заголовок              = ИнформацияОВидеКИ.Комментарий;
		ПолеВвода.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		ПолеВвода.РасширеннаяПодсказка.МаксимальнаяШирина     = ПолеВвода.Ширина;
		ПолеВвода.РасширеннаяПодсказка.Ширина                 = ПолеВвода.Ширина;
	КонецЕсли;
	
	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;
	
	СоздатьДействие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаСтроки, КоличествоАдресов, ЕстьКомментарий, ИмяЭлементаДляРазмещения);
	
	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1 И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1, ИмяЭлементаДляРазмещения);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1, ИмяЭлементаДляРазмещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеНовогоЗначения Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
			Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПолеВвода(Форма, Родитель, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения,ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	ЗаголовокСлева = ЗаголовокСлева(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка);
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	Элемент.ПутьКДанным = ИмяРеквизита;
	
	Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
		Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
			Форма[ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		КонецЕсли;
	Иначе
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	КонецЕсли;
	
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.ВысотаЗаголовка = 2;
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Элемент.Ширина = 50;
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ИнформацияОВидеКИ.ВидПоляДругое = "МногострочноеШирокое" Тогда
			Элемент.Высота = 3;
			Элемент.Ширина = 50;
			Элемент.МногострочныйРежим = Истина;
		ИначеЕсли ИнформацияОВидеКИ.ВидПоляДругое = "ОднострочноеШирокое" Тогда
			Элемент.Высота = 1;
			Элемент.Ширина = 50;
			Элемент.МногострочныйРежим = Ложь;
		Иначе // ОднострочноеУзкое
			Элемент.Высота = 1;
			Элемент.Ширина = 25;
			Элемент.МногострочныйРежим = Ложь;
		КонецЕсли;
	Иначе
		Элемент.Ширина = 25;
	КонецЕсли;
	
	Если Не ЭтоНовыйВидКИ Тогда
		Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
	
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева, ПоложениеЗаголовкаЭлементаФормы.Лево, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Если ЗаголовокСлева Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяРеквизита, 2, Ложь);
	
	// Устанавливаем свойства поля ввода.
	Если ИнформацияОВидеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		// Ввод комментария через контекстное меню.
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
		Команда.Картинка = БиблиотекаКартинок.Комментарий;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.ХранитьИсториюИзменений Тогда
		// Вывод истории контактной информации через контекстное меню.
		ИмяКоманды = "КонтекстноеМенюИстория" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Кнопка.Заголовок = НСтр("ru = 'История изменений...'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
		Команда.Подсказка = НСтр("ru = 'Показывает историю изменения контактной информации'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ГруппаРазделительКарты = Форма.Элементы.Добавить("ПодменюРазделительКонтекстКарты" + ИмяРеквизита, Тип("ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппаРазделительКарты.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		ИмяКоманды = "КонтекстноеМенюКартаЯндекс" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделительКарты);
		Кнопка.Заголовок = НСтр("ru = 'Адрес на Яндекс.Картах'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
		Команда.Подсказка = НСтр("ru = 'Показывает адрес на картах Яндекс.Карты'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
		
		ИмяКоманды = "КонтекстноеМенюКартаGoogle" + ИмяРеквизита;
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделительКарты);
		Кнопка.Заголовок = НСтр("ru = 'Адрес на Google Maps'");
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
		Команда.Подсказка = НСтр("ru = 'Показывает адрес на карте Google Maps'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
		
		ГруппКнопокРазделитель = Форма.Элементы.Добавить("ПодменюРазделительКарты" + ИмяРеквизита, Тип("ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппКнопокРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		// Заполнить
		ГруппаПодменюАдреса = Форма.Элементы.Добавить("КонтекстноеПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппКнопокРазделитель);
		ГруппаПодменюАдреса.Вид = ВидГруппыФормы.Подменю;
		ГруппаПодменюАдреса.Отображение = ОтображениеКнопки.Текст;
		ГруппаПодменюАдреса.Заголовок = НСтр("ru='Заполнить'");
		
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип) 
		И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		
		Элемент.КнопкаВыбора = Истина;
		Если ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
			Элемент.РедактированиеТекста = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
		КонецЕсли;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Процедура ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление, ИмяЭлементаДляРазмещения)
	
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	
	Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Если Направление > 0 Тогда 
		ТекстКоманды = НСтр("ru = 'Переместить вверх'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды = НСтр("ru = 'Переместить вниз'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок = ТекстКоманды;
	Команда.Подсказка = ТекстКоманды;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.Доступность = Истина;
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Заголовок, ИмяЭлементаДляРазмещения)
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель(Форма, ИмяЭлементаДляРазмещения));
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок = Заголовок;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.РазрешитьИзменениеСостава = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяГруппы, 5);
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
		
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
	Иначе
		РеквизитыТаблицы = Форма.ПолучитьРеквизиты("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		РеквизитыДляСоздания = Новый Соответствие;
		РеквизитыДляСоздания.Вставить("ИмяЭлементаДляРазмещения", Истина);
		РеквизитыДляСоздания.Вставить("ХранитьИсториюИзменений", Истина);
		РеквизитыДляСоздания.Вставить("ДействуетС", Истина);
		РеквизитыДляСоздания.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Истина);
		
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			Если РеквизитыДляСоздания[Реквизит.Имя] <> Неопределено Тогда
				РеквизитыДляСоздания[Реквизит.Имя] = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если РеквизитыДляСоздания["ИмяЭлементаДляРазмещения"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		КонецЕсли;
		Если РеквизитыДляСоздания["ХранитьИсториюИзменений"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		Если РеквизитыДляСоздания["ДействуетС"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		КонецЕсли;
		Если РеквизитыДляСоздания["ЭтоИсторическаяКонтактнаяИнформация"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация", Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	
	Объект.ПроверятьКорректность = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);
	Если Объект.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Объект.ПроверятьПоФИАС       = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьПоФИАС);
	КонецЕсли;
	
	Объект.ТолькоНациональныйАдрес = Ложь;
	Объект.ВключатьСтрануВПредставление = Ложь;
	Объект.СкрыватьНеактуальныеАдреса = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКонтактнойИнформации, ДанныеВидовКонтактнойИнформации, ЭтоНовыйВидКИ, 
	ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКонтактнойИнформации.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКонтактнойИнформации.Вид;
	НоваяСтрока.Тип           = СтрокаКонтактнойИнформации.Тип;
	НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКонтактнойИнформации.ДействуетС;
	КонецЕсли;
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКонтактнойИнформации.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКонтактнойИнформации.Представление;
	НоваяСтрока.Комментарий   = СтрокаКонтактнойИнформации.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И СтрокаКонтактнойИнформации.РедактированиеТолькоВДиалоге
			И ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Иначе
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВидаКонтактнойИнформации = ДанныеВидовКонтактнойИнформации[СтрокаКонтактнойИнформации.Вид];
	ДанныеВидаКонтактнойИнформации.Вставить("Ссылка", СтрокаКонтактнойИнформации.Вид);
	
	Если ЭтоНовыйВидКИ И ДанныеВидаКонтактнойИнформации.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти Тогда
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, СтрокаКонтактнойИнформации.Наименование);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ДобавленныеЭлементы = ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя табличной части документа по виду контактной информации.
//
// Параметры:
//    ВидКИ      - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//    ИмяОбъекта - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Строка - имя табличной части или пустая строка, если табличной части нет.
//
Функция ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяВидаКонтактнойИнформации
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВидКИ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Сред(РезультатЗапроса.ИмяВидаКонтактнойИнформации, 
		СтрНайти(РезультатЗапроса.ИмяВидаКонтактнойИнформации, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает имена табличных частей документа по виду контактной информации.
//
// Параметры:
//    ТаблицаВидовКонтактнойИнформации - ТаблицаЗначений - Список видов контактной информации.
//     * Вид - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    ИмяОбъекта                       - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Соответствие - имена табличных части или пустая строка, если табличной части нет.
//
Функция ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	|ПОМЕСТИТЬ ВидыКИ
	|ИЗ
	|	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяТабличнойЧасти,
	|	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	|ИЗ
	|	ВидыКИ КАК ВидыКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти, СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) + СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
		
		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
	Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

Процедура СоздатьЭлементыТабличнойЧасти(Знач Форма, Знач ИмяОбъекта, ИмяЭлементаДляРазмещения, 
	Знач СтрокаКонтактнойИнформации, Знач ДанныеВидовКонтактнойИнформации)
	
	ВидыКонтактнойИнформацииТЧ = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		ВидыКонтактнойИнформацииТЧ.Добавить(СтрокаТабличнойЧасти.Вид);
	КонецЦикла;	
	ДанныеВидовКонтактнойИнформацииТЧ = УправлениеКонтактнойИнформациейСлужебный.ДанныеВидовКонтактнойИнформации(
		ВидыКонтактнойИнформацииТЧ);
	
	ИмяВидаКонтактнойИнформации = ДанныеВидовКонтактнойИнформации[СтрокаКонтактнойИнформации.Вид].ИмяПредопределенныхДанных;
	Позиция = СтрНайти(ИмяВидаКонтактнойИнформации, ИмяОбъекта);
	ИмяТабличнойЧасти = Сред(ИмяВидаКонтактнойИнформации, Позиция + СтрДлина(ИмяОбъекта));
	ПредыдущийВидТЧ = Неопределено;
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		
		ВидКонтактнойИнформацииТЧ = СтрокаТабличнойЧасти.Вид;
		Если ВидКонтактнойИнформацииТЧ <> ПредыдущийВидТЧ Тогда
			
			ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
			
			Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧасти.ИмяРеквизита;
			
			Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧасти.Тип) Тогда
				Элемент.КнопкаВыбора = Истина;
				Если ВидКонтактнойИнформацииТЧ.РедактированиеТолькоВДиалоге Тогда
					Элемент.РедактированиеТекста = Ложь;
				КонецЕсли;
				
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			КонецЕсли;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
			
			Если ВидКонтактнойИнформацииТЧ.ОбязательноеЗаполнение Тогда
				Элемент.АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;
			
			Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].ДобавленныеЭлементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита,
				2, Ложь);
			
			ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧасти, ДанныеВидовКонтактнойИнформацииТЧ, Ложь, Истина,, ИмяЭлементаДляРазмещения);
			ПредыдущийВидТЧ = ВидКонтактнойИнформацииТЧ;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
		
		СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
		
		Если СтрокиТаблицы.Количество() = 1 Тогда
			СтрокаТаблицы = СтрокиТаблицы[0];
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита]                   = СтрокаТабличнойЧасти.Представление;
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧасти.ЗначенияПолей;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, Объект, ТипКонтактнойИнформации)
	
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКонтактнойИнформации, Объект);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКонтактнойИнформации, Объект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			Обработки["РасширенныйВводКонтактнойИнформации"].ЗаполнитьРасширенныеРеквизитыТабличнойЧастиДляАдреса(Адрес, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если СтрНачинаетсяС(КодСтраны, "+") Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = СтрНайти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		// Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - СтрНайти(АдресСтрокой, "://") );
		Поз = СтрНайти(АдресСервера, "/");
		// Удалим путь
		АдресСервера = ?(Поз = 0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию в табличной части "Контактная информация" приемника.
//
// Параметры:
//        * Приемник    - Произвольный - Объект, в котором нужно заполнить КИ.
//        * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, заполняемый в
//                                                                    приемнике.
//        * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//        * СтрокаТабличнойЧасти - СтрокаТабличнойЧасти, Неопределено - данные приемника, если контактная информация
//                                 заполняется для строки.
//                                                                      Неопределено, если контактная информация
//                                                                      заполняется для приемника.
//        * Дата         - Дата - Дата с который действует контактная информация. Используется только
//                                если у вида КИ установлен флаг ХранитьИсториюИзменений.
//
Процедура ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтруктураКИ, СтрокаТабличнойЧасти = Неопределено, Дата = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("Вид", ВидКИ);
	НайденныеСтрокиКИ = Приемник.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Приемник.КонтактнаяИнформация.Добавить();
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаКИ.ИдентификаторСтрокиТабличнойЧасти = СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти;
		КонецЕсли;
	Иначе
		СтрокаКИ = НайденныеСтрокиКИ[0];
	КонецЕсли;
	
	// Из любого понимаемого - в XML.
	ЗначенияПолей = КонтактнаяИнформацияВXML(СтруктураКИ, , ВидКИ);
	Представление = ПредставлениеКонтактнойИнформации(ЗначенияПолей);
	
	СтрокаКИ.Тип           = ВидКИ.Тип;
	СтрокаКИ.Вид           = ВидКИ;
	СтрокаКИ.Представление = Представление;
	СтрокаКИ.ЗначенияПолей = ЗначенияПолей;
	
	Если ВидКИ.ХранитьИсториюИзменений Тогда
		СтрокаКИ.ДействуетС = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей);
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = НСтр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Заполняет дополнительные реквизиты строки табличной части "Контактная информация".
//
// Параметры:
//    СтрокаКИ      - СтрокаТабличнойЧасти - строка "Контактная информация".
//    Представление - Строка                     - представление значения.
//    ЗначенияПолей - СписокЗначений, ОбъектXTDO - значения полей.
//
Процедура ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей)
	
	Если ТипЗнч(ЗначенияПолей) = Тип("ОбъектXDTO") Тогда
		ОбъектКИ = ЗначенияПолей;
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, СтрокаКИ.Вид);
	КонецЕсли;
	
	ТипИнформации = СтрокаКИ.Тип;
	
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКИ, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет контактную информацию.
//
Функция ПроверитьЗаполнениеКонтактнойИнформации(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Получение и коррекция контактной информации
Процедура СкорректироватьКонтактнуюИнформацию(Форма, СтрокаКИ)
	
	РезультатПреобразования = Новый Структура;
	Если ПустаяСтрока(СтрокаКИ.Представление) И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
		СтрокаКИ.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
	КонецЕсли;
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид, РезультатПреобразования, СтрокаКИ.Представление);
	СтрокаКИ.Комментарий = ?(ЗначениеЗаполнено(Результат.Комментарий), Результат.Комментарий, "");
	
	Если РезультатПреобразования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если Не РезультатПреобразования.Свойство("СведенияИсправлены") ИЛИ РезультатПреобразования.СведенияИсправлены = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПреобразования.СведенияИсправлены Тогда
		СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Результат);
	КонецЕсли;

	Если РезультатПреобразования.Свойство("ТекстОшибки") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПреобразования.ТекстОшибки, , СтрокаКИ.ИмяРеквизита);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если Источник <> Неопределено И Источник.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Адрес = Источник;
	Иначе
		Адрес = Источник.Состав;
	КонецЕсли;
	
	Если Адрес <> Неопределено И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			СписокОшибок = Обработки["РасширенныйВводКонтактнойИнформации"].ОшибкиЗаполненияАдресаXDTO(Адрес, ВидИнформации);
			Для Каждого Элемент Из СписокОшибок Цикл
				ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
				ЕстьОшибки = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Объект, Знач ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Наименование, если есть в объекте-приемнике.
	Наименование = Неопределено;
	Если ДанныеЗаполнения.Свойство("Наименование", Наименование)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Наименование") Тогда
		Объект.Наименование = Наименование;
	КонецЕсли;
	
	// Таблица контактной информации, заполняется только если КИ не находится в другой ТЧ.
	КонтактнаяИнформация = Неопределено;
	Если ДанныеЗаполнения.Свойство("КонтактнаяИнформация", КонтактнаяИнформация) 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КонтактнаяИнформация") Тогда
		
		Если ТипЗнч(КонтактнаяИнформация) = Тип("ТаблицаЗначений") Тогда
			КолонкиТаблицы = КонтактнаяИнформация.Колонки;
		Иначе
			КолонкиТаблицы = КонтактнаяИнформация.ВыгрузитьКолонки().Колонки;
		КонецЕсли;
		
		Если КолонкиТаблицы.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
			
			Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
				НоваяСтрокаКИ = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ, , "ЗначенияПолей");
				НоваяСтрокаКИ.ЗначенияПолей = КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Представление, СтрокаКИ.Вид);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Родитель(Форма, ИмяЭлементаДляРазмещения)
	
	Возврат ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения])
	
КонецФункции

Функция ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ИсключаемыеВиды)
	
	Если ТипЗнч(Форма.ПараметрыКонтактнойИнформации) <> Тип("Структура") Тогда
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МожноОтправлятьSMS = МодульОтправкаSMS.ДоступнаОтправкаSMS();
	Иначе
		МожноОтправлятьSMS = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = Новый Структура;
	ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ));
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты", Новый СписокЗначений); //
	ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
	ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов", Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("МожноОтправлятьSMS", МожноОтправлятьSMS);
	ПараметрыКонтактнойИнформации.Вставить("Владелец", Неопределено);
	ПараметрыАдреса = Новый Структура("ТипПомещения, Страна, Индекс", "Квартира");
	ПараметрыКонтактнойИнформации.Вставить("ПараметрыАдреса", ПараметрыАдреса);
	
	Форма.ПараметрыКонтактнойИнформации.Вставить(ИмяЭлементаДляРазмещения, ПараметрыКонтактнойИнформации);
	Возврат Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	
КонецФункции

Функция ГруппаВидовКонтактнойИнформацииОбъекта(Знач ПолноеИмяОбъектаМетаданных)
	
	Возврат Справочники.ВидыКонтактнойИнформации[СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "")];
	
КонецФункции

// Определяет значение положения заголовка. Для поддержки локализованных конфигураций.
//
// Параметры:
//  ПоложениеЗаголовкаКИ - Строка - положения заголовка в текстовом представление на языке локализации.
// 
// Возвращаемое значение:
//  Строка - положения заголовка.
//
Функция ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ)
	
	Если ПоложениеЗаголовкаЭлементаФормы.Лево = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Лево";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Верх = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Верх";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Низ = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Низ";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Право = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Право";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Нет = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Нет";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Авто = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Авто";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура СоздатьДействие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	Тип = ВидКонтактнойИнформации.Тип;
	СоздаватьДействиеДляТипа = Новый Соответствие();
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ?(КоличествоАдресов > 1, Истина, Ложь));
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, Истина);
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если НЕ МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
				СоздаватьДействиеДляТипа[Тип] = Ложь;
			КонецЕсли;
		Иначе
			СоздаватьДействиеДляТипа[Тип] = Ложь;
		КонецЕсли;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ВидКонтактнойИнформации.РедактированиеТолькоВДиалоге Тогда
		СоздаватьДействиеДляТипа[Тип] = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Если СоздаватьДействиеДляТипа[Тип] = Истина Тогда
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ГруппаПодменюВерхнийУровень = Форма.Элементы.Добавить("КоманднаяПанель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаДействий);
			ГруппаПодменюВерхнийУровень.Вид = ВидГруппыФормы.КоманднаяПанель;
			ГруппаПодменю = Форма.Элементы.Добавить("Подменю" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменюВерхнийУровень);
			ГруппаПодменю.Вид = ВидГруппыФормы.Подменю;
			ГруппаПодменю.Картинка = БиблиотекаКартинок.МенюДополнительныеФункции;
			ГруппаПодменю.Отображение = ОтображениеКнопки.Картинка;
		Иначе
			ГруппаПодменю = ГруппаДействий;
			
			// Есть действие
			ИмяКоманды = "Команда" + ИмяРеквизита;
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			Команда.Отображение = ОтображениеКнопки.Картинка;
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			
			Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2);
			Элемент.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
				// Ввод комментария через контекстное меню.
				ИмяКоманды = "КонтекстноеМенюПодменю" + ИмяРеквизита;
				Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
				Команда.Картинка = БиблиотекаКартинок.Комментарий;
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				Кнопка.ИмяКоманды = ИмяКоманды;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			
			// История изменений 
			Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
				
				ИмяКоманды = "КонтекстноеМенюПодменюИстория" + ИмяРеквизита;
				Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаПодменю);
				Кнопка.Заголовок = НСтр("ru = 'История изменений...'");
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Картинка = БиблиотекаКартинок.ИсторияИзменений;
				Команда.Подсказка = НСтр("ru = 'Показывает историю изменения контактной информации'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Ложь;
				Кнопка.ИмяКоманды = ИмяКоманды;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			КонецЕсли;
			
			// Устанавливаем свойства поля ввода.
			ГруппаРазделитель = Форма.Элементы.Добавить("ПодменюРазделительАдрес" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПодменю);
			ГруппаРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			ИмяКоманды = "КартаЯндексМеню" + ИмяРеквизита;
			Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок = НСтр("ru = 'Адрес на Яндекс.Картах'");
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка = БиблиотекаКартинок.ЯндексКарты;
			Команда.Подсказка = НСтр("ru = 'Показывает адрес на картах Яндекс.Карты'");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды = ИмяКоманды;
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			
			ИмяКоманды = "КартаGoogleМеню" + ИмяРеквизита;
			Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаРазделитель);
			Кнопка.Заголовок = НСтр("ru = 'Адрес на Google Maps'");
			Команда = Форма.Команды.Добавить(ИмяКоманды);
			Команда.Картинка = БиблиотекаКартинок.GoogleMaps;
			Команда.Подсказка = НСтр("ru = 'Показывает адрес на карте Google Maps'");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
			Кнопка.ИмяКоманды = ИмяКоманды;
			
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
			ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
			
			ГруппаРазделитель = Форма.Элементы.Добавить("ПодменюРазделитель" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
			ГруппаРазделитель.Вид = ВидГруппыФормы.ГруппаКнопок;
			
			ГруппаПодменюАдреса = Форма.Элементы.Добавить("ПодменюКопироватьАдреса" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаРазделитель);
			ГруппаПодменюАдреса.Вид = ВидГруппыФормы.Подменю;
			ГруппаПодменюАдреса.Отображение = ОтображениеКнопки.Текст;
			ГруппаПодменюАдреса.Заголовок = НСтр("ru='Заполнить'");
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Перейти'");
			Команда.Подсказка = НСтр("ru = 'Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Написать письмо'");
			Команда.Подсказка = НСтр("ru = 'Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Если Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].МожноОтправлятьSMS Тогда
				Элемент.Заголовок = НСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Подсказка = НСтр("ru = 'Позвонить или отправить SMS'");
				Команда.Картинка = БиблиотекаКартинок.ПозвонитьИлиОтправитьSMS;
			Иначе
				Элемент.Заголовок = НСтр("ru = 'Позвонить'");
				Команда.Подсказка = НСтр("ru = 'Позвонить по телефону'");
				Команда.Картинка = БиблиотекаКартинок.Позвонить;
			КонецЕсли;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			Элемент.Заголовок = НСтр("ru = 'Skype'");
			Команда.Подсказка = НСтр("ru = 'Skype'");
			Команда.Картинка = БиблиотекаКартинок.Skype;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыКонтактнойИнформацииФормы(ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения)
	Если НЕ ЗначениеЗаполнено(ИмяЭлементаДляРазмещения) ИЛИ НЕ ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
		Для каждого ПерваяЗапись Из ПараметрыКонтактнойИнформации Цикл
			Возврат ПерваяЗапись.Значение;
		КонецЦикла;
		Возврат ПараметрыКонтактнойИнформации;
	КонецЕсли;
	Возврат ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
КонецФункции

Функция ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ)
	
	Позиция = КонтактнаяИнформация.Индекс(СтрокаКИ) + 1;
	Пока Позиция < КонтактнаяИнформация.Количество() Цикл
		СледующаяСтрока = КонтактнаяИнформация.Получить(Позиция);
		Если СледующаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Форма.Элементы.Найти(СледующаяСтрока.ИмяРеквизита) <> Неопределено Тогда
			Возврат СледующаяСтрока;
		КонецЕсли;
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция НайтиСтрокиКонтактнойИнформации(ВидКонтактнойИнформации, Дата, КонтактнаяИнформация)
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Отбор.Вставить("ДействуетС", Дата);
	КонецЕсли;
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	Возврат НайденныеСтроки;
	
КонецФункции

Функция ЗапрещенВводНесколькихЗначений(ВидКонтактнойИнформации, КонтактнаяИнформация, Дата)
	
	Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Отбор.Вставить("ДействуетС", Дата);
	КонецЕсли;
	
	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюОбъектаИзСтроки(СтрокаКонтактнойИнформацииОбъекта, Периодическая, СтрокаКонтактнойИнформации)
	
	ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформации, СтрокаКонтактнойИнформацииОбъекта);
	Если Периодическая Тогда
		СтрокаКонтактнойИнформации.ДействуетС = СтрокаКонтактнойИнформацииОбъекта.Дата;
	КонецЕсли;
	ОбъектКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКонтактнойИнформации.ЗначенияПолей, СтрокаКонтактнойИнформации.Вид);
	ЗаполнитьТехническиеПоляКонтактнойИнформации(СтрокаКонтактнойИнформации, ОбъектКонтактнойИнформации, СтрокаКонтактнойИнформацииОбъекта.Тип);
	
КонецПроцедуры

Процедура ОбработатьСтрокуКонтактнойИнформации(СтрокаКонтактнойИнформации)
	
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Представление)
		И ПустаяСтрока(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
		ФорматКонтактнойИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКонтактнойИнформации.Вид, "Тип, ВключатьСтрануВПредставление, ПроверятьПоФИАС");
		ФорматКонтактнойИнформации.Вставить("ФорматАдреса", ?(ФорматКонтактнойИнформации.ПроверятьПоФИАС, "ФИАС", "КЛАДР"));
		СтрокаКонтактнойИнформации.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(СтрокаКонтактнойИнформации.ЗначенияПолей, ФорматКонтактнойИнформации);
	КонецЕсли;
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
		КонтактнаяИнформацияXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Вид);
		СтрокаКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
	КонецЕсли;
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Тип) Тогда
		СтрокаКонтактнойИнформации.Тип = СтрокаКонтактнойИнформации.Вид.Тип;
	КонецЕсли;
	
КонецПроцедуры

// Приводит код страны к единому виду - строка длиной три символа.
//
Функция КодСтраныМира(Знач КодСтраны)
	
	Если ТипЗнч(КодСтраны)=Тип("Число") Тогда
		Возврат Формат(КодСтраны, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Прав("000" + КодСтраны, 3);
КонецФункции

// Возвращает строку в кавычках.
//
Функция КонтрольКавычекВСтроке(Знач Строка)
	Возврат """" + СтрЗаменить(Строка, """", """""") + """";
КонецФункции

Процедура ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	ВсеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( 
		Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь));
		
	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;
		
		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Продолжить;
		КонецЕсли;
		ПодменюКопироватьАдреса = Форма.Элементы.Найти("ПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		КонтекстноеПодменюКопироватьАдреса = Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		Если ПодменюКопироватьАдреса <> Неопределено И КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		КоличествоКомандВПодменю = 0;
		Для Каждого Адрес Из НайденныеСтроки Цикл
			
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;	
			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда = Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Скопировать адрес'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
				КоличествоКомандВПодменю = КоличествоКомандВПодменю + 1;
				
			КонецЕсли;
			
			Если ПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, 
					Адрес.Представление, ПараметрыКонтактнойИнформации, ПодменюКопироватьАдреса);
			КонецЕсли;
			Если КонтекстноеПодменюКопироватьАдреса <> Неопределено Тогда
				ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, 
					Адрес.Представление, ПараметрыКонтактнойИнформации, КонтекстноеПодменюКопироватьАдреса);
			КонецЕсли;
			
		КонецЦикла;
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	
	ИмяЭлемента = Подменю.Имя + "_" + ИмяКоманды;
	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);

КонецПроцедуры

#КонецОбласти