#Область ПрограммныйИнтерфейс

// Выполняет подготовку формы настройки системы для управления областями персональных данных,
// а также считывает текущее состояние использования события "Доступ. Доступ".
// В форме должны быть созданы
//	- реквизит типа дерево значений, имя которого - "ОбластиПерсональныхДанных",
//	- таблица формы, связанная с реквизитом "ОбластиПерсональныхДанных".
//
// Параметры:
//	Форма - УправляемаяФорма - форма настройки системы.
//
Процедура ПриСозданииФормыНастройкиРегистрацииСобытий(Форма) Экспорт
	
	Если Не ФормаНастройкиПодготовленаКорректно(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДереваОбластей = ИмяРеквизитаДеревоОбластей();
	
	// Добавление колонок реквизита "ОбластиПерсональныхДанных".
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ИмяДереваОбластей));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"), ИмяДереваОбластей));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ИмяДереваОбластей));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем поля формы
	ГруппаПолей = Форма.Элементы.Добавить(ИмяДереваОбластей + "ГруппаИспользование", Тип("ГруппаФормы"), Форма.Элементы[ИмяДереваОбластей]);
	ГруппаПолей.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	ФлажокИспользование = Форма.Элементы.Добавить(ИмяДереваОбластей + "Использование", Тип("ПолеФормы"), ГруппаПолей);
	ФлажокИспользование.ПутьКДанным = ИмяДереваОбластей + ".Использование";
	ФлажокИспользование.Вид = ВидПоляФормы.ПолеФлажка;
	
	ПолеПредставление = Форма.Элементы.Добавить(ИмяДереваОбластей + "Представление", Тип("ПолеФормы"), ГруппаПолей);
	ПолеПредставление.ПутьКДанным = ИмяДереваОбластей + ".Представление";
	ПолеПредставление.Вид = ВидПоляФормы.ПолеНадписи;
	
	// Настройка элементов управления.
	Форма.Элементы[ИмяДереваОбластей].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Форма.Элементы[ИмяДереваОбластей].ИзменятьСоставСтрок = Ложь;
	Форма.Элементы[ИмяДереваОбластей].ИзменятьПорядокСтрок = Ложь;
	Форма.Элементы[ИмяДереваОбластей].Шапка = Ложь;
	Форма.Элементы[ИмяДереваОбластей].НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	Форма.Элементы[ИмяДереваОбластей].ГоризонтальныеЛинии = Ложь;
	Форма.Элементы[ИмяДереваОбластей].ВертикальныеЛинии = Ложь;
	Форма.Элементы[ИмяДереваОбластей].РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	
	ЗначениеВДанныеФормы(ИспользованиеСобытияДоступ(), Форма[ИмяДереваОбластей]);
	
КонецПроцедуры

// Выполняет преобразование данных формы настройки системы
// и установку использования события доступ для отмеченных областей.
// В форме должны быть созданы
//	- реквизит типа дерево значений, имя которого - "ОбластиПерсональныхДанных",
//	- таблица формы, связанная с этим реквизитом, 
//		имя которой так же - "ОбластиПерсональныхДанных".
//
// Параметры:
//	Форма - УправляемаяФорма - форма настройки системы.
//
Процедура ПриЗаписиФормыНастройкиРегистрацииСобытий(Форма) Экспорт
	
	Если Не ФормаНастройкиПодготовленаКорректно(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоОбластей = ДанныеФормыВЗначение(Форма[ИмяРеквизитаДеревоОбластей()], Тип("ДеревоЗначений"));
	
	ОбластиИспользования = Новый Массив;
	
	ОтмеченныеСтроки = ДеревоОбластей.Строки.НайтиСтроки(Новый Структура("Использование", Истина), Истина);
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		ОбластиИспользования.Добавить(ОтмеченнаяСтрока.Имя);
	КонецЦикла;
	
	УстановитьИспользованиеСобытияДоступ(ОбластиИспользования.Количество() > 0, ОбластиИспользования);
	
КонецПроцедуры

// Устанавливает режим использования события "Доступ. Доступ"
// журнала регистрации, контроль которого предусмотрен требованиями.
// Федерального закона от 27.07.2006 N152-ФЗ "О персональных данных" 
// и подзаконных актов.
// Использование события устанавливается для областей персональных данных, 
// сведения о которых заполняются в потребителе.
//
// Параметры:
//   Использование - Булево - если Истина, то события будут регистрироваться.
//   ОбластиИспользования - Массив - массив областей персональных данных, 
//                                   для которых производится установка использования (необязательный).
//
Процедура УстановитьИспользованиеСобытияДоступ(Использование, ОбластиИспользования = Неопределено) Экспорт
	
	// Таблица сведений о персональных данных.
	ТаблицаСведений = СведенияОПерсональныхДанных();
	
	ИспользованиеОбластейДанных = Новый Соответствие;
	
	// Составление описания использования события.
	ОписанияИспользования = Новый Массив;
	Для Каждого СтрокаСведений Из ТаблицаСведений Цикл
		// Добавление области данных в набор.
		ИспользованиеОбластейДанных.Вставить(СтрокаСведений.ОбластьДанных);
		Если ОбластиИспользования <> Неопределено 
			И ОбластиИспользования.Найти(СтрокаСведений.ОбластьДанных) = Неопределено Тогда
			// Если указаны области данных, то устанавливаем использование только для них.
			Продолжить;
		КонецЕсли;
		ИспользованиеОбластейДанных[СтрокаСведений.ОбластьДанных] = Использование;
		// Составление описания использования события.
		ПоляРегистрации = СтрРазделить(СтрокаСведений.ПоляРегистрации, ",");
		Для Индекс = 0 По ПоляРегистрации.ВГраница() Цикл
			// Если требуется составить массив полей.
			Если СтрНайти(ПоляРегистрации[Индекс], "|") > 0 Тогда
				ПоляРегистрации[Индекс] = СтрРазделить(ПоляРегистрации[Индекс], "|");
			КонецЕсли;
		КонецЦикла;
		ОписаниеИспользованияСобытияДоступа = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации(СтрокаСведений.Объект);
		ОписаниеИспользованияСобытияДоступа.ПоляДоступа		= СтрРазделить(СтрокаСведений.ПоляДоступа, ",");
		ОписаниеИспользованияСобытияДоступа.ПоляРегистрации	= ПоляРегистрации;
		ОписанияИспользования.Добавить(ОписаниеИспользованияСобытияДоступа);
	КонецЦикла;
	
	// "Включение" ("Выключение") использования события "Доступ. Доступ"
	// журнала регистрации по созданному описанию.
	ИспользованиеСобытияДоступ = Новый ИспользованиеСобытияЖурналаРегистрации;
	ИспользованиеСобытияДоступ.Использование = Использование;
	ИспользованиеСобытияДоступ.ОписаниеИспользования = ОписанияИспользования;
	
	// Сохранение использования областей данных.
	ОбластиДанныхНаборЗаписей = РегистрыСведений.ОбластиПерсональныхДанных.СоздатьНаборЗаписей();
	Для Каждого КлючИЗначение Из ИспользованиеОбластейДанных Цикл
		СтрокаНабора = ОбластиДанныхНаборЗаписей.Добавить();
		СтрокаНабора.ИмяОбласти = КлючИЗначение.Ключ;
		СтрокаНабора.ИспользованиеСобытийЖурналаРегистрации = КлючИЗначение.Значение;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", ИспользованиеСобытияДоступ);
		// Запись областей персональных данных.
		ОбластиДанныхНаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Составляет дерево используемых областей персональных данных.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево областей данных с колонками:
//    * Имя - Строка - идентификатор области персональных данных.
//    * Представление - Строка - пользовательское представление области данных.
//    * Использование - Булево - признак того, что для области данных
//					             установлена регистрация события "Доступ. Доступ".
//
Функция ИспользованиеСобытияДоступ() Экспорт
	
	// Создание дерева областей
	ДеревоОбластейДанных = ДеревоОбластейПерсональныхДанных();
	
	// Расстановка пометок использования по данным регистра.
	ОбластиДанныхНаборЗаписей = РегистрыСведений.ОбластиПерсональныхДанных.СоздатьНаборЗаписей();
	ОбластиДанныхНаборЗаписей.Прочитать();
	
	Для Каждого СтрокаНабора Из ОбластиДанныхНаборЗаписей Цикл
		СтрокаДерева = ДеревоОбластейДанных.Строки.Найти(СтрокаНабора.ИмяОбласти, "Имя", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.Использование = СтрокаНабора.ИспользованиеСобытийЖурналаРегистрации;
		КонецЕсли;
	КонецЦикла;

	Возврат ДеревоОбластейДанных;
	
КонецФункции

// Процедура предназначена для использования из метода ДобавитьКомандыПечати 
// стандартной подсистемы Печать в объектах, являющимися субъектами персональных данных.
// Добавляет в список команд печати команду перехода к подготовке согласия на обработку персональных данных субъекта.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати) Экспорт
	
	Если Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СогласиеНаОбработкуПерсональныхДанных) Тогда
		Возврат;
	КонецЕсли; 
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СогласиеНаОбработкуПерсональныхДанных";
	КомандаПечати.Представление = НСтр("ru = 'Согласие на обработку ПДн...'");
	КомандаПечати.Обработчик = "ЗащитаПерсональныхДанныхКлиент.ОткрытьФормуСогласиеНаОбработкуПерсональныхДанных";
	
КонецПроцедуры

// Возвращает сведения о действующем на указанную дату согласии субъекта на обработку персональных данных.
// Получение сведений производится в привилегированном режиме.
//
// Параметры:
//	Субъект     - ОпределяемыйТип.СубъектПерсональныхДанных - субъект, наличие согласия которого определяется,
//	Организация - СправочникСсылка.Организации - оператор персональных данных, которому предоставлено согласие,
//	Дата        - Дата - дата, на которую запрашивается состояние, если не указана, выбирается последняя запись.
//	ИсключаемыйРегистратор - ДокументСсылка.СогласиеНаОбработкуПерсональныхДанных - текущий документ; 
//         передается для того, чтобы при поиске согласия игнорировать выполненные текущим документом движения.
//
// Возвращаемое значение:
//  Неопределено, Структура - Неопределено, если согласие не предоставлялось, 
//                            или срок действия предоставленного согласия истек;
//                            Если обнаружено действующее согласие, то Структура со свойствами:
//    * ДатаПолучения     - Дата - дата получения согласия.
//    * СрокДействия      - Дата - дата, до которой будет действовать согласие. 
//                                 Если не указана, то согласие действует бессрочно.
//    * ДокументОснование - ДокументСсылка.СогласиеНаОбработкуПерсональныхДанных - документ-основание.
//
Функция ДействующееСогласиеНаОбработкуПерсональныхДанных(Субъект, Организация = Неопределено, Знач Дата = Неопределено, 
	ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Согласия.Период КАК ДатаПолучения,
		|	Согласия.Регистратор КАК ДокументОснование,
		|	Согласия.Организация КАК Организация,
		|	Согласия.Субъект КАК Субъект,
		|	Согласия.Действует КАК Действует,
		|	Согласия.СрокДействия КАК СрокДействия
		|ПОМЕСТИТЬ ВТСогласия
		|ИЗ
		|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(
		|			&Дата,
		|			Субъект = &Субъект
		|				И Организация = &Организация
		|				И Регистратор <> &ИсключаемыйРегистратор) КАК Согласия
		|ГДЕ
		|	Согласия.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Согласия.ДатаПолучения КАК ДатаПолучения,
		|	Согласия.ДокументОснование КАК ДокументОснование,
		|	Согласия.СрокДействия КАК СрокДействия
		|ИЗ
		|	ВТСогласия КАК Согласия
		|ГДЕ
		|	Согласия.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Согласия.ДатаПолучения,
		|	Согласия.ДокументОснование,
		|	Согласия.СрокДействия
		|ИЗ
		|	ВТСогласия КАК Согласия
		|ГДЕ
		|	Согласия.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Согласия.СрокДействия >= &Дата";
		
		Запрос.УстановитьПараметр("Субъект", Субъект);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		Запрос.УстановитьПараметр("Организация", Организация);

	Иначе
		
		Запрос = ЗапросДанныеДействующихСогласий(Субъект, Дата, ИсключаемыйРегистратор); 
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Согласие = ОписаниеСогласия();
	ЗаполнитьЗначенияСвойств(Согласие, Выборка);
	
	Возврат Согласие;
	
КонецФункции

// Скрывает персональные данные субъектов. Состав персональных данных определяется программно.
// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
//
// Параметры:
//	Субъекты - Массив, ОпределяемыйТип.СубъектПерсональныхДанных - ссылка или массив ссылок на субъекты.
//
Процедура СкрытьПерсональныеДанныеСубъектов(Знач Субъекты) Экспорт
	
	Если Не ЗначениеЗаполнено(Субъекты) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Субъекты) <> Тип("Массив") Тогда
		Субъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Субъекты);
	КонецЕсли;
	
	Отказ = Ложь;
	ТаблицаИсключений = НоваяТаблицаИсключений();

	ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ);
	
	УстановитьПривилегированныйРежим(Истина);
	СубъектыИсключения = ОбработатьТаблицуИсключений(ТаблицаИсключений);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтбираемыеСубъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Субъекты, СубъектыИсключения);
	Если Не ЗначениеЗаполнено(ОтбираемыеСубъекты) Тогда 
		Возврат;
	КонецЕсли;		
	
	ПараметрыОтбора = ПараметрыОтбораСкрываемыхДанных();	
	ПараметрыОтбора.Субъекты = ОтбираемыеСубъекты;
	ПараметрыОтбора.ТипСубъектов = ТипЗнч(ОтбираемыеСубъекты[0]);

	ОбрабатываемыеМетаданные = ОбрабатываемыеМетаданные();
	
	ДеревоОбрабатываемыхОбъектов = Новый ДеревоЗначений;
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("Представление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("ПредставлениеПравилаОбработки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("Пометка", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("ПолноеИмя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоОбрабатываемыхОбъектов.Колонки.Добавить("ПравилоОбработки", Новый ОписаниеТипов("СписокЗначений"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОбрабатываемыеМетаданные", ОбрабатываемыеМетаданные);
	ПараметрыПроцедуры.Вставить("ДеревоОбрабатываемыхОбъектов", ДеревоОбрабатываемыхОбъектов);
	ПараметрыПроцедуры.Вставить("СохраненныеНастройки", Новый Массив);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	Менеджер = Обработки.СкрытиеКонфиденциальнойИнформации.Создать();
	Менеджер.ЗаполнитьДеревоОбрабатываемыхОбъектов(ПараметрыПроцедуры, АдресХранилища);
	
	ДеревоОбрабатываемыхОбъектов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ПравилаОбработкиПоУмолчанию = Менеджер.ПравилаОбработкиПоУмолчанию();
	
	ПравилаОбработки = Новый Структура;
	ПравилаОбработки.Вставить("ПравилоСтрока", ПравилаОбработкиПоУмолчанию.Строка);
	ПравилаОбработки.Вставить("ПравилоЧисло", ПравилаОбработкиПоУмолчанию.Числа);
	ПравилаОбработки.Вставить("ПравилоБулево", ПравилаОбработкиПоУмолчанию.Булево);
	ПравилаОбработки.Вставить("ПравилоДата", ПравилаОбработкиПоУмолчанию.Дата);
	ПравилаОбработки.Вставить("ПравилоХранилищеЗначений", ПравилаОбработкиПоУмолчанию.ХранилищаЗначений);	
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДеревоОбрабатываемыхОбъектов", ДеревоОбрабатываемыхОбъектов);
	ПараметрыПроцедуры.Вставить("ПравилаОбработки", ПравилаОбработки);
	ПараметрыПроцедуры.Вставить("ПараметрыОтбора", ПараметрыОтбора);
	
	НачатьТранзакцию();
	Попытка
		
		Менеджер.ВыполнитьСкрытиеНаСервере(ПараметрыПроцедуры, АдресХранилища);
		
		НастройкиСкрытия = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.НастройкиСкрытияПоУмолчанию();
		НастройкиСкрытия.ДатаСкрытия = ТекущаяДатаСеанса();
		НастройкиСкрытия.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено;
		
		РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.Записать(Субъекты, НастройкиСкрытия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Защита персональных данных.Скрытие данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
	КонецПопытки;
	
КонецПроцедуры

// Изменяет настройки скрытия персональных данных субъектов в соответствии с новыми настройками системы.
//
// Параметры:
//  Параметры - Структура - параметры выполнения процедуры:
//   * ИспользоватьСкрытиеПерсональныхДанных - Булево - новое значение признака.
//   * ДнейДоСкрытияПерсональныхДанных - Число - новое значение количества дней.
//  АдресРезультата - Строка - адрес временного хранилища, в которое нужно
//                                поместить результат работы процедуры.
//
Процедура ИзменитьНастройкиСкрытияПерсональныхДанных(Параметры, АдресРезультата = "") Экспорт
	
	ДнейДоСкрытияПДн = Параметры.ДнейДоСкрытияПерсональныхДанных;
	ИспользоватьСкрытиеПДн = Параметры.ИспользоватьСкрытиеПерсональныхДанных;
	
	СтарыеНастройкиСистемы = ЗащитаПерсональныхДанныхВызовСервера.НастройкиСкрытияПерсональныхДанныхСистемы();
	
	ТекущееЗначениеДнейДоСкрытия = СтарыеНастройкиСистемы.ДнейДоСкрытияПерсональныхДанных;
	ТекущееЗначениеИспользоватьСкрытиеПДн = СтарыеНастройкиСистемы.ИспользоватьСкрытиеПерсональныхДанных;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ДнейДоСкрытияПДн) Тогда
			ДнейДоСкрытияПДн = 7;
		КонецЕсли;
		
		Если ТекущееЗначениеДнейДоСкрытия <> ДнейДоСкрытияПДн Тогда
			
			Если ИспользоватьСкрытиеПДн Тогда 
				
				ОчиститьСрокСкрытияПерсональныхДанныхСубъектов();
				РассчитатьДатуСкрытияПДнСубъектовДавшихСогласие(ДнейДоСкрытияПДн);
				
			КонецЕсли;
			
			Константы.ДнейДоСкрытияПерсональныхДанныхСубъектов.Установить(ДнейДоСкрытияПДн);
			
		ИначеЕсли ТекущееЗначениеИспользоватьСкрытиеПДн <> ИспользоватьСкрытиеПДн Тогда
			
			Если ИспользоватьСкрытиеПДн Тогда
				РассчитатьДатуСкрытияПДнСубъектовДавшихСогласие(ДнейДоСкрытияПДн);
			Иначе
				ОчиститьСрокСкрытияПерсональныхДанныхСубъектов();
			КонецЕсли;
			
			Константы.ИспользоватьСкрытиеПерсональныхДанныхСубъектов.Установить(ИспользоватьСкрытиеПДн);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИзменениеНастроекСкрытияПДн(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'Не удалось изменить настройки скрытия персональных данных.'");
		
	КонецПопытки;
	
КонецПроцедуры
		
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для встраивания подсистемы в формы объектов конфигурации.

// В форме списка добавляет колонку с картинкой, сигнализирующей об отсутствии требуемого согласия 
// на обработку персональных данных по субъектам в строках. Добавляет команду показа субъектов со
// скрытыми персональными данными.
// Вызывается из события ПриСозданииНаСервере формы списка.
// У динамических списков должна быть определена основная таблица. 
//
// Параметры:
//   Форма		 - УправляемаяФорма - форма списка.
//   СписокФормы - ТаблицаФормы - элемент формы динамического списка субъектов.
//
Процедура ПриСозданииНаСервереФормыСписка(Форма, СписокФормы) Экспорт
	
	ИмяПроцедуры = "ЗащитаПерсональныхДанных.ПриСозданииНаСервереФормыСписка";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("УправляемаяФорма"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "СписокФормы", СписокФормы, Тип("ТаблицаФормы"));
	
	Элементы = Форма.Элементы;
	Список = Форма[СписокФормы.ПутьКДанным];
	ИмяСпискаФормы = СписокФормы.Имя;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкрытиеПерсональныхДанныхСубъектов") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьСоСкрытымиПДн", Ложь);
		Возврат;
	КонецЕсли;

	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ТекущаяДата", ТекущаяДата);

	ИмяКолонки = "ОтсутствуетСогласие"; 
	КолонкаОтсутствияСогласия = Элементы.Найти(ИмяКолонки);
	
	Если КолонкаОтсутствияСогласия = Неопределено Тогда
		
		КолонкаОтсутствияСогласия = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), СписокФормы);
		КолонкаОтсутствияСогласия.Вид                = ВидПоляФормы.ПолеКартинки;
		КолонкаОтсутствияСогласия.ПутьКДанным        = СтрШаблон("%1.%2", ИмяСпискаФормы, ИмяКолонки);
		КолонкаОтсутствияСогласия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаОтсутствияСогласия.КартинкаШапки      = БиблиотекаКартинок.ОтсутствуетСогласие;
		КолонкаОтсутствияСогласия.КартинкаЗначений   = БиблиотекаКартинок.ОтсутствуетСогласие;
		КолонкаОтсутствияСогласия.Подсказка          = НСтр("ru = 'Отсутствует требуемое согласие'");
		
		КолонкиСписка = СписокФормы.ПодчиненныеЭлементы;
		Если КолонкиСписка.Количество() > 0 Тогда
			Элементы.Переместить(КолонкаОтсутствияСогласия, СписокФормы, КолонкиСписка.Получить(0));
		КонецЕсли;
		
	КонецЕсли;

	ИзменяемыеПоля = Новый Массив;
	ИзменяемыеПоля.Добавить(ИмяКолонки);
	Список.УстановитьОграниченияИспользованияВГруппировке(ИзменяемыеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(ИзменяемыеПоля);
	Список.УстановитьОграниченияИспользованияВОтборе(ИзменяемыеПоля);
	
	НастроитьПоказСубъектовСоСкрытымиПДн(Форма, Список);
		
КонецПроцедуры

// В форме списка заполняет колонку с картинкой, сигнализирующей об отсутствии требуемого согласия 
// на обработку персональных данных по субъектам в строках. 
// Вызывается из события ПриПолученииДанныхНаСервере формы списка.
//
// Параметры:
//   Настройки              - НастройкиКомпоновкиДанных - Содержит копию полных настроек динамического списка.
//   Строки                 - СтрокиДинамическогоСписка - Коллекция содержит данные и оформление всех строк,
//                            получаемых в списке, кроме строк группировок.
//
Процедура ПриПолученииДанныхНаСервере(Настройки, Строки) Экспорт
	
	Перем ТекущаяДата;
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("ТекущаяДата", ТекущаяДата) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубъектыДляСкрытияПДн.Субъект КАК Субъект
	|ИЗ
	|	РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПДн
	|ГДЕ
	|	СубъектыДляСкрытияПДн.Субъект В(&Субъекты)
	|	И СубъектыДляСкрытияПДн.ДатаСкрытия <= &ТекущаяДата
	|	И СубъектыДляСкрытияПДн.ДатаСкрытия > &ПустаяДата
	|	И СубъектыДляСкрытияПДн.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСубъектовДляСкрытия.ГотовКСкрытию)";
	
	Запрос.УстановитьПараметр("Субъекты", Строки.ПолучитьКлючи());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Строки[Выборка.Субъект];
		СтрокаСписка.Данные["ОтсутствуетСогласие"] = 1;		
	КонецЦикла;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ИспользованиеСобытияДоступ.
// Составляет дерево используемых областей персональных данных.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево областей данных с колонками:
//    * Имя - Строка - идентификатор области персональных данных.
//    * Представление - Строка - пользовательское представление области данных.
//    * Использование - Булево - признак того, что для области данных
//					             установлена регистрация события "Доступ. Доступ".
//
Функция ПолучитьИспользованиеСобытияДоступ() Экспорт
	
	Возврат ИспользованиеСобытияДоступ();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.СогласиеНаОбработкуПерсональныхДанных);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат; // Модель сервиса.
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.СогласиеНаОбработкуПерсональныхДанных) Тогда
		Возврат; // Нет прав.
	КонецЕсли;
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("ЖурналДокументов.СогласияНаОбработкуПерсональныхДанных");
	Если Разделы.Количество() = 0 Тогда
		// Не вынесены в командный интерфейс.
		РазделАдминистрирование = Метаданные.Подсистемы.Найти("Администрирование");
		Если РазделАдминистрирование = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Разделы.Добавить(РазделАдминистрирование);
	КонецЕсли;
	
	ИстекшиеСогласия = ИстекшиеСогласияНаОбработкуПерсональныхДанных();
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "ИстекшиеСогласияНаОбработкуПерсональныхДанных";
		Дело.ЕстьДела       = ИстекшиеСогласия.Количество() > 0;
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Согласия на обработку ПДн'");
		Дело.Количество     = ИстекшиеСогласия.Количество();
		Дело.Подсказка      = НСтр("ru = 'Истекли согласия на обработку персональных данных (ПДн). Необходимо прекратить обработку ПДн или запросить у субъекта продление согласия на обработку.'");
		Дело.ПараметрыФормы = Новый Структура("ИстекшиеСогласия", ИстекшиеСогласия);
		Дело.Форма          = "ЖурналДокументов.СогласияНаОбработкуПерсональныхДанных.Форма.ФормаСписка";
	КонецЦикла;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "ОбработкаПерсональныхДанных";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("527c98a3-3bfc-4bf9-8ec7-0247fdfa7a29");
	Раздел.Представление = НСтр("ru = 'Обработка персональных данных'");
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения.
Процедура ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
	
	МодульДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы.СогласиеНаОбработкуПерсональныхДанных.ПолноеИмя(),
		"ДатаПолучения", "ОбработкаПерсональныхДанных");
	
	МодульДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы.ОтзывСогласияНаОбработкуПерсональныхДанных.ПолноеИмя(),
		"ДатаОтзыва", "ОбработкаПерсональныхДанных");
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СогласияНаОбработкуПерсональныхДанныхДействующие);
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СогласияНаОбработкуПерсональныхДанныхИстекающие);
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеСубъектовДляСкрытияПерсональныхДанных;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСкрытиеПерсональныхДанныхСубъектов;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СкрытиеПерсональныхДанныхСубъектов;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСкрытиеПерсональныхДанныхСубъектов;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания ПолучениеСубъектовДляСкрытияПерсональныхДанных.
Процедура ПолучениеСубъектовДляСкрытияПерсональныхДанных() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСубъектовДляСкрытияПерсональныхДанных);

	МетаданныеСправочники = Метаданные.Справочники;
	ТипыСубъектов = Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип.Типы();
	
	Запрос = Новый Запрос();
	
	Для Каждого СправочникСубъекта Из ТипыСубъектов Цикл
		
		МетаданныеСправочника = Метаданные.НайтиПоТипу(СправочникСубъекта);

		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст),"", " ОБЪЕДИНИТЬ ВСЕ") + "
		|
		|ВЫБРАТЬ
		|	СправочникСубъекта.Ссылка КАК Субъект
		|ИЗ
		|	Справочник." + МетаданныеСправочника.Имя + " КАК СправочникСубъекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных 
		|		ПО СправочникСубъекта.Ссылка = СубъектыДляСкрытияПерсональныхДанных.Субъект
		|ГДЕ
		|	СубъектыДляСкрытияПерсональныхДанных.Субъект ЕСТЬ NULL";

	КонецЦикла;
	
	Субъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Субъект");
	РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.Записать(Субъекты);

КонецПроцедуры

// Обработчик регламентного задания СкрытиеПерсональныхДанных.
Процедура СкрытиеПерсональныеДанныеСубъектов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СкрытиеПерсональныхДанныхСубъектов);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СубъектыДляСкрытия.Субъект КАК Субъект
	|ИЗ
	|	РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытия
	|ГДЕ
	|	СубъектыДляСкрытия.ДатаСкрытия <= &ТекущаяДата
	|	И СубъектыДляСкрытия.ДатаСкрытия > &ПустаяДата 
	|	И СубъектыДляСкрытия.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСубъектовДляСкрытия.ГотовКСкрытию)";
	
	Субъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Субъект");
	СкрытьПерсональныеДанныеСубъектов(Субъекты);

КонецПроцедуры

#КонецОбласти

Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// ОбменДанными.Загрузка проверяется внутри вызова.
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		МодульДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(Источник,
			Отказ, РежимЗаписи, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуЗапретаИзмененияПередУдалением(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка проверяется внутри вызова.
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		МодульДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением(Источник, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОПерсональныхДанных()
	
	// Таблица сведений о персональных данных.
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Объект", 			Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляРегистрации", Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляДоступа", 	Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ОбластьДанных", 	Новый ОписаниеТипов("Строка"));
	
	// Сведения о персональных данных в самой подсистеме.
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СогласиеНаОбработкуПерсональныхДанных";
	НовыеСведения.ПоляРегистрации	= "Субъект,ФИОСубъекта";
	НовыеСведения.ПоляДоступа		= "ФИОСубъекта,АдресСубъекта,ПаспортныеДанные,СрокДействия";
	НовыеСведения.ОбластьДанных		= "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СогласияНаОбработкуПерсональныхДанных";
	НовыеСведения.ПоляРегистрации	= "Субъект";
	НовыеСведения.ПоляДоступа		= "СрокДействия";
	НовыеСведения.ОбластьДанных		= "ОбработкаПерсональныхДанных";
	
	// Заполнение таблицы сведений потребителями.
	ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);

	Возврат ТаблицаСведений;
	
КонецФункции

Функция ОбластиПерсональныхДанных()
	
	// Соответствие идентификаторов областей и их пользовательских представлений.
	ОбластиДанных = Новый ТаблицаЗначений;
	ОбластиДанных.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка"));
	ОбластиДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ОбластиДанных.Колонки.Добавить("Родитель", 		Новый ОписаниеТипов("Строка"));
	
	НоваяОбласть = ОбластиДанных.Добавить();
	НоваяОбласть.Имя = "ОбработкаПерсональныхДанных";
	НоваяОбласть.Представление = НСтр("ru = 'Обработка ПДн'");
	
	// Заполнение областей потребителями.
	ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных(ОбластиДанных);
	
	Возврат ОбластиДанных;
	
КонецФункции

Функция ФормаНастройкиПодготовленаКорректно(Форма)
	
	ИмяДереваОбластей = ИмяРеквизитаДеревоОбластей();
	
	// Поиск реквизита формы
	РеквизитФормыДеревоОбластей = Неопределено;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = ИмяДереваОбластей Тогда
			РеквизитФормыДеревоОбластей = РеквизитФормы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитФормыДеревоОбластей = Неопределено 
		Или Форма.Элементы.Найти(ИмяДереваОбластей) = Неопределено Тогда
		// В форме не обнаружен реквизит для дерева областей.
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция ОписаниеДанныхОрганизации() Экспорт
		
	ДанныеОрганизации = Новый Структура(
		"НаименованиеОрганизации, 
		|АдресОрганизации, 
		|ОтветственныйЗаОбработкуПерсональныхДанных");
		
	Возврат ДанныеОрганизации;

КонецФункции

Функция ОписаниеДанныхСубъекта() Экспорт
	
	ДанныеСубъекта = Новый Структура(
		"Субъект,
		|ФИО,
		|Адрес,
		|ПаспортныеДанные");
		
	Возврат ДанныеСубъекта;

КонецФункции

Функция ОписаниеРегистрацииСогласияНаОбработкуПерсональныхДанных() Экспорт
	
	Описание = Новый Структура(
		"Организация, 
		|Субъект, 
		|ДатаРегистрации, 
		|Действует, 
		|СрокДействия");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеСогласия()
	
	Описание = Новый Структура(
		"ДатаПолучения, 
		|СрокДействия,
		|ДокументОснование");
	
	Возврат Описание;
	
КонецФункции

Процедура ЗарегистрироватьСведенияОСогласииНаОбработкуПерсональныхДанных(Движения, ОписаниеРегистрации) Экспорт
	
	НоваяЗапись = Движения.СогласияНаОбработкуПерсональныхДанных.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ОписаниеРегистрации);
	НоваяЗапись.Период = ОписаниеРегистрации.ДатаРегистрации;
	
	Движения.СогласияНаОбработкуПерсональныхДанных.Записывать = Истина;
	
КонецПроцедуры

Функция ИстекшиеСогласияНаОбработкуПерсональныхДанных(ДатаОценки = Неопределено)
	
	ИстекшиеСогласия = Новый Массив;
	
	Если ДатаОценки = Неопределено Тогда
		ДатаОценки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Согласия.Период КАК ДатаПолучения,
		|	Согласия.Регистратор КАК ДокументОснование,
		|	Согласия.Организация,
		|	Согласия.Субъект,
		|	Согласия.СрокДействия
		|ИЗ
		|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(&ДатаОценки, ) КАК Согласия
		|ГДЕ
		|	Согласия.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Согласия.СрокДействия <= &ДатаОценки");
		
	Запрос.УстановитьПараметр("ДатаОценки", ДатаОценки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИстекшиеСогласия.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат ИстекшиеСогласия;
	
КонецФункции

Процедура НастроитьПоказСубъектовСоСкрытымиПДн(Форма, Список)
	
	ГруппаКнопки = Форма.Элементы.Найти("ГруппаПоказыватьСоСкрытымиПДн");
	Если ГруппаКнопки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПоказыватьСоСкрытымиПДн";
	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Действие = "Подключаемый_ПоказыватьСоСкрытымиПДн";
	НоваяКоманда.Заголовок = НСтр("ru = 'Показывать со скрытыми ПДн'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Показывать субъекты со скрытыми персональными данными'");
	
	НоваяКнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
	НоваяКнопка.ТолькоВоВсехДействиях = Истина;

	УстановитьОтборСписка(Список, НоваяКнопка);
	УстановитьУсловноеОформление(Список);
		
КонецПроцедуры

Процедура УстановитьОтборСписка(Список, КнопкаОтбора)
	
	ПоказыватьСоСкрытымиПДн = КнопкаОтбора.Пометка; 
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьСоСкрытымиПДн", ПоказыватьСоСкрытымиПДн);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Список)
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор, "ПДнСкрыты", Истина);
	
КонецПроцедуры

Функция ОбрабатываемыеМетаданные() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Константы", НСтр("ru = 'Константы'"));
	Структура.Вставить("Справочники", НСтр("ru = 'Справочники'"));
	Структура.Вставить("Документы", НСтр("ru = 'Документы'"));
	Структура.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"));
	Структура.Вставить("ПланыСчетов", НСтр("ru = 'Планы счетов'"));
	Структура.Вставить("ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"));
	Структура.Вставить("РегистрыСведений", НСтр("ru = 'Регистры сведений'"));
	Структура.Вставить("РегистрыНакопления", НСтр("ru = 'Регистры накопления'"));
	Структура.Вставить("РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"));
	Структура.Вставить("РегистрыРасчета", НСтр("ru = 'Регистры расчета'"));
	Структура.Вставить("БизнесПроцессы", НСтр("ru = 'Бизнес процессы'"));
	Структура.Вставить("Задачи", НСтр("ru = 'Задачи'"));
	
	Возврат Структура;
	
КонецФункции

Функция ПараметрыОтбораСкрываемыхДанных() Экспорт
	
	Возврат Новый Структура("ОсновноеПолеОтбора,Субъекты,ТипСубъектов");
	
КонецФункции

Функция НоваяТаблицаИсключений()
	
	ТаблицаИсключений = Новый ТаблицаЗначений();
	ТаблицаИсключений.Колонки.Добавить("Субъект", Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип);
	ТаблицаИсключений.Колонки.Добавить("ПричинаОтменыСкрытия", ОбщегоНазначения.ОписаниеТипаСтрока(300));

КонецФункции

Функция ОбработатьТаблицуИсключений(ТаблицаИсключений)
	
	Если Не ЗначениеЗаполнено(ТаблицаИсключений) Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	НомерСтроки = 1;
	КолВоСтрок = ТаблицаИсключений.Количество();
	ТаблицаИсключений.Сортировать("ПричинаОтменыСкрытия");
	
	ТекущиеСубъекты = Новый Массив; 
	СубъектыИсключения = Новый Массив; 
	ПричинаОтменыСкрытия = "";
	
	НастройкиСкрытия = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.НастройкиСкрытияПоУмолчанию();
	НастройкиСкрытия.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеОтменено;
	НастройкиСкрытия.ДатаСкрытия = Дата(1, 1, 1);
	
	Для Каждого СтрокаИсключения Из ТаблицаИсключений Цикл
		
		Если СтрокаИсключения.ПричинаОтменыСкрытия <> ПричинаОтменыСкрытия 
			Или НомерСтроки = КолВоСтрок Тогда
			
			Если ЗначениеЗаполнено(ТекущиеСубъекты) Тогда
				
				НастройкиСкрытия.ПричинаОтменыСкрытия = ПричинаОтменыСкрытия;
				РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.Записать(ТекущиеСубъекты, НастройкиСкрытия);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СубъектыИсключения, ТекущиеСубъекты);
				ТекущиеСубъекты.Очистить();
				
			КонецЕсли;
			
			ПричинаОтменыСкрытия = СтрокаИсключения.ПричинаОтменыСкрытия;
			ТекущиеСубъекты.Добавить(СтрокаИсключения.Субъект);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат СубъектыИсключения;
	
КонецФункции

#Область ИзменениеНастроекСкрытияПерсональныхДанных

Процедура ОбновитьНастройкиСкрытияПерсональныхДанныхСубъекта(Субъект, СрокДействующегоСогласия = Неопределено, ДнейДоСкрытия = Неопределено)
	
	НастройкиСкрытия = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.НастройкиСкрытияПоУмолчанию();
	
	Если СрокДействующегоСогласия = Неопределено Тогда
		
		ДействующееСогласие = ДействующееСогласиеНаОбработкуПерсональныхДанных(Субъект);
		Если ЗначениеЗаполнено(ДействующееСогласие) Тогда
			СрокДействующегоСогласия = ДействующееСогласие.СрокДействия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДнейДоСкрытия = Неопределено Тогда
		ДнейДоСкрытия = Константы.ДнейДоСкрытияПерсональныхДанныхСубъектов.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокДействующегоСогласия) Тогда
		НастройкиСкрытия.ДатаСкрытия = СрокДействующегоСогласия + ДнейДоСкрытия * 86400; 
	ИначеЕсли СрокДействующегоСогласия = Дата(1, 1, 1) Тогда
		НастройкиСкрытия.ДатаСкрытия = СрокДействующегоСогласия;
	КонецЕсли;
		
	РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.Записать(Субъект, НастройкиСкрытия);
	
КонецПроцедуры
	
Процедура РассчитатьДатуСкрытияПерсональныхДанныхСубъекта(Субъект) Экспорт
	
	НастройкиСубъектов = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.Прочитать(Субъект);
	НастройкиСкрытия = НастройкиСубъектов.Получить(Субъект);
	
	Если ЗначениеЗаполнено(НастройкиСкрытия) 
		И (НастройкиСкрытия.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеОтменено 
		Или НастройкиСкрытия.Состояние = Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено) Тогда
		Возврат;
	КонецЕсли;

	ОбновитьНастройкиСкрытияПерсональныхДанныхСубъекта(Субъект)

КонецПроцедуры

Процедура ОчиститьСрокСкрытияПерсональныхДанныхСубъектов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СубъектыДляСкрытияПерсональныхДанных.Субъект КАК Субъект
	|ИЗ
	|	РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных
	|ГДЕ
	|	СубъектыДляСкрытияПерсональныхДанных.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСубъектовДляСкрытия.ГотовКСкрытию)";
		
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.СубъектыДляСкрытияПерсональныхДанных.СоздатьНаборЗаписей();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Субъект.Установить(Выборка.Субъект);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, , Истина, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьДатуСкрытияПДнСубъектовДавшихСогласие(ДнейДоСкрытияПДн)
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено);
	Состояния.Добавить(Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеОтменено);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СогласияНаОбработкуПерсональныхДанных.Субъект КАК Субъект
	|ПОМЕСТИТЬ ВТВсеСубъектыПредоставлявшиеСогласие
	|ИЗ
	|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных КАК СогласияНаОбработкуПерсональныхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СубъектыПредоставлявшиеСогласие.Субъект КАК Субъект
	|ИЗ
	|	ВТВсеСубъектыПредоставлявшиеСогласие КАК СубъектыПредоставлявшиеСогласие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных
	|		ПО СубъектыПредоставлявшиеСогласие.Субъект = СубъектыДляСкрытияПерсональныхДанных.Субъект
	|			И (СубъектыДляСкрытияПерсональныхДанных.Состояние В (&Состояния))
	|ГДЕ
	|	СубъектыДляСкрытияПерсональныхДанных.Субъект ЕСТЬ NULL";
	
	Субъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Субъект");
	
	Запрос = ЗапросДанныеДействующихСогласий(Субъекты);	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбновитьНастройкиСкрытияПерсональныхДанныхСубъекта(Выборка.Субъект, Выборка.СрокДействия, ДнейДоСкрытияПДн);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросДанныеДействующихСогласий(Субъекты, Знач Дата = Неопределено, ИсключаемыйРегистратор = Неопределено)
	
	Если Дата = Неопределено Тогда
		Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Субъекты", Субъекты);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Согласия.Период КАК ДатаПолучения,
	|	Согласия.Регистратор КАК ДокументОснование,
	|	Согласия.Субъект КАК Субъект,
	|	Согласия.СрокДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТСогласия
	|ИЗ
	|	РегистрСведений.СогласияНаОбработкуПерсональныхДанных.СрезПоследних(
	|			&Дата,
	|			Субъект В (&Субъекты)
	|				И Регистратор <> &ИсключаемыйРегистратор) КАК Согласия
	|ГДЕ
	|	Согласия.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Согласия.ДатаПолучения КАК ДатаПолучения,
	|	Согласия.ДокументОснование КАК ДокументОснование,
	|	Согласия.Субъект КАК Субъект
	|ПОМЕСТИТЬ ВТВсеБессрочныеСогласия
	|ИЗ
	|	ВТСогласия КАК Согласия
	|ГДЕ
	|	Согласия.СрокДействия = &ПустаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БессрочныеСогласия.Субъект КАК Субъект,
	|	МАКСИМУМ(БессрочныеСогласия.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТОсновныеРегистраторыБессрочныхСогласий
	|ИЗ
	|	ВТВсеБессрочныеСогласия КАК БессрочныеСогласия
	|
	|СГРУППИРОВАТЬ ПО
	|	БессрочныеСогласия.Субъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторыБессрочныхСогласий.Субъект КАК Субъект,
	|	РегистраторыБессрочныхСогласий.ДокументОснование КАК ДокументОснование,
	|	БессрочныеСогласия.ДатаПолучения КАК ДатаПолучения
	|ПОМЕСТИТЬ ВТБессрочныеСогласия
	|ИЗ
	|	ВТОсновныеРегистраторыБессрочныхСогласий КАК РегистраторыБессрочныхСогласий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеБессрочныеСогласия КАК БессрочныеСогласия
	|		ПО РегистраторыБессрочныхСогласий.Субъект = БессрочныеСогласия.Субъект
	|			И РегистраторыБессрочныхСогласий.ДокументОснование = БессрочныеСогласия.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновныеРегистраторыБессрочныхСогласий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Согласия.ДатаПолучения КАК ДатаПолучения,
	|	Согласия.ДокументОснование КАК ДокументОснование,
	|	Согласия.Субъект КАК Субъект,
	|	Согласия.СрокДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТВсеСогласияСоСрокомДействия
	|ИЗ
	|	ВТСогласия КАК Согласия
	|ГДЕ
	|	Согласия.СрокДействия <> &ПустаяДата
	|	И Согласия.СрокДействия >= &Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияСоСрокомДействия.Субъект КАК Субъект,
	|	МАКСИМУМ(СогласияСоСрокомДействия.СрокДействия) КАК СрокДействия
	|ПОМЕСТИТЬ ВТМаксСрокиДействияСогласий
	|ИЗ
	|	ВТВсеСогласияСоСрокомДействия КАК СогласияСоСрокомДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	СогласияСоСрокомДействия.Субъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияСоСрокомДействия.Субъект КАК Субъект,
	|	СогласияСоСрокомДействия.СрокДействия КАК СрокДействия,
	|	МАКСИМУМ(СогласияСоСрокомДействия.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТРегистраторыОсновныхСогласийСоСрокомДействия
	|ИЗ
	|	ВТМаксСрокиДействияСогласий КАК СрокиДействияСогласий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеСогласияСоСрокомДействия КАК СогласияСоСрокомДействия
	|		ПО СрокиДействияСогласий.Субъект = СогласияСоСрокомДействия.Субъект
	|			И СрокиДействияСогласий.СрокДействия = СогласияСоСрокомДействия.СрокДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	СогласияСоСрокомДействия.Субъект,
	|	СогласияСоСрокомДействия.СрокДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласияСоСрокомДействия.ДатаПолучения КАК ДатаПолучения,
	|	РегистраторыСогласийСоСрокомДействия.ДокументОснование КАК ДокументОснование,
	|	РегистраторыСогласийСоСрокомДействия.Субъект КАК Субъект,
	|	РегистраторыСогласийСоСрокомДействия.СрокДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТСогласияСоСрокомДействия
	|ИЗ
	|	ВТРегистраторыОсновныхСогласийСоСрокомДействия КАК РегистраторыСогласийСоСрокомДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеСогласияСоСрокомДействия КАК СогласияСоСрокомДействия
	|		ПО РегистраторыСогласийСоСрокомДействия.Субъект = СогласияСоСрокомДействия.Субъект
	|			И РегистраторыСогласийСоСрокомДействия.СрокДействия = СогласияСоСрокомДействия.СрокДействия
	|			И РегистраторыСогласийСоСрокомДействия.ДокументОснование = СогласияСоСрокомДействия.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРегистраторыОсновныхСогласийСоСрокомДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БессрочныеСогласия.Субъект КАК Субъект
	|ПОМЕСТИТЬ ВТСубъектыСДействующимиСогласиями
	|ИЗ
	|	ВТБессрочныеСогласия КАК БессрочныеСогласия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СогласияСоСрокомДействия.Субъект
	|ИЗ
	|	ВТСогласияСоСрокомДействия КАК СогласияСоСрокомДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СубъектыСДействующимиСогласиями.Субъект КАК Субъект,
	|	ВЫБОР
	|		КОГДА БессрочныеСогласия.Субъект ЕСТЬ NULL
	|			ТОГДА СогласияСоСрокомДействия.СрокДействия
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА БессрочныеСогласия.Субъект ЕСТЬ NULL
	|			ТОГДА СогласияСоСрокомДействия.ДатаПолучения
	|		ИНАЧЕ БессрочныеСогласия.ДатаПолучения
	|	КОНЕЦ КАК ДатаПолучения,
	|	ВЫБОР
	|		КОГДА БессрочныеСогласия.Субъект ЕСТЬ NULL
	|			ТОГДА СогласияСоСрокомДействия.ДокументОснование
	|		ИНАЧЕ БессрочныеСогласия.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование
	|ИЗ
	|	ВТСубъектыСДействующимиСогласиями КАК СубъектыСДействующимиСогласиями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБессрочныеСогласия КАК БессрочныеСогласия
	|		ПО СубъектыСДействующимиСогласиями.Субъект = БессрочныеСогласия.Субъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСогласияСоСрокомДействия КАК СогласияСоСрокомДействия
	|		ПО СубъектыСДействующимиСогласиями.Субъект = СогласияСоСрокомДействия.Субъект";
		
	Возврат Запрос;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииИзменениеНастроекСкрытияПДн() Экспорт
	
	Возврат НСтр("ru = 'Защита персональных данных.Изменение настроек скрытия персональных данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревомОбластейПерсональныхДанных

Функция ИмяРеквизитаДеревоОбластей()
	Возврат "ОбластиПерсональныхДанных";
КонецФункции

Функция ДеревоОбластейПерсональныхДанных()
	
	ДеревоОбластейДанных = Новый ДеревоЗначений;
	ДеревоОбластейДанных.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ДеревоОбластейДанных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоОбластейДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	ОбластиДанных = ОбластиПерсональныхДанных();
	
	// Заполнение дерева областей
	Для Каждого ОбластьДанных Из ОбластиДанных Цикл
		ДобавитьОбластьДанныхВДерево(ДеревоОбластейДанных, ОбластиДанных, ОбластьДанных);
	КонецЦикла;
	
	// Если области данных не определены для всех сведений 
	// или для отдельных - добавляем область данных по умолчанию.
	ТаблицаСведений = СведенияОПерсональныхДанных();
	Если ОбластиДанных.Количество() = 0 
		Или ТаблицаСведений.НайтиСтроки(Новый Структура("ОбластьДанных", "")).Количество() > 0 Тогда
		ДобавитьОбластьДанныхВДерево(ДеревоОбластейДанных, ОбластиДанных, Новый Структура("Имя, Представление, Родитель", "", НСтр("ru = 'Персональные данные'")));
	КонецЕсли;
	
	Возврат ДеревоОбластейДанных;
	
КонецФункции

Функция ДобавитьОбластьДанныхВДерево(ДеревоОбластей, ОбластиДанных, ОбластьДанных)
	
	// Поиск области в дереве значений.
	НайденнаяОбласть = ДеревоОбластей.Строки.Найти(ОбластьДанных.Имя, "Имя", Истина);
	Если НайденнаяОбласть <> Неопределено Тогда
		Возврат НайденнаяОбласть;
	КонецЕсли;
	
	// Добавление в "корень" дерева.
	Родитель = ДеревоОбластей;
	Если ЗначениеЗаполнено(ОбластьДанных.Родитель) Тогда
		ОбластьРодитель = ОбластиДанных.Найти(ОбластьДанных.Родитель, "Имя");
		Если ОбластьРодитель <> Неопределено Тогда
			Родитель = ДобавитьОбластьДанныхВДерево(ДеревоОбластей, ОбластиДанных, ОбластьРодитель);
		КонецЕсли;
	КонецЕсли;
	
	// Добавление области
	НоваяОбласть = Родитель.Строки.Добавить();
	НоваяОбласть.Имя = ОбластьДанных.Имя;
	НоваяОбласть.Представление = ОбластьДанных.Представление;
	
	Возврат НоваяОбласть;
	
КонецФункции

#КонецОбласти

#КонецОбласти
