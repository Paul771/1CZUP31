
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - регистрируемые начисления.
//		Если передано НеОпределено, то начисления не регистрируются.
//		Таблица значений с колонками:
//			ФизическоеЛицо
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//			ОтработаноДней - не обязательно.
//			ОтработаноЧасов - не обязательно.
//			ОплаченоДней - не обязательно.
//			ОплаченоЧасов - не обязательно.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		Удержания  - регистрируемые удержания.
//		Если передано НеОпределено, то удержания не регистрируются.
//		Таблица значений с колонками:
//			ФизическоеЛицо
//			Удержание - ссылка на план видов расчета.
//			Сумма
//			СуммаКорректировкиВыплаты - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
//
//		БазаУдержаний - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Удержание - ссылка на план видов расчета.
//			Сумма - "вес" строки базы удержаний. В соответствии с данными 
//					весами и будет выполнено распределение удержаний.
//			
//		ПрочиеДоходы - регистрируемые натуральные доходы.
//		Если передано НеОпределено, то доходы не регистрируются.
//		Таблица значений с колонками:
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//		ОграничениеВзысканий - (необязательный), булево, по умолчанию Ложь,
//			если Истина - при распределении удержаний по рабочим местам 
//			учитываются межрасчетные начисления и удержания.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, БазаУдержаний, ПрочиеДоходы, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь, ОграничениеВзысканий = Ложь) Экспорт
	
	СтрокиНачислений = Новый Массив;
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	ДанныеМежрасчетногоПериода = ?(	ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
	
	ТаблицаНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоСотрудникам");
	ТаблицаУдержанийПрочихНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоСотрудникам");
	
	Если Начисления <> Неопределено Тогда
		ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		// Заполняем движения
		ДобавленныеСтрокиНачислений = Новый Массив;
		Для Каждого Строка Из Начисления Цикл
			ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			УчитыватьВоВзаиморасчетах = Истина;
			ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.Начисление];
			Если ПравилаУчетаНачисления <> Неопределено Тогда
				ГруппаНачисленияУдержанияВыплаты = ПравилаУчетаНачисления.ГруппаНачисленияУдержанияВыплаты;
				УчитыватьВоВзаиморасчетах = ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах;
			КонецЕсли;
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ДобавленныеСтрокиНачислений.Добавить(НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = ГруппаНачисленияУдержанияВыплаты;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			Если УчитыватьВоВзаиморасчетах Тогда
				СтрокиНачислений.Добавить(НоваяСтрока);
			КонецЕсли;
			// Заполняем даты начала/окончания.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) Тогда
				НоваяСтрока.ДатаНачала = ПериодРегистрации;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания) Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(ПериодРегистрации);
			КонецЕсли;
			НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
		КонецЦикла;
		УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(ТаблицаНачислений, ПериодРегистрации);
	КонецЕсли;
	
	// Перенесем начисления в коллекцию движений
	Если ТаблицаНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		// При использовании учета по источникам удержания уже распределены.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
			Для Каждого Строка Из Удержания Цикл
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Период				= ПериодРегистрации;
				НоваяСтрока.ПериодДействия		= ПериодРегистрации;
				НоваяСтрока.Организация			= Организация;
				НоваяСтрока.НачислениеУдержание = Строка.Удержание;
				НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЦикла;
		Иначе
			// При отсутствии учета по источникам удержания нужно распределить.
			Если БазаУдержаний = Неопределено Тогда
				// Получить данные для распределения удержаний по текущим начислениям.
				МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
				ДанныеДляУчетаУдержаний = ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация,, ДанныеМежрасчетногоПериода, ОграничениеВзысканий);
			КонецЕсли;
			УдержанияКРаспределению = КоллекцияРаспределяемыхУдержаний();
			
			Для Каждого СтрокаУдержания Из Удержания Цикл
				НоваяСтрока = УдержанияКРаспределению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
				НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
				НоваяСтрока.НачислениеУдержание = СтрокаУдержания.Удержание;
			КонецЦикла;
			УдержанияПоРабочимМестам = РаспределениеУдержанийПоРабочимМестам(УдержанияКРаспределению, ПериодРегистрации, Организация, ДанныеДляУчетаУдержаний.БазовыеНачисления, ДанныеДляУчетаУдержаний.УжеУдержано);
		КонецЕсли;
		// Заполняем движения 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, ТаблицаУдержанийПрочихНачислений);
	КонецЕсли;
		
	Если ПрочиеДоходы <> Неопределено Тогда
		Для Каждого Строка Из ПрочиеДоходы Цикл
			НоваяСтрока = ТаблицаУдержанийПрочихНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.Начисление;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем удержания и прочие доходы в коллекцию движений
	Если ТаблицаУдержанийПрочихНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУдержанийПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		Если ТаблицаНачислений.Количество() + ТаблицаУдержанийПрочихНачислений.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУдержанийПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из СтрокиНачислений Цикл
			НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			НачисленияДляВзаиморасчетов, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииНачисленийУдержанийПоСотрудникам(Движения, Отказ, ДобавленныеСтрокиНачислений, ХарактерВыплаты, ПериодРегистрации);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (не обязательно)
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета 
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьОтработанноеВремя(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
		
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		
	КонецЦикла;
	
	УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(Движения.ОтработанноеВремяПоСотрудникам, ПериодРегистрации, "Начисление");
	Движения.ОтработанноеВремяПоСотрудникам.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("ОтработанноеВремяПоСотрудникамАвансом") <> Неопределено Тогда
		
		Если Движения.ОтработанноеВремяПоСотрудникам.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Движения.ОтработанноеВремяПоСотрудникам, Движения.ОтработанноеВремяПоСотрудникамАвансом);
			Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииОтработанногоВремени(Движения, ЗаписыватьДвижения);
	
КонецПроцедуры

// Дорабатывает таблицу с данными расчета НДФЛ в вид, пригодный для регистрации в учете начисленной и удержанной зарплаты
// Вызывается перед ЗарегистрироватьНДФЛ
// Обрабатывает колонки НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13 если они есть.
Процедура ПодготовитьДанныеНДФЛКРегистрации(ТаблицаНДФЛ, Организация, ДатаОперации) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	ТаблицаНДФЛ = УчетНДФЛ.ТаблицаДвиженийСРегистрациейВНалоговомОргане(ТаблицаНДФЛ, "МесяцНалоговогоПериода");
	
	Если ТаблицаНДФЛ.Колонки.Найти("Сумма") = Неопределено И ТаблицаНДФЛ.Колонки.Найти("НалогПоСтавке13") <> Неопределено Тогда
		ТаблицаНДФЛ.Колонки.НалогПоСтавке13.Имя = "Сумма";
	КонецЕсли;
	ВычестьЗачтеннуюСумму = Ложь;
	ЗаполнитьПодразделениеСотрудника = Ложь;
	Если ТаблицаНДФЛ.Колонки.Найти("ЗачтеноАвансовыхПлатежейПоСтавке13") <> Неопределено 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ВычестьЗачтеннуюСумму = Истина;
	КонецЕсли;
	Если ТаблицаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
		ТаблицаНДФЛ.Колонки.Добавить("ПодразделениеСотрудника");
		ЗаполнитьПодразделениеСотрудника = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(СтрокаТЗ, СтрокаТЗ.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
		Если ВычестьЗачтеннуюСумму Тогда
			СтрокаТЗ.Сумма = СтрокаТЗ.Сумма - СтрокаТЗ.ЗачтеноАвансовыхПлатежейПоСтавке13
		КонецЕсли;
		Если ЗаполнитьПодразделениеСотрудника Тогда
			СтрокаТЗ.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//			Подразделение - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//		РаспределятьПоРабочимМестамБезусловно - булево, признак того, что даные необходимо безусловно 
//			распределить по рабочим местам (сотрудникам, подразделениям)
//			По умолчанию - Ложь 
//			Если Ложь, то распределение выполняется по необходимости на основании настроек и ФО.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, МВТ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь, РаспределятьПоРабочимМестамБезусловно = Ложь, ДанныеМежрасчетногоПериода = НеОпределено, Авансом = Ложь) Экспорт
	
	Если ДанныеМежрасчетногоПериода = НеОпределено Тогда
		ДанныеМежрасчетногоПериода = ?(	ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
			ХарактерВыплаты = Неопределено, Ложь, Истина);
	КонецЕсли;
		
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;
	
	Если РаспределятьПоРабочимМестамБезусловно Тогда
		Распределять = Истина;
	Иначе
		Распределять = Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	КонецЕсли;
		
	Если Распределять Тогда
		Регистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(РезультатыРасчетаНДФЛ, "ФизическоеЛицо", Истина);
		УжеУчтеноУдержаний = НеОпределено;
		Если ДанныеМежрасчетногоПериода Тогда
			// Межрасчетное регистрация НДФЛ - не учитываем ранее удержанные суммы, т.к. расчет 
			// выполнялся исходя из данных одного документа.
			РегистраторОграниченияБазы = Регистратор;
		Иначе
			РегистраторОграниченияБазы = НеОпределено;
			Удержания = Новый Массив;
			Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
			УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
		КонецЕсли;
		// Если характер выплаты документа задан и при этом начисления по документу не будут выплачиваться 
		// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
		БазаРасчетаНДФЛ = УчетНДФЛ.БазаРасчетаНДФЛ(МВТ, Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
		УдержанияКРаспределению = КоллекцияРаспределяемыхУдержаний();
		Для Каждого СтрокаУдержания Из РезультатыРасчетаНДФЛ Цикл
			НоваяСтрока = УдержанияКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = СтрокаУдержания.Подразделение;
			Если Не Авансом Тогда
				НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			КонецЕсли;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		КонецЦикла;
		УдержанияПоРабочимМестам = РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределению, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, 0, Авансом, Истина);
	Иначе
		УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
		Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			Если Не Авансом Тогда
				НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			КонецЕсли;	
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.Подразделение		= Строка.ПодразделениеСотрудника;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		КонецЦикла;
	КонецЕсли;

	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, ДвиженияНачисленийУдержаний);
	Если Не Авансом
		И ХарактерВыплаты <> Неопределено
		И ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		
	КонецЕсли;

	ДвиженияНачисленийУдержаний.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		ДвиженияНачисленийУдержаний.Записать();
		ДвиженияНачисленийУдержаний.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Или Авансом Тогда
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		Если Авансом Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		Иначе	
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ХарактерВыплаты, 
				Неопределено, УдержанияДляВзаиморасчетов);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		КорректировкиВыплаты - таблица значений с корректировками выплаты.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьКорректировкиВыплаты(Движения, Отказ, Организация, ПериодРегистрации, КорректировкиВыплаты, МВТ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь, РаспределятьПоРабочимМестамБезусловно = Ложь) Экспорт
	
	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДанныеМежрасчетногоПериода = ?(ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
	
	Если РаспределятьПоРабочимМестамБезусловно Тогда
		Распределять = Истина;
	Иначе
		Распределять = Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	КонецЕсли;
	
	// При использовании учета по источникам НДФЛ уже распределен.
	Если Не Распределять Тогда
		КорректировкиПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
		Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
			НоваяСтрока = КорректировкиПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			Если СтрокаКорректировки.КорректировкаВыплаты < 0 Тогда
				НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			Иначе
				НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			КонецЕсли;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
		КонецЦикла;
	Иначе
		// При отсутствии учета по источникам корректировки нужно распределить
		Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
		
		// 1. Распределяем первичные корректировки
		УдержанияКРаспределениюПервичные = КоллекцияРаспределяемыхУдержаний();
		Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
			// считаем, что первичные корректировки, это отрицательные корректировки
			Если СтрокаКорректировки.КорректировкаВыплаты < 0 Тогда
				НоваяСтрока = УдержанияКРаспределениюПервичные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
				НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
			КонецЕсли;
		КонецЦикла;
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияКРаспределениюПервичные, "ФизическоеЛицо", Истина);
		УжеУчтеноУдержаний = НеОпределено;
		Если ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Зарплата И ХарактерВыплаты <> НеОпределено Тогда
			РегистраторОграниченияБазы = Регистратор;
		Иначе
			РегистраторОграниченияБазы = НеОпределено;
			Удержания = Новый Массив;
			Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
			УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
		КонецЕсли;
		// Если характер выплаты документа задан и при этом начисления по документу не будут выплачиваться 
		// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
		БазаРасчетаНДФЛ = УчетНДФЛ.БазаРасчетаНДФЛ(МВТ, Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
		КорректировкиПоРабочимМестам = РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределениюПервичные, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету, 0);
		
		// 2. Распределяем вторичные корректировки
		УдержанияКРаспределениюВторичные = КоллекцияРаспределяемыхУдержаний();
		Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
			// считаем, что вторичные корректировки, это положительные корректировки
			Если СтрокаКорректировки.КорректировкаВыплаты > 0 Тогда
				НоваяСтрока = УдержанияКРаспределениюВторичные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
				НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
			КонецЕсли;
		КонецЦикла;
		Если УдержанияКРаспределениюВторичные.Количество() > 0 Тогда
			ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияКРаспределениюВторичные, "ФизическоеЛицо", Истина);
			// КорректировкиВыплаты могут служить базой для распределения, нужно лишь переименовать колонку "КорректировкаВыплаты".
			ИменаКолонокКорректировкиВыплаты = ВзаиморасчетыССотрудниками.ИменаКолонокКорректировкиВыплаты();
			ИменаКолонокКорректировкиВыплаты.СуммаКорректировки = "Сумма"; 
			ТекущиеКорректировкиВыплаты = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(
				Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы, 
				ИменаКолонокКорректировкиВыплаты);
			
			Удержания = Новый Массив;
			Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено);
			УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
			КорректировкиПоРабочимМестамВторичные = РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределениюВторичные, ПериодРегистрации, Организация, ТекущиеКорректировкиВыплаты, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено, 0);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоРабочимМестамВторичные, КорректировкиПоРабочимМестам);
		КонецЕсли;
		
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		Взаиморасчеты = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого СтрокаКорректировки Из КорректировкиПоРабочимМестам Цикл
			НоваяСтрока = Взаиморасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.СуммаКорректировкиВыплаты = НоваяСтрока.Сумма;
			НоваяСтрока.Сумма = 0;
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты, 
			Неопределено, Взаиморасчеты);
	КонецЕсли;
	
	// Инвертируем суммы НДФЛКЗачету для отражения в НачисленияУдержанияПоСотрудникам
	ОтборСтрок = Новый Структура("НачислениеУдержание", Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
	НайденныеСтроки = КорректировкиПоРабочимМестам.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Сумма = -НайденнаяСтрока.Сумма;
	КонецЦикла;
	
	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для регистрации в учете возврата НДФЛ физлицу
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//			Подразделение - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах
//
Процедура ЗарегистрироватьВозвратНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	ДанныеМежрасчетногоПериода = ?(ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или
									ХарактерВыплаты = Неопределено, Ложь, Истина);
									
	ТаблицаНДФЛ = РезультатыРасчетаНДФЛ.Скопировать();
	
	// УдержанияПоРабочимМестам требует колонки ТерриторияВыполненияРаботВОрганизации и Подразделение.
	ТаблицаНДФЛ.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", ТаблицаНДФЛ.Колонки.Подразделение.ТипЗначения);
	Для Каждого СтрокаТаблицы Из ТаблицаНДФЛ Цикл
		СтрокаТаблицы.ТерриторияВыполненияРаботВОрганизации = СтрокаТаблицы.Подразделение;
	КонецЦикла;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина);
	// Если характер выплаты документа задан и при этом начисления по документу не буду выплачиваться 
	// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
	Если ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Зарплата И ХарактерВыплаты <> НеОпределено Тогда
		РегистраторОграниченияБазы = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	Иначе
		РегистраторОграниченияБазы = НеОпределено;
	КонецЕсли;
	УдержанияПоРабочимМестам = РаспределениеПрочихУдержанийПоРабочимМестам(ТаблицаНДФЛ, ПериодРегистрации, Организация, НеОпределено, НеОпределено, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, 0);
	
	// При использовании учета по источникам НДФЛ необходимо распределить еще и по источникам финансирования.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		// Создаем временную таблицу с рабочими местами и распределенными по ним суммами удержания.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	УдержанияПоРабочимМестам.Организация,
		|	УдержанияПоРабочимМестам.ФизическоеЛицо,
		|	УдержанияПоРабочимМестам.Сотрудник,
		|	УдержанияПоРабочимМестам.Подразделение,
		|	УдержанияПоРабочимМестам.Сумма,
		|	УдержанияПоРабочимМестам.ТерриторияВыполненияРаботВОрганизации,
		|	УдержанияПоРабочимМестам.РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&УдержанияПоРабочимМестам КАК УдержанияПоРабочимМестам";
		Запрос.УстановитьПараметр("Период", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("УдержанияПоРабочимМестам", УдержанияПоРабочимМестам);
		Запрос.Выполнить();
		// Создаем временную таблицу с отражениями в учете
		ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники"); 
		// Получаем данные распределения в привязке к статьям финансирования
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Сумма,
		|	Сотрудники.ТерриторияВыполненияРаботВОрганизации,
		|	Сотрудники.РегистрацияВНалоговомОргане,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяФинансирования,
		|	СведенияОБухучетеЗарплатыСотрудников.СтатьяРасходов
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучетеЗарплатыСотрудников
		|		ПО (СведенияОБухучетеЗарплатыСотрудников.Подразделение = Сотрудники.Подразделение)
		|			И (СведенияОБухучетеЗарплатыСотрудников.Организация = Сотрудники.Организация)
		|			И (СведенияОБухучетеЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		УдержанияПоРабочимМестам.Очистить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.ПериодДействия = ПериодРегистрации;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.СтатьяФинансирования = Выборка.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов = Выборка.СтатьяРасходов;
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		КонецЦикла;
	КонецЕсли;

	// Для записи движений НачисленияУдержанияПоСотрудникам заполним сумму и поля НачислениеУдержание, ГруппаНачисленияУдержанияВыплаты.
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		// Во взаиморасчеты передаем только СуммаКорректировкиВыплаты
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Строка.СуммаКорректировкиВыплаты = Строка.Сумма;
			Строка.Сумма = 0;
		КонецЦикла;
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты, 
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет распределение прочих сумм удержаний с физических лиц (НДФЛ и прочие)
// по рабочим местам, т.е. по сотрудникам и подразделениям.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//  	Должна содержать колонки
//			- Сумма
//			- Подразделение
//		Может содержать для уточнения алгоритма распределения удержаний (не обязательно)
//			- КоэффициентУдержания
//			- ВычетПрименяемыйПриУдержании.
//
//	ПериодРегистрации
//	Организация
//	БазаРаспределения - таблица значений с колонками
//		- ФизическоеЛицо
//		- Подразделение
//		- Сотрудник
//		- Сумма.
//
//	УжеУдержано - таблица значений с уже удержанными суммами
//		Должна содержать колонки
//			- Сумма
//			- Подразделение
//  ВидУдержания
//  ТочностьРаспределения - по умолчанию - 2. Например, для НДФЛ следует использовать 0
//	Авансом - булево значение. Если истина, то распределение проводится при расчете первой половины месяца.
// 	УчитыватьПодразделение - булево значение. Позволяет учитывать при распределении колонку Подразделение 
//  						таблицы Удержания. Используется при распределении НДФЛ (других 
//							удержаний, "привязанных" к подразделениям нет)
// Возвращаемо значение:
//	Таблица значений с колонками, соотоветсвующими регистру начислений и удержаний.
//    
//
Функция РаспределениеПрочихУдержанийПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = Неопределено, УжеУдержано = Неопределено, ВидУдержания = Неопределено, ТочностьРаспределения = 2, Авансом = Ложь, УчитыватьПодразделение = Ложь) Экспорт
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам(Авансом);
	
	// Если база не определена, получаем базу распределения по умолчанию.
	ИспользуетсяРаспределениеПоУмолчанию = Ложь;
	Если БазаРаспределения = Неопределено Тогда
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
		БазаРаспределения = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ИспользуетсяРаспределениеПоУмолчанию = Истина;
	КонецЕсли;
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из БазаРаспределения Цикл
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаРаспределения.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазыПоФизическомуЛицу = Новый Массив;
		КонецЕсли;
		СтрокиБазыПоФизическомуЛицу.Добавить(СтрокаРаспределения);
		СтрокиБазыПоФизическимЛицам.Вставить(СтрокаРаспределения.ФизическоеЛицо, СтрокиБазыПоФизическомуЛицу);
	КонецЦикла;
	// Раскладываем строки выполненных удержаний по физическим лицам.
	СтрокиУжеУдержаноПоФизическимЛицам = Новый Соответствие;
	Если УжеУдержано <> НеОпределено Тогда
		Для Каждого Строка Из УжеУдержано Цикл
			СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиУжеУдержаноПоФизическомуЛицу = Неопределено Тогда
				СтрокиУжеУдержаноПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиУжеУдержаноПоФизическомуЛицу.Добавить(Строка);
			СтрокиУжеУдержаноПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиУжеУдержаноПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	КоэффициентУдержанияЗадан = Ложь;
	ВычетПрименяемыйПриУдержанииЗадан = Ложь;
	Если Удержания.Колонки.Найти("КоэффициентУдержания") <> НеОпределено Тогда
		КоэффициентУдержанияЗадан = Истина;
	КонецЕсли;
	Если Удержания.Колонки.Найти("ВычетПрименяемыйПриУдержании") <> НеОпределено Тогда
		ВычетПрименяемыйПриУдержанииЗадан = Истина;
	КонецЕсли;
	
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Находим строки распределения.
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		СтрокиРаспределения = Новый Массив;
		Если УчитыватьПодразделение Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				Если СтрокаБазыПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Тогда
					СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЦикла;
		КонецЕсли;
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
						И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение) Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		КоэффициентУдержания = 1;
		ВычетПрименяемыйПриУдержании = 0;
		Если КоэффициентУдержанияЗадан И СтрокаУдержаний.КоэффициентУдержания <> 0 Тогда
			КоэффициентУдержания = СтрокаУдержаний.КоэффициентУдержания;
		КонецЕсли;
		Если ВычетПрименяемыйПриУдержанииЗадан Тогда
			ВычетПрименяемыйПриУдержании = СтрокаУдержаний.ВычетПрименяемыйПриУдержании;
		КонецЕсли;
		// распределеяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты, ТочностьРаспределения, КоэффициентУдержания, ВычетПрименяемыйПриУдержании);
		Если РаспределенныеСуммы <> НеОпределено Тогда
			// минусуем уже удержанные суммы
			Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 							И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
							И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение) Тогда
						НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
						Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
							НоваяСтрока.ПериодДействия = ПериодРегистрации;
						КонецЕсли;
						НоваяСтрока.Период = ПериодРегистрации;
						НоваяСтрока.Сумма  = - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
				НоваяСтрока.Сумма 			= РаспределенныеСуммы[Индекс];
				Если ВидУдержания <> НеОпределено Тогда
					НоваяСтрока.НачислениеУдержание = ВидУдержания;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
			Если ВидУдержания <> НеОпределено Тогда
				НоваяСтрока.НачислениеУдержание = ВидУдержания;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Колонки = "";
	Для Каждого Колонка Из УдержанияПоРабочимМестам.Колонки Цикл
		Если Колонка.Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	УдержанияПоРабочимМестам.Свернуть(Колонки, "Сумма");
	
	Если СтрокиБазаНеопределена.Количество() > 0 И Не ИспользуетсяРаспределениеПоУмолчанию Тогда
		// Распределяем этим же методом по базе распределения "по умолчанию".
		УдержанияПоРабочимМестамПоУмолчанию = РаспределениеПрочихУдержанийПоРабочимМестам(
			Удержания.Скопировать(СтрокиБазаНеопределена), ПериодРегистрации, Организация, Неопределено, Неопределено, ВидУдержания);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестамПоУмолчанию, УдержанияПоРабочимМестам);
	КонецЕсли;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Выполняет распределение сумм удержаний с физических лиц по рабочим местам.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//      Должна содержать колонку Сотрудник 
//      Должна содержать колонку ФизическоеЛицо 
//  	Должна содержать колонку Сумма
//	ПериодРегистрации
//	Организация
//	БазаРаспределения - таблица значений с колонками
//		- ФизическоеЛицо
//		- Подразделение
//		- Сотрудник
//  	- ГоловнойСотрудник
//		- Сумма
//	УжеУдержано - таблица значений с уже удержанными суммами
//  Авансом - Истина, если распределение выполняется для первой половины месяца.
//
Функция РаспределениеУдержанийПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = НеОпределено, УжеУдержано = НеОпределено, Авансом = Ложь) Экспорт
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам(Авансом);
	ВспомогательнаяТаблица = УдержанияПоРабочимМестам.СкопироватьКолонки();
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	// Раскладываем строки базы по рабочим местам.
	СтрокиБазыПоСотрудникам = Новый Соответствие;
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	
	ЗаполнитьСоответствияСтрокБазыПоУдержаниям(Удержания, БазаРаспределения, СтрокиБазыПоФизическимЛицам, СтрокиБазыПоСотрудникам, СтрокиБазаНеопределена);
	
	// Раскладываем строки выполненных удержаний по физическим лицам.
	СтрокиУжеУдержаноПоФизическимЛицам = Новый Соответствие;
	Если УжеУдержано <> НеОпределено Тогда
		Для Каждого Строка Из УжеУдержано Цикл
			СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиУжеУдержаноПоФизическомуЛицу = НеОпределено Тогда
				СтрокиУжеУдержаноПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиУжеУдержаноПоФизическомуЛицу.Добавить(Строка);
			СтрокиУжеУдержаноПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиУжеУдержаноПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиБазаНеопределена.Количество() > 0 Тогда
		
		УдержанияБезБазы = Удержания.Скопировать(СтрокиБазаНеопределена);
		СтрокиБазаНеопределена.Очистить();
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияБезБазы, "ФизическоеЛицо", Истина);
		
		БазаРаспределенияПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ЗаполнитьСоответствияСтрокБазыПоУдержаниям(УдержанияБезБазы, БазаРаспределенияПоУмолчанию, СтрокиБазыПоФизическимЛицам, СтрокиБазыПоСотрудникам, СтрокиБазаНеопределена);
		
		Если СтрокиБазаНеопределена.Количество() > 0 Тогда
			
			СообщениеОбОшибке = "";
			Для каждого Строка Из СтрокиБазаНеопределена Цикл
				
				ТекстСообщения = НСтр("ru='Для физического лица %1 не найдена база распределения удержания %2 по документу-основанию %3.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ФизическоеЛицо, Строка.НачислениеУдержание, Строка.ДокументОснование);
				СообщениеОбОшибке = СообщениеОбОшибке + ТекстСообщения + Символы.ПС;
				
			КонецЦикла;
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаУдержаний Из Удержания Цикл
		
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		ИскатьСтрокиБазыПоФизическомуЛицу = Ложь;
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		
		ВспомогательнаяТаблица.Очистить();
		
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			// Находим строки распределения.
			СтрокиРаспределения = СтрокиБазыПоСотрудникам[СтрокаУдержаний.Сотрудник];
			Если СтрокиРаспределения = НеОпределено Тогда
				ИскатьСтрокиБазыПоФизическомуЛицу = Истина;
			КонецЕсли;
		Иначе
			ИскатьСтрокиБазыПоФизическомуЛицу = Истина;
		КонецЕсли;
		
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
						
			Для каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				
				Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
					И Не Авансом И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
					
					// Подготавливаем таблицу уже удержанных сумм.
					НоваяСтрока = ВспомогательнаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
					НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
					Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
						НоваяСтрока.ПериодДействия = ПериодРегистрации;
					КонецЕсли;
					НоваяСтрока.Период = ПериодРегистрации;
					НоваяСтрока.Сумма  = - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					НоваяСтрока.ОграничениеВзыскания = СтрокаУдержаний.ОграничениеВзыскания;
					
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		Если ИскатьСтрокиБазыПоФизическомуЛицу Тогда
			// Находим строки распределения.
			СтрокиРаспределения = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределеяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты);
		
		Если РаспределенныеСуммы <> НеОпределено Тогда
			
			// минусуем уже удержанные суммы
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВспомогательнаяТаблица, УдержанияПоРабочимМестам);
			
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
				НоваяСтрока.Сумма 			= РаспределенныеСуммы[Индекс];
			КонецЦикла;
		ИначеЕсли РанееУдержано <> 0 И СтрокаУдержаний.Сумма = -РанееУдержано Тогда 
			// минусуем уже удержанные суммы
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВспомогательнаяТаблица, УдержанияПоРабочимМестам);
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	Колонки = "";
	Для каждого Колонка Из УдержанияПоРабочимМестам.Колонки Цикл
		Если Колонка.Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	УдержанияПоРабочимМестам.Свернуть(Колонки, "Сумма");
		
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Заполняет соответствия со значениями ключа типа СправочникСсылка.ФизическиеЛица, СправочникСсылка.Сотрудники строками 
// таблицы БазаРаспределения.
//
// Параметры:
//	Удержания - таблица, по значениям колонок которой, заполняются соответствия.
//      Должна содержать колонку Сотрудник 
//      Должна содержать колонку ФизическоеЛицо 
//      Должна содержать колонку Сумма 
//	БазаРаспределения - таблица базы распределения.
//  	Должна содержать колонку ФизическоеЛицо
//  	Должна содержать колонку ГоловнойСотрудник
//	СтрокиПоФизическимЛицам - Соответствие, ключ должен содержать значения типа СправочникСсылка.ФизическиеЛица   
//	СтрокиПоСотрудникам - Соответствие, ключ должен содержать значения типа СправочникСсылка.Сотрудники
//	СтрокиБазаНеопределена - Массив
//
Процедура ЗаполнитьСоответствияСтрокБазыПоУдержаниям(Удержания, БазаРаспределения, СтрокиПоФизическимЛицам, СтрокиПоСотрудникам, СтрокиБазаНеопределена)
	
	ПустаяБаза = (БазаРаспределения = НеОпределено ИЛИ БазаРаспределения.Количество() = 0);
	Если Не ПустаяБаза Тогда
		БазаРаспределения.Индексы.Добавить("ФизическоеЛицо"); 
		БазаРаспределения.Индексы.Добавить("ГоловнойСотрудник"); 
	КонецЕсли;
	
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяБаза Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		ПолучатьСтрокиПоФизическомуЛицу = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			
			СтрокиПоСотруднику = СтрокиПоСотрудникам[СтрокаУдержаний.Сотрудник];
			Если СтрокиПоСотруднику = НеОпределено Тогда
				
				СтрокиПоСотруднику = Новый Массив;
				СтрокиРаспределения = БазаРаспределения.НайтиСтроки(Новый Структура("ГоловнойСотрудник", СтрокаУдержаний.Сотрудник));
				
				Если СтрокиРаспределения.Количество() > 0 Тогда
					Для каждого Строка Из СтрокиРаспределения Цикл  
						СтрокиПоСотруднику.Добавить(Строка);
					КонецЦикла;
					СтрокиПоСотрудникам.Вставить(СтрокаУдержаний.Сотрудник, СтрокиПоСотруднику);
				Иначе
					ПолучатьСтрокиПоФизическомуЛицу = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ПолучатьСтрокиПоФизическомуЛицу = Истина;
		КонецЕсли;
		
		Если ПолучатьСтрокиПоФизическомуЛицу Тогда
			
			СтрокиПоФизическомуЛицу = СтрокиПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
			Если СтрокиПоФизическомуЛицу = НеОпределено Тогда
				
				СтрокиПоФизическомуЛицу = Новый Массив;
				СтрокиРаспределения = БазаРаспределения.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаУдержаний.ФизическоеЛицо));
				
				Если СтрокиРаспределения.Количество() > 0 Тогда
					Для каждого Строка Из СтрокиРаспределения Цикл  
						СтрокиПоФизическомуЛицу.Добавить(Строка);
					КонецЦикла;
					СтрокиПоФизическимЛицам.Вставить(СтрокаУдержаний.ФизическоеЛицо, СтрокиПоФизическомуЛицу);
				Иначе
					СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ПустаяБаза Тогда
		Для каждого Индекс Из БазаРаспределения.Индексы Цикл
			БазаРаспределения.Индексы.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Регистрирует передачу налогов в налоговый орган.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		НДФЛ              - ТаблицаЗначений   - таблица с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо.
//			* Сумма          - Число                           - сумма налога.	
//		ВидУдержания     - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний - вид удержания.
//
Процедура ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ПериодРегистрации, НДФЛ, ВидУдержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НДФЛ.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ПериодыРегистрации = Новый Массив;
	Период = ПериодРегистрации;
	Пока Период >= НачалоГода(ПериодРегистрации) Цикл
		ПериодыРегистрации.Добавить(Период);
		Период = ДобавитьМесяц(Период, -1);
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("ПериодыРегистрации",	ПериодыРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период КАК ПериодРегистрации,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма КАК Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|		И НачисленияУдержанияПоСотрудникам.Регистратор = &Регистратор) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов";
	
	ИсчисленныеНалоги = Запрос.Выполнить().Выгрузить();
	
	НалогиДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНалоговПередаваемыхВНалоговыйОрган();
	
	Отбор = Новый Структура("ФизическоеЛицо, ПериодРегистрации");		
	Для Каждого Налог Из НДФЛ Цикл
		
		Отбор.ФизическоеЛицо = Налог.ФизическоеЛицо;
		
		НераспределеннаяСумма = Налог.Сумма;
		
		Для Каждого Период Из ПериодыРегистрации Цикл
			
			Отбор.ПериодРегистрации = Период;
			
			НалогиРаботникаВПериоде = ИсчисленныеНалоги.Скопировать(Отбор);
			
			ПогашаемаяСуммаВПериоде = МИН(НалогиРаботникаВПериоде.Итог("Сумма"), НераспределеннаяСумма);
			
			Если ПогашаемаяСуммаВПериоде = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НалогиРаботникаВПериоде, "Сумма");
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ПогашаемаяСуммаВПериоде, Коэффициенты);
			
			Для ИндексСтроки = 0 По НалогиРаботникаВПериоде.Количество() - 1 Цикл
			
				НалогРаботникаВПериоде = НалогиРаботникаВПериоде[ИндексСтроки];
				
				ПогашаемаяСумма = РаспределенныеСуммы[ИндексСтроки];
				
				НалогДляВзаиморасчетов = НалогиДляВзаиморасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НалогДляВзаиморасчетов, НалогРаботникаВПериоде);
				НалогДляВзаиморасчетов.Сумма = ПогашаемаяСумма;
				
				НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НачисленияУдержания, НалогРаботникаВПериоде);
				НачисленияУдержания.Период			= ПериодРегистрации;
				НачисленияУдержания.Организация		= Организация;
				НачисленияУдержания.ПериодДействия	= ПериодРегистрации;
				НачисленияУдержания.НачислениеУдержание = ВидУдержания;
				НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НачисленияУдержания.Сумма = ПогашаемаяСумма;
				
			КонецЦикла;	
			
			НераспределеннаяСумма = НераспределеннаяСумма - ПогашаемаяСуммаВПериоде;
			
			Если НераспределеннаяСумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(
		Движения, Отказ, Организация, ПериодРегистрации, НалогиДляВзаиморасчетов);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		
		ВзаиморасчетыССотрудниками.ЗаписатьДвижения(Движения);
		
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует строки удержаний путем распределения исходной строки по сотрудникам и подразделениям.
//
// Параметры:
//	Движения
//	ПериодРегистрации
//	ИсходнаяСтрока
//	СтрокиРаспределения
//	СтрокиУдержаний - массив строк, добавленных в движения как удержания.
//	ВидУдержания - если задан конкретный вид удержания - прописывается он, если нет - берется из исходной строки.
// Возвращаемое значение:
//	Истина, если удалось сформировать строки по переданные.
//
Функция СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, ИсходнаяСтрока, СтрокиРаспределения, СтрокиУдержаний, ВидУдержания = Неопределено) Экспорт
	
	Коэффициенты = Новый Массив();
	
	СуммаКРаспределению = ИсходнаяСтрока.Сумма;
	
	Для Каждого Строка Из СтрокиРаспределения Цикл
		Если Строка.Владелец().Колонки.Найти("Удержано") = Неопределено Тогда
			Коэффициенты.Добавить(Строка.Сумма);
		Иначе
			СуммаКРаспределению = СуммаКРаспределению + Строка.Удержано;
			Коэффициенты.Добавить(Строка.Сумма);
		КонецЕсли;		
	КонецЦикла;
	МассивСумм = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаКРаспределению, Коэффициенты);
	Если МассивСумм = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По СтрокиРаспределения.Количество() - 1 Цикл
		
		СтрокаРаспределения = СтрокиРаспределения[ИндексСтроки];
		
		Если СтрокаРаспределения.Владелец().Колонки.Найти("Удержано") = Неопределено Тогда
			СуммаУдержания = МассивСумм[ИндексСтроки];
		Иначе
			СуммаУдержания = МассивСумм[ИндексСтроки] - СтрокаРаспределения.Удержано;
		КонецЕсли;
		
		// Строка удержаний не формируется при нулевой сумме удержаний.
		Если СуммаУдержания = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
		НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
		НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
		Если ВидУдержания <> НеОпределено Тогда
			НоваяСтрока.НачислениеУдержание = ВидУдержания;
		КонецЕсли;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		НоваяСтрока.Сумма = СуммаУдержания;

		СтрокиУдержаний.Добавить(НоваяСтрока);
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

// Отбирает строки из таблицы БазаРаспределения по условию на ФизическоеЛицо и Подразделение, если оно указано.
//
Функция СтрокиРаспределенияПоБазе(ФизическоеЛицо, БазаРаспределения, Подразделение = Неопределено) Экспорт
	
	ОтборБазыРаспределения = Новый Структура;
	
	ОтборБазыРаспределения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Если Подразделение <> Неопределено Тогда
		ОтборБазыРаспределения.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Возврат БазаРаспределения.НайтиСтроки(ОтборБазыРаспределения);
	
КонецФункции

// Возвращает таблицы значений, необходимые для распределения удержаний по рабочим местам
// Данные с базовыми начислениями
//	ФизическоеЛицо
//	Сотрудник
//	Подразделение
//	Сумма
//
// Данные с результатами выполненных ранее удержаний
//
// Параметры:
//	Движения - движения регистратора, которые формируются в СформироватьДвижения
//	МассивФизическихЛиц
//	ПериодРегистрации.
//	Организация
//  Авансом - признак того, что требуется получить данные для первой половины месяца. По умолчанию - Ложь
//  ДанныеМежрасчетногоПериода - признак того, что данные получаеются для документа, выплачиваемого в межрасчет
//	ОграничениеВзысканий - если Истина, учитываются также межрасчетные начисления и удержания.
//
// Возвращаемое значение: структура со свойствами
//		БазовыеНачисления
//		УжеУдержано
//
Функция ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация, Авансом = Ложь, ДанныеМежрасчетногоПериода = Ложь, ОграничениеВзысканий = Ложь) Экспорт
	
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам
	КонецЕсли;
	
	МассивСотрудников = ДвиженияНачисленийУдержаний.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	ОсновныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнойСотрудник");
	
	ДанныеДляУчетаУдержаний = Новый Структура("БазовыеНачисления,УжеУдержано");
	
	// Чтобы гаарнтировать одинаковую структуру возвращаемых значений используем один и тот же 
	// набор полей выбора.
	ПоляВыбораБазовыеНачисления = 	"
		|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	СУММА(НачисленияУдержания.Сумма) КАК Сумма";
		
	Если Не ДанныеМежрасчетногоПериода Тогда
		// Если выполнен "окончательный" расчет - учтем данные всех других документов, кроме межрасчетных.
		
		// регистратор движений
		Регистратор = Движения[0].Отбор.Регистратор.Значение;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные 		= "ГоловнойСотрудник";
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
		// Получим данные о начислениях из других регистраторов.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	НачисленияУдержания.НачислениеУдержание,
		|	НачисленияУдержания.Организация,
		|	НачисленияУдержания.СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов,
		|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
		|	НачисленияУдержания.ПериодДействия,
		|	НачисленияУдержания.ДокументОснование,
		|	НачисленияУдержания.Контрагент,
		|	НачисленияУдержания.ДатаНачала,
		|	НачисленияУдержания.ДатаОкончания,
		|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
		|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
		|ГДЕ
		|	НачисленияУдержания.Регистратор <> &Регистратор
		|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НачисленияУдержания.Организация = &Организация
		|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
		|	И НачисленияУдержания.Период = &ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	НачисленияУдержания.НачислениеУдержание,
		|	НачисленияУдержания.Организация,
		|	НачисленияУдержания.СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов,
		|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
		|	НачисленияУдержания.ПериодДействия,
		|	НачисленияУдержания.ДокументОснование,
		|	НачисленияУдержания.Контрагент,
		|	НачисленияУдержания.ДатаНачала,
		|	НачисленияУдержания.ДатаОкончания,
		|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
		|	НачисленияУдержания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	""ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
		|ГДЕ
		|	НачисленияУдержания.Регистратор <> &Регистратор
		|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
		|	И НачисленияУдержания.Организация = &Организация
		|	И НачисленияУдержания.Период = &ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ГоловнойСотрудник,
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение";
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления", ПоляВыбораБазовыеНачисления);
		
		Если Авансом Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам ", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "
											|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "
										|	НачисленияУдержания.ДокументОснование,
										|	НачисленияУдержания.Контрагент,
										|	НачисленияУдержания.ДатаНачала,
										|	НачисленияУдержания.ДатаОкончания,
										|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,", "");										
		КонецЕсли;
		
		Если ОграничениеВзысканий Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода", "ИСТИНА");
		КонецЕсли;
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ДанныеДляУчетаУдержаний.БазовыеНачисления = Результаты[1].Выгрузить();
		ДанныеДляУчетаУдержаний.УжеУдержано = Результаты[0].Выгрузить();
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Значение(Справочник.Сотрудники.ПустаяСсылка) КАК ГоловнойСотрудник,
		|	""ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления", ПоляВыбораБазовыеНачисления);
		ДанныеДляУчетаУдержаний.БазовыеНачисления = Запрос.Выполнить().Выгрузить();
			
	КонецЕсли;
	
	// Дополним данными из текущих движений.
	Для Каждого Строка Из ДвиженияНачисленийУдержаний Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			Если МассивФизическихЛиц.Найти(Строка.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокиБазы = ДанныеДляУчетаУдержаний.БазовыеНачисления.НайтиСтроки(Новый Структура("Сотрудник,Подразделение", Строка.Сотрудник, Строка.Подразделение));
			Если СтрокиБазы.Количество() = 0 Тогда
				СтрокаБазы = ДанныеДляУчетаУдержаний.БазовыеНачисления.Добавить();
				СтрокаБазы.ФизическоеЛицо = Строка.ФизическоеЛицо;
				СтрокаБазы.Сотрудник = Строка.Сотрудник;
				СтрокаБазы.ГоловнойСотрудник = ОсновныеСотрудники.Получить(Строка.Сотрудник);
				СтрокаБазы.Подразделение = Строка.Подразделение;
				СтрокаБазы.Сумма = 0;
			Иначе
				СтрокаБазы = СтрокиБазы[0];
			КонецЕсли;
			СтрокаБазы.Сумма = СтрокаБазы.Сумма + Строка.Сумма;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ДанныеДляУчетаУдержаний;
	
КонецФункции

// Возвращает таблицу с результатами выполненных ранее удержаний
//
// Параметры:
//	Регистратор - регистратор, которые необходимо исключить
//	МассивФизическихЛиц
//	ПериодРегистрации
//	Организация
//	Удержания - массив значений, которые могут хранится в поле НачислениеУдержание 
//				регистров НачисленияУдержанияПоСотрудникам и НачисленияУдержанияПоСотрудникамАвансом.
//
Функция УжеУчтеноУдержаний(Регистратор, МассивФизическихЛиц, ПериодРегистрации, Организация, Удержания = НеОпределено, Авансом = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	// Получим данные о зарегистрированных другими регистраторами удержаниях
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ПериодДействия КАК ПериодДействия,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Контрагент КАК Контрагент,
	|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
	|ГДЕ
	|	НачисленияУдержания.Регистратор <> &Регистратор
	|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НачисленияУдержания.Организация = &Организация
	|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
	|	И НачисленияУдержания.Период = &ПериодРегистрации
	|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ПериодДействия,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Контрагент,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Если Удержания = НеОпределено Тогда
		// не заданы удержания - удалим условие на виды удержаний
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержания.НачислениеУдержание В(&Удержания)", "");
	Иначе
		Запрос.УстановитьПараметр("Удержания", Удержания);
	КонецЕсли;
	Если Авансом Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам ", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
									|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
									|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
									|	НачисленияУдержания.Контрагент КАК Контрагент,
									|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
									|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
									|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
									|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

// Формирование отчета Анализ начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	УчетНачисленнойЗарплатыВнутренний.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

// Возвращает описание добавляемых пользовательских полей.
//
// Возвращаемое значение:
//		Имя - Имя колонки
//		Заголовок - Представление колонки в отчете.
//		ПорядокКолонки - Порядок, в котором должна располагаться колонка отчета.
//		ПриоритетКолонки - Приоритет отображения колонки, как отдельной колонки.
//		НомерКолонки - Номер колонки - используется для получения имени параметра отчета ("Колонка" + НомерКолонки).
//		ДобавитьПользовательскоеПоле - Булево - Если Истина, то пользовательское поле добавляется в коллекцию
//		                                        "ПользовательскиеПоля" варианта отчета, Ложь - поле не добавляется в
//		                                        коллекцию.
//		ВыводитьНулевыеЗначения - Булево - Если Истина, то пользовательское поле выводится в отчет всегда, Ложь - поле не выводится в отчет, если оно нулевое
//		КатегорииКолонки - Массив - Категории, которые выводятся в колонке, используется при составлении условия в
//										выражении пользовательского поля.
//		ПользовательскоеУсловие - Строка - Условие, которое будет использовано в выражении пользовательского поля,
//										при использовании условия "КатегорииКолонки" игнорируются.
//		УсловиеИсключенияИзПрочих - Строка - Условие исключения суммы из колонки "ПрочиеНачисления" или "ПрочиеУдержания",
//										используется в паре с "ПользовательскоеУсловие".
//		РезультатУсловия - Строка - Результат выполнения условия, если в выражении нужно получить не сумму по начислению, а
//										например дни.
//		ВыводитьКолонку - Булево - Если Истина, то колонка будет включена в список выводимых колонок,
//										используется, например, если пользовательское поле нужно создать, но выводить в отчет в определенном месте
//										всегда.
//
Функция ПорядокДополнительныхНачисленийИУдержаний() Экспорт
	
	ТаблицаНачисленийИУдержаний = Новый ТаблицаЗначений;
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Имя", 								Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Заголовок",							Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПорядокКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПриоритетКолонки",					Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("НомерКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ДобавитьПользовательскоеПоле",		Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьНулевыеЗначения",				Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КатегорииКолонки",					Новый ОписаниеТипов("Массив"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПользовательскоеУсловие",				Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("УсловиеИсключенияИзПрочих",			Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("РезультатУсловия",					Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьКолонку",						Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНачисленийИУдержаний;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей = "Начисления") Экспорт
	УчетНачисленнойЗарплатыВнутренний.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей);
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		УчетНачисленнойЗарплатыВнутренний.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры


// Создает коллекцию сумм для распределения по рабочим местам (удержания, корректировки выплаты)
// Параметры:
//	Авансом - признак того, что коллекция создается для удержаний первой половины месяца. По умолчанию - Ложь.
//
// Возвращаемое значение: таблица значений 
//	
Функция ТаблицаРаспределенияПоРабочимМестам(Авансом = Ложь) Экспорт
	
	ИмяРегистраНачисленийУдержаний = "НачисленияУдержанияПоСотрудникам";
	Если Авансом Тогда
		ИмяРегистраНачисленийУдержаний = ИмяРегистраНачисленийУдержаний + "Авансом";
	КонецЕсли;
	
	УдержанияПоРабочимМестам = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления(ИмяРегистраНачисленийУдержаний);
	УдержанияПоРабочимМестам.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Конструктор коллекции распределяемых удержания
// см. УдержанияПоРабочимМестам, параметр Удержания.
Функция КоллекцияРаспределяемыхУдержаний(Авансом = Ложь) Экспорт
	
	Удержания = ТаблицаРаспределенияПоРабочимМестам(Авансом);
	
	Число15Точность2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Число5Точность5 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 5));
	Удержания.Колонки.Добавить("КоэффициентУдержания", Число5Точность5);
	Удержания.Колонки.Добавить("ВычетПрименяемыйПриУдержании", Число15Точность2);
	
	Возврат Удержания;
КонецФункции

#Область ФормированиеПечатныхФорм

Функция РасчетныйЛистокПоДаннымДокумента(Организация, ФизическиеЛица, Месяц, ИсключаемыеСсылки = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	ДокументРезультат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
		
		Если ИсключаемыеСсылки <> Неопределено Тогда
			ПараметрИсключаемыеСсылки = ОтчетРасчетныйЛисток.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИсключаемыеСсылки");
			ПараметрИсключаемыеСсылки.Значение = ИсключаемыеСсылки;
		КонецЕсли;
		
		Если ДанныеДокумента <> Неопределено Тогда
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеДокумента", ДанныеДокумента);
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредварительныйПросмотр", Ложь);
		КонецЕсли;
		
		ДокументРезультат = Отчеты.АнализНачисленийИУдержаний.РасчетныйЛисток(
			ФизическиеЛица, Организация, Месяц, ОтчетРасчетныйЛисток);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДокументРезультат = Неопределено Тогда
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.АвтоМасштаб = Истина;
		ДокументРезультат.ОтображатьЗаголовки = Ложь;
		ДокументРезультат.ОтображатьСетку = Ложь;
		
	КонецЕсли; 
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
