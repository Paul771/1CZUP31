
#Область СлужебныеПроцедурыИФункции

Процедура СозданиеПользователейФизическихЛиц() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеПользователейФизическихЛиц);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСозданиеПользователейРегламентнымЗаданием") Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыСозданияПользователейФизическихЛиц.ВидАдресаЭлектроннойПочты КАК ВидАдресаЭлектроннойПочты,
		|	ПараметрыСозданияПользователейФизическихЛиц.ВключатьВебСсылкуВУведомление КАК ВключатьВебСсылкуВУведомление,
		|	ПараметрыСозданияПользователейФизическихЛиц.ЗаголовокУведомления КАК ЗаголовокУведомления,
		|	ПараметрыСозданияПользователейФизическихЛиц.РассылатьУведомленияАвтоматически КАК РассылатьУведомленияАвтоматически,
		|	ПараметрыСозданияПользователейФизическихЛиц.ШаблонУведомления КАК ШаблонУведомления,
		|	ПараметрыСозданияПользователейФизическихЛиц.ГруппаПользователей КАК ГруппаПользователей,
		|	ИСТИНА КАК АутентификацияСтандартная,
		|	ПараметрыСозданияПользователейФизическихЛиц.ЗапрещеноИзменятьПароль КАК ЗапрещеноИзменятьПароль,
		|	ПараметрыСозданияПользователейФизическихЛиц.ПоказыватьВСпискеВыбора КАК ПоказыватьВСпискеВыбора
		|ИЗ
		|	РегистрСведений.ПараметрыСозданияПользователейФизическихЛиц КАК ПараметрыСозданияПользователейФизическихЛиц";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		Возврат;
	КонецЕсли;
	
	НастройкиПользователей = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекСозданияПользователей();
	ЗаполнитьЗначенияСвойств(НастройкиПользователей, Выборка);
	
	НастройкиСообщений = СамообслуживаниеСотрудниковКлиентСервер.ОписаниеНастроекОтправкиУведомлений();
	ЗаполнитьЗначенияСвойств(НастройкиСообщений, Выборка);
	
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "ФизическоеЛицо", Истина);
	ПользователиФизическихЛиц = СамообслуживаниеСотрудников.ПользователиФизическихЛиц(СписокФизическихЛиц);
	
	ВидКонтактнойИнформации = ?(ЗначениеЗаполнено(Выборка.ВидАдресаЭлектроннойПочты), Выборка.ВидАдресаЭлектроннойПочты, Неопределено);
	ЭлектронныеАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СписокФизическихЛиц, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКонтактнойИнформации);
	
	СозданныеПользователи = Новый Массив;
	
	Для Каждого СтрокаСотрудника Из СотрудникиОрганизации Цикл 
		Если ПользователиФизическихЛиц[СтрокаСотрудника.ФизическоеЛицо] <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныеСотрудника = Новый Структура("ФизическоеЛицо, Фамилия, Имя, Отчество, АдресЭлектроннойПочты");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, СтрокаСотрудника);
		
		ДанныеЭлектронногоАдреса = ЭлектронныеАдреса.Найти(ДанныеСотрудника.ФизическоеЛицо, "Объект");
		Если ДанныеЭлектронногоАдреса <> Неопределено Тогда 
			ДанныеСотрудника.АдресЭлектроннойПочты = ДанныеЭлектронногоАдреса.Представление;
		КонецЕсли;
		
		Пользователь = СамообслуживаниеСотрудников.НовыйПользователь(ДанныеСотрудника, НастройкиПользователей, НастройкиСообщений);
		ПользователиФизическихЛиц.Вставить(СтрокаСотрудника.ФизическоеЛицо, Пользователь);
		СозданныеПользователи.Добавить(Пользователь);
	КонецЦикла;	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыСозданияПользователейФизическихЛицГруппыДоступа.ГруппаДоступа КАК ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ПараметрыСозданияПользователейФизическихЛицГруппыДоступа КАК ПараметрыСозданияПользователейФизическихЛицГруппыДоступа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ГруппаДоступаОбъект = Выборка.ГруппаДоступа.ПолучитьОбъект();
		Для Каждого СозданныйПользователь Из СозданныеПользователи Цикл 
			ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = СозданныйПользователь;
		КонецЦикла;
		ГруппаДоступаОбъект.Записать();
	КонецЦикла;	

КонецПроцедуры

Процедура ЗапретНаВходВПрограммуУволеннымРаботникам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗапретНаВходВПрограммуУволеннымРаботникам);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРегламентноеЗаданиеДляЗапретаВходаВПрограммуУволеннымСотрудникам") Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = '00010101';
	ПараметрыПолученияСотрудников.ОкончаниеПериода = '00010101';
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, ДатаУвольнения";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	РаботающиеФизическиеЛица = Новый Соответствие;
	Для Каждого СтрокаСотрудника Из СотрудникиОрганизации Цикл 
		Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаУвольнения) Тогда 
			РаботающиеФизическиеЛица.Вставить(СтрокаСотрудника.ФизическоеЛицо, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсключаемыеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ПараметрыЗапретаДоступаУволеннымСотрудникамИсключаемыеФизическиеЛица КАК ИсключаемыеФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		РаботающиеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	УволенныеФизическиеЛица = Новый Соответствие;
	СписокФизическихЛиц = Новый Массив;
	Для Каждого СтрокаСотрудника Из СотрудникиОрганизации Цикл 
		Если РаботающиеФизическиеЛица[СтрокаСотрудника.ФизическоеЛицо] = Неопределено Тогда
			Если УволенныеФизическиеЛица[СтрокаСотрудника.ФизическоеЛицо] = Неопределено Тогда 
				УволенныеФизическиеЛица.Вставить(СтрокаСотрудника.ФизическоеЛицо, Истина);
				СписокФизическихЛиц.Добавить(СтрокаСотрудника.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПользователиФизическихЛиц = СамообслуживаниеСотрудников.ПользователиФизическихЛиц(СписокФизическихЛиц);
	Для Каждого КлючИЗначение Из ПользователиФизическихЛиц Цикл 
		ОписаниеПользователя = КлючИЗначение.Значение;
		Если Не ОписаниеПользователя.Недействителен Тогда 
			СамообслуживаниеСотрудников.УстановитьАутентификациюПользователя(ОписаниеПользователя.Пользователь, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеМоегоОбученияРазвития(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьЭлектронноеОбучение = Источник.Значение;
	ИспользоватьПубликацииМероприятийОбученияРазвития = ПолучитьФункциональнуюОпцию("ИспользоватьПубликацииМероприятийОбученияРазвития");
	
	СамообслуживаниеСотрудников.УстановитьИспользованиеМоегоОбученияРазвития(ИспользоватьЭлектронноеОбучение, ИспользоватьПубликацииМероприятийОбученияРазвития);
	
КонецПроцедуры

#КонецОбласти

