
#Область СлужебныйПрограммныйИнтерфейс

// Получает информацию о виде расчета.
Функция ПолучитьИнформациюОВидеРасчета(ВидРасчета) Экспорт
	
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчета));
	
	ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];
	
	Если ВидРасчетаИнфо = Неопределено Тогда 
		ЭтоНачисление = ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления");
		ЗапрашиваемыеДанныеСтрока = ?(ЭтоНачисление, 
			ЗарплатаКадрыРасширенный.ЗапрашиваемыеДанныеНачисления(), 
			ЗарплатаКадрыРасширенный.ЗапрашиваемыеДанныеУдержания());
		ВидРасчетаИнфо = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		ВидРасчетаИнфо.Вставить("ЭтоНачисление", ЭтоНачисление);
		Если ЭтоНачисление Тогда 
			ВидРасчетаИнфо.Вставить("КодВычетаНДФЛ", Справочники.ВидыДоходовНДФЛ.ПустаяСсылка());
		КонецЕсли;
		ВидРасчетаИнфо.Вставить("Показатели", Новый Массив);
	КонецЕсли;
	
	Возврат ВидРасчетаИнфо;
	
КонецФункции

// Получает информацию об одном показателе расчета зарплаты
// с использованием метода 
// ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты.
//
// Параметры:
//	- Показатель - показатель расчета зарплаты.
//
Функция СведенияОПоказателеРасчетаЗарплаты(Показатель) Экспорт
	
	Если Не ЗначениеЗаполнено(Показатель) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Показатель))[Показатель];
	
КонецФункции

Функция ПолучитьМаксимальноеКоличествоЗапрашиваемыхПоказателей(ИмяПВР = "Начисления") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА Начисления.Рассчитывается
	|					ТОГДА Начисления.КоличествоПостоянныхПоказателей
	|				ИНАЧЕ 1
	|			КОНЕЦ), 0) КАК КоличествоПостоянныхПоказателей
	|ИЗ
	|	#ПланВидовРасчета КАК Начисления");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланВидовРасчета", "ПланВидовРасчета." + ИмяПВР);
	
	Если ИмяПВР = "Начисления" Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
			|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорияНачислений)";
			
		МассивКатегорийНачислений = КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений();
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьМассивИспользуемыхКатегорийНачислений(МассивКатегорийНачислений);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КатегорияНачислений", МассивКатегорийНачислений);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоПостоянныхПоказателей;
	
КонецФункции

Функция МаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР = "Начисления", ДокументСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ИмяПВР = "Пособия" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособияПоУходуЗаРебенком)
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) <> 0";
		Запрос.УстановитьПараметр("КатегорииПособияПоУходуЗаРебенком", ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
		|ИЗ
		|	#ПланВидовРасчета КАК ВидыРасчета
		|ГДЕ
		|	ИСТИНА
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыРасчета.КоличествоОтображаемыхПоказателей) <> 0";		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланВидовРасчета", "ПланВидовРасчета." + ИмяПВР);
		
		Если ИмяПВР = "Начисления" Тогда
			ОбщиеДокументы = Новый Массив;
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца"));
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.Увольнение"));
			Если ОбщиеДокументы.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "ВидыРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоОтображаемыхПоказателей;
	
КонецФункции

Функция МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР = "Начисления", ДокументСсылка = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Если ИмяПВР = "Пособия" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыРасчета.КоличествоПоказателейИспользуемыхПриРасчете) КАК КоличествоПоказателейИспользуемыхПриРасчете
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ВидыРасчета
		|ГДЕ
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособияПоУходуЗаРебенком)
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыРасчета.КоличествоПоказателейИспользуемыхПриРасчете) <> 0";
		Запрос.УстановитьПараметр("КатегорииПособияПоУходуЗаРебенком", ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВидыРасчета.КоличествоПоказателейИспользуемыхПриРасчете) КАК КоличествоПоказателейИспользуемыхПриРасчете
		|ИЗ
		|	#ПланВидовРасчета КАК ВидыРасчета
		|ГДЕ
		|	ИСТИНА
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВидыРасчета.КоличествоПоказателейИспользуемыхПриРасчете) <> 0";		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПланВидовРасчета", "ПланВидовРасчета." + ИмяПВР);
		
		Если ИмяПВР = "Начисления" Тогда
			ОбщиеДокументы = Новый Массив;
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца"));
			ОбщиеДокументы.Добавить(Тип("ДокументСсылка.Увольнение"));
			Если ОбщиеДокументы.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "ВидыРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоПоказателейИспользуемыхПриРасчете;
	
КонецФункции	

// Возвращает имена предопределенных показателей, описанных в конфигураторе.
//
Функция ИменаПредопределенныхПоказателей() Экспорт 
	
	Возврат Новый Массив(Метаданные.Справочники.ПоказателиРасчетаЗарплаты.ПолучитьИменаПредопределенных());
	
КонецФункции

// Находит элемент справочника «Показатели расчета зарплаты» по значению реквизита Идентификатор.
//
// Параметры:
//	- Идентификатор - строка с указанием идентификатора показателя.
//	- УчитыватьРегистр - булево, по умолчанию Ложь, если Истина, то соответствие будет регистрозависимым.
//
// Возвращаемое значение - ссылка на показатель или Неопределено, если показатель не найден.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	(ПоказателиРасчетаЗарплаты.Идентификатор = &Идентификатор
	|			ИЛИ ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &ИдентификаторСлужебный)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ИдентификаторСлужебный", ВРег(Идентификатор));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает идентификатор показателя.
//
// Параметры:
//	- Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты.
//	
// Возвращаемое значение - строка с значением реквизита Идентификатор.
//
Функция ИдентификаторПоказателя(Показатель) Экспорт
	
	Если Не ЗначениеЗаполнено(Показатель) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Показатель, "Идентификатор");
	
КонецФункции

// Метод описывает такие показатели, значения которых могут быть выявлены не на этапе заполнения значений, а на этапе
// расчета.
//
Функция ПоказателиПереопределяемогоРасчета() Экспорт
	
	Показатели = Новый Массив;
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания"));
	Показатели.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих"));
	
	Возврат Показатели;
	
КонецФункции

// См. комментарий к методу
// РасчетЗарплатыРасширенный.РайонныйКоэффициентРФ
//
Функция РайонныйКоэффициентРФ(Подразделение) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат 1;
	КонецЕсли;
	
	РайонныйКоэффициентРФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "РайонныйКоэффициентРФ");
	
	Если РайонныйКоэффициентРФ = Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат Макс(РайонныйКоэффициентРФ, 1);
	
КонецФункции

// Функция считывает значения процента доплаты за работу в ночное и вечернее время, 
// установленные для организации.
//
// Параметры:
//	Организация
//
// Возвращаемое значение - структура, аналогичная по конструкции менеджеру записи 
//		регистра сведений ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя.
//
Функция ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(Организация) Экспорт
	
	ПроцентДоплатыНочныеВечерние = РегистрыСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя.СоздатьМенеджерЗаписи();
	ПроцентДоплатыНочныеВечерние.Организация = Организация;
	ПроцентДоплатыНочныеВечерние.Прочитать();

	Если Не ПроцентДоплатыНочныеВечерние.Выбран() Тогда
		// Значения по умолчанию
		ПроцентДоплатыНочныеВечерние.ПроцентДоплатыЗаРаботуВНочноеВремя = 20;
		ПроцентДоплатыНочныеВечерние.ПроцентДоплатыЗаРаботуВВечернееВремя = 10;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
		ПроцентДоплатыНочныеВечерние, Метаданные.РегистрыСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя);
	
КонецФункции

// Определяет необходимость дополнительных действий по обслуживанию распределения по территориям и условиям труда.
//
Функция ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Знач Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории") Или ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда");
	КонецЕсли;
	
	Параметры = Новый Структура("Организация");
	Параметры.Организация = Организация;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Параметры) 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда", Параметры)  Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоказателиПоТерриториямУсловиямТруда() Экспорт
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("РайонныйКоэффициент");
	ИменаПоказателей.Добавить("ПроцентНадбавкиЗаВредность");
	
	Показатели = Новый Массив;
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПоказателя);
		Если ЗначениеЗаполнено(Показатель) Тогда
			Показатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

Функция КоличествоОтображаемыхПоказателей(РежимРаботы, ИмяПВР = "Начисления", ДокументСсылка = Неопределено) Экспорт

	Если ПустаяСтрока(ИмяПВР) Тогда
		Возврат 0;
	Иначе
		Если РежимРаботы = 2 Тогда
			Возврат МаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР, ДокументСсылка);
		Иначе
			Возврат ПолучитьМаксимальноеКоличествоЗапрашиваемыхПоказателей(ИмяПВР);
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция КоличествоПоказателейРасчета(РежимРаботы, ИмяПВР = "Начисления", ДокументСсылка = Неопределено) Экспорт

	Если ПустаяСтрока(ИмяПВР) Тогда
		Возврат 0;
	Иначе
		Если РежимРаботы = 2 Тогда
			Возврат МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР, ДокументСсылка);
		Иначе
			Возврат ПолучитьМаксимальноеКоличествоЗапрашиваемыхПоказателей(ИмяПВР)
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает значение настройки "ОплачиватьДлительныеКомандировкиПомесячно" расчета зарплаты.
// 
// Возвращаемое значение:
// 		Булево
//		 Истина - если ОплачиватьДлительныеКомандировкиПомесячно, Ложь - в противном случае.
//
Функция ОплачиватьДлительныеКомандировкиПомесячно() Экспорт
	
	ПризнакДлительнойКомандировкиПоУмолчанию = Ложь;
	НастройкиЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	НастройкиЗарплаты.Свойство("ОплачиватьДлительныеКомандировкиПомесячно", ПризнакДлительнойКомандировкиПоУмолчанию);
	
	Возврат ПризнакДлительнойКомандировкиПоУмолчанию;
	
КонецФункции

// Возвращает массив прочих доходов, входящих в расчетную базу удержаний 
//
Функция НезарплатныеВидыДоходовДополненияРасчетнойБазыУдержаний() Экспорт
	
	Возврат ЗарплатаКадрыРасширенный.НезарплатныеВидыДоходовДополненияРасчетнойБазыУдержаний();
	
КонецФункции

#Область СлужебныйПроцедурыИФункции

// Устарела. Оставлена для сохранения совместимости. 
// Следует использовать МаксимальноеКоличествоОтображаемыхПоказателей.
//
Функция ПолучитьМаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР = "Начисления") Экспорт
	
	Возврат МаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР);
	
КонецФункции

// Устарела. Оставлена для сохранения совместимости. 
// Следует использовать МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете.
//
Функция ПолучитьМаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР = "Начисления") Экспорт

	Возврат МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(ИмяПВР);
	
КонецФункции	

Функция ДанныеТарифныхСеток(ТарифнаяСетка, РазрядКатегория, ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, СчитатьПоказателиПоДолжности, ПКУ) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйВызовСервера.ДанныеТарифныхСеток(ТарифнаяСетка, РазрядКатегория, ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, СчитатьПоказателиПоДолжности, ПКУ);
	
КонецФункции

Функция ОписаниеСпособаОкругления(Знач СпособОкругления) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйВызовСервера.ОписаниеСпособаОкругления(СпособОкругления);
	
КонецФункции

// Заполняет соответствие видов документа и начислений, которые регистрируются этим видом документа.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - соответствие, ключ ПеречислениеСсылка.ВидыДокументовНачисления, значение - массив ссылок ПланВидовРасчетаСсылка.Начисление.
//
Функция ВидыДокументовНачислений() Экспорт
	Возврат ПланыВидовРасчета.Начисления.ВидыДокументовНачислений();
КонецФункции

#КонецОбласти

#КонецОбласти
