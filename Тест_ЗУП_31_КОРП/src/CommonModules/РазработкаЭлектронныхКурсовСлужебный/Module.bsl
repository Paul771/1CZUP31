#Область СлужебныеПроцедурыИФункции

#Область  ЗагрузкаФайловВБазу

// Помещает в базу файлы, документы, презентации и т.п.
//
// Параметры:
//   СвойстваФайла - Структура - См. РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла 
//   СвойстваВладельца - Структура - См. РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствВладельцаЗагружаемыхФайлов
//
Процедура ПоместитьФайлВБазу(Знач СвойстваФайла, Знач СвойстваВладельца) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СвойстваВладельца.НаборФайлов) Тогда
			
			// Находим группу файлов, в которую помещаются все файлы в форме
			
			Если ТипЗнч(СвойстваВладельца.Родитель) = Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсов") Тогда
				ГруппаФайлов = СвойстваВладельца.Родитель;
			КонецЕсли;			
						
			// Определяем стартовый файл
			
			СтартовыйФайл = Неопределено;	
			
			Если СвойстваВладельца.ИмяВладельцаФайлов <> "НаборФайлов" Тогда
			
				Если СвойстваФайла.Преобразовать И СвойстваФайла.КонтекстФайла = "Document" Тогда
					СтартовыйФайл = Новый Структура("Имя, Наименование", СвойстваФайла.Имя + СвойстваФайла.Расширение, СвойстваФайла.Имя);
				КонецЕсли;
				
				Если СтартовыйФайл = Неопределено И СвойстваФайла.ЭтоКаталог И СвойстваФайла.СтруктураФайлов.Количество() = 1 Тогда
					
					ИмяСтартовогоФайла = "";
					КоличествоФайловHTML = 0;
					
					Для каждого Строка Из СвойстваФайла.СтруктураФайлов[0].ПодчиненныеФайлы Цикл
					
						Если НРег(Строка.Расширение) = ".html" ИЛИ НРег(Строка.Расширение) = ".htm"	Тогда
							КоличествоФайловHTML = КоличествоФайловHTML + 1;
							ИмяСтартовогоФайла = Строка.Имя;
						КонецЕсли;
					
					КонецЦикла;
					
					Если КоличествоФайловHTML = 1 И ЗначениеЗаполнено(ИмяСтартовогоФайла) Тогда
						СтартовыйФайл = Новый Структура("Имя, Наименование", ИмяСтартовогоФайла, СвойстваФайла.Имя);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
			// Помещаем файлы в ресурс
			
			ПоместитьФайлыВРесурс(СвойстваВладельца.НаборФайлов, ГруппаФайлов, СвойстваФайла.СтруктураФайлов, СвойстваФайла.СписокФайлов, СтартовыйФайл, СвойстваВладельца.ЗависимыеРесурсы, СвойстваВладельца.ЗависимыеРесурсыДополняющиеAPI, СвойстваФайла.НастройкиКартинок, СвойстваФайла.ДанныеВидео, СвойстваФайла.ТекстовыеДанныеДляИндексирования, СвойстваВладельца.ОбновлятьДатуРесурса);			
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;

	КонецПопытки;
	
КонецПроцедуры

Процедура ПоместитьФайлыВРесурс(Знач НаборФайлов, Знач Родитель, СтруктураФайлов, ОписанияФайлов, ФайлЗапуска = Неопределено, ЗависимыеРесурсы = Неопределено, ЗависимыеРесурсыДополняющиеAPI = Неопределено, НастройкиКартинок = Неопределено, ДанныеВидео = Неопределено, ТекстовыеДанныеДляИндексирования = "", ОбновлятьДатуРесурса = Неопределено)

	// Выбираем все ранее помещенные файлы
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыЭлектронныхРесурсов.Ссылка КАК Ссылка,
		|	ЭлементыЭлектронныхРесурсов.Родитель КАК Родитель,
		|	ЭлементыЭлектронныхРесурсов.ЭтоГруппа КАК ЭтоГруппа,
		|	ЭлементыЭлектронныхРесурсов.Наименование КАК Наименование,
		|	ЭлементыЭлектронныхРесурсов.Тип КАК Тип,
		|	ЭлементыЭлектронныхРесурсов.ИмяФайла КАК ИмяФайла,
		|	ЭлементыЭлектронныхРесурсов.ДатаИзменения КАК ДатаИзменения
		|ИЗ
		|	Справочник.ЭлементыЭлектронныхРесурсов КАК ЭлементыЭлектронныхРесурсов
		|ГДЕ
		|	ЭлементыЭлектронныхРесурсов.Владелец = &НаборФайлов";

	Запрос.Параметры.Вставить("НаборФайлов", НаборФайлов);
		
	Результат = Запрос.Выполнить();

	ВыборкаФайловВБазе = Результат.Выбрать();
		
	// Ищем родителя 
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		// Если родитель задан не группой, то в
		// качестве родителя считаем родителя этого элемента.
	
		СтруктураПоиска = Новый Структура("Ссылка", Родитель);
		
		ВыборкаФайловВБазе.Сбросить();
		Если ВыборкаФайловВБазе.НайтиСледующий(СтруктураПоиска) Тогда
			
			Если НЕ ВыборкаФайловВБазе.ЭтоГруппа Тогда
				Родитель = ВыборкаФайловВБазе.Родитель;
			КонецЕсли;
			
		Иначе
			
			Родитель = Справочники.ЭлементыЭлектронныхРесурсов.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		Родитель = Справочники.ЭлементыЭлектронныхРесурсов.ПустаяСсылка();
		
	КонецЕсли;	
	
	// Записываем файлы в базу данных
	
	МассивЗаписанныхФайлов = Новый Массив;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		МассивЗаписанныхФайлов.Добавить(Родитель);
	КонецЕсли;
	
	ЗаписатьФайлыРесурса(НаборФайлов, Родитель, СтруктураФайлов, ОписанияФайлов, ВыборкаФайловВБазе, НастройкиКартинок, ДанныеВидео, МассивЗаписанныхФайлов, ТекстовыеДанныеДляИндексирования, ОбновлятьДатуРесурса);
	
	// Помечаем на удаление файлы, которые не были записаны
	
	ВыборкаФайловВБазе.Сбросить();
	
	Пока ВыборкаФайловВБазе.Следующий() Цикл
		
		Если МассивЗаписанныхФайлов.Найти(ВыборкаФайловВБазе.Ссылка) = Неопределено Тогда
			
			ФайлОбъект = ВыборкаФайловВБазе.Ссылка.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Указываем стартовый файл

	Если ФайлЗапуска <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ФайлЗапуска.Имя) Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлементыЭлектронныхРесурсов.Ссылка
				|ИЗ
				|	Справочник.ЭлементыЭлектронныхРесурсов КАК ЭлементыЭлектронныхРесурсов
				|ГДЕ
				|	ЭлементыЭлектронныхРесурсов.ПометкаУдаления = ЛОЖЬ
				|	И ЭлементыЭлектронныхРесурсов.Владелец = &НаборФайлов
				|	И ЭлементыЭлектронныхРесурсов.ЭтоГруппа = ЛОЖЬ
				|	И ЭлементыЭлектронныхРесурсов.ИмяФайла = &ИмяФайлаЗапуска";

			Запрос.УстановитьПараметр("ИмяФайлаЗапуска", ФайлЗапуска.Имя);
			Запрос.УстановитьПараметр("НаборФайлов", НаборФайлов);

			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
				
				ВыборкаДетальныеЗаписи.Следующий();
				
				// Указываем файл запуска
				
				НаборФайловОбъект = НаборФайлов.ПолучитьОбъект();
				
				НаборФайловОбъект.ЭлементЗапуска   = ВыборкаДетальныеЗаписи.Ссылка;
				НаборФайловОбъект.ПодключитьAPI = Истина;
				
				НаборФайловОбъект.Записать();
				
				// Обновляем наименование файла запуска
				
				ФайлОбъект = ВыборкаДетальныеЗаписи.Ссылка.получитьОбъект(); 
				ФайлОбъект.Наименование = ФайлЗапуска.Наименование;
				ФайлОбъект.Записать();
				
			КонецЕсли;
			
		Иначе
			
			НаборФайловОбъект = НаборФайлов.ПолучитьОбъект();
			
			НаборФайловОбъект.ЭлементЗапуска   = Справочники.ЭлементыЭлектронныхРесурсов.ПустаяСсылка();
			НаборФайловОбъект.ПодключитьAPI = Ложь;

			НаборФайловОбъект.Записать();
			
		КонецЕсли;
			
	КонецЕсли;	
	
	// Записываем набор файлов
	
	НаборФайловОбъект = НаборФайлов.ПолучитьОбъект();
	НаборФайловОбъект.Записать(); // Обновляем дату изменения, чтобы обновить кэш файлов	
	
КонецПроцедуры

Процедура ЗаписатьФайлыРесурса(НаборФайлов, Знач Родитель, СтруктураФайлов, ОписанияФайлов, ВыборкаФайловВБазе, НастройкиКартинок, ДанныеВидео, МассивЗаписанныхФайлов, ТекстовыеДанныеДляИндексирования, ОбновлятьДатуРесурса)

	ЭтоSCO = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборФайлов, "SCO");
	
	Для каждого Файл Из СтруктураФайлов Цикл
		
		Если Файл.ЭтоКаталог Тогда
			
			// Ищем каталог в базе
			
			СтруктураПоиска = Новый Структура("ИмяФайла, Родитель, ЭтоГруппа", Файл.Имя, Родитель, Истина);
			
			ВыборкаФайловВБазе.Сбросить();
			Если ВыборкаФайловВБазе.НайтиСледующий(СтруктураПоиска) Тогда				
				ГруппаЭлементовОбъект = ВыборкаФайловВБазе.Ссылка.ПолучитьОбъект();
			Иначе				
				ГруппаЭлементовОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьГруппу();				
			КонецЕсли;
			
			// Заполняем реквизиты каталога 
			ГруппаЭлементовОбъект.Владелец     = НаборФайлов;
			ГруппаЭлементовОбъект.ИмяФайла     = Файл.Имя;
			ГруппаЭлементовОбъект.Наименование = Файл.Имя;
			
			ГруппаЭлементовОбъект.Родитель = Родитель;
			
			РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ГруппаЭлементовОбъект);
			
			ГруппаЭлементовОбъект.Записать();
			
			Если ГруппаЭлементовОбъект.ПометкаУдаления Тогда
				ГруппаЭлементовОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;			
			
			МассивЗаписанныхФайлов.Добавить(ГруппаЭлементовОбъект.Ссылка);
			
			ЗаписатьФайлыРесурса(НаборФайлов, ГруппаЭлементовОбъект.Ссылка, Файл.ПодчиненныеФайлы, ОписанияФайлов, ВыборкаФайловВБазе, НастройкиКартинок, ДанныеВидео, МассивЗаписанныхФайлов, ТекстовыеДанныеДляИндексирования, ОбновлятьДатуРесурса); // Рекурсия
			
		Иначе
			
			// Ищем файл в базе
			
			СтруктураПоиска = Новый Структура("ИмяФайла, Родитель, ЭтоГруппа", Файл.Имя, Родитель, Ложь);
			
			ВыборкаФайловВБазе.Сбросить();
			
			Если ВыборкаФайловВБазе.НайтиСледующий(СтруктураПоиска) Тогда
				
				ЭлементОбъект = ВыборкаФайловВБазе.Ссылка.ПолучитьОбъект();
				
			Иначе
				
				ЭлементОбъект = Справочники.ЭлементыЭлектронныхРесурсов.СоздатьЭлемент();
				
				Если ЭтоSCO Тогда
					
					ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.File;
					
				Иначе
					
					Если Файл.Контекст = "Document" Тогда
						ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Document;	
					ИначеЕсли Файл.Контекст = "Presentation" Тогда
						ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Presentation;
					Иначе
						ЭлементОбъект.Тип = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ТипЭлементаРесурсаПоРасширению(Файл.Расширение);
					КонецЕсли;				
					
				КонецЕсли;
					
				Если ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.File
					И НЕ РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ЭтоФайлHTML(Файл.Расширение) Тогда
					
					ЭлементОбъект.ОткрыватьВнешнимПриложением = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполняем реквизиты файла
			
			ЭлементОбъект.Родитель      = Родитель;
			ЭлементОбъект.Владелец      = НаборФайлов;
			ЭлементОбъект.ИмяФайла      = Файл.Имя;
			ЭлементОбъект.Наименование  = Файл.ИмяБезРасширения;
			
			Если ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Media Тогда
				ЭлементОбъект.Ширина      = "100%";
				ЭлементОбъект.Высота      = "100%";
				ЭлементОбъект.FlashВерсия = 9;
			КонецЕсли;

			Если ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Video Тогда
				
				Если ДанныеВидео <> Неопределено
					И ДанныеВидео.Свойство("Размер")
					И НЕ ЗначениеЗаполнено(ЭлементОбъект.Ширина)
					И НЕ ЗначениеЗаполнено(ЭлементОбъект.Высота) Тогда
					
					ЭлементОбъект.Ширина = ДанныеВидео.Размер.Ширина;
					ЭлементОбъект.Высота = ДанныеВидео.Размер.Высота;					
						
				КонецЕсли;				
				
				ЭлементОбъект.Выравнивать = Перечисления.СпособыВыравниванияЭлементовЭлектронногоКурса.center;
				
			КонецЕсли;			
					
			РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлементОбъект);
			
			Если ОбновлятьДатуРесурса = Ложь Тогда // Явное сравнение
				ЭлементОбъект.ДополнительныеСвойства.Вставить("ОбновлятьВладельца", Ложь);
				ЭлементОбъект.ДополнительныеСвойства.Вставить("ОтменитьКонтрольЗаписиОбъекта", Истина); // Контроль был для ресурса				
			КонецЕсли;
			
			ЭлементОбъект.Записать();
			
			Если ЭлементОбъект.ПометкаУдаления Тогда
				ЭлементОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;			
			
			МассивЗаписанныхФайлов.Добавить(ЭлементОбъект.Ссылка);
			
			// Сохраняем данные файла
			
			Если Файл.Контекст = "Document" Тогда
				ТекстОписания = НастройкиКартинокДокументаWordВXML(НастройкиКартинок);
				ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ТекстОписания, "Описание"); 
			КонецЕсли;
			
			Если Файл.Контекст = "Presentation" Тогда
				ТекстОписания = НастройкиКартинокСлайдовПрезентацииВJSON(НастройкиКартинок);
				ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ТекстОписания, "Описание"); 	
			КонецЕсли;			
			
			Если Файл.Контекст = "Document" ИЛИ Файл.Контекст = "Presentation" Тогда
				
				Для каждого ОписаниеФайла Из ОписанияФайлов Цикл
				
					ПереданныйФайл = Новый Файл(ОписаниеФайла.Имя);
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
					
					Если ПереданныйФайл.Расширение = ".zip" Тогда			
						
						Если Файл.Контекст = "Document" Тогда							
							КодДанных = "HTML";
						КонецЕсли;
						Если Файл.Контекст = "Presentation" Тогда
							КодДанных = "IMAGES";
						КонецЕсли;						
						ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДвоичныеДанныеФайла, КодДанных, "zip"); 
						
					Иначе			
						
						ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДвоичныеДанныеФайла, "ДвоичныеДанные",,ТекстовыеДанныеДляИндексирования); 
						
					КонецЕсли;
				
				КонецЦикла;					
				
			Иначе				
			
				ДвоичныеДанныеФайла = ДвоичныеДанныеФайлаИзМассива(Файл.ПолноеИмя, ОписанияФайлов);
				
				ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДвоичныеДанныеФайла, "ДвоичныеДанные", Файл.Расширение, ТекстовыеДанныеДляИндексирования);
				
			КонецЕсли;
				
			Если ДанныеВидео <> Неопределено
				И ЭлементОбъект.Тип = Перечисления.ТипыЭлементовЭлектронныхРесурсов.Video
				И ДанныеВидео.Свойство("Миниатюра")
				И ЭтоАдресВременногоХранилища(ДанныеВидео.Миниатюра) Тогда
				
				ДвоичныеДанныеМиниатюры = ПолучитьИзВременногоХранилища(ДанныеВидео.Миниатюра);					
				ЭлементОбъект.ЗаполнитьДанныеЭлементаПриЗаписи(ДвоичныеДанныеМиниатюры, "Миниатюра", "jpg"); 					
					
			КонецЕсли;
			
			ЭлементОбъект.Записать();	
	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиКартинокДокументаWordВXML(НастройкиКартинок)
	
	ТекстОписания = "";
	
	Если НастройкиКартинок <> Неопределено И НастройкиКартинок.Свойство("СерииКартинок") И НастройкиКартинок.СерииКартинок.Количество() > 0 Тогда
					
		ТекстОписания = ТекстОписания + "{{IMAGES>" + Символы.ПС;

		КартинкиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/kms/1/ImportFilesSettings", "Картинки"));
		
		КартинкиXDTO.ВариантЗагрузкиКартинок = НастройкиКартинок.ВариантЗагрузкиКартинок;
		
		СерияКартинокXDTOТип = ФабрикаXDTO.Тип("http://v8.1c.ru/kms/1/ImportFilesSettings", "СерияКартинок");
		КартинкаXDTOТип      = ФабрикаXDTO.Тип("http://v8.1c.ru/kms/1/ImportFilesSettings", "Картинка");
		
		Для каждого Строка Из НастройкиКартинок.СерииКартинок Цикл
		
			СерияКартинокXDTO = ФабрикаXDTO.Создать(СерияКартинокXDTOТип);	
			
			СерияКартинокXDTO.Имя = Строка.Имя;
			
			Для каждого СвойстваКартинки Из Строка.Картинки Цикл
				
				РазмерКартинкиМассив = ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(СвойстваКартинки.РазмерКартинки, "x");
				
				Если РазмерКартинкиМассив.Количество() <> 2 Тогда
					Продолжить;
				КонецЕсли;
					
				КартинкаXDTO = ФабрикаXDTO.Создать(КартинкаXDTOТип);		
				
				РазмерКартинкиМассив[0] = СокрЛП(РазмерКартинкиМассив[0]);
				РазмерКартинкиМассив[0] = СтрЗаменить(РазмерКартинкиМассив[0], Символ(8234), "");
				РазмерКартинкиМассив[0] = СтрЗаменить(РазмерКартинкиМассив[0], Символ(8236), "");

				РазмерКартинкиМассив[1] = СокрЛП(РазмерКартинкиМассив[1]);
				РазмерКартинкиМассив[1] = СтрЗаменить(РазмерКартинкиМассив[1], Символ(8234), "");
				РазмерКартинкиМассив[1] = СтрЗаменить(РазмерКартинкиМассив[1], Символ(8236), "");				
				
				КартинкаXDTO.Имя    = СвойстваКартинки.Имя;
				КартинкаXDTO.Ширина = Число(РазмерКартинкиМассив[0]);
				КартинкаXDTO.Высота = Число(РазмерКартинкиМассив[1]);
				КартинкаXDTO.Размер = Число(СвойстваКартинки.РазмерФайла);
				
				СерияКартинокXDTO.Картинка.Добавить(КартинкаXDTO);
				
			КонецЦикла;
			
			КартинкиXDTO.СерияКартинок.Добавить(СерияКартинокXDTO);
				
		КонецЦикла;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КартинкиXDTO);
		
		ТекстОписания = ТекстОписания + ЗаписьXML.Закрыть();
		
		ТекстОписания = ТекстОписания + Символы.ПС + "<IMAGES}}";
		
	КонецЕсли;	
	
	Возврат ТекстОписания;
	
КонецФункции

Функция НастройкиКартинокСлайдовПрезентацииВJSON(НастройкиКартинок)
	
	Если НастройкиКартинок = неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, НастройкиКартинок);					
	
	Возврат ЗаписьJSON.Закрыть();	
	
КонецФункции

Функция ДвоичныеДанныеФайлаИзМассива(ПолноеИмя, ОписанияФайлов)
	
	// Ищем описание файла
	
	ОписаниеФайла = Неопределено;
	
	Для каждого ОписаниеФайла Из ОписанияФайлов Цикл
	
		Если ОписаниеФайла.Имя = ПолноеИмя Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ОписаниеФайла = Неопределено Тогда		
		СообщениеОбОшибке = НСтр("ru = 'Описание файла ''%1'' не найдено.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ПолноеИмя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеФайла.Хранение) Тогда
		
		Возврат ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	Иначе
		
		ФайлНаДиске = Новый Файл(ОписаниеФайла.Имя);
		Если ФайлНаДиске.Существует() Тогда
			Возврат Новый ДвоичныеДанные(ОписаниеФайла.Имя);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл ''%1'' не найден.'"), ПолноеИмя);
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецФункции

Функция ШиринаВидеоПоУмолчанию() Экспорт
	
	ШиринаПоУмолчанию = РегистрыСведений.НастройкиЭлектронныхКурсов.Значение("ШиринаВидеоПоУмолчанию");
	
	Возврат ?(ЗначениеЗаполнено(ШиринаПоУмолчанию), ШиринаПоУмолчанию, 640);
	
КонецФункции

#КонецОбласти

#Область YouTube

Функция ПерсональныеНастройкиYouTube() Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	ПерсональныеНастройки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущийПользователь, "youtube");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(ПерсональныеНастройки) = Тип("Структура") Тогда		
		
		НастройкиYouTube = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.НастройкиYouTube();
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/oauth2/v3/tokeninfo");
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,, 10, Новый ЗащищенноеСоединениеOpenSSL()); 
		ПараметрыЗапроса = "?access_token=" + ПерсональныеНастройки.access_token;
		
		HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + ПараметрыЗапроса);
		
		ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос);

		Если ОтветСервера.КодСостояния = 200 Тогда						
			Возврат ПерсональныеНастройки;						
		ИначеЕсли ОтветСервера.КодСостояния = 400 Тогда			
			Возврат ОбновитьПерсональныеНастройкиYouTube(ПерсональныеНастройки);			
		Иначе			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка запроса к удаленному серверу: %1'"), ОтветСервера.КодСостояния);			
		КонецЕсли;	
		
	Иначе		
		
		Возврат Неопределено;		
		
	КонецЕсли;
	
КонецФункции

Функция ОбновитьПерсональныеНастройкиYouTube(СтарыеПерсональныеНастройки) Экспорт

	НастройкиYouTube = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.НастройкиYouTube();
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/oauth2/v4/token");
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,, 10, Новый ЗащищенноеСоединениеOpenSSL()); 

	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	
	ТелоЗапроса = "refresh_token=" + СтарыеПерсональныеНастройки.refresh_token + "&";
	ТелоЗапроса = ТелоЗапроса + "client_id=" + НастройкиYouTube.oauth_client_id + "&";
	ТелоЗапроса = ТелоЗапроса + "client_secret=" + НастройкиYouTube.oauth_client_secret + "&";
	ТелоЗапроса = ТелоЗапроса + "grant_type=refresh_token";	
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);

	Если ОтветСервера.КодСостояния = 200 Тогда			
		
		ОтветСервераСтрока = ОтветСервера.ПолучитьТелоКакСтроку();
		
		Чтение = Новый ЧтениеJSON;
	    Чтение.УстановитьСтроку(ОтветСервераСтрока);
		ОтветСервераСтруктура = ПрочитатьJSON(Чтение, Ложь);
	    Чтение.Закрыть();		
		
		НовыеПерсональныеНастройки = СтарыеПерсональныеНастройки;
		НовыеПерсональныеНастройки.access_token = ОтветСервераСтруктура.access_token;
		НовыеПерсональныеНастройки.expires_in = ОтветСервераСтруктура.expires_in;
		
		СохранитьПерсональныеНастройкиYouTube(НовыеПерсональныеНастройки);
		
		Возврат НовыеПерсональныеНастройки;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

Процедура СохранитьПерсональныеНастройкиYouTube(Знач ПерсональныеНастройки) Экспорт
	
	Если ТипЗнч(ПерсональныеНастройки) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный тип настроек YouTube'")
	КонецЕсли;
	
	Если НЕ ПерсональныеНастройки.Свойство("access_token") Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует обязательной свойство access_token'")
	КонецЕсли;
	
	Если НЕ ПерсональныеНастройки.Свойство("refresh_token") Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует обязательной свойство refresh_token'")
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийПользователь, ПерсональныеНастройки, "youtube");
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

#КонецОбласти

#Область ПубликацияЗагрузкаИВыгрузка

Процедура ОпубликоватьВФоне(Знач Параметры, Знач АдресРезультата = Неопределено) Экспорт

	Если ТипЗнч(Параметры) <> Тип("Структура")
		ИЛИ НЕ Параметры.Свойство("ЭлектронныйКурс")
		ИЛИ НЕ ЗначениеЗаполнено(Параметры.ЭлектронныйКурс) Тогда
		
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить публикацию электронного курса, так как не задан параметр процедуры'");
		
	КонецЕсли;
	
	РегистрыСведений.ПубликацииЭлектронныхКурсов.Опубликовать(Параметры.ЭлектронныйКурс, Ложь);
	
КонецПроцедуры

Функция ВсеСсылкиЭлементаСправочника(Знач СсылкаНаЭлемент, Знач ПроверятьСуществованиеВБазе = Ложь, Знач СчитатьПомеченныеНаУдалениеОтсутствующими = Ложь) Экспорт
	
	ПолныйМассивСсылок = Новый Массив;
	
	// При заполнении массива ссылок элемента не будет включен его родитель и владелец 
	
	ЗаполнитьМассивВсехСсылокЭлементаСправочника(СсылкаНаЭлемент, ПолныйМассивСсылок, Истина, ПроверятьСуществованиеВБазе, СчитатьПомеченныеНаУдалениеОтсутствующими);
	
	// Удаляем из массива сам элемент
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПолныйМассивСсылок, СсылкаНаЭлемент); 
		
	Возврат ПолныйМассивСсылок;
	
КонецФункции

Процедура ЗаполнитьМассивВсехСсылокЭлементаСправочника(Знач СсылкаНаЭлемент, ПолныйМассивСсылок, Знач ИсключитьВладельца = Истина, Знач ПроверятьСуществованиеВБазе = Ложь, Знач СчитатьПомеченныеНаУдалениеОтсутствующими = Ложь)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьВМассивУникальноеЗначение(ПолныйМассивСсылок, СсылкаНаЭлемент, Истина); // Добавляем самого себя
	
	ПолноеИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(СсылкаНаЭлемент);
	
	Если Прав(ПолноеИмяТаблицы, СтрДлина("ПрисоединенныеФайлы")) = "ПрисоединенныеФайлы" Тогда
		Возврат; // Присоединенные файлы не содержат ссылок на другие элементы курса
	КонецЕсли;	
	
	Если Лев(ПолноеИмяТаблицы, СтрДлина("Справочник.")) <> "Справочник." Тогда
		ВызватьИсключение НСтр("ru = 'Курс не может содержать элемент не в справочнике'");
	КонецЕсли;	
	
	ИмяСправочника = Сред(ПолноеИмяТаблицы, СтрДлина("Справочник.")+1);	
	
	ВсеСсылкиСправочника = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ВсеСсылкиСправочника(ИмяСправочника);
	
	СсылкиЭтогоЭлемента = Новый Массив;
	
	// Реквизиты	
	
	Если ВсеСсылкиСправочника.Реквизиты.Количество() > 0 Тогда
	
		ДанныеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, ВсеСсылкиСправочника.Реквизиты);
		
		Для каждого ЗначениеРеквизита Из ДанныеРеквизитов Цикл
			Если ЗначениеРеквизита.Ключ = "Родитель" Тогда				
				Продолжить; // Всегда пропускаем родителя
			КонецЕсли;
			Если ИсключитьВладельца И ЗначениеРеквизита.Ключ = "Владелец" Тогда
				Продолжить; // Пропускаем владельца для первого вызова
			КонецЕсли;			
			ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьВМассивУникальноеЗначение(СсылкиЭтогоЭлемента, ЗначениеРеквизита.Значение, Истина); 
		КонецЦикла;
		
	КонецЕсли;
	
	// Табличные части
	
	Если ВсеСсылкиСправочника.ТабличныеЧасти.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "";
		
		ЭтоПерваяТабличнаяЧасть = Истина;
		
		Для каждого ОписаниеТЧ Из ВсеСсылкиСправочника.ТабличныеЧасти Цикл
			
			Если НЕ ЭтоПерваяТабличнаяЧасть Тогда
				Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			                              |	ТабличнаяЧасть.#ИмяРеквизита КАК ЗначениеРеквизита
			                              |ИЗ
			                              |	&ИмяТаблицы КАК ТабличнаяЧасть
			                              |ГДЕ
			                              |	ТабличнаяЧасть.Ссылка = &Ссылка";
					
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ПолноеИмяТаблицы + "." + ОписаниеТЧ.Имя);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРеквизита", ОписаниеТЧ.Реквизит);			
	
			ЭтоПерваяТабличнаяЧасть = Ложь;
	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлемент);
			
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьВМассивУникальноеЗначение(СсылкиЭтогоЭлемента, ВыборкаДетальныеЗаписи.ЗначениеРеквизита, Истина);
		КонецЦикла;		
		
	КонецЕсли;
	
	// Подчиненные справочники
	
	Если ВсеСсылкиСправочника.ПодчиненныеСправочники.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "";		
		
		ЭтоПервыйПодчиненныйСправочник = Истина;
		
		Для каждого ИмяПодчиненногоСправочника Из ВсеСсылкиСправочника.ПодчиненныеСправочники Цикл
				
			Если НЕ ЭтоПервыйПодчиненныйСправочник Тогда
				Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
			                              |	ПодчиненныйСправочник.Ссылка КАК Ссылка
			                              |ИЗ
			                              |	&ИмяТаблицы КАК ПодчиненныйСправочник
			                              |ГДЕ
			                              |	ПодчиненныйСправочник.Владелец = &Владелец";
					
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", "Справочник." + ИмяПодчиненногоСправочника);
	
			ЭтоПервыйПодчиненныйСправочник = Ложь;

		КонецЦикла;
		
		Запрос.УстановитьПараметр("Владелец", СсылкаНаЭлемент);
			
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьВМассивУникальноеЗначение(СсылкиЭтогоЭлемента, ВыборкаДетальныеЗаписи.Ссылка, Истина);
		КонецЦикла;		
		
	КонецЕсли;		
	
	// Удаляем битые ссылки
	
	Если ПроверятьСуществованиеВБазе Тогда
		
		ЭлементыДляУдаления = Новый Массив;
		
		Для каждого СсылкаНаЭлемент Из СсылкиЭтогоЭлемента Цикл		
			Если НЕ ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(СсылкаНаЭлемент, СчитатьПомеченныеНаУдалениеОтсутствующими) Тогда
				ЭлементыДляУдаления.Добавить(СсылкаНаЭлемент);
			КонецЕсли;		
		КонецЦикла;
		
		Для каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл		
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СсылкиЭтогоЭлемента, ЭлементДляУдаления);		
		КонецЦикла;
		
	КонецЕсли;	
	
	// Добавляем новые ссылки в общий массив
	
	МассивНовыхЭлементов = Новый Массив; // Для рекурсии
	
	Для каждого СсылкаЭтогоЭлемента Из СсылкиЭтогоЭлемента Цикл
		Если ПолныйМассивСсылок.Найти(СсылкаЭтогоЭлемента) = Неопределено Тогда
			МассивНовыхЭлементов.Добавить(СсылкаЭтогоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолныйМассивСсылок, СсылкиЭтогоЭлемента, Истина);	
	
	// Рекурсивный вызов
	
	Для каждого СсылкаЭлемента Из МассивНовыхЭлементов Цикл	
		// Параметр ИсключитьВладельца = Ложь всегда,
		// так как все подчиненные элементы надо выгружать полностью.
		// Например, если мы нашли элемент ресурса, то надо выгрузить
		// и сам ресурс. Но для корневого элемента (курса или элемента содержания)
		// выгружать владельцев не надо. Например, если мы помечаем на удаление
		// элемент содержания, то помечается сам элемент содержания и его подчиненные
		// элементы, но не его владелец.
		ЗаполнитьМассивВсехСсылокЭлементаСправочника(СсылкаЭлемента, ПолныйМассивСсылок, Ложь, ПроверятьСуществованиеВБазе, СчитатьПомеченныеНаУдалениеОтсутствующими); // Рекурсия
	КонецЦикла;	
	
КонецПроцедуры

Функция ВыгрузитьНаДиск(Знач ЭлектронныеКурсы, Знач ФорматВыгрузки, Знач ПутьККаталогуВыгрузокНаКлиенте = Неопределено, Знач УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РезультатПубликаций = Новый Структура("АдресВоВременномХранилище, Успешно, Сообщение, ПутьККаталогуВыгрузки, ВыгруженныеЭлектронныеКурсы, ИмяФайлаПакета");	
	РезультатПубликаций.Успешно = Ложь;
	РезультатПубликаций.ВыгруженныеЭлектронныеКурсы = Новый Массив;
	
	// Делаем проверки
	//
	
	Если ЭлектронныеКурсы.Количество() = 0 Тогда
		РезультатПубликаций.Сообщение = НСтр("ru = 'Электронные курсы для выгрузки не заданы'");
		Возврат Новый ФиксированнаяСтруктура(РезультатПубликаций);
	КонецЕсли;
	
	// Формируем и проверяем каталог для выгрузок
	//
	
	Если ЗначениеЗаполнено(ПутьККаталогуВыгрузокНаКлиенте) Тогда
		ПутьККаталогуВыгрузок = ПутьККаталогуВыгрузокНаКлиенте;
	Иначе		
		ПутьККаталогуВыгрузок = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ПутьККаталогуВыгрузок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПутьККаталогуВыгрузок) Тогда
		РезультатПубликаций.Сообщение = НСтр("ru = 'Путь к каталогу выгрузки не задан'");
		Возврат РезультатПубликаций;		
	КонецЕсли;
	
	КаталогВыгрузок = Новый Файл(ПутьККаталогуВыгрузок);
	
	Если НЕ КаталогВыгрузок.Существует() ИЛИ НЕ КаталогВыгрузок.ЭтоКаталог() Тогда
		РезультатПубликаций.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Каталог %1 не существует'"), ПутьККаталогуВыгрузок);
		Возврат РезультатПубликаций;		
	КонецЕсли;
	
	ПутьККаталогуВыгрузок = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуВыгрузок);
	
	// Создаем каталог текущей выгрузки
	//
	
	ИмяКаталогаВыгрузки = НСтр("ru = 'Выгрузки курсов'");
	
	Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.HTML Тогда
		ИмяКаталогаВыгрузки = НСтр("ru = 'Пакеты HTML курсов'");
	КонецЕсли;
	
	Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.SCORM Тогда
		ИмяКаталогаВыгрузки = НСтр("ru = 'Пакеты SCORM курсов'");
	КонецЕсли;
	
	Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.ПолнаяКопия Тогда
		ИмяКаталогаВыгрузки = НСтр("ru = 'Полные выгрузки курсов'");
	КонецЕсли;	
	
	ПутьККаталогуВыгрузки = ПутьККаталогуВыгрузок + ИмяКаталогаВыгрузки;
	ПутьККаталогуВыгрузки = ЭлектронноеОбучениеСлужебныйКлиентСервер.УникальноеИмяФайла(ПутьККаталогуВыгрузки);
	ПутьККаталогуВыгрузки = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуВыгрузки);

	СоздатьКаталог(ПутьККаталогуВыгрузки);	
		
	// Выгружаем файлы в каталог
	//
	
	Для каждого ЭлектронныйКурс Из ЭлектронныеКурсы Цикл
		
		// Получаем переменные
		
		ДанныеКурса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйКурс, "Наименование, ДатаИзменения, НомерРедакции, НомерВерсии, Тип");
		НаименованиеКурсаДляЗаписиНаДиск = СокрЛП(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ДанныеКурса.Наименование, "_"));
		ОписаниеТипаВсеСсылки = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		
		// Делаем проверки
		
		Если ДанныеКурса.Тип = Перечисления.ТипыЭлектронныхКурсов.SCORM
			И (ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.HTML
			ИЛИ ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.SCORM) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'SCORM курс ""%1"" не может быть выгружен в формате HTML или SCORM.
			|Используйте оригинальный пакет курса.'"), ДанныеКурса.Наименование); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		// Создаем каталог с данными курса
		
		ПутьККаталогуЭлектронногоКурса = ЭлектронноеОбучениеСлужебныйКлиентСервер.УникальноеИмяФайла(ПутьККаталогуВыгрузки + НаименованиеКурсаДляЗаписиНаДиск);
		СоздатьКаталог(ПутьККаталогуЭлектронногоКурса);			
		ПутьККаталогуЭлектронногоКурса = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуЭлектронногоКурса);
		
		// HTML
		
		Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.HTML
			ИЛИ ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.SCORM Тогда			
			
			// Выгружаем данные курса
			
			ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыполнитьНачальноеЗаполнениеКаталогаЭлектронныхКурсов(ПутьККаталогуЭлектронногоКурса);
			ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ВыгрузитьДанныеПубликацииВКаталогРесурсов(ПутьККаталогуЭлектронногоКурса, ЭлектронныйКурс,,УникальныйИдентификаторФормы,Истина);
			
		КонецЕсли;		
		
		// SCORM
		
		Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.SCORM Тогда
			
			// Создаем манифест SCORM
			
			КороткийКодКурса = СтрЗаменить(Строка(ЭлектронныйКурс.УникальныйИдентификатор()), "-", "");
			
			МанифестSCORMXDTO     = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "manifestType"));			
			МанифестSCORMXDTO.identifier = Строка(ЭлектронныйКурс.УникальныйИдентификатор());
			МанифестSCORMXDTO.version    = Строка(ДанныеКурса.НомерРедакции) + "." + Строка(ДанныеКурса.НомерВерсии);
			
			МетаданныеМанифестаSCORMXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "metadataType"));			
			МетаданныеМанифестаSCORMXDTO.schema = "ADL SCORM";
			МетаданныеМанифестаSCORMXDTO.schemaversion = "2004 4th Edition";
			
			МанифестSCORMXDTO.metadata = МетаданныеМанифестаSCORMXDTO;
			
			ОрганизацииSCORMXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "organizationsType"));
			ОрганизацииSCORMXDTO.default = "organization_" + КороткийКодКурса;
			
			ОрганизацияSCORMXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "organizationType"));			
			ОрганизацияSCORMXDTO.identifier = "organization_" + КороткийКодКурса;
			ОрганизацияSCORMXDTO.title = ДанныеКурса.Наименование;
			
			ОсновнойЭлементОрганизацииSCORM = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "itemType"));			
			ОсновнойЭлементОрганизацииSCORM.identifier = "item_" + КороткийКодКурса;
			ОсновнойЭлементОрганизацииSCORM.identifierref = "res_" + КороткийКодКурса;
			ОсновнойЭлементОрганизацииSCORM.title = ДанныеКурса.Наименование;
			// parameters = "?api=scorm" не везде работает, поэтому параметр не вставляем сюда, а указываем в href
			
			ОрганизацияSCORMXDTO.item.Добавить(ОсновнойЭлементОрганизацииSCORM);
			ОрганизацииSCORMXDTO.organization.Добавить(ОрганизацияSCORMXDTO);			
			МанифестSCORMXDTO.organizations = ОрганизацииSCORMXDTO;
			
			РесурсыПакетаSCORM = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "resourcesType"));			
			ОсновнойРесурсПакетаSCORM = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "resourceType"));
						
			ОсновнойРесурсПакетаSCORM.identifier = "res_" + КороткийКодКурса;
			ОсновнойРесурсПакетаSCORM.type = "webcontent";
			ОсновнойРесурсПакетаSCORM.scormType = "sco";
			ОсновнойРесурсПакетаSCORM.href = "index.html?api=scorm";
			
			РесурсыПакетаSCORM.resource.Добавить(ОсновнойРесурсПакетаSCORM);
			
			ФайлРесурсаSCORMXDTOТип = ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "fileType");
			
			ФайлыКурса = НайтиФайлы(ПутьККаталогуЭлектронногоКурса, "*", Истина);
			
			Для каждого ФайлКурса Из ФайлыКурса Цикл
				
				Если ФайлКурса.ЭтоКаталог() Тогда
					Продолжить;
				КонецЕсли;
				
				ОтносительныйПутьКФайлу = Сред(ФайлКурса.ПолноеИмя, СтрДлина(ПутьККаталогуЭлектронногоКурса)+1);
				ОтносительныйПутьКФайлу = СтрЗаменить(ОтносительныйПутьКФайлу, "\", "/");				
				ФайлРесурсаSCORMXDTO = ФабрикаXDTO.Создать(ФайлРесурсаSCORMXDTOТип);				
				ФайлРесурсаSCORMXDTO.href = ОтносительныйПутьКФайлу;				
				ОсновнойРесурсПакетаSCORM.file.Добавить(ФайлРесурсаSCORMXDTO);
				
			КонецЦикла;
			
			МанифестSCORMXDTO.resources = РесурсыПакетаSCORM;
			
			ПутьКФайлуМанифестаSCORM = ПутьККаталогуЭлектронногоКурса + "imsmanifest.xml";
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ПутьКФайлуМанифестаSCORM);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МанифестSCORMXDTO, "manifest");
			
			ЗаписьXML.Закрыть();
			
			// Заменяем префикс пространства имен "http://www.adlnet.org/xsd/adlcp_v1p3"
			
			ТекстовыйДокументМанифеста = Новый ТекстовыйДокумент();
			ТекстовыйДокументМанифеста.Прочитать(ПутьКФайлуМанифестаSCORM,  КодировкаТекста.UTF8);
			
			ТекстМанифеста = ТекстовыйДокументМанифеста.ПолучитьТекст();
			
			НомерСимволаПИ = Найти(ТекстМанифеста, "=""http://www.adlnet.org/xsd/adlcp_v1p3""");
			
			Если НомерСимволаПИ > 0 Тогда
				
				СтрокаЛевее = "";
				adlcpПрефикс = "";
				
				НомерСимвола = НомерСимволаПИ -1 ;
				
				Пока НомерСимвола > 0 Цикл
					
					СтрокаЛевее = Сред(ТекстМанифеста, НомерСимвола, 1) + СтрокаЛевее;
					
					Если Найти(СтрокаЛевее, "xmlns:") > 0 Тогда						
						adlcpПрефикс = Сред(ТекстМанифеста, НомерСимвола + 6, НомерСимволаПИ - (НомерСимвола + 6));						
						Прервать;						
					КонецЕсли;
					
					НомерСимвола = НомерСимвола - 1;
					
				КонецЦикла;
				
				ТекстМанифеста = СтрЗаменить(ТекстМанифеста, "xmlns:" + adlcpПрефикс + "=", "xmlns:adlcp=");
				ТекстМанифеста = СтрЗаменить(ТекстМанифеста, adlcpПрефикс + ":", "adlcp:");
				
			КонецЕсли;
			
			ТекстовыйДокументМанифеста.УстановитьТекст(ТекстМанифеста);
			ТекстовыйДокументМанифеста.Записать(ПутьКФайлуМанифестаSCORM,  КодировкаТекста.UTF8);
			
			// Упаковываем пакет в zip
			
			ИмяАрхива = ПутьККаталогуВыгрузки + НаименованиеКурсаДляЗаписиНаДиск + ".zip";						
			Архиватор = Новый ЗаписьZipФайла(ИмяАрхива);
				
			Архиватор.Добавить(ПутьККаталогуЭлектронногоКурса + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			Архиватор.Записать();
			
			УдалитьФайлы(ПутьККаталогуЭлектронногоКурса);
			
		КонецЕсли;
		
		// Полная копия
		
		Если ФорматВыгрузки = Перечисления.ФорматыВыгрузкиЭлектронныхКурсов.ПолнаяКопия Тогда			
			
			// Создаем каталог elements
			
			ПутьККаталогуЭлементовЭлектронногоКурса = ПутьККаталогуЭлектронногоКурса + "elements";
			СоздатьКаталог(ПутьККаталогуЭлементовЭлектронногоКурса);	
			ПутьККаталогуЭлементовЭлектронногоКурса = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуЭлементовЭлектронногоКурса);
			
			// Создаем каталог files
			
			ПутьККаталогуФайловЭлектронногоКурса = ПутьККаталогуЭлектронногоКурса + "files";
			СоздатьКаталог(ПутьККаталогуФайловЭлектронногоКурса);	
			ПутьККаталогуФайловЭлектронногоКурса = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуФайловЭлектронногоКурса);
			
			// Выгружаем элементы курса
			
			ВсеЭлементыКурса = ВсеСсылкиЭлементаСправочника(ЭлектронныйКурс, Истина, Истина);
			
			ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьВМассивУникальноеЗначение(ВсеЭлементыКурса, ЭлектронныйКурс, Истина); // Добавляем сам курс ко всем элементам			
			ВсеГруппыХранения = РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.ВсеГруппыЭлектронногоКурса(ЭлектронныйКурс);			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеЭлементыКурса, ВсеГруппыХранения, Истина); 
			
			ТаблицаТиповЭлементов = Новый ТаблицаЗначений;
			ТаблицаТиповЭлементов.Колонки.Добавить("Тип");
			ТаблицаТиповЭлементов.Колонки.Добавить("ИдентификаторОбъектаМетаданных");
			ТаблицаТиповЭлементов.Колонки.Добавить("ПутьККаталогу");
			
			ТаблицаВыгруженныхЭлементов = Новый ТаблицаЗначений;
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ПутьКФайлуЭлемента");
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ОтносительныйПутьКФайлуЭлемента");
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ЭтоГруппаДляХраненияЭлементов");
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ЭтоФайл");
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ПутьКФайлу");			
			ТаблицаВыгруженныхЭлементов.Колонки.Добавить("ОтносительныйПутьКФайлу");			
			
			Для каждого СсылкаНаЭлементКурса Из ВсеЭлементыКурса Цикл
				
				ТипЭлементаКурса = ТипЗнч(СсылкаНаЭлементКурса);				
				ТипЭлементаКурсаНастройки = ТаблицаТиповЭлементов.Найти(ТипЭлементаКурса, "Тип");
					
				Если ТипЭлементаКурсаНастройки = Неопределено Тогда
					
					ТипЭлементаКурсаНастройки = ТаблицаТиповЭлементов.Добавить();
					ТипЭлементаКурсаНастройки.Тип = ТипЭлементаКурса;
					ТипЭлементаКурсаНастройки.ИдентификаторОбъектаМетаданных = Строка(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЭлементаКурса).УникальныйИдентификатор());
					ТипЭлементаКурсаНастройки.ПутьККаталогу = ПутьККаталогуЭлементовЭлектронногоКурса + ТипЭлементаКурсаНастройки.ИдентификаторОбъектаМетаданных;
					
					СоздатьКаталог(ТипЭлементаКурсаНастройки.ПутьККаталогу);
					
					ТипЭлементаКурсаНастройки.ПутьККаталогу = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ТипЭлементаКурсаНастройки.ПутьККаталогу);
					
				КонецЕсли;				
				
				ПутьКФайлуЭлемента = ТипЭлементаКурсаНастройки.ПутьККаталогу + Строка(СсылкаНаЭлементКурса.УникальныйИдентификатор()) + ".json";
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.ОткрытьФайл(ПутьКФайлуЭлемента);				
				СтруктураЭлемента = ЭлементКурсаВСтруктуру(СсылкаНаЭлементКурса, ОписаниеТипаВсеСсылки);				
				ЗаписатьJSON(ЗаписьJSON, СтруктураЭлемента);
				ЗаписьJSON.Закрыть();					
				
				НоваяСтрока = ТаблицаВыгруженныхЭлементов.Добавить();
				НоваяСтрока.ПутьКФайлуЭлемента = ПутьКФайлуЭлемента;
				НоваяСтрока.ОтносительныйПутьКФайлуЭлемента = Сред(НоваяСтрока.ПутьКФайлуЭлемента, СтрДлина(ПутьККаталогуЭлектронногоКурса)+1);
				НоваяСтрока.ЭтоГруппаДляХраненияЭлементов = ?(ВсеГруппыХранения.Найти(СсылкаНаЭлементКурса) = Неопределено, Ложь, Истина);
				
				Если ТипЭлементаКурса = Тип("СправочникСсылка.ЭлементыЭлектронныхРесурсовПрисоединенныеФайлы") Тогда					
					
					ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлементКурса, "ВладелецФайла");
					ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаЭлементКурса);
					ПутьКВыгружаемомуФайлу = ПутьККаталогуФайловЭлектронногоКурса + ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Строка(СсылкаНаЭлементКурса.УникальныйИдентификатор()), СсылкаНаЭлементКурса.Расширение);					
					ДвоичныеДанныеФайла.Записать(ПутьКВыгружаемомуФайлу);
					
					НоваяСтрока.ЭтоФайл = Истина;
					НоваяСтрока.ПутьКФайлу = ПутьКВыгружаемомуФайлу;
					НоваяСтрока.ОтносительныйПутьКФайлу = Сред(НоваяСтрока.ПутьКФайлу, СтрДлина(ПутьККаталогуЭлектронногоКурса)+1);
					
				Иначе
					
					НоваяСтрока.ЭтоФайл = Ложь;
					
				КонецЕсли;				
				
			КонецЦикла;
			
			// Создаем файл манифеста
			
			СтруктураМанифеста = Новый Структура("UUID, Title, PackageDate, Hash, CourseModifiedDate, Elements, Files, ElementsFolders");
			СтруктураМанифеста.UUID = Строка(ЭлектронныйКурс.УникальныйИдентификатор());
			СтруктураМанифеста.Title = ДанныеКурса.Наименование;
			СтруктураМанифеста.PackageDate = ЗначениеРеквизитаЭлементаКурсаВСтруктуру(ТекущаяДатаСеанса(), ОписаниеТипаВсеСсылки);
			СтруктураМанифеста.CourseModifiedDate = ЗначениеРеквизитаЭлементаКурсаВСтруктуру(ДанныеКурса.ДатаИзменения, ОписаниеТипаВсеСсылки);
			
			СтруктураМанифеста.Elements = Новый Массив;
			СтруктураМанифеста.Files = Новый Массив;
			СтруктураМанифеста.ElementsFolders = Новый Массив;
			
			Хэш = Новый ХешированиеДанных(ХешФункция.CRC32);
			
			Для каждого Строка Из ТаблицаВыгруженныхЭлементов Цикл
				СтруктураМанифеста.Elements.Добавить(
					Новый Структура("Element", Строка.ОтносительныйПутьКФайлуЭлемента)
				);
				Хэш.ДобавитьФайл(Строка.ПутьКФайлуЭлемента);	
			КонецЦикла;
			
			СтрокиСФайлами = ТаблицаВыгруженныхЭлементов.НайтиСтроки(Новый Структура("ЭтоФайл", Истина));
			
			Для каждого Строка Из СтрокиСФайлами Цикл				
				СтруктураМанифеста.Files.Добавить(
					Новый Структура("File, Element", Строка.ОтносительныйПутьКФайлу, Строка.ОтносительныйПутьКФайлуЭлемента)
				);				
				Хэш.ДобавитьФайл(Строка.ПутьКФайлу);
			КонецЦикла;
			
			СтрокиСГруппамиХранения = ТаблицаВыгруженныхЭлементов.НайтиСтроки(Новый Структура("ЭтоГруппаДляХраненияЭлементов", Истина));
			
			Для каждого Строка Из СтрокиСГруппамиХранения Цикл
				СтруктураМанифеста.ElementsFolders.Добавить(
					Новый Структура("Element", Строка.ОтносительныйПутьКФайлуЭлемента)
				);
			КонецЦикла;
			
			СтруктураМанифеста.Hash = Хэш.ХешСумма;
			
			ПутьКФайлуМанифеста = ПутьККаталогуЭлектронногоКурса + "v8course.json";
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.ОткрытьФайл(ПутьКФайлуМанифеста);
			ЗаписатьJSON(ЗаписьJSON, СтруктураМанифеста);
			ЗаписьJSON.Закрыть();
			
		КонецЕсли;
		
		РезультатПубликаций.ВыгруженныеЭлектронныеКурсы.Добавить(ЭлектронныйКурс);
		
	КонецЦикла;
	
	Если РезультатПубликаций.ВыгруженныеЭлектронныеКурсы.Количество() = 0 Тогда
		РезультатПубликаций.Сообщение = НСтр("ru = 'Курсы не выгружены'");
		Возврат Новый ФиксированнаяСтруктура(РезультатПубликаций);
	КонецЕсли;
	
	
	// Возвращаем результат
	//
	
	Если ЗначениеЗаполнено(ПутьККаталогуВыгрузокНаКлиенте) Тогда
		
		РезультатПубликаций.ПутьККаталогуВыгрузки = ПутьККаталогуВыгрузки;
		
	Иначе
		
		ИмяАрхива = ПолучитьИмяВременногоФайла(".zip");
					
		Архиватор = Новый ЗаписьZipФайла(ИмяАрхива);
			
		Архиватор.Добавить(ПутьККаталогуВыгрузки + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		Архиватор.Записать();
		
		ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(ИмяАрхива);		
		РезультатПубликаций.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива, УникальныйИдентификаторФормы);
		
		Попытка
			УдалитьФайлы(ИмяАрхива);
		Исключение
		КонецПопытки;				
		
		РезультатПубликаций.ИмяФайлаПакета = ИзучениеЭлектронныхКурсовСлужебныйКлиентСервер.ИмяКаталогаЭлектронныхКурсов() + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy_MM_dd");
		
	КонецЕсли;
	
	РезультатПубликаций.Успешно = Истина;	
	Возврат Новый ФиксированнаяСтруктура(РезультатПубликаций);
	
КонецФункции

Функция ЭлементКурсаВСтруктуру(Знач СсылкаНаЭлемент, Знач ОписаниеТипаВсеСсылки = Неопределено) 
	
	Если ОписаниеТипаВсеСсылки = Неопределено Тогда
		ОписаниеТипаВсеСсылки = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	КонецЕсли;
	
	ИмяСправочника = ЭлектронноеОбучениеСлужебный.ИмяСправочникаПоСсылке(СсылкаНаЭлемент);		
	РеквизитыИТЧ = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ВсеРеквизитыИТабличныеЧастиСправочника(ИмяСправочника);
	
	// Формируем структуру данных
	//
	
	СтруктураЭлемента = Новый Структура;
	
	// Стандартные реквизиты
	
	Для каждого Реквизит Из РеквизитыИТЧ.СтандартныеРеквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ЗначениеРеквизита = СсылкаНаЭлемент[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			УниверсальноеИмяСтандартногоРеквизита = РазработкаЭлектронныхКурсовСлужебный.ПеревестиСтандартныйРеквизит(Реквизит.Имя);
			СтруктураЭлемента.Вставить(УниверсальноеИмяСтандартногоРеквизита, ЗначениеРеквизитаЭлементаКурсаВСтруктуру(ЗначениеРеквизита, ОписаниеТипаВсеСсылки));
		КонецЕсли;
	КонецЦикла;	
	
	// Реквизиты
	
	Для каждого Реквизит Из РеквизитыИТЧ.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		ЗначениеРеквизита = СсылкаНаЭлемент[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СтруктураЭлемента.Вставить(ИмяРеквизита, ЗначениеРеквизитаЭлементаКурсаВСтруктуру(ЗначениеРеквизита, ОписаниеТипаВсеСсылки));
		КонецЕсли;
	КонецЦикла;	
	
	// Табличные части
	
	Для каждого ОписаниеТЧ Из РеквизитыИТЧ.ТабличныеЧасти Цикл
		
		СтруктураЭлемента.Вставить(ОписаниеТЧ.Имя, Новый Массив);
		
		Для каждого СтрокаТЧ Из СсылкаНаЭлемент[ОписаниеТЧ.Имя] Цикл
			
			ЗначениеРеквизитовТЧСтруктура = Новый Структура();
			
			Для каждого Реквизит Из ОписаниеТЧ.Реквизиты Цикл
				ИмяРеквизита = Реквизит.Имя;
				ЗначениеРеквизитаТЧ = СтрокаТЧ[ИмяРеквизита];
				Если ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
					ЗначениеРеквизитовТЧСтруктура.Вставить(ИмяРеквизита, ЗначениеРеквизитаЭлементаКурсаВСтруктуру(ЗначениеРеквизитаТЧ, ОписаниеТипаВсеСсылки));
				КонецЕсли;
			КонецЦикла;
			
			СтруктураЭлемента[ОписаниеТЧ.Имя].Добавить(ЗначениеРеквизитовТЧСтруктура);
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Завершаем
	//
	
	Возврат СтруктураЭлемента;
	
КонецФункции

Функция ЗначениеРеквизитаЭлементаКурсаВСтруктуру(Знач ЗначениеРеквизита, Знач ОписаниеТипаВсеСсылки)
	
	Если ЗначениеРеквизита = Неопределено
		ИЛИ ТипЗнч(ЗначениеРеквизита) = Тип("Строка")
		ИЛИ ТипЗнч(ЗначениеРеквизита) = Тип("Число")
		ИЛИ ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда		
		
		Возврат ЗначениеРеквизита;		
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("Value, Type, Description");
	
	Если ОписаниеТипаВсеСсылки.СодержитТип(ТипЗнч(ЗначениеРеквизита)) Тогда
		
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ЗначениеРеквизита);
		СтруктураДанных.Description = ИмяТаблицы;
	
		Если ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизита.Метаданные()) Тогда
			СтруктураДанных.Value = ЭлектронноеОбучениеСлужебный.ИмяЗначенияПеречисления(ЗначениеРеквизита);
			СтруктураДанных.Type = "Enum";
		Иначе
			СтруктураДанных.Value = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
			СтруктураДанных.Type = "Ref";
		КонецЕсли;			
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
			
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
		СтруктураДанных.Type = "Date";
		СтруктураДанных.Value = ЗаписатьДатуJSON(ЗначениеРеквизита, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		СтруктураДанных.Description = "ISO";
		Возврат СтруктураДанных;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") Тогда
		СтруктураДанных.Type = "ValueStorage";
		СтруктураДанных.Value = XMLстрока(ЗначениеРеквизита);
		СтруктураДанных.Description = "";				
		Возврат СтруктураДанных;
	КонецЕсли;			
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Невозможно преобразовать реквизит %1'"), Строка(ЗначениеРеквизита));	
	
КонецФункции

Процедура ЗагрузитьВБазуПолныйПакет(Знач ПутьКФайлуМанифеста, ИдентификаторФормы) Экспорт
	
	// Читаем манифест
	//
	
	Чтение = Новый ЧтениеJSON;
    Чтение.ОткрытьФайл(ПутьКФайлуМанифеста);
	СтруктураМанифеста = ПрочитатьJSON(Чтение);
    Чтение.Закрыть();
		
	// Получаем ссылку на курс
	//
	
	ЭлектронныйКурс = Справочники.ЭлектронныеКурсы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураМанифеста.UUID));		
	
	НачатьТранзакцию();
	
	Попытка	
	
		// Удаляем все элементы курса (если он существует в базе)
		//
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(ЭлектронныйКурс) Тогда
			
			// Удаляем публикацию
			
			РегистрыСведений.ПубликацииЭлектронныхКурсов.УдалитьПубликацию(ЭлектронныйКурс);
			
			// Подчиненные элементы
			
			Справочники.ЭлектронныеКурсы.УстановитьСнятьПометкуУдаленияПодчиненныхЭлементов(ЭлектронныйКурс, Истина);
			
		КонецЕсли;
		
		// Загружаем курс
		//
			
		// Загружаем элементы курса
		
		ПутьККаталогуВыгрузки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлуМанифеста).Путь;
		ПутьККаталогуВыгрузки = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуВыгрузки);
		
		Для каждого СвойстваЭлемента Из СтруктураМанифеста.Elements Цикл
			
			// Читаем структуру элемента в файле
			
			Чтение = Новый ЧтениеJSON;
		    Чтение.ОткрытьФайл(ПутьККаталогуВыгрузки + СвойстваЭлемента.Element);
			СтруктураЭлемента = ПрочитатьJSON(Чтение);
		    Чтение.Закрыть();			
			
			// Создаем новый элемент или получаем из базы
			
			СсылкаНаЭлемент = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента.Ref);			
			ИмяСправочника = ЭлектронноеОбучениеСлужебный.ИмяСправочникаПоСсылке(СсылкаНаЭлемент);
			РеквизитыИТЧ = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ВсеРеквизитыИТабличныеЧастиСправочника(ИмяСправочника);			
			
			ЭтоГруппа = (СтруктураЭлемента.Свойство("IsFolder") И СтруктураЭлемента.IsFolder);
					
			Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(СсылкаНаЭлемент) Тогда
				
				ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
				
			Иначе
				
				МенеджерЭлемента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаЭлемент);
				
				Если ЭтоГруппа Тогда					
					ЭлементОбъект = МенеджерЭлемента.СоздатьГруппу();					
				Иначе					
					ЭлементОбъект = МенеджерЭлемента.СоздатьЭлемент();					
				КонецЕсли;				
				
				ЭлементОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
				
			КонецЕсли;
			
			// Заполняем стандартные реквизиты
			
			Для каждого СтандартныйРеквизит Из РеквизитыИТЧ.СтандартныеРеквизиты Цикл
				
				УниверсальноеИмяСтандартногоРеквизита = РазработкаЭлектронныхКурсовСлужебный.ПеревестиСтандартныйРеквизит(СтандартныйРеквизит.Имя);
				
				Если УниверсальноеИмяСтандартногоРеквизита = "Ref" Тогда
					Продолжить;
				КонецЕсли;				
	
				Если УниверсальноеИмяСтандартногоРеквизита = "IsFolder" Тогда
					Продолжить;
				КонецЕсли;				
				
				Если СтруктураЭлемента.Свойство(УниверсальноеИмяСтандартногоРеквизита) Тогда
					ЭлементОбъект[СтандартныйРеквизит.Имя] = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента[УниверсальноеИмяСтандартногоРеквизита], СтандартныйРеквизит.Типы);
				КонецЕсли;
			
			КонецЦикла;						
					
			// Заполняем реквизиты элемента
			
			Для каждого Реквизит Из РеквизитыИТЧ.Реквизиты Цикл
				
				Если ЭтоГруппа И НЕ Реквизит.ДоступенДляГруппы Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЭтоГруппа И НЕ Реквизит.ДоступенДляЭлемента Тогда
					Продолжить;
				КонецЕсли;				
				
				Если СтруктураЭлемента.Свойство(Реквизит.Имя) Тогда
					ЭлементОбъект[Реквизит.Имя] = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента[Реквизит.Имя], Реквизит.Типы);
				КонецЕсли;
			
			КонецЦикла;
			
			// Заполняем табличные части элемента
			
			Для каждого ТабличнаяЧасть Из РеквизитыИТЧ.ТабличныеЧасти Цикл
				
				Если ЭтоГруппа И НЕ ТабличнаяЧасть.ДоступенДляГруппы Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЭтоГруппа И НЕ ТабличнаяЧасть.ДоступенДляЭлемента Тогда
					Продолжить;
				КонецЕсли;								
				
				Если СтруктураЭлемента.Свойство(ТабличнаяЧасть.Имя) Тогда
					
					ЭлементОбъект[ТабличнаяЧасть.Имя].Очистить(); // Обязательно
					
					Для каждого ЭлементТЧСтруктуры Из СтруктураЭлемента[ТабличнаяЧасть.Имя] Цикл
						
						НоваяСтрокаТЧ = ЭлементОбъект[ТабличнаяЧасть.Имя].Добавить();
						
						Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл

							Если ЭлементТЧСтруктуры.Свойство(Реквизит.Имя) Тогда 
								НоваяСтрокаТЧ[Реквизит.Имя] = ЗначениеРеквизитаИзСтруктуры(ЭлементТЧСтруктуры[Реквизит.Имя], Реквизит.Типы);
							КонецЕсли;

						КонецЦикла;
					
					КонецЦикла;
					
				КонецЕсли;				
							
			КонецЦикла;
			
			// Сохраняем элемент

			ЭлементОбъект.ОбменДанными.Загрузка = Истина;
			ЭлементОбъект.Записать();			
			
			Если ЭлементОбъект.ПометкаУдаления Тогда
				ЭлементОбъект.УстановитьПометкуУдаления(Ложь, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		// Загружаем файлы курса
		
		Для каждого СвойстваФайла Из СтруктураМанифеста.Files Цикл
			
			// Читаем структуру элемента
			
			Чтение = Новый ЧтениеJSON;
		    Чтение.ОткрытьФайл(ПутьККаталогуВыгрузки + СвойстваФайла.Element);
			СтруктураЭлемента = ПрочитатьJSON(Чтение);
		    Чтение.Закрыть();						
			
			ПрисоединенныйФайл = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента.Ref);
			ВладелецФайла = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента.ВладелецФайла);
			РасширениеБезТочки = СтруктураЭлемента.Расширение;
			ВремяИзмененияУниверсальное = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента.ДатаМодификацииУниверсальная, Тип("Дата"));
			ИмяБезРасширения = СтруктураЭлемента.Description;
			
			// Обновляем двоичные данные
			
			ПолныйПутьКФайлу = ПутьККаталогуВыгрузки + СвойстваФайла.File;
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолныйПутьКФайлу));
			
			Если ОбщегоНазначения.СсылкаСуществует(ПрисоединенныйФайл) Тогда
				
				СвойстваФайлаДляЗаписи = Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, ИмяБезРасширения, ДатаМодификацииУниверсальная, Расширение");
				СвойстваФайлаДляЗаписи.АдресФайлаВоВременномХранилище = АдресФайлаВоВременномХранилище;
				СвойстваФайлаДляЗаписи.АдресВременногоХранилищаТекста = "";
				СвойстваФайлаДляЗаписи.ИмяБезРасширения = ИмяБезРасширения;
				СвойстваФайлаДляЗаписи.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
				СвойстваФайлаДляЗаписи.Расширение = РасширениеБезТочки;				
				
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Ложь, Истина); // Так как перед загрузкой она была установлена
				
				РаботаСФайлами.ОбновитьФайл(
					ПрисоединенныйФайл,
					СвойстваФайлаДляЗаписи
				);
				
				
			Иначе
				
				СвойстваФайлаДляЗаписи = Новый Структура("Автор, ВладелецФайлов, ИмяБезРасширения, РасширениеБезТочки, ВремяИзмененияУниверсальное");
				СвойстваФайлаДляЗаписи.Автор = Пользователи.ТекущийПользователь();				
				СвойстваФайлаДляЗаписи.ВладелецФайлов = ВладелецФайла;
				СвойстваФайлаДляЗаписи.ИмяБезРасширения = ИмяБезРасширения;
				СвойстваФайлаДляЗаписи.РасширениеБезТочки = РасширениеБезТочки;
				СвойстваФайлаДляЗаписи.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
				
				НовыйПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
					СвойстваФайлаДляЗаписи,
					АдресФайлаВоВременномХранилище,
					,
					,
					ПрисоединенныйФайл
				);
				
				Если НовыйПрисоединенныйФайл <> ПрисоединенныйФайл Тогда
					ВызватьИсключение НСтр("ru = 'Созданный файл имеет неправильный идентификатор'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		// Загружаем группы хранения элементов		
		
		Для каждого СвойстваГруппы Из СтруктураМанифеста.ElementsFolders Цикл
			
			// Читаем структуру элемента
			
			Чтение = Новый ЧтениеJSON;
		    Чтение.ОткрытьФайл(ПутьККаталогуВыгрузки + СвойстваГруппы.Element);
			СтруктураЭлемента = ПрочитатьJSON(Чтение);
		    Чтение.Закрыть();			
			
			// Сохраняем группу хранения
			
			СсылкаНаГруппуХранения = ЗначениеРеквизитаИзСтруктуры(СтруктураЭлемента.Ref);
			РегистрыСведений.ГруппыЭлементовЭлектронныхКурсов.СохранитьГруппуДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, СсылкаНаГруппуХранения);
			
		КонецЦикла;
			
		// Публикуем курс
		//
		
		РегистрыСведений.ПубликацииЭлектронныхКурсов.Опубликовать(ЭлектронныйКурс, Истина, ИдентификаторФормы);
		
		// Проверяем все ли ссылки существуют в базе
		//
		
		ВсеСсылки = ВсеСсылкиЭлементаСправочника(ЭлектронныйКурс);
		
		Для каждого СсылкаНаЭлементВБазе Из ВсеСсылки Цикл
		
			Если НЕ ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(СсылкаНаЭлементВБазе) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ссылка %1 типа %2 не найдена в базе'"), Строка(СсылкаНаЭлементВБазе.УникальныйИдентификатор()), Строка(ТипЗнч(СсылкаНаЭлементВБазе)));
			КонецЕсли;
		
		КонецЦикла;
		
		// Завершаем
		//
		
		ЗафиксироватьТранзакцию();
	
	Исключение
 
 		ОтменитьТранзакцию();
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ЗагрузитьВБазуПакетSCORM(Знач ПутьКФайлуМанифеста, ИдентификаторФормы) Экспорт
	
	ФайлМанифеста = Новый Файл(ПутьКФайлуМанифеста);

	Если НЕ ФайлМанифеста.Существует() Тогда
		ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл %1 не найден'"), ПутьКФайлуМанифеста);
	КонецЕсли;

	КаталогПакета = Новый Файл(ФайлМанифеста.Путь);
	ПутьККаталогуПакета = ФайлМанифеста.Путь;
	ПутьККаталогуПакета = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуПакета);

	// Читаем манифест
	//
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуМанифеста);				

	МанифестТип  = ФабрикаXDTO.Тип("http://www.imsglobal.org/xsd/imscp_v1p1", "manifestType");
	МанифестSCORM = ФабрикаXDTO.Создать(МанифестТип);
	МанифестSCORM = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, МанифестТип);		

	ЧтениеXML.Закрыть();

	ИдентификаторПакетаSCORM = МанифестSCORM.identifier;
	Организация = МанифестSCORM.organizations.organization[0];	
		
	// Находим электронный курс
	//
	
	ЭлектронныйКурс = РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.РанееИмпортированныйЭлемент(ИдентификаторПакетаSCORM, "organization", Организация.identifier);	
	
	НачатьТранзакцию();
	
	Попытка	
	
		// Удаляем все элементы курса (если он существует в базе)
		//
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(ЭлектронныйКурс) Тогда
			
			// Удаляем публикацию
			
			РегистрыСведений.ПубликацииЭлектронныхКурсов.УдалитьПубликацию(ЭлектронныйКурс);
			
			// Подчиненные элементы
			
			Справочники.ЭлектронныеКурсы.УстановитьСнятьПометкуУдаленияПодчиненныхЭлементов(ЭлектронныйКурс, Истина);
			
		КонецЕсли;
		
		// Загружаем курс
		//
		
		// Создаем электронный курс
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(ЭлектронныйКурс) Тогда
			ЭлектронныйКурсОбъект = ЭлектронныйКурс.ПолучитьОбъект();
			Если ЭлектронныйКурсОбъект.ПометкаУдаления Тогда
				ЭлектронныйКурсОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
			КонецЕсли;			
		Иначе
			ЭлектронныйКурсОбъект = Справочники.ЭлектронныеКурсы.СоздатьЭлемент();
			РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлектронныйКурсОбъект);
		КонецЕсли;
				
		ЭлектронныйКурсОбъект.Тип = Перечисления.ТипыЭлектронныхКурсов.SCORM;
		ЭлектронныйКурсОбъект.Наименование = Организация.title;				
		ЭлектронныйКурсОбъект.ДополнительныеСвойства.Вставить("ДатаИзменения", ФайлМанифеста.ПолучитьВремяИзменения());		
		ЭлектронныйКурсОбъект.Записать();					
		
		ЭлектронныйКурс = ЭлектронныйКурсОбъект.Ссылка;
		
		РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.ЗапомнитьИмпортЭлемента(ЭлектронныйКурс, ИдентификаторПакетаSCORM, "organization", Организация.identifier); 
		
		// Создаем один ресурс для всех файлов
		
		ЭлектронныйРесурс = РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.РанееИмпортированныйЭлемент(ИдентификаторПакетаSCORM, "resources", "");
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(ЭлектронныйРесурс) Тогда 
			ЭлектронныйРесурсОбъект = ЭлектронныйРесурс.ПолучитьОбъект();
			Если ЭлектронныйРесурсОбъект.ПометкаУдаления Тогда
				ЭлектронныйРесурсОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
			КонецЕсли;			
		Иначе
			ЭлектронныйРесурсОбъект = Справочники.ЭлектронныеРесурсы.СоздатьЭлемент();
			РазработкаЭлектронныхКурсовСлужебный.УстановитьПредпочитаемогоПоставщика(ЭлектронныйКурсОбъект);
			ЭлектронныйРесурсОбъект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(ЭлектронныйКурс, Тип("СправочникСсылка.ЭлектронныеРесурсы"));			
		КонецЕсли;
		
		ЭлектронныйРесурсОбъект.SCO = Истина;
		ЭлектронныйРесурсОбъект.Наименование = ЭлектронныйКурсОбъект.Наименование;		
		ЭлектронныйРесурсОбъект.Записать();		
		ЭлектронныйРесурс = ЭлектронныйРесурсОбъект.Ссылка;
		
		РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.ЗапомнитьИмпортЭлемента(ЭлектронныйРесурс, ИдентификаторПакетаSCORM, "resources", ""); 		
		
		// Помещаем в ресурс все файлы пакета		
		
		СписокФайлов = Новый Массив; // Линейный список файлов для последующего помещения в базу
		СтруктураФайлов = Новый Массив; // Массив файлов с учетом иерархии каталогов
		ОтсортированныеФайлы = Новый Массив; // Файлы на диске, которые надо загрузить
		
		ФайлыВКаталогеПакета = НайтиФайлы(КаталогПакета.ПолноеИмя, "*", Ложь);
		
		Для каждого ФайлПакетаВКорне Из ФайлыВКаталогеПакета Цикл		
			ОтсортированныеФайлы.Добавить(ФайлПакетаВКорне);					
		КонецЦикла;
		
		ЭлектронноеОбучениеСлужебныйКлиентСервер.СформироватьОписаниеФайлов(ОтсортированныеФайлы, СтруктураФайлов, СписокФайлов, Ложь, "");
		
		СвойстваФайла = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствЗагружаемогоФайла();				
		СвойстваФайла.Имя = КаталогПакета.Имя;
		СвойстваФайла.Расширение = "";
		СвойстваФайла.ЭтоКаталог = Истина;
		СвойстваФайла.Преобразовать = Ложь;
		СвойстваФайла.СтруктураФайлов = СтруктураФайлов;
		СвойстваФайла.СписокФайлов = СписокФайлов;
		
		СвойстваВладельца = РазработкаЭлектронныхКурсовСлужебныйКлиентСервер.ПустаяСтруктураСвойствВладельцаЗагружаемыхФайлов();
		СвойстваВладельца.ИмяВладельцаФайлов = "НаборФайлов";
		СвойстваВладельца.ЭлектронныйКурс = ЭлектронныйКурс;
		СвойстваВладельца.НаборФайлов = ЭлектронныйРесурс;		
		СвойстваВладельца.ОбновлятьДатуРесурса = Ложь; // Дата ресурса всегда обновляется выше
		
		ПоместитьФайлВБазу(СвойстваФайла, СвойстваВладельца);
		
		// Формируем элементы содержания курса
		
		ИмпортироватьЭлементыОрганизацииКонтентаSCORM(ЭлектронныйКурс, ЭлектронныйРесурс, МанифестSCORM, Организация.item);
		
    	// Публикуем курс
    	//
    	
    	РегистрыСведений.ПубликацииЭлектронныхКурсов.Опубликовать(ЭлектронныйКурс, Истина, ИдентификаторФормы);
    	
    	// Проверяем все ли ссылки существуют в базе
    	//
    	
    	ВсеСсылки = ВсеСсылкиЭлементаСправочника(ЭлектронныйКурс);
    	
    	Для каждого СсылкаНаЭлементВБазе Из ВсеСсылки Цикл
    	
    		Если НЕ ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(СсылкаНаЭлементВБазе) Тогда
    			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ссылка %1 типа %2 не найдена в базе'"), Строка(СсылкаНаЭлементВБазе.УникальныйИдентификатор()), Строка(ТипЗнч(СсылкаНаЭлементВБазе)));
    		КонецЕсли;
    	
    	КонецЦикла;
    	
    	// Завершаем
    	//
    	
    	ЗафиксироватьТранзакцию();
    
    Исключение
 
 		ОтменитьТранзакцию();
    	ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    	ВызватьИсключение;
    	
    КонецПопытки;
	
КонецПроцедуры

// Рекурсивно обходит организацию контента SCORM и записывает на ее основе содержание курса
//
Процедура ИмпортироватьЭлементыОрганизацииКонтентаSCORM(ЭлектронныйКурс, ЭлектронныйРесурс, МанифестSCORM, ЭлементыОрганизацииXDTO, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.СодержаниеЭлектронныхКурсов.ПустаяСсылка();
	КонецЕсли;	
	
	ИдентификаторПакетаSCORM = МанифестSCORM.identifier;
	ОтносительныйПутьКРесурсам = "" + Строка(МанифестSCORM.base) + Строка(МанифестSCORM.resources.base);
	
	Для каждого ЭлементОрганизации Из ЭлементыОрганизацииXDTO Цикл
		
		ИдентификаторЭлемента = ЭлементОрганизации.identifier;
		ЭтоГруппа = ?(ЭлементОрганизации.item.Количество() > 0, Истина, Ложь);
		
		ЭлементСодержания = РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.РанееИмпортированныйЭлемент(ИдентификаторПакетаSCORM, "item", ИдентификаторЭлемента);
		
		Если ЭлектронноеОбучениеСлужебный.СсылкаСуществуетВБазе(ЭлементСодержания) Тогда
			
			ЭлементСодержанияОбъект = ЭлементСодержания.ПолучитьОбъект();
			ЭлементСодержанияОбъект.УстановитьПометкуУдаления(Ложь);
			
		Иначе
			
			Если ЭтоГруппа Тогда
				ЭлементСодержанияОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьГруппу();
			Иначе
				ЭлементСодержанияОбъект = Справочники.СодержаниеЭлектронныхКурсов.СоздатьЭлемент();	
			КонецЕсли;
			
			УстановитьПредпочитаемогоПоставщика(ЭлементСодержанияОбъект);
			
		КонецЕсли;
		
		ЭлементСодержанияОбъект.Наименование = ЭлементОрганизации.title;
		ЭлементСодержанияОбъект.Родитель = Родитель;
		ЭлементСодержанияОбъект.Владелец = ЭлектронныйКурс;
		
		Если НЕ ЭлементСодержанияОбъект.ЭтоГруппа Тогда
			ЭлементСодержанияОбъект.РазрешитьРедактироватьНаименование = Истина;
		КонецЕсли;
		
		Если НЕ ЭтоГруппа Тогда
		
			РесурсSCORMЭлементаСодержания = Неопределено;
			
			Для каждого РесурсSCORM Из МанифестSCORM.resources.resource Цикл
			
				Если РесурсSCORM.identifier = ЭлементОрганизации.identifierref Тогда
					РесурсSCORMЭлементаСодержания = РесурсSCORM;
					Прервать;
				КонецЕсли
			
			КонецЦикла;
			
			Если РесурсSCORMЭлементаСодержания = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ресурс элемента содержания %1 не найден'"), ИдентификаторЭлемента);
			КонецЕсли;
			
			ПутьКФайлуЭлементаСодержания = ОтносительныйПутьКРесурсам + РесурсSCORM.href;
			
			НомерРазделителяПараметров = СтрНайти(ПутьКФайлуЭлементаСодержания, "?");
			
			ПараметрыЭлементаСодержания = "";
			Если НомерРазделителяПараметров > 0 Тогда
				// Имя файла содержит параметры. Это не по стандарту SCORM, но такое встречается.
				// Поэтому мы параметры убираем из имени файла, но из записываем ниже в реквизит ПараметрыЭлементаСодержания				
				ПараметрыЭлементаСодержания  = Сред(ПутьКФайлуЭлементаСодержания, НомерРазделителяПараметров+1);
				ПутьКФайлуЭлементаСодержания = Лев(ПутьКФайлуЭлементаСодержания, НомерРазделителяПараметров-1);								
			КонецЕсли;
			
			ЭлементРесурсаВБазе = Справочники.ЭлектронныеРесурсы.ЭлементРесурсаПоОтносительномуПути(ЭлектронныйРесурс, ПутьКФайлуЭлементаСодержания);
			
			Если НЕ ЗначениеЗаполнено(ЭлементРесурсаВБазе) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Элемент %1 ресурса не найден'"), ИдентификаторЭлемента);
			КонецЕсли;
			
			ЭлементСодержанияОбъект.Элемент = ЭлементРесурсаВБазе;
			
			Если РесурсSCORM.Свойства().Получить("scormType") <> Неопределено
				И РесурсSCORM.scormType = "asset" Тогда
				ЭлементСодержанияОбъект.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.HTML;
			Иначе
				ЭлементСодержанияОбъект.ТипЭлемента = Перечисления.ТипыЭлементовСодержанияЭлектронногоКурса.SCO;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыЭлементаСодержания)
				И НЕ ЗначениеЗаполнено(ЭлементСодержанияОбъект.ПараметрыЗапуска) Тогда
				ЭлементСодержанияОбъект.ПараметрыЗапуска = ПараметрыЭлементаСодержания;
			КонецЕсли;
			
		КонецЕсли;
			
		// completionThreshold (Порог выполнения)
		
		Если ЭлементОрганизации.Свойства().Получить("completionThreshold") <> Неопределено Тогда
			
			Если ТипЗнч(ЭлементОрганизации.completionThreshold) = Тип("ОбъектXDTO") Тогда
				Если ЭлементОрганизации.completionThreshold.Свойства().Получить("minProgressMeasure") <> Неопределено Тогда
					ЭлементСодержанияОбъект.ПорогВыполнения = Число(ЭлементОрганизации.completionThreshold.minProgressMeasure);
				КонецЕсли;
			Иначе
				ЭлементСодержанияОбъект.ПорогВыполнения = Число(ЭлементОрганизации.completionThreshold);
			КонецЕсли;			
			
		КонецЕсли;
		
		// dataFromLMS
		
		Если ЭлементОрганизации.Свойства().Получить("dataFromLMS") <> Неопределено Тогда
			ЭлементСодержанияОбъект.ДанныеИнициализации = Строка(ЭлементОрганизации.dataFromLMS);
		КонецЕсли;
		
		// timeLimitAction
		
		Если ЭлементОрганизации.Свойства().Получить("timeLimitAction") <> Неопределено Тогда
			
			Если ЭлементОрганизации.timeLimitAction = "exit,message" Тогда
				ЭлементСодержанияОбъект.ДействиеПослеИстеченияВремени = Перечисления.ДействияПослеИстеченияВремениВыполненияОбъектаSCORM.СообщитьИВыйти;	
			КонецЕсли;
			
			Если ЭлементОрганизации.timeLimitAction = "exit,no message" Тогда
				ЭлементСодержанияОбъект.ДействиеПослеИстеченияВремени = Перечисления.ДействияПослеИстеченияВремениВыполненияОбъектаSCORM.Выйти;
			КонецЕсли;
			
			Если ЭлементОрганизации.timeLimitAction = "continue,message" Тогда
				ЭлементСодержанияОбъект.ДействиеПослеИстеченияВремени = Перечисления.ДействияПослеИстеченияВремениВыполненияОбъектаSCORM.СообщитьИПродолжитьРаботу;	
			КонецЕсли;
			
			Если ЭлементОрганизации.timeLimitAction = "continue,no message" Тогда
				ЭлементСодержанияОбъект.ДействиеПослеИстеченияВремени = Перечисления.ДействияПослеИстеченияВремениВыполненияОбъектаSCORM.ПродолжитьРаботу;
			КонецЕсли;
			
		КонецЕсли;
		
		// sequencing
		
		Если ЭлементОрганизации.Свойства().Получить("sequencing") <> Неопределено Тогда
			
			Если ЭлементОрганизации.sequencing.Свойства().Получить("limitConditions") <> Неопределено Тогда
				
				// Ограничение количества попыток
				Если ЭлементОрганизации.sequencing.limitConditions.Свойства().Получить("attemptLimit") <> Неопределено Тогда
					ЭлементСодержанияОбъект.КоличествоПопыток = Число(ЭлементОрганизации.sequencing.limitConditions.attemptLimit);	
				КонецЕсли;
				
				// Ограничение времени на попытку
				Если ЭлементОрганизации.sequencing.limitConditions.Свойства().Получить("attemptAbsoluteDurationLimit") <> Неопределено Тогда
					ЭлементСодержанияОбъект.ПродолжительностьПопытки = Строка(ЭлементОрганизации.sequencing.limitConditions.attemptAbsoluteDurationLimit);
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		// parameters
		
		Если ЭлементОрганизации.Свойства().Получить("parameters") <> Неопределено
			И ЭлементОрганизации.parameters <> Неопределено Тогда
			
			СтрокаПараметров = Строка(ЭлементОрганизации.parameters);
			ПозицияВопроса = Найти(СтрокаПараметров, "?");
			
			Если ПозицияВопроса > 0 Тогда
				СтрокаПараметров = Сред(СтрокаПараметров, ПозицияВопроса+1, СтрДлина(СтрокаПараметров));
			КонецЕсли;
		
			ЭлементСодержанияОбъект.ПараметрыЗапуска = СтрокаПараметров;	
				
		КонецЕсли;
		
		ЭлементСодержанияОбъект.Записать();
		
		РегистрыСведений.ИмпортированныеЭлементыПакетаSCORM.ЗапомнитьИмпортЭлемента(ЭлементСодержанияОбъект.Ссылка, ИдентификаторПакетаSCORM, "item", ИдентификаторЭлемента); 
	
		Если ЭтоГруппа Тогда
			ИмпортироватьЭлементыОрганизацииКонтентаSCORM(ЭлектронныйКурс, ЭлектронныйРесурс, МанифестSCORM, ЭлементОрганизации.item, ЭлементСодержанияОбъект.Ссылка); // Рекурсия
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ЗначениеРеквизитаИзСтруктуры(Знач ЗначениеРеквизитаВСтруктуре, Знач ТребуемыеТипы = Неопределено) Экспорт
	
	ИтоговоеЗначениеРеквизита = Неопределено;	
			
	Если ТипЗнч(ЗначениеРеквизитаВСтруктуре) = Тип("Строка")
		ИЛИ ТипЗнч(ЗначениеРеквизитаВСтруктуре) = Тип("Число")
		ИЛИ ТипЗнч(ЗначениеРеквизитаВСтруктуре) = Тип("Булево") Тогда		
		
		ИтоговоеЗначениеРеквизита = ЗначениеРеквизитаВСтруктуре;		
		
	КонецЕсли;	
	
	Если ТипЗнч(ЗначениеРеквизитаВСтруктуре) = Тип("Структура")	Тогда
		
		Если НЕ ЗначениеРеквизитаВСтруктуре.Свойство("Type")
			ИЛИ НЕ ЗначениеРеквизитаВСтруктуре.Свойство("Value")
			ИЛИ НЕ ЗначениеРеквизитаВСтруктуре.Свойство("Description") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Реквизит %1 неизвестного типа'"), Строка(ЗначениеРеквизитаВСтруктуре));
			
		КонецЕсли;
		
		Если ЗначениеРеквизитаВСтруктуре.Type = "Enum" Тогда
			ИтоговоеЗначениеРеквизита = ПредопределенноеЗначение(ЗначениеРеквизитаВСтруктуре.Description + "." + ЗначениеРеквизитаВСтруктуре.Value);
		КонецЕсли;
		
		Если ЗначениеРеквизитаВСтруктуре.Type = "Ref" Тогда			
			МенеджерЭлемента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЗначениеРеквизитаВСтруктуре.Description);
			ИтоговоеЗначениеРеквизита = МенеджерЭлемента.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеРеквизитаВСтруктуре.Value));				
		КонецЕсли;
		
		Если ЗначениеРеквизитаВСтруктуре.Type = "Date" Тогда
			Если СтрНачинаетсяС(ЗначениеРеквизитаВСтруктуре.Value, "0001-01-01T")  Тогда
				НомерСимволаT = СтрНайти(ЗначениеРеквизитаВСтруктуре.Value, "T");
				СтрокаВремя = Сред(ЗначениеРеквизитаВСтруктуре.Value, НомерСимволаT + 1, 8); 
				МассивВремя = СтрРазделить(СтрокаВремя, ":", Ложь);
				Если МассивВремя.Количество() = 3 Тогда
					ИтоговоеЗначениеРеквизита = Дата("0001", "01", "01", МассивВремя[0], МассивВремя[1], МассивВремя[2]);
				КонецЕсли;
			Иначе
				ИтоговоеЗначениеРеквизита = ПрочитатьДатуJSON(ЗначениеРеквизитаВСтруктуре.Value, ФорматДатыJSON.ISO);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеРеквизитаВСтруктуре.Type = "ValueStorage" Тогда
			ИтоговоеЗначениеРеквизита = XMLЗначение(Тип("ХранилищеЗначения"), ЗначениеРеквизитаВСтруктуре.Value);
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ИтоговоеЗначениеРеквизита = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Невозможно получить реквизит %1'"), Строка(ЗначениеРеквизитаВСтруктуре));
		
	Иначе
		
		Если ТребуемыеТипы <> Неопределено Тогда
			
			Если ТипЗнч(ТребуемыеТипы) = Тип("Массив") Тогда
				ТипыРеквизитаВБазе = ТребуемыеТипы;
			Иначе
				ТипыРеквизитаВБазе = Новый Массив;
				ТипыРеквизитаВБазе.Добавить(ТребуемыеТипы);		
			КонецЕсли;
			
			Если ТипыРеквизитаВБазе.Найти(ТипЗнч(ИтоговоеЗначениеРеквизита)) = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип %1 реквизита %2 не соответствует ожидаемому'"), ТипЗнч(ИтоговоеЗначениеРеквизита), Строка(ЗначениеРеквизитаВСтруктуре));
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ИтоговоеЗначениеРеквизита;
		
	КонецЕсли;	
	
КонецФункции

Функция ПеревестиСтандартныйРеквизит(ЛокализованноеИмя = Неопределено, УниверсальноеИмя = Неопределено) Экспорт
	
	Если ЛокализованноеИмя = Неопределено 
		И УниверсальноеИмя = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Имя стандартного реквизита не задано'");
		
	КонецЕсли;
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("УниверсальноеИмя");
	ТаблицаРеквизитов.Колонки.Добавить("ЛокализованноеИмя");
	ТаблицаРеквизитов.Колонки.Добавить("КодЯзыка");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Ref";
	НоваяСтрока.ЛокализованноеИмя = "Ссылка";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "DeletionMark";
	НоваяСтрока.ЛокализованноеИмя = "ПометкаУдаления";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Description";
	НоваяСтрока.ЛокализованноеИмя = "Наименование";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Parent";
	НоваяСтрока.ЛокализованноеИмя = "Родитель";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "IsFolder";
	НоваяСтрока.ЛокализованноеИмя = "ЭтоГруппа";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Owner";
	НоваяСтрока.ЛокализованноеИмя = "Владелец";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Code";
	НоваяСтрока.ЛокализованноеИмя = "Код";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "DataVersion";
	НоваяСтрока.ЛокализованноеИмя = "ВерсияДанных";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "PredefinedDataName";
	НоваяСтрока.ЛокализованноеИмя = "ИмяПредопределенныхДанных";
	НоваяСтрока.КодЯзыка = "ru";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.УниверсальноеИмя = "Predefined";
	НоваяСтрока.ЛокализованноеИмя = "Предопределенный";
	НоваяСтрока.КодЯзыка = "ru";
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	Если КодЯзыка <> "ru" Тогда
		ВызватьИсключение НСтр("ru = 'Работа в конфигурация с языком отличном от ru не поддерживается'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛокализованноеИмя) Тогда		
		НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ЛокализованноеИмя, КодЯзыка", ЛокализованноеИмя, КодЯзыка));		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УниверсальноеИмя) Тогда
		НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("УниверсальноеИмя, КодЯзыка", УниверсальноеИмя, КодЯзыка));		
	КонецЕсли;	
	
	Если НайденныеСтроки.Количество() <> 1 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Стандартный реквизит %1 не найден'"), Строка(ЛокализованноеИмя) + Строка(УниверсальноеИмя));
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	
	Если ЗначениеЗаполнено(ЛокализованноеИмя) Тогда
		Возврат НайденнаяСтрока.УниверсальноеИмя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УниверсальноеИмя) Тогда
		Возврат НайденнаяСтрока.ЛокализованноеИмя;
	КонецЕсли;
		
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения стандартного реквизита: %1'"), Строка(ЛокализованноеИмя) + Строка(УниверсальноеИмя));
	
КонецФункции

#КонецОбласти

#Область Общее

Функция ДвоичныеДанныеПрограммы(ИмяПрограммы) Экспорт
	
	Возврат Справочники.ЭлементыЭлектронныхРесурсов.ПолучитьМакет(ИмяПрограммы);
	
КонецФункции

Процедура ПереместитьЭлемент(Направление, Элемент) Экспорт
	
	ДанныеЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Код, Родитель, Владелец");
	
	// Ищем соседний элемент
	
	ИмяТаблицы = Элемент.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаЭлемента.Ссылка,
		|	ТаблицаЭлемента.Код
		|ИЗ
		|	Справочник."+ИмяТаблицы+" КАК ТаблицаЭлемента
		|ГДЕ
		|	ТаблицаЭлемента.Родитель = &Родитель
		|	И ТаблицаЭлемента.Код "+?(Направление = "Вверх", "<=", ">=")+" &Код
		|   И ТаблицаЭлемента.Владелец = &Владелец
		|   И ТаблицаЭлемента.ПометкаУдаления = ЛОЖЬ
		|   И ТаблицаЭлемента.Ссылка <> &Элемент
		| УПОРЯДОЧИТЬ ПО Код "+?(Направление = "Вверх", "УБЫВ", "")+"";

	Запрос.УстановитьПараметр("Код", ДанныеЭлемента.Код);
	Запрос.УстановитьПараметр("Родитель", ДанныеЭлемента.Родитель);
	Запрос.УстановитьПараметр("Владелец", ДанныеЭлемента.Владелец);
	Запрос.УстановитьПараметр("Элемент", Элемент);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	СоседнийЭлемент = ВыборкаДетальныеЗаписи.Ссылка;
	
	//
	
	НовыйКодЭлемента = ВыборкаДетальныеЗаписи.Код;
	НовыйКодСоседнегоЭлемента = ДанныеЭлемента.Код;
	
	Если НовыйКодЭлемента = НовыйКодСоседнегоЭлемента Тогда
		
		Если Направление = "Вверх" Тогда
			НовыйКодЭлемента = НовыйКодЭлемента + 1;
		Иначе
			НовыйКодСоседнегоЭлемента = НовыйКодСоседнегоЭлемента + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		СоседнийЭлементОбъект = СоседнийЭлемент.ПолучитьОбъект();
		СоседнийЭлементОбъект.Код = НовыйКодСоседнегоЭлемента;
		СоседнийЭлементОбъект.Записать();
		
		ЭлементОбъект     = Элемент.ПолучитьОбъект();
		ЭлементОбъект.Код = НовыйКодЭлемента;
		ЭлементОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЭлектронноеОбучениеСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;

	КонецПопытки;
	
		
	
	
КонецПроцедуры

Процедура УстановитьДатуИзмененияПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ Источник.ОбменДанными.Загрузка Тогда
		
		ДатаИзменения = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ДатаИзменения", ДатаИзменения);
		
		Если ДатаИзменения = Неопределено Тогда
			ДатаИзменения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Источник.ДатаИзменения = ДатаИзменения;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает предпочитаемого поставщика.
// обычно используется при создании нового объекта
// в форме элемента справочника.
//
// Параметры
//  Объект  - Объект элемента справочника.
//
Процедура УстановитьПредпочитаемогоПоставщика(Объект) Экспорт
	
	// Если объект уже записан в базу, то выходим.
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если Объект.Свойство("Ссылка") И НЕ Объект.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.Свойство("ИсходныйКлючЗаписи") И НЕ Объект.ИсходныйКлючЗаписи.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Объект.Поставщик = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ЗначениеНастройкиЭлектронныхКурсов("РазработчикКурсов");

КонецПроцедуры

Функция ТипыЭлектронныхКурсов() Экспорт
	
	ТипыКурсов = Новый Массив;
	
	СтандартнаяОбработка = Истина;
	ИзучениеЭлектронныхКурсовПереопределяемый.ПриОпределенииВариантаИнтерфейса(ТипыКурсов, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		ТипыКурсов = Новый Массив;
		ТипыКурсов.Добавить(Перечисления.ТипыЭлектронныхКурсов.Слайдовый);
	КонецЕсли;

	Возврат ТипыКурсов;	
	
КонецФункции

// Процедура устанавливает реквизит "Родитель" для нового элемента.
//
Процедура УстановитьРодителяНовогоОбъекта(Объект, Параметры, ИмяСправочника) Экспорт
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Подборка") И ЗначениеЗаполнено(Параметры.Подборка) Тогда
		
		Если Параметры.Свойство("ЭлектронныйРесурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйРесурс) Тогда
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Подборка, ИмяСправочника, Параметры.ЭлектронныйРесурс);
		ИначеЕсли Параметры.Свойство("ЭлектронныйКурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйКурс) Тогда	
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Подборка, ИмяСправочника, Параметры.ЭлектронныйКурс);
		Иначе
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Подборка, ИмяСправочника);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Тест") И ЗначениеЗаполнено(Параметры.Тест) Тогда
		
		Если Параметры.Свойство("ЭлектронныйРесурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйРесурс) Тогда
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Тест, ИмяСправочника, Параметры.ЭлектронныйРесурс);
		ИначеЕсли Параметры.Свойство("ЭлектронныйКурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйКурс) Тогда	
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Тест, ИмяСправочника, Параметры.ЭлектронныйКурс);			
		Иначе
			Объект.Родитель = Справочники.СтраницыЭлементовЭлектронныхКурсов.ГруппаПодчиненныхЭлементов(Параметры.Тест, ИмяСправочника);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ЭлектронныйРесурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйРесурс) Тогда
		
		Объект.Родитель = Справочники.ЭлектронныеКурсы.ГруппаДляХраненияПодчиненныхЭлементов(Параметры.ЭлектронныйРесурс, ИмяСправочника);
		
	ИначеЕсли Параметры.Свойство("Глоссарий") И ЗначениеЗаполнено(Параметры.Глоссарий) Тогда
		
		Если Параметры.Свойство("ЭлектронныйРесурс") И ЗначениеЗаполнено(Параметры.ЭлектронныйРесурс) Тогда
			Объект.Родитель = Справочники.ЭлектронныеГлоссарии.ГруппаПодчиненныхЭлементов(Параметры.Глоссарий, ИмяСправочника, Параметры.ЭлектронныйРесурс);
		Иначе
			Объект.Родитель = Справочники.ЭлектронныеГлоссарии.ГруппаПодчиненныхЭлементов(Параметры.Глоссарий, ИмяСправочника);
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуИзмененияРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	Если НЕ Источник.ОбменДанными.Загрузка Тогда
		Для каждого ЗаписьРегистра Из Источник Цикл
			ЗаписьРегистра.ДатаИзменения = ТекущаяДатаСеанса();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьКодКратныйДесятиПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтменитьУстановкуКода")
		И Источник.ДополнительныеСвойства.ОтменитьУстановкуКода Тогда		
		Возврат;		
	КонецЕсли;	

	ИмяСправочника = Источник.Метаданные().Имя;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	"+ИмяСправочника+".Код КАК Код
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК "+ИмяСправочника+"
	|ГДЕ
	|	"+ИмяСправочника+".Родитель = &Родитель";
	
	Если Источник.Владелец <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И "+ИмяСправочника+".Владелец = &Владелец ";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО
	|	Код УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Родитель", Источник.Родитель); 
	
	Если Источник.Владелец <> Неопределено Тогда
		Запрос.УстановитьПараметр("Владелец", Источник.Владелец); 
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	МаксимальныйКод = Результат.Код;
	
	СтандартнаяОбработка = Ложь;
	
	Если МаксимальныйКод = Неопределено Тогда
		Источник.Код = 10;
	Иначе
		Источник.Код = МаксимальныйКод - (МаксимальныйКод % 10) + 10;
	КонецЕсли;		

КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиЭлементаПередЗаписью(Источник, Отказ) Экспорт	
	
	ОтменитьКонтрольЗаписиОбъекта = Ложь;
	ОтменитьКонтрольЗаписиОбъекта = Источник.ДополнительныеСвойства.Свойство("ОтменитьКонтрольЗаписиОбъекта");
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоКопирование") И Источник.ДополнительныеСвойства.ЭтоКопирование Тогда
		ОтменитьКонтрольЗаписиОбъекта = Истина;
	КонецЕсли;
	
	Если НЕ ОтменитьКонтрольЗаписиОбъекта И НЕ Источник.ОбменДанными.Загрузка Тогда		
		РазработкаЭлектронныхКурсовСлужебный.ИзменениеДанныхОтПоставщикаЗапрещено(Источник.Поставщик, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Источник.ОбменДанными.Загрузка Тогда
		РазработкаЭлектронныхКурсовСлужебный.ИзменениеДанныхОтПоставщикаЗапрещено(Источник.Отбор.Поставщик.Значение, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПереименоватьГруппыХраненияЭлементовЭлектронныхКурсовПриЗаписи(Источник, Отказ) Экспорт	
	
	Если Источник.ДополнительныеСвойства.Свойство("СтароеНаименование")
		И Источник.ДополнительныеСвойства.СтароеНаименование <> Источник.Наименование Тогда		
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыЭлементовЭлектронныхКурсов.Группа КАК Ссылка
			|ИЗ
			|	РегистрСведений.ГруппыЭлементовЭлектронныхКурсов КАК ГруппыЭлементовЭлектронныхКурсов
			|ГДЕ
			|	ГруппыЭлементовЭлектронныхКурсов.ЭлектронныйКурс = &ЭлектронныйКурс";
		
		Запрос.УстановитьПараметр("ЭлектронныйКурс", Источник.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ГруппаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ГруппаОбъект.Наименование = Источник.Наименование;
			ГруппаОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Позволяет определить, можно ли редактировать данные указанного поставщика.
//
Функция ИзменениеДанныхОтПоставщикаЗапрещено(Поставщик, Отказ = Ложь, ПоказыватьСообщение = Истина) Экспорт
	
	ИзменятьТолькоСвоиКурсы = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ЗначениеНастройкиЭлектронныхКурсов("ИзменятьТолькоСвоиКурсы");
	РазработчикКурсов = РазработкаЭлектронныхКурсовСлужебныйПовтИсп.ЗначениеНастройкиЭлектронныхКурсов("РазработчикКурсов");	
	
	Если ИзменятьТолькоСвоиКурсы И Поставщик <> РазработчикКурсов Тогда
		
		Если ПоказыватьСообщение Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Редактирование данных поставщика ""%1"" запрещено'"), Строка(Поставщик));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#КонецОбласти


