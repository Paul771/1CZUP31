
#Область ПрограммныйИнтерфейс

// Процедура вызывается при изменении статуса отправки (сдачи) документа.
//
// Параметры:
//	Ссылка - ссылка на документ.
//	СтатусОтправки - ПеречислениеСсылка.СтатусыОтправки - актуальный статус
//
Процедура ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки) Экспорт
	
	
	
КонецПроцедуры

// Функция должна возвращать дату начала и дату окончания периода
// документа (отчета) по заданной ссылке.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
// 
// Результат:
//	Структура, если документ (отчет) представляется за период.
//	Ключи структуры: ДатаНачала, ДатаОкончания. Ключи содержат дату начала
//	и дату окончания периода, за который оформлен документ. Если документ
//	(отчет) представляется не за период, то в ключах ДатаНачала и ДатаОкончания
//	возвращается дата документа.
//
Функция ПолучитьДатыПериодаДокумента(Ссылка) Экспорт
	
	ПериодОтчета = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ГодОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НалоговыйПериод");
		ПериодОтчета.ДатаНачала = Дата(ГодОтчета, 1, 1);
		ПериодОтчета.ДатаОкончания = Дата(ГодОтчета, 12, 31);
		Возврат ПериодОтчета;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
		ГодОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НалоговыйПериод");
		ПериодОтчета.ДатаНачала = Дата(ГодОтчета, 1, 1);
		ПериодОтчета.ДатаОкончания = Дата(ГодОтчета, 12, 31);
		Возврат ПериодОтчета;
	Иначе
		Возврат ПерсонифицированныйУчет.ПолучитьДатыПериодаДокумента(Ссылка);
	КонецЕсли;
	
КонецФункции

// Функция выгружает заданный документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
//
// Результат:
//	Структура или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище
//		- ТипФайлаВыгрузки - строка
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением)
//		- КодировкаФайлаВыгрузки - перечисление КодировкаТекста
Функция ВыгрузитьДокумент(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлДляОтправки = Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки, КодировкаФайлаВыгрузки");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "СправкиНДФЛДляПередачиВНалоговыйОрган";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки; 	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
		
		Отказ = Ложь;
		
		ФайлДляОтправки = Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПолучитьФайлДляОтправки(Ссылка, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ФайлДляОтправки;
		
	Иначе
		Возврат ПерсонифицированныйУчет.ВыгрузитьДокументы(Ссылка, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры
//  МассивНДС - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - сответствие переданных ссылок на документы и массива структур с полями:
//                 ТипФайла - Строка - описание типа файла;
//                 ИмяФайла - Строка - имя файла с расширением;
//                 АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
Функция ПолучитьФайлыВыгрузкиНДС(МассивНДС, УникальныйИдентификаторФормы) Экспорт
	
	
	
КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры
//  МассивЭД - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - сответствие переданных ссылок на документы и массива структур с полями:
//                 ТипФайла - Строка - описание типа файла;
//                 ИмяФайла - Строка - имя файла с расширением;
//                 АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
Функция ПолучитьФайлыВыгрузкиЭД(МассивЭД, УникальныйИдентификаторФормы) Экспорт
	
	
	
КонецФункции

//Функция возвращает свойства договоров для массива документов
//
//Параметры 
//	МассивСсылок -  массив ссылок на документы ИБ, на основании которых в данном прикладном решении 
//  формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»
//
//Возвращаемое значение: 
//	Соответствие со следующими свойствами:
//	-	ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//	-	значение соответствия - Структура, с полями:
//		-	НомерДоговора, тип: Строка 
//		-	ДатаДоговора, тип: Дата 
//В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, следует помещать пустые значения указанных типов.
Функция ПолучитьНомерДатаДоговораДокументов(МассивСсылок) Экспорт
	
	
	
КонецФункции 

// Функция возвращает свойства сотрудника по СправочникСсылка.ФизическиеЛица и СправочникСсылка.Организации
//
// Параметры функции:
// 	СсылкаФизЛицо 		- СправочникСсылка.ФизическиеЛица
// 	ОрганизацияСсылка 	- СправочникСсылка.Организации
//
// Возвращаемое значение:
// Структура со следующими полями:
//  ФИО - структура:
// 		* Фамилия	- Строка 	- фамилия сотрудника.
// 		* Имя		- Строка 	- имя сотрудника.
// 		* Отчество	- Строка 	- отчество сотрудника.
//  Серия			- Строка 	- серия документа, удостоверяющего личность сотрудника.
//  Номер			- Строка 	- номер документа, удостоверяющего личность сотрудника.
//  ДатаВыдачи		- Дата 		- дата выдачи документа, удостоверяющего личность сотрудника.
//  КемВыдан		- Строка 	- кем выдан документ, удостоверяющий личность сотрудника.
//  ВидДокумента	- СправочникСсылка.ВидыДокументовФизическихЛиц - вид документа, удостоверяющего личность сотрудника.
//  Должность		- Строка 	- должность сотрудника.
//  Подразделение	- Строка 	- подразделение, в котором работает сотрудник.
//  СНИЛС			- Строка 	- СНИЛС сотрудника.
//  ДатаРождения	- Дата 		- Дата рождения.
//  МестоРождения	- Строка 	- Длина не более 50 символов. Место рождения.
//  КодПодразделения - Строка 	- Код подразделения организации, выдавшего документ, удостоверяющий личность.
//  Пол             - Строка 	- пол физ. лица "Мужской" или "Женский".
//  Гражданство     - СправочникСсылка.СтраныМира - гражданство сотрудника.
//  ТелефонРабочий  - Строка 	- Рабочий телефон сотрудника.
// 
Функция ПолучитьДанныеИсполнителя(СсылкаФизЛицо, ОрганизацияСсылка) Экспорт
	
	ДанныеИсполнителя = Новый Структура;
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ДанныеИсполнителя.Вставить("ФИО", ФИО);
	ДанныеИсполнителя.Вставить("ДатаРождения", '00010101');
	ДанныеИсполнителя.Вставить("МестоРождения", "");
	ДанныеИсполнителя.Вставить("Пол", Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеИсполнителя.Вставить("СНИЛС", "");
	ДанныеИсполнителя.Вставить("Серия", "");
	ДанныеИсполнителя.Вставить("Номер", "");
	ДанныеИсполнителя.Вставить("ДатаВыдачи", '00010101');
	ДанныеИсполнителя.Вставить("КемВыдан", "");
	ДанныеИсполнителя.Вставить("КодПодразделения", "");
	ДанныеИсполнителя.Вставить("Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеИсполнителя.Вставить("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
	ДанныеИсполнителя.Вставить("Должность", "");
	ДанныеИсполнителя.Вставить("Подразделение", "");
	
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(СсылкаФизЛицо);
	
	НеобходимыеДанные = "Фамилия, Имя, Отчество, ДатаРождения, МестоРождения, Пол, СтраховойНомерПФР, ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, Страна";
	
	ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, НеобходимыеДанные);
	
	Если ДанныеФизическихЛиц.Количество() > 0 Тогда
		
		ДанныеФизическогоЛица = ДанныеФизическихЛиц[0];
		
		ЗаполнитьЗначенияСвойств(ДанныеИсполнителя.ФИО, ДанныеФизическогоЛица);
		
		ДанныеИсполнителя.ДатаРождения	= ДанныеФизическогоЛица.ДатаРождения;
		ДанныеИсполнителя.МестоРождения	= ДанныеФизическогоЛица.МестоРождения;
		ДанныеИсполнителя.Пол			= Строка(ДанныеФизическогоЛица.Пол);
		
		ДанныеИсполнителя.Гражданство = ДанныеФизическогоЛица.Страна;
		
		ДанныеИсполнителя.СНИЛС = ДанныеФизическогоЛица.СтраховойНомерПФР;
		
		ДанныеИсполнителя.Серия = ДанныеФизическогоЛица.ДокументСерия;
		ДанныеИсполнителя.Номер = ДанныеФизическогоЛица.ДокументНомер;

		ДанныеИсполнителя.ДатаВыдачи		= ДанныеФизическогоЛица.ДокументДатаВыдачи;
		ДанныеИсполнителя.КемВыдан			= ДанныеФизическогоЛица.ДокументКемВыдан;
		ДанныеИсполнителя.КодПодразделения	= ДанныеФизическогоЛица.ДокументКодПодразделения;
		ДанныеИсполнителя.ВидДокумента		= ДанныеФизическогоЛица.ДокументВид;	
		
	КонецЕсли;
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Ложь, ОрганизацияСсылка, ТекущаяДатаСеанса());
	
	Если ОсновныеСотрудники.Количество() > 0
		И ЗначениеЗаполнено(ОсновныеСотрудники[0].Сотрудник) Тогда
		
		СписокСотрудников = Новый Массив;
		СписокСотрудников.Добавить(ОсновныеСотрудники[0].Сотрудник);
		
		НеобходимыеДанные = "Должность, Подразделение";
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, НеобходимыеДанные);
		
		Если КадровыеДанные.Количество() > 0 Тогда
			КадровыеДанныеСотрудника = КадровыеДанные[0];
			
			Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.Подразделение) Тогда
				ДанныеИсполнителя.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника.Подразделение, "Наименование");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.Должность) Тогда
				ДанныеИсполнителя.Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника.Должность, "Наименование");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеИсполнителя;
	
КонецФункции

// Функция возвращает соответствие или массив данных об ответственных лицах организации
//	Параметры функции:
//		ОрганизацияСсылка - СправочникСсылка.Организации;
//		ПолучитьСоответствие - Булево.
//
//	Возвращаемое значение:
//			Соответствие или массив, сведений об ответственных лицах организации.
//		Если значение параметра "ПолучитьСоответствие" указано и значение параметра 
//		равно "Истина", то функция вернет коллекцию соответствие с ключем признака ответственного лица (тип "Строка")
//		и стуктуру данных физ. лица.
//			Структура данных физ. лца состоит из значения "должность" должности ответветственного лица (тип "Строка") 
//			и "СНИЛС" значение реквизита "СтраховойНомерПФР" справочника физ. лица (тип "Строка").
//		В противном случаи вернется массив ссылок с типом СправочникСсылка.ФизическиеЛица.
//
Функция ПолучитьДанныеОтветственныхЛиц(ОрганизацияСсылка, ПолучитьСоответствие = Ложь) Экспорт
	
	ДанныеОтветсвенныхЛиц = ЗарплатаКадры.ОтветственныеЛицаОрганизации(ОрганизацияСсылка, "Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер", ТекущаяДатаСеанса());
	
	Если ПолучитьСоответствие Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = Новый Массив();
	КонецЕсли;
	
	СписокФизЛиц = Новый Массив;
	
	Если ЗначениеЗаполнено(ДанныеОтветсвенныхЛиц.Руководитель) Тогда
		СписокФизЛиц.Добавить(ДанныеОтветсвенныхЛиц.Руководитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтветсвенныхЛиц.Руководитель) Тогда
		СписокФизЛиц.Добавить(ДанныеОтветсвенныхЛиц.ГлавныйБухгалтер);
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, СписокФизЛиц, "СтраховойНомерПФР");
	
	СтраховыеНомера = Новый Соответствие;
	Для Каждого КадровыеДанныеФизЛица Из КадровыеДанные Цикл
		СтраховыеНомера.Вставить(КадровыеДанныеФизЛица.ФизическоеЛицо, КадровыеДанныеФизЛица.СтраховойНомерПФР);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОтветсвенныхЛиц.Руководитель) Тогда
		Если ПолучитьСоответствие Тогда
			ДолжностьРуководителя = "";                               
			Если ЗначениеЗаполнено(ДанныеОтветсвенныхЛиц.ДолжностьРуководителя) Тогда
				ДолжностьРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтветсвенныхЛиц.ДолжностьРуководителя, "Наименование"); 	
			КонецЕсли;
			
			СНИЛС = ?(СтраховыеНомера.Получить(ДанныеОтветсвенныхЛиц.Руководитель) = Неопределено, "", СтраховыеНомера[ДанныеОтветсвенныхЛиц.Руководитель]);
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Должность", ДолжностьРуководителя);
			СтруктураДанных.Вставить("СНИЛС", СНИЛС);
			Результат.Вставить("Руководитель", СтруктураДанных);
		Иначе
			Результат.Добавить(ДанныеОтветсвенныхЛиц.Руководитель);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтветсвенныхЛиц.ГлавныйБухгалтер) Тогда
		Если ПолучитьСоответствие Тогда
			СНИЛС = ?(СтраховыеНомера.Получить(ДанныеОтветсвенныхЛиц.ГлавныйБухгалтер) = Неопределено, "", СтраховыеНомера[ДанныеОтветсвенныхЛиц.ГлавныйБухгалтер]);
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Должность", "Главный бухгалтер");
			СтруктураДанных.Вставить("СНИЛС", СНИЛС);
			Результат.Вставить("ГлавныйБухгалтер", СтруктураДанных);
		Иначе
			Результат.Добавить(ДанныеОтветсвенныхЛиц.ГлавныйБухгалтер);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция должна возвращать код подчиненности реестра сведений на выплату пособий в ФСС по заданной ссылке.
// Параметры:      
//  Ссылка - ссылка реестр сведений на выплату пособий в ФСС.
// 
// Результат:
//  Строка, 5 символов.  В случае неудачи – пустая строка.
Функция ПолучитьКодПодчиненностиРеестраСведенийНаВыплатуПособийФСС(Ссылка) Экспорт
	КодПодчиненности = "";
	Попытка
		КодПодчиненности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "КодПодчиненностиФСС");
	Исключение
	КонецПопытки;
	Возврат КодПодчиненности;	
КонецФункции

// Функция должна возвращать код ИФНС получателя отправляемого объекта
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
// Строка, длина 4. В случае неудачи - пустая строка
Функция ПолучитьКодИФНСПолучателяПоСсылке(ОбъектСсылка) Экспорт
	
	
	
КонецФункции

// Возвращает ключ записи регистра сведений ОтветственныеЛицаОрганизаций
//
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой необходимо получить записи в регистре сведений 
//  ОтветственноеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, по которому необходимо получить записи в регистре сведений 
//
// Возвращаемое значение:
//   РегистрСведенийКлючЗаписи - ключ записи регистра сведений, полученный по указанным входящим параметрам
//   РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч() - в случае, если ключ не найден
//
Функция ПолучитьКлючЗаписиРегистраОтветственныеЛицаОрганизаций(Организация,ОтветственноеЛицо)  Экспорт
	
	
	
КонецФункции

// Возвращает ссылку на Главного бухгалтера 
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, главного бухгалтера которой необходимо получить
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - главный бухгалтер организации
//   Неопределено, если главный бухгалтер отсутствует
//
Функция ГлБухгалтер(Организация)  Экспорт
	
	Сведения = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Организация, "ГлавныйБухгалтер", ТекущаяДатаСеанса());

	Возврат Сведения.ГлавныйБухгалтер;
	
КонецФункции

// Возвращает ссылку на Руководителя организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, руководителя которой необходимо получить
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - руководитель организации
//   Неопределено, если руководитель отсутствует
//
Функция Руководитель(Организация) Экспорт
	
	Сведения = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Организация, "Руководитель", ТекущаяДатаСеанса());
	
	Возврат Сведения.Руководитель;
	
КонецФункции

// Функция для объекта-источника возвращает ссылку на организацию. 
// В данной функции необходимо определить получение организации для всех типов объектов, которые должны отоборажаться
// в журнале Управление обменом и не имеют реквизита с именем "Организация"
// 
// Параметры:
//  Источник - ДокументСсылка, СправочникСсылка  - объект, который отборажается в форме Управление обменом.
//
// Результат:
//  СправочникСсылка.Организации,
//	Неопределено, если получить ссылку на организацию не получилось
//
Функция ПолучитьСсылкуНаОрганизациюИсточника(Источник) Экспорт
	
	
	
КонецФункции

// Возвращает ИНН контрагента для случая, когда ИНН в справочнике Контрагенты не хранится в реквизите с именем ИНН 
//
// Параметры
//  Контрагент  - <Справочник.Контрагент> - Контрагент, для котрого необходимо получить ИНН
// Возвращаемое значение:
//   ИНН   - строка - ИНН контрагента
//
Функция ИННКонтрагента(Контрагент) Экспорт
	
	
	
КонецФункции

// Функция предназначена для поиска физического лица, найденного по переданным фамилии, имени и отчеству
//
// Параметры
//  Фамилия		- Строка - Фамилия физического лица
//  Имя			- Строка - Имя физического лица
//  Отчество	- Строка - Отчество физического лица
//  СНИЛС		- Строка - СНИЛС физического лица
//  Организация - СправочникиСсылка.Организации - организация, в которой работает физическое лицо
//
// Возвращаемое значение:
//   СправочникиСсылка.ФизическиеЛица - Физическое лицо, найденное по переданным фамилии, имени и отчеству
//		Если найдено несколько физических лиц, брать первого
//
Функция ФизЛицоПоФИО(Фамилия, Имя, Отчество, СНИЛС, Организация) Экспорт
	
	Возврат КадровыйУчет.ФизическоеЛицоПоФИОСНИЛСИОрганизации(Фамилия, Имя, Отчество, СНИЛС, Организация);
	
КонецФункции

// Функция возвращает вид отправляемого документа 
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
//	СправочникСсылка.ВидыОтправляемыхДокументов, в случае неудачи - пустая ссылка данного типа
//
Функция ПолучитьВидОтправляемогоДокументаПоСсылке(ОбъектСсылка) Экспорт
	
	
	
КонецФункции

#Область ДокументыПоТребованиюФНС

// Помещает присоединенные файлы объектов ИБ, 
// являющихся источниками для заполнения реквизитов сканированных документов, 
// представляемых по требованию ФНС, во временное хранилище и возвращает их свойства.
//
// Не требуется заполнять, если указанные присоединенные файлы хранятся при участии механизма БСП "Присоединенные файлы"
//
// Следует возвращать свойства всех файлов следующих типов: JPEG, TIFF, PNG, PDF.
//
// Параметры 
//	ИдентификаторФормыВладельца	- УникальныйИдентификатор, уникальный идентификатор формы, 
//		во временное хранилище которой требуется поместить данные присоединенных файлов.
//	ФайлыИсточников				- Соответствие, соответствие переданных ссылок на источники и массива структур 
//		Ключ 		- ссылка на источник
//		Значение 	- Массив, массив структур (начальное значение: пустой массив)
//		(каждый элемент массива -  структура свойств одного файла)
//
//		Поля структуры:
//			Имя			- Строка, короткое имя файла с расширением
//			Размер		- Число, размер файла в байтах
//			АдресДанных	- Строка, адрес временного хранилища
//
Процедура ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, ИдентификаторФормыВладельца) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
