
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы для авансовых расчетов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			Сумма
//			СуммаКорректировкиВыплаты
//
//		БазаУдержаний - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Удержание - ссылка на план видов расчета.
//			Сумма - "вес" строки базы удержаний. В соответствии с данными 
//					весами и будет выполнено распределение удержаний.
//			
//		ПрочиеДоходы - таблица значений с колонками.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияАвансом(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, БазаУдержаний, ЗаписыватьДвижения = Ложь) Экспорт
	
	СтрокиНачислений = Новый Массив;
	СтрокиУдержаний = Новый Массив;
	
	Если Начисления <> Неопределено Тогда
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникамАвансом.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
			СтрокиНачислений.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
		// При использовании учета по источникам удержания уже распределены
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			Для Каждого Строка Из Удержания Цикл
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Период				= ПериодРегистрации;
				НоваяСтрока.ПериодДействия		= ПериодРегистрации;
				НоваяСтрока.Организация			= Организация;
				НоваяСтрока.НачислениеУдержание = Строка.Удержание;
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЦикла;
			
		// При отсутствии учета по источникам удержания нужно распределить.
		Иначе
			// При отсутствии учета по источникам удержания нужно распределить.
			Если БазаУдержаний = Неопределено Тогда
				// Получить данные для распределения удержаний по текущим начислениям.
				МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
				ДанныеДляУчетаУдержаний = УчетНачисленнойЗарплаты.ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация, Истина);
			КонецЕсли;
			УдержанияКРаспределению = УчетНачисленнойЗарплаты.КоллекцияРаспределяемыхУдержаний(Истина);
			Для Каждого СтрокаУдержания Из Удержания Цикл
				НоваяСтрока = УдержанияКРаспределению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
				НоваяСтрока.НачислениеУдержание = СтрокаУдержания.Удержание;
			КонецЦикла;
			УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.РаспределениеУдержанийПоРабочимМестам(УдержанияКРаспределению, ПериодРегистрации, Организация, ДанныеДляУчетаУдержаний.БазовыеНачисления, ДанныеДляУчетаУдержаний.УжеУдержано, Истина);
		
		КонецЕсли;
		// Заполняем движения 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	КонецЕсли;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записать();
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	Для Каждого Строка Из СтрокиНачислений Цикл
		НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Если УдержанияПоРабочимМестам <> Неопределено Тогда
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
		Движения, Отказ, 
		Организация, ПериодРегистрации, 
		НачисленияДляВзаиморасчетов, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы для авансовых расчетов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (не обязательно)
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета 
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьОтработанноеВремяАвансом(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления.Колонки.Найти("ПериодДействия") = Неопределено Тогда
		Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		Начисления.ЗаполнитьЗначения(ПериодРегистрации, "ПериодДействия");
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Период 		= ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
	КонецЦикла;
	
	Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записать();
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Выполняет распределение удержанных займов по базе начислений сотрудника.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		ПогашениеЗаймов - таблица значений с колонками
//			ФизическоеЛицо.
//			Подразделение
//			ВидУдержания - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, Организация, ПериодРегистрации, ПогашениеЗаймов, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ПогашениеЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		// При использовании учета по источникам удержания уже распределены.
		
		УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
		Для Каждого Строка Из ПогашениеЗаймов Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
			Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
					Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			Иначе
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЕсли		
			
		КонецЦикла;
		
		// Заполняем движения 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
		// Данные для взаиморасчетов
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
				НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли	
		КонецЦикла;
		
	Иначе
		// При отсутствии учета по источникам удержания нужно распределить.
		
		СтрокиУдержаний = Новый Массив;
		
		// Получить данные для распределения удержаний по умолчанию.
		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ПогашениеЗаймов, "ФизическоеЛицо", Истина);
		ДанныеДляУчетаУдержаний = УчетНачисленнойЗарплаты.ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация);
		
		СтрокиБезБазы = Новый Массив;
		Для Каждого Строка Из ПогашениеЗаймов Цикл
			СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, ДанныеДляУчетаУдержаний.БазовыеНачисления, Строка.Подразделение);
			Если СтрокиРаспределения.Количество() = 0 Тогда
				// Если не нашлись строки по физическому лицу и подразделению, то попробуем найти хотя бы по физическому лицу.
				СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, ДанныеДляУчетаУдержаний.БазовыеНачисления);
				Если СтрокиРаспределения.Количество() = 0 Тогда
					// Если вовсе нет строк по физлицу в базе удержаний, запомним эту строку.
					СтрокиБезБазы.Добавить(Строка);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Распределено = Ложь;
			Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
					Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				Распределено = СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
			Иначе 
				Распределено = УчетНачисленнойЗарплаты.СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
			КонецЕсли;
			Если Не Распределено Тогда
				СтрокиБезБазы.Добавить(Строка);
			КонецЕсли;					
		КонецЦикла;
		
		Если СтрокиБезБазы.Количество() > 0 Тогда
			// Получить массив физических лиц, данные которых еще не распределились.
			МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБезБазы, "ФизическоеЛицо", Истина);
			// Получить данные для распределения удержаний по умолчанию.
			БазаУдержанийПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
			
			// Распределить те строки, которые остались без базы.
			ОсновныеСотрудники = Неопределено;
			Для Каждого Строка Из СтрокиБезБазы Цикл
				СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержанийПоУмолчанию, Строка.Подразделение);
				Если СтрокиРаспределения.Количество() = 0 Тогда
					// Если не нашлись строки по физическому лицу и подразделению, то попробуем найти хотя бы по физическому лицу.
					СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержанийПоУмолчанию);
				КонецЕсли;
				Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
						Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда 
					Распределено = СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
					Если Не Распределено Тогда
						Если ОсновныеСотрудники = Неопределено Тогда 
							ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБезБазы, "ФизическоеЛицо", Истина);
							ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Истина, Организация, ПериодРегистрации);
							ОсновныеСотрудники.Индексы.Добавить("ФизическоеЛицо");
						КонецЕсли;
						СтрокаСотрудника = ОсновныеСотрудники.Найти(Строка.ФизическоеЛицо, "ФизическоеЛицо");
						Если СтрокаСотрудника <> Неопределено Тогда 
							НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							НоваяСтрока.Период			= ПериодРегистрации;
							НоваяСтрока.ПериодДействия	= ПериодРегистрации;
							НоваяСтрока.ФизическоеЛицо	= Строка.ФизическоеЛицо;
							НоваяСтрока.Сотрудник		= СтрокаСотрудника.Сотрудник;
							НоваяСтрока.Подразделение	= Строка.Подразделение;
							НоваяСтрока.Организация		= Организация;
							НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
							НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
							НоваяСтрока.Сумма = Строка.Сумма;
							СтрокиУдержаний.Добавить(НоваяСтрока);
						КонецЕсли;
					КонецЕсли;
				Иначе 
					Распределено = УчетНачисленнойЗарплаты.СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Строка Из СтрокиУдержаний Цикл
			Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли;	

	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			Начисление
//			Сумма
//			ДокументОснование
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			Контрагент, не обязательно
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		НДФЛ - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			РегистрацияВНалоговомОргане
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		СпособРасчетов - ПеречисленияСсылка.СпособыРасчетовСФизическимиЛицами, необязательный.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, НДФЛ = Неопределено, СпособРасчетов = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	
	ТаблицаНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоКонтрагентамАкционерам");
	ТаблицаУдержаний  = ТаблицаНачислений.СкопироватьКолонки();
	РегистрироватьВзаиморасчеты = (СпособРасчетов <> Неопределено);
	
	Если Начисления <> Неопределено Тогда
		
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если НДФЛ <> Неопределено Тогда
		
		Для Каждого Строка Из НДФЛ Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = Строка.Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты      = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записать();
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Ложь;
	КонецЕсли;
	
	Если РегистрироватьВзаиморасчеты Тогда
		ВзаиморасчетыПоПрочимДоходам.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, СпособРасчетов, ТаблицаНачислений, ТаблицаУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаНачисленияУдержанияПоСотрудникам() Экспорт
	
	МассивТиповНачислениеУдержание = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Измерения.НачислениеУдержание.Тип.Типы();
	МассивТиповДокументОснование = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Реквизиты.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;

	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов(МассивТиповНачислениеУдержание));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ГруппаНачисленияУдержанияВыплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНачисленияУдержанияВыплаты"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));

	Возврат Таблица;
	
КонецФункции

// Формирует движения по регистру ОтработанноеВремяПоСотрудникамКорректировка, 
// предназначенный для корректного учета отработанных дней при наличии более одного вида рабочего времени за день.
//
Процедура ЗарегистрироватьКорректировкиОтработанногоВремени(Движения, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Если к этому моменту не была выполнена запись необходимых для чтения наборов записей, выполним ее.
	Если Движения.ОтработанноеВремяПоСотрудникам.Записывать Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	Если Движения.Начисления.Записывать Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ОтработанноеВремяПоСотрудникам.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Период КАК ПериодРегистрации,
		|	ОтработанноеВремяПоСотрудникам.ПериодДействия,
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала,
		|	ОтработанноеВремяПоСотрудникам.Организация,
		|	ОтработанноеВремяПоСотрудникам.ФизическоеЛицо,
		|	ОтработанноеВремяПоСотрудникам.Сотрудник,
		|	ОтработанноеВремяПоСотрудникам.Подразделение,
		|	ОтработанноеВремяПоСотрудникам.Начисление,
		|	ОтработанноеВремяПоСотрудникам.ГруппаНачисленияУдержанияВыплаты
		|ПОМЕСТИТЬ ВТОтработанноеВремяПоДокументу
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор = &Регистратор
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетНормыВремени = ИСТИНА
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетОтработанногоВремени = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтработанноеВремяПоСотрудникам.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПДНачислений.Регистратор,
		|	ФПДНачислений.НомерСтроки,
		|	ФПДНачислений.Сторно,
		|	ФПДНачислений.Сотрудник,
		|	ФПДНачислений.ВидРасчета,
		|	ФПДНачислений.ПериодРегистрации,
		|	ФПДНачислений.ПериодРегистрацииВремени,
		|	ФПДНачислений.ПериодДействия,
		|	ФПДНачислений.ПериодДействияНачало,
		|	ФПДНачислений.ПериодДействияКонец
		|ПОМЕСТИТЬ ВТФПДНачислений
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
		|				И ВидРасчета.ЗачетНормыВремени = ИСТИНА
		|				И (ПериодРегистрации, ПериодДействия, Сотрудник) В
		|					(ВЫБРАТЬ
		|						ВТОтработанноеВремяПоДокументу.ПериодРегистрации,
		|						ВТОтработанноеВремяПоДокументу.ПериодДействия,
		|						ВТОтработанноеВремяПоДокументу.Сотрудник
		|					ИЗ
		|						ВТОтработанноеВремяПоДокументу)) КАК ФПДНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПДНачислений.Сотрудник,
		|	ФПДНачислений.ВидРасчета КАК Начисление,
		|	ФПДНачислений.Сторно,
		|	ФПДНачислений.ПериодРегистрации,
		|	ФПДНачислений.ПериодДействия,
		|	ФПДНачислений.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
		|	ФПДНачислений.ПериодРегистрацииВремени,
		|	ФПДНачислений.ПериодДействияНачало КАК НачалоИнтервала,
		|	ФПДНачислений.ПериодДействияКонец КАК ОкончаниеИнтервала
		|ПОМЕСТИТЬ ВТПересекающиесяНачисления
		|ИЗ
		|	ВТФПДНачислений КАК ФПДНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ФПДПересечения
		|		ПО (ФПДПересечения.Сотрудник = ФПДНачислений.Сотрудник)
		|			И (ФПДПересечения.Сторно = ФПДНачислений.Сторно)
		|			И (ФПДПересечения.ПериодРегистрации = ФПДНачислений.ПериодРегистрации)
		|			И (ФПДПересечения.ВидРасчета <> ФПДНачислений.ВидРасчета)
		|			И (ФПДПересечения.Регистратор <> ФПДНачислений.Регистратор
		|				ИЛИ ФПДПересечения.НомерСтроки <> ФПДНачислений.НомерСтроки)
		|			И (ФПДПересечения.ПериодДействияНачало <= ФПДНачислений.ПериодДействияКонец)
		|			И (ФПДПересечения.ПериодДействияКонец >= ФПДНачислений.ПериодДействияНачало)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пересечения.Сотрудник,
		|	Пересечения.ПериодРегистрации КАК ДатаАктуальности,
		|	Пересечения.ПериодДействия КАК Месяц,
		|	НАЧАЛОПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК Пересечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТСотрудникиДляРасчетаВремени КАК Сотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	
	// Для полученных пересечений периодов, нужно определить фактическое рабочее время (количество дней).
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.НачалоИнтервала,
		|	ПересекающиесяНачисления.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТНетДанныхПоВидуУчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|ГДЕ
		|	ФактическоеВремя.ВидУчетаВремени ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания КАК ИндексНачисления,
		|	ПересекающиесяНачисления.Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.НачалоИнтервала,
		|	ФактическоеВремя.Дата
		|ПОМЕСТИТЬ ВТДанныеПоДням
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания,
		|	ПересекающиесяНачисления.Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.НачалоИнтервала,
		|	ФактическоеВремя.Дата
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = &РабочееВремя)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНетДанныхПоВидуУчетаВремени КАК НетДанныхПоВидуУчетаВремени
		|		ПО (НетДанныхПоВидуУчетаВремени.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (НетДанныхПоВидуУчетаВремени.ПериодРегистрации = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (НетДанныхПоВидуУчетаВремени.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.Дата,
		|	ПересекающиесяНачисления.Сторно,
		|	МИНИМУМ(ПересекающиесяНачисления.ИндексНачисления) КАК ИндексНачисления
		|ПОМЕСТИТЬ ВТПриоритетыНачислений
		|ИЗ
		|	ВТДанныеПоДням КАК ПересекающиесяНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.Дата,
		|	ПересекающиесяНачисления.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.Сторно,
		|	ВЫБОР
		|		КОГДА НеобходимыеКорректировки.Сторно
		|			ТОГДА -НеобходимыеКорректировки.КорректировкаДней
		|		ИНАЧЕ НеобходимыеКорректировки.КорректировкаДней
		|	КОНЕЦ КАК КорректировкаДней
		|ПОМЕСТИТЬ ВТНеобходимыеКорректировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|		ПересекающиесяНачисления.Начисление КАК Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|		ПересекающиесяНачисления.НачалоИнтервала КАК ДатаНачала,
		|		ПересекающиесяНачисления.Сторно КАК Сторно,
		|		КОЛИЧЕСТВО(ПересекающиесяНачисления.Дата) КАК КорректировкаДней
		|	ИЗ
		|		ВТДанныеПоДням КАК ПересекающиесяНачисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыНачислений КАК ПриоритетыНачислений
		|			ПО ПересекающиесяНачисления.Сотрудник = ПриоритетыНачислений.Сотрудник
		|				И ПересекающиесяНачисления.Сторно = ПриоритетыНачислений.Сторно
		|				И ПересекающиесяНачисления.ПериодРегистрации = ПриоритетыНачислений.ПериодРегистрации
		|				И ПересекающиесяНачисления.ПериодДействия = ПриоритетыНачислений.ПериодДействия
		|				И ПересекающиесяНачисления.Дата = ПриоритетыНачислений.Дата
		|				И ПересекающиесяНачисления.ИндексНачисления <> ПриоритетыНачислений.ИндексНачисления
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПересекающиесяНачисления.Сотрудник,
		|		ПересекающиесяНачисления.Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации,
		|		ПересекающиесяНачисления.НачалоИнтервала,
		|		ПересекающиесяНачисления.ПериодДействия,
		|		ПересекающиесяНачисления.Сторно) КАК НеобходимыеКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыполненныеКорректировки.Период КАК ПериодРегистрации,
		|	ВыполненныеКорректировки.ПериодДействия КАК ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала КАК ДатаНачала,
		|	ВыполненныеКорректировки.Организация КАК Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник КАК Сотрудник,
		|	ВыполненныеКорректировки.Подразделение КАК Подразделение,
		|	ВыполненныеКорректировки.Начисление КАК Начисление,
		|	СУММА(ВыполненныеКорректировки.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ВыполненныеКорректировки.ОплаченоДней) КАК ОплаченоДней
		|ПОМЕСТИТЬ ВТВыполненныеКорректировки
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ВыполненныеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоДокументу КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = ВыполненныеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.ПериодРегистрации = ВыполненныеКорректировки.Период)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = ВыполненныеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = ВыполненныеКорректировки.ДатаНачала)
		|			И (ОтработанноеВремяПоДокументу.Начисление = ВыполненныеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыполненныеКорректировки.Период,
		|	ВыполненныеКорректировки.ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала,
		|	ВыполненныеКорректировки.Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник,
		|	ВыполненныеКорректировки.Подразделение,
		|	ВыполненныеКорректировки.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней,
		|	ОтработанноеВремяПоДокументу.Подразделение,
		|	ОтработанноеВремяПоДокументу.ФизическоеЛицо,
		|	ОтработанноеВремяПоДокументу.Организация,
		|	ОтработанноеВремяПоДокументу.ГруппаНачисленияУдержанияВыплаты,
		|	ОтработанноеВремяПоДокументу.ОтработаноДней КАК ОтработаноДнейЗарегистрировано,
		|	ОтработанноеВремяПоДокументу.ОплаченоДней КАК ОплаченоДнейЗарегистрировано,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОтработаноДней, 0) КАК ОтработаноДнейКорректировка,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОплаченоДней, 0) КАК ОплаченоДнейКорректировка
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ОтработанноеВремяПоДокументу.Период = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = НеобходимыеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполненныеКорректировки КАК ВыполненныеКорректировки
		|		ПО (ВыполненныеКорректировки.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ВыполненныеКорректировки.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Подразделение = ОтработанноеВремяПоДокументу.Подразделение)
		|			И (ВыполненныеКорректировки.ПериодРегистрации = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ВыполненныеКорректировки.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Для обхода используем две выборки: 
	// - первая - это необходимые корректировки
	// - вторая - развернутые по подразделениям значения зарегистрированного времени и уже выполненные корректировки
	// нужна для уточненного заполнения подразделений, сведения о которых теряются в регистре расчета.
	
	ВыборкаКорректировок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ПериодРегистрации, ПериодДействия, ДатаНачала, Сторно");
	Пока ВыборкаКорректировок.Следующий() Цикл
		// Количество дней, которые нужно в целом по этому виду расчета скорректировать.
		КорректировкаПоНачислению = ВыборкаКорректировок.КорректировкаДней;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаКорректировок);
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			// Если строка с признаком сторно применяем обратные правила арифметики.
			// НеобходимаяКорректировка - значение, которое всего по этой строке предполагалось записать без учета уже ранее
			//                            выполненных корректировок.
			// КорректировкаПоСтроке - значение по этой строке с учетом ранее выполненных корректировок.
			Если ВыборкаКорректировок.Сторно Тогда
				НеобходимаяКорректировка = Макс(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Мин(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			Иначе
				НеобходимаяКорректировка = Мин(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Макс(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			КонецЕсли;
			
			// Уменьшаем остаток корректируемых дней.
			КорректировкаПоНачислению = КорректировкаПоНачислению - НеобходимаяКорректировка;
			
			Если КорректировкаПоСтроке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = Выборка.ПериодРегистрации;
			НоваяСтрока.ОтработаноДней = - КорректировкаПоСтроке;
			НоваяСтрока.ОплаченоДней = - КорректировкаПоСтроке;
			
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать Тогда
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записать();
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправляемого документа по регистрам подсистемы.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент	 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать				 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ВзаиморасчетыССотрудникамиРасширенный.СторнироватьНачисленнуюЗарплату(Движения, ИсправленныйДокумент,, Записывать);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, ИсходнаяСтрока, СтрокиРаспределения, СтрокиУдержаний, ВидУдержания) Экспорт
	
	Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
	МассивСумм = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ИсходнаяСтрока.Сумма, Коэффициенты);
	
	Если МассивСумм = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По СтрокиРаспределения.ВГраница() Цикл
		
		СтрокаРаспределения = СтрокиРаспределения[ИндексСтроки];
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
		НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
		НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.НачислениеУдержание = ВидУдержания;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		НоваяСтрока.Сумма = МассивСумм[ИндексСтроки];
		СтрокиУдержаний.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНачисленнойЗарплатыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс)
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		УчетНачисленнойЗарплатыБазовый.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтчетыПечатныеФормыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременно'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НачисленоСдельно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоСдельно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Сдельно'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// ДругиеДоходы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДругиеДоходы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Другие доходы в виде различных социальных и материальных благ'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 11;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспо- собности'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 12;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 13;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 10;
	НоваяСтрока.ПриоритетКолонки = 14;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 15);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru = 'Удержания по исполнитель-
		|ному листу'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)))";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401с2015() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)))";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ ((ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)))";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401с2015(ПерваяПоловинаМесяца = Ложь) Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	Если Не ПерваяПоловинаМесяца Тогда
		
		// Аванс (Выплачено / заработная плата)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВАванс";
		НоваяСтрока.Заголовок = НСтр("ru = 'заработная
			|плата'");
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 4;
		НоваяСтрока.ПриоритетКолонки = 4;
		
		// Межрасчет (Выплачено / выплаты в межрасчетный период)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВМежрасчет";
		НоваяСтрока.Заголовок = НСтр("ru = 'в межрасчет-
			|ный период'");
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 5;
		НоваяСтрока.ПриоритетКолонки = 5;
		
	КонецЕсли;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 6);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Процедура ДополнитьДополнительныеНачисления(ДополнительныеНачисления, ПорядокКолонки)
	
	МассивВсехКатегорий = Новый Массив;
	Для каждого СтрокаНачисления Из ДополнительныеНачисления Цикл
		Для каждого КатегорияКолонки Из СтрокаНачисления.КатегорииКолонки Цикл
			МассивВсехКатегорий.Добавить(КатегорияКолонки);
		КонецЦикла;
	КонецЦикла;
	
	ДействующиеКатегории = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		Если МассивВсехКатегорий.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если МассивВсехКатегорий.Найти(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеУдержания(ДополнительныеУдержания, ПорядокКолонки)
	
	ДействующиеКатегории = Перечисления.КатегорииУдержаний.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Начисления - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные начисления.
//
//	Возвращаемое значение:
//		ПорядокНачислений - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокНачислений = Начисления.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаНачисления Из Начисления Цикл
			Если (СтрокаНачисления.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаНачисления.Имя) <> Неопределено)
				И СтрокаНачисления.ВыводитьКолонку И ПорядокНачислений.Найти(СтрокаНачисления.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокНачислений.Сортировать("ПорядокКолонки");
	ПорядокНачислений.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из ПорядокНачислений Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокНачислений;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Удержания - Таблица значений, полученная с помощью метода
//		            "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода
//		                                    ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные удержания.
//
//	Возвращаемое значение:
//		ПорядокУдержаний - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокУдержаний = Удержания.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаУдержания Из Удержания Цикл
			Если (СтрокаУдержания.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаУдержания.Имя) <> Неопределено)
				И СтрокаУдержания.ВыводитьКолонку И ПорядокУдержаний.Найти(СтрокаУдержания.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокУдержаний.Сортировать("ПорядокКолонки");
	ПорядокУдержаний.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из ПорядокУдержаний Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокУдержаний;
	
КонецФункции

// Возвращает условие, сформированное с учетом категории начисления/удержания.
//
//	Параметры:
//		МассивКатегорий - Массив - Категории начислений/удержаний, входящие в условие.
//		МассивВсехКатегорий - Массив - Все используемые в условиях категории, формируется для правильного формирования
//		                               условия по "Прочим" начислениям/удержаниям.
//		ВыражениеУсловия - Строка - выражение выполнения условия, по умолчанию "=".
//		ОперацияУсловия - Строка - Операция соединения условий, по умолчанию "Или".
//
//	Возвращаемое значение:
//		Условие - Строка - Сформированное условие для пользовательского поля.
//
Функция УсловиеПользовательскогоПоля(МассивКатегорий, СоответствиеКатегорий, ВидПолей, ВыражениеУсловия = "=", ОперацияУсловия = "Или", Группа = Неопределено) Экспорт
	
	Условие = "";
	Для каждого Категория Из МассивКатегорий Цикл
		Если Не ПустаяСтрока(Условие) Тогда
			Условие = Условие + " " + ОперацияУсловия + " ";
		КонецЕсли;
		ИмяПеречисления = Категория.Метаданные().Имя;
		Если ИмяПеречисления = "ВидыОсобыхНачисленийИУдержаний" Или ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками" Тогда
			Параметр1 = "";
		ИначеЕсли ИмяПеречисления = "КатегорииНачисленийИНеоплаченногоВремени" Тогда
			Параметр1 = ".КатегорияНачисленияИлиНеоплаченногоВремени";
		Иначе
			Параметр1 = ".КатегорияУдержания";
		КонецЕсли;
		Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Условие + "ВидРасчета%1 %2 Значение(Перечисление.%3.%4)",
			Параметр1, ВыражениеУсловия, ИмяПеречисления, СоответствиеКатегорий.Получить(Категория));
	КонецЦикла;
	
	ШаблонУсловия = "(" + ?(ПустаяСтрока(Условие), "", "(%1) И ") + "Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.%2))";
	Если Группа = Неопределено Тогда
		Группа = ?(ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками", "Выплачено", ?(ВидПолей = "Начисления", "Начислено", "Удержано"));
	КонецЕсли;
	Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, Условие, Группа);
	
	Возврат Условие;
	
КонецФункции

// Устанавливает выражение детальных записей и итоговых записей для пользовательского поля варианта отчета.
//
//	Параметры:
//		ПользовательскоеПоле - Пользовательское поле, в которое требуется установить выражения.
//		Условие - Строка - условие выполнения выражения.
//		РезультатУсловия - Строка - Результат выполнения выражения.
//
Процедура ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, РезультатУсловия) Экспорт
	
	ПользовательскоеПоле.Использование = Истина;
	
	ВыражениеДетальныхЗаписей = 
	"Выбор
	|	Когда " + Условие + "
	|		Тогда " + РезультатУсловия + "
	|	Иначе 0
	|Конец";
	ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(ВыражениеДетальныхЗаписей);
	
	ВыражениеИтоговыхЗаписей = 
	"Сумма(Выбор
	|		Когда " + Условие + "
	|			Тогда " + РезультатУсловия + "
	|		Иначе 0
	|	Конец)";
	ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей);
	
КонецПроцедуры

// Добавляет пользовательское поле в поля выбора отчета и группировки.
//
//	Параметры:
//		ВыбранныеПоля - Коллекция элементов полей выбора отчета.
//		ВыбранныеПоляГруппировки - Коллекция элементов полей выбора группировки.
//		ПользовательскоеПоле - Добавляемое пользовательское поле.
//
Процедура ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле) Экспорт
	
	НовоеПолеВыбора = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
	НовоеПолеВыбора = ВыбранныеПоляГруппировки.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
КонецПроцедуры

// Добавляет пользовательские поля в вариант отчета.
//
// Параметры:
//		ДополнительныеНачисленияИУдержания - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		НастройкиОтчета - Настройки варианта отчета.
//		КоличествоНачисленийУдержаний - Сколько всего будет дополнительных колонок. Нужно учитывать, что колонки "ПрочиеНачисления"/"ПрочиеУдержания" добавляются всегда.
//		ВидПолей - Вид добавляемых полей: "Начисления" или "Удержания".
//
Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей = "Начисления") Экспорт
	
	ПриоритетыКатегорий = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыВзаиморасчетовССотрудниками"));
	
	ПриоритетыКатегорий.Колонки.Добавить("КатегорияНачисленияУдержания", Новый ОписаниеТипов(МассивТипов));
	ПриоритетыКатегорий.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ПриоритетыКатегорий.Колонки.Добавить("ВыводитьНулевыеЗначения", Новый ОписаниеТипов("Булево"));
	Для Каждого ДопНачислениеУдержание Из ДополнительныеНачисленияИУдержания Цикл
		Для Каждого КатегорияНачисленияУдержания Из ДопНачислениеУдержание.КатегорииКолонки Цикл
			НоваяСтрокаПриоритетыКатегорий = ПриоритетыКатегорий.Добавить();
			НоваяСтрокаПриоритетыКатегорий.КатегорияНачисленияУдержания = КатегорияНачисленияУдержания;
			НоваяСтрокаПриоритетыКатегорий.Приоритет = ДопНачислениеУдержание.ПриоритетКолонки;
			НоваяСтрокаПриоритетыКатегорий.ВыводитьНулевыеЗначения = ДопНачислениеУдержание.ВыводитьНулевыеЗначения;
		КонецЦикла;
	КонецЦикла;
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = ТекущаяДатаСеанса();
	ПериодОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПериодОтчета <> Неопределено Тогда
		ДатаНачала = ПериодОтчета.Значение.ДатаНачала;
		ДатаОкончания = ПериодОтчета.Значение.ДатаОкончания;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриоритетыКатегорий", ПриоритетыКатегорий);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ОрганизацияОтбора = Неопределено;
	ФизическиеЛицаОтбора = Неопределено;
	ПодразделениеОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			ОрганизацияОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
			ПодразделениеОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо") Тогда
			ФизическиеЛицаОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приоритеты.КатегорияНачисленияУдержания КАК Категория,
	|	Приоритеты.Приоритет,
	|	Приоритеты.ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыКатегорий
	|ИЗ
	|	&ПриоритетыКатегорий КАК Приоритеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК НачислениеУдержание,
	|	ПриоритетыКатегорий.Приоритет КАК Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения КАК ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыНачисленийУдержаний
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ПриоритетыКатегорий.Категория = Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПриоритетыКатегорий.Категория = Удержания.КатегорияУдержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриоритетыКатегорий.Категория,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ПриоритетыНачисленийУдержаний.Приоритет КАК Приоритет
	|ИЗ
	|	ВТПриоритетыНачисленийУдержаний КАК ПриоритетыНачисленийУдержаний
	|ГДЕ
	|	(ПриоритетыНачисленийУдержаний.ВыводитьНулевыеЗначения
	|			ИЛИ ПриоритетыНачисленийУдержаний.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод))
	|			ИЛИ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|				ГДЕ
	|					НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ПриоритетыНачисленийУдержаний.НачислениеУдержание
	|					И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|					И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)
	|					И НачисленияУдержанияПоСотрудникам.Подразделение В (&Подразделение)
	|					И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)
	|					И &УсловиеГруппы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Если ОрганизацияОтбора = Неопределено Тогда
		
		РазрешенныеФилиалы = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.Организации", Тип("СправочникСсылка.Организации"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)", "");
		Иначе
			Запрос.УстановитьПараметр("Организация", РазрешенныеФилиалы);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("Организация", ОрганизацияОтбора);
	КонецЕсли;
	
	Если ПодразделениеОтбора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Подразделение В (&Подразделение)", "");
	Иначе
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОтбора);
	КонецЕсли;
	
	Если ФизическиеЛицаОтбора = Неопределено Тогда
		
		РазрешенныеФизическиеЛица = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.ФизическиеЛица", Тип("СправочникСсылка.ФизическиеЛица"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)", "");
		Иначе
			Запрос.УстановитьПараметр("ФизическиеЛица", РазрешенныеФизическиеЛица);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛицаОтбора);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", КоличествоНачисленийУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГруппы",
		?(ВидПолей = "Начисления", "НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)",
			"НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)"));
	ВыводимыеПриоритеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Приоритет");
	
	МассивВсехКатегорий = Новый Массив;
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;
	ГруппировкаОтчета = ЗарплатаКадрыОтчеты.ПолучитьПоследнийЭлементСтруктуры(НастройкиОтчета);
	ВыбранныеПоляГруппировки = ГруппировкаОтчета.Выбор.Элементы;
	
	СоответствиеКатегорий = Новый Соответствие;
	Если ВидПолей = "Начисления" Тогда
		ДействующиеКатегории = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДействующиеКатегории();
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
			Если ДействующиеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[МетаданныеЗначения.Имя]) <> Неопределено Тогда
				СоответствиеКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДействующиеКатегории = Перечисления.КатегорииУдержаний.ДействующиеКатегории();
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
			Если ДействующиеКатегории.Найти(Перечисления.КатегорииУдержаний[МетаданныеЗначения.Имя]) <> Неопределено Тогда
				СоответствиеКатегорий.Вставить(Перечисления.КатегорииУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыВзаиморасчетовССотрудниками.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыВзаиморасчетовССотрудниками[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	
	ПользовательскоеУсловиеПрочие = "";
	СтрокаТаблицыПрочие = Неопределено;
	МассивСтрокДляУдаления = Новый Массив;;
	Для каждого СтрокаТаблицы Из ДополнительныеНачисленияИУдержания Цикл
		
		Если (ВидПолей = "Начисления" И СтрокаТаблицы.Имя = "ПрочиеНачисления") Или (ВидПолей = "Удержания" И СтрокаТаблицы.Имя = "ПрочиеУдержания") Тогда
			СтрокаТаблицыПрочие = ДополнительныеНачисленияИУдержания[ДополнительныеНачисленияИУдержания.Индекс(СтрокаТаблицы)];
			Продолжить;
		КонецЕсли;
		
		Если ВыводимыеПриоритеты.Найти(СтрокаТаблицы.ПриоритетКолонки) <> Неопределено Тогда
			// Сформируем условие по категориям
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				Если МассивВсехКатегорий.Найти(КатегорияКолонки) = Неопределено Тогда
					МассивВсехКатегорий.Добавить(КатегорияКолонки);
				КонецЕсли;
			КонецЦикла;
			Условие = УсловиеПользовательскогоПоля(СтрокаТаблицы.КатегорииКолонки, СоответствиеКатегорий, ВидПолей);
			Если Не ПустаяСтрока(СтрокаТаблицы.ПользовательскоеУсловие) Тогда
				// Дополним пользовательским условием
				Условие = Условие + ?(Не ПустаяСтрока(Условие), " И ", "") + СтрокаТаблицы.ПользовательскоеУсловие;
				Поз = СтрНайти(ПользовательскоеУсловиеПрочие, СтрокаТаблицы.УсловиеИсключенияИзПрочих);
				Если Поз = 0 Тогда
					ПользовательскоеУсловиеЗаполнено = Не ПустаяСтрока(ПользовательскоеУсловиеПрочие);
					ПользовательскоеУсловиеПрочие = ПользовательскоеУсловиеПрочие + ?(ПользовательскоеУсловиеЗаполнено, " И ", "") + СтрокаТаблицы.УсловиеИсключенияИзПрочих;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.ДобавитьПользовательскоеПоле Тогда
				НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
				НовоеПоле.Заголовок = СтрокаТаблицы.Имя;
				ДополнитьПользовательскоеПоле(НовоеПоле, Условие, ?(ПустаяСтрока(СтрокаТаблицы.РезультатУсловия), "Сумма", СтрокаТаблицы.РезультатУсловия));
				ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
			КонецЕсли;
		Иначе
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим категории, которые не выводятся в колонки отчета.
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ДополнительныеНачисленияИУдержания.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	// ПрочиеНачисления
	Если ВидПолей = "Начисления" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		НовоеПоле.Заголовок = "ПрочиеНачисления";
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Начислено");
		ДополнитьПользовательскоеПоле(НовоеПоле, Условие , "Сумма");
		ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
	КонецЕсли;
	
	// ПрочиеУдержания
	Если ВидПолей = "Удержания" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		НовоеПоле.Заголовок = "ПрочиеУдержания";
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Удержано");
		ДополнитьПользовательскоеПоле(НовоеПоле, Условие, "Сумма");
		ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
	КонецЕсли;
	
КонецПроцедуры

Функция НаборДанныхНачисленияУдержания(НаборыДанных)
	
	НаборНачисленияУдержания = Неопределено;
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если НаборДанных.Имя = "НачисленияУдержания" Тогда
			НаборНачисленияУдержания = НаборДанных;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			НаборНачисленияУдержания = НаборДанныхНачисленияУдержания(НаборДанных.Элементы);
		КонецЕсли;
		
		Если НаборНачисленияУдержания <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборНачисленияУдержания;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДополнительныеПоляКадровыхДанныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
		
		// Должность по штатному расписанию
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "ДолжностьПоШтатномуРасписанию";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"ДолжностьПоШтатномуРасписанию",
			"РабочееМесто.ДолжностьПоШтатномуРасписанию");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ДолжностьПоШтатномуРасписаниюНаКонецПериода",
			"РабочееМесто.ДолжностьПоШтатномуРасписаниюНаКонецПериода");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			"РабочееМесто.ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			НСтр("ru='Должность по штатному расписанию основного сотрудника на конец периода'"));
		
		// Разряд категория
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "РазрядКатегория";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"РазрядКатегория",
			"РабочееМесто.РазрядКатегория");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"РазрядКатегорияНаКонецПериода",
			"РабочееМесто.РазрядКатегорияНаКонецПериода");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			"РабочееМесто.РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru='Разряд категория основного сотрудника на конец периода'"));
		
		ДополнительныеПоля.Вставить("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляКадровыхДанныхСотрудников);
		
		// Территория
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "Территория";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"Территория",
			"РабочееМесто.Территория");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ТерриторияНаКонецПериода",
			"РабочееМесто.ТерриторияНаКонецПериода");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ТерриторияГоловногоСотрудникаНаКонецПериода",
			"РабочееМесто.ТерриторияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru='Территория основного сотрудника на конец периода'"));
		
		// ВоинскийУчетЗвание
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "ВоинскийУчетЗвание";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ЗванияГражданскогоВоинскогоУчета.ПустаяСсылка)";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ВоинскийУчетЗваниеГоловногоСотрудникаНаКонецПериода",
			"ВоинскийУчет.Звание",
			НСтр("ru='Звание'"));
		
		// ВоинскийУчетСостав
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
		СтрокаДополнительногоПоля.ИмяПоля = "ВоинскийУчетСостав";
		СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СоставыВоеннослужащих.ПустаяСсылка)";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ВоинскийУчетСоставГоловногоСотрудникаНаКонецПериода",
			"ВоинскийУчет.Состав",
			НСтр("ru='Состав'"));
		
		ДополнительныеПоля = Новый Структура;
		ДополнительныеПоля.Вставить("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляКадровыхДанныхСотрудников);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			МодульГосударственнаяСлужба.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			МодульУчетБюджетныхУчреждений.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			МодульОрганизационнаяСтруктура.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция НачисленныеОтпускаПоПериодамИВидам(Сотрудник, ВидыОтпусков, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		ИсключаемыеРегистраторы = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидыОтпусков", ВидыОтпусков);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Регистратор КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Начисления.Активность КАК Активность,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФиксСтрока КАК ФиксСтрока,
	|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
	|	Начисления.ФиксРасчет КАК ФиксРасчет,
	|	Начисления.ФиксСторно КАК ФиксСторно,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	Начисления.ДоляРезультата КАК ДоляРезультата,
	|	Начисления.Месяц КАК Месяц,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	ПоказателиНачислений.Показатель КАК Показатель,
	|	ЗначенияПоказателейНачислений.Значение КАК Значение
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовНачислений
	|		ПО Начисления.ВидРасчета = ВидыРасчетовНачислений.Ссылка
	|			И (ВидыРасчетовНачислений.ВидОтпуска В (&ВидыОтпусков))
	|			И (Начисления.Сотрудник = &Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.ВидРасчета = ПоказателиНачислений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО Начисления.Регистратор = ЗначенияПоказателейНачислений.Регистратор
	|			И (ПоказателиНачислений.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторнированныеДокументы
	|		ПО Начисления.Регистратор = СторнированныеДокументы.СторнируемыйДокумент
	|			И (НЕ СторнированныеДокументы.Регистратор В (&ИсключаемыеРегистраторы))
	|ГДЕ
	|	СторнированныеДокументы.Регистратор ЕСТЬ NULL
	|	И НЕ Начисления.Регистратор В (&ИсключаемыеРегистраторы)
	|	И НЕ Начисления.ФиксСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия УБЫВ";
	
	РезультатыПоказателей =  Запрос.Выполнить();
	
	ДанныеНачисленныхОтпусков = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаНачалаОтпуска", Новый ОписаниеТипов("Дата"));
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаОкончанияОтпуска", Новый ОписаниеТипов("Дата"));
	
	НомерПоказателя = 0;
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Выборка = РезультатыПоказателей.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СторнируемыйДокумент") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
			Пока Выборка.Следующий() Цикл
				Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
					Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент 
					Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
					
					НомерПоказателя = 1;
					НоваяСтрокаОтпуска = ДанныеНачисленныхОтпусков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтпуска, Выборка);
					НоваяСтрокаОтпуска.ДатаНачала = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончания = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.ДатаНачалаОтпуска = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончанияОтпуска = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.Начисление = Выборка.ВидРасчета;
					
				КонецЕсли;
				НоваяСтрокаОтпуска["Показатель" + НомерПоказателя] = Выборка.Показатель;
				НоваяСтрокаОтпуска["Значение" + НомерПоказателя] = Выборка.Значение;
				
				НомерПоказателя = НомерПоказателя + 1;
				ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				ТекущийРегистратор = Выборка.СторнируемыйДокумент;
				ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеНачисленныхОтпусков.Сортировать("Начисление, ПериодДействия Убыв, ДатаНачалаОтпуска Убыв");
	Возврат ДанныеНачисленныхОтпусков;
	
КонецФункции

#КонецОбласти
