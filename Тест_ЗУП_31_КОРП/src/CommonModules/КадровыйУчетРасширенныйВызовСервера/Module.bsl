////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенныйВызовСервера: методы кадрового учета, работающие на  стороне сервера,
// 		вызываемые со стороны клиента.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция КадровыеДанныеСотрудника(Сотрудник, КадровыеДанные, Период) Экспорт
	СтруктураВозврата = Новый Структура("Период,Сотрудник," + КадровыеДанные, Период, Сотрудник);
	МассивКадровыхДанных = КадровыеДанныеСотрудников(Сотрудник, КадровыеДанные, Период);
	Если МассивКадровыхДанных.Количество() > 0 Тогда
		Возврат МассивКадровыхДанных[0];
	КонецЕсли;
	Возврат Новый ФиксированнаяСтруктура(СтруктураВозврата);
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников) Экспорт
	Возврат КадровыйУчетРасширенный.АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников);
КонецФункции

Функция ДанныеОТекущихНачисленияхСотрудника(Сотрудник, Период) Экспорт
	Возврат КадровыйУчетРасширенный.ДанныеОТекущихНачисленияхСотрудника(Сотрудник, Период);
КонецФункции

Функция КадровыеДанныеСотрудников(Сотрудники, КадровыеДанные, Период)
	ВозвращаемыйМассив = Новый Массив;
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, КадровыеДанные, Период);
	Для каждого СтрокаТаблицаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		СтруктураВозврата = Новый Структура("Период,Сотрудник," + КадровыеДанные, Период);
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаТаблицаКадровыхДанных);
		ВозвращаемыйМассив.Добавить(Новый ФиксированнаяСтруктура(СтруктураВозврата));
	КонецЦикла;
	Возврат Новый ФиксированныйМассив(ВозвращаемыйМассив);
КонецФункции

Функция СведенияОСтажахСотрудника(Сотрудник, ДатаСведений) Экспорт
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Сотрудник;
	СтрокаСотрудник.Период = ДатаСведений;
	
	Возврат КадровыйУчетРасширенный.СведенияОСтажахСотрудников(ТаблицаСотрудников).Получить(Сотрудник);
	
КонецФункции

Функция СведенияОСтажахФизическогоЛица(ФизическоеЛицо, ДатаСведений) Экспорт
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицаФизическихЛиц = ТаблицаФизическихЛиц.Добавить();
	СтрокаТаблицаФизическихЛиц.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаТаблицаФизическихЛиц.Период = ДатаСведений;
	
	Возврат КадровыйУчетРасширенный.СведенияОСтажахФизическихЛиц(ТаблицаФизическихЛиц).Получить(ФизическоеЛицо);
	
КонецФункции

Процедура ОбработкаПолученияДанныхВыбораСправочникаДолжности(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	ВидДоговора = Неопределено;
	Параметры.Свойство("ВидДоговора", ВидДоговора);
	
	Если ТипЗнч(ВидДоговора) = Тип("ПеречислениеСсылка.ВидыДоговоровССотрудниками") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ОбработкаПолученияДанныхВыбораСправочникаДолжности(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораСправочникаВидыОтпусков(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("ИсключатьОтпускНаСанаторноКурортноеЛечение") Тогда
		
		СтандартнаяОбработка  = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	НЕ ВидыОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ОтпускНаСанаторноКурортноеЛечение)
		|	И &ДополнительноеУсловие";
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.ВидыОтпусков, Параметры, Запрос, "ВидыОтпусков");
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораСправочникаРазрядыКатегорииДолжностей(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда 
		Возврат;
	КонецЕсли;
	
	ОсновнаяТарифнаяСетка = ?(Параметры.Свойство("ОсновнаяТарифнаяСетка"), Параметры.ОсновнаяТарифнаяСетка, Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТарифнаяСетка = Неопределено;
	Должность = Неопределено;
	ДолжностьПоШтатномуРасписанию = Неопределено;
	Сотрудник = Неопределено;
	ДатаСобытия = Неопределено;
	
	Параметры.Свойство("ТарифнаяСетка", ТарифнаяСетка);
	Параметры.Свойство("Должность", Должность);
	Параметры.Свойство("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписанию);
	Параметры.Свойство("Сотрудник", Сотрудник);
	Параметры.Свойство("ДатаСобытия", ДатаСобытия);
	
	ИспользоватьОтбор = Истина;
	Если ТарифнаяСетка = Неопределено И Сотрудник = Неопределено И ДатаСобытия = Неопределено  
		И Должность = Неопределено И ДолжностьПоШтатномуРасписанию = Неопределено Тогда 
		ИспользоватьОтбор = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказатьВсеКатегории") Или Не ИспользоватьОтбор Тогда
		Если Не Параметры.Отбор.Свойство("ТарифнаяСетка") Тогда
			Параметры.Отбор.Вставить("ТарифнаяСетка", Справочники.ТарифныеСетки.ПустаяСсылка());
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСобытия) Тогда 
		ДатаСобытия = ?(Параметры.Свойство("ВремяРегистрации"), Параметры.ВремяРегистрации, ДатаСобытия); 
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	СтандартнаяОбработка = Ложь;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ДатаСобытия;
	
	Если ТарифнаяСетка = Неопределено Тогда 
		
		Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
			ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
			ТарифнаяСетка = ДанныеПозиции.ТарифнаяСетка;
			ТарифнаяСеткаНадбавки = ДанныеПозиции.ТарифнаяСеткаНадбавки;
		ИначеЕсли ЗначениеЗаполнено(Должность) Тогда
			ТарифныеСетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, "ТарифнаяСетка,ТарифнаяСеткаНадбавки");
			ТарифнаяСетка = ТарифныеСетки.ТарифнаяСетка;
			ТарифнаяСеткаНадбавки = ТарифныеСетки.ТарифнаяСеткаНадбавки;
		Иначе 
			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, "ТарифнаяСетка,ТарифнаяСеткаНадбавки", ДатаСобытия, , Ложь);  
			Если КадровыеДанные.Количество() > 0 Тогда
				ТарифнаяСетка = КадровыеДанные[0].ТарифнаяСетка;
				ТарифнаяСеткаНадбавки = КадровыеДанные[0].ТарифнаяСеткаНадбавки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОсновнаяТарифнаяСетка Тогда 
		ТарифнаяСеткаНадбавки = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТарифнаяСетка) И Не ЗначениеЗаполнено(ТарифнаяСеткаНадбавки) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТарифныеСетки", РазрядыКатегорииДолжностей.МассивСеток(ТарифнаяСетка, ТарифнаяСеткаНадбавки));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияТарифов.РазрядКатегория КАК РазрядКатегория
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|ГДЕ
		|	ЗначенияТарифов.ТарифнаяСетка В(&ТарифныеСетки)
		|	И ЗначенияТарифов.Используется";
	
	Если Параметры.Свойство("СтрокаПоиска") И Параметры.СтрокаПоиска <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска);
		Запрос.Текст = Запрос.Текст
			+ " И ПОДСТРОКА(ЗначенияТарифов.РазрядКатегория.Наименование, 1, " + СтрДлина(Параметры.СтрокаПоиска) +") = &СтрокаПоиска";
		
	КонецЕсли;
	
	РазрядыКатегории = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РазрядКатегория");
	
	ДанныеВыбора.ЗагрузитьЗначения(РазрядыКатегории);
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПеречисленияВидыДоговоровССотрудниками(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВидовДоговоров.Ссылка,
	|	ТаблицаВидовДоговоров.Синоним
	|ПОМЕСТИТЬ ВТТаблицаВидовДоговоров
	|ИЗ
	|	&ТаблицаВидовДоговоров КАК ТаблицаВидовДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидовДоговоров.Ссылка
	|ИЗ
	|	ВТТаблицаВидовДоговоров КАК ТаблицаВидовДоговоров
	|ГДЕ
	|	ТаблицаВидовДоговоров.Синоним ПОДОБНО &СтрокаПоиска";
	
	Если Параметры.СтрокаПоиска = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВидовДоговоров.Синоним ПОДОБНО &СтрокаПоиска", "ИСТИНА");
	КонецЕсли;
	
	// Составляем таблицу категорий.
	ТаблицаВидовДоговоров = Новый ТаблицаЗначений;
	ТаблицаВидовДоговоров.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	ТаблицаВидовДоговоров.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	
	ГруппаДоговоров = Неопределено;
	Параметры.Отбор.Свойство("ГруппаДоговоров", ГруппаДоговоров);
	ДоступныеВидыДоговоров = Перечисления.ВидыДоговоровССотрудниками.ДоступныеВидыДоговоров(ГруппаДоговоров);
	
	Для Каждого ЗначениеПеречисления Из ДоступныеВидыДоговоров Цикл
		НоваяСтрока = ТаблицаВидовДоговоров.Добавить();
		НоваяСтрока.Ссылка = Перечисления.ВидыДоговоровССотрудниками[ЗначениеПеречисления.Имя];
		НоваяСтрока.Синоним = ЗначениеПеречисления.Синоним;
	КонецЦикла;
	
	// Отбор только по действующим категориям с учетом введенной строки.
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаВидовДоговоров", ТаблицаВидовДоговоров);
	Запрос.УстановитьПараметр("СтрокаПоиска", Строка(Параметры.СтрокаПоиска) + "%");
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПеречисленияРолиФизическихЛиц(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРолей.Ссылка,
	|	ТаблицаРолей.Синоним
	|ПОМЕСТИТЬ ВТТаблицаРолей
	|ИЗ
	|	&ТаблицаРолей КАК ТаблицаРолей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРолей.Ссылка
	|ИЗ
	|	ВТТаблицаРолей КАК ТаблицаРолей
	|ГДЕ
	|	ТаблицаРолей.Ссылка В(&ДействующиеРоли)
	|	И ТаблицаРолей.Синоним ПОДОБНО &СтрокаПоиска";
	
	Если Параметры.СтрокаПоиска = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТаблицаРолей.Синоним ПОДОБНО &СтрокаПоиска", "");
	КонецЕсли;
	
	// Составляем таблицу категорий.
	ТаблицаРолей = Новый ТаблицаЗначений;
	ТаблицаРолей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.РолиФизическихЛиц"));
	ТаблицаРолей.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.РолиФизическихЛиц.ЗначенияПеречисления Цикл
		НоваяСтрока = ТаблицаРолей.Добавить();
		НоваяСтрока.Ссылка = Перечисления.РолиФизическихЛиц[ЗначениеПеречисления.Имя];
		НоваяСтрока.Синоним = ЗначениеПеречисления.Синоним;
	КонецЦикла;
	
	// Отбор только по действующим категориям с учетом введенной строки.
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаРолей", ТаблицаРолей);
	Запрос.УстановитьПараметр("ДействующиеРоли", Перечисления.РолиФизическихЛиц.ДействующиеРолиФизическихЛиц());
	Запрос.УстановитьПараметр("СтрокаПоиска", Строка(Параметры.СтрокаПоиска) + "%");
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПродолжительностьСтажа(Знач ОписаниеСтажа, Знач ДатаАктуальности) Экспорт
	
	ПродолжительностьСтажа = Новый Структура("Лет, Месяцев, Дней", 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ДатаОтсчета", ОписаниеСтажа.ДатаОтсчета);
	Запрос.УстановитьПараметр("РазмерДней", ОписаниеСтажа.Дней);
	Запрос.УстановитьПараметр("РазмерМесяцев", ОписаниеСтажа.Месяцев + ОписаниеСтажа.Лет * 12);
	Запрос.УстановитьПараметр("Прерван", ОписаниеСтажа.Прерван);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаАктуальности КАК ДатаРасчетаСтажа,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВидыСтажа.ПустаяСсылка) КАК ВидСтажа,
		|	&ДатаОтсчета КАК ДатаОтсчета,
		|	&РазмерДней КАК РазмерДней,
		|	&РазмерМесяцев КАК РазмерМесяцев,
		|	&Прерван КАК Прерван
		|ПОМЕСТИТЬ ВТИсходныеДанные";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, 
		КадровыйУчетРасширенный.ЗапросВТРасчетСтажа(
			КадровыйУчетРасширенный.ОписательВТИсходныеДанныеДляРасчетаСтажа(),
			""));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПродолжительностьСтажа, Выборка);
	КонецЕсли;
	
	Возврат ПродолжительностьСтажа;
	
КонецФункции

#КонецОбласти
