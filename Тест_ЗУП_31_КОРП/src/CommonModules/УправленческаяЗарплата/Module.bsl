////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управленческая зарплата"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПрограммныйИнтерфейс

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьУправленческуюЗарплату");
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержаний, "РасчетныйЛистокУправленческий");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Истина;
	
КонецПроцедуры

Процедура УточнитьПараметрыПостроенияСрезаНачислений(ПараметрыПостроения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "<>", УправленческаяОрганизация);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "<>", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоначислениеДоУправленческогоУчета);
	
КонецПроцедуры

Процедура УточнитьПараметрыПостроенияСрезаЗначенийПоказателей(ПараметрыПостроения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Организация", "<>", УправленческаяОрганизация);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта) Экспорт
	
	Возврат КлючВарианта = "РасчетныйЛистокУправленческий";
	
КонецФункции

Процедура ДополнитьНастройкиОтчетаРасчетныйЛисток(НастройкиОтчета, КлючВарианта) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта) Тогда
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если УправленческаяОрганизация <> Неопределено Тогда
		
		ЭлементОтбора = НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ПравоеЗначение = УправленческаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если ПараметрыПолученияСотрудников.Организация = УправленческаяОрганизация Тогда
		
		ПараметрыПолученияСотрудников.Организация = Неопределено;
		
		СписокПозиций = ДолжностиПоШтатномуРасписаниюИспользующиеУправленческиеНачисления();
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПолученияСотрудников.Отборы, "ДолжностьПоШтатномуРасписанию", "В", СписокПозиций);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДолжностиПоШтатномуРасписаниюИспользующиеУправленческиеНачисления() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
		Запрос.МенеджерВременныхТаблиц, Истина, УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(), "ИспользоватьУправленческиеНачисления");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
		|ИЗ
		|	ВТШтатноеРасписание КАК ПозицииШтатногоРасписания
		|ГДЕ
		|	ПозицииШтатногоРасписания.ИспользоватьУправленческиеНачисления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПозицияШтатногоРасписания");
	
КонецФункции

#Область ПриемНаРаботу

Процедура ПриемНаРаботуДополнитьДанныеДляПроведение(ДанныеДляПроведения, МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.ПриемНаРаботу.УправленческиеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемНаРаботуСписком") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВосстановлениеВДолжности") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ВосстановлениеВДолжности");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ДатаПриема", "Сотрудники.ДатаВосстановления");
	КонецЕсли;
	
	// Второй набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ПлановыеНачисления.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ПлановыеНачисления.ЗаполнитьЗначения(Истина, "Используется");
	ПлановыеНачисления.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПлановыеНачисления, ДанныеДляПроведения.ПлановыеНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	МАКСИМУМ(Показатели.Значение) КАК Значение,
		|	Показатели.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЗначенияПоказателейУправленческихНачислений
		|ИЗ
		|	Документ.ПриемНаРаботу.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.УправленческиеНачисления КАК Начисления
		|		ПО Показатели.Ссылка = Начисления.Ссылка
		|			И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ДатаПриема,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	Показатели.Ссылка
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.ДатаСобытия,
		|	ЗначенияПоказателей.ДействуетДо,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.ФизическоеЛицо,
		|	ЗначенияПоказателей.Показатель,
		|	МАКСИМУМ(ЗначенияПоказателей.Значение) КАК Значение,
		|	ЗначенияПоказателей.Ссылка
		|ИЗ
		|	ВТЗначенияПоказателейУправленческихНачислений КАК ЗначенияПоказателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.ДатаСобытия,
		|	ЗначенияПоказателей.ДействуетДо,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.ФизическоеЛицо,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Ссылка";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемНаРаботуСписком")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВосстановлениеВДолжности") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ВосстановлениеВДолжности");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ДатаПриема", "Сотрудники.ДатаВосстановления");
	КонецЕсли;
	
	// Третий набор данных для проведения - таблица для формирования значений показателей начислений.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗначенияПоказателей, ДанныеДляПроведения.ЗначенияПоказателейНачислений);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйПеревод

Процедура КадровыйПереводДополнитьДанныеДляПроведение(ДанныеДляПроведения, МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.КадровыйПеревод.УправленческиеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.ИзменитьНачисления)
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Начисления.Ссылка.НачисленияУтверждены";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.ИдентификаторСтрокиСотрудника = Сотрудники.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПлановыеНачисления,ДанныеДляПроведения.ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК Организация,
		|	Показатели.Показатель,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	Показатели.Значение,
		|	Начисления.Действие,
		|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ВТПоказателиУправленческихНачислений
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Показатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.УправленческиеНачисления КАК Начисления
		|			ПО Показатели.Ссылка = Начисления.Ссылка
		|				И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|				И (Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|		ПО Сотрудники.Ссылка = Показатели.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка
		|	И Сотрудники.НачисленияУтверждены
		|	И (Сотрудники.ИзменитьНачисления
		|			ИЛИ Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|				ТОГДА 0
		|			ИНАЧЕ Показатели.Значение
		|		КОНЕЦ) КАК Значение,
		|	Показатели.Действие КАК Действие
		|ИЗ
		|	ВТПоказателиУправленческихНачислений КАК Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	Показатели.Действие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(Показатели.Значение),
		|	Показатели.Действие
		|ИЗ
		|	ВТПоказателиУправленческихНачислений КАК Показатели
		|ГДЕ
		|	Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.Действие,
		|	Показатели.ДокументОснование";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.ИдентификаторСтрокиСотрудника = Начисления.ИдентификаторСтрокиСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сотрудники.Ссылка = Показатели.Ссылка", "ПО Сотрудники.Ссылка = Показатели.Ссылка И Сотрудники.ИдентификаторСтрокиСотрудника = Показатели.ИдентификаторСтрокиСотрудника");
	КонецЕсли;
	
	// Таблица для формирования значений показателей.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗначенияПоказателей, ДанныеДляПроведения.ЗначенияПоказателей);
	
КонецПроцедуры

#КонецОбласти

#Область ШтатноеРасписание

Процедура ДополнитьОписаниеПозицииШтатногоРасписания(ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.Вставить("ФОТУправленческий", 0);
	ДанныеПозиции.Вставить("ФОТУправленческийМин", 0);
	ДанныеПозиции.Вставить("ФОТУправленческийМакс", 0);
	ДанныеПозиции.Вставить("ИспользоватьУправленческиеНачисления", Ложь);
	ДанныеПозиции.Вставить("ДоначислятьДоУправленческогоУчета", Ложь);
	ДанныеПозиции.Вставить("УправленческиеНачисления", Новый Массив);
	ДанныеПозиции.Вставить("УправленческиеПоказатели", Новый Массив);
	
КонецПроцедуры

Процедура ДанныеУправленческихНачисленийПозицийШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, СоответствиеДанныхПозициям) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Начисления позиций
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТПозицииШтатногоРасписания);
	СоздатьВТУправленческиеНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	НачисленияШтатногоРасписания.Начисление КАК Начисление,
		|	НачисленияШтатногоРасписания.Размер КАК Размер,
		|	НачисленияШтатногоРасписания.РазмерМин КАК РазмерМин,
		|	НачисленияШтатногоРасписания.РазмерМакс КАК РазмерМакс,
		|	НачисленияШтатногоРасписания.Показатель КАК Показатель,
		|	НачисленияШтатногоРасписания.Значение КАК Значение,
		|	НачисленияШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
		|	НачисленияШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс,
		|	НачисленияШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ИЗ
		|	ВТУправленческиеНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
		|ГДЕ
		|	НачисленияШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|	И ЕСТЬNULL(НачисленияШтатногоРасписания.УправленческиеНачисления, ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(НачисленияШтатногоРасписания.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания
		|ИТОГИ
		|	МАКСИМУМ(Размер),
		|	МАКСИМУМ(РазмерМин),
		|	МАКСИМУМ(РазмерМакс),
		|	МАКСИМУМ(ИдентификаторСтрокиВидаРасчета)
		|ПО
		|	ПозицияШтатногоРасписания,
		|	Начисление";
	
	ВыборкаПоПозициям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПозициям.Следующий() Цикл
		
		ДанныеПозиции = СоответствиеДанныхПозициям.Получить(ВыборкаПоПозициям.ПозицияШтатногоРасписания);
		
		ВыборкаПоНачислениям = ВыборкаПоПозициям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			СтруктураНачисления = УправлениеШтатнымРасписанием.ОписаниеНачисленияПозицииШтатногоРасписания();
			ЗаполнитьЗначенияСвойств(СтруктураНачисления, ВыборкаПоНачислениям);
			
			ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВыборкаПоНачислениям.Начисление);
			
			ВыборкаПоПоказателям = ВыборкаПоНачислениям.Выбрать();
			Пока ВыборкаПоПоказателям.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПоПоказателям.Показатель) Тогда
					
					ДобавитьПоказатель = Ложь;
					Для каждого СтруктураПоказателя Из ИнформацияОНачислении.Показатели Цикл
						
						Если СтруктураПоказателя.Показатель = ВыборкаПоПоказателям.Показатель Тогда
							ДобавитьПоказатель = СтруктураПоказателя.ЗапрашиватьПриВводе;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ДобавитьПоказатель Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПоказателя = УправлениеШтатнымРасписанием.ОписаниеПоказателяШтатногоРасписания();
					ЗаполнитьЗначенияСвойств(СтруктураПоказателя, ВыборкаПоПоказателям);
					СтруктураНачисления.Показатели.Добавить(СтруктураПоказателя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеПозиции.УправленческиеНачисления.Добавить(СтруктураНачисления);
			
		КонецЦикла;
		
		СоответствиеДанныхПозициям.Вставить(ВыборкаПоПозициям.ПозицияШтатногоРасписания, ДанныеПозиции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТУправленческиеНачисленияШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ИмяВТУправленческиеНачисленияШтатногоРасписания = "ВТУправленческиеНачисленияШтатногоРасписания")
	
	ПараметрыПостроенияУправленческие = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыПостроения);
	
	ПараметрыПостроенияУправленческие.ПлановыеНачисления = Ложь;
	ПараметрыПостроенияУправленческие.УправленческиеНачисления = Истина;
	ПараметрыПостроенияУправленческие.Льготы = Ложь;
	
	УправлениеШтатнымРасписанием.СоздатьВТНачисленияШтатногоРасписания(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроенияУправленческие, ИмяВТУправленческиеНачисленияШтатногоРасписания);
	
КонецПроцедуры

Процедура ДополнитьДанныеДляПроведения(МенеджерВременныхТаблиц, ДатаВступленияВСилу, ДанныеПроведения, ИмяТаблицы) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	Позиции.ИспользоватьУправленческиеНачисления,
		|	Позиции.ДоначислятьДоУправленческогоУчета
		|ИЗ
		|	ВТПозиции КАК Позиции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияНачисления.Начисление,
		|	ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияНачисления.Размер КАК Размер,
		|	ДокументШтатногоРасписанияНачисления.РазмерМин КАК РазмерМин,
		|	ДокументШтатногоРасписанияНачисления.РазмерМакс КАК РазмерМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.УправленческиеНачисления КАК ДокументШтатногоРасписанияНачисления
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияНачисления.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияНачисления.Ссылка
		|			И (ДокументШтатногоРасписанияНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Дата,
		|	Позиции.Позиция КАК ПозицияШтатногоРасписания,
		|	ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	ДокументШтатногоРасписанияПоказатели.Показатель,
		|	ДокументШтатногоРасписанияПоказатели.Значение,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМин,
		|	ДокументШтатногоРасписанияПоказатели.ЗначениеМакс
		|ИЗ
		|	ВТПозиции КАК Позиции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УтверждениеШтатногоРасписания.УправленческиеПоказатели КАК ДокументШтатногоРасписанияПоказатели
		|		ПО Позиции.ИдентификаторСтрокиПозиции = ДокументШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции
		|			И Позиции.Ссылка = ДокументШтатногоРасписанияПоказатели.Ссылка";
		
	Если ИмяТаблицы <> "УтверждениеШтатногоРасписания" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".УтверждениеШтатногоРасписания.", "." + ИмяТаблицы + ".");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеПроведения.Вставить("НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания", РезультатЗапроса[0].Выбрать());
	ДанныеПроведения.Вставить("ИсторияУправленческихНачисленийПоШтатномуРасписанию", РезультатЗапроса[1].Выбрать());
	ДанныеПроведения.Вставить("ИсторияУправленческихПоказателейПоШтатномуРасписанию", РезультатЗапроса[2].Выбрать());
	
КонецПроцедуры

Процедура СформироватьДвиженияИсторииПозицийШтатногоРасписания(Регистратор, ДанныеПозиций) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПозиций.Свойство("НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания") Тогда
		
		УправлениеШтатнымРасписанием.ЗаполнитьНаборЗаписейИстории(
			Регистратор.Ссылка,
			Регистратор.Движения.ИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания,
			ДанныеПозиций.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания);
		
	КонецЕсли;
	
	УправлениеШтатнымРасписанием.ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияУправленческихНачисленийПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияУправленческихНачисленийПоШтатномуРасписанию);
	
	УправлениеШтатнымРасписанием.ЗаполнитьНаборЗаписейИстории(
		Регистратор.Ссылка,
		Регистратор.Движения.ИсторияУправленческихПоказателейПоШтатномуРасписанию,
		ДанныеПозиций.ИсторияУправленческихПоказателейПоШтатномуРасписанию);
	
КонецПроцедуры

Процедура ДополнитьДанныеДляПроведенияИндексацииЗаработка(МенеджерВременныхТаблиц, ДанныеДляПроведения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Начисления позиций
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТПозицииШтатногоРасписания");
	СоздатьВТУправленческиеНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияШтатногоРасписания.Период КАК Дата,
		|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	НачисленияШтатногоРасписания.Начисление КАК Начисление,
		|	НачисленияШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияШтатногоРасписания.Размер КАК Размер,
		|	НачисленияШтатногоРасписания.РазмерМин КАК РазмерМин,
		|	НачисленияШтатногоРасписания.РазмерМакс КАК РазмерМакс
		|ИЗ
		|	ВТУправленческиеНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
		|ГДЕ
		|	ЕСТЬNULL(НачисленияШтатногоРасписания.УправленческиеНачисления, ЛОЖЬ)";
	
	ДанныеДляПроведения.Вставить("ИсторияУправленческихНачисленийПоШтатномуРасписанию", Запрос.Выполнить().Выбрать());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияШтатногоРасписания.Период КАК Дата,
		|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	НачисленияШтатногоРасписания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияШтатногоРасписания.Показатель КАК Показатель,
		|	НачисленияШтатногоРасписания.Значение КАК Значение,
		|	НачисленияШтатногоРасписания.ЗначениеМин КАК ЗначениеМин,
		|	НачисленияШтатногоРасписания.ЗначениеМакс КАК ЗначениеМакс
		|ИЗ
		|	ВТУправленческиеНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
		|ГДЕ
		|	ЕСТЬNULL(НачисленияШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ЕСТЬNULL(НачисленияШтатногоРасписания.УправленческиеНачисления, ЛОЖЬ)";
	
	ДанныеДляПроведения.Вставить("ИсторияУправленческихПоказателейПоШтатномуРасписанию", Запрос.Выполнить().Выбрать());
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовНачисленияЗарплаты

Процедура ПриВыявленииНачисленийДополнитьВТСотрудникиПериоды(МенеджерВременныхТаблиц, ОписаниеВТСотрудникиПериоды, ДополнительныеСвойства) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ВключатьУправленческиеНачисления = Ложь;
	Если Не ДополнительныеСвойства.Свойство("ВключатьУправленческиеНачисления", ВключатьУправленческиеНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВключатьУправленческиеНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.*
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);	
	Запрос.Выполнить();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ОписаниеВТСотрудникиПериоды.ИмяВТ);
	
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ИменаПолей,
		|	&УправленческаяОрганизация,
		|	&УправленческаяОрганизация
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания КАК НастройкиПозиции
		|		ПО (НастройкиПозиции.Позиция = СотрудникиПериоды.ДолжностьПоШтатномуРасписанию)
		|			И (НастройкиПозиции.ИспользоватьУправленческиеНачисления = ИСТИНА)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ОписаниеВТСотрудникиПериоды.ИмяВТ);	
		
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("Организация");
	ПоляИсключения.Добавить("ГоловнаяОрганизация");
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(Запрос.Текст, МенеджерВременныхТаблиц, "ВТВсеСотрудникиПериоды", "СотрудникиПериоды", ПоляИсключения);
	
	Запрос.Выполнить();
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВсеСотрудникиПериоды");
	
КонецПроцедуры

Процедура ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполнения.Вставить("УправленческиеНачисления", Новый ТаблицаЗначений);
	
КонецПроцедуры

Процедура ПослеПолученияНачисленийДляЗаполненияТаблицДокумента(ДанныеЗаполнения, СтрокиРасчета = Неопределено, ДокументОбъект = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	// Выделяем управленческие начисления в отдельную коллекцию.
	ДанныеЗаполнения.УправленческиеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	Индекс = 0;
	Пока Индекс < ДанныеЗаполнения.Начисления.Количество() Цикл
		Строка = ДанныеЗаполнения.Начисления[Индекс];
		Если Строка.Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация") Тогда
			НоваяСтрока = ДанныеЗаполнения.УправленческиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если СтрокиРасчета <> Неопределено Тогда
				СтрокиРасчета.Добавить(НоваяСтрока);
			КонецЕсли;
			Если ДокументОбъект <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДокументОбъект.УправленческиеНачисления.Добавить(), Строка);
			КонецЕсли;
			ДанныеЗаполнения.Начисления.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриДобавленииСтрокиНачисления(СтрокаИсточника, СтандартнаяОбработка, ПараметрыСтроки) Экспорт
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРасчетаИнфо = ПараметрыСтроки.ВидыРасчетаИнфо;
	Организация = ПараметрыСтроки.Организация;
	ТаблицыНачислений = ПараметрыСтроки.ТаблицыНачислений;
	
	Если ТаблицыНачислений.УправленческиеНачисления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИсточника.Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация") Тогда
		
		НоваяСтрока = ТаблицыНачислений.УправленческиеНачисления.Добавить();
		СтрокаУправленческиеНачисленияВДанныеФормы(НоваяСтрока, СтрокаИсточника, ВидыРасчетаИнфо);
			
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправленческиеНачисленияСотрудниковВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПараметрыСтрок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРасчетаИнфо = ПараметрыСтрок.ВидыРасчетаИнфо;
	НачальныеПозицииВставки = ПараметрыСтрок.НачальныеПозицииВставки;
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ПозицииСотрудников = РасчетЗарплатыРасширенныйФормы.ТаблицаПозицииСотрудников(НачальныеПозицииВставки["УправленческиеНачисления"]);

	Сдвиг = 0;
	СтруктураПоиска = Новый Структура("Сотрудник");
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаПозиций Из ПозицииСотрудников Цикл
		
		СтруктураПоиска.Сотрудник = СтрокаПозиций.Сотрудник;
		СтрокиНачислений = ТаблицаИсточник.НайтиСтроки(СтруктураПоиска);
		ПозицияВставки = СтрокаПозиций.НачальнаяПозиция + Сдвиг;
		КоличествоСтрок = 0;
	
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
		
			Если СтрокаНачисления.Организация = УправленческаяОрганизация Тогда
			
				НоваяСтрока = РасчетЗарплатыРасширенныйФормы.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ПозицияВставки);
				СтрокаУправленческиеНачисленияВДанныеФормы(НоваяСтрока, СтрокаНачисления, ВидыРасчетаИнфо);
				КоличествоСтрок = КоличествоСтрок + 1;
				ПозицияВставки = ПозицияВставки + 1;
				СтрокиКУдалению.Добавить(СтрокаНачисления);
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		Сдвиг = Сдвиг + КоличествоСтрок - СтрокаПозиций.КоличествоСтрок;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаИсточник.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура СтрокаУправленческиеНачисленияВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		СтрокаПриемник.ДоступенВыборОснования = ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений;
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСтрокаУправленческиеНачисления(СтрокаИсточник) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрокаИсточник.Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
КонецФункции

Процедура ОбновитьДанныеДокументаПоДаннымУчета(СодержимоеДокумента, ОписаниеДокумента, ДополнительныеПараметры)
	
	Если ОписаниеДокумента.УправленческиеНачисленияИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранятьИсправления = ДополнительныеПараметры.СохранятьИсправления;
	КонтролируемыеПоля = ДополнительныеПараметры.КонтролируемыеПоля;
	СтруктураНачислений = ДополнительныеПараметры.СтруктураНачислений;
	ОтборПоСотрудникам = ДополнительныеПараметры.ОтборПоСотрудникам;
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	СотрудникиРасчета = ДополнительныеПараметры.СотрудникиРасчета;
	
	КлючевыеКолонки = "Сотрудник";
	Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
		КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
	КонецЕсли;
	ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.УправленческиеНачисленияИмя];
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = РасчетЗарплатыРасширенный.УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.УправленческиеНачисленияИмя);
	КонецЕсли;
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, СтруктураНачислений.УправленческиеНачисления, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	Если СотрудникиРасчета <> Неопределено И Сотрудники = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииДополнительныхПараметровДанныхДляНачисленияЗарплаты(ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ВключатьУправленческиеНачисления", Ложь);
	
КонецПроцедуры

Процедура ПриЗаполненииДополнительныхПараметровДанныхДляНачисленияЗарплаты(ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ВключатьУправленческиеНачисления = Истина;
	
КонецПроцедуры

Процедура ПриИнициализацииМенеджераРасчетаДляЗаполненияНачисленияЗарплаты(МенеджерРасчета, ДополнительныеПараметры) Экспорт
	
	МенеджерРасчета.ДополнительныеСвойства.Вставить("ВключатьУправленческиеНачисления", ДополнительныеПараметры.ВключатьУправленческиеНачисления);
	
КонецПроцедуры

Процедура ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета) Экспорт
	
	МенеджерРасчета.ДополнительныеСвойства.Вставить("ВключатьУправленческиеНачисления", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПланВидовРасчета

Процедура ПриОписанииСвойствНачисленийПоКатегориям(СвойстваПоКатегориям) Экспорт
	
	// - Повременная оплата труда
	Описание = ПланыВидовРасчета.Начисления.СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.КодДоходаСтраховыеВзносы = Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом;
	Описание.КодДоходаСтраховыеВзносы2017 = Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом;
	Описание.КатегорияСтатистическогоНаблюдения = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.НедоступныеСвойства.Добавить("ВидСтажаПФР2014");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидДокументаНачисления");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет, Описание);
	
	// - Доначисление до управленческого учета
	Описание = ПланыВидовРасчета.Начисления.СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоУправленческогоУчета;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидНачисленияДляНУ = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
	Описание.НедоступныеСвойства.Очистить();
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ВидСтажаСЗВ");
	Описание.НедоступныеСвойства.Добавить("ВидСтажаПФР2014");
	Описание.НедоступныеСвойства.Добавить("ВидОтпуска");
	Описание.НедоступныеСвойства.Добавить("ВидДокументаНачисления");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоначислениеДоУправленческогоУчета, Описание);
	
КонецПроцедуры

Процедура ПриСозданииПланаВидовРасчетаПоНастройкам(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений) Экспорт
	
	ИспользоватьУправленческуюЗарплату = Константы.ИспользоватьУправленческуюЗарплату.Получить();
	
	// - Повременная оплата труда
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'УПРПО'");
	Описание.Наименование			= НСтр("ru = 'Повременная оплата труда'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Повременная оплата'");
	Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.КлючевыеСвойства		= "СпособВыполненияНачисления,ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,УчетВремениВЧасах";
	Если ИспользоватьУправленческуюЗарплату Тогда
		ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчета.Начисления.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// - Доначисление до управленческого учета
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоначислениеДоУправленческогоУчета;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru = 'ДОУПР'");
	Описание.Наименование			= НСтр("ru = 'Доначисление до управленческого учета'");
	Описание.КраткоеНаименование 	= НСтр("ru = 'Донач. до упр. учета'");
	Если ИспользоватьУправленческуюЗарплату Тогда
		ПланыВидовРасчета.Начисления.СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	Иначе
		ПланыВидовРасчета.Начисления.ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриДозаполненииПакетаВидовРасчета(КоллекторНачислений) Экспорт
	
	// Если доплата до управленческого учета существует, все начисления входят в состав ее ведущих начислений.
	// Соответственно, нужно
	// - проверить, все ли записываемые начисления входят в состав ведущих доплат до управленческого учета,
	// - если записывается доплата до управленческого учета, заполнить ее список ведущих начислений.
	
	СпособРасчетаДоплаты = Перечисления.СпособыРасчетаНачислений.ДоплатаДоУправленческогоУчета;
	
	// 1. Отбираем начисления коллектора, которые 
	// - учитываются при доплате 
	// - не учитываются при доплате
	// - являются доплатой.
	УчитываютсяПриДоплате = Новый Массив;
	НеУчитываютсяПриДоплате = Новый Массив;
	Доплаты = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		Если НачислениеОбъект.СпособРасчета = СпособРасчетаДоплаты Тогда
			Доплаты.Добавить(НачислениеСсылка);
		Иначе
			Если НачислениеУчитываетсяПриДоплатеДоУправленческогоУчета(НачислениеОбъект) Тогда
				УчитываютсяПриДоплате.Добавить(НачислениеСсылка);
			Иначе
				НеУчитываютсяПриДоплате.Добавить(НачислениеСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем из полученных ссылок таблицу значений и помещаем ее во временную таблицу
	// ВТУчитываютсяПриДоплатеИзКоллектора.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчитываютсяПриДоплатеИзКоллектора.Начисление
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеИзКоллектора
		|ИЗ
		|	&УчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора";
	
	УчитываютсяПриДоплатеТаблица = Новый ТаблицаЗначений;
	УчитываютсяПриДоплатеТаблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(УчитываютсяПриДоплатеТаблица, УчитываютсяПриДоплате, "Начисление");
	
	Запрос.УстановитьПараметр("УчитываютсяПриДоплатеИзКоллектора", УчитываютсяПриДоплатеТаблица);
	Запрос.УстановитьПараметр("СпособРасчетаДоплаты", СпособРасчетаДоплаты);
	Запрос.Выполнить();
	
	// 2. Если в коллекторе есть доплаты, дополняем начислениями из ИБ.
	Если Доплаты.Количество() > 0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УчитываютсяПриДоплате.Ссылка
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК УчитываютсяПриДоплате
			|ГДЕ
			|	УчитываютсяПриДоплате.ВАрхиве = ЛОЖЬ
			|	И НЕ УчитываютсяПриДоплате.Ссылка В
			|				(ВЫБРАТЬ
			|					УчитываютсяПриДоплатеИзКоллектора.Начисление
			|				ИЗ
			|					ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УчитываютсяПриДоплате.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		// 3. В коллекторе у имеющихся доплат корректируем списки ведущих начислений.
		Для Каждого ДоплатаСсылка Из Доплаты Цикл
			ДоплатаОбъект = КоллекторНачислений[ДоплатаСсылка];
			// Проверим 
			// - нет ли в составе ведущих этой доплаты таких начислений, которые нужно изъять.
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаТаблицы Из ДоплатаОбъект.ВедущиеВидыРасчета Цикл
				Если УчитываютсяПриДоплате.Найти(СтрокаТаблицы.ВидРасчета) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.ВедущиеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			// - Все ли нужные начисления есть в составе ее ведущих начислений.
			Для Каждого ВедущееНачисление Из УчитываютсяПриДоплате Цикл
				Если ДоплатаОбъект.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено Тогда
					ДоплатаОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Выявляем доплаты в ИБ, в которые нужно внести изменения в связи с изменениями в начислениях коллектора.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доплаты.Ссылка КАК ДоплатаСсылка
		|ПОМЕСТИТЬ ВТВсеДоплаты
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Доплаты
		|ГДЕ
		|	Доплаты.СпособРасчета = &СпособРасчетаДоплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаДоплаты.Ссылка КАК ДоплатаСсылка,
		|	БазаДоплаты.ВидРасчета КАК ВедущееНачисление
		|ПОМЕСТИТЬ ВТБазаДоплаты
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК БазаДоплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеДоплаты КАК Доплаты
		|		ПО (Доплаты.ДоплатаСсылка = БазаДоплаты.Ссылка)
		|			И (НЕ БазаДоплаты.Ссылка В (&ДоплатыКоллектора))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаДоплаты.ДоплатаСсылка,
		|	БазаДоплаты.ВедущееНачисление
		|ПОМЕСТИТЬ ВТСовпадающиеНачисления
		|ИЗ
		|	ВТБазаДоплаты КАК БазаДоплаты
		|ГДЕ
		|	БазаДоплаты.ВедущееНачисление В
		|			(ВЫБРАТЬ
		|				УчитываютсяПриДоплатеИзКоллектора.Начисление
		|			ИЗ
		|				ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазаДоплаты.ДоплатаСсылка КАК ДоплатаСсылка,
		|	УчитываютсяПриДоплатеИзКоллектора.Начисление КАК ВедущееНачисление
		|ИЗ
		|	ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазаДоплаты КАК БазаДоплаты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадающиеНачисления КАК СовпадающиеНачисления
		|		ПО (СовпадающиеНачисления.ДоплатаСсылка = БазаДоплаты.ДоплатаСсылка)
		|			И (СовпадающиеНачисления.ВедущееНачисление = УчитываютсяПриДоплатеИзКоллектора.Начисление)
		|ГДЕ
		|	СовпадающиеНачисления.ВедущееНачисление ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазаДоплаты.ДоплатаСсылка,
		|	БазаДоплаты.ВедущееНачисление
		|ИЗ
		|	ВТБазаДоплаты КАК БазаДоплаты
		|ГДЕ
		|	БазаДоплаты.ВедущееНачисление В(&НеУчитываютсяПриДоплатеИзКоллектора)"; 
	
	Запрос.УстановитьПараметр("НеУчитываютсяПриДоплатеИзКоллектора", НеУчитываютсяПриДоплате);
	Запрос.УстановитьПараметр("ДоплатыКоллектора", Доплаты);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавляем недостающие начисления.
	ВыборкаДобавить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока ВыборкаДобавить.СледующийПоЗначениюПоля("ДоплатаСсылка") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаДобавить.ДоплатаСсылка];
		Если ДоплатаОбъект = Неопределено Тогда
			// Помещаем начисление в коллектор.
			ДоплатаОбъект = ВыборкаДобавить.ДоплатаСсылка.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаДобавить.ДоплатаСсылка, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаДобавить.Следующий() Цикл
			ДоплатаОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВыборкаДобавить.ВедущееНачисление;
		КонецЦикла;
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ВидРасчета");
	
	// Удаляем избыточные начисления.
	ВыборкаУдалить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока ВыборкаУдалить.СледующийПоЗначениюПоля("ДоплатаСсылка") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаУдалить.ДоплатаСсылка];
		Если ДоплатаОбъект = Неопределено Тогда
			ДоплатаОбъект = ВыборкаУдалить.ДоплатаСсылка.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаУдалить.ДоплатаСсылка, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаУдалить.Следующий() Цикл
			ОтборСтрок.ВидРасчета = ВыборкаУдалить.ВедущееНачисление;
			УдаляемыеСтроки = ДоплатаОбъект.ВедущиеВидыРасчета.НайтиСтроки(ОтборСтрок);
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.ВедущиеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// 5. Если есть начисления, в базовые или ведущие к которым попала доплата, нужно ее оттуда исключить.
	// К имеющимся доплатам из коллектора, получаем еще доплаты из базы.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доплаты.ДоплатаСсылка
		|ИЗ
		|	ВТВсеДоплаты КАК Доплаты";
	Выборка = Запрос.Выполнить().Выбрать();
	ВсеДоплаты = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ВсеДоплаты.Добавить(Выборка.ДоплатаСсылка);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДоплаты, Доплаты, Истина);
	
	// Проверяем по коллектору: в списках начислений коллектора не должно быть ни одной из доплат.
	Для Каждого УчитываемоеНачисление Из УчитываютсяПриДоплате Цикл
		НачислениеОбъект = КоллекторНачислений[УчитываемоеНачисление];
		Если НачислениеОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Доплата Из ВсеДоплаты Цикл
			ОтборСтрок.ВидРасчета = Доплата;
			УдаляемыеСтроки = НачислениеОбъект.ВедущиеВидыРасчета.НайтиСтроки(ОтборСтрок);
			Для Каждого Строка Из УдаляемыеСтроки Цикл
				НачислениеОбъект.ВедущиеВидыРасчета.Удалить(Строка);
			КонецЦикла;
			УдаляемыеСтроки = НачислениеОбъект.БазовыеВидыРасчета.НайтиСтроки(ОтборСтрок);
			Для Каждого Строка Из УдаляемыеСтроки Цикл
				НачислениеОбъект.БазовыеВидыРасчета.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция НачислениеУчитываетсяПриДоплатеДоУправленческогоУчета(НачислениеОбъект)
	
	Если НачислениеОбъект.ВАрхиве = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РасчетНачислений

Процедура ПриРасчетеЗарплатыПредопределеннымСпособом(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, НаборыЗаписей) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоУправленческогоУчета Тогда
		Возврат;
	КонецЕсли;
	
	// Выбираем все начисления, рассчитываем базу в разрезе видов расчета
	// раскладываем базу на управленческие и регламентированные
	// результатом будет разница упр - регл.
	
	СтрокиПоИдентификатору = Новый Соответствие;
	
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого Строка Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(Строка.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(Строка.ИдентификаторСтроки, Строка);
	КонецЦикла;
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	Начисления.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|ГДЕ
		|	Начисления.РассчитываемыйНабор = ИСТИНА
		|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеЗаписи.ВидРасчета КАК Ссылка,
		|	ВидыРасчета.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТБазовыеВидыРасчета
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка <> ОсновныеЗаписи.ВидРасчета)";
		
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	УдалитьВТ.Добавить("ВТОсновныеЗаписи");
	УдалитьВТ.Добавить("ВТБазовыеВидыРасчета");
	
	// Готовим запрос к расчетной базе начислений.
	ИменаИзмерений = РасчетЗарплатыРасширенный.ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(РасчетЗарплатыРасширенный.ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.Начисления, Истина);
	РасчетЗарплатыРасширенный.СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, "ВТБазовыеВидыРасчета", ОтборБазовыхЗаписей);
	УдалитьВТ.Добавить("ВТРасчетнаяБаза");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеЗаписи.ИдентификаторСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетнаяБаза.ВидРасчетаРазрез.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет)
		|				ТОГДА РасчетнаяБаза.РезультатБаза
		|			ИНАЧЕ -РасчетнаяБаза.РезультатБаза
		|		КОНЕЦ) КАК Результат
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = РасчетнаяБаза.ВидРасчетаРазрез)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ПО (ОсновныеЗаписи.Регистратор = РасчетнаяБаза.Регистратор)
		|			И (ОсновныеЗаписи.НомерСтроки = РасчетнаяБаза.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписи.ИдентификаторСтроки";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаТаблицы.Результат = Макс(Выборка.Результат, 0);
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура ПриФормированииСтруктурыСодержимоеДокументаРасчетаЗарплаты(СодержимоеДокумента, Объект) Экспорт
	
	СодержимоеДокумента.Вставить("УправленческиеНачисления", РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления());
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, КонтролируемыеПоля, СодержимоеДокумента) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если СодержимоеДокумента.УправленческиеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПоля = "Сотрудник, Начисление";
	СочетанияСтрок = РасчетЗарплатыРасширенный.СочетанияИсправленныхСтрок(СодержимоеДокумента.УправленческиеНачисления, КонтролируемыеПоля["УправленческиеНачисления"], КлючевыеПоля);
	Если СочетанияСтрок.Количество() > 0 Тогда
		СодержимоеДокумента.УправленческиеНачисления.Индексы.Добавить(КлючевыеПоля);
		ОтборСтрок = Новый Структура(КлючевыеПоля);
		Для Каждого Строка Из СочетанияСтрок Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
			НайденныеСтроки = СодержимоеДокумента.УправленческиеНачисления.НайтиСтроки(ОтборСтрок);
			ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				РасчетЗарплатыРасширенныйФормы.СтрокаУправленческиеНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, НайденнаяСтрока, ФизическоеЛицо);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СодержимоеДокумента) Экспорт 
	
	Для Каждого Строка Из СодержимоеДокумента.УправленческиеНачисления Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаУправленческиеНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ФизическоеЛицо);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыДокументовНачисленияЗарплаты

Процедура ПриПолученииДанныхДокументаНачисленияЗарплаты(ЭтотОбъект, ТекущийОбъект, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(
		ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриПолученииДанныхДокументаОплатыТруда(Форма) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицы, 2);
	
КонецПроцедуры

Процедура ПриЗавершенииИнициализацииФормыДокументаНачисленияЗарплаты(Форма, РежимДоначисления = Ложь, ИспользоватьНачисление = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Форма.Элементы, "ГруппаУправленческиеНачисления", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Форма.Объект.УправленческиеНачисления, "Сотрудник", Истина);
	
	ПроверяемыеДанные = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	ПроверяемыеДанные.МассивФизическихЛиц = КадровыйУчет.ФизическиеЛицаСотрудников(МассивСотрудников);
	
	ДоступКУправленческойЗарплате = ДоступКУправленческойЗарплате("НачисленнаяЗарплата", ПроверяемыеДанные);
	УстановитьВидимостьДоступностьГруппыУправленческихНачислений(Форма, ДоступКУправленческойЗарплате, РежимДоначисления Или ИспользоватьНачисление);
	
	Если Не Форма.Элементы.ГруппаУправленческиеНачисления.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.УправленческиеНачисления, "ПериодДействия", "ПериодДействияСтрокой");
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, Элементы.УправленческиеНачисленияПодробно.Пометка, ОписаниеТаблицы);
	
КонецПроцедуры

Процедура ПриЗавершенииИнициализацииФормыДокументаОплатыТруда(Форма, ОписаниеДокумента, ИспользоватьНачисление = Истина) Экспорт
	
	ПриИзмененииУсловийОпределяющихВидимостьДоступностьГруппыУправленческихНачислений(Форма, ОписаниеДокумента, ИспользоватьНачисление);
	
КонецПроцедуры

Процедура ПриИзмененииПризнакаРассчитыватьЗарплатуДокументаОплатыТруда(Форма, ОписаниеДокумента, РассчитыватьЗарплату) Экспорт
	
	ПриИзмененииУсловийОпределяющихВидимостьДоступностьГруппыУправленческихНачислений(Форма, ОписаниеДокумента, РассчитыватьЗарплату);
	
КонецПроцедуры

Процедура ПриЗаполненииСпискаТаблицНачисленияЗарплаты(ИменаТаблиц) Экспорт
	ИменаТаблиц.Добавить("УправленческиеНачисления");
КонецПроцедуры

Процедура ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	ФиксРасчет = Новый Массив;
	ФиксРасчет.Добавить("Результат");
	
	ФиксРасчетВремени = Новый Массив;
	ФиксРасчетВремени.Добавить("ОтработаноДней");
	ФиксРасчетВремени.Добавить("ОтработаноЧасов");
	ФиксРасчетВремени.Добавить("НормаДней");
	ФиксРасчетВремени.Добавить("НормаЧасов");
	
	ФиксСтрока = Новый Массив;
	ФиксСтрока.Добавить("Сотрудник");
	ФиксСтрока.Добавить("Подразделение");
	ФиксСтрока.Добавить("Начисление");
	ФиксСтрока.Добавить("ДатаНачала");
	ФиксСтрока.Добавить("ДатаОкончания");
	
	Поля = Новый Структура;
	Поля.Вставить("ФиксРасчет", ФиксРасчет);
	Поля.Вставить("ФиксЗаполнение", Новый Массив);
	Поля.Вставить("ФиксСтрока", ФиксСтрока);
	Поля.Вставить("ФиксРасчетВремени", ФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("УправленческиеНачисления", Поля);
	
КонецПроцедуры

Процедура ПриДополненииФормыДокументаБольничныйЛист(Форма, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицы.ОтменятьВсеИсправления = Ложь;
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
		Форма, 
		ОписаниеТаблицы, 
		"Начисления", 
		"УправленческиеНачисленияАвтоКоманды", ,
		ДополнительныеПараметры.КонтролируемыеПоля, 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы, 
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы, 
		ДополнительныеПараметры.ОтложенноеИзменение, 
		Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ПриДополненииФормыДокументаНачислениеЗарплаты(Форма, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
		Форма, 
		ОписаниеТаблицы, 
		"Начисления", 
		"УправленческиеНачисленияАвтоКоманды", ,
		ДополнительныеПараметры.КонтролируемыеПоля, 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы, 
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы, 
		ДополнительныеПараметры.ОтложенноеИзменение, 
		Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ПриДополненииФормыДокументаОтпускПоУходуЗаРебенком(Форма, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицы.ОтменятьВсеИсправления = Ложь;
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
		Форма, 
		ОписаниеТаблицы, 
		"Начисления", 
		"УправленческиеНачисленияАвтоКоманды", ,
		ДополнительныеПараметры.КонтролируемыеПоля, 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы, 
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы, 
		ДополнительныеПараметры.ОтложенноеИзменение, 
		Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ПриДополненииФормыДокументаОтпуск(Форма, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицы.ОтменятьВсеИсправления = Ложь;
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
		Форма, 
		ОписаниеТаблицы, 
		"Начисления", 
		"УправленческиеНачисленияАвтоКоманды", ,
		ДополнительныеПараметры.КонтролируемыеПоля, 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы, 
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы, 
		ДополнительныеПараметры.ОтложенноеИзменение, 
		Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ПриДополненииФормыДокументаУвольнение(Форма, ДополнительныеПараметры) Экспорт
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ОписаниеТаблицы.ОтменятьВсеИсправления = Ложь;
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
		Форма, 
		ОписаниеТаблицы, 
		"Начисления", 
		"УправленческиеНачисленияАвтоКоманды", ,
		ДополнительныеПараметры.КонтролируемыеПоля, 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы, 
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы, 
		ДополнительныеПараметры.ОтложенноеИзменение, 
		Форма.Объект.Ссылка);
	
КонецПроцедуры

Процедура ПриУстановкеВидимостиРасчетныхПолейДокументаОплатыТруда(Форма) Экспорт
	
	УстановитьВидимостьДоступностьГруппыУправленческихНачислений(Форма, Форма.ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате, Форма.Объект.РассчитатьЗарплату);
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьГруппыУправленческихНачислений(Форма, ДоступКУправленческойЗарплате, ИспользоватьНачисление = Истина)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Форма.Элементы, "ГруппаУправленческиеНачисления", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ВидимостьНачислений = ИспользоватьНачисление;
	Если ДоступКУправленческойЗарплате.Чтение = Ложь Тогда
		ВидимостьНачислений = Ложь;
	КонецЕсли;
	
	ДоступностьНачислений = ВидимостьНачислений;
	Если ВидимостьНачислений Тогда
		Если ДоступКУправленческойЗарплате.Изменение = Ложь Тогда
			ДоступностьНачислений = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Форма.Элементы, "ГруппаУправленческиеНачисления", "Видимость", ВидимостьНачислений);
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Форма.Элементы, "ГруппаУправленческиеНачисления", "ТолькоПросмотр", Не ДоступностьНачислений);
	
КонецПроцедуры

Процедура ПриИзмененииУсловийОпределяющихВидимостьДоступностьГруппыУправленческихНачислений(Форма, ОписаниеДокумента, ИспользоватьНачисление = Истина)
	
	УстановитьВидимостьДоступностьГруппыУправленческихНачислений(Форма, Форма.ОграниченияНаУровнеЗаписей.ДоступКУправленческойЗарплате, ИспользоватьНачисление);
	
	Если Не Форма.Элементы.ГруппаУправленческиеНачисления.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОписаниеТаблицы = УправленческаяЗарплатаКлиентСервер.ОписаниеТаблицыУправленческихНачислений();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.УправленческиеНачисления, "ПериодДействия", "ПериодДействияСтрокой");
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(Форма, Элементы.УправленческиеНачисленияПодробно.Пометка, ОписаниеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ДоступКУправленческойЗарплате

Процедура ПриПолученииПравНаМногоФункциональныйДокумент(ПраваНаДокумент, ОписаниеДокумента, ПроверяемыеДанные) Экспорт
	
	ДоступКУправленческойЗарплате = ДоступКУправленческойЗарплате(ОписаниеДокумента.ВидУчета, ПроверяемыеДанные);
	ПраваНаДокумент.ОграниченияНаУровнеЗаписей.Вставить("ДоступКУправленческойЗарплате", ДоступКУправленческойЗарплате);
	
КонецПроцедуры

Функция ДоступКУправленческойЗарплате(ВидУчета, ПроверяемыеДанные)
	
	// Для рабочего времени не проверяем ограничения на уровне записей.
	Если ВидУчета = "РабочееВремя" Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПривилегированныйРежим() И ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ВызватьИсключение НСтр("ru = 'Проверка доступа к управленческой зарплате осуществляется в привилегированном режиме.'");
	КонецЕсли;
	
	Доступ = Новый Структура(
		"Чтение, 
		|Изменение");
		
	Доступ.Чтение = Истина;
	Доступ.Изменение = Истина;
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда 
		Возврат Доступ;
	КонецЕсли;
	
	Если ВидУчета = "НачисленнаяЗарплата" Тогда 
		ПараметрыЧтения = ПараметрыДоступа("Чтение", Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, "Организация,ФизическоеЛицо,Подразделение");
		ПараметрыИзменения = ПараметрыДоступа("Изменение", Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, "Организация,ФизическоеЛицо,Подразделение");
	ИначеЕсли ВидУчета = "ПлановыеНачисления" Тогда
		ПараметрыЧтения = ПараметрыДоступа("Чтение", Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, "Организация,ФизическоеЛицо");
		ПараметрыИзменения = ПараметрыДоступа("Изменение", Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, "Организация,ФизическоеЛицо");
	ИначеЕсли ВидУчета = "КадровыеДанные" Тогда
		ПараметрыЧтения = ПараметрыДоступа("Чтение", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, "Организация,ФизическоеЛицо");
		ПараметрыИзменения = ПараметрыДоступа("Изменение", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, "Организация,ФизическоеЛицо");
	КонецЕсли;
	
	Если Не ПараметрыЧтения.ОграничениеУсловием Тогда
		Если Не ПараметрыИзменения.ОграничениеУсловием Тогда
			Возврат Доступ;
		КонецЕсли;
	КонецЕсли;
	
	ПроверятьЧтениеПопыткой = Истина;
	ПроверятьИзменениеПопыткой = Истина;
	Если Не ПараметрыИзменения.Доступность Тогда
		Доступ.Изменение = Ложь;
		ПроверятьИзменениеПопыткой = Ложь;
		Если Не ПараметрыЧтения.Доступность Тогда
			Доступ.Чтение = Ложь;
			ПроверятьЧтениеПопыткой = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверятьЧтениеПопыткой И Не ПроверятьИзменениеПопыткой Тогда
		Возврат Доступ;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	УстановитьПривилегированныйРежим(Ложь);
	
	Подразделения = Новый Массив;
	МассивФизическихЛиц = Новый Массив;
	Если ТипЗнч(ПроверяемыеДанные) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ПроверяемыеДанные Цикл
			Если ЗначениеЗаполнено(ЭлементМассива.Подразделение) Тогда
				Подразделения.Добавить(ЭлементМассива.Подразделение);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФизическихЛиц, ЭлементМассива.МассивФизическихЛиц, Истина);
		КонецЦикла;
	Иначе
		Подразделения.Добавить(ПроверяемыеДанные.Подразделение);
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда
			Если ПроверяемыеДанные.МассивФизическихЛиц <> Неопределено Тогда
				МассивФизическихЛиц = ПроверяемыеДанные.МассивФизическихЛиц;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивФизическихЛиц, Справочники.ФизическиеЛица.ПустаяСсылка());
	
	// Заполняем тестовый набор записей.
	Период = ТекущаяДатаСеанса();
	Если ВидУчета = "НачисленнаяЗарплата" Тогда 
		Регистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
		Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Регистратор, , Истина);
		НаборЗаписей = НаборыЗаписей["НачисленияУдержанияПоСотрудникам"];
		Если МассивФизическихЛиц.Количество() = 0 Тогда 
			МассивФизическихЛиц.Добавить(Неопределено);
		КонецЕсли;
		Для Каждого Подразделение Из Подразделения Цикл
			Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Регистратор = Регистратор;
				НоваяСтрока.Период = Период;
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Подразделение = Подразделение;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ВидУчета = "ПлановыеНачисления" Тогда 	
		Регистратор = Документы.ПриемНаРаботу.ПолучитьСсылку();
		Показатель = Справочники.ПоказателиРасчетаЗарплаты.ПолучитьСсылку();
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ПриемНаРаботу, Регистратор, , Истина);
		НаборЗаписей = НаборыЗаписей["ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников"];
		Если МассивФизическихЛиц.Количество() = 0 Тогда 
			МассивФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку());
		КонецЕсли;
		Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Регистратор = Регистратор;
			НоваяСтрока.Период = Период;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.Показатель = Показатель;
		КонецЦикла;
	ИначеЕсли ВидУчета = "КадровыеДанные" Тогда
		Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
		ГоловнаяОрганизация = Справочники.Организации.ПолучитьСсылку();
		НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(Организация);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Если МассивФизическихЛиц.Количество() = 0 Тогда 
			МассивФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку());
		КонецЕсли;
		Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
			НоваяСтрока.ТекущаяОрганизация = Организация;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	// Проверка на запись.
	Если ПроверятьИзменениеПопыткой Тогда
		ПроверитьДоступНаИзменение(Доступ, НаборЗаписей);
	КонецЕсли;
	
	// Проверка на чтение.
	// Записываем набор в привилегированном режиме и пробуем прочитать.
	Если ПроверятьЧтениеПопыткой Тогда 
		ПроверитьДоступНаЧтение(Доступ, НаборЗаписей);
	КонецЕсли;
	
	Возврат Доступ;
	
КонецФункции

Процедура ПроверитьДоступНаИзменение(Доступ, НаборЗаписей)
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда 
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	    Доступ.Изменение = Истина;
	Исключение 
		Доступ.Изменение = Ложь;
	КонецПопытки;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ПроверитьДоступНаЧтение(Доступ, НаборЗаписей)
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда 
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		НаборЗаписей.Прочитать();
	    Доступ.Чтение = Истина;
	Исключение 
		Доступ.Чтение = Ложь;
	КонецПопытки;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокументовНачисленияЗарплаты

Процедура ПриОписанииДанныхДляПроведенияДокумента(ДанныеДляПроведения) Экспорт
	
	// Данные управленческого учета реализуются в виде вложенной структуры.
	ДанныеДляПроведения.Вставить("УправленческийУчет", Новый Структура);
	
КонецПроцедуры

Функция ДополнительныеПараметрыПодготовкиДанныхДляПроведения() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ПолеДатыДействия,
		|ПолеВидаНачисления,
		|СписокФизическихЛиц");
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ПриПодготовкеДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения, ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ПолеДатыДействия = ДополнительныеПараметры.ПолеДатыДействия; 
	ПолеВидаНачисления = ДополнительныеПараметры.ПолеВидаНачисления; 
	СписокФизическихЛиц = ДополнительныеПараметры.СписокФизическихЛиц;
	
	ДанныеДляПроведения.УправленческийУчет = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	// Получаем отдельно таблицы для движений по управленческому учету.
	РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения.УправленческийУчет, ДокументСсылка, "УправленческиеНачисления", ПолеДатыДействия, ПолеВидаНачисления, СписокФизическихЛиц);
	
КонецПроцедуры

Процедура ПослеПодготовкиДанныхДляПроведенияДокументаРасчетаЗарплаты(ДанныеДляПроведения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроведения.УправленческийУчет.МенеджерВременныхТаблиц = Неопределено;

КонецПроцедуры

Процедура СформироватьДвиженияНачислений(Движения, Отказ, ДанныеДляПроведения, МесяцНачисления) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческийУчет = ДанныеДляПроведения.УправленческийУчет;
	СформироватьДвиженияНачисленийПериодаРегистрации(
		Движения,
		Отказ,
		УправленческийУчет.Начисления,
		УправленческийУчет.ПоказателиНачислений,
		МесяцНачисления)
	
КонецПроцедуры

Процедура СформироватьДвиженияНачисленийПериодаРегистрации(Движения, Отказ, Начисления, ПоказателиНачислений, МесяцНачисления) Экспорт
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
		Движения,
		Отказ,
		УправленческаяОрганизация,
		КонецМесяца(МесяцНачисления),
		Начисления,
		ПоказателиНачислений,
		Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияУдержания(Движения, Отказ, ДанныеДляПроведения, МесяцНачисления, ПорядокВыплаты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческийУчет = ДанныеДляПроведения.УправленческийУчет;
	ЗарегистрироватьНачисленияУдержанияПериодаРегистрации(Движения, Отказ, МесяцНачисления, УправленческийУчет.НачисленияПоСотрудникам, ПорядокВыплаты)
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияУдержанияПериодаРегистрации(Движения, Отказ, МесяцНачисления, НачисленияПоСотрудникам, ПорядокВыплаты) Экспорт
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
		Движения,
		Отказ,
		УправленческаяОрганизация,
		МесяцНачисления,
		НачисленияПоСотрудникам,
		Неопределено,
		Неопределено,
		Неопределено,
		ПорядокВыплаты);
		
КонецПроцедуры

Процедура ЗарегистрироватьОтработанноеВремя(Движения, Отказ, ДанныеДляПроведения, МесяцНачисления, ПорядокВыплаты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	УправленческийУчет = ДанныеДляПроведения.УправленческийУчет;
	ЗарегистрироватьОтработанноеВремяПериодаРегистрации(Движения, Отказ, МесяцНачисления, УправленческийУчет.ОтработанноеВремяПоСотрудникам, ПорядокВыплаты);
	
КонецПроцедуры

Процедура ЗарегистрироватьОтработанноеВремяПериодаРегистрации(Движения, Отказ, МесяцНачисления, ОтработанноеВремяПоСотрудникам, ПорядокВыплаты) Экспорт

	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
		Движения,
		Отказ,
		УправленческаяОрганизация,
		МесяцНачисления,
		ОтработанноеВремяПоСотрудникам,
		ПорядокВыплаты,
		Истина);
	
КонецПроцедуры

Процедура ПриРегистрацииНачисленийУдержанийПоСотрудникам(Движения, Отказ, СтрокиНачислений, ХарактерВыплаты, ПериодРегистрации) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получить всех сотрудников не управленческих организаций.
	// Для тех сотрудников, позиция штатного расписания по которым использует начисления управленческого учета, 
	// делаем "обратные" регламентированным движения по управленческой организации.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Сотрудники = Новый ТаблицаЗначений;
	Сотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Сотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		ЗаполнитьЗначенияСвойств(Сотрудники.Добавить(), Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&Сотрудники КАК Сотрудники";
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Ложь, "ДолжностьПоШтатномуРасписанию");
	
	ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТКадровыеДанныеСотрудников");
	ПараметрыПостроения.ИмяПоляПозицияШтатногоРасписания = "ДолжностьПоШтатномуРасписанию";
	
	УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
		МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "ИспользоватьУправленческиеНачисления", "ВТПозицииШтатногоРасписания");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		|			ПО (ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = КадровыеДанные.ДолжностьПоШтатномуРасписанию)
		|				И (ПозицииШтатногоРасписания.ИспользоватьУправленческиеНачисления)
		|		ПО (КадровыеДанные.Сотрудник = Сотрудники.Сотрудник)
		|			И (КадровыеДанные.Период = Сотрудники.ДатаНачала)";
		
	Сотрудники = Запрос.Выполнить().Выгрузить();
	Сотрудники.Индексы.Добавить("Сотрудник, ДатаНачала");
	ОтборСтрок = Новый Структура("Сотрудник, ДатаНачала");
	
	ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	СтрокиВзаиморасчетов = Новый Массив;
	Для Каждого Строка Из СтрокиНачислений Цикл
		// Пропускаем строки, которые уже по управленческой организации
		Если Строка.Организация = УправленческаяОрганизация Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
		// Если сотрудник на указанную дату был на позиции, для которой используются управленческие начисления, 
		// копируем строку по управленческой организации, инвертируя знак.
		НайденныеСтроки = Сотрудники.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
		НоваяСтрока.Сумма = - Строка.Сумма;
		// Добавляем новую строку во взаиморасчеты.
		УчитыватьВоВзаиморасчетах = Истина;
		ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.НачислениеУдержание];
		Если ПравилаУчетаНачисления <> Неопределено Тогда
			УчитыватьВоВзаиморасчетах = ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах;
		КонецЕсли;
		Если УчитыватьВоВзаиморасчетах Тогда
			СтрокиВзаиморасчетов.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из СтрокиВзаиморасчетов Цикл
			НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, 
			Отказ, 
			УправленческаяОрганизация, 
			ПериодРегистрации, 
			ХарактерВыплаты,
			НачисленияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

Процедура ПриЗаполненииНачисленийДополнитьТаблицуВТСотрудникиПериоды(МенеджерВременныхТаблиц, Начало, Окончание, ДополнительныеПараметры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ВключатьУправленческиеНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаУправленческийУчет
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	Запрос.Выполнить();
	
	ПараметрыСотрудники = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыСотрудники.ИмяВТФизическиеЛица = "ВТФизическиеЛицаУправленческийУчет";
	ПараметрыСотрудники.Организация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	ПараметрыСотрудники.НачалоПериода = Начало;
	ПараметрыСотрудники.ОкончаниеПериода = Окончание;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Ложь, ПараметрыСотрудники, "ВТСотрудникиУправленческийУчет");
	
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ГоловнаяОрганизация,
		|	СотрудникиПериоды.*
		|ПОМЕСТИТЬ ВТВсеСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.Организация,
		|	СотрудникиПериоды.ГоловнаяОрганизация,
		|	СотрудникиПериоды.*
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	&УправленческаяОрганизация,
		|	&УправленческаяОрганизация,
		|	СотрудникиПериоды.*
		|ИЗ
		|	ВТВсеСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиУправленческийУчет КАК СотрудникиУправленческийУчет
		|		ПО (СотрудникиУправленческийУчет.Сотрудник = СотрудникиПериоды.Сотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТФизическиеЛицаУправленческийУчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиУправленческийУчет";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПриОпределенииПричиныИзмененийРасчетаДанныхФормы(ОписаниеТаблицы, ПричинаИзменений) Экспорт
	
	Если ОписаниеТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТаблицы.ИмяТаблицы = "УправленческиеНачисления" Тогда
		ПричинаИзменений = "Начисления";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПереносеДанныхЗаполненияЗарплатыВДокумент(ДанныеЗаполнения, Объект) Экспорт
	
	Объект.УправленческиеНачисления.Очистить();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.УправленческиеНачисления, Объект.УправленческиеНачисления);
	
КонецПроцедуры

Процедура ПриПодготовкеДанныхДляПерезаполнения(СодержимоеДокумента, ОписаниеДокумента, ОбновлятьДанныеДокумента, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеДокумента.УправленческиеНачисленияИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновлятьДанныеДокумента Тогда
		ОбновитьДанныеДокументаПоДаннымУчета(СодержимоеДокумента, ОписаниеДокумента, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	СотрудникиРасчета = ДополнительныеПараметры.СотрудникиРасчета;
	
	Если Сотрудники = Неопределено Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.УправленческиеНачисленияИмя], "Сотрудник", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, МассивСотрудников, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриФормированииВТГрафикиРаботыПоПериодамИзменений(МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.ВключатьУправленческиеНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыИзменений.Организация,
		|	ПериодыИзменений.*
		|ПОМЕСТИТЬ ВТВсеГрафикиРаботыПоПериодамИзменений
		|ИЗ
		|	ВТГрафикиРаботыПоПериодамИзменений КАК ПериодыИзменений
		|ГДЕ
		|	ПериодыИзменений.Организация <> &УправленческаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТГрафикиРаботыПоПериодамИзменений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИзменений.Организация,
		|	ПериодыИзменений.*
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоПериодамИзменений
		|ИЗ
		|	ВТВсеГрафикиРаботыПоПериодамИзменений КАК ПериодыИзменений"; 
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДополнительныеПараметрыОбновленияДанныхДокументаПоДаннымУчета() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"СохранятьИсправления, 
		|КонтролируемыеПоля,
		|СтруктураНачислений,
		|ОтборПоСотрудникам,
		|Сотрудники,
		|СотрудникиРасчета");
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ДополнительныеПараметрыРасчетаДанныхФормыПоСотрудникам() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"МенеджерВременныхТаблиц,
		|МесяцНачисления,
		|Организация,
		|Сотрудники,
		|Физлица,
		|ПричинаИзменений,
		|НаборыЗаписей,
		|РегистраторыНачислений,
		|ИменаВТ,
		|ПересчитыватьНачисления,
		|ИсключатьСтрокиПолностьюВытесненныхНачислений");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьЗапросПредставленияПодразделенияСортировкиСотрудников(Запрос) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Если ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
		
		Запрос.Текст =
			Запрос.Текст
			+ "
			  |ОБЪЕДИНИТЬ ВСЕ
			  |"
			+ "ВЫБРАТЬ
			  |	КадровыеДанныеСотрудников.Период КАК Период,
			  |	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	&УправленческаяОрганизация КАК УправленческаяОрганизация,
			  |	МАКСИМУМ(КадровыеДанныеСотрудниковСПриоритетами.Подразделение) КАК Подразделение
			  |ИЗ
			  |	ВТВысшиеПриоритетыПодразделенийСотрудников КАК КадровыеДанныеСотрудников
			  |		ЛЕВОЕ СОЕДИНЕНИЕ Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний КАК КадровыеДанныеСотрудниковСПриоритетами
			  |		ПО КадровыеДанныеСотрудников.Период = КадровыеДанныеСотрудниковСПриоритетами.Период
			  |			И КадровыеДанныеСотрудников.ФизическоеЛицо = КадровыеДанныеСотрудниковСПриоритетами.ФизическоеЛицо
			  |			И КадровыеДанныеСотрудников.ПриоритетПодразделения = КадровыеДанныеСотрудниковСПриоритетами.Подразделение.РеквизитДопУпорядочиванияИерархического
			  |			И КадровыеДанныеСотрудников.ГоловнаяОрганизация = КадровыеДанныеСотрудниковСПриоритетами.Подразделение.ГоловнаяОрганизация
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	КадровыеДанныеСотрудников.Период,
			  |	КадровыеДанныеСотрудников.ФизическоеЛицо";
		
		Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.3";
	Обработчик.Процедура = "РегистрыСведений.ИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.ЗаполнитьИсторию";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.91";
	Обработчик.Процедура = "УправленческаяЗарплата.УточнитьКодДоходаСтраховыеВзносы2017";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9d1b7a0b-8566-46c0-9d2d-036cfaafa2dc");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение кода дохода страховых взносов для управленческих видов начислений.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.93";
	Обработчик.Процедура = "УправленческаяЗарплата.ЗаполнитьОрганизациюНастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ec4c01f0-77f0-47d7-995e-fcf9edeabc47");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение организации для настроек расчета управленческой зарплаты позиций штатного расписания.'");
	
КонецПроцедуры

Процедура УточнитьКодДоходаСтраховыеВзносы2017(ПараметрыОбновления) Экспорт
	
	КодНеЯвляетсяОбъектом = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорияУправленческоеНачисление", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.УправленческийУчет);
	Запрос.УстановитьПараметр("КодНеЯвляетсяОбъектом", КодНеЯвляетсяОбъектом);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Начисления.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияУправленческоеНачисление
		|	И (Начисления.КодДоходаСтраховыеВзносы2017 <> &КодНеЯвляетсяОбъектом
		|			ИЛИ Начисления.КодДоходаСтраховыеВзносы <> &КодНеЯвляетсяОбъектом)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.КодДоходаСтраховыеВзносы = КодНеЯвляетсяОбъектом;
		НачислениеОбъект.КодДоходаСтраховыеВзносы2017 = КодНеЯвляетсяОбъектом;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюНастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания(ПараметрыОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НастройкиРасчета.Позиция КАК Позиция,
		|	НастройкиРасчета.ИспользоватьУправленческиеНачисления КАК ИспользоватьУправленческиеНачисления,
		|	НастройкиРасчета.ДоначислятьДоУправленческогоУчета КАК ДоначислятьДоУправленческогоУчета,
		|	НастройкиРасчета.Позиция.Владелец КАК Организация
		|ИЗ
		|	РегистрСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания КАК НастройкиРасчета
		|ГДЕ
		|	НастройкиРасчета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИсточникСведенийОШтатномРасписании

Процедура ДополнитьОписаниеИсточниковСведенийОШтатномРасписании(ОписаниеИсточников) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОписаниеСведенийСправочника(ОписаниеИсточников);
	ДобавитьОписаниеСведенийИсторииИзменений(ОписаниеИсточников);
	ДобавитьОписаниеСведенийНастроекУправленческойЗарплатыШтатногоРасписания(ОписаниеИсточников);
	
КонецПроцедуры


Процедура ДобавитьОписаниеСведенийСправочника(ОписаниеИсточников)
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсточника = "СправочникШтатноеРасписание";
	ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийИсторииИзменений(ОписаниеИсточников)
	
	Если Не ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсточника = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
	ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника);
	
КонецПроцедуры

Процедура ДобавитьОписаниеСведенийНастроекУправленческойЗарплатыШтатногоРасписания(ОписаниеИсточников)
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ИдентификаторИсточника = "РегистрСведенийИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания";
	Иначе
		ИдентификаторИсточника = "РегистрСведенийНастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания";
	КонецЕсли;
	
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведений(ОписаниеИсточников, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ИспользоватьУправленческиеНачисления";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ДоначислятьДоУправленческогоУчета";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ОписаниеИсточника.ЗависимостьОтИсточников.Добавить("СправочникШтатноеРасписание");
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания КАК РегистрСведенийИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания
			|		ПО РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = РегистрСведенийИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.ПозицияШтатногоРасписания
			|			И РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата = РегистрСведенийИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.Дата}";
		
	Иначе
		
		ОписаниеИсточника.ТекстСоединений = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания КАК РегистрСведенийНастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания
			|		ПО СправочникШтатноеРасписание.Ссылка = РегистрСведенийНастройкиРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.Позиция}";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеВерсионируемыхДанныхШтатногоРасписания(ОписаниеИсточников, ИдентификаторИсточника)
	
	ИмяДанныхШР = "ФОТУправленческийМин";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТУправленческийМакс";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
	ИмяДанныхШР = "ФОТУправленческий";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточника);
	
КонецПроцедуры


#Область ИсточникСведенийОНачисленияхШтатногоРасписания

Процедура ДобавитьОписаниеСведенийОбУправленческихНачислениях(ПараметрыПостроения, ОписанияИсточниковНачислений) Экспорт
	
	Если Не ПараметрыПостроения.УправленческиеНачисления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюЗарплату") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсточников = УправлениеШтатнымРасписанием.ПустоеОписаниеИсточников();
	ОписанияИсточниковНачислений.Добавить(ОписаниеИсточников);
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		ИдентификаторИсточникаНачислений = "РегистрСведенийИсторияУправленческихНачисленийПоШтатномуРасписанию";
		ИдентификаторИсточникаПоказателей = "РегистрСведенийИсторияУправленческихПоказателейПоШтатномуРасписанию";
	Иначе
		ИдентификаторИсточникаНачислений = "СправочникШтатноеРасписаниеУправленческиеНачисления";
		ИдентификаторИсточникаПоказателей = "СправочникШтатноеРасписаниеУправленческиеПоказатели";
	КонецЕсли;
	
	ОписаниеИсточника = УправлениеШтатнымРасписанием.ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаНачислений);
	УправлениеШтатнымРасписанием.ОписаниеИсточникаСведенийНачислений(ОписаниеИсточников, ИдентификаторИсточникаПоказателей);
	
	ИмяДанныхШР = "УправленческиеНачисления";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений,
		"ИСТИНА");
	
	ИмяДанныхШР = "Начисление";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "Показатель";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))");
	
	ИмяДанныхШР = "ИдентификаторСтрокиВидаРасчета";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "РазмерМин";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "РазмерМакс";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "ЗначениеМин";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	ИмяДанныхШР = "ЗначениеМакс";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	ИмяДанныхШР = "Размер";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаНачислений);
	
	ИмяДанныхШР = "Значение";
	УправлениеШтатнымРасписанием.ДобавитьОписаниеСведенийШтатногоРасписания(ОписаниеИсточников, ИмяДанныхШР, ИдентификаторИсточникаПоказателей,
		"ЕСТЬNULL(" + ИдентификаторИсточникаПоказателей + "." + ИмяДанныхШР + ", 0)");
	
	Если ОписаниеИсточников.ЗначенияОпций.ИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеСоединения();
		Соединение.Источник = "РегистрСведений.ИсторияУправленческихНачисленийПоШтатномуРасписанию";
		Соединение.Псевдоним = ИдентификаторИсточникаНачислений;
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Соединение.Условие =
			"РегистрСведенийИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = " + ИдентификаторИсточникаНачислений + ".ПозицияШтатногоРасписания
			|	И РегистрСведенийИсторияИспользованияШтатногоРасписания.Дата = " + ИдентификаторИсточникаНачислений + ".Дата";
		
		Соединение.ПсевдонимИсточникаСвязи = "РегистрСведенийИсторияИспользованияШтатногоРасписания";
		
		СоединениеСПоказателями = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеСоединения();
		СоединениеСПоказателями.Источник = "РегистрСведений.ИсторияУправленческихПоказателейПоШтатномуРасписанию";
		СоединениеСПоказателями.Псевдоним = ИдентификаторИсточникаПоказателей;
		СоединениеСПоказателями.Условие =
			ИдентификаторИсточникаНачислений + ".ПозицияШтатногоРасписания = " + ИдентификаторИсточникаПоказателей + ".ПозицияШтатногоРасписания
			|	И " + ИдентификаторИсточникаНачислений + ".ИдентификаторСтрокиВидаРасчета = " + ИдентификаторИсточникаПоказателей + ".ИдентификаторСтрокиВидаРасчета
			|	И " + ИдентификаторИсточникаНачислений + ".Дата = " + ИдентификаторИсточникаПоказателей + ".Дата";
		
		Соединение.Соединения.Добавить(СоединениеСПоказателями);
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	Иначе
		
		Соединение = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеСоединения();
		Соединение.Источник = "Справочник.ШтатноеРасписание.УправленческиеНачисления";
		Соединение.Псевдоним = ИдентификаторИсточникаНачислений;
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		Соединение.Условие =
			"СправочникШтатноеРасписание.Ссылка = " + ИдентификаторИсточникаНачислений + ".Ссылка";
		
		Соединение.ПсевдонимИсточникаСвязи = "СправочникШтатноеРасписание";
		
		СоединениеСПоказателями = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеСоединения();
		СоединениеСПоказателями.Источник = "Справочник.ШтатноеРасписание.УправленческиеПоказатели";
		СоединениеСПоказателями.Псевдоним = ИдентификаторИсточникаПоказателей;
		СоединениеСПоказателями.Условие =
			ИдентификаторИсточникаНачислений + ".Ссылка = " + ИдентификаторИсточникаПоказателей + ".Ссылка
			|	И " + ИдентификаторИсточникаНачислений + ".ИдентификаторСтрокиВидаРасчета = " + ИдентификаторИсточникаПоказателей + ".ИдентификаторСтрокиВидаРасчета";
		
		Соединение.Соединения.Добавить(СоединениеСПоказателями);
		ОписаниеИсточника.Соединения.Добавить(Соединение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
