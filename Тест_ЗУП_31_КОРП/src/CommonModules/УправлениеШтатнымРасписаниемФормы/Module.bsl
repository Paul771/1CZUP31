////////////////////////////////////////////////////////////////////////////////
// УправлениеШтатнымРасписаниемФормы:
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаШтатногоРасписания(Форма, ДатаВступленияВСилу) Экспорт
	
	ШтатноеРасписание = Форма.Объект.Позиции.Выгрузить(, "Должность,Подразделение,КоличествоСтавок");
	ШтатноеРасписание.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число"));
	ШтатноеРасписание.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	ШтатноеРасписание.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	УправлениеШтатнымРасписаниемПереопределяемый.ПроверитьШтатноеРасписание(ДатаВступленияВСилу, Форма.Объект.Организация, ШтатноеРасписание);
	КомментарийШтатногоРасписанияТекст = "";
	ЕстьОшибки = Ложь;
	Для Каждого Позиция Из ШтатноеРасписание Цикл
		КомментарийШтатногоРасписанияТекст = КомментарийШтатногоРасписанияТекст + Позиция.Комментарий + Символы.ПС;
		ЕстьОшибки = ЕстьОшибки Или  Не Позиция.Результат;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КомментарийШтатногоРасписанияТекст = НСтр("ru = 'Штатное расписание проверено. Ошибок нет'");
	КонецЕсли;
	Форма.Элементы.ОшибкиШтатногоРасписания.ЦветТекста = ЦветТекста;
	Форма.ОшибкиШтатногоРасписания = КомментарийШтатногоРасписанияТекст;
	
КонецПроцедуры

Процедура ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(Форма, РеквизитыПроверяемыеНаСоответствие, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		// Добавим реквизиты для контроля соответствия начисления и показателей.
		ДобавляемыеРеквизиты = Новый Массив;
		
		Значение = Новый РеквизитФормы("ЦветаСтиляПоясняющийОшибкуТекст", 
			Новый ОписаниеТипов("Цвет"),
			"");
		ДобавляемыеРеквизиты.Добавить(Значение);
		
		Значение = Новый РеквизитФормы("ЦветаСтиляЦветТекстаПоля",
			Новый ОписаниеТипов("Цвет"),
			"");
		ДобавляемыеРеквизиты.Добавить(Значение);
		
		Для Каждого ОписаниеТабличнойЧасти Из РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти Цикл
			
			ИмяТаблицы = ОписаниеТабличнойЧасти.Ключ;
			Если ОписаниеТабличнойЧасти.Значение.Свойство("ПутьКДанным") Тогда
				ПутьКДанным = ОписаниеТабличнойЧасти.Значение.ПутьКДанным;
			Иначе
				ПутьКДанным = "Объект." + ИмяТаблицы;
			КонецЕсли;
			
			Значение = Новый РеквизитФормы(ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизитаНесоответствия, 
				Новый ОписаниеТипов("Булево"),
				ПутьКДанным);
				
			ДобавляемыеРеквизиты.Добавить(Значение);
			
			Если ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей <> Неопределено Тогда
				Для Каждого РеквизитСоответствия Из ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей Цикл
					Значение = Новый РеквизитФормы(РеквизитСоответствия.Значение, 
						Новый ОписаниеТипов("Булево"),
						ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(Значение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);	
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
	
		Форма.ЦветаСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветаСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		
		Для Каждого ОписаниеТабличнойЧасти Из РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти Цикл
			
			ИмяТаблицы = ОписаниеТабличнойЧасти.Ключ;
			Если ОписаниеТабличнойЧасти.Значение.Свойство("ПутьКДанным") Тогда
				ПутьКДанным = ОписаниеТабличнойЧасти.Значение.ПутьКДанным;
			Иначе
				ПутьКДанным = "Объект." + ИмяТаблицы;
			КонецЕсли;
			
			ЭлементыУсловногоОформления = Форма.УсловноеОформление.Элементы;
		
			// Условное оформление соответствия начисления.
			ЭлементУсловногоОформления = ЭлементыУсловногоОформления.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизита);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизитаНесоответствия);
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			Если ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей <> Неопределено Тогда
				Для Каждого РеквизитСоответствия Из ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей Цикл
					
					// Условное оформление соответствия показателя.
					ЭлементУсловногоОформления = ЭлементыУсловногоОформления.Добавить();
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + РеквизитСоответствия.Ключ);
					ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + РеквизитСоответствия.Значение);
					ЭлементОтбора.ПравоеЗначение = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий форм документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура ДокументыПриСозданииНаСервере(Форма, ПутьКДаннымДатаВступленияВСилу) Экспорт
	
	ФорматКоличестваСтавок = УправлениеШтатнымРасписанием.ФорматКоличестваСтавок();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицииКоличествоСтавок",
		"Формат",
		ФорматКоличестваСтавок);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицииКоличествоСтавок",
		"ФорматРедактирования",
		ФорматКоличестваСтавок);
		
	УстановитьДоступностьДокументаДляРедактирования(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда	
		
		Форма.ДоступноЧтениеНачисленийШтатногоРасписания = 
			Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания", , Ложь);
			
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		Если Не ЗначениеЗаполнено(Форма.Объект.Подразделение)
			И ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
			
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);
		
		ДатаВступленияВСилу = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымДатаВступленияВСилу);
		ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу);
		
	КонецЕсли;
	
	УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма);
	
	// Подключить команду проверки штатного расписания.
	Если УправлениеШтатнымРасписаниемПереопределяемый.ПроверкаШтатногоРасписанияДоступна() Тогда
		Форма.Элементы.ПроверкаШРГруппа.Видимость = Истина;
	Иначе
		Форма.Элементы.ПроверкаШРГруппа.Видимость = Ложь;
	КонецЕсли;
	
	ОстаткиОтпусков.УстановитьУсловноеОформлениеЕжегодныхОтпусков(Форма);
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		Форма,
		Форма.ОписаниеТаблицыНачисленийНаСервере(),
		УправлениеШтатнымРасписанием.ПараметрыВыбораКатегорииНачислений());
		
	КадровыйУчетФормыРасширенный.УстановитьОтображениеКнопкиРедактироватьФОТ(Форма);
	
	УстановитьВидимостьЭлементовУправленияЗависящихОтФункциональныхОпций(Форма);
	
	УстановитьСтрокуТекущейПозиции(Форма, "Объект.Позиции", "Позиции", "Позиция");
	
	УстановитьПараметрыВыбораПодразделений(Форма, "Подразделение");
	
КонецПроцедуры

Процедура ЗаполнитьПоследнююДатуУтвержденияШтатногоРасписания(Форма, ДатаВступленияВСилу) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.Организация)
		И ЗначениеЗаполнено(ДатаВступленияВСилу) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Организация);
		Запрос.УстановитьПараметр("Регистратор", Форма.Объект.Ссылка);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация
			|	И ИсторияИспользованияШтатногоРасписания.Регистратор <> &Регистратор";
		
		Если ЗначениеЗаполнено(Форма.Объект.Подразделение) Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|	И ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение = &Подразделение";
			
			Запрос.УстановитьПараметр("Подразделение", Форма.Объект.Подразделение);
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			ПоследняяДатаУтверждения = Выборка.Дата;
		Иначе
			ПоследняяДатаУтверждения = '00010101';
		КонецЕсли;
		
	Иначе
		ПоследняяДатаУтверждения = '00010101';
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ПоследняяДатаУтверждения", ПоследняяДатаУтверждения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Форма, "ПрежняяДатаУтверждения", ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораПодразделений(Форма, ИмяЭлементаПодразделение) Экспорт
	
	Если Константы.ОграничиватьДоступНаУровнеЗаписейПодразделенияОрганизаций.Получить() Тогда
		
		ПолеПодразделение = Форма.Элементы.Найти(ИмяЭлементаПодразделение);
		Если ПолеПодразделение <> Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПодчиненностьПодразделенийОрганизаций.Подразделение
				|ИЗ
				|	РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций";
			
			ДоступныеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
			Если ПолеПодразделение.ПараметрыВыбора = Неопределено Тогда
				ПараметрыВыбора = Новый Массив;
			Иначе
				ПараметрыВыбора = Новый Массив(ПолеПодразделение.ПараметрыВыбора);
			КонецЕсли;
			
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ДоступныеПодразделения)));
			ПолеПодразделение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьДокументаДляРедактирования(Форма) Экспорт
	
	Если Форма.ТолькоПросмотр ИЛИ НЕ Форма.Объект.Проведен Тогда
		
		Форма.Элементы.ГруппаСообщенияОНевозможностиИзмененияДокумента.Видимость = Ложь;
		
	Иначе
		
		РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
			Форма.Объект.Ссылка);
			
		Если НЕ РезультатПроверки.ИзмененияВозможны Тогда
			
			ЗаголовокДекорации = Новый ФорматированнаяСтрока(
				НСтр("ru='Документ недоступен для редактирования, т.к. зарегистрированы более поздние изменения штатного расписания.
					|См'") + ". ",
				Новый ФорматированнаяСтрока(Строка(РезультатПроверки.РегистраторПредставление),,,, ПолучитьНавигационнуюСсылку(РезультатПроверки.Регистратор)),
				НСтр("ru=', позиция'") + " - """,
				Строка(РезультатПроверки.Позиция),
				""".");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДекорацияНадписьСообщенияОНевозможностиИзмененияДокумента",
				"Заголовок",
				ЗаголовокДекорации);
				
		КонецЕсли; 
		
		Форма.ТолькоПросмотр = НЕ РезультатПроверки.ИзмененияВозможны;
									
		Форма.Элементы.ГруппаСообщенияОНевозможностиИзмененияДокумента.Видимость = Форма.ТолькоПросмотр;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыПриЧтенииНаСервере(Форма, ТекущийОбъект, ДатаВступленияВСилу) Экспорт
	
	Форма.ИзмененныеПозиции = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу);
	
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, ТекущийОбъект, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ДокументыОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыйОбъект = Форма.РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	РеквизитВДанные(Форма, ПроверяемыйОбъект, Истина);
	
	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(Форма);
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ПрочитатьДополнительныеЗначенияПозицииШтатногоРасписания(Форма, ?(Форма.ВнешниеДанные, Форма.РедактируемаяПозиция, Форма.СсылкаНаОбъект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьФормуЭлементаСправочникаШтатноеРасписание(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьФормуЭлементаСправочникаШтатноеРасписание(Форма);
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ДополнитьФормуПозицииШтатногоРасписания(Форма);
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

Функция УстановитьСтрокуТекущейПозиции(Форма, ПутьКДанным, ИмяТаблицыФормы, ИмяРеквизитаПозиция) Экспорт
	
	ТекущаяСтрокаУстановлена = Ложь;
	Если Форма.Параметры.Свойство("ТекущаяПозиция")
		И ЗначениеЗаполнено(Форма.Параметры.ТекущаяПозиция) Тогда
		
		ДанныеПозиций = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		СтрокиПозиции =ДанныеПозиций.НайтиСтроки(Новый Структура(ИмяРеквизитаПозиция, Форма.Параметры.ТекущаяПозиция));
		Если СтрокиПозиции.Количество() > 0 Тогда
			
			ИдентификаторТекущейСтроки = СтрокиПозиции[0].ПолучитьИдентификатор();
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицыФормы,
				"ТекущаяСтрока",
				ИдентификаторТекущейСтроки);
				
			ТекущаяСтрокаУстановлена = Истина;
				
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекущаяСтрокаУстановлена;
	
КонецФункции

Функция ИнформацияОбУтвержденииИЗакрытииПозиции(Позиция) Экспорт
	
	Информация = Новый Структура("УтвердившийРегистратор,ЗакрывшийРегистратор");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Позиция);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК ДатаУтверждения,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК ПоследняяДатаСведений,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТПерваяИПоследняяДатыПозиции
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияИспользованияШтатногоРасписанияУтверждение.Регистратор КАК УтвердившийРегистратор,
			|	ИсторияИспользованияШтатногоРасписанияЗакрытие.Регистратор КАК ЗакрывшийРегистратор
			|ИЗ
			|	ВТПерваяИПоследняяДатыПозиции КАК ПерваяИПоследняяДатыПозиции
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияУтверждение
			|		ПО ПерваяИПоследняяДатыПозиции.ДатаУтверждения = ИсторияИспользованияШтатногоРасписанияУтверждение.Дата
			|			И ПерваяИПоследняяДатыПозиции.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияУтверждение.ПозицияШтатногоРасписания
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияЗакрытие
			|		ПО ПерваяИПоследняяДатыПозиции.ПоследняяДатаСведений = ИсторияИспользованияШтатногоРасписанияЗакрытие.Дата
			|			И ПерваяИПоследняяДатыПозиции.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияЗакрытие.ПозицияШтатногоРасписания
			|			И (НЕ ИсторияИспользованияШтатногоРасписанияЗакрытие.Используется)";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Информация, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

Функция ПоследняяДатаИзменений(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			Возврат Выборка.Дата;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция ОписаниеДанныхПозицииВХранилище(Форма, Объект, ИдентификаторСтрокиТекущейПозиции, ДатаВступленияВСилу, ПодразделениеПозиций = Неопределено, ВыборПодчиненныхПодразделений = Ложь) Экспорт
	
	Форма.ИдентификаторРедактируемойСтроки = ИдентификаторСтрокиТекущейПозиции;
	
	ДанныеПозиции = Объект.Позиции.НайтиПоИдентификатору(Форма.ИдентификаторРедактируемойСтроки);
	
	ОписаниеПозиции = УправлениеШтатнымРасписанием.ОписаниеПозицииШтатногоРасписания();
	ОписаниеПозиции.Вставить("Действие");
	ОписаниеПозиции.Вставить("ТекущееКоличествоСтавок");
	ОписаниеПозиции.Вставить("ТекущийФОТ");
	ОписаниеПозиции.Вставить("КатегорияПерсонала");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		ОписаниеПозиции.Вставить("ТарификационнаяГруппа");
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ОписаниеПозиции, ДанныеПозиции);
	
	ОписаниеПозиции.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр ИЛИ ДанныеПозиции.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию);
	ОписаниеПозиции.Вставить("ДатаУтверждения", ДатаВступленияВСилу);
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		ОписаниеПозиции.Вставить("Регистратор", Объект.Ссылка);
	КонецЕсли;
	ОписаниеПозиции.Вставить("ПодразделениеПозиций", ПодразделениеПозиций);
	Если ВыборПодчиненныхПодразделений Тогда
		ОписаниеПозиции.Вставить("ВыборПодчиненныхПодразделений", Истина);
	КонецЕсли; 
	
	ОписаниеПозиции.Организация = Объект.Организация;
	ОписаниеПозиции.ПозицияШтатногоРасписания = ДанныеПозиции.Позиция;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	// Начисления с показателями
	НачисленияПозиции = Объект.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.Начисления = НачисленияПозиции;
	
	// Показатели и коэффициенты.
	ПоказателиПозиции = Объект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	
	ОписаниеПозиции.Вставить("Показатели", ПоказателиПозиции);
	
	// Ежегодные отпуска
	ЕжегодныеОтпускаПозиции = Объект.ЕжегодныеОтпуска.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.ЕжегодныеОтпуска = ЕжегодныеОтпускаПозиции;
	
	// Специальности
	СпециальностиПозиции = Объект.Специальности.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.Специальности = СпециальностиПозиции;
	
	ОписаниеДанныхПозицииВХранилище = Новый Структура;
	ОписаниеДанныхПозицииВХранилище.Вставить("Ключ", ОписаниеПозиции.ПозицияШтатногоРасписания);
	ОписаниеДанныхПозицииВХранилище.Вставить("АдресДанныхПозицииВХранилище", ПоместитьВоВременноеХранилище(ОписаниеПозиции, Форма.УникальныйИдентификатор));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.ДополнитьОписаниеДанныхПозицииВХранилище(Объект, ОписаниеПозиции, ДанныеПозиции);
	КонецЕсли;
	
	Возврат ОписаниеДанныхПозицииВХранилище;
	
КонецФункции

Процедура ПрочитатьДанныеПозицииВФорму(Форма, Объект, АдресДанныхПозиции) Экспорт
	
	НовыеДанныеПозиции = ПолучитьИзВременногоХранилища(АдресДанныхПозиции);
	
	ДанныеТекущейПозиции = Объект.Позиции.НайтиПоИдентификатору(Форма.ИдентификаторРедактируемойСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейПозиции, НовыеДанныеПозиции);
	ДанныеТекущейПозиции.Позиция = НовыеДанныеПозиции.ПозицияШтатногоРасписания;
	
	Если ЗначениеЗаполнено(ДанныеТекущейПозиции.Позиция) Тогда
		
		Если Форма.ИзмененныеПозиции = Неопределено Тогда
			ИзмененныеПозиции = Новый Соответствие;
		Иначе
			ИзмененныеПозиции = Новый Соответствие(Форма.ИзмененныеПозиции);
		КонецЕсли; 
		
		Если ИзмененныеПозиции.Получить(ДанныеТекущейПозиции.Позиция) = Неопределено Тогда
			
			ИзмененныеПозиции.Вставить(ДанныеТекущейПозиции.Позиция, Истина);
			Форма.ИзмененныеПозиции = Новый ФиксированноеСоответствие(ИзмененныеПозиции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеШтатнымРасписаниемФормы.УдалитьНачисленияИЕжегодныеОтпуска(Форма.Элементы.Позиции.ВыделенныеСтроки, Объект);
	
	УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Объект, ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции);
	
	Для каждого ОписаниеНачисления Из НовыеДанныеПозиции.Начисления Цикл
		
		НоваяСтрокаНачислений = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, ОписаниеНачисления);
		НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Для каждого ОписаниеПоказателя Из НовыеДанныеПозиции.Показатели Цикл
		
		НоваяСтрокаПоказателя = Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, ОписаниеПоказателя);
		НоваяСтрокаПоказателя.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Для каждого ОписаниеЕжегодногоОтпуска Из НовыеДанныеПозиции.ЕжегодныеОтпуска Цикл
		
		НоваяСтрокаЕжегодногоОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЕжегодногоОтпуска, ОписаниеЕжегодногоОтпуска);
		НоваяСтрокаЕжегодногоОтпуска.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
		
	Для каждого ОписаниеСпециальности Из НовыеДанныеПозиции.Специальности Цикл
		
		НоваяСтрокаСпециальности = Объект.Специальности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, ОписаниеСпециальности);
		НоваяСтрокаСпециальности.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.ПрочитатьДанныеПозицииВФорму(Форма, Объект, НовыеДанныеПозиции);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНовыйДокумент(Форма, ДатаВступленияВСилу) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	ДокументОбъект.АвтозаполнениеТекущимиДаннымиШР();
	
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОписаниеТаблицыПозиций = Форма.ОписаниеТаблицыПозицийНаСервере();
	
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, ДокументОбъект, ДатаВступленияВСилу);
	
	Если Форма.Объект.Позиции.Количество() > 0 Тогда
		Форма.Элементы.Позиции.ТекущаяСтрока = Форма.Объект.Позиции[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу, ОписаниеТаблицыПозиций);
	
	УправлениеШтатнымРасписанием.УпорядочитьСписокПозиций(Форма.Объект.Позиции);
	
	УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма);
	
КонецПроцедуры

Процедура ОбработатьЗаполнениеДокументаВФорме(Форма) Экспорт
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Форма.АдресХранилища);
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	УправлениеШтатнымРасписанием.ЗаполнитьДокументПоДаннымЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, Форма.Объект, ДанныеЗаполнения.ДатаВступленияВСилу);
	
	Если Форма.Объект.Позиции.Количество() > 0 Тогда
		Форма.Элементы.Позиции.ТекущаяСтрока = Форма.Объект.Позиции[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
		ВывестиСообщенияФоновогоЗадания(Форма.ИдентификаторЗадания);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДополнитьФорму(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьУсловноеОформление(Форма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РеквизитВДанные(Форма, ОбъектПриемник, ТолькоДанныеОбъекта = Ложь) Экспорт
	
	Если Не ТолькоДанныеОбъекта Тогда
		ДобавитьДополнительныеСведенияПозиций(Форма, ОбъектПриемник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу)
	
	Форма.ДоступноЧтениеНачисленийШтатногоРасписания =
		Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания", , Ложь);
		
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ДополнитьФорму(Форма);
	
	ОстаткиОтпусков.ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахШтатногоРасписания(Форма.Объект, ДатаВступленияВСилу);
	
	ЗаполнитьПоследнююДатуУтвержденияШтатногоРасписания(Форма, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ПоместитьДанныеОбъектаВДанныеФормы(Форма, ТекущийОбъект = Неопределено, ДатаВступленияВСилу) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
	ОписаниеТаблицыПозиций = Форма.ОписаниеТаблицыПозицийНаСервере();
	Если ТекущийОбъект <> Неопределено Тогда
		ДокументСсылка = ТекущийОбъект.Ссылка;
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	РедактированиеСостоянияШРДанныеВРеквизиты(ДокументСсылка, ДатаВступленияВСилу, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета);
	УстановитьКомментарииКСтрокамПозиций(Форма, ОписаниеТаблицыПозиций);
	
	ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу, ОписаниеТаблицыПозиций);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьДополнительныеСведенияПозиций(Форма, ТекущийОбъект)
	
	Если Форма.Модифицированность Тогда
		
		СведенияОНаименованиях = Новый Соответствие;
		
		ПозицииДокумента = Новый Массив;
		ИдентификаторыСтрокПозиций = Новый Соответствие;
		
		Для каждого СтрокаПозиции Из Форма.Объект.Позиции Цикл
			
			Если ЗначениеЗаполнено(СтрокаПозиции.Позиция) Тогда
				ПозицииДокумента.Добавить(СтрокаПозиции.Позиция);
				ИдентификаторыСтрокПозиций.Вставить(СтрокаПозиции.Позиция, СтрокаПозиции.ИдентификаторСтрокиПозиции);
			КонецЕсли;
			
			СведенияОНаименованиях.Вставить(СтрокаПозиции.ИдентификаторСтрокиПозиции, СтрокаПозиции.Наименование);
			
		КонецЦикла;
		
		Если ПозицииДокумента.Количество() > 0 Тогда
			
			ТекущиеНаименования = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицииДокумента, "Наименование");
			Для каждого ОписаниеНаименования Из ТекущиеНаименования Цикл
				
				ИдентификаторСтрокиПозиции = ИдентификаторыСтрокПозиций.Получить(ОписаниеНаименования.Ключ);
				Если ИдентификаторСтрокиПозиции <> Неопределено Тогда
					
					НаименованиеВДокументе = СведенияОНаименованиях.Получить(ИдентификаторСтрокиПозиции);
					Если НаименованиеВДокументе = ОписаниеНаименования.Значение Тогда
						СведенияОНаименованиях.Удалить(ИдентификаторСтрокиПозиции);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СведенияОНаименованиях.Количество() > 0 Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СведенияОНаименованиях", СведенияОНаименованиях);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеСостоянияШРДанныеВРеквизиты(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета)
	
	РедактированиеСостоянияШРПрочитатьТекущиеДанные(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета);
	
КонецПроцедуры

Процедура РедактированиеСостоянияШРПрочитатьТекущиеДанные(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета)
	
	ИмяТаблицыПозиции = ОписаниеТаблицыПозиций.ИмяТаблицы;
	ПозицииПутьКДанным = ОписаниеТаблицыПозиций.ПутьКДанным;
	
	ПозицииДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПозицииПутьКДанным);
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		ТаблицаПозиций = ПозицииДанныеФормы.Выгрузить();
		
		ТаблицаПозиций.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
		ТаблицаПозиций.ЗаполнитьЗначения(Период, "Период");
		
		КолонкаПозиция = ТаблицаПозиций.Колонки.Найти(ОписаниеТаблицыПозиций.ИмяРеквизитаПозиция);
		КолонкаПозиция.Имя = "Позиция";
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Позиции", ТаблицаПозиций);
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписание(Период, , , ТаблицаПозиций.ВыгрузитьКолонку("Позиция"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
		
		УправлениеШтатнымРасписанием.СоздатьВТШтатноеРасписание(
			Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, , "ВТАктуальныеПозицииШтатногоРасписания");
		
		ПараметрыПостроения = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра("ВТАктуальныеПозицииШтатногоРасписания");
		
		УправлениеШтатнымРасписанием.СоздатьВТНачисленияШтатногоРасписания(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроения, "ВТАктуальныеНачисленияПозиций");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Позиции.Позиция,
			|	Позиции.ИдентификаторСтрокиПозиции,
			|	Позиции.НомерСтроки
			|ПОМЕСТИТЬ ВТПозиции
			|ИЗ
			|	&Позиции КАК Позиции
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Позиции.Позиция,
			|	ВЫРАЗИТЬ(Позиции.Позиция КАК Справочник.ШтатноеРасписание).Наименование КАК Наименование,
			|	АктуальныеПозицииШтатногоРасписания.КоличествоСтавок КАК ТекущееКоличествоСтавок,
			|	ВЫБОР
			|		КОГДА АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ДействующаяПозиция,
			|	ЕСТЬNULL(АктуальныеПозицииШтатногоРасписания.ФОТ, 0) КАК ТекущийФОТ,
			|	Позиции.НомерСтроки КАК НомерСтрокиПозиция
			|ИЗ
			|	ВТПозиции КАК Позиции
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеПозицииШтатногоРасписания КАК АктуальныеПозицииШтатногоРасписания
			|		ПО Позиции.Позиция = АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтрокиПозиция";
		
		ВыборкаПозиций = Запрос.Выполнить().Выбрать();
		
		СоответствиеПозицийСтрокамТаблицы = Новый Соответствие;
		
		Для Каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
			
			ВыборкаПозиций.СледующийПоЗначениюПоля("НомерСтрокиПозиция");
			
			СтрокаПозиции.ДействующаяПозиция = ВыборкаПозиций.ДействующаяПозиция;
			СтрокаПозиции.ТекущееКоличествоСтавок = ВыборкаПозиций.ТекущееКоличествоСтавок;
			СтрокаПозиции.ТекущийФОТ = ВыборкаПозиций.ТекущийФОТ;
			
			Если ЗначениеЗаполнено(СтрокаПозиции.Позиция) Тогда
				СтрокаПозиции.Наименование = ВыборкаПозиций.Наименование;
			Иначе
				
				ДополнительныеПараметры = Новый Структура("РазрядКатегория", СтрокаПозиции.РазрядКатегория);
				СтрокаПозиции.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(
					СтрокаПозиции.Подразделение, СтрокаПозиции.Должность, ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
		УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			СтрокаПозиции, Форма);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) 
	
	КоличествоПозицийДокумента = Форма.Объект.Позиции.Количество(); 
	СтруктураОтбора = Новый Структура("Действие", Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию);
	КоличествоСоздаваемыхПозиций = Форма.Объект.Позиции.НайтиСтроки(СтруктураОтбора).Количество();
	
	// Раскраска строк позиций штатного расписания.
		
	// Синий - изменяемые позиции
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ТекущееКоличествоСтавок");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.КоличествоСтавок");
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ФОТ");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ТекущийФОТ");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);

	// Зеленый - новые позиции
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	// Красный - закрываемые позиции.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
		
	// ТолькоПросмотр Подразделение, Должность, РазрядКатегория если выбрана позиция.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Позиция");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииПодразделение");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииДолжность");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииРазрядКатегория");
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект = Неопределено Тогда
		ПараметрыФО = Новый Структура("Организация", Форма.Объект.Организация);
	Иначе
		ПараметрыФО = Новый Структура("Организация", ТекущийОбъект.Организация);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

Процедура ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу, ОписаниеТаблицыПозиций)
	
	ПозицииДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыПозиций.ПутьКДанным);
	Подразделения = ПозицииДанныеФормы.Выгрузить(, "Подразделение").ВыгрузитьКолонку("Подразделение");
	ЗначенияПоказателейПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подразделения, "РайонныйКоэффициент,ПроцентСевернойНадбавки");
	Форма.СоответствиеЗначенийПоказателейПодразделениям = Новый ФиксированноеСоответствие(ЗначенияПоказателейПодразделений);
	Форма.СоответствиеТерриториальныхУсловийПФРПодразделениям = Новый ФиксированноеСоответствие(ТерриториальныеУсловияПФРПодразделений(Подразделения, ДатаВступленияВСилу));
	
	Для каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПозиции.Подразделение) Тогда
			
			СтрокаПозиции.РайонныйКоэффициент = Форма.СоответствиеЗначенийПоказателейПодразделениям.Получить(СтрокаПозиции.Подразделение).РайонныйКоэффициент;
			СтрокаПозиции.ПроцентСевернойНадбавки = Форма.СоответствиеЗначенийПоказателейПодразделениям.Получить(СтрокаПозиции.Подразделение).ПроцентСевернойНадбавки;
			СтрокаПозиции.ТерриториальныеУсловияПФР = Форма.СоответствиеТерриториальныхУсловийПФРПодразделениям.Получить(СтрокаПозиции.Подразделение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТерриториальныеУсловияПФРПодразделений(Подразделения, ДатаСведений) Экспорт
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Если ТипЗнч(Подразделения) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СписокПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделения);
	Иначе
		СписокПодразделений = Подразделения;
	КонецЕсли;
	
	Для каждого Подразделение Из СписокПодразделений Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Период = ДатаСведений;
		НоваяСтрокаИзмеренияДаты.СтруктурнаяЕдиница = Подразделение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));	
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница,
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР
		|ИЗ
		|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия";
		
	СоответствиеУсловийПодразделениям = Новый Соответствие;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеУсловийПодразделениям.Вставить(Выборка.СтруктурнаяЕдиница, Выборка.ТерриториальныеУсловияПФР);
	КонецЦикла; 
	
	Возврат СоответствиеУсловийПодразделениям;
	
КонецФункции

Процедура ДополнитьПоТекущейКадровойРасстановке(ПараметрыВыполнения, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ПоместитьВоВременноеХранилище(УправлениеШтатнымРасписанием.РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения), АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ВывестиСообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Если МассивСообщений <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из МассивСообщений Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
			
КонецПроцедуры

Процедура УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма)
	
	Форма.ИдентификаторСтрокиПозицииМакс = УправлениеШтатнымРасписанием.МаксимальныйИдентификаторСтроки(Форма.Объект.Позиции, "ИдентификаторСтрокиПозиции");	
	
КонецПроцедуры	

Процедура СкопироватьДанныеПозиции(Объект, ИдентификаторТекущейПозиции, ИдентификаторПозицииИсточника) Экспорт
	
	ТекущиеДанные = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторТекущейПозиции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаИсточник = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторПозицииИсточника);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИсходныеСтроки = Объект.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции,ИдентификаторСтрокиВидаРасчета", СтрокаИсточник.ИдентификаторСтрокиПозиции, 0));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Объект.ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Объект.ЕжегодныеОтпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Объект.Специальности.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Объект.Специальности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовУправленияЗависящихОтФункциональныхОпций(Форма)
	
	ФОИспользоватьРасчетЗарплатыРасширенная = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если НЕ ФОИспользоватьРасчетЗарплатыРасширенная Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииГруппаОкладТариф",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФОТПоПозиции",
			"Видимость",
			Ложь);
		
	Иначе
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозиции",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозицииМин",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозицииМакс",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);
			
	КонецЕсли;
			
КонецПроцедуры

Процедура УстановитьКомментарииКСтрокамПозиций(Форма, ОписаниеТаблицыПозиций)
	
	ПозицииДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыПозиций.ПутьКДанным);
	Для Каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
		СтрокаПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			СтрокаПозиции, Форма);
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьДанныеПоПозиции(Объект, Позиция, ДатаВступленияВСилу, ИдентификаторСтрокиПозицииМакс) Экспорт
	
	НоваяСтрокаПозиции = Объект.Позиции.Добавить();
	
	ИдентификаторСтрокиПозицииМакс = ИдентификаторСтрокиПозицииМакс + 1;
	НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозицииМакс;
	
	НоваяСтрокаПозиции.Позиция = Позиция;
	
	ЗаполнитьТекущиеДанныеПозиции(Объект, НоваяСтрокаПозиции, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ЗаполнитьТекущиеДанныеПозиции(Объект, ТекущиеДанные, ДатаВступленияВСилу)
	
	ДанныеТекущейПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ТекущиеДанные.Позиция, ДатаВступленияВСилу, , Ложь);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеТекущейПозиции);
	
	ТекущиеДанные.ТекущееКоличествоСтавок = ДанныеТекущейПозиции.КоличествоСтавок;
	ТекущиеДанные.ТекущийФОТ = ДанныеТекущейПозиции.ФОТМакс;
	ТекущиеДанные.Наименование = ДанныеТекущейПозиции.Наименование;
	
	Если Не ЗначениеЗаполнено(ДанныеТекущейПозиции.ДатаУтверждения) Тогда
		ТекущиеДанные.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
	Иначе
		ТекущиеДанные.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.ПустаяСсылка();
	КонецЕсли;
	
	УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Объект, ТекущиеДанные.ИдентификаторСтрокиПозиции);
	УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Объект, ТекущиеДанные.ИдентификаторСтрокиПозиции);
	
	НачислениеРайонныйКоэффициент = РасчетЗарплаты.НачислениеРайонныйКоэффициент();
	НачислениеСевернаяНадбавка = РасчетЗарплаты.НачислениеСевернаяНадбавка();
	
	Начисления = ДанныеТекущейПозиции.Начисления;
	Если Начисления <> Неопределено Тогда
		
		ИдентификаторСтрокиВидаРасчета =
			УправлениеШтатнымРасписанием.МаксимальныйИдентификаторСтроки(Объект.Начисления, "ИдентификаторСтрокиВидаРасчета");
		
		Для каждого Начисление Из Начисления Цикл
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
			НоваяСтрокаНачислений = Объект.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, Начисление);
			НоваяСтрокаНачислений.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
			Для каждого Показатель Из Начисление.Показатели Цикл
				
				Если ЗначениеЗаполнено(Показатель.Показатель) Тогда
					
					НоваяСтрокаПоказателей = Объект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, Показатель);
					
					НоваяСтрокаПоказателей.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
					НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НезависимыеПоказатели = ДанныеТекущейПозиции.НезависимыеПоказатели;
	Если НезависимыеПоказатели <> Неопределено Тогда
		
		Для Каждого Показатель Из НезависимыеПоказатели Цикл 
			
			НоваяСтрокаПоказателей = Объект.Показатели.Добавить();
			НоваяСтрокаПоказателей.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, Показатель);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ЕжегодныеОтпуска = ДанныеТекущейПозиции.ЕжегодныеОтпуска;
	Если ЕжегодныеОтпуска <> Неопределено Тогда
		
		Для каждого ЕжегодныйОтпуск Из ЕжегодныеОтпуска Цикл
			
			НоваяСтрокаЕжегодныеОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЕжегодныеОтпуска, ЕжегодныйОтпуск);
			
			НоваяСтрокаЕжегодныеОтпуска.ДействующийОтпуск = Истина;
			НоваяСтрокаЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Специальности = ДанныеТекущейПозиции.Специальности;
	Если Специальности <> Неопределено Тогда
		
		Для каждого Специальность Из Специальности Цикл
			
			НоваяСтрокаСпециальности = Объект.Специальности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, Специальность);
			НоваяСтрокаСпециальности.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.ЗаполнитьТекущиеДанныеПозиции(Объект, ТекущиеДанные, ДанныеТекущейПозиции);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНачисленияИЕжегодныеОтпуска(СтрокиПозиций, Объект) Экспорт
	
	Для каждого ИдентификаторВыделеннойСтроки Из СтрокиПозиций Цикл
		ВыделеннаяСтрока = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Объект, ВыделеннаяСтрока.ИдентификаторСтрокиПозиции);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Объект, ИдентификаторСтрокиПозиции)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Начисления
	УдаляемыеСтроки = Объект.Начисления.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Начисления.Удалить(Объект.Начисления.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	// Показатели
	УдаляемыеСтроки = Объект.Показатели.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Показатели.Удалить(Объект.Показатели.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	// Ежегодные отпуска
	УдаляемыеСтроки = Объект.ЕжегодныеОтпуска.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.ЕжегодныеОтпуска.Удалить(Объект.ЕжегодныеОтпуска.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Объект, ИдентификаторСтрокиПозиции)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Специальности
	УдаляемыеСтроки = Объект.Специальности.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Специальности.Удалить(Объект.Специальности.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьВсеДанныеПоСтрокеПозиции(Объект, СтрокаПозиции) Экспорт
	
	УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Объект, СтрокаПозиции.ИдентификаторСтрокиПозиции);
	УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Объект, СтрокаПозиции.ИдентификаторСтрокиПозиции);
	
	Объект.Позиции.Удалить(СтрокаПозиции);
	
КонецПроцедуры

Процедура ОчиститьДанныеТабличныхЧастейОбъектаФормы(Форма) Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаПозиции Из Форма.Объект.Позиции Цикл
		
		УдалитьДанные = Истина;
		Если СтрокаПозиции.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию Тогда
			
			Если Не ЗначениеЗаполнено(Форма.Объект.Подразделение) Или СтрокаПозиции.Подразделение = Форма.Объект.Подразделение Тогда
				УдалитьДанные = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УдалитьДанные Тогда
			УдаляемыеСтроки.Добавить(СтрокаПозиции);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		УдалитьВсеДанныеПоСтрокеПозиции(Форма.Объект, УдаляемаяСтрока);
	КонецЦикла;
	
	Если Форма.Объект.Позиции.Количество() > 0 Тогда
		РеквизитВДанные(Форма, Форма.Объект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеПозицииШтатногоРасписанияВФормуСправочника(Форма, Ссылка, ДатаАктуальности = Неопределено, РедактированиеДанных = Ложь, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	ОбъектФормы = Форма.Объект;
	
	Если Не РедактированиеДанных Тогда
		ОбъектФормы.Начисления.Очистить();
		ОбъектФормы.Показатели.Очистить();
	КонецЕсли;
	
	ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(Ссылка, ДатаАктуальности, , Ложь, ИсключаемыйРегистратор);
	
	Если Не РедактированиеДанных Тогда
		
		ПостоянныеРеквизиты = Новый Массив;
		ПостоянныеРеквизиты.Добавить("Подразделение");
		ПостоянныеРеквизиты.Добавить("Должность");
		ПостоянныеРеквизиты.Добавить("Утверждена");
		ПостоянныеРеквизиты.Добавить("ДатаУтверждения");
		ПостоянныеРеквизиты.Добавить("Закрыта");
		ПостоянныеРеквизиты.Добавить("ДатаЗакрытия");
		ПостоянныеРеквизиты.Добавить("Описание");
		
		МетаданныеПозиции = Метаданные.Справочники.ШтатноеРасписание;
		Для каждого ОписаниеДанных Из ДанныеПозиции Цикл
			
			Если ПостоянныеРеквизиты.Найти(ОписаниеДанных.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МетаданныеПозиции.Реквизиты.Найти(ОписаниеДанных.Ключ) <> Неопределено Тогда
				ОбъектФормы[ОписаниеДанных.Ключ] = ОписаниеДанных.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
		
		Если РедактированиеДанных Тогда
			
			СтруктураПоиска = Новый Структура("Начисление", ОписаниеНачисления.Начисление);
			СтрокиНачисления = ОбъектФормы.Начисления.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
				
				СтрокаНачисления.ДействующийВидРасчета = Истина;
				
				Если СтрокаНачисления.Свойство("РазмерДоРедактирования") Тогда
					СтрокаНачисления.РазмерДоРедактирования = ОписаниеНачисления.Размер;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("РазмерМинДоРедактирования") Тогда
					СтрокаНачисления.РазмерМинДоРедактирования = ОписаниеНачисления.РазмерМин;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("РазмерМаксДоРедактирования") Тогда
					СтрокаНачисления.РазмерМаксДоРедактирования = ОписаниеНачисления.РазмерМакс;
				КонецЕсли;
				
				НомерПоказателя = 1;
				Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
					
					Если СтрокаНачисления.Свойство("ТекущееЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееЗначение" + НомерПоказателя] = ОписаниеПоказателя.Значение;
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ТекущееМинимальноеЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееМинимальноеЗначение" + НомерПоказателя] = ОписаниеПоказателя.ЗначениеМин;
					КонецЕсли;
					
					Если СтрокаНачисления.Свойство("ТекущееМаксимальноеЗначение" + НомерПоказателя) Тогда
						СтрокаНачисления["ТекущееМаксимальноеЗначение" + НомерПоказателя] = ОписаниеПоказателя.ЗначениеМакс;
					КонецЕсли;
					
					НомерПоказателя = НомерПоказателя + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаНачисления = ОбъектФормы.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления, ОписаниеНачисления);
			
			Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
				
				СтрокаПоказатель = ОбъектФормы.Показатели.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказатель, ОписаниеПоказателя);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ОписаниеПоказателя Из ДанныеПозиции.НезависимыеПоказатели Цикл
		
		Если РедактированиеДанных Тогда
			
			СтруктураПоиска = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель", 0, ОписаниеПоказателя.Показатель);
			СтрокиПоказателей = ОбъектФормы.Показатели.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				
				Если СтрокаНачисления.Свойство("ТекущееЗначение") Тогда
					СтрокаНачисления["ТекущееЗначение"] = ОписаниеПоказателя.Значение;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("ТекущееМинимальноеЗначение") Тогда
					СтрокаНачисления["ТекущееМинимальноеЗначение"] = ОписаниеПоказателя.ЗначениеМин;
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("ТекущееМаксимальноеЗначение") Тогда
					СтрокаНачисления["ТекущееМаксимальноеЗначение"] = ОписаниеПоказателя.ЗначениеМакс;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаПоказатель = ОбъектФормы.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказатель, ОписаниеПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.ПрочитатьТекущиеДанныеПозицииШтатногоРасписанияВФормуСправочника(Форма, ДанныеПозиции, РедактированиеДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеТарифнойСетки(Форма, ДатаВступленияВСилу) Экспорт
	
	Если Форма.Элементы.Позиции.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Объект.Позиции.НайтиПоИдентификатору(Форма.Элементы.Позиции.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
		
			РазрядКатегория = ТекущиеДанные.РазрядКатегория;
			ТарифнаяСетка = ТекущиеДанные.ТарифнаяСетка;
			
			РазрядКатегорияНадбавки = ТекущиеДанные.РазрядКатегорияНадбавки;
			ТарифнаяСеткаНадбавки = ТекущиеДанные.ТарифнаяСеткаНадбавки;
			
			СтрокиНачислений = Форма.Объект.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ТекущиеДанные.ИдентификаторСтрокиПозиции));
		
			ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
			
			ДополнительныеПараметры = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыЗаполненияЗначенийПоказателейТарифныхСеток();
			ДополнительныеПараметры.ДатаСведений = ДатаВступленияВСилу;
			ДополнительныеПараметры.ТарифнаяСетка = ТарифнаяСетка;
			ДополнительныеПараметры.ТарифнаяСеткаНадбавки = ТарифнаяСеткаНадбавки;
			ДополнительныеПараметры.РазрядКатегория = РазрядКатегория;
			ДополнительныеПараметры.РазрядКатегорияНадбавки = РазрядКатегорияНадбавки;
			ДополнительныеПараметры.СчитатьПоказателиПоДолжности = Истина;
			
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияПоказателейТарифныхСеток(Форма, СтрокиНачислений, ОписаниеТаблицыВидовРасчета, 0, ДополнительныеПараметры);
																				
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНачисленияПоказателиСтрокиПозиции(Форма, СтрокаПозиции, Начисления, Показатели) Экспорт

	СведенияОПоказателяхФормы = ПлановыеНачисленияСотрудников.СведенияОПоказателях(Форма.ОтображаемыеПоказатели);
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиПозиции");
	
	УстановитьЗначенияПоказаталейСтрокиПозиции(Форма, СведенияОПоказателяхФормы, СтрокаПозиции);
	СтруктураПоиска.ИдентификаторСтрокиПозиции = СтрокаПозиции.ИдентификаторСтрокиПозиции;
	СтрокиПоказателей = Показатели.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПоказателей.Количество() > 0 Тогда
		УстановитьЗначенияПоказаталейСтрокиПозиции(Форма, СведенияОПоказателяхФормы, СтрокаПозиции, СтрокиПоказателей);
	КонецЕсли;
	
	СтрокиНачислений = Начисления.НайтиСтроки(СтруктураПоиска);
	Если СтрокиНачислений.Количество() > 0 Тогда
		УстановитьЗначенияНачисленийСтрокиПозиции(Форма, СведенияОПоказателяхФормы, СтрокаПозиции, СтрокиНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияПоказаталейСтрокиПозиции(Форма, СведенияОПоказателяхФормы, СтрокаПозиции, СтрокиПоказателей = Неопределено)
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	Если СтрокиПоказателей = Неопределено Тогда
		Для Каждого КлючИЗначение Из Форма.КолонкиПоказателей Цикл
			Показатель = КлючИЗначение.Ключ;
			СтрокаПозиции[ИмяРеквизитаПоказательИспользуется(Показатель)] = Ложь;
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				СтрокаПозиции[Показатель + "Мин"] = 0;
				СтрокаПозиции[Показатель + "Макс"] = 0;
			Иначе
				СтрокаПозиции[Показатель] = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
			ИнфоОПоказателе = СведенияОПоказателяхФормы[СтрокаПоказателя.Показатель];
			Если ИнфоОПоказателе = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Показатель = ИнфоОПоказателе.Идентификатор;
			СтрокаПозиции[ИмяРеквизитаПоказательИспользуется(Показатель)] = Истина;
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ПоказательМин = Показатель + "Мин";
				ПоказательМакс = Показатель + "Макс";
				СтрокаПозиции[ПоказательМин] = СтрокаПоказателя["ЗначениеМин"];
				СтрокаПозиции[ПоказательМакс] = СтрокаПоказателя["ЗначениеМакс"];
			Иначе
				СтрокаПозиции[Показатель] = СтрокаПоказателя["Значение"];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияНачисленийСтрокиПозиции(Форма, СведенияОПоказателяхФормы, СтрокаПозиции, СтрокиНачислений = Неопределено)
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	Если СтрокиНачислений = Неопределено Тогда
		Для Каждого КлючИЗначение Из Форма.КолонкиПоказателей Цикл
			Показатель = КлючИЗначение.Ключ;
			СтрокаПозиции[ИмяРеквизитаПоказательИспользуется(Показатель)] = Ложь;
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				СтрокаПозиции[Показатель + "Мин"] = 0;
				СтрокаПозиции[Показатель + "Макс"] = 0;
			Иначе
				СтрокаПозиции[Показатель] = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаНачисления Из СтрокиНачислений Цикл
			ИнфоОПоказателе = СведенияОПоказателяхФормы[СтрокаНачисления.Начисление];
			Если ИнфоОПоказателе = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Показатель = ИнфоОПоказателе.Идентификатор;
			СтрокаПозиции[ИмяРеквизитаПоказательИспользуется(Показатель)] = Истина;
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ПоказательМин = Показатель + "Мин";
				ПоказательМакс = Показатель + "Макс";
				СтрокаПозиции[ПоказательМин] = СтрокаНачисления["РазмерМин"];
				СтрокаПозиции[ПоказательМакс] = СтрокаНачисления["РазмерМакс"];
			Иначе
				СтрокаПозиции[Показатель] = СтрокаНачисления["Размер"];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущиеЗначенияПоказателейСтрокиПозиции(Форма, СтрокаПозиции, ИнфоОПоказателе, СтрокаПоказателя) Экспорт
	
	ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
	ФорматПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
	ИмяПоказателя = ИнфоОПоказателе.Идентификатор;
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
		ЗначениеПоказателяМин = Формат(СтрокаПоказателя.ЗначениеМин, ФорматПоказателя);
		ЗначениеПоказателяМакс = Формат(СтрокаПоказателя.ЗначениеМакс, ФорматПоказателя);
		СуммаПодстановкиМин = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателяМин, 10, " ");
		СуммаПодстановкиМакс = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателяМакс, 10, " ");
		ИмяПоказателяМин = ИмяПоказателя + "Мин";
		ИмяПоказателяМакс = ИмяПоказателя + "Макс";
		СтрокаПозиции[ИмяПоказателяМин + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановкиМин);
		СтрокаПозиции[ИмяПоказателяМакс + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановкиМакс);
	Иначе
		ЗначениеПоказателя = Формат(СтрокаПоказателя.Значение, ФорматПоказателя);
		СуммаПодстановки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателя, 10, " ");
		СтрокаПозиции[ИмяПоказателя + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущиеЗначенияНачисленийСтрокиПозиции(Форма, СтрокаПозиции, ИнфоОПоказателе, СтрокаНачисления) Экспорт
	
	ФорматПоказателя = "ЧДЦ=2";
	ИмяПоказателя = ИнфоОПоказателе.Идентификатор;
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
		ЗначениеПоказателяМин = Формат(СтрокаНачисления.РазмерМин, ФорматПоказателя);
		ЗначениеПоказателяМакс = Формат(СтрокаНачисления.РазмерМакс, ФорматПоказателя);
		СуммаПодстановкиМин = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателяМин, 10, " ");
		СуммаПодстановкиМакс = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателяМакс, 10, " ");
		ИмяПоказателяМин = ИмяПоказателя + "Мин";
		ИмяПоказателяМакс = ИмяПоказателя + "Макс";
		СтрокаПозиции[ИмяПоказателяМин + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановкиМин);
		СтрокаПозиции[ИмяПоказателяМакс + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановкиМакс);
	Иначе
		ЗначениеПоказателя = Формат(СтрокаНачисления.Размер, ФорматПоказателя);
		СуммаПодстановки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеПоказателя, 10, " ");
		СтрокаПозиции[ИмяПоказателя + "ТекущееЗначение"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'было: %1'"), СуммаПодстановки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИтогиСтрок(Форма, Позиции) Экспорт
	
	Для каждого ОписаниеПоказателя Из Форма.КолонкиПоказателей Цикл
		
		Если ОписаниеПоказателя.Значение.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, "Итог" + ОписаниеПоказателя.Ключ + "Мин", Позиции.Итог(ОписаниеПоказателя.Ключ + "Мин"));
					
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, "Итог" + ОписаниеПоказателя.Ключ + "Макс", Позиции.Итог(ОписаниеПоказателя.Ключ + "Макс"));
				
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
					Форма, "Итог" + ОписаниеПоказателя.Ключ, Позиции.Итог(ОписаниеПоказателя.Ключ));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьРедактируемыеПоказатели(КолонкиПоказателей) Экспорт
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания",,Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ КолонкиПоказателей = Неопределено И КолонкиПоказателей.Количество() > 0;
	
КонецФункции

Функция ПоказательИспользуется(ПоказателиПозиции, Показатель) Экспорт
	ИмяРеквизитаПоказательИспользуется = ИмяРеквизитаПоказательИспользуется(Показатель);
	Возврат ПоказателиПозиции[ИмяРеквизитаПоказательИспользуется];
КонецФункции

Функция ИмяРеквизитаПоказательИспользуется(ИмяРеквизита) Экспорт
	Возврат ИмяРеквизита + "Используется";
КонецФункции

#Область ДополнитьФормуИзменяемымиПоказателями

Процедура ДополнитьФормуИзменяемымиПоказателями(Форма, ПутьТаблицы) Экспорт
	
	ИзменяемыеПоказатели = ПлановыеНачисленияСотрудников.СведенияОПоказателях(Форма.ОтображаемыеПоказатели);
	ДобавитьРеквизитыПоказателей(Форма, ПутьТаблицы, ИзменяемыеПоказатели);
	ДобавитьЭлементыПоказателей(Форма, ПутьТаблицы, ИзменяемыеПоказатели);
	
КонецПроцедуры

#Область ДобавитьРеквизитыПоказателей

Процедура ДобавитьРеквизитыПоказателей(Форма, ПутьТаблицы, ИзменяемыеПоказатели)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавитьРеквизитыИзменяемыеПоказатели(Форма, ПутьТаблицы, ИзменяемыеПоказатели, ДобавляемыеРеквизиты);
	СуществующиеРеквизиты = МассивИменРеквизитовФормы(Форма, ПутьТаблицы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, СуществующиеРеквизиты);
	ЗаполнитьСоответствиеРеквизитовИПоказателей(Форма, ИзменяемыеПоказатели);

КонецПроцедуры

Процедура ДобавитьРеквизитыИзменяемыеПоказатели(Форма, ПутьТаблицы, Показатели, ДобавляемыеРеквизиты)
	
	Для Каждого КлючИЗначение Из Показатели Цикл
		ИнфоОПоказателе = КлючИЗначение.Значение;
		ДобавитьРеквизитыПоказателя(Форма, ПутьТаблицы, ДобавляемыеРеквизиты, ИнфоОПоказателе);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеРеквизитовИПоказателей(Форма, ТаблицаПоказателей)
	
	СтруктураКолонкиПоказателей = Новый Структура;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		ИнфоОПоказателе = СтрокаПоказателя.Значение;
		СтруктураКолонкиПоказателей.Вставить(ИнфоОПоказателе.Идентификатор, Новый Структура("Показатель,ТипПоказателя", СтрокаПоказателя.Ключ, ИнфоОПоказателе.ТипПоказателя));
	КонецЦикла;
	
	Форма.КолонкиПоказателей = Новый ФиксированнаяСтруктура(СтруктураКолонкиПоказателей);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыПоказателя(Форма, ПутьТаблицы, ДобавляемыеРеквизиты, ИнфоОПоказателе)
	
	Путь = ПутьТаблицы;
	ТипПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
	ИмяРеквизита = ИнфоОПоказателе.Идентификатор;
	ЗаголовокКолонки = ИнфоОПоказателе.КраткоеНаименование;
	ТипПоказателя = ИнфоОПоказателе.ТипПоказателя;
	
	ИмяРеквизитаИспользуется = ИмяРеквизитаПоказательИспользуется(ИмяРеквизита);
	ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизитаИспользуется, Новый ОписаниеТипов("Булево"), Путь);
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
		ИмяРеквизитаТекущееЗначениеМин = ИмяРеквизита + "МинТекущееЗначение";
		ИмяРеквизитаТекущееЗначениеМакс = ИмяРеквизита + "МаксТекущееЗначение";
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита+"Мин", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), Путь, , ТипПоказателя);
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита+"Макс", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), Путь, , ТипПоказателя);
		
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизитаТекущееЗначениеМин, Новый ОписаниеТипов("Строка"), Путь);
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизитаТекущееЗначениеМакс, Новый ОписаниеТипов("Строка"), Путь);
	Иначе
		ИмяРеквизитаТекущееЗначение = ИмяРеквизита + "ТекущееЗначение";
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), Путь, ЗаголовокКолонки, ТипПоказателя);
	
		ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизитаТекущееЗначение, Новый ОписаниеТипов("Строка"), Путь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ПутьКДанным, ТипЗначения, Путь, ЗаголовокКолонки = Неопределено, ТипПоказателя = Неопределено)
	
	НовыйПоказатель = Новый РеквизитФормы(ПутьКДанным, ТипЗначения, Путь, ЗаголовокКолонки);
	ДобавляемыеРеквизиты.Добавить(НовыйПоказатель);
	
	
	Если ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный Тогда
	
		НовыйПоказатель = Новый РеквизитФормы("Итог" + ПутьКДанным, Новый ОписаниеТипов("Число"));
		ДобавляемыеРеквизиты.Добавить(НовыйПоказатель);
	
	КонецЕсли;
	
КонецПроцедуры

Функция МассивИменРеквизитовФормы(Форма, ПутьТаблицы)
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьТаблицы);
	Возврат МассивИменРеквизитовФормы;
КонецФункции 

#КонецОбласти

#Область ДобавитьЭлементыПоказателей

Процедура ДобавитьЭлементыПоказателей(Форма, ПутьТаблицы, ИзменяемыеПоказатели)
	
	УдалитьЭлементыИзменяемыхПоказателей(Форма);
	ДобавитьЭлементыИзменяемыеПоказатели(Форма, ПутьТаблицы, ИзменяемыеПоказатели);
	
КонецПроцедуры

Процедура УдалитьЭлементыИзменяемыхПоказателей(Форма)
	ГруппаПоказателиПозиций = ГруппаПоказателиПозиций(Форма);
	УдалитьУсловноеОформлениеПоказателей(Форма, ГруппаПоказателиПозиций);
	ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(Форма, ГруппаПоказателиПозиций);
КонецПроцедуры

Процедура УдалитьУсловноеОформлениеПоказателей(Форма, ГруппаПоказателиСотрудников)
	
	УдаляемыеЭлементы = Новый Массив;	
	
	ПредставлениеУникальногоИдентификатора = Строка(Форма.УникальныйИдентификатор);
	
	Для каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = ПредставлениеУникальногоИдентификатора Тогда
			УдаляемыеЭлементы.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из УдаляемыеЭлементы Цикл
		Форма.УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыИзменяемыеПоказатели(Форма, ПутьТаблицы, СведенияОПоказателяхФормы)
	
	ГруппаПоказатели = ГруппаПоказателиПозиций(Форма);
	ПоказыватьИтоги = Ложь;
	
	Для Каждого СтрокаПоказателя Из Форма.ОтображаемыеПоказатели Цикл
		Показатель = СтрокаПоказателя.Значение;
		ИнфоОПоказателе = СведенияОПоказателяхФормы[Показатель];
		Если ИнфоОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный Тогда
			ПоказыватьИтоги = Истина;
		КонецЕсли;
		
		ДобавитьЭлементыПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ГруппаПоказатели);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Позиции",
		"Подвал",
		ПоказыватьИтоги);
	
КонецПроцедуры

Процедура ДобавитьЭлементыПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, Группа)
	
	ПутьКДанным = ИнфоОПоказателе.Идентификатор;
	ЗаголовокКолонки = ИнфоОПоказателе.КраткоеНаименование;
	ГруппаЗначенияПоказателя = Форма.Элементы.Добавить("ГруппаПоказатель" + ПутьКДанным, Тип("ГруппаФормы"), Группа);
	ГруппаЗначенияПоказателя.ОтображатьВШапке = Истина; 
	ГруппаЗначенияПоказателя.ОтображатьЗаголовок = Истина;
	ГруппаЗначенияПоказателя.РастягиватьПоГоризонтали = Ложь;

	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда 
		
		ГруппаЗначенияПоказателя.Заголовок = ЗаголовокКолонки + (", Мин/Макс");
		ПутьКДаннымМин = ПутьКДанным + "Мин";
		ПутьКДаннымМакс = ПутьКДанным + "Макс";
		ГруппаЗначенияПоказателя.Группировка = ГруппировкаКолонок.Вертикальная;
		
		ГруппаЗначенияПоказателяМин = Форма.Элементы.Добавить("ГруппаПоказатель" + ПутьКДаннымМин, Тип("ГруппаФормы"), ГруппаЗначенияПоказателя);
		ГруппаЗначенияПоказателяМин.ОтображатьВШапке = Ложь;
		ГруппаЗначенияПоказателяМин.ОтображатьЗаголовок = Ложь;
		ГруппаЗначенияПоказателяМин.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаЗначенияПоказателяМин.РастягиватьПоГоризонтали = Ложь;
		
		ГруппаЗначенияПоказателяМакс = Форма.Элементы.Добавить("ГруппаПоказатель" + ПутьКДаннымМакс, Тип("ГруппаФормы"), ГруппаЗначенияПоказателя);
		ГруппаЗначенияПоказателяМакс.ОтображатьВШапке = Ложь;
		ГруппаЗначенияПоказателяМакс.ОтображатьЗаголовок = Ложь;
		ГруппаЗначенияПоказателяМакс.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаЗначенияПоказателяМакс.РастягиватьПоГоризонтали = Ложь;
		
		// Добавим значение показателя после индексации.
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДаннымМин, ГруппаЗначенияПоказателяМин);
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДаннымМакс, ГруппаЗначенияПоказателяМакс);
		
		// Добавим непроиндексированное (старое) значение показателя.
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДаннымМин, ГруппаЗначенияПоказателяМин, Ложь);
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДаннымМакс, ГруппаЗначенияПоказателяМакс, Ложь);
		
	Иначе
		ГруппаЗначенияПоказателя.Заголовок = ЗаголовокКолонки;
		ГруппаЗначенияПоказателя.Группировка = ГруппировкаКолонок.Горизонтальная;
		
		// Добавим значение показателя после индексации.
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДанным, ГруппаЗначенияПоказателя);
		
		// Добавим непроиндексированное (старое) значение показателя.
		ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДанным, ГруппаЗначенияПоказателя, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементЗначенияПоказателя(Форма, ПутьТаблицы, Показатель, ИнфоОПоказателе, ПутьКДанным, Группа, НовоеЗначение = Истина)
	
	Если НовоеЗначение Тогда
		ПутьПоказателя = ПутьКДанным;
	Иначе
		ПутьПоказателя = ПутьКДанным + "ТекущееЗначение";
	КонецЕсли;
	
	ЭлементПоказатель = Форма.Элементы.Добавить(ПрефиксЭлементаПоказателиПозиций() + ПутьПоказателя, Тип("ПолеФормы"), Группа);
	ЭлементПоказатель.ПутьКДанным = ПутьТаблицы + "." + ПутьПоказателя;
	ЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПоказатель.ОтображатьВШапке = Ложь;
	ЭлементПоказатель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	ЭлементПоказатель.РастягиватьПоГоризонтали = Ложь;
	ЭлементПоказатель.Ширина = 10;

	Если НовоеЗначение Тогда
		Если ИнфоОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный Тогда
			ПоказыватьИтоги = Истина;
			ЭлементПоказатель.ОтображатьВПодвале = Истина;
			ЭлементПоказатель.ПутьКДаннымПодвала = "Итог" + ПутьКДанным;
		КонецЕсли;
		УстановитьФорматИзменяемогоПоказателя(ЭлементПоказатель, Показатель);
	Иначе
		ЭлементПоказатель.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		ЭлементПоказатель.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
		ЭлементПоказатель.Ширина = 15;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФорматИзменяемогоПоказателя(ЭлементПоказатель, Показатель)
	
	Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
		ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
		ЭлементПоказатель.ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
		ЭлементПоказатель.Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
	Иначе
		ЭлементПоказатель.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		ЭлементПоказатель.Формат = "ЧДЦ=2";
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппаПоказателиПозиций(Форма)
	Возврат Форма.Элементы.Найти("ГруппаПоказателиПозиций");
КонецФункции

Функция ПрефиксЭлементаПоказателиПозиций() Экспорт
	Возврат "ЗначенияПоказателейПозиций";
КонецФункции 

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти
