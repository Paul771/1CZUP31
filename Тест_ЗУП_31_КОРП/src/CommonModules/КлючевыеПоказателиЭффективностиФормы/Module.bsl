#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСоответствиеПоказателей(Форма, Показатели) Экспорт
	
	Если Показатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПоказателей = Новый Соответствие;
	
	Для каждого СтрокаПоказателя Из Показатели Цикл
		СтруктураПоказателя = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПоказателя);
		СтруктураПоказателя.Удалить("Показатель");
		СоответствиеПоказателей.Вставить(СтрокаПоказателя.Показатель, СтруктураПоказателя);
	КонецЦикла; 
	
	Форма.СоответствиеПоказателей = Новый ФиксированноеСоответствие(СоответствиеПоказателей);
	
КонецПроцедуры

Процедура УстановитьПараметрыОтбораПоказателям(Форма) Экспорт

	Если Форма.СоответствиеПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	Для каждого КлючИЗначение Из Форма.СоответствиеПоказателей Цикл
		МассивПоказателей.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	ПараметрыВыбораМассив = Новый Массив;
	ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивПоказателей));
	
	Форма.Элементы.ПоказателиПоказатель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив); 

КонецПроцедуры

Процедура ЗаполнитьВторичныеРеквизитыТаблицыПоказателей(Форма, ИменаРеквизитовПоказателей = "ТребуетсяВводПлана") Экспорт

	НенайденныеПоказатели = Новый Массив;
	Для каждого СтрокаПоказателя Из Форма.Объект.Показатели Цикл
		СтруктураПоказателя = Форма.СоответствиеПоказателей.Получить(СтрокаПоказателя.Показатель);
		Если СтруктураПоказателя = Неопределено Тогда
			НенайденныеПоказатели.Добавить(СтрокаПоказателя.Показатель);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаПоказателя, СтруктураПоказателя);
		КонецЕсли;
	КонецЦикла; 
	
	Если НенайденныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НенайденныеПоказатели, ИменаРеквизитовПоказателей);
	
	Для каждого СтрокаПоказателя Из Форма.Объект.Показатели Цикл
		СтруктураРеквизитов = СоответствиеРеквизитов.Получить(СтрокаПоказателя.Показатель);
		Если СтруктураРеквизитов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя, СтруктураРеквизитов, ИменаРеквизитовПоказателей);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗагрузитьПоказатели(Форма, ИмяРеквизитаЗначение = Неопределено) Экспорт
	
	Форма.Объект.Показатели.Очистить();
	
	Если Форма.СоответствиеПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Форма.СоответствиеПоказателей Цикл
		НоваяСтрока = Форма.Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
		НоваяСтрока.Показатель = КлючИЗначение.Ключ;
		Если ИмяРеквизитаЗначение <> Неопределено Тогда
			НоваяСтрока.Значение = КлючИЗначение.Значение[ИмяРеквизитаЗначение];
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПараметрКритерияОтбораНаФормеСДинамическимСпискомПриИзменении(Форма, ИмяЭлемента, Режим) Экспорт
	
	НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметра", ИмяЭлемента));
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Изменение параметра, установим использование
		СтрокаПараметра = НайденныеСтроки[0];
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование] = Истина;
	Иначе
		НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметраИспользование", ИмяЭлемента));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		// Изменение использования параметра
		СтрокаПараметра = НайденныеСтроки[0];
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	Если Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование] Тогда
		Если Режим = "План" Тогда
			МассивДокументов = ДокументыПланаПоПодразделению(Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра]);
		ИначеЕсли Режим = "Факт" Тогда
			МассивДокументов = ДокументыФактаПоПодразделению(Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра]);
		Иначе	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаСписок = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ФормаСписок,
		СтрокаПараметра.ИмяПараметра,
		МассивДокументов,
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование]);
	
КонецПроцедуры

// Процедура обновляет динамический список на форме списка журнала, при этом обновляются массивы документов для
// критериев отбора.
//
// Параметры:
//		Форма - Форма журнала документов с динамическим списком.
//
Процедура ОбновитьФормыСДинамическимСписком(Форма, Режим) Экспорт
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	Для Каждого СтрокаПараметра Из Форма.ПараметрыКритерияОтбора Цикл
		МассивДокументов = Новый Массив;
		Если Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование] Тогда
			Если Режим = "План" Тогда
				МассивДокументов = ДокументыПланаПоПодразделению(Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра]);
			ИначеЕсли Режим = "Факт" Тогда
				МассивДокументов = ДокументыФактаПоПодразделению(Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра]);
			Иначе	
				Возврат;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				СтрокаПараметра.ИмяПараметра,
				МассивДокументов,
				Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование]);
		Иначе
			Для каждого ЭлементФормы Из Форма.Элементы Цикл
				Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") И ЭлементФормы.ПутьКДанным = Форма.НаименованиеРеквизитаФормыДинамическийСписок Тогда
					ЭлементФормы.Обновить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораПодразделениям(ЭлементПодразделение, МассивПодразделений) Экспорт
	
	ПараметрыВыбораМассив = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивПодразделений));
	Иначе
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.СтруктураПредприятия", МассивПодразделений));
	КонецЕсли; 
	
	ЭлементПодразделение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив); 

КонецПроцедуры

Процедура УстановитьПараметрыВыбораЭлементаПоМестуВСтруктуреПредприятия(Элемент, Подразделение) Экспорт
	
	ПараметрыВыбораМассив = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		МассивСтруктурныхЕдиниц = ОрганизационнаяСтруктура.ПодчиненныеПодразделения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделение));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.МестоВСтруктуреПредприятия", МассивСтруктурныхЕдиниц));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("НеотключаемыеОтборы", "МестоВСтруктуреПредприятия"));
	Иначе
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Подразделение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Источник")));
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("НеотключаемыеОтборы", "Подразделение"));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив); 

КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШкалыЗначений(УсловноеОформление, Префикс = "ШкалаЗначений") Экспорт 
	
	// Скрытие "ШкалаЗначенийОценка".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	СвойствоЭлементОформления.Значение = Ложь;
	СвойствоЭлементОформления.Использование = Истина;
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Отображать");
	СвойствоЭлементОформления.Значение = Ложь;
	СвойствоЭлементОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ОценкаЗадаетсяИнтервалом");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Префикс + "Оценка");
	ОформляемоеПоле.Использование = Истина;
	
	// Скрытие "ШкалаЗначенийИнтервалОценкиОт" и "ШкалаЗначенийИнтервалОценкиДо".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	СвойствоЭлементОформления.Значение = Ложь;
	СвойствоЭлементОформления.Использование = Истина;
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Отображать");
	СвойствоЭлементОформления.Значение = Ложь;
	СвойствоЭлементОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ОценкаЗадаетсяИнтервалом");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле1 = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле1.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ИнтервалОценкиОт");
	ОформляемоеПоле1.Использование = Истина;
	ОформляемоеПоле2 = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле2.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ИнтервалОценкиДо");
	ОформляемоеПоле2.Использование = Истина;
	
	// Текст "ЗначениеДо".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	СвойствоЭлементОформления.Значение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ЗначениеПредставление");
	СвойствоЭлементОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ЗначениеПредставление");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ЗначениеДо");
	ОформляемоеПоле.Использование = Истина;

	// Текст "ШкалаЗначенийИнтервалОценкиОт".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	СвойствоЭлементОформления.Значение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ИнтервалОценкиПредставлениеОт");
	СвойствоЭлементОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ИнтервалОценкиПредставлениеОт");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ИнтервалОценкиОт");
	ОформляемоеПоле.Использование = Истина;
	
	// Текст "ШкалаЗначенийИнтервалОценкиДо".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	СвойствоЭлементОформления.Значение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ИнтервалОценкиПредставлениеДо");
	СвойствоЭлементОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ИнтервалОценкиПредставлениеДо");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ИнтервалОценкиДо");
	ОформляемоеПоле.Использование = Истина;
	
	// Доступность последнего порога.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СвойствоЭлементОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ТолькоПросмотр");
	СвойствоЭлементОформления.Значение = Истина;
	СвойствоЭлементОформления.Использование = Истина;
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбораДанных1 = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ЗначениеДо");
	ЭлементОтбораДанных1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных1.ПравоеЗначение = КлючевыеПоказателиЭффективностиКлиентСервер.НижнийПорогШкалы();
	ЭлементОтбораДанных1.Использование = Истина;
	ЭлементОтбораДанных2 = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Префикс + ".ЗначениеДо");
	ЭлементОтбораДанных2.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных2.ПравоеЗначение = КлючевыеПоказателиЭффективностиКлиентСервер.ВерхнийПорогШкалы();
	ЭлементОтбораДанных2.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Префикс + "ЗначениеДо");
	ОформляемоеПоле.Использование = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументыПланаПоПодразделению(Подразделение)
	
	МассивДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделения
	|ИЗ
	|	РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ПодчиненностьСтруктурныхЕдиниц
	|ГДЕ
	|	ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланПоказателейЭффективностиПодразделения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПланПоказателейЭффективностиПодразделения КАК ПланПоказателейЭффективностиПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ПланПоказателейЭффективностиПодразделения.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланПоказателейЭффективностиПозиции.Ссылка
	|ИЗ
	|	Документ.ПланПоказателейЭффективностиПозиции КАК ПланПоказателейЭффективностиПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ПланПоказателейЭффективностиПозиции.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланПоказателейЭффективностиСотрудника.Ссылка
	|ИЗ
	|	Документ.ПланПоказателейЭффективностиСотрудника КАК ПланПоказателейЭффективностиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ПланПоказателейЭффективностиСотрудника.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланПоказателяЭффективностиПодразделенийПодразделения.Ссылка
	|ИЗ
	|	Документ.ПланПоказателяЭффективностиПодразделений.Подразделения КАК ПланПоказателяЭффективностиПодразделенийПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ПланПоказателяЭффективностиПодразделенийПодразделения.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланПоказателяЭффективностиПозиций.Ссылка
	|ИЗ
	|	Документ.ПланПоказателяЭффективностиПозиций КАК ПланПоказателяЭффективностиПозиций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ПланПоказателяЭффективностиПозиций.Подразделение = ВТПодразделения.Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивДокументов;

КонецФункции

Функция ДокументыФактаПоПодразделению(Подразделение)
	
	МассивДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодчиненностьСтруктурныхЕдиниц.СтруктурнаяЕдиница КАК Подразделение
	|ПОМЕСТИТЬ ВТПодразделения
	|ИЗ
	|	РегистрСведений.ПодчиненностьСтруктурныхЕдиниц КАК ПодчиненностьСтруктурныхЕдиниц
	|ГДЕ
	|	ПодчиненностьСтруктурныхЕдиниц.ВышестоящаяСтруктурнаяЕдиница = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактПоказателейЭффективностиПодразделения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФактПоказателейЭффективностиПодразделения КАК ФактПоказателейЭффективностиПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ФактПоказателейЭффективностиПодразделения.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактПоказателейЭффективностиСотрудника.Ссылка
	|ИЗ
	|	Документ.ФактПоказателейЭффективностиСотрудника КАК ФактПоказателейЭффективностиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ФактПоказателейЭффективностиСотрудника.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактПоказателяЭффективностиПодразделенийПодразделения.Ссылка
	|ИЗ
	|	Документ.ФактПоказателяЭффективностиПодразделений.Подразделения КАК ФактПоказателяЭффективностиПодразделенийПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ФактПоказателяЭффективностиПодразделенийПодразделения.Подразделение = ВТПодразделения.Подразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактПоказателяЭффективностиСотрудников.Ссылка
	|ИЗ
	|	Документ.ФактПоказателяЭффективностиСотрудников КАК ФактПоказателяЭффективностиСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодразделения КАК ВТПодразделения
	|		ПО ФактПоказателяЭффективностиСотрудников.Подразделение = ВТПодразделения.Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивДокументов;

КонецФункции

#КонецОбласти