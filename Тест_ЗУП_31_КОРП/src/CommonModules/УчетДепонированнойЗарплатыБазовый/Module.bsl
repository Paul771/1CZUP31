
#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДокументаДепонированиеЗарплаты

/// Обработчики событий модуля объекта документов Депонирование зарплаты.

Процедура ДепонированиеЗарплатыОбработкаПроведения(ДокументОбъект, Отказ) Экспорт
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	Ведомости	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ведомость);
	ФизЛица		= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДокументОбъект.Депоненты.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(
		ДокументОбъект, 
		ДокументОбъект.Организация, 
		Ведомости, 
		ФизЛица, 
		ДокументОбъект.Дата, 
		Отказ);
		
	Если НЕ Отказ Тогда
			
		ДанныеВедомости = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(ДокументОбъект.Ссылка, Ведомости, Физлица, Неопределено);
	
		ДепонируемаяЗарплата = УчетДепонированнойЗарплаты.НоваяТаблицаДепонированнойЗарплаты();
		Для Каждого СтрокаДанныхВедомости Из ДанныеВедомости Цикл
			СтрокаДепонируемойЗарплаты = ДепонируемаяЗарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДепонируемойЗарплаты, СтрокаДанныхВедомости);
			СтрокаДепонируемойЗарплаты.Сумма = СтрокаДанныхВедомости.СуммаКВыплате;
		КонецЦикла;	
		ДепонируемаяЗарплата.ЗаполнитьЗначения(ДокументОбъект.Организация, "Организация");
		ДепонируемаяЗарплата.ЗаполнитьЗначения(ДокументОбъект.Дата, "Дата");
		ДепонируемаяЗарплата.ЗаполнитьЗначения(ДокументОбъект.Ведомость, "Ведомость");
			
		УчетДепонированнойЗарплаты.ЗарегистрироватьДепонированнуюЗарплату(ДокументОбъект.Движения, Отказ, ДепонируемаяЗарплата, Истина);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Печать

// Возвращает описание команды печати реестра депонированных сумм.
// 
// Возвращаемое значение:
//   Структура - структура с полями:
//		* ПредставлениеКоманды - строка.
//
Функция ОписаниеПечатиРеестраДепонированныхСумм() Экспорт
	
	ОписаниеПечатиРеестраДепонированныхСумм = Новый Структура;
	ОписаниеПечатиРеестраДепонированныхСумм.Вставить("ПредставлениеКоманды",  НСтр("ru = 'Печать реестра депонированных сумм'"));
	ОписаниеПечатиРеестраДепонированныхСумм.Вставить("ИмяМакета", "Документ.ДепонированиеЗарплаты.ПФ_MXL_РеестрДепонированныхСумм");
	ОписаниеПечатиРеестраДепонированныхСумм.Вставить("СинонимМакета", НСтр("ru = 'Реестр депонированных сумм'"));
	
	Возврат ОписаниеПечатиРеестраДепонированныхСумм
	
КонецФункции

Процедура ПриКомпоновкеОтчетаКнигаУчетаДепонентов(Объект, ДокументРезультат, СтандартнаяОбработка) Экспорт
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(Объект.КомпоновщикНастроек);
	Если КлючВарианта <> "КнигаУчетаДепонентов" Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СтандартнаяОбработка = Ложь;
		ДокументРезультат.НачатьАвтогруппировкуСтрок();
		ДокументРезультат.Очистить();
		
		НастройкиОтчета = Объект.КомпоновщикНастроек.ПолучитьНастройки();
		НастройкиОтчета.Выбор.Элементы.Очистить();
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраПериод <> Неопределено И ЗначениеПараметраПериод.Значение <> '00010101' Тогда
			НачалоПериода = ЗначениеПараметраПериод.Значение.ДатаНачала;
			КонецПериода  = ЗначениеПараметраПериод.Значение.ДатаОкончания;
		Иначе
			НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
			КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если НачалоПериода = '00010101' Тогда
			НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если КонецПериода = '00010101' Тогда
			КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Данные = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Объект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Данные);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей, НастройкиОтчета);
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Книга учета депонентов не будет сформирована.'") + " " + Инфо.Описание;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей, НастройкиОтчета)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КнигаУчетаДепонентов.ПФ_MXL_КнигаУчетаДепонентов");
	
	Для Каждого ДанныеШапкиОтчета Из Данные.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Шапка	= Макет.ПолучитьОбласть("Шапка");

		Шапка.Параметры.Заполнить(ДанныеШапкиОтчета);
		Шапка.Параметры.Начало		= НачалоПериода;
		Шапка.Параметры.Окончание	= КонецПериода;
		
		ДокументРезультат.Вывести(Шапка);
		ИтогоПоступлений = 0;
		
		Для Каждого ДанныеСтрокиОтчета Из ДанныеШапкиОтчета.Строки Цикл
			
			Строка	= Макет.ПолучитьОбласть("Строка");
			Строка.Параметры.Заполнить(ДанныеСтрокиОтчета);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Строка, ДанныеСтрокиОтчета, СоответствиеПользовательскихПолей);
			
			НомераПлатежныхДокументов = "";
			Для Каждого СтрокаСНомером Из ДанныеСтрокиОтчета.Строки Цикл
				НомераПлатежныхДокументов = ?(ПустаяСтрока(НомераПлатежныхДокументов), "", НомераПлатежныхДокументов + "; ") + СтрокаСНомером.НомерПлатежногоДокумента;
			КонецЦикла;
			
			Строка.Параметры.НомерПлатежногоДокумента = НомераПлатежныхДокументов;
			
			ДокументРезультат.Вывести(Строка);
			
			Поступления = ДанныеСтрокиОтчета[СоответствиеПользовательскихПолей.Получить("СуммаПост")];
			Если Поступления <> Неопределено Тогда
				ИтогоПоступлений = ИтогоПоступлений + Поступления;
			КонецЕсли; 
			
		КонецЦикла;
		
		Подвал	= Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(ДанныеШапкиОтчета);
		
		Подвал.Параметры.ОстатокНаКонец = ИтогоПоступлений - ДанныеШапкиОтчета.СуммаВыплаты;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Подвал, ДанныеШапкиОтчета, СоответствиеПользовательскихПолей);
		
		// Главный бухгалтер
		ПараметрГлавныйБухгалтер = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГлавныйБухгалтер"));
		Если ПараметрГлавныйБухгалтер.Использование Тогда
			ГлавныйБухгалтер = ПараметрГлавныйБухгалтер.Значение;
		Иначе
			
			ЗапрашиваемыеЗначения = Новый Структура("Организация,ГлавныйБухгалтер");
			ЗапрашиваемыеЗначения.Организация = ДанныеШапкиОтчета.Организация;
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения);
			
			ГлавныйБухгалтер = ЗапрашиваемыеЗначения.ГлавныйБухгалтер;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГлавныйБухгалтер) Тогда
			ТаблицаФИО = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ГлавныйБухгалтер, "ИОФамилия", ДанныеШапкиОтчета.Год);
			Если ТаблицаФИО.Количество() > 0 Тогда
				Подвал.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ТаблицаФИО[0].ИОФамилия;
			КонецЕсли;
		КонецЕсли; 
			
		// Исполнитель
		ПараметрИсполнитель = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Исполнитель"));
		Если ПараметрИсполнитель.Использование Тогда
			Исполнитель = ПараметрИсполнитель.Значение;
		Иначе
			
			ЗапрашиваемыеЗначения = Новый Структура("Организация,Исполнитель");
			ЗапрашиваемыеЗначения.Организация = ДанныеШапкиОтчета.Организация;
			ЗарплатаКадры.ЗаполнитьСведенияОбОтветственныхРаботникахОрганизаций(ЗапрашиваемыеЗначения);
			
			Исполнитель = ЗапрашиваемыеЗначения.Исполнитель;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			ТаблицаФИО = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, Исполнитель, "ИОФамилия", ДанныеШапкиОтчета.Год);
			Если ТаблицаФИО.Количество() > 0 Тогда
				Подвал.Параметры.ИсполнительРасшифровкаПодписи = ТаблицаФИО[0].ИОФамилия;
			КонецЕсли;
		КонецЕсли; 
			
		// Должность исполнителя
		ПараметрДолжностьИсполнителя = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьИсполнителя"));
		Если ПараметрДолжностьИсполнителя.Использование Тогда
			ДолжностьИсполнителя = ПараметрДолжностьИсполнителя.Значение;
		Иначе
			
			ЗапрашиваемыеЗначения = Новый Структура("Организация,ДолжностьИсполнителя");
			ЗапрашиваемыеЗначения.Организация = ДанныеШапкиОтчета.Организация;
			ЗарплатаКадры.ЗаполнитьСведенияОбОтветственныхРаботникахОрганизаций(ЗапрашиваемыеЗначения);
			
			ДолжностьИсполнителя = ЗапрашиваемыеЗначения.ДолжностьИсполнителя;
			
		КонецЕсли;
		
		Подвал.Параметры.ДолжностьИсполнителя = ДолжностьИсполнителя;
			
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.КнигаУчетаДепонентов, "Форма0504048");
	Вариант.Включен = Ложь;

КонецПроцедуры

#КонецОбласти
