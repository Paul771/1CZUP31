#Область СлужебныеПроцедурыИФункции

#Область ОбщееДляФорм

// Определяет, можно ли обращаться к данным текущей строки таблицы.
//
Функция ТекущиеДанныеТаблицыДоступны(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыделеннаяГруппаТаблицы(ТаблицаФормы) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные; 
	
	Если ЭлектронноеОбучениеСлужебныйКлиент.ТекущиеДанныеТаблицыДоступны(ТекущиеДанные) И ТекущиеДанные.Свойство("ЭтоГруппа") Тогда
		
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Группа = ТекущиеДанные.Ссылка;
		Иначе 
			Группа = ТекущиеДанные.Родитель;
		КонецЕсли;
		
	Иначе
		
		Группа = Неопределено
		
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

#КонецОбласти

#Область ФормыСПолемHTML

// Исполняет скрипт в браузере.
//
Функция ВыполнитьСкрипт(Документ, ТекстСкрипта, Браузер) Экспорт
	
	Если Документ = NULL ИЛИ Документ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Браузер) Тогда
		Текст = НСтр("ru = 'Браузер не определен'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Браузер = "msie" Тогда
		ИмяОкна = "parentWindow";
	Иначе
		ИмяОкна = "defaultView";
	КонецЕсли;
	
	Возврат Документ[ИмяОкна].eval(ТекстСкрипта);
	
КонецФункции

Функция ИмяДокумента(Документ, Браузер) Экспорт
	
	Если Документ = NULL ИЛИ Документ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Браузер) Тогда
		Текст = НСтр("ru = 'Браузер не определен'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Браузер = "msie" Тогда
		ИмяОкна = "parentWindow";
	Иначе
		ИмяОкна = "defaultView";
	КонецЕсли;
	
	Попытка
		Возврат Документ[ИмяОкна].eval("name");
	Исключение
		// Обработка не требуется
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Определяет браузер пользователя
//
Процедура ОпределитьБраузер(Форма, Документ) Экспорт
		
	Если Документ = NULL ИЛИ Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.Браузер) Тогда // Определяем только один раз
			
		Попытка
			
			Документ.parentWindow.eval("void(0);");
			Форма.Браузер = "msie";
			
		Исключение
			
			Форма.Браузер = "other";
			
			// Обработка исключения не требуется
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Системное

// Определение каталога AppData текущего пользователя Windows.
//
Функция КаталогAppData() Экспорт 
	
	КаталогаAppData = "";
	
	#Если НЕ ВебКлиент Тогда
		
	СистемнаяИнформация = Новый СистемнаяИнформация();
		
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
			
		Попытка 
			WSHShell = new COMОбъект("WScript.Shell");
			КаталогаAppData = WshShell.SpecialFolders.Item("AppData");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогаAppData);	
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
		
	#Иначе
		
	Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции 

Функция КаталогиШаблоновКонфигураций(Знач КаталогаAppData = Неопределено) Экспорт
	
	МассивПутей = Новый Массив;
	
	Если КаталогаAppData = Неопределено Тогда
		
		КаталогаAppData = КаталогAppData();
		
		Если КаталогаAppData = Неопределено Тогда
			Возврат МассивПутей;
		КонецЕсли;		
		
	КонецЕсли;	
	
	#Если НЕ ВебКлиент Тогда
	
	// Добавляем каталоги с курсами из шаблонов конфигураций
	
	ПутьКФайлуV8Cfg = КаталогаAppData + "1C\1CEStart\1CEStart.cfg";
	
	ФайлV8Cfg = Новый Файл(ПутьКФайлуV8Cfg);
	
	Если НЕ ФайлV8Cfg.Существует() Тогда
		Возврат МассивПутей;
	КонецЕсли;

	ДокументV8Cfg = Новый ТекстовыйДокумент;
	ДокументV8Cfg.Прочитать(ФайлV8Cfg.ПолноеИмя);
	КоличествоСтрок = ДокументV8Cfg.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		ТекущаяСтрока = ДокументV8Cfg.ПолучитьСтроку(НомерСтроки);
		
		ТекСтрокаМассив = ЭлектронноеОбучениеСлужебныйКлиентСервер.СтрокаВебРазделить(ТекущаяСтрока, "=");
		
		Если ТекСтрокаМассив.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаМассив[0] = "ConfigurationTemplatesLocation" Тогда
						
			ПутьККаталогуШаблонов = ТекСтрокаМассив[1];
			ПутьККаталогуШаблонов = ЭлектронноеОбучениеСлужебныйКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьККаталогуШаблонов);
			ПутьККаталогуШаблонов = СтрЗаменить(ПутьККаталогуШаблонов, "file://", "");

			ФайлКаталогШаблонов = Новый Файл(ПутьККаталогуШаблонов);
			
			Если ФайлКаталогШаблонов.Существует() И ФайлКаталогШаблонов.ЭтоКаталог() Тогда
				МассивПутей.Добавить(ПутьККаталогуШаблонов);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивПутей;
	
	#Иначе
		
	Возврат МассивПутей;
		
	#КонецЕсли

КонецФункции

// Записывает в журнал регистрации описание ошибки.
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ЭлектронноеОбучениеСлужебныйВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ВнешниеОбъекты

Функция ПриложениеCOMДоступно(ПриложениеCOM) Экспорт
	
	Если ПриложениеCOM = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Попытка
		ВерсияПриложения = ПриложениеCOM.Version;
	Исключение
		ВерсияПриложения = Неопределено;
		// Обработка исключения не требуется
	КонецПопытки;
	
	Если ВерсияПриложения = Неопределено Тогда
		
		ЗакрытьCOMПриложение(ПриложениеCOM);
		
	КонецЕсли;
	
	Возврат ?(ВерсияПриложения = Неопределено, Ложь, Истина);
	
КонецФункции

Процедура ЗакрытьCOMПриложение(ПриложениеCOM, ИнформацияОбОшибке = Неопределено) Экспорт
	
	Если ПриложениеCOM <> Неопределено Тогда
		
		Попытка			
			ПриложениеCOM.Quit(0);
		Исключение
			// Не требуется
		КонецПопытки;
		
	КонецЕсли;		
	
	ПриложениеCOM = Неопределено;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке) Тогда
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Электронное обучение'"),
			"Ошибка",
			ИнформацияОбОшибке,
			,
			Истина
		);
						
		ВызватьИсключение (НСтр("ru = 'Ошибка при открытии файла.'") + Символы.ПС + ИнформацияОбОшибке);		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Вызывает диалог перед добавлением элемента подчиненного справочника,
// если основной элемент не записан.
//
Процедура ПередДобавлениемЭлементаПодчиненногоСправочника(Форма, Отказ, ПроверитьМодифицированность = Ложь) Экспорт
	ВызватьИсключение НСтр("ru = 'Устаревший вызов'");		
КонецПроцедуры

#КонецОбласти

#КонецОбласти



