////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адаптация и увольнение".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//										общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.20";
	Обработчик.Процедура = "Справочники.МероприятияАдаптацииУвольнения.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.43";
	Обработчик.Процедура = "РегистрыСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения.ЗаполнитьОрганизацию";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2917b1ee-be4a-49be-bca7-1a47be762b83");
	Обработчик.Комментарий = НСтр("ru='Заполнение организации в записях регистра ""Отборы назначения мероприятий адаптации и увольнения""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.43";
	Обработчик.Процедура = "АдаптацияУвольнение.УстановитьИспользованиеАдаптацииУвольнения";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2705a4c-dcee-4cc5-aabc-408bb4ebe478");
	Обработчик.Комментарий = НСтр("ru='Установление использования мероприятий адаптации и увольнения.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.43";
	Обработчик.Процедура = "АдаптацияУвольнение.УстановитьПараметрыНабораСвойствМероприятияАдаптацииУвольнения";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e7173ad-f9ee-4a78-b4d8-64ae341543cd");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств справочников.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.43";
	Обработчик.Процедура = "АдаптацияУвольнение.УстановитьПараметрыНабораСвойствДокументовАдаптацииУвольнения";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2b094915-5de7-475e-989f-971c28492e71");
	Обработчик.Комментарий = НСтр("ru = 'Установка параметров для набора свойств документов.'");
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствМероприятияАдаптацииУвольнения(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьАдаптациюУвольнение.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_МероприятияАдаптацииУвольнения", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствДокументовАдаптацииУвольнения(ПараметрыОбновления = НеОпределено) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьАдаптациюУвольнение.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОбОтпускеПоУходуЗаРебенком", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОбУвольнении", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОВозвратеИзОтпускаПоУходуЗаРебенком", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОВосстановленииВДолжности", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОКадровомПереводе", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_РешениеОПриемеНаРаботу", ПараметрыНабора);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеАдаптацииУвольнения(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиАдаптацииУвольнения.ИспользоватьАдаптациюУвольнение КАК ИспользоватьАдаптациюУвольнение
	|ИЗ
	|	РегистрСведений.УдалитьНастройкиАдаптацииУвольнения КАК НастройкиАдаптацииУвольнения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИспользоватьАдаптациюУвольнение Тогда
			Константы.ИспользоватьАдаптациюУвольнение.Установить(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОбОтпускеПоУходуЗаРебенком", "ДатаНачала", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОбУвольнении", "ДатаУвольнения", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком", "ДатаВозврата", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОВосстановленииВДолжности", "ДатаВосстановления", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОКадровомПереводе", "ДатаНачала", "ПодборПерсонала", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РешениеОПриемеНаРаботу", "ДатаПриема", "ПодборПерсонала", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектаОснования

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Мероприятия = ДокументОбъект.МероприятияАдаптацииУвольнения.ВыгрузитьКолонку("Мероприятие");
	ЛичныеМероприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Мероприятия, "ИсполняетсяСотрудником");
	
	Для Каждого ДанныеМероприятия Из ДокументОбъект.МероприятияАдаптацииУвольнения Цикл
		ИндексСтроки = ДокументОбъект.МероприятияАдаптацииУвольнения.Индекс(ДанныеМероприятия);
		
		// Проверка мероприятия.
		Если Не ЗначениеЗаполнено(ДанныеМероприятия.Мероприятие) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указано мероприятие.'"),
				ДокументОбъект, 
				СтрШаблон("МероприятияАдаптацииУвольнения[%1].Мероприятие", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")),, Отказ);
		ИначеЕсли УникальныеЗначения.Получить(ДанныеМероприятия.Мероприятие) = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Информация о мероприятии ""%1"" была введена в документе ранее.'"), ДанныеМероприятия.Мероприятие),
				ДокументОбъект, 
				СтрШаблон("МероприятияАдаптацииУвольнения[%1].Мероприятие", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")),, Отказ);
		Иначе
			УникальныеЗначения.Вставить(ДанныеМероприятия.Мероприятие, Истина);
		КонецЕсли;
		
		// Проверка исполнителя.
		Если Не ЗначениеЗаполнено(ДанныеМероприятия.Исполнитель) Тогда
			Отказ = Истина;
			СообщитьОбОшибкеИсполнителяВСтроке(ДокументОбъект, ДанныеМероприятия, ИндексСтроки, ЛичныеМероприятия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМероприятийАдаптацииВРешенииОПриеме(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.РешениеОПриемеНаРаботу.ТабличныеЧасти.МероприятияАдаптацииУвольнения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ПометкаУдаления
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаЗаданийПоДокументу(ДокументОбъект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
		
		БизнесПроцессОбъект = Выборка.Задание.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если БизнесПроцессОбъект.Стартован Тогда 
			Если Не БизнесПроцессОбъект.Завершен Тогда
				БизнесПроцессОбъект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен");
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
		Иначе
			БизнесПроцессыИЗадачиСервер.ОтключитьОтложенныйСтартПроцесса(БизнесПроцессОбъект.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(ДокументОбъект, Отказ) Экспорт
	
	Если Не ДокументОбъект.ПометкаУдаления 
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаЗаданийПоДокументу(ДокументОбъект.Ссылка);
	
	Пока Выборка.Следующий() Цикл
		ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(Выборка.Задание);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КадровыеДокументы

Процедура ОбработкаЗаполненияКадровогоПриказа(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ИспользуетсяАдаптацияУвольнение()
		Или ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если Метаданные.ОпределяемыеТипы.СобытияАдаптацииУвольнения.Тип.СодержитТип(ТипДанныхЗаполнения) Тогда
		
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОКадровомПереводе") Тогда
			
			КопируемыеРеквизиты = "ДатаНачала, ДатаОкончания, ДолжностьПоШтатномуРасписанию, ОбособленноеПодразделение, Организация, Сотрудник, ФизическоеЛицо";
			
			РеквизитыПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДолжностьПоШтатномуРасписанию, "Подразделение, Должность");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПозиции);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОбУвольнении") Тогда
			
			КопируемыеРеквизиты = "ДатаУвольнения, Организация, Сотрудник, ФизическоеЛицо";
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОбОтпускеПоУходуЗаРебенком") Тогда
			
			КопируемыеРеквизиты = "ДатаНачала, ДатаНачала, Организация, ОсновнойСотрудник";
			ДокументОбъект.Сотрудник = ДанныеЗаполнения.ФизическоеЛицо;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОВосстановленииВДолжности") Тогда
			
			КопируемыеРеквизиты = "ДатаВосстановления, Организация, Сотрудник, ФизическоеЛицо, ДолжностьПоШтатномуРасписанию";
			
			РеквизитыПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДолжностьПоШтатномуРасписанию, "Подразделение, Должность");
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыПозиции);
			
			ПриказСвязанныйСОснованием = СвязанныйСРешениемПриказ(ДанныеЗаполнения.ДокументОснование);
			Если ЗначениеЗаполнено(ПриказСвязанныйСОснованием) Тогда
				ДокументОбъект.ДокументУвольнения = ПриказСвязанныйСОснованием;
				ДокументОбъект.ДатаУвольнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриказСвязанныйСОснованием, "ДатаУвольнения");
			КонецЕсли;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком") Тогда
			
			КопируемыеРеквизиты = "ДатаВозврата, Организация, ОсновнойСотрудник";
			ДокументОбъект.Сотрудник = ДанныеЗаполнения.ФизическоеЛицо;
			
			ПриказСвязанныйСОснованием = СвязанныйСРешениемПриказ(ДанныеЗаполнения.ДокументОснование);
			Если ЗначениеЗаполнено(ПриказСвязанныйСОснованием) Тогда
				ДокументОбъект.ДокументОснование = ПриказСвязанныйСОснованием;
				ДокументОбъект.ЗаниматьСтавку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриказСвязанныйСОснованием, "ОсвобождатьСтавку");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения, КопируемыеРеквизиты);
		ДокументОбъект.Решение = ДанныеЗаполнения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет наборы записей регистра МероприятияАдаптацииУвольненияПоДокументу.
// Параметры:
//	Движения - коллекция движений регистратора.
//	ДанныеМероприятийАдаптацииУвольнения - ТаблицаЗначений - таблица с колонками:
//		* ДокументОснование
//		* Мероприятие
//		* Сотрудник
//		* ДатаНачала
//		* ДатаОкончания
//		* ДатаОкончания
//
Процедура СформироватьДвиженияМероприятияАдаптацииУвольненияПоДокументу(Движения, ДанныеМероприятийАдаптацииУвольнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеМероприятийАдаптацииУвольнения)Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеМероприятийАдаптацииУвольнения Цикл
		ЗаполнитьЗначенияСвойств(Движения.МероприятияАдаптацииУвольненияПоДокументу.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	Движения.МероприятияАдаптацииУвольненияПоДокументу.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументДляОбновленияЗаданийАдаптацииУвольнения(Движения) Экспорт
	
	СтрокаДвижений = Движения.ОбновлениеЗаданийАдаптацииУвольнения.Добавить();
	СтрокаДвижений.ДокументОснование = Движения.ОбновлениеЗаданийАдаптацииУвольнения.Отбор.Регистратор.Значение;
	СтрокаДвижений.ЗаданияОбновлены = Ложь;
	
	Движения.ОбновлениеЗаданийАдаптацииУвольнения.Записывать = Истина;
	
КонецПроцедуры

Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.СобытияАдаптацииУвольнения.Тип.СодержитТип(ТипВладелецФайла) Тогда
		ИменаСправочников.Вставить("РешенияПоКадровымИзменениямПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодменюРешенияПоКадровымИзменениям(ОписаниеМеню) Экспорт
	
	Если Не ИспользуетсяАдаптацияУвольнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.РешениеОКадровомПереводе) Тогда
		Возврат;
	КонецЕсли;
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.РешениеОКадровомПереводе");
	ПунктыМеню.Добавить("Документы.РешениеОбУвольнении");
	ПунктыМеню.Добавить("Документы.РешениеОбОтпускеПоУходуЗаРебенком");
	ПунктыМеню.Добавить("Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком");
	ПунктыМеню.Добавить("Документы.РешениеОВосстановленииВДолжности");
	
	ОписаниеМеню.Пункты.Добавить(
	СотрудникиФормы.РазделМеню(НСтр("ru='Решения'"), ПунктыМеню));
	
КонецПроцедуры

Функция СвязанныйСРешениемПриказ(Решение) Экспорт
	
	Приказ = Неопределено;
	ИмяДокумента = Документы[Решение.Метаданные().Имя].ИмяПриказаВводимогоНаОсновании();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	#ТаблицаДокумента КАК Документ
	|ГДЕ
	|	Документ.Решение = &Ссылка
	|	И НЕ &ПустаяСсылка
	|	И НЕ Документ.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", "Документ." + ИмяДокумента);
	ИмяВозможногоДокумента = ИмяДокумента + "Списком";
	
	Если Метаданные.Документы.Найти(ИмяВозможногоДокумента) <> Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	#ТаблицаДокумента.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Решение = &Ссылка
		|	И НЕ &ПустаяСсылка
		|	И НЕ Сотрудники.Ссылка.ПометкаУдаления";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", "Документ." + ИмяВозможногоДокумента);
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Решение);
	Запрос.УстановитьПараметр("ПустаяСсылка", Решение.Пустая());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Приказ = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Приказ;
	
КонецФункции

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.РешениеОбОтпускеПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.РешениеОбУвольнении);
	СписокОбъектов.Добавить(Документы.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.РешениеОВосстановленииВДолжности);
	СписокОбъектов.Добавить(Документы.РешениеОКадровомПереводе);
	СписокОбъектов.Добавить(Документы.РешениеОПриемеНаРаботу);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения.Имя);
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения.ИмяМетода);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура ВыполнитьДействияПриЗаписиЗадачиАдаптацииУвольнения(Источник, Отказ) Экспорт
	
	Если Отказ
		Или Источник.Выполнена
		Или Источник.ПометкаУдаления
		Или Источник.ОбменДанными.Загрузка 
		Или Не ЗначениеЗаполнено(Источник.Предмет)
		Или Не ИспользуетсяАдаптацияУвольнение() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Источник.Предмет);
	Запрос.УстановитьПараметр("Задание", Источник.БизнесПроцесс);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданияАдаптацииУвольнения.ДокументОснование,
	|	ЗаданияАдаптацииУвольнения.Мероприятие,
	|	ЗаданияАдаптацииУвольнения.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК ЗаданияАдаптацииУвольнения
	|ГДЕ
	|	ЗаданияАдаптацииУвольнения.ДокументОснование = &ДокументОснование
	|	И ЗаданияАдаптацииУвольнения.Задание = &Задание
	|	И ЗаданияАдаптацииУвольнения.ЗадачаИсполнителя = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияАдаптацииУвольнения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
		НаборЗаписей.Отбор.Мероприятие.Установить(Выборка.Мероприятие);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей[0].ЗадачаИсполнителя = Источник.Ссылка;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриЗаписиЗаданияАдаптацииУвольнения(Источник, Отказ) Экспорт
	
	Если Отказ 
		Или Источник.ОбменДанными.Загрузка 
		Или Не Источник.ПометкаУдаления 
		Или Не ИспользуетсяАдаптацияУвольнение() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задание", Источник.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаданияАдаптацииУвольнения.ДокументОснование
	|ИЗ
	|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК ЗаданияАдаптацииУвольнения
	|ГДЕ
	|	ЗаданияАдаптацииУвольнения.Задание = &Задание";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() И Не Источник.ДополнительныеСвойства.Свойство("ПометкаОснованияЗадачАдаптацииУвольнения") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = '""Пометка на удаление"" заданий адаптации и увольнения выполняется при пометке основания заданий.'"), Источник.Ссылка, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СотрудникиНаАдаптацииУвольняемые);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.СотрудникиНаАдаптацииУвольняемые, "АдаптацияУвольнение");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьАдаптациюУвольнение");
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАдаптациюУвольнение;
	
КонецПроцедуры

Процедура ОбновлениеЗаданийАдаптацииУвольнения(ПараметрыОбновления = НеОпределено, АдресВоВременномХранилище = НеОпределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеЗаданийАдаптацииУвольнения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОснование = НеОпределено;
	
	Если ПараметрыОбновления <> НеОпределено Тогда
		ПараметрыОбновления.Свойство("ДокументОснование", ДокументОснование);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование КАК ДокументОснование,
	|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование.Организация КАК Организация,
	|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения КАК ОбновлениеЗаданийАдаптацииУвольнения
	|ГДЕ
	|	НЕ ОбновлениеЗаданийАдаптацииУвольнения.ЗаданияОбновлены
	|	И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование";
	
	Если ДокументОснование = НеОпределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УдалитьВТ = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДокументОснование", Выборка.ДокументОснование);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование
		|ПОМЕСТИТЬ ВТОснованияЗаданий
		|ИЗ
		|	РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения КАК ОбновлениеЗаданийАдаптацииУвольнения
		|ГДЕ
		|	НЕ ОбновлениеЗаданийАдаптацииУвольнения.ЗаданияОбновлены
		|	И ОбновлениеЗаданийАдаптацииУвольнения.ДокументОснование = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОснованияЗаданий.ДокументОснование
		|ИЗ
		|	ВТОснованияЗаданий КАК ВТОснованияЗаданий";
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ВидСобытия = ВидСобытияАдаптацииУвольненияДокумента(Выборка.ДокументОснование);
			ПроцессыДляЗапуска = Новый Массив;
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбновлениеЗаданийАдаптацииУвольнения.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.ДокументОснование);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.МероприятияАдаптацииУвольненияПоДокументу.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.ДокументОснование);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияАдаптацииУвольнения");
			ЭлементБлокировки.УстановитьЗначение("ДокументОснование", Выборка.ДокументОснование);
			
			Блокировка.Заблокировать();
			
			Запрос.Текст = "ВЫБРАТЬ
			|	МероприятияАдаптацииУвольненияПоДокументу.ДокументОснование КАК ДокументОснование,
			|	МероприятияАдаптацииУвольненияПоДокументу.Мероприятие КАК Мероприятие,
			|	МероприятияАдаптацииУвольненияПоДокументу.Сотрудник КАК Сотрудник,
			|	МероприятияАдаптацииУвольненияПоДокументу.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МероприятияАдаптацииУвольненияПоДокументу.ДатаНачала КАК ДатаНачала,
			|	МероприятияАдаптацииУвольненияПоДокументу.ДатаОкончания КАК ДатаОкончания,
			|	МероприятияАдаптацииУвольненияПоДокументу.Исполнитель КАК Исполнитель
			|ПОМЕСТИТЬ ВТАктуальныеМероприятия
			|ИЗ
			|	РегистрСведений.МероприятияАдаптацииУвольненияПоДокументу КАК МероприятияАдаптацииУвольненияПоДокументу
			|ГДЕ
			|	МероприятияАдаптацииУвольненияПоДокументу.ДокументОснование В
			|			(ВЫБРАТЬ
			|				ОснованияЗаданий.ДокументОснование
			|			ИЗ
			|				ВТОснованияЗаданий КАК ОснованияЗаданий)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаданияАдаптацииУвольнения.ДокументОснование КАК ДокументОснование,
			|	ЗаданияАдаптацииУвольнения.Мероприятие КАК Мероприятие,
			|	ЗаданияАдаптацииУвольнения.Сотрудник КАК Сотрудник,
			|	ЗаданияАдаптацииУвольнения.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЗаданияАдаптацииУвольнения.Задание КАК Задание,
			|	ЗаданияАдаптацииУвольнения.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
			|	ЗаданияАдаптацииУвольнения.ДатаНачала КАК ДатаНачала,
			|	ЗаданияАдаптацииУвольнения.ДатаОкончания КАК ДатаОкончания,
			|	ЗаданияАдаптацииУвольнения.Исполнитель КАК Исполнитель
			|ПОМЕСТИТЬ ВТТекущиеМероприятия
			|ИЗ
			|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК ЗаданияАдаптацииУвольнения
			|ГДЕ
			|	ЗаданияАдаптацииУвольнения.ДокументОснование В
			|			(ВЫБРАТЬ
			|				ОснованияЗаданий.ДокументОснование
			|			ИЗ
			|				ВТОснованияЗаданий КАК ОснованияЗаданий)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АктуальныеМероприятия.Сотрудник КАК Сотрудник,
			|	АктуальныеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	АктуальныеМероприятия.ФизическоеЛицо.ФИО КАК ФИО,
			|	АктуальныеМероприятия.ФизическоеЛицо.Код КАК Код,
			|	АктуальныеМероприятия.Мероприятие КАК Мероприятие,
			|	АктуальныеМероприятия.ДатаНачала КАК ДатаНачала,
			|	АктуальныеМероприятия.ДатаОкончания КАК ДатаОкончания,
			|	АктуальныеМероприятия.Исполнитель КАК Исполнитель,
			|	МероприятияАдаптацииУвольнения.Наименование КАК Наименование,
			|	МероприятияАдаптацииУвольнения.Описание КАК Описание,
			|	ВЫБОР
			|		КОГДА АктуальныеМероприятия.Исполнитель = МероприятияАдаптацииУвольнения.Исполнитель
			|			ТОГДА МероприятияАдаптацииУвольнения.ОсновнойОбъектАдресации
			|		ИНАЧЕ Неопределено
			|	КОНЕЦ КАК ОсновнойОбъектАдресации,
			|	ВЫБОР
			|		КОГДА АктуальныеМероприятия.Исполнитель = МероприятияАдаптацииУвольнения.Исполнитель
			|			ТОГДА МероприятияАдаптацииУвольнения.ДополнительныйОбъектАдресации
			|		ИНАЧЕ Неопределено
			|	КОНЕЦ КАК ДополнительныйОбъектАдресации,
			|	ЕСТЬNULL(Сотрудники.Код, """") КАК ТабНомер
			|ИЗ
			|	ВТАктуальныеМероприятия КАК АктуальныеМероприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеМероприятия КАК ТекущиеМероприятия
			|		ПО АктуальныеМероприятия.ДокументОснование = ТекущиеМероприятия.ДокументОснование
			|			И АктуальныеМероприятия.Мероприятие = ТекущиеМероприятия.Мероприятие
			|			И АктуальныеМероприятия.ФизическоеЛицо = ТекущиеМероприятия.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения КАК МероприятияАдаптацииУвольнения
			|		ПО АктуальныеМероприятия.Мероприятие = МероприятияАдаптацииУвольнения.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО АктуальныеМероприятия.Сотрудник = Сотрудники.Ссылка
			|ГДЕ
			|	ТекущиеМероприятия.ФизическоеЛицо ЕСТЬ NULL
			|ИТОГИ
			|	МАКСИМУМ(ФИО),
			|	МАКСИМУМ(Код),
			|	МАКСИМУМ(ТабНомер)
			|ПО
			|	ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АктуальныеМероприятия.Сотрудник КАК Сотрудник,
			|	АктуальныеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	АктуальныеМероприятия.Мероприятие КАК Мероприятие,
			|	АктуальныеМероприятия.ДатаНачала КАК ДатаНачала,
			|	АктуальныеМероприятия.ДатаОкончания КАК ДатаОкончания,
			|	АктуальныеМероприятия.Исполнитель КАК Исполнитель,
			|	ТекущиеМероприятия.Исполнитель КАК ТекущийИсполнитель,
			|	ТекущиеМероприятия.Задание КАК Задание,
			|	ВЫБОР
			|		КОГДА АктуальныеМероприятия.ДатаОкончания <> ТекущиеМероприятия.ДатаОкончания
			|				ИЛИ АктуальныеМероприятия.Исполнитель <> ТекущиеМероприятия.Исполнитель
			|				ИЛИ Задания.ПометкаУдаления
			|				ИЛИ Задания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОбновитьБизнесПроцесс,
			|	Задания.Стартован КАК ПроцессСтартован,
			|	ВЫБОР
			|		КОГДА АктуальныеМероприятия.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
			|				И (АктуальныеМероприятия.ДатаНачала <> ТекущиеМероприятия.ДатаНачала
			|					ИЛИ ПроцессыДляЗапуска.БизнесПроцесс ЕСТЬ NULL)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НастроитьОтложенныйСтарт,
			|	ВЫБОР
			|		КОГДА АктуальныеМероприятия.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|				И НЕ ПроцессыДляЗапуска.БизнесПроцесс ЕСТЬ NULL
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОтключитьОтложенныйСтарт
			|ИЗ
			|	ВТАктуальныеМероприятия КАК АктуальныеМероприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеМероприятия КАК ТекущиеМероприятия
			|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Задание КАК Задания
			|			ПО ТекущиеМероприятия.Задание = Задания.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
			|			ПО ТекущиеМероприятия.Задание = ПроцессыДляЗапуска.БизнесПроцесс
			|		ПО АктуальныеМероприятия.ДокументОснование = ТекущиеМероприятия.ДокументОснование
			|			И АктуальныеМероприятия.ФизическоеЛицо = ТекущиеМероприятия.ФизическоеЛицо
			|			И АктуальныеМероприятия.Мероприятие = ТекущиеМероприятия.Мероприятие
			|ГДЕ
			|	НЕ ТекущиеМероприятия.Сотрудник ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущиеМероприятия.Задание КАК Задание,
			|	ТекущиеМероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущиеМероприятия.Мероприятие КАК Мероприятие
			|ИЗ
			|	ВТТекущиеМероприятия КАК ТекущиеМероприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеМероприятия КАК АктуальныеМероприятия
			|		ПО ТекущиеМероприятия.ДокументОснование = АктуальныеМероприятия.ДокументОснование
			|			И ТекущиеМероприятия.ФизическоеЛицо = АктуальныеМероприятия.ФизическоеЛицо
			|			И ТекущиеМероприятия.Мероприятие = АктуальныеМероприятия.Мероприятие
			|ГДЕ
			|	АктуальныеМероприятия.ФизическоеЛицо ЕСТЬ NULL";
			
			Результаты = Запрос.ВыполнитьПакет();
			МаксИндекс = Результаты.ВГраница();
			
			Если (Не Результаты[МаксИндекс - 2].Пустой() 
				Или Не Результаты[МаксИндекс - 1].Пустой() 
				Или Не Результаты[МаксИндекс].Пустой()) Тогда
				
				ВыборкаДобавляемых = Результаты[МаксИндекс - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ВыборкаИзменяемых = Результаты[МаксИндекс - 1].Выбрать();
				ВыборкаПомечаемых = Результаты[МаксИндекс].Выбрать();
				
				НаборЗаписей = РегистрыСведений.ЗаданияАдаптацииУвольнения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Прочитать();
				
				ЗаписиКУдалению = Новый Массив;
				СтруктураПоиска = Новый Структура("ФизическоеЛицо, Мероприятие");
				
				Для Каждого Запись Из НаборЗаписей Цикл
					
					ВыборкаПомечаемых.Сбросить();
					ВыборкаИзменяемых.Сбросить();
					
					СтруктураПоиска.Мероприятие = Запись.Мероприятие;
					СтруктураПоиска.ФизическоеЛицо = Запись.ФизическоеЛицо;
					
					Если ВыборкаПомечаемых.НайтиСледующий(СтруктураПоиска) Тогда
						
						ЗаписиКУдалению.Добавить(Запись);
						Если ЗначениеЗаполнено(ВыборкаПомечаемых.Задание) Тогда
							ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(ВыборкаПомечаемых.Задание);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВыборкаИзменяемых.НайтиСледующий(СтруктураПоиска) Тогда
						
						БизнесПроцесс = ВыборкаИзменяемых.Задание;
						
						Если ВыборкаИзменяемых.ОбновитьБизнесПроцесс Тогда
							
							ПараметрыОбновления = Новый Структура;
							ПараметрыОбновления.Вставить("СрокИсполнения", ВыборкаИзменяемых.ДатаОкончания);
							
							Если ВыборкаИзменяемых.Исполнитель <> ВыборкаИзменяемых.ТекущийИсполнитель Тогда
								ПараметрыОбновления.Вставить("Исполнитель", ВыборкаИзменяемых.Исполнитель);
							КонецЕсли;
							
							ОбновитьЗаданиеАдаптацииУвольнения(БизнесПроцесс, ПараметрыОбновления);
							
						КонецЕсли;
						
						Если Не ВыборкаИзменяемых.ПроцессСтартован Тогда
							
							// Если ранее старт бизнес-процесса был отложен, но сейчас он обязателен, то отключаем отложенность,
							// и стартуем процесс после обновления набора записей регистра ЗаданияАдаптацииУвольнения.
							Если ВыборкаИзменяемых.ОтключитьОтложенныйСтарт Тогда
								БизнесПроцессыИЗадачиСервер.ОтключитьОтложенныйСтартПроцесса(БизнесПроцесс);
								ПроцессыДляЗапуска.Добавить(БизнесПроцесс);
							ИначеЕсли ВыборкаИзменяемых.НастроитьОтложенныйСтарт Тогда
								БизнесПроцессыИЗадачиСервер.ДобавитьПроцессДляОтложенногоСтарта(БизнесПроцесс, ВыборкаИзменяемых.ДатаНачала);
							КонецЕсли;
							
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(Запись, ВыборкаИзменяемых, "ДатаНачала, ДатаОкончания, Исполнитель");
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого Запись Из ЗаписиКУдалению Цикл
					НаборЗаписей.Удалить(Запись);
				КонецЦикла;
				
				Пока ВыборкаДобавляемых.Следующий() Цикл
					
					СтрокаСотрудник = НСтр("ru = 'ФИО: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					СтрокаКод = НСтр("ru = 'Код: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					СтрокаТабНомер = НСтр("ru = 'Таб. номер: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					
					МассивСтрок = Новый Массив;
					МассивСтрок.Добавить(СтрШаблон(СтрокаСотрудник, ВыборкаДобавляемых.ФИО));
					МассивСтрок.Добавить(СтрШаблон(СтрокаКод, ВыборкаДобавляемых.Код));
					
					Если ЗначениеЗаполнено(ВыборкаДобавляемых.ТабНомер) Тогда
						МассивСтрок.Добавить(СтрШаблон(СтрокаТабНомер, ВыборкаДобавляемых.ТабНомер));
					КонецЕсли;
					
					ИнформацияПоСотруднику = СтрСоединить(МассивСтрок, Символы.ПС);
					
					ВыборкаЗаданий = ВыборкаДобавляемых.Выбрать();
					Пока ВыборкаЗаданий.Следующий() Цикл 
						
						МассивСтрок = Новый Массив;
						МассивСтрок.Добавить(ИнформацияПоСотруднику);
						
						Если ЗначениеЗаполнено(ВыборкаЗаданий.Описание) Тогда
							МассивСтрок.Добавить("");
							МассивСтрок.Добавить(ВыборкаЗаданий.Описание);
						КонецЕсли;
						
						ПараметрыСоздания = Новый Структура;
						ПараметрыСоздания.Вставить("Дата", Выборка.Дата);
						ПараметрыСоздания.Вставить("Предмет", Выборка.ДокументОснование);
						ПараметрыСоздания.Вставить("Наименование", ВыборкаЗаданий.Наименование);
						ПараметрыСоздания.Вставить("Содержание", СтрСоединить(МассивСтрок, Символы.ПС));
						ПараметрыСоздания.Вставить("Исполнитель", ВыборкаЗаданий.Исполнитель);
						ПараметрыСоздания.Вставить("СрокИсполнения", ВыборкаЗаданий.ДатаОкончания);
						ПараметрыСоздания.Вставить("ОсновнойОбъектАдресации", ВыборкаЗаданий.ОсновнойОбъектАдресации);
						ПараметрыСоздания.Вставить("ДополнительныйОбъектАдресации", ВыборкаЗаданий.ДополнительныйОбъектАдресации);
						
						БизнесПроцесс = СоздатьЗаданиеАдаптацииУвольнения(ПараметрыСоздания);
						
						Если Не ЗначениеЗаполнено(ВыборкаЗаданий.ДатаНачала) Тогда
							ПроцессыДляЗапуска.Добавить(БизнесПроцесс);
						Иначе
							БизнесПроцессыИЗадачиСервер.ДобавитьПроцессДляОтложенногоСтарта(БизнесПроцесс, ВыборкаЗаданий.ДатаНачала);
						КонецЕсли;
						
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаданий);
						ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, "Организация, ДокументОснование");
						НоваяЗапись.Задание = БизнесПроцесс;
						НоваяЗапись.ВидСобытия = ВидСобытия;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
				// Старт бизнес-процессов выполняется после обновления набора записей регистра ЗаданияАдаптацииУвольнения, 
				// чтобы при записи задач, их можно было дописать в уже существующие наборы.
				Для Каждого БизнесПроцесс Из ПроцессыДляЗапуска Цикл
					
					Если Не БизнесПроцесс.Стартован Тогда
						БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
						БизнесПроцессОбъект.Старт();
					КонецЕсли;
					
				КонецЦикла;
				
				НаборЗаписей = РегистрыСведений.ОбновлениеЗаданийАдаптацииУвольнения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Прочитать();
				
				НаборЗаписей[0].ЗаданияОбновлены = Истина;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обновление заданий адаптации и увольнения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияАдаптацииУвольнения

Функция СоздатьЗаданиеАдаптацииУвольнения(Параметры)
	
	БизнесПроцессОбъект = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	ЗаполнитьЗначенияСвойств(БизнесПроцессОбъект, Параметры);
	БизнесПроцессОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	БизнесПроцессОбъект.Записать();
	
	Возврат БизнесПроцессОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьЗаданиеАдаптацииУвольнения(БизнесПроцесс, Параметры)
	
	БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	
	ЗаполнитьЗначенияСвойств(БизнесПроцессОбъект, Параметры);
	БизнесПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	БизнесПроцессОбъект.ПометкаУдаления = Ложь;
	БизнесПроцессОбъект.Записать();
	
	ИзменитьРеквизитыНевыполненныхЗадач(БизнесПроцессОбъект.Ссылка, Параметры);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеЗаданиеАдаптацииУвольнения(Задание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцессОбъект = Задание.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ПометкаОснованияЗадачАдаптацииУвольнения", Истина);
	БизнесПроцессОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Функция ВыборкаЗаданийПоДокументу(ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданияАдаптацииУвольнения.Задание
	|ИЗ
	|	РегистрСведений.ЗаданияАдаптацииУвольнения КАК ЗаданияАдаптацииУвольнения
	|ГДЕ
	|	ЗаданияАдаптацииУвольнения.ДокументОснование = &ДокументОснование";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();
	
КонецФункции

Процедура ИзменитьРеквизитыНевыполненныхЗадач(БизнесПроцесс, Параметры)

	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", БизнесПроцесс);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И НЕ Задачи.ПометкаУдаления
		|	И НЕ Задачи.Выполнена");
		
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Задача = Выборка.Ссылка.ПолучитьОбъект();
			Задача.СрокИсполнения = Параметры.СрокИсполнения;
			
			Исполнитель = Неопределено;
			Если Параметры.Свойство("Исполнитель", Исполнитель) Тогда
				
				Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Задача.РольИсполнителя = Исполнитель;
					Задача.Исполнитель = Неопределено;
				Иначе
					Задача.Исполнитель = Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				КонецЕсли;
				
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			
			КонецЕсли;
			
			Задача.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ВидыСобытийАдаптацииУвольнения

Функция ВидСобытияАдаптацииУвольненияДокумента(ДокументСсылка)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
	Возврат Менеджер.ВидСобытияАдаптацииУвольнения();
	
КонецФункции

Функция СобытиеВозвратИзОтпускаПоУходуЗаРебенком() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ВозвратИзОтпускаПоУходуЗаРебенком;
	
КонецФункции

Функция СобытиеВосстановлениеВДолжности() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ВосстановлениеВДолжности;
	
КонецФункции

Функция СобытиеОтпускПоУходуЗаРебенком() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.ОтпускПоУходуЗаРебенком;
	
КонецФункции

Функция СобытиеПеремещение() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение;
	
КонецФункции

Функция СобытиеПрием() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Прием;
	
КонецФункции

Функция СобытиеУвольнение() Экспорт
	
	Возврат Перечисления.ВидыСобытийАдаптацииУвольнения.Увольнение;
	
КонецФункции

#КонецОбласти

Функция ИспользуетсяАдаптацияУвольнение() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдаптациюУвольнение");
	
КонецФункции

Функция ПараметрыЗаполненияМероприятий() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация");
	ПараметрыЗаполнения.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Позиция");
	ПараметрыЗаполнения.Вставить("Подразделение");
	ПараметрыЗаполнения.Вставить("Должность");
	ПараметрыЗаполнения.Вставить("ВидСобытия");
	ПараметрыЗаполнения.Вставить("ВидМероприятия");
	ПараметрыЗаполнения.Вставить("ДатаСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("ДатаОкончанияСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("ПредыдущаяОрганизация");
	ПараметрыЗаполнения.Вставить("ПредыдущаяПозиция");
	ПараметрыЗаполнения.Вставить("ПредыдущееПодразделение");
	ПараметрыЗаполнения.Вставить("ПредыдущаяДолжность");
	ПараметрыЗаполнения.Вставить("ПредыдущийВидКадровогоСобытия");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьКоллекциюНазначаемымиМероприятиями(ДанныеМероприятий, ПараметрыЗаполнения, ОчиститьПередЗаполнением = Ложь) Экспорт
	
	Если ОчиститьПередЗаполнением Тогда
		ДанныеМероприятий.Очистить();
	КонецЕсли;
	
	ВидыСобытийАдаптации = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияАдаптации();
	ВидыСобытийУвольнения = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияУвольнения();
	
	ОписаниеПрошлыхМероприятийАдаптации = НоваяТаблицаОписанияМероприятий();
	ОписаниеТекущихМероприятийУвольнения = НоваяТаблицаОписанияМероприятий();
	ОписаниеБудущихМероприятийУвольнения = НоваяТаблицаОписанияМероприятий();
	
	ТекущийВидСобытия = ПараметрыЗаполнения.ВидСобытия;
	ПредыдущийВидСобытия = ВидСобытияАдаптацииУвольнения(ПараметрыЗаполнения.ПредыдущийВидКадровогоСобытия);
	
	Если ПараметрыЗаполнения.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция 
		И ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийВидСобытия) Тогда
		
		// Получаем мероприятия адаптации для предыдущего кадрового события, чтобы исключить их из текущего состава
		// мероприятий. Мероприятия событий не связанных со сменой позиции учитываем полностью, поэтому для них это не актуально.
		Если ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение Тогда
			
			ПараметрыПрошлогоСобытияАдаптации = ПараметрыЗаполненияМероприятий();
			ЗаполнитьЗначенияСвойств(ПараметрыПрошлогоСобытияАдаптации, ПараметрыЗаполнения, "ФизическоеЛицо, ДатаСобытия");
			ПараметрыПрошлогоСобытияАдаптации.Организация = ПараметрыЗаполнения.ПредыдущаяОрганизация;
			ПараметрыПрошлогоСобытияАдаптации.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция;
			ПараметрыПрошлогоСобытияАдаптации.Подразделение = ПараметрыЗаполнения.ПредыдущееПодразделение;
			ПараметрыПрошлогоСобытияАдаптации.Должность = ПараметрыЗаполнения.ПредыдущаяДолжность;
			ПараметрыПрошлогоСобытияАдаптации.ВидСобытия = ПредыдущийВидСобытия;
			ПараметрыПрошлогоСобытияАдаптации.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Адаптация;
			
			ОписаниеПрошлыхМероприятийАдаптации = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыПрошлогоСобытияАдаптации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВидСобытия) Тогда 
		
		// Текущий список мероприятий дополняем мероприятиями вызванными освобождением позиции текущим событием.
		Если ВидыСобытийУвольнения.Найти(ТекущийВидСобытия) <> НеОпределено Тогда
			
			ПараметрыТекущегоСобытияУвольнения = ПараметрыЗаполненияМероприятий();
			ЗаполнитьЗначенияСвойств(ПараметрыТекущегоСобытияУвольнения, ПараметрыЗаполнения, "ФизическоеЛицо, ДатаСобытия");
			ПараметрыТекущегоСобытияУвольнения.Организация = ПараметрыЗаполнения.ПредыдущаяОрганизация;
			ПараметрыТекущегоСобытияУвольнения.Позиция = ПараметрыЗаполнения.ПредыдущаяПозиция;
			ПараметрыТекущегоСобытияУвольнения.Подразделение = ПараметрыЗаполнения.ПредыдущееПодразделение;
			ПараметрыТекущегоСобытияУвольнения.Должность = ПараметрыЗаполнения.ПредыдущаяДолжность;
			ПараметрыТекущегоСобытияУвольнения.ВидСобытия = ТекущийВидСобытия;
			ПараметрыТекущегоСобытияУвольнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Увольнение;
			
			ОписаниеТекущихМероприятийУвольнения = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыТекущегоСобытияУвольнения);
			
		КонецЕсли;
		
		Если ВидыСобытийАдаптации.Найти(ТекущийВидСобытия) <> НеОпределено Тогда
			
			ПараметрыЗаполнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Адаптация;
			ОписаниеТекущихМероприятийАдаптации = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыЗаполнения);
			
			Для Каждого ОписаниеМероприятия Из ОписаниеТекущихМероприятийАдаптации Цикл
				
				Если Не ЗначениеЗаполнено(ОписаниеПрошлыхМероприятийАдаптации.Найти(ОписаниеМероприятия.Мероприятие, "Мероприятие")) Тогда
					ЗаполнитьЗначенияСвойств(ДанныеМероприятий.Добавить(), ОписаниеМероприятия, "Мероприятие, Исполнитель, ДатаНачала, ДатаОкончания");
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЗаполнения.ВидМероприятия = Перечисления.ВидыМероприятийАдаптацииУвольнения.Увольнение;
			ПараметрыЗаполнения.ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.СобытияУвольнения();
			ОписаниеБудущихМероприятийУвольнения = ПолучитьОписаниеМероприятийПоСобытию(ПараметрыЗаполнения);
			
		КонецЕсли;
		
		Для Каждого ОписаниеМероприятия Из ОписаниеТекущихМероприятийУвольнения Цикл
			
			// Исключаем выполнение мероприятий связанных с освобождением должности, если они будут выполнены позже.
			Если Не ЗначениеЗаполнено(ОписаниеБудущихМероприятийУвольнения.Найти(ОписаниеМероприятия.Мероприятие, "Мероприятие")) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеМероприятий.Добавить(), ОписаниеМероприятия, "Мероприятие, Исполнитель, ДатаНачала, ДатаОкончания");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеМероприятий.Сортировать("ДатаОкончания, Мероприятие");
	
КонецПроцедуры

Процедура ЗаполнитьПоСотруднику(ДокументОбъект, ДанныеЗаполнения, ЗаполнятьСотрудника = Истина, ЗаполнятьПозицию = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДанныеЗаполнения, "Организация,ФизическоеЛицо,ДолжностьПоШтатномуРасписанию");
		
		Если КадровыеДанные.Количество() > 0 Тогда
			
			ТекущиеКадровыеДанныеСотрудника = КадровыеДанные[0];
			
			ДокументОбъект.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудника.ФизическоеЛицо;
			ДокументОбъект.Организация = ТекущиеКадровыеДанныеСотрудника.Организация;
			
			Если ЗаполнятьСотрудника Тогда
				ДокументОбъект.Сотрудник = ДанныеЗаполнения;
			КонецЕсли;
			
			Если ЗаполнятьПозицию Тогда
				ДокументОбъект.ДолжностьПоШтатномуРасписанию = ТекущиеКадровыеДанныеСотрудника.ДолжностьПоШтатномуРасписанию;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаОписанияМероприятий()
	
	ТаблицаМероприятий = Новый ТаблицаЗначений;
	
	ОписанияТиповИсполнителя = Новый Массив;
	ОписанияТиповИсполнителя.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ОписанияТиповИсполнителя.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	ТаблицаМероприятий.Колонки.Добавить("Мероприятие",	Новый ОписаниеТипов("СправочникСсылка.МероприятияАдаптацииУвольнения"));
	ТаблицаМероприятий.Колонки.Добавить("Исполнитель",	Новый ОписаниеТипов(ОписанияТиповИсполнителя));
	ТаблицаМероприятий.Колонки.Добавить("ДатаНачала",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаМероприятий.Колонки.Добавить("ДатаОкончания",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаМероприятий;
	
КонецФункции

Функция ПолучитьОписаниеМероприятийПоСобытию(ПараметрыСобытия)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТМероприятияКадровогоСобытия(Запрос.МенеджерВременныхТаблиц, ПараметрыСобытия);
	СоздатьВТСвойстваНазначаемыхМероприятий(Запрос.МенеджерВременныхТаблиц, ПараметрыСобытия, "ВТМероприятияКадровогоСобытия");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СвойстваМероприятий.Ссылка КАК Мероприятие,
	|	СвойстваМероприятий.Исполнитель,
	|	СвойстваМероприятий.ДатаНачала,
	|	СвойстваМероприятий.ДатаОкончания
	|ИЗ
	|	ВТСвойстваНазначаемыхМероприятий КАК СвойстваМероприятий
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваМероприятий.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТМероприятияКадровогоСобытия(МенеджерВременныхТаблиц, ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Организация = ПараметрыОтбора.Организация;
	Подразделение = ПараметрыОтбора.Подразделение;
	Должность = ПараметрыОтбора.Должность;
	
	Если (Не ЗначениеЗаполнено(Должность) 
		Или Не ЗначениеЗаполнено(Подразделение)
		Или Не ЗначениеЗаполнено(Организация)) 
		И ЗначениеЗаполнено(ПараметрыОтбора.Позиция) Тогда
		
		РеквизитыПозицииШР = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтбора.Позиция, "Владелец,Подразделение,Должность");
		
		Организация = ?(ЗначениеЗаполнено(Организация), Организация, РеквизитыПозицииШР.Владелец);
		Подразделение = ?(ЗначениеЗаполнено(Подразделение), Подразделение, РеквизитыПозицииШР.Подразделение);
		Должность =  ?(ЗначениеЗаполнено(Должность), Должность, РеквизитыПозицииШР.Должность);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Подразделение",	Подразделение);
	Запрос.УстановитьПараметр("Должность",		Должность);
	Запрос.УстановитьПараметр("Позиция",		ПараметрыОтбора.Позиция);
	Запрос.УстановитьПараметр("ВидСобытия",		ПараметрыОтбора.ВидСобытия);
	Запрос.УстановитьПараметр("ВидМероприятия",	ПараметрыОтбора.ВидМероприятия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Мероприятия.Ссылка КАК Ссылка,
	|	Мероприятия.Исполнитель КАК Исполнитель,
	|	Мероприятия.СдвигСрокаНачалаИсполнения КАК СдвигСрокаНачалаИсполнения,
	|	Мероприятия.СдвигСрокаОкончанияИсполнения КАК СдвигСрокаОкончанияИсполнения,
	|	Мероприятия.Наименование
	|ПОМЕСТИТЬ ВТМероприятияПоВидуСобытияПредварительная
	|ИЗ
	|	Справочник.МероприятияАдаптацииУвольнения КАК Мероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения.События КАК СобытияМероприятий
	|		ПО Мероприятия.Ссылка = СобытияМероприятий.Ссылка
	|ГДЕ
	|	НЕ Мероприятия.ВАрхиве
	|	И (Мероприятия.ВидМероприятия В (&ВидМероприятия)
	|			ИЛИ Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийАдаптацииУвольнения.ПустаяСсылка))
	|	И (СобытияМероприятий.ВидСобытия В (&ВидСобытия)
	|			ИЛИ СобытияМероприятий.ВидСобытия ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения,
	|	МероприятияПоВидуСобытия.Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоОрганизации.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоОрганизации.ОбъектНазначения = &Организация
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейОрганизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоПозиции.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоПозиции.ОбъектНазначения = &Позиция
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейПозиции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоПодразделению.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоПодразделению.ОбъектНазначения = &Подразделение
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущегоПодразделения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОтборПоДолжности.Мероприятие ЕСТЬ NULL
	|					ИЛИ ОтборПоДолжности.ОбъектНазначения = &Должность
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДляТекущейДолжности
	|ПОМЕСТИТЬ ВТМероприятияПоВидуСобытия
	|ИЗ
	|	ВТМероприятияПоВидуСобытияПредварительная КАК МероприятияПоВидуСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоОрганизации
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоОрганизации.Мероприятие
	|			И (ОтборПоОрганизации.ОбъектНазначения ССЫЛКА Справочник.Организации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоПозиции
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоПозиции.Мероприятие
	|			И (ОтборПоПозиции.ОбъектНазначения ССЫЛКА Справочник.ШтатноеРасписание)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоПодразделению
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоПодразделению.Мероприятие
	|			И (ОтборПоПодразделению.ОбъектНазначения ССЫЛКА Справочник.ПодразделенияОрганизаций)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтборыНазначенияМероприятийАдаптацииУвольнения КАК ОтборПоДолжности
	|		ПО МероприятияПоВидуСобытия.Ссылка = ОтборПоДолжности.Мероприятие
	|			И (ОтборПоДолжности.ОбъектНазначения ССЫЛКА Справочник.Должности)
	|
	|СГРУППИРОВАТЬ ПО
	|	МероприятияПоВидуСобытия.Наименование,
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияПоВидуСобытия.Ссылка,
	|	МероприятияПоВидуСобытия.Исполнитель,
	|	МероприятияПоВидуСобытия.СдвигСрокаНачалаИсполнения,
	|	МероприятияПоВидуСобытия.СдвигСрокаОкончанияИсполнения,
	|	МероприятияПоВидуСобытия.Наименование
	|ПОМЕСТИТЬ ВТМероприятияКадровогоСобытия
	|ИЗ
	|	ВТМероприятияПоВидуСобытия КАК МероприятияПоВидуСобытия
	|ГДЕ
	|	МероприятияПоВидуСобытия.ДляТекущейОрганизации
	|	И МероприятияПоВидуСобытия.ДляТекущейПозиции
	|	И МероприятияПоВидуСобытия.ДляТекущегоПодразделения
	|	И МероприятияПоВидуСобытия.ДляТекущейДолжности";
	
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТМероприятияПоВидуСобытияПредварительная");
	УдалитьВТ.Добавить("ВТМероприятияПоВидуСобытия");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура СоздатьВТСвойстваНазначаемыхМероприятий(МенеджерВременныхТаблиц, ПараметрыЗапроса, ИмяВТМероприятия = "ВТНазначаемыеМероприятия")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо",	ПараметрыЗапроса.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаСобытия", 	ПараметрыЗапроса.ДатаСобытия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НазначаемыеМероприятия.Ссылка,
	|	&ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТМероприятияИсполняемыеСотрудниками
	|ИЗ
	|	ВТНазначаемыеМероприятия КАК НазначаемыеМероприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МероприятияАдаптацииУвольнения КАК МероприятияАдаптацииУвольнения
	|		ПО НазначаемыеМероприятия.Ссылка = МероприятияАдаптацииУвольнения.Ссылка
	|			И (НазначаемыеМероприятия.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Мероприятия.Ссылка КАК Мероприятие,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Пользователи.Ссылка ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИНАЧЕ Пользователи.Ссылка
	|		КОНЕЦ) КАК Исполнитель
	|ПОМЕСТИТЬ ВТИсполнителиМероприятий
	|ИЗ
	|	ВТМероприятияИсполняемыеСотрудниками КАК Мероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Мероприятия.ФизическоеЛицо = Пользователи.ФизическоеЛицо
	|			И (НЕ Пользователи.Недействителен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Мероприятия.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НазначаемыеМероприятия.Ссылка,
	|	ВЫБОР
	|		КОГДА НазначаемыеМероприятия.СдвигСрокаНачалаИсполнения = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, НазначаемыеМероприятия.СдвигСрокаНачалаИсполнения)
	|	КОНЕЦ КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, НазначаемыеМероприятия.СдвигСрокаОкончанияИсполнения) КАК ДатаОкончания,
	|	НазначаемыеМероприятия.Наименование,
	|	ВЫБОР
	|		КОГДА НЕ ИсполнителиМероприятий.Мероприятие ЕСТЬ NULL
	|				И ИсполнителиМероприятий.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ИсполнителиМероприятий.Исполнитель
	|		ИНАЧЕ НазначаемыеМероприятия.Исполнитель
	|	КОНЕЦ КАК Исполнитель
	|ПОМЕСТИТЬ ВТСвойстваНазначаемыхМероприятий
	|ИЗ
	|	ВТНазначаемыеМероприятия КАК НазначаемыеМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсполнителиМероприятий КАК ИсполнителиМероприятий
	|		ПО НазначаемыеМероприятия.Ссылка = ИсполнителиМероприятий.Мероприятие";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНазначаемыеМероприятия", ИмяВТМероприятия);
	Запрос.Выполнить();
	
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТМероприятияИсполняемыеСотрудниками");
	УдалитьВТ.Добавить("ВТИсполнителиМероприятий");
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Функция СвойстваНазначаемогоМероприятия(Мероприятие, ПараметрыЗапроса) Экспорт
	
	СвойстваМероприятия = Новый Структура("Исполнитель, ДатаНачала, ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МероприятияАдаптацииУвольнения.Ссылка,
	|	МероприятияАдаптацииУвольнения.Исполнитель,
	|	МероприятияАдаптацииУвольнения.СдвигСрокаНачалаИсполнения,
	|	МероприятияАдаптацииУвольнения.СдвигСрокаОкончанияИсполнения,
	|	МероприятияАдаптацииУвольнения.Наименование
	|ПОМЕСТИТЬ ВТМероприятияАдаптацииУвольнения
	|ИЗ
	|	Справочник.МероприятияАдаптацииУвольнения КАК МероприятияАдаптацииУвольнения
	|ГДЕ
	|	МероприятияАдаптацииУвольнения.Ссылка = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	Запрос.Выполнить();
	
	СоздатьВТСвойстваНазначаемыхМероприятий(Запрос.МенеджерВременныхТаблиц, ПараметрыЗапроса, "ВТМероприятияАдаптацииУвольнения");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СвойстваМероприятий.Исполнитель КАК Исполнитель,
	|	СвойстваМероприятий.ДатаНачала КАК ДатаНачала,
	|	СвойстваМероприятий.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТСвойстваНазначаемыхМероприятий КАК СвойстваМероприятий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СвойстваМероприятия, Выборка);
	КонецЦикла;
	
	Возврат СвойстваМероприятия;
	
КонецФункции

Функция ВидСобытияАдаптацииУвольнения(ВидКадровогоСобытия)
	
	Если Не ЗначениеЗаполнено(ВидКадровогоСобытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.ПустаяСсылка();
	
	Если ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.ВосстановлениеВДолжности;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Прием;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Перемещение;
	ИначеЕсли ВидКадровогоСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		ВидСобытия = Перечисления.ВидыСобытийАдаптацииУвольнения.Увольнение;
	КонецЕсли;
	
	Возврат ВидСобытия;
	
КонецФункции

Процедура СообщитьОбОшибкеИсполнителяВСтроке(ДокументОбъект, СтрокаДанных, ИндексСтроки, ЛичныеМероприятия)
	
	СтрокиСообщения = Новый Массив();
	СтрокиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Не подобран исполнитель мероприятия ""%1"".'"), СтрокаДанных.Мероприятие));
	
	Если ЛичныеМероприятия.Получить(СтрокаДанных.Мероприятие) <> Неопределено Тогда
		СтрокиСообщения.Добавить(СтрШаблон(НСтр("ru = 'Убедитесь, что есть пользователь, связанный с сотрудником %1, и перезаполните табличную часть.'"), ДокументОбъект.ФизическоеЛицо));
	Иначе
		СтрокиСообщения.Добавить(НСтр("ru = 'Уточните настройки мероприятия и перезаполните табличную часть.'"));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СтрокиСообщения, Символы.ПС);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, 
		СтрШаблон("МероприятияАдаптацииУвольнения[%1].Исполнитель", Формат(ИндексСтроки, "ЧН=0; ЧГ=0")));
	
КонецПроцедуры

Процедура ПроверитьНаличиеДубляДокумента(ДокументОбъект, Отказ) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	МодульМенеджера = Документы[МетаданныеДокумента.Имя];
	
	Запрос = Новый Запрос;
	
	Разделитель = "";
	ТекстУсловийПроверки = "";
	ШаблонУсловия = "%1Решение.%2 = &%2";
	
	Для Каждого Поле Из МодульМенеджера.ПоляПроверкиУникальности() Цикл
		
		Если ЗначениеЗаполнено(ТекстУсловийПроверки)
			И Не ЗначениеЗаполнено(Разделитель) Тогда
			Разделитель = "
			|	И ";
		КонецЕсли;
		
		ТекстУсловийПроверки = ТекстУсловийПроверки + СтрШаблон(ШаблонУсловия, Разделитель, Поле);
		Запрос.УстановитьПараметр(Поле, ДокументОбъект[Поле]);
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Решение.Ссылка
	|ИЗ
	|	&ПолноеИмяДокумента КАК Решение
	|ГДЕ
	|	НЕ Решение.ПометкаУдаления
	|	И Решение.Ссылка <> &Ссылка
	|	И &УсловияПроверки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяДокумента", ПолноеИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияПроверки", ТекстУсловийПроверки);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ с такими характеристиками уже есть: %1.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстОшибки, Выборка.Ссылка), Выборка.Ссылка, , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
