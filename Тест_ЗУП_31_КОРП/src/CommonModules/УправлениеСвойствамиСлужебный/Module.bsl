#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список всех свойств для объекта метаданных.
//
// Параметры:
//  ВидОбъектов - Строка - полное имя объекта метаданных;
//  ВидСвойств  - Строка - "ДополнительныеРеквизиты" или "ДополнительныеСведения".
//
// ВозвращаемоеЗначение:
//  ТаблицаЗначений - Свойство, Наименование, ТипЗначения.
//  Неопределено    - для указанного вида объекта нет набора свойств.
//
Функция СписокСвойствДляВидаОбъектов(ВидОбъектов, Знач ВидСвойств) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Ссылка КАК Ссылка,
	|	НаборыСвойств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыСвойств
	|ГДЕ
	|	НаборыСвойств.Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмяПредопределенныхДанных = СтрЗаменить(ВидОбъектов, ".", "_");
	НаборСсылка = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяПредопределенныхДанных = ИмяПредопределенныхДанных Тогда
			НаборСсылка = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСвойств.Свойство КАК Свойство,
	|	ТаблицаСвойств.Свойство.Наименование КАК Наименование,
	|	ТаблицаСвойств.Свойство.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	&ТаблицаСвойств КАК ТаблицаСвойств
	|ГДЕ
	|	ТаблицаСвойств.Ссылка В ИЕРАРХИИ(&Ссылка)";
	
	ПолноеИмяТаблицы = "Справочник.НаборыДополнительныхРеквизитовИСведений." + ВидСвойств;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаСвойств", ПолноеИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", НаборСсылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Свернуть("Свойство,Наименование,ТипЗначения");
	Результат.Сортировать("Наименование Возр");
	
	Возврат Результат;
	
КонецФункции

//  Дополняет список колонки для загрузки данных колонками дополнительных реквизитов и свойств.
//
// Параметры:
//  МетаданныеСправочника	 - ОбъектМетаданных - Метаданные справочника.
//  ИнформацияПоКолонкам	 - ТаблицаЗначение - колонки макета.
//
Процедура КолонкиДляЗагрузкиДанных(МетаданныеСправочника, ИнформацияПоКолонкам) Экспорт
	
	Если МетаданныеСправочника.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
		
		Позиция = ИнформацияПоКолонкам.Количество() + 1;
		Свойства = УправлениеСвойствами.СвойстваОбъекта(Справочники[МетаданныеСправочника.Имя].ПустаяСсылка());
		
		ДополнительныеСведения = Новый Массив;
		Для каждого Свойство Из Свойства Цикл
			Если НЕ Свойство.ЭтоДополнительноеСведение Тогда
				СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
				ИмяКолонки = СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Свойство.Наименование);
				СтрокаИнфоПроКолонки.ИмяКолонки = "ДополнительныйРеквизит_" + ИмяКолонки;
				СтрокаИнфоПроКолонки.ПредставлениеКолонки = Свойство.Наименование;
				СтрокаИнфоПроКолонки.ТипКолонки = Свойство.ТипЗначения;
				СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Свойство.ЗаполнятьОбязательно;
				СтрокаИнфоПроКолонки.Позиция = Позиция;
				СтрокаИнфоПроКолонки.Группа = НСтр("ru = 'Доп. реквизиты'");
				СтрокаИнфоПроКолонки.Видимость = Истина;
				СтрокаИнфоПроКолонки.Примечание = Свойство.Наименование;
				СтрокаИнфоПроКолонки.Ширина = 30;
				Позиция = Позиция + 1;
				
				Значения = ДополнительныеЗначенияСвойства(Свойство);
				Если Значения.Количество() > 0 Тогда
					СтрокаИнфоПроКолонки.Примечание = СтрокаИнфоПроКолонки.Примечание  + Символы.ПС + НСтр("ru = 'Варианты значений:'") + Символы.ПС;
					Для каждого Значение Из Значения Цикл
						Код = ?(ЗначениеЗаполнено(Значение.Код), " (" + Значение.Код + ")", "");
						СтрокаИнфоПроКолонки.Примечание = СтрокаИнфоПроКолонки.Примечание + Значение.Наименование + Код +Символы.ПС;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ДополнительныеСведения.Добавить(Свойство);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Свойство Из ДополнительныеСведения Цикл
			СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
			ИмяКолонки =  СтандартныеПодсистемыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Свойство.Наименование);
			СтрокаИнфоПроКолонки.ИмяКолонки = "Свойство_" + ИмяКолонки;
			СтрокаИнфоПроКолонки.ПредставлениеКолонки = Свойство.Наименование;
			СтрокаИнфоПроКолонки.ТипКолонки = Свойство.ТипЗначения;
			СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения = Свойство.ЗаполнятьОбязательно;
			СтрокаИнфоПроКолонки.Позиция = Позиция;
			СтрокаИнфоПроКолонки.Группа = НСтр("ru = 'Доп. свойства'");
			СтрокаИнфоПроКолонки.Видимость = Истина;
			СтрокаИнфоПроКолонки.Примечание = Свойство.Наименование;
			СтрокаИнфоПроКолонки.Ширина = 30;
			Позиция = Позиция + 1;
			
			Значения = ДополнительныеЗначенияСвойства(Свойство);
			Если Значения.Количество() > 0 Тогда
				СтрокаИнфоПроКолонки.Примечание = СтрокаИнфоПроКолонки.Примечание  + Символы.ПС + НСтр("ru = 'Варианты значений:'") + Символы.ПС;
				Для каждого Значение Из Значения Цикл
					Код = ?(ЗначениеЗаполнено(Значение.Код), " (" + Значение.Код + ")", "");
					СтрокаИнфоПроКолонки.Примечание = СтрокаИнфоПроКолонки.Примечание + Значение.Наименование + Код +Символы.ПС;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.ЗаполнитьОбработчикиРазделенныхДанных";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьНаименованияНаборовИСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.7";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.ОбновитьСписокДополнительныхСвойств_1_0_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Версия = "2.1.5.3";
	Обработчик.Приоритет = 1;
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.ЗаполнитьНовыеДанные_2_1_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.18";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b3885620-c224-49f1-bda0-4510c7c18584");
	Обработчик.Комментарий = НСтр("ru = 'Реструктуризация дополнительных реквизитов и сведений.
		|Возможна некорректная работа отборов по дополнительным реквизитам и сведениям в списках.'");
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.ОбновитьСоставСвойствВсехГруппНаборов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.14";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.ЗаполнитьНовыеСвойстваДополнительныхРеквизитовИСведений";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.21";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя(), "");
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗначенияСвойствОбъектов.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЗначенияСвойствОбъектовИерархия.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ВерсионированиеОбъектовПереопределяемый.ПриПодготовкеДанныхОбъекта.
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(Объект.Ссылка) Тогда
		Для Каждого ЗначениеСвойства Из УправлениеСвойствами.ЗначенияСвойств(Объект.Ссылка) Цикл
			Реквизит = ДополнительныеРеквизиты.Добавить();
			Реквизит.Наименование = ЗначениеСвойства.Свойство;
			Реквизит.Значение = ЗначениеСвойства.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает значения реквизитов объекта, хранящихся отдельно от объекта.
Процедура ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты) Экспорт
	
	Для Каждого Реквизит Из ДополнительныеРеквизиты Цикл
		Если ТипЗнч(Реквизит.Наименование) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			ЭтоДополнительноеСведение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизит.Наименование, "ЭтоДополнительноеСведение");
			Если ЭтоДополнительноеСведение Тогда
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
				НаборЗаписей.Отбор.Свойство.Установить(Реквизит.Наименование);
				
				Запись = НаборЗаписей.Добавить();
				Запись.Свойство = Реквизит.Наименование;
				Запись.Значение = Реквизит.Значение;
				Запись.Объект = Объект.Ссылка;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	Массив.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "ДополнительныеСведения";
	ВидДоступа.Представление = НСтр("ru = 'Дополнительные сведения'");
	ВидДоступа.ТипЗначений   = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ВидДоступа, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидДоступа = "ДополнительныеСведения" Тогда
		Использование = Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить();
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	
	Если МодульУправлениеДоступомСлужебный.ВидДоступаСуществует("ДополнительныеСведения") Тогда
		
		Описание = Описание + "
		|
		|Справочник.ЗначенияСвойствОбъектов.Чтение.ДополнительныеСведения
		|Справочник.ЗначенияСвойствОбъектовИерархия.Чтение.ДополнительныеСведения
		|ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Чтение.ДополнительныеСведения
		|РегистрСведений.ДополнительныеСведения.Чтение.ДополнительныеСведения
		|РегистрСведений.ДополнительныеСведения.Изменение.ДополнительныеСведения
		|";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект.
Процедура ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект = Неопределено, ПередЗаписью = Ложь) Экспорт
	
	Приемник = Новый Структура;
	Приемник.Вставить("ПараметрыСвойств", Неопределено);
	ЗаполнитьЗначенияСвойств(Приемник, Форма);
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты
		ИЛИ (ТипЗнч(Приемник.ПараметрыСвойств) = Тип("Структура")
			И Приемник.ПараметрыСвойств.Свойство("ВыполненаОтложеннаяИнициализация")
			И Не Приемник.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	СтарыеЗначения = ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить();
	ОписаниеОбъекта.ДополнительныеРеквизиты.Очистить();
	
	Для каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		Значение = Форма[Строка.ИмяРеквизитаЗначение];
		
		Если Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипЗначения.Типы().Количество() = 1
		   И (НЕ ЗначениеЗаполнено(Значение) Или Значение = Ложь) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Строка.Удалено Тогда
			Если ЗначениеЗаполнено(Значение) И Не (ПередЗаписью И Форма.Свойства_СкрытьУдаленные) Тогда
				НайденнаяСтрока = СтарыеЗначения.Найти(Строка.Свойство, "Свойство");
				Если НайденнаяСтрока <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить(), НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Поддержка строк гиперссылок.
		ИспользоватьСтрокуВВидеСсылки = ИспользоватьСтрокуВВидеСсылки(
			Строка.ТипЗначения, Строка.ВыводитьВВидеГиперссылки, Строка.МногострочноеПолеВвода);
		
		НоваяСтрока = ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = Строка.Свойство;
		Если ИспользоватьСтрокуВВидеСсылки Тогда
			АдресИПредставление = АдресИПредставление(Значение);
			НоваяСтрока.Значение = АдресИПредставление.Представление;
		Иначе
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
		
		// Поддержка строк неограниченной длины.
		ИспользоватьНеограниченнуюСтроку = ИспользоватьНеограниченнуюСтроку(
			Строка.ТипЗначения, Строка.МногострочноеПолеВвода);
		
		Если ИспользоватьНеограниченнуюСтроку Или ИспользоватьСтрокуВВидеСсылки Тогда
			НоваяСтрока.ТекстоваяСтрока = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПередЗаписью Тогда
		Форма.Свойства_СкрытьУдаленные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу наборов доступных свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка на владельца свойств.
//                    Объект владельца свойств.
//                    ДанныеФормыСтруктура (по типу объекта владельца свойств).
//
Функция ПолучитьНаборыСвойствОбъекта(Знач ВладелецСвойств, КлючНазначения = Неопределено) Экспорт
	
	Если ТипЗнч(ВладелецСвойств) = Тип("ДанныеФормыСтруктура") Тогда
		ТипСсылки = ТипЗнч(ВладелецСвойств.Ссылка)
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ВладелецСвойств)) Тогда
		ТипСсылки = ТипЗнч(ВладелецСвойств);
	Иначе
		ТипСсылки = ТипЗнч(ВладелецСвойств.Ссылка)
	КонецЕсли;
	
	ПолучатьОсновнойНабор = Истина;
	
	НаборыСвойств = Новый ТаблицаЗначений;
	НаборыСвойств.Колонки.Добавить("Набор");
	НаборыСвойств.Колонки.Добавить("Высота");
	НаборыСвойств.Колонки.Добавить("Заголовок");
	НаборыСвойств.Колонки.Добавить("Подсказка");
	НаборыСвойств.Колонки.Добавить("РастягиватьПоВертикали");
	НаборыСвойств.Колонки.Добавить("РастягиватьПоГоризонтали");
	НаборыСвойств.Колонки.Добавить("ТолькоПросмотр");
	НаборыСвойств.Колонки.Добавить("ЦветТекстаЗаголовка");
	НаборыСвойств.Колонки.Добавить("Ширина");
	НаборыСвойств.Колонки.Добавить("ШрифтЗаголовка");
	НаборыСвойств.Колонки.Добавить("Группировка");
	НаборыСвойств.Колонки.Добавить("Отображение");
	НаборыСвойств.Колонки.Добавить("Картинка");
	НаборыСвойств.Колонки.Добавить("ОтображатьЗаголовок");
	НаборыСвойств.Колонки.Добавить("ОбщийНабор", Новый ОписаниеТипов("Булево"));
	// Устарело:
	НаборыСвойств.Колонки.Добавить("ШиринаПодчиненныхЭлементов");
	
	УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта(
		ВладелецСвойств, ТипСсылки, НаборыСвойств, ПолучатьОсновнойНабор, КлючНазначения);
	
	Если НаборыСвойств.Количество() = 0
	   И ПолучатьОсновнойНабор = Истина Тогда
		
		ОсновнойНабор = ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств);
		
		Если ЗначениеЗаполнено(ОсновнойНабор) Тогда
			НаборыСвойств.Добавить().Набор = ОсновнойНабор;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаборыСвойств;
	
КонецФункции

// Возвращает заполненную таблицу значений свойств объекта.
Функция ЗначенияСвойств(ДополнительныеСвойстваОбъекта, Наборы, ЭтоДополнительноеСведение) Экспорт
	
	Если ДополнительныеСвойстваОбъекта.Количество() = 0 Тогда
		// Предварительная быстрая проверка использования дополнительных свойств.
		СвойстваНеНайдены = ДополнительныеРеквизитыИСведенияНеНайдены(Наборы, ЭтоДополнительноеСведение);
		
		Если СвойстваНеНайдены Тогда
			ОписаниеСвойств = Новый ТаблицаЗначений;
			ОписаниеСвойств.Колонки.Добавить("Набор");
			ОписаниеСвойств.Колонки.Добавить("Свойство");
			ОписаниеСвойств.Колонки.Добавить("ВладелецДополнительныхЗначений");
			ОписаниеСвойств.Колонки.Добавить("ЗаполнятьОбязательно");
			ОписаниеСвойств.Колонки.Добавить("Наименование");
			ОписаниеСвойств.Колонки.Добавить("ТипЗначения");
			ОписаниеСвойств.Колонки.Добавить("ФорматСвойства");
			ОписаниеСвойств.Колонки.Добавить("МногострочноеПолеВвода");
			ОписаниеСвойств.Колонки.Добавить("Удалено");
			ОписаниеСвойств.Колонки.Добавить("Значение");
			Возврат ОписаниеСвойств;
		КонецЕсли;
	КонецЕсли;
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	НаборыСвойств = Новый ТаблицаЗначений;
	
	НаборыСвойств.Колонки.Добавить(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	НаборыСвойств.Колонки.Добавить(
		"ПорядокНабора", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлементСписка Из Наборы Цикл
		НоваяСтрока = НаборыСвойств.Добавить();
		НоваяСтрока.Набор         = ЭлементСписка.Значение;
		НоваяСтрока.ПорядокНабора = Наборы.Индекс(ЭлементСписка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойства",      Свойства);
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	&НаборыСвойств КАК НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	СвойстваНаборов.НомерСтроки КАК ПорядокСвойства
	|ПОМЕСТИТЬ СвойстваНаборов
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ПО (СвойстваНаборов.Ссылка = НаборыСвойств.Набор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО (СвойстваНаборов.Свойство = Свойства.Ссылка)
	|ГДЕ
	|	НЕ СвойстваНаборов.ПометкаУдаления
	|	И НЕ Свойства.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойства.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваНаборов.Набор,
	|	СвойстваНаборов.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПорядокСвойства,
	|	СвойстваНаборов.ПометкаУдаления КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	СвойстваНаборов КАК СвойстваНаборов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка),
	|	0,
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНаборов КАК СвойстваНаборов
	|		ПО ЗаполненныеСвойства.Свойство = СвойстваНаборов.Свойство
	|ГДЕ
	|	СвойстваНаборов.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Набор,
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено,
	|	ДополнительныеРеквизитыИСведения.Доступен,
	|	ДополнительныеРеквизитыИСведения.Виден,
	|	ДополнительныеРеквизитыИСведения.Подсказка,
	|	ДополнительныеРеквизитыИСведения.ВыводитьВВидеГиперссылки,
	|	ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов.(
	|		ЗависимоеСвойство,
	|		Реквизит,
	|		Условие,
	|		Значение
	|	)
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.ПорядокНабора,
	|	ВсеСвойства.ПорядокСвойства";
	
	Если ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	// Удаление дублей свойств в нижестоящих наборах свойств.
	Если Наборы.Количество() > 1 Тогда
		Индекс = ОписаниеСвойств.Количество()-1;
		
		Пока Индекс >= 0 Цикл
			Строка = ОписаниеСвойств[Индекс];
			НайденнаяСтрока = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
			
			Если НайденнаяСтрока <> Неопределено
			   И НайденнаяСтрока <> Строка Тогда
				
				ОписаниеСвойств.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс-1;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение значений свойств.
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
				И (ИспользоватьНеограниченнуюСтроку(
						ОписаниеСвойства.ТипЗначения,
						ОписаниеСвойства.МногострочноеПолеВвода)
					Или ИспользоватьСтрокуВВидеСсылки(
						ОписаниеСвойства.ТипЗначения,
						ОписаниеСвойства.ВыводитьВВидеГиперссылки,
						ОписаниеСвойства.МногострочноеПолеВвода))
				И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

// Только для внутреннего использования.
//
Функция ДополнительныеРеквизитыИСведенияНеНайдены(Наборы, ЭтоДополнительноеСведение, ОтложеннаяИнициализация = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборыСвойств", Наборы.ВыгрузитьЗначения());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваНаборов.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|ГДЕ
	|	СвойстваНаборов.Ссылка В(&НаборыСвойств)
	|	И НЕ СвойстваНаборов.ПометкаУдаления";
	
	Если ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваНеНайдены = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СвойстваНеНайдены;
КонецФункции

// Возвращает объект метаданных, который является владельцем значений
// свойств набора дополнительных реквизитов и сведений.
//
Функция МетаданныеВладельцаЗначенийСвойствНабора(Ссылка, УчитыватьПометкуУдаления = Истина, ТипСсылки = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, "ПометкаУдаления, ЭтоГруппа, Предопределенный, Родитель, ИмяПредопределенныхДанных");
	
	Если УчитыватьПометкуУдаления И СвойстваСсылки.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СвойстваСсылки.ЭтоГруппа Тогда
		СсылкаПредопределенного = Ссылка;
		
	ИначеЕсли СвойстваСсылки.Предопределенный
	        И СвойстваСсылки.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		
		СсылкаПредопределенного = Ссылка;
	Иначе
		СсылкаПредопределенного = СвойстваСсылки.Родитель;
	КонецЕсли;
	
	Если Ссылка <> СсылкаПредопределенного Тогда
		ИмяПредопределенного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаПредопределенного, "ИмяПредопределенныхДанных");
	Иначе
		ИмяПредопределенного = СвойстваСсылки.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Позиция = СтрНайти(ИмяПредопределенного, "_");
	
	ПерваяЧастьИмени =  Лев(ИмяПредопределенного, Позиция - 1);
	ВтораяЧастьИмени = Прав(ИмяПредопределенного, СтрДлина(ИмяПредопределенного) - Позиция);
	
	МетаданныеВладельца = Метаданные.НайтиПоПолномуИмени(ПерваяЧастьИмени + "." + ВтораяЧастьИмени);
	
	Если МетаданныеВладельца <> Неопределено Тогда
		ТипСсылки = Тип(ПерваяЧастьИмени + "Ссылка." + ВтораяЧастьИмени);
	КонецЕсли;
	
	Возврат МетаданныеВладельца;
	
КонецФункции

// Возвращает использование набором дополнительных реквизитов и сведений.
Функция ВидыСвойствНабора(Ссылка, УчитыватьПометкуУдаления = Истина) Экспорт
	
	ВидыСвойствНабора = Новый Структура;
	ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Ложь);
	ВидыСвойствНабора.Вставить("ДополнительныеСведения",  Ложь);
	
	ТипСсылки = Неопределено;
	МетаданныеВладельца = МетаданныеВладельцаЗначенийСвойствНабора(Ссылка, УчитыватьПометкуУдаления, ТипСсылки);
	
	Если МетаданныеВладельца = Неопределено Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	// Проверка использования дополнительных реквизитов.
	ВидыСвойствНабора.Вставить(
		"ДополнительныеРеквизиты",
		МетаданныеВладельца <> Неопределено
		И МетаданныеВладельца.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено );
	
	// Проверка использования дополнительных сведений.
	ВидыСвойствНабора.Вставить(
		"ДополнительныеСведения",
		      Метаданные.ОбщиеКоманды.Найти("ДополнительныеСведенияКоманднаяПанель") <> Неопределено
		    И Метаданные.ОбщиеКоманды.ДополнительныеСведенияКоманднаяПанель.ТипПараметраКоманды.СодержитТип(ТипСсылки));
	
	Возврат ВидыСвойствНабора;
	
КонецФункции

// Определяет, что тип значения содержит тип дополнительных значений свойств.
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения) Экспорт
	
	Возврат ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
	    ИЛИ ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"));
	
КонецФункции

// Проверяет возможность использования для свойства строки неограниченный длины.
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода) Экспорт
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И (ТипЗначенияСвойства.КвалификаторыСтроки.Длина = 0
		   Или МногострочноеПолеВвода > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИспользоватьСтрокуВВидеСсылки(ТипЗначенияСвойства, ВыводитьВВидеГиперссылки, МногострочноеПолеВвода)
	СписокТипов = ТипЗначенияСвойства.Типы();
	
	Если Не ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода)
		И СписокТипов.Количество() = 1
		И СписокТипов[0] = Тип("Строка")
		И ВыводитьВВидеГиперссылки Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АдресИПредставление(Строка) Экспорт
	
	Результат = Новый Структура;
	НачалоВыделения = СтрНайти(Строка, "<a href = ");
	
	СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 9);
	ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
	
	Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
	Если СтрНачинаетсяС(Ссылка, """") Тогда
		Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
		Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
	КонецЕсли;
	
	СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
	КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
	ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
	Результат.Вставить("Представление", ТекстСсылки);
	Результат.Вставить("Ссылка", Ссылка);
	
	Возврат Результат;
	
КонецФункции

// Обработчик события СвойстваПередУдалениемСсылочногоОбъекта.
// Выполняет поиск ссылок на удаляемые объекты в таблице зависимостей дополнительных реквизитов.
//
Процедура ПередУдалениемСсылочногоОбъекта(Объект, Отказ) Экспорт
	Если Объект.ОбменДанными.Загрузка = Истина
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зависимости.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Зависимости
		|ГДЕ
		|	Зависимости.Значение = &Значение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("Значение", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		РеквизитОбъект = Строка.Ссылка.ПолучитьОбъект();
		ПараметрыОтбора = Новый Структура("Значение", Объект.Ссылка);
		НайденныеСтроки = РеквизитОбъект.ЗависимостиДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Зависимость Из НайденныеСтроки Цикл
			РеквизитОбъект.ЗависимостиДополнительныхРеквизитов.Удалить(Зависимость);
		КонецЦикла;
		РеквизитОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Проверяет наличие объектов, использующих свойство.
//
// Параметры:
//  Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
// 
// Возвращаемое значение:
//  Булево. Истина, если найден хотя бы один объект.
//
Функция ДополнительноеСвойствоИспользуется(Свойство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыОбъектовМетаданных = Новый Массив;
	ВидыОбъектовМетаданных.Добавить("ПланыОбмена");
	ВидыОбъектовМетаданных.Добавить("Справочники");
	ВидыОбъектовМетаданных.Добавить("Документы");
	ВидыОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	ВидыОбъектовМетаданных.Добавить("ПланыСчетов");
	ВидыОбъектовМетаданных.Добавить("ПланыВидовРасчета");
	ВидыОбъектовМетаданных.Добавить("БизнесПроцессы");
	ВидыОбъектовМетаданных.Добавить("Задачи");
	
	ТаблицыОбъектов = Новый Массив;
	Для каждого ВидОбъектовМетаданных Из ВидыОбъектовМетаданных Цикл
		Для каждого ОбъектМетаданных Из Метаданные[ВидОбъектовМетаданных] Цикл
			
			Если ЭтоОбъектМетаданныхСДополнительнымиРеквизитами(ОбъектМетаданных) Тогда
				ТаблицыОбъектов.Добавить(ОбъектМетаданных.ПолноеИмя());
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ИмяТаблицы КАК ТекущаяТаблица
	|ГДЕ
	|	ТекущаяТаблица.Свойство = &Свойство";
	
	Для каждого Таблица Из ТаблицыОбъектов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", Таблица + ".ДополнительныеРеквизиты");
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет использует ли объект метаданных дополнительные реквизиты.
// Проверка предназначена для контроля ссылочной целостности, поэтому
// проверка встраивания пропускается.
//
Функция ЭтоОбъектМетаданныхСДополнительнымиРеквизитами(ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты");
	Если ТабличнаяЧасть = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизит = ТабличнаяЧасть.Реквизиты.Найти("Свойство");
	Если Реквизит = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Реквизит.Тип.СодержитТип(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизит = ТабличнаяЧасть.Реквизиты.Найти("Значение");
	Если Реквизит = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает наименование предопределенного набора полученное
// из объекта метаданных, найденного через имя предопределенного набора.
// 
// Параметры:
//  Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений,
//        - Строка - полное имя предопределенного элемента.
//
Функция НаименованиеПредопределенногоНабора(Набор) Экспорт
	
	Если ТипЗнч(Набор) = Тип("Строка") Тогда
		ИмяПредопределенного = Набор;
	Иначе
		ИмяПредопределенного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Набор, "ИмяПредопределенныхДанных");
	КонецЕсли;
	
	Позиция = СтрНайти(ИмяПредопределенного, "_");
	ПерваяЧастьИмени =  Лев(ИмяПредопределенного, Позиция - 1);
	ВтораяЧастьИмени = Прав(ИмяПредопределенного, СтрДлина(ИмяПредопределенного) - Позиция);
	
	ПолноеИмя = ПерваяЧастьИмени + "." + ВтораяЧастьИмени;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМетаданных = Неопределено Тогда
		Если ТипЗнч(Набор) = Тип("Строка") Тогда
			Возврат "";
		Иначе
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Набор, "Наименование");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеСписка) Тогда
		Наименование = ОбъектМетаданных.ПредставлениеСписка;
		
	ИначеЕсли ЗначениеЗаполнено(ОбъектМетаданных.Синоним) Тогда
		Наименование = ОбъектМетаданных.Синоним;
	Иначе
		Если ТипЗнч(Набор) = Тип("Строка") Тогда
			Наименование = "";
		Иначе
			Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Набор, "Наименование");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Обновление состава верхней группы для использования при настройке
// состава полей динамического списка и его настройки (отборы, ...).
//
// Параметры:
//  Группа        - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений,
//                  с признаком ЭтоГруппа = Истина.
//
Процедура ПроверитьОбновитьСоставСвойствГруппы(Группа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка.Родитель = &Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Ссылка.Родитель = &Группа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свойство";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДополнительныеРеквизитыГруппы = РезультатЗапроса[0].Выгрузить();
	ДополнительныеСведенияГруппы  = РезультатЗапроса[1].Выгрузить();
	
	ГруппаОбъект = Группа.ПолучитьОбъект();
	
	Обновить = Ложь;
	
	Если ГруппаОбъект.ДополнительныеРеквизиты.Количество() <> ДополнительныеРеквизитыГруппы.Количество() Тогда
		Обновить = Истина;
	КонецЕсли;
	
	Если ГруппаОбъект.ДополнительныеСведения.Количество() <> ДополнительныеСведенияГруппы.Количество() Тогда
		Обновить = Истина;
	КонецЕсли;
	
	Если Не Обновить Тогда
		Индекс = 0;
		Для каждого Строка Из ГруппаОбъект.ДополнительныеРеквизиты Цикл
			Если Строка.Свойство <> ДополнительныеРеквизитыГруппы[Индекс].Свойство Тогда
				Обновить = Истина;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Обновить Тогда
		Индекс = 0;
		Для каждого Строка Из ГруппаОбъект.ДополнительныеСведения Цикл
			Если Строка.Свойство <> ДополнительныеСведенияГруппы[Индекс].Свойство Тогда
				Обновить = Истина;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Обновить Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаОбъект.ДополнительныеРеквизиты.Загрузить(ДополнительныеРеквизитыГруппы);
	ГруппаОбъект.ДополнительныеСведения.Загрузить(ДополнительныеСведенияГруппы);
	ГруппаОбъект.Записать();
	
КонецПроцедуры

// Возвращает перечисляемые значения указанного свойства.
//
// Параметры:
//  Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство для
//             которого нужно получить перечисляемые значения.
// 
// Возвращаемое значение:
//  Массив - значения:
//    * СправочникСсылка.ЗначенияСвойствОбъектов, СправочникСсылка.ЗначенияСвойствОбъектовИерархия - значения
//      свойства, если есть.
//
Функция ДополнительныеЗначенияСвойства(Свойство) Экспорт
	
	ТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Свойство, "ТипЗначения");
	
	Если ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Владелец = &Свойство";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Владелец = &Свойство";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Свойство", Свойство);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Возвращает основной набор свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка или Объект владельца свойств.
//
// Возвращаемое значение:
//  СправочникСсылка.НаборыДополнительныхРеквизитовИСведений -
//   когда для типа владельца свойств не задано имя реквизита вида объекта в процедуре.
//         УправлениеСвойствамиПереопределяемый.ПолучитьИмяРеквизитаВидаОбъекта(),
//   тогда возвращается предопределенный элемент с именем в формате полное имя
//         объекта метаданных, у которого символ "." заменен символом "_",
//   иначе возвращается значение реквизита НаборСвойств того вида, который
//         содержится в реквизите владельца свойств с именем заданным в
//         переопределяемой процедуре.
//
//  Неопределено - когда владелец свойств - группа элементов справочника или
//                 группа элементов плана видов характеристик.
//  
Функция ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств)
	
	ПереданОбъект = Ложь;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ВладелецСвойств) Тогда
		Ссылка = ВладелецСвойств;
	Иначе
		ПереданОбъект = Истина;
		Ссылка = ВладелецСвойств.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	
	ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
	
	Если ВидОбъектаМетаданных = "Справочник" Или ВидОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ВладелецСвойств) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных;
	Возврат Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
	
КонецФункции

// Используется при обновлении информационной базы.
Функция ЕстьИзмененияПредставленийОбъектовМетаданныхСоСвойствами()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.НаборыДополнительныхРеквизитовИСведений.ОбновитьСоставНаименованийПредопределенныхНаборов();
	
	ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы(
		"СтандартныеПодсистемы.Свойства.ПредопределенныеНаборыДополнительныхРеквизитовИСведений");
	
	Если ПоследниеИзменения = Неопределено
	 Или ПоследниеИзменения.Количество() > 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Обработчики - ТаблицаЗначений, Неопределено - см. описание 
//    функции НоваяТаблицаОбработчиковОбновления общего модуля.
//    ОбновлениеИнформационнойБазы.
//    В случае прямого вызова (не через механизм обновления 
//    версии ИБ) передается Неопределено.
// 
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И ЕстьИзмененияПредставленийОбъектовМетаданныхСоСвойствами() Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "УправлениеСвойствами.ОбновитьНаименованияНаборовИСвойств";
	КонецЕсли;
	
КонецПроцедуры

// Обновляет наборы дополнительных реквизитов и сведений в информационной базе.
// Используется для перехода к новому формату хранения.
//
Процедура ОбновитьСписокДополнительныхСвойств_1_0_6() Экспорт
	
	НаборыДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.Выбрать();
	
	Пока НаборыДополнительныхРеквизитовИСведений.Следующий() Цикл
		
		ДопСведения = Новый Массив;
		
		НаборСвойствОбъект = НаборыДополнительныхРеквизитовИСведений.Ссылка.ПолучитьОбъект();
		
		Для Каждого Запись Из НаборСвойствОбъект.ДополнительныеРеквизиты Цикл
			Если Запись.Свойство.ЭтоДополнительноеСведение Тогда
				ДопСведения.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ДопСведения.Количество() > 0 Тогда
			
			Для Каждого ДопСведение Из ДопСведения Цикл
				НоваяСтрока = НаборСвойствОбъект.ДополнительныеСведения.Добавить();
				НоваяСтрока.Свойство = ДопСведение.Свойство;
				НаборСвойствОбъект.ДополнительныеРеквизиты.Удалить(
					НаборСвойствОбъект.ДополнительныеРеквизиты.Индекс(ДопСведение));
				
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборСвойствОбъект.Записать());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// 1. Заполняет новые данные:
// Справочник.НаборыДополнительныхРеквизитовИСведений
// - КоличествоРеквизитов
// - КоличествоСведений
// ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.
// - Заголовок
// - НаборСвойств
// - ДополнительныеЗначенияИспользуются
// - ДополнительныеЗначенияСВесом
// - ЗаголовокФормыЗначения
// - ЗаголовокФормыВыбораЗначения
// Константа.ИспользоватьОбщиеДополнительныеРеквизитыИСведения
// Константа.ИспользоватьОбщиеДополнительныеЗначения.
//
// 2. Обновляет имеющиеся данные:
// Справочник.НаборыДополнительныхРеквизитовИСведений.
// - Наименование
// - ДополнительныеРеквизиты (очищает, если изменено встраивание).
// - ДополнительныеСведения  (очищает, если изменено встраивание).
// ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.
// - Наименование.
// 
Процедура ЗаполнитьНовыеДанные_2_1_5() Экспорт
	
	ЗапросСвойств = Новый Запрос;
	ЗапросСвойств.Текст =
	"ВЫБРАТЬ
	|	Свойства.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Наименование <> """"
	|	И Свойства.Заголовок = """"";
	
	ВыборкаСвойств = ЗапросСвойств.Выполнить().Выбрать();
	
	Если ВыборкаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросНаборов = Новый Запрос;
	ЗапросНаборов.Текст =
	"ВЫБРАТЬ
	|	Наборы.Ссылка КАК Ссылка,
	|	Наборы.ЭтоГруппа КАК ЭтоГруппа,
	|	Наборы.Наименование КАК Наименование,
	|	Наборы.КоличествоРеквизитов,
	|	Наборы.КоличествоСведений,
	|	Наборы.ДополнительныеРеквизиты.(
	|		ПометкаУдаления
	|	),
	|	Наборы.ДополнительныеСведения.(
	|		ПометкаУдаления
	|	)
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы";
	
	ВыборкаНаборов = ЗапросНаборов.Выполнить().Выбрать();
	Пока ВыборкаНаборов.Следующий() Цикл
		
		Наименование = НаименованиеПредопределенногоНабора(ВыборкаНаборов.Ссылка);
		
		// Вычисление количества свойств не помеченных на удаление.
		ВидыСвойствНабора = ВидыСвойствНабора(ВыборкаНаборов.Ссылка);
		
		ДополнительныеРеквизиты = ВыборкаНаборов.ДополнительныеРеквизиты.Выгрузить();
		Если ВидыСвойствНабора.ДополнительныеРеквизиты Тогда
			КоличествоРеквизитов = ДополнительныеРеквизиты.Количество();
			КоличествоРеквизитовСтрокой = Формат(ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
		Иначе
			КоличествоРеквизитов = 0;
			КоличествоРеквизитовСтрокой = "";
		КонецЕсли;
		
		ДополнительныеСведения = ВыборкаНаборов.ДополнительныеСведения.Выгрузить();
		Если ВидыСвойствНабора.ДополнительныеСведения Тогда
			КоличествоСведений = ДополнительныеСведения.Количество();
			КоличествоСведенийСтрокой   = Формат(ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
		Иначе
			КоличествоСведений = 0;
			КоличествоСведенийСтрокой = "";
		КонецЕсли;
		
		Если ВыборкаНаборов.Наименование <> Наименование
		 ИЛИ НЕ ВыборкаНаборов.ЭтоГруппа
		   И (    ДополнительныеРеквизиты.Количество() <> КоличествоРеквизитов
		      ИЛИ ДополнительныеСведения.Количество()  <> КоличествоСведений
		      ИЛИ ВыборкаНаборов.КоличествоРеквизитов <> КоличествоРеквизитовСтрокой
		      ИЛИ ВыборкаНаборов.КоличествоСведений   <> КоличествоСведенийСтрокой ) Тогда
			
			Объект = ВыборкаНаборов.Ссылка.ПолучитьОбъект();
			Объект.Наименование = Наименование;
			Если НЕ ВыборкаНаборов.ЭтоГруппа Тогда
				Объект.КоличествоРеквизитов = КоличествоРеквизитовСтрокой;
				Объект.КоличествоСведений   = КоличествоСведенийСтрокой;
				Если НЕ ВидыСвойствНабора.ДополнительныеРеквизиты Тогда
					Объект.ДополнительныеРеквизиты.Очистить();
				КонецЕсли;
				Если НЕ ВидыСвойствНабора.ДополнительныеСведения Тогда
					Объект.ДополнительныеСведения.Очистить();
				КонецЕсли;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросПроверкиУникальности = Новый Запрос;
	ЗапросПроверкиУникальности.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Наборы.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоДополнительноеСведение
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|ГДЕ
	|	Наборы.Свойство = &Свойство
	|	И Наборы.Ссылка.ЭтоГруппа = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Наборы.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК Наборы
	|ГДЕ
	|	Наборы.Свойство = &Свойство
	|	И Наборы.Ссылка.ЭтоГруппа = ЛОЖЬ";
	
	ЗапросПроверкиВеса = Новый Запрос;
	ЗапросПроверкиВеса.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК Значения
	|ГДЕ
	|	Значения.Владелец = &Свойство
	|	И НЕ Значения.ЭтоГруппа
	|	И Значения.Вес <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК Значения
	|ГДЕ
	|	Значения.Владелец = &Свойство
	|	И Значения.Вес <> 0";
	
	Пока ВыборкаСвойств.Следующий() Цикл
		
		Объект = ВыборкаСвойств.Ссылка.ПолучитьОбъект();
		ЗапросПроверкиУникальности.УстановитьПараметр("Свойство", ВыборкаСвойств.Ссылка);
		Выгрузка = ЗапросПроверкиУникальности.Выполнить().Выгрузить();
		
		Если Выгрузка.Количество() = 1
		   И Выгрузка[0].ЭтоДополнительноеСведение = Объект.ЭтоДополнительноеСведение Тогда
			
			Объект.НаборСвойств =  Выгрузка[0].Ссылка;
		КонецЕсли;
		
		Объект.Заголовок = Объект.Наименование;
		Если ЗначениеЗаполнено(Объект.НаборСвойств) Тогда
			Объект.Наименование = Объект.Заголовок + " (" + Строка(Объект.НаборСвойств) + ")";
		КонецЕсли;
		
		Если ТипЗначенияСодержитЗначенияСвойств(Объект.ТипЗначения) Тогда
			Объект.ДополнительныеЗначенияИспользуются = Истина;
		КонецЕсли;
		
		ЗапросПроверкиВеса.УстановитьПараметр("Свойство", ВыборкаСвойств.Ссылка);
		Если НЕ ЗапросПроверкиВеса.Выполнить().Пустой() Тогда
			Объект.ДополнительныеЗначенияСВесом = Истина;
		КонецЕсли;
		
		Объект.ЗаголовокФормыЗначения       = СтрПолучитьСтроку(Объект.УдалитьСклоненияПредмета, 1);
		Объект.ЗаголовокФормыВыбораЗначения = СтрПолучитьСтроку(Объект.УдалитьСклоненияПредмета, 2);
		Объект.УдалитьСклоненияПредмета = "";
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
	// Заполнение констант.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|	И ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Если Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Получить() Тогда
			Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
		КонецЕсли;
		Если Константы.ИспользоватьОбщиеДополнительныеЗначения.Получить() Тогда
			Константы.ИспользоватьОбщиеДополнительныеЗначения.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет состав свойств у всех групп наборов при переходе на новую версию подсистемы.
Процедура ОбновитьСоставСвойствВсехГруппНаборов(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыСвойств
	|ГДЕ
	|	НаборыСвойств.ЭтоГруппа = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПроверитьОбновитьСоставСвойствГруппы(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения свойств "Виден", "Доступен" в значение Истина.
//
Процедура ЗаполнитьНовыеСвойстваДополнительныхРеквизитовИСведений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		СсылкаРеквизитСведение = СтрокаРезультата.Ссылка;
		Объект = СсылкаРеквизитСведение.ПолучитьОбъект();
		
		Объект.Виден    = Истина;
		Объект.Доступен = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения свойства Используется в значение Истина.
//
Процедура УстановитьЗначениеПризнакаИспользуется() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитовИСведений.Используется";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НаборОбъект.Используется = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
