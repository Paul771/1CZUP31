#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение старого состояния.
	СтарыеНастройкиРасчетаЗарплаты = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();
	СтарыеНастройкиРасчетаЗарплаты.Прочитать();
	Если СтарыеНастройкиРасчетаЗарплаты.Количество() = 0 Тогда
		СтароеСостояние = СтарыеНастройкиРасчетаЗарплаты.Добавить();
	Иначе	
		СтароеСостояние = СтарыеНастройкиРасчетаЗарплаты[0];
	КонецЕсли;	
	ДополнительныеСвойства.Вставить("СтароеСостояние", СтароеСостояние);
	
	// Вторичные данные тарифных сеток
	УстановитьПривилегированныйРежим(Истина);
	РаботаВБюджетномУчреждении = Константы.РаботаВБюджетномУчреждении.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИспользоватьТарифныеСетки = ЭтотОбъект[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
	
	ЭтотОбъект[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплатыБюджет = ?(РаботаВБюджетномУчреждении, ИспользоватьТарифныеСетки, Ложь);
	ЭтотОбъект[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплатыХозрасчет = ?(РаботаВБюджетномУчреждении, Ложь, ИспользоватьТарифныеСетки);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтароеСостояние = ДополнительныеСвойства.СтароеСостояние;
	
	// Установка вторичных данных
	СтрокаНабора = ЭтотОбъект[0];
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		
		Если СтрокаНабора.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты <> СтароеСостояние.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НаборНастройкиШтатногоРасписания = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьНаборЗаписей();
			НаборНастройкиШтатногоРасписания.Прочитать();
			
			Если НаборНастройкиШтатногоРасписания.Количество() = 0 Тогда
				НаборНастройкиШтатногоРасписания.Добавить();
			КонецЕсли;
			
			НаборНастройкиШтатногоРасписания[0].ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании = 
				СтрокаНабора.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
			
			НаборНастройкиШтатногоРасписания.ОбменДанными.Загрузка = Истина;
			НаборНастройкиШтатногоРасписания.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаНабора.ИспользоватьРегистрациюПрочихДоходов <> СтароеСостояние.ИспользоватьРегистрациюПрочихДоходов Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
			Модуль.ПриУстановкеИспользоватьРегистрациюПрочихДоходов(СтрокаНабора.ИспользоватьРегистрациюПрочихДоходов);
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.УстановитьПараметрыНабораСвойствСовмещение();
	РасчетЗарплатыРасширенный.УстановитьПараметрыНабораСвойствКлассификаторов();
	ИсполнительныеЛисты.УстановитьИспользованиеПараметровНаборовСвойств();
	УчетНДФЛРасширенный.УстановитьПараметрыНабораСвойствСправочников();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
