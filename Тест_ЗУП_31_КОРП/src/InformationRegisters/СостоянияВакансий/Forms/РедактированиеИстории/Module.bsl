#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ВедущийОбъект", ОбъектВладелец);
	Если Не ЗначениеЗаполнено(ОбъектВладелец) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если объект еще не заблокирован для изменений и есть права на изменение набора
	// попытаемся установить блокировку.
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.Вакансии) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если ТолькоПросмотр Тогда
		Элементы.НаборЗаписей.ТолькоПросмотр = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ФормаОК",
			"Доступность",
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ФормаОтмена",
			"КнопкаПоУмолчанию",
			Истина);
	КонецЕсли;
		
	Для Каждого ЗаписьНабора Из Параметры.МассивЗаписей Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ЗаписьНабора);
	КонецЦикла;
	
	НаборЗаписей.Сортировать("Период");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Отказ = Ложь;
	ПредСостояние = Неопределено;
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ТекСостояние = ЗаписьНабора.Состояние;
		ЕстьКонфликт = Ложь;
		
		Если ПредСостояние = Неопределено 
			ИЛИ ПредСостояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Закрыта")
			ИЛИ ПредСостояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Отменена") Тогда 
			
			ЕстьКонфликт = ТекСостояние <> ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта");
			
		ИначеЕсли ПредСостояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта") Тогда 
			ЕстьКонфликт = ТекСостояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта");
		ИначеЕсли ПредСостояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Приостановлена") Тогда 
			ЕстьКонфликт = ТекСостояние <> ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта")
				И ТекСостояние <> ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Отменена");
		КонецЕсли;
		
		Если ЕстьКонфликт Тогда
			Если ПредСостояние = Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'Первое состояние может быть только ""Открыта""'");
			Иначе 	
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Состояние ""%1"" от %2 конфликтует с предыдущим состоянием ""%3"" от %4'"),
						ТекСостояние, Формат(ЗаписьНабора.Период, "ДЛФ=D"),
						ПредСостояние, Формат(НаборЗаписей[НаборЗаписей.Индекс(ЗаписьНабора) - 1].Период, "ДЛФ=D"));
			КонецЕсли;			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НаборЗаписей[" + НаборЗаписей.Индекс(ЗаписьНабора) + "].Состояние",, Отказ);
		КонецЕсли;
		
		ПредСостояние = ТекСостояние;
		
	КонецЦикла;	
	
	Если НЕ Отказ Тогда 
		РедактированиеПериодическихСведенийКлиент.ОповеститьОЗавершении(ЭтаФорма, "СостоянияВакансий", ОбъектВладелец);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Вакансия = ОбъектВладелец;
	
	ДатаНовойЗаписи = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	Кол = НаборЗаписей.Количество();
	
	МассивОткрытыеСегодня = НаборЗаписей.НайтиСтроки(Новый Структура("Период", ДатаНовойЗаписи));
	ИскатьПоГраницам = Истина;
	Если МассивОткрытыеСегодня.Количество() > 0 Тогда 
		ИндСегодня = НаборЗаписей.Индекс(МассивОткрытыеСегодня[0]);
		Если ИндСегодня < Кол - 2 Тогда 
			ИскатьПоГраницам = НаборЗаписей[ИндСегодня + 1].Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта");
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИскатьПоГраницам И Кол > 1 Тогда  
	
		ПерваяДата = НаборЗаписей[0].Период;
		ПоследняяДата = НаборЗаписей[Кол - 2].Период;
		
		Если ДатаНовойЗаписи >= ПерваяДата И ДатаНовойЗаписи <= ПоследняяДата Тогда 
			ДатаНовойЗаписи = КонецДня(ПоследняяДата) + ?(ПоследняяДата = НачалоДня(ПоследняяДата), 0, 1);
		КонецЕсли;	
		
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Период = ДатаНовойЗаписи;
	
КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекСтроки = НаборЗаписей.Индекс(ТекДанные);
	
	Если ЗначениеЗаполнено(ТекДанные.Период) Тогда
		ТекДанные.Период =?(ТекДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВакансии.Открыта"), НачалоДня(ТекДанные.Период), КонецДня(ТекДанные.Период));
	Иначе	
		СообщениеОбОшибке = НСтр("ru = 'Дата не заполнена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , "НаборЗаписей[" + ИндексТекСтроки + "].Период", , Отказ);
	КонецЕсли;	
	
	Если НЕ Отказ И НЕ ЗначениеЗаполнено(ТекДанные.Состояние) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Состояние не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , "НаборЗаписей[" + ИндексТекСтроки + "].Состояние", , Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда 
		НайденныеСтроки = НаборЗаписей.НайтиСтроки(Новый Структура("Период", ТекДанные.Период));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока <> ТекДанные Тогда
				СообщениеОбОшибке = НСтр("ru = 'Состояние на выбранную дату уже зарегистрировано.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , "НаборЗаписей[" + ИндексТекСтроки + "].Период", , Отказ);
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ Тогда 
		НаборЗаписей.Сортировать("Период");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти