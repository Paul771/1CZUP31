
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Запись, Параметры);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Кандидаты, Параметры.Кандидаты, "Кандидат");
	Если Кандидаты.Количество() = 1 Тогда
		Запись.Кандидат = Кандидаты[0].Кандидат;
	КонецЕсли;
	
	ПодобратьЭтапРаботы();
	ПодобратьДатуВремяНачала();
	
	УстановитьСвойстваЭлементовФормы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВзаимодействияСписок, "Предмет", Запись.Кандидат);
	
	ПрочитатьНапоминание();
	
	ЗаполнитьШаблонПисьмаПоУмолчанию(ШаблонПисьмаКандидатам, Запись.ЭтапРаботы);
	ЗаполнитьШаблонSMSПоУмолчанию(ШаблонSMSКандидатам, Запись.ЭтапРаботы);
	
	НастроитьЭлементыПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСпискиВыбораВремени();
	ОтобразитьВыбранноеВремя();
	
	Если ИнтервалВремениНапоминания > 0 Тогда
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(ИнтервалВремениНапоминания);
	КонецЕсли;
	
	Если ДоступныЭлементыПланирования И Участники.Количество() = 0 Тогда
		
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Участник = ПользователиКлиентСервер.ТекущийПользователь();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Предмет") И Параметр.Предмет = Запись.Кандидат Тогда
		Элементы.ВзаимодействияСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Запись.ЭтапРаботы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Этап работы не указан.'"), , , "Запись.ЭтапРаботы", Отказ);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Запись.Период) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указана дата.'"), , , "Запись.Период", Отказ);
	КонецЕсли;
		
	Если ЗабронироватьПомещение И Не ЗначениеЗаполнено(Помещение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано помещение.'"), , , "Помещение", Отказ);
	КонецЕсли;
	
	ПодборПерсонала.ПроверитьВозможностьУстановкиЭтапаРаботы(
		СоставКандидатовНаСервере(), Запись.ЭтапРаботы, Запись.Период, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ДоступныЭлементыПланирования Тогда
		
		РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
			Запись.Период, Запись.ПериодОкончание, Ложь,
			НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
		
	КонецЕсли;
	
	ПриИзмененииВремениПроведенияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Запись.Период, Запись.ПериодОкончание, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ПриИзмененииВремениПроведенияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Запись.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "  :  " Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Запись.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Запись.Период, Запись.ПериодОкончание, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
		
	ПриИзмененииВремениПроведенияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Запись.ПериодОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "  :  " Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Запись.ПериодОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПриИзменении(Элемент)
	УстановитьДоступностьВремениНапоминания(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалНапоминанияСтрокойПриИзменении(Элемент)
	
	ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
	Если ИнтервалВремениНапоминания > 0 Тогда
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(ИнтервалВремениНапоминания);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Интервал времени не определен'"), , "ИнтервалВремениСтрокой");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмоКандидатамПриИзменении(Элемент)
	УстановитьДоступностьШаблонаПисьмаКандидатам(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMSКандидатамПриИзменении(Элемент)
	УстановитьДоступностьШаблонаSMSКандидатам(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВзаимодействияСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область БронированиеПомещений

&НаКлиенте
Процедура ЗабронироватьПомещениеПриИзменении(Элемент)
	
	Если Не ЗабронироватьПомещение Тогда
		Помещение = Неопределено;
	КонецЕсли;
	
	НастроитьГруппуЗабронироватьПомещение(ЭтотОбъект, Помещение, ЗабронироватьПомещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КлючНазначенияИспользования", "ВыборПомещенияДляБрони");
	
	ОткрытьФорму("Справочник.ТерриторииИПомещения.Форма.ВыборПомещения", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Участники.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ОбработкаВыбораУчастника(Значение);
		КонецЦикла;
	Иначе
		ОбработкаВыбораУчастника(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиУчастника = Участники.НайтиСтроки(Новый Структура("Участник", ВыбранноеЗначение));
	Если СтрокиУчастника.Количество() > 0 Тогда
		
		ИндексСтроки = Участники.Индекс(СтрокиУчастника[0]);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Пользователь ""%1"" уже есть в списке'"), ВыбранноеЗначение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Участники[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Участник");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПланировщика

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если (Конец - Начало) = (РазмерЯчейкиВремени * 60) Тогда
		Длительность = Запись.ПериодОкончание - Запись.Период;
		Запись.Период = Начало;
		Запись.ПериодОкончание = Запись.Период + Длительность;
	Иначе
		Запись.Период = Начало;
		Запись.ПериодОкончание = Конец;
	КонецЕсли;
	
	ПриИзмененииВремениПроведенияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОтменаРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ДоступныЭлементыПланирования И Участники.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Не указаны участники этапа, не будет отражена занятость. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеПослеВопросаПодтверждения", ЭтотОбъект);
		
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПроверитьЗаполнениеПослеВопросаПодтверждения(КодВозвратаДиалога.ОК)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	
	Если Не ИспользоватьШаблоныСообщений Тогда
		ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", Запись.Кандидат, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	НачатьФормированиеСообщенияПоШаблону("Письмо");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)
	
	Если Не ИспользоватьШаблоныСообщений Тогда
		ВзаимодействияКлиент.СоздатьВзаимодействиеИлиПредмет("Документ.СообщениеSMS.ФормаОбъекта", Запись.Кандидат, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	НачатьФормированиеСообщенияПоШаблону("СообщениеSMS");
	
КонецПроцедуры

#Область РабочийКалендарь

&НаКлиенте
Процедура ПодобратьВремя(Команда)
	
	ПодобратьВремяКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область УчастникиЭтапаРаботы

&НаКлиенте
Процедура ЗаполнитьУчастников(Команда)
	
	ЗаполнитьУчастниковНаСервере(СоставКандидатов());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
	ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ПараметрыРасширеннойФормыПодбора());
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастников(Команда)
	
	Если Не ЗначениеЗаполнено(Запись.Период) Или Не ЗначениеЗаполнено(Запись.ПериодОкончание) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана дата этапа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Запись.Период");
		Возврат;
		
	КонецЕсли;
	
	Если Не УчастникиОпределены() Тогда
		Возврат;
	КонецЕсли;
	
	СоставУчастников = СоставУчастников();
	ИсключенияЗанятости = ИсключенияЗанятости();
	
	УчастникиДоступны = РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
		СоставУчастников,
		Запись.Период,
		Запись.ПериодОкончание,
		Истина,
		ИсключенияЗанятости,
		Ложь);
	
	Если УчастникиДоступны Тогда
		ТекстПредупреждения = НСтр("ru = 'Все участники доступны.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДоступностьУчастниковЗавершение", ЭтотОбъект);
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуЗанятостиПользователей(
		ОписаниеОповещения, СоставУчастников, Запись.Период, Запись.ПериодОкончание, ИсключенияЗанятости);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция РезультатВыбора()
	
	Результат = ПодборПерсоналаКлиентСервер.РезультатУстановкиЭтапаРаботыСКандидатом();
	Результат.Кандидаты = Новый ФиксированныйМассив(СоставКандидатов());
	
	Результат.ЭтапРаботы.Этап = Запись.ЭтапРаботы;
	Результат.ЭтапРаботы.Состояние = Запись.СостояниеЭтапа;
	Результат.ЭтапРаботы.Комментарий = Запись.Комментарий;
	Результат.ЭтапРаботы.Период = Запись.Период;
	Результат.ЭтапРаботы.ШаблонАнкеты = Запись.ШаблонАнкеты;
	
	Результат.Напоминание.Напоминать = Напомнить;
	Результат.Напоминание.Период = Запись.Период;
	Результат.Напоминание.ИнтервалВремени = ИнтервалВремениНапоминания;
	
	Результат.Письмо.Написать = НаписатьПисьмоКандидатам;
	Результат.Письмо.Шаблон = ШаблонПисьмаКандидатам;
	
	Результат.СообщениеSMS.Написать = ОтправитьSMSКандидатам;
	Результат.СообщениеSMS.Шаблон = ШаблонSMSКандидатам;
	
	Если ДоступныЭлементыПланирования Тогда
		Результат.Участники = Новый ФиксированныйМассив(СоставУчастников());
		Результат.ЭтапРаботы.ПериодОкончание = Запись.ПериодОкончание;
	КонецЕсли;
	
	Если ДоступноБронированиеПомещения Тогда
		Результат.ЭтапРаботы.Помещение = Помещение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ЗаполнитьЗаголовок();
	УстановитьПодсказкуВводаКомментария();
	УстановитьВидимостьНапоминания();
	УстановитьЗаголовокДатыВремени();
	УстановитьВидимостьВзаимодействий();
	
	УстановитьДоступностьВремениНапоминания(ЭтаФорма);
	
	Если Кандидаты.Количество() > 1 Тогда
		Элементы.КандидатыГруппа.Видимость = Истина;
	Иначе
		Элементы.КандидатыГруппа.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьНаписатьПоШаблонам();
	УстановитьДоступностьШаблонаПисьмаКандидатам(ЭтаФорма);
	УстановитьДоступностьШаблонаSMSКандидатам(ЭтаФорма);
	
	ИспользоватьШаблоныСообщений = ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуВводаКомментария()
	
	ТекстПодсказки = "";
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		ТекстПодсказки = НСтр("ru = 'На что обратить внимание?'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
		ТекстПодсказки = НСтр("ru = 'Каким был результат?'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
		ТекстПодсказки = НСтр("ru = 'Почему этап был пропущен?'");
	КонецЕсли;
	
	Элементы.Комментарий.ПодсказкаВвода = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВзаимодействий()
	
	Если Не ПравоДоступа("Чтение", Метаданные.ЖурналыДокументов.Взаимодействия) Тогда
		Элементы.ВзаимодействияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия") Тогда
		Элементы.ВзаимодействияГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Кандидаты.Количество() = 1 Тогда
		Элементы.ВзаимодействияГруппа.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.ВзаимодействияГруппа.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНапоминания()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя") Тогда
		Элементы.НапомнитьГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЭтоПланированиеЭтапа(Запись) Тогда
		Элементы.НапомнитьГруппа.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.НапомнитьГруппа.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаписатьПоШаблонам()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений") Тогда
		Элементы.СообщитьКандидатамГруппа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.СообщитьКандидатамГруппа.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДатыВремени()
	
	ЗаголовокДатыВремени = "";
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		ЗаголовокДатыВремени = НСтр("ru = 'Этап запланирован на'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
		ЗаголовокДатыВремени = НСтр("ru = 'Этап пройден'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
		ЗаголовокДатыВремени = НСтр("ru = 'Этап пропущен'");
	КонецЕсли;
	
	Элементы.ДатаНачала.Заголовок = ЗаголовокДатыВремени;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВремениНапоминания(Форма)
	Форма.Элементы.ИнтервалНапоминанияСтрокой.Доступность = Форма.Напомнить;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовок()
	
	ШаблонТекста = "";
	
	Если Кандидаты.Количество() > 1 Тогда
		Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
			ШаблонТекста = НСтр("ru = 'Планирование этапа «%1»'");
		КонецЕсли;
		Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
			ШаблонТекста = НСтр("ru = 'Отметка прохождения этапа «%1»'");
		КонецЕсли;
		Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
			ШаблонТекста = НСтр("ru = 'Пропуск этапа «%1»'");
		КонецЕсли;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Запись.ЭтапРаботы);
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Запись.Кандидат) Тогда
		Автозаголовок = Истина;
		Возврат;
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Запланирован Тогда
		ШаблонТекста = НСтр("ru = 'Планирование этапа «%1» для %2'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пройден Тогда
		ШаблонТекста = НСтр("ru = 'Отметка прохождения этапа «%1» для %2'");
	КонецЕсли;
	
	Если Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповРаботыСКандидатами.Пропущен Тогда
		ШаблонТекста = НСтр("ru = 'Пропуск этапа «%1» для %2'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекста,
		Запись.ЭтапРаботы,
		ПодборПерсонала.СклонениеКандидата(Запись.Кандидат, 2));
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьЭтапРаботы()
	
	Если ЗначениеЗаполнено(Запись.ЭтапРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Запись.ЭтапРаботы = ПодборПерсонала.ТекущийЭтапРаботыКандидатов(СоставКандидатовНаСервере());
	
КонецПроцедуры

&НаСервере
Функция ТекущаяДатаЭтапа()
	
	// Если для всех кандидатов установлена одинаковая дата этапа, то подставляем именно ее.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", СоставКандидатовНаСервере());
	Запрос.УстановитьПараметр("ЭтапРаботы", Запись.ЭтапРаботы);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаботаСКандидатами.Период КАК Период
		|ИЗ
		|	РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|ГДЕ
		|	РаботаСКандидатами.Кандидат В(&Кандидаты)
		|	И РаботаСКандидатами.ЭтапРаботы = &ЭтапРаботы
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА КАК Поле1
		|			ИЗ
		|				РегистрСведений.РаботаСКандидатами КАК РаботаСКандидатами
		|			ГДЕ
		|				РаботаСКандидатами.Кандидат В (&Кандидаты)
		|				И РаботаСКандидатами.ЭтапРаботы = &ЭтапРаботы
		|			ИМЕЮЩИЕ
		|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаботаСКандидатами.Период) = 1)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Период;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеПослеВопросаПодтверждения(Ответ, ДополнительнеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьВозможностьБронирования(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РезультатВыбора();
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПланированиеЭтапа(Запись)
	
	Возврат Запись.СостояниеЭтапа = ПредопределенноеЗначение("Перечисление.СостоянияЭтаповРаботыСКандидатами.Запланирован");
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыПланирования()
	
	ДоступныЭлементыПланирования = ЭтоПланированиеЭтапа(Запись);
	ДоступноБронированиеПомещения = ДоступныЭлементыПланирования 
		И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений");
	
	ПрочитатьУчастников();
	
	Если ДоступныЭлементыПланирования Тогда
		ПрочитатьПлановыеДанныеЭтапа();
	КонецЕсли;
	
	Если Не ДоступныЭлементыПланирования Тогда
		
		Элементы.ДатаВремяОкончанияГруппа.Видимость = Ложь;
		Элементы.РегистрацияУчастниковГруппа.Видимость = Ложь;
		Элементы.ПланировщикГруппа.Видимость = Ложь;
		
		ВремяНачалаОтображения = НачалоДня(Запись.Период);
		ВремяОкончанияОтображения = КонецДня(Запись.Период);
		
	Иначе
		
		ПодобратьДатуВремяОкончания();
		
		НачальноеЗначениеДатаНачала = Запись.Период;
		НачальноеЗначениеДатаОкончания = Запись.ПериодОкончание;
		ОтображаемаяДата = НачалоДня(Запись.Период);
		
		ФонВыбранногоВремени = ЦветаСтиля.ФонВыбранногоВремени;
		ВремяНачалаОтображения = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ВремяНачалаОтображения");
		ВремяОкончанияОтображения = РаботаСРабочимКалендарем.ПолучитьПерсональнуюНастройку("ВремяОкончанияОтображения");
		
		РазмерЯчейкиВремени = 15;
		ДлительностьПоУмолчанию = 3600;
		
		НастроитьПланировщик();
		
	КонецЕсли;
	
	Элементы.ЗабронироватьПомещениеГруппа.Видимость = ДоступноБронированиеПомещения;
	
	НастроитьГруппуЗабронироватьПомещение(ЭтотОбъект, Помещение, ЗабронироватьПомещение);
	НастроитьГруппуНапомнить();
	
КонецПроцедуры

#Область Напоминания

&НаСервере
Процедура ПрочитатьНапоминание()
	
	ИнтервалНапоминания = НапоминаниеНаСервере(Запись.Кандидат, Запись.Период);
	Если ИнтервалНапоминания = Неопределено Тогда
		Напомнить = Ложь;
		ИнтервалВремениНапоминания = 900;
		Возврат;
	КонецЕсли;
	
	Напомнить = Истина;
	ИнтервалВремениНапоминания = ИнтервалНапоминания;
	УстановитьДоступностьВремениНапоминания(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НапоминаниеНаСервере(Кандидат, ВремяСобытия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВремяСобытия", ВремяСобытия);
	Запрос.УстановитьПараметр("Источник", Кандидат);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НапоминанияПользователя.ИнтервалВремениНапоминания
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.ВремяСобытия = &ВремяСобытия
		|	И НапоминанияПользователя.Источник = &Источник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	// Напоминание на это время не было установлено.
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

&НаКлиенте
Процедура НачатьФормированиеСообщенияПоШаблону(ВидСообщения)
	
	ДополнительныеПараметры = Новый Структура(
		"ЭтапРаботы, 
		|ДатаВремя");
	ДополнительныеПараметры.ЭтапРаботы = Запись.ЭтапРаботы;
	ДополнительныеПараметры.ДатаВремя = Запись.Период;
	
	ШаблоныСообщенийКлиент.СформироватьСообщение(Запись.Кандидат, ВидСообщения, Неопределено, Запись.ЭтапРаботы, ДополнительныеПараметры); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьШаблонаПисьмаКандидатам(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ШаблонПисьмаКандидатам.Доступность = Форма.НаписатьПисьмоКандидатам;
	Элементы.ШаблонПисьмаКандидатам.АвтоОтметкаНезаполненного = Форма.НаписатьПисьмоКандидатам;
	Элементы.ШаблонПисьмаКандидатам.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.ШаблонПисьмаКандидатам);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьШаблонаSMSКандидатам(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ШаблонSMSКандидатам.Доступность = Форма.ОтправитьSMSКандидатам;
	Элементы.ШаблонSMSКандидатам.АвтоОтметкаНезаполненного = Форма.ОтправитьSMSКандидатам;
	Элементы.ШаблонSMSКандидатам.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.ШаблонSMSКандидатам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонПоУмолчанию(Шаблон, Отбор)
	
	Шаблоны = ПодборПерсонала.ШаблоныСообщенийКандидатов(Отбор);
	Если Шаблоны.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = Шаблоны[0].Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонПисьмаПоУмолчанию(Шаблон, ВладелецШаблона)
	
	Отбор = Новый Структура("ВладелецШаблона, ПредназначенДляЭлектронныхПисем");
	Отбор.ВладелецШаблона = ВладелецШаблона;
	Отбор.ПредназначенДляЭлектронныхПисем = Истина;
	
	ЗаполнитьШаблонПоУмолчанию(Шаблон, Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонSMSПоУмолчанию(Шаблон, ВладелецШаблона)
	
	Отбор = Новый Структура("ВладелецШаблона, ПредназначенДляSMS");
	Отбор.ВладелецШаблона = ВладелецШаблона;
	Отбор.ПредназначенДляSMS = Истина;
	
	ЗаполнитьШаблонПоУмолчанию(Шаблон, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборДатыВремени

&НаСервере
Процедура ПодобратьДатуВремяНачала()
	
	Если ЗначениеЗаполнено(Запись.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаЭтапа = ТекущаяДатаЭтапа();
	Если ЗначениеЗаполнено(ТекущаяДатаЭтапа) Тогда
		Запись.Период = ТекущаяДатаЭтапа;
		Возврат;
	КонецЕсли;
	
	Запись.Период = НачалоЧаса(ТекущаяДатаСеанса() + 3600);
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДатуВремяОкончания()
	
	Если ЗначениеЗаполнено(Запись.ПериодОкончание) Тогда
		Возврат;
	КонецЕсли;
	
	Запись.ПериодОкончание = Запись.Период + 3600;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВремениПроведенияЭтапа()
	
	Если ДоступныЭлементыПланирования Тогда
		
		Если Запись.Период < ОтображаемаяДата ИЛИ Запись.Период > КонецДня(ОтображаемаяДата) Тогда
			ОтображаемаяДата = НачалоДня(Запись.Период);
			ИнициализироватьПланировщик();
		КонецЕсли;
		
		ОтобразитьВыбранноеВремя();
		
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораВремени()
	
	ЗаполнитьСписокВыбораДатаНачалаВремя();
	
	Если ДоступныЭлементыПланирования Тогда
		ЗаполнитьСписокВыбораДатаОкончанияВремя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДатаНачалаВремя()
	
	Элементы.ДатаНачалаВремя.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Запись.Период) Тогда 
		ТекДата = НачалоДня(Запись.Период);
	Иначе
		ТекДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ВремяНачалаЗаполнения = НачалоДня(ТекДата) + (ВремяНачалаОтображения - НачалоДня(ВремяНачалаОтображения));
	ВремяОкончанияЗаполнения = НачалоДня(ТекДата) + (ВремяОкончанияОтображения - НачалоДня(ВремяНачалаОтображения));
	
	Если ЗначениеЗаполнено(Запись.ПериодОкончание) Тогда
		ВремяОкончанияЗаполнения = МИН(ВремяОкончанияЗаполнения, Запись.ПериодОкончание);
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Если ТекДата >= ВремяНачалаЗаполнения И ТекДата < ВремяОкончанияЗаполнения Тогда
			
			Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
			Если Запись.Период > ТекДата И Запись.Период < ТекДата + 1800 Тогда
				Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(Запись.Период, Формат(Запись.Период, "ДФ=ЧЧ:мм"));
			КонецЕсли;
			
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДатаОкончанияВремя()
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Очистить();
	
	ТекДата = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(Запись.Период);
	Если Запись.ПериодОкончание > ТекДата - 1800 И Запись.ПериодОкончание < ТекДата Тогда
		Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Запись.ПериодОкончание, Формат(Запись.ПериодОкончание, "ДФ=ЧЧ:мм"));
	КонецЕсли;
	
	ВремяНачалаЗаполнения = НачалоДня(ТекДата) + (ВремяНачалаОтображения - НачалоДня(ВремяНачалаОтображения));
	ВремяОкончанияЗаполнения = НачалоДня(ТекДата) + (ВремяОкончанияОтображения - НачалоДня(ВремяНачалаОтображения));
	
	Для Инд = 1 По 48 Цикл
		
		Если ТекДата > КонецДня(Запись.Период) Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекДата > ВремяНачалаЗаполнения И ТекДата <= ВремяОкончанияЗаполнения И ТекДата > Запись.Период Тогда
			
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
			Если Запись.ПериодОкончание > ТекДата И Запись.ПериодОкончание < ТекДата + 1800 Тогда
				Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Запись.ПериодОкончание, Формат(Запись.ПериодОкончание, "ДФ=ЧЧ:мм"));
			КонецЕсли;
			
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, "00:00");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыбранноеВремя()
	
	Если Не ДоступныЭлементыПланирования Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЭлементов = Планировщик.ИнтервалыФона.Количество();
	Для Инд = 1 По КоличествоЭлементов Цикл
		ИнтервалФона = Планировщик.ИнтервалыФона[КоличествоЭлементов - Инд];
		Если ИнтервалФона.Цвет = ФонВыбранногоВремени Тогда
			Планировщик.ИнтервалыФона.Удалить(ИнтервалФона);
		КонецЕсли;
	КонецЦикла;
	
	ИнтервалВыбранноеВремя = Планировщик.ИнтервалыФона.Добавить(Запись.Период, Запись.ПериодОкончание);
	ИнтервалВыбранноеВремя.Цвет = ФонВыбранногоВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеВыбораВремени(ТекстВремя, ДанныеВыбора, Знач Дата = Неопределено, ИспользоватьТекущуюДату = Истина)
	
	// Формирует данные выбора времени для полей ввода времени.
	//
	// Параметры:
	//  ТекстВремя - Строка - Строковое представление времени в формате "ХХ:ХХ", где Х - число или пробел.
	//  ДанныеВыбора - СписокЗначений - Список значений, который будет использоваться при обработке выбора.
	//  СтандартнаяОбработка - Булево - Признак стандартной обработки. Если текст времени не заполнен,
	//                                  то не меняется. В остальных случаях устанавливается в Ложь.
	//  Дата - Дата - Дата, для которой формируются данные подбора. По умолчанию - без даты.
	//
	
	Если Не ЗначениеЗаполнено(ТекстВремя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = Дата(1,1,1);
	КонецЕсли;
	
	Если ИспользоватьТекущуюДату И Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	// Определение количества введенных символов времени и введенного времени
	Если Сред(ТекстВремя, 5, 1) <> " " Тогда
		КоличествоСимволовДаты = 4;
	ИначеЕсли Сред(ТекстВремя, 4, 1) <> " " Тогда
		КоличествоСимволовДаты = 3;
	ИначеЕсли Сред(ТекстВремя, 2, 1) <> " " Тогда
		КоличествоСимволовДаты = 2;
	ИначеЕсли Сред(ТекстВремя, 1, 1) <> " " Тогда
		КоличествоСимволовДаты = 1;
	Иначе
		КоличествоСимволовДаты = 0;
	КонецЕсли;
	
	ВведенноеВремя = ПреобразоватьТекстКДате(Дата, ТекстВремя);
	Если ВведенноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных выбора
	ДанныеВыбора = Новый СписокЗначений;
	
	Если КоличествоСимволовДаты = 0 Тогда
		
		// Введено время 00:00. Включаем в данные выбора 00:00, 01:00, ... , 23:00.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 24);
		
	ИначеЕсли КоличествоСимволовДаты = 1 Тогда
		
		Если Час(ВведенноеВремя) = 20 Тогда
			// Введено время 20:00. Включаем в данные выбора 20:00, 21:00, 22:00, 23:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 4);
		Иначе
			// Введено время Х0:00. Включаем в данные выбора Х0:00, Х1:00, ... , Х9:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 10);
		КонецЕсли;
		
	ИначеЕсли КоличествоСимволовДаты = 2 Тогда
		
		// Введено время ХХ:00. Включаем в данные выбора ХХ:00, ХХ:10, ... , ХХ:50.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 600, 6);
		
	ИначеЕсли КоличествоСимволовДаты = 3 Тогда
		
		// Введено время ХХ:Х0. Включаем в данные выбора ХХ:Х0, ХХ:Х5.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 300, 2);
		
	ИначеЕсли КоличествоСимволовДаты = 4 Тогда 
		
		// Введено время ХХ:ХХ. Включаем в данные выбора ХХ:ХХ.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДанныеВыбораВремя(Знач Время, ДанныеВыбора, Период = 0, КоличествоПериодов = 1)
	
	Для НомерПериода = 1 По КоличествоПериодов Цикл
		ДанныеВыбора.Добавить(Время, Формат(Время, "ДФ=ЧЧ:мм; ДП=00:00"));
		Время = Время + Период;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьТекстКДате(Дата, Знач ТекстВремя)
	
	// Преобразует переданную к дате и время текстом к дате и времени
	
	ТекстВремя = СтрЗаменить(ТекстВремя, " ", "0");
	ДлинаТекстаВремени = СтрДлина(ТекстВремя);
	
	Если ДлинаТекстаВремени = 0 ИЛИ ДлинаТекстаВремени > 5 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	ТекстВремяВФормате = Неопределено;
	
	Если КодСимвола(ПервыйСимвол) = КодСимвола("0") ИЛИ КодСимвола(ПервыйСимвол) = КодСимвола("1") Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ложь);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола("2")Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Истина);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) >= КодСимвола("3") И КодСимвола(ПервыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = "0" + ПервыйСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "00";
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервыйСимвол) Тогда
		
		ТекстВремяВФормате = "0000";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВремя) Тогда
		ТекстВремяВФормате = Неопределено;
	КонецЕсли;
	
	Если ТекстВремяВФормате = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстВремяВФормате = "00010101" + ТекстВремяВФормате + "00";
	Время = Дата(ТекстВремяВФормате);
	Результат = НачалоДня(Дата) + Час(Время) * 3600 + Минута(Время) * 60;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ограничение)
	
	// Обрабатывает второй символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
	
	ВторойСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("9") И НЕ Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("3") И Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "0" + ТекстВремяВФормате;
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВторойСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "000";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате)
	
	// Обрабатывает третий символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
	
	ТретийСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ТретийСимвол) >= КодСимвола("0") И КодСимвола(ТретийСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ТретийСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ТретийСимвол) >= КодСимвола("6") И КодСимвола(ТретийСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ТретийСимвол;
		
	ИначеЕсли КодСимвола(ТретийСимвол) = КодСимвола(":") Тогда
		
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТретийСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	// Обрабатывает четвертый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
	
	ЧетвертыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ЧетвертыйСимвол) >= КодСимвола("0") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ЧетвертыйСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ЧетвертыйСимвол) >= КодСимвола("6") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ЧетвертыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ЧетвертыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	// Обрабатывает пятый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
	
	ПятыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ПятыйСимвол) >= КодСимвола("0") И КодСимвола(ПятыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ПятыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПятыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РабочийКалендарь

&НаСервере
Процедура НастроитьПланировщик()
	
	ИнициализироватьПланировщик();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтображатьВремяПо()
	
	ЧасОкончания = Час(ВремяОкончанияОтображения);
	Если ЧасОкончания = 0 Тогда
		ЧасОкончания = 24;
	КонецЕсли;
	
	Возврат 24 - ЧасОкончания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьГруппуЗабронироватьПомещение(Форма, Помещение, ЗабронироватьПомещение)
	
	Элементы = Форма.Элементы;
	
	Элементы.Помещение.АвтоОтметкаНезаполненного = ЗабронироватьПомещение;
	Элементы.Помещение.ОтметкаНезаполненного = ЗабронироватьПомещение 
		И Не ЗначениеЗаполнено(Помещение);
	
	Элементы.Помещение.Доступность = ЗабронироватьПомещение;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуНапомнить()
	
	Если Не ДоступныЭлементыПланирования Тогда
		Элементы.Переместить(Элементы.НапомнитьГруппа, Элементы.ДатаВремяГруппа, Элементы.ДатаВремяОкончанияГруппа);
	Иначе
		Элементы.Переместить(Элементы.НапомнитьГруппа, Элементы.ГруппаШапкаПравая, Элементы.ПланировщикГруппа);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПланировщик()
	
	Если Не ЗначениеЗаполнено(Запись.Период) Тогда
		Элементы.Планировщик.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Планировщик.Доступность = Истина;
	
	НастройкиОтображения = РаботаСРабочимКалендарем.ПолучитьНастройкиОтображения();
	
	НастройкиОтображения.Пользователи.Очистить();
	НастройкиОтображения.Пользователи.Добавить(Пользователи.ТекущийПользователь());
	
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты.Очистить();
	НастройкиОтображения.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.ОтображатьЗанятость = Истина;
	НастройкиОтображения.ОтображатьОбщуюЗанятость = Ложь;
	НастройкиОтображения.ОтображатьСобытия = Ложь;
	НастройкиОтображения.ОтображатьСкрытыеЭлементы = Ложь;
	НастройкиОтображения.ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День;
	НастройкиОтображения.НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	НастройкиОтображения.РазмерЯчейкиВремени = РазмерЯчейкиВремени;
	НастройкиОтображения.ОтображатьВремяС = Час(ВремяНачалаОтображения);
	НастройкиОтображения.ОтображатьВремяПо = ПолучитьОтображатьВремяПо();
	
	ПредметыИсключений = СоставКандидатовНаСервере();
	ИсключенияЗанятости = ПолучитьИсключенияЗанятостиНаСервере(ПредметыИсключений);
	Если ЗначениеЗаполнено(ИсключенияЗанятости) Тогда
		НастройкиОтображения.ИсключенияЗанятости = ИсключенияЗанятости;
	КонецЕсли;
	
	РаботаСРабочимКалендарем.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремяКлиент()
	
	Если Не УчастникиОпределены() Тогда
		Возврат;
	КонецЕсли;
	
	Мероприятие = Новый ФиксированнаяСтруктура("ДатаНачала, ДатаОкончания", Запись.Период, Запись.ПериодОкончание);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Мероприятие", Мероприятие);
	ПараметрыФормы.Вставить("УчастникиМероприятия", УсловияУчастияВМероприятии());
	ПараметрыФормы.Вставить("ИсключенияЗанятости", Новый ФиксированныйМассив(ИсключенияЗанятости()));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьВремяКлиентЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ВыборВремени", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремяКлиентЗавершение(Время, ДополнительныеПараметры) Экспорт
	
	Если Время = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись.Период = Время.ДатаНачала;
	Запись.ПериодОкончание = Время.ДатаОкончания;
	
	Если Запись.Период > Запись.ПериодОкончание Тогда
		Запись.ПериодОкончание = Запись.Период + 1 * ДлительностьПоУмолчанию;
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = Запись.Период;
	НачальноеЗначениеДатаОкончания = Запись.ПериодОкончание;
	
	// Включение добавленных во время подбора участников в участники мероприятия
	Для Каждого ДобавленныйУчастник Из Время.ДобавленныеУчастники Цикл
		
		ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
		Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
		
		НоваяСтрока = Участники.Вставить(Индекс + 1);
		НоваяСтрока.Участник = ДобавленныйУчастник;
		
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЦикла;
	
	ПриИзмененииВремениПроведенияЭтапа();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПлановыеДанныеЭтапа()
	
	ДанныеЭтапа = ПодборПерсонала.ДанныеЭтапаРаботыСКандидатами(Кандидаты[0].Кандидат, Запись.ЭтапРаботы);
	
	Если ДанныеЭтапа.Количество() > 0 Тогда
		
		Помещение = ДанныеЭтапа[0].Помещение;
		
		Если ЗначениеЗаполнено(Помещение) Тогда
			ЗабронироватьПомещение = Истина;
			Элементы.Помещение.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Запись.ПериодОкончание = ДанныеЭтапа[0].ПериодОкончание;
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область УчастникиЭтапаРаботы

&НаСервере
Процедура ПрочитатьУчастников()
	
	УчастникиЭтапа = РегистрыСведений.УчастникиЭтапаРаботыСКандидатом.УчастникиЭтапа(Запись.Кандидат, Запись.ЭтапРаботы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Участники, УчастникиЭтапа, "Участник");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковНаСервере(СоставКандидатов)
	
	Участники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кандидаты", СоставКандидатов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Кандидаты.Ссылка КАК Ссылка,
	|	Кандидаты.Ответственный КАК Ответственный,
	|	Кандидаты.Вакансия КАК Вакансия
	|ПОМЕСТИТЬ ВТКандидаты
	|ИЗ
	|	Справочник.Кандидаты КАК Кандидаты
	|ГДЕ
	|	Кандидаты.Ссылка В(&Кандидаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вакансии.Заявитель КАК Ссылка
	|ИЗ
	|	ВТКандидаты КАК Кандидаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вакансии КАК Вакансии
	|		ПО Кандидаты.Вакансия = Вакансии.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Кандидаты.Ответственный
	|ИЗ
	|	ВТКандидаты КАК Кандидаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Участник = Выборка.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасширеннойФормыПодбора()
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	УчастникиЭтапа = Участники.Выгрузить(, "Участник");
	
	Для Каждого СтрокаУчастника Из УчастникиЭтапа Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = СтрокаУчастника.Участник;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников этапа'");
	ПараметрыРасширеннойФормыПодбора = 
		Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи, ПодборГруппНевозможен", 
							ЗаголовокФормыПодбора, ВыбранныеПользователи, Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораУчастника(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Участники.Добавить().Участник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ПодобратьВремяКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УчастникиОпределены()
	
	Если Участники.Количество() = 0 Тогда
		
		Определены = Ложь;
		ТекстСообщения = НСтр("ru = 'Не указаны участники этапа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Участники");
		
	Иначе
		Определены = Истина;
	КонецЕсли;
	
	Возврат Определены;
	
КонецФункции

&НаКлиенте
Функция СоставУчастников()
	
	СоставУчастников = Новый Массив;
	Для Каждого Строка Из Участники Цикл
		
		Если ЗначениеЗаполнено(Строка.Участник) Тогда
			СоставУчастников.Добавить(Строка.Участник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоставУчастников;
	
КонецФункции

&НаКлиенте
Функция СоставКандидатов()
	
	СоставКандидатов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Кандидаты Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Кандидат) Тогда
			СоставКандидатов.Добавить(СтрокаТаблицы.Кандидат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоставКандидатов;
	
КонецФункции

&НаСервере
Функция СоставКандидатовНаСервере()
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Кандидаты, "Кандидат")
	
КонецФункции

&НаКлиенте
Функция ИсключенияЗанятости()
	
	Возврат ПолучитьИсключенияЗанятостиНаСервере(СоставКандидатов());
	
КонецФункции

&НаСервере
Функция ПолучитьИсключенияЗанятостиНаСервере(ПредметыИсключений)
	
	ТаблицаИсключений = Справочники.ЗаписиРабочегоКалендаря.СвязанныеЗаписиКалендаря(ПредметыИсключений, Запись.ЭтапРаботы);
	Возврат ТаблицаИсключений.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Функция УсловияУчастияВМероприятии()
	
	УсловияУчастия = Новый Массив;
	Для Каждого Строка Из Участники Цикл
		Если ЗначениеЗаполнено(Строка.Участник)
			И ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи")Тогда 
			УсловияУчастия.Добавить(Новый Структура("Исполнитель, ЯвкаОбязательна", Строка.Участник, Истина));
		КонецЕсли;
	КонецЦикла;
	
	Возврат УсловияУчастия;
	
КонецФункции

#КонецОбласти

#Область БронированиеПомещений

&НаКлиенте
Процедура ПроверитьВозможностьБронирования(Отказ = Ложь)
	
	Если Не ДоступноБронированиеПомещения Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Отказ = ВозможноБронирование();
	
КонецПроцедуры

&НаСервере
Функция ВозможноБронирование()
	
	Отказ = Ложь;
	ТекстОшибки = "";
	Если Не БронированиеПомещений.ВозможнаБроньПомещения(
				Помещение, 
				Запись.Период, 
				Запись.ПериодОкончание, 
				Пользователи.ТекущийПользователь(), 
				"",
				ТекстОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Помещение", Отказ);
		
	КонецЕсли;
	
	Если Не Отказ 
		И Не БронированиеПомещенийБЗК.ВозможнаБроньПомещенияПоЭтапуРаботы(
		Помещение, 
		Запись.Период, 
		Запись.ПериодОкончание,
		Запись.ЭтапРаботы,
		СоставКандидатовНаСервере()) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#КонецОбласти