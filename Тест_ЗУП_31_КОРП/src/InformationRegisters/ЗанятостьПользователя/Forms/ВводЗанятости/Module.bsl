#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Основание") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
		
		Если Параметры.Основание.Свойство("ДатаНачала") И ЗначениеЗаполнено(Параметры.Основание.ДатаНачала) Тогда
			
			ДатаНачала = Параметры.Основание.ДатаНачала;
			
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("ДатаОкончания") И ЗначениеЗаполнено(Параметры.Основание.ДатаОкончания) Тогда
			
			ДатаОкончания = Параметры.Основание.ДатаОкончания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		ДатаНачала = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ТекущаяДатаСеанса());
		ДатаОкончания = ДатаНачала + 3600;
		
	КонецЕсли;
	
	Занят = Перечисления.СостоянияЗанятости.Занят;
	
	НачальноеЗначениеДатаНачала = ДатаНачала;
	НачальноеЗначениеДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ПриИзмененииДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ПриИзмененииДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДат();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Пометить(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеКлиент(Отказ);
	
	Если НЕ Отказ Тогда
		ПометитьСервер();
		Оповестить("Запись_ЗанятостьПользователя");
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПометитьСервер()
	
	РаботаСРабочимКалендарем.ИзменитьДоступностьВремени(ДатаНачала, ДатаОкончания, Занят);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеКлиент(Отказ)
	
	ПроверитьЗаполнение();
	
	Если ДатаОкончания <= ДатаНачала Тогда
		ТекстПредупреждения = НСтр("ru = 'Дата окончания должна быть больше даты начала.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьСобытия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = ДатаОкончания - ДатаНачала;
	
	Дней = Цел(ДлительностьСек / 86400); // 86400 - число секунд в сутках
	ПредставлениеДней = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 день;;%1 дня;%1 дней;'"), Дней);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600); // 86400 - число секунд в сутках
	ПредставлениеЧасов = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 час;;%1 часа;%1 часов;'"), Часов);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60); // 86400 - число секунд в сутках
	ПредставлениеМинут = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 минута;;%1 минуты;%1 минут;'"), Минут);
	
	Если Дней > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + ПредставлениеДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + ПредставлениеЧасов;
		
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 ИЛИ Часов > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + ПредставлениеМинут;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	// Заполнение списка выбора даты начала
	Элементы.ДатаНачалаВремя.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		ТекДата = НачалоДня(ДатаНачала);
	Иначе
		ТекДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если ДатаНачала > ТекДата И ДатаНачала < ТекДата + 1800 Тогда
			Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ДатаНачала, Формат(ДатаНачала, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	// Заполнение списка выбора даты окончания
	Элементы.ДатаОкончанияВремя.СписокВыбора.Очистить();
	
	СобытиеВПределахОдногоДня = ЗначениеЗаполнено(ДатаНачала)
		И (НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания)
			ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания))
		И ДатаНачала < ДатаОкончания;
	
	Если СобытиеВПределахОдногоДня Тогда
		
		ТекДата = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ДатаНачала);
		Если ДатаОкончания > ТекДата - 1800 И ДатаОкончания < ТекДата Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ДатаОкончания, Формат(ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекДата = НачалоДня(ДатаОкончания);
	Иначе
		ТекДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Если СобытиеВПределахОдногоДня И ТекДата > КонецДня(ДатаНачала) Тогда
			Прервать;
		КонецЕсли;
		
		Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если ДатаОкончания > ТекДата И ДатаОкончания < ТекДата + 1800 Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ДатаОкончания, Формат(ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, "00:00");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДат()
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		ДатаНачала, ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

#КонецОбласти