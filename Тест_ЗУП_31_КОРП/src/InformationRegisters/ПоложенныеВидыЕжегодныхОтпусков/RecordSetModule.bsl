#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	// Очищаемся вторичный регистр при необходимости.
	ТаблицаЗапроса = ТаблицаИзмеренийУдаляемыхЗаписейЗаработанныхОтпусков();
	ОстаткиОтпусков.УдалитьЗаписиЗаработанныхОтпусков(ТаблицаЗапроса);
	
	// Обновляем движения с возвратными показателями.
	ВозвратныеРесурсыПлановыеНачисления = "Используется, КоличествоДнейВГод";
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыПлановыеНачисления);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Ложь);
	КадровыйУчетРасширенный.ОбновитьВторичныеДанныеВозвратногоРегистра(ЭтотОбъект, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
	
	// В случае наличия отпусков, зависящих от стажа, их необходимо обработать.
	Если ОстаткиОтпусков.ЕстьСтажевыеОтпуска() Тогда
		ОстаткиОтпусков.ОчиститьПредыдущиеДвиженияСтажевыхОтпусков(ЭтотОбъект, Отказ, Замещение);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	// Обновляем движения с возвратными показателями.
	ВозвратныеРесурсыПлановыеНачисления = "Используется, КоличествоДнейВГод";
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыПлановыеНачисления);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Ложь);
	КадровыйУчетРасширенный.ОбновитьВторичныеДанныеВозвратногоРегистра(ЭтотОбъект, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
	
	// В случае наличия отпусков, зависящих от стажа, их необходимо обработать.
	Если ОстаткиОтпусков.ЕстьСтажевыеОтпуска() Тогда
		ОстаткиОтпусков.ДополнитьДвиженияСтажевыхОтпусков(ЭтотОбъект, Отказ, Замещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаИзмеренийУдаляемыхЗаписейЗаработанныхОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТЗ.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков) КАК ВидЕжегодногоОтпуска,
		|	ТЗ.КоличествоДнейВГод,
		|	НАЧАЛОПЕРИОДА(ТЗ.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ НовыйНабор
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ СтарыйНабор
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НовыйНабор.Сотрудник, СтарыйНабор.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(НовыйНабор.ВидЕжегодногоОтпуска, СтарыйНабор.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.КоличествоДнейВГод, 0) <> ЕСТЬNULL(СтарыйНабор.КоличествоДнейВГод, 0)
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БылиИзменения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА СтарыйНабор.Период
		|		КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА НовыйНабор.Период
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|					ТОГДА ЕСТЬNULL(НовыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|				ИНАЧЕ ЕСТЬNULL(СтарыйНабор.Период, ДАТАВРЕМЯ(1, 1, 1))
		|			КОНЕЦ
		|	КОНЕЦ КАК РаннийПериод
		|ПОМЕСТИТЬ СравнительныйНабор
		|ИЗ
		|	НовыйНабор КАК НовыйНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ СтарыйНабор КАК СтарыйНабор
		|		ПО НовыйНабор.Сотрудник = СтарыйНабор.Сотрудник
		|			И НовыйНабор.ВидЕжегодногоОтпуска = СтарыйНабор.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СравнительныйНабор.Сотрудник,
		|	СравнительныйНабор.ВидЕжегодногоОтпуска,
		|	СравнительныйНабор.РаннийПериод
		|ПОМЕСТИТЬ ИзменившиесяЗаписи
		|ИЗ
		|	СравнительныйНабор КАК СравнительныйНабор
		|ГДЕ
		|	СравнительныйНабор.БылиИзменения = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменившиесяЗаписи.Сотрудник,
		|	ИзменившиесяЗаписи.ВидЕжегодногоОтпуска,
		|	МИНИМУМ(ИзменившиесяЗаписи.РаннийПериод) КАК Период
		|ИЗ
		|	ИзменившиесяЗаписи КАК ИзменившиесяЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзменившиесяЗаписи.Сотрудник,
		|	ИзменившиесяЗаписи.ВидЕжегодногоОтпуска";
	
	ТаблицаНовыхДвижений = ЭтотОбъект.Выгрузить(,"Сотрудник,ВидЕжегодногоОтпуска,КоличествоДнейВГод,Период");
	Запрос.УстановитьПараметр("ТЗ", ТаблицаНовыхДвижений);
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Отбор.Регистратор.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти 

#КонецЕсли