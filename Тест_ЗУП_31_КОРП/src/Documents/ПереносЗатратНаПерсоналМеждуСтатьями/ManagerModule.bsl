#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.Отпуск - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Отпуск - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	Организация 	  = РеквизитыДляПроведения.Организация;
	ПериодРегистрации = РеквизитыДляПроведения.ПериодРегистрации;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации,
			ДанныеДляПроведения.НачисленияСотрудников, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
		
		Если ДанныеДляПроведения.НДФЛ <> Неопределено И ДанныеДляПроведения.НДФЛ.Количество() > 0 Тогда
			УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, ПериодРегистрации,
				ДанныеДляПроведения.НДФЛ, Неопределено, Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
		КонецЕсли;
		
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
			Движения, Отказ, Организация, ПериодРегистрации,
			ДанныеДляПроведения.НачисленияСотрудников, ДанныеДляПроведения.УдержанияПоСотрудникам, ДанныеДляПроведения.НДФЛ, Ложь);
		
		
		Если ДанныеДляПроведения.СтраховыеВзносыПоФизическимЛицам <> Неопределено И ДанныеДляПроведения.СтраховыеВзносыПоФизическимЛицам.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляПроведения.СтраховыеВзносыПоФизическимЛицам, Движения.СтраховыеВзносыПоФизическимЛицам);
			Движения.СтраховыеВзносыПоФизическимЛицам.Записывать = Истина;
		КонецЕсли;
		
		Если ДанныеДляПроведения.СведенияОДоходахНДФЛ <> Неопределено И ДанныеДляПроведения.СведенияОДоходахНДФЛ.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляПроведения.СведенияОДоходахНДФЛ, Движения.СведенияОДоходахНДФЛ);
			Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		
		Если ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий <> Неопределено И ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий, Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий);
			Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Записывать = Истина;
		КонецЕсли;
		
		Если ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС <> Неопределено И ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС, Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС);
			Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ПереносЗатратНаПерсоналМеждуСтатьями;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыДляПроведения(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.ПериодРегистрации КАК ПериодРегистрации,
	|	Документ.Организация КАК Организация,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Документ.СуммаИтого КАК СуммаИтого,
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПереносЗатратНаПерсоналМеждуСтатьями КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Затраты.НомерСтроки КАК НомерСтроки,
	|	Затраты.ИдентификаторСтрокиЗатрат КАК ИдентификаторСтрокиЗатрат,
	|	Затраты.Сотрудник КАК Сотрудник,
	|	Затраты.Подразделение КАК Подразделение,
	|	Затраты.Начисление КАК Начисление,
	|	Затраты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Затраты.СтатьяРасходов КАК СтатьяРасходов,
	|	Затраты.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Затраты.Сумма КАК Сумма,
	|	Затраты.Зарплата КАК Зарплата,
	|	Затраты.ПФРДоПредельнойВеличины КАК ПФРДоПредельнойВеличины,
	|	Затраты.ПФРСПревышения КАК ПФРСПревышения,
	|	Затраты.ПФРПоСуммарномуТарифу КАК ПФРПоСуммарномуТарифу,
	|	Затраты.ФСС КАК ФСС,
	|	Затраты.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	Затраты.ФФОМС КАК ФФОМС,
	|	Затраты.ПФРНаДоплатуЛетчикам КАК ПФРНаДоплатуЛетчикам,
	|	Затраты.ПФРНаДоплатуШахтерам КАК ПФРНаДоплатуШахтерам,
	|	Затраты.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	Затраты.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	Затраты.ПФРСтраховая КАК ПФРСтраховая,
	|	Затраты.ПФРНакопительная КАК ПФРНакопительная,
	|	Затраты.ТФОМС КАК ТФОМС,
	|	Затраты.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	|	Затраты.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	|	Затраты.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	|	Затраты.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	|ИЗ
	|	Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Затраты КАК Затраты
	|ГДЕ
	|	Затраты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переносы.НомерСтроки КАК НомерСтроки,
	|	Переносы.ИдентификаторСтрокиЗатрат КАК ИдентификаторСтрокиЗатрат,
	|	Переносы.ИдентификаторСтрокиПереноса КАК ИдентификаторСтрокиПереноса,
	|	Переносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	Переносы.СтатьяРасходов КАК СтатьяРасходов,
	|	Переносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Переносы.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Переносы КАК Переносы
	|ГДЕ
	|	Переносы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	Пока ВыборкаРеквизиты.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
	КонецЦикла;
	
	РеквизитыДляПроведения.Затраты  = Результаты[1].Выгрузить();
	РеквизитыДляПроведения.Переносы = Результаты[2].Выгрузить();
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура() Экспорт 
	
	Возврат Новый Структура("Ссылка,Номер,Дата,ПериодРегистрации,Организация,Подразделение,СтатьяФинансирования,СуммаИтого,Затраты,Переносы");
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета)

	ДанныеДляПроведения = Новый Структура("
	|НачисленияСотрудников,
	|СтраховыеВзносыПоФизическимЛицам,
	|УдержанияПоСотрудникам,
	|НДФЛ,
	|СведенияОДоходахНДФЛ,
	|ДанныеСреднегоЗаработкаОбщий,
	|ДанныеСреднегоЗаработкаФСС");
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Переносы = РеквизитыДляПроведения.Переносы;
	Затраты = РеквизитыДляПроведения.Затраты;
	
	ИсправленныеСтроки = РеквизитыДляПроведения.Переносы.ВыгрузитьКолонку("ИдентификаторСтрокиЗатрат");
	ИсправленныеСтроки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсправленныеСтроки);
	
	Если ИсправленныеСтроки.Количество() = 0 Тогда
		Возврат ДанныеДляПроведения;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Для каждого СтрокаТЧ Из Затраты Цикл
		Если ИсправленныеСтроки.Найти(СтрокаТЧ.ИдентификаторСтрокиЗатрат) <> Неопределено Тогда
			Если Сотрудники.Найти(СтрокаТЧ.Сотрудник) = Неопределено Тогда
				Сотрудники.Добавить(СтрокаТЧ.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоляВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина));
	// заполним таблицы НачисленияСотрудников и СтраховыеВзносыПоФизическимЛицам
	ЗаполнитьНачисленияИВзносы(РеквизитыДляПроведения, ИсправленныеСтроки, ДанныеДляПроведения, Сотрудники, ПоляВзносов);
	
	ТекстОшибки = НСтр("ru = 'Проведение документа нарушит баланс распределения затрат по статьям. Возможно, данные в документе устарели, заполните документ еще раз и повторите операцию переноса затрат.'");
	Если ДанныеДляПроведения.НачисленияСотрудников.Итог("Сумма") <> 0 Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для каждого ИмяРесурса Из ПоляВзносов Цикл
		Если ДанныеДляПроведения.СтраховыеВзносыПоФизическимЛицам.Итог(ИмяРесурса) <> 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ДанныеДляПроведения.УдержанияПоСотрудникам = УдержанияПоСотрудникам(РеквизитыДляПроведения, Сотрудники, ДанныеДляПроведения.НачисленияСотрудников);
		Если ДанныеДляПроведения.УдержанияПоСотрудникам <> Неопределено И ДанныеДляПроведения.УдержанияПоСотрудникам.Итог("Сумма") <> 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеДляПроведения.НДФЛ = НДФЛПоСотрудникам(РеквизитыДляПроведения, Сотрудники, ДанныеДляПроведения.НачисленияСотрудников);
		Если ДанныеДляПроведения.НДФЛ <> Неопределено И ДанныеДляПроведения.НДФЛ.Итог("Сумма") <> 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеДляПроведения.СведенияОДоходахНДФЛ = СведенияОДоходахНДФЛ(ДанныеДляПроведения.НачисленияСотрудников);
		Если ДанныеДляПроведения.СведенияОДоходахНДФЛ <> Неопределено 
			И (ДанныеДляПроведения.СведенияОДоходахНДФЛ.Итог("СуммаДохода") <> 0 Или ДанныеДляПроведения.СведенияОДоходахНДФЛ.Итог("СуммаВычета")) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		
		ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий = УчетСреднегоЗаработка.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаПослеПереносаЗатрат(ДанныеДляПроведения.НачисленияСотрудников, Переносы);
		Если ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий <> Неопределено И ДанныеДляПроведения.ДанныеСреднегоЗаработкаОбщий.Итог("Сумма") <> 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахованияРасширенный.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаПослеПереносаЗатрат(ДанныеДляПроведения.НачисленияСотрудников, Переносы);
		Если ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС <> Неопределено И ДанныеДляПроведения.ДанныеСреднегоЗаработкаФСС.Итог("Сумма") <> 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;	

КонецФункции

Процедура ЗаполнитьНачисленияИВзносы(РеквизитыДляПроведения, ИсправленныеСтроки, ДанныеДляПроведения, Сотрудники, ПоляВзносов)

	Переносы = РеквизитыДляПроведения.Переносы;
	Затраты = РеквизитыДляПроведения.Затраты;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарегистрированныеДанныеПоСотрудникам(РеквизитыДляПроведения, МенеджерВременныхТаблиц, Сотрудники);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;  

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТВзносы КАК Взносы";
	Результат  = Запрос.ВыполнитьПакет();
	Начисления = Результат[0].Выгрузить();
	Взносы 	   = Результат[1].Выгрузить();
	
	НачисленияСотрудников = Начисления.СкопироватьКолонки();
	НачисленияСотрудников.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	НачисленияСотрудников.Колонки.Добавить("ИдентификаторСтрокиЗатрат", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	СтраховыеВзносыПоФизическимЛицам = Взносы.СкопироватьКолонки();
	
	ПоляГруппировкиВзносов = Новый Массив;
	Для каждого КолонкаТЗ Из СтраховыеВзносыПоФизическимЛицам.Колонки Цикл
		Если ПоляВзносов.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			ПоляГруппировкиВзносов.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
	КонецЦикла;
	ПоляГруппировкиВзносовСтрока = СтрСоединить(ПоляГруппировкиВзносов,",");
	
	СтрокаСвойстПоиска = "Сотрудник,Подразделение,Начисление,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования";
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		СтрокаСвойстПоиска = СтрокаСвойстПоиска +",СтатьяРасходов";
	КонецЕсли;
	ОтборЗатрат = Новый Структура(СтрокаСвойстПоиска);
	Отбор = Новый Структура("ИдентификаторСтрокиЗатрат");
	
	НачислениеУдержаниеВидОперации = ОтражениеЗарплатыВУчете.НачислениеУдержаниеВидОперации();
	ВидыОперацийБезСпособаОтражения = ОтражениеЗарплатыВБухучетеРасширенный.ВидыОперацийПоЗарплатеБезСпособаОтражения();
	СпособОтраженияЗаполняется = Новый Соответствие;
	Для каждого КлючИЗначение Из НачислениеУдержаниеВидОперации Цикл
		СпособОтраженияЗаполняется.Вставить(КлючИЗначение.Ключ, (ВидыОперацийБезСпособаОтражения.Найти(КлючИЗначение.Значение) = Неопределено));
	КонецЦикла;
	
	// Начало заполнения таблиц НачисленияСотрудников и СтраховыеВзносыПоФизическимЛицам.
	Для каждого ИдентификаторСтроки Из ИсправленныеСтроки Цикл
		
		Отбор.ИдентификаторСтрокиЗатрат = ИдентификаторСтроки;
		ВсегоСуммаЗатрат = 0;
		СтрокиПереноса = Переносы.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из СтрокиПереноса Цикл
			ВсегоСуммаЗатрат = ВсегоСуммаЗатрат + СтрокаТЧ.Сумма;
		КонецЦикла;
		
		СтрокаЗатрат = Затраты.Найти(ИдентификаторСтроки, "ИдентификаторСтрокиЗатрат");
		ЗаполнитьЗначенияСвойств(ОтборЗатрат, СтрокаЗатрат);
		СтрокиНачислений = Начисления.НайтиСтроки(ОтборЗатрат);
		СтрокиВзносов    = Взносы.НайтиСтроки(ОтборЗатрат);
		
		Если ВсегоСуммаЗатрат = СтрокаЗатрат.Сумма Тогда
			ДоляНачислений = СтрокаЗатрат.Зарплата;
		Иначе
			ДоляНачислений = Окр(СтрокаЗатрат.Зарплата * ВсегоСуммаЗатрат / СтрокаЗатрат.Сумма, 2);
		КонецЕсли;
		ДоляВзносов = ВсегоСуммаЗатрат - ДоляНачислений;
		
		Если ДоляНачислений <> 0 Тогда
			ЗаполнитьНачисленияСотрудников(НачисленияСотрудников, СтрокиНачислений, СтрокиПереноса, ДоляНачислений, СпособОтраженияЗаполняется, ИдентификаторСтроки);
		КонецЕсли;
		
		Если ДоляВзносов <> 0 Тогда
			ЗаполнитьСтраховыеВзносыПоФизическимЛицам(СтраховыеВзносыПоФизическимЛицам, СтрокиВзносов, СтрокиПереноса, ДоляВзносов, ПоляВзносов, ПоляГруппировкиВзносовСтрока, СпособОтраженияЗаполняется);
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеДляПроведения.НачисленияСотрудников = НачисленияСотрудников;
	ДанныеДляПроведения.СтраховыеВзносыПоФизическимЛицам = СтраховыеВзносыПоФизическимЛицам;

КонецПроцедуры

Функция УдержанияПоСотрудникам(РеквизитыДляПроведения, Сотрудники, НачисленияСотрудников)

	Организация = РеквизитыДляПроведения.Организация;
	Ссылка = РеквизитыДляПроведения.Ссылка;
	ПериодРегистрации = РеквизитыДляПроведения.ПериодРегистрации;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ссылка);
	Запрос.УстановитьПараметр("РаботаВБюджетномУчреждении", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.НачислениеУдержание КАК НачислениеУдержание,
	|	Удержания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &РаботаВБюджетномУчреждении
	|			ТОГДА Удержания.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Сумма КАК Сумма,
	|	Удержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	Удержания.ПериодДействия КАК ПериодДействия,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.ВидОперации КАК ВидОперации,
	|	Удержания.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Удержания.Регистратор ССЫЛКА Документ.ПереносЗатратНаПерсоналМеждуСтатьями
	|			ТОГДА Удержания.ПервичныйРегистратор
	|		ИНАЧЕ Удержания.Регистратор
	|	КОНЕЦ КАК ПервичныйРегистратор
	|ПОМЕСТИТЬ ВТЗарегистрированныеУдержания
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК Удержания
	|ГДЕ
	|	Удержания.Период = &ПериодРегистрации
	|	И Удержания.Сотрудник В(&Сотрудники)
	|	И НЕ Удержания.НеУчитыватьВРаспределенииПриОкончательномРасчете
	|	И Удержания.Регистратор <> &ИсключаемыйРегистратор
	|	И Удержания.Сумма <> 0
	|	И Удержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НЕ Удержания.НачислениеУдержание В (&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.НачислениеУдержание КАК ВидУдержания,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА Удержания.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА Удержания.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ПлатежныйАгент,
	|	ВЫБОР
	|		КОГДА Удержания.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ Удержания.Контрагент
	|	КОНЕЦ КАК Получатель,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(Удержания.Сумма) КАК Сумма,
	|	Удержания.ПервичныйРегистратор КАК ПервичныйРегистратор
	|ИЗ
	|	ВТЗарегистрированныеУдержания КАК Удержания
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ДокументОснование,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Сотрудник,
	|	ВЫБОР
	|		КОГДА Удержания.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА Удержания.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ,
	|	Удержания.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Удержания.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ Удержания.Контрагент
	|	КОНЕЦ,
	|	Удержания.НачислениеУдержание,
	|	Удержания.Контрагент,
	|	Удержания.ДатаНачала,
	|	Удержания.ПервичныйРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Удержания.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеУдержания.Регистратор КАК Регистратор
	|ИЗ
	|	ВТЗарегистрированныеУдержания КАК ЗарегистрированныеУдержания"; 
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаУдержаний = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатРасчетаУдержаний();
	ТаблицаУдержаний.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаУдержаний.Колонки.Добавить("ПервичныйРегистратор",Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам.СтандартныеРеквизиты.Регистратор.Тип);
	Выборка = Результат[1].Выбрать();
	ИдентификаторСтроки = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки +1;
	КонецЦикла;
	
	РегистраторыУдержанийОбновленияБухучета = Результат[2].Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория
	|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
	|ИЗ
	|	&НачисленияСотрудников КАК Начисления";
	Запрос.Выполнить();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц  = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= ПериодРегистрации;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= "ВТБухучетНачисленийВыходнаяТаблица";
	ИсходныеДанные.ОкончательныйРасчет		= Истина;
	ИсходныеДанные.ИсключаемыйРегистратор 	= Ссылка;
	ИсходныеДанные.ТаблицаУдержаний			= ТаблицаУдержаний;
	ИсходныеДанные.ТаблицаЗаймов			= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	ИсходныеДанные.РегистраторыУдержанийОбновленияБухучета = РегистраторыУдержанийОбновленияБухучета;
	ИсходныеДанные.ВидыНачисленийДополненияРасчетнойБазы = ОтражениеЗарплатыВБухучетеРасширенный.ВидыНачисленийДополненияРасчетнойБазыУдержаний();
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеУдержанийИЗаймовВБухучете(ИсходныеДанные);
	
	БухучетУдержаний = РезультатыОтраженияВБухучете.БухучетУдержаний;
	
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.УстановитьПараметр("БухучетУдержаний", БухучетУдержаний);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.ВидУдержания КАК ВидУдержания,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетУдержаний.Сотрудник КАК Сотрудник,
	|	БухучетУдержаний.ВидУдержания КАК ВидУдержания,
	|	БухучетУдержаний.Подразделение КАК Подразделение,
	|	БухучетУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетУдержаний.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетУдержаний.Результат КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетУдержаний
	|ИЗ
	|	&БухучетУдержаний КАК БухучетУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	Удержания.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	СУММА(Удержания.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Удержания.Сотрудник КАК Сотрудник,
	|		Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетУдержаний.Подразделение КАК Подразделение,
	|		Удержания.ВидУдержания КАК Удержание,
	|		Удержания.ДокументОснование КАК ДокументОснование,
	|		Удержания.Контрагент КАК Контрагент,
	|		Удержания.ДатаНачала КАК ДатаНачала,
	|		Удержания.ДатаОкончания КАК ДатаОкончания,
	|		Удержания.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|		БухучетУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетУдержаний.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетУдержаний.Сумма КАК Сумма
	|	ИЗ
	|		ВТУдержания КАК Удержания
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетУдержаний КАК БухучетУдержаний
	|			ПО Удержания.ИдентификаторСтроки = БухучетУдержаний.ИдентификаторСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарегистрированныеУдержания.Сотрудник,
	|		ЗарегистрированныеУдержания.ФизическоеЛицо,
	|		ЗарегистрированныеУдержания.Подразделение,
	|		ЗарегистрированныеУдержания.НачислениеУдержание,
	|		ЗарегистрированныеУдержания.ДокументОснование,
	|		ЗарегистрированныеУдержания.Контрагент,
	|		ЗарегистрированныеУдержания.ДатаНачала,
	|		ЗарегистрированныеУдержания.ДатаОкончания,
	|		ЗарегистрированныеУдержания.ПервичныйРегистратор,
	|		ЗарегистрированныеУдержания.СтатьяФинансирования,
	|		ЗарегистрированныеУдержания.СтатьяРасходов,
	|		-ЗарегистрированныеУдержания.Сумма
	|	ИЗ
	|		ВТЗарегистрированныеУдержания КАК ЗарегистрированныеУдержания) КАК Удержания
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ФизическоеЛицо,
	|	Удержания.СтатьяФинансирования,
	|	Удержания.Подразделение,
	|	Удержания.Контрагент,
	|	Удержания.ДатаНачала,
	|	Удержания.СтатьяРасходов,
	|	Удержания.Сотрудник,
	|	Удержания.ДокументОснование,
	|	Удержания.Удержание,
	|	Удержания.ДатаОкончания,
	|	Удержания.ПервичныйРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Удержания.Сумма) <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция СведенияОДоходахНДФЛ(НачисленияСотрудников)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	Начисления.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКорректировкиНачислений
	|ИЗ
	|	&НачисленияСотрудников КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкиНачислений.Регистратор КАК Регистратор,
	|	КорректировкиНачислений.Сотрудник КАК Сотрудник,
	|	КорректировкиНачислений.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТДанныеДляОтбора
	|ИЗ
	|	ВТКорректировкиНачислений КАК КорректировкиНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.Начисление КАК НачислениеУдержание,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Территория КАК ТерриторияВыполненияРаботВОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) КАК ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Начисления.Подразделение КАК Подразделение,
	|		Начисления.Начисление КАК Начисление,
	|		Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|		Начисления.Сумма КАК Сумма,
	|		Начисления.ДатаНачала КАК ДатаНачала,
	|		Начисления.Территория КАК Территория
	|	ИЗ
	|		ВТКорректировкиНачислений КАК Начисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БухучетНачисления.Сотрудник,
	|		БухучетНачисления.ФизическоеЛицо,
	|		БухучетНачисления.Подразделение,
	|		БухучетНачисления.НачислениеУдержание,
	|		БухучетНачисления.СтатьяРасходов,
	|		БухучетНачисления.СтатьяФинансирования,
	|		БухучетНачисления.Сумма,
	|		БухучетНачисления.ДатаНачала,
	|		БухучетНачисления.ТерриторияВыполненияРаботВОрганизации
	|	ИЗ
	|		РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляОтбора КАК ДанныеДляОтбора
	|			ПО БухучетНачисления.Регистратор = ДанныеДляОтбора.Регистратор
	|				И БухучетНачисления.Сотрудник = ДанныеДляОтбора.Сотрудник
	|				И БухучетНачисления.НачислениеУдержание = ДанныеДляОтбора.Начисление) КАК БухучетНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.СтатьяРасходов,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.Территория,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.СтатьяФинансирования
	|
	|ИМЕЮЩИЕ
	|	СУММА(БухучетНачислений.Сумма) <> 0";
	БухучетНачислений = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляОтбора КАК ДанныеДляОтбора
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ДанныеДляОтбора.Регистратор
	|			И СведенияОДоходахНДФЛ.Сотрудник = ДанныеДляОтбора.Сотрудник
	|			И СведенияОДоходахНДФЛ.Начисление = ДанныеДляОтбора.Начисление";
	СведенияОДоходах = Запрос.Выполнить().Выгрузить();
	
	СведенияОДоходах.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		СтрокаТЗ.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	НовыеСведенияОДоходах = ОтражениеЗарплатыВБухучетеРасширенный.НовыеСведенияОДоходахДополненныеСтатьейФинансирования(СведенияОДоходах, БухучетНачислений);
	Если НовыеСведенияОДоходах.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из СведенияОДоходах Цикл
		НоваяСтрока = НовыеСведенияОДоходах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.СуммаДохода = - НоваяСтрока.СуммаДохода;
		НоваяСтрока.СуммаВычета = - НоваяСтрока.СуммаВычета;
	КонецЦикла;
	
	Возврат НовыеСведенияОДоходах;

КонецФункции 

Функция НДФЛПоСотрудникам(РеквизитыДляПроведения, Сотрудники, НачисленияСотрудников)

	Ссылка            = РеквизитыДляПроведения.Ссылка;
	ПериодРегистрации = РеквизитыДляПроведения.ПериодРегистрации;
	Организация       = РеквизитыДляПроведения.Организация;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ссылка);
	Запрос.УстановитьПараметр("РаботаВБюджетномУчреждении", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	Запрос.УстановитьПараметр("ВидыОсобыхНачисленийИУдержанийНДФЛ", ОтражениеЗарплатыВУчете.ВидыОсобыхНачисленийИУдержанийНДФЛ(Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.НачислениеУдержание КАК НачислениеУдержание,
	|	Удержания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	ВЫБОР
	|		КОГДА &РаботаВБюджетномУчреждении
	|			ТОГДА Удержания.СтатьяРасходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Сумма КАК Сумма,
	|	Удержания.ПериодДействия КАК ПериодДействия,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.ВидОперации КАК ВидОперации,
	|	Удержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	Удержания.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	Удержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Удержания.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Удержания.Регистратор ССЫЛКА Документ.ПереносЗатратНаПерсоналМеждуСтатьями
	|			ТОГДА Удержания.ПервичныйРегистратор
	|		ИНАЧЕ Удержания.Регистратор
	|	КОНЕЦ КАК ПервичныйРегистратор,
	|	Удержания.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТЗарегистрированныйНДФЛ
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК Удержания
	|ГДЕ
	|	Удержания.Период = &ПериодРегистрации
	|	И Удержания.Сотрудник В(&Сотрудники)
	|	И НЕ Удержания.НеУчитыватьВРаспределенииПриОкончательномРасчете
	|	И Удержания.Регистратор <> &ИсключаемыйРегистратор
	|	И Удержания.Сумма <> 0
	|	И Удержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И Удержания.НачислениеУдержание В(&ВидыОсобыхНачисленийИУдержанийНДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	НДФЛ.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	СУММА(НДФЛ.Сумма) КАК Сумма,
	|	НДФЛ.НачислениеУдержание КАК ВидУдержания,
	|	НДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛ.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	НДФЛ.КатегорияДохода КАК КатегорияДохода
	|ИЗ
	|	ВТЗарегистрированныйНДФЛ КАК НДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛ.ДатаПолученияДохода,
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.НачислениеУдержание,
	|	НДФЛ.ТерриторияВыполненияРаботВОрганизации,
	|	НДФЛ.РегистрацияВНалоговомОргане,
	|	НДФЛ.ПервичныйРегистратор,
	|	НДФЛ.КатегорияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛ.Регистратор КАК Регистратор
	|ИЗ
	|	ВТЗарегистрированныйНДФЛ КАК НДФЛ"; 
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[1].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаРезультатРасчетаНДФЛ();
	ТаблицаНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане",Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаНДФЛ.Колонки.Добавить("ПервичныйРегистратор",Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам.СтандартныеРеквизиты.Регистратор.Тип);
	Выборка = Результат[1].Выбрать();
	ИдентификаторСтроки = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки +1;
	КонецЦикла;
	
	РегистраторыНДФЛОбновленияБухучета = Результат[2].Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ТерриторияВыполненияРаботВОрганизации КАК Территория
	|ПОМЕСТИТЬ ВТБухучетНачисленийВыходнаяТаблица
	|ИЗ
	|	&НачисленияСотрудников КАК Начисления";
	Запрос.Выполнить();
	
	ИсходныеДанные = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеИсходныхДанныхДляОтраженияУдержанийВБухучете();
	ИсходныеДанные.МенеджерВременныхТаблиц  = МенеджерВременныхТаблиц;
	ИсходныеДанные.Организация    			= Организация;
	ИсходныеДанные.МесяцНачисления 			= ПериодРегистрации;
	ИсходныеДанные.ИмяВТБухучетНачислений 	= "ВТБухучетНачисленийВыходнаяТаблица";
	ИсходныеДанные.ОкончательныйРасчет		= Истина;
	ИсходныеДанные.ИсключаемыйРегистратор 	= Ссылка;
	ИсходныеДанные.РезультатРасчетаНДФЛ		= ТаблицаНДФЛ;
	ИсходныеДанные.НДФЛКЗачету		 		= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	ИсходныеДанные.НДФЛЗачтено		 		= ОтражениеЗарплатыВБухучетеРасширенный.НоваяТаблицаКорректировкиВыплаты();
	ИсходныеДанные.РегистраторыУдержанийОбновленияБухучета = РегистраторыНДФЛОбновленияБухучета;
	
	РезультатыОтраженияВБухучете = ОтражениеЗарплатыВБухучетеРасширенный.ВыполнитьОтражениеНДФЛИКорректировокВыплатыВБухучете(ИсходныеДанные);
	
	БухучетНДФЛ = РезультатыОтраженияВБухучете.БухучетНДФЛ;
	
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНДФЛ);
	Запрос.УстановитьПараметр("БухучетНДФЛ", БухучетНДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛ.ВидУдержания КАК ВидУдержания,
	|	НДФЛ.Территория КАК Территория,
	|	НДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	НДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛ.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	НДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	НДФЛ.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_НДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК НДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	БухучетНДФЛ.Сотрудник КАК Сотрудник,
	|	БухучетНДФЛ.ВидУдержания КАК ВидУдержания,
	|	БухучетНДФЛ.Подразделение КАК Подразделение,
	|	БухучетНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНДФЛ.Результат КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНДФЛ
	|ИЗ
	|	&БухучетНДФЛ КАК БухучетНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛ.ВидУдержания КАК ВидУдержания,
	|	НДФЛ.Территория КАК Подразделение,
	|	НДФЛ.ДатаПолученияДохода КАК МесяцНалоговогоПериода,
	|	НДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛ.Сотрудник КАК Сотрудник,
	|	НДФЛ.Подразделение КАК ПодразделениеСотрудника,
	|	НДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НДФЛ.Сумма) КАК Сумма,
	|	НДФЛ.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	НДФЛ.КатегорияДохода КАК КатегорияДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		БухучетНДФЛ.Сотрудник КАК Сотрудник,
	|		НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|		БухучетНДФЛ.Подразделение КАК Подразделение,
	|		НДФЛ.ВидУдержания КАК ВидУдержания,
	|		НДФЛ.Территория КАК Территория,
	|		НДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		НДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		НДФЛ.КатегорияДохода КАК КатегорияДохода,
	|		НДФЛ.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|		БухучетНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|		БухучетНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|		БухучетНДФЛ.Сумма КАК Сумма
	|	ИЗ
	|		ВТ_НДФЛ КАК НДФЛ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетНДФЛ КАК БухучетНДФЛ
	|			ПО НДФЛ.ИдентификаторСтроки = БухучетНДФЛ.ИдентификаторСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛ.Сотрудник,
	|		НДФЛ.ФизическоеЛицо,
	|		НДФЛ.Подразделение,
	|		НДФЛ.НачислениеУдержание,
	|		НДФЛ.ТерриторияВыполненияРаботВОрганизации,
	|		НДФЛ.ДатаПолученияДохода,
	|		НДФЛ.РегистрацияВНалоговомОргане,
	|		НДФЛ.КатегорияДохода,
	|		НДФЛ.ПервичныйРегистратор,
	|		НДФЛ.СтатьяФинансирования,
	|		НДФЛ.СтатьяРасходов,
	|		-НДФЛ.Сумма
	|	ИЗ
	|		ВТЗарегистрированныйНДФЛ КАК НДФЛ) КАК НДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛ.Территория,
	|	НДФЛ.ВидУдержания,
	|	НДФЛ.ФизическоеЛицо,
	|	НДФЛ.ДатаПолученияДохода,
	|	НДФЛ.Подразделение,
	|	НДФЛ.СтатьяФинансирования,
	|	НДФЛ.СтатьяРасходов,
	|	НДФЛ.РегистрацияВНалоговомОргане,
	|	НДФЛ.Сотрудник,
	|	НДФЛ.ПервичныйРегистратор,
	|	НДФЛ.КатегорияДохода
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДФЛ.Сумма) <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ЗаполнитьНачисленияСотрудников(НачисленияСотрудников, СтрокиНачислений, СтрокиПереноса, СуммаПереноса, СпособОтраженияЗаполняется, ИдентификаторСтрокиЗатрат)
	
	СвойстваИсключения = "ДокументОснование";
	СуммаПоложительная = (СуммаПереноса>0);
	БазовыеСтроки = Новый Массив;
	
	Коэффициенты = Новый Массив;
	СуммаСтрок = 0;
	Для каждого СтрокаТЗ Из СтрокиНачислений Цикл
		// отбираем строки того же знака, что и сумма переноса
		Если СуммаПоложительная И СтрокаТЗ.Сумма>0 Или НЕ СуммаПоложительная И СтрокаТЗ.Сумма<0 Тогда
			СуммаСтрок = СуммаСтрок + СтрокаТЗ.Сумма;
			БазовыеСтроки.Добавить(СтрокаТЗ);
			Коэффициенты.Добавить(СтрокаТЗ.Сумма);
		КонецЕсли;
	КонецЦикла;
	
	// зарегистрируем списание затрат
	Если СуммаСтрок = СуммаПереноса Тогда
		
		Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
			НоваяСтрока = НачисленияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,СвойстваИсключения);
			НоваяСтрока.Сумма = - НоваяСтрока.Сумма;
			НоваяСтрока.Сторно = Истина;
			НоваяСтрока.ИдентификаторСтрокиЗатрат = ИдентификаторСтрокиЗатрат;
			НоваяСтрока.ПервичныйРегистратор = СтрокаТЗ.ПервичныйРегистраторНовойЗаписи;
		КонецЦикла;
		
	Иначе
		
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаПереноса, Коэффициенты);
		Если Результаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
			НоваяСтрока = НачисленияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,СвойстваИсключения);
			НоваяСтрока.Сумма = - Результаты[Индекс];
			НоваяСтрока.Сторно = Истина;
			НоваяСтрока.ИдентификаторСтрокиЗатрат = ИдентификаторСтрокиЗатрат;
			НоваяСтрока.ПервичныйРегистратор = СтрокаТЗ.ПервичныйРегистраторНовойЗаписи;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;

	// зарегистрируем приход затрат
	СвойстваДляЗаполнения = "СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете";
		
	КоэффициентыПереноса = Новый Массив;
	Для каждого СтрокаТЗ Из СтрокиПереноса Цикл
		КоэффициентыПереноса.Добавить(СтрокаТЗ.Сумма);
	КонецЦикла;
	РезультатыПереноса = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаПереноса, КоэффициентыПереноса);
	
	ИндексСтрокиПереноса = 0;
	Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
		
		Сумма = РезультатыПереноса[ИндексСтрокиПереноса];
		
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(Сумма, Коэффициенты);
		Если Результаты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
			НоваяСтрока = НачисленияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,СвойстваИсключения);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереноса, СвойстваДляЗаполнения);
			Если Не СпособОтраженияЗаполняется[НоваяСтрока.Начисление] Тогда
				НоваяСтрока.СпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка();
			КонецЕсли;
			НоваяСтрока.Сумма = Результаты[Индекс];
			НоваяСтрока.ПервичныйРегистратор = СтрокаТЗ.ПервичныйРегистраторНовойЗаписи;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		ИндексСтрокиПереноса = ИндексСтрокиПереноса + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрированныеДанныеПоСотрудникам(РеквизитыДляПроведения, МенеджерВременныхТаблиц, Сотрудники) Экспорт

	Организация 	  = РеквизитыДляПроведения.Организация;
	ПериодРегистрации = РеквизитыДляПроведения.ПериодРегистрации;
	Ссылка 			  = РеквизитыДляПроведения.Ссылка;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БухучетНачисленияУдержания.Сотрудник КАК Сотрудник,
	|	БухучетНачисленияУдержания.Подразделение КАК Подразделение,
	|	БухучетНачисленияУдержания.НачислениеУдержание КАК Начисление,
	|	БухучетНачисленияУдержания.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачисленияУдержания.Период КАК Период,
	|	БухучетНачисленияУдержания.Организация КАК Организация,
	|	БухучетНачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(БухучетНачисленияУдержания.Сумма) КАК Сумма,
	|	БухучетНачисленияУдержания.ПериодДействия КАК ПериодДействия,
	|	БухучетНачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	БухучетНачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	БухучетНачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	БухучетНачисленияУдержания.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачисленияУдержания.ВидОперации КАК ВидОперации,
	|	БухучетНачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	БухучетНачисленияУдержания.Регистратор КАК Регистратор,
	|	БухучетНачисленияУдержания.ПервичныйРегистратор КАК ПервичныйРегистратор,
	|	ВЫБОР
	|		КОГДА БухучетНачисленияУдержания.Регистратор ССЫЛКА Документ.ПереносЗатратНаПерсоналМеждуСтатьями
	|			ТОГДА БухучетНачисленияУдержания.ПервичныйРегистратор
	|		ИНАЧЕ БухучетНачисленияУдержания.Регистратор
	|	КОНЕЦ КАК ПервичныйРегистраторНовойЗаписи,
	|	БухучетНачисленияУдержания.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам КАК БухучетНачисленияУдержания
	|ГДЕ
	|	БухучетНачисленияУдержания.Период = &ПериодРегистрации
	|	И БухучетНачисленияУдержания.Сотрудник В(&Сотрудники)
	|	И БухучетНачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И НЕ БухучетНачисленияУдержания.НеУчитыватьВРаспределенииПриОкончательномРасчете
	|	И БухучетНачисленияУдержания.Регистратор <> &ИсключаемыйРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачисленияУдержания.ВидОперации,
	|	БухучетНачисленияУдержания.НачислениеУдержание,
	|	БухучетНачисленияУдержания.ДатаОкончания,
	|	БухучетНачисленияУдержания.Подразделение,
	|	БухучетНачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	БухучетНачисленияУдержания.ФизическоеЛицо,
	|	БухучетНачисленияУдержания.СтатьяФинансирования,
	|	БухучетНачисленияУдержания.СтатьяРасходов,
	|	БухучетНачисленияУдержания.ОблагаетсяЕНВД,
	|	БухучетНачисленияУдержания.ДокументОснование,
	|	БухучетНачисленияУдержания.ПериодДействия,
	|	БухучетНачисленияУдержания.Период,
	|	БухучетНачисленияУдержания.ДатаНачала,
	|	БухучетНачисленияУдержания.СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачисленияУдержания.Организация,
	|	БухучетНачисленияУдержания.Сотрудник,
	|	БухучетНачисленияУдержания.Регистратор,
	|	БухучетНачисленияУдержания.ПервичныйРегистратор,
	|	БухучетНачисленияУдержания.ПодразделениеУчетаЗатрат
	|
	|ИМЕЮЩИЕ
	|	СУММА(БухучетНачисленияУдержания.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносы.Подразделение КАК Подразделение,
	|	СтраховыеВзносы.Начисление КАК Начисление,
	|	СтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтраховыеВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	СтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтраховыеВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтраховыеВзносы.Период КАК Период,
	|	СтраховыеВзносы.Организация КАК Организация,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СтраховыеВзносы.ДатаНачала КАК ДатаНачала,
	|	&СуммыИзРегистра КАК СуммыИзРегистра
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносы
	|ГДЕ
	|	СтраховыеВзносы.Период = &ПериодРегистрации
	|	И СтраховыеВзносы.Сотрудник В(&Сотрудники)
	|	И СтраховыеВзносы.Регистратор <> &ИсключаемыйРегистратор
	|	И &Условие";
	
	СуммыИзРегистра = УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина, "СтраховыеВзносы");
	Условие = СтрЗаменить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина, "СтраховыеВзносы"), ",", " <> 0 ИЛИ ") + " <> 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммыИзРегистра КАК СуммыИзРегистра", СуммыИзРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "("+Условие+")");
	
	Запрос.Выполнить();

КонецПроцедуры 

Процедура ЗаполнитьСтраховыеВзносыПоФизическимЛицам(СтраховыеВзносыПоФизическимЛицам, СтрокиВзносов, СтрокиПереноса, СуммаПереноса, ПоляВзносов, ПоляГруппировкиВзносовСтрока, СпособОтраженияЗаполняется)

	ПоляВзносовСтрока  = СтрСоединить(ПоляВзносов, ",");
	СуммаПоложительная = (СуммаПереноса>0);
	
	// Массив в который помещаем строки имеющие итог по колонка того же знака, что и СуммаПереноса.
	БазовыеСтроки = Новый Массив;
	
	// сумма всех колонок по всем строкам массива СтрокиВзносов
	СуммаВзносовВсего = 0;
	
	ВзносыИсходныхСтрок = Новый Соответствие;
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ВзносыИсходныхСтрок.Вставить(ИмяПоля, 0);
	КонецЦикла;
	
	КоэффициентыБазовыхСтрок = Новый Массив;
	Для каждого СтрокаТЗ Из СтрокиВзносов Цикл
		
		СуммаСтроки = 0;
		Для каждого ИмяПоля Из ПоляВзносов Цикл
			СуммаСтроки = СуммаСтроки + СтрокаТЗ[ИмяПоля];
			ВзносыИсходныхСтрок[ИмяПоля] = ВзносыИсходныхСтрок[ИмяПоля] + СтрокаТЗ[ИмяПоля];
		КонецЦикла;
		СуммаВзносовВсего = СуммаВзносовВсего + СуммаСтроки;
		
		Если СуммаПоложительная И СуммаСтроки>0 Или НЕ СуммаПоложительная И СуммаСтроки<0 Тогда
			КоэффициентыБазовыхСтрок.Добавить(СуммаСтроки);
			БазовыеСтроки.Добавить(СтрокаТЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	// зарегистрируем списание затрат
	Если СуммаВзносовВсего = СуммаПереноса Тогда
		// списываем все взносы
		РаспределитьВзносы(СтраховыеВзносыПоФизическимЛицам, ВзносыИсходныхСтрок, БазовыеСтроки, ПоляГруппировкиВзносовСтрока, ПоляВзносовСтрока);
	Иначе // списывам часть взносов
		
		// распределим СуммаПереноса по видам взносов
		КоэффициентыВзносов = Новый Массив;
		Для каждого ИмяПоля Из ПоляВзносов Цикл
			КоэффициентыВзносов.Добавить(ВзносыИсходныхСтрок[ИмяПоля]);
		КонецЦикла;
		РезультатыВзносов = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаПереноса, КоэффициентыВзносов);
		Если РезультатыВзносов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Индекс = 0;
		Для каждого ИмяПоля Из ПоляВзносов Цикл
			ВзносыИсходныхСтрок[ИмяПоля] = РезультатыВзносов[Индекс];
			Индекс = Индекс +1;
		КонецЦикла;

		РаспределитьВзносы(СтраховыеВзносыПоФизическимЛицам, ВзносыИсходныхСтрок, БазовыеСтроки, ПоляГруппировкиВзносовСтрока, ПоляВзносовСтрока);
		
	КонецЕсли;

	// Зарегистрируем приход затрат
	// ВзносыИсходныхСтрок содержит суммы в разрезе взносов, которые необходимо добавить.
	
	ВременнаяТаблица = СтраховыеВзносыПоФизическимЛицам.СкопироватьКолонки();
	
	КоэффициентыПереноса = Новый Массив;
	Для каждого СтрокаТЗ Из СтрокиПереноса Цикл
		КоэффициентыПереноса.Добавить(СтрокаТЗ.Сумма);
	КонецЦикла;
	
	Для каждого ИмяПоля Из ПоляВзносов Цикл
	
		Сумма = ВзносыИсходныхСтрок[ИмяПоля];
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		РезультатыКолонки = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(Сумма, КоэффициентыПереноса);
		
		ИндексСтрокиПереноса = 0;
		Для каждого СтрокаПереноса Из СтрокиПереноса Цикл
			
			НоваяСуммаКолонки = РезультатыКолонки[ИндексСтрокиПереноса];
			Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(НоваяСуммаКолонки, КоэффициентыБазовыхСтрок);
			Если Результаты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
				НоваяСтрока = ВременнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ,,ПоляВзносовСтрока);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПереноса,"СтатьяФинансирования,СтатьяРасходов,СпособОтраженияЗарплатыВБухучете");
				НоваяСтрока[ИмяПоля] = Результаты[Индекс];
			    Индекс = Индекс +1;
			КонецЦикла;
			
			ИндексСтрокиПереноса = ИндексСтрокиПереноса +1;
			
		КонецЦикла;	
			
	КонецЦикла;
	
	ВременнаяТаблица.Свернуть(ПоляГруппировкиВзносовСтрока, ПоляВзносовСтрока);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблица, СтраховыеВзносыПоФизическимЛицам);
	
КонецПроцедуры

Процедура РаспределитьВзносы(СтраховыеВзносыПоФизическимЛицам, Взносы, БазовыеСтроки, ПоляГруппировкиВзносовСтрока, ПоляВзносовСтрока)

	ВременнаяТаблица = СтраховыеВзносыПоФизическимЛицам.СкопироватьКолонки();
	Для каждого КлючиЗначение Из Взносы Цикл
		
		ИмяПоля 	 = КлючиЗначение.Ключ;
		СуммаКолонки = КлючиЗначение.Значение;
		Если СуммаКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентыКолонки = Новый Массив;
		Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
			КоэффициентыКолонки.Добавить(СтрокаТЗ[ИмяПоля]);
		КонецЦикла;
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаКолонки, КоэффициентыКолонки);
		Если Результаты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = 0;
		Для каждого СтрокаТЗ Из БазовыеСтроки Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,ПоляВзносовСтрока);
			НоваяСтрока[ИмяПоля] = -Результаты[Индекс];
			Индекс = Индекс +1;
		КонецЦикла;
		
	КонецЦикла;
	
	ВременнаяТаблица.Свернуть(ПоляГруппировкиВзносовСтрока, ПоляВзносовСтрока);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВременнаяТаблица, СтраховыеВзносыПоФизическимЛицам);	

КонецПроцедуры



#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция РеквизитыИзмеренийЗатрат() Экспорт
	РеквизитыИзмеренийЗатрат = Новый Массив;
	РеквизитыИзмеренийЗатрат.Добавить("Сотрудник");
	РеквизитыИзмеренийЗатрат.Добавить("Подразделение");
	РеквизитыИзмеренийЗатрат.Добавить("Начисление");
	Возврат РеквизитыИзмеренийЗатрат;
КонецФункции

Функция РеквизитыФинансированияЗатрат() Экспорт
	РеквизитыФинансированияЗатрат = Новый Массив;
	РеквизитыФинансированияЗатрат.Добавить("СпособОтраженияЗарплатыВБухучете");
	РеквизитыФинансированияЗатрат.Добавить("СтатьяРасходов");
	РеквизитыФинансированияЗатрат.Добавить("СтатьяФинансирования");
	Возврат РеквизитыФинансированияЗатрат;
КонецФункции

Функция РеквизитыДетализацииЗатрат() Экспорт
	РеквизитыДетализацииЗатрат = Новый Массив;
	РеквизитыДетализацииЗатрат.Добавить("Зарплата");
	Для каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина)) Цикл
		РеквизитыДетализацииЗатрат.Добавить(ИмяПоля);
	КонецЦикла;
	Возврат РеквизитыДетализацииЗатрат 
КонецФункции

Функция РеквизитыСуммЗатрат() Экспорт
	РеквизитыСуммЗатрат = РеквизитыДетализацииЗатрат();
	РеквизитыСуммЗатрат.Добавить("Сумма");
	Возврат РеквизитыСуммЗатрат
КонецФункции

#КонецОбласти

#КонецЕсли