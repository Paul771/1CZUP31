
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДоступенРасчетОтпусков = Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
	ДоступноОформлениеОтпусков = ДоступенРасчетОтпусков Или Пользователи.РолиДоступны("ДобавлениеИзменениеОтпусков");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Руководитель, ДолжностьРуководителя",
			"Объект.Организация", "Объект.Ответственный", "Объект.Руководитель", "Объект.ДолжностьРуководителя");
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ИнициализироватьФорму();
		ПриПолученииДанныхНаСервере();
		
		УстановитьИнформационнуюНадпись(ЭтаФорма);
		
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "СотрудникиСотрудник");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ЗаписанДокументОтпуск" 
		ИЛИ ИмяСобытия = "ЗаписанДокументОтпускБезСохраненияОплаты")
		И Источник.ВладелецФормы = ЭтаФорма Тогда
		ЗаполнитьРасчетныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ИнициализироватьФорму();
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НеРассчитанныеСтрокиОтпусков = Объект.Сотрудники.НайтиСтроки(Новый Структура("Рассчитан", Ложь));
	Для Каждого НеРассчитаннаяСтрока Из НеРассчитанныеСтрокиОтпусков Цикл
		
		Если ЗначениеЗаполнено(НеРассчитаннаяСтрока.Отпуск) Тогда
			
			Если НеРассчитаннаяСтрока.ВидОтпуска <> НеРассчитаннаяСтрока.ВидОтпускаПрежний
				Или НеРассчитаннаяСтрока.ДатаНачала <> НеРассчитаннаяСтрока.ДатаНачалаПрежняя
				Или НеРассчитаннаяСтрока.ДатаОкончания <> НеРассчитаннаяСтрока.ДатаОкончанияПрежняя
				Или НеРассчитаннаяСтрока.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск <> НеРассчитаннаяСтрока.НачалоПериодаЗаКоторыйПредоставляетсяОтпускПрежний
				Или НеРассчитаннаяСтрока.КонецПериодаЗаКоторыйПредоставляетсяОтпуск <> НеРассчитаннаяСтрока.КонецПериодаЗаКоторыйПредоставляетсяОтпускПрежний
				Или НеРассчитаннаяСтрока.Основание <> НеРассчитаннаяСтрока.ОснованиеПрежнее Тогда
				
				ПараметрыЗаполнения = ОбщиеДанныеЗаполнения(Объект, НеРассчитаннаяСтрока.Сотрудник, НеРассчитаннаяСтрока.Отпуск);
				ПараметрыЗаполнения.Вставить("ДанныеОтпусков", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполненияСтроки(НеРассчитаннаяСтрока)));
				
				РезультатЗаполнения = РасчетныйДокументПоПараметрыЗаполнения(НеРассчитаннаяСтрока.Сотрудник, ПараметрыЗаполнения);
				НеРассчитаннаяСтрока.Отпуск = РезультатЗаполнения.Отпуск;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанДокументОтпускаСотрудников", , ЭтаФорма);
	Оповестить("Запись_ОтпускаСотрудников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиОтпуск" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ДополнительныеПараметры = Новый Структура("ПерезаполнитьНачисления", Ложь);
		
		Если Модифицированность Или Не ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
			
			ДополнительныеПараметры.ПерезаполнитьНачисления = Истина;
			Оповещение = Новый ОписаниеОповещения("СотрудникиВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ДобавитьОтпускКДокументу(Оповещение);
			ОповеститьОЗаписиДокументаОтпуск();
			
		Иначе
			СотрудникиВыборЗавершение(ТекущиеДанные, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыборЗавершение(ТекущиеДанные, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Отпуск);
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыОткрытия.Вставить("ПерезаполнитьНачисления", ДополнительныеПараметры.ПерезаполнитьНачисления);
		
		ОткрытьФорму("Документ." + ИмяДокументаОтпуск(ТекущиеДанные.ВидДокументаОтпуск) + ".ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные.Рассчитан Тогда
		
		Если Не ДоступенРасчетОтпусков Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотруднику %1 уже начислены отпускные и оформлено отсутствие.'"),
					ТекущиеДанные.Сотрудник);
					
			Если ЗначениеЗаполнено(ТекущиеДанные.ОтпускРассчитал) Тогда
				ТекстПредупрежденияДополнительно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для отмены начислений обратитесь к расчетчику, работающему под именем ""%1"".'"),
					ТекущиеДанные.ОтпускРассчитал);
			Иначе
				ТекстПредупрежденияДополнительно = НСтр("ru='Для отмены начислений обратитесь к расчетчику.'");
			КонецЕсли;
			
			Отказ = Истина;
			ПоказатьПредупреждение(, ТекстПредупреждения + Символы.ПС + ТекстПредупрежденияДополнительно);
			
		Иначе
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотруднику %1 уже начислены отпускные и оформлено отсутствие.
					|Для удаления этой строки необходимо также отменить выполненное начисление.
					|Отменить начисления?'"),
					ТекущиеДанные.Сотрудник);
					
			Оповещение = Новый ОписаниеОповещения("СотрудникиПередУдалениемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		
		Если ТекущиеДанные.Проведен Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отсутствие сотрудника %1 уже оформлено.
					|Для удаления этой строки необходимо также отменить оформление отсутствия на работе.
					|Отменить оформленное отсутствие?'"),
					ТекущиеДанные.Сотрудник);
					
			Оповещение = Новый ОписаниеОповещения("СотрудникиПередУдалениемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			
		Иначе
			СотрудникиПередУдалениемЗавершение(КодВозвратаДиалога.Да)
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалениемЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Сотрудники.ТекущаяСтрока;
	
	Отказ = Ложь;
	ОтменитьДокумент(ТекущаяСтрока, Отказ);
	
	Если Не Отказ Тогда
		Объект.Сотрудники.Удалить(Объект.Сотрудники.НайтиПоИдентификатору(ТекущаяСтрока));
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ВидОтпуска = ПредопределенноеЗначение("Справочник.ВидыОтпусков.ПустаяСсылка");
		Элемент.ТекущиеДанные.ОтпускЯвляетсяЕжегодным = Ложь;
		Элемент.ТекущиеДанные.СпособРасчетаПоКалендарнымДням = Ложь;
		Элемент.ТекущиеДанные.ДатаНачала = '00010101';
		Элемент.ТекущиеДанные.ДатаОкончания = '00010101';
		Элемент.ТекущиеДанные.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
		Элемент.ТекущиеДанные.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
		Элемент.ТекущиеДанные.Рассчитан = Ложь;
		Элемент.ТекущиеДанные.Проведен = Ложь;
		Элемент.ТекущиеДанные.Отпуск = ПредопределенноеЗначение("Документ.Отпуск.ПустаяСсылка");
		Элемент.ТекущиеДанные.ОтпускРассчитал = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
		СотрудникиСотрудникПриИзмененииНаСервере();
		
		ТекущийЭлемент = Элементы.СотрудникиВидОтпуска;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИнформационнуюНадпись(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ЗаполнитьВторичныеПризнакиОтпуска(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	СотрудникиСотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВидОтпускаПриИзменении(Элемент)
	
	СотрудникиВидОтпускаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
			
			ТекущиеДанные.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(
				ТекущиеДанные.Сотрудник,
				ТекущиеДанные.ДатаНачала,
				ТекущиеДанные.КоличествоДней,
				Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск", ТекущиеДанные.СпособРасчетаПоКалендарнымДням, ТекущиеДанные.ОтпускЯвляетсяЕжегодным));
			
		КонецЕсли;
		
		УстановитьКоличествоДнейНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
		
	Иначе
		ТекущиеДанные.КоличествоДней = 0;
		ТекущиеДанные.КоличествоДнейКомпенсации = 0;
	КонецЕсли;
	
	ЗаполнитьОтпускВРабочихДняхПоДоговору(ТекущиеДанные.ПолучитьИдентификатор());
	
	РассчитатьПараметрыПериодаОтпускаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
			УстановитьКоличествоДнейНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	Иначе
		ТекущиеДанные.КоличествоДней = 0;
		ТекущиеДанные.КоличествоДнейКомпенсации = 0;
	КонецЕсли;
	
	РассчитатьПараметрыПериодаОтпускаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоДнейПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоДней > 0 И ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
		ТекущиеДанные.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(
			ТекущиеДанные.Сотрудник,
			ТекущиеДанные.ДатаНачала,
			ТекущиеДанные.КоличествоДней,
			Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск", ТекущиеДанные.СпособРасчетаПоКалендарнымДням, ТекущиеДанные.ОтпускЯвляетсяЕжегодным));
	КонецЕсли;
	
	РассчитатьПараметрыПериодаОтпускаНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоДнейКомпенсацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоДнейКомпенсации <> 0 Тогда
		СотрудникиКоличествоДнейКомпенсацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ОткрытьФормуСпискаЗначенийСтроковогоРеквизита(Элемент, 
		СтандартнаяОбработка, "ОснованиеОтпуска", НСтр("ru = 'Основания отпуска'"), НСтр("ru = 'Основание отпуска'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			ТекущиеДанные.Основание = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОснованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ПодборЗначенияСтроковогоРеквизита(Текст, ДанныеВыбора, СтандартнаяОбработка, "ОснованиеОтпуска");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СформироватьРасчетныеДокументы(Команда)
	
	СформироватьРасчетныеДокументыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравильностьОформленныхОтпусков(Команда)
	
	ДатыОстатков = Новый Соответствие;
	ДанныеОРасхождениях = ДанныеОРасхожденияхСУчетом(ДатыОстатков);
	
	Если ДанныеОРасхождениях.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ оформлен правильно'"));
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДанныеОРасхождениях", ДанныеОРасхождениях);
		ПараметрыОткрытия.Вставить("ДатыОстатков", ДатыОстатков);
		
		ОткрытьФорму("Документ.ОтпускаСотрудников.Форма.ФормаПроверкиПравильностиОформления", ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = Нстр("ru = 'Подбор возможен только при указанной организации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли;
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		,
		Объект.Дата,
		Объект.Дата,
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ЗаполнитьВторичныеДанныеСотрудниковВФорме();
	ЗаполнитьРасчетныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрежниеЗначения()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
			ЗаполнитьПрежниеЗначенияСтроки(СтрокаСотрудники);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПрежниеЗначенияСтроки(СтрокаСотрудники)
	
	Если ЗначениеЗаполнено(СтрокаСотрудники.Отпуск) Тогда
		
		СтрокаСотрудники.ВидОтпускаПрежний = СтрокаСотрудники.ВидОтпуска;
		СтрокаСотрудники.ДатаНачалаПрежняя = СтрокаСотрудники.ДатаНачала;
		СтрокаСотрудники.ДатаОкончанияПрежняя = СтрокаСотрудники.ДатаОкончания;
		СтрокаСотрудники.НачалоПериодаЗаКоторыйПредоставляетсяОтпускПрежний = СтрокаСотрудники.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск;
		СтрокаСотрудники.КонецПериодаЗаКоторыйПредоставляетсяОтпускПрежний = СтрокаСотрудники.КонецПериодаЗаКоторыйПредоставляетсяОтпуск;
		СтрокаСотрудники.ОснованиеПрежнее = СтрокаСотрудники.Основание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Организация", Объект.Организация);
	
	УстановитьПараметрыФункциональныхОпцийФормы(УстанавливаемыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗначенияДляЗаполнения = Новый Структура("Организация, Руководитель, ДолжностьРуководителя",
		"Объект.Организация", "Объект.Руководитель", "Объект.ДолжностьРуководителя");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"))
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВидОтпуска = Справочники.ВидыОтпусков.ПустаяСсылка();
	ТекущиеДанные.ДатаНачала = '00010101';
	ТекущиеДанные.ДатаОкончания = '00010101';
	ТекущиеДанные.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
	ТекущиеДанные.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
	ТекущиеДанные.КоличествоДней = 0;
	ТекущиеДанные.КоличествоДнейКомпенсации = 0;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ЗаполнитьСтрокуСотрудника(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		Если СтрокиПоСотруднику.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			
			ЗаполнитьСтрокуСотрудника(НоваяСтрока);
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСотрудника(ТекущиеДанные)
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОтпуска) Тогда
		ТекущиеДанные.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	КонецЕсли;
	
	ДанныеПоОтпускамСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	ДанныеПоОтпускамСотрудника.Удалить(ДанныеПоОтпускамСотрудника.Найти(ТекущиеДанные));
	
	НачалоПериодаОтпуска = '00010101';
	ОкончаниеПериодаОтпуска = '00010101';
	МаксимальнаяДатаОкончания = '00010101';
	Для Каждого ДанныеОтпуска Из ДанныеПоОтпускамСотрудника Цикл
		
		Если МаксимальнаяДатаОкончания <= ДанныеОтпуска.ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = КонецДня(ДанныеОтпуска.ДатаОкончания) + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеДанные.ДатаНачала = МаксимальнаяДатаОкончания;
	
	ЗаполнитьОтпускВРабочихДняхПоДоговору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьВторичныеПризнакиОтпуска(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеДанныеСотрудниковВФорме()
	
	ЗаполнитьОтпускВРабочихДняхПоДоговору();
	ЗаполнитьВторичныеПризнакиОтпусков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтпускВРабочихДняхПоДоговору(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Строки = Объект.Сотрудники;
	Иначе
		Строки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудники.НайтиПоИдентификатору(ТекущаяСтрока));
	КонецЕсли;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.Период = Строка.ДатаНачала;
		
	КонецЦикла;
	
	ТрудовыеДоговоры = ОстаткиОтпусков.ДоговорыСотрудниковСОтпускомВРабочихДнях(ТаблицаСотрудников);
	
	Отбор = Новый Структура("Сотрудник,Период");
	Для Каждого Строка Из Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Сотрудник  = Строка.Сотрудник;
		Отбор.Период = Строка.ДатаНачала;
		Строка.ОтпускВРабочихДняхПоДоговору = Ложь;
		НайденныеСтроки = ТрудовыеДоговоры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка.ОтпускВРабочихДняхПоДоговору = НайденныеСтроки[0].ОтпускВРабочихДняхПоДоговору;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПараметрыПериодаОтпускаНаСервере(ТекущийИдентификатор)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ТекущийИдентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник)
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ДатаНачала > ТекущиеДанные.ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеДокументы()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокОтпусков", Объект.Сотрудники.Выгрузить().ВыгрузитьКолонку("Отпуск"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Отпуск.Ссылка КАК Отпуск,
	               |	Отпуск.ДокументРассчитан КАК Рассчитан,
	               |	Отпуск.Рассчитал КАК Рассчитал,
	               |	Отпуск.Проведен КАК Проведен,
	               |	ИСТИНА КАК ВидДокументаОтпуск
	               |ИЗ
	               |	Документ.Отпуск КАК Отпуск
	               |ГДЕ
	               |	Отпуск.Ссылка В(&СписокОтпусков)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтпускБезСохраненияОплаты.Ссылка,
	               |	ОтпускБезСохраненияОплаты.ПерерасчетВыполнен,
	               |	ОтпускБезСохраненияОплаты.Рассчитал,
	               |	ОтпускБезСохраненияОплаты.Проведен,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	               |ГДЕ
	               |	ОтпускБезСохраненияОплаты.Ссылка В(&СписокОтпусков)";
	
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыОтпусков Из ТаблицаОтпусков Цикл
		СтрокиОтпусков =  Объект.Сотрудники.НайтиСтроки(Новый Структура("Отпуск", СтрокаТаблицыОтпусков.Отпуск));
		Если СтрокиОтпусков.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокиОтпусков[0], СтрокаТаблицыОтпусков);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьВторичныеПризнакиОтпусков();
	ЗаполнитьПрежниеЗначения();
	
	УстановитьИнформационнуюНадпись(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеПризнакиОтпусков()
	
	ВидыОтпусков = Объект.Сотрудники.Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
	
	ДанныеВидовОтпусков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыОтпусков, "ОтпускЯвляетсяЕжегодным, СпособРасчетаОтпуска, ОтпускБезОплаты");
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если Не СтрокаСотрудника.ОтпускЯвляетсяЕжегодным Тогда
			ДанныеВидаОтпуска = ДанныеВидовОтпусков.Получить(СтрокаСотрудника.ВидОтпуска);
			ЗаполнитьВторичныеПризнакиОтпуска(СтрокаСотрудника.ПолучитьИдентификатор(), ДанныеВидаОтпуска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВторичныеПризнакиОтпуска(ТекущийИдентификатор, ДанныеВидаОтпуска = Неопределено)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	Если СтрокаСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеВидаОтпуска = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаСотрудника.ВидОтпуска) Тогда
			ДанныеВидаОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСотрудника.ВидОтпуска, "ОтпускЯвляетсяЕжегодным, СпособРасчетаОтпуска, ОтпускБезОплаты");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаСотрудника.ОтпускЯвляетсяЕжегодным 	= ДанныеВидаОтпуска.ОтпускЯвляетсяЕжегодным;
	СтрокаСотрудника.ОтпускБезСохраненияОплаты 	= ДанныеВидаОтпуска.ОтпускБезОплаты И Не ДанныеВидаОтпуска.ОтпускЯвляетсяЕжегодным;
	
	Если ДанныеВидаОтпуска.СпособРасчетаОтпуска = ПредопределенноеЗначение("Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях") Тогда
		СтрокаСотрудника.СпособРасчетаПоКалендарнымДням = Ложь;
	Иначе
		СтрокаСотрудника.СпособРасчетаПоКалендарнымДням = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбщиеДанныеЗаполнения(Объект, Сотрудник, ДокументОтпуск, ПараметрыЗаполнения = Неопределено)

	Если ПараметрыЗаполнения  = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВидДокументаОтпуск", ТипЗнч(ДокументОтпуск) = Тип("ДокументСсылка.Отпуск"));
		ПараметрыЗаполнения.Вставить("ВидДокументаПрежнийОтпуск", Неопределено);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Действие", "Заполнить");
	ПараметрыЗаполнения.Вставить("ДокументОтпуск", ДокументОтпуск);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Сотрудник", Сотрудник);
	ПараметрыЗаполнения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("Руководитель", Объект.Руководитель);
	ПараметрыЗаполнения.Вставить("ДолжностьРуководителя", Объект.ДолжностьРуководителя);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаполненияСтроки(СтрокаОтпуска)
	
	СтруктураОтпуска = Новый Структура;
	
	СтруктураОтпуска.Вставить("ВидОтпуска", СтрокаОтпуска.ВидОтпуска);
	СтруктураОтпуска.Вставить("ДатаНачала", СтрокаОтпуска.ДатаНачала);
	СтруктураОтпуска.Вставить("ДатаОкончания", СтрокаОтпуска.ДатаОкончания);
	СтруктураОтпуска.Вставить("КоличествоДней", СтрокаОтпуска.КоличествоДней);
	СтруктураОтпуска.Вставить("КоличествоДнейКомпенсации", СтрокаОтпуска.КоличествоДнейКомпенсации);
	СтруктураОтпуска.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", СтрокаОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск);
	СтруктураОтпуска.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск", СтрокаОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск);
	СтруктураОтпуска.Вставить("Основание", СтрокаОтпуска.Основание);
	СтруктураОтпуска.Вставить("ПредоставитьЕдиновременнуюВыплатуКОтпуску", СтрокаОтпуска.ПредоставитьЕдиновременнуюВыплатуКОтпуску);
	СтруктураОтпуска.Вставить("ВидОтпускаПрежний", СтрокаОтпуска.ВидОтпускаПрежний);
	СтруктураОтпуска.Вставить("ИндексСтрокиДокумента", СтрокаОтпуска.НомерСтроки - 1);
	СтруктураОтпуска.Вставить("ОтпускБезСохраненияОплаты", СтрокаОтпуска.ОтпускБезСохраненияОплаты);
	
	Возврат СтруктураОтпуска;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОтпускКДокументу(ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаписатьДокумент", Истина);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Оформить отпуск можно только после записи этого документа.
							|Записать этот документ?'");
							
		Оповещение = Новый ОписаниеОповещения("ДобавитьОтпускКДокументуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе
		
		ДополнительныеПараметры.ЗаписатьДокумент = Ложь;
		ДобавитьОтпускКДокументуЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпускКДокументуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Отпуск) Тогда
		
		ПараметрыЗаполненияСтроки = ПараметрыЗаполнения(ТекущиеДанные.Сотрудник, Элементы.Сотрудники.ТекущаяСтрока);
		Если ПараметрыЗаполненияСтроки.Количество() > 0 Тогда
			РезультатЗаполнения = РасчетныйДокументПоПараметрыЗаполнения(ТекущиеДанные.Сотрудник, ПараметрыЗаполненияСтроки[0]);
			Если РезультатЗаполнения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, РезультатЗаполнения);
				ЗаполнитьПрежниеЗначенияСтроки(ТекущиеДанные);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасчетныеДокументыНаКлиенте() Экспорт
	
	ДополнительныеПараметры = Новый Структура("ЗаписатьДокумент", Истина);
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Оформить отпуска можно только после записи этого документа.
							|Записать этот документ?'");
							
		Оповещение = Новый ОписаниеОповещения("СформироватьРасчетныеДокументыНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе
		
		ДополнительныеПараметры.ЗаписатьДокумент = Ложь;
		СформироватьРасчетныеДокументыНаКлиентеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРасчетныеДокументыНаКлиентеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗаписатьДокумент И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СформироватьРасчетныеДокументыНаСервере();
	ПоказатьПредупреждение(, НСтр("ru = 'Оформление отпусков завершено'"));
	ОповеститьОЗаписиДокументаОтпуск();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоДнейНаСервере(ТекущийИдентификатор)
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(ТекущиеДанные.ВидОтпуска, ТекущиеДанные.ОтпускВРабочихДняхПоДоговору);
	ТекущиеДанные.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(ТекущиеДанные.Сотрудник, ТекущиеДанные.ДатаНачала, ТекущиеДанные.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКоличествоДнейНаСервере()
	
	УстановитьКоличествоДнейНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	ДатаОкончания = ТекущиеДанные.ДатаОкончания;
	
	СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник));
	ИндексСтрокиТекущегоОтпуска = СтрокиПоСотруднику.Найти(ТекущиеДанные);
	Если ИндексСтрокиТекущегоОтпуска <> Неопределено Тогда
		
		Для ИндексСтроки = ИндексСтрокиТекущегоОтпуска + 1 По СтрокиПоСотруднику.Количество() - 1 Цикл
			
			ДанныеСтроки = СтрокиПоСотруднику[ИндексСтроки];
			Если ДанныеСтроки.ДатаНачала <= ДатаОкончания Тогда
				
				ДанныеСтроки.ДатаНачала = КонецДня(ДатаОкончания) + 1;
				ДанныеСтроки.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(
					ДанныеСтроки.Сотрудник,
					ДанныеСтроки.ДатаНачала,
					ДанныеСтроки.КоличествоДней,
					Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск", ДанныеСтроки.СпособРасчетаПоКалендарнымДням, ДанныеСтроки.ОтпускЯвляетсяЕжегодным));
				ДатаОкончания = ДанныеСтроки.ДатаОкончания;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИнформационнуюНадпись(Форма)
	
	КоличествоСтрок = Форма.Объект.Сотрудники.Количество();
	
	НеОформленные = Форма.Объект.Сотрудники.НайтиСтроки(Новый Структура("Отпуск", ПредопределенноеЗначение("Документ.Отпуск.ПустаяСсылка")));
	КоличествоНеОформленных = НеОформленные.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяПусто";
	ИначеЕсли КоличествоНеОформленных = КоличествоСтрок Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяВсеНеОформлены";
	ИначеЕсли КоличествоНеОформленных > 0 Тогда
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяОформленыНеВсе";
	Иначе
		ИмяИнформационнойСтраницы = "ГруппаИнформационнаяВсеОформлены";
	КонецЕсли;
	
	ТекущаяСтраница = Форма.Элементы.Найти(ИмяИнформационнойСтраницы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаИнформация",
		"ТекущаяСтраница",
		ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиКоличествоДнейКомпенсацииПриИзмененииНаСервере()
	
	Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидОтпуска) Тогда
		
		ДанныеВидаОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ВидОтпуска, "ОтпускЯвляетсяЕжегодным, ОтпускБезОплаты");
		
		ТекущиеДанные.ОтпускЯвляетсяЕжегодным 	= ДанныеВидаОтпуска.ОтпускЯвляетсяЕжегодным;
		ТекущиеДанные.ОтпускБезСохраненияОплаты = ДанныеВидаОтпуска.ОтпускБезОплаты И Не ДанныеВидаОтпуска.ОтпускЯвляетсяЕжегодным;
		
	Иначе
		
		ТекущиеДанные.ОтпускЯвляетсяЕжегодным 	= Ложь;
		ТекущиеДанные.ОтпускБезСохраненияОплаты = Ложь;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ОтпускЯвляетсяЕжегодным 
		И (ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала)
			И ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания)
			 Или ЗначениеЗаполнено(ТекущиеДанные.КоличествоДнейКомпенсации)) Тогда
			СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = ТекущиеДанные.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
		СтруктураПараметров.ВидОтпуска = ТекущиеДанные.ВидОтпуска;
		СтруктураПараметров.ДатаНачала = ТекущиеДанные.ДатаНачала;
		СтруктураПараметров.ДатаОкончания = ТекущиеДанные.ДатаОкончания;
		СтруктураПараметров.ДатаКомпенсации = ?(ЗначениеЗаполнено(Объект.Дата), Началомесяца(Объект.Дата), НачалоМесяца(ТекущаяДатаСеанса()));
		СтруктураПараметров.КоличествоДнейКомпенсации = ТекущиеДанные.КоличествоДнейКомпенсации;
		ПериодОсновногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		ТекущиеДанные.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодС;
		ТекущиеДанные.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодПо;
		
	Иначе
		ТекущиеДанные.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
		ТекущиеДанные.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРасчетныеДокументыНаСервере()
	
	НеРассчитанныеСотрудники = Объект.Сотрудники.Выгрузить(Новый Структура("Отпуск", Документы.Отпуск.ПустаяСсылка()), "Сотрудник");
	Для Каждого СтрокаСотрудника Из НеРассчитанныеСотрудники Цикл
		ПараметрыЗаполненияДокументов = ПараметрыЗаполнения(СтрокаСотрудника.Сотрудник);
		Для Каждого ПараметрЗаполненияДокумента Из ПараметрыЗаполненияДокументов Цикл
			РезультатЗаполнения = РасчетныйДокументПоПараметрыЗаполнения(СтрокаСотрудника.Сотрудник, ПараметрЗаполненияДокумента);
			Для Каждого ДанныеОтпуска Из ПараметрЗаполненияДокумента.ДанныеОтпусков Цикл
				Отбор = Новый Структура("Сотрудник,ДатаНачала", СтрокаСотрудника.Сотрудник, ДанныеОтпуска.ДатаНачала);
				НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Отбор);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Отпуск = РезультатЗаполнения.Отпуск;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Записать();
	ЗаполнитьРасчетныеДокументы();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполнения(Сотрудник, ИдентификаторСтрокиСотрудника = Неопределено)
	
	ПараметрыЗаполненияДокументов = Новый Массив;
	
	// Формирование массива обрабатываемых строк.
	Если ИдентификаторСтрокиСотрудника = Неопределено Тогда
		СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник,Отпуск", Сотрудник, Документы.Отпуск.ПустаяСсылка()));
	Иначе
		
		СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
		Если СтрокаСотрудника <> Неопределено Тогда
			СтрокиСотрудника = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСотрудника);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокиСотрудника.Количество() > 0 Тогда
		
		// Формирования списка уже оформленных документов Отпуск.
		ВсеСтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		ДокументыОтпуск = Новый Массив;
		Для Каждого СтрокаСотрудника Из ВсеСтрокиСотрудника Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСотрудника.Отпуск) 
				Или (СтрокаСотрудника.Рассчитан И СтрокаСотрудника.Проведен)
				Или Не СтрокаСотрудника.ВидДокументаОтпуск Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыОтпуск.Добавить(СтрокаСотрудника.Отпуск);
			
		КонецЦикла;
		
		// Получение данных оформленных документов.
		ИменаРеквизитовДокумента = "ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия,Проведен";
		ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыОтпуск, ИменаРеквизитовДокумента);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидОтпуска
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка В(&ДокументыОтпуск)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&ДокументыОтпуск)
		|	И Отпуск.ПредоставитьОсновнойОтпуск
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ВидОтпуска
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&ДокументыОтпуск)";
		
		Запрос.УстановитьПараметр("ДокументыОтпуск", ДокументыОтпуск);
		ВидыОтпусковДокументов = Запрос.Выполнить().Выгрузить();
			
		// Отнесение обрабатываемых строк к оформленному документу.
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			
			ПодходящийДокумент = Неопределено;
			Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
				
				Если ВидыОтпусковДокументов.НайтиСтроки(Новый Структура("Ссылка,ВидОтпуска", ДанныеДокумента.Ключ, СтрокаСотрудника.ВидОтпуска)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначенияРеквизитовДокумента = ДанныеДокумента.Значение;
				Если (КонецДня(ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия) + 1 = СтрокаСотрудника.ДатаНачала
					Или КонецДня(СтрокаСотрудника.ДатаОкончания) + 1 = ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия) Тогда
					
					ПодходящийДокумент = ДанныеДокумента.Ключ;
					Если ЗначенияРеквизитовДокумента.Проведен = Истина Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Обновление данных оформленного документа, если подходящего документа нет
			// отпуск относится к пустому документу.
			ЗначенияРеквизитовДокумента = ДанныеДокументов.Получить(ПодходящийДокумент);
			Если ЗначенияРеквизитовДокумента = Неопределено Тогда
				
				ЗначенияРеквизитовДокумента = Новый Структура(ИменаРеквизитовДокумента);
				
				ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия = СтрокаСотрудника.ДатаНачала;
				ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия = СтрокаСотрудника.ДатаОкончания;
				
			Иначе
				
				Если КонецДня(ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия) + 1 = СтрокаСотрудника.ДатаНачала Тогда
					ЗначенияРеквизитовДокумента.ДатаОкончанияПериодаОтсутствия = СтрокаСотрудника.ДатаОкончания;
				ИначеЕсли КонецДня(СтрокаСотрудника.ДатаОкончания) + 1 = ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия Тогда
					ЗначенияРеквизитовДокумента.ДатаНачалаПериодаОтсутствия = СтрокаСотрудника.ДатаНачала;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначенияРеквизитовДокумента.Свойство("МассивСтрокДокумента") Тогда
				МассивСтрокДокумента = ЗначенияРеквизитовДокумента.МассивСтрокДокумента;
			Иначе
				МассивСтрокДокумента = Новый Массив;
			КонецЕсли;
			
			МассивСтрокДокумента.Добавить(СтрокаСотрудника);
			ЗначенияРеквизитовДокумента.Вставить("МассивСтрокДокумента", МассивСтрокДокумента);
			
			// Если подходящего документа не было найдено, создадим уникальный ключ
			// для списка связанных датами строк.
			Если ПодходящийДокумент = Неопределено Тогда
				ПодходящийДокумент = Новый УникальныйИдентификатор();
			КонецЕсли;
			ДанныеДокументов.Вставить(ПодходящийДокумент, ЗначенияРеквизитовДокумента);
			
		КонецЦикла;
		
		// Формирование списка параметров заполнения документов Отпуск.
		Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
			
			Если Не ДанныеДокумента.Значение.Свойство("МассивСтрокДокумента") Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗаполнения = Новый Структура();
			
			ДанныеОтпусков = Новый Массив;
			Для каждого СтрокаДокумента Из ДанныеДокумента.Значение.МассивСтрокДокумента Цикл
				ДанныеОтпусков.Добавить(ДанныеЗаполненияСтроки(СтрокаДокумента));
			КонецЦикла;
			
			ВидДокументаОтпуск = ДанныеОтпусков.Количество() > 1 ИЛИ Не ДанныеОтпусков[0].ОтпускБезСохраненияОплаты;
			ПараметрыЗаполнения.Вставить("ВидДокументаОтпуск", ВидДокументаОтпуск);
			
			ВидДокументаПрежнийОтпуск = Неопределено;
			Если ТипЗнч(ДанныеДокумента.Ключ) = Тип("УникальныйИдентификатор") Тогда
				ДокументОтпуск = Документы[ИмяДокументаОтпуск(ВидДокументаОтпуск)].ПустаяСсылка();
			Иначе
				ДокументОтпуск = ДанныеДокумента.Ключ;
				ВидДокументаПрежнийОтпуск = ТипЗнч(ДанныеДокумента.Ключ) = Тип("ДокументСсылка.Отпуск");
			КонецЕсли;
			
			ПараметрыЗаполнения.Вставить("ВидДокументаПрежнийОтпуск", ВидДокументаПрежнийОтпуск);
			ПараметрыЗаполнения = ОбщиеДанныеЗаполнения(Объект, Сотрудник, ДокументОтпуск, ПараметрыЗаполнения);
			
			ДанныеОтпусков = Новый Массив;
			Для Каждого СтрокаДокумента Из ДанныеДокумента.Значение.МассивСтрокДокумента Цикл
				ДанныеОтпусков.Добавить(ДанныеЗаполненияСтроки(СтрокаДокумента));
			КонецЦикла;
			
			ПараметрыЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
			ПараметрыЗаполненияДокументов.Добавить(ПараметрыЗаполнения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполненияДокументов;
	
КонецФункции

&НаСервере
Функция РасчетныйДокументПоПараметрыЗаполнения(Сотрудник, ПараметрыЗаполнения)
	
	РезультатЗаполнения = Новый Структура("Рассчитан,Проведен,ОтпускРассчитал,Отпуск", Ложь, Ложь);
	УстановитьПривилегированныйРежим(Истина);
	
	ПодходящийДокумент 		= ПараметрыЗаполнения.ДокументОтпуск;
	ИмяДокумента	   		= ИмяДокументаОтпуск(ПараметрыЗаполнения.ВидДокументаОтпуск);
	ИмяРеквизитаРассчитан 	= ?(ПараметрыЗаполнения.ВидДокументаОтпуск, "ДокументРассчитан", "ПерерасчетВыполнен");
	
	Если ЗначениеЗаполнено(ПодходящийДокумент) Тогда
		СоздатьНовыйДокумент = Ложь;
		
		Если ПараметрыЗаполнения.ВидДокументаПрежнийОтпуск <> Неопределено 
			И ПараметрыЗаполнения.ВидДокументаОтпуск <> ПараметрыЗаполнения.ВидДокументаПрежнийОтпуск Тогда
			
			ДокументОбъект = ПодходящийДокумент.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
			СоздатьНовыйДокумент = Истина;
			
		КонецЕсли;
		
		Если СоздатьНовыйДокумент Тогда
			ДокументОтпуск = Документы[ИмяДокумента].СоздатьДокумент();
		Иначе
			ДокументОтпуск = ПодходящийДокумент.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ДокументОтпуск = Документы[ИмяДокумента].СоздатьДокумент();
	КонецЕсли;
	
	ДокументОтпуск.Заполнить(ПараметрыЗаполнения);
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		ДокументОтпуск[ИмяРеквизитаРассчитан] = Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Документы[ИмяДокумента].ПроверитьРаботающих(ДокументОтпуск, Отказ);
	
	Если Не Отказ Тогда
		ДокументОтпуск.Записать(РежимЗаписиДокумента.Запись);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
			Попытка
				Если Не ТранзакцияАктивна() Или ДокументОтпуск.Проведен Тогда
					ДокументОтпуск.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Исключение
				Инфо = ИнформацияОбОшибке();
				ВызватьИсключение НСтр("ru='Не удалось записать '") + Строка(ДокументОтпуск.Ссылка);
			КонецПопытки;
		КонецЕсли;
	Иначе
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		Если СообщенияПроверкиЗаполнения <> Неопределено Тогда
			Для Каждого СообщениеПроверки Из СообщенияПроверкиЗаполнения Цикл
				Если СообщениеПроверки.Поле = "Сотрудник" Тогда
					СообщениеПроверки.Поле = "Сотрудники[" + ПараметрыЗаполнения.ДанныеОтпусков[0].ИндексСтрокиДокумента + "]." + СообщениеПроверки.Поле;
				КонецЕсли;
				СообщениеПроверки.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗаполнения.Вставить("Отпуск", 				ДокументОтпуск.Ссылка);
	РезультатЗаполнения.Вставить("Проведен", 			ДокументОтпуск.Проведен);
	РезультатЗаполнения.Вставить("Рассчитан", 			ДокументОтпуск[ИмяРеквизитаРассчитан] И ДокументОтпуск.Проведен);
	РезультатЗаполнения.Вставить("ОтпускРассчитал", 	ДокументОтпуск.Рассчитал);
	РезультатЗаполнения.Вставить("ВидДокументаОтпуск", 	ПараметрыЗаполнения.ВидДокументаОтпуск);
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат РезультатЗаполнения;
	
КонецФункции

&НаСервере
Функция ДанныеОРасхожденияхСУчетом(ДатыОстатков)
	
	Расхождения = Новый Массив;
	
	ТаблицаСотрудников = Объект.Сотрудники.Выгрузить(, "Сотрудник");
	ТаблицаСотрудников.Свернуть("Сотрудник");
	Для Каждого СтрокСотрудника Из ТаблицаСотрудников Цикл
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник,ОтпускЯвляетсяЕжегодным", СтрокСотрудника.Сотрудник, Истина));
		Если СтрокиПоСотруднику.Количество() > 0 Тогда
			ДатаОстатков = '00010101';
			Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				ДатаОстатков = Макс(СтрокаПоСотруднику.ДатаНачала, ДатаОстатков);
			КонецЦикла;
			Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда 
				ДатаОстатков = Объект.Дата;
			КонецЕсли;
			ДатыОстатков.Вставить(СтрокСотрудника.Сотрудник, ДатаОстатков);
			ОстаткиОтпуска = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(СтрокСотрудника.Сотрудник, ДатаОстатков, Объект.Ссылка);
			Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				СтрокаСоответствует = Неопределено;
				Для Каждого ОстатокОтпуска Из ОстаткиОтпуска.ОстаткиВРазрезеВидовОтпусков Цикл
					Если СтрокаПоСотруднику.ВидОтпуска = ОстатокОтпуска.ВидЕжегодногоОтпуска Тогда
						СтрокаСоответствует = Истина;
						Если СтрокаПоСотруднику.КоличествоДней <> ОстатокОтпуска.КоличествоДней Тогда
							СтрокаСоответствует = Ложь;
							ОписаниеОшибки = Новый Структура("Сотрудник,ВидОтпуска");
							ЗаполнитьЗначенияСвойств(ОписаниеОшибки, СтрокаПоСотруднику);
							Если СтрокаПоСотруднику.КоличествоДней > ОстатокОтпуска.КоличествоДней Тогда
								ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Предоставляется отпуск на %1 дн. больше, чем осталось по данным учета'"),
									СтрокаПоСотруднику.КоличествоДней - ОстатокОтпуска.КоличествоДней);
							Иначе
								ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='По данным учета остаток дней отпуска на %1 дн. больше'"),
									ОстатокОтпуска.КоличествоДней - СтрокаПоСотруднику.КоличествоДней);
							КонецЕсли;
							ОписаниеОшибки.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
							Расхождения.Добавить(ОписаниеОшибки);
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаСоответствует = Неопределено Тогда
					ОписаниеОшибки = Новый Структура("Сотрудник,ВидОтпуска");
					ЗаполнитьЗначенияСвойств(ОписаниеОшибки, СтрокаПоСотруднику);
					ПредставлениеОшибки = НСтр("ru='Не найдено остатков отпуска'");
					ОписаниеОшибки.Вставить("ПредставлениеОшибки", ПредставлениеОшибки);
					Расхождения.Добавить(ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Расхождения;
	
КонецФункции

&НаСервере
Процедура ОтменитьДокумент(ИдентификаторТекущейСтроки, Отказ)
	
	Если ИдентификаторТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Попытка
		
		ДокументОбъект = ТекущиеДанные.Отпуск.ПолучитьОбъект();
		
		Если ТекущиеДанные.ВидДокументаОтпуск Тогда
			
			Если ТекущиеДанные.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				
				ДокументОбъект.ПредоставитьОсновнойОтпуск = Ложь;
				ДокументОбъект.ДатаНачалаОсновногоОтпуска = '00010101';
				ДокументОбъект.ДатаОкончанияОсновногоОтпуска = '00010101';
				ДокументОбъект.КоличествоДнейОсновногоОтпуска = 0;
				ДокументОбъект.КоличествоДнейКомпенсацииОсновногоОтпуска = 0;
				
			Иначе
				
				СтрокиДополнительных = ДокументОбъект.ДополнительныеОтпуска.НайтиСтроки(Новый Структура("ВидОтпуска", ТекущиеДанные.ВидОтпуска));
				Для каждого СтрокаДопОтпуска Из СтрокиДополнительных Цикл
					ДокументОбъект.ДополнительныеОтпуска.Удалить(СтрокаДопОтпуска);
				КонецЦикла;
				
				Если ДокументОбъект.ДополнительныеОтпуска.Количество() = 0 Тогда
					ДокументОбъект.ПредоставитьДополнительныйОтпуск = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ДокументОбъект.ПредоставитьОсновнойОтпуск И НЕ ДокументОбъект.ПредоставитьДополнительныйОтпуск Тогда
				ДокументОбъект.ПометкаУдаления = Истина;
			КонецЕсли;
			
			ДокументОбъект.ДокументРассчитан = Ложь;
			
		Иначе
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.ПерерасчетВыполнен = Ложь;
		
		КонецЕсли;
		
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось отменить отпуск. '") + ИнформацияОбОшибке().Описание, , , ,Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СотрудникиВидОтпускаПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОтпуска) Тогда
		
		ТекущиеДанные.ОтпускЯвляетсяЕжегодным = Ложь;
		ТекущиеДанные.СпособРасчетаПоКалендарнымДням = Ложь;
		ТекущиеДанные.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
		ТекущиеДанные.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
		ТекущиеДанные.ОтпускБезСохраненияОплаты = Ложь;
		ТекущиеДанные.ВидДокументаОтпуск = Истина;
		
	Иначе
		ЗаполнитьПериодыПредоставляемогоОтпуска(ТекущиеДанные);
	КонецЕсли;
	
	СформироватьКоличествоДнейНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗаписиДокументаОтпуск()
	
	Оповестить ("Запись_Отпуск");
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяДокументаОтпуск(ВидДокументаОтпуск)
	
	Возврат ?(ВидДокументаОтпуск, "Отпуск", "ОтпускБезСохраненияОплаты");
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Возврат Массив;
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", Нстр("ru = 'организации'")));
	Возврат Массив;
КонецФункции

#КонецОбласти
