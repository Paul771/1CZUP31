
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ = Документы.РегистрацияПрочихДоходов.ПустаяСсылка() Тогда
		
		// создается новый документ
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц", 
		"Объект.Организация", "Объект.Ответственный", "Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
			Объект.ПериодРегистрации = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Объект.ПланируемаяДатаВыплаты = НачалоДня(ТекущаяДатаСеанса()) + 86400;
		Объект.ДатаПлатежаНДФЛ = Объект.ПланируемаяДатаВыплаты;
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Запомним дату документа, при смене месяца надо пересчитывать налоги и взносы.
	ДатаПрежняя = Объект.Дата;
	
	ДатаПлатежаНДФЛПрежняя = Объект.ДатаПлатежаНДФЛ;
	ПеречислениеНДФЛРеквизитыПрежняя = Объект.ПеречислениеНДФЛРеквизиты;
	ОбновитьФормуПоДоступностиВедомостей(ЭтаФорма, Объект.РегистрироватьВыплатуВедомостью);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	ОбменДаннымиЗарплатаКадры.ПриЧтенииНаСервереДокумента(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьСуммыВычета();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботниковФормы(ЭтотОбъект, ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РегистрацияПрочихДоходов", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеУдержанийНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбработатьИзменениеОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбработатьИзменениеДатыДокументаНаСервере();
	ДатаПрежняя = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ВидПрочегоДоходаПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаПрочегоДоходаНаСервере();
	УстановитьДоступностьСуммыВычета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	Если (НЕ ИспользоватьВедомостиДляРегистрацииВыплат Или Не Объект.РегистрироватьВыплатуВедомостью) И (Не ЗначениеЗаполнено(Объект.ДатаПлатежаНДФЛ) Или Объект.ДатаПлатежаНДФЛ < Объект.ПланируемаяДатаВыплаты) Тогда
		Объект.ДатаПлатежаНДФЛ = Объект.ПланируемаяДатаВыплаты;
	КонецЕсли;
	
	РассчитатьНДФЛИВзносыВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВычетаНДФЛПриИзменении(Элемент)
	
	ОчиститьРезультатыВСтрокахТаблицы();
	УстановитьДоступностьСуммыВычета();
	РассчитатьНДФЛИВзносыВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если ПодразделениеПрежнее <> Объект.Подразделение Тогда
		РассчитатьНДФЛИВзносыВсем();
	КонецЕсли;
	ПодразделениеПрежнее = Объект.Подразделение;
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Модифицированность);
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	ПриИзмененииПериодаРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодаРегистрацииПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РегистрироватьВыплатуВедомостьюПриИзменении(Элемент)
	
	ОбновитьФормуПоДоступностиВедомостей(ЭтаФорма, Объект.РегистрироватьВыплатуВедомостью);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыНачисленияУдержанияВзносы

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.ВыполнитьКомандуПросмотрСтраховыхВзносов(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	ПодробнееОРасчетеНДФЛ(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияФизическоеЛицоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.НачисленияУдержанияВзносы.ТекущиеДанные;
	
	Если ДанныеСтроки.ФизическоеЛицо <> УдаляемоеФизическоеЛицо Тогда
		УдалитьДанныеУдаляемогоФизическогоЛица();
		УдаляемоеФизическоеЛицо = ДанныеСтроки.ФизическоеЛицо;
		ЗаполнитьУдержанияФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.ФизическоеЛицо));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ФизическоеЛицо)
		И НЕ ДатаРожденияЗаполнена(ДанныеСтроки.ФизическоеЛицо)
		И Объект.ПланируемаяДатаВыплаты < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У %1 не заполнена дата рождения'"),
			ДанныеСтроки.ФизическоеЛицо);
		
		ДанныеСтроки.ФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	РассчитатьНДФЛиВзносыПоТекущейСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачисленоПриИзменении(Элемент)
	
	РассчитатьНДФЛиВзносыПоТекущейСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаВычетаПриИзменении(Элемент)
	
	РассчитатьНДФЛиВзносыПоТекущейСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияУдержанияВзносыПередУдалением(Элемент, Отказ)
	
	Если Элементы.НачисленияУдержанияВзносы.ТекущиеДанные <> Неопределено Тогда
		УдаляемоеФизическоеЛицо = Элементы.НачисленияУдержанияВзносы.ТекущиеДанные.ФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияУдержанияВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.НачисленияУдержанияВзносы.ТекущиеДанные <> Неопределено Тогда
		
		Если НоваяСтрока И Копирование Тогда
			Элементы.НачисленияУдержанияВзносы.ТекущиеДанные.ФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		Иначе
			УдаляемоеФизическоеЛицо = Элементы.НачисленияУдержанияВзносы.ТекущиеДанные.ФизическоеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияУдержанияВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачисленияОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияУдержанияВзносыПослеУдаления(Элемент)
	
	УдалитьДанныеУдаляемогоФизическогоЛица();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодборПолучателей(Команда)
	
	РолиФизическихЛиц = Новый Массив;
	РолиФизическихЛиц.Добавить(ПредопределенноеЗначение("Перечисление.РолиФизическихЛиц.Сотрудник"));
	РолиФизическихЛиц.Добавить(ПредопределенноеЗначение("Перечисление.РолиФизическихЛиц.БывшийСотрудник"));
	РолиФизическихЛиц.Добавить(ПредопределенноеЗначение("Перечисление.РолиФизическихЛиц.ПрочийПолучательДоходов"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("АдресСпискаПодобранныхФизическихЛиц", АдресСпискаПодобранныхФизическихЛиц());
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("Роль", РолиФизическихЛиц);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.НачисленияУдержанияВзносы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателей(Команда)
	
	Отказ = Ложь;
	
	Если Объект.ВидПрочегоДохода.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен вид дохода.'"), , "Объект.ВидПрочегоДохода", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата выплаты.'"), , "Объект.ПланируемаяДатаВыплаты", , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗадаватьВопрос = Объект.НачисленияУдержанияВзносы.Количество() > 0;
	
	Если ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица документа будет очищена. 
							|Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе 
		
		ЗаполнитьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудника(Команда)
	ПересчитатьСотрудникаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачисленияОбработкаВыбораНаСервере(МассивФизическихЛиц)
	
	МассивРассчитываемыхПолучателей = Новый Массив();
	РассчитыватьНачисления = Ложь;
	
	Если Не Объект.ВидПрочегоДохода.Пустая() Тогда 
		
		Выборка = ВыборкаНачисленийПолучателямПрочегоДохода(МассивФизическихЛиц);
		РассчитыватьНачисления = ЗначениеЗаполнено(Выборка);
		
	КонецЕсли;
	
	// Заполнение удержаний по исполнительным листам выбранных физических лиц
	Если МассивФизическихЛиц.Количество() Тогда
		ЗаполнитьУдержанияФизическихЛиц(МассивФизическихЛиц);
	КонецЕсли;
	
	Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл
		
		СтруктураПоиска = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		
		СтрокиНачислений = Объект.НачисленияУдержанияВзносы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиНачислений.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.НачисленияУдержанияВзносы.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			
			Если РассчитыватьНачисления Тогда
				
				Выборка.Сбросить();
				Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
					
					НоваяСтрока.Начислено = Выборка.Начислено;
					
					МассивРассчитываемыхПолучателей.Добавить(ФизическоеЛицо);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РассчитыватьНачисления Или Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты) Или МассивРассчитываемыхПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьНДФЛИВзносыНаСервере(МассивРассчитываемыхПолучателей);
	
	ИтогВзносы = ИтогВзносы(Объект.НачисленияУдержанияВзносы);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеУдаляемогоФизическогоЛица()
	
	Если ЗначениеЗаполнено(УдаляемоеФизическоеЛицо) Тогда
		
		УчетНДФЛКлиентСерверРасширенный.УдалитьДанныеНДФЛФизическоголица(Объект, УдаляемоеФизическоеЛицо);
		
		СтрокиФизическогоЛица = Объект.НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", УдаляемоеФизическоеЛицо));
		Если СтрокиФизическогоЛица.Количество() > 0 Тогда
			РассчитатьНДФЛиВзносыВСтроке(СтрокиФизическогоЛица[0].ПолучитьИдентификатор());
		Иначе
			
			УдаляемыеУдержания = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", УдаляемоеФизическоеЛицо));
			Для Каждого Удержание Из УдаляемыеУдержания Цикл
				СтрокиПоказателей = Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", Удержание.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
					Объект.Показатели.Удалить(СтрокаПоказателей);
				КонецЦикла;
				Объект.Удержания.Удалить(Удержание);
			КонецЦикла;
			
		КонецЕсли;
		
		УдаляемоеФизическоеЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники, СохранятьИсправления);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисленияСотрудникаНаСервере(Сотрудники, СохранятьИсправления) Экспорт
	
	Если Не СохранятьИсправления Тогда
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		ИначеЕсли ТипЗнч(Сотрудники) = Тип("Массив") Тогда 
			СписокФизическихЛиц = Сотрудники;
		Иначе
			СписокФизическихЛиц = Объект.НачисленияУдержанияВзносы.Выгрузить(, "ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
		КонецЕсли;
		
		ЗаполнитьУдержанияФизическихЛиц(СписокФизическихЛиц);
	КонецЕсли;
	
	РассчитатьНДФЛИВзносыНаСервере(СписокФизическихЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСуммыВычета()
	
	ВычетПоНормативу = Объект.КодВычетаНДФЛ = УчетНДФЛКлиентПовтИсп.ВычетВПределахНормативовПоАвторскимВознаграждениям();
	СуммаВычетаНеРедактируется = ?(НЕ ЗначениеЗаполнено(Объект.КодВычетаНДФЛ), Истина, ВычетПоНормативу);
	Элементы.НачисленияСуммаВычета.ТолькоПросмотр = СуммаВычетаНеРедактируется Или РасчетНДФЛНарастающимИтогомСНачалаГода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "НачисленияНДФЛ" И Поле.Имя <> "НачисленияСуммаВычета" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФизическоеЛицо = Элементы.НачисленияУдержанияВзносы.ТекущиеДанные.ФизическоеЛицо;
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтаФорма, Объект.ПериодРегистрации, ФизическоеЛицо, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "РегистрацияПрочихДоходов", ЭтаФорма, ОписаниеДокумента());
КонецПроцедуры

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура РассчитатьНДФЛИВзносыВсем()
	
	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты) Или Объект.НачисленияУдержанияВзносы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		Объект.НДФЛ.Очистить();
		Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	КонецЕсли;
	
	Объект.Удержания.Очистить();
	Объект.Показатели.Очистить();
	ЗаполнитьУдержанияФизическихЛиц(ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияУдержанияВзносы, "ФизическоеЛицо"));
	
	РассчитатьНДФЛИВзносыНаСервере();
	
	ИтогВзносы = ИтогВзносы(Объект.НачисленияУдержанияВзносы);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДФЛиВзносыПоТекущейСтроке()
	
	РассчитатьНДФЛиВзносыВСтроке(Элементы.НачисленияУдержанияВзносы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДФЛиВзносыВСтроке(ИдентификаторСтроки)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ДанныеСтроки = Объект.НачисленияУдержанияВзносы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ДанныеСтроки.ФизическоеЛицо.Пустая() Или ДанныеСтроки.Начислено = 0 Или Объект.ВидПрочегоДохода.Пустая() Или Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты) Тогда
		
		Если ДанныеСтроки.Начислено = 0 Тогда
			ДанныеСтроки.НДФЛ = 0;
			ДанныеСтроки.Удержано = 0;
			ДанныеСтроки.СуммаВычета = 0;
			ДанныеСтроки.КВыплате = 0;
			ДанныеСтроки.ИтогВзносыСтрока = 0;
			Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь)) Цикл
				ДанныеСтроки[ИмяПоля] = 0;
			КонецЦикла;
			УчетНДФЛКлиентСерверРасширенный.УдалитьДанныеНДФЛФизическогоЛица(Объект, ДанныеСтроки.ФизическоеЛицо);
		КонецЕсли;
		
	Иначе
		ДанныеСтроки.НДФЛ = 0;
		ДанныеСтроки.Удержано = 0;
		ДанныеСтроки.СуммаВычета = 0;
		ДанныеСтроки.КВыплате = 0;
		ДанныеСтроки.ИтогВзносыСтрока = 0;
		Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь)) Цикл
			ДанныеСтроки[ИмяПоля] = 0;
		КонецЦикла;
		
		РассчитатьНДФЛИВзносыНаСервере( , ИдентификаторСтроки);
	КонецЕсли;
	
	ИтогВзносы = ИтогВзносы(ЭтотОбъект.Объект.НачисленияУдержанияВзносы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтогВзносовПоСтроке(ДанныеСтроки)
	
	СуммаВзносов = 0;
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь)) Цикл
		СуммаВзносов = СуммаВзносов + ДанныеСтроки[ИмяПоля];
	КонецЦикла;
	
	ДанныеСтроки.ИтогВзносыСтрока = СуммаВзносов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтогиКВыплате()
	
	Для Каждого ДанныеСтроки Из Объект.НачисленияУдержанияВзносы Цикл
		ЗаполнитьКВыплатеПоСтроке(ЭтаФорма, ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКВыплатеПоСтроке(Форма, ДанныеСтроки)
	
	Если Форма.РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		
		ДанныеСтроки.НДФЛ = 0;
		СтрокиНДФЛ = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ФизическоеЛицо", ДанныеСтроки.ФизическоеЛицо));
		Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
			ДанныеСтроки.НДФЛ = ДанныеСтроки.НДФЛ + СтрокаНДФЛ.Налог;
		КонецЦикла;
		
	КонецЕсли;
	ДанныеСтроки.КВыплате = ДанныеСтроки.Начислено - ДанныеСтроки.НДФЛ - ДанныеСтроки.Удержано;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИтогВзносы(КоллекцияСтрок)

	ИтогВзносы = 0;
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИтогВзносы = ИтогВзносы + Строка.ИтогВзносыСтрока;
	КонецЦикла;
	
	Возврат ИтогВзносы;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.ПериодРегистрации));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДатыДокументаНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	Если НачалоМесяца(ДатаПрежняя) <> НачалоМесяца(Объект.Дата) Тогда
		РассчитатьНДФЛИВзносыВсем();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаПрочегоДоходаНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПрочегоДохода) Тогда
		
		Объект.КодВычетаНДФЛ = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
		
	Иначе
		
		КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПрочегоДохода, "КодДоходаНДФЛ");
		СоответствиеДоступныхВычетовДоходам = УчетНДФЛ.ВычетыКДоходам(Год(Объект.Дата));
		УстановитьСписокВыбораКодВычетаНДФЛ(Элементы.КодВычетаНДФЛ, КодДоходаНДФЛ, СоответствиеДоступныхВычетовДоходам);
		
		ОписаниеКодаДохода = УчетНДФЛВызовСервера.ПолучитьОписаниеКодаДохода(КодДоходаНДФЛ);
		Объект.КодВычетаНДФЛ = ОписаниеКодаДохода.ВычетПоУмолчанию;
		
	КонецЕсли;
	
	УстановитьРежимРасчетаНДФЛИОтображениеЭлементовРедактированияНДФЛ();
	
	ОчиститьРезультатыВСтрокахТаблицы();
	РассчитатьНДФЛИВзносыВсем();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораКодВычетаНДФЛ(ЭлементКодВычетаНДФЛ, КодДоходаНДФЛ, СоответствиеДоступныхВычетовДоходам)
	
	МассивДоступныхВычетов = СоответствиеДоступныхВычетовДоходам.Получить(КодДоходаНДФЛ);
	Если МассивДоступныхВычетов = Неопределено Тогда
		ЭлементКодВычетаНДФЛ.СписокВыбора.Очистить();
	Иначе
		ЭлементКодВычетаНДФЛ.СписокВыбора.ЗагрузитьЗначения(МассивДоступныхВычетов);
	КонецЕсли;
	ЭлементКодВычетаНДФЛ.ТолькоПросмотр = (МассивДоступныхВычетов = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРезультатыВСтрокахТаблицы()
	
	СтрокаИменаКолонок = "НДФЛ,СуммаВычета,Удержано,КВыплате,ИтогВзносыСтрока,
	|ФФОМС,ФФОМСЕНВД,ТФОМС,ТФОМСЕНВД,ФСС,ФССЕНВД,ФССНесчастныеСлучаи,
	|ПФРНакопительная,ПФРНакопительнаяЕНВД,ПФРСтраховая,ПФРСтраховаяЕНВД,
	|ПФРПоСуммарномуТарифу,ПФРПоСуммарномуТарифуЕНВД,
	|ПФРДоПредельнойВеличины,ПФРДоПредельнойВеличиныЕНВД,
	|ПФРСПревышения,ПФРСПревышенияЕНВД";
	
	ИменаКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИменаКолонок,,,Истина);
	Для Каждого Строка Из Объект.НачисленияУдержанияВзносы Цикл
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Строка[ИмяКолонки] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаРожденияЗаполнена(ФизическоеЛицо)
	
	ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ДатаРождения");
	
	Возврат ЗначениеЗаполнено(ДатаРождения);
	
КонецФункции

&НаСервере
Процедура РассчитатьИтогиНаСервере()
	
	Для Каждого Строка Из ЭтотОбъект.Объект.НачисленияУдержанияВзносы Цикл
		ЗаполнитьИтогВзносовПоСтроке(Строка);
		ЗаполнитьКВыплатеПоСтроке(ЭтаФорма, Строка);
	КонецЦикла;
	ИтогВзносы = ИтогВзносы(ЭтотОбъект.Объект.НачисленияУдержанияВзносы);
	
	// Значеение показателей в данные формы
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхФизическихЛиц()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.НачисленияУдержанияВзносы.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации()
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	Возврат ЗапрашиваемыеЗначения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеЗначения = ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации();
	ФиксированныеЗначения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация");
	
	ЗарплатаКадры.ЗаполнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	СоответствиеДоступныхВычетовДоходам = УчетНДФЛ.ВычетыКДоходам(Год(Объект.Дата));
	КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПрочегоДохода, "КодДоходаНДФЛ");
	УстановитьСписокВыбораКодВычетаНДФЛ(Элементы.КодВычетаНДФЛ, КодДоходаНДФЛ, СоответствиеДоступныхВычетовДоходам);
	
	ПодразделениеПрежнее = Объект.Подразделение;
	УстановитьРежимРасчетаНДФЛИОтображениеЭлементовРедактированияНДФЛ();
	
	Для Каждого Строка Из ЭтотОбъект.Объект.НачисленияУдержанияВзносы Цикл
		ЗаполнитьИтогВзносовПоСтроке(Строка);
	КонецЦикла;
	ИтогВзносы = ИтогВзносы(ЭтотОбъект.Объект.НачисленияУдержанияВзносы);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьВидимостьКомандыЗаполнитьПолучателей();
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТаблицыУдержаний()), 2);
	
	ЗарплатаКадры.ЗапомнитьОтветственныхРаботниковОрганизацииВФорме(ЭтотОбъект, ЗапрашиваемыеЗначенияДанныхФормыПоОрганизации());
	
	ИспользоватьВедомостиДляРегистрацииВыплат = ПолучитьФункциональнуюОпцию("ИспользоватьВедомостиДляВыплатыПрочихДоходов");
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	ТекущиеДанные = Объект.НачисленияУдержанияВзносы.НайтиПоИдентификатору(Элементы.НачисленияУдержанияВзносы.ТекущаяСтрока);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВидПрочегоДохода", Объект.ВидПрочегоДохода);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ТекущиеДанные.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", Объект.ПланируемаяДатаВыплаты);
	Запрос.УстановитьПараметр("КодВычета", Объект.КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("Сумма", ТекущиеДанные.Начислено);
	Запрос.УстановитьПараметр("СуммаВычета", ТекущиеДанные.СуммаВычета);
	Запрос.УстановитьПараметр("НДФЛ", ТекущиеДанные.НДФЛ);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	&ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВидыПрочихДоходовФизическихЛиц.Ссылка КАК Начисление,
	|	ВидыПрочихДоходовФизическихЛиц.КодДоходаНДФЛ КАК КодДохода,
	|	ВидыПрочихДоходовФизическихЛиц.КодДоходаНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	&КодВычета КАК КодВычета,
	|	&Сумма КАК Сумма,
	|	&СуммаВычета КАК СуммаВычета,
	|	&НДФЛ КАК НДФЛ,
	|	НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Справочник.ВидыПрочихДоходовФизическихЛиц КАК ВидыПрочихДоходовФизическихЛиц
	|ГДЕ
	|	ВидыПрочихДоходовФизическихЛиц.Ссылка = &ВидПрочегоДохода";
	Запрос.Выполнить();
	
	СведенияОДоходах = Документы.РегистрацияПрочихДоходов.ДанныеДляПроведениеНДФЛ(Запрос.МенеджерВременныхТаблиц);
	АдресСведенийОбНДФЛ = УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтотОбъект, ТекущиеДанные.ФизическоеЛицо);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходах);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокумента.*
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)";
	ВычетыКДоходам = Запрос.Выполнить().Выгрузить();
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", ВычетыКДоходам);
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(Объект.НДФЛ);
	ДанныеОбНДФЛ.Вставить("МаксимальныйИдентификаторСтрокиНДФЛ", МаксимальныйИдентификаторСтрокиНДФЛ);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура РассчитатьНДФЛИВзносыНаСервере(ФизическоеЛицо = Неопределено, ВыбраннаяСтрока = Неопределено)
	
	СписокФизическихЛиц = Неопределено;
	ДанныеСтроки = Неопределено;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ДанныеСтроки = Объект.НачисленияУдержанияВзносы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСтроки.ФизическоеЛицо);
	ИначеЕсли ФизическоеЛицо = Неопределено Тогда
		СписокФизическихЛиц = Неопределено;
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("Массив") Тогда 
		СписокФизическихЛиц = ФизическоеЛицо;
	КонецЕсли;
	
	Если РасчетНДФЛНарастающимИтогомСНачалаГода Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.РассчитатьНДФЛИВзносыДокумента(СписокФизическихЛиц);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		РассчитатьИтогиНаСервере();
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПрочегоДохода, "КодДоходаНДФЛ, КодДоходаСтраховыеВзносы");
		ЗначенияРеквизитов.Вставить("КатегорияДохода", Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы);
		
		Если СписокФизическихЛиц <> Неопределено И СписокФизическихЛиц.Количество() = 1 Тогда
			Если ДанныеСтроки = Неопределено Тогда
				НайденыеСтроки = Объект.НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", СписокФизическихЛиц[0]));
				Если НайденыеСтроки.Количество() Тогда
					ДанныеСтроки = НайденыеСтроки[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСтроки <> Неопределено Тогда
			Результат = РасчетЗарплатыРасширенный.НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(Объект, ЗначенияРеквизитов, ДанныеСтроки.НомерСтроки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат.Получить(ДанныеСтроки.ФизическоеЛицо));
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ДокументОбъект.РассчитатьУдержания(СписокФизическихЛиц, Ложь);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ЗаполнитьКВыплатеПоСтроке(ЭтаФорма, ДанныеСтроки);
			ЗаполнитьИтогВзносовПоСтроке(ДанныеСтроки);
		Иначе
			Результат = РасчетЗарплатыРасширенный.НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(Объект, ЗначенияРеквизитов);
			Для Каждого ДанныеСтроки Из Объект.НачисленияУдержанияВзносы Цикл
				Если СписокФизическихЛиц = Неопределено Или СписокФизическихЛиц.Найти(ДанныеСтроки.ФизическоеЛицо) <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат.Получить(ДанныеСтроки.ФизическоеЛицо));
				КонецЕсли;
			КонецЦикла;
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ДокументОбъект.РассчитатьУдержания(СписокФизическихЛиц, Ложь);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			РассчитатьИтогиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРасчетаНДФЛИОтображениеЭлементовРедактированияНДФЛ()
	
	РасчетНДФЛНарастающимИтогомСНачалаГода = УчетНДФЛФормыРасширенный.РасчетНДФЛНарастающимИтогомСНачалаГода(Объект.ВидПрочегоДохода);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияНДФЛ",
		"ТолькоПросмотр",
		РасчетНДФЛНарастающимИтогомСНачалаГода);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	КонтролируемыеПоля = Новый Структура;
	ОписаниеДокумента = ОписаниеДокумента();
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметр.ФизическоеЛицо));
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНДФЛ(Объект.НДФЛ, Параметр.НДФЛ, Объект.ПримененныеВычетыНаДетейИИмущественные, Параметр.ПримененныеВычетыНаДетейИИмущественные, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, Ложь);
	
	Для Каждого СтрокаНачислений Из Параметр.Начисления Цикл
		СтрокиНачисленияУдержанияВзносы = Объект.НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаНачислений.ФизическоеЛицо));
		Если СтрокиНачисленияУдержанияВзносы.Количество() > 0 Тогда
			СтрокиНачисленияУдержанияВзносы[0].СуммаВычета = СтрокаНачислений.СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ЗаполнитьИтогиКВыплате();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РассчитатьУдержания(Неопределено);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РассчитатьИтогиНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.МесяцНачисленияИмя 	= "ПериодРегистрации";
	Описание.УдержанияИмя			= "Удержания";
	Описание.ПериодДействияВШапке 	= Истина;
	Описание.ПримененныеВычетыИмя = "ПримененныеВычетыНаДетейИИмущественные";
	Описание.НеРаспределятьПоСтатьямФинансирования = Истина;
	
	Возврат Описание;
КонецФункции

#Область ПлановыеПрочиеДоходы

&НаСервере
Процедура УстановитьВидимостьКомандыЗаполнитьПолучателей()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		Модуль.УстановитьВидимостьКомандыЗаполнитьПолучателей(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаНачисленийПолучателямПрочегоДохода(МассивФизическихЛиц = Неопределено)
	
	Выборка = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		Выборка = Модуль.ВыборкаНачисленийПолучателямПрочегоДохода(ЭтотОбъект, МассивФизическихЛиц);
		
	КонецЕсли;
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателейНаСервере() 
	
	Если Не ЗначениеЗаполнено(Объект.ВидПрочегоДохода) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачисленияУдержанияВзносы.Очистить();
	
	Выборка = ВыборкаНачисленийПолучателямПрочегоДохода();
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.НачисленияУдержанияВзносы.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ЗаполнитьПолучателейНаСервере();
	РассчитатьНДФЛИВзносыВсем();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	
	Для Каждого Строка Из Объект.НачисленияУдержанияВзносы Цикл
		Удержано = 0;
		СтрокиУдержаний = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", Строка.ФизическоеЛицо));
		Для Каждого СтрокаУдержания Из СтрокиУдержаний Цикл
			Удержано = Удержано + СтрокаУдержания.Результат;
		КонецЦикла;
		Строка.Удержано = Удержано;
	КонецЦикла;
	
	РассчитатьИтогиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержанияФизическихЛиц(ФизическиеЛица)
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		УдаляемыеСтроки = Объект.Удержания.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	КатегорияИсполнительныйЛист = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ИсполнительныйЛист");
	КатегорияВознаграждениеПлатежногоАгента = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента");
	
	МенеджерРасчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаУвольнения, ГоловнаяОрганизация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Отбор = Новый Структура("ФизическоеЛицо, ДокументОснование, Удержание");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.ФизическоеЛицо,
	|	СотрудникиОрганизации.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПериодРегистрации
	|		КОГДА ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) > КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНачала,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ИТОГИ ПО
	|	ГоловнаяОрганизация,
	|	ДатаНачала";
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаПериода = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериода.Следующий() Цикл
			Если МенеджерРасчета = Неопределено Тогда
				МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ВыборкаПериода.ДатаНачала, Объект.Организация);
			Иначе
				МенеджерРасчета.Инициализировать(ВыборкаПериода.ДатаНачала, Объект.Организация);
			КонецЕсли;
			ФизическиеЛицаПериода = Новый Массив;
			Выборка = ВыборкаПериода.Выбрать();
			Пока Выборка.Следующий() Цикл
				ФизическиеЛицаПериода.Добавить(Выборка.ФизическоеЛицо);
			КонецЦикла;
			
			МенеджерРасчета.ЗаполнитьУдержанияФизическихЛицЗаПериод(
										ФизическиеЛицаПериода, ВыборкаОрганизация.ГоловнаяОрганизация, ВыборкаПериода.ДатаНачала, КонецМесяца(ВыборкаПериода.ДатаНачала));
			Для Каждого СтрокаУдержания Из МенеджерРасчета.Зарплата.Удержания Цикл
				Если СтрокаУдержания.Категория = КатегорияИсполнительныйЛист 
					Или СтрокаУдержания.Категория = КатегорияВознаграждениеПлатежногоАгента Тогда
					
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаУдержания);
					Если Объект.Удержания.НайтиСтроки(Отбор).Количество() Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Объект.Удержания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
					ДатаУдержания = ?(ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты), Объект.ПланируемаяДатаВыплаты, Объект.Дата);
					НоваяСтрока.ДатаНачала = НачалоДня(ДатаУдержания);
					НоваяСтрока.ДатаОкончания = КонецДня(ДатаУдержания);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Проверим удержания:
	// Если Сотрудник уволен, тогда исполнительные листы фиксированной суммой и до предела не считаем
	// Если Сотрудник не уволен, тогде можем считать все.
	ТаблицаУдержаний = Объект.Удержания.Выгрузить(, "НомерСтроки, ДокументОснование, ФизическоеЛицо");
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	Запрос.УстановитьПараметр("ДатаВыплаты", Объект.ПланируемаяДатаВыплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ДокументОснование,
	|	Удержания.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТИсполнительныеЛисты
	|ИЗ
	|	&ТаблицаУдержаний КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо,
	|	МИНИМУМ(ЕСТЬNULL(СотрудникиОрганизации.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	ВТИсполнительныеЛисты КАК ИсполнительныеЛисты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ИсполнительныеЛисты.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнительныеЛисты.ДокументОснование,
	|	ИсполнительныеЛисты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование,
	|	МАКСИМУМ(УсловияУдержанияПоИсполнительномуДокументу.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыПолученияУсловийПоИсполнительныиЛистам
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВЫБОР
	|				КОГДА ВТДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА &ДатаВыплаты
	|				ИНАЧЕ ВТДанные.ДатаУвольнения
	|			КОНЕЦ > УсловияУдержанияПоИсполнительномуДокументу.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанные.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанные.ДокументОснование
	|ИЗ
	|	ВТДанные КАК ВТДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПолученияУсловийПоИсполнительныиЛистам КАК ВТПериодыПолученияУсловийПоИсполнительныиЛистам
	|		ПО ВТДанные.ДокументОснование = ВТПериодыПолученияУсловийПоИсполнительныиЛистам.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	|		ПО ВТДанные.ДокументОснование = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
	|			И (ВТПериодыПолученияУсловийПоИсполнительныиЛистам.Период = УсловияУдержанияПоИсполнительномуДокументу.Период)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УсловияУдержанияПоИсполнительномуДокументу.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
	|					ИЛИ ЕСТЬNULL(ВТДанные.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|						И УсловияУдержанияПоИсполнительномуДокументу.Предел <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Удаляемыестроки =  Объект.Удержания.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.ДокументОснование));
		Для Каждого Строка Из Удаляемыестроки Цикл
			Объект.Удержания.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудникаНаСервере()
	
	ИменаПолейВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(Ложь,,Ложь));
	ВыбранныеФизическиеЛица = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.НачисленияУдержанияВзносы.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.НачисленияУдержанияВзносы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(ДанныеСтроки.ФизическоеЛицо) Тогда
			ВыбранныеФизическиеЛица.Добавить(ДанныеСтроки.ФизическоеЛицо);
		Иначе
			ДанныеСтроки.Начислено = 0;
			ДанныеСтроки.НДФЛ = 0;
			ДанныеСтроки.СуммаВычета = 0;
			ДанныеСтроки.Удержано = 0;
			ДанныеСтроки.КВыплате = 0;
			ДанныеСтроки.ИтогВзносыСтрока = 0;
			Для Каждого ИмяПоля Из ИменаПолейВзносов Цикл
				Если ЗначениеЗаполнено(ИмяПоля) Тогда
					ДанныеСтроки[ИмяПоля] = 0 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеФизическиеЛица.Количество() Тогда
		ЗаполнитьУдержанияФизическихЛиц(ВыбранныеФизическиеЛица);
		РассчитатьНДФЛИВзносыНаСервере(ВыбранныеФизическиеЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник	= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник	= "ФизическоеЛицо";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета	= "Удержание";
	ОписаниеТаблицы.ИмяТаблицы 				= "Удержания";
	ОписаниеТаблицы.НомерТаблицы 			= 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета	= Истина;
	ОписаниеТаблицы.СодержитПолеСотрудник	= Ложь;
	ОписаниеТаблицы.ПутьКДанным				= "Объект.Удержания";
	ОписаниеТаблицы.ПутьКДаннымПоказателей	= "Объект.Показатели";
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала	= "ДатаНачала";
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = "ДатаОкончания";
	
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжиданияПериодаРегистрацииПриИзменении()
	РассчитатьНДФЛИВзносыВсем();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаРегистрации()
	РассчитатьНДФЛИВзносыВсем();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФормуПоДоступностиВедомостей(Форма, РегистрироватьВыплатуВедомостью)

	ВедомостиДоступны = Форма.ИспользоватьВедомостиДляРегистрацииВыплат И РегистрироватьВыплатуВедомостью;
	
	Если ВедомостиДоступны Тогда
		Форма.ДатаПлатежаНДФЛПрежняя = Форма.Объект.ДатаПлатежаНДФЛ;
		Форма.ПеречислениеНДФЛРеквизитыПрежняя = Форма.Объект.ПеречислениеНДФЛРеквизиты;
		Форма.Объект.ДатаПлатежаНДФЛ = Дата(1,1,1);
		Форма.Объект.ПеречислениеНДФЛРеквизиты = "";
	Иначе
		Форма.Объект.ДатаПлатежаНДФЛ = Форма.ДатаПлатежаНДФЛПрежняя;
		Форма.Объект.ПеречислениеНДФЛРеквизиты = Форма.ПеречислениеНДФЛРеквизитыПрежняя;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.КоманднаяПанель.ПодчиненныеЭлементы,
			"ФормаОбработкаСозданиеВедомостейПрочихДоходовСоздатьВедомостиПрочихДоходовПоДокументу",
			"Видимость",
			ВедомостиДоступны);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПеречислениеНДФЛ",
		"Доступность",
		Не ВедомостиДоступны);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПлатежаНДФЛ",
		"АвтоОтметкаНезаполненного",
		Не ВедомостиДоступны);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПлатежаНДФЛ",
		"ОтметкаНезаполненного",
		Не ВедомостиДоступны И Не ЗначениеЗаполнено(Форма.Объект.ДатаПлатежаНДФЛ));	

КонецПроцедуры

#КонецОбласти
