#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Сотрудники", "Сотрудник"));
	
	ОграниченияРегистрации = ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИСотрудникам(ЭтотОбъект, Организация, МассивПараметров, ДатаСобытия);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОграниченияРегистрации.Организации, Сотрудники.ВыгрузитьКолонку("ОбособленноеПодразделение"), Истина);
	
	Возврат ОграниченияРегистрации;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ОбработкаЗаполненияДокументаПриемНаРаботу(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.КадровыйПеревод.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= СтрокаСотрудника.ДатаНачала;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= СтрокаСотрудника.ДатаНачала;
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ	= Неопределено;
		ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор		= Ссылка;
		
		КадровыйУчет.ПроверитьРаботающихСотрудников(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСотрудника.Сотрудник),
			ПараметрыПолученияСотрудниковОрганизаций,
			Отказ,
			Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
		
	КонецЦикла;
	
	// проверка КоличествоДнейВГод
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Для каждого Отпуск Из ЕжегодныеОтпуска Цикл
		Если НЕ ЗначениеЗаполнено(Отпуск.КоличествоДнейВГод) И НЕ ОстаткиОтпусков.ЭтоСтажевыйОтпуск(Отпуск.ВидЕжегодногоОтпуска) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено количество дней в год для отпуска %1'"), Отпуск.ВидЕжегодногоОтпуска);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "", ,Отказ);
		КонецЕсли;
	КонецЦикла;
	МассивНепроверяемыхРеквизитов.Добавить("ЕжегодныеОтпуска.КоличествоДнейВГод");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	ТолькоБронированиеПозиции = БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	Если Не ТолькоБронированиеПозиции Тогда
		
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
		ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
		
		СтруктурыПроверяемыхКонфликтовВидовЗанятости = Новый Массив;
		Для каждого СтрокаСотрудника Из Сотрудники Цикл
			
			СтруктураПроверки = СотрудникиФормыРасширенный.ПустаяСтруктураДляПроверкиКонфликтовВидовЗанятостиСотрудников();
			ЗаполнитьЗначенияСвойств(СтруктураПроверки, СтрокаСотрудника);
			СтруктураПроверки.ДатаСобытия = СтрокаСотрудника.ДатаНачала;
			
			СтруктурыПроверяемыхКонфликтовВидовЗанятости.Добавить(СтруктураПроверки);
			
		КонецЦикла;
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(Ссылка);
		ДокументыДляИсключения.Добавить(ИсправленныйДокумент);
		
		СообщениеОКонфликтах = СотрудникиФормыРасширенный.СообщениеОКонфликтахВидовЗанятостиСотрудников(
			СтруктурыПроверяемыхКонфликтовВидовЗанятости, Организация, ДокументыДляИсключения);
		
		Для каждого КонфликтыСотрудника Из СообщениеОКонфликтах Цикл
			
			ИндексСтроки = "";
			СтрокаСотрудника = Сотрудники.Найти(КонфликтыСотрудника.Ключ, "Сотрудник");
			Если СтрокаСотрудника <> Неопределено Тогда
				ИндексСтроки = СтрокаСотрудника.НомерСтроки - 1;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, Ссылка, "Сотрудники[" + ИндексСтроки + "].ВидЗанятости", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Документы.КадровыйПеревод.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = Дата;
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		Если ФОИспользоватьШтатноеРасписание Тогда
			
			ДолжностьПозиции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСотрудника.ДолжностьПоШтатномуРасписанию, "Должность");
			Если СтрокаСотрудника.Должность <> ДолжностьПозиции Тогда
				СтрокаСотрудника.Должность = ДолжностьПозиции;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаСотрудника.ДолжностьПоШтатномуРасписанию) Тогда
				СтрокаСотрудника.ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Не ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники.Выгрузить(, "Сотрудник,ДатаОкончания"));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыйПереводСпискомСотрудники.Сотрудник,
			|	КадровыйПереводСпискомСотрудники.ДатаОкончания
			|ПОМЕСТИТЬ ВТТекущиеДанные
			|ИЗ
			|	&Сотрудники КАК КадровыйПереводСпискомСотрудники
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	КадровыйПереводСпискомСотрудники.Сотрудник КАК Сотрудник
			|ИЗ
			|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанные КАК ТекущиеДанные
			|		ПО КадровыйПереводСпискомСотрудники.Сотрудник = ТекущиеДанные.Сотрудник
			|ГДЕ
			|	КадровыйПереводСпискомСотрудники.Ссылка = &Ссылка
			|	И (КадровыйПереводСпискомСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|				И ЕСТЬNULL(ТекущиеДанные.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ КадровыйПереводСпискомСотрудники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
			|				И ЕСТЬNULL(ТекущиеДанные.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	ТекущиеДанные.Сотрудник
			|ИЗ
			|	ВТТекущиеДанные КАК ТекущиеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
			|		ПО ТекущиеДанные.Сотрудник = КадровыйПереводСпискомСотрудники.Сотрудник
			|			И (КадровыйПереводСпискомСотрудники.Ссылка = &Ссылка)
			|ГДЕ
			|	КадровыйПереводСпискомСотрудники.Сотрудник ЕСТЬ NULL ";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДополнительныеСвойства.Вставить("ИсключатьНеИзмененные", Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	НеРегистрироватьБухучет = ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций") И БронированиеПозиции;
	ИмяТаблицы 			= "Документ.КадровыйПереводСписком.Сотрудники";
	ИмяПоляПериод 		= "Таблица.ДатаНачала";
	ИмяПоляДействуетДо 	= "Таблица.ДатаОкончания";
	ОтражениеЗарплатыВБухучетеРасширенный.ОбновитьСведенияОБухучетеЗарплатыСотрудников(ЭтотОбъект,НеРегистрироватьБухучет,ИмяТаблицы,ИмяПоляПериод,ИмяПоляДействуетДо);	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
