#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗарплатаКадры.ПроверитьКорректностьМесяца(Ссылка, ДатаНачала, "Объект.ДатаНачала", Отказ, НСтр("ru='Месяц начала'"), , , Ложь);
	
	УникальныеЗначения = Новый Соответствие;
	ИндексСтроки = 0;
	
	Для Каждого ДанныеФизическогоЛица Из Получатели Цикл
		
		Если УникальныеЗначения[ДанныеФизическогоЛица.ФизическоеЛицо] = Неопределено Тогда
			УникальныеЗначения.Вставить(ДанныеФизическогоЛица.ФизическоеЛицо, Истина);
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ДанныеФизическогоЛица.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Ссылка, "Объект.Получатели[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ФизическоеЛицо", ,Отказ);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Выборка = ВыборкаКонфликтующихРегистраторов(Ссылка, ДатаНачала, Организация, ВидПрочегоДохода, Получатели.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В периоде %1 г. информация о сотруднике %2 была введена ранее документом %3.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Формат(ДатаНачала, "ДФ='ММММ гггг'"), Выборка.ФизическоеЛицо, Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , Отказ);
		
	КонецЦикла;
	
	Если Действие <> Перечисления.ДействияСПрочимиДоходами.Прекратить Тогда
		ЗарплатаКадрыРасширенный.ПроверитьПериодРегистратораНачисленийУдержаний(ДатаНачала, ДатаОкончания, ЭтотОбъект, "ДатаОкончания", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	СформироватьДвиженияПлановыхПрочихДоходов(Движения, ДанныеДляПроведения.ДанныеПлановыхПрочихДоходов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру параметров для ограничения регистрации объекта при обмене
// Вызывается ПередЗаписью объекта.
//
// Возвращаемое значение:
//	ОграниченияРегистрации - Структура - Описание см. ОбменДаннымиЗарплатаКадры.ОграниченияРегистрации.
//
Функция ОграниченияРегистрации() Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("Получатели", "ФизическоеЛицо"));
	
	Возврат ОбменДаннымиЗарплатаКадры.ОграниченияРегистрацииПоОрганизацииИФизическимЛицам(ЭтотОбъект, Организация, МассивПараметров, ДатаНачала);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыборкаКонфликтующихРегистраторов(Регистратор, Месяц, Организация, ВидПрочегоДохода, ФизическиеЛица) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыеПрочиеДоходы.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПлановыеПрочиеДоходы.Регистратор) КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПлановыеПрочиеДоходы.ФизическоеЛицо) КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ПлановыеПрочиеДоходы КАК ПлановыеПрочиеДоходы
	|ГДЕ
	|	ПлановыеПрочиеДоходы.Период = &Период
	|	И ПлановыеПрочиеДоходы.Организация = &Организация
	|	И ПлановыеПрочиеДоходы.ВидПрочегоДохода = &ВидПрочегоДохода
	|	И ПлановыеПрочиеДоходы.ФизическоеЛицо В(&ФизическиеЛица)
	|	И ПлановыеПрочиеДоходы.Регистратор <> &Регистратор";
	
	Запрос.УстановитьПараметр("Период",				Месяц);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ВидПрочегоДохода",	ВидПрочегоДохода);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументПлановогоДохода.Организация КАК Организация,
	|	ДокументПлановогоДохода.ВидПрочегоДохода КАК ВидПрочегоДохода,
	|	ДокументПлановогоДохода.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументПлановогоДохода.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПрочимиДоходами.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументПлановогоДохода.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДокументПлановогоДохода.ДатаОкончания, МЕСЯЦ), ДЕНЬ, 1)
	|		ИНАЧЕ ДокументПлановогоДохода.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ПолучателиДохода.ФизическоеЛицо,
	|	ПолучателиДохода.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументПлановогоДохода.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПрочимиДоходами.Начать)
	|				ИЛИ ДокументПлановогоДохода.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСПрочимиДоходами.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	Документ.ПлановоеНачислениеПрочихДоходов КАК ДокументПлановогоДохода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлановоеНачислениеПрочихДоходов.Получатели КАК ПолучателиДохода
	|		ПО (ПолучателиДохода.Ссылка = ДокументПлановогоДохода.Ссылка)
	|			И (ДокументПлановогоДохода.Ссылка = &Ссылка)";
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить("ДанныеПлановыхПрочихДоходов", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура СформироватьДвиженияПлановыхПрочихДоходов(Движения, ДанныеПлановыхПрочихДоходов)
	
	Если ДанныеПлановыхПрочихДоходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.ПлановыеПрочиеДоходы.Отбор.Регистратор.Значение;
	
	// Получим действующие виды дохода, чтобы записать возвратные движения,
	// Признак Используется вида дохода должен соответствовать значению, действующему на дату текущего события.
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИзмеренияДаты.Колонки.Добавить("ВидПрочегоДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПлановыхПрочихДоходов, ИзмеренияДаты);
	ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеПрочиеДоходы",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеПрочиеДоходы.ФизическоеЛицо,
	|	ПлановыеПрочиеДоходы.Организация,
	|	ПлановыеПрочиеДоходы.ВидПрочегоДохода,
	|	ПлановыеПрочиеДоходы.Размер
	|ИЗ
	|	ВТПлановыеПрочиеДоходыСрезПоследних КАК ПлановыеПрочиеДоходы
	|ГДЕ
	|	ПлановыеПрочиеДоходы.Используется");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДействующиеВидыДохода = Запрос.Выполнить().Выгрузить();
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Организация");
	ОтборСтрок.Вставить("ФизическоеЛицо");
	ОтборСтрок.Вставить("ВидПрочегоДохода");
	
	Для Каждого СтрокаДанных Из ДанныеПлановыхПрочихДоходов Цикл
		
		СтрокаДвижений = Движения.ПлановыеПрочиеДоходы.Добавить();
		СтрокаДвижений.Период = СтрокаДанных.ДатаСобытия;
		СтрокаДвижений.Организация = СтрокаДанных.Организация;
		СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДвижений.ВидПрочегоДохода = СтрокаДанных.ВидПрочегоДохода;
		СтрокаДвижений.Используется = СтрокаДанных.Используется;
		СтрокаДвижений.Размер = СтрокаДанных.Размер;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			СтрокаДвижений.ДействуетДо = СтрокаДанных.ДействуетДо;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДвижений);
			
			НайденныеСтроки = ДействующиеВидыДохода.НайтиСтроки(ОтборСтрок);
			ВидДоходаИспользовался = НайденныеСтроки.Количество() > 0;
			СтрокаДвижений.ИспользуетсяПоОкончании = ВидДоходаИспользовался;
			
			Если ВидДоходаИспользовался Тогда 
				СтрокаДвижений.РазмерПоОкончании = НайденныеСтроки[0].Размер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ПлановыеПрочиеДоходы.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
