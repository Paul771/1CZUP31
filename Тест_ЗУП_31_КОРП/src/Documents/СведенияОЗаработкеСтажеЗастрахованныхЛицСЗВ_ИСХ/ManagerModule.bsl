#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ;
	Возврат ЗарплатаКадрыСоставДокументов.ОписаниеСоставаДокументаПоМетаданнымФизическиеЛицаВТабличныхЧастях(МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТПерсональныеДанныеСотрудников(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ФизическиеЛица = Неопределено) Экспорт 
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеОтчетногоПериода; 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо, Фамилия, Имя, Отчество, СтраховойНомерПФР, ОформленПоТрудовомуДоговору, ВидЗастрахованногоЛица";
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	Если ФизическиеЛица <> Неопределено Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ОкончаниеОтчетногоПериода);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		               |	&Период КАК Период
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		               |		ПО ФизическиеЛица.Ссылка = СотрудникиОрганизации.ФизическоеЛицо
		               |			И (ФизическиеЛица.Ссылка В (&ФизическиеЛица))
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		               |	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
		
		Запрос.Выполнить();
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФизическиеЛица");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество, СтраховойНомерПФР");
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	Иначе
		ПерсонифицированныйУчет.СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиОрганизации.ФизическоеЛицо КАК Сотрудник,
	               |	СотрудникиОрганизации.Фамилия КАК Фамилия,
	               |	СотрудникиОрганизации.Имя КАК Имя,
	               |	СотрудникиОрганизации.Отчество КАК Отчество,
	               |	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР,
	               |	ВЫБОР
	               |		КОГДА СотрудникиОрганизации.ОформленПоТрудовомуДоговору
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	               |	КОНЕЦ КАК ТипДоговора
	               |ПОМЕСТИТЬ ВТПерсональныеДанныеСотрудников
	               |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	               |	КадровыеДанныеФизическихЛиц.Фамилия,
	               |	КадровыеДанныеФизическихЛиц.Имя,
	               |	КадровыеДанныеФизическихЛиц.Отчество,
	               |	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	               |ИЗ
	               |	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, Сотрудники, УчитываемыеДокументы) Экспорт 
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	СписокДокументов = ?(ТипЗнч(УчитываемыеДокументы) = Тип("Массив"), УчитываемыеДокументы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчитываемыеДокументы));
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = СписокДокументов;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, 
		Организация, 
		ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора);
	
КонецПроцедуры

#Область ПроцедурыИФункцииФормированияФайлов

Функция ИмяФайла(Организация, Дата, УИД = Неопределено) Экспорт

	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрационныйНомерПФР, КодОрганаПФР");
	
	Возврат "ПФР"
			+ "_" + ?(ЗначениеЗаполнено(Параметры.РегистрационныйНомерПФР), Параметры.РегистрационныйНомерПФР, "")
			+ "_" + ?(ЗначениеЗаполнено(Параметры.КодОрганаПФР),СтрЗаменить(Параметры.КодОрганаПФР, "-", ""),"")
			+ "_СЗВ-ИСХ"
			+ "_" + Формат(Дата, "ДФ=ггггММдд")
			+ "_" + УИД;
			
КонецФункции	

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	
	ТекстФайла = СформироватьВыходнойФайл(Объект.Ссылка);
	ЗарплатаКадры.ЗаписатьФайлВАрхив(Объект.Ссылка, Объект.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь, Ложь);
	
КонецПроцедуры

Функция СформироватьВыходнойФайл(Ссылка)
	
	СписокДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	ВыборкаПоШапкеДокумента = ПерсонифицированныйУчет.ЗапросПоШапкеДляПечатиОДВ_1(СписокДокументов, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымВзносов = ПерсонифицированныйУчет.ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(СписокДокументов, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	ВыборкаУплаченныхВзносов = ПерсонифицированныйУчет.ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(СписокДокументов, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	ВыборкаПоДаннымДНП = ПерсонифицированныйУчет.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(СписокДокументов, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ").Выбрать();
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР_2017XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматОДВ_1 = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ОДВ_1");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	ФорматУплата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОДВ_1.Уплата.Значение);
	ФорматОДВ_1.Удалить("Уплата");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-ИСХ/2017-01-01");
	Атрибуты.Вставить("xmlns:АФ", "http://пф.рф/АФ");
	Атрибуты.Вставить("xmlns:АФ2", "http://пф.рф/АФ/2016-06-21");
	Атрибуты.Вставить("xmlns:УТ", "http://пф.рф/унифицированныеТипы/2014-01-01");
	Атрибуты.Вставить("xmlns:ВС", "http://пф.рф/ВС/типы/2014-01-01");
	Атрибуты.Вставить("xmlns:РВ", "http://пф.рф/ВС/типыРВ/2014-01-01");
	Атрибуты.Вставить("xmlns:ИС", "http://пф.рф/ВС/типыИС/2017-01-01");
	
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ2__ПрограммаПодготовки.Значение = ВРег(РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация", ""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	ФорматОДВ_1.Тип.Значение = 0;	
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаименованиеКраткое = СокрЛП(ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное));
	ПерсонифицированныйУчет.УдалитьПробелыРядомСДефисом(НаименованиеКраткое);
	НаборЗаписейСтрахователь.ИС__Наименование = НаименованиеКраткое;
	НаборЗаписейСтрахователь.УТ__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;	
	
	Если ВыборкаПоДаннымВзносов.Следующий()  
		И (ВыборкаПоДаннымВзносов.ЕстьСтраховая Или ВыборкаПоДаннымВзносов.ЕстьНакопительная Или ВыборкаПоДаннымВзносов.ЕстьТарифСВ) Тогда 
		
		ФорматОДВ_1.Страховая.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоСтраховая;
		ФорматОДВ_1.Страховая.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецСтраховая;
		
		ФорматОДВ_1.Накопительная.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоНакопительная;
		ФорматОДВ_1.Накопительная.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецНакопительная;
		
		ФорматОДВ_1.ТарифСВ.Значение.ИС__ЗадолженностьНаНачало = ВыборкаПоДаннымВзносов.ЗадолженностьНаНачалоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__Начислено = ВыборкаПоДаннымВзносов.НачисленоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__Уплачено = ВыборкаПоДаннымВзносов.УплаченоТарифСВ;
		ФорматОДВ_1.ТарифСВ.Значение.ИС__ЗадолженностьНаКонец = ВыборкаПоДаннымВзносов.ЗадолженностьНаКонецТарифСВ;
		
	Иначе
		ФорматОДВ_1.Удалить("Страховая");
		ФорматОДВ_1.Удалить("Накопительная");
		ФорматОДВ_1.Удалить("ТарифСВ");
	КонецЕсли;
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Пока ВыборкаУплаченныхВзносов.Следующий() Цикл 
		НаборЗаписейТипУплата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматУплата);
		НаборЗаписейТипУплата.ИС__Год.Значение =ВыборкаУплаченныхВзносов.Год;
		НаборЗаписейТипУплата.ИС__Страховая.Значение = ВыборкаУплаченныхВзносов.НаСтраховуюПенсию;
		НаборЗаписейТипУплата.ИС__Накопительная.Значение = ВыборкаУплаченныхВзносов.НаНакопительнуюПенсию;
		НаборЗаписейТипУплата.ИС__ТарифСВ.Значение = ВыборкаУплаченныхВзносов.ПоТарифуСтраховыхВзносов;
		УзелУплата = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "Уплата", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелУплата, НаборЗаписейТипУплата);
	КонецЦикла;
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОснованияДНП.ИС__Основание.Значение);
		ФорматОснованияДНП.Удалить("ИС__Основание");
		ВсегоШтат = 0;
		ВсегоФакт = 0;
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОснование);
			НаборЗаписейОснование.ИС__Подразделение.Значение =ВРег(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС__ПрофессияДолжность.Значение = ВРег(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС__Описание.Значение = ВРег(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС__Документы.Значение = ВРег(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			НаборЗаписейОУТ = НаборЗаписейОснование.ИС__ОУТ.Значение;
			НаборЗаписейОУТ.ИС__Код = ВРег(СокрЛП(ВыборкаПоДаннымДНП.ОснованиеВыслугиЛетКод));
			НаборЗаписейОУТ.ИС__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоДаннымДНП.КодПозицииСпискаКод));
			ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "ИС__Основание", ""), НаборЗаписейОснование);
			ВсегоШтат = ВсегоШтат + ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			ВсегоФакт = ВсегоФакт + ВыборкаПоДаннымДНП.КоличествоРаботающих;
		КонецЦикла;
		ФорматОснованияДНП.ИС__ВсегоШтат.Значение = ВсегоШтат;
		ФорматОснованияДНП.ИС__ВсегоФакт.Значение = ВсегоФакт;
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ВРег(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоНачисленнымВзносам = ЗапросПоНачисленнымВзносам(СписокДокументов).Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах(СписокДокументов).Выбрать();
	
	ФорматСЗВ_ИСХ = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_ИСХ");
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		ФорматСЗВ_ИСХ.Страхователь.Значение.Удалить("УТ__КПП");
		СтрокаПоляКПП = ФорматСЗВ_ИСХ.Страхователь.Поля.Найти("УТ__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_ИСХ.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	
	ФорматВыплаты = Новый Структура("Выплаты", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_ИСХ.Выплаты));
	ФорматСЗВ_ИСХ.Удалить("Выплаты");
	
	ФорматНачисления = Новый Структура("Начисления", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_ИСХ.Начисления));
	ФорматСЗВ_ИСХ.Удалить("Начисления");
	
	ФорматУплата = Новый Структура("Уплата", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_ИСХ.Уплата));
	ФорматСЗВ_ИСХ.Удалить("Уплата");
	
	ФорматВыплатыДТ = Новый Структура("ВыплатыДТ", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_ИСХ.ВыплатыДТ));
	ФорматСЗВ_ИСХ.Удалить("ВыплатыДТ");
	
	ФорматСтажевыйПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_ИСХ.СтажевыйПериод.Значение);
	ФорматСЗВ_ИСХ.Удалить("СтажевыйПериод");
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные страхователя
		НаборЗаписейСтрахователь = ФорматСЗВ_ИСХ.Страхователь.Значение;
		НаборЗаписейСтрахователь.ИС__Наименование = ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
		НаборЗаписейСтрахователь.УТ__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
		НаборЗаписейСтрахователь.УТ__ИНН = ВыборкаПоШапкеДокумента.ИНН;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
			НаборЗаписейСтрахователь.УТ__КПП = ВыборкаПоШапкеДокумента.КПП;
		КонецЕсли;
		
		// Данные по физлицу
		НаборЗаписейФИО = ФорматСЗВ_ИСХ.ФИО.Значение;
		НаборЗаписейФИО.УТ__Фамилия = ВРег(СокрЛП(ВыборкаПоРаботникам.Фамилия));
		НаборЗаписейФИО.УТ__Имя = ВРег(СокрЛП(ВыборкаПоРаботникам.Имя));
		НаборЗаписейФИО.УТ__Отчество = ВРег(СокрЛП(ВыборкаПоРаботникам.Отчество));
		
		ФорматСЗВ_ИСХ.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		
		НаборЗаписейДоговор = ФорматСЗВ_ИСХ.Договор.Значение;
		НаборЗаписейДоговор.Тип.Значение = ВыборкаПоРаботникам.ТипДоговора;
		НаборЗаписейДоговор.Тип.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора);
		НаборЗаписейДоговор.Реквизиты.Значение.УТ__Дата = ВыборкаПоРаботникам.ДатаДоговора;
		НаборЗаписейДоговор.Реквизиты.Значение.УТ__Номер = ВыборкаПоРаботникам.НомерДоговора;
		НаборЗаписейДоговор.Реквизиты.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора);
		ФорматСЗВ_ИСХ.Договор.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТипДоговора) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерДоговора);
		
		ФорматСЗВ_ИСХ.КодДТ.Значение = ?(ВыборкаПоРаботникам.ДополнительныйТариф, "АВИА", "");
		ФорматСЗВ_ИСХ.КодДТ.НеВыводитьВФайл = Не ВыборкаПоРаботникам.ДополнительныйТариф;
		
		// Отчетный период
		НаборЗаписейОтчетныйПериод = ФорматСЗВ_ИСХ.ОтчетныйПериод.Значение;
		НаборЗаписейОтчетныйПериод.Код = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		НаборЗаписейОтчетныйПериод.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		
		УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-ИСХ", "");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_ИСХ);
		
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
		
		СписокМесяцев = Новый Массив;
		КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		ПоследнийМесяц  = Месяц(ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		// Выплаты
		УзелВыплаты = Неопределено;
		ВсегоСуммаВыплат = 0;
		ВсегоНеПревышающие = 0;
		ВсегоНеПревышающиеПоГПД = 0;
		ВсегоПревышающие = 0;
		ВсегоПревышающиеПоГПД = 0;
		СписокКатегорий = Новый Массив;
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			Пока ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Цикл 
				НаборЗаписейПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматВыплаты.Выплаты.Значение.Период.Значение);
				НаборЗаписейПериод.Месяц.Значение = КодМесяца;
				НаборЗаписейПериод.Категория.Значение = ВыборкаПоДоходам.КодКатегории;
				НаборЗаписейПериод.Категория.НеВыводитьВФайл = Не ЗначениеЗаполнено(ВыборкаПоДоходам.КодКатегории);
				НаборЗаписейПериод.СуммаВыплат.Значение = ВыборкаПоДоходам.Заработок;
				НаборЗаписейПериод.НеПревышающие.Значение.Всего.Значение = ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
				НаборЗаписейПериод.НеПревышающие.Значение.ПоГПД.Значение = ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
				НаборЗаписейПериод.Превышающие.Значение.Всего.Значение = ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
				НаборЗаписейПериод.Превышающие.Значение.ПоГПД.Значение = ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины = 0 Тогда 
					НаборЗаписейПериод.НеПревышающие.НеВыводитьВФайл = Истина;
				КонецЕсли;
				Если ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0 Тогда 
					НаборЗаписейПериод.Превышающие.НеВыводитьВФайл = Истина;
				КонецЕсли;
				ВсегоСуммаВыплат = ВсегоСуммаВыплат + ВыборкаПоДоходам.Заработок;
				ВсегоНеПревышающие = ВсегоНеПревышающие + ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
				ВсегоНеПревышающиеПоГПД = ВсегоНеПревышающиеПоГПД + ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
				ВсегоПревышающие = ВсегоПревышающие + ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
				ВсегоПревышающиеПоГПД = ВсегоПревышающиеПоГПД + ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
				Если УзелВыплаты = Неопределено Тогда 
					УзелВыплаты = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "Выплаты", "");
				КонецЕсли;
				УзелПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелВыплаты, "Период", "");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелПериод, НаборЗаписейПериод);
				СписокКатегорий.Добавить(ВыборкаПоДоходам.КодКатегории);
			КонецЦикла;
		КонецЦикла;
		Если УзелВыплаты <> Неопределено Тогда
			НаборЗаписейВсего = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматВыплаты.Выплаты.Значение.Всего.Значение);
			СписокКатегорий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокКатегорий);
			Если СписокКатегорий.Количество() = 1 Тогда 
				НаборЗаписейВсего.Категория.Значение = СписокКатегорий[0];
			КонецЕсли;
			НаборЗаписейВсего.Категория.НеВыводитьВФайл = Не ЗначениеЗаполнено(НаборЗаписейВсего.Категория.Значение);
			НаборЗаписейВсего.СуммаВыплат.Значение = ВсегоСуммаВыплат;
			НаборЗаписейВсего.НеПревышающие.Значение.Всего.Значение = ВсегоНеПревышающие;
			НаборЗаписейВсего.НеПревышающие.Значение.ПоГПД.Значение = ВсегоНеПревышающиеПоГПД;
			НаборЗаписейВсего.Превышающие.Значение.Всего.Значение = ВсегоПревышающие;
			НаборЗаписейВсего.Превышающие.Значение.ПоГПД.Значение = ВсегоПревышающиеПоГПД;
			Если ВсегоНеПревышающие = 0 Тогда 
				НаборЗаписейВсего.НеПревышающие.НеВыводитьВФайл = Истина;
			КонецЕсли;
			Если ВсегоПревышающие = 0 Тогда 
				НаборЗаписейВсего.Превышающие.НеВыводитьВФайл = Истина;
			КонецЕсли;
			УзелВсего = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелВыплаты, "Всего", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелВсего, НаборЗаписейВсего);
		КонецЕсли;
		
		// Начисленные взносы
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
		Если ВыборкаПоНачисленнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
			НаборЗаписейНачисления = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматНачисления);
			НаборЗаписейНачисленныеВзносы = НаборЗаписейНачисления.Начисления.Значение;
			Если ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20010101' Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВстрахователя <> 0 Или ВыборкаПоНачисленнымВзносам.СВизЗаработка <> 0;
				НаборЗаписейНачисленныеВзносы.СВстрахователя.Значение = ВыборкаПоНачисленнымВзносам.СВстрахователя;
				НаборЗаписейНачисленныеВзносы.СВизЗаработка.Значение = ВыборкаПоНачисленнымВзносам.СВизЗаработка;
				НаборЗаписейНачисленныеВзносы.СВпоТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоДопТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Страховая.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Накопительная.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоТарифуНеПревышающие.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20020101' Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВпоДопТарифу <> 0 Или ВыборкаПоНачисленнымВзносам.СВпоДопТарифу <> 0;
				НаборЗаписейНачисленныеВзносы.СВпоТарифу.Значение = ВыборкаПоНачисленнымВзносам.СВстрахователя;
				НаборЗаписейНачисленныеВзносы.СВпоДопТарифу.Значение = ВыборкаПоНачисленнымВзносам.СВизЗаработка;
				НаборЗаписейНачисленныеВзносы.СВстрахователя.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВизЗаработка.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Страховая.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Накопительная.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоТарифуНеПревышающие.НеВыводитьВФайл = Истина;
			ИначеЕсли ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20140101'Тогда 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.Страховая <> 0 Или ВыборкаПоНачисленнымВзносам.Накопительная <> 0;
				НаборЗаписейНачисленныеВзносы.Страховая.Значение = ВыборкаПоНачисленнымВзносам.Страховая;
				НаборЗаписейНачисленныеВзносы.Накопительная.Значение = ВыборкаПоНачисленнымВзносам.Накопительная;
				НаборЗаписейНачисленныеВзносы.СВстрахователя.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВизЗаработка.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоДопТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоТарифуНеПревышающие.НеВыводитьВФайл = Истина;
			Иначе 
				ВыводитьВФайл = ВыборкаПоНачисленнымВзносам.СВпоТарифуНеПревышающие <> 0;
				НаборЗаписейНачисленныеВзносы.СВпоТарифуНеПревышающие.Значение = ВыборкаПоНачисленнымВзносам.СВпоТарифуНеПревышающие;
				НаборЗаписейНачисленныеВзносы.СВстрахователя.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВизЗаработка.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.СВпоДопТарифу.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Страховая.НеВыводитьВФайл = Истина;
				НаборЗаписейНачисленныеВзносы.Накопительная.НеВыводитьВФайл = Истина;
			КонецЕсли;
			Если ВыводитьВФайл Тогда 
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейНачисления);
			КонецЕсли;
		КонецЕсли;
		
		// Уплаченные взносы
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
		Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
			НаборЗаписейУплата = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматУплата);
			НаборЗаписейУплата.Уплата.Значение.Страховая.Значение = ВыборкаПоУплаченнымВзносам.УплаченоСтраховая;
			НаборЗаписейУплата.Уплата.Значение.Накопительная.Значение = ВыборкаПоУплаченнымВзносам.УплаченоНакопительная;
			Если ВыборкаПоУплаченнымВзносам.УплаченоСтраховая <> 0 Или ВыборкаПоУплаченнымВзносам.УплаченоНакопительная <> 0 Тогда 
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейУплата);
			КонецЕсли;
		КонецЕсли;
		
		// ВыплатыДТ
		УзелВыплатыДТ = Неопределено;
		ВсегоДопТарифП1 = 0;
		ВсегоДопТарифП2_18 = 0;
		СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
		Для Каждого КодМесяца Из СписокМесяцев Цикл 
			СтруктураПоиска.КодМесяца = КодМесяца;
			НаборЗаписейПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматВыплатыДТ.ВыплатыДТ.Значение.Период.Значение);
			НаборЗаписейПериод.Месяц.Значение = КодМесяца;
			Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
				НаборЗаписейПериод.КодСОУТ.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
				НаборЗаписейПериод.ИС__ДопТарифП1.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				НаборЗаписейПериод.ИС__ДопТарифП2_18.Значение = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				ВсегоДопТарифП1 = ВсегоДопТарифП1 + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				ВсегоДопТарифП2_18 = ВсегоДопТарифП2_18 + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				Если УзелВыплатыДТ = Неопределено Тогда 
					УзелВыплатыДТ = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "ВыплатыДТ", "");
					УзелВсего = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелВыплатыДТ, "Всего", "");
				КонецЕсли;
				УзелПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелВыплатыДТ, "Период", "");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелПериод, НаборЗаписейПериод);
			КонецЕсли;
		КонецЦикла;
		Если УзелВыплатыДТ <> Неопределено Тогда
			НаборЗаписейВсего = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматВыплатыДТ.ВыплатыДТ.Значение.Всего.Значение);
			НаборЗаписейВсего.ИС__ДопТарифП1.Значение = ВсегоДопТарифП1;
			НаборЗаписейВсего.ИС__ДопТарифП2_18.Значение = ВсегоДопТарифП2_18;
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелВсего, НаборЗаписейВсего);
		КонецЕсли;
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелФормы, ФорматСтажевыйПериод, ВыборкаПоРаботникам);
		
	КонецЦикла;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) 	
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.ИС__ЛьготныйСтаж.НеВыводитьВФайл = Истина;
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПерсонифицированныйУчет.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			ФорматСтажевыйПериод.ИС__ЛьготныйСтаж.НеВыводитьВФайл = Истина;

			УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			ВыводитьЛьготныйСтаж = Ложь;
			
			НаборЗаписейЛьготныйСтаж = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматЛьготныйСтаж);
			НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Ложь;
			НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Ложь;
			НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Ложь;
			НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.НеВыводитьВФайл = Ложь;
			НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Ложь;
			
			// ДопСведенияИС
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.НеВыводитьВФайл = Истина;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
				И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
				
				НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Истина;
				НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;
				НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Истина;
				НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Истина;
				
			Иначе
				НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
				// Территориальные условия
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
					НаборЗаписейТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС__ТУ);
				Иначе
					НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Истина;	
				КонецЕсли;	
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС__Основание);
				
				// Особые условия труда
				НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;

				НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Ложь;
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
					НаборЗаписейОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ИС__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ИС__Код);
				Иначе
					НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Истина;
				КонецЕсли;	
				
				// Исчисляемый стаж
				НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод) Тогда
					НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
				Иначе
					НаборЗаписейИсчисляемыйСтаж.ИС__Основание.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Ложь;
				НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
				НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
				
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
						НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;		
				КонецЕсли;	

				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение);
				
				// Выслуга лет
				НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
				НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Ложь;	
				НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
				НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
				
					НаборЗаписейВыслугаЛет.ИС__Основание.Значение = ВРег(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
						НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
						НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
						НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Истина;	
				КонецЕсли;	
					
			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж","");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			КонецЕсли;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
				
				// В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВыводитьЛьготныйСтаж = Ложь;
				
				НаборЗаписейЛьготныйСтаж = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматЛьготныйСтаж);
				НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Ложь;
				НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Ложь;
				НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Ложь;
				НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.НеВыводитьВФайл = Ложь;
				НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Ложь;
				
				// ДопСведенияИС
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.НеВыводитьВФайл = Истина;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
					И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
					
					НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Истина;
					НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;
					НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Истина;
					НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Истина;
					
				Иначе
					НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
					// Территориальные условия
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
						НаборЗаписейТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
						ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхТеррУсловий(ВыборкаПоРаботникам.ТерриториальныеУсловия, ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка, НаборЗаписейЛьготныйСтаж.ИС__ТУ);
					Иначе
						НаборЗаписейЛьготныйСтаж.ИС__ТУ.НеВыводитьВФайл = Истина;	
					КонецЕсли;	
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС__Основание);
					
					// Особые условия труда
					НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;

					НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Ложь;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
						НаборЗаписейОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
						НаборЗаписейОсобыеУсловияТруда.ИС__ПозицияСписка = ВРег(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
						ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ИС__Код);
					Иначе
						НаборЗаписейЛьготныйСтаж.ИС__ОУТ.НеВыводитьВФайл = Истина;
					КонецЕсли;	
					
					// Исчисляемый стаж
					НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод) Тогда
						НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
					Иначе
						НаборЗаписейИсчисляемыйСтаж.ИС__Основание.НеВыводитьВФайл = Истина;
					КонецЕсли;
					
					НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Ложь;
					НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
					НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
					
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
						НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;
					ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
							НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
							НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
							НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
							НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
							НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
							НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
							НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
						Иначе
							НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
							НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						КонецЕсли;
						ВыводитьЛьготныйСтаж = Истина;
					Иначе
						НаборЗаписейЛьготныйСтаж.ИС__ИС.НеВыводитьВФайл = Истина;		
					КонецЕсли;
					
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение);
					
					// Выслуга лет
					НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
					НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Ложь;	
					НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
					НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
					
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
						НаборЗаписейВыслугаЛет.ИС__Основание.Значение = ВРег(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
						ПерсонифицированныйУчет.ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет, НаборЗаписейВыслугаЛет);
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
							НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
							НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
							НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
							НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
							НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.НеВыводитьВФайл = Истина;
							НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
							НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
							НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
						Иначе
							НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.НеВыводитьВФайл = Истина;
							НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
							НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
							НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
						КонецЕсли;
						ВыводитьЛьготныйСтаж = Истина;
					Иначе
						НаборЗаписейЛьготныйСтаж.ИС__ВЛ.НеВыводитьВФайл = Истина;	
					КонецЕсли;	
						
				КонецЕсли;
				
				Если ВыводитьЛьготныйСтаж Тогда 
					УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж", "");
					ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор);
	
	ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
	
	ОписаниеВыгруженногоФайла.Владелец = Ссылка;
	ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
	ОписаниеВыгруженногоФайла.ПроверятьCheckXML = Ложь;
	ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
	
	ВыгруженныеФайлы = Новый Массив;
	ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	
	Возврат ВыгруженныеФайлы;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаСЗВ_ИСХ";
	КомандаПечати.Представление = НСтр("ru = 'СЗВ-ИСХ'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "ЗарплатаКадрыКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Идентификатор = "ПФ_MXL_ФормаОДВ_1";
	КомандаПечати.Представление = НСтр("ru = 'ОДВ-1'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаСЗВ_ИСХ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаСЗВ_ИСХ", 
			"СЗВ-ИСХ", 
			ПечатнаяФормаСЗВ_ИСХ(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ФормаОДВ_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ФормаОДВ_1", 
			"ОДВ-1", 
			ПерсонифицированныйУчет.ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ"));
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросПоШапкеДляПечати(СписокДокументов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = СписокДокументов;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЗаработкеСтаже.Ссылка КАК Ссылка,
	|	СведенияОЗаработкеСтаже.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОЗаработкеСтаже.ОтчетныйПериод,
	|	СведенияОЗаработкеСтаже.ОкончаниеОтчетногоПериода,
	|	СведенияОЗаработкеСтаже.Руководитель КАК Руководитель,
	|	СведенияОЗаработкеСтаже.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОЗаработкеСтаже.Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОЗаработкеСтаже.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	СведенияОЗаработкеСтаже.КПП КАК КПП,
	|	СведенияОЗаработкеСтаже.ИНН КАК ИНН,
	|	СведенияОЗаработкеСтаже.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ КАК СведенияОЗаработкеСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО СведенияОЗаработкеСтаже.Организация = СведенияОбОрганизациях.Организация
	|			И СведенияОЗаработкеСтаже.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|ГДЕ
	|	СведенияОЗаработкеСтаже.Ссылка В(&СписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода,
	|	ЕСТЬNULL(ВТФИОПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.ОтчетныйПериод УБЫВ,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати(СписокДокументов) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка.ОтчетныйПериод КАК ОтчетныйПериод,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	Сотрудники.Фамилия КАК Фамилия,
	|	Сотрудники.Имя КАК Имя,
	|	Сотрудники.Отчество КАК Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ТипДоговора КАК ТипДоговора,
	|	Сотрудники.НомерДоговора КАК НомерДоговора,
	|	Сотрудники.ДатаДоговора КАК ДатаДоговора,
	|	Сотрудники.ДополнительныйТариф КАК ДополнительныйТариф,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ОтчетныйПериод МЕЖДУ ДАТАВРЕМЯ(2002, 1, 1) И ДАТАВРЕМЯ(2008, 12, 31, 23, 59, 59)
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиОСтаже.ОсобыеУсловияТруда КАК Справочник.ОсобыеУсловияТрудаПФР).КодДляОтчетности2002
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ОтчетныйПериод МЕЖДУ ДАТАВРЕМЯ(2002, 1, 1) И ДАТАВРЕМЯ(2008, 12, 31, 23, 59, 59)
	|			ТОГДА ВЫРАЗИТЬ(ЗаписиОСтаже.ОснованиеВыслугиЛет КАК Справочник.ОснованияДосрочногоНазначенияПенсии).КодДляОтчетности2002
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия КАК Фамилия,
	|	СотрудникиДокумента.Имя КАК Имя,
	|	СотрудникиДокумента.Отчество КАК Отчество,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	|			ТОГДА 1
	|		КОГДА СотрудникиДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	|			ТОГДА 2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипДоговора,
	|	СотрудникиДокумента.НомерДоговора КАК НомерДоговора,
	|	СотрудникиДокумента.ДатаДоговора КАК ДатаДоговора,
	|	СотрудникиДокумента.ДополнительныйТариф КАК ДополнительныйТариф
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И СотрудникиДокумента.ИдентификаторСтрокиСотрудника = ЗаписиОСтаже.ИдентификаторСтрокиСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоЗаработкуДляПечати(СписокДокументов)
	
	ТаблицаКодовКатегорий = Новый ТаблицаЗначений;
	ТаблицаКодовКатегорий.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(10)));
	ТаблицаКодовКатегорий.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицДляПФР"));
	Для каждого Элемент Из Перечисления.КатегорииЗастрахованныхЛицДляПФР Цикл
		НоваяСтрока = ТаблицаКодовКатегорий.Добавить();
		НоваяСтрока.Код = ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент);                            
		НоваяСтрока.Категория = Элемент;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ТаблицаКодовКатегорий",	ТаблицаКодовКатегорий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКодовКатегорий.Код КАК КодКатегории,
	|	ТаблицаКодовКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТКодыКатегорий
	|ИЗ
	|	&ТаблицаКодовКатегорий КАК ТаблицаКодовКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЕСТЬNULL(СведенияОЗаработке.Заработок, 0) КАК Заработок,
	|	ЕСТЬNULL(СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины, 0) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины, 0) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины, 0) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ЕСТЬNULL(СведенияОЗаработке.ПоДоговорамГПХСвышеПредельнойВеличины, 0) КАК ПоДоговорамГПХСвышеПредельнойВеличины,
	|	КодыКатегорий.КодКатегории КАК КодКатегории
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СведенияОЗаработке КАК СведенияОЗаработке
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорий КАК КодыКатегорий
	|			ПО СведенияОЗаработке.КатегорияЗастрахованныхЛиц = КодыКатегорий.Категория
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.Сотрудник
	|			И Сотрудники.ИдентификаторСтрокиСотрудника = СведенияОЗаработке.ИдентификаторСтрокиСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(СписокДокументов) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	СведенияОЗаработке.КодМесяца КАК КодМесяца,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|			ТОГДА ""О4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|			ТОГДА ""В3.4""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|			ТОГДА ""В3.3""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|			ТОГДА ""В3.2""
	|		КОГДА СведенияОЗаработке.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|			ТОГДА ""В3.1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодКлассаУсловийТруда,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.КодМесяца ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	СведенияОЗаработке.КлассУсловийТруда КАК КлассУсловийТруда,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОЗаработке.Сотрудник
	|			И Сотрудники.ИдентификаторСтрокиСотрудника = СведенияОЗаработке.ИдентификаторСтрокиСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОЗаработке.НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ЗапросПоНачисленнымВзносам(СписокДокументов)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	ЕСТЬNULL(НачисленныеВзносы.СВпоТарифуНеПревышающие, 0) КАК СВпоТарифуНеПревышающие,
	|	ЕСТЬNULL(НачисленныеВзносы.Страховая, 0) КАК Страховая,
	|	ЕСТЬNULL(НачисленныеВзносы.Накопительная, 0) КАК Накопительная,
	|	ЕСТЬNULL(НачисленныеВзносы.СВстрахователя, 0) КАК СВстрахователя,
	|	ЕСТЬNULL(НачисленныеВзносы.СВизЗаработка, 0) КАК СВизЗаработка,
	|	ЕСТЬNULL(НачисленныеВзносы.СВпоТарифу, 0) КАК СВпоТарифу,
	|	ЕСТЬNULL(НачисленныеВзносы.СВпоДопТарифу, 0) КАК СВпоДопТарифу
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.НачисленныеВзносы КАК НачисленныеВзносы
	|		ПО Сотрудники.Ссылка = НачисленныеВзносы.Ссылка
	|			И Сотрудники.Сотрудник = НачисленныеВзносы.Сотрудник
	|			И Сотрудники.ИдентификаторСтрокиСотрудника = НачисленныеВзносы.ИдентификаторСтрокиСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	НачисленныеВзносы.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСведениямОбУплаченныхВзносах(СписокДокументов)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	Сотрудники.ИдентификаторСтрокиСотрудника КАК ИдентификаторСтрокиСотрудника,
	|	ЕСТЬNULL(СведенияОбУплаченныхВзносах.УплаченоСтраховая, 0) КАК УплаченоСтраховая,
	|	ЕСТЬNULL(СведенияОбУплаченныхВзносах.УплаченоНакопительная, 0) КАК УплаченоНакопительная
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.СведенияОбУплаченныхВзносах КАК СведенияОбУплаченныхВзносах
	|		ПО Сотрудники.Ссылка = СведенияОбУплаченныхВзносах.Ссылка
	|			И Сотрудники.Сотрудник = СведенияОбУплаченныхВзносах.Сотрудник
	|			И Сотрудники.ИдентификаторСтрокиСотрудника = СведенияОбУплаченныхВзносах.ИдентификаторСтрокиСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудники.Ссылка.ОтчетныйПериод УБЫВ,
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	СведенияОбУплаченныхВзносах.НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПечатнаяФормаСЗВ_ИСХ(МассивОбъектов, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ПФ_MXL_ФормаСЗВ_ИСХ");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_ИСХ";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьСтраница1 = Макет.ПолучитьОбласть("Страница1");
	ОбластьСтрокаРаздела4 = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ОбластьИтогоРаздел4 = Макет.ПолучитьОбласть("ИтогоРаздел4");
	ОбластьРаздел5 = Макет.ПолучитьОбласть("Раздел5");
	ОбластьСтраница2 = Макет.ПолучитьОбласть("Страница2");
	ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
	ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходам = ЗапросПоЗаработкуДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходамНаВредныхИТяжелыхРаботах = ЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоНачисленнымВзносам = ЗапросПоНачисленнымВзносам(МассивОбъектов).Выбрать();
	ВыборкаПоУплаченнымВзносам = ЗапросПоСведениямОбУплаченныхВзносах(МассивОбъектов).Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	ПорядокМесяцев = ПерсонифицированныйУчетКлиентСервер.ПорядокМесяцевСЗВ_КОРР();
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
			
		СписокМесяцев = Новый Массив;
		КодыМесяцев = ПерсонифицированныйУчетКлиентСервер.КодыМесяцевСЗВ_КОРР();
		ПервыйМесяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
		ПоследнийМесяц  = Месяц(ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		Для Сч = ПервыйМесяц По ПоследнийМесяц Цикл 
			СписокМесяцев.Добавить(КодыМесяцев[Сч]);
		КонецЦикла;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				Если ЭтоПервыйДокументКоллекции Тогда
					ЭтоПервыйДокументКоллекции = Ложь;	
				Иначе
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				
				ОчиститьОбласть(ОбластьСтраница1);
				ОчиститьОбласть(ОбластьСтрокаРаздела4);
				ОчиститьОбласть(ОбластьИтогоРаздел4);
				ОчиститьОбласть(ОбластьРаздел5);
				ОчиститьОбласть(ОбластьСтраница2);
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ОчиститьОбласть(ОбластьСтрокаКодПозицииСписка);
				ОчиститьОбласть(ОбластьПодвал);
				
				РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
				РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьКолонтитул, "НомРег", 12);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьСтраница1, "НомРег", 12, 13);
				
				ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьКолонтитул, "ИНН", 12);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьСтраница1, "ИНН", 12, 13);
				
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьКолонтитул, "КПП", 9);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьСтраница1, "КПП", 9, 10);
				
				НомерСтраницы = 1;
				НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
				
				ОбластьСтраница1.Параметры.КодПериода = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
				
				ОбластьСтраница1.Параметры.Год = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
				
				ОбластьСтраница1.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
				ОбластьСтраница1.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
				
				ЗаполнитьЗначенияСвойств(ОбластьСтраница1.Параметры, ВыборкаПоРаботникам);
				ОбластьСтраница1.Параметры.ТипДоговора = ?(ВыборкаПоРаботникам.ТипДоговора = 1, "трудовой", "гражданско-правовой");
				ОбластьСтраница1.Параметры.КодДТ = ?(ВыборкаПоРаботникам.ДополнительныйТариф, "АВИА", "");
				
				ДокументРезультат.Вывести(ОбластьШапка);
				ДокументРезультат.Вывести(ОбластьКолонтитул);
				ДокументРезультат.Вывести(ОбластьСтраница1);
				
				// Раздел 4
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
				
				КодыКатегорий = Новый Массив;
				
				Заработок = 0;
				ОблагаетсяВзносамиДоПредельнойВеличины = 0;
				ПоДоговорамГПХДоПредельнойВеличины = 0;
				ОблагаетсяВзносамиСвышеПредельнойВеличины = 0;
				ПоДоговорамГПХСвышеПредельнойВеличины = 0;
				
				Для Сч = 1 По 12 Цикл 
				    ОчиститьОбласть(ОбластьСтрокаРаздела4);
					ОбластьСтрокаРаздела4.Параметры.Месяц = Формат(Дата(2010, Сч, 1), "ДФ=""ММММ""");
					Если Сч >= ПервыйМесяц И Сч <= ПоследнийМесяц Тогда  
						СтруктураПоиска.КодМесяца = КодыМесяцев[Сч];
						ВыводитьПустуюСтроку = Истина;
						Пока ВыборкаПоДоходам.НайтиСледующий(СтруктураПоиска) Цикл
							ВыводитьПустуюСтроку = Ложь;
							ОбластьСтрокаРаздела4.Параметры.КодКатегории = ВыборкаПоДоходам.КодКатегории;
							ОбластьСтрокаРаздела4.Параметры.Заработок = ВыборкаПоДоходам.Заработок;
							ОбластьСтрокаРаздела4.Параметры.ОблагаетсяВзносамиДоПредельнойВеличины = ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ПоДоговорамГПХДоПредельнойВеличины = ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ОблагаетсяВзносамиСвышеПредельнойВеличины = ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
							ОбластьСтрокаРаздела4.Параметры.ПоДоговорамГПХСвышеПредельнойВеличины = ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
							ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
							// Расчет итогов
							КодыКатегорий.Добавить(ВыборкаПоДоходам.КодКатегории);
							Заработок = Заработок + ВыборкаПоДоходам.Заработок;
							ОблагаетсяВзносамиДоПредельнойВеличины = ОблагаетсяВзносамиДоПредельнойВеличины + ВыборкаПоДоходам.ОблагаетсяВзносамиДоПредельнойВеличины;
							ПоДоговорамГПХДоПредельнойВеличины = ПоДоговорамГПХДоПредельнойВеличины + ВыборкаПоДоходам.ПоДоговорамГПХДоПредельнойВеличины;
							ОблагаетсяВзносамиСвышеПредельнойВеличины = ОблагаетсяВзносамиСвышеПредельнойВеличины + ВыборкаПоДоходам.ОблагаетсяВзносамиСвышеПредельнойВеличины;
							ПоДоговорамГПХСвышеПредельнойВеличины = ПоДоговорамГПХСвышеПредельнойВеличины + ВыборкаПоДоходам.ПоДоговорамГПХСвышеПредельнойВеличины;
						КонецЦикла;
						Если ВыводитьПустуюСтроку Тогда 
							ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
						КонецЕсли;
					Иначе 
						ДокументРезультат.Вывести(ОбластьСтрокаРаздела4);
					КонецЕсли;
				КонецЦикла;
				
				ОбластьИтогоРаздел4.Параметры.Заработок = Заработок;
				ОбластьИтогоРаздел4.Параметры.ОблагаетсяВзносамиДоПредельнойВеличины = ОблагаетсяВзносамиДоПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ПоДоговорамГПХДоПредельнойВеличины = ПоДоговорамГПХДоПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ОблагаетсяВзносамиСвышеПредельнойВеличины = ОблагаетсяВзносамиСвышеПредельнойВеличины;
				ОбластьИтогоРаздел4.Параметры.ПоДоговорамГПХСвышеПредельнойВеличины = ПоДоговорамГПХСвышеПредельнойВеличины;
				
				КодыКатегорийСотрудника = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыКатегорий);
				Если КодыКатегорийСотрудника.Количество() = 1 Тогда 
					ОбластьИтогоРаздел4.Параметры.КодКатегории = КодыКатегорийСотрудника[0];
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьИтогоРаздел4);
				
				// Раздел 5
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
				
				Если ВыборкаПоНачисленнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьРаздел5.Параметры, ВыборкаПоНачисленнымВзносам);
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьРаздел5);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
				ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
				ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
				
				НомерСтраницы = 2;
				НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
				ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
				ТекущийЛист.Вывести(ОбластьКолонтитул);
				
				// Раздел 6
				Если ВыборкаПоУплаченнымВзносам.НайтиСледующий(СтруктураПоиска) Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтраница2.Параметры, ВыборкаПоУплаченнымВзносам);
				КонецЕсли;
				
				// Раздел 7
				СтруктураПоиска = Новый Структура("Ссылка, ИдентификаторСтрокиСотрудника, КодМесяца");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
				
				ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = 0;
				ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = 0;
				
				Для Сч = 1 По 3 Цикл
					КодМесяца = СписокМесяцев[Сч - 1];
					СтруктураПоиска.КодМесяца = КодМесяца;
					Если ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.НайтиСледующий(СтруктураПоиска) Тогда
						ОбластьСтраница2.Параметры["КодКлассаУсловийТруда" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.КодКлассаУсловийТруда;
						ОбластьСтраница2.Параметры["ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
						ОбластьСтраница2.Параметры["ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах" + Сч] = ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
						ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
						ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах + ВыборкаПоДоходамНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
					КонецЕсли;
				КонецЦикла;
				
				ОбластьСтраница2.Параметры.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах = ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах;
				ОбластьСтраница2.Параметры.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах = ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах;
				
				ТекущийЛист.Вывести(ОбластьСтраница2);
				
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
						ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда 
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаКодПозицииСписка.Параметры, ВыборкаПоРаботникам);
							ВывестиОбласть(ОбластьСтрокаКодПозицииСписка, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
							ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЦикла;	
					КонецЦикла;
				Иначе
					ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
				ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				ДокументРезультат.Вывести(ТекущийЛист);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка) Тогда 
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Строка(ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод) + " " + ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка;
	КонецЕсли;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПерсонифицированныйУчет.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПерсонифицированныйУчет.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = ДокументРезультат.ПолеСлева;
	ТекущийЛист.ПолеСправа = ДокументРезультат.ПолеСправа;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	ОбластьКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьКолонтитул, "НомРег", 12);
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3);
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 3);
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(ИНН, ОбластьКолонтитул, "ИНН", 12);
	
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьКолонтитул, "КПП", 9);
	
	ТекущийЛист.Вывести(ОбластьКолонтитул);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли